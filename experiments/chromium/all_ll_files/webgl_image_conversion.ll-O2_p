; ModuleID = '../../third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WebGLImageConversion::PixelStoreParams" = type { i32, i32, i32, i32, i32, i32 }
%"class.blink::WebGLImageConversion::ImageExtractor" = type { %"class.blink::Image"*, %"class.absl::optional", i32, i32, i32, i32, i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::ImagePixelLocker" }
%"class.blink::ImagePixelLocker" = type { %class.sk_sp, i8*, %"class.WTF::Vector" }
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.189, i32, i32 }
%class.sk_sp.189 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.190" }
%"struct.std::__1::atomic.190" = type { %"struct.std::__1::__atomic_base.191" }
%"struct.std::__1::__atomic_base.191" = type { %"struct.std::__1::__atomic_base.192" }
%"struct.std::__1::__atomic_base.192" = type { %"struct.std::__1::__cxx_atomic_impl.193" }
%"struct.std::__1::__cxx_atomic_impl.193" = type { %"struct.std::__1::__cxx_atomic_base_impl.194" }
%"struct.std::__1::__cxx_atomic_base_impl.194" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Image" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i8, %class.scoped_refptr, %"class.blink::WeakPersistent", i32, i8, %"class.std::__1::unique_ptr.183" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%class.scoped_refptr = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted", i64, %"class.WTF::Vector", %"class.WTF::Vector.1" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3" }
%"class.WTF::VectorBufferBase.3" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ImageObserver"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ImageObserver" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.6", i32, [4 x i8], %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.138", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.172", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.179", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.118", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i64 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::Worklist.49"* }
%"class.blink::Worklist.49" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::Worklist.56"* }
%"class.blink::Worklist.56" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist.91"* }
%"class.blink::Worklist.91" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.98", %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.112", [4 x i8] }>
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { i64 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { float }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.121", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.130" }
%"class.WTF::Vector.130" = type { %"class.WTF::VectorBuffer.131" }
%"class.WTF::VectorBuffer.131" = type { %"class.WTF::VectorBufferBase.132" }
%"class.WTF::VectorBufferBase.132" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.146" }
%"class.WTF::VectorBuffer.146" = type { %"class.WTF::VectorBufferBase.147" }
%"class.WTF::VectorBufferBase.147" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.49"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.56"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.77"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.195" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.178 }
%class.scoped_refptr.178 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.179" = type { %"struct.std::__1::__atomic_base.180" }
%"struct.std::__1::__atomic_base.180" = type { %"struct.std::__1::__cxx_atomic_impl.181" }
%"struct.std::__1::__cxx_atomic_impl.181" = type { %"struct.std::__1::__cxx_atomic_base_impl.182" }
%"struct.std::__1::__cxx_atomic_base_impl.182" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::DarkModeImageCache"* }
%"class.blink::DarkModeImageCache" = type opaque
%class.sk_sp.200 = type { %class.SkImage* }
%"class.cc::PaintImage" = type { %class.sk_sp.200, %class.sk_sp.201, %"class.gfx::Rect", i32, %class.sk_sp.206, %class.sk_sp.214, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.200, %class.scoped_refptr.215 }
%class.sk_sp.201 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.202", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { i8* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.206 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.207" }
%"class.std::__1::vector.207" = type { %"class.std::__1::__vector_base.208" }
%"class.std::__1::__vector_base.208" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.209" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.214 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr.215 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.216", [4 x i8] }>
%"class.base::RefCountedThreadSafe.216" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::ColorBehavior" = type { i32 }
%class.SkBitmap = type { %class.sk_sp.226, %class.SkPixmap, %class.sk_sp.227 }
%class.sk_sp.226 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.227 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.blink::SegmentReader" = type <{ i32 (...)**, %"class.WTF::ThreadSafeRefCounted.221", [4 x i8] }>
%"class.WTF::ThreadSafeRefCounted.221" = type { %"class.base::RefCountedThreadSafe.222" }
%"class.base::RefCountedThreadSafe.222" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::ImageDecoder" = type { i32 (...)**, %class.scoped_refptr.220, %"class.WTF::Vector.223", i8, i32, %"class.blink::ColorBehavior", %"class.blink::ImageOrientation", %"class.blink::IntSize", i64, i8, %"class.std::__1::unique_ptr.230", i8, %"class.blink::IntSize", i8, i8, i8, %"class.std::__1::unique_ptr.236", %class.sk_sp.189, i8, %"class.std::__1::unique_ptr.249" }
%class.scoped_refptr.220 = type { %"class.blink::SegmentReader"* }
%"class.WTF::Vector.223" = type { %"class.WTF::VectorBuffer.224" }
%"class.WTF::VectorBuffer.224" = type { %"class.WTF::VectorBufferBase.225", [128 x i8] }
%"class.WTF::VectorBufferBase.225" = type { %"class.blink::ImageFrame"*, i32, i32 }
%"class.blink::ImageFrame" = type { %class.SkBitmap, %"class.SkBitmap::Allocator"*, i8, i32, %"class.blink::IntRect", i32, %"class.base::TimeDelta", i32, i32, i8, i8, i64 }
%"class.SkBitmap::Allocator" = type { %class.SkRefCnt.base, [4 x i8] }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::ImageOrientation" = type { i8 }
%"class.std::__1::unique_ptr.230" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.blink::ImagePlanes"* }
%"class.blink::ImagePlanes" = type <{ [3 x i8*], [3 x i64], i32, i8, [3 x i8] }>
%"class.blink::IntSize" = type { i32, i32 }
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"class.blink::ColorProfile"* }
%"class.blink::ColorProfile" = type { %struct.skcms_ICCProfile, %"class.std::__1::unique_ptr.240" }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.239, [8 x i8] }
%struct.anon.239 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { i8* }
%"class.std::__1::unique_ptr.249" = type { %"class.std::__1::__compressed_pair.250" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.blink::ColorProfileTransform"* }
%"class.blink::ColorProfileTransform" = type { %struct.skcms_ICCProfile*, %struct.skcms_ICCProfile }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.WTF::Vector.258" = type { %"class.WTF::VectorBuffer.259" }
%"class.WTF::VectorBuffer.259" = type { %"class.WTF::VectorBufferBase.260" }
%"class.WTF::VectorBufferBase.260" = type { i8*, i32, i32 }
%"class.blink::(anonymous namespace)::FormatConverter" = type { %"class.blink::IntRect"*, i32, i32, i8*, i8*, i32, i32, i32, i8, %"class.std::__1::unique_ptr.240" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.265 }
%union.anon.265 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

@_ZN5blink12_GLOBAL__N_112g_base_tableE = internal unnamed_addr constant [512 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 2, i16 4, i16 8, i16 16, i16 32, i16 64, i16 128, i16 256, i16 512, i16 1024, i16 2048, i16 3072, i16 4096, i16 5120, i16 6144, i16 7168, i16 8192, i16 9216, i16 10240, i16 11264, i16 12288, i16 13312, i16 14336, i16 15360, i16 16384, i16 17408, i16 18432, i16 19456, i16 20480, i16 21504, i16 22528, i16 23552, i16 24576, i16 25600, i16 26624, i16 27648, i16 28672, i16 29696, i16 30720, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 31744, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32768, i16 -32767, i16 -32766, i16 -32764, i16 -32760, i16 -32752, i16 -32736, i16 -32704, i16 -32640, i16 -32512, i16 -32256, i16 -31744, i16 -30720, i16 -29696, i16 -28672, i16 -27648, i16 -26624, i16 -25600, i16 -24576, i16 -23552, i16 -22528, i16 -21504, i16 -20480, i16 -19456, i16 -18432, i16 -17408, i16 -16384, i16 -15360, i16 -14336, i16 -13312, i16 -12288, i16 -11264, i16 -10240, i16 -9216, i16 -8192, i16 -7168, i16 -6144, i16 -5120, i16 -4096, i16 -3072, i16 -2048, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024, i16 -1024], align 16
@_ZN5blink12_GLOBAL__N_113g_shift_tableE = internal unnamed_addr constant [512 x i8] calign 16
@_ZN5blink12_GLOBAL__N_116g_mantissa_tableE = internal unnamed_addr constant [2048 x i32] [i32 0, i32 864026624, i32 872415232, i32 876609536, i32 880803840, i32 882900992, i32 884998144, i32 887095296, i32 889192448, i32 890241024, i32 891289600, i32 892338176, i32 893386752, i32 894435328, i32 895483904, i32 896532480, i32 897581056, i32 898105344, i32 898629632, i32 899153920, i32 899678208, i32 900202496, i32 900726784, i32 901251072, i32 901775360, i32 902299648, i32 902823936, i32 903348224, i32 903872512, i32 904396800, i32 904921088, i32 905445376, i32 905969664, i32 906231808, i32 906493952, i32 906756096, i32 907018240, i32 907280384, i32 907542528, i32 907804672, i32 908066816, i32 908328960, i32 908591104, i32 908853248, i32 909115392, i32 909377536, i32 909639680, i32 909901824, i32 910163968, i32 910426112, i32 910688256, i32 910950400, i32 911212544, i32 911474688, i32 911736832, i32 911998976, i32 912261120, i32 912523264, i32 912785408, i32 913047552, i32 913309696, i32 913571840, i32 913833984, i32 914096128, i32 914358272, i32 914489344, i32 914620416, i32 914751488, i32 914882560, i32 915013632, i32 915144704, i32 915275776, i32 915406848, i32 915537920, i32 915668992, i32 915800064, i32 915931136, i32 916062208, i32 916193280, i32 916324352, i32 916455424, i32 916586496, i32 916717568, i32 916848640, i32 916979712, i32 917110784, i32 917241856, i32 917372928, i32 917504000, i32 917635072, i32 917766144, i32 917897216, i32 918028288, i32 918159360, i32 918290432, i32 918421504, i32 918552576, i32 918683648, i32 918814720, i32 918945792, i32 919076864, i32 919207936, i32 919339008, i32 919470080, i32 919601152, i32 919732224, i32 919863296, i32 919994368, i32 920125440, i32 920256512, i32 920387584, i32 920518656, i32 920649728, i32 920780800, i32 920911872, i32 921042944, i32 921174016, i32 921305088, i32 921436160, i32 921567232, i32 921698304, i32 921829376, i32 921960448, i32 922091520, i32 922222592, i32 922353664, i32 922484736, i32 922615808, i32 922746880, i32 922812416, i32 922877952, i32 922943488, i32 923009024, i32 923074560, i32 923140096, i32 923205632, i32 923271168, i32 923336704, i32 923402240, i32 923467776, i32 923533312, i32 923598848, i32 923664384, i32 923729920, i32 923795456, i32 923860992, i32 923926528, i32 923992064, i32 924057600, i32 924123136, i32 924188672, i32 924254208, i32 924319744, i32 924385280, i32 924450816, i32 924516352, i32 924581888, i32 924647424, i32 924712960, i32 924778496, i32 924844032, i32 924909568, i32 924975104, i32 925040640, i32 925106176, i32 925171712, i32 925237248, i32 925302784, i32 925368320, i32 925433856, i32 925499392, i32 925564928, i32 925630464, i32 925696000, i32 925761536, i32 925827072, i32 925892608, i32 925958144, i32 926023680, i32 926089216, i32 926154752, i32 926220288, i32 926285824, i32 926351360, i32 926416896, i32 926482432, i32 926547968, i32 926613504, i32 926679040, i32 926744576, i32 926810112, i32 926875648, i32 926941184, i32 927006720, i32 927072256, i32 927137792, i32 927203328, i32 927268864, i32 927334400, i32 927399936, i32 927465472, i32 927531008, i32 927596544, i32 927662080, i32 927727616, i32 927793152, i32 927858688, i32 927924224, i32 927989760, i32 928055296, i32 928120832, i32 928186368, i32 928251904, i32 928317440, i32 928382976, i32 928448512, i32 928514048, i32 928579584, i32 928645120, i32 928710656, i32 928776192, i32 928841728, i32 928907264, i32 928972800, i32 929038336, i32 929103872, i32 929169408, i32 929234944, i32 929300480, i32 929366016, i32 929431552, i32 929497088, i32 929562624, i32 929628160, i32 929693696, i32 929759232, i32 929824768, i32 929890304, i32 929955840, i32 930021376, i32 930086912, i32 930152448, i32 930217984, i32 930283520, i32 930349056, i32 930414592, i32 930480128, i32 930545664, i32 930611200, i32 930676736, i32 930742272, i32 930807808, i32 930873344, i32 930938880, i32 931004416, i32 931069952, i32 931135488, i32 931168256, i32 931201024, i32 931233792, i32 931266560, i32 931299328, i32 931332096, i32 931364864, i32 931397632, i32 931430400, i32 931463168, i32 931495936, i32 931528704, i32 931561472, i32 931594240, i32 931627008, i32 931659776, i32 931692544, i32 931725312, i32 931758080, i32 931790848, i32 931823616, i32 931856384, i32 931889152, i32 931921920, i32 931954688, i32 931987456, i32 932020224, i32 932052992, i32 932085760, i32 932118528, i32 932151296, i32 932184064, i32 932216832, i32 932249600, i32 932282368, i32 932315136, i32 932347904, i32 932380672, i32 932413440, i32 932446208, i32 932478976, i32 932511744, i32 932544512, i32 932577280, i32 932610048, i32 932642816, i32 932675584, i32 932708352, i32 932741120, i32 932773888, i32 932806656, i32 932839424, i32 932872192, i32 932904960, i32 932937728, i32 932970496, i32 933003264, i32 933036032, i32 933068800, i32 933101568, i32 933134336, i32 933167104, i32 933199872, i32 933232640, i32 933265408, i32 933298176, i32 933330944, i32 933363712, i32 933396480, i32 933429248, i32 933462016, i32 933494784, i32 933527552, i32 933560320, i32 933593088, i32 933625856, i32 933658624, i32 933691392, i32 933724160, i32 933756928, i32 933789696, i32 933822464, i32 933855232, i32 933888000, i32 933920768, i32 933953536, i32 933986304, i32 934019072, i32 934051840, i32 934084608, i32 934117376, i32 934150144, i32 934182912, i32 934215680, i32 934248448, i32 934281216, i32 934313984, i32 934346752, i32 934379520, i32 934412288, i32 934445056, i32 934477824, i32 934510592, i32 934543360, i32 934576128, i32 934608896, i32 934641664, i32 934674432, i32 934707200, i32 934739968, i32 934772736, i32 934805504, i32 934838272, i32 934871040, i32 934903808, i32 934936576, i32 934969344, i32 935002112, i32 935034880, i32 935067648, i32 935100416, i32 935133184, i32 935165952, i32 935198720, i32 935231488, i32 935264256, i32 935297024, i32 935329792, i32 935362560, i32 935395328, i32 935428096, i32 935460864, i32 935493632, i32 935526400, i32 935559168, i32 935591936, i32 935624704, i32 935657472, i32 935690240, i32 935723008, i32 935755776, i32 935788544, i32 935821312, i32 935854080, i32 935886848, i32 935919616, i32 935952384, i32 935985152, i32 936017920, i32 936050688, i32 936083456, i32 936116224, i32 936148992, i32 936181760, i32 936214528, i32 936247296, i32 936280064, i32 936312832, i32 936345600, i32 936378368, i32 936411136, i32 936443904, i32 936476672, i32 936509440, i32 936542208, i32 936574976, i32 936607744, i32 936640512, i32 936673280, i32 936706048, i32 936738816, i32 936771584, i32 936804352, i32 936837120, i32 936869888, i32 936902656, i32 936935424, i32 936968192, i32 937000960, i32 937033728, i32 937066496, i32 937099264, i32 937132032, i32 937164800, i32 937197568, i32 937230336, i32 937263104, i32 937295872, i32 937328640, i32 937361408, i32 937394176, i32 937426944, i32 937459712, i32 937492480, i32 937525248, i32 937558016, i32 937590784, i32 937623552, i32 937656320, i32 937689088, i32 937721856, i32 937754624, i32 937787392, i32 937820160, i32 937852928, i32 937885696, i32 937918464, i32 937951232, i32 937984000, i32 938016768, i32 938049536, i32 938082304, i32 938115072, i32 938147840, i32 938180608, i32 938213376, i32 938246144, i32 938278912, i32 938311680, i32 938344448, i32 938377216, i32 938409984, i32 938442752, i32 938475520, i32 938508288, i32 938541056, i32 938573824, i32 938606592, i32 938639360, i32 938672128, i32 938704896, i32 938737664, i32 938770432, i32 938803200, i32 938835968, i32 938868736, i32 938901504, i32 938934272, i32 938967040, i32 938999808, i32 939032576, i32 939065344, i32 939098112, i32 939130880, i32 939163648, i32 939196416, i32 939229184, i32 939261952, i32 939294720, i32 939327488, i32 939360256, i32 939393024, i32 939425792, i32 939458560, i32 939491328, i32 939524096, i32 939540480, i32 939556864, i32 939573248, i32 939589632, i32 939606016, i32 939622400, i32 939638784, i32 939655168, i32 939671552, i32 939687936, i32 939704320, i32 939720704, i32 939737088, i32 939753472, i32 939769856, i32 939786240, i32 939802624, i32 939819008, i32 939835392, i32 939851776, i32 939868160, i32 939884544, i32 939900928, i32 939917312, i32 939933696, i32 939950080, i32 939966464, i32 939982848, i32 939999232, i32 940015616, i32 940032000, i32 940048384, i32 940064768, i32 940081152, i32 940097536, i32 940113920, i32 940130304, i32 940146688, i32 940163072, i32 940179456, i32 940195840, i32 940212224, i32 940228608, i32 940244992, i32 940261376, i32 940277760, i32 940294144, i32 940310528, i32 940326912, i32 940343296, i32 940359680, i32 940376064, i32 940392448, i32 940408832, i32 940425216, i32 940441600, i32 940457984, i32 940474368, i32 940490752, i32 940507136, i32 940523520, i32 940539904, i32 940556288, i32 940572672, i32 940589056, i32 940605440, i32 940621824, i32 940638208, i32 940654592, i32 940670976, i32 940687360, i32 940703744, i32 940720128, i32 940736512, i32 940752896, i32 940769280, i32 940785664, i32 940802048, i32 940818432, i32 940834816, i32 940851200, i32 940867584, i32 940883968, i32 940900352, i32 940916736, i32 940933120, i32 940949504, i32 940965888, i32 940982272, i32 940998656, i32 941015040, i32 941031424, i32 941047808, i32 941064192, i32 941080576, i32 941096960, i32 941113344, i32 941129728, i32 941146112, i32 941162496, i32 941178880, i32 941195264, i32 941211648, i32 941228032, i32 941244416, i32 941260800, i32 941277184, i32 941293568, i32 941309952, i32 941326336, i32 941342720, i32 941359104, i32 941375488, i32 941391872, i32 941408256, i32 941424640, i32 941441024, i32 941457408, i32 941473792, i32 941490176, i32 941506560, i32 941522944, i32 941539328, i32 941555712, i32 941572096, i32 941588480, i32 941604864, i32 941621248, i32 941637632, i32 941654016, i32 941670400, i32 941686784, i32 941703168, i32 941719552, i32 941735936, i32 941752320, i32 941768704, i32 941785088, i32 941801472, i32 941817856, i32 941834240, i32 941850624, i32 941867008, i32 941883392, i32 941899776, i32 941916160, i32 941932544, i32 941948928, i32 941965312, i32 941981696, i32 941998080, i32 942014464, i32 942030848, i32 942047232, i32 942063616, i32 942080000, i32 942096384, i32 942112768, i32 942129152, i32 942145536, i32 942161920, i32 942178304, i32 942194688, i32 942211072, i32 942227456, i32 942243840, i32 942260224, i32 942276608, i32 942292992, i32 942309376, i32 942325760, i32 942342144, i32 942358528, i32 942374912, i32 942391296, i32 942407680, i32 942424064, i32 942440448, i32 942456832, i32 942473216, i32 942489600, i32 942505984, i32 942522368, i32 942538752, i32 942555136, i32 942571520, i32 942587904, i32 942604288, i32 942620672, i32 942637056, i32 942653440, i32 942669824, i32 942686208, i32 942702592, i32 942718976, i32 942735360, i32 942751744, i32 942768128, i32 942784512, i32 942800896, i32 942817280, i32 942833664, i32 942850048, i32 942866432, i32 942882816, i32 942899200, i32 942915584, i32 942931968, i32 942948352, i32 942964736, i32 942981120, i32 942997504, i32 943013888, i32 943030272, i32 943046656, i32 943063040, i32 943079424, i32 943095808, i32 943112192, i32 943128576, i32 943144960, i32 943161344, i32 943177728, i32 943194112, i32 943210496, i32 943226880, i32 943243264, i32 943259648, i32 943276032, i32 943292416, i32 943308800, i32 943325184, i32 943341568, i32 943357952, i32 943374336, i32 943390720, i32 943407104, i32 943423488, i32 943439872, i32 943456256, i32 943472640, i32 943489024, i32 943505408, i32 943521792, i32 943538176, i32 943554560, i32 943570944, i32 943587328, i32 943603712, i32 943620096, i32 943636480, i32 943652864, i32 943669248, i32 943685632, i32 943702016, i32 943718400, i32 943734784, i32 943751168, i32 943767552, i32 943783936, i32 943800320, i32 943816704, i32 943833088, i32 943849472, i32 943865856, i32 943882240, i32 943898624, i32 943915008, i32 943931392, i32 943947776, i32 943964160, i32 943980544, i32 943996928, i32 944013312, i32 944029696, i32 944046080, i32 944062464, i32 944078848, i32 944095232, i32 944111616, i32 944128000, i32 944144384, i32 944160768, i32 944177152, i32 944193536, i32 944209920, i32 944226304, i32 944242688, i32 944259072, i32 944275456, i32 944291840, i32 944308224, i32 944324608, i32 944340992, i32 944357376, i32 944373760, i32 944390144, i32 944406528, i32 944422912, i32 944439296, i32 944455680, i32 944472064, i32 944488448, i32 944504832, i32 944521216, i32 944537600, i32 944553984, i32 944570368, i32 944586752, i32 944603136, i32 944619520, i32 944635904, i32 944652288, i32 944668672, i32 944685056, i32 944701440, i32 944717824, i32 944734208, i32 944750592, i32 944766976, i32 944783360, i32 944799744, i32 944816128, i32 944832512, i32 944848896, i32 944865280, i32 944881664, i32 944898048, i32 944914432, i32 944930816, i32 944947200, i32 944963584, i32 944979968, i32 944996352, i32 945012736, i32 945029120, i32 945045504, i32 945061888, i32 945078272, i32 945094656, i32 945111040, i32 945127424, i32 945143808, i32 945160192, i32 945176576, i32 945192960, i32 945209344, i32 945225728, i32 945242112, i32 945258496, i32 945274880, i32 945291264, i32 945307648, i32 945324032, i32 945340416, i32 945356800, i32 945373184, i32 945389568, i32 945405952, i32 945422336, i32 945438720, i32 945455104, i32 945471488, i32 945487872, i32 945504256, i32 945520640, i32 945537024, i32 945553408, i32 945569792, i32 945586176, i32 945602560, i32 945618944, i32 945635328, i32 945651712, i32 945668096, i32 945684480, i32 945700864, i32 945717248, i32 945733632, i32 945750016, i32 945766400, i32 945782784, i32 945799168, i32 945815552, i32 945831936, i32 945848320, i32 945864704, i32 945881088, i32 945897472, i32 945913856, i32 945930240, i32 945946624, i32 945963008, i32 945979392, i32 945995776, i32 946012160, i32 946028544, i32 946044928, i32 946061312, i32 946077696, i32 946094080, i32 946110464, i32 946126848, i32 946143232, i32 946159616, i32 946176000, i32 946192384, i32 946208768, i32 946225152, i32 946241536, i32 946257920, i32 946274304, i32 946290688, i32 946307072, i32 946323456, i32 946339840, i32 946356224, i32 946372608, i32 946388992, i32 946405376, i32 946421760, i32 946438144, i32 946454528, i32 946470912, i32 946487296, i32 946503680, i32 946520064, i32 946536448, i32 946552832, i32 946569216, i32 946585600, i32 946601984, i32 946618368, i32 946634752, i32 946651136, i32 946667520, i32 946683904, i32 946700288, i32 946716672, i32 946733056, i32 946749440, i32 946765824, i32 946782208, i32 946798592, i32 946814976, i32 946831360, i32 946847744, i32 946864128, i32 946880512, i32 946896896, i32 946913280, i32 946929664, i32 946946048, i32 946962432, i32 946978816, i32 946995200, i32 947011584, i32 947027968, i32 947044352, i32 947060736, i32 947077120, i32 947093504, i32 947109888, i32 947126272, i32 947142656, i32 947159040, i32 947175424, i32 947191808, i32 947208192, i32 947224576, i32 947240960, i32 947257344, i32 947273728, i32 947290112, i32 947306496, i32 947322880, i32 947339264, i32 947355648, i32 947372032, i32 947388416, i32 947404800, i32 947421184, i32 947437568, i32 947453952, i32 947470336, i32 947486720, i32 947503104, i32 947519488, i32 947535872, i32 947552256, i32 947568640, i32 947585024, i32 947601408, i32 947617792, i32 947634176, i32 947650560, i32 947666944, i32 947683328, i32 947699712, i32 947716096, i32 947732480, i32 947748864, i32 947765248, i32 947781632, i32 947798016, i32 947814400, i32 947830784, i32 947847168, i32 947863552, i32 947879936, i32 947896320, i32 939524096, i32 939532288, i32 939540480, i32 939548672, i32 939556864, i32 939565056, i32 939573248, i32 939581440, i32 939589632, i32 939597824, i32 939606016, i32 939614208, i32 939622400, i32 939630592, i32 939638784, i32 939646976, i32 939655168, i32 939663360, i32 939671552, i32 939679744, i32 939687936, i32 939696128, i32 939704320, i32 939712512, i32 939720704, i32 939728896, i32 939737088, i32 939745280, i32 939753472, i32 939761664, i32 939769856, i32 939778048, i32 939786240, i32 939794432, i32 939802624, i32 939810816, i32 939819008, i32 939827200, i32 939835392, i32 939843584, i32 939851776, i32 939859968, i32 939868160, i32 939876352, i32 939884544, i32 939892736, i32 939900928, i32 939909120, i32 939917312, i32 939925504, i32 939933696, i32 939941888, i32 939950080, i32 939958272, i32 939966464, i32 939974656, i32 939982848, i32 939991040, i32 939999232, i32 940007424, i32 940015616, i32 940023808, i32 940032000, i32 940040192, i32 940048384, i32 940056576, i32 940064768, i32 940072960, i32 940081152, i32 940089344, i32 940097536, i32 940105728, i32 940113920, i32 940122112, i32 940130304, i32 940138496, i32 940146688, i32 940154880, i32 940163072, i32 940171264, i32 940179456, i32 940187648, i32 940195840, i32 940204032, i32 940212224, i32 940220416, i32 940228608, i32 940236800, i32 940244992, i32 940253184, i32 940261376, i32 940269568, i32 940277760, i32 940285952, i32 940294144, i32 940302336, i32 940310528, i32 940318720, i32 940326912, i32 940335104, i32 940343296, i32 940351488, i32 940359680, i32 940367872, i32 940376064, i32 940384256, i32 940392448, i32 940400640, i32 940408832, i32 940417024, i32 940425216, i32 940433408, i32 940441600, i32 940449792, i32 940457984, i32 940466176, i32 940474368, i32 940482560, i32 940490752, i32 940498944, i32 940507136, i32 940515328, i32 940523520, i32 940531712, i32 940539904, i32 940548096, i32 940556288, i32 940564480, i32 940572672, i32 940580864, i32 940589056, i32 940597248, i32 940605440, i32 940613632, i32 940621824, i32 940630016, i32 940638208, i32 940646400, i32 940654592, i32 940662784, i32 940670976, i32 940679168, i32 940687360, i32 940695552, i32 940703744, i32 940711936, i32 940720128, i32 940728320, i32 940736512, i32 940744704, i32 940752896, i32 940761088, i32 940769280, i32 940777472, i32 940785664, i32 940793856, i32 940802048, i32 940810240, i32 940818432, i32 940826624, i32 940834816, i32 940843008, i32 940851200, i32 940859392, i32 940867584, i32 940875776, i32 940883968, i32 940892160, i32 940900352, i32 940908544, i32 940916736, i32 940924928, i32 940933120, i32 940941312, i32 940949504, i32 940957696, i32 940965888, i32 940974080, i32 940982272, i32 940990464, i32 940998656, i32 941006848, i32 941015040, i32 941023232, i32 941031424, i32 941039616, i32 941047808, i32 941056000, i32 941064192, i32 941072384, i32 941080576, i32 941088768, i32 941096960, i32 941105152, i32 941113344, i32 941121536, i32 941129728, i32 941137920, i32 941146112, i32 941154304, i32 941162496, i32 941170688, i32 941178880, i32 941187072, i32 941195264, i32 941203456, i32 941211648, i32 941219840, i32 941228032, i32 941236224, i32 941244416, i32 941252608, i32 941260800, i32 941268992, i32 941277184, i32 941285376, i32 941293568, i32 941301760, i32 941309952, i32 941318144, i32 941326336, i32 941334528, i32 941342720, i32 941350912, i32 941359104, i32 941367296, i32 941375488, i32 941383680, i32 941391872, i32 941400064, i32 941408256, i32 941416448, i32 941424640, i32 941432832, i32 941441024, i32 941449216, i32 941457408, i32 941465600, i32 941473792, i32 941481984, i32 941490176, i32 941498368, i32 941506560, i32 941514752, i32 941522944, i32 941531136, i32 941539328, i32 941547520, i32 941555712, i32 941563904, i32 941572096, i32 941580288, i32 941588480, i32 941596672, i32 941604864, i32 941613056, i32 941621248, i32 941629440, i32 941637632, i32 941645824, i32 941654016, i32 941662208, i32 941670400, i32 941678592, i32 941686784, i32 941694976, i32 941703168, i32 941711360, i32 941719552, i32 941727744, i32 941735936, i32 941744128, i32 941752320, i32 941760512, i32 941768704, i32 941776896, i32 941785088, i32 941793280, i32 941801472, i32 941809664, i32 941817856, i32 941826048, i32 941834240, i32 941842432, i32 941850624, i32 941858816, i32 941867008, i32 941875200, i32 941883392, i32 941891584, i32 941899776, i32 941907968, i32 941916160, i32 941924352, i32 941932544, i32 941940736, i32 941948928, i32 941957120, i32 941965312, i32 941973504, i32 941981696, i32 941989888, i32 941998080, i32 942006272, i32 942014464, i32 942022656, i32 942030848, i32 942039040, i32 942047232, i32 942055424, i32 942063616, i32 942071808, i32 942080000, i32 942088192, i32 942096384, i32 942104576, i32 942112768, i32 942120960, i32 942129152, i32 942137344, i32 942145536, i32 942153728, i32 942161920, i32 942170112, i32 942178304, i32 942186496, i32 942194688, i32 942202880, i32 942211072, i32 942219264, i32 942227456, i32 942235648, i32 942243840, i32 942252032, i32 942260224, i32 942268416, i32 942276608, i32 942284800, i32 942292992, i32 942301184, i32 942309376, i32 942317568, i32 942325760, i32 942333952, i32 942342144, i32 942350336, i32 942358528, i32 942366720, i32 942374912, i32 942383104, i32 942391296, i32 942399488, i32 942407680, i32 942415872, i32 942424064, i32 942432256, i32 942440448, i32 942448640, i32 942456832, i32 942465024, i32 942473216, i32 942481408, i32 942489600, i32 942497792, i32 942505984, i32 942514176, i32 942522368, i32 942530560, i32 942538752, i32 942546944, i32 942555136, i32 942563328, i32 942571520, i32 942579712, i32 942587904, i32 942596096, i32 942604288, i32 942612480, i32 942620672, i32 942628864, i32 942637056, i32 942645248, i32 942653440, i32 942661632, i32 942669824, i32 942678016, i32 942686208, i32 942694400, i32 942702592, i32 942710784, i32 942718976, i32 942727168, i32 942735360, i32 942743552, i32 942751744, i32 942759936, i32 942768128, i32 942776320, i32 942784512, i32 942792704, i32 942800896, i32 942809088, i32 942817280, i32 942825472, i32 942833664, i32 942841856, i32 942850048, i32 942858240, i32 942866432, i32 942874624, i32 942882816, i32 942891008, i32 942899200, i32 942907392, i32 942915584, i32 942923776, i32 942931968, i32 942940160, i32 942948352, i32 942956544, i32 942964736, i32 942972928, i32 942981120, i32 942989312, i32 942997504, i32 943005696, i32 943013888, i32 943022080, i32 943030272, i32 943038464, i32 943046656, i32 943054848, i32 943063040, i32 943071232, i32 943079424, i32 943087616, i32 943095808, i32 943104000, i32 943112192, i32 943120384, i32 943128576, i32 943136768, i32 943144960, i32 943153152, i32 943161344, i32 943169536, i32 943177728, i32 943185920, i32 943194112, i32 943202304, i32 943210496, i32 943218688, i32 943226880, i32 943235072, i32 943243264, i32 943251456, i32 943259648, i32 943267840, i32 943276032, i32 943284224, i32 943292416, i32 943300608, i32 943308800, i32 943316992, i32 943325184, i32 943333376, i32 943341568, i32 943349760, i32 943357952, i32 943366144, i32 943374336, i32 943382528, i32 943390720, i32 943398912, i32 943407104, i32 943415296, i32 943423488, i32 943431680, i32 943439872, i32 943448064, i32 943456256, i32 943464448, i32 943472640, i32 943480832, i32 943489024, i32 943497216, i32 943505408, i32 943513600, i32 943521792, i32 943529984, i32 943538176, i32 943546368, i32 943554560, i32 943562752, i32 943570944, i32 943579136, i32 943587328, i32 943595520, i32 943603712, i32 943611904, i32 943620096, i32 943628288, i32 943636480, i32 943644672, i32 943652864, i32 943661056, i32 943669248, i32 943677440, i32 943685632, i32 943693824, i32 943702016, i32 943710208, i32 943718400, i32 943726592, i32 943734784, i32 943742976, i32 943751168, i32 943759360, i32 943767552, i32 943775744, i32 943783936, i32 943792128, i32 943800320, i32 943808512, i32 943816704, i32 943824896, i32 943833088, i32 943841280, i32 943849472, i32 943857664, i32 943865856, i32 943874048, i32 943882240, i32 943890432, i32 943898624, i32 943906816, i32 943915008, i32 943923200, i32 943931392, i32 943939584, i32 943947776, i32 943955968, i32 943964160, i32 943972352, i32 943980544, i32 943988736, i32 943996928, i32 944005120, i32 944013312, i32 944021504, i32 944029696, i32 944037888, i32 944046080, i32 944054272, i32 944062464, i32 944070656, i32 944078848, i32 944087040, i32 944095232, i32 944103424, i32 944111616, i32 944119808, i32 944128000, i32 944136192, i32 944144384, i32 944152576, i32 944160768, i32 944168960, i32 944177152, i32 944185344, i32 944193536, i32 944201728, i32 944209920, i32 944218112, i32 944226304, i32 944234496, i32 944242688, i32 944250880, i32 944259072, i32 944267264, i32 944275456, i32 944283648, i32 944291840, i32 944300032, i32 944308224, i32 944316416, i32 944324608, i32 944332800, i32 944340992, i32 944349184, i32 944357376, i32 944365568, i32 944373760, i32 944381952, i32 944390144, i32 944398336, i32 944406528, i32 944414720, i32 944422912, i32 944431104, i32 944439296, i32 944447488, i32 944455680, i32 944463872, i32 944472064, i32 944480256, i32 944488448, i32 944496640, i32 944504832, i32 944513024, i32 944521216, i32 944529408, i32 944537600, i32 944545792, i32 944553984, i32 944562176, i32 944570368, i32 944578560, i32 944586752, i32 944594944, i32 944603136, i32 944611328, i32 944619520, i32 944627712, i32 944635904, i32 944644096, i32 944652288, i32 944660480, i32 944668672, i32 944676864, i32 944685056, i32 944693248, i32 944701440, i32 944709632, i32 944717824, i32 944726016, i32 944734208, i32 944742400, i32 944750592, i32 944758784, i32 944766976, i32 944775168, i32 944783360, i32 944791552, i32 944799744, i32 944807936, i32 944816128, i32 944824320, i32 944832512, i32 944840704, i32 944848896, i32 944857088, i32 944865280, i32 944873472, i32 944881664, i32 944889856, i32 944898048, i32 944906240, i32 944914432, i32 944922624, i32 944930816, i32 944939008, i32 944947200, i32 944955392, i32 944963584, i32 944971776, i32 944979968, i32 944988160, i32 944996352, i32 945004544, i32 945012736, i32 945020928, i32 945029120, i32 945037312, i32 945045504, i32 945053696, i32 945061888, i32 945070080, i32 945078272, i32 945086464, i32 945094656, i32 945102848, i32 945111040, i32 945119232, i32 945127424, i32 945135616, i32 945143808, i32 945152000, i32 945160192, i32 945168384, i32 945176576, i32 945184768, i32 945192960, i32 945201152, i32 945209344, i32 945217536, i32 945225728, i32 945233920, i32 945242112, i32 945250304, i32 945258496, i32 945266688, i32 945274880, i32 945283072, i32 945291264, i32 945299456, i32 945307648, i32 945315840, i32 945324032, i32 945332224, i32 945340416, i32 945348608, i32 945356800, i32 945364992, i32 945373184, i32 945381376, i32 945389568, i32 945397760, i32 945405952, i32 945414144, i32 945422336, i32 945430528, i32 945438720, i32 945446912, i32 945455104, i32 945463296, i32 945471488, i32 945479680, i32 945487872, i32 945496064, i32 945504256, i32 945512448, i32 945520640, i32 945528832, i32 945537024, i32 945545216, i32 945553408, i32 945561600, i32 945569792, i32 945577984, i32 945586176, i32 945594368, i32 945602560, i32 945610752, i32 945618944, i32 945627136, i32 945635328, i32 945643520, i32 945651712, i32 945659904, i32 945668096, i32 945676288, i32 945684480, i32 945692672, i32 945700864, i32 945709056, i32 945717248, i32 945725440, i32 945733632, i32 945741824, i32 945750016, i32 945758208, i32 945766400, i32 945774592, i32 945782784, i32 945790976, i32 945799168, i32 945807360, i32 945815552, i32 945823744, i32 945831936, i32 945840128, i32 945848320, i32 945856512, i32 945864704, i32 945872896, i32 945881088, i32 945889280, i32 945897472, i32 945905664, i32 945913856, i32 945922048, i32 945930240, i32 945938432, i32 945946624, i32 945954816, i32 945963008, i32 945971200, i32 945979392, i32 945987584, i32 945995776, i32 946003968, i32 946012160, i32 946020352, i32 946028544, i32 946036736, i32 946044928, i32 946053120, i32 946061312, i32 946069504, i32 946077696, i32 946085888, i32 946094080, i32 946102272, i32 946110464, i32 946118656, i32 946126848, i32 946135040, i32 946143232, i32 946151424, i32 946159616, i32 946167808, i32 946176000, i32 946184192, i32 946192384, i32 946200576, i32 946208768, i32 946216960, i32 946225152, i32 946233344, i32 946241536, i32 946249728, i32 946257920, i32 946266112, i32 946274304, i32 946282496, i32 946290688, i32 946298880, i32 946307072, i32 946315264, i32 946323456, i32 946331648, i32 946339840, i32 946348032, i32 946356224, i32 946364416, i32 946372608, i32 946380800, i32 946388992, i32 946397184, i32 946405376, i32 946413568, i32 946421760, i32 946429952, i32 946438144, i32 946446336, i32 946454528, i32 946462720, i32 946470912, i32 946479104, i32 946487296, i32 946495488, i32 946503680, i32 946511872, i32 946520064, i32 946528256, i32 946536448, i32 946544640, i32 946552832, i32 946561024, i32 946569216, i32 946577408, i32 946585600, i32 946593792, i32 946601984, i32 946610176, i32 946618368, i32 946626560, i32 946634752, i32 946642944, i32 946651136, i32 946659328, i32 946667520, i32 946675712, i32 946683904, i32 946692096, i32 946700288, i32 946708480, i32 946716672, i32 946724864, i32 946733056, i32 946741248, i32 946749440, i32 946757632, i32 946765824, i32 946774016, i32 946782208, i32 946790400, i32 946798592, i32 946806784, i32 946814976, i32 946823168, i32 946831360, i32 946839552, i32 946847744, i32 946855936, i32 946864128, i32 946872320, i32 946880512, i32 946888704, i32 946896896, i32 946905088, i32 946913280, i32 946921472, i32 946929664, i32 946937856, i32 946946048, i32 946954240, i32 946962432, i32 946970624, i32 946978816, i32 946987008, i32 946995200, i32 947003392, i32 947011584, i32 947019776, i32 947027968, i32 947036160, i32 947044352, i32 947052544, i32 947060736, i32 947068928, i32 947077120, i32 947085312, i32 947093504, i32 947101696, i32 947109888, i32 947118080, i32 947126272, i32 947134464, i32 947142656, i32 947150848, i32 947159040, i32 947167232, i32 947175424, i32 947183616, i32 947191808, i32 947200000, i32 947208192, i32 947216384, i32 947224576, i32 947232768, i32 947240960, i32 947249152, i32 947257344, i32 947265536, i32 947273728, i32 947281920, i32 947290112, i32 947298304, i32 947306496, i32 947314688, i32 947322880, i32 947331072, i32 947339264, i32 947347456, i32 947355648, i32 947363840, i32 947372032, i32 947380224, i32 947388416, i32 947396608, i32 947404800, i32 947412992, i32 947421184, i32 947429376, i32 947437568, i32 947445760, i32 947453952, i32 947462144, i32 947470336, i32 947478528, i32 947486720, i32 947494912, i32 947503104, i32 947511296, i32 947519488, i32 947527680, i32 947535872, i32 947544064, i32 947552256, i32 947560448, i32 947568640, i32 947576832, i32 947585024, i32 947593216, i32 947601408, i32 947609600, i32 947617792, i32 947625984, i32 947634176, i32 947642368, i32 947650560, i32 947658752, i32 947666944, i32 947675136, i32 947683328, i32 947691520, i32 947699712, i32 947707904, i32 947716096, i32 947724288, i32 947732480, i32 947740672, i32 947748864, i32 947757056, i32 947765248, i32 947773440, i32 947781632, i32 947789824, i32 947798016, i32 947806208, i32 947814400, i32 947822592, i32 947830784, i32 947838976, i32 947847168, i32 947855360, i32 947863552, i32 947871744, i32 947879936, i32 947888128, i32 947896320, i32 947904512], align 16
@_ZN5blink12_GLOBAL__N_114g_offset_tableE = internal unnamed_addr constant [64 x i16] [i16 0, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 0, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024, i16 1024], align 16
@_ZN5blink12_GLOBAL__N_116g_exponent_tableE = internal unnamed_addr constant [64 x i32] [i32 0, i32 8388608, i32 16777216, i32 25165824, i32 33554432, i32 41943040, i32 50331648, i32 58720256, i32 67108864, i32 75497472, i32 83886080, i32 92274688, i32 100663296, i32 109051904, i32 117440512, i32 125829120, i32 134217728, i32 142606336, i32 150994944, i32 159383552, i32 167772160, i32 176160768, i32 184549376, i32 192937984, i32 201326592, i32 209715200, i32 218103808, i32 226492416, i32 234881024, i32 243269632, i32 251658240, i32 1199570944, i32 -2147483648, i32 -2139095040, i32 -2130706432, i32 -2122317824, i32 -2113929216, i32 -2105540608, i32 -2097152000, i32 -2088763392, i32 -2080374784, i32 -2071986176, i32 -2063597568, i32 -2055208960, i32 -2046820352, i32 -2038431744, i32 -2030043136, i32 -2021654528, i32 -2013265920, i32 -2004877312, i32 -1996488704, i32 -1988100096, i32 -1979711488, i32 -1971322880, i32 -1962934272, i32 -1954545664, i32 -1946157056, i32 -1937768448, i32 -1929379840, i32 -1920991232, i32 -1912602624, i32 -1904214016, i32 -1895825408, i32 -947912704], align 16
@.str.5 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.6 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@switch.table._ZN5blink12_GLOBAL__N_119TexelBytesForFormatENS_20WebGLImageConversion10DataFormatE = private unnamed_addr constant [53 x i32] [i32 4, i32 4, i32 8, i32 8, i32 16, i32 16, i32 8, i32 16, i32 4, i32 3, i32 3, i32 6, i32 6, i32 12, i32 12, i32 6, i32 12, i32 3, i32 4, i32 4, i32 4, i32 2, i32 2, i32 2, i32 4, i32 4, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 4, i32 8, i32 1, i32 1, i32 2, i32 2, i32 4, i32 4, i32 2, i32 4, i32 2, i32 4, i32 8, i32 2, i32 1, i32 2, i32 4, i32 2, i32 4, i32 4, i32 4], align 4

@_ZN5blink20WebGLImageConversion16PixelStoreParamsC1Ev = hidden unnamed_addr alias void (%"struct.blink::WebGLImageConversion::PixelStoreParams"*), void (%"struct.blink::WebGLImageConversion::PixelStoreParams"*)* @_ZN5blink20WebGLImageConversion16PixelStoreParamsC2Ev
@_ZN5blink20WebGLImageConversion14ImageExtractorC1EPNS_5ImageENS0_18ImageHtmlDomSourceEbb = hidden unnamed_addr alias void (%"class.blink::WebGLImageConversion::ImageExtractor"*, %"class.blink::Image"*, i32, i1, i1), void (%"class.blink::WebGLImageConversion::ImageExtractor"*, %"class.blink::Image"*, i32, i1, i1)* @_ZN5blink20WebGLImageConversion14ImageExtractorC2EPNS_5ImageENS0_18ImageHtmlDomSourceEbb

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink20WebGLImageConversion16PixelStoreParamsC2Ev(%"struct.blink::WebGLImageConversion::PixelStoreParams"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %0, i64 0, i32 0
  store i32 4, i32* %2, align 4
  %3 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %0, i64 0, i32 1
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 20, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN5blink20WebGLImageConversion30ComputeFormatAndTypeParametersEjjPjS1_(i32, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  switch i32 %0, label %20 [
    i32 6406, label %8
    i32 6409, label %8
    i32 6403, label %8
    i32 36244, label %8
    i32 6402, label %8
    i32 34041, label %8
    i32 6410, label %5
    i32 33319, label %5
    i32 33320, label %5
    i32 6407, label %6
    i32 36248, label %6
    i32 35904, label %6
    i32 6408, label %7
    i32 36249, label %7
    i32 32993, label %7
    i32 35906, label %7
  ]

5:                                                ; preds = %4, %4, %4
  br label %8

6:                                                ; preds = %4, %4, %4
  br label %8

7:                                                ; preds = %4, %4, %4, %4
  br label %8

8:                                                ; preds = %4, %4, %4, %4, %4, %4, %7, %6, %5
  %9 = phi i32 [ 4, %7 ], [ 3, %6 ], [ 2, %5 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ]
  store i32 %9, i32* %2, align 4
  switch i32 %1, label %20 [
    i32 5120, label %10
    i32 5121, label %11
    i32 5122, label %12
    i32 5123, label %13
    i32 33635, label %14
    i32 32819, label %14
    i32 32820, label %14
    i32 5124, label %15
    i32 5125, label %16
    i32 34042, label %17
    i32 35899, label %17
    i32 35902, label %17
    i32 33640, label %17
    i32 5126, label %18
    i32 5131, label %19
    i32 36193, label %19
  ]

10:                                               ; preds = %8
  store i32 1, i32* %3, align 4
  br label %20

11:                                               ; preds = %8
  store i32 1, i32* %3, align 4
  br label %20

12:                                               ; preds = %8
  store i32 2, i32* %3, align 4
  br label %20

13:                                               ; preds = %8
  store i32 2, i32* %3, align 4
  br label %20

14:                                               ; preds = %8, %8, %8
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  br label %20

15:                                               ; preds = %8
  store i32 4, i32* %3, align 4
  br label %20

16:                                               ; preds = %8
  store i32 4, i32* %3, align 4
  br label %20

17:                                               ; preds = %8, %8, %8, %8
  store i32 1, i32* %2, align 4
  store i32 4, i32* %3, align 4
  br label %20

18:                                               ; preds = %8
  store i32 4, i32* %3, align 4
  br label %20

19:                                               ; preds = %8, %8
  store i32 2, i32* %3, align 4
  br label %20

20:                                               ; preds = %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %8, %4
  %21 = phi i1 [ false, %4 ], [ false, %8 ], [ true, %19 ], [ true, %18 ], [ true, %17 ], [ true, %16 ], [ true, %15 ], [ true, %14 ], [ true, %13 ], [ true, %12 ], [ true, %11 ], [ true, %10 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20WebGLImageConversion23ComputeImageSizeInBytesEjjiiiRKNS0_16PixelStoreParamsEPjS4_S4_(i32, i32, i32, i32, i32, %"struct.blink::WebGLImageConversion::PixelStoreParams"* nocapture readonly dereferenceable(24), i32* nocapture, i32*, i32*) local_unnamed_addr #1 align 2 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = or i32 %3, %2
  %13 = or i32 %12, %4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %175, label %15

15:                                               ; preds = %9
  %16 = icmp ne i32 %2, 0
  %17 = icmp ne i32 %3, 0
  %18 = and i1 %16, %17
  %19 = icmp ne i32 %4, 0
  %20 = and i1 %18, %19
  br i1 %20, label %27, label %21

21:                                               ; preds = %15
  store i32 0, i32* %6, align 4
  %22 = icmp eq i32* %7, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %21
  store i32 0, i32* %7, align 4
  br label %24

24:                                               ; preds = %21, %23
  %25 = icmp eq i32* %8, null
  br i1 %25, label %175, label %26

26:                                               ; preds = %24
  store i32 0, i32* %8, align 4
  br label %175

27:                                               ; preds = %15
  %28 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 0
  %33 = select i1 %32, i32 %31, i32 %3
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #12
  store i32 -1431655766, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #12
  store i32 -1431655766, i32* %11, align 4
  %36 = call zeroext i1 @_ZN5blink20WebGLImageConversion30ComputeFormatAndTypeParametersEjjPjS1_(i32 %0, i32 %1, i32* nonnull %10, i32* nonnull %11)
  br i1 %36, label %37, label %173

37:                                               ; preds = %27
  %38 = icmp sgt i32 %29, 0
  %39 = select i1 %38, i32 %29, i32 %2
  %40 = load i32, i32* %10, align 4
  %41 = load i32, i32* %11, align 4
  %42 = mul i32 %41, %40
  %43 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %39, i32 %42) #12
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  br i1 %44, label %173, label %46

46:                                               ; preds = %37
  %47 = load i32, i32* %28, align 4
  %48 = icmp slt i32 %47, 1
  %49 = icmp eq i32 %47, %2
  %50 = or i1 %48, %49
  br i1 %50, label %57, label %51

51:                                               ; preds = %46
  %52 = icmp slt i32 %2, 0
  br i1 %52, label %173, label %53

53:                                               ; preds = %51
  %54 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %2, i32 %42) #12
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  br i1 %55, label %173, label %57

57:                                               ; preds = %53, %46
  %58 = phi i32 [ %45, %46 ], [ %56, %53 ]
  %59 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %173, label %62, !prof !2

62:                                               ; preds = %57
  %63 = urem i32 %45, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %62
  %66 = sub i32 %60, %63
  %67 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %45, i32 %66) #12
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  br i1 %68, label %173, label %70

70:                                               ; preds = %65, %62
  %71 = phi i32 [ %66, %65 ], [ 0, %62 ]
  %72 = phi i32 [ %69, %65 ], [ %45, %62 ]
  %73 = icmp slt i32 %33, 0
  br i1 %73, label %173, label %74

74:                                               ; preds = %70
  %75 = add nsw i32 %4, -1
  %76 = icmp slt i32 %4, 1
  %77 = sub i32 1, %4
  %78 = select i1 %76, i32 %77, i32 %75
  %79 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %78, i32 %33) #12
  %80 = extractvalue { i32, i1 } %79, 1
  %81 = extractvalue { i32, i1 } %79, 0
  %82 = icmp ne i32 %81, 0
  %83 = and i1 %76, %82
  %84 = or i1 %80, %83
  br i1 %84, label %173, label %85

85:                                               ; preds = %74
  %86 = sub i32 0, %81
  %87 = select i1 %76, i32 %86, i32 %81
  %88 = zext i32 %87 to i33
  %89 = sext i32 %3 to i33
  %90 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %88, i33 %89) #12
  %91 = extractvalue { i33, i1 } %90, 1
  %92 = extractvalue { i33, i1 } %90, 0
  %93 = icmp slt i33 %92, 0
  %94 = or i1 %91, %93
  %95 = and i33 %92, 4294967295
  %96 = icmp eq i33 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %173, label %98

98:                                               ; preds = %85
  %99 = zext i33 %95 to i64
  %100 = shl nuw i64 %99, 32
  %101 = add i64 %100, -4294967296
  %102 = lshr exact i64 %101, 32
  %103 = trunc i64 %102 to i32
  %104 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %72, i32 %103) #12
  %105 = extractvalue { i32, i1 } %104, 1
  br i1 %105, label %173, label %106

106:                                              ; preds = %98
  %107 = extractvalue { i32, i1 } %104, 0
  %108 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %107, i32 %58) #12
  %109 = extractvalue { i32, i1 } %108, 1
  %110 = extractvalue { i32, i1 } %108, 0
  br i1 %109, label %173, label %111

111:                                              ; preds = %106
  store i32 %110, i32* %6, align 4
  %112 = icmp eq i32* %7, null
  br i1 %112, label %114, label %113

113:                                              ; preds = %111
  store i32 %71, i32* %7, align 4
  br label %114

114:                                              ; preds = %111, %113
  %115 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 5
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %114
  %119 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %33, i32 %72) #12
  %120 = extractvalue { i32, i1 } %119, 1
  %121 = extractvalue { i32, i1 } %119, 0
  %122 = icmp ne i32 %121, 0
  %123 = and i1 %73, %122
  %124 = or i1 %120, %123
  br i1 %124, label %173, label %125

125:                                              ; preds = %118
  %126 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %116, i32 %121) #12
  %127 = extractvalue { i32, i1 } %126, 1
  %128 = extractvalue { i32, i1 } %126, 0
  br i1 %127, label %173, label %129

129:                                              ; preds = %125, %114
  %130 = phi i32 [ 0, %114 ], [ %128, %125 ]
  %131 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 4
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %144

134:                                              ; preds = %129
  %135 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %132, i32 %72) #12
  %136 = extractvalue { i32, i1 } %135, 1
  br i1 %136, label %173, label %137

137:                                              ; preds = %134
  %138 = extractvalue { i32, i1 } %135, 0
  %139 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %130, i32 %138) #12
  %140 = extractvalue { i32, i1 } %139, 1
  %141 = extractvalue { i32, i1 } %139, 0
  %142 = xor i1 %140, true
  %143 = zext i1 %142 to i8
  br label %144

144:                                              ; preds = %137, %129
  %145 = phi i32 [ %141, %137 ], [ %130, %129 ]
  %146 = phi i8 [ %143, %137 ], [ 1, %129 ]
  %147 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %5, i64 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %150, label %162

150:                                              ; preds = %144
  %151 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %148, i32 %42) #12
  %152 = extractvalue { i32, i1 } %151, 1
  %153 = icmp eq i8 %146, 0
  %154 = or i1 %152, %153
  br i1 %154, label %173, label %155

155:                                              ; preds = %150
  %156 = extractvalue { i32, i1 } %151, 0
  %157 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %145, i32 %156) #12
  %158 = extractvalue { i32, i1 } %157, 1
  %159 = extractvalue { i32, i1 } %157, 0
  %160 = xor i1 %158, true
  %161 = zext i1 %160 to i8
  br label %162

162:                                              ; preds = %155, %144
  %163 = phi i32 [ %145, %144 ], [ %159, %155 ]
  %164 = phi i8 [ %146, %144 ], [ %161, %155 ]
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %173, label %166

166:                                              ; preds = %162
  %167 = icmp eq i32* %8, null
  br i1 %167, label %169, label %168

168:                                              ; preds = %166
  store i32 %163, i32* %8, align 4
  br label %169

169:                                              ; preds = %168, %166
  %170 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %110, i32 %163) #12
  %171 = extractvalue { i32, i1 } %170, 1
  %172 = select i1 %171, i32 1281, i32 0
  br label %173

173:                                              ; preds = %125, %106, %118, %98, %70, %74, %51, %57, %134, %150, %162, %85, %65, %53, %37, %169, %27
  %174 = phi i32 [ 1280, %27 ], [ 1281, %37 ], [ 1281, %53 ], [ 1281, %65 ], [ 1281, %85 ], [ 1281, %106 ], [ 1281, %162 ], [ %172, %169 ], [ 1281, %125 ], [ 1281, %134 ], [ 1281, %150 ], [ 1281, %57 ], [ 1281, %51 ], [ 1281, %74 ], [ 1281, %70 ], [ 1281, %98 ], [ 1281, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #12
  br label %175

175:                                              ; preds = %26, %24, %9, %173
  %176 = phi i32 [ %174, %173 ], [ 1281, %9 ], [ 0, %24 ], [ 0, %26 ]
  ret i32 %176
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WebGLImageConversion14ImageExtractorC2EPNS_5ImageENS0_18ImageHtmlDomSourceEbb(%"class.blink::WebGLImageConversion::ImageExtractor"*, %"class.blink::Image"*, i32, i1 zeroext, i1 zeroext) unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %union.anon* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false) #12
  %9 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 0
  store %"class.blink::Image"* %1, %"class.blink::Image"** %9, align 8
  %10 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 2
  store i32 %2, i32* %10, align 8
  tail call void @_ZN5blink20WebGLImageConversion14ImageExtractor12ExtractImageEbb(%"class.blink::WebGLImageConversion::ImageExtractor"* %0, i1 zeroext %3, i1 zeroext %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20WebGLImageConversion14ImageExtractor12ExtractImageEbb(%"class.blink::WebGLImageConversion::ImageExtractor"*, i1 zeroext, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = alloca %class.sk_sp, align 8
  %5 = alloca %class.sk_sp.200, align 8
  %6 = alloca %"class.cc::PaintImage", align 8
  %7 = alloca %struct.SkImageInfo, align 16
  %8 = alloca %"class.blink::ColorBehavior", align 4
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %struct.SkISize*
  %11 = alloca %class.SkBitmap, align 8
  %12 = alloca %class.sk_sp.200, align 8
  %13 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 0
  %14 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %15 = icmp eq %"class.blink::Image"* %14, null
  br i1 %15, label %327, label %16

16:                                               ; preds = %3
  %17 = bitcast %class.sk_sp.200* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  %18 = getelementptr inbounds %class.sk_sp.200, %class.sk_sp.200* %5, i64 0, i32 0
  store %class.SkImage* inttoptr (i64 -6148914691236517206 to %class.SkImage*), %class.SkImage** %18, align 8
  %19 = bitcast %"class.cc::PaintImage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %19) #12
  %20 = bitcast %"class.blink::Image"* %14 to void (%"class.cc::PaintImage"*, %"class.blink::Image"*)***
  %21 = load void (%"class.cc::PaintImage"*, %"class.blink::Image"*)**, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)** %21, i64 30
  %23 = load void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)** %22, align 8
  call void %23(%"class.cc::PaintImage"* nonnull sret %6, %"class.blink::Image"* nonnull %14) #12
  call void @_ZNK2cc10PaintImage12GetSwSkImageEv(%class.sk_sp.200* nonnull sret %5, %"class.cc::PaintImage"* nonnull %6) #12
  call void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %19) #12
  %24 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #12
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 1
  %27 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 24, i1 false)
  %28 = load %class.SkImage*, %class.SkImage** %18, align 8
  %29 = icmp eq %class.SkImage* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 24, i1 false) #12, !alias.scope !3
  %31 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 6
  store i32 0, i32* %31, align 8
  br label %54

32:                                               ; preds = %16
  %33 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %34 = bitcast %"class.blink::Image"* %33 to i64 (%"class.blink::Image"*)***
  %35 = load i64 (%"class.blink::Image"*)**, i64 (%"class.blink::Image"*)*** %34, align 8
  %36 = getelementptr inbounds i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %35, i64 13
  %37 = load i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %36, align 8
  %38 = call i64 %37(%"class.blink::Image"* %33) #12
  %39 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %40 = bitcast %"class.blink::Image"* %39 to i64 (%"class.blink::Image"*)***
  %41 = load i64 (%"class.blink::Image"*)**, i64 (%"class.blink::Image"*)*** %40, align 8
  %42 = getelementptr inbounds i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %41, i64 13
  %43 = load i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %42, align 8
  %44 = call i64 %43(%"class.blink::Image"* %39) #12
  %45 = and i64 %44, -4294967296
  %46 = and i64 %38, 4294967295
  %47 = or i64 %45, %46
  %48 = bitcast %struct.SkImageInfo* %7 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934598>, <2 x i64>* %48, align 16, !alias.scope !6
  %49 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 1
  %50 = bitcast %struct.SkISize* %49 to i64*
  store i64 %47, i64* %50, align 16, !alias.scope !6
  %51 = load %class.SkImage*, %class.SkImage** %18, align 8
  %52 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 6
  store i32 0, i32* %52, align 8
  %53 = icmp eq %class.SkImage* %51, null
  br i1 %53, label %54, label %58

54:                                               ; preds = %32, %30
  %55 = phi i32 [ 0, %30 ], [ 2, %32 ]
  %56 = phi i32* [ %31, %30 ], [ %52, %32 ]
  %57 = xor i1 %1, true
  br label %62

58:                                               ; preds = %32
  %59 = call i32 @_ZNK7SkImage9alphaTypeEv(%class.SkImage* nonnull %51) #12
  %60 = icmp eq i32 %59, 1
  %61 = xor i1 %1, true
  br i1 %60, label %66, label %62

62:                                               ; preds = %58, %54
  %63 = phi i32 [ %55, %54 ], [ 2, %58 ]
  %64 = phi i1 [ %57, %54 ], [ %61, %58 ]
  %65 = phi i32* [ %56, %54 ], [ %52, %58 ]
  br label %66

66:                                               ; preds = %58, %62
  %67 = phi i32 [ %63, %62 ], [ 2, %58 ]
  %68 = phi i1 [ %64, %62 ], [ %61, %58 ]
  %69 = phi i1 [ false, %62 ], [ true, %58 ]
  %70 = phi i32* [ %65, %62 ], [ %52, %58 ]
  %71 = phi i1 [ %64, %62 ], [ false, %58 ]
  br i1 %2, label %89, label %72

72:                                               ; preds = %66
  %73 = load %class.SkImage*, %class.SkImage** %18, align 8
  %74 = icmp eq %class.SkImage* %73, null
  br i1 %74, label %83, label %75

75:                                               ; preds = %72
  %76 = call %class.SkColorSpace* @_ZNK7SkImage10colorSpaceEv(%class.SkImage* nonnull %73) #12
  %77 = icmp eq %class.SkColorSpace* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %75
  %79 = load %class.SkImage*, %class.SkImage** %18, align 8
  %80 = call %class.SkColorSpace* @_ZNK7SkImage10colorSpaceEv(%class.SkImage* %79) #12
  %81 = call zeroext i1 @_ZNK12SkColorSpace6isSRGBEv(%class.SkColorSpace* %80) #12
  %82 = xor i1 %81, true
  br label %83

83:                                               ; preds = %72, %75, %78
  %84 = phi i1 [ false, %75 ], [ false, %72 ], [ %82, %78 ]
  %85 = load %class.SkImage*, %class.SkImage** %18, align 8
  %86 = icmp eq %class.SkImage* %85, null
  %87 = or i1 %71, %86
  %88 = or i1 %84, %87
  br i1 %88, label %89, label %216

89:                                               ; preds = %66, %83
  %90 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %91 = bitcast %"class.blink::Image"* %90 to %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)***
  %92 = load %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)**, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*** %91, align 8
  %93 = getelementptr inbounds %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)** %92, i64 22
  %94 = load %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)** %93, align 8
  %95 = call %"class.WTF::SharedBuffer"* %94(%"class.blink::Image"* %90) #12
  %96 = icmp eq %"class.WTF::SharedBuffer"* %95, null
  br i1 %96, label %216, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %95, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %98) #12
  %99 = getelementptr inbounds %"class.WTF::SharedBuffer", %"class.WTF::SharedBuffer"* %95, i64 0, i32 0, i32 0, i32 0, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %97
  call void @_ZN3WTF12SharedBufferD1Ev(%"class.WTF::SharedBuffer"* nonnull %95) #12
  %103 = bitcast %"class.WTF::SharedBuffer"* %95 to i8*
  call void @free(i8* %103) #12
  br label %104

104:                                              ; preds = %97, %102
  %105 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %106 = bitcast %"class.blink::Image"* %105 to %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)***
  %107 = load %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)**, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*** %106, align 8
  %108 = getelementptr inbounds %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)** %107, i64 22
  %109 = load %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)*, %"class.WTF::SharedBuffer"* (%"class.blink::Image"*)** %108, align 8
  %110 = call %"class.WTF::SharedBuffer"* %109(%"class.blink::Image"* %105) #12
  %111 = bitcast %"class.blink::ColorBehavior"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %111) #12
  %112 = getelementptr inbounds %"class.blink::ColorBehavior", %"class.blink::ColorBehavior"* %8, i64 0, i32 0
  %113 = select i1 %2, i32 0, i32 2
  store i32 %113, i32* %112, align 4
  %114 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %114) #12
  store i64 0, i64* %9, align 8
  %115 = call %"class.blink::SegmentReader"* @_ZN5blink13SegmentReader22CreateFromSharedBufferE13scoped_refptrIN3WTF12SharedBufferEE(%"class.WTF::SharedBuffer"* %110) #12
  %116 = call %"class.blink::ImageDecoder"* @_ZN5blink12ImageDecoder6CreateE13scoped_refptrINS_13SegmentReaderEEbNS0_11AlphaOptionENS0_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorERK7SkISizeNS0_15AnimationOptionE(%"class.blink::SegmentReader"* %115, i1 zeroext true, i32 1, i32 0, %"class.blink::ColorBehavior"* nonnull dereferenceable(4) %8, %struct.SkISize* nonnull dereferenceable(8) %10, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %114) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %111) #12
  %117 = icmp eq %"class.blink::ImageDecoder"* %116, null
  br i1 %117, label %304, label %118

118:                                              ; preds = %104
  %119 = call i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"* nonnull %116) #12
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %208, label %121

121:                                              ; preds = %118
  %122 = call %"class.blink::ImageFrame"* @_ZN5blink12ImageDecoder24DecodeFrameBufferAtIndexEm(%"class.blink::ImageDecoder"* nonnull %116, i64 0) #12
  %123 = icmp eq %"class.blink::ImageFrame"* %122, null
  br i1 %123, label %208, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %122, i64 0, i32 5
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 3
  br i1 %127, label %128, label %208

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %122, i64 0, i32 2
  %130 = load i8, i8* %129, align 8, !range !11
  %131 = icmp eq i8 %130, 0
  %132 = bitcast %class.SkBitmap* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %132) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 -86, i64 56, i1 false)
  %133 = getelementptr inbounds %"class.blink::ImageFrame", %"class.blink::ImageFrame"* %122, i64 0, i32 0
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %11, %class.SkBitmap* dereferenceable(56) %133) #12
  %134 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 0, i32 0
  %135 = load %class.SkPixelRef*, %class.SkPixelRef** %134, align 8
  %136 = icmp eq %class.SkPixelRef* %135, null
  br i1 %136, label %205, label %137

137:                                              ; preds = %128
  %138 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 2, i32 1, i32 0
  %139 = load i32, i32* %138, align 8
  %140 = icmp slt i32 %139, 1
  br i1 %140, label %205, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 2, i32 1, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, 1
  br i1 %144, label %205, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 2, i32 0, i32 1
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 6
  br i1 %148, label %149, label %205

149:                                              ; preds = %145
  %150 = bitcast %class.sk_sp.200* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %150) #12
  call void @_ZN5blink10ImageFrame25FinalizePixelsAndGetImageEv(%class.sk_sp.200* nonnull sret %12, %"class.blink::ImageFrame"* nonnull %122) #12
  %151 = getelementptr inbounds %class.sk_sp.200, %class.sk_sp.200* %12, i64 0, i32 0
  %152 = bitcast %class.sk_sp.200* %12 to i64*
  %153 = load i64, i64* %152, align 8
  store %class.SkImage* null, %class.SkImage** %151, align 8
  %154 = load %class.SkImage*, %class.SkImage** %18, align 8
  %155 = bitcast %class.sk_sp.200* %5 to i64*
  store i64 %153, i64* %155, align 8
  %156 = icmp eq %class.SkImage* %154, null
  br i1 %156, label %180, label %157

157:                                              ; preds = %149
  %158 = getelementptr inbounds %class.SkImage, %class.SkImage* %154, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = atomicrmw add i32* %158, i32 -1 acq_rel
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %161, label %167

161:                                              ; preds = %157
  %162 = bitcast %class.SkImage* %154 to %class.SkRefCntBase*
  %163 = bitcast %class.SkImage* %154 to void (%class.SkRefCntBase*)***
  %164 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %163, align 8
  %165 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %164, i64 2
  %166 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %165, align 8
  call void %166(%class.SkRefCntBase* nonnull %162) #12
  br label %167

167:                                              ; preds = %157, %161
  %168 = load %class.SkImage*, %class.SkImage** %151, align 8
  %169 = icmp eq %class.SkImage* %168, null
  br i1 %169, label %180, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %class.SkImage, %class.SkImage* %168, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = atomicrmw add i32* %171, i32 -1 acq_rel
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %180

174:                                              ; preds = %170
  %175 = bitcast %class.SkImage* %168 to %class.SkRefCntBase*
  %176 = bitcast %class.SkImage* %168 to void (%class.SkRefCntBase*)***
  %177 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %176, align 8
  %178 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %177, i64 2
  %179 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %178, align 8
  call void %179(%class.SkRefCntBase* nonnull %175) #12
  br label %180

180:                                              ; preds = %149, %174, %170, %167
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %150) #12
  %181 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %11, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %182 = load %class.SkColorSpace*, %class.SkColorSpace** %181, align 8
  %183 = icmp eq %class.SkColorSpace* %182, null
  br i1 %183, label %187, label %184

184:                                              ; preds = %180
  %185 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %182, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = atomicrmw add i32* %185, i32 1 monotonic
  br label %187

187:                                              ; preds = %184, %180
  %188 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 16
  store %class.SkColorSpace* %182, %class.SkColorSpace** %25, align 16
  %189 = icmp eq %class.SkColorSpace* %188, null
  br i1 %189, label %196, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %188, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = atomicrmw add i32* %191, i32 -1 acq_rel
  %193 = icmp eq i32 %192, 1
  br i1 %193, label %194, label %196

194:                                              ; preds = %190
  %195 = bitcast %class.SkColorSpace* %188 to i8*
  call void @_ZdlPv(i8* %195) #13
  br label %196

196:                                              ; preds = %187, %190, %194
  %197 = bitcast i32* %146 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 8
  %199 = bitcast i32* %26 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %199, align 8
  %200 = or i1 %68, %131
  %201 = extractelement <2 x i64> %198, i32 0
  %202 = lshr i64 %201, 32
  %203 = trunc i64 %202 to i32
  br i1 %200, label %205, label %204

204:                                              ; preds = %196
  store i32 1, i32* %70, align 8
  br label %205

205:                                              ; preds = %137, %128, %141, %204, %196, %145
  %206 = phi i32 [ %67, %145 ], [ %203, %196 ], [ %203, %204 ], [ %67, %141 ], [ %67, %128 ], [ %67, %137 ]
  %207 = phi i32 [ 1, %145 ], [ 0, %196 ], [ 0, %204 ], [ 1, %141 ], [ 1, %128 ], [ 1, %137 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %132) #12
  br label %208

208:                                              ; preds = %118, %121, %124, %205
  %209 = phi i32 [ %67, %121 ], [ %67, %124 ], [ %206, %205 ], [ %67, %118 ]
  %210 = phi i32 [ 1, %121 ], [ 1, %124 ], [ %207, %205 ], [ 1, %118 ]
  %211 = bitcast %"class.blink::ImageDecoder"* %116 to void (%"class.blink::ImageDecoder"*)***
  %212 = load void (%"class.blink::ImageDecoder"*)**, void (%"class.blink::ImageDecoder"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"class.blink::ImageDecoder"*)*, void (%"class.blink::ImageDecoder"*)** %212, i64 1
  %214 = load void (%"class.blink::ImageDecoder"*)*, void (%"class.blink::ImageDecoder"*)** %213, align 8
  call void %214(%"class.blink::ImageDecoder"* nonnull %116) #12
  %215 = icmp eq i32 %210, 0
  br i1 %215, label %223, label %304

216:                                              ; preds = %89, %83
  %217 = or i1 %69, %1
  br i1 %217, label %223, label %218

218:                                              ; preds = %216
  %219 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 2
  %220 = load i32, i32* %219, align 8
  %221 = icmp eq i32 %220, 2
  br i1 %221, label %223, label %222

222:                                              ; preds = %218
  store i32 2, i32* %70, align 8
  br label %223

223:                                              ; preds = %216, %218, %222, %208
  %224 = phi i32 [ %67, %216 ], [ %67, %218 ], [ %67, %222 ], [ %209, %208 ]
  %225 = load %class.SkImage*, %class.SkImage** %18, align 8
  %226 = icmp eq %class.SkImage* %225, null
  br i1 %226, label %304, label %227

227:                                              ; preds = %223
  %228 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 5
  store i32 18, i32* %228, align 4
  %229 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 7
  store i32 0, i32* %229, align 4
  %230 = getelementptr inbounds %class.SkImage, %class.SkImage* %225, i64 0, i32 2, i32 1, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 3
  store i32 %231, i32* %232, align 4
  %233 = getelementptr inbounds %class.SkImage, %class.SkImage* %225, i64 0, i32 2, i32 1, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 4
  store i32 %234, i32* %235, align 8
  %236 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %237 = bitcast %"class.blink::Image"* %236 to i64 (%"class.blink::Image"*)***
  %238 = load i64 (%"class.blink::Image"*)**, i64 (%"class.blink::Image"*)*** %237, align 8
  %239 = getelementptr inbounds i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %238, i64 13
  %240 = load i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %239, align 8
  %241 = call i64 %240(%"class.blink::Image"* %236) #12
  %242 = trunc i64 %241 to i32
  %243 = icmp eq i32 %231, %242
  br i1 %243, label %244, label %304

244:                                              ; preds = %227
  %245 = load i32, i32* %235, align 8
  %246 = load %"class.blink::Image"*, %"class.blink::Image"** %13, align 8
  %247 = bitcast %"class.blink::Image"* %246 to i64 (%"class.blink::Image"*)***
  %248 = load i64 (%"class.blink::Image"*)**, i64 (%"class.blink::Image"*)*** %247, align 8
  %249 = getelementptr inbounds i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %248, i64 13
  %250 = load i64 (%"class.blink::Image"*)*, i64 (%"class.blink::Image"*)** %249, align 8
  %251 = call i64 %250(%"class.blink::Image"* %246) #12
  %252 = lshr i64 %251, 32
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %245, %253
  br i1 %254, label %255, label %304

255:                                              ; preds = %244
  %256 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %257 = load i8, i8* %256, align 8, !range !11
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %284, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0
  %261 = load i8*, i8** %260, align 8
  %262 = icmp eq i8* %261, null
  br i1 %262, label %269, label %263, !prof !12

263:                                              ; preds = %259
  %264 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 2
  %265 = load i32, i32* %264, align 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %268, label %267, !prof !13

267:                                              ; preds = %263
  store i32 0, i32* %264, align 4
  br label %268

268:                                              ; preds = %267, %263
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %261) #12
  store i8* null, i8** %260, align 8
  br label %269

269:                                              ; preds = %268, %259
  %270 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %271 = load %class.SkImage*, %class.SkImage** %270, align 8
  %272 = icmp eq %class.SkImage* %271, null
  br i1 %272, label %283, label %273

273:                                              ; preds = %269
  %274 = getelementptr inbounds %class.SkImage, %class.SkImage* %271, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %275 = atomicrmw add i32* %274, i32 -1 acq_rel
  %276 = icmp eq i32 %275, 1
  br i1 %276, label %277, label %283

277:                                              ; preds = %273
  %278 = bitcast %class.SkImage* %271 to %class.SkRefCntBase*
  %279 = bitcast %class.SkImage* %271 to void (%class.SkRefCntBase*)***
  %280 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %279, align 8
  %281 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %280, i64 2
  %282 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %281, align 8
  call void %282(%class.SkRefCntBase* nonnull %278) #12
  br label %283

283:                                              ; preds = %277, %273, %269
  store i8 0, i8* %256, align 8
  br label %284

284:                                              ; preds = %283, %255
  %285 = bitcast %class.sk_sp* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %285) #12
  %286 = getelementptr inbounds %"class.blink::WebGLImageConversion::ImageExtractor", %"class.blink::WebGLImageConversion::ImageExtractor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %287 = bitcast %class.sk_sp.200* %5 to i64*
  %288 = load i64, i64* %287, align 8
  store %class.SkImage* null, %class.SkImage** %18, align 8
  %289 = bitcast %class.sk_sp* %4 to i64*
  store i64 %288, i64* %289, align 8
  call void @_ZN5blink16ImagePixelLockerC1E5sk_spIK7SkImageE11SkAlphaType11SkColorType(%"class.blink::ImagePixelLocker"* %286, %class.sk_sp* nonnull %4, i32 %224, i32 6) #12
  %290 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %291 = load %class.SkImage*, %class.SkImage** %290, align 8
  %292 = icmp eq %class.SkImage* %291, null
  br i1 %292, label %303, label %293

293:                                              ; preds = %284
  %294 = getelementptr inbounds %class.SkImage, %class.SkImage* %291, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = atomicrmw add i32* %294, i32 -1 acq_rel
  %296 = icmp eq i32 %295, 1
  br i1 %296, label %297, label %303

297:                                              ; preds = %293
  %298 = bitcast %class.SkImage* %291 to %class.SkRefCntBase*
  %299 = bitcast %class.SkImage* %291 to void (%class.SkRefCntBase*)***
  %300 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %299, align 8
  %301 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %300, i64 2
  %302 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %301, align 8
  call void %302(%class.SkRefCntBase* nonnull %298) #12
  br label %303

303:                                              ; preds = %284, %293, %297
  store i8 1, i8* %256, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %285) #12
  br label %304

304:                                              ; preds = %104, %223, %227, %244, %208, %303
  %305 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 16
  %306 = icmp eq %class.SkColorSpace* %305, null
  br i1 %306, label %313, label %307

307:                                              ; preds = %304
  %308 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %305, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %309 = atomicrmw add i32* %308, i32 -1 acq_rel
  %310 = icmp eq i32 %309, 1
  br i1 %310, label %311, label %313

311:                                              ; preds = %307
  %312 = bitcast %class.SkColorSpace* %305 to i8*
  call void @_ZdlPv(i8* %312) #13
  br label %313

313:                                              ; preds = %304, %307, %311
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #12
  %314 = load %class.SkImage*, %class.SkImage** %18, align 8
  %315 = icmp eq %class.SkImage* %314, null
  br i1 %315, label %326, label %316

316:                                              ; preds = %313
  %317 = getelementptr inbounds %class.SkImage, %class.SkImage* %314, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %318 = atomicrmw add i32* %317, i32 -1 acq_rel
  %319 = icmp eq i32 %318, 1
  br i1 %319, label %320, label %326

320:                                              ; preds = %316
  %321 = bitcast %class.SkImage* %314 to %class.SkRefCntBase*
  %322 = bitcast %class.SkImage* %314 to void (%class.SkRefCntBase*)***
  %323 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %322, align 8
  %324 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %323, i64 2
  %325 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %324, align 8
  call void %325(%class.SkRefCntBase* nonnull %321) #12
  br label %326

326:                                              ; preds = %313, %316, %320
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %327

327:                                              ; preds = %3, %326
  ret void
}

declare void @_ZNK2cc10PaintImage12GetSwSkImageEv(%class.sk_sp.200* sret, %"class.cc::PaintImage"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"*) unnamed_addr #4

declare %class.SkColorSpace* @_ZNK7SkImage10colorSpaceEv(%class.SkImage*) local_unnamed_addr #3

declare zeroext i1 @_ZNK12SkColorSpace6isSRGBEv(%class.SkColorSpace*) local_unnamed_addr #3

declare i64 @_ZN5blink12ImageDecoder10FrameCountEv(%"class.blink::ImageDecoder"*) local_unnamed_addr #3

declare %"class.blink::ImageFrame"* @_ZN5blink12ImageDecoder24DecodeFrameBufferAtIndexEm(%"class.blink::ImageDecoder"*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #3

declare void @_ZN5blink10ImageFrame25FinalizePixelsAndGetImageEv(%class.sk_sp.200* sret, %"class.blink::ImageFrame"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink20WebGLImageConversion22GetChannelBitsByFormatEj(i32) local_unnamed_addr #5 align 2 {
  switch i32 %0, label %11 [
    i32 6406, label %12
    i32 6403, label %2
    i32 36244, label %2
    i32 33321, label %2
    i32 36756, label %2
    i32 33330, label %2
    i32 33329, label %2
    i32 33332, label %2
    i32 33331, label %2
    i32 33334, label %2
    i32 33333, label %2
    i32 33325, label %2
    i32 33326, label %2
    i32 33319, label %3
    i32 33320, label %3
    i32 33323, label %3
    i32 36757, label %3
    i32 33336, label %3
    i32 33335, label %3
    i32 33338, label %3
    i32 33337, label %3
    i32 33340, label %3
    i32 33339, label %3
    i32 33327, label %3
    i32 33328, label %3
    i32 6409, label %4
    i32 6410, label %5
    i32 6407, label %6
    i32 36248, label %6
    i32 32849, label %6
    i32 36758, label %6
    i32 36221, label %6
    i32 36239, label %6
    i32 36215, label %6
    i32 36233, label %6
    i32 36209, label %6
    i32 36227, label %6
    i32 34843, label %6
    i32 34837, label %6
    i32 36194, label %6
    i32 35898, label %6
    i32 35901, label %6
    i32 35904, label %6
    i32 35905, label %6
    i32 6408, label %7
    i32 36249, label %7
    i32 32856, label %7
    i32 36759, label %7
    i32 36220, label %7
    i32 36238, label %7
    i32 36214, label %7
    i32 36232, label %7
    i32 36208, label %7
    i32 36226, label %7
    i32 34842, label %7
    i32 34836, label %7
    i32 32854, label %7
    i32 32855, label %7
    i32 32857, label %7
    i32 36975, label %7
    i32 35906, label %7
    i32 35907, label %7
    i32 6402, label %8
    i32 33189, label %8
    i32 33190, label %8
    i32 36012, label %8
    i32 6146, label %9
    i32 36168, label %9
    i32 34041, label %10
    i32 35056, label %10
    i32 36013, label %10
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %12

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %12

4:                                                ; preds = %1
  br label %12

5:                                                ; preds = %1
  br label %12

6:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %12

7:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %12

8:                                                ; preds = %1, %1, %1, %1
  br label %12

9:                                                ; preds = %1, %1
  br label %12

10:                                               ; preds = %1, %1, %1
  br label %12

11:                                               ; preds = %1
  br label %12

12:                                               ; preds = %1, %11, %10, %9, %8, %7, %6, %5, %4, %3, %2
  %13 = phi i32 [ 0, %11 ], [ 48, %10 ], [ 32, %9 ], [ 16, %8 ], [ 15, %7 ], [ 7, %6 ], [ 15, %5 ], [ 7, %4 ], [ 3, %3 ], [ 1, %2 ], [ 8, %1 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20WebGLImageConversion13PackImageDataEPNS_5ImageEPKvjjbNS0_7AlphaOpENS0_10DataFormatEjjRKNS_7IntRectEijiRN3WTF6VectorIhLj0ENSA_18PartitionAllocatorEEE(%"class.blink::Image"* nocapture readnone, i8*, i32, i32, i1 zeroext, i32, i32, i32, i32, %"class.blink::IntRect"* dereferenceable(16), i32, i32, i32, %"class.WTF::Vector.258"* nocapture dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %15 = alloca i32, align 4
  %16 = alloca %"struct.blink::WebGLImageConversion::PixelStoreParams", align 4
  %17 = icmp eq i8* %1, null
  br i1 %17, label %89, label %18

18:                                               ; preds = %14
  %19 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  store i32 -1431655766, i32* %15, align 4
  %20 = bitcast %"struct.blink::WebGLImageConversion::PixelStoreParams"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #12
  %21 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %16, i64 0, i32 0
  %22 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %16, i64 0, i32 1
  %23 = bitcast i32* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 20, i1 false) #12
  store i32 1, i32* %21, align 4
  %24 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9, i64 0, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @_ZN5blink20WebGLImageConversion23ComputeImageSizeInBytesEjjiiiRKNS0_16PixelStoreParamsEPjS4_S4_(i32 %2, i32 %3, i32 %25, i32 %27, i32 %10, %"struct.blink::WebGLImageConversion::PixelStoreParams"* nonnull dereferenceable(24) %16, i32* nonnull %15, i32* null, i32* null)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %87

30:                                               ; preds = %18
  %31 = load i32, i32* %15, align 4
  %32 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %13, i64 0, i32 0, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = icmp ult i32 %33, %31
  br i1 %34, label %35, label %83

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %13, i64 0, i32 0, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = icmp ult i32 %37, %31
  br i1 %38, label %39, label %72

39:                                               ; preds = %35
  %40 = lshr i32 %37, 2
  %41 = add nuw i32 %37, 1
  %42 = add i32 %41, %40
  %43 = icmp ugt i32 %42, 4
  %44 = select i1 %43, i32 %42, i32 4
  %45 = icmp ugt i32 %44, %31
  %46 = select i1 %45, i32 %44, i32 %31
  %47 = icmp ult i32 %37, %46
  br i1 %47, label %48, label %72, !prof !12

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %13, i64 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  %52 = zext i32 %46 to i64
  %53 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %52) #12
  %54 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %53, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %55 = ptrtoint i8* %54 to i64
  br i1 %51, label %56, label %59

56:                                               ; preds = %48
  %57 = bitcast %"class.WTF::Vector.258"* %13 to i64*
  store atomic i64 %55, i64* %57 monotonic, align 8
  %58 = trunc i64 %53 to i32
  store i32 %58, i32* %36, align 8
  br label %72

59:                                               ; preds = %48
  %60 = load i8*, i8** %49, align 8
  %61 = icmp ne i8* %54, null
  %62 = icmp ne i8* %60, null
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %68, !prof !12

64:                                               ; preds = %59
  %65 = load i32, i32* %32, align 4
  %66 = zext i32 %65 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %54, i8* nonnull align 1 %60, i64 %66, i1 false) #12
  %67 = load i8*, i8** %49, align 8
  br label %68

68:                                               ; preds = %64, %59
  %69 = phi i8* [ %60, %59 ], [ %67, %64 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #12
  %70 = bitcast %"class.WTF::Vector.258"* %13 to i64*
  store atomic i64 %55, i64* %70 monotonic, align 8
  %71 = trunc i64 %53 to i32
  store i32 %71, i32* %36, align 8
  br label %72

72:                                               ; preds = %68, %56, %39, %35
  %73 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %13, i64 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = load i32, i32* %32, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = zext i32 %31 to i64
  %79 = getelementptr inbounds i8, i8* %74, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = ptrtoint i8* %77 to i64
  %82 = sub i64 %80, %81
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 0, i64 %82, i1 false) #12
  br label %83

83:                                               ; preds = %30, %72
  store i32 %31, i32* %32, align 4
  %84 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %13, i64 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = tail call zeroext i1 @_ZN5blink20WebGLImageConversion10PackPixelsEPKvNS0_10DataFormatEjjRKNS_7IntRectEijijjNS0_7AlphaOpEPvb(i8* nonnull %1, i32 %6, i32 %7, i32 undef, %"class.blink::IntRect"* dereferenceable(16) %9, i32 %10, i32 %11, i32 %12, i32 %2, i32 %3, i32 %5, i8* %85, i1 zeroext %4)
  br label %87

87:                                               ; preds = %18, %83
  %88 = phi i1 [ %86, %83 ], [ false, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  br label %89

89:                                               ; preds = %14, %87
  %90 = phi i1 [ %88, %87 ], [ false, %14 ]
  ret i1 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20WebGLImageConversion10PackPixelsEPKvNS0_10DataFormatEjjRKNS_7IntRectEijijjNS0_7AlphaOpEPvb(i8*, i32, i32, i32, %"class.blink::IntRect"* dereferenceable(16), i32, i32, i32, i32, i32, i32, i8*, i1 zeroext) local_unnamed_addr #6 align 2 {
  %14 = alloca %"class.blink::(anonymous namespace)::FormatConverter", align 8
  %15 = icmp eq i32 %7, 0
  %16 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = select i1 %15, i32 %17, i32 %7
  %19 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_119TexelBytesForFormatENS_20WebGLImageConversion10DataFormatE(i32 %1)
  %20 = mul i32 %19, %2
  %21 = icmp eq i32 %6, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13
  %23 = urem i32 %20, %6
  %24 = icmp eq i32 %23, 0
  %25 = add i32 %20, %6
  %26 = sub i32 %25, %23
  br i1 %24, label %27, label %28

27:                                               ; preds = %13, %22
  br label %28

28:                                               ; preds = %22, %27
  %29 = phi i32 [ %20, %27 ], [ %26, %22 ]
  %30 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = mul i32 %31, %19
  %33 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_113GetDataFormatEjj(i32 %8, i32 %9)
  %34 = icmp eq i32 %33, 53
  br i1 %34, label %1641, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_119TexelBytesForFormatENS_20WebGLImageConversion10DataFormatE(i32 %33)
  %39 = mul i32 %38, %37
  br i1 %12, label %40, label %47

40:                                               ; preds = %35
  %41 = mul nsw i32 %17, %5
  %42 = add nsw i32 %41, -1
  %43 = mul nsw i32 %42, %39
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %11, i64 %44
  %46 = sub nsw i32 0, %39
  br label %47

47:                                               ; preds = %40, %35
  %48 = phi i8* [ %45, %40 ], [ %11, %35 ]
  %49 = phi i32 [ %46, %40 ], [ %39, %35 ]
  switch i32 %1, label %59 [
    i32 48, label %50
    i32 47, label %50
    i32 46, label %50
    i32 45, label %50
    i32 44, label %50
    i32 43, label %50
    i32 42, label %50
    i32 22, label %50
    i32 21, label %50
    i32 20, label %50
    i32 19, label %50
    i32 18, label %50
    i32 7, label %50
    i32 6, label %50
    i32 5, label %50
    i32 4, label %50
    i32 3, label %50
    i32 2, label %50
    i32 1, label %50
    i32 0, label %50
    i32 8, label %50
  ]

50:                                               ; preds = %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47, %47
  %51 = add nsw i32 %1, -15
  %52 = icmp ult i32 %51, 9
  br i1 %52, label %54, label %53

53:                                               ; preds = %50
  switch i32 %1, label %59 [
    i32 45, label %54
    i32 44, label %54
    i32 43, label %54
    i32 42, label %54
    i32 41, label %54
    i32 40, label %54
    i32 38, label %54
    i32 37, label %54
    i32 36, label %54
    i32 35, label %54
    i32 34, label %54
    i32 33, label %54
    i32 32, label %54
    i32 31, label %54
    i32 30, label %54
    i32 29, label %54
    i32 28, label %54
    i32 27, label %54
    i32 26, label %54
    i32 25, label %54
    i32 24, label %54
    i32 14, label %54
    i32 13, label %54
    i32 12, label %54
    i32 11, label %54
    i32 10, label %54
    i32 9, label %54
    i32 8, label %54
    i32 7, label %54
    i32 6, label %54
    i32 5, label %54
    i32 4, label %54
    i32 3, label %54
    i32 2, label %54
    i32 1, label %54
    i32 0, label %54
    i32 39, label %54
  ]

54:                                               ; preds = %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %53, %50
  %55 = add i32 %33, -15
  %56 = icmp ult i32 %55, 9
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  switch i32 %33, label %59 [
    i32 45, label %58
    i32 44, label %58
    i32 43, label %58
    i32 42, label %58
    i32 41, label %58
    i32 40, label %58
    i32 38, label %58
    i32 37, label %58
    i32 36, label %58
    i32 35, label %58
    i32 34, label %58
    i32 33, label %58
    i32 32, label %58
    i32 31, label %58
    i32 30, label %58
    i32 29, label %58
    i32 28, label %58
    i32 27, label %58
    i32 26, label %58
    i32 25, label %58
    i32 24, label %58
    i32 14, label %58
    i32 13, label %58
    i32 12, label %58
    i32 11, label %58
    i32 10, label %58
    i32 9, label %58
    i32 8, label %58
    i32 7, label %58
    i32 6, label %58
    i32 5, label %58
    i32 4, label %58
    i32 3, label %58
    i32 2, label %58
    i32 1, label %58
    i32 0, label %58
    i32 39, label %58
  ]

58:                                               ; preds = %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %57, %54
  br label %59

59:                                               ; preds = %47, %53, %57, %58
  %60 = phi i32 [ %10, %58 ], [ 0, %57 ], [ 0, %53 ], [ 0, %47 ]
  %61 = icmp eq i32 %33, %1
  %62 = icmp eq i32 %60, 0
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %120

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = mul nsw i32 %66, %29
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %0, i64 %68
  %70 = add nsw i32 %17, %66
  %71 = mul nsw i32 %70, %29
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %0, i64 %72
  %74 = icmp sgt i32 %5, 1
  %75 = and i1 %74, %12
  br i1 %75, label %76, label %84

76:                                               ; preds = %64
  %77 = add nsw i32 %5, -1
  %78 = mul i32 %29, %18
  %79 = mul i32 %78, %77
  %80 = sext i32 %79 to i64
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, i8* %69, i64 %81
  %83 = getelementptr inbounds i8, i8* %73, i64 %81
  br label %86

84:                                               ; preds = %64
  %85 = icmp sgt i32 %5, 0
  br i1 %85, label %86, label %1641

86:                                               ; preds = %76, %84
  %87 = phi i8* [ %83, %76 ], [ %73, %84 ]
  %88 = phi i8* [ %82, %76 ], [ %69, %84 ]
  %89 = icmp slt i32 %49, 0
  %90 = sub nsw i32 0, %49
  %91 = select i1 %89, i32 %90, i32 %49
  %92 = sext i32 %32 to i64
  %93 = zext i32 %91 to i64
  %94 = sext i32 %29 to i64
  %95 = sext i32 %49 to i64
  %96 = mul nsw i32 %29, %18
  %97 = sext i32 %96 to i64
  %98 = and i32 %5, 1
  %99 = icmp eq i32 %5, 1
  br i1 %99, label %1627, label %100

100:                                              ; preds = %86
  %101 = sub i32 %5, %98
  br label %102

102:                                              ; preds = %1650, %100
  %103 = phi i8* [ %48, %100 ], [ %1651, %1650 ]
  %104 = phi i8* [ %87, %100 ], [ %1653, %1650 ]
  %105 = phi i8* [ %88, %100 ], [ %1652, %1650 ]
  %106 = phi i32 [ %101, %100 ], [ %1654, %1650 ]
  %107 = icmp ult i8* %105, %104
  br i1 %107, label %108, label %115

108:                                              ; preds = %102, %108
  %109 = phi i8* [ %112, %108 ], [ %105, %102 ]
  %110 = phi i8* [ %113, %108 ], [ %103, %102 ]
  %111 = getelementptr inbounds i8, i8* %109, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %111, i64 %93, i1 false)
  %112 = getelementptr inbounds i8, i8* %109, i64 %94
  %113 = getelementptr inbounds i8, i8* %110, i64 %95
  %114 = icmp ult i8* %112, %104
  br i1 %114, label %108, label %115

115:                                              ; preds = %108, %102
  %116 = phi i8* [ %103, %102 ], [ %113, %108 ]
  %117 = getelementptr inbounds i8, i8* %105, i64 %97
  %118 = getelementptr inbounds i8, i8* %104, i64 %97
  %119 = icmp ult i8* %105, %104
  br i1 %119, label %1643, label %1650

120:                                              ; preds = %59
  %121 = bitcast %"class.blink::(anonymous namespace)::FormatConverter"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %121) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 -86, i64 48, i1 false)
  %122 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 0
  store %"class.blink::IntRect"* %4, %"class.blink::IntRect"** %122, align 8
  %123 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 1
  store i32 %5, i32* %123, align 8
  %124 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 2
  store i32 %18, i32* %124, align 4
  %125 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 3
  store i8* %0, i8** %125, align 8
  %126 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 4
  store i8* %48, i8** %126, align 8
  %127 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 5
  store i32 %29, i32* %127, align 8
  %128 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 6
  store i32 %32, i32* %128, align 4
  %129 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 7
  store i32 %49, i32* %129, align 8
  %130 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 8
  store i8 0, i8* %130, align 4
  %131 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9
  %132 = bitcast %"class.std::__1::unique_ptr.240"* %131 to i64*
  %133 = shl i32 %37, 4
  %134 = zext i32 %133 to i64
  %135 = tail call i8* @_Znam(i64 %134) #13
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %135, i8 0, i64 %134, i1 false) #12
  %136 = ptrtoint i8* %135 to i64
  store i64 %136, i64* %132, align 8
  %137 = bitcast i8* %48 to i16*
  %138 = bitcast i8* %48 to float*
  %139 = bitcast i8* %48 to i32*
  switch i32 %1, label %1619 [
    i32 42, label %140
    i32 44, label %345
    i32 0, label %539
    i32 6, label %1618
    i32 8, label %1346
    i32 7, label %1199
    i32 18, label %540
    i32 21, label %541
    i32 22, label %871
  ]

140:                                              ; preds = %120
  %141 = icmp eq i32 %33, 42
  %142 = icmp eq i32 %60, 1
  %143 = and i1 %141, %142
  br i1 %143, label %144, label %1619

144:                                              ; preds = %140
  %145 = sext i32 %29 to i64
  %146 = sext i32 %49 to i64
  %147 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = mul nsw i32 %148, %29
  %150 = add nsw i32 %149, %32
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %0, i64 %151
  %153 = icmp slt i32 %49, 0
  %154 = icmp sgt i32 %5, 1
  %155 = and i1 %154, %153
  br i1 %155, label %156, label %164

156:                                              ; preds = %144
  %157 = add nsw i32 %5, -1
  %158 = sext i32 %157 to i64
  %159 = sext i32 %18 to i64
  %160 = mul nsw i64 %158, %159
  %161 = mul i64 %160, %145
  %162 = sub i64 0, %161
  %163 = getelementptr inbounds i8, i8* %152, i64 %162
  br label %166

164:                                              ; preds = %144
  %165 = icmp sgt i32 %5, 0
  br i1 %165, label %166, label %344

166:                                              ; preds = %164, %156
  %167 = phi i8* [ %163, %156 ], [ %152, %164 ]
  %168 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %169

169:                                              ; preds = %192, %166
  %170 = phi i32 [ %17, %166 ], [ %183, %192 ]
  %171 = phi i32 [ %18, %166 ], [ %184, %192 ]
  %172 = phi i32 [ %5, %166 ], [ %185, %192 ]
  %173 = phi %"class.blink::IntRect"* [ %4, %166 ], [ %186, %192 ]
  %174 = phi %"class.blink::IntRect"* [ %4, %166 ], [ %187, %192 ]
  %175 = phi i32 [ 0, %166 ], [ %190, %192 ]
  %176 = phi i8* [ %48, %166 ], [ %189, %192 ]
  %177 = phi i8* [ %167, %166 ], [ %196, %192 ]
  %178 = icmp sgt i32 %170, 0
  br i1 %178, label %197, label %182

179:                                              ; preds = %335
  %180 = load i32, i32* %123, align 8
  %181 = load i32, i32* %124, align 4
  br label %182

182:                                              ; preds = %179, %169
  %183 = phi i32 [ %170, %169 ], [ %341, %179 ]
  %184 = phi i32 [ %171, %169 ], [ %181, %179 ]
  %185 = phi i32 [ %172, %169 ], [ %180, %179 ]
  %186 = phi %"class.blink::IntRect"* [ %173, %169 ], [ %336, %179 ]
  %187 = phi %"class.blink::IntRect"* [ %174, %169 ], [ %336, %179 ]
  %188 = phi i8* [ %177, %169 ], [ %337, %179 ]
  %189 = phi i8* [ %176, %169 ], [ %338, %179 ]
  %190 = add nuw nsw i32 %175, 1
  %191 = icmp slt i32 %190, %185
  br i1 %191, label %192, label %344

192:                                              ; preds = %182
  %193 = sub nsw i32 %184, %183
  %194 = sext i32 %193 to i64
  %195 = mul nsw i64 %194, %145
  %196 = getelementptr inbounds i8, i8* %188, i64 %195
  br label %169

197:                                              ; preds = %169, %335
  %198 = phi i64 [ %343, %335 ], [ 0, %169 ]
  %199 = phi %"class.blink::IntRect"* [ %336, %335 ], [ %173, %169 ]
  %200 = phi %"class.blink::IntRect"* [ %336, %335 ], [ %174, %169 ]
  %201 = phi i32 [ %339, %335 ], [ 0, %169 ]
  %202 = phi i8* [ %338, %335 ], [ %176, %169 ]
  %203 = phi i8* [ %337, %335 ], [ %177, %169 ]
  %204 = mul i64 %198, %146
  %205 = getelementptr i8, i8* %176, i64 %204
  %206 = add i64 %204, 2
  %207 = getelementptr i8, i8* %176, i64 %206
  %208 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %200, i64 0, i32 1, i32 0
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %335, label %211

211:                                              ; preds = %197
  %212 = load i8*, i8** %168, align 8
  %213 = and i32 %209, 1
  %214 = icmp eq i32 %209, 1
  br i1 %214, label %243, label %215

215:                                              ; preds = %211
  %216 = sub i32 %209, %213
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i8* [ %203, %215 ], [ %239, %217 ]
  %219 = phi i8* [ %212, %215 ], [ %240, %217 ]
  %220 = phi i32 [ %216, %215 ], [ %241, %217 ]
  %221 = load i8, i8* %218, align 1
  store i8 %221, i8* %219, align 1
  %222 = load i8, i8* %218, align 1
  %223 = getelementptr inbounds i8, i8* %219, i64 1
  store i8 %222, i8* %223, align 1
  %224 = load i8, i8* %218, align 1
  %225 = getelementptr inbounds i8, i8* %219, i64 2
  store i8 %224, i8* %225, align 1
  %226 = getelementptr inbounds i8, i8* %218, i64 1
  %227 = load i8, i8* %226, align 1
  %228 = getelementptr inbounds i8, i8* %219, i64 3
  store i8 %227, i8* %228, align 1
  %229 = getelementptr inbounds i8, i8* %218, i64 2
  %230 = getelementptr inbounds i8, i8* %219, i64 4
  %231 = load i8, i8* %229, align 1
  store i8 %231, i8* %230, align 1
  %232 = load i8, i8* %229, align 1
  %233 = getelementptr inbounds i8, i8* %219, i64 5
  store i8 %232, i8* %233, align 1
  %234 = load i8, i8* %229, align 1
  %235 = getelementptr inbounds i8, i8* %219, i64 6
  store i8 %234, i8* %235, align 1
  %236 = getelementptr inbounds i8, i8* %218, i64 3
  %237 = load i8, i8* %236, align 1
  %238 = getelementptr inbounds i8, i8* %219, i64 7
  store i8 %237, i8* %238, align 1
  %239 = getelementptr inbounds i8, i8* %218, i64 4
  %240 = getelementptr inbounds i8, i8* %219, i64 8
  %241 = add i32 %220, -2
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %217

243:                                              ; preds = %217, %211
  %244 = phi i8* [ %203, %211 ], [ %239, %217 ]
  %245 = phi i8* [ %212, %211 ], [ %240, %217 ]
  %246 = icmp eq i32 %213, 0
  br i1 %246, label %256, label %247

247:                                              ; preds = %243
  %248 = load i8, i8* %244, align 1
  store i8 %248, i8* %245, align 1
  %249 = load i8, i8* %244, align 1
  %250 = getelementptr inbounds i8, i8* %245, i64 1
  store i8 %249, i8* %250, align 1
  %251 = load i8, i8* %244, align 1
  %252 = getelementptr inbounds i8, i8* %245, i64 2
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %244, i64 1
  %254 = load i8, i8* %253, align 1
  %255 = getelementptr inbounds i8, i8* %245, i64 3
  store i8 %254, i8* %255, align 1
  br label %256

256:                                              ; preds = %243, %247
  %257 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  %258 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %257, i64 0, i32 1, i32 0
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %335, label %261

261:                                              ; preds = %256
  %262 = load i8*, i8** %168, align 8
  %263 = add i32 %259, -1
  %264 = zext i32 %263 to i64
  %265 = add nuw nsw i64 %264, 1
  %266 = icmp ult i64 %265, 17
  br i1 %266, label %311, label %267

267:                                              ; preds = %261
  %268 = add i32 %259, -1
  %269 = zext i32 %268 to i64
  %270 = shl nuw nsw i64 %269, 1
  %271 = getelementptr i8, i8* %207, i64 %270
  %272 = getelementptr i8, i8* %262, i64 4
  %273 = shl nuw nsw i64 %269, 2
  %274 = getelementptr i8, i8* %272, i64 %273
  %275 = icmp ult i8* %205, %274
  %276 = icmp ult i8* %262, %271
  %277 = and i1 %275, %276
  br i1 %277, label %311, label %278

278:                                              ; preds = %267
  %279 = and i64 %265, 15
  %280 = icmp eq i64 %279, 0
  %281 = select i1 %280, i64 16, i64 %279
  %282 = sub nsw i64 %265, %281
  %283 = shl nsw i64 %282, 2
  %284 = getelementptr i8, i8* %262, i64 %283
  %285 = shl nsw i64 %282, 1
  %286 = getelementptr i8, i8* %202, i64 %285
  %287 = trunc i64 %282 to i32
  br label %288

288:                                              ; preds = %288, %278
  %289 = phi i64 [ 0, %278 ], [ %309, %288 ]
  %290 = shl i64 %289, 2
  %291 = getelementptr i8, i8* %262, i64 %290
  %292 = shl i64 %289, 1
  %293 = getelementptr inbounds i8, i8* %291, i64 3
  %294 = bitcast i8* %293 to <64 x i8>*
  %295 = load <64 x i8>, <64 x i8>* %294, align 1
  %296 = shufflevector <64 x i8> %295, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %297 = uitofp <16 x i8> %296 to <16 x float>
  %298 = fdiv <16 x float> %297, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %299 = bitcast i8* %291 to <64 x i8>*
  %300 = load <64 x i8>, <64 x i8>* %299, align 1
  %301 = shufflevector <64 x i8> %300, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %302 = shufflevector <64 x i8> %300, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %303 = uitofp <16 x i8> %301 to <16 x float>
  %304 = fmul <16 x float> %298, %303
  %305 = fptoui <16 x float> %304 to <16 x i8>
  %306 = getelementptr inbounds i8, i8* %202, i64 %292
  %307 = bitcast i8* %306 to <32 x i8>*
  %308 = shufflevector <16 x i8> %305, <16 x i8> %302, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %308, <32 x i8>* %307, align 1
  %309 = add i64 %289, 16
  %310 = icmp eq i64 %309, %282
  br i1 %310, label %311, label %288, !llvm.loop !14

311:                                              ; preds = %288, %267, %261
  %312 = phi i8* [ %262, %267 ], [ %262, %261 ], [ %284, %288 ]
  %313 = phi i8* [ %202, %267 ], [ %202, %261 ], [ %286, %288 ]
  %314 = phi i32 [ 0, %267 ], [ 0, %261 ], [ %287, %288 ]
  br label %315

315:                                              ; preds = %311, %315
  %316 = phi i8* [ %329, %315 ], [ %312, %311 ]
  %317 = phi i8* [ %330, %315 ], [ %313, %311 ]
  %318 = phi i32 [ %331, %315 ], [ %314, %311 ]
  %319 = getelementptr inbounds i8, i8* %316, i64 3
  %320 = load i8, i8* %319, align 1
  %321 = uitofp i8 %320 to float
  %322 = fdiv float %321, 2.550000e+02
  %323 = load i8, i8* %316, align 1
  %324 = uitofp i8 %323 to float
  %325 = fmul float %322, %324
  %326 = fptoui float %325 to i8
  store i8 %326, i8* %317, align 1
  %327 = load i8, i8* %319, align 1
  %328 = getelementptr inbounds i8, i8* %317, i64 1
  store i8 %327, i8* %328, align 1
  %329 = getelementptr inbounds i8, i8* %316, i64 4
  %330 = getelementptr inbounds i8, i8* %317, i64 2
  %331 = add nuw i32 %318, 1
  %332 = icmp eq i32 %331, %259
  br i1 %332, label %333, label %315, !llvm.loop !16

333:                                              ; preds = %315
  %334 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %335

335:                                              ; preds = %333, %256, %197
  %336 = phi %"class.blink::IntRect"* [ %334, %333 ], [ %257, %256 ], [ %199, %197 ]
  %337 = getelementptr inbounds i8, i8* %203, i64 %145
  %338 = getelementptr inbounds i8, i8* %202, i64 %146
  %339 = add nuw nsw i32 %201, 1
  %340 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %336, i64 0, i32 1, i32 1
  %341 = load i32, i32* %340, align 4
  %342 = icmp slt i32 %339, %341
  %343 = add i64 %198, 1
  br i1 %342, label %197, label %179

344:                                              ; preds = %182, %164
  store i8 1, i8* %130, align 4
  br label %1619

345:                                              ; preds = %120
  %346 = icmp eq i32 %33, 44
  %347 = icmp eq i32 %60, 1
  %348 = and i1 %346, %347
  br i1 %348, label %349, label %1619

349:                                              ; preds = %345
  %350 = sdiv i32 %29, 4
  %351 = sext i32 %350 to i64
  %352 = sdiv i32 %49, 4
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %355 = load i32, i32* %354, align 4
  %356 = mul nsw i32 %355, %29
  %357 = add nsw i32 %356, %32
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %0, i64 %358
  %360 = bitcast i8* %359 to float*
  %361 = icmp slt i32 %49, 0
  %362 = icmp sgt i32 %5, 1
  %363 = and i1 %362, %361
  br i1 %363, label %364, label %372

364:                                              ; preds = %349
  %365 = add nsw i32 %5, -1
  %366 = sext i32 %365 to i64
  %367 = sext i32 %18 to i64
  %368 = mul nsw i64 %366, %367
  %369 = mul i64 %368, %351
  %370 = sub i64 0, %369
  %371 = getelementptr inbounds float, float* %360, i64 %370
  br label %374

372:                                              ; preds = %349
  %373 = icmp sgt i32 %5, 0
  br i1 %373, label %374, label %538

374:                                              ; preds = %372, %364
  %375 = phi float* [ %371, %364 ], [ %360, %372 ]
  %376 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  %377 = bitcast i8** %376 to float**
  br label %378

378:                                              ; preds = %401, %374
  %379 = phi i32 [ %17, %374 ], [ %392, %401 ]
  %380 = phi i32 [ %18, %374 ], [ %393, %401 ]
  %381 = phi i32 [ %5, %374 ], [ %394, %401 ]
  %382 = phi %"class.blink::IntRect"* [ %4, %374 ], [ %395, %401 ]
  %383 = phi %"class.blink::IntRect"* [ %4, %374 ], [ %396, %401 ]
  %384 = phi i32 [ 0, %374 ], [ %399, %401 ]
  %385 = phi float* [ %138, %374 ], [ %398, %401 ]
  %386 = phi float* [ %375, %374 ], [ %405, %401 ]
  %387 = icmp sgt i32 %379, 0
  br i1 %387, label %406, label %391

388:                                              ; preds = %530
  %389 = load i32, i32* %123, align 8
  %390 = load i32, i32* %124, align 4
  br label %391

391:                                              ; preds = %388, %378
  %392 = phi i32 [ %379, %378 ], [ %536, %388 ]
  %393 = phi i32 [ %380, %378 ], [ %390, %388 ]
  %394 = phi i32 [ %381, %378 ], [ %389, %388 ]
  %395 = phi %"class.blink::IntRect"* [ %382, %378 ], [ %531, %388 ]
  %396 = phi %"class.blink::IntRect"* [ %383, %378 ], [ %531, %388 ]
  %397 = phi float* [ %386, %378 ], [ %532, %388 ]
  %398 = phi float* [ %385, %378 ], [ %533, %388 ]
  %399 = add nuw nsw i32 %384, 1
  %400 = icmp slt i32 %399, %394
  br i1 %400, label %401, label %538

401:                                              ; preds = %391
  %402 = sub nsw i32 %393, %392
  %403 = sext i32 %402 to i64
  %404 = mul nsw i64 %403, %351
  %405 = getelementptr inbounds float, float* %397, i64 %404
  br label %378

406:                                              ; preds = %378, %530
  %407 = phi %"class.blink::IntRect"* [ %531, %530 ], [ %382, %378 ]
  %408 = phi %"class.blink::IntRect"* [ %531, %530 ], [ %383, %378 ]
  %409 = phi i32 [ %534, %530 ], [ 0, %378 ]
  %410 = phi float* [ %533, %530 ], [ %385, %378 ]
  %411 = phi float* [ %532, %530 ], [ %386, %378 ]
  %412 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %408, i64 0, i32 1, i32 0
  %413 = load i32, i32* %412, align 4
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %530, label %415

415:                                              ; preds = %406
  %416 = load float*, float** %377, align 8
  %417 = and i32 %413, 1
  %418 = icmp eq i32 %413, 1
  br i1 %418, label %459, label %419

419:                                              ; preds = %415
  %420 = sub i32 %413, %417
  br label %421

421:                                              ; preds = %421, %419
  %422 = phi float* [ %411, %419 ], [ %455, %421 ]
  %423 = phi float* [ %416, %419 ], [ %456, %421 ]
  %424 = phi i32 [ %420, %419 ], [ %457, %421 ]
  %425 = bitcast float* %422 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = bitcast float* %423 to i32*
  store i32 %426, i32* %427, align 4
  %428 = load i32, i32* %425, align 4
  %429 = getelementptr inbounds float, float* %423, i64 1
  %430 = bitcast float* %429 to i32*
  store i32 %428, i32* %430, align 4
  %431 = load i32, i32* %425, align 4
  %432 = getelementptr inbounds float, float* %423, i64 2
  %433 = bitcast float* %432 to i32*
  store i32 %431, i32* %433, align 4
  %434 = getelementptr inbounds float, float* %422, i64 1
  %435 = bitcast float* %434 to i32*
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds float, float* %423, i64 3
  %438 = bitcast float* %437 to i32*
  store i32 %436, i32* %438, align 4
  %439 = getelementptr inbounds float, float* %422, i64 2
  %440 = getelementptr inbounds float, float* %423, i64 4
  %441 = bitcast float* %439 to i32*
  %442 = load i32, i32* %441, align 4
  %443 = bitcast float* %440 to i32*
  store i32 %442, i32* %443, align 4
  %444 = load i32, i32* %441, align 4
  %445 = getelementptr inbounds float, float* %423, i64 5
  %446 = bitcast float* %445 to i32*
  store i32 %444, i32* %446, align 4
  %447 = load i32, i32* %441, align 4
  %448 = getelementptr inbounds float, float* %423, i64 6
  %449 = bitcast float* %448 to i32*
  store i32 %447, i32* %449, align 4
  %450 = getelementptr inbounds float, float* %422, i64 3
  %451 = bitcast float* %450 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = getelementptr inbounds float, float* %423, i64 7
  %454 = bitcast float* %453 to i32*
  store i32 %452, i32* %454, align 4
  %455 = getelementptr inbounds float, float* %422, i64 4
  %456 = getelementptr inbounds float, float* %423, i64 8
  %457 = add i32 %424, -2
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %421

459:                                              ; preds = %421, %415
  %460 = phi float* [ %411, %415 ], [ %455, %421 ]
  %461 = phi float* [ %416, %415 ], [ %456, %421 ]
  %462 = icmp eq i32 %417, 0
  br i1 %462, label %478, label %463

463:                                              ; preds = %459
  %464 = bitcast float* %460 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = bitcast float* %461 to i32*
  store i32 %465, i32* %466, align 4
  %467 = load i32, i32* %464, align 4
  %468 = getelementptr inbounds float, float* %461, i64 1
  %469 = bitcast float* %468 to i32*
  store i32 %467, i32* %469, align 4
  %470 = load i32, i32* %464, align 4
  %471 = getelementptr inbounds float, float* %461, i64 2
  %472 = bitcast float* %471 to i32*
  store i32 %470, i32* %472, align 4
  %473 = getelementptr inbounds float, float* %460, i64 1
  %474 = bitcast float* %473 to i32*
  %475 = load i32, i32* %474, align 4
  %476 = getelementptr inbounds float, float* %461, i64 3
  %477 = bitcast float* %476 to i32*
  store i32 %475, i32* %477, align 4
  br label %478

478:                                              ; preds = %459, %463
  %479 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  %480 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %479, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %530, label %483

483:                                              ; preds = %478
  %484 = load float*, float** %377, align 8
  %485 = and i32 %481, 1
  %486 = icmp eq i32 %481, 1
  br i1 %486, label %515, label %487

487:                                              ; preds = %483
  %488 = sub i32 %481, %485
  br label %489

489:                                              ; preds = %489, %487
  %490 = phi float* [ %484, %487 ], [ %511, %489 ]
  %491 = phi float* [ %410, %487 ], [ %512, %489 ]
  %492 = phi i32 [ %488, %487 ], [ %513, %489 ]
  %493 = getelementptr inbounds float, float* %490, i64 3
  %494 = load float, float* %493, align 4
  %495 = load float, float* %490, align 4
  %496 = fmul float %494, %495
  store float %496, float* %491, align 4
  %497 = bitcast float* %493 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = getelementptr inbounds float, float* %491, i64 1
  %500 = bitcast float* %499 to i32*
  store i32 %498, i32* %500, align 4
  %501 = getelementptr inbounds float, float* %490, i64 4
  %502 = getelementptr inbounds float, float* %491, i64 2
  %503 = getelementptr inbounds float, float* %490, i64 7
  %504 = load float, float* %503, align 4
  %505 = load float, float* %501, align 4
  %506 = fmul float %504, %505
  store float %506, float* %502, align 4
  %507 = bitcast float* %503 to i32*
  %508 = load i32, i32* %507, align 4
  %509 = getelementptr inbounds float, float* %491, i64 3
  %510 = bitcast float* %509 to i32*
  store i32 %508, i32* %510, align 4
  %511 = getelementptr inbounds float, float* %490, i64 8
  %512 = getelementptr inbounds float, float* %491, i64 4
  %513 = add i32 %492, -2
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %515, label %489

515:                                              ; preds = %489, %483
  %516 = phi float* [ %484, %483 ], [ %511, %489 ]
  %517 = phi float* [ %410, %483 ], [ %512, %489 ]
  %518 = icmp eq i32 %485, 0
  br i1 %518, label %528, label %519

519:                                              ; preds = %515
  %520 = getelementptr inbounds float, float* %516, i64 3
  %521 = load float, float* %520, align 4
  %522 = load float, float* %516, align 4
  %523 = fmul float %521, %522
  store float %523, float* %517, align 4
  %524 = bitcast float* %520 to i32*
  %525 = load i32, i32* %524, align 4
  %526 = getelementptr inbounds float, float* %517, i64 1
  %527 = bitcast float* %526 to i32*
  store i32 %525, i32* %527, align 4
  br label %528

528:                                              ; preds = %515, %519
  %529 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %530

530:                                              ; preds = %528, %478, %406
  %531 = phi %"class.blink::IntRect"* [ %529, %528 ], [ %479, %478 ], [ %407, %406 ]
  %532 = getelementptr inbounds float, float* %411, i64 %351
  %533 = getelementptr inbounds float, float* %410, i64 %353
  %534 = add nuw nsw i32 %409, 1
  %535 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %531, i64 0, i32 1, i32 1
  %536 = load i32, i32* %535, align 4
  %537 = icmp slt i32 %534, %536
  br i1 %537, label %406, label %388

538:                                              ; preds = %391, %372
  store i8 1, i8* %130, align 4
  br label %1619

539:                                              ; preds = %120
  call fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE0EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"* nonnull %14, i32 %33, i32 %60) #12
  br label %1619

540:                                              ; preds = %120
  call fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE18EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"* nonnull %14, i32 %33, i32 %60) #12
  br label %1619

541:                                              ; preds = %120
  %542 = icmp eq i32 %33, 21
  %543 = icmp eq i32 %60, 1
  %544 = and i1 %542, %543
  br i1 %544, label %545, label %1619

545:                                              ; preds = %541
  %546 = sdiv i32 %29, 2
  %547 = sext i32 %546 to i64
  %548 = sdiv i32 %49, 2
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %551 = load i32, i32* %550, align 4
  %552 = mul nsw i32 %551, %29
  %553 = add nsw i32 %552, %32
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i8, i8* %0, i64 %554
  %556 = bitcast i8* %555 to i16*
  %557 = icmp slt i32 %49, 0
  %558 = icmp sgt i32 %5, 1
  %559 = and i1 %558, %557
  br i1 %559, label %560, label %568

560:                                              ; preds = %545
  %561 = add nsw i32 %5, -1
  %562 = sext i32 %561 to i64
  %563 = sext i32 %18 to i64
  %564 = mul nsw i64 %562, %563
  %565 = mul i64 %564, %547
  %566 = sub i64 0, %565
  %567 = getelementptr inbounds i16, i16* %556, i64 %566
  br label %570

568:                                              ; preds = %545
  %569 = icmp sgt i32 %5, 0
  br i1 %569, label %570, label %870

570:                                              ; preds = %568, %560
  %571 = phi i16* [ %567, %560 ], [ %556, %568 ]
  %572 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %573

573:                                              ; preds = %594, %570
  %574 = phi i32 [ %17, %570 ], [ %586, %594 ]
  %575 = phi i32 [ %18, %570 ], [ %587, %594 ]
  %576 = phi i32 [ %5, %570 ], [ %588, %594 ]
  %577 = phi %"class.blink::IntRect"* [ %4, %570 ], [ %589, %594 ]
  %578 = phi i32 [ 0, %570 ], [ %592, %594 ]
  %579 = phi i16* [ %137, %570 ], [ %591, %594 ]
  %580 = phi i16* [ %571, %570 ], [ %598, %594 ]
  %581 = icmp sgt i32 %574, 0
  br i1 %581, label %599, label %585

582:                                              ; preds = %861
  %583 = load i32, i32* %123, align 8
  %584 = load i32, i32* %124, align 4
  br label %585

585:                                              ; preds = %582, %573
  %586 = phi i32 [ %574, %573 ], [ %867, %582 ]
  %587 = phi i32 [ %575, %573 ], [ %584, %582 ]
  %588 = phi i32 [ %576, %573 ], [ %583, %582 ]
  %589 = phi %"class.blink::IntRect"* [ %577, %573 ], [ %862, %582 ]
  %590 = phi i16* [ %580, %573 ], [ %863, %582 ]
  %591 = phi i16* [ %579, %573 ], [ %864, %582 ]
  %592 = add nuw nsw i32 %578, 1
  %593 = icmp slt i32 %592, %588
  br i1 %593, label %594, label %870

594:                                              ; preds = %585
  %595 = sub nsw i32 %587, %586
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %596, %547
  %598 = getelementptr inbounds i16, i16* %590, i64 %597
  br label %573

599:                                              ; preds = %573, %861
  %600 = phi i64 [ %869, %861 ], [ 0, %573 ]
  %601 = phi %"class.blink::IntRect"* [ %862, %861 ], [ %577, %573 ]
  %602 = phi i32 [ %865, %861 ], [ 0, %573 ]
  %603 = phi i16* [ %864, %861 ], [ %579, %573 ]
  %604 = phi i16* [ %863, %861 ], [ %580, %573 ]
  %605 = mul i64 %600, %549
  %606 = getelementptr i16, i16* %579, i64 %605
  %607 = bitcast i16* %606 to i8*
  %608 = add i64 %605, 1
  %609 = getelementptr i16, i16* %579, i64 %608
  %610 = load i8*, i8** %572, align 8
  %611 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %601, i64 0, i32 1, i32 0
  %612 = load i32, i32* %611, align 4
  %613 = and i32 %612, -8
  %614 = icmp eq i32 %613, 0
  br i1 %614, label %648, label %615

615:                                              ; preds = %599, %615
  %616 = phi i16* [ %644, %615 ], [ %604, %599 ]
  %617 = phi i8* [ %645, %615 ], [ %610, %599 ]
  %618 = phi i32 [ %646, %615 ], [ 0, %599 ]
  %619 = bitcast i8* %617 to <8 x i16>*
  %620 = bitcast i16* %616 to <8 x i16>*
  %621 = load <8 x i16>, <8 x i16>* %620, align 1
  %622 = lshr <8 x i16> %621, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %623 = lshr <8 x i16> %621, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %624 = lshr <8 x i16> %621, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %625 = shl nuw nsw <8 x i16> %622, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %626 = shl nuw nsw <8 x i16> %623, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %627 = shl <8 x i16> %624, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %628 = and <8 x i16> %627, <i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248>
  %629 = shl <8 x i16> %621, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %630 = and <8 x i16> %623, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %631 = or <8 x i16> %626, %630
  %632 = shl <8 x i16> %631, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %633 = ashr exact <8 x i16> %629, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %634 = and <8 x i16> %622, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %635 = or <8 x i16> %625, %634
  %636 = or <8 x i16> %635, %632
  %637 = and <8 x i16> %624, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %638 = or <8 x i16> %633, %637
  %639 = or <8 x i16> %638, %628
  %640 = shufflevector <8 x i16> %636, <8 x i16> %639, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %641 = shufflevector <8 x i16> %636, <8 x i16> %639, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %641, <8 x i16>* %619, align 1
  %642 = getelementptr inbounds i8, i8* %617, i64 16
  %643 = bitcast i8* %642 to <8 x i16>*
  store <8 x i16> %640, <8 x i16>* %643, align 1
  %644 = getelementptr inbounds i16, i16* %616, i64 8
  %645 = getelementptr inbounds i8, i8* %617, i64 32
  %646 = add nuw i32 %618, 8
  %647 = icmp ult i32 %646, %613
  br i1 %647, label %615, label %648

648:                                              ; preds = %615, %599
  %649 = phi i16* [ %604, %599 ], [ %644, %615 ]
  %650 = phi i8* [ %610, %599 ], [ %645, %615 ]
  %651 = bitcast i16* %649 to i8*
  %652 = sub i32 %612, %613
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %746, label %654

654:                                              ; preds = %648
  %655 = xor i32 %613, -1
  %656 = add i32 %612, %655
  %657 = zext i32 %656 to i64
  %658 = add nuw nsw i64 %657, 1
  %659 = icmp ult i64 %658, 8
  br i1 %659, label %712, label %660

660:                                              ; preds = %654
  %661 = getelementptr i8, i8* %650, i64 4
  %662 = xor i32 %613, -1
  %663 = add i32 %612, %662
  %664 = zext i32 %663 to i64
  %665 = shl nuw nsw i64 %664, 2
  %666 = getelementptr i8, i8* %661, i64 %665
  %667 = getelementptr i16, i16* %649, i64 1
  %668 = getelementptr i16, i16* %667, i64 %664
  %669 = bitcast i16* %668 to i8*
  %670 = icmp ult i8* %650, %669
  %671 = icmp ugt i8* %666, %651
  %672 = and i1 %670, %671
  br i1 %672, label %712, label %673

673:                                              ; preds = %660
  %674 = and i64 %658, 8589934584
  %675 = trunc i64 %674 to i32
  %676 = shl nuw nsw i64 %674, 2
  %677 = getelementptr i8, i8* %650, i64 %676
  %678 = getelementptr i16, i16* %649, i64 %674
  br label %679

679:                                              ; preds = %679, %673
  %680 = phi i64 [ 0, %673 ], [ %708, %679 ]
  %681 = shl i64 %680, 2
  %682 = getelementptr i16, i16* %649, i64 %680
  %683 = bitcast i16* %682 to <8 x i16>*
  %684 = load <8 x i16>, <8 x i16>* %683, align 2, !alias.scope !17
  %685 = lshr <8 x i16> %684, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %686 = lshr <8 x i16> %684, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %687 = lshr <8 x i16> %684, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %688 = shl nuw nsw <8 x i16> %685, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %689 = and <8 x i16> %685, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %690 = or <8 x i16> %688, %689
  %691 = trunc <8 x i16> %690 to <8 x i8>
  %692 = shl nuw nsw <8 x i16> %686, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %693 = and <8 x i16> %686, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %694 = or <8 x i16> %692, %693
  %695 = trunc <8 x i16> %694 to <8 x i8>
  %696 = shl <8 x i16> %687, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %697 = and <8 x i16> %687, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %698 = or <8 x i16> %696, %697
  %699 = trunc <8 x i16> %698 to <8 x i8>
  %700 = shl <8 x i16> %684, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %701 = ashr exact <8 x i16> %700, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %702 = trunc <8 x i16> %701 to <8 x i8>
  %703 = getelementptr inbounds i8, i8* %650, i64 %681
  %704 = bitcast i8* %703 to <32 x i8>*
  %705 = shufflevector <8 x i8> %691, <8 x i8> %695, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %706 = shufflevector <8 x i8> %699, <8 x i8> %702, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %707 = shufflevector <16 x i8> %705, <16 x i8> %706, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %707, <32 x i8>* %704, align 1
  %708 = add i64 %680, 8
  %709 = icmp eq i64 %708, %674
  br i1 %709, label %710, label %679, !llvm.loop !20

710:                                              ; preds = %679
  %711 = icmp eq i64 %658, %674
  br i1 %711, label %746, label %712

712:                                              ; preds = %710, %660, %654
  %713 = phi i32 [ 0, %660 ], [ 0, %654 ], [ %675, %710 ]
  %714 = phi i8* [ %650, %660 ], [ %650, %654 ], [ %677, %710 ]
  %715 = phi i16* [ %649, %660 ], [ %649, %654 ], [ %678, %710 ]
  br label %716

716:                                              ; preds = %712, %716
  %717 = phi i32 [ %744, %716 ], [ %713, %712 ]
  %718 = phi i8* [ %743, %716 ], [ %714, %712 ]
  %719 = phi i16* [ %742, %716 ], [ %715, %712 ]
  %720 = load i16, i16* %719, align 2
  %721 = lshr i16 %720, 11
  %722 = lshr i16 %720, 6
  %723 = lshr i16 %720, 1
  %724 = shl nuw nsw i16 %721, 3
  %725 = and i16 %721, 7
  %726 = or i16 %724, %725
  %727 = trunc i16 %726 to i8
  store i8 %727, i8* %718, align 1
  %728 = shl nuw nsw i16 %722, 3
  %729 = and i16 %722, 7
  %730 = or i16 %728, %729
  %731 = trunc i16 %730 to i8
  %732 = getelementptr inbounds i8, i8* %718, i64 1
  store i8 %731, i8* %732, align 1
  %733 = shl i16 %723, 3
  %734 = and i16 %723, 7
  %735 = or i16 %733, %734
  %736 = trunc i16 %735 to i8
  %737 = getelementptr inbounds i8, i8* %718, i64 2
  store i8 %736, i8* %737, align 1
  %738 = shl i16 %720, 15
  %739 = ashr exact i16 %738, 15
  %740 = trunc i16 %739 to i8
  %741 = getelementptr inbounds i8, i8* %718, i64 3
  store i8 %740, i8* %741, align 1
  %742 = getelementptr inbounds i16, i16* %719, i64 1
  %743 = getelementptr inbounds i8, i8* %718, i64 4
  %744 = add nuw i32 %717, 1
  %745 = icmp eq i32 %744, %652
  br i1 %745, label %746, label %716, !llvm.loop !21

746:                                              ; preds = %716, %710, %648
  %747 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  %748 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %747, i64 0, i32 1, i32 0
  %749 = load i32, i32* %748, align 4
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %861, label %751

751:                                              ; preds = %746
  %752 = load i8*, i8** %572, align 8
  %753 = add i32 %749, -1
  %754 = zext i32 %753 to i64
  %755 = add nuw nsw i64 %754, 1
  %756 = icmp ult i64 %755, 8
  br i1 %756, label %815, label %757

757:                                              ; preds = %751
  %758 = add i32 %749, -1
  %759 = zext i32 %758 to i64
  %760 = getelementptr i16, i16* %609, i64 %759
  %761 = bitcast i16* %760 to i8*
  %762 = getelementptr i8, i8* %752, i64 4
  %763 = shl nuw nsw i64 %759, 2
  %764 = getelementptr i8, i8* %762, i64 %763
  %765 = icmp ugt i8* %764, %607
  %766 = icmp ult i8* %752, %761
  %767 = and i1 %765, %766
  br i1 %767, label %815, label %768

768:                                              ; preds = %757
  %769 = and i64 %755, 8589934584
  %770 = shl nuw nsw i64 %769, 2
  %771 = getelementptr i8, i8* %752, i64 %770
  %772 = getelementptr i16, i16* %603, i64 %769
  %773 = trunc i64 %769 to i32
  br label %774

774:                                              ; preds = %774, %768
  %775 = phi i64 [ 0, %768 ], [ %811, %774 ]
  %776 = shl i64 %775, 2
  %777 = getelementptr i16, i16* %603, i64 %775
  %778 = getelementptr inbounds i8, i8* %752, i64 %776
  %779 = bitcast i8* %778 to <32 x i8>*
  %780 = load <32 x i8>, <32 x i8>* %779, align 1
  %781 = shufflevector <32 x i8> %780, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %782 = shufflevector <32 x i8> %780, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %783 = shufflevector <32 x i8> %780, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %784 = shufflevector <32 x i8> %780, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %785 = uitofp <8 x i8> %784 to <8 x float>
  %786 = fdiv <8 x float> %785, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %787 = uitofp <8 x i8> %781 to <8 x float>
  %788 = fmul <8 x float> %786, %787
  %789 = fptoui <8 x float> %788 to <8 x i8>
  %790 = uitofp <8 x i8> %782 to <8 x float>
  %791 = fmul <8 x float> %786, %790
  %792 = fptoui <8 x float> %791 to <8 x i8>
  %793 = uitofp <8 x i8> %783 to <8 x float>
  %794 = fmul <8 x float> %786, %793
  %795 = fptoui <8 x float> %794 to <8 x i8>
  %796 = and <8 x i8> %789, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %797 = zext <8 x i8> %796 to <8 x i16>
  %798 = shl nuw <8 x i16> %797, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %799 = and <8 x i8> %792, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %800 = zext <8 x i8> %799 to <8 x i16>
  %801 = shl nuw nsw <8 x i16> %800, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %802 = lshr <8 x i8> %795, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %803 = and <8 x i8> %802, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %804 = zext <8 x i8> %803 to <8 x i16>
  %805 = lshr <8 x i8> %784, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %806 = zext <8 x i8> %805 to <8 x i16>
  %807 = or <8 x i16> %798, %806
  %808 = or <8 x i16> %807, %801
  %809 = or <8 x i16> %808, %804
  %810 = bitcast i16* %777 to <8 x i16>*
  store <8 x i16> %809, <8 x i16>* %810, align 2, !alias.scope !22, !noalias !25
  %811 = add i64 %775, 8
  %812 = icmp eq i64 %811, %769
  br i1 %812, label %813, label %774, !llvm.loop !27

813:                                              ; preds = %774
  %814 = icmp eq i64 %755, %769
  br i1 %814, label %859, label %815

815:                                              ; preds = %813, %757, %751
  %816 = phi i8* [ %752, %757 ], [ %752, %751 ], [ %771, %813 ]
  %817 = phi i16* [ %603, %757 ], [ %603, %751 ], [ %772, %813 ]
  %818 = phi i32 [ 0, %757 ], [ 0, %751 ], [ %773, %813 ]
  br label %819

819:                                              ; preds = %815, %819
  %820 = phi i8* [ %855, %819 ], [ %816, %815 ]
  %821 = phi i16* [ %856, %819 ], [ %817, %815 ]
  %822 = phi i32 [ %857, %819 ], [ %818, %815 ]
  %823 = getelementptr inbounds i8, i8* %820, i64 3
  %824 = load i8, i8* %823, align 1
  %825 = uitofp i8 %824 to float
  %826 = fdiv float %825, 2.550000e+02
  %827 = load i8, i8* %820, align 1
  %828 = uitofp i8 %827 to float
  %829 = fmul float %826, %828
  %830 = fptoui float %829 to i8
  %831 = getelementptr inbounds i8, i8* %820, i64 1
  %832 = load i8, i8* %831, align 1
  %833 = uitofp i8 %832 to float
  %834 = fmul float %826, %833
  %835 = fptoui float %834 to i8
  %836 = getelementptr inbounds i8, i8* %820, i64 2
  %837 = load i8, i8* %836, align 1
  %838 = uitofp i8 %837 to float
  %839 = fmul float %826, %838
  %840 = fptoui float %839 to i8
  %841 = and i8 %830, -8
  %842 = zext i8 %841 to i16
  %843 = shl nuw i16 %842, 8
  %844 = and i8 %835, -8
  %845 = zext i8 %844 to i16
  %846 = shl nuw nsw i16 %845, 3
  %847 = lshr i8 %840, 2
  %848 = and i8 %847, 62
  %849 = zext i8 %848 to i16
  %850 = lshr i8 %824, 7
  %851 = zext i8 %850 to i16
  %852 = or i16 %843, %851
  %853 = or i16 %852, %846
  %854 = or i16 %853, %849
  store i16 %854, i16* %821, align 2
  %855 = getelementptr inbounds i8, i8* %820, i64 4
  %856 = getelementptr inbounds i16, i16* %821, i64 1
  %857 = add nuw i32 %822, 1
  %858 = icmp eq i32 %857, %749
  br i1 %858, label %859, label %819, !llvm.loop !28

859:                                              ; preds = %819, %813
  %860 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %861

861:                                              ; preds = %859, %746
  %862 = phi %"class.blink::IntRect"* [ %860, %859 ], [ %747, %746 ]
  %863 = getelementptr inbounds i16, i16* %604, i64 %547
  %864 = getelementptr inbounds i16, i16* %603, i64 %549
  %865 = add nuw nsw i32 %602, 1
  %866 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %862, i64 0, i32 1, i32 1
  %867 = load i32, i32* %866, align 4
  %868 = icmp slt i32 %865, %867
  %869 = add i64 %600, 1
  br i1 %868, label %599, label %582

870:                                              ; preds = %585, %568
  store i8 1, i8* %130, align 4
  br label %1619

871:                                              ; preds = %120
  %872 = icmp eq i32 %33, 22
  %873 = icmp eq i32 %60, 1
  %874 = and i1 %872, %873
  br i1 %874, label %875, label %1619

875:                                              ; preds = %871
  %876 = sdiv i32 %29, 2
  %877 = sext i32 %876 to i64
  %878 = sdiv i32 %49, 2
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %881 = load i32, i32* %880, align 4
  %882 = mul nsw i32 %881, %29
  %883 = add nsw i32 %882, %32
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds i8, i8* %0, i64 %884
  %886 = bitcast i8* %885 to i16*
  %887 = icmp slt i32 %49, 0
  %888 = icmp sgt i32 %5, 1
  %889 = and i1 %888, %887
  br i1 %889, label %890, label %898

890:                                              ; preds = %875
  %891 = add nsw i32 %5, -1
  %892 = sext i32 %891 to i64
  %893 = sext i32 %18 to i64
  %894 = mul nsw i64 %892, %893
  %895 = mul i64 %894, %877
  %896 = sub i64 0, %895
  %897 = getelementptr inbounds i16, i16* %886, i64 %896
  br label %900

898:                                              ; preds = %875
  %899 = icmp sgt i32 %5, 0
  br i1 %899, label %900, label %1198

900:                                              ; preds = %898, %890
  %901 = phi i16* [ %897, %890 ], [ %886, %898 ]
  %902 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %903

903:                                              ; preds = %924, %900
  %904 = phi i32 [ %17, %900 ], [ %916, %924 ]
  %905 = phi i32 [ %18, %900 ], [ %917, %924 ]
  %906 = phi i32 [ %5, %900 ], [ %918, %924 ]
  %907 = phi %"class.blink::IntRect"* [ %4, %900 ], [ %919, %924 ]
  %908 = phi i32 [ 0, %900 ], [ %922, %924 ]
  %909 = phi i16* [ %137, %900 ], [ %921, %924 ]
  %910 = phi i16* [ %901, %900 ], [ %928, %924 ]
  %911 = icmp sgt i32 %904, 0
  br i1 %911, label %929, label %915

912:                                              ; preds = %1189
  %913 = load i32, i32* %123, align 8
  %914 = load i32, i32* %124, align 4
  br label %915

915:                                              ; preds = %912, %903
  %916 = phi i32 [ %904, %903 ], [ %1195, %912 ]
  %917 = phi i32 [ %905, %903 ], [ %914, %912 ]
  %918 = phi i32 [ %906, %903 ], [ %913, %912 ]
  %919 = phi %"class.blink::IntRect"* [ %907, %903 ], [ %1190, %912 ]
  %920 = phi i16* [ %910, %903 ], [ %1191, %912 ]
  %921 = phi i16* [ %909, %903 ], [ %1192, %912 ]
  %922 = add nuw nsw i32 %908, 1
  %923 = icmp slt i32 %922, %918
  br i1 %923, label %924, label %1198

924:                                              ; preds = %915
  %925 = sub nsw i32 %917, %916
  %926 = sext i32 %925 to i64
  %927 = mul nsw i64 %926, %877
  %928 = getelementptr inbounds i16, i16* %920, i64 %927
  br label %903

929:                                              ; preds = %903, %1189
  %930 = phi i64 [ %1197, %1189 ], [ 0, %903 ]
  %931 = phi %"class.blink::IntRect"* [ %1190, %1189 ], [ %907, %903 ]
  %932 = phi i32 [ %1193, %1189 ], [ 0, %903 ]
  %933 = phi i16* [ %1192, %1189 ], [ %909, %903 ]
  %934 = phi i16* [ %1191, %1189 ], [ %910, %903 ]
  %935 = mul i64 %930, %879
  %936 = getelementptr i16, i16* %909, i64 %935
  %937 = bitcast i16* %936 to i8*
  %938 = add i64 %935, 1
  %939 = getelementptr i16, i16* %909, i64 %938
  %940 = load i8*, i8** %902, align 8
  %941 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %931, i64 0, i32 1, i32 0
  %942 = load i32, i32* %941, align 4
  %943 = and i32 %942, -8
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %978, label %945

945:                                              ; preds = %929, %945
  %946 = phi i16* [ %974, %945 ], [ %934, %929 ]
  %947 = phi i8* [ %975, %945 ], [ %940, %929 ]
  %948 = phi i32 [ %976, %945 ], [ 0, %929 ]
  %949 = bitcast i8* %947 to <8 x i16>*
  %950 = bitcast i16* %946 to <8 x i16>*
  %951 = load <8 x i16>, <8 x i16>* %950, align 1
  %952 = lshr <8 x i16> %951, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %953 = lshr <8 x i16> %951, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %954 = lshr <8 x i16> %951, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %955 = shl nuw nsw <8 x i16> %952, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %956 = or <8 x i16> %955, %952
  %957 = and <8 x i16> %953, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %958 = shl nuw nsw <8 x i16> %953, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %959 = and <8 x i16> %954, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %960 = shl nuw nsw <8 x i16> %959, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %961 = and <8 x i16> %951, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %962 = shl nuw nsw <8 x i16> %961, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %963 = or <8 x i16> %958, %957
  %964 = shl <8 x i16> %963, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %965 = or <8 x i16> %956, %964
  %966 = or <8 x i16> %962, %961
  %967 = shl nuw <8 x i16> %966, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %968 = or <8 x i16> %960, %959
  %969 = or <8 x i16> %968, %967
  %970 = shufflevector <8 x i16> %965, <8 x i16> %969, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %971 = shufflevector <8 x i16> %965, <8 x i16> %969, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %971, <8 x i16>* %949, align 1
  %972 = getelementptr inbounds i8, i8* %947, i64 16
  %973 = bitcast i8* %972 to <8 x i16>*
  store <8 x i16> %970, <8 x i16>* %973, align 1
  %974 = getelementptr inbounds i16, i16* %946, i64 8
  %975 = getelementptr inbounds i8, i8* %947, i64 32
  %976 = add nuw i32 %948, 8
  %977 = icmp ult i32 %976, %943
  br i1 %977, label %945, label %978

978:                                              ; preds = %945, %929
  %979 = phi i16* [ %934, %929 ], [ %974, %945 ]
  %980 = phi i8* [ %940, %929 ], [ %975, %945 ]
  %981 = bitcast i16* %979 to i8*
  %982 = sub i32 %942, %943
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %1076, label %984

984:                                              ; preds = %978
  %985 = xor i32 %943, -1
  %986 = add i32 %942, %985
  %987 = zext i32 %986 to i64
  %988 = add nuw nsw i64 %987, 1
  %989 = icmp ult i64 %988, 8
  br i1 %989, label %1042, label %990

990:                                              ; preds = %984
  %991 = getelementptr i8, i8* %980, i64 4
  %992 = xor i32 %943, -1
  %993 = add i32 %942, %992
  %994 = zext i32 %993 to i64
  %995 = shl nuw nsw i64 %994, 2
  %996 = getelementptr i8, i8* %991, i64 %995
  %997 = getelementptr i16, i16* %979, i64 1
  %998 = getelementptr i16, i16* %997, i64 %994
  %999 = bitcast i16* %998 to i8*
  %1000 = icmp ult i8* %980, %999
  %1001 = icmp ugt i8* %996, %981
  %1002 = and i1 %1000, %1001
  br i1 %1002, label %1042, label %1003

1003:                                             ; preds = %990
  %1004 = and i64 %988, 8589934584
  %1005 = trunc i64 %1004 to i32
  %1006 = shl nuw nsw i64 %1004, 2
  %1007 = getelementptr i8, i8* %980, i64 %1006
  %1008 = getelementptr i16, i16* %979, i64 %1004
  br label %1009

1009:                                             ; preds = %1009, %1003
  %1010 = phi i64 [ 0, %1003 ], [ %1038, %1009 ]
  %1011 = shl i64 %1010, 2
  %1012 = getelementptr i16, i16* %979, i64 %1010
  %1013 = bitcast i16* %1012 to <8 x i16>*
  %1014 = load <8 x i16>, <8 x i16>* %1013, align 2, !alias.scope !29
  %1015 = lshr <8 x i16> %1014, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %1016 = lshr <8 x i16> %1014, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1017 = and <8 x i16> %1016, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1018 = lshr <8 x i16> %1014, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1019 = and <8 x i16> %1018, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1020 = and <8 x i16> %1014, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1021 = shl nuw nsw <8 x i16> %1015, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1022 = or <8 x i16> %1021, %1015
  %1023 = trunc <8 x i16> %1022 to <8 x i8>
  %1024 = shl nuw nsw <8 x i16> %1016, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1025 = or <8 x i16> %1024, %1017
  %1026 = trunc <8 x i16> %1025 to <8 x i8>
  %1027 = shl nuw nsw <8 x i16> %1019, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1028 = or <8 x i16> %1027, %1019
  %1029 = trunc <8 x i16> %1028 to <8 x i8>
  %1030 = shl nuw nsw <8 x i16> %1020, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1031 = or <8 x i16> %1030, %1020
  %1032 = trunc <8 x i16> %1031 to <8 x i8>
  %1033 = getelementptr inbounds i8, i8* %980, i64 %1011
  %1034 = bitcast i8* %1033 to <32 x i8>*
  %1035 = shufflevector <8 x i8> %1023, <8 x i8> %1026, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1036 = shufflevector <8 x i8> %1029, <8 x i8> %1032, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1037 = shufflevector <16 x i8> %1035, <16 x i8> %1036, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %1037, <32 x i8>* %1034, align 1
  %1038 = add i64 %1010, 8
  %1039 = icmp eq i64 %1038, %1004
  br i1 %1039, label %1040, label %1009, !llvm.loop !32

1040:                                             ; preds = %1009
  %1041 = icmp eq i64 %988, %1004
  br i1 %1041, label %1076, label %1042

1042:                                             ; preds = %1040, %990, %984
  %1043 = phi i32 [ 0, %990 ], [ 0, %984 ], [ %1005, %1040 ]
  %1044 = phi i8* [ %980, %990 ], [ %980, %984 ], [ %1007, %1040 ]
  %1045 = phi i16* [ %979, %990 ], [ %979, %984 ], [ %1008, %1040 ]
  br label %1046

1046:                                             ; preds = %1042, %1046
  %1047 = phi i32 [ %1074, %1046 ], [ %1043, %1042 ]
  %1048 = phi i8* [ %1073, %1046 ], [ %1044, %1042 ]
  %1049 = phi i16* [ %1072, %1046 ], [ %1045, %1042 ]
  %1050 = load i16, i16* %1049, align 2
  %1051 = lshr i16 %1050, 12
  %1052 = lshr i16 %1050, 8
  %1053 = and i16 %1052, 15
  %1054 = lshr i16 %1050, 4
  %1055 = and i16 %1054, 15
  %1056 = and i16 %1050, 15
  %1057 = shl nuw nsw i16 %1051, 4
  %1058 = or i16 %1057, %1051
  %1059 = trunc i16 %1058 to i8
  store i8 %1059, i8* %1048, align 1
  %1060 = shl nuw nsw i16 %1052, 4
  %1061 = or i16 %1060, %1053
  %1062 = trunc i16 %1061 to i8
  %1063 = getelementptr inbounds i8, i8* %1048, i64 1
  store i8 %1062, i8* %1063, align 1
  %1064 = shl nuw nsw i16 %1055, 4
  %1065 = or i16 %1064, %1055
  %1066 = trunc i16 %1065 to i8
  %1067 = getelementptr inbounds i8, i8* %1048, i64 2
  store i8 %1066, i8* %1067, align 1
  %1068 = shl nuw nsw i16 %1056, 4
  %1069 = or i16 %1068, %1056
  %1070 = trunc i16 %1069 to i8
  %1071 = getelementptr inbounds i8, i8* %1048, i64 3
  store i8 %1070, i8* %1071, align 1
  %1072 = getelementptr inbounds i16, i16* %1049, i64 1
  %1073 = getelementptr inbounds i8, i8* %1048, i64 4
  %1074 = add nuw i32 %1047, 1
  %1075 = icmp eq i32 %1074, %982
  br i1 %1075, label %1076, label %1046, !llvm.loop !33

1076:                                             ; preds = %1046, %1040, %978
  %1077 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  %1078 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1077, i64 0, i32 1, i32 0
  %1079 = load i32, i32* %1078, align 4
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1189, label %1081

1081:                                             ; preds = %1076
  %1082 = load i8*, i8** %902, align 8
  %1083 = add i32 %1079, -1
  %1084 = zext i32 %1083 to i64
  %1085 = add nuw nsw i64 %1084, 1
  %1086 = icmp ult i64 %1085, 8
  br i1 %1086, label %1144, label %1087

1087:                                             ; preds = %1081
  %1088 = add i32 %1079, -1
  %1089 = zext i32 %1088 to i64
  %1090 = getelementptr i16, i16* %939, i64 %1089
  %1091 = bitcast i16* %1090 to i8*
  %1092 = getelementptr i8, i8* %1082, i64 4
  %1093 = shl nuw nsw i64 %1089, 2
  %1094 = getelementptr i8, i8* %1092, i64 %1093
  %1095 = icmp ugt i8* %1094, %937
  %1096 = icmp ult i8* %1082, %1091
  %1097 = and i1 %1095, %1096
  br i1 %1097, label %1144, label %1098

1098:                                             ; preds = %1087
  %1099 = and i64 %1085, 8589934584
  %1100 = shl nuw nsw i64 %1099, 2
  %1101 = getelementptr i8, i8* %1082, i64 %1100
  %1102 = getelementptr i16, i16* %933, i64 %1099
  %1103 = trunc i64 %1099 to i32
  br label %1104

1104:                                             ; preds = %1104, %1098
  %1105 = phi i64 [ 0, %1098 ], [ %1140, %1104 ]
  %1106 = shl i64 %1105, 2
  %1107 = getelementptr i16, i16* %933, i64 %1105
  %1108 = getelementptr inbounds i8, i8* %1082, i64 %1106
  %1109 = bitcast i8* %1108 to <32 x i8>*
  %1110 = load <32 x i8>, <32 x i8>* %1109, align 1
  %1111 = shufflevector <32 x i8> %1110, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %1112 = shufflevector <32 x i8> %1110, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %1113 = shufflevector <32 x i8> %1110, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %1114 = shufflevector <32 x i8> %1110, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %1115 = uitofp <8 x i8> %1114 to <8 x float>
  %1116 = fdiv <8 x float> %1115, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %1117 = uitofp <8 x i8> %1111 to <8 x float>
  %1118 = fmul <8 x float> %1116, %1117
  %1119 = fptoui <8 x float> %1118 to <8 x i8>
  %1120 = uitofp <8 x i8> %1112 to <8 x float>
  %1121 = fmul <8 x float> %1116, %1120
  %1122 = fptoui <8 x float> %1121 to <8 x i8>
  %1123 = uitofp <8 x i8> %1113 to <8 x float>
  %1124 = fmul <8 x float> %1116, %1123
  %1125 = fptoui <8 x float> %1124 to <8 x i8>
  %1126 = and <8 x i8> %1119, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %1127 = zext <8 x i8> %1126 to <8 x i16>
  %1128 = shl nuw <8 x i16> %1127, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %1129 = and <8 x i8> %1122, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %1130 = zext <8 x i8> %1129 to <8 x i16>
  %1131 = shl nuw nsw <8 x i16> %1130, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %1132 = and <8 x i8> %1125, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %1133 = zext <8 x i8> %1132 to <8 x i16>
  %1134 = lshr <8 x i8> %1114, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %1135 = zext <8 x i8> %1134 to <8 x i16>
  %1136 = or <8 x i16> %1128, %1135
  %1137 = or <8 x i16> %1136, %1131
  %1138 = or <8 x i16> %1137, %1133
  %1139 = bitcast i16* %1107 to <8 x i16>*
  store <8 x i16> %1138, <8 x i16>* %1139, align 2, !alias.scope !34, !noalias !37
  %1140 = add i64 %1105, 8
  %1141 = icmp eq i64 %1140, %1099
  br i1 %1141, label %1142, label %1104, !llvm.loop !39

1142:                                             ; preds = %1104
  %1143 = icmp eq i64 %1085, %1099
  br i1 %1143, label %1187, label %1144

1144:                                             ; preds = %1142, %1087, %1081
  %1145 = phi i8* [ %1082, %1087 ], [ %1082, %1081 ], [ %1101, %1142 ]
  %1146 = phi i16* [ %933, %1087 ], [ %933, %1081 ], [ %1102, %1142 ]
  %1147 = phi i32 [ 0, %1087 ], [ 0, %1081 ], [ %1103, %1142 ]
  br label %1148

1148:                                             ; preds = %1144, %1148
  %1149 = phi i8* [ %1183, %1148 ], [ %1145, %1144 ]
  %1150 = phi i16* [ %1184, %1148 ], [ %1146, %1144 ]
  %1151 = phi i32 [ %1185, %1148 ], [ %1147, %1144 ]
  %1152 = getelementptr inbounds i8, i8* %1149, i64 3
  %1153 = load i8, i8* %1152, align 1
  %1154 = uitofp i8 %1153 to float
  %1155 = fdiv float %1154, 2.550000e+02
  %1156 = load i8, i8* %1149, align 1
  %1157 = uitofp i8 %1156 to float
  %1158 = fmul float %1155, %1157
  %1159 = fptoui float %1158 to i8
  %1160 = getelementptr inbounds i8, i8* %1149, i64 1
  %1161 = load i8, i8* %1160, align 1
  %1162 = uitofp i8 %1161 to float
  %1163 = fmul float %1155, %1162
  %1164 = fptoui float %1163 to i8
  %1165 = getelementptr inbounds i8, i8* %1149, i64 2
  %1166 = load i8, i8* %1165, align 1
  %1167 = uitofp i8 %1166 to float
  %1168 = fmul float %1155, %1167
  %1169 = fptoui float %1168 to i8
  %1170 = and i8 %1159, -16
  %1171 = zext i8 %1170 to i16
  %1172 = shl nuw i16 %1171, 8
  %1173 = and i8 %1164, -16
  %1174 = zext i8 %1173 to i16
  %1175 = shl nuw nsw i16 %1174, 4
  %1176 = and i8 %1169, -16
  %1177 = zext i8 %1176 to i16
  %1178 = lshr i8 %1153, 4
  %1179 = zext i8 %1178 to i16
  %1180 = or i16 %1172, %1179
  %1181 = or i16 %1180, %1175
  %1182 = or i16 %1181, %1177
  store i16 %1182, i16* %1150, align 2
  %1183 = getelementptr inbounds i8, i8* %1149, i64 4
  %1184 = getelementptr inbounds i16, i16* %1150, i64 1
  %1185 = add nuw i32 %1151, 1
  %1186 = icmp eq i32 %1185, %1079
  br i1 %1186, label %1187, label %1148, !llvm.loop !40

1187:                                             ; preds = %1148, %1142
  %1188 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %1189

1189:                                             ; preds = %1187, %1076
  %1190 = phi %"class.blink::IntRect"* [ %1188, %1187 ], [ %1077, %1076 ]
  %1191 = getelementptr inbounds i16, i16* %934, i64 %877
  %1192 = getelementptr inbounds i16, i16* %933, i64 %879
  %1193 = add nuw nsw i32 %932, 1
  %1194 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1190, i64 0, i32 1, i32 1
  %1195 = load i32, i32* %1194, align 4
  %1196 = icmp slt i32 %1193, %1195
  %1197 = add i64 %930, 1
  br i1 %1196, label %929, label %912

1198:                                             ; preds = %915, %898
  store i8 1, i8* %130, align 4
  br label %1619

1199:                                             ; preds = %120
  %1200 = icmp eq i32 %33, 7
  %1201 = icmp eq i32 %60, 1
  %1202 = and i1 %1200, %1201
  br i1 %1202, label %1203, label %1619

1203:                                             ; preds = %1199
  %1204 = sdiv i32 %29, 4
  %1205 = sext i32 %1204 to i64
  %1206 = sdiv i32 %49, 4
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %1209 = load i32, i32* %1208, align 4
  %1210 = mul nsw i32 %1209, %29
  %1211 = add nsw i32 %1210, %32
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i8, i8* %0, i64 %1212
  %1214 = bitcast i8* %1213 to float*
  %1215 = icmp slt i32 %49, 0
  %1216 = icmp sgt i32 %5, 1
  %1217 = and i1 %1216, %1215
  br i1 %1217, label %1218, label %1226

1218:                                             ; preds = %1203
  %1219 = add nsw i32 %5, -1
  %1220 = sext i32 %1219 to i64
  %1221 = sext i32 %18 to i64
  %1222 = mul nsw i64 %1220, %1221
  %1223 = mul i64 %1222, %1205
  %1224 = sub i64 0, %1223
  %1225 = getelementptr inbounds float, float* %1214, i64 %1224
  br label %1228

1226:                                             ; preds = %1203
  %1227 = icmp sgt i32 %5, 0
  br i1 %1227, label %1228, label %1345

1228:                                             ; preds = %1226, %1218
  %1229 = phi float* [ %1225, %1218 ], [ %1214, %1226 ]
  br label %1230

1230:                                             ; preds = %1228, %1253
  %1231 = phi i32 [ %1244, %1253 ], [ %17, %1228 ]
  %1232 = phi i32 [ %1245, %1253 ], [ %18, %1228 ]
  %1233 = phi i32 [ %1246, %1253 ], [ %5, %1228 ]
  %1234 = phi %"class.blink::IntRect"* [ %1247, %1253 ], [ %4, %1228 ]
  %1235 = phi %"class.blink::IntRect"* [ %1248, %1253 ], [ %4, %1228 ]
  %1236 = phi i32 [ %1251, %1253 ], [ 0, %1228 ]
  %1237 = phi float* [ %1250, %1253 ], [ %138, %1228 ]
  %1238 = phi float* [ %1257, %1253 ], [ %1229, %1228 ]
  %1239 = icmp sgt i32 %1231, 0
  br i1 %1239, label %1258, label %1243

1240:                                             ; preds = %1337
  %1241 = load i32, i32* %123, align 8
  %1242 = load i32, i32* %124, align 4
  br label %1243

1243:                                             ; preds = %1240, %1230
  %1244 = phi i32 [ %1231, %1230 ], [ %1343, %1240 ]
  %1245 = phi i32 [ %1232, %1230 ], [ %1242, %1240 ]
  %1246 = phi i32 [ %1233, %1230 ], [ %1241, %1240 ]
  %1247 = phi %"class.blink::IntRect"* [ %1234, %1230 ], [ %1338, %1240 ]
  %1248 = phi %"class.blink::IntRect"* [ %1235, %1230 ], [ %1338, %1240 ]
  %1249 = phi float* [ %1238, %1230 ], [ %1339, %1240 ]
  %1250 = phi float* [ %1237, %1230 ], [ %1340, %1240 ]
  %1251 = add nuw nsw i32 %1236, 1
  %1252 = icmp slt i32 %1251, %1246
  br i1 %1252, label %1253, label %1345

1253:                                             ; preds = %1243
  %1254 = sub nsw i32 %1245, %1244
  %1255 = sext i32 %1254 to i64
  %1256 = mul nsw i64 %1255, %1205
  %1257 = getelementptr inbounds float, float* %1249, i64 %1256
  br label %1230

1258:                                             ; preds = %1230, %1337
  %1259 = phi %"class.blink::IntRect"* [ %1338, %1337 ], [ %1234, %1230 ]
  %1260 = phi %"class.blink::IntRect"* [ %1338, %1337 ], [ %1235, %1230 ]
  %1261 = phi i32 [ %1341, %1337 ], [ 0, %1230 ]
  %1262 = phi float* [ %1340, %1337 ], [ %1237, %1230 ]
  %1263 = phi float* [ %1339, %1337 ], [ %1238, %1230 ]
  %1264 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1260, i64 0, i32 1, i32 0
  %1265 = load i32, i32* %1264, align 4
  %1266 = icmp eq i32 %1265, 0
  br i1 %1266, label %1337, label %1267

1267:                                             ; preds = %1258
  %1268 = and i32 %1265, 1
  %1269 = icmp eq i32 %1265, 1
  br i1 %1269, label %1314, label %1270

1270:                                             ; preds = %1267
  %1271 = sub i32 %1265, %1268
  br label %1272

1272:                                             ; preds = %1272, %1270
  %1273 = phi float* [ %1263, %1270 ], [ %1310, %1272 ]
  %1274 = phi float* [ %1262, %1270 ], [ %1311, %1272 ]
  %1275 = phi i32 [ %1271, %1270 ], [ %1312, %1272 ]
  %1276 = getelementptr inbounds float, float* %1273, i64 3
  %1277 = load float, float* %1276, align 4
  %1278 = load float, float* %1273, align 4
  %1279 = fmul float %1277, %1278
  store float %1279, float* %1274, align 4
  %1280 = getelementptr inbounds float, float* %1273, i64 1
  %1281 = load float, float* %1280, align 4
  %1282 = fmul float %1277, %1281
  %1283 = getelementptr inbounds float, float* %1274, i64 1
  store float %1282, float* %1283, align 4
  %1284 = getelementptr inbounds float, float* %1273, i64 2
  %1285 = load float, float* %1284, align 4
  %1286 = fmul float %1277, %1285
  %1287 = getelementptr inbounds float, float* %1274, i64 2
  store float %1286, float* %1287, align 4
  %1288 = bitcast float* %1276 to i32*
  %1289 = load i32, i32* %1288, align 4
  %1290 = getelementptr inbounds float, float* %1274, i64 3
  %1291 = bitcast float* %1290 to i32*
  store i32 %1289, i32* %1291, align 4
  %1292 = getelementptr inbounds float, float* %1273, i64 4
  %1293 = getelementptr inbounds float, float* %1274, i64 4
  %1294 = getelementptr inbounds float, float* %1273, i64 7
  %1295 = load float, float* %1294, align 4
  %1296 = load float, float* %1292, align 4
  %1297 = fmul float %1295, %1296
  store float %1297, float* %1293, align 4
  %1298 = getelementptr inbounds float, float* %1273, i64 5
  %1299 = load float, float* %1298, align 4
  %1300 = fmul float %1295, %1299
  %1301 = getelementptr inbounds float, float* %1274, i64 5
  store float %1300, float* %1301, align 4
  %1302 = getelementptr inbounds float, float* %1273, i64 6
  %1303 = load float, float* %1302, align 4
  %1304 = fmul float %1295, %1303
  %1305 = getelementptr inbounds float, float* %1274, i64 6
  store float %1304, float* %1305, align 4
  %1306 = bitcast float* %1294 to i32*
  %1307 = load i32, i32* %1306, align 4
  %1308 = getelementptr inbounds float, float* %1274, i64 7
  %1309 = bitcast float* %1308 to i32*
  store i32 %1307, i32* %1309, align 4
  %1310 = getelementptr inbounds float, float* %1273, i64 8
  %1311 = getelementptr inbounds float, float* %1274, i64 8
  %1312 = add i32 %1275, -2
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1314, label %1272

1314:                                             ; preds = %1272, %1267
  %1315 = phi float* [ %1263, %1267 ], [ %1310, %1272 ]
  %1316 = phi float* [ %1262, %1267 ], [ %1311, %1272 ]
  %1317 = icmp eq i32 %1268, 0
  br i1 %1317, label %1335, label %1318

1318:                                             ; preds = %1314
  %1319 = getelementptr inbounds float, float* %1315, i64 3
  %1320 = load float, float* %1319, align 4
  %1321 = load float, float* %1315, align 4
  %1322 = fmul float %1320, %1321
  store float %1322, float* %1316, align 4
  %1323 = getelementptr inbounds float, float* %1315, i64 1
  %1324 = load float, float* %1323, align 4
  %1325 = fmul float %1320, %1324
  %1326 = getelementptr inbounds float, float* %1316, i64 1
  store float %1325, float* %1326, align 4
  %1327 = getelementptr inbounds float, float* %1315, i64 2
  %1328 = load float, float* %1327, align 4
  %1329 = fmul float %1320, %1328
  %1330 = getelementptr inbounds float, float* %1316, i64 2
  store float %1329, float* %1330, align 4
  %1331 = bitcast float* %1319 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = getelementptr inbounds float, float* %1316, i64 3
  %1334 = bitcast float* %1333 to i32*
  store i32 %1332, i32* %1334, align 4
  br label %1335

1335:                                             ; preds = %1314, %1318
  %1336 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %1337

1337:                                             ; preds = %1335, %1258
  %1338 = phi %"class.blink::IntRect"* [ %1336, %1335 ], [ %1259, %1258 ]
  %1339 = getelementptr inbounds float, float* %1263, i64 %1205
  %1340 = getelementptr inbounds float, float* %1262, i64 %1207
  %1341 = add nuw nsw i32 %1261, 1
  %1342 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1338, i64 0, i32 1, i32 1
  %1343 = load i32, i32* %1342, align 4
  %1344 = icmp slt i32 %1341, %1343
  br i1 %1344, label %1258, label %1240

1345:                                             ; preds = %1243, %1226
  store i8 1, i8* %130, align 4
  br label %1619

1346:                                             ; preds = %120
  %1347 = icmp eq i32 %33, 8
  %1348 = icmp eq i32 %60, 1
  %1349 = and i1 %1347, %1348
  br i1 %1349, label %1350, label %1619

1350:                                             ; preds = %1346
  %1351 = sdiv i32 %29, 4
  %1352 = sext i32 %1351 to i64
  %1353 = sdiv i32 %49, 4
  %1354 = sext i32 %1353 to i64
  %1355 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4, i64 0, i32 0, i32 1
  %1356 = load i32, i32* %1355, align 4
  %1357 = mul nsw i32 %1356, %29
  %1358 = add nsw i32 %1357, %32
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds i8, i8* %0, i64 %1359
  %1361 = bitcast i8* %1360 to i32*
  %1362 = icmp slt i32 %49, 0
  %1363 = icmp sgt i32 %5, 1
  %1364 = and i1 %1363, %1362
  br i1 %1364, label %1365, label %1373

1365:                                             ; preds = %1350
  %1366 = add nsw i32 %5, -1
  %1367 = sext i32 %1366 to i64
  %1368 = sext i32 %18 to i64
  %1369 = mul nsw i64 %1367, %1368
  %1370 = mul i64 %1369, %1352
  %1371 = sub i64 0, %1370
  %1372 = getelementptr inbounds i32, i32* %1361, i64 %1371
  br label %1375

1373:                                             ; preds = %1350
  %1374 = icmp sgt i32 %5, 0
  br i1 %1374, label %1375, label %1617

1375:                                             ; preds = %1373, %1365
  %1376 = phi i32* [ %1372, %1365 ], [ %1361, %1373 ]
  %1377 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  %1378 = bitcast i8** %1377 to float**
  br label %1379

1379:                                             ; preds = %1402, %1375
  %1380 = phi i32 [ %17, %1375 ], [ %1393, %1402 ]
  %1381 = phi i32 [ %18, %1375 ], [ %1394, %1402 ]
  %1382 = phi i32 [ %5, %1375 ], [ %1395, %1402 ]
  %1383 = phi %"class.blink::IntRect"* [ %4, %1375 ], [ %1396, %1402 ]
  %1384 = phi %"class.blink::IntRect"* [ %4, %1375 ], [ %1397, %1402 ]
  %1385 = phi i32 [ 0, %1375 ], [ %1400, %1402 ]
  %1386 = phi i32* [ %139, %1375 ], [ %1399, %1402 ]
  %1387 = phi i32* [ %1376, %1375 ], [ %1406, %1402 ]
  %1388 = icmp sgt i32 %1380, 0
  br i1 %1388, label %1407, label %1392

1389:                                             ; preds = %1608
  %1390 = load i32, i32* %123, align 8
  %1391 = load i32, i32* %124, align 4
  br label %1392

1392:                                             ; preds = %1389, %1379
  %1393 = phi i32 [ %1380, %1379 ], [ %1614, %1389 ]
  %1394 = phi i32 [ %1381, %1379 ], [ %1391, %1389 ]
  %1395 = phi i32 [ %1382, %1379 ], [ %1390, %1389 ]
  %1396 = phi %"class.blink::IntRect"* [ %1383, %1379 ], [ %1609, %1389 ]
  %1397 = phi %"class.blink::IntRect"* [ %1384, %1379 ], [ %1609, %1389 ]
  %1398 = phi i32* [ %1387, %1379 ], [ %1610, %1389 ]
  %1399 = phi i32* [ %1386, %1379 ], [ %1611, %1389 ]
  %1400 = add nuw nsw i32 %1385, 1
  %1401 = icmp slt i32 %1400, %1395
  br i1 %1401, label %1402, label %1617

1402:                                             ; preds = %1392
  %1403 = sub nsw i32 %1394, %1393
  %1404 = sext i32 %1403 to i64
  %1405 = mul nsw i64 %1404, %1352
  %1406 = getelementptr inbounds i32, i32* %1398, i64 %1405
  br label %1379

1407:                                             ; preds = %1379, %1608
  %1408 = phi i64 [ %1616, %1608 ], [ 0, %1379 ]
  %1409 = phi %"class.blink::IntRect"* [ %1609, %1608 ], [ %1383, %1379 ]
  %1410 = phi %"class.blink::IntRect"* [ %1609, %1608 ], [ %1384, %1379 ]
  %1411 = phi i32 [ %1612, %1608 ], [ 0, %1379 ]
  %1412 = phi i32* [ %1611, %1608 ], [ %1386, %1379 ]
  %1413 = phi i32* [ %1610, %1608 ], [ %1387, %1379 ]
  %1414 = mul i64 %1408, %1352
  %1415 = getelementptr i32, i32* %1387, i64 %1414
  %1416 = add i64 %1414, 1
  %1417 = getelementptr i32, i32* %1387, i64 %1416
  %1418 = mul i64 %1408, %1354
  %1419 = getelementptr i32, i32* %1386, i64 %1418
  %1420 = add i64 %1418, 1
  %1421 = getelementptr i32, i32* %1386, i64 %1420
  %1422 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1410, i64 0, i32 1, i32 0
  %1423 = load i32, i32* %1422, align 4
  %1424 = icmp eq i32 %1423, 0
  br i1 %1424, label %1608, label %1425

1425:                                             ; preds = %1407
  %1426 = load float*, float** %1378, align 8
  %1427 = add i32 %1423, -1
  %1428 = zext i32 %1427 to i64
  %1429 = add nuw nsw i64 %1428, 1
  %1430 = icmp ult i64 %1429, 4
  br i1 %1430, label %1478, label %1431

1431:                                             ; preds = %1425
  %1432 = getelementptr float, float* %1426, i64 4
  %1433 = add i32 %1423, -1
  %1434 = zext i32 %1433 to i64
  %1435 = shl nuw nsw i64 %1434, 2
  %1436 = getelementptr float, float* %1432, i64 %1435
  %1437 = getelementptr i32, i32* %1417, i64 %1434
  %1438 = bitcast i32* %1437 to float*
  %1439 = icmp ult float* %1426, %1438
  %1440 = bitcast float* %1436 to i32*
  %1441 = icmp ult i32* %1415, %1440
  %1442 = and i1 %1439, %1441
  br i1 %1442, label %1478, label %1443

1443:                                             ; preds = %1431
  %1444 = and i64 %1429, 8589934588
  %1445 = getelementptr i32, i32* %1413, i64 %1444
  %1446 = trunc i64 %1444 to i32
  %1447 = shl nuw nsw i64 %1444, 2
  %1448 = getelementptr float, float* %1426, i64 %1447
  br label %1449

1449:                                             ; preds = %1449, %1443
  %1450 = phi i64 [ 0, %1443 ], [ %1474, %1449 ]
  %1451 = getelementptr i32, i32* %1413, i64 %1450
  %1452 = shl i64 %1450, 2
  %1453 = bitcast i32* %1451 to <4 x i32>*
  %1454 = load <4 x i32>, <4 x i32>* %1453, align 4, !alias.scope !41
  %1455 = and <4 x i32> %1454, <i32 1023, i32 1023, i32 1023, i32 1023>
  %1456 = uitofp <4 x i32> %1455 to <4 x float>
  %1457 = fmul <4 x float> %1456, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %1458 = lshr <4 x i32> %1454, <i32 10, i32 10, i32 10, i32 10>
  %1459 = and <4 x i32> %1458, <i32 1023, i32 1023, i32 1023, i32 1023>
  %1460 = uitofp <4 x i32> %1459 to <4 x float>
  %1461 = fmul <4 x float> %1460, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %1462 = lshr <4 x i32> %1454, <i32 20, i32 20, i32 20, i32 20>
  %1463 = and <4 x i32> %1462, <i32 1023, i32 1023, i32 1023, i32 1023>
  %1464 = uitofp <4 x i32> %1463 to <4 x float>
  %1465 = fmul <4 x float> %1464, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %1466 = lshr <4 x i32> %1454, <i32 30, i32 30, i32 30, i32 30>
  %1467 = uitofp <4 x i32> %1466 to <4 x float>
  %1468 = fmul <4 x float> %1467, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %1469 = getelementptr inbounds float, float* %1426, i64 %1452
  %1470 = bitcast float* %1469 to <16 x float>*
  %1471 = shufflevector <4 x float> %1457, <4 x float> %1461, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1472 = shufflevector <4 x float> %1465, <4 x float> %1468, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1473 = shufflevector <8 x float> %1471, <8 x float> %1472, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x float> %1473, <16 x float>* %1470, align 4
  %1474 = add i64 %1450, 4
  %1475 = icmp eq i64 %1474, %1444
  br i1 %1475, label %1476, label %1449, !llvm.loop !44

1476:                                             ; preds = %1449
  %1477 = icmp eq i64 %1429, %1444
  br i1 %1477, label %1508, label %1478

1478:                                             ; preds = %1476, %1431, %1425
  %1479 = phi i32* [ %1413, %1431 ], [ %1413, %1425 ], [ %1445, %1476 ]
  %1480 = phi i32 [ 0, %1431 ], [ 0, %1425 ], [ %1446, %1476 ]
  %1481 = phi float* [ %1426, %1431 ], [ %1426, %1425 ], [ %1448, %1476 ]
  br label %1482

1482:                                             ; preds = %1478, %1482
  %1483 = phi i32* [ %1504, %1482 ], [ %1479, %1478 ]
  %1484 = phi i32 [ %1506, %1482 ], [ %1480, %1478 ]
  %1485 = phi float* [ %1505, %1482 ], [ %1481, %1478 ]
  %1486 = load i32, i32* %1483, align 4
  %1487 = and i32 %1486, 1023
  %1488 = uitofp i32 %1487 to float
  %1489 = fmul float %1488, 0x3F50040100000000
  store float %1489, float* %1485, align 4
  %1490 = lshr i32 %1486, 10
  %1491 = and i32 %1490, 1023
  %1492 = uitofp i32 %1491 to float
  %1493 = fmul float %1492, 0x3F50040100000000
  %1494 = getelementptr inbounds float, float* %1485, i64 1
  store float %1493, float* %1494, align 4
  %1495 = lshr i32 %1486, 20
  %1496 = and i32 %1495, 1023
  %1497 = uitofp i32 %1496 to float
  %1498 = fmul float %1497, 0x3F50040100000000
  %1499 = getelementptr inbounds float, float* %1485, i64 2
  store float %1498, float* %1499, align 4
  %1500 = lshr i32 %1486, 30
  %1501 = uitofp i32 %1500 to float
  %1502 = fmul float %1501, 0x3FD5555560000000
  %1503 = getelementptr inbounds float, float* %1485, i64 3
  store float %1502, float* %1503, align 4
  %1504 = getelementptr inbounds i32, i32* %1483, i64 1
  %1505 = getelementptr inbounds float, float* %1485, i64 4
  %1506 = add nuw i32 %1484, 1
  %1507 = icmp eq i32 %1506, %1423
  br i1 %1507, label %1508, label %1482, !llvm.loop !45

1508:                                             ; preds = %1482, %1476
  %1509 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  %1510 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1509, i64 0, i32 1, i32 0
  %1511 = load i32, i32* %1510, align 4
  %1512 = icmp eq i32 %1511, 0
  br i1 %1512, label %1608, label %1513

1513:                                             ; preds = %1508
  %1514 = load float*, float** %1378, align 8
  %1515 = add i32 %1511, -1
  %1516 = zext i32 %1515 to i64
  %1517 = add nuw nsw i64 %1516, 1
  %1518 = icmp ult i64 %1517, 4
  br i1 %1518, label %1570, label %1519

1519:                                             ; preds = %1513
  %1520 = add i32 %1511, -1
  %1521 = zext i32 %1520 to i64
  %1522 = getelementptr i32, i32* %1421, i64 %1521
  %1523 = getelementptr float, float* %1514, i64 4
  %1524 = shl nuw nsw i64 %1521, 2
  %1525 = getelementptr float, float* %1523, i64 %1524
  %1526 = bitcast float* %1525 to i32*
  %1527 = icmp ult i32* %1419, %1526
  %1528 = bitcast i32* %1522 to float*
  %1529 = icmp ult float* %1514, %1528
  %1530 = and i1 %1527, %1529
  br i1 %1530, label %1570, label %1531

1531:                                             ; preds = %1519
  %1532 = and i64 %1517, 8589934588
  %1533 = shl nuw nsw i64 %1532, 2
  %1534 = getelementptr float, float* %1514, i64 %1533
  %1535 = getelementptr i32, i32* %1412, i64 %1532
  %1536 = trunc i64 %1532 to i32
  br label %1537

1537:                                             ; preds = %1537, %1531
  %1538 = phi i64 [ 0, %1531 ], [ %1566, %1537 ]
  %1539 = shl i64 %1538, 2
  %1540 = getelementptr float, float* %1514, i64 %1539
  %1541 = getelementptr i32, i32* %1412, i64 %1538
  %1542 = bitcast float* %1540 to <16 x float>*
  %1543 = load <16 x float>, <16 x float>* %1542, align 4
  %1544 = shufflevector <16 x float> %1543, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1545 = shufflevector <16 x float> %1543, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %1546 = shufflevector <16 x float> %1543, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %1547 = shufflevector <16 x float> %1543, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1548 = fmul <4 x float> %1544, %1547
  %1549 = fmul <4 x float> %1548, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %1550 = fptoui <4 x float> %1549 to <4 x i32>
  %1551 = fmul <4 x float> %1547, %1545
  %1552 = fmul <4 x float> %1551, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %1553 = fptoui <4 x float> %1552 to <4 x i32>
  %1554 = fmul <4 x float> %1547, %1546
  %1555 = fmul <4 x float> %1554, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %1556 = fptoui <4 x float> %1555 to <4 x i32>
  %1557 = fmul <4 x float> %1547, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %1558 = fptoui <4 x float> %1557 to <4 x i32>
  %1559 = shl <4 x i32> %1558, <i32 30, i32 30, i32 30, i32 30>
  %1560 = shl <4 x i32> %1556, <i32 20, i32 20, i32 20, i32 20>
  %1561 = shl <4 x i32> %1553, <i32 10, i32 10, i32 10, i32 10>
  %1562 = or <4 x i32> %1559, %1550
  %1563 = or <4 x i32> %1562, %1561
  %1564 = or <4 x i32> %1563, %1560
  %1565 = bitcast i32* %1541 to <4 x i32>*
  store <4 x i32> %1564, <4 x i32>* %1565, align 4, !alias.scope !46, !noalias !49
  %1566 = add i64 %1538, 4
  %1567 = icmp eq i64 %1566, %1532
  br i1 %1567, label %1568, label %1537, !llvm.loop !51

1568:                                             ; preds = %1537
  %1569 = icmp eq i64 %1517, %1532
  br i1 %1569, label %1606, label %1570

1570:                                             ; preds = %1568, %1519, %1513
  %1571 = phi float* [ %1514, %1519 ], [ %1514, %1513 ], [ %1534, %1568 ]
  %1572 = phi i32* [ %1412, %1519 ], [ %1412, %1513 ], [ %1535, %1568 ]
  %1573 = phi i32 [ 0, %1519 ], [ 0, %1513 ], [ %1536, %1568 ]
  br label %1574

1574:                                             ; preds = %1570, %1574
  %1575 = phi float* [ %1602, %1574 ], [ %1571, %1570 ]
  %1576 = phi i32* [ %1603, %1574 ], [ %1572, %1570 ]
  %1577 = phi i32 [ %1604, %1574 ], [ %1573, %1570 ]
  %1578 = load float, float* %1575, align 4
  %1579 = getelementptr inbounds float, float* %1575, i64 3
  %1580 = load float, float* %1579, align 4
  %1581 = fmul float %1578, %1580
  %1582 = fmul float %1581, 1.023000e+03
  %1583 = fptoui float %1582 to i32
  %1584 = getelementptr inbounds float, float* %1575, i64 1
  %1585 = load float, float* %1584, align 4
  %1586 = fmul float %1580, %1585
  %1587 = fmul float %1586, 1.023000e+03
  %1588 = fptoui float %1587 to i32
  %1589 = getelementptr inbounds float, float* %1575, i64 2
  %1590 = load float, float* %1589, align 4
  %1591 = fmul float %1580, %1590
  %1592 = fmul float %1591, 1.023000e+03
  %1593 = fptoui float %1592 to i32
  %1594 = fmul float %1580, 3.000000e+00
  %1595 = fptoui float %1594 to i32
  %1596 = shl i32 %1595, 30
  %1597 = shl i32 %1593, 20
  %1598 = shl i32 %1588, 10
  %1599 = or i32 %1596, %1583
  %1600 = or i32 %1599, %1598
  %1601 = or i32 %1600, %1597
  store i32 %1601, i32* %1576, align 4
  %1602 = getelementptr inbounds float, float* %1575, i64 4
  %1603 = getelementptr inbounds i32, i32* %1576, i64 1
  %1604 = add nuw i32 %1577, 1
  %1605 = icmp eq i32 %1604, %1511
  br i1 %1605, label %1606, label %1574, !llvm.loop !52

1606:                                             ; preds = %1574, %1568
  %1607 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %122, align 8
  br label %1608

1608:                                             ; preds = %1606, %1508, %1407
  %1609 = phi %"class.blink::IntRect"* [ %1607, %1606 ], [ %1509, %1508 ], [ %1409, %1407 ]
  %1610 = getelementptr inbounds i32, i32* %1413, i64 %1352
  %1611 = getelementptr inbounds i32, i32* %1412, i64 %1354
  %1612 = add nuw nsw i32 %1411, 1
  %1613 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1609, i64 0, i32 1, i32 1
  %1614 = load i32, i32* %1613, align 4
  %1615 = icmp slt i32 %1612, %1614
  %1616 = add i64 %1408, 1
  br i1 %1615, label %1407, label %1389

1617:                                             ; preds = %1392, %1373
  store i8 1, i8* %130, align 4
  br label %1619

1618:                                             ; preds = %120
  call fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE6EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"* nonnull %14, i32 %33, i32 %60) #12
  br label %1619

1619:                                             ; preds = %120, %140, %344, %345, %538, %539, %540, %541, %870, %871, %1198, %1199, %1345, %1346, %1617, %1618
  %1620 = load i8, i8* %130, align 4, !range !11
  %1621 = icmp ne i8 %1620, 0
  %1622 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %14, i64 0, i32 9, i32 0, i32 0, i32 0
  %1623 = load i8*, i8** %1622, align 8
  store i8* null, i8** %1622, align 8
  %1624 = icmp eq i8* %1623, null
  br i1 %1624, label %1626, label %1625

1625:                                             ; preds = %1619
  call void @_ZdaPv(i8* nonnull %1623) #13
  br label %1626

1626:                                             ; preds = %1619, %1625
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %121) #12
  br label %1641

1627:                                             ; preds = %1650, %86
  %1628 = phi i8* [ %48, %86 ], [ %1651, %1650 ]
  %1629 = phi i8* [ %87, %86 ], [ %1653, %1650 ]
  %1630 = phi i8* [ %88, %86 ], [ %1652, %1650 ]
  %1631 = icmp ne i32 %98, 0
  %1632 = icmp ult i8* %1630, %1629
  %1633 = and i1 %1631, %1632
  br i1 %1633, label %1634, label %1641

1634:                                             ; preds = %1627, %1634
  %1635 = phi i8* [ %1638, %1634 ], [ %1630, %1627 ]
  %1636 = phi i8* [ %1639, %1634 ], [ %1628, %1627 ]
  %1637 = getelementptr inbounds i8, i8* %1635, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1636, i8* align 1 %1637, i64 %93, i1 false)
  %1638 = getelementptr inbounds i8, i8* %1635, i64 %94
  %1639 = getelementptr inbounds i8, i8* %1636, i64 %95
  %1640 = icmp ult i8* %1638, %1629
  br i1 %1640, label %1634, label %1641

1641:                                             ; preds = %1627, %1634, %84, %1626, %28
  %1642 = phi i1 [ false, %28 ], [ %1621, %1626 ], [ true, %84 ], [ true, %1634 ], [ true, %1627 ]
  ret i1 %1642

1643:                                             ; preds = %115, %1643
  %1644 = phi i8* [ %1647, %1643 ], [ %117, %115 ]
  %1645 = phi i8* [ %1648, %1643 ], [ %116, %115 ]
  %1646 = getelementptr inbounds i8, i8* %1644, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1645, i8* align 1 %1646, i64 %93, i1 false)
  %1647 = getelementptr inbounds i8, i8* %1644, i64 %94
  %1648 = getelementptr inbounds i8, i8* %1645, i64 %95
  %1649 = icmp ult i8* %1647, %118
  br i1 %1649, label %1643, label %1650

1650:                                             ; preds = %1643, %115
  %1651 = phi i8* [ %116, %115 ], [ %1648, %1643 ]
  %1652 = getelementptr inbounds i8, i8* %117, i64 %97
  %1653 = getelementptr inbounds i8, i8* %118, i64 %97
  %1654 = add i32 %106, -2
  %1655 = icmp eq i32 %1654, 0
  br i1 %1655, label %1627, label %102
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20WebGLImageConversion16ExtractImageDataEPKvNS0_10DataFormatERKNS_7IntSizeERKNS_7IntRectEiijjbbRN3WTF6VectorIhLj0ENSA_18PartitionAllocatorEEE(i8*, i32, %"class.blink::IntSize"* nocapture readonly dereferenceable(8), %"class.blink::IntRect"* dereferenceable(16), i32, i32, i32, i32, i1 zeroext, i1 zeroext, %"class.WTF::Vector.258"* nocapture dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %12 = alloca i32, align 4
  %13 = alloca %"struct.blink::WebGLImageConversion::PixelStoreParams", align 4
  %14 = icmp eq i8* %0, null
  br i1 %14, label %89, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::IntSize", %"class.blink::IntSize"* %2, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #12
  store i32 -1431655766, i32* %12, align 4
  %19 = bitcast %"struct.blink::WebGLImageConversion::PixelStoreParams"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %13, i64 0, i32 0
  %21 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %13, i64 0, i32 1
  %22 = bitcast i32* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 20, i1 false) #12
  store i32 1, i32* %20, align 4
  %23 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = call i32 @_ZN5blink20WebGLImageConversion23ComputeImageSizeInBytesEjjiiiRKNS0_16PixelStoreParamsEPjS4_S4_(i32 %6, i32 %7, i32 %24, i32 %26, i32 %4, %"struct.blink::WebGLImageConversion::PixelStoreParams"* nonnull dereferenceable(24) %13, i32* nonnull %12, i32* null, i32* null)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %87

29:                                               ; preds = %15
  %30 = load i32, i32* %12, align 4
  %31 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %10, i64 0, i32 0, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp ult i32 %32, %30
  br i1 %33, label %34, label %82

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %10, i64 0, i32 0, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = icmp ult i32 %36, %30
  br i1 %37, label %38, label %71

38:                                               ; preds = %34
  %39 = lshr i32 %36, 2
  %40 = add nuw i32 %36, 1
  %41 = add i32 %40, %39
  %42 = icmp ugt i32 %41, 4
  %43 = select i1 %42, i32 %41, i32 4
  %44 = icmp ugt i32 %43, %30
  %45 = select i1 %44, i32 %43, i32 %30
  %46 = icmp ult i32 %36, %45
  br i1 %46, label %47, label %71, !prof !12

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %10, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq i8* %49, null
  %51 = zext i32 %45 to i64
  %52 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %51) #12
  %53 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %52, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %54 = ptrtoint i8* %53 to i64
  br i1 %50, label %55, label %58

55:                                               ; preds = %47
  %56 = bitcast %"class.WTF::Vector.258"* %10 to i64*
  store atomic i64 %54, i64* %56 monotonic, align 8
  %57 = trunc i64 %52 to i32
  store i32 %57, i32* %35, align 8
  br label %71

58:                                               ; preds = %47
  %59 = load i8*, i8** %48, align 8
  %60 = icmp ne i8* %53, null
  %61 = icmp ne i8* %59, null
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %67, !prof !12

63:                                               ; preds = %58
  %64 = load i32, i32* %31, align 4
  %65 = zext i32 %64 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* nonnull align 1 %59, i64 %65, i1 false) #12
  %66 = load i8*, i8** %48, align 8
  br label %67

67:                                               ; preds = %63, %58
  %68 = phi i8* [ %59, %58 ], [ %66, %63 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %68) #12
  %69 = bitcast %"class.WTF::Vector.258"* %10 to i64*
  store atomic i64 %54, i64* %69 monotonic, align 8
  %70 = trunc i64 %52 to i32
  store i32 %70, i32* %35, align 8
  br label %71

71:                                               ; preds = %67, %55, %38, %34
  %72 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %10, i64 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = load i32, i32* %31, align 4
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = zext i32 %30 to i64
  %78 = getelementptr inbounds i8, i8* %73, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = ptrtoint i8* %76 to i64
  %81 = sub i64 %79, %80
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 0, i64 %81, i1 false) #12
  br label %82

82:                                               ; preds = %29, %71
  store i32 %30, i32* %31, align 4
  %83 = zext i1 %9 to i32
  %84 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %10, i64 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = tail call zeroext i1 @_ZN5blink20WebGLImageConversion10PackPixelsEPKvNS0_10DataFormatEjjRKNS_7IntRectEijijjNS0_7AlphaOpEPvb(i8* nonnull %0, i32 %1, i32 %17, i32 undef, %"class.blink::IntRect"* dereferenceable(16) %3, i32 %4, i32 0, i32 %5, i32 %6, i32 %7, i32 %83, i8* %85, i1 zeroext %8)
  br label %87

87:                                               ; preds = %82, %15
  %88 = phi i1 [ false, %15 ], [ %86, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #12
  br label %89

89:                                               ; preds = %11, %87
  %90 = phi i1 [ %88, %87 ], [ false, %11 ]
  ret i1 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20WebGLImageConversion18ExtractTextureDataEjjjjRKNS0_16PixelStoreParamsEbbPKvRN3WTF6VectorIhLj0ENS6_18PartitionAllocatorEEE(i32, i32, i32, i32, %"struct.blink::WebGLImageConversion::PixelStoreParams"* nocapture readonly dereferenceable(24), i1 zeroext, i1 zeroext, i8*, %"class.WTF::Vector.258"* nocapture dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %"class.blink::IntRect", align 4
  %15 = tail call fastcc i32 @_ZN5blink12_GLOBAL__N_113GetDataFormatEjj(i32 %2, i32 %3)
  %16 = icmp eq i32 %15, 53
  br i1 %16, label %104, label %17

17:                                               ; preds = %9
  %18 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #12
  store i32 -1431655766, i32* %10, align 4
  %19 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  store i32 -1431655766, i32* %11, align 4
  %20 = call zeroext i1 @_ZN5blink20WebGLImageConversion30ComputeFormatAndTypeParametersEjjPjS1_(i32 %2, i32 %3, i32* nonnull %10, i32* nonnull %11)
  br i1 %20, label %21, label %102

21:                                               ; preds = %17
  %22 = load i32, i32* %10, align 4
  %23 = load i32, i32* %11, align 4
  %24 = mul i32 %1, %0
  %25 = mul i32 %24, %22
  %26 = mul i32 %25, %23
  %27 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %8, i64 0, i32 0, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp ult i32 %28, %26
  br i1 %29, label %30, label %78

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %8, i64 0, i32 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp ult i32 %32, %26
  br i1 %33, label %34, label %67

34:                                               ; preds = %30
  %35 = lshr i32 %32, 2
  %36 = add nuw i32 %32, 1
  %37 = add i32 %36, %35
  %38 = icmp ugt i32 %37, 4
  %39 = select i1 %38, i32 %37, i32 4
  %40 = icmp ugt i32 %39, %26
  %41 = select i1 %40, i32 %39, i32 %26
  %42 = icmp ult i32 %32, %41
  br i1 %42, label %43, label %67, !prof !12

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %8, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  %47 = zext i32 %41 to i64
  %48 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %47) #12
  %49 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %48, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  %50 = ptrtoint i8* %49 to i64
  br i1 %46, label %51, label %54

51:                                               ; preds = %43
  %52 = bitcast %"class.WTF::Vector.258"* %8 to i64*
  store atomic i64 %50, i64* %52 monotonic, align 8
  %53 = trunc i64 %48 to i32
  store i32 %53, i32* %31, align 8
  br label %67

54:                                               ; preds = %43
  %55 = load i8*, i8** %44, align 8
  %56 = icmp ne i8* %49, null
  %57 = icmp ne i8* %55, null
  %58 = and i1 %56, %57
  br i1 %58, label %59, label %63, !prof !12

59:                                               ; preds = %54
  %60 = load i32, i32* %27, align 4
  %61 = zext i32 %60 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %49, i8* nonnull align 1 %55, i64 %61, i1 false) #12
  %62 = load i8*, i8** %44, align 8
  br label %63

63:                                               ; preds = %59, %54
  %64 = phi i8* [ %55, %54 ], [ %62, %59 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %64) #12
  %65 = bitcast %"class.WTF::Vector.258"* %8 to i64*
  store atomic i64 %50, i64* %65 monotonic, align 8
  %66 = trunc i64 %48 to i32
  store i32 %66, i32* %31, align 8
  br label %67

67:                                               ; preds = %63, %51, %34, %30
  %68 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %8, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = load i32, i32* %27, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  %73 = zext i32 %26 to i64
  %74 = getelementptr inbounds i8, i8* %69, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = ptrtoint i8* %72 to i64
  %77 = sub i64 %75, %76
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 0, i64 %77, i1 false) #12
  br label %78

78:                                               ; preds = %21, %67
  store i32 %26, i32* %27, align 4
  %79 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79) #12
  store i32 -1431655766, i32* %12, align 4
  %80 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #12
  store i32 -1431655766, i32* %13, align 4
  %81 = call i32 @_ZN5blink20WebGLImageConversion23ComputeImageSizeInBytesEjjiiiRKNS0_16PixelStoreParamsEPjS4_S4_(i32 %2, i32 %3, i32 %0, i32 %1, i32 1, %"struct.blink::WebGLImageConversion::PixelStoreParams"* dereferenceable(24) %4, i32* nonnull %12, i32* null, i32* nonnull %13)
  %82 = load i32, i32* %13, align 4
  %83 = icmp eq i32 %82, 0
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds i8, i8* %7, i64 %84
  %86 = select i1 %83, i8* %7, i8* %85
  %87 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %4, i64 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i32 %0, i32 %88
  %91 = bitcast %"class.blink::IntRect"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #12
  %92 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14, i64 0, i32 0, i32 0
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14, i64 0, i32 0, i32 1
  store i32 0, i32* %93, align 4
  %94 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14, i64 0, i32 1, i32 0
  store i32 %0, i32* %94, align 4
  %95 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14, i64 0, i32 1, i32 1
  store i32 %1, i32* %95, align 4
  %96 = getelementptr inbounds %"struct.blink::WebGLImageConversion::PixelStoreParams", %"struct.blink::WebGLImageConversion::PixelStoreParams"* %4, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i1 %6 to i32
  %99 = getelementptr inbounds %"class.WTF::Vector.258", %"class.WTF::Vector.258"* %8, i64 0, i32 0, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = call zeroext i1 @_ZN5blink20WebGLImageConversion10PackPixelsEPKvNS0_10DataFormatEjjRKNS_7IntRectEijijjNS0_7AlphaOpEPvb(i8* %86, i32 %15, i32 %90, i32 undef, %"class.blink::IntRect"* nonnull dereferenceable(16) %14, i32 1, i32 %97, i32 0, i32 %2, i32 %3, i32 %98, i8* %100, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %79) #12
  br label %102

102:                                              ; preds = %17, %78
  %103 = phi i1 [ %101, %78 ], [ false, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #12
  br label %104

104:                                              ; preds = %9, %102
  %105 = phi i1 [ %103, %102 ], [ false, %9 ]
  ret i1 %105
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN5blink12_GLOBAL__N_113GetDataFormatEjj(i32, i32) unnamed_addr #5 {
  switch i32 %1, label %52 [
    i32 5120, label %3
    i32 5121, label %7
    i32 5122, label %13
    i32 5123, label %17
    i32 5124, label %22
    i32 5125, label %26
    i32 36193, label %31
    i32 5131, label %31
    i32 5126, label %37
    i32 32819, label %50
    i32 32820, label %44
    i32 33635, label %45
    i32 35902, label %46
    i32 34042, label %47
    i32 35899, label %48
    i32 33640, label %49
  ]

3:                                                ; preds = %2
  switch i32 %0, label %52 [
    i32 6403, label %50
    i32 36244, label %50
    i32 33319, label %4
    i32 33320, label %4
    i32 6407, label %5
    i32 36248, label %5
    i32 6408, label %6
    i32 36249, label %6
  ]

4:                                                ; preds = %3, %3
  br label %50

5:                                                ; preds = %3, %3
  br label %50

6:                                                ; preds = %3, %3
  br label %50

7:                                                ; preds = %2
  switch i32 %0, label %52 [
    i32 6407, label %50
    i32 36248, label %50
    i32 35904, label %50
    i32 6408, label %8
    i32 36249, label %8
    i32 35906, label %8
    i32 6406, label %9
    i32 6409, label %10
    i32 6403, label %10
    i32 36244, label %10
    i32 33319, label %11
    i32 33320, label %11
    i32 6410, label %12
  ]

8:                                                ; preds = %7, %7, %7
  br label %50

9:                                                ; preds = %7
  br label %50

10:                                               ; preds = %7, %7, %7
  br label %50

11:                                               ; preds = %7, %7
  br label %50

12:                                               ; preds = %7
  br label %50

13:                                               ; preds = %2
  switch i32 %0, label %52 [
    i32 36244, label %50
    i32 33320, label %14
    i32 36248, label %15
    i32 36249, label %16
  ]

14:                                               ; preds = %13
  br label %50

15:                                               ; preds = %13
  br label %50

16:                                               ; preds = %13
  br label %50

17:                                               ; preds = %2
  switch i32 %0, label %52 [
    i32 36244, label %50
    i32 6402, label %18
    i32 33320, label %19
    i32 36248, label %20
    i32 36249, label %21
  ]

18:                                               ; preds = %17
  br label %50

19:                                               ; preds = %17
  br label %50

20:                                               ; preds = %17
  br label %50

21:                                               ; preds = %17
  br label %50

22:                                               ; preds = %2
  switch i32 %0, label %52 [
    i32 36244, label %50
    i32 33320, label %23
    i32 36248, label %24
    i32 36249, label %25
  ]

23:                                               ; preds = %22
  br label %50

24:                                               ; preds = %22
  br label %50

25:                                               ; preds = %22
  br label %50

26:                                               ; preds = %2
  switch i32 %0, label %52 [
    i32 36244, label %50
    i32 6402, label %27
    i32 33320, label %28
    i32 36248, label %29
    i32 36249, label %30
  ]

27:                                               ; preds = %26
  br label %50

28:                                               ; preds = %26
  br label %50

29:                                               ; preds = %26
  br label %50

30:                                               ; preds = %26
  br label %50

31:                                               ; preds = %2, %2
  switch i32 %0, label %52 [
    i32 6408, label %50
    i32 6407, label %32
    i32 33319, label %33
    i32 6406, label %34
    i32 6409, label %35
    i32 6403, label %35
    i32 6410, label %36
  ]

32:                                               ; preds = %31
  br label %50

33:                                               ; preds = %31
  br label %50

34:                                               ; preds = %31
  br label %50

35:                                               ; preds = %31, %31
  br label %50

36:                                               ; preds = %31
  br label %50

37:                                               ; preds = %2
  switch i32 %0, label %52 [
    i32 6408, label %50
    i32 6407, label %38
    i32 33319, label %39
    i32 6406, label %40
    i32 6409, label %41
    i32 6403, label %41
    i32 6402, label %42
    i32 6410, label %43
  ]

38:                                               ; preds = %37
  br label %50

39:                                               ; preds = %37
  br label %50

40:                                               ; preds = %37
  br label %50

41:                                               ; preds = %37, %37
  br label %50

42:                                               ; preds = %37
  br label %50

43:                                               ; preds = %37
  br label %50

44:                                               ; preds = %2
  br label %50

45:                                               ; preds = %2
  br label %50

46:                                               ; preds = %2
  br label %50

47:                                               ; preds = %2
  br label %50

48:                                               ; preds = %2
  br label %50

49:                                               ; preds = %2
  br label %50

50:                                               ; preds = %2, %37, %31, %26, %22, %17, %13, %7, %7, %7, %3, %3, %38, %39, %40, %41, %42, %43, %32, %33, %34, %35, %36, %27, %28, %29, %30, %23, %24, %25, %18, %19, %20, %21, %14, %15, %16, %8, %9, %10, %11, %12, %4, %5, %6, %49, %48, %47, %46, %45, %44
  %51 = phi i32 [ 8, %49 ], [ 24, %48 ], [ 52, %47 ], [ 25, %46 ], [ 23, %45 ], [ 21, %44 ], [ 44, %43 ], [ 51, %42 ], [ 41, %41 ], [ 48, %40 ], [ 33, %39 ], [ 16, %38 ], [ 43, %36 ], [ 40, %35 ], [ 47, %34 ], [ 32, %33 ], [ 15, %32 ], [ 4, %30 ], [ 13, %29 ], [ 30, %28 ], [ 50, %27 ], [ 5, %25 ], [ 14, %24 ], [ 31, %23 ], [ 2, %21 ], [ 11, %20 ], [ 28, %19 ], [ 49, %18 ], [ 3, %16 ], [ 12, %15 ], [ 29, %14 ], [ 42, %12 ], [ 26, %11 ], [ 34, %10 ], [ 46, %9 ], [ 0, %8 ], [ 1, %6 ], [ 10, %5 ], [ 27, %4 ], [ 35, %3 ], [ 35, %3 ], [ 9, %7 ], [ 9, %7 ], [ 9, %7 ], [ 37, %13 ], [ 36, %17 ], [ 39, %22 ], [ 38, %26 ], [ 6, %31 ], [ 7, %37 ], [ 22, %2 ]
  br label %52

52:                                               ; preds = %2, %37, %31, %26, %22, %17, %13, %7, %3, %50
  %53 = phi i32 [ %51, %50 ], [ 53, %3 ], [ 53, %7 ], [ 53, %13 ], [ 53, %17 ], [ 53, %22 ], [ 53, %26 ], [ 53, %31 ], [ 53, %37 ], [ 53, %2 ]
  ret i32 %53
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i32 @_ZN5blink12_GLOBAL__N_119TexelBytesForFormatENS_20WebGLImageConversion10DataFormatE(i32) unnamed_addr #5 {
  %2 = icmp ult i32 %0, 53
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [53 x i32], [53 x i32]* @switch.table._ZN5blink12_GLOBAL__N_119TexelBytesForFormatENS_20WebGLImageConversion10DataFormatE, i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6

7:                                                ; preds = %1
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink20WebGLImageConversion12UnpackPixelsEPKtNS0_10DataFormatEjPh(i16* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #7 align 2 {
  switch i32 %1, label %422 [
    i32 22, label %5
    i32 21, label %139
    i32 18, label %273
  ]

5:                                                ; preds = %4
  %6 = and i32 %2, -8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %41, label %8

8:                                                ; preds = %5, %8
  %9 = phi i16* [ %37, %8 ], [ %0, %5 ]
  %10 = phi i8* [ %38, %8 ], [ %3, %5 ]
  %11 = phi i32 [ %39, %8 ], [ 0, %5 ]
  %12 = bitcast i8* %10 to <8 x i16>*
  %13 = bitcast i16* %9 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = lshr <8 x i16> %14, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %16 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = lshr <8 x i16> %14, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %18 = shl nuw nsw <8 x i16> %15, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %19 = or <8 x i16> %18, %15
  %20 = and <8 x i16> %16, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %21 = shl nuw nsw <8 x i16> %16, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %22 = and <8 x i16> %17, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %23 = shl nuw nsw <8 x i16> %22, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %24 = and <8 x i16> %14, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %25 = shl nuw nsw <8 x i16> %24, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %26 = or <8 x i16> %21, %20
  %27 = shl <8 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = or <8 x i16> %19, %27
  %29 = or <8 x i16> %25, %24
  %30 = shl nuw <8 x i16> %29, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %31 = or <8 x i16> %23, %22
  %32 = or <8 x i16> %31, %30
  %33 = shufflevector <8 x i16> %28, <8 x i16> %32, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = shufflevector <8 x i16> %28, <8 x i16> %32, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %34, <8 x i16>* %12, align 1
  %35 = getelementptr inbounds i8, i8* %10, i64 16
  %36 = bitcast i8* %35 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %9, i64 8
  %38 = getelementptr inbounds i8, i8* %10, i64 32
  %39 = add nuw i32 %11, 8
  %40 = icmp ult i32 %39, %6
  br i1 %40, label %8, label %41

41:                                               ; preds = %8, %5
  %42 = phi i16* [ %0, %5 ], [ %37, %8 ]
  %43 = phi i8* [ %3, %5 ], [ %38, %8 ]
  %44 = bitcast i16* %42 to i8*
  %45 = sub i32 %2, %6
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %422, label %47

47:                                               ; preds = %41
  %48 = xor i32 %6, -1
  %49 = add i32 %48, %2
  %50 = zext i32 %49 to i64
  %51 = add nuw nsw i64 %50, 1
  %52 = icmp ult i64 %51, 8
  br i1 %52, label %105, label %53

53:                                               ; preds = %47
  %54 = xor i32 %6, -1
  %55 = add i32 %54, %2
  %56 = zext i32 %55 to i64
  %57 = shl nuw nsw i64 %56, 2
  %58 = add nuw nsw i64 %57, 4
  %59 = getelementptr i8, i8* %43, i64 %58
  %60 = add nuw nsw i64 %56, 1
  %61 = getelementptr i16, i16* %42, i64 %60
  %62 = bitcast i16* %61 to i8*
  %63 = icmp ult i8* %43, %62
  %64 = icmp ugt i8* %59, %44
  %65 = and i1 %63, %64
  br i1 %65, label %105, label %66

66:                                               ; preds = %53
  %67 = and i64 %51, 8589934584
  %68 = trunc i64 %67 to i32
  %69 = shl nuw nsw i64 %67, 2
  %70 = getelementptr i8, i8* %43, i64 %69
  %71 = getelementptr i16, i16* %42, i64 %67
  br label %72

72:                                               ; preds = %72, %66
  %73 = phi i64 [ 0, %66 ], [ %101, %72 ]
  %74 = shl i64 %73, 2
  %75 = getelementptr i16, i16* %42, i64 %73
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !53
  %78 = lshr <8 x i16> %77, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = and <8 x i16> %79, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %81 = lshr <8 x i16> %77, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %82 = and <8 x i16> %81, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %83 = and <8 x i16> %77, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %84 = shl nuw nsw <8 x i16> %78, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %85 = or <8 x i16> %84, %78
  %86 = trunc <8 x i16> %85 to <8 x i8>
  %87 = shl nuw nsw <8 x i16> %79, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %88 = or <8 x i16> %87, %80
  %89 = trunc <8 x i16> %88 to <8 x i8>
  %90 = shl nuw nsw <8 x i16> %82, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %91 = or <8 x i16> %90, %82
  %92 = trunc <8 x i16> %91 to <8 x i8>
  %93 = shl nuw nsw <8 x i16> %83, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %94 = or <8 x i16> %93, %83
  %95 = trunc <8 x i16> %94 to <8 x i8>
  %96 = getelementptr inbounds i8, i8* %43, i64 %74
  %97 = bitcast i8* %96 to <32 x i8>*
  %98 = shufflevector <8 x i8> %86, <8 x i8> %89, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %99 = shufflevector <8 x i8> %92, <8 x i8> %95, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %100 = shufflevector <16 x i8> %98, <16 x i8> %99, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %100, <32 x i8>* %97, align 1
  %101 = add i64 %73, 8
  %102 = icmp eq i64 %101, %67
  br i1 %102, label %103, label %72, !llvm.loop !56

103:                                              ; preds = %72
  %104 = icmp eq i64 %51, %67
  br i1 %104, label %422, label %105

105:                                              ; preds = %103, %53, %47
  %106 = phi i32 [ 0, %53 ], [ 0, %47 ], [ %68, %103 ]
  %107 = phi i8* [ %43, %53 ], [ %43, %47 ], [ %70, %103 ]
  %108 = phi i16* [ %42, %53 ], [ %42, %47 ], [ %71, %103 ]
  br label %109

109:                                              ; preds = %105, %109
  %110 = phi i32 [ %137, %109 ], [ %106, %105 ]
  %111 = phi i8* [ %136, %109 ], [ %107, %105 ]
  %112 = phi i16* [ %135, %109 ], [ %108, %105 ]
  %113 = load i16, i16* %112, align 2
  %114 = lshr i16 %113, 12
  %115 = lshr i16 %113, 8
  %116 = and i16 %115, 15
  %117 = lshr i16 %113, 4
  %118 = and i16 %117, 15
  %119 = and i16 %113, 15
  %120 = shl nuw nsw i16 %114, 4
  %121 = or i16 %120, %114
  %122 = trunc i16 %121 to i8
  store i8 %122, i8* %111, align 1
  %123 = shl nuw nsw i16 %115, 4
  %124 = or i16 %123, %116
  %125 = trunc i16 %124 to i8
  %126 = getelementptr inbounds i8, i8* %111, i64 1
  store i8 %125, i8* %126, align 1
  %127 = shl nuw nsw i16 %118, 4
  %128 = or i16 %127, %118
  %129 = trunc i16 %128 to i8
  %130 = getelementptr inbounds i8, i8* %111, i64 2
  store i8 %129, i8* %130, align 1
  %131 = shl nuw nsw i16 %119, 4
  %132 = or i16 %131, %119
  %133 = trunc i16 %132 to i8
  %134 = getelementptr inbounds i8, i8* %111, i64 3
  store i8 %133, i8* %134, align 1
  %135 = getelementptr inbounds i16, i16* %112, i64 1
  %136 = getelementptr inbounds i8, i8* %111, i64 4
  %137 = add nuw i32 %110, 1
  %138 = icmp eq i32 %137, %45
  br i1 %138, label %422, label %109, !llvm.loop !57

139:                                              ; preds = %4
  %140 = and i32 %2, -8
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %175, label %142

142:                                              ; preds = %139, %142
  %143 = phi i16* [ %171, %142 ], [ %0, %139 ]
  %144 = phi i8* [ %172, %142 ], [ %3, %139 ]
  %145 = phi i32 [ %173, %142 ], [ 0, %139 ]
  %146 = bitcast i8* %144 to <8 x i16>*
  %147 = bitcast i16* %143 to <8 x i16>*
  %148 = load <8 x i16>, <8 x i16>* %147, align 1
  %149 = lshr <8 x i16> %148, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %150 = lshr <8 x i16> %148, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %151 = lshr <8 x i16> %148, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %152 = shl nuw nsw <8 x i16> %149, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %153 = shl nuw nsw <8 x i16> %150, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %154 = shl <8 x i16> %151, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %155 = and <8 x i16> %154, <i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248, i16 248>
  %156 = shl <8 x i16> %148, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %157 = and <8 x i16> %150, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %158 = or <8 x i16> %153, %157
  %159 = shl <8 x i16> %158, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %160 = ashr exact <8 x i16> %156, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %161 = and <8 x i16> %149, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %162 = or <8 x i16> %152, %161
  %163 = or <8 x i16> %162, %159
  %164 = and <8 x i16> %151, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %165 = or <8 x i16> %160, %164
  %166 = or <8 x i16> %165, %155
  %167 = shufflevector <8 x i16> %163, <8 x i16> %166, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %168 = shufflevector <8 x i16> %163, <8 x i16> %166, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %168, <8 x i16>* %146, align 1
  %169 = getelementptr inbounds i8, i8* %144, i64 16
  %170 = bitcast i8* %169 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %170, align 1
  %171 = getelementptr inbounds i16, i16* %143, i64 8
  %172 = getelementptr inbounds i8, i8* %144, i64 32
  %173 = add nuw i32 %145, 8
  %174 = icmp ult i32 %173, %140
  br i1 %174, label %142, label %175

175:                                              ; preds = %142, %139
  %176 = phi i16* [ %0, %139 ], [ %171, %142 ]
  %177 = phi i8* [ %3, %139 ], [ %172, %142 ]
  %178 = bitcast i16* %176 to i8*
  %179 = sub i32 %2, %140
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %422, label %181

181:                                              ; preds = %175
  %182 = xor i32 %140, -1
  %183 = add i32 %182, %2
  %184 = zext i32 %183 to i64
  %185 = add nuw nsw i64 %184, 1
  %186 = icmp ult i64 %185, 8
  br i1 %186, label %239, label %187

187:                                              ; preds = %181
  %188 = xor i32 %140, -1
  %189 = add i32 %188, %2
  %190 = zext i32 %189 to i64
  %191 = shl nuw nsw i64 %190, 2
  %192 = add nuw nsw i64 %191, 4
  %193 = getelementptr i8, i8* %177, i64 %192
  %194 = add nuw nsw i64 %190, 1
  %195 = getelementptr i16, i16* %176, i64 %194
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %177, %196
  %198 = icmp ugt i8* %193, %178
  %199 = and i1 %197, %198
  br i1 %199, label %239, label %200

200:                                              ; preds = %187
  %201 = and i64 %185, 8589934584
  %202 = trunc i64 %201 to i32
  %203 = shl nuw nsw i64 %201, 2
  %204 = getelementptr i8, i8* %177, i64 %203
  %205 = getelementptr i16, i16* %176, i64 %201
  br label %206

206:                                              ; preds = %206, %200
  %207 = phi i64 [ 0, %200 ], [ %235, %206 ]
  %208 = shl i64 %207, 2
  %209 = getelementptr i16, i16* %176, i64 %207
  %210 = bitcast i16* %209 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !58
  %212 = lshr <8 x i16> %211, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %213 = lshr <8 x i16> %211, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %214 = lshr <8 x i16> %211, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %215 = shl nuw nsw <8 x i16> %212, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %216 = and <8 x i16> %212, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %217 = or <8 x i16> %215, %216
  %218 = trunc <8 x i16> %217 to <8 x i8>
  %219 = shl nuw nsw <8 x i16> %213, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %220 = and <8 x i16> %213, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %221 = or <8 x i16> %219, %220
  %222 = trunc <8 x i16> %221 to <8 x i8>
  %223 = shl <8 x i16> %214, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %224 = and <8 x i16> %214, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %225 = or <8 x i16> %223, %224
  %226 = trunc <8 x i16> %225 to <8 x i8>
  %227 = shl <8 x i16> %211, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %228 = ashr exact <8 x i16> %227, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %229 = trunc <8 x i16> %228 to <8 x i8>
  %230 = getelementptr inbounds i8, i8* %177, i64 %208
  %231 = bitcast i8* %230 to <32 x i8>*
  %232 = shufflevector <8 x i8> %218, <8 x i8> %222, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %233 = shufflevector <8 x i8> %226, <8 x i8> %229, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %234 = shufflevector <16 x i8> %232, <16 x i8> %233, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %234, <32 x i8>* %231, align 1
  %235 = add i64 %207, 8
  %236 = icmp eq i64 %235, %201
  br i1 %236, label %237, label %206, !llvm.loop !61

237:                                              ; preds = %206
  %238 = icmp eq i64 %185, %201
  br i1 %238, label %422, label %239

239:                                              ; preds = %237, %187, %181
  %240 = phi i32 [ 0, %187 ], [ 0, %181 ], [ %202, %237 ]
  %241 = phi i8* [ %177, %187 ], [ %177, %181 ], [ %204, %237 ]
  %242 = phi i16* [ %176, %187 ], [ %176, %181 ], [ %205, %237 ]
  br label %243

243:                                              ; preds = %239, %243
  %244 = phi i32 [ %271, %243 ], [ %240, %239 ]
  %245 = phi i8* [ %270, %243 ], [ %241, %239 ]
  %246 = phi i16* [ %269, %243 ], [ %242, %239 ]
  %247 = load i16, i16* %246, align 2
  %248 = lshr i16 %247, 11
  %249 = lshr i16 %247, 6
  %250 = lshr i16 %247, 1
  %251 = shl nuw nsw i16 %248, 3
  %252 = and i16 %248, 7
  %253 = or i16 %251, %252
  %254 = trunc i16 %253 to i8
  store i8 %254, i8* %245, align 1
  %255 = shl nuw nsw i16 %249, 3
  %256 = and i16 %249, 7
  %257 = or i16 %255, %256
  %258 = trunc i16 %257 to i8
  %259 = getelementptr inbounds i8, i8* %245, i64 1
  store i8 %258, i8* %259, align 1
  %260 = shl i16 %250, 3
  %261 = and i16 %250, 7
  %262 = or i16 %260, %261
  %263 = trunc i16 %262 to i8
  %264 = getelementptr inbounds i8, i8* %245, i64 2
  store i8 %263, i8* %264, align 1
  %265 = shl i16 %247, 15
  %266 = ashr exact i16 %265, 15
  %267 = trunc i16 %266 to i8
  %268 = getelementptr inbounds i8, i8* %245, i64 3
  store i8 %267, i8* %268, align 1
  %269 = getelementptr inbounds i16, i16* %246, i64 1
  %270 = getelementptr inbounds i8, i8* %245, i64 4
  %271 = add nuw i32 %244, 1
  %272 = icmp eq i32 %271, %179
  br i1 %272, label %422, label %243, !llvm.loop !62

273:                                              ; preds = %4
  %274 = bitcast i16* %0 to i32*
  %275 = bitcast i8* %3 to i32*
  %276 = and i32 %2, -4
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %335, label %278

278:                                              ; preds = %273
  %279 = add i32 %276, -1
  %280 = lshr i32 %279, 2
  %281 = add nuw nsw i32 %280, 1
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %280, 0
  br i1 %283, label %316, label %284

284:                                              ; preds = %278
  %285 = sub nuw nsw i32 %281, %282
  br label %286

286:                                              ; preds = %286, %284
  %287 = phi i32* [ %274, %284 ], [ %312, %286 ]
  %288 = phi i32* [ %275, %284 ], [ %313, %286 ]
  %289 = phi i32 [ %285, %284 ], [ %314, %286 ]
  %290 = bitcast i32* %288 to <2 x i64>*
  %291 = bitcast i32* %287 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 1
  %293 = bitcast <2 x i64> %292 to <8 x i16>
  %294 = shufflevector <8 x i16> %293, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %295 = shufflevector <8 x i16> %294, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %296 = bitcast <8 x i16> %295 to <2 x i64>
  %297 = and <2 x i64> %296, <i64 71777214294589695, i64 71777214294589695>
  %298 = and <2 x i64> %292, <i64 -71777214294589696, i64 -71777214294589696>
  %299 = or <2 x i64> %297, %298
  store <2 x i64> %299, <2 x i64>* %290, align 1
  %300 = getelementptr inbounds i32, i32* %287, i64 4
  %301 = getelementptr inbounds i32, i32* %288, i64 4
  %302 = bitcast i32* %301 to <2 x i64>*
  %303 = bitcast i32* %300 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 1
  %305 = bitcast <2 x i64> %304 to <8 x i16>
  %306 = shufflevector <8 x i16> %305, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %307 = shufflevector <8 x i16> %306, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %308 = bitcast <8 x i16> %307 to <2 x i64>
  %309 = and <2 x i64> %308, <i64 71777214294589695, i64 71777214294589695>
  %310 = and <2 x i64> %304, <i64 -71777214294589696, i64 -71777214294589696>
  %311 = or <2 x i64> %309, %310
  store <2 x i64> %311, <2 x i64>* %302, align 1
  %312 = getelementptr inbounds i32, i32* %287, i64 8
  %313 = getelementptr inbounds i32, i32* %288, i64 8
  %314 = add i32 %289, -2
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %286

316:                                              ; preds = %286, %278
  %317 = phi i32* [ undef, %278 ], [ %312, %286 ]
  %318 = phi i32* [ undef, %278 ], [ %313, %286 ]
  %319 = phi i32* [ %274, %278 ], [ %312, %286 ]
  %320 = phi i32* [ %275, %278 ], [ %313, %286 ]
  %321 = icmp eq i32 %282, 0
  br i1 %321, label %335, label %322

322:                                              ; preds = %316
  %323 = bitcast i32* %320 to <2 x i64>*
  %324 = bitcast i32* %319 to <2 x i64>*
  %325 = load <2 x i64>, <2 x i64>* %324, align 1
  %326 = bitcast <2 x i64> %325 to <8 x i16>
  %327 = shufflevector <8 x i16> %326, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %328 = shufflevector <8 x i16> %327, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %329 = bitcast <8 x i16> %328 to <2 x i64>
  %330 = and <2 x i64> %329, <i64 71777214294589695, i64 71777214294589695>
  %331 = and <2 x i64> %325, <i64 -71777214294589696, i64 -71777214294589696>
  %332 = or <2 x i64> %330, %331
  store <2 x i64> %332, <2 x i64>* %323, align 1
  %333 = getelementptr inbounds i32, i32* %320, i64 4
  %334 = getelementptr inbounds i32, i32* %319, i64 4
  br label %335

335:                                              ; preds = %322, %316, %273
  %336 = phi i32* [ %274, %273 ], [ %317, %316 ], [ %334, %322 ]
  %337 = phi i32* [ %275, %273 ], [ %318, %316 ], [ %333, %322 ]
  %338 = sub i32 %2, %276
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %422, label %340

340:                                              ; preds = %335
  %341 = zext i32 %338 to i64
  %342 = icmp ult i32 %338, 8
  br i1 %342, label %379, label %343

343:                                              ; preds = %340
  %344 = getelementptr i32, i32* %337, i64 %341
  %345 = getelementptr i32, i32* %336, i64 %341
  %346 = icmp ult i32* %337, %345
  %347 = icmp ult i32* %336, %344
  %348 = and i1 %346, %347
  br i1 %348, label %379, label %349

349:                                              ; preds = %343
  %350 = and i64 %341, 4294967288
  br label %351

351:                                              ; preds = %351, %349
  %352 = phi i64 [ 0, %349 ], [ %375, %351 ]
  %353 = getelementptr inbounds i32, i32* %336, i64 %352
  %354 = bitcast i32* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 4, !alias.scope !63
  %356 = getelementptr inbounds i32, i32* %353, i64 4
  %357 = bitcast i32* %356 to <4 x i32>*
  %358 = load <4 x i32>, <4 x i32>* %357, align 4, !alias.scope !63
  %359 = lshr <4 x i32> %355, <i32 16, i32 16, i32 16, i32 16>
  %360 = lshr <4 x i32> %358, <i32 16, i32 16, i32 16, i32 16>
  %361 = shl <4 x i32> %355, <i32 16, i32 16, i32 16, i32 16>
  %362 = shl <4 x i32> %358, <i32 16, i32 16, i32 16, i32 16>
  %363 = or <4 x i32> %359, %361
  %364 = or <4 x i32> %360, %362
  %365 = and <4 x i32> %363, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %366 = and <4 x i32> %364, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %367 = and <4 x i32> %355, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %368 = and <4 x i32> %358, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %369 = or <4 x i32> %365, %367
  %370 = or <4 x i32> %366, %368
  %371 = getelementptr inbounds i32, i32* %337, i64 %352
  %372 = bitcast i32* %371 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %372, align 4, !alias.scope !66, !noalias !63
  %373 = getelementptr inbounds i32, i32* %371, i64 4
  %374 = bitcast i32* %373 to <4 x i32>*
  store <4 x i32> %370, <4 x i32>* %374, align 4, !alias.scope !66, !noalias !63
  %375 = add i64 %352, 8
  %376 = icmp eq i64 %375, %350
  br i1 %376, label %377, label %351, !llvm.loop !68

377:                                              ; preds = %351
  %378 = icmp eq i64 %350, %341
  br i1 %378, label %422, label %379

379:                                              ; preds = %377, %343, %340
  %380 = phi i64 [ 0, %343 ], [ 0, %340 ], [ %350, %377 ]
  %381 = xor i64 %380, -1
  %382 = and i64 %341, 1
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %395, label %384

384:                                              ; preds = %379
  %385 = getelementptr inbounds i32, i32* %336, i64 %380
  %386 = load i32, i32* %385, align 4
  %387 = lshr i32 %386, 16
  %388 = shl i32 %386, 16
  %389 = or i32 %387, %388
  %390 = and i32 %389, 16711935
  %391 = and i32 %386, -16711936
  %392 = or i32 %390, %391
  %393 = getelementptr inbounds i32, i32* %337, i64 %380
  store i32 %392, i32* %393, align 4
  %394 = or i64 %380, 1
  br label %395

395:                                              ; preds = %379, %384
  %396 = phi i64 [ %380, %379 ], [ %394, %384 ]
  %397 = sub nsw i64 0, %341
  %398 = icmp eq i64 %381, %397
  br i1 %398, label %422, label %399

399:                                              ; preds = %395, %399
  %400 = phi i64 [ %420, %399 ], [ %396, %395 ]
  %401 = getelementptr inbounds i32, i32* %336, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = lshr i32 %402, 16
  %404 = shl i32 %402, 16
  %405 = or i32 %403, %404
  %406 = and i32 %405, 16711935
  %407 = and i32 %402, -16711936
  %408 = or i32 %406, %407
  %409 = getelementptr inbounds i32, i32* %337, i64 %400
  store i32 %408, i32* %409, align 4
  %410 = add nuw nsw i64 %400, 1
  %411 = getelementptr inbounds i32, i32* %336, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = lshr i32 %412, 16
  %414 = shl i32 %412, 16
  %415 = or i32 %413, %414
  %416 = and i32 %415, 16711935
  %417 = and i32 %412, -16711936
  %418 = or i32 %416, %417
  %419 = getelementptr inbounds i32, i32* %337, i64 %410
  store i32 %418, i32* %419, align 4
  %420 = add nuw nsw i64 %400, 2
  %421 = icmp eq i64 %420, %341
  br i1 %421, label %422, label %399, !llvm.loop !69

422:                                              ; preds = %395, %399, %243, %109, %377, %237, %103, %335, %175, %41, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink20WebGLImageConversion10PackPixelsEPKhNS0_10DataFormatEjPh(i8* nocapture readonly, i32, i32, i8* nocapture) local_unnamed_addr #7 align 2 {
  switch i32 %1, label %573 [
    i32 42, label %5
    i32 34, label %107
    i32 0, label %244
    i32 22, label %318
    i32 21, label %405
    i32 23, label %494
  ]

5:                                                ; preds = %4
  %6 = and i32 %2, -4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %80, label %8

8:                                                ; preds = %5, %8
  %9 = phi i8* [ %76, %8 ], [ %0, %5 ]
  %10 = phi i8* [ %77, %8 ], [ %3, %5 ]
  %11 = phi i32 [ %78, %8 ], [ 0, %5 ]
  %12 = getelementptr inbounds i8, i8* %9, i64 15
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = uitofp i8 %13 to double
  %16 = fptrunc double %15 to float
  %17 = select i1 %14, float 2.550000e+02, float %16
  %18 = getelementptr inbounds i8, i8* %9, i64 11
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  %21 = uitofp i8 %19 to double
  %22 = fptrunc double %21 to float
  %23 = select i1 %20, float 2.550000e+02, float %22
  %24 = getelementptr inbounds i8, i8* %9, i64 7
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  %27 = uitofp i8 %25 to double
  %28 = fptrunc double %27 to float
  %29 = select i1 %26, float 2.550000e+02, float %28
  %30 = getelementptr inbounds i8, i8* %9, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  %33 = uitofp i8 %31 to double
  %34 = fptrunc double %33 to float
  %35 = select i1 %32, float 2.550000e+02, float %34
  %36 = insertelement <4 x float> undef, float %35, i32 0
  %37 = insertelement <4 x float> %36, float %29, i32 1
  %38 = insertelement <4 x float> %37, float %23, i32 2
  %39 = insertelement <4 x float> %38, float %17, i32 3
  %40 = getelementptr inbounds i8, i8* %9, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = uitofp i8 %41 to float
  %43 = getelementptr inbounds i8, i8* %9, i64 8
  %44 = load i8, i8* %43, align 1
  %45 = uitofp i8 %44 to float
  %46 = getelementptr inbounds i8, i8* %9, i64 4
  %47 = load i8, i8* %46, align 1
  %48 = uitofp i8 %47 to float
  %49 = load i8, i8* %9, align 1
  %50 = uitofp i8 %49 to float
  %51 = insertelement <4 x float> undef, float %50, i32 0
  %52 = insertelement <4 x float> %51, float %48, i32 1
  %53 = insertelement <4 x float> %52, float %45, i32 2
  %54 = insertelement <4 x float> %53, float %42, i32 3
  %55 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %39
  %56 = fmul <4 x float> %55, %54
  %57 = extractelement <4 x float> %56, i32 0
  %58 = fptoui float %57 to i8
  store i8 %58, i8* %10, align 1
  %59 = load i8, i8* %30, align 1
  %60 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %59, i8* %60, align 1
  %61 = extractelement <4 x float> %56, i32 1
  %62 = fptoui float %61 to i8
  %63 = getelementptr inbounds i8, i8* %10, i64 2
  store i8 %62, i8* %63, align 1
  %64 = load i8, i8* %24, align 1
  %65 = getelementptr inbounds i8, i8* %10, i64 3
  store i8 %64, i8* %65, align 1
  %66 = extractelement <4 x float> %56, i32 2
  %67 = fptoui float %66 to i8
  %68 = getelementptr inbounds i8, i8* %10, i64 4
  store i8 %67, i8* %68, align 1
  %69 = load i8, i8* %18, align 1
  %70 = getelementptr inbounds i8, i8* %10, i64 5
  store i8 %69, i8* %70, align 1
  %71 = extractelement <4 x float> %56, i32 3
  %72 = fptoui float %71 to i8
  %73 = getelementptr inbounds i8, i8* %10, i64 6
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %12, align 1
  %75 = getelementptr inbounds i8, i8* %10, i64 7
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %9, i64 16
  %77 = getelementptr inbounds i8, i8* %10, i64 8
  %78 = add nuw i32 %11, 4
  %79 = icmp ult i32 %78, %6
  br i1 %79, label %8, label %80

80:                                               ; preds = %8, %5
  %81 = phi i8* [ %0, %5 ], [ %76, %8 ]
  %82 = phi i8* [ %3, %5 ], [ %77, %8 ]
  %83 = sub i32 %2, %6
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %573, label %85

85:                                               ; preds = %80, %95
  %86 = phi i32 [ %105, %95 ], [ 0, %80 ]
  %87 = phi i8* [ %104, %95 ], [ %82, %80 ]
  %88 = phi i8* [ %103, %95 ], [ %81, %80 ]
  %89 = getelementptr inbounds i8, i8* %88, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %85
  %93 = uitofp i8 %90 to float
  %94 = fdiv float 2.550000e+02, %93
  br label %95

95:                                               ; preds = %92, %85
  %96 = phi float [ %94, %92 ], [ 1.000000e+00, %85 ]
  %97 = load i8, i8* %88, align 1
  %98 = uitofp i8 %97 to float
  %99 = fmul float %96, %98
  %100 = fptoui float %99 to i8
  store i8 %100, i8* %87, align 1
  %101 = load i8, i8* %89, align 1
  %102 = getelementptr inbounds i8, i8* %87, i64 1
  store i8 %101, i8* %102, align 1
  %103 = getelementptr inbounds i8, i8* %88, i64 4
  %104 = getelementptr inbounds i8, i8* %87, i64 2
  %105 = add nuw i32 %86, 1
  %106 = icmp eq i32 %105, %83
  br i1 %106, label %573, label %85

107:                                              ; preds = %4
  %108 = and i32 %2, -4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %170, label %110

110:                                              ; preds = %107, %110
  %111 = phi i8* [ %166, %110 ], [ %0, %107 ]
  %112 = phi i8* [ %167, %110 ], [ %3, %107 ]
  %113 = phi i32 [ %168, %110 ], [ 0, %107 ]
  %114 = getelementptr inbounds i8, i8* %111, i64 15
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  %117 = select i1 %116, i8 -1, i8 %115
  %118 = uitofp i8 %117 to float
  %119 = getelementptr inbounds i8, i8* %111, i64 11
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 0
  %122 = select i1 %121, i8 -1, i8 %120
  %123 = uitofp i8 %122 to float
  %124 = getelementptr inbounds i8, i8* %111, i64 7
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 0
  %127 = select i1 %126, i8 -1, i8 %125
  %128 = uitofp i8 %127 to float
  %129 = getelementptr inbounds i8, i8* %111, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = icmp eq i8 %130, 0
  %132 = select i1 %131, i8 -1, i8 %130
  %133 = uitofp i8 %132 to float
  %134 = insertelement <4 x float> undef, float %133, i32 0
  %135 = insertelement <4 x float> %134, float %128, i32 1
  %136 = insertelement <4 x float> %135, float %123, i32 2
  %137 = insertelement <4 x float> %136, float %118, i32 3
  %138 = getelementptr inbounds i8, i8* %111, i64 12
  %139 = load i8, i8* %138, align 1
  %140 = uitofp i8 %139 to float
  %141 = getelementptr inbounds i8, i8* %111, i64 8
  %142 = load i8, i8* %141, align 1
  %143 = uitofp i8 %142 to float
  %144 = getelementptr inbounds i8, i8* %111, i64 4
  %145 = load i8, i8* %144, align 1
  %146 = uitofp i8 %145 to float
  %147 = load i8, i8* %111, align 1
  %148 = uitofp i8 %147 to float
  %149 = insertelement <4 x float> undef, float %148, i32 0
  %150 = insertelement <4 x float> %149, float %146, i32 1
  %151 = insertelement <4 x float> %150, float %143, i32 2
  %152 = insertelement <4 x float> %151, float %140, i32 3
  %153 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %137
  %154 = fmul <4 x float> %153, %152
  %155 = extractelement <4 x float> %154, i32 0
  %156 = fptoui float %155 to i8
  store i8 %156, i8* %112, align 1
  %157 = extractelement <4 x float> %154, i32 1
  %158 = fptoui float %157 to i8
  %159 = getelementptr inbounds i8, i8* %112, i64 1
  store i8 %158, i8* %159, align 1
  %160 = extractelement <4 x float> %154, i32 2
  %161 = fptoui float %160 to i8
  %162 = getelementptr inbounds i8, i8* %112, i64 2
  store i8 %161, i8* %162, align 1
  %163 = extractelement <4 x float> %154, i32 3
  %164 = fptoui float %163 to i8
  %165 = getelementptr inbounds i8, i8* %112, i64 3
  store i8 %164, i8* %165, align 1
  %166 = getelementptr inbounds i8, i8* %111, i64 16
  %167 = getelementptr inbounds i8, i8* %112, i64 4
  %168 = add nuw i32 %113, 4
  %169 = icmp ult i32 %168, %108
  br i1 %169, label %110, label %170

170:                                              ; preds = %110, %107
  %171 = phi i8* [ %0, %107 ], [ %166, %110 ]
  %172 = phi i8* [ %3, %107 ], [ %167, %110 ]
  %173 = sub i32 %2, %108
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %573, label %175

175:                                              ; preds = %170
  %176 = xor i32 %108, -1
  %177 = add i32 %176, %2
  %178 = zext i32 %177 to i64
  %179 = add nuw nsw i64 %178, 1
  %180 = icmp ult i64 %179, 16
  br i1 %180, label %220, label %181

181:                                              ; preds = %175
  %182 = xor i32 %108, -1
  %183 = add i32 %182, %2
  %184 = zext i32 %183 to i64
  %185 = add nuw nsw i64 %184, 1
  %186 = getelementptr i8, i8* %172, i64 %185
  %187 = shl nuw nsw i64 %184, 2
  %188 = add nuw nsw i64 %187, 4
  %189 = getelementptr i8, i8* %171, i64 %188
  %190 = icmp ult i8* %172, %189
  %191 = icmp ult i8* %171, %186
  %192 = and i1 %190, %191
  br i1 %192, label %220, label %193

193:                                              ; preds = %181
  %194 = and i64 %179, 8589934576
  %195 = trunc i64 %194 to i32
  %196 = getelementptr i8, i8* %172, i64 %194
  %197 = shl nuw nsw i64 %194, 2
  %198 = getelementptr i8, i8* %171, i64 %197
  br label %199

199:                                              ; preds = %199, %193
  %200 = phi i64 [ 0, %193 ], [ %216, %199 ]
  %201 = getelementptr i8, i8* %172, i64 %200
  %202 = shl i64 %200, 2
  %203 = getelementptr inbounds i8, i8* %171, i64 %202
  %204 = bitcast i8* %203 to <64 x i8>*
  %205 = load <64 x i8>, <64 x i8>* %204, align 1
  %206 = shufflevector <64 x i8> %205, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %207 = shufflevector <64 x i8> %205, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %208 = icmp eq <16 x i8> %207, zeroinitializer
  %209 = uitofp <16 x i8> %207 to <16 x float>
  %210 = fdiv <16 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %209
  %211 = select <16 x i1> %208, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %210
  %212 = uitofp <16 x i8> %206 to <16 x float>
  %213 = fmul <16 x float> %211, %212
  %214 = fptoui <16 x float> %213 to <16 x i8>
  %215 = bitcast i8* %201 to <16 x i8>*
  store <16 x i8> %214, <16 x i8>* %215, align 1, !alias.scope !70, !noalias !73
  %216 = add i64 %200, 16
  %217 = icmp eq i64 %216, %194
  br i1 %217, label %218, label %199, !llvm.loop !75

218:                                              ; preds = %199
  %219 = icmp eq i64 %179, %194
  br i1 %219, label %573, label %220

220:                                              ; preds = %218, %181, %175
  %221 = phi i32 [ 0, %181 ], [ 0, %175 ], [ %195, %218 ]
  %222 = phi i8* [ %172, %181 ], [ %172, %175 ], [ %196, %218 ]
  %223 = phi i8* [ %171, %181 ], [ %171, %175 ], [ %198, %218 ]
  br label %224

224:                                              ; preds = %220, %234
  %225 = phi i32 [ %242, %234 ], [ %221, %220 ]
  %226 = phi i8* [ %241, %234 ], [ %222, %220 ]
  %227 = phi i8* [ %240, %234 ], [ %223, %220 ]
  %228 = getelementptr inbounds i8, i8* %227, i64 3
  %229 = load i8, i8* %228, align 1
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %234, label %231

231:                                              ; preds = %224
  %232 = uitofp i8 %229 to float
  %233 = fdiv float 2.550000e+02, %232
  br label %234

234:                                              ; preds = %231, %224
  %235 = phi float [ %233, %231 ], [ 1.000000e+00, %224 ]
  %236 = load i8, i8* %227, align 1
  %237 = uitofp i8 %236 to float
  %238 = fmul float %235, %237
  %239 = fptoui float %238 to i8
  store i8 %239, i8* %226, align 1
  %240 = getelementptr inbounds i8, i8* %227, i64 4
  %241 = getelementptr inbounds i8, i8* %226, i64 1
  %242 = add nuw i32 %225, 1
  %243 = icmp eq i32 %242, %173
  br i1 %243, label %573, label %224, !llvm.loop !76

244:                                              ; preds = %4
  %245 = icmp eq i32 %2, 0
  br i1 %245, label %573, label %246

246:                                              ; preds = %244, %246
  %247 = phi i8* [ %280, %246 ], [ %0, %244 ]
  %248 = phi i32 [ %282, %246 ], [ 0, %244 ]
  %249 = phi i8* [ %281, %246 ], [ %3, %244 ]
  %250 = getelementptr inbounds i8, i8* %247, i64 3
  %251 = load i8, i8* %250, align 1
  %252 = icmp eq i8 %251, 0
  %253 = select i1 %252, i8 -1, i8 %251
  %254 = uitofp i8 %253 to float
  %255 = getelementptr inbounds i8, i8* %247, i64 2
  %256 = load i8, i8* %255, align 1
  %257 = uitofp i8 %256 to float
  %258 = getelementptr inbounds i8, i8* %247, i64 1
  %259 = load i8, i8* %258, align 1
  %260 = uitofp i8 %259 to float
  %261 = load i8, i8* %247, align 1
  %262 = uitofp i8 %261 to float
  %263 = insertelement <4 x float> <float undef, float undef, float undef, float 0.000000e+00>, float %262, i32 0
  %264 = insertelement <4 x float> %263, float %260, i32 1
  %265 = insertelement <4 x float> %264, float %257, i32 2
  %266 = insertelement <4 x float> undef, float %254, i32 0
  %267 = fdiv <4 x float> <float 2.550000e+02, float undef, float undef, float undef>, %266
  %268 = shufflevector <4 x float> %267, <4 x float> undef, <4 x i32> zeroinitializer
  %269 = fmul <4 x float> %268, %265
  %270 = extractelement <4 x float> %269, i32 0
  %271 = fptoui float %270 to i8
  store i8 %271, i8* %249, align 1
  %272 = extractelement <4 x float> %269, i32 1
  %273 = fptoui float %272 to i8
  %274 = getelementptr inbounds i8, i8* %249, i64 1
  store i8 %273, i8* %274, align 1
  %275 = extractelement <4 x float> %269, i32 2
  %276 = fptoui float %275 to i8
  %277 = getelementptr inbounds i8, i8* %249, i64 2
  store i8 %276, i8* %277, align 1
  %278 = load i8, i8* %250, align 1
  %279 = getelementptr inbounds i8, i8* %249, i64 3
  store i8 %278, i8* %279, align 1
  %280 = getelementptr inbounds i8, i8* %247, i64 4
  %281 = getelementptr inbounds i8, i8* %249, i64 4
  %282 = add nuw i32 %248, 1
  %283 = icmp eq i32 %282, %2
  br i1 %283, label %284, label %246

284:                                              ; preds = %246, %294
  %285 = phi i8* [ %314, %294 ], [ %0, %246 ]
  %286 = phi i8* [ %315, %294 ], [ %3, %246 ]
  %287 = phi i32 [ %316, %294 ], [ 0, %246 ]
  %288 = getelementptr inbounds i8, i8* %285, i64 3
  %289 = load i8, i8* %288, align 1
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %294, label %291

291:                                              ; preds = %284
  %292 = uitofp i8 %289 to float
  %293 = fdiv float 2.550000e+02, %292
  br label %294

294:                                              ; preds = %291, %284
  %295 = phi float [ %293, %291 ], [ 1.000000e+00, %284 ]
  %296 = load i8, i8* %285, align 1
  %297 = uitofp i8 %296 to float
  %298 = fmul float %295, %297
  %299 = fptoui float %298 to i8
  %300 = getelementptr inbounds i8, i8* %285, i64 1
  %301 = load i8, i8* %300, align 1
  %302 = uitofp i8 %301 to float
  %303 = fmul float %295, %302
  %304 = fptoui float %303 to i8
  %305 = getelementptr inbounds i8, i8* %285, i64 2
  %306 = load i8, i8* %305, align 1
  %307 = uitofp i8 %306 to float
  %308 = fmul float %295, %307
  %309 = fptoui float %308 to i8
  store i8 %299, i8* %286, align 1
  %310 = getelementptr inbounds i8, i8* %286, i64 1
  store i8 %304, i8* %310, align 1
  %311 = getelementptr inbounds i8, i8* %286, i64 2
  store i8 %309, i8* %311, align 1
  %312 = load i8, i8* %288, align 1
  %313 = getelementptr inbounds i8, i8* %286, i64 3
  store i8 %312, i8* %313, align 1
  %314 = getelementptr inbounds i8, i8* %285, i64 4
  %315 = getelementptr inbounds i8, i8* %286, i64 4
  %316 = add nuw i32 %287, 1
  %317 = icmp eq i32 %316, %2
  br i1 %317, label %573, label %284

318:                                              ; preds = %4
  %319 = icmp eq i32 %2, 0
  br i1 %319, label %573, label %320

320:                                              ; preds = %318
  %321 = bitcast i8* %3 to i16*
  %322 = add i32 %2, -1
  %323 = zext i32 %322 to i64
  %324 = add nuw nsw i64 %323, 1
  %325 = icmp ult i64 %324, 8
  br i1 %325, label %373, label %326

326:                                              ; preds = %320
  %327 = add i32 %2, -1
  %328 = zext i32 %327 to i64
  %329 = shl nuw nsw i64 %328, 1
  %330 = add nuw nsw i64 %329, 2
  %331 = getelementptr i8, i8* %3, i64 %330
  %332 = shl nuw nsw i64 %328, 2
  %333 = add nuw nsw i64 %332, 4
  %334 = getelementptr i8, i8* %0, i64 %333
  %335 = icmp ugt i8* %334, %3
  %336 = icmp ugt i8* %331, %0
  %337 = and i1 %335, %336
  br i1 %337, label %373, label %338

338:                                              ; preds = %326
  %339 = and i64 %324, 8589934584
  %340 = trunc i64 %339 to i32
  %341 = shl nuw nsw i64 %339, 2
  %342 = getelementptr i8, i8* %0, i64 %341
  %343 = getelementptr i16, i16* %321, i64 %339
  br label %344

344:                                              ; preds = %344, %338
  %345 = phi i64 [ 0, %338 ], [ %369, %344 ]
  %346 = shl i64 %345, 2
  %347 = getelementptr i8, i8* %0, i64 %346
  %348 = getelementptr i16, i16* %321, i64 %345
  %349 = bitcast i8* %347 to <32 x i8>*
  %350 = load <32 x i8>, <32 x i8>* %349, align 1
  %351 = shufflevector <32 x i8> %350, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %352 = shufflevector <32 x i8> %350, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %353 = shufflevector <32 x i8> %350, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %354 = shufflevector <32 x i8> %350, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %355 = and <8 x i8> %351, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %356 = zext <8 x i8> %355 to <8 x i16>
  %357 = shl nuw <8 x i16> %356, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %358 = and <8 x i8> %352, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %359 = zext <8 x i8> %358 to <8 x i16>
  %360 = shl nuw nsw <8 x i16> %359, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %361 = or <8 x i16> %360, %357
  %362 = and <8 x i8> %353, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %363 = zext <8 x i8> %362 to <8 x i16>
  %364 = or <8 x i16> %361, %363
  %365 = lshr <8 x i8> %354, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %366 = zext <8 x i8> %365 to <8 x i16>
  %367 = or <8 x i16> %364, %366
  %368 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %368, align 2, !alias.scope !77, !noalias !80
  %369 = add i64 %345, 8
  %370 = icmp eq i64 %369, %339
  br i1 %370, label %371, label %344, !llvm.loop !82

371:                                              ; preds = %344
  %372 = icmp eq i64 %324, %339
  br i1 %372, label %573, label %373

373:                                              ; preds = %371, %326, %320
  %374 = phi i32 [ 0, %326 ], [ 0, %320 ], [ %340, %371 ]
  %375 = phi i8* [ %0, %326 ], [ %0, %320 ], [ %342, %371 ]
  %376 = phi i16* [ %321, %326 ], [ %321, %320 ], [ %343, %371 ]
  br label %377

377:                                              ; preds = %373, %377
  %378 = phi i32 [ %403, %377 ], [ %374, %373 ]
  %379 = phi i8* [ %401, %377 ], [ %375, %373 ]
  %380 = phi i16* [ %402, %377 ], [ %376, %373 ]
  %381 = load i8, i8* %379, align 1
  %382 = and i8 %381, -16
  %383 = zext i8 %382 to i16
  %384 = shl nuw i16 %383, 8
  %385 = getelementptr inbounds i8, i8* %379, i64 1
  %386 = load i8, i8* %385, align 1
  %387 = and i8 %386, -16
  %388 = zext i8 %387 to i16
  %389 = shl nuw nsw i16 %388, 4
  %390 = or i16 %389, %384
  %391 = getelementptr inbounds i8, i8* %379, i64 2
  %392 = load i8, i8* %391, align 1
  %393 = and i8 %392, -16
  %394 = zext i8 %393 to i16
  %395 = or i16 %390, %394
  %396 = getelementptr inbounds i8, i8* %379, i64 3
  %397 = load i8, i8* %396, align 1
  %398 = lshr i8 %397, 4
  %399 = zext i8 %398 to i16
  %400 = or i16 %395, %399
  store i16 %400, i16* %380, align 2
  %401 = getelementptr inbounds i8, i8* %379, i64 4
  %402 = getelementptr inbounds i16, i16* %380, i64 1
  %403 = add nuw i32 %378, 1
  %404 = icmp eq i32 %403, %2
  br i1 %404, label %573, label %377, !llvm.loop !83

405:                                              ; preds = %4
  %406 = icmp eq i32 %2, 0
  br i1 %406, label %573, label %407

407:                                              ; preds = %405
  %408 = bitcast i8* %3 to i16*
  %409 = add i32 %2, -1
  %410 = zext i32 %409 to i64
  %411 = add nuw nsw i64 %410, 1
  %412 = icmp ult i64 %411, 8
  br i1 %412, label %461, label %413

413:                                              ; preds = %407
  %414 = add i32 %2, -1
  %415 = zext i32 %414 to i64
  %416 = shl nuw nsw i64 %415, 1
  %417 = add nuw nsw i64 %416, 2
  %418 = getelementptr i8, i8* %3, i64 %417
  %419 = shl nuw nsw i64 %415, 2
  %420 = add nuw nsw i64 %419, 4
  %421 = getelementptr i8, i8* %0, i64 %420
  %422 = icmp ugt i8* %421, %3
  %423 = icmp ugt i8* %418, %0
  %424 = and i1 %422, %423
  br i1 %424, label %461, label %425

425:                                              ; preds = %413
  %426 = and i64 %411, 8589934584
  %427 = trunc i64 %426 to i32
  %428 = shl nuw nsw i64 %426, 2
  %429 = getelementptr i8, i8* %0, i64 %428
  %430 = getelementptr i16, i16* %408, i64 %426
  br label %431

431:                                              ; preds = %431, %425
  %432 = phi i64 [ 0, %425 ], [ %457, %431 ]
  %433 = shl i64 %432, 2
  %434 = getelementptr i8, i8* %0, i64 %433
  %435 = getelementptr i16, i16* %408, i64 %432
  %436 = bitcast i8* %434 to <32 x i8>*
  %437 = load <32 x i8>, <32 x i8>* %436, align 1
  %438 = shufflevector <32 x i8> %437, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %439 = shufflevector <32 x i8> %437, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %440 = shufflevector <32 x i8> %437, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %441 = shufflevector <32 x i8> %437, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %442 = and <8 x i8> %438, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %443 = zext <8 x i8> %442 to <8 x i16>
  %444 = shl nuw <8 x i16> %443, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %445 = and <8 x i8> %439, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %446 = zext <8 x i8> %445 to <8 x i16>
  %447 = shl nuw nsw <8 x i16> %446, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %448 = or <8 x i16> %447, %444
  %449 = lshr <8 x i8> %440, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %450 = and <8 x i8> %449, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %451 = zext <8 x i8> %450 to <8 x i16>
  %452 = or <8 x i16> %448, %451
  %453 = lshr <8 x i8> %441, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %454 = zext <8 x i8> %453 to <8 x i16>
  %455 = or <8 x i16> %452, %454
  %456 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %455, <8 x i16>* %456, align 2, !alias.scope !84, !noalias !87
  %457 = add i64 %432, 8
  %458 = icmp eq i64 %457, %426
  br i1 %458, label %459, label %431, !llvm.loop !89

459:                                              ; preds = %431
  %460 = icmp eq i64 %411, %426
  br i1 %460, label %573, label %461

461:                                              ; preds = %459, %413, %407
  %462 = phi i32 [ 0, %413 ], [ 0, %407 ], [ %427, %459 ]
  %463 = phi i8* [ %0, %413 ], [ %0, %407 ], [ %429, %459 ]
  %464 = phi i16* [ %408, %413 ], [ %408, %407 ], [ %430, %459 ]
  br label %465

465:                                              ; preds = %461, %465
  %466 = phi i32 [ %492, %465 ], [ %462, %461 ]
  %467 = phi i8* [ %490, %465 ], [ %463, %461 ]
  %468 = phi i16* [ %491, %465 ], [ %464, %461 ]
  %469 = load i8, i8* %467, align 1
  %470 = and i8 %469, -8
  %471 = zext i8 %470 to i16
  %472 = shl nuw i16 %471, 8
  %473 = getelementptr inbounds i8, i8* %467, i64 1
  %474 = load i8, i8* %473, align 1
  %475 = and i8 %474, -8
  %476 = zext i8 %475 to i16
  %477 = shl nuw nsw i16 %476, 3
  %478 = or i16 %477, %472
  %479 = getelementptr inbounds i8, i8* %467, i64 2
  %480 = load i8, i8* %479, align 1
  %481 = lshr i8 %480, 2
  %482 = and i8 %481, 62
  %483 = zext i8 %482 to i16
  %484 = or i16 %478, %483
  %485 = getelementptr inbounds i8, i8* %467, i64 3
  %486 = load i8, i8* %485, align 1
  %487 = lshr i8 %486, 7
  %488 = zext i8 %487 to i16
  %489 = or i16 %484, %488
  store i16 %489, i16* %468, align 2
  %490 = getelementptr inbounds i8, i8* %467, i64 4
  %491 = getelementptr inbounds i16, i16* %468, i64 1
  %492 = add nuw i32 %466, 1
  %493 = icmp eq i32 %492, %2
  br i1 %493, label %573, label %465, !llvm.loop !90

494:                                              ; preds = %4
  %495 = icmp eq i32 %2, 0
  br i1 %495, label %573, label %496

496:                                              ; preds = %494
  %497 = bitcast i8* %3 to i16*
  %498 = add i32 %2, -1
  %499 = zext i32 %498 to i64
  %500 = add nuw nsw i64 %499, 1
  %501 = icmp ult i64 %500, 9
  br i1 %501, label %546, label %502

502:                                              ; preds = %496
  %503 = add i32 %2, -1
  %504 = zext i32 %503 to i64
  %505 = shl nuw nsw i64 %504, 1
  %506 = add nuw nsw i64 %505, 2
  %507 = getelementptr i8, i8* %3, i64 %506
  %508 = shl nuw nsw i64 %504, 2
  %509 = or i64 %508, 3
  %510 = getelementptr i8, i8* %0, i64 %509
  %511 = icmp ugt i8* %510, %3
  %512 = icmp ugt i8* %507, %0
  %513 = and i1 %511, %512
  br i1 %513, label %546, label %514

514:                                              ; preds = %502
  %515 = and i64 %500, 7
  %516 = icmp eq i64 %515, 0
  %517 = select i1 %516, i64 8, i64 %515
  %518 = sub nsw i64 %500, %517
  %519 = trunc i64 %518 to i32
  %520 = shl nsw i64 %518, 2
  %521 = getelementptr i8, i8* %0, i64 %520
  %522 = getelementptr i16, i16* %497, i64 %518
  br label %523

523:                                              ; preds = %523, %514
  %524 = phi i64 [ 0, %514 ], [ %544, %523 ]
  %525 = shl i64 %524, 2
  %526 = getelementptr i8, i8* %0, i64 %525
  %527 = getelementptr i16, i16* %497, i64 %524
  %528 = bitcast i8* %526 to <32 x i8>*
  %529 = load <32 x i8>, <32 x i8>* %528, align 1
  %530 = shufflevector <32 x i8> %529, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %531 = shufflevector <32 x i8> %529, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %532 = shufflevector <32 x i8> %529, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %533 = and <8 x i8> %530, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %534 = zext <8 x i8> %533 to <8 x i16>
  %535 = shl nuw <8 x i16> %534, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %536 = and <8 x i8> %531, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %537 = zext <8 x i8> %536 to <8 x i16>
  %538 = shl nuw nsw <8 x i16> %537, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %539 = or <8 x i16> %538, %535
  %540 = lshr <8 x i8> %532, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %541 = zext <8 x i8> %540 to <8 x i16>
  %542 = or <8 x i16> %539, %541
  %543 = bitcast i16* %527 to <8 x i16>*
  store <8 x i16> %542, <8 x i16>* %543, align 2, !alias.scope !91, !noalias !94
  %544 = add i64 %524, 8
  %545 = icmp eq i64 %544, %518
  br i1 %545, label %546, label %523, !llvm.loop !96

546:                                              ; preds = %523, %502, %496
  %547 = phi i32 [ 0, %502 ], [ 0, %496 ], [ %519, %523 ]
  %548 = phi i8* [ %0, %502 ], [ %0, %496 ], [ %521, %523 ]
  %549 = phi i16* [ %497, %502 ], [ %497, %496 ], [ %522, %523 ]
  br label %550

550:                                              ; preds = %546, %550
  %551 = phi i32 [ %571, %550 ], [ %547, %546 ]
  %552 = phi i8* [ %569, %550 ], [ %548, %546 ]
  %553 = phi i16* [ %570, %550 ], [ %549, %546 ]
  %554 = load i8, i8* %552, align 1
  %555 = and i8 %554, -8
  %556 = zext i8 %555 to i16
  %557 = shl nuw i16 %556, 8
  %558 = getelementptr inbounds i8, i8* %552, i64 1
  %559 = load i8, i8* %558, align 1
  %560 = and i8 %559, -4
  %561 = zext i8 %560 to i16
  %562 = shl nuw nsw i16 %561, 3
  %563 = or i16 %562, %557
  %564 = getelementptr inbounds i8, i8* %552, i64 2
  %565 = load i8, i8* %564, align 1
  %566 = lshr i8 %565, 3
  %567 = zext i8 %566 to i16
  %568 = or i16 %563, %567
  store i16 %568, i16* %553, align 2
  %569 = getelementptr inbounds i8, i8* %552, i64 4
  %570 = getelementptr inbounds i16, i16* %553, i64 1
  %571 = add nuw i32 %551, 1
  %572 = icmp eq i32 %571, %2
  br i1 %572, label %573, label %550, !llvm.loop !97

573:                                              ; preds = %550, %465, %377, %294, %234, %95, %459, %371, %218, %494, %405, %318, %244, %170, %80, %4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

declare i32 @_ZNK7SkImage9alphaTypeEv(%class.SkImage*) local_unnamed_addr #3

declare %"class.blink::ImageDecoder"* @_ZN5blink12ImageDecoder6CreateE13scoped_refptrINS_13SegmentReaderEEbNS0_11AlphaOptionENS0_26HighBitDepthDecodingOptionERKNS_13ColorBehaviorERK7SkISizeNS0_15AnimationOptionE(%"class.blink::SegmentReader"*, i1 zeroext, i32, i32, %"class.blink::ColorBehavior"* dereferenceable(4), %struct.SkISize* dereferenceable(8), i32) local_unnamed_addr #3

declare %"class.blink::SegmentReader"* @_ZN5blink13SegmentReader22CreateFromSharedBufferE13scoped_refptrIN3WTF12SharedBufferEE(%"class.WTF::SharedBuffer"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #9

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE0EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"*, i32, i32) unnamed_addr #7 align 2 {
  switch i32 %1, label %11653 [
    i32 34, label %4
    i32 40, label %598
    i32 41, label %1132
    i32 46, label %1874
    i32 47, label %2067
    i32 48, label %2256
    i32 42, label %2511
    i32 43, label %3003
    i32 44, label %3500
    i32 9, label %4048
    i32 23, label %4481
    i32 15, label %5061
    i32 16, label %5609
    i32 0, label %6185
    i32 21, label %6535
    i32 22, label %7141
    i32 6, label %7741
    i32 7, label %8332
    i32 1, label %8797
    i32 2, label %8959
    i32 3, label %9047
    i32 4, label %9212
    i32 5, label %9300
    i32 8, label %9395
    i32 26, label %10062
    i32 32, label %10488
    i32 33, label %10989
  ]

4:                                                ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %5
    i32 1, label %192
    i32 2, label %380
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %15 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %17, %7
  %19 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %18, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %13, i64 %22
  %24 = icmp slt i32 %10, 0
  %25 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, 1
  %28 = and i1 %24, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %5
  %30 = add nsw i32 %26, -1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %8, %31
  %36 = mul i64 %35, %34
  %37 = sub i64 0, %36
  %38 = getelementptr inbounds i8, i8* %23, i64 %37
  br label %41

39:                                               ; preds = %5
  %40 = icmp sgt i32 %26, 0
  br i1 %40, label %41, label %190

41:                                               ; preds = %39, %29
  %42 = phi i8* [ %38, %29 ], [ %23, %39 ]
  %43 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %46

46:                                               ; preds = %58, %41
  %47 = phi i32 [ %26, %41 ], [ %59, %58 ]
  %48 = phi %"class.blink::IntRect"* [ %15, %41 ], [ %60, %58 ]
  %49 = phi %"class.blink::IntRect"* [ %15, %41 ], [ %61, %58 ]
  %50 = phi i32 [ 0, %41 ], [ %70, %58 ]
  %51 = phi i8* [ %44, %41 ], [ %63, %58 ]
  %52 = phi i8* [ %42, %41 ], [ %69, %58 ]
  %53 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %49, i64 0, i32 1, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %72, label %58

56:                                               ; preds = %181
  %57 = load i32, i32* %25, align 8
  br label %58

58:                                               ; preds = %56, %46
  %59 = phi i32 [ %47, %46 ], [ %57, %56 ]
  %60 = phi %"class.blink::IntRect"* [ %48, %46 ], [ %182, %56 ]
  %61 = phi %"class.blink::IntRect"* [ %49, %46 ], [ %182, %56 ]
  %62 = phi i8* [ %52, %46 ], [ %183, %56 ]
  %63 = phi i8* [ %51, %46 ], [ %184, %56 ]
  %64 = phi i32 [ %54, %46 ], [ %187, %56 ]
  %65 = load i32, i32* %45, align 4
  %66 = sub nsw i32 %65, %64
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, %8
  %69 = getelementptr inbounds i8, i8* %62, i64 %68
  %70 = add nuw nsw i32 %50, 1
  %71 = icmp slt i32 %70, %59
  br i1 %71, label %46, label %190

72:                                               ; preds = %46, %181
  %73 = phi i64 [ %189, %181 ], [ 0, %46 ]
  %74 = phi %"class.blink::IntRect"* [ %182, %181 ], [ %48, %46 ]
  %75 = phi %"class.blink::IntRect"* [ %182, %181 ], [ %49, %46 ]
  %76 = phi i32 [ %185, %181 ], [ 0, %46 ]
  %77 = phi i8* [ %184, %181 ], [ %51, %46 ]
  %78 = phi i8* [ %183, %181 ], [ %52, %46 ]
  %79 = mul i64 %73, %11
  %80 = getelementptr i8, i8* %51, i64 %79
  %81 = add i64 %79, 1
  %82 = getelementptr i8, i8* %51, i64 %81
  %83 = mul i64 %73, %8
  %84 = getelementptr i8, i8* %52, i64 %83
  %85 = add i64 %83, 1
  %86 = getelementptr i8, i8* %52, i64 %85
  %87 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %75, i64 0, i32 1, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %181, label %90

90:                                               ; preds = %72
  %91 = add i32 %88, -1
  %92 = zext i32 %91 to i64
  %93 = add nuw nsw i64 %92, 1
  %94 = icmp ult i64 %93, 17
  br i1 %94, label %124, label %95

95:                                               ; preds = %90
  %96 = add i32 %88, -1
  %97 = zext i32 %96 to i64
  %98 = getelementptr i8, i8* %82, i64 %97
  %99 = shl nuw nsw i64 %97, 2
  %100 = getelementptr i8, i8* %86, i64 %99
  %101 = icmp ult i8* %80, %100
  %102 = icmp ult i8* %84, %98
  %103 = and i1 %101, %102
  br i1 %103, label %124, label %104

104:                                              ; preds = %95
  %105 = and i64 %93, 15
  %106 = icmp eq i64 %105, 0
  %107 = select i1 %106, i64 16, i64 %105
  %108 = sub nsw i64 %93, %107
  %109 = trunc i64 %108 to i32
  %110 = shl nsw i64 %108, 2
  %111 = getelementptr i8, i8* %78, i64 %110
  %112 = getelementptr i8, i8* %77, i64 %108
  br label %113

113:                                              ; preds = %113, %104
  %114 = phi i64 [ 0, %104 ], [ %122, %113 ]
  %115 = shl i64 %114, 2
  %116 = getelementptr i8, i8* %78, i64 %115
  %117 = getelementptr i8, i8* %77, i64 %114
  %118 = bitcast i8* %116 to <64 x i8>*
  %119 = load <64 x i8>, <64 x i8>* %118, align 1
  %120 = shufflevector <64 x i8> %119, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %121 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %121, align 1, !alias.scope !98, !noalias !101
  %122 = add i64 %114, 16
  %123 = icmp eq i64 %122, %108
  br i1 %123, label %124, label %113, !llvm.loop !103

124:                                              ; preds = %113, %95, %90
  %125 = phi i32 [ 0, %95 ], [ 0, %90 ], [ %109, %113 ]
  %126 = phi i8* [ %78, %95 ], [ %78, %90 ], [ %111, %113 ]
  %127 = phi i8* [ %77, %95 ], [ %77, %90 ], [ %112, %113 ]
  %128 = sub i32 %88, %125
  %129 = xor i32 %125, -1
  %130 = add i32 %88, %129
  %131 = and i32 %128, 7
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %144, label %133

133:                                              ; preds = %124, %133
  %134 = phi i32 [ %141, %133 ], [ %125, %124 ]
  %135 = phi i8* [ %139, %133 ], [ %126, %124 ]
  %136 = phi i8* [ %140, %133 ], [ %127, %124 ]
  %137 = phi i32 [ %142, %133 ], [ %131, %124 ]
  %138 = load i8, i8* %135, align 1
  store i8 %138, i8* %136, align 1
  %139 = getelementptr inbounds i8, i8* %135, i64 4
  %140 = getelementptr inbounds i8, i8* %136, i64 1
  %141 = add nuw i32 %134, 1
  %142 = add i32 %137, -1
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %133, !llvm.loop !104

144:                                              ; preds = %133, %124
  %145 = phi i32 [ %125, %124 ], [ %141, %133 ]
  %146 = phi i8* [ %126, %124 ], [ %139, %133 ]
  %147 = phi i8* [ %127, %124 ], [ %140, %133 ]
  %148 = icmp ult i32 %130, 7
  br i1 %148, label %179, label %149

149:                                              ; preds = %144, %149
  %150 = phi i32 [ %177, %149 ], [ %145, %144 ]
  %151 = phi i8* [ %175, %149 ], [ %146, %144 ]
  %152 = phi i8* [ %176, %149 ], [ %147, %144 ]
  %153 = load i8, i8* %151, align 1
  store i8 %153, i8* %152, align 1
  %154 = getelementptr inbounds i8, i8* %151, i64 4
  %155 = getelementptr inbounds i8, i8* %152, i64 1
  %156 = load i8, i8* %154, align 1
  store i8 %156, i8* %155, align 1
  %157 = getelementptr inbounds i8, i8* %151, i64 8
  %158 = getelementptr inbounds i8, i8* %152, i64 2
  %159 = load i8, i8* %157, align 1
  store i8 %159, i8* %158, align 1
  %160 = getelementptr inbounds i8, i8* %151, i64 12
  %161 = getelementptr inbounds i8, i8* %152, i64 3
  %162 = load i8, i8* %160, align 1
  store i8 %162, i8* %161, align 1
  %163 = getelementptr inbounds i8, i8* %151, i64 16
  %164 = getelementptr inbounds i8, i8* %152, i64 4
  %165 = load i8, i8* %163, align 1
  store i8 %165, i8* %164, align 1
  %166 = getelementptr inbounds i8, i8* %151, i64 20
  %167 = getelementptr inbounds i8, i8* %152, i64 5
  %168 = load i8, i8* %166, align 1
  store i8 %168, i8* %167, align 1
  %169 = getelementptr inbounds i8, i8* %151, i64 24
  %170 = getelementptr inbounds i8, i8* %152, i64 6
  %171 = load i8, i8* %169, align 1
  store i8 %171, i8* %170, align 1
  %172 = getelementptr inbounds i8, i8* %151, i64 28
  %173 = getelementptr inbounds i8, i8* %152, i64 7
  %174 = load i8, i8* %172, align 1
  store i8 %174, i8* %173, align 1
  %175 = getelementptr inbounds i8, i8* %151, i64 32
  %176 = getelementptr inbounds i8, i8* %152, i64 8
  %177 = add nuw i32 %150, 8
  %178 = icmp eq i32 %177, %88
  br i1 %178, label %179, label %149, !llvm.loop !106

179:                                              ; preds = %149, %144
  %180 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14, align 8
  br label %181

181:                                              ; preds = %179, %72
  %182 = phi %"class.blink::IntRect"* [ %180, %179 ], [ %74, %72 ]
  %183 = getelementptr inbounds i8, i8* %78, i64 %8
  %184 = getelementptr inbounds i8, i8* %77, i64 %11
  %185 = add nuw nsw i32 %76, 1
  %186 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %182, i64 0, i32 1, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = icmp slt i32 %185, %187
  %189 = add i64 %73, 1
  br i1 %188, label %72, label %56

190:                                              ; preds = %58, %39
  %191 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %191, align 4
  br label %11653

192:                                              ; preds = %4
  %193 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %194 = load i32, i32* %193, align 8
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %197 = load i32, i32* %196, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %200 = load i8*, i8** %199, align 8
  %201 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %202 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %201, align 8
  %203 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %202, i64 0, i32 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = mul nsw i32 %204, %194
  %206 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %207 = load i32, i32* %206, align 4
  %208 = add nsw i32 %205, %207
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds i8, i8* %200, i64 %209
  %211 = icmp slt i32 %197, 0
  %212 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %213 = load i32, i32* %212, align 8
  %214 = icmp sgt i32 %213, 1
  %215 = and i1 %211, %214
  br i1 %215, label %216, label %226

216:                                              ; preds = %192
  %217 = add nsw i32 %213, -1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = sext i32 %220 to i64
  %222 = mul nsw i64 %195, %218
  %223 = mul i64 %222, %221
  %224 = sub i64 0, %223
  %225 = getelementptr inbounds i8, i8* %210, i64 %224
  br label %228

226:                                              ; preds = %192
  %227 = icmp sgt i32 %213, 0
  br i1 %227, label %228, label %378

228:                                              ; preds = %226, %216
  %229 = phi i8* [ %225, %216 ], [ %210, %226 ]
  %230 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %231 = load i8*, i8** %230, align 8
  %232 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %233

233:                                              ; preds = %245, %228
  %234 = phi i32 [ %213, %228 ], [ %246, %245 ]
  %235 = phi %"class.blink::IntRect"* [ %202, %228 ], [ %247, %245 ]
  %236 = phi %"class.blink::IntRect"* [ %202, %228 ], [ %248, %245 ]
  %237 = phi i32 [ 0, %228 ], [ %257, %245 ]
  %238 = phi i8* [ %231, %228 ], [ %250, %245 ]
  %239 = phi i8* [ %229, %228 ], [ %256, %245 ]
  %240 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %236, i64 0, i32 1, i32 1
  %241 = load i32, i32* %240, align 4
  %242 = icmp sgt i32 %241, 0
  br i1 %242, label %259, label %245

243:                                              ; preds = %369
  %244 = load i32, i32* %212, align 8
  br label %245

245:                                              ; preds = %243, %233
  %246 = phi i32 [ %234, %233 ], [ %244, %243 ]
  %247 = phi %"class.blink::IntRect"* [ %235, %233 ], [ %370, %243 ]
  %248 = phi %"class.blink::IntRect"* [ %236, %233 ], [ %370, %243 ]
  %249 = phi i8* [ %239, %233 ], [ %371, %243 ]
  %250 = phi i8* [ %238, %233 ], [ %372, %243 ]
  %251 = phi i32 [ %241, %233 ], [ %375, %243 ]
  %252 = load i32, i32* %232, align 4
  %253 = sub nsw i32 %252, %251
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, %195
  %256 = getelementptr inbounds i8, i8* %249, i64 %255
  %257 = add nuw nsw i32 %237, 1
  %258 = icmp slt i32 %257, %246
  br i1 %258, label %233, label %378

259:                                              ; preds = %233, %369
  %260 = phi i64 [ %377, %369 ], [ 0, %233 ]
  %261 = phi %"class.blink::IntRect"* [ %370, %369 ], [ %235, %233 ]
  %262 = phi %"class.blink::IntRect"* [ %370, %369 ], [ %236, %233 ]
  %263 = phi i32 [ %373, %369 ], [ 0, %233 ]
  %264 = phi i8* [ %372, %369 ], [ %238, %233 ]
  %265 = phi i8* [ %371, %369 ], [ %239, %233 ]
  %266 = mul i64 %260, %198
  %267 = getelementptr i8, i8* %238, i64 %266
  %268 = add i64 %266, 1
  %269 = getelementptr i8, i8* %238, i64 %268
  %270 = mul i64 %260, %195
  %271 = getelementptr i8, i8* %239, i64 %270
  %272 = add i64 %270, 4
  %273 = getelementptr i8, i8* %239, i64 %272
  %274 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %262, i64 0, i32 1, i32 0
  %275 = load i32, i32* %274, align 4
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %369, label %277

277:                                              ; preds = %259
  %278 = add i32 %275, -1
  %279 = zext i32 %278 to i64
  %280 = add nuw nsw i64 %279, 1
  %281 = icmp ult i64 %280, 16
  br i1 %281, label %316, label %282

282:                                              ; preds = %277
  %283 = add i32 %275, -1
  %284 = zext i32 %283 to i64
  %285 = getelementptr i8, i8* %269, i64 %284
  %286 = shl nuw nsw i64 %284, 2
  %287 = getelementptr i8, i8* %273, i64 %286
  %288 = icmp ult i8* %267, %287
  %289 = icmp ult i8* %271, %285
  %290 = and i1 %288, %289
  br i1 %290, label %316, label %291

291:                                              ; preds = %282
  %292 = and i64 %280, 8589934576
  %293 = shl nuw nsw i64 %292, 2
  %294 = getelementptr i8, i8* %265, i64 %293
  %295 = getelementptr i8, i8* %264, i64 %292
  %296 = trunc i64 %292 to i32
  br label %297

297:                                              ; preds = %297, %291
  %298 = phi i64 [ 0, %291 ], [ %312, %297 ]
  %299 = shl i64 %298, 2
  %300 = getelementptr i8, i8* %264, i64 %298
  %301 = getelementptr inbounds i8, i8* %265, i64 %299
  %302 = bitcast i8* %301 to <64 x i8>*
  %303 = load <64 x i8>, <64 x i8>* %302, align 1
  %304 = shufflevector <64 x i8> %303, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %305 = shufflevector <64 x i8> %303, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %306 = uitofp <16 x i8> %305 to <16 x float>
  %307 = fdiv <16 x float> %306, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %308 = uitofp <16 x i8> %304 to <16 x float>
  %309 = fmul <16 x float> %307, %308
  %310 = fptoui <16 x float> %309 to <16 x i8>
  %311 = bitcast i8* %300 to <16 x i8>*
  store <16 x i8> %310, <16 x i8>* %311, align 1, !alias.scope !107, !noalias !110
  %312 = add i64 %298, 16
  %313 = icmp eq i64 %312, %292
  br i1 %313, label %314, label %297, !llvm.loop !112

314:                                              ; preds = %297
  %315 = icmp eq i64 %280, %292
  br i1 %315, label %367, label %316

316:                                              ; preds = %314, %282, %277
  %317 = phi i8* [ %265, %282 ], [ %265, %277 ], [ %294, %314 ]
  %318 = phi i8* [ %264, %282 ], [ %264, %277 ], [ %295, %314 ]
  %319 = phi i32 [ 0, %282 ], [ 0, %277 ], [ %296, %314 ]
  %320 = sub i32 %275, %319
  %321 = and i32 %320, 1
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %335, label %323

323:                                              ; preds = %316
  %324 = getelementptr inbounds i8, i8* %317, i64 3
  %325 = load i8, i8* %324, align 1
  %326 = uitofp i8 %325 to float
  %327 = fdiv float %326, 2.550000e+02
  %328 = load i8, i8* %317, align 1
  %329 = uitofp i8 %328 to float
  %330 = fmul float %327, %329
  %331 = fptoui float %330 to i8
  store i8 %331, i8* %318, align 1
  %332 = getelementptr inbounds i8, i8* %317, i64 4
  %333 = getelementptr inbounds i8, i8* %318, i64 1
  %334 = add nuw i32 %319, 1
  br label %335

335:                                              ; preds = %323, %316
  %336 = phi i8* [ %332, %323 ], [ %317, %316 ]
  %337 = phi i8* [ %333, %323 ], [ %318, %316 ]
  %338 = phi i32 [ %334, %323 ], [ %319, %316 ]
  %339 = add i32 %319, 1
  %340 = icmp eq i32 %275, %339
  br i1 %340, label %367, label %341

341:                                              ; preds = %335, %341
  %342 = phi i8* [ %363, %341 ], [ %336, %335 ]
  %343 = phi i8* [ %364, %341 ], [ %337, %335 ]
  %344 = phi i32 [ %365, %341 ], [ %338, %335 ]
  %345 = getelementptr inbounds i8, i8* %342, i64 3
  %346 = load i8, i8* %345, align 1
  %347 = uitofp i8 %346 to float
  %348 = fdiv float %347, 2.550000e+02
  %349 = load i8, i8* %342, align 1
  %350 = uitofp i8 %349 to float
  %351 = fmul float %348, %350
  %352 = fptoui float %351 to i8
  store i8 %352, i8* %343, align 1
  %353 = getelementptr inbounds i8, i8* %342, i64 4
  %354 = getelementptr inbounds i8, i8* %343, i64 1
  %355 = getelementptr inbounds i8, i8* %342, i64 7
  %356 = load i8, i8* %355, align 1
  %357 = uitofp i8 %356 to float
  %358 = fdiv float %357, 2.550000e+02
  %359 = load i8, i8* %353, align 1
  %360 = uitofp i8 %359 to float
  %361 = fmul float %358, %360
  %362 = fptoui float %361 to i8
  store i8 %362, i8* %354, align 1
  %363 = getelementptr inbounds i8, i8* %342, i64 8
  %364 = getelementptr inbounds i8, i8* %343, i64 2
  %365 = add nuw i32 %344, 2
  %366 = icmp eq i32 %365, %275
  br i1 %366, label %367, label %341, !llvm.loop !113

367:                                              ; preds = %335, %341, %314
  %368 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %201, align 8
  br label %369

369:                                              ; preds = %367, %259
  %370 = phi %"class.blink::IntRect"* [ %368, %367 ], [ %261, %259 ]
  %371 = getelementptr inbounds i8, i8* %265, i64 %195
  %372 = getelementptr inbounds i8, i8* %264, i64 %198
  %373 = add nuw nsw i32 %263, 1
  %374 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %370, i64 0, i32 1, i32 1
  %375 = load i32, i32* %374, align 4
  %376 = icmp slt i32 %373, %375
  %377 = add i64 %260, 1
  br i1 %376, label %259, label %243

378:                                              ; preds = %245, %226
  %379 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %379, align 4
  br label %11653

380:                                              ; preds = %4
  %381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %382 = load i32, i32* %381, align 8
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %385 = load i32, i32* %384, align 8
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %388 = load i8*, i8** %387, align 8
  %389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %390 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %389, align 8
  %391 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %390, i64 0, i32 0, i32 1
  %392 = load i32, i32* %391, align 4
  %393 = mul nsw i32 %392, %382
  %394 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %395 = load i32, i32* %394, align 4
  %396 = add nsw i32 %393, %395
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %388, i64 %397
  %399 = icmp slt i32 %385, 0
  %400 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %401 = load i32, i32* %400, align 8
  %402 = icmp sgt i32 %401, 1
  %403 = and i1 %399, %402
  br i1 %403, label %404, label %414

404:                                              ; preds = %380
  %405 = add nsw i32 %401, -1
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %408 = load i32, i32* %407, align 4
  %409 = sext i32 %408 to i64
  %410 = mul nsw i64 %383, %406
  %411 = mul i64 %410, %409
  %412 = sub i64 0, %411
  %413 = getelementptr inbounds i8, i8* %398, i64 %412
  br label %416

414:                                              ; preds = %380
  %415 = icmp sgt i32 %401, 0
  br i1 %415, label %416, label %596

416:                                              ; preds = %414, %404
  %417 = phi i8* [ %413, %404 ], [ %398, %414 ]
  %418 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %419 = load i8*, i8** %418, align 8
  %420 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %421

421:                                              ; preds = %432, %416
  %422 = phi i32 [ %401, %416 ], [ %433, %432 ]
  %423 = phi %"class.blink::IntRect"* [ %390, %416 ], [ %434, %432 ]
  %424 = phi i32 [ 0, %416 ], [ %443, %432 ]
  %425 = phi i8* [ %419, %416 ], [ %436, %432 ]
  %426 = phi i8* [ %417, %416 ], [ %442, %432 ]
  %427 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %423, i64 0, i32 1, i32 1
  %428 = load i32, i32* %427, align 4
  %429 = icmp sgt i32 %428, 0
  br i1 %429, label %445, label %432

430:                                              ; preds = %588
  %431 = load i32, i32* %400, align 8
  br label %432

432:                                              ; preds = %430, %421
  %433 = phi i32 [ %422, %421 ], [ %431, %430 ]
  %434 = phi %"class.blink::IntRect"* [ %423, %421 ], [ %592, %430 ]
  %435 = phi i8* [ %426, %421 ], [ %589, %430 ]
  %436 = phi i8* [ %425, %421 ], [ %590, %430 ]
  %437 = phi i32 [ %428, %421 ], [ %594, %430 ]
  %438 = load i32, i32* %420, align 4
  %439 = sub nsw i32 %438, %437
  %440 = sext i32 %439 to i64
  %441 = mul nsw i64 %440, %383
  %442 = getelementptr inbounds i8, i8* %435, i64 %441
  %443 = add nuw nsw i32 %424, 1
  %444 = icmp slt i32 %443, %433
  br i1 %444, label %421, label %596

445:                                              ; preds = %421, %588
  %446 = phi %"class.blink::IntRect"* [ %592, %588 ], [ %423, %421 ]
  %447 = phi i32 [ %591, %588 ], [ 0, %421 ]
  %448 = phi i8* [ %590, %588 ], [ %425, %421 ]
  %449 = phi i8* [ %589, %588 ], [ %426, %421 ]
  %450 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %446, i64 0, i32 1, i32 0
  %451 = load i32, i32* %450, align 4
  %452 = and i32 %451, -4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %514, label %454

454:                                              ; preds = %445, %454
  %455 = phi i8* [ %510, %454 ], [ %449, %445 ]
  %456 = phi i8* [ %511, %454 ], [ %448, %445 ]
  %457 = phi i32 [ %512, %454 ], [ 0, %445 ]
  %458 = getelementptr inbounds i8, i8* %455, i64 15
  %459 = load i8, i8* %458, align 1
  %460 = icmp eq i8 %459, 0
  %461 = select i1 %460, i8 -1, i8 %459
  %462 = uitofp i8 %461 to float
  %463 = getelementptr inbounds i8, i8* %455, i64 11
  %464 = load i8, i8* %463, align 1
  %465 = icmp eq i8 %464, 0
  %466 = select i1 %465, i8 -1, i8 %464
  %467 = uitofp i8 %466 to float
  %468 = getelementptr inbounds i8, i8* %455, i64 7
  %469 = load i8, i8* %468, align 1
  %470 = icmp eq i8 %469, 0
  %471 = select i1 %470, i8 -1, i8 %469
  %472 = uitofp i8 %471 to float
  %473 = getelementptr inbounds i8, i8* %455, i64 3
  %474 = load i8, i8* %473, align 1
  %475 = icmp eq i8 %474, 0
  %476 = select i1 %475, i8 -1, i8 %474
  %477 = uitofp i8 %476 to float
  %478 = insertelement <4 x float> undef, float %477, i32 0
  %479 = insertelement <4 x float> %478, float %472, i32 1
  %480 = insertelement <4 x float> %479, float %467, i32 2
  %481 = insertelement <4 x float> %480, float %462, i32 3
  %482 = getelementptr inbounds i8, i8* %455, i64 12
  %483 = load i8, i8* %482, align 1
  %484 = uitofp i8 %483 to float
  %485 = getelementptr inbounds i8, i8* %455, i64 8
  %486 = load i8, i8* %485, align 1
  %487 = uitofp i8 %486 to float
  %488 = getelementptr inbounds i8, i8* %455, i64 4
  %489 = load i8, i8* %488, align 1
  %490 = uitofp i8 %489 to float
  %491 = load i8, i8* %455, align 1
  %492 = uitofp i8 %491 to float
  %493 = insertelement <4 x float> undef, float %492, i32 0
  %494 = insertelement <4 x float> %493, float %490, i32 1
  %495 = insertelement <4 x float> %494, float %487, i32 2
  %496 = insertelement <4 x float> %495, float %484, i32 3
  %497 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %481
  %498 = fmul <4 x float> %497, %496
  %499 = extractelement <4 x float> %498, i32 0
  %500 = fptoui float %499 to i8
  store i8 %500, i8* %456, align 1
  %501 = extractelement <4 x float> %498, i32 1
  %502 = fptoui float %501 to i8
  %503 = getelementptr inbounds i8, i8* %456, i64 1
  store i8 %502, i8* %503, align 1
  %504 = extractelement <4 x float> %498, i32 2
  %505 = fptoui float %504 to i8
  %506 = getelementptr inbounds i8, i8* %456, i64 2
  store i8 %505, i8* %506, align 1
  %507 = extractelement <4 x float> %498, i32 3
  %508 = fptoui float %507 to i8
  %509 = getelementptr inbounds i8, i8* %456, i64 3
  store i8 %508, i8* %509, align 1
  %510 = getelementptr inbounds i8, i8* %455, i64 16
  %511 = getelementptr inbounds i8, i8* %456, i64 4
  %512 = add nuw i32 %457, 4
  %513 = icmp ult i32 %512, %452
  br i1 %513, label %454, label %514

514:                                              ; preds = %454, %445
  %515 = phi i8* [ %449, %445 ], [ %510, %454 ]
  %516 = phi i8* [ %448, %445 ], [ %511, %454 ]
  %517 = sub i32 %451, %452
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %588, label %519

519:                                              ; preds = %514
  %520 = xor i32 %452, -1
  %521 = add i32 %451, %520
  %522 = zext i32 %521 to i64
  %523 = add nuw nsw i64 %522, 1
  %524 = icmp ult i64 %523, 16
  br i1 %524, label %564, label %525

525:                                              ; preds = %519
  %526 = getelementptr i8, i8* %516, i64 1
  %527 = xor i32 %452, -1
  %528 = add i32 %451, %527
  %529 = zext i32 %528 to i64
  %530 = getelementptr i8, i8* %526, i64 %529
  %531 = getelementptr i8, i8* %515, i64 4
  %532 = shl nuw nsw i64 %529, 2
  %533 = getelementptr i8, i8* %531, i64 %532
  %534 = icmp ult i8* %516, %533
  %535 = icmp ult i8* %515, %530
  %536 = and i1 %534, %535
  br i1 %536, label %564, label %537

537:                                              ; preds = %525
  %538 = and i64 %523, 8589934576
  %539 = trunc i64 %538 to i32
  %540 = getelementptr i8, i8* %516, i64 %538
  %541 = shl nuw nsw i64 %538, 2
  %542 = getelementptr i8, i8* %515, i64 %541
  br label %543

543:                                              ; preds = %543, %537
  %544 = phi i64 [ 0, %537 ], [ %560, %543 ]
  %545 = getelementptr i8, i8* %516, i64 %544
  %546 = shl i64 %544, 2
  %547 = getelementptr inbounds i8, i8* %515, i64 %546
  %548 = bitcast i8* %547 to <64 x i8>*
  %549 = load <64 x i8>, <64 x i8>* %548, align 1
  %550 = shufflevector <64 x i8> %549, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %551 = shufflevector <64 x i8> %549, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %552 = icmp eq <16 x i8> %551, zeroinitializer
  %553 = uitofp <16 x i8> %551 to <16 x float>
  %554 = fdiv <16 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %553
  %555 = select <16 x i1> %552, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %554
  %556 = uitofp <16 x i8> %550 to <16 x float>
  %557 = fmul <16 x float> %555, %556
  %558 = fptoui <16 x float> %557 to <16 x i8>
  %559 = bitcast i8* %545 to <16 x i8>*
  store <16 x i8> %558, <16 x i8>* %559, align 1, !alias.scope !114, !noalias !117
  %560 = add i64 %544, 16
  %561 = icmp eq i64 %560, %538
  br i1 %561, label %562, label %543, !llvm.loop !119

562:                                              ; preds = %543
  %563 = icmp eq i64 %523, %538
  br i1 %563, label %588, label %564

564:                                              ; preds = %562, %525, %519
  %565 = phi i32 [ 0, %525 ], [ 0, %519 ], [ %539, %562 ]
  %566 = phi i8* [ %516, %525 ], [ %516, %519 ], [ %540, %562 ]
  %567 = phi i8* [ %515, %525 ], [ %515, %519 ], [ %542, %562 ]
  br label %568

568:                                              ; preds = %564, %578
  %569 = phi i32 [ %586, %578 ], [ %565, %564 ]
  %570 = phi i8* [ %585, %578 ], [ %566, %564 ]
  %571 = phi i8* [ %584, %578 ], [ %567, %564 ]
  %572 = getelementptr inbounds i8, i8* %571, i64 3
  %573 = load i8, i8* %572, align 1
  %574 = icmp eq i8 %573, 0
  br i1 %574, label %578, label %575

575:                                              ; preds = %568
  %576 = uitofp i8 %573 to float
  %577 = fdiv float 2.550000e+02, %576
  br label %578

578:                                              ; preds = %575, %568
  %579 = phi float [ %577, %575 ], [ 1.000000e+00, %568 ]
  %580 = load i8, i8* %571, align 1
  %581 = uitofp i8 %580 to float
  %582 = fmul float %579, %581
  %583 = fptoui float %582 to i8
  store i8 %583, i8* %570, align 1
  %584 = getelementptr inbounds i8, i8* %571, i64 4
  %585 = getelementptr inbounds i8, i8* %570, i64 1
  %586 = add nuw i32 %569, 1
  %587 = icmp eq i32 %586, %517
  br i1 %587, label %588, label %568, !llvm.loop !120

588:                                              ; preds = %578, %562, %514
  %589 = getelementptr inbounds i8, i8* %449, i64 %383
  %590 = getelementptr inbounds i8, i8* %448, i64 %386
  %591 = add nuw nsw i32 %447, 1
  %592 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %389, align 8
  %593 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %592, i64 0, i32 1, i32 1
  %594 = load i32, i32* %593, align 4
  %595 = icmp slt i32 %591, %594
  br i1 %595, label %445, label %430

596:                                              ; preds = %432, %414
  %597 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %597, align 4
  br label %11653

598:                                              ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %599
    i32 1, label %784
    i32 2, label %978
  ]

599:                                              ; preds = %598
  %600 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %601 = load i32, i32* %600, align 8
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %604 = load i32, i32* %603, align 8
  %605 = sdiv i32 %604, 2
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %608 = load i8*, i8** %607, align 8
  %609 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %610 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %609, align 8
  %611 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %610, i64 0, i32 0, i32 1
  %612 = load i32, i32* %611, align 4
  %613 = mul nsw i32 %612, %601
  %614 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %615 = load i32, i32* %614, align 4
  %616 = add nsw i32 %613, %615
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %608, i64 %617
  %619 = icmp slt i32 %604, 0
  %620 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %621 = load i32, i32* %620, align 8
  %622 = icmp sgt i32 %621, 1
  %623 = and i1 %619, %622
  br i1 %623, label %624, label %634

624:                                              ; preds = %599
  %625 = add nsw i32 %621, -1
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %628 = load i32, i32* %627, align 4
  %629 = sext i32 %628 to i64
  %630 = mul nsw i64 %602, %626
  %631 = mul i64 %630, %629
  %632 = sub i64 0, %631
  %633 = getelementptr inbounds i8, i8* %618, i64 %632
  br label %636

634:                                              ; preds = %599
  %635 = icmp sgt i32 %621, 0
  br i1 %635, label %636, label %782

636:                                              ; preds = %634, %624
  %637 = phi i8* [ %633, %624 ], [ %618, %634 ]
  %638 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %639 = bitcast i8** %638 to i16**
  %640 = load i16*, i16** %639, align 8
  %641 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %642 = bitcast i8** %641 to float**
  %643 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %644

644:                                              ; preds = %656, %636
  %645 = phi i32 [ %621, %636 ], [ %657, %656 ]
  %646 = phi %"class.blink::IntRect"* [ %610, %636 ], [ %658, %656 ]
  %647 = phi %"class.blink::IntRect"* [ %610, %636 ], [ %659, %656 ]
  %648 = phi i32 [ 0, %636 ], [ %668, %656 ]
  %649 = phi i16* [ %640, %636 ], [ %661, %656 ]
  %650 = phi i8* [ %637, %636 ], [ %667, %656 ]
  %651 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %647, i64 0, i32 1, i32 1
  %652 = load i32, i32* %651, align 4
  %653 = icmp sgt i32 %652, 0
  br i1 %653, label %670, label %656

654:                                              ; preds = %774
  %655 = load i32, i32* %620, align 8
  br label %656

656:                                              ; preds = %654, %644
  %657 = phi i32 [ %645, %644 ], [ %655, %654 ]
  %658 = phi %"class.blink::IntRect"* [ %646, %644 ], [ %775, %654 ]
  %659 = phi %"class.blink::IntRect"* [ %647, %644 ], [ %775, %654 ]
  %660 = phi i8* [ %650, %644 ], [ %776, %654 ]
  %661 = phi i16* [ %649, %644 ], [ %777, %654 ]
  %662 = phi i32 [ %652, %644 ], [ %780, %654 ]
  %663 = load i32, i32* %643, align 4
  %664 = sub nsw i32 %663, %662
  %665 = sext i32 %664 to i64
  %666 = mul nsw i64 %665, %602
  %667 = getelementptr inbounds i8, i8* %660, i64 %666
  %668 = add nuw nsw i32 %648, 1
  %669 = icmp slt i32 %668, %657
  br i1 %669, label %644, label %782

670:                                              ; preds = %644, %774
  %671 = phi %"class.blink::IntRect"* [ %775, %774 ], [ %646, %644 ]
  %672 = phi %"class.blink::IntRect"* [ %775, %774 ], [ %647, %644 ]
  %673 = phi i32 [ %778, %774 ], [ 0, %644 ]
  %674 = phi i16* [ %777, %774 ], [ %649, %644 ]
  %675 = phi i8* [ %776, %774 ], [ %650, %644 ]
  %676 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %672, i64 0, i32 1, i32 0
  %677 = load i32, i32* %676, align 4
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %774, label %679

679:                                              ; preds = %670
  %680 = load float*, float** %642, align 8
  br label %681

681:                                              ; preds = %681, %679
  %682 = phi i32 [ %705, %681 ], [ 0, %679 ]
  %683 = phi i8* [ %703, %681 ], [ %675, %679 ]
  %684 = phi float* [ %704, %681 ], [ %680, %679 ]
  %685 = load i8, i8* %683, align 1
  %686 = uitofp i8 %685 to float
  %687 = fmul float %686, 0x3F70101020000000
  store float %687, float* %684, align 4
  %688 = getelementptr inbounds i8, i8* %683, i64 1
  %689 = load i8, i8* %688, align 1
  %690 = uitofp i8 %689 to float
  %691 = fmul float %690, 0x3F70101020000000
  %692 = getelementptr inbounds float, float* %684, i64 1
  store float %691, float* %692, align 4
  %693 = getelementptr inbounds i8, i8* %683, i64 2
  %694 = load i8, i8* %693, align 1
  %695 = uitofp i8 %694 to float
  %696 = fmul float %695, 0x3F70101020000000
  %697 = getelementptr inbounds float, float* %684, i64 2
  store float %696, float* %697, align 4
  %698 = getelementptr inbounds i8, i8* %683, i64 3
  %699 = load i8, i8* %698, align 1
  %700 = uitofp i8 %699 to float
  %701 = fmul float %700, 0x3F70101020000000
  %702 = getelementptr inbounds float, float* %684, i64 3
  store float %701, float* %702, align 4
  %703 = getelementptr inbounds i8, i8* %683, i64 4
  %704 = getelementptr inbounds float, float* %684, i64 4
  %705 = add nuw i32 %682, 1
  %706 = icmp eq i32 %705, %677
  br i1 %706, label %707, label %681

707:                                              ; preds = %681
  %708 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %609, align 8
  %709 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %708, i64 0, i32 1, i32 0
  %710 = load i32, i32* %709, align 4
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %774, label %712

712:                                              ; preds = %707
  %713 = load float*, float** %642, align 8
  %714 = and i32 %710, 1
  %715 = icmp eq i32 %710, 1
  br i1 %715, label %754, label %716

716:                                              ; preds = %712
  %717 = sub i32 %710, %714
  br label %718

718:                                              ; preds = %718, %716
  %719 = phi float* [ %713, %716 ], [ %750, %718 ]
  %720 = phi i16* [ %674, %716 ], [ %751, %718 ]
  %721 = phi i32 [ %717, %716 ], [ %752, %718 ]
  %722 = bitcast float* %719 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = lshr i32 %723, 23
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %725
  %727 = load i16, i16* %726, align 2
  %728 = and i32 %723, 8388607
  %729 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %725
  %730 = load i8, i8* %729, align 1
  %731 = zext i8 %730 to i32
  %732 = lshr i32 %728, %731
  %733 = trunc i32 %732 to i16
  %734 = add i16 %727, %733
  store i16 %734, i16* %720, align 2
  %735 = getelementptr inbounds float, float* %719, i64 4
  %736 = getelementptr inbounds i16, i16* %720, i64 1
  %737 = bitcast float* %735 to i32*
  %738 = load i32, i32* %737, align 4
  %739 = lshr i32 %738, 23
  %740 = zext i32 %739 to i64
  %741 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %740
  %742 = load i16, i16* %741, align 2
  %743 = and i32 %738, 8388607
  %744 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %740
  %745 = load i8, i8* %744, align 1
  %746 = zext i8 %745 to i32
  %747 = lshr i32 %743, %746
  %748 = trunc i32 %747 to i16
  %749 = add i16 %742, %748
  store i16 %749, i16* %736, align 2
  %750 = getelementptr inbounds float, float* %719, i64 8
  %751 = getelementptr inbounds i16, i16* %720, i64 2
  %752 = add i32 %721, -2
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %754, label %718

754:                                              ; preds = %718, %712
  %755 = phi float* [ %713, %712 ], [ %750, %718 ]
  %756 = phi i16* [ %674, %712 ], [ %751, %718 ]
  %757 = icmp eq i32 %714, 0
  br i1 %757, label %772, label %758

758:                                              ; preds = %754
  %759 = bitcast float* %755 to i32*
  %760 = load i32, i32* %759, align 4
  %761 = lshr i32 %760, 23
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %762
  %764 = load i16, i16* %763, align 2
  %765 = and i32 %760, 8388607
  %766 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %762
  %767 = load i8, i8* %766, align 1
  %768 = zext i8 %767 to i32
  %769 = lshr i32 %765, %768
  %770 = trunc i32 %769 to i16
  %771 = add i16 %764, %770
  store i16 %771, i16* %756, align 2
  br label %772

772:                                              ; preds = %754, %758
  %773 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %609, align 8
  br label %774

774:                                              ; preds = %772, %707, %670
  %775 = phi %"class.blink::IntRect"* [ %773, %772 ], [ %708, %707 ], [ %671, %670 ]
  %776 = getelementptr inbounds i8, i8* %675, i64 %602
  %777 = getelementptr inbounds i16, i16* %674, i64 %606
  %778 = add nuw nsw i32 %673, 1
  %779 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %775, i64 0, i32 1, i32 1
  %780 = load i32, i32* %779, align 4
  %781 = icmp slt i32 %778, %780
  br i1 %781, label %670, label %654

782:                                              ; preds = %656, %634
  %783 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %783, align 4
  br label %11653

784:                                              ; preds = %598
  %785 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %786 = load i32, i32* %785, align 8
  %787 = sext i32 %786 to i64
  %788 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %789 = load i32, i32* %788, align 8
  %790 = sdiv i32 %789, 2
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %793 = load i8*, i8** %792, align 8
  %794 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %795 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %794, align 8
  %796 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %795, i64 0, i32 0, i32 1
  %797 = load i32, i32* %796, align 4
  %798 = mul nsw i32 %797, %786
  %799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %800 = load i32, i32* %799, align 4
  %801 = add nsw i32 %798, %800
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, i8* %793, i64 %802
  %804 = icmp slt i32 %789, 0
  %805 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %806 = load i32, i32* %805, align 8
  %807 = icmp sgt i32 %806, 1
  %808 = and i1 %804, %807
  br i1 %808, label %809, label %819

809:                                              ; preds = %784
  %810 = add nsw i32 %806, -1
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %813 = load i32, i32* %812, align 4
  %814 = sext i32 %813 to i64
  %815 = mul nsw i64 %787, %811
  %816 = mul i64 %815, %814
  %817 = sub i64 0, %816
  %818 = getelementptr inbounds i8, i8* %803, i64 %817
  br label %821

819:                                              ; preds = %784
  %820 = icmp sgt i32 %806, 0
  br i1 %820, label %821, label %976

821:                                              ; preds = %819, %809
  %822 = phi i8* [ %818, %809 ], [ %803, %819 ]
  %823 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %824 = bitcast i8** %823 to i16**
  %825 = load i16*, i16** %824, align 8
  %826 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %827 = bitcast i8** %826 to float**
  %828 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %829

829:                                              ; preds = %841, %821
  %830 = phi i32 [ %806, %821 ], [ %842, %841 ]
  %831 = phi %"class.blink::IntRect"* [ %795, %821 ], [ %843, %841 ]
  %832 = phi %"class.blink::IntRect"* [ %795, %821 ], [ %844, %841 ]
  %833 = phi i32 [ 0, %821 ], [ %853, %841 ]
  %834 = phi i16* [ %825, %821 ], [ %846, %841 ]
  %835 = phi i8* [ %822, %821 ], [ %852, %841 ]
  %836 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %832, i64 0, i32 1, i32 1
  %837 = load i32, i32* %836, align 4
  %838 = icmp sgt i32 %837, 0
  br i1 %838, label %855, label %841

839:                                              ; preds = %968
  %840 = load i32, i32* %805, align 8
  br label %841

841:                                              ; preds = %839, %829
  %842 = phi i32 [ %830, %829 ], [ %840, %839 ]
  %843 = phi %"class.blink::IntRect"* [ %831, %829 ], [ %969, %839 ]
  %844 = phi %"class.blink::IntRect"* [ %832, %829 ], [ %969, %839 ]
  %845 = phi i8* [ %835, %829 ], [ %970, %839 ]
  %846 = phi i16* [ %834, %829 ], [ %971, %839 ]
  %847 = phi i32 [ %837, %829 ], [ %974, %839 ]
  %848 = load i32, i32* %828, align 4
  %849 = sub nsw i32 %848, %847
  %850 = sext i32 %849 to i64
  %851 = mul nsw i64 %850, %787
  %852 = getelementptr inbounds i8, i8* %845, i64 %851
  %853 = add nuw nsw i32 %833, 1
  %854 = icmp slt i32 %853, %842
  br i1 %854, label %829, label %976

855:                                              ; preds = %829, %968
  %856 = phi %"class.blink::IntRect"* [ %969, %968 ], [ %831, %829 ]
  %857 = phi %"class.blink::IntRect"* [ %969, %968 ], [ %832, %829 ]
  %858 = phi i32 [ %972, %968 ], [ 0, %829 ]
  %859 = phi i16* [ %971, %968 ], [ %834, %829 ]
  %860 = phi i8* [ %970, %968 ], [ %835, %829 ]
  %861 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %857, i64 0, i32 1, i32 0
  %862 = load i32, i32* %861, align 4
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %968, label %864

864:                                              ; preds = %855
  %865 = load float*, float** %827, align 8
  br label %866

866:                                              ; preds = %866, %864
  %867 = phi i32 [ %890, %866 ], [ 0, %864 ]
  %868 = phi i8* [ %888, %866 ], [ %860, %864 ]
  %869 = phi float* [ %889, %866 ], [ %865, %864 ]
  %870 = load i8, i8* %868, align 1
  %871 = uitofp i8 %870 to float
  %872 = fmul float %871, 0x3F70101020000000
  store float %872, float* %869, align 4
  %873 = getelementptr inbounds i8, i8* %868, i64 1
  %874 = load i8, i8* %873, align 1
  %875 = uitofp i8 %874 to float
  %876 = fmul float %875, 0x3F70101020000000
  %877 = getelementptr inbounds float, float* %869, i64 1
  store float %876, float* %877, align 4
  %878 = getelementptr inbounds i8, i8* %868, i64 2
  %879 = load i8, i8* %878, align 1
  %880 = uitofp i8 %879 to float
  %881 = fmul float %880, 0x3F70101020000000
  %882 = getelementptr inbounds float, float* %869, i64 2
  store float %881, float* %882, align 4
  %883 = getelementptr inbounds i8, i8* %868, i64 3
  %884 = load i8, i8* %883, align 1
  %885 = uitofp i8 %884 to float
  %886 = fmul float %885, 0x3F70101020000000
  %887 = getelementptr inbounds float, float* %869, i64 3
  store float %886, float* %887, align 4
  %888 = getelementptr inbounds i8, i8* %868, i64 4
  %889 = getelementptr inbounds float, float* %869, i64 4
  %890 = add nuw i32 %867, 1
  %891 = icmp eq i32 %890, %862
  br i1 %891, label %892, label %866

892:                                              ; preds = %866
  %893 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %794, align 8
  %894 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %893, i64 0, i32 1, i32 0
  %895 = load i32, i32* %894, align 4
  %896 = icmp eq i32 %895, 0
  br i1 %896, label %968, label %897

897:                                              ; preds = %892
  %898 = load float*, float** %827, align 8
  %899 = and i32 %895, 1
  %900 = icmp eq i32 %895, 1
  br i1 %900, label %945, label %901

901:                                              ; preds = %897
  %902 = sub i32 %895, %899
  br label %903

903:                                              ; preds = %903, %901
  %904 = phi float* [ %898, %901 ], [ %941, %903 ]
  %905 = phi i16* [ %859, %901 ], [ %942, %903 ]
  %906 = phi i32 [ %902, %901 ], [ %943, %903 ]
  %907 = getelementptr inbounds float, float* %904, i64 3
  %908 = load float, float* %907, align 4
  %909 = load float, float* %904, align 4
  %910 = fmul float %908, %909
  %911 = bitcast float %910 to i32
  %912 = lshr i32 %911, 23
  %913 = zext i32 %912 to i64
  %914 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %913
  %915 = load i16, i16* %914, align 2
  %916 = and i32 %911, 8388607
  %917 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %913
  %918 = load i8, i8* %917, align 1
  %919 = zext i8 %918 to i32
  %920 = lshr i32 %916, %919
  %921 = trunc i32 %920 to i16
  %922 = add i16 %915, %921
  store i16 %922, i16* %905, align 2
  %923 = getelementptr inbounds float, float* %904, i64 4
  %924 = getelementptr inbounds i16, i16* %905, i64 1
  %925 = getelementptr inbounds float, float* %904, i64 7
  %926 = load float, float* %925, align 4
  %927 = load float, float* %923, align 4
  %928 = fmul float %926, %927
  %929 = bitcast float %928 to i32
  %930 = lshr i32 %929, 23
  %931 = zext i32 %930 to i64
  %932 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %931
  %933 = load i16, i16* %932, align 2
  %934 = and i32 %929, 8388607
  %935 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %931
  %936 = load i8, i8* %935, align 1
  %937 = zext i8 %936 to i32
  %938 = lshr i32 %934, %937
  %939 = trunc i32 %938 to i16
  %940 = add i16 %933, %939
  store i16 %940, i16* %924, align 2
  %941 = getelementptr inbounds float, float* %904, i64 8
  %942 = getelementptr inbounds i16, i16* %905, i64 2
  %943 = add i32 %906, -2
  %944 = icmp eq i32 %943, 0
  br i1 %944, label %945, label %903

945:                                              ; preds = %903, %897
  %946 = phi float* [ %898, %897 ], [ %941, %903 ]
  %947 = phi i16* [ %859, %897 ], [ %942, %903 ]
  %948 = icmp eq i32 %899, 0
  br i1 %948, label %966, label %949

949:                                              ; preds = %945
  %950 = getelementptr inbounds float, float* %946, i64 3
  %951 = load float, float* %950, align 4
  %952 = load float, float* %946, align 4
  %953 = fmul float %951, %952
  %954 = bitcast float %953 to i32
  %955 = lshr i32 %954, 23
  %956 = zext i32 %955 to i64
  %957 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %956
  %958 = load i16, i16* %957, align 2
  %959 = and i32 %954, 8388607
  %960 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %956
  %961 = load i8, i8* %960, align 1
  %962 = zext i8 %961 to i32
  %963 = lshr i32 %959, %962
  %964 = trunc i32 %963 to i16
  %965 = add i16 %958, %964
  store i16 %965, i16* %947, align 2
  br label %966

966:                                              ; preds = %945, %949
  %967 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %794, align 8
  br label %968

968:                                              ; preds = %966, %892, %855
  %969 = phi %"class.blink::IntRect"* [ %967, %966 ], [ %893, %892 ], [ %856, %855 ]
  %970 = getelementptr inbounds i8, i8* %860, i64 %787
  %971 = getelementptr inbounds i16, i16* %859, i64 %791
  %972 = add nuw nsw i32 %858, 1
  %973 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %969, i64 0, i32 1, i32 1
  %974 = load i32, i32* %973, align 4
  %975 = icmp slt i32 %972, %974
  br i1 %975, label %855, label %839

976:                                              ; preds = %841, %819
  %977 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %977, align 4
  br label %11653

978:                                              ; preds = %598
  %979 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %980 = load i32, i32* %979, align 8
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %983 = load i32, i32* %982, align 8
  %984 = sdiv i32 %983, 2
  %985 = sext i32 %984 to i64
  %986 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %987 = load i8*, i8** %986, align 8
  %988 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %989 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %988, align 8
  %990 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %989, i64 0, i32 0, i32 1
  %991 = load i32, i32* %990, align 4
  %992 = mul nsw i32 %991, %980
  %993 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %994 = load i32, i32* %993, align 4
  %995 = add nsw i32 %992, %994
  %996 = sext i32 %995 to i64
  %997 = getelementptr inbounds i8, i8* %987, i64 %996
  %998 = icmp slt i32 %983, 0
  %999 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1000 = load i32, i32* %999, align 8
  %1001 = icmp sgt i32 %1000, 1
  %1002 = and i1 %998, %1001
  br i1 %1002, label %1003, label %1013

1003:                                             ; preds = %978
  %1004 = add nsw i32 %1000, -1
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1007 = load i32, i32* %1006, align 4
  %1008 = sext i32 %1007 to i64
  %1009 = mul nsw i64 %981, %1005
  %1010 = mul i64 %1009, %1008
  %1011 = sub i64 0, %1010
  %1012 = getelementptr inbounds i8, i8* %997, i64 %1011
  br label %1015

1013:                                             ; preds = %978
  %1014 = icmp sgt i32 %1000, 0
  br i1 %1014, label %1015, label %1130

1015:                                             ; preds = %1013, %1003
  %1016 = phi i8* [ %1012, %1003 ], [ %997, %1013 ]
  %1017 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1018 = bitcast i8** %1017 to i16**
  %1019 = load i16*, i16** %1018, align 8
  %1020 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1021 = bitcast i8** %1020 to float**
  %1022 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1023

1023:                                             ; preds = %1035, %1015
  %1024 = phi i32 [ %1000, %1015 ], [ %1036, %1035 ]
  %1025 = phi %"class.blink::IntRect"* [ %989, %1015 ], [ %1037, %1035 ]
  %1026 = phi %"class.blink::IntRect"* [ %989, %1015 ], [ %1038, %1035 ]
  %1027 = phi i32 [ 0, %1015 ], [ %1047, %1035 ]
  %1028 = phi i16* [ %1019, %1015 ], [ %1040, %1035 ]
  %1029 = phi i8* [ %1016, %1015 ], [ %1046, %1035 ]
  %1030 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1026, i64 0, i32 1, i32 1
  %1031 = load i32, i32* %1030, align 4
  %1032 = icmp sgt i32 %1031, 0
  br i1 %1032, label %1049, label %1035

1033:                                             ; preds = %1122
  %1034 = load i32, i32* %999, align 8
  br label %1035

1035:                                             ; preds = %1033, %1023
  %1036 = phi i32 [ %1024, %1023 ], [ %1034, %1033 ]
  %1037 = phi %"class.blink::IntRect"* [ %1025, %1023 ], [ %1123, %1033 ]
  %1038 = phi %"class.blink::IntRect"* [ %1026, %1023 ], [ %1123, %1033 ]
  %1039 = phi i8* [ %1029, %1023 ], [ %1124, %1033 ]
  %1040 = phi i16* [ %1028, %1023 ], [ %1125, %1033 ]
  %1041 = phi i32 [ %1031, %1023 ], [ %1128, %1033 ]
  %1042 = load i32, i32* %1022, align 4
  %1043 = sub nsw i32 %1042, %1041
  %1044 = sext i32 %1043 to i64
  %1045 = mul nsw i64 %1044, %981
  %1046 = getelementptr inbounds i8, i8* %1039, i64 %1045
  %1047 = add nuw nsw i32 %1027, 1
  %1048 = icmp slt i32 %1047, %1036
  br i1 %1048, label %1023, label %1130

1049:                                             ; preds = %1023, %1122
  %1050 = phi %"class.blink::IntRect"* [ %1123, %1122 ], [ %1025, %1023 ]
  %1051 = phi %"class.blink::IntRect"* [ %1123, %1122 ], [ %1026, %1023 ]
  %1052 = phi i32 [ %1126, %1122 ], [ 0, %1023 ]
  %1053 = phi i16* [ %1125, %1122 ], [ %1028, %1023 ]
  %1054 = phi i8* [ %1124, %1122 ], [ %1029, %1023 ]
  %1055 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1051, i64 0, i32 1, i32 0
  %1056 = load i32, i32* %1055, align 4
  %1057 = icmp eq i32 %1056, 0
  br i1 %1057, label %1122, label %1058

1058:                                             ; preds = %1049
  %1059 = load float*, float** %1021, align 8
  br label %1060

1060:                                             ; preds = %1060, %1058
  %1061 = phi i32 [ %1084, %1060 ], [ 0, %1058 ]
  %1062 = phi i8* [ %1082, %1060 ], [ %1054, %1058 ]
  %1063 = phi float* [ %1083, %1060 ], [ %1059, %1058 ]
  %1064 = load i8, i8* %1062, align 1
  %1065 = uitofp i8 %1064 to float
  %1066 = fmul float %1065, 0x3F70101020000000
  store float %1066, float* %1063, align 4
  %1067 = getelementptr inbounds i8, i8* %1062, i64 1
  %1068 = load i8, i8* %1067, align 1
  %1069 = uitofp i8 %1068 to float
  %1070 = fmul float %1069, 0x3F70101020000000
  %1071 = getelementptr inbounds float, float* %1063, i64 1
  store float %1070, float* %1071, align 4
  %1072 = getelementptr inbounds i8, i8* %1062, i64 2
  %1073 = load i8, i8* %1072, align 1
  %1074 = uitofp i8 %1073 to float
  %1075 = fmul float %1074, 0x3F70101020000000
  %1076 = getelementptr inbounds float, float* %1063, i64 2
  store float %1075, float* %1076, align 4
  %1077 = getelementptr inbounds i8, i8* %1062, i64 3
  %1078 = load i8, i8* %1077, align 1
  %1079 = uitofp i8 %1078 to float
  %1080 = fmul float %1079, 0x3F70101020000000
  %1081 = getelementptr inbounds float, float* %1063, i64 3
  store float %1080, float* %1081, align 4
  %1082 = getelementptr inbounds i8, i8* %1062, i64 4
  %1083 = getelementptr inbounds float, float* %1063, i64 4
  %1084 = add nuw i32 %1061, 1
  %1085 = icmp eq i32 %1084, %1056
  br i1 %1085, label %1086, label %1060

1086:                                             ; preds = %1060
  %1087 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %988, align 8
  %1088 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1087, i64 0, i32 1, i32 0
  %1089 = load i32, i32* %1088, align 4
  %1090 = icmp eq i32 %1089, 0
  br i1 %1090, label %1122, label %1091

1091:                                             ; preds = %1086
  %1092 = load float*, float** %1021, align 8
  br label %1093

1093:                                             ; preds = %1093, %1091
  %1094 = phi i32 [ %1118, %1093 ], [ 0, %1091 ]
  %1095 = phi float* [ %1116, %1093 ], [ %1092, %1091 ]
  %1096 = phi i16* [ %1117, %1093 ], [ %1053, %1091 ]
  %1097 = getelementptr inbounds float, float* %1095, i64 3
  %1098 = load float, float* %1097, align 4
  %1099 = fcmp une float %1098, 0.000000e+00
  %1100 = fdiv float 1.000000e+00, %1098
  %1101 = select i1 %1099, float %1100, float 1.000000e+00
  %1102 = load float, float* %1095, align 4
  %1103 = fmul float %1102, %1101
  %1104 = bitcast float %1103 to i32
  %1105 = lshr i32 %1104, 23
  %1106 = zext i32 %1105 to i64
  %1107 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1106
  %1108 = load i16, i16* %1107, align 2
  %1109 = and i32 %1104, 8388607
  %1110 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1106
  %1111 = load i8, i8* %1110, align 1
  %1112 = zext i8 %1111 to i32
  %1113 = lshr i32 %1109, %1112
  %1114 = trunc i32 %1113 to i16
  %1115 = add i16 %1108, %1114
  store i16 %1115, i16* %1096, align 2
  %1116 = getelementptr inbounds float, float* %1095, i64 4
  %1117 = getelementptr inbounds i16, i16* %1096, i64 1
  %1118 = add nuw i32 %1094, 1
  %1119 = icmp eq i32 %1118, %1089
  br i1 %1119, label %1120, label %1093

1120:                                             ; preds = %1093
  %1121 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %988, align 8
  br label %1122

1122:                                             ; preds = %1120, %1086, %1049
  %1123 = phi %"class.blink::IntRect"* [ %1121, %1120 ], [ %1087, %1086 ], [ %1050, %1049 ]
  %1124 = getelementptr inbounds i8, i8* %1054, i64 %981
  %1125 = getelementptr inbounds i16, i16* %1053, i64 %985
  %1126 = add nuw nsw i32 %1052, 1
  %1127 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1123, i64 0, i32 1, i32 1
  %1128 = load i32, i32* %1127, align 4
  %1129 = icmp slt i32 %1126, %1128
  br i1 %1129, label %1049, label %1033

1130:                                             ; preds = %1035, %1013
  %1131 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1131, align 4
  br label %11653

1132:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %1133
    i32 1, label %1381
    i32 2, label %1617
  ]

1133:                                             ; preds = %1132
  %1134 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1135 = load i32, i32* %1134, align 8
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1138 = load i32, i32* %1137, align 8
  %1139 = sdiv i32 %1138, 4
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1142 = load i8*, i8** %1141, align 8
  %1143 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1144 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1143, align 8
  %1145 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1144, i64 0, i32 0, i32 1
  %1146 = load i32, i32* %1145, align 4
  %1147 = mul nsw i32 %1146, %1135
  %1148 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1149 = load i32, i32* %1148, align 4
  %1150 = add nsw i32 %1147, %1149
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i8, i8* %1142, i64 %1151
  %1153 = icmp slt i32 %1138, 0
  %1154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1155 = load i32, i32* %1154, align 8
  %1156 = icmp sgt i32 %1155, 1
  %1157 = and i1 %1153, %1156
  br i1 %1157, label %1158, label %1168

1158:                                             ; preds = %1133
  %1159 = add nsw i32 %1155, -1
  %1160 = sext i32 %1159 to i64
  %1161 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1162 = load i32, i32* %1161, align 4
  %1163 = sext i32 %1162 to i64
  %1164 = mul nsw i64 %1136, %1160
  %1165 = mul i64 %1164, %1163
  %1166 = sub i64 0, %1165
  %1167 = getelementptr inbounds i8, i8* %1152, i64 %1166
  br label %1170

1168:                                             ; preds = %1133
  %1169 = icmp sgt i32 %1155, 0
  br i1 %1169, label %1170, label %1379

1170:                                             ; preds = %1168, %1158
  %1171 = phi i8* [ %1167, %1158 ], [ %1152, %1168 ]
  %1172 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1173 = bitcast i8** %1172 to float**
  %1174 = load float*, float** %1173, align 8
  %1175 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1176 = bitcast i8** %1175 to float**
  %1177 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1178

1178:                                             ; preds = %1190, %1170
  %1179 = phi i32 [ %1155, %1170 ], [ %1191, %1190 ]
  %1180 = phi %"class.blink::IntRect"* [ %1144, %1170 ], [ %1192, %1190 ]
  %1181 = phi %"class.blink::IntRect"* [ %1144, %1170 ], [ %1193, %1190 ]
  %1182 = phi i32 [ 0, %1170 ], [ %1202, %1190 ]
  %1183 = phi float* [ %1174, %1170 ], [ %1195, %1190 ]
  %1184 = phi i8* [ %1171, %1170 ], [ %1201, %1190 ]
  %1185 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1181, i64 0, i32 1, i32 1
  %1186 = load i32, i32* %1185, align 4
  %1187 = icmp sgt i32 %1186, 0
  br i1 %1187, label %1204, label %1190

1188:                                             ; preds = %1370
  %1189 = load i32, i32* %1154, align 8
  br label %1190

1190:                                             ; preds = %1188, %1178
  %1191 = phi i32 [ %1179, %1178 ], [ %1189, %1188 ]
  %1192 = phi %"class.blink::IntRect"* [ %1180, %1178 ], [ %1371, %1188 ]
  %1193 = phi %"class.blink::IntRect"* [ %1181, %1178 ], [ %1371, %1188 ]
  %1194 = phi i8* [ %1184, %1178 ], [ %1372, %1188 ]
  %1195 = phi float* [ %1183, %1178 ], [ %1373, %1188 ]
  %1196 = phi i32 [ %1186, %1178 ], [ %1376, %1188 ]
  %1197 = load i32, i32* %1177, align 4
  %1198 = sub nsw i32 %1197, %1196
  %1199 = sext i32 %1198 to i64
  %1200 = mul nsw i64 %1199, %1136
  %1201 = getelementptr inbounds i8, i8* %1194, i64 %1200
  %1202 = add nuw nsw i32 %1182, 1
  %1203 = icmp slt i32 %1202, %1191
  br i1 %1203, label %1178, label %1379

1204:                                             ; preds = %1178, %1370
  %1205 = phi i64 [ %1378, %1370 ], [ 0, %1178 ]
  %1206 = phi %"class.blink::IntRect"* [ %1371, %1370 ], [ %1180, %1178 ]
  %1207 = phi %"class.blink::IntRect"* [ %1371, %1370 ], [ %1181, %1178 ]
  %1208 = phi i32 [ %1374, %1370 ], [ 0, %1178 ]
  %1209 = phi float* [ %1373, %1370 ], [ %1183, %1178 ]
  %1210 = phi i8* [ %1372, %1370 ], [ %1184, %1178 ]
  %1211 = mul i64 %1205, %1140
  %1212 = getelementptr float, float* %1183, i64 %1211
  %1213 = add i64 %1211, 1
  %1214 = getelementptr float, float* %1183, i64 %1213
  %1215 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1207, i64 0, i32 1, i32 0
  %1216 = load i32, i32* %1215, align 4
  %1217 = icmp eq i32 %1216, 0
  br i1 %1217, label %1370, label %1218

1218:                                             ; preds = %1204
  %1219 = load float*, float** %1176, align 8
  br label %1220

1220:                                             ; preds = %1220, %1218
  %1221 = phi i32 [ %1244, %1220 ], [ 0, %1218 ]
  %1222 = phi i8* [ %1242, %1220 ], [ %1210, %1218 ]
  %1223 = phi float* [ %1243, %1220 ], [ %1219, %1218 ]
  %1224 = load i8, i8* %1222, align 1
  %1225 = uitofp i8 %1224 to float
  %1226 = fmul float %1225, 0x3F70101020000000
  store float %1226, float* %1223, align 4
  %1227 = getelementptr inbounds i8, i8* %1222, i64 1
  %1228 = load i8, i8* %1227, align 1
  %1229 = uitofp i8 %1228 to float
  %1230 = fmul float %1229, 0x3F70101020000000
  %1231 = getelementptr inbounds float, float* %1223, i64 1
  store float %1230, float* %1231, align 4
  %1232 = getelementptr inbounds i8, i8* %1222, i64 2
  %1233 = load i8, i8* %1232, align 1
  %1234 = uitofp i8 %1233 to float
  %1235 = fmul float %1234, 0x3F70101020000000
  %1236 = getelementptr inbounds float, float* %1223, i64 2
  store float %1235, float* %1236, align 4
  %1237 = getelementptr inbounds i8, i8* %1222, i64 3
  %1238 = load i8, i8* %1237, align 1
  %1239 = uitofp i8 %1238 to float
  %1240 = fmul float %1239, 0x3F70101020000000
  %1241 = getelementptr inbounds float, float* %1223, i64 3
  store float %1240, float* %1241, align 4
  %1242 = getelementptr inbounds i8, i8* %1222, i64 4
  %1243 = getelementptr inbounds float, float* %1223, i64 4
  %1244 = add nuw i32 %1221, 1
  %1245 = icmp eq i32 %1244, %1216
  br i1 %1245, label %1246, label %1220

1246:                                             ; preds = %1220
  %1247 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1143, align 8
  %1248 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1247, i64 0, i32 1, i32 0
  %1249 = load i32, i32* %1248, align 4
  %1250 = icmp eq i32 %1249, 0
  br i1 %1250, label %1370, label %1251

1251:                                             ; preds = %1246
  %1252 = load float*, float** %1176, align 8
  %1253 = add i32 %1249, -1
  %1254 = zext i32 %1253 to i64
  %1255 = add nuw nsw i64 %1254, 1
  %1256 = icmp ult i64 %1255, 9
  br i1 %1256, label %1295, label %1257

1257:                                             ; preds = %1251
  %1258 = add i32 %1249, -1
  %1259 = zext i32 %1258 to i64
  %1260 = getelementptr float, float* %1214, i64 %1259
  %1261 = getelementptr float, float* %1252, i64 1
  %1262 = shl nuw nsw i64 %1259, 2
  %1263 = getelementptr float, float* %1261, i64 %1262
  %1264 = icmp ult float* %1212, %1263
  %1265 = icmp ult float* %1252, %1260
  %1266 = and i1 %1264, %1265
  br i1 %1266, label %1295, label %1267

1267:                                             ; preds = %1257
  %1268 = and i64 %1255, 7
  %1269 = icmp eq i64 %1268, 0
  %1270 = select i1 %1269, i64 8, i64 %1268
  %1271 = sub nsw i64 %1255, %1270
  %1272 = trunc i64 %1271 to i32
  %1273 = shl nsw i64 %1271, 2
  %1274 = getelementptr float, float* %1252, i64 %1273
  %1275 = getelementptr float, float* %1209, i64 %1271
  br label %1276

1276:                                             ; preds = %1276, %1267
  %1277 = phi i64 [ 0, %1267 ], [ %1293, %1276 ]
  %1278 = shl i64 %1277, 2
  %1279 = getelementptr float, float* %1252, i64 %1278
  %1280 = shl i64 %1277, 2
  %1281 = or i64 %1280, 16
  %1282 = getelementptr float, float* %1252, i64 %1281
  %1283 = getelementptr float, float* %1209, i64 %1277
  %1284 = bitcast float* %1279 to <16 x i32>*
  %1285 = bitcast float* %1282 to <16 x i32>*
  %1286 = load <16 x i32>, <16 x i32>* %1284, align 4
  %1287 = load <16 x i32>, <16 x i32>* %1285, align 4
  %1288 = shufflevector <16 x i32> %1286, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1289 = shufflevector <16 x i32> %1287, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1290 = bitcast float* %1283 to <4 x i32>*
  store <4 x i32> %1288, <4 x i32>* %1290, align 4, !alias.scope !121, !noalias !124
  %1291 = getelementptr float, float* %1283, i64 4
  %1292 = bitcast float* %1291 to <4 x i32>*
  store <4 x i32> %1289, <4 x i32>* %1292, align 4, !alias.scope !121, !noalias !124
  %1293 = add i64 %1277, 8
  %1294 = icmp eq i64 %1293, %1271
  br i1 %1294, label %1295, label %1276, !llvm.loop !126

1295:                                             ; preds = %1276, %1257, %1251
  %1296 = phi i32 [ 0, %1257 ], [ 0, %1251 ], [ %1272, %1276 ]
  %1297 = phi float* [ %1252, %1257 ], [ %1252, %1251 ], [ %1274, %1276 ]
  %1298 = phi float* [ %1209, %1257 ], [ %1209, %1251 ], [ %1275, %1276 ]
  %1299 = sub i32 %1249, %1296
  %1300 = xor i32 %1296, -1
  %1301 = add i32 %1249, %1300
  %1302 = and i32 %1299, 7
  %1303 = icmp eq i32 %1302, 0
  br i1 %1303, label %1317, label %1304

1304:                                             ; preds = %1295, %1304
  %1305 = phi i32 [ %1314, %1304 ], [ %1296, %1295 ]
  %1306 = phi float* [ %1312, %1304 ], [ %1297, %1295 ]
  %1307 = phi float* [ %1313, %1304 ], [ %1298, %1295 ]
  %1308 = phi i32 [ %1315, %1304 ], [ %1302, %1295 ]
  %1309 = bitcast float* %1306 to i32*
  %1310 = load i32, i32* %1309, align 4
  %1311 = bitcast float* %1307 to i32*
  store i32 %1310, i32* %1311, align 4
  %1312 = getelementptr inbounds float, float* %1306, i64 4
  %1313 = getelementptr inbounds float, float* %1307, i64 1
  %1314 = add nuw i32 %1305, 1
  %1315 = add i32 %1308, -1
  %1316 = icmp eq i32 %1315, 0
  br i1 %1316, label %1317, label %1304, !llvm.loop !127

1317:                                             ; preds = %1304, %1295
  %1318 = phi i32 [ %1296, %1295 ], [ %1314, %1304 ]
  %1319 = phi float* [ %1297, %1295 ], [ %1312, %1304 ]
  %1320 = phi float* [ %1298, %1295 ], [ %1313, %1304 ]
  %1321 = icmp ult i32 %1301, 7
  br i1 %1321, label %1368, label %1322

1322:                                             ; preds = %1317, %1322
  %1323 = phi i32 [ %1366, %1322 ], [ %1318, %1317 ]
  %1324 = phi float* [ %1364, %1322 ], [ %1319, %1317 ]
  %1325 = phi float* [ %1365, %1322 ], [ %1320, %1317 ]
  %1326 = bitcast float* %1324 to i32*
  %1327 = load i32, i32* %1326, align 4
  %1328 = bitcast float* %1325 to i32*
  store i32 %1327, i32* %1328, align 4
  %1329 = getelementptr inbounds float, float* %1324, i64 4
  %1330 = getelementptr inbounds float, float* %1325, i64 1
  %1331 = bitcast float* %1329 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = bitcast float* %1330 to i32*
  store i32 %1332, i32* %1333, align 4
  %1334 = getelementptr inbounds float, float* %1324, i64 8
  %1335 = getelementptr inbounds float, float* %1325, i64 2
  %1336 = bitcast float* %1334 to i32*
  %1337 = load i32, i32* %1336, align 4
  %1338 = bitcast float* %1335 to i32*
  store i32 %1337, i32* %1338, align 4
  %1339 = getelementptr inbounds float, float* %1324, i64 12
  %1340 = getelementptr inbounds float, float* %1325, i64 3
  %1341 = bitcast float* %1339 to i32*
  %1342 = load i32, i32* %1341, align 4
  %1343 = bitcast float* %1340 to i32*
  store i32 %1342, i32* %1343, align 4
  %1344 = getelementptr inbounds float, float* %1324, i64 16
  %1345 = getelementptr inbounds float, float* %1325, i64 4
  %1346 = bitcast float* %1344 to i32*
  %1347 = load i32, i32* %1346, align 4
  %1348 = bitcast float* %1345 to i32*
  store i32 %1347, i32* %1348, align 4
  %1349 = getelementptr inbounds float, float* %1324, i64 20
  %1350 = getelementptr inbounds float, float* %1325, i64 5
  %1351 = bitcast float* %1349 to i32*
  %1352 = load i32, i32* %1351, align 4
  %1353 = bitcast float* %1350 to i32*
  store i32 %1352, i32* %1353, align 4
  %1354 = getelementptr inbounds float, float* %1324, i64 24
  %1355 = getelementptr inbounds float, float* %1325, i64 6
  %1356 = bitcast float* %1354 to i32*
  %1357 = load i32, i32* %1356, align 4
  %1358 = bitcast float* %1355 to i32*
  store i32 %1357, i32* %1358, align 4
  %1359 = getelementptr inbounds float, float* %1324, i64 28
  %1360 = getelementptr inbounds float, float* %1325, i64 7
  %1361 = bitcast float* %1359 to i32*
  %1362 = load i32, i32* %1361, align 4
  %1363 = bitcast float* %1360 to i32*
  store i32 %1362, i32* %1363, align 4
  %1364 = getelementptr inbounds float, float* %1324, i64 32
  %1365 = getelementptr inbounds float, float* %1325, i64 8
  %1366 = add nuw i32 %1323, 8
  %1367 = icmp eq i32 %1366, %1249
  br i1 %1367, label %1368, label %1322, !llvm.loop !128

1368:                                             ; preds = %1322, %1317
  %1369 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1143, align 8
  br label %1370

1370:                                             ; preds = %1368, %1246, %1204
  %1371 = phi %"class.blink::IntRect"* [ %1369, %1368 ], [ %1247, %1246 ], [ %1206, %1204 ]
  %1372 = getelementptr inbounds i8, i8* %1210, i64 %1136
  %1373 = getelementptr inbounds float, float* %1209, i64 %1140
  %1374 = add nuw nsw i32 %1208, 1
  %1375 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1371, i64 0, i32 1, i32 1
  %1376 = load i32, i32* %1375, align 4
  %1377 = icmp slt i32 %1374, %1376
  %1378 = add i64 %1205, 1
  br i1 %1377, label %1204, label %1188

1379:                                             ; preds = %1190, %1168
  %1380 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1380, align 4
  br label %11653

1381:                                             ; preds = %1132
  %1382 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1383 = load i32, i32* %1382, align 8
  %1384 = sext i32 %1383 to i64
  %1385 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1386 = load i32, i32* %1385, align 8
  %1387 = sdiv i32 %1386, 4
  %1388 = sext i32 %1387 to i64
  %1389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1390 = load i8*, i8** %1389, align 8
  %1391 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1392 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1391, align 8
  %1393 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1392, i64 0, i32 0, i32 1
  %1394 = load i32, i32* %1393, align 4
  %1395 = mul nsw i32 %1394, %1383
  %1396 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1397 = load i32, i32* %1396, align 4
  %1398 = add nsw i32 %1395, %1397
  %1399 = sext i32 %1398 to i64
  %1400 = getelementptr inbounds i8, i8* %1390, i64 %1399
  %1401 = icmp slt i32 %1386, 0
  %1402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1403 = load i32, i32* %1402, align 8
  %1404 = icmp sgt i32 %1403, 1
  %1405 = and i1 %1401, %1404
  br i1 %1405, label %1406, label %1416

1406:                                             ; preds = %1381
  %1407 = add nsw i32 %1403, -1
  %1408 = sext i32 %1407 to i64
  %1409 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1410 = load i32, i32* %1409, align 4
  %1411 = sext i32 %1410 to i64
  %1412 = mul nsw i64 %1384, %1408
  %1413 = mul i64 %1412, %1411
  %1414 = sub i64 0, %1413
  %1415 = getelementptr inbounds i8, i8* %1400, i64 %1414
  br label %1418

1416:                                             ; preds = %1381
  %1417 = icmp sgt i32 %1403, 0
  br i1 %1417, label %1418, label %1615

1418:                                             ; preds = %1416, %1406
  %1419 = phi i8* [ %1415, %1406 ], [ %1400, %1416 ]
  %1420 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1421 = bitcast i8** %1420 to float**
  %1422 = load float*, float** %1421, align 8
  %1423 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1424 = bitcast i8** %1423 to float**
  %1425 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1426

1426:                                             ; preds = %1438, %1418
  %1427 = phi i32 [ %1403, %1418 ], [ %1439, %1438 ]
  %1428 = phi %"class.blink::IntRect"* [ %1392, %1418 ], [ %1440, %1438 ]
  %1429 = phi %"class.blink::IntRect"* [ %1392, %1418 ], [ %1441, %1438 ]
  %1430 = phi i32 [ 0, %1418 ], [ %1450, %1438 ]
  %1431 = phi float* [ %1422, %1418 ], [ %1443, %1438 ]
  %1432 = phi i8* [ %1419, %1418 ], [ %1449, %1438 ]
  %1433 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1429, i64 0, i32 1, i32 1
  %1434 = load i32, i32* %1433, align 4
  %1435 = icmp sgt i32 %1434, 0
  br i1 %1435, label %1452, label %1438

1436:                                             ; preds = %1606
  %1437 = load i32, i32* %1402, align 8
  br label %1438

1438:                                             ; preds = %1436, %1426
  %1439 = phi i32 [ %1427, %1426 ], [ %1437, %1436 ]
  %1440 = phi %"class.blink::IntRect"* [ %1428, %1426 ], [ %1607, %1436 ]
  %1441 = phi %"class.blink::IntRect"* [ %1429, %1426 ], [ %1607, %1436 ]
  %1442 = phi i8* [ %1432, %1426 ], [ %1608, %1436 ]
  %1443 = phi float* [ %1431, %1426 ], [ %1609, %1436 ]
  %1444 = phi i32 [ %1434, %1426 ], [ %1612, %1436 ]
  %1445 = load i32, i32* %1425, align 4
  %1446 = sub nsw i32 %1445, %1444
  %1447 = sext i32 %1446 to i64
  %1448 = mul nsw i64 %1447, %1384
  %1449 = getelementptr inbounds i8, i8* %1442, i64 %1448
  %1450 = add nuw nsw i32 %1430, 1
  %1451 = icmp slt i32 %1450, %1439
  br i1 %1451, label %1426, label %1615

1452:                                             ; preds = %1426, %1606
  %1453 = phi i64 [ %1614, %1606 ], [ 0, %1426 ]
  %1454 = phi %"class.blink::IntRect"* [ %1607, %1606 ], [ %1428, %1426 ]
  %1455 = phi %"class.blink::IntRect"* [ %1607, %1606 ], [ %1429, %1426 ]
  %1456 = phi i32 [ %1610, %1606 ], [ 0, %1426 ]
  %1457 = phi float* [ %1609, %1606 ], [ %1431, %1426 ]
  %1458 = phi i8* [ %1608, %1606 ], [ %1432, %1426 ]
  %1459 = mul i64 %1453, %1388
  %1460 = getelementptr float, float* %1431, i64 %1459
  %1461 = add i64 %1459, 1
  %1462 = getelementptr float, float* %1431, i64 %1461
  %1463 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1455, i64 0, i32 1, i32 0
  %1464 = load i32, i32* %1463, align 4
  %1465 = icmp eq i32 %1464, 0
  br i1 %1465, label %1606, label %1466

1466:                                             ; preds = %1452
  %1467 = load float*, float** %1424, align 8
  br label %1468

1468:                                             ; preds = %1468, %1466
  %1469 = phi i32 [ %1492, %1468 ], [ 0, %1466 ]
  %1470 = phi i8* [ %1490, %1468 ], [ %1458, %1466 ]
  %1471 = phi float* [ %1491, %1468 ], [ %1467, %1466 ]
  %1472 = load i8, i8* %1470, align 1
  %1473 = uitofp i8 %1472 to float
  %1474 = fmul float %1473, 0x3F70101020000000
  store float %1474, float* %1471, align 4
  %1475 = getelementptr inbounds i8, i8* %1470, i64 1
  %1476 = load i8, i8* %1475, align 1
  %1477 = uitofp i8 %1476 to float
  %1478 = fmul float %1477, 0x3F70101020000000
  %1479 = getelementptr inbounds float, float* %1471, i64 1
  store float %1478, float* %1479, align 4
  %1480 = getelementptr inbounds i8, i8* %1470, i64 2
  %1481 = load i8, i8* %1480, align 1
  %1482 = uitofp i8 %1481 to float
  %1483 = fmul float %1482, 0x3F70101020000000
  %1484 = getelementptr inbounds float, float* %1471, i64 2
  store float %1483, float* %1484, align 4
  %1485 = getelementptr inbounds i8, i8* %1470, i64 3
  %1486 = load i8, i8* %1485, align 1
  %1487 = uitofp i8 %1486 to float
  %1488 = fmul float %1487, 0x3F70101020000000
  %1489 = getelementptr inbounds float, float* %1471, i64 3
  store float %1488, float* %1489, align 4
  %1490 = getelementptr inbounds i8, i8* %1470, i64 4
  %1491 = getelementptr inbounds float, float* %1471, i64 4
  %1492 = add nuw i32 %1469, 1
  %1493 = icmp eq i32 %1492, %1464
  br i1 %1493, label %1494, label %1468

1494:                                             ; preds = %1468
  %1495 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1391, align 8
  %1496 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1495, i64 0, i32 1, i32 0
  %1497 = load i32, i32* %1496, align 4
  %1498 = icmp eq i32 %1497, 0
  br i1 %1498, label %1606, label %1499

1499:                                             ; preds = %1494
  %1500 = load float*, float** %1424, align 8
  %1501 = add i32 %1497, -1
  %1502 = zext i32 %1501 to i64
  %1503 = add nuw nsw i64 %1502, 1
  %1504 = icmp ult i64 %1503, 8
  br i1 %1504, label %1546, label %1505

1505:                                             ; preds = %1499
  %1506 = add i32 %1497, -1
  %1507 = zext i32 %1506 to i64
  %1508 = getelementptr float, float* %1462, i64 %1507
  %1509 = getelementptr float, float* %1500, i64 4
  %1510 = shl nuw nsw i64 %1507, 2
  %1511 = getelementptr float, float* %1509, i64 %1510
  %1512 = icmp ult float* %1460, %1511
  %1513 = icmp ult float* %1500, %1508
  %1514 = and i1 %1512, %1513
  br i1 %1514, label %1546, label %1515

1515:                                             ; preds = %1505
  %1516 = and i64 %1503, 8589934584
  %1517 = shl nuw nsw i64 %1516, 2
  %1518 = getelementptr float, float* %1500, i64 %1517
  %1519 = trunc i64 %1516 to i32
  %1520 = getelementptr float, float* %1457, i64 %1516
  br label %1521

1521:                                             ; preds = %1521, %1515
  %1522 = phi i64 [ 0, %1515 ], [ %1542, %1521 ]
  %1523 = shl i64 %1522, 2
  %1524 = shl i64 %1522, 2
  %1525 = or i64 %1524, 16
  %1526 = getelementptr float, float* %1457, i64 %1522
  %1527 = getelementptr inbounds float, float* %1500, i64 %1523
  %1528 = bitcast float* %1527 to <16 x float>*
  %1529 = getelementptr inbounds float, float* %1500, i64 %1525
  %1530 = bitcast float* %1529 to <16 x float>*
  %1531 = load <16 x float>, <16 x float>* %1528, align 4
  %1532 = load <16 x float>, <16 x float>* %1530, align 4
  %1533 = shufflevector <16 x float> %1531, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1534 = shufflevector <16 x float> %1532, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1535 = shufflevector <16 x float> %1531, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1536 = shufflevector <16 x float> %1532, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1537 = fmul <4 x float> %1535, %1533
  %1538 = fmul <4 x float> %1536, %1534
  %1539 = bitcast float* %1526 to <4 x float>*
  store <4 x float> %1537, <4 x float>* %1539, align 4, !alias.scope !129, !noalias !132
  %1540 = getelementptr float, float* %1526, i64 4
  %1541 = bitcast float* %1540 to <4 x float>*
  store <4 x float> %1538, <4 x float>* %1541, align 4, !alias.scope !129, !noalias !132
  %1542 = add i64 %1522, 8
  %1543 = icmp eq i64 %1542, %1516
  br i1 %1543, label %1544, label %1521, !llvm.loop !134

1544:                                             ; preds = %1521
  %1545 = icmp eq i64 %1503, %1516
  br i1 %1545, label %1604, label %1546

1546:                                             ; preds = %1544, %1505, %1499
  %1547 = phi float* [ %1500, %1505 ], [ %1500, %1499 ], [ %1518, %1544 ]
  %1548 = phi i32 [ 0, %1505 ], [ 0, %1499 ], [ %1519, %1544 ]
  %1549 = phi float* [ %1457, %1505 ], [ %1457, %1499 ], [ %1520, %1544 ]
  %1550 = sub i32 %1497, %1548
  %1551 = xor i32 %1548, -1
  %1552 = add i32 %1497, %1551
  %1553 = and i32 %1550, 3
  %1554 = icmp eq i32 %1553, 0
  br i1 %1554, label %1569, label %1555

1555:                                             ; preds = %1546, %1555
  %1556 = phi float* [ %1564, %1555 ], [ %1547, %1546 ]
  %1557 = phi i32 [ %1566, %1555 ], [ %1548, %1546 ]
  %1558 = phi float* [ %1565, %1555 ], [ %1549, %1546 ]
  %1559 = phi i32 [ %1567, %1555 ], [ %1553, %1546 ]
  %1560 = getelementptr inbounds float, float* %1556, i64 3
  %1561 = load float, float* %1560, align 4
  %1562 = load float, float* %1556, align 4
  %1563 = fmul float %1561, %1562
  store float %1563, float* %1558, align 4
  %1564 = getelementptr inbounds float, float* %1556, i64 4
  %1565 = getelementptr inbounds float, float* %1558, i64 1
  %1566 = add nuw i32 %1557, 1
  %1567 = add i32 %1559, -1
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1569, label %1555, !llvm.loop !135

1569:                                             ; preds = %1555, %1546
  %1570 = phi float* [ %1547, %1546 ], [ %1564, %1555 ]
  %1571 = phi i32 [ %1548, %1546 ], [ %1566, %1555 ]
  %1572 = phi float* [ %1549, %1546 ], [ %1565, %1555 ]
  %1573 = icmp ult i32 %1552, 3
  br i1 %1573, label %1604, label %1574

1574:                                             ; preds = %1569, %1574
  %1575 = phi float* [ %1600, %1574 ], [ %1570, %1569 ]
  %1576 = phi i32 [ %1602, %1574 ], [ %1571, %1569 ]
  %1577 = phi float* [ %1601, %1574 ], [ %1572, %1569 ]
  %1578 = getelementptr inbounds float, float* %1575, i64 3
  %1579 = load float, float* %1578, align 4
  %1580 = load float, float* %1575, align 4
  %1581 = fmul float %1579, %1580
  store float %1581, float* %1577, align 4
  %1582 = getelementptr inbounds float, float* %1575, i64 4
  %1583 = getelementptr inbounds float, float* %1577, i64 1
  %1584 = getelementptr inbounds float, float* %1575, i64 7
  %1585 = load float, float* %1584, align 4
  %1586 = load float, float* %1582, align 4
  %1587 = fmul float %1585, %1586
  store float %1587, float* %1583, align 4
  %1588 = getelementptr inbounds float, float* %1575, i64 8
  %1589 = getelementptr inbounds float, float* %1577, i64 2
  %1590 = getelementptr inbounds float, float* %1575, i64 11
  %1591 = load float, float* %1590, align 4
  %1592 = load float, float* %1588, align 4
  %1593 = fmul float %1591, %1592
  store float %1593, float* %1589, align 4
  %1594 = getelementptr inbounds float, float* %1575, i64 12
  %1595 = getelementptr inbounds float, float* %1577, i64 3
  %1596 = getelementptr inbounds float, float* %1575, i64 15
  %1597 = load float, float* %1596, align 4
  %1598 = load float, float* %1594, align 4
  %1599 = fmul float %1597, %1598
  store float %1599, float* %1595, align 4
  %1600 = getelementptr inbounds float, float* %1575, i64 16
  %1601 = getelementptr inbounds float, float* %1577, i64 4
  %1602 = add nuw i32 %1576, 4
  %1603 = icmp eq i32 %1602, %1497
  br i1 %1603, label %1604, label %1574, !llvm.loop !136

1604:                                             ; preds = %1569, %1574, %1544
  %1605 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1391, align 8
  br label %1606

1606:                                             ; preds = %1604, %1494, %1452
  %1607 = phi %"class.blink::IntRect"* [ %1605, %1604 ], [ %1495, %1494 ], [ %1454, %1452 ]
  %1608 = getelementptr inbounds i8, i8* %1458, i64 %1384
  %1609 = getelementptr inbounds float, float* %1457, i64 %1388
  %1610 = add nuw nsw i32 %1456, 1
  %1611 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1607, i64 0, i32 1, i32 1
  %1612 = load i32, i32* %1611, align 4
  %1613 = icmp slt i32 %1610, %1612
  %1614 = add i64 %1453, 1
  br i1 %1613, label %1452, label %1436

1615:                                             ; preds = %1438, %1416
  %1616 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1616, align 4
  br label %11653

1617:                                             ; preds = %1132
  %1618 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1619 = load i32, i32* %1618, align 8
  %1620 = sext i32 %1619 to i64
  %1621 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1622 = load i32, i32* %1621, align 8
  %1623 = sdiv i32 %1622, 4
  %1624 = sext i32 %1623 to i64
  %1625 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1626 = load i8*, i8** %1625, align 8
  %1627 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1628 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1627, align 8
  %1629 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1628, i64 0, i32 0, i32 1
  %1630 = load i32, i32* %1629, align 4
  %1631 = mul nsw i32 %1630, %1619
  %1632 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1633 = load i32, i32* %1632, align 4
  %1634 = add nsw i32 %1631, %1633
  %1635 = sext i32 %1634 to i64
  %1636 = getelementptr inbounds i8, i8* %1626, i64 %1635
  %1637 = icmp slt i32 %1622, 0
  %1638 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1639 = load i32, i32* %1638, align 8
  %1640 = icmp sgt i32 %1639, 1
  %1641 = and i1 %1637, %1640
  br i1 %1641, label %1642, label %1652

1642:                                             ; preds = %1617
  %1643 = add nsw i32 %1639, -1
  %1644 = sext i32 %1643 to i64
  %1645 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1646 = load i32, i32* %1645, align 4
  %1647 = sext i32 %1646 to i64
  %1648 = mul nsw i64 %1620, %1644
  %1649 = mul i64 %1648, %1647
  %1650 = sub i64 0, %1649
  %1651 = getelementptr inbounds i8, i8* %1636, i64 %1650
  br label %1654

1652:                                             ; preds = %1617
  %1653 = icmp sgt i32 %1639, 0
  br i1 %1653, label %1654, label %1872

1654:                                             ; preds = %1652, %1642
  %1655 = phi i8* [ %1651, %1642 ], [ %1636, %1652 ]
  %1656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1657 = bitcast i8** %1656 to float**
  %1658 = load float*, float** %1657, align 8
  %1659 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1660 = bitcast i8** %1659 to float**
  %1661 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1662

1662:                                             ; preds = %1674, %1654
  %1663 = phi i32 [ %1639, %1654 ], [ %1675, %1674 ]
  %1664 = phi %"class.blink::IntRect"* [ %1628, %1654 ], [ %1676, %1674 ]
  %1665 = phi %"class.blink::IntRect"* [ %1628, %1654 ], [ %1677, %1674 ]
  %1666 = phi i32 [ 0, %1654 ], [ %1686, %1674 ]
  %1667 = phi float* [ %1658, %1654 ], [ %1679, %1674 ]
  %1668 = phi i8* [ %1655, %1654 ], [ %1685, %1674 ]
  %1669 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1665, i64 0, i32 1, i32 1
  %1670 = load i32, i32* %1669, align 4
  %1671 = icmp sgt i32 %1670, 0
  br i1 %1671, label %1688, label %1674

1672:                                             ; preds = %1863
  %1673 = load i32, i32* %1638, align 8
  br label %1674

1674:                                             ; preds = %1672, %1662
  %1675 = phi i32 [ %1663, %1662 ], [ %1673, %1672 ]
  %1676 = phi %"class.blink::IntRect"* [ %1664, %1662 ], [ %1864, %1672 ]
  %1677 = phi %"class.blink::IntRect"* [ %1665, %1662 ], [ %1864, %1672 ]
  %1678 = phi i8* [ %1668, %1662 ], [ %1865, %1672 ]
  %1679 = phi float* [ %1667, %1662 ], [ %1866, %1672 ]
  %1680 = phi i32 [ %1670, %1662 ], [ %1869, %1672 ]
  %1681 = load i32, i32* %1661, align 4
  %1682 = sub nsw i32 %1681, %1680
  %1683 = sext i32 %1682 to i64
  %1684 = mul nsw i64 %1683, %1620
  %1685 = getelementptr inbounds i8, i8* %1678, i64 %1684
  %1686 = add nuw nsw i32 %1666, 1
  %1687 = icmp slt i32 %1686, %1675
  br i1 %1687, label %1662, label %1872

1688:                                             ; preds = %1662, %1863
  %1689 = phi i64 [ %1871, %1863 ], [ 0, %1662 ]
  %1690 = phi %"class.blink::IntRect"* [ %1864, %1863 ], [ %1664, %1662 ]
  %1691 = phi %"class.blink::IntRect"* [ %1864, %1863 ], [ %1665, %1662 ]
  %1692 = phi i32 [ %1867, %1863 ], [ 0, %1662 ]
  %1693 = phi float* [ %1866, %1863 ], [ %1667, %1662 ]
  %1694 = phi i8* [ %1865, %1863 ], [ %1668, %1662 ]
  %1695 = mul i64 %1689, %1624
  %1696 = getelementptr float, float* %1667, i64 %1695
  %1697 = add i64 %1695, 1
  %1698 = getelementptr float, float* %1667, i64 %1697
  %1699 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1691, i64 0, i32 1, i32 0
  %1700 = load i32, i32* %1699, align 4
  %1701 = icmp eq i32 %1700, 0
  br i1 %1701, label %1863, label %1702

1702:                                             ; preds = %1688
  %1703 = load float*, float** %1660, align 8
  br label %1704

1704:                                             ; preds = %1704, %1702
  %1705 = phi i32 [ %1728, %1704 ], [ 0, %1702 ]
  %1706 = phi i8* [ %1726, %1704 ], [ %1694, %1702 ]
  %1707 = phi float* [ %1727, %1704 ], [ %1703, %1702 ]
  %1708 = load i8, i8* %1706, align 1
  %1709 = uitofp i8 %1708 to float
  %1710 = fmul float %1709, 0x3F70101020000000
  store float %1710, float* %1707, align 4
  %1711 = getelementptr inbounds i8, i8* %1706, i64 1
  %1712 = load i8, i8* %1711, align 1
  %1713 = uitofp i8 %1712 to float
  %1714 = fmul float %1713, 0x3F70101020000000
  %1715 = getelementptr inbounds float, float* %1707, i64 1
  store float %1714, float* %1715, align 4
  %1716 = getelementptr inbounds i8, i8* %1706, i64 2
  %1717 = load i8, i8* %1716, align 1
  %1718 = uitofp i8 %1717 to float
  %1719 = fmul float %1718, 0x3F70101020000000
  %1720 = getelementptr inbounds float, float* %1707, i64 2
  store float %1719, float* %1720, align 4
  %1721 = getelementptr inbounds i8, i8* %1706, i64 3
  %1722 = load i8, i8* %1721, align 1
  %1723 = uitofp i8 %1722 to float
  %1724 = fmul float %1723, 0x3F70101020000000
  %1725 = getelementptr inbounds float, float* %1707, i64 3
  store float %1724, float* %1725, align 4
  %1726 = getelementptr inbounds i8, i8* %1706, i64 4
  %1727 = getelementptr inbounds float, float* %1707, i64 4
  %1728 = add nuw i32 %1705, 1
  %1729 = icmp eq i32 %1728, %1700
  br i1 %1729, label %1730, label %1704

1730:                                             ; preds = %1704
  %1731 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1627, align 8
  %1732 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1731, i64 0, i32 1, i32 0
  %1733 = load i32, i32* %1732, align 4
  %1734 = icmp eq i32 %1733, 0
  br i1 %1734, label %1863, label %1735

1735:                                             ; preds = %1730
  %1736 = load float*, float** %1660, align 8
  %1737 = add i32 %1733, -1
  %1738 = zext i32 %1737 to i64
  %1739 = add nuw nsw i64 %1738, 1
  %1740 = icmp ult i64 %1739, 4
  br i1 %1740, label %1813, label %1741

1741:                                             ; preds = %1735
  %1742 = add i32 %1733, -1
  %1743 = zext i32 %1742 to i64
  %1744 = getelementptr float, float* %1698, i64 %1743
  %1745 = getelementptr float, float* %1736, i64 4
  %1746 = shl nuw nsw i64 %1743, 2
  %1747 = getelementptr float, float* %1745, i64 %1746
  %1748 = icmp ult float* %1696, %1747
  %1749 = icmp ult float* %1736, %1744
  %1750 = and i1 %1748, %1749
  br i1 %1750, label %1813, label %1751

1751:                                             ; preds = %1741
  %1752 = and i64 %1739, 8589934588
  %1753 = trunc i64 %1752 to i32
  %1754 = shl nuw nsw i64 %1752, 2
  %1755 = getelementptr float, float* %1736, i64 %1754
  %1756 = getelementptr float, float* %1693, i64 %1752
  %1757 = add nsw i64 %1752, -4
  %1758 = lshr exact i64 %1757, 2
  %1759 = add nuw nsw i64 %1758, 1
  %1760 = and i64 %1759, 1
  %1761 = icmp eq i64 %1757, 0
  br i1 %1761, label %1795, label %1762

1762:                                             ; preds = %1751
  %1763 = sub nuw nsw i64 %1759, %1760
  br label %1764

1764:                                             ; preds = %1764, %1762
  %1765 = phi i64 [ 0, %1762 ], [ %1792, %1764 ]
  %1766 = phi i64 [ %1763, %1762 ], [ %1793, %1764 ]
  %1767 = shl i64 %1765, 2
  %1768 = getelementptr float, float* %1693, i64 %1765
  %1769 = getelementptr inbounds float, float* %1736, i64 %1767
  %1770 = bitcast float* %1769 to <16 x float>*
  %1771 = load <16 x float>, <16 x float>* %1770, align 4
  %1772 = shufflevector <16 x float> %1771, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1773 = shufflevector <16 x float> %1771, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1774 = fcmp une <4 x float> %1773, zeroinitializer
  %1775 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1773
  %1776 = select <4 x i1> %1774, <4 x float> %1775, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1777 = fmul <4 x float> %1772, %1776
  %1778 = bitcast float* %1768 to <4 x float>*
  store <4 x float> %1777, <4 x float>* %1778, align 4, !alias.scope !137, !noalias !140
  %1779 = or i64 %1765, 4
  %1780 = shl i64 %1779, 2
  %1781 = getelementptr float, float* %1693, i64 %1779
  %1782 = getelementptr inbounds float, float* %1736, i64 %1780
  %1783 = bitcast float* %1782 to <16 x float>*
  %1784 = load <16 x float>, <16 x float>* %1783, align 4
  %1785 = shufflevector <16 x float> %1784, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1786 = shufflevector <16 x float> %1784, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1787 = fcmp une <4 x float> %1786, zeroinitializer
  %1788 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1786
  %1789 = select <4 x i1> %1787, <4 x float> %1788, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1790 = fmul <4 x float> %1785, %1789
  %1791 = bitcast float* %1781 to <4 x float>*
  store <4 x float> %1790, <4 x float>* %1791, align 4, !alias.scope !137, !noalias !140
  %1792 = add i64 %1765, 8
  %1793 = add i64 %1766, -2
  %1794 = icmp eq i64 %1793, 0
  br i1 %1794, label %1795, label %1764, !llvm.loop !142

1795:                                             ; preds = %1764, %1751
  %1796 = phi i64 [ 0, %1751 ], [ %1792, %1764 ]
  %1797 = icmp eq i64 %1760, 0
  br i1 %1797, label %1811, label %1798

1798:                                             ; preds = %1795
  %1799 = shl i64 %1796, 2
  %1800 = getelementptr float, float* %1693, i64 %1796
  %1801 = getelementptr inbounds float, float* %1736, i64 %1799
  %1802 = bitcast float* %1801 to <16 x float>*
  %1803 = load <16 x float>, <16 x float>* %1802, align 4
  %1804 = shufflevector <16 x float> %1803, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1805 = shufflevector <16 x float> %1803, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1806 = fcmp une <4 x float> %1805, zeroinitializer
  %1807 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %1805
  %1808 = select <4 x i1> %1806, <4 x float> %1807, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %1809 = fmul <4 x float> %1804, %1808
  %1810 = bitcast float* %1800 to <4 x float>*
  store <4 x float> %1809, <4 x float>* %1810, align 4, !alias.scope !137, !noalias !140
  br label %1811

1811:                                             ; preds = %1795, %1798
  %1812 = icmp eq i64 %1739, %1752
  br i1 %1812, label %1861, label %1813

1813:                                             ; preds = %1811, %1741, %1735
  %1814 = phi i32 [ 0, %1741 ], [ 0, %1735 ], [ %1753, %1811 ]
  %1815 = phi float* [ %1736, %1741 ], [ %1736, %1735 ], [ %1755, %1811 ]
  %1816 = phi float* [ %1693, %1741 ], [ %1693, %1735 ], [ %1756, %1811 ]
  %1817 = sub i32 %1733, %1814
  %1818 = and i32 %1817, 1
  %1819 = icmp eq i32 %1818, 0
  br i1 %1819, label %1831, label %1820

1820:                                             ; preds = %1813
  %1821 = getelementptr inbounds float, float* %1815, i64 3
  %1822 = load float, float* %1821, align 4
  %1823 = fcmp une float %1822, 0.000000e+00
  %1824 = fdiv float 1.000000e+00, %1822
  %1825 = select i1 %1823, float %1824, float 1.000000e+00
  %1826 = load float, float* %1815, align 4
  %1827 = fmul float %1826, %1825
  store float %1827, float* %1816, align 4
  %1828 = getelementptr inbounds float, float* %1815, i64 4
  %1829 = getelementptr inbounds float, float* %1816, i64 1
  %1830 = add nuw i32 %1814, 1
  br label %1831

1831:                                             ; preds = %1820, %1813
  %1832 = phi i32 [ %1830, %1820 ], [ %1814, %1813 ]
  %1833 = phi float* [ %1828, %1820 ], [ %1815, %1813 ]
  %1834 = phi float* [ %1829, %1820 ], [ %1816, %1813 ]
  %1835 = add i32 %1814, 1
  %1836 = icmp eq i32 %1733, %1835
  br i1 %1836, label %1861, label %1837

1837:                                             ; preds = %1831, %1837
  %1838 = phi i32 [ %1859, %1837 ], [ %1832, %1831 ]
  %1839 = phi float* [ %1857, %1837 ], [ %1833, %1831 ]
  %1840 = phi float* [ %1858, %1837 ], [ %1834, %1831 ]
  %1841 = getelementptr inbounds float, float* %1839, i64 3
  %1842 = load float, float* %1841, align 4
  %1843 = fcmp une float %1842, 0.000000e+00
  %1844 = fdiv float 1.000000e+00, %1842
  %1845 = select i1 %1843, float %1844, float 1.000000e+00
  %1846 = load float, float* %1839, align 4
  %1847 = fmul float %1846, %1845
  store float %1847, float* %1840, align 4
  %1848 = getelementptr inbounds float, float* %1839, i64 4
  %1849 = getelementptr inbounds float, float* %1840, i64 1
  %1850 = getelementptr inbounds float, float* %1839, i64 7
  %1851 = load float, float* %1850, align 4
  %1852 = fcmp une float %1851, 0.000000e+00
  %1853 = fdiv float 1.000000e+00, %1851
  %1854 = select i1 %1852, float %1853, float 1.000000e+00
  %1855 = load float, float* %1848, align 4
  %1856 = fmul float %1855, %1854
  store float %1856, float* %1849, align 4
  %1857 = getelementptr inbounds float, float* %1839, i64 8
  %1858 = getelementptr inbounds float, float* %1840, i64 2
  %1859 = add nuw i32 %1838, 2
  %1860 = icmp eq i32 %1859, %1733
  br i1 %1860, label %1861, label %1837, !llvm.loop !143

1861:                                             ; preds = %1831, %1837, %1811
  %1862 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1627, align 8
  br label %1863

1863:                                             ; preds = %1861, %1730, %1688
  %1864 = phi %"class.blink::IntRect"* [ %1862, %1861 ], [ %1731, %1730 ], [ %1690, %1688 ]
  %1865 = getelementptr inbounds i8, i8* %1694, i64 %1620
  %1866 = getelementptr inbounds float, float* %1693, i64 %1624
  %1867 = add nuw nsw i32 %1692, 1
  %1868 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1864, i64 0, i32 1, i32 1
  %1869 = load i32, i32* %1868, align 4
  %1870 = icmp slt i32 %1867, %1869
  %1871 = add i64 %1689, 1
  br i1 %1870, label %1688, label %1672

1872:                                             ; preds = %1674, %1652
  %1873 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1873, align 4
  br label %11653

1874:                                             ; preds = %3
  %1875 = icmp eq i32 %2, 0
  br i1 %1875, label %1876, label %11653

1876:                                             ; preds = %1874
  %1877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1878 = load i32, i32* %1877, align 8
  %1879 = sext i32 %1878 to i64
  %1880 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1881 = load i32, i32* %1880, align 8
  %1882 = sext i32 %1881 to i64
  %1883 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1884 = load i8*, i8** %1883, align 8
  %1885 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1886 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1885, align 8
  %1887 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1886, i64 0, i32 0, i32 1
  %1888 = load i32, i32* %1887, align 4
  %1889 = mul nsw i32 %1888, %1878
  %1890 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1891 = load i32, i32* %1890, align 4
  %1892 = add nsw i32 %1889, %1891
  %1893 = sext i32 %1892 to i64
  %1894 = getelementptr inbounds i8, i8* %1884, i64 %1893
  %1895 = icmp slt i32 %1881, 0
  %1896 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1897 = load i32, i32* %1896, align 8
  %1898 = icmp sgt i32 %1897, 1
  %1899 = and i1 %1895, %1898
  br i1 %1899, label %1900, label %1910

1900:                                             ; preds = %1876
  %1901 = add nsw i32 %1897, -1
  %1902 = sext i32 %1901 to i64
  %1903 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1904 = load i32, i32* %1903, align 4
  %1905 = sext i32 %1904 to i64
  %1906 = mul nsw i64 %1879, %1902
  %1907 = mul i64 %1906, %1905
  %1908 = sub i64 0, %1907
  %1909 = getelementptr inbounds i8, i8* %1894, i64 %1908
  br label %1912

1910:                                             ; preds = %1876
  %1911 = icmp sgt i32 %1897, 0
  br i1 %1911, label %1912, label %2065

1912:                                             ; preds = %1910, %1900
  %1913 = phi i8* [ %1909, %1900 ], [ %1894, %1910 ]
  %1914 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1915 = load i8*, i8** %1914, align 8
  %1916 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1917

1917:                                             ; preds = %1929, %1912
  %1918 = phi i32 [ %1897, %1912 ], [ %1930, %1929 ]
  %1919 = phi %"class.blink::IntRect"* [ %1886, %1912 ], [ %1931, %1929 ]
  %1920 = phi %"class.blink::IntRect"* [ %1886, %1912 ], [ %1932, %1929 ]
  %1921 = phi i32 [ 0, %1912 ], [ %1941, %1929 ]
  %1922 = phi i8* [ %1915, %1912 ], [ %1934, %1929 ]
  %1923 = phi i8* [ %1913, %1912 ], [ %1940, %1929 ]
  %1924 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1920, i64 0, i32 1, i32 1
  %1925 = load i32, i32* %1924, align 4
  %1926 = icmp sgt i32 %1925, 0
  br i1 %1926, label %1943, label %1929

1927:                                             ; preds = %2056
  %1928 = load i32, i32* %1896, align 8
  br label %1929

1929:                                             ; preds = %1927, %1917
  %1930 = phi i32 [ %1918, %1917 ], [ %1928, %1927 ]
  %1931 = phi %"class.blink::IntRect"* [ %1919, %1917 ], [ %2057, %1927 ]
  %1932 = phi %"class.blink::IntRect"* [ %1920, %1917 ], [ %2057, %1927 ]
  %1933 = phi i8* [ %1923, %1917 ], [ %2058, %1927 ]
  %1934 = phi i8* [ %1922, %1917 ], [ %2059, %1927 ]
  %1935 = phi i32 [ %1925, %1917 ], [ %2062, %1927 ]
  %1936 = load i32, i32* %1916, align 4
  %1937 = sub nsw i32 %1936, %1935
  %1938 = sext i32 %1937 to i64
  %1939 = mul nsw i64 %1938, %1879
  %1940 = getelementptr inbounds i8, i8* %1933, i64 %1939
  %1941 = add nuw nsw i32 %1921, 1
  %1942 = icmp slt i32 %1941, %1930
  br i1 %1942, label %1917, label %2065

1943:                                             ; preds = %1917, %2056
  %1944 = phi i64 [ %2064, %2056 ], [ 0, %1917 ]
  %1945 = phi %"class.blink::IntRect"* [ %2057, %2056 ], [ %1919, %1917 ]
  %1946 = phi %"class.blink::IntRect"* [ %2057, %2056 ], [ %1920, %1917 ]
  %1947 = phi i32 [ %2060, %2056 ], [ 0, %1917 ]
  %1948 = phi i8* [ %2059, %2056 ], [ %1922, %1917 ]
  %1949 = phi i8* [ %2058, %2056 ], [ %1923, %1917 ]
  %1950 = mul i64 %1944, %1882
  %1951 = getelementptr i8, i8* %1922, i64 %1950
  %1952 = add i64 %1950, 1
  %1953 = getelementptr i8, i8* %1922, i64 %1952
  %1954 = mul i64 %1944, %1879
  %1955 = add i64 %1954, 3
  %1956 = getelementptr i8, i8* %1923, i64 %1955
  %1957 = add i64 %1954, 4
  %1958 = getelementptr i8, i8* %1923, i64 %1957
  %1959 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1946, i64 0, i32 1, i32 0
  %1960 = load i32, i32* %1959, align 4
  %1961 = icmp eq i32 %1960, 0
  br i1 %1961, label %2056, label %1962

1962:                                             ; preds = %1943
  %1963 = add i32 %1960, -1
  %1964 = zext i32 %1963 to i64
  %1965 = add nuw nsw i64 %1964, 1
  %1966 = icmp ult i64 %1965, 17
  br i1 %1966, label %1997, label %1967

1967:                                             ; preds = %1962
  %1968 = add i32 %1960, -1
  %1969 = zext i32 %1968 to i64
  %1970 = getelementptr i8, i8* %1953, i64 %1969
  %1971 = shl nuw nsw i64 %1969, 2
  %1972 = getelementptr i8, i8* %1958, i64 %1971
  %1973 = icmp ult i8* %1951, %1972
  %1974 = icmp ult i8* %1956, %1970
  %1975 = and i1 %1973, %1974
  br i1 %1975, label %1997, label %1976

1976:                                             ; preds = %1967
  %1977 = and i64 %1965, 15
  %1978 = icmp eq i64 %1977, 0
  %1979 = select i1 %1978, i64 16, i64 %1977
  %1980 = sub nsw i64 %1965, %1979
  %1981 = trunc i64 %1980 to i32
  %1982 = shl nsw i64 %1980, 2
  %1983 = getelementptr i8, i8* %1949, i64 %1982
  %1984 = getelementptr i8, i8* %1948, i64 %1980
  %1985 = getelementptr i8, i8* %1949, i64 3
  br label %1986

1986:                                             ; preds = %1986, %1976
  %1987 = phi i64 [ 0, %1976 ], [ %1995, %1986 ]
  %1988 = shl i64 %1987, 2
  %1989 = getelementptr i8, i8* %1948, i64 %1987
  %1990 = getelementptr inbounds i8, i8* %1985, i64 %1988
  %1991 = bitcast i8* %1990 to <64 x i8>*
  %1992 = load <64 x i8>, <64 x i8>* %1991, align 1
  %1993 = shufflevector <64 x i8> %1992, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %1994 = bitcast i8* %1989 to <16 x i8>*
  store <16 x i8> %1993, <16 x i8>* %1994, align 1, !alias.scope !144, !noalias !147
  %1995 = add i64 %1987, 16
  %1996 = icmp eq i64 %1995, %1980
  br i1 %1996, label %1997, label %1986, !llvm.loop !149

1997:                                             ; preds = %1986, %1967, %1962
  %1998 = phi i32 [ 0, %1967 ], [ 0, %1962 ], [ %1981, %1986 ]
  %1999 = phi i8* [ %1949, %1967 ], [ %1949, %1962 ], [ %1983, %1986 ]
  %2000 = phi i8* [ %1948, %1967 ], [ %1948, %1962 ], [ %1984, %1986 ]
  %2001 = sub i32 %1960, %1998
  %2002 = xor i32 %1998, -1
  %2003 = add i32 %1960, %2002
  %2004 = and i32 %2001, 7
  %2005 = icmp eq i32 %2004, 0
  br i1 %2005, label %2018, label %2006

2006:                                             ; preds = %1997, %2006
  %2007 = phi i32 [ %2015, %2006 ], [ %1998, %1997 ]
  %2008 = phi i8* [ %2013, %2006 ], [ %1999, %1997 ]
  %2009 = phi i8* [ %2014, %2006 ], [ %2000, %1997 ]
  %2010 = phi i32 [ %2016, %2006 ], [ %2004, %1997 ]
  %2011 = getelementptr inbounds i8, i8* %2008, i64 3
  %2012 = load i8, i8* %2011, align 1
  store i8 %2012, i8* %2009, align 1
  %2013 = getelementptr inbounds i8, i8* %2008, i64 4
  %2014 = getelementptr inbounds i8, i8* %2009, i64 1
  %2015 = add nuw i32 %2007, 1
  %2016 = add i32 %2010, -1
  %2017 = icmp eq i32 %2016, 0
  br i1 %2017, label %2018, label %2006, !llvm.loop !150

2018:                                             ; preds = %2006, %1997
  %2019 = phi i32 [ %1998, %1997 ], [ %2015, %2006 ]
  %2020 = phi i8* [ %1999, %1997 ], [ %2013, %2006 ]
  %2021 = phi i8* [ %2000, %1997 ], [ %2014, %2006 ]
  %2022 = icmp ult i32 %2003, 7
  br i1 %2022, label %2054, label %2023

2023:                                             ; preds = %2018, %2023
  %2024 = phi i32 [ %2052, %2023 ], [ %2019, %2018 ]
  %2025 = phi i8* [ %2050, %2023 ], [ %2020, %2018 ]
  %2026 = phi i8* [ %2051, %2023 ], [ %2021, %2018 ]
  %2027 = getelementptr inbounds i8, i8* %2025, i64 3
  %2028 = load i8, i8* %2027, align 1
  store i8 %2028, i8* %2026, align 1
  %2029 = getelementptr inbounds i8, i8* %2026, i64 1
  %2030 = getelementptr inbounds i8, i8* %2025, i64 7
  %2031 = load i8, i8* %2030, align 1
  store i8 %2031, i8* %2029, align 1
  %2032 = getelementptr inbounds i8, i8* %2026, i64 2
  %2033 = getelementptr inbounds i8, i8* %2025, i64 11
  %2034 = load i8, i8* %2033, align 1
  store i8 %2034, i8* %2032, align 1
  %2035 = getelementptr inbounds i8, i8* %2026, i64 3
  %2036 = getelementptr inbounds i8, i8* %2025, i64 15
  %2037 = load i8, i8* %2036, align 1
  store i8 %2037, i8* %2035, align 1
  %2038 = getelementptr inbounds i8, i8* %2026, i64 4
  %2039 = getelementptr inbounds i8, i8* %2025, i64 19
  %2040 = load i8, i8* %2039, align 1
  store i8 %2040, i8* %2038, align 1
  %2041 = getelementptr inbounds i8, i8* %2026, i64 5
  %2042 = getelementptr inbounds i8, i8* %2025, i64 23
  %2043 = load i8, i8* %2042, align 1
  store i8 %2043, i8* %2041, align 1
  %2044 = getelementptr inbounds i8, i8* %2026, i64 6
  %2045 = getelementptr inbounds i8, i8* %2025, i64 27
  %2046 = load i8, i8* %2045, align 1
  store i8 %2046, i8* %2044, align 1
  %2047 = getelementptr inbounds i8, i8* %2026, i64 7
  %2048 = getelementptr inbounds i8, i8* %2025, i64 31
  %2049 = load i8, i8* %2048, align 1
  store i8 %2049, i8* %2047, align 1
  %2050 = getelementptr inbounds i8, i8* %2025, i64 32
  %2051 = getelementptr inbounds i8, i8* %2026, i64 8
  %2052 = add nuw i32 %2024, 8
  %2053 = icmp eq i32 %2052, %1960
  br i1 %2053, label %2054, label %2023, !llvm.loop !151

2054:                                             ; preds = %2023, %2018
  %2055 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1885, align 8
  br label %2056

2056:                                             ; preds = %2054, %1943
  %2057 = phi %"class.blink::IntRect"* [ %2055, %2054 ], [ %1945, %1943 ]
  %2058 = getelementptr inbounds i8, i8* %1949, i64 %1879
  %2059 = getelementptr inbounds i8, i8* %1948, i64 %1882
  %2060 = add nuw nsw i32 %1947, 1
  %2061 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2057, i64 0, i32 1, i32 1
  %2062 = load i32, i32* %2061, align 4
  %2063 = icmp slt i32 %2060, %2062
  %2064 = add i64 %1944, 1
  br i1 %2063, label %1943, label %1927

2065:                                             ; preds = %1929, %1910
  %2066 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2066, align 4
  br label %11653

2067:                                             ; preds = %3
  %2068 = icmp eq i32 %2, 0
  br i1 %2068, label %2069, label %11653

2069:                                             ; preds = %2067
  %2070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2071 = load i32, i32* %2070, align 8
  %2072 = sext i32 %2071 to i64
  %2073 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2074 = load i32, i32* %2073, align 8
  %2075 = sdiv i32 %2074, 2
  %2076 = sext i32 %2075 to i64
  %2077 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2078 = load i8*, i8** %2077, align 8
  %2079 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2080 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2079, align 8
  %2081 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2080, i64 0, i32 0, i32 1
  %2082 = load i32, i32* %2081, align 4
  %2083 = mul nsw i32 %2082, %2071
  %2084 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2085 = load i32, i32* %2084, align 4
  %2086 = add nsw i32 %2083, %2085
  %2087 = sext i32 %2086 to i64
  %2088 = getelementptr inbounds i8, i8* %2078, i64 %2087
  %2089 = icmp slt i32 %2074, 0
  %2090 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2091 = load i32, i32* %2090, align 8
  %2092 = icmp sgt i32 %2091, 1
  %2093 = and i1 %2089, %2092
  br i1 %2093, label %2094, label %2104

2094:                                             ; preds = %2069
  %2095 = add nsw i32 %2091, -1
  %2096 = sext i32 %2095 to i64
  %2097 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2098 = load i32, i32* %2097, align 4
  %2099 = sext i32 %2098 to i64
  %2100 = mul nsw i64 %2072, %2096
  %2101 = mul i64 %2100, %2099
  %2102 = sub i64 0, %2101
  %2103 = getelementptr inbounds i8, i8* %2088, i64 %2102
  br label %2106

2104:                                             ; preds = %2069
  %2105 = icmp sgt i32 %2091, 0
  br i1 %2105, label %2106, label %2254

2106:                                             ; preds = %2104, %2094
  %2107 = phi i8* [ %2103, %2094 ], [ %2088, %2104 ]
  %2108 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2109 = bitcast i8** %2108 to i16**
  %2110 = load i16*, i16** %2109, align 8
  %2111 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2112 = bitcast i8** %2111 to float**
  %2113 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2114

2114:                                             ; preds = %2126, %2106
  %2115 = phi i32 [ %2091, %2106 ], [ %2127, %2126 ]
  %2116 = phi %"class.blink::IntRect"* [ %2080, %2106 ], [ %2128, %2126 ]
  %2117 = phi %"class.blink::IntRect"* [ %2080, %2106 ], [ %2129, %2126 ]
  %2118 = phi i32 [ 0, %2106 ], [ %2138, %2126 ]
  %2119 = phi i16* [ %2110, %2106 ], [ %2131, %2126 ]
  %2120 = phi i8* [ %2107, %2106 ], [ %2137, %2126 ]
  %2121 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2117, i64 0, i32 1, i32 1
  %2122 = load i32, i32* %2121, align 4
  %2123 = icmp sgt i32 %2122, 0
  br i1 %2123, label %2140, label %2126

2124:                                             ; preds = %2246
  %2125 = load i32, i32* %2090, align 8
  br label %2126

2126:                                             ; preds = %2124, %2114
  %2127 = phi i32 [ %2115, %2114 ], [ %2125, %2124 ]
  %2128 = phi %"class.blink::IntRect"* [ %2116, %2114 ], [ %2247, %2124 ]
  %2129 = phi %"class.blink::IntRect"* [ %2117, %2114 ], [ %2247, %2124 ]
  %2130 = phi i8* [ %2120, %2114 ], [ %2248, %2124 ]
  %2131 = phi i16* [ %2119, %2114 ], [ %2249, %2124 ]
  %2132 = phi i32 [ %2122, %2114 ], [ %2252, %2124 ]
  %2133 = load i32, i32* %2113, align 4
  %2134 = sub nsw i32 %2133, %2132
  %2135 = sext i32 %2134 to i64
  %2136 = mul nsw i64 %2135, %2072
  %2137 = getelementptr inbounds i8, i8* %2130, i64 %2136
  %2138 = add nuw nsw i32 %2118, 1
  %2139 = icmp slt i32 %2138, %2127
  br i1 %2139, label %2114, label %2254

2140:                                             ; preds = %2114, %2246
  %2141 = phi %"class.blink::IntRect"* [ %2247, %2246 ], [ %2116, %2114 ]
  %2142 = phi %"class.blink::IntRect"* [ %2247, %2246 ], [ %2117, %2114 ]
  %2143 = phi i32 [ %2250, %2246 ], [ 0, %2114 ]
  %2144 = phi i16* [ %2249, %2246 ], [ %2119, %2114 ]
  %2145 = phi i8* [ %2248, %2246 ], [ %2120, %2114 ]
  %2146 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2142, i64 0, i32 1, i32 0
  %2147 = load i32, i32* %2146, align 4
  %2148 = icmp eq i32 %2147, 0
  br i1 %2148, label %2246, label %2149

2149:                                             ; preds = %2140
  %2150 = load float*, float** %2112, align 8
  br label %2151

2151:                                             ; preds = %2151, %2149
  %2152 = phi i32 [ %2175, %2151 ], [ 0, %2149 ]
  %2153 = phi i8* [ %2173, %2151 ], [ %2145, %2149 ]
  %2154 = phi float* [ %2174, %2151 ], [ %2150, %2149 ]
  %2155 = load i8, i8* %2153, align 1
  %2156 = uitofp i8 %2155 to float
  %2157 = fmul float %2156, 0x3F70101020000000
  store float %2157, float* %2154, align 4
  %2158 = getelementptr inbounds i8, i8* %2153, i64 1
  %2159 = load i8, i8* %2158, align 1
  %2160 = uitofp i8 %2159 to float
  %2161 = fmul float %2160, 0x3F70101020000000
  %2162 = getelementptr inbounds float, float* %2154, i64 1
  store float %2161, float* %2162, align 4
  %2163 = getelementptr inbounds i8, i8* %2153, i64 2
  %2164 = load i8, i8* %2163, align 1
  %2165 = uitofp i8 %2164 to float
  %2166 = fmul float %2165, 0x3F70101020000000
  %2167 = getelementptr inbounds float, float* %2154, i64 2
  store float %2166, float* %2167, align 4
  %2168 = getelementptr inbounds i8, i8* %2153, i64 3
  %2169 = load i8, i8* %2168, align 1
  %2170 = uitofp i8 %2169 to float
  %2171 = fmul float %2170, 0x3F70101020000000
  %2172 = getelementptr inbounds float, float* %2154, i64 3
  store float %2171, float* %2172, align 4
  %2173 = getelementptr inbounds i8, i8* %2153, i64 4
  %2174 = getelementptr inbounds float, float* %2154, i64 4
  %2175 = add nuw i32 %2152, 1
  %2176 = icmp eq i32 %2175, %2147
  br i1 %2176, label %2177, label %2151

2177:                                             ; preds = %2151
  %2178 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2079, align 8
  %2179 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2178, i64 0, i32 1, i32 0
  %2180 = load i32, i32* %2179, align 4
  %2181 = icmp eq i32 %2180, 0
  br i1 %2181, label %2246, label %2182

2182:                                             ; preds = %2177
  %2183 = load float*, float** %2112, align 8
  %2184 = and i32 %2180, 1
  %2185 = icmp eq i32 %2180, 1
  br i1 %2185, label %2225, label %2186

2186:                                             ; preds = %2182
  %2187 = sub i32 %2180, %2184
  br label %2188

2188:                                             ; preds = %2188, %2186
  %2189 = phi float* [ %2183, %2186 ], [ %2221, %2188 ]
  %2190 = phi i16* [ %2144, %2186 ], [ %2222, %2188 ]
  %2191 = phi i32 [ %2187, %2186 ], [ %2223, %2188 ]
  %2192 = getelementptr inbounds float, float* %2189, i64 3
  %2193 = bitcast float* %2192 to i32*
  %2194 = load i32, i32* %2193, align 4
  %2195 = lshr i32 %2194, 23
  %2196 = zext i32 %2195 to i64
  %2197 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2196
  %2198 = load i16, i16* %2197, align 2
  %2199 = and i32 %2194, 8388607
  %2200 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2196
  %2201 = load i8, i8* %2200, align 1
  %2202 = zext i8 %2201 to i32
  %2203 = lshr i32 %2199, %2202
  %2204 = trunc i32 %2203 to i16
  %2205 = add i16 %2198, %2204
  store i16 %2205, i16* %2190, align 2
  %2206 = getelementptr inbounds i16, i16* %2190, i64 1
  %2207 = getelementptr inbounds float, float* %2189, i64 7
  %2208 = bitcast float* %2207 to i32*
  %2209 = load i32, i32* %2208, align 4
  %2210 = lshr i32 %2209, 23
  %2211 = zext i32 %2210 to i64
  %2212 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2211
  %2213 = load i16, i16* %2212, align 2
  %2214 = and i32 %2209, 8388607
  %2215 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2211
  %2216 = load i8, i8* %2215, align 1
  %2217 = zext i8 %2216 to i32
  %2218 = lshr i32 %2214, %2217
  %2219 = trunc i32 %2218 to i16
  %2220 = add i16 %2213, %2219
  store i16 %2220, i16* %2206, align 2
  %2221 = getelementptr inbounds float, float* %2189, i64 8
  %2222 = getelementptr inbounds i16, i16* %2190, i64 2
  %2223 = add i32 %2191, -2
  %2224 = icmp eq i32 %2223, 0
  br i1 %2224, label %2225, label %2188

2225:                                             ; preds = %2188, %2182
  %2226 = phi float* [ %2183, %2182 ], [ %2221, %2188 ]
  %2227 = phi i16* [ %2144, %2182 ], [ %2222, %2188 ]
  %2228 = icmp eq i32 %2184, 0
  br i1 %2228, label %2244, label %2229

2229:                                             ; preds = %2225
  %2230 = getelementptr inbounds float, float* %2226, i64 3
  %2231 = bitcast float* %2230 to i32*
  %2232 = load i32, i32* %2231, align 4
  %2233 = lshr i32 %2232, 23
  %2234 = zext i32 %2233 to i64
  %2235 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2234
  %2236 = load i16, i16* %2235, align 2
  %2237 = and i32 %2232, 8388607
  %2238 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2234
  %2239 = load i8, i8* %2238, align 1
  %2240 = zext i8 %2239 to i32
  %2241 = lshr i32 %2237, %2240
  %2242 = trunc i32 %2241 to i16
  %2243 = add i16 %2236, %2242
  store i16 %2243, i16* %2227, align 2
  br label %2244

2244:                                             ; preds = %2225, %2229
  %2245 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2079, align 8
  br label %2246

2246:                                             ; preds = %2244, %2177, %2140
  %2247 = phi %"class.blink::IntRect"* [ %2245, %2244 ], [ %2178, %2177 ], [ %2141, %2140 ]
  %2248 = getelementptr inbounds i8, i8* %2145, i64 %2072
  %2249 = getelementptr inbounds i16, i16* %2144, i64 %2076
  %2250 = add nuw nsw i32 %2143, 1
  %2251 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2247, i64 0, i32 1, i32 1
  %2252 = load i32, i32* %2251, align 4
  %2253 = icmp slt i32 %2250, %2252
  br i1 %2253, label %2140, label %2124

2254:                                             ; preds = %2126, %2104
  %2255 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2255, align 4
  br label %11653

2256:                                             ; preds = %3
  %2257 = icmp eq i32 %2, 0
  br i1 %2257, label %2258, label %11653

2258:                                             ; preds = %2256
  %2259 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2260 = load i32, i32* %2259, align 8
  %2261 = sext i32 %2260 to i64
  %2262 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2263 = load i32, i32* %2262, align 8
  %2264 = sdiv i32 %2263, 4
  %2265 = sext i32 %2264 to i64
  %2266 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2267 = load i8*, i8** %2266, align 8
  %2268 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2269 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2268, align 8
  %2270 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2269, i64 0, i32 0, i32 1
  %2271 = load i32, i32* %2270, align 4
  %2272 = mul nsw i32 %2271, %2260
  %2273 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2274 = load i32, i32* %2273, align 4
  %2275 = add nsw i32 %2272, %2274
  %2276 = sext i32 %2275 to i64
  %2277 = getelementptr inbounds i8, i8* %2267, i64 %2276
  %2278 = icmp slt i32 %2263, 0
  %2279 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2280 = load i32, i32* %2279, align 8
  %2281 = icmp sgt i32 %2280, 1
  %2282 = and i1 %2278, %2281
  br i1 %2282, label %2283, label %2293

2283:                                             ; preds = %2258
  %2284 = add nsw i32 %2280, -1
  %2285 = sext i32 %2284 to i64
  %2286 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2287 = load i32, i32* %2286, align 4
  %2288 = sext i32 %2287 to i64
  %2289 = mul nsw i64 %2261, %2285
  %2290 = mul i64 %2289, %2288
  %2291 = sub i64 0, %2290
  %2292 = getelementptr inbounds i8, i8* %2277, i64 %2291
  br label %2295

2293:                                             ; preds = %2258
  %2294 = icmp sgt i32 %2280, 0
  br i1 %2294, label %2295, label %2509

2295:                                             ; preds = %2293, %2283
  %2296 = phi i8* [ %2292, %2283 ], [ %2277, %2293 ]
  %2297 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2298 = bitcast i8** %2297 to float**
  %2299 = load float*, float** %2298, align 8
  %2300 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2301 = bitcast i8** %2300 to float**
  %2302 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2303

2303:                                             ; preds = %2315, %2295
  %2304 = phi i32 [ %2280, %2295 ], [ %2316, %2315 ]
  %2305 = phi %"class.blink::IntRect"* [ %2269, %2295 ], [ %2317, %2315 ]
  %2306 = phi %"class.blink::IntRect"* [ %2269, %2295 ], [ %2318, %2315 ]
  %2307 = phi i32 [ 0, %2295 ], [ %2327, %2315 ]
  %2308 = phi float* [ %2299, %2295 ], [ %2320, %2315 ]
  %2309 = phi i8* [ %2296, %2295 ], [ %2326, %2315 ]
  %2310 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2306, i64 0, i32 1, i32 1
  %2311 = load i32, i32* %2310, align 4
  %2312 = icmp sgt i32 %2311, 0
  br i1 %2312, label %2329, label %2315

2313:                                             ; preds = %2500
  %2314 = load i32, i32* %2279, align 8
  br label %2315

2315:                                             ; preds = %2313, %2303
  %2316 = phi i32 [ %2304, %2303 ], [ %2314, %2313 ]
  %2317 = phi %"class.blink::IntRect"* [ %2305, %2303 ], [ %2501, %2313 ]
  %2318 = phi %"class.blink::IntRect"* [ %2306, %2303 ], [ %2501, %2313 ]
  %2319 = phi i8* [ %2309, %2303 ], [ %2502, %2313 ]
  %2320 = phi float* [ %2308, %2303 ], [ %2503, %2313 ]
  %2321 = phi i32 [ %2311, %2303 ], [ %2506, %2313 ]
  %2322 = load i32, i32* %2302, align 4
  %2323 = sub nsw i32 %2322, %2321
  %2324 = sext i32 %2323 to i64
  %2325 = mul nsw i64 %2324, %2261
  %2326 = getelementptr inbounds i8, i8* %2319, i64 %2325
  %2327 = add nuw nsw i32 %2307, 1
  %2328 = icmp slt i32 %2327, %2316
  br i1 %2328, label %2303, label %2509

2329:                                             ; preds = %2303, %2500
  %2330 = phi i64 [ %2508, %2500 ], [ 0, %2303 ]
  %2331 = phi %"class.blink::IntRect"* [ %2501, %2500 ], [ %2305, %2303 ]
  %2332 = phi %"class.blink::IntRect"* [ %2501, %2500 ], [ %2306, %2303 ]
  %2333 = phi i32 [ %2504, %2500 ], [ 0, %2303 ]
  %2334 = phi float* [ %2503, %2500 ], [ %2308, %2303 ]
  %2335 = phi i8* [ %2502, %2500 ], [ %2309, %2303 ]
  %2336 = mul i64 %2330, %2265
  %2337 = getelementptr float, float* %2308, i64 %2336
  %2338 = add i64 %2336, 1
  %2339 = getelementptr float, float* %2308, i64 %2338
  %2340 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2332, i64 0, i32 1, i32 0
  %2341 = load i32, i32* %2340, align 4
  %2342 = icmp eq i32 %2341, 0
  br i1 %2342, label %2500, label %2343

2343:                                             ; preds = %2329
  %2344 = load float*, float** %2301, align 8
  br label %2345

2345:                                             ; preds = %2345, %2343
  %2346 = phi i32 [ %2369, %2345 ], [ 0, %2343 ]
  %2347 = phi i8* [ %2367, %2345 ], [ %2335, %2343 ]
  %2348 = phi float* [ %2368, %2345 ], [ %2344, %2343 ]
  %2349 = load i8, i8* %2347, align 1
  %2350 = uitofp i8 %2349 to float
  %2351 = fmul float %2350, 0x3F70101020000000
  store float %2351, float* %2348, align 4
  %2352 = getelementptr inbounds i8, i8* %2347, i64 1
  %2353 = load i8, i8* %2352, align 1
  %2354 = uitofp i8 %2353 to float
  %2355 = fmul float %2354, 0x3F70101020000000
  %2356 = getelementptr inbounds float, float* %2348, i64 1
  store float %2355, float* %2356, align 4
  %2357 = getelementptr inbounds i8, i8* %2347, i64 2
  %2358 = load i8, i8* %2357, align 1
  %2359 = uitofp i8 %2358 to float
  %2360 = fmul float %2359, 0x3F70101020000000
  %2361 = getelementptr inbounds float, float* %2348, i64 2
  store float %2360, float* %2361, align 4
  %2362 = getelementptr inbounds i8, i8* %2347, i64 3
  %2363 = load i8, i8* %2362, align 1
  %2364 = uitofp i8 %2363 to float
  %2365 = fmul float %2364, 0x3F70101020000000
  %2366 = getelementptr inbounds float, float* %2348, i64 3
  store float %2365, float* %2366, align 4
  %2367 = getelementptr inbounds i8, i8* %2347, i64 4
  %2368 = getelementptr inbounds float, float* %2348, i64 4
  %2369 = add nuw i32 %2346, 1
  %2370 = icmp eq i32 %2369, %2341
  br i1 %2370, label %2371, label %2345

2371:                                             ; preds = %2345
  %2372 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2268, align 8
  %2373 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2372, i64 0, i32 1, i32 0
  %2374 = load i32, i32* %2373, align 4
  %2375 = icmp eq i32 %2374, 0
  br i1 %2375, label %2500, label %2376

2376:                                             ; preds = %2371
  %2377 = load float*, float** %2301, align 8
  %2378 = add i32 %2374, -1
  %2379 = zext i32 %2378 to i64
  %2380 = add nuw nsw i64 %2379, 1
  %2381 = icmp ult i64 %2380, 9
  br i1 %2381, label %2423, label %2382

2382:                                             ; preds = %2376
  %2383 = add i32 %2374, -1
  %2384 = zext i32 %2383 to i64
  %2385 = getelementptr float, float* %2339, i64 %2384
  %2386 = getelementptr float, float* %2377, i64 3
  %2387 = getelementptr float, float* %2377, i64 4
  %2388 = shl nuw nsw i64 %2384, 2
  %2389 = getelementptr float, float* %2387, i64 %2388
  %2390 = icmp ult float* %2337, %2389
  %2391 = icmp ult float* %2386, %2385
  %2392 = and i1 %2390, %2391
  br i1 %2392, label %2423, label %2393

2393:                                             ; preds = %2382
  %2394 = and i64 %2380, 7
  %2395 = icmp eq i64 %2394, 0
  %2396 = select i1 %2395, i64 8, i64 %2394
  %2397 = sub nsw i64 %2380, %2396
  %2398 = trunc i64 %2397 to i32
  %2399 = shl nsw i64 %2397, 2
  %2400 = getelementptr float, float* %2377, i64 %2399
  %2401 = getelementptr float, float* %2334, i64 %2397
  %2402 = getelementptr float, float* %2377, i64 3
  %2403 = getelementptr float, float* %2377, i64 3
  br label %2404

2404:                                             ; preds = %2404, %2393
  %2405 = phi i64 [ 0, %2393 ], [ %2421, %2404 ]
  %2406 = shl i64 %2405, 2
  %2407 = shl i64 %2405, 2
  %2408 = or i64 %2407, 16
  %2409 = getelementptr float, float* %2334, i64 %2405
  %2410 = getelementptr inbounds float, float* %2402, i64 %2406
  %2411 = getelementptr inbounds float, float* %2403, i64 %2408
  %2412 = bitcast float* %2410 to <16 x i32>*
  %2413 = bitcast float* %2411 to <16 x i32>*
  %2414 = load <16 x i32>, <16 x i32>* %2412, align 4
  %2415 = load <16 x i32>, <16 x i32>* %2413, align 4
  %2416 = shufflevector <16 x i32> %2414, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2417 = shufflevector <16 x i32> %2415, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2418 = bitcast float* %2409 to <4 x i32>*
  store <4 x i32> %2416, <4 x i32>* %2418, align 4, !alias.scope !152, !noalias !155
  %2419 = getelementptr float, float* %2409, i64 4
  %2420 = bitcast float* %2419 to <4 x i32>*
  store <4 x i32> %2417, <4 x i32>* %2420, align 4, !alias.scope !152, !noalias !155
  %2421 = add i64 %2405, 8
  %2422 = icmp eq i64 %2421, %2397
  br i1 %2422, label %2423, label %2404, !llvm.loop !157

2423:                                             ; preds = %2404, %2382, %2376
  %2424 = phi i32 [ 0, %2382 ], [ 0, %2376 ], [ %2398, %2404 ]
  %2425 = phi float* [ %2377, %2382 ], [ %2377, %2376 ], [ %2400, %2404 ]
  %2426 = phi float* [ %2334, %2382 ], [ %2334, %2376 ], [ %2401, %2404 ]
  %2427 = sub i32 %2374, %2424
  %2428 = xor i32 %2424, -1
  %2429 = add i32 %2374, %2428
  %2430 = and i32 %2427, 7
  %2431 = icmp eq i32 %2430, 0
  br i1 %2431, label %2446, label %2432

2432:                                             ; preds = %2423, %2432
  %2433 = phi i32 [ %2443, %2432 ], [ %2424, %2423 ]
  %2434 = phi float* [ %2441, %2432 ], [ %2425, %2423 ]
  %2435 = phi float* [ %2442, %2432 ], [ %2426, %2423 ]
  %2436 = phi i32 [ %2444, %2432 ], [ %2430, %2423 ]
  %2437 = getelementptr inbounds float, float* %2434, i64 3
  %2438 = bitcast float* %2437 to i32*
  %2439 = load i32, i32* %2438, align 4
  %2440 = bitcast float* %2435 to i32*
  store i32 %2439, i32* %2440, align 4
  %2441 = getelementptr inbounds float, float* %2434, i64 4
  %2442 = getelementptr inbounds float, float* %2435, i64 1
  %2443 = add nuw i32 %2433, 1
  %2444 = add i32 %2436, -1
  %2445 = icmp eq i32 %2444, 0
  br i1 %2445, label %2446, label %2432, !llvm.loop !158

2446:                                             ; preds = %2432, %2423
  %2447 = phi i32 [ %2424, %2423 ], [ %2443, %2432 ]
  %2448 = phi float* [ %2425, %2423 ], [ %2441, %2432 ]
  %2449 = phi float* [ %2426, %2423 ], [ %2442, %2432 ]
  %2450 = icmp ult i32 %2429, 7
  br i1 %2450, label %2498, label %2451

2451:                                             ; preds = %2446, %2451
  %2452 = phi i32 [ %2496, %2451 ], [ %2447, %2446 ]
  %2453 = phi float* [ %2494, %2451 ], [ %2448, %2446 ]
  %2454 = phi float* [ %2495, %2451 ], [ %2449, %2446 ]
  %2455 = getelementptr inbounds float, float* %2453, i64 3
  %2456 = bitcast float* %2455 to i32*
  %2457 = load i32, i32* %2456, align 4
  %2458 = bitcast float* %2454 to i32*
  store i32 %2457, i32* %2458, align 4
  %2459 = getelementptr inbounds float, float* %2454, i64 1
  %2460 = getelementptr inbounds float, float* %2453, i64 7
  %2461 = bitcast float* %2460 to i32*
  %2462 = load i32, i32* %2461, align 4
  %2463 = bitcast float* %2459 to i32*
  store i32 %2462, i32* %2463, align 4
  %2464 = getelementptr inbounds float, float* %2454, i64 2
  %2465 = getelementptr inbounds float, float* %2453, i64 11
  %2466 = bitcast float* %2465 to i32*
  %2467 = load i32, i32* %2466, align 4
  %2468 = bitcast float* %2464 to i32*
  store i32 %2467, i32* %2468, align 4
  %2469 = getelementptr inbounds float, float* %2454, i64 3
  %2470 = getelementptr inbounds float, float* %2453, i64 15
  %2471 = bitcast float* %2470 to i32*
  %2472 = load i32, i32* %2471, align 4
  %2473 = bitcast float* %2469 to i32*
  store i32 %2472, i32* %2473, align 4
  %2474 = getelementptr inbounds float, float* %2454, i64 4
  %2475 = getelementptr inbounds float, float* %2453, i64 19
  %2476 = bitcast float* %2475 to i32*
  %2477 = load i32, i32* %2476, align 4
  %2478 = bitcast float* %2474 to i32*
  store i32 %2477, i32* %2478, align 4
  %2479 = getelementptr inbounds float, float* %2454, i64 5
  %2480 = getelementptr inbounds float, float* %2453, i64 23
  %2481 = bitcast float* %2480 to i32*
  %2482 = load i32, i32* %2481, align 4
  %2483 = bitcast float* %2479 to i32*
  store i32 %2482, i32* %2483, align 4
  %2484 = getelementptr inbounds float, float* %2454, i64 6
  %2485 = getelementptr inbounds float, float* %2453, i64 27
  %2486 = bitcast float* %2485 to i32*
  %2487 = load i32, i32* %2486, align 4
  %2488 = bitcast float* %2484 to i32*
  store i32 %2487, i32* %2488, align 4
  %2489 = getelementptr inbounds float, float* %2454, i64 7
  %2490 = getelementptr inbounds float, float* %2453, i64 31
  %2491 = bitcast float* %2490 to i32*
  %2492 = load i32, i32* %2491, align 4
  %2493 = bitcast float* %2489 to i32*
  store i32 %2492, i32* %2493, align 4
  %2494 = getelementptr inbounds float, float* %2453, i64 32
  %2495 = getelementptr inbounds float, float* %2454, i64 8
  %2496 = add nuw i32 %2452, 8
  %2497 = icmp eq i32 %2496, %2374
  br i1 %2497, label %2498, label %2451, !llvm.loop !159

2498:                                             ; preds = %2451, %2446
  %2499 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2268, align 8
  br label %2500

2500:                                             ; preds = %2498, %2371, %2329
  %2501 = phi %"class.blink::IntRect"* [ %2499, %2498 ], [ %2372, %2371 ], [ %2331, %2329 ]
  %2502 = getelementptr inbounds i8, i8* %2335, i64 %2261
  %2503 = getelementptr inbounds float, float* %2334, i64 %2265
  %2504 = add nuw nsw i32 %2333, 1
  %2505 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2501, i64 0, i32 1, i32 1
  %2506 = load i32, i32* %2505, align 4
  %2507 = icmp slt i32 %2504, %2506
  %2508 = add i64 %2330, 1
  br i1 %2507, label %2329, label %2313

2509:                                             ; preds = %2315, %2293
  %2510 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2510, align 4
  br label %11653

2511:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %2512
    i32 1, label %2652
    i32 2, label %2820
  ]

2512:                                             ; preds = %2511
  %2513 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2514 = load i32, i32* %2513, align 8
  %2515 = sext i32 %2514 to i64
  %2516 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2517 = load i32, i32* %2516, align 8
  %2518 = sext i32 %2517 to i64
  %2519 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2520 = load i8*, i8** %2519, align 8
  %2521 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2522 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2521, align 8
  %2523 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2522, i64 0, i32 0, i32 1
  %2524 = load i32, i32* %2523, align 4
  %2525 = mul nsw i32 %2524, %2514
  %2526 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2527 = load i32, i32* %2526, align 4
  %2528 = add nsw i32 %2525, %2527
  %2529 = sext i32 %2528 to i64
  %2530 = getelementptr inbounds i8, i8* %2520, i64 %2529
  %2531 = icmp slt i32 %2517, 0
  %2532 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2533 = load i32, i32* %2532, align 8
  %2534 = icmp sgt i32 %2533, 1
  %2535 = and i1 %2531, %2534
  br i1 %2535, label %2536, label %2546

2536:                                             ; preds = %2512
  %2537 = add nsw i32 %2533, -1
  %2538 = sext i32 %2537 to i64
  %2539 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2540 = load i32, i32* %2539, align 4
  %2541 = sext i32 %2540 to i64
  %2542 = mul nsw i64 %2515, %2538
  %2543 = mul i64 %2542, %2541
  %2544 = sub i64 0, %2543
  %2545 = getelementptr inbounds i8, i8* %2530, i64 %2544
  br label %2548

2546:                                             ; preds = %2512
  %2547 = icmp sgt i32 %2533, 0
  br i1 %2547, label %2548, label %2650

2548:                                             ; preds = %2546, %2536
  %2549 = phi i8* [ %2545, %2536 ], [ %2530, %2546 ]
  %2550 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2551 = load i8*, i8** %2550, align 8
  %2552 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2553

2553:                                             ; preds = %2565, %2548
  %2554 = phi i32 [ %2533, %2548 ], [ %2566, %2565 ]
  %2555 = phi %"class.blink::IntRect"* [ %2522, %2548 ], [ %2567, %2565 ]
  %2556 = phi %"class.blink::IntRect"* [ %2522, %2548 ], [ %2568, %2565 ]
  %2557 = phi i32 [ 0, %2548 ], [ %2577, %2565 ]
  %2558 = phi i8* [ %2551, %2548 ], [ %2570, %2565 ]
  %2559 = phi i8* [ %2549, %2548 ], [ %2576, %2565 ]
  %2560 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2556, i64 0, i32 1, i32 1
  %2561 = load i32, i32* %2560, align 4
  %2562 = icmp sgt i32 %2561, 0
  br i1 %2562, label %2579, label %2565

2563:                                             ; preds = %2642
  %2564 = load i32, i32* %2532, align 8
  br label %2565

2565:                                             ; preds = %2563, %2553
  %2566 = phi i32 [ %2554, %2553 ], [ %2564, %2563 ]
  %2567 = phi %"class.blink::IntRect"* [ %2555, %2553 ], [ %2643, %2563 ]
  %2568 = phi %"class.blink::IntRect"* [ %2556, %2553 ], [ %2643, %2563 ]
  %2569 = phi i8* [ %2559, %2553 ], [ %2644, %2563 ]
  %2570 = phi i8* [ %2558, %2553 ], [ %2645, %2563 ]
  %2571 = phi i32 [ %2561, %2553 ], [ %2648, %2563 ]
  %2572 = load i32, i32* %2552, align 4
  %2573 = sub nsw i32 %2572, %2571
  %2574 = sext i32 %2573 to i64
  %2575 = mul nsw i64 %2574, %2515
  %2576 = getelementptr inbounds i8, i8* %2569, i64 %2575
  %2577 = add nuw nsw i32 %2557, 1
  %2578 = icmp slt i32 %2577, %2566
  br i1 %2578, label %2553, label %2650

2579:                                             ; preds = %2553, %2642
  %2580 = phi %"class.blink::IntRect"* [ %2643, %2642 ], [ %2555, %2553 ]
  %2581 = phi %"class.blink::IntRect"* [ %2643, %2642 ], [ %2556, %2553 ]
  %2582 = phi i32 [ %2646, %2642 ], [ 0, %2553 ]
  %2583 = phi i8* [ %2645, %2642 ], [ %2558, %2553 ]
  %2584 = phi i8* [ %2644, %2642 ], [ %2559, %2553 ]
  %2585 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2581, i64 0, i32 1, i32 0
  %2586 = load i32, i32* %2585, align 4
  %2587 = icmp eq i32 %2586, 0
  br i1 %2587, label %2642, label %2588

2588:                                             ; preds = %2579
  %2589 = add i32 %2586, -1
  %2590 = and i32 %2586, 3
  %2591 = icmp ult i32 %2589, 3
  br i1 %2591, label %2624, label %2592

2592:                                             ; preds = %2588
  %2593 = sub i32 %2586, %2590
  br label %2594

2594:                                             ; preds = %2594, %2592
  %2595 = phi i8* [ %2584, %2592 ], [ %2620, %2594 ]
  %2596 = phi i8* [ %2583, %2592 ], [ %2621, %2594 ]
  %2597 = phi i32 [ %2593, %2592 ], [ %2622, %2594 ]
  %2598 = load i8, i8* %2595, align 1
  store i8 %2598, i8* %2596, align 1
  %2599 = getelementptr inbounds i8, i8* %2595, i64 3
  %2600 = load i8, i8* %2599, align 1
  %2601 = getelementptr inbounds i8, i8* %2596, i64 1
  store i8 %2600, i8* %2601, align 1
  %2602 = getelementptr inbounds i8, i8* %2595, i64 4
  %2603 = getelementptr inbounds i8, i8* %2596, i64 2
  %2604 = load i8, i8* %2602, align 1
  store i8 %2604, i8* %2603, align 1
  %2605 = getelementptr inbounds i8, i8* %2595, i64 7
  %2606 = load i8, i8* %2605, align 1
  %2607 = getelementptr inbounds i8, i8* %2596, i64 3
  store i8 %2606, i8* %2607, align 1
  %2608 = getelementptr inbounds i8, i8* %2595, i64 8
  %2609 = getelementptr inbounds i8, i8* %2596, i64 4
  %2610 = load i8, i8* %2608, align 1
  store i8 %2610, i8* %2609, align 1
  %2611 = getelementptr inbounds i8, i8* %2595, i64 11
  %2612 = load i8, i8* %2611, align 1
  %2613 = getelementptr inbounds i8, i8* %2596, i64 5
  store i8 %2612, i8* %2613, align 1
  %2614 = getelementptr inbounds i8, i8* %2595, i64 12
  %2615 = getelementptr inbounds i8, i8* %2596, i64 6
  %2616 = load i8, i8* %2614, align 1
  store i8 %2616, i8* %2615, align 1
  %2617 = getelementptr inbounds i8, i8* %2595, i64 15
  %2618 = load i8, i8* %2617, align 1
  %2619 = getelementptr inbounds i8, i8* %2596, i64 7
  store i8 %2618, i8* %2619, align 1
  %2620 = getelementptr inbounds i8, i8* %2595, i64 16
  %2621 = getelementptr inbounds i8, i8* %2596, i64 8
  %2622 = add i32 %2597, -4
  %2623 = icmp eq i32 %2622, 0
  br i1 %2623, label %2624, label %2594

2624:                                             ; preds = %2594, %2588
  %2625 = phi i8* [ %2584, %2588 ], [ %2620, %2594 ]
  %2626 = phi i8* [ %2583, %2588 ], [ %2621, %2594 ]
  %2627 = icmp eq i32 %2590, 0
  br i1 %2627, label %2640, label %2628

2628:                                             ; preds = %2624, %2628
  %2629 = phi i8* [ %2636, %2628 ], [ %2625, %2624 ]
  %2630 = phi i8* [ %2637, %2628 ], [ %2626, %2624 ]
  %2631 = phi i32 [ %2638, %2628 ], [ %2590, %2624 ]
  %2632 = load i8, i8* %2629, align 1
  store i8 %2632, i8* %2630, align 1
  %2633 = getelementptr inbounds i8, i8* %2629, i64 3
  %2634 = load i8, i8* %2633, align 1
  %2635 = getelementptr inbounds i8, i8* %2630, i64 1
  store i8 %2634, i8* %2635, align 1
  %2636 = getelementptr inbounds i8, i8* %2629, i64 4
  %2637 = getelementptr inbounds i8, i8* %2630, i64 2
  %2638 = add i32 %2631, -1
  %2639 = icmp eq i32 %2638, 0
  br i1 %2639, label %2640, label %2628, !llvm.loop !160

2640:                                             ; preds = %2628, %2624
  %2641 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2521, align 8
  br label %2642

2642:                                             ; preds = %2640, %2579
  %2643 = phi %"class.blink::IntRect"* [ %2641, %2640 ], [ %2580, %2579 ]
  %2644 = getelementptr inbounds i8, i8* %2584, i64 %2515
  %2645 = getelementptr inbounds i8, i8* %2583, i64 %2518
  %2646 = add nuw nsw i32 %2582, 1
  %2647 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2643, i64 0, i32 1, i32 1
  %2648 = load i32, i32* %2647, align 4
  %2649 = icmp slt i32 %2646, %2648
  br i1 %2649, label %2579, label %2563

2650:                                             ; preds = %2565, %2546
  %2651 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2651, align 4
  br label %11653

2652:                                             ; preds = %2511
  %2653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2654 = load i32, i32* %2653, align 8
  %2655 = sext i32 %2654 to i64
  %2656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2657 = load i32, i32* %2656, align 8
  %2658 = sext i32 %2657 to i64
  %2659 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2660 = load i8*, i8** %2659, align 8
  %2661 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2662 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2661, align 8
  %2663 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2662, i64 0, i32 0, i32 1
  %2664 = load i32, i32* %2663, align 4
  %2665 = mul nsw i32 %2664, %2654
  %2666 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2667 = load i32, i32* %2666, align 4
  %2668 = add nsw i32 %2665, %2667
  %2669 = sext i32 %2668 to i64
  %2670 = getelementptr inbounds i8, i8* %2660, i64 %2669
  %2671 = icmp slt i32 %2657, 0
  %2672 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2673 = load i32, i32* %2672, align 8
  %2674 = icmp sgt i32 %2673, 1
  %2675 = and i1 %2671, %2674
  br i1 %2675, label %2676, label %2686

2676:                                             ; preds = %2652
  %2677 = add nsw i32 %2673, -1
  %2678 = sext i32 %2677 to i64
  %2679 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2680 = load i32, i32* %2679, align 4
  %2681 = sext i32 %2680 to i64
  %2682 = mul nsw i64 %2655, %2678
  %2683 = mul i64 %2682, %2681
  %2684 = sub i64 0, %2683
  %2685 = getelementptr inbounds i8, i8* %2670, i64 %2684
  br label %2688

2686:                                             ; preds = %2652
  %2687 = icmp sgt i32 %2673, 0
  br i1 %2687, label %2688, label %2818

2688:                                             ; preds = %2686, %2676
  %2689 = phi i8* [ %2685, %2676 ], [ %2670, %2686 ]
  %2690 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2691 = load i8*, i8** %2690, align 8
  %2692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2693

2693:                                             ; preds = %2705, %2688
  %2694 = phi i32 [ %2673, %2688 ], [ %2706, %2705 ]
  %2695 = phi %"class.blink::IntRect"* [ %2662, %2688 ], [ %2707, %2705 ]
  %2696 = phi %"class.blink::IntRect"* [ %2662, %2688 ], [ %2708, %2705 ]
  %2697 = phi i32 [ 0, %2688 ], [ %2717, %2705 ]
  %2698 = phi i8* [ %2691, %2688 ], [ %2710, %2705 ]
  %2699 = phi i8* [ %2689, %2688 ], [ %2716, %2705 ]
  %2700 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2696, i64 0, i32 1, i32 1
  %2701 = load i32, i32* %2700, align 4
  %2702 = icmp sgt i32 %2701, 0
  br i1 %2702, label %2719, label %2705

2703:                                             ; preds = %2809
  %2704 = load i32, i32* %2672, align 8
  br label %2705

2705:                                             ; preds = %2703, %2693
  %2706 = phi i32 [ %2694, %2693 ], [ %2704, %2703 ]
  %2707 = phi %"class.blink::IntRect"* [ %2695, %2693 ], [ %2810, %2703 ]
  %2708 = phi %"class.blink::IntRect"* [ %2696, %2693 ], [ %2810, %2703 ]
  %2709 = phi i8* [ %2699, %2693 ], [ %2811, %2703 ]
  %2710 = phi i8* [ %2698, %2693 ], [ %2812, %2703 ]
  %2711 = phi i32 [ %2701, %2693 ], [ %2815, %2703 ]
  %2712 = load i32, i32* %2692, align 4
  %2713 = sub nsw i32 %2712, %2711
  %2714 = sext i32 %2713 to i64
  %2715 = mul nsw i64 %2714, %2655
  %2716 = getelementptr inbounds i8, i8* %2709, i64 %2715
  %2717 = add nuw nsw i32 %2697, 1
  %2718 = icmp slt i32 %2717, %2706
  br i1 %2718, label %2693, label %2818

2719:                                             ; preds = %2693, %2809
  %2720 = phi i64 [ %2817, %2809 ], [ 0, %2693 ]
  %2721 = phi %"class.blink::IntRect"* [ %2810, %2809 ], [ %2695, %2693 ]
  %2722 = phi %"class.blink::IntRect"* [ %2810, %2809 ], [ %2696, %2693 ]
  %2723 = phi i32 [ %2813, %2809 ], [ 0, %2693 ]
  %2724 = phi i8* [ %2812, %2809 ], [ %2698, %2693 ]
  %2725 = phi i8* [ %2811, %2809 ], [ %2699, %2693 ]
  %2726 = mul i64 %2720, %2658
  %2727 = getelementptr i8, i8* %2698, i64 %2726
  %2728 = add i64 %2726, 2
  %2729 = getelementptr i8, i8* %2698, i64 %2728
  %2730 = mul i64 %2720, %2655
  %2731 = getelementptr i8, i8* %2699, i64 %2730
  %2732 = add i64 %2730, 4
  %2733 = getelementptr i8, i8* %2699, i64 %2732
  %2734 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2722, i64 0, i32 1, i32 0
  %2735 = load i32, i32* %2734, align 4
  %2736 = icmp eq i32 %2735, 0
  br i1 %2736, label %2809, label %2737

2737:                                             ; preds = %2719
  %2738 = add i32 %2735, -1
  %2739 = zext i32 %2738 to i64
  %2740 = add nuw nsw i64 %2739, 1
  %2741 = icmp ult i64 %2740, 17
  br i1 %2741, label %2785, label %2742

2742:                                             ; preds = %2737
  %2743 = add i32 %2735, -1
  %2744 = zext i32 %2743 to i64
  %2745 = shl nuw nsw i64 %2744, 1
  %2746 = getelementptr i8, i8* %2729, i64 %2745
  %2747 = shl nuw nsw i64 %2744, 2
  %2748 = getelementptr i8, i8* %2733, i64 %2747
  %2749 = icmp ult i8* %2727, %2748
  %2750 = icmp ult i8* %2731, %2746
  %2751 = and i1 %2749, %2750
  br i1 %2751, label %2785, label %2752

2752:                                             ; preds = %2742
  %2753 = and i64 %2740, 15
  %2754 = icmp eq i64 %2753, 0
  %2755 = select i1 %2754, i64 16, i64 %2753
  %2756 = sub nsw i64 %2740, %2755
  %2757 = shl nsw i64 %2756, 2
  %2758 = getelementptr i8, i8* %2725, i64 %2757
  %2759 = shl nsw i64 %2756, 1
  %2760 = getelementptr i8, i8* %2724, i64 %2759
  %2761 = trunc i64 %2756 to i32
  br label %2762

2762:                                             ; preds = %2762, %2752
  %2763 = phi i64 [ 0, %2752 ], [ %2783, %2762 ]
  %2764 = shl i64 %2763, 2
  %2765 = getelementptr i8, i8* %2725, i64 %2764
  %2766 = shl i64 %2763, 1
  %2767 = getelementptr inbounds i8, i8* %2765, i64 3
  %2768 = bitcast i8* %2767 to <64 x i8>*
  %2769 = load <64 x i8>, <64 x i8>* %2768, align 1
  %2770 = shufflevector <64 x i8> %2769, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %2771 = uitofp <16 x i8> %2770 to <16 x float>
  %2772 = fdiv <16 x float> %2771, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %2773 = bitcast i8* %2765 to <64 x i8>*
  %2774 = load <64 x i8>, <64 x i8>* %2773, align 1
  %2775 = shufflevector <64 x i8> %2774, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %2776 = shufflevector <64 x i8> %2774, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %2777 = uitofp <16 x i8> %2775 to <16 x float>
  %2778 = fmul <16 x float> %2772, %2777
  %2779 = fptoui <16 x float> %2778 to <16 x i8>
  %2780 = getelementptr inbounds i8, i8* %2724, i64 %2766
  %2781 = bitcast i8* %2780 to <32 x i8>*
  %2782 = shufflevector <16 x i8> %2779, <16 x i8> %2776, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %2782, <32 x i8>* %2781, align 1
  %2783 = add i64 %2763, 16
  %2784 = icmp eq i64 %2783, %2756
  br i1 %2784, label %2785, label %2762, !llvm.loop !161

2785:                                             ; preds = %2762, %2742, %2737
  %2786 = phi i8* [ %2725, %2742 ], [ %2725, %2737 ], [ %2758, %2762 ]
  %2787 = phi i8* [ %2724, %2742 ], [ %2724, %2737 ], [ %2760, %2762 ]
  %2788 = phi i32 [ 0, %2742 ], [ 0, %2737 ], [ %2761, %2762 ]
  br label %2789

2789:                                             ; preds = %2785, %2789
  %2790 = phi i8* [ %2803, %2789 ], [ %2786, %2785 ]
  %2791 = phi i8* [ %2804, %2789 ], [ %2787, %2785 ]
  %2792 = phi i32 [ %2805, %2789 ], [ %2788, %2785 ]
  %2793 = getelementptr inbounds i8, i8* %2790, i64 3
  %2794 = load i8, i8* %2793, align 1
  %2795 = uitofp i8 %2794 to float
  %2796 = fdiv float %2795, 2.550000e+02
  %2797 = load i8, i8* %2790, align 1
  %2798 = uitofp i8 %2797 to float
  %2799 = fmul float %2796, %2798
  %2800 = fptoui float %2799 to i8
  store i8 %2800, i8* %2791, align 1
  %2801 = load i8, i8* %2793, align 1
  %2802 = getelementptr inbounds i8, i8* %2791, i64 1
  store i8 %2801, i8* %2802, align 1
  %2803 = getelementptr inbounds i8, i8* %2790, i64 4
  %2804 = getelementptr inbounds i8, i8* %2791, i64 2
  %2805 = add nuw i32 %2792, 1
  %2806 = icmp eq i32 %2805, %2735
  br i1 %2806, label %2807, label %2789, !llvm.loop !162

2807:                                             ; preds = %2789
  %2808 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2661, align 8
  br label %2809

2809:                                             ; preds = %2807, %2719
  %2810 = phi %"class.blink::IntRect"* [ %2808, %2807 ], [ %2721, %2719 ]
  %2811 = getelementptr inbounds i8, i8* %2725, i64 %2655
  %2812 = getelementptr inbounds i8, i8* %2724, i64 %2658
  %2813 = add nuw nsw i32 %2723, 1
  %2814 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2810, i64 0, i32 1, i32 1
  %2815 = load i32, i32* %2814, align 4
  %2816 = icmp slt i32 %2813, %2815
  %2817 = add i64 %2720, 1
  br i1 %2816, label %2719, label %2703

2818:                                             ; preds = %2705, %2686
  %2819 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2819, align 4
  br label %11653

2820:                                             ; preds = %2511
  %2821 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2822 = load i32, i32* %2821, align 8
  %2823 = sext i32 %2822 to i64
  %2824 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2825 = load i32, i32* %2824, align 8
  %2826 = sext i32 %2825 to i64
  %2827 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2828 = load i8*, i8** %2827, align 8
  %2829 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2830 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2829, align 8
  %2831 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2830, i64 0, i32 0, i32 1
  %2832 = load i32, i32* %2831, align 4
  %2833 = mul nsw i32 %2832, %2822
  %2834 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2835 = load i32, i32* %2834, align 4
  %2836 = add nsw i32 %2833, %2835
  %2837 = sext i32 %2836 to i64
  %2838 = getelementptr inbounds i8, i8* %2828, i64 %2837
  %2839 = icmp slt i32 %2825, 0
  %2840 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2841 = load i32, i32* %2840, align 8
  %2842 = icmp sgt i32 %2841, 1
  %2843 = and i1 %2839, %2842
  br i1 %2843, label %2844, label %2854

2844:                                             ; preds = %2820
  %2845 = add nsw i32 %2841, -1
  %2846 = sext i32 %2845 to i64
  %2847 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2848 = load i32, i32* %2847, align 4
  %2849 = sext i32 %2848 to i64
  %2850 = mul nsw i64 %2823, %2846
  %2851 = mul i64 %2850, %2849
  %2852 = sub i64 0, %2851
  %2853 = getelementptr inbounds i8, i8* %2838, i64 %2852
  br label %2856

2854:                                             ; preds = %2820
  %2855 = icmp sgt i32 %2841, 0
  br i1 %2855, label %2856, label %3001

2856:                                             ; preds = %2854, %2844
  %2857 = phi i8* [ %2853, %2844 ], [ %2838, %2854 ]
  %2858 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2859 = load i8*, i8** %2858, align 8
  %2860 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2861

2861:                                             ; preds = %2872, %2856
  %2862 = phi i32 [ %2841, %2856 ], [ %2873, %2872 ]
  %2863 = phi %"class.blink::IntRect"* [ %2830, %2856 ], [ %2874, %2872 ]
  %2864 = phi i32 [ 0, %2856 ], [ %2883, %2872 ]
  %2865 = phi i8* [ %2859, %2856 ], [ %2876, %2872 ]
  %2866 = phi i8* [ %2857, %2856 ], [ %2882, %2872 ]
  %2867 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2863, i64 0, i32 1, i32 1
  %2868 = load i32, i32* %2867, align 4
  %2869 = icmp sgt i32 %2868, 0
  br i1 %2869, label %2885, label %2872

2870:                                             ; preds = %2993
  %2871 = load i32, i32* %2840, align 8
  br label %2872

2872:                                             ; preds = %2870, %2861
  %2873 = phi i32 [ %2862, %2861 ], [ %2871, %2870 ]
  %2874 = phi %"class.blink::IntRect"* [ %2863, %2861 ], [ %2997, %2870 ]
  %2875 = phi i8* [ %2866, %2861 ], [ %2994, %2870 ]
  %2876 = phi i8* [ %2865, %2861 ], [ %2995, %2870 ]
  %2877 = phi i32 [ %2868, %2861 ], [ %2999, %2870 ]
  %2878 = load i32, i32* %2860, align 4
  %2879 = sub nsw i32 %2878, %2877
  %2880 = sext i32 %2879 to i64
  %2881 = mul nsw i64 %2880, %2823
  %2882 = getelementptr inbounds i8, i8* %2875, i64 %2881
  %2883 = add nuw nsw i32 %2864, 1
  %2884 = icmp slt i32 %2883, %2873
  br i1 %2884, label %2861, label %3001

2885:                                             ; preds = %2861, %2993
  %2886 = phi %"class.blink::IntRect"* [ %2997, %2993 ], [ %2863, %2861 ]
  %2887 = phi i32 [ %2996, %2993 ], [ 0, %2861 ]
  %2888 = phi i8* [ %2995, %2993 ], [ %2865, %2861 ]
  %2889 = phi i8* [ %2994, %2993 ], [ %2866, %2861 ]
  %2890 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2886, i64 0, i32 1, i32 0
  %2891 = load i32, i32* %2890, align 4
  %2892 = and i32 %2891, -4
  %2893 = icmp eq i32 %2892, 0
  br i1 %2893, label %2966, label %2894

2894:                                             ; preds = %2885, %2894
  %2895 = phi i8* [ %2962, %2894 ], [ %2889, %2885 ]
  %2896 = phi i8* [ %2963, %2894 ], [ %2888, %2885 ]
  %2897 = phi i32 [ %2964, %2894 ], [ 0, %2885 ]
  %2898 = getelementptr inbounds i8, i8* %2895, i64 15
  %2899 = load i8, i8* %2898, align 1
  %2900 = icmp eq i8 %2899, 0
  %2901 = uitofp i8 %2899 to double
  %2902 = fptrunc double %2901 to float
  %2903 = select i1 %2900, float 2.550000e+02, float %2902
  %2904 = getelementptr inbounds i8, i8* %2895, i64 11
  %2905 = load i8, i8* %2904, align 1
  %2906 = icmp eq i8 %2905, 0
  %2907 = uitofp i8 %2905 to double
  %2908 = fptrunc double %2907 to float
  %2909 = select i1 %2906, float 2.550000e+02, float %2908
  %2910 = getelementptr inbounds i8, i8* %2895, i64 7
  %2911 = load i8, i8* %2910, align 1
  %2912 = icmp eq i8 %2911, 0
  %2913 = uitofp i8 %2911 to double
  %2914 = fptrunc double %2913 to float
  %2915 = select i1 %2912, float 2.550000e+02, float %2914
  %2916 = getelementptr inbounds i8, i8* %2895, i64 3
  %2917 = load i8, i8* %2916, align 1
  %2918 = icmp eq i8 %2917, 0
  %2919 = uitofp i8 %2917 to double
  %2920 = fptrunc double %2919 to float
  %2921 = select i1 %2918, float 2.550000e+02, float %2920
  %2922 = insertelement <4 x float> undef, float %2921, i32 0
  %2923 = insertelement <4 x float> %2922, float %2915, i32 1
  %2924 = insertelement <4 x float> %2923, float %2909, i32 2
  %2925 = insertelement <4 x float> %2924, float %2903, i32 3
  %2926 = getelementptr inbounds i8, i8* %2895, i64 12
  %2927 = load i8, i8* %2926, align 1
  %2928 = uitofp i8 %2927 to float
  %2929 = getelementptr inbounds i8, i8* %2895, i64 8
  %2930 = load i8, i8* %2929, align 1
  %2931 = uitofp i8 %2930 to float
  %2932 = getelementptr inbounds i8, i8* %2895, i64 4
  %2933 = load i8, i8* %2932, align 1
  %2934 = uitofp i8 %2933 to float
  %2935 = load i8, i8* %2895, align 1
  %2936 = uitofp i8 %2935 to float
  %2937 = insertelement <4 x float> undef, float %2936, i32 0
  %2938 = insertelement <4 x float> %2937, float %2934, i32 1
  %2939 = insertelement <4 x float> %2938, float %2931, i32 2
  %2940 = insertelement <4 x float> %2939, float %2928, i32 3
  %2941 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %2925
  %2942 = fmul <4 x float> %2941, %2940
  %2943 = extractelement <4 x float> %2942, i32 0
  %2944 = fptoui float %2943 to i8
  store i8 %2944, i8* %2896, align 1
  %2945 = load i8, i8* %2916, align 1
  %2946 = getelementptr inbounds i8, i8* %2896, i64 1
  store i8 %2945, i8* %2946, align 1
  %2947 = extractelement <4 x float> %2942, i32 1
  %2948 = fptoui float %2947 to i8
  %2949 = getelementptr inbounds i8, i8* %2896, i64 2
  store i8 %2948, i8* %2949, align 1
  %2950 = load i8, i8* %2910, align 1
  %2951 = getelementptr inbounds i8, i8* %2896, i64 3
  store i8 %2950, i8* %2951, align 1
  %2952 = extractelement <4 x float> %2942, i32 2
  %2953 = fptoui float %2952 to i8
  %2954 = getelementptr inbounds i8, i8* %2896, i64 4
  store i8 %2953, i8* %2954, align 1
  %2955 = load i8, i8* %2904, align 1
  %2956 = getelementptr inbounds i8, i8* %2896, i64 5
  store i8 %2955, i8* %2956, align 1
  %2957 = extractelement <4 x float> %2942, i32 3
  %2958 = fptoui float %2957 to i8
  %2959 = getelementptr inbounds i8, i8* %2896, i64 6
  store i8 %2958, i8* %2959, align 1
  %2960 = load i8, i8* %2898, align 1
  %2961 = getelementptr inbounds i8, i8* %2896, i64 7
  store i8 %2960, i8* %2961, align 1
  %2962 = getelementptr inbounds i8, i8* %2895, i64 16
  %2963 = getelementptr inbounds i8, i8* %2896, i64 8
  %2964 = add nuw i32 %2897, 4
  %2965 = icmp ult i32 %2964, %2892
  br i1 %2965, label %2894, label %2966

2966:                                             ; preds = %2894, %2885
  %2967 = phi i8* [ %2889, %2885 ], [ %2962, %2894 ]
  %2968 = phi i8* [ %2888, %2885 ], [ %2963, %2894 ]
  %2969 = sub i32 %2891, %2892
  %2970 = icmp eq i32 %2969, 0
  br i1 %2970, label %2993, label %2971

2971:                                             ; preds = %2966, %2981
  %2972 = phi i32 [ %2991, %2981 ], [ 0, %2966 ]
  %2973 = phi i8* [ %2990, %2981 ], [ %2968, %2966 ]
  %2974 = phi i8* [ %2989, %2981 ], [ %2967, %2966 ]
  %2975 = getelementptr inbounds i8, i8* %2974, i64 3
  %2976 = load i8, i8* %2975, align 1
  %2977 = icmp eq i8 %2976, 0
  br i1 %2977, label %2981, label %2978

2978:                                             ; preds = %2971
  %2979 = uitofp i8 %2976 to float
  %2980 = fdiv float 2.550000e+02, %2979
  br label %2981

2981:                                             ; preds = %2978, %2971
  %2982 = phi float [ %2980, %2978 ], [ 1.000000e+00, %2971 ]
  %2983 = load i8, i8* %2974, align 1
  %2984 = uitofp i8 %2983 to float
  %2985 = fmul float %2982, %2984
  %2986 = fptoui float %2985 to i8
  store i8 %2986, i8* %2973, align 1
  %2987 = load i8, i8* %2975, align 1
  %2988 = getelementptr inbounds i8, i8* %2973, i64 1
  store i8 %2987, i8* %2988, align 1
  %2989 = getelementptr inbounds i8, i8* %2974, i64 4
  %2990 = getelementptr inbounds i8, i8* %2973, i64 2
  %2991 = add nuw i32 %2972, 1
  %2992 = icmp eq i32 %2991, %2969
  br i1 %2992, label %2993, label %2971

2993:                                             ; preds = %2981, %2966
  %2994 = getelementptr inbounds i8, i8* %2889, i64 %2823
  %2995 = getelementptr inbounds i8, i8* %2888, i64 %2826
  %2996 = add nuw nsw i32 %2887, 1
  %2997 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2829, align 8
  %2998 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2997, i64 0, i32 1, i32 1
  %2999 = load i32, i32* %2998, align 4
  %3000 = icmp slt i32 %2996, %2999
  br i1 %3000, label %2885, label %2870

3001:                                             ; preds = %2872, %2854
  %3002 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3002, align 4
  br label %11653

3003:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %3004
    i32 1, label %3167
    i32 2, label %3332
  ]

3004:                                             ; preds = %3003
  %3005 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3006 = load i32, i32* %3005, align 8
  %3007 = sext i32 %3006 to i64
  %3008 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3009 = load i32, i32* %3008, align 8
  %3010 = sdiv i32 %3009, 2
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3013 = load i8*, i8** %3012, align 8
  %3014 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3015 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3014, align 8
  %3016 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3015, i64 0, i32 0, i32 1
  %3017 = load i32, i32* %3016, align 4
  %3018 = mul nsw i32 %3017, %3006
  %3019 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3020 = load i32, i32* %3019, align 4
  %3021 = add nsw i32 %3018, %3020
  %3022 = sext i32 %3021 to i64
  %3023 = getelementptr inbounds i8, i8* %3013, i64 %3022
  %3024 = icmp slt i32 %3009, 0
  %3025 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3026 = load i32, i32* %3025, align 8
  %3027 = icmp sgt i32 %3026, 1
  %3028 = and i1 %3024, %3027
  br i1 %3028, label %3029, label %3039

3029:                                             ; preds = %3004
  %3030 = add nsw i32 %3026, -1
  %3031 = sext i32 %3030 to i64
  %3032 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3033 = load i32, i32* %3032, align 4
  %3034 = sext i32 %3033 to i64
  %3035 = mul nsw i64 %3007, %3031
  %3036 = mul i64 %3035, %3034
  %3037 = sub i64 0, %3036
  %3038 = getelementptr inbounds i8, i8* %3023, i64 %3037
  br label %3041

3039:                                             ; preds = %3004
  %3040 = icmp sgt i32 %3026, 0
  br i1 %3040, label %3041, label %3165

3041:                                             ; preds = %3039, %3029
  %3042 = phi i8* [ %3038, %3029 ], [ %3023, %3039 ]
  %3043 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3044 = bitcast i8** %3043 to i16**
  %3045 = load i16*, i16** %3044, align 8
  %3046 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3047 = bitcast i8** %3046 to float**
  %3048 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3049

3049:                                             ; preds = %3061, %3041
  %3050 = phi i32 [ %3026, %3041 ], [ %3062, %3061 ]
  %3051 = phi %"class.blink::IntRect"* [ %3015, %3041 ], [ %3063, %3061 ]
  %3052 = phi %"class.blink::IntRect"* [ %3015, %3041 ], [ %3064, %3061 ]
  %3053 = phi i32 [ 0, %3041 ], [ %3073, %3061 ]
  %3054 = phi i16* [ %3045, %3041 ], [ %3066, %3061 ]
  %3055 = phi i8* [ %3042, %3041 ], [ %3072, %3061 ]
  %3056 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3052, i64 0, i32 1, i32 1
  %3057 = load i32, i32* %3056, align 4
  %3058 = icmp sgt i32 %3057, 0
  br i1 %3058, label %3075, label %3061

3059:                                             ; preds = %3157
  %3060 = load i32, i32* %3025, align 8
  br label %3061

3061:                                             ; preds = %3059, %3049
  %3062 = phi i32 [ %3050, %3049 ], [ %3060, %3059 ]
  %3063 = phi %"class.blink::IntRect"* [ %3051, %3049 ], [ %3158, %3059 ]
  %3064 = phi %"class.blink::IntRect"* [ %3052, %3049 ], [ %3158, %3059 ]
  %3065 = phi i8* [ %3055, %3049 ], [ %3159, %3059 ]
  %3066 = phi i16* [ %3054, %3049 ], [ %3160, %3059 ]
  %3067 = phi i32 [ %3057, %3049 ], [ %3163, %3059 ]
  %3068 = load i32, i32* %3048, align 4
  %3069 = sub nsw i32 %3068, %3067
  %3070 = sext i32 %3069 to i64
  %3071 = mul nsw i64 %3070, %3007
  %3072 = getelementptr inbounds i8, i8* %3065, i64 %3071
  %3073 = add nuw nsw i32 %3053, 1
  %3074 = icmp slt i32 %3073, %3062
  br i1 %3074, label %3049, label %3165

3075:                                             ; preds = %3049, %3157
  %3076 = phi %"class.blink::IntRect"* [ %3158, %3157 ], [ %3051, %3049 ]
  %3077 = phi %"class.blink::IntRect"* [ %3158, %3157 ], [ %3052, %3049 ]
  %3078 = phi i32 [ %3161, %3157 ], [ 0, %3049 ]
  %3079 = phi i16* [ %3160, %3157 ], [ %3054, %3049 ]
  %3080 = phi i8* [ %3159, %3157 ], [ %3055, %3049 ]
  %3081 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3077, i64 0, i32 1, i32 0
  %3082 = load i32, i32* %3081, align 4
  %3083 = icmp eq i32 %3082, 0
  br i1 %3083, label %3157, label %3084

3084:                                             ; preds = %3075
  %3085 = load float*, float** %3047, align 8
  br label %3086

3086:                                             ; preds = %3086, %3084
  %3087 = phi i32 [ %3110, %3086 ], [ 0, %3084 ]
  %3088 = phi i8* [ %3108, %3086 ], [ %3080, %3084 ]
  %3089 = phi float* [ %3109, %3086 ], [ %3085, %3084 ]
  %3090 = load i8, i8* %3088, align 1
  %3091 = uitofp i8 %3090 to float
  %3092 = fmul float %3091, 0x3F70101020000000
  store float %3092, float* %3089, align 4
  %3093 = getelementptr inbounds i8, i8* %3088, i64 1
  %3094 = load i8, i8* %3093, align 1
  %3095 = uitofp i8 %3094 to float
  %3096 = fmul float %3095, 0x3F70101020000000
  %3097 = getelementptr inbounds float, float* %3089, i64 1
  store float %3096, float* %3097, align 4
  %3098 = getelementptr inbounds i8, i8* %3088, i64 2
  %3099 = load i8, i8* %3098, align 1
  %3100 = uitofp i8 %3099 to float
  %3101 = fmul float %3100, 0x3F70101020000000
  %3102 = getelementptr inbounds float, float* %3089, i64 2
  store float %3101, float* %3102, align 4
  %3103 = getelementptr inbounds i8, i8* %3088, i64 3
  %3104 = load i8, i8* %3103, align 1
  %3105 = uitofp i8 %3104 to float
  %3106 = fmul float %3105, 0x3F70101020000000
  %3107 = getelementptr inbounds float, float* %3089, i64 3
  store float %3106, float* %3107, align 4
  %3108 = getelementptr inbounds i8, i8* %3088, i64 4
  %3109 = getelementptr inbounds float, float* %3089, i64 4
  %3110 = add nuw i32 %3087, 1
  %3111 = icmp eq i32 %3110, %3082
  br i1 %3111, label %3112, label %3086

3112:                                             ; preds = %3086
  %3113 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3014, align 8
  %3114 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3113, i64 0, i32 1, i32 0
  %3115 = load i32, i32* %3114, align 4
  %3116 = icmp eq i32 %3115, 0
  br i1 %3116, label %3157, label %3117

3117:                                             ; preds = %3112
  %3118 = load float*, float** %3047, align 8
  br label %3119

3119:                                             ; preds = %3119, %3117
  %3120 = phi i32 [ %3153, %3119 ], [ 0, %3117 ]
  %3121 = phi float* [ %3151, %3119 ], [ %3118, %3117 ]
  %3122 = phi i16* [ %3152, %3119 ], [ %3079, %3117 ]
  %3123 = bitcast float* %3121 to i32*
  %3124 = load i32, i32* %3123, align 4
  %3125 = lshr i32 %3124, 23
  %3126 = zext i32 %3125 to i64
  %3127 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3126
  %3128 = load i16, i16* %3127, align 2
  %3129 = and i32 %3124, 8388607
  %3130 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3126
  %3131 = load i8, i8* %3130, align 1
  %3132 = zext i8 %3131 to i32
  %3133 = lshr i32 %3129, %3132
  %3134 = trunc i32 %3133 to i16
  %3135 = add i16 %3128, %3134
  store i16 %3135, i16* %3122, align 2
  %3136 = getelementptr inbounds float, float* %3121, i64 3
  %3137 = bitcast float* %3136 to i32*
  %3138 = load i32, i32* %3137, align 4
  %3139 = lshr i32 %3138, 23
  %3140 = zext i32 %3139 to i64
  %3141 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3140
  %3142 = load i16, i16* %3141, align 2
  %3143 = and i32 %3138, 8388607
  %3144 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3140
  %3145 = load i8, i8* %3144, align 1
  %3146 = zext i8 %3145 to i32
  %3147 = lshr i32 %3143, %3146
  %3148 = trunc i32 %3147 to i16
  %3149 = add i16 %3142, %3148
  %3150 = getelementptr inbounds i16, i16* %3122, i64 1
  store i16 %3149, i16* %3150, align 2
  %3151 = getelementptr inbounds float, float* %3121, i64 4
  %3152 = getelementptr inbounds i16, i16* %3122, i64 2
  %3153 = add nuw i32 %3120, 1
  %3154 = icmp eq i32 %3153, %3115
  br i1 %3154, label %3155, label %3119

3155:                                             ; preds = %3119
  %3156 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3014, align 8
  br label %3157

3157:                                             ; preds = %3155, %3112, %3075
  %3158 = phi %"class.blink::IntRect"* [ %3156, %3155 ], [ %3113, %3112 ], [ %3076, %3075 ]
  %3159 = getelementptr inbounds i8, i8* %3080, i64 %3007
  %3160 = getelementptr inbounds i16, i16* %3079, i64 %3011
  %3161 = add nuw nsw i32 %3078, 1
  %3162 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3158, i64 0, i32 1, i32 1
  %3163 = load i32, i32* %3162, align 4
  %3164 = icmp slt i32 %3161, %3163
  br i1 %3164, label %3075, label %3059

3165:                                             ; preds = %3061, %3039
  %3166 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3166, align 4
  br label %11653

3167:                                             ; preds = %3003
  %3168 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3169 = load i32, i32* %3168, align 8
  %3170 = sext i32 %3169 to i64
  %3171 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3172 = load i32, i32* %3171, align 8
  %3173 = sdiv i32 %3172, 2
  %3174 = sext i32 %3173 to i64
  %3175 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3176 = load i8*, i8** %3175, align 8
  %3177 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3178 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3177, align 8
  %3179 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3178, i64 0, i32 0, i32 1
  %3180 = load i32, i32* %3179, align 4
  %3181 = mul nsw i32 %3180, %3169
  %3182 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3183 = load i32, i32* %3182, align 4
  %3184 = add nsw i32 %3181, %3183
  %3185 = sext i32 %3184 to i64
  %3186 = getelementptr inbounds i8, i8* %3176, i64 %3185
  %3187 = icmp slt i32 %3172, 0
  %3188 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3189 = load i32, i32* %3188, align 8
  %3190 = icmp sgt i32 %3189, 1
  %3191 = and i1 %3187, %3190
  br i1 %3191, label %3192, label %3202

3192:                                             ; preds = %3167
  %3193 = add nsw i32 %3189, -1
  %3194 = sext i32 %3193 to i64
  %3195 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3196 = load i32, i32* %3195, align 4
  %3197 = sext i32 %3196 to i64
  %3198 = mul nsw i64 %3170, %3194
  %3199 = mul i64 %3198, %3197
  %3200 = sub i64 0, %3199
  %3201 = getelementptr inbounds i8, i8* %3186, i64 %3200
  br label %3204

3202:                                             ; preds = %3167
  %3203 = icmp sgt i32 %3189, 0
  br i1 %3203, label %3204, label %3330

3204:                                             ; preds = %3202, %3192
  %3205 = phi i8* [ %3201, %3192 ], [ %3186, %3202 ]
  %3206 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3207 = bitcast i8** %3206 to i16**
  %3208 = load i16*, i16** %3207, align 8
  %3209 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3210 = bitcast i8** %3209 to float**
  %3211 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3212

3212:                                             ; preds = %3224, %3204
  %3213 = phi i32 [ %3189, %3204 ], [ %3225, %3224 ]
  %3214 = phi %"class.blink::IntRect"* [ %3178, %3204 ], [ %3226, %3224 ]
  %3215 = phi %"class.blink::IntRect"* [ %3178, %3204 ], [ %3227, %3224 ]
  %3216 = phi i32 [ 0, %3204 ], [ %3236, %3224 ]
  %3217 = phi i16* [ %3208, %3204 ], [ %3229, %3224 ]
  %3218 = phi i8* [ %3205, %3204 ], [ %3235, %3224 ]
  %3219 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3215, i64 0, i32 1, i32 1
  %3220 = load i32, i32* %3219, align 4
  %3221 = icmp sgt i32 %3220, 0
  br i1 %3221, label %3238, label %3224

3222:                                             ; preds = %3322
  %3223 = load i32, i32* %3188, align 8
  br label %3224

3224:                                             ; preds = %3222, %3212
  %3225 = phi i32 [ %3213, %3212 ], [ %3223, %3222 ]
  %3226 = phi %"class.blink::IntRect"* [ %3214, %3212 ], [ %3323, %3222 ]
  %3227 = phi %"class.blink::IntRect"* [ %3215, %3212 ], [ %3323, %3222 ]
  %3228 = phi i8* [ %3218, %3212 ], [ %3324, %3222 ]
  %3229 = phi i16* [ %3217, %3212 ], [ %3325, %3222 ]
  %3230 = phi i32 [ %3220, %3212 ], [ %3328, %3222 ]
  %3231 = load i32, i32* %3211, align 4
  %3232 = sub nsw i32 %3231, %3230
  %3233 = sext i32 %3232 to i64
  %3234 = mul nsw i64 %3233, %3170
  %3235 = getelementptr inbounds i8, i8* %3228, i64 %3234
  %3236 = add nuw nsw i32 %3216, 1
  %3237 = icmp slt i32 %3236, %3225
  br i1 %3237, label %3212, label %3330

3238:                                             ; preds = %3212, %3322
  %3239 = phi %"class.blink::IntRect"* [ %3323, %3322 ], [ %3214, %3212 ]
  %3240 = phi %"class.blink::IntRect"* [ %3323, %3322 ], [ %3215, %3212 ]
  %3241 = phi i32 [ %3326, %3322 ], [ 0, %3212 ]
  %3242 = phi i16* [ %3325, %3322 ], [ %3217, %3212 ]
  %3243 = phi i8* [ %3324, %3322 ], [ %3218, %3212 ]
  %3244 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3240, i64 0, i32 1, i32 0
  %3245 = load i32, i32* %3244, align 4
  %3246 = icmp eq i32 %3245, 0
  br i1 %3246, label %3322, label %3247

3247:                                             ; preds = %3238
  %3248 = load float*, float** %3210, align 8
  br label %3249

3249:                                             ; preds = %3249, %3247
  %3250 = phi i32 [ %3273, %3249 ], [ 0, %3247 ]
  %3251 = phi i8* [ %3271, %3249 ], [ %3243, %3247 ]
  %3252 = phi float* [ %3272, %3249 ], [ %3248, %3247 ]
  %3253 = load i8, i8* %3251, align 1
  %3254 = uitofp i8 %3253 to float
  %3255 = fmul float %3254, 0x3F70101020000000
  store float %3255, float* %3252, align 4
  %3256 = getelementptr inbounds i8, i8* %3251, i64 1
  %3257 = load i8, i8* %3256, align 1
  %3258 = uitofp i8 %3257 to float
  %3259 = fmul float %3258, 0x3F70101020000000
  %3260 = getelementptr inbounds float, float* %3252, i64 1
  store float %3259, float* %3260, align 4
  %3261 = getelementptr inbounds i8, i8* %3251, i64 2
  %3262 = load i8, i8* %3261, align 1
  %3263 = uitofp i8 %3262 to float
  %3264 = fmul float %3263, 0x3F70101020000000
  %3265 = getelementptr inbounds float, float* %3252, i64 2
  store float %3264, float* %3265, align 4
  %3266 = getelementptr inbounds i8, i8* %3251, i64 3
  %3267 = load i8, i8* %3266, align 1
  %3268 = uitofp i8 %3267 to float
  %3269 = fmul float %3268, 0x3F70101020000000
  %3270 = getelementptr inbounds float, float* %3252, i64 3
  store float %3269, float* %3270, align 4
  %3271 = getelementptr inbounds i8, i8* %3251, i64 4
  %3272 = getelementptr inbounds float, float* %3252, i64 4
  %3273 = add nuw i32 %3250, 1
  %3274 = icmp eq i32 %3273, %3245
  br i1 %3274, label %3275, label %3249

3275:                                             ; preds = %3249
  %3276 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3177, align 8
  %3277 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3276, i64 0, i32 1, i32 0
  %3278 = load i32, i32* %3277, align 4
  %3279 = icmp eq i32 %3278, 0
  br i1 %3279, label %3322, label %3280

3280:                                             ; preds = %3275
  %3281 = load float*, float** %3210, align 8
  br label %3282

3282:                                             ; preds = %3282, %3280
  %3283 = phi float* [ %3316, %3282 ], [ %3281, %3280 ]
  %3284 = phi i32 [ %3318, %3282 ], [ 0, %3280 ]
  %3285 = phi i16* [ %3317, %3282 ], [ %3242, %3280 ]
  %3286 = getelementptr inbounds float, float* %3283, i64 3
  %3287 = load float, float* %3286, align 4
  %3288 = load float, float* %3283, align 4
  %3289 = fmul float %3287, %3288
  %3290 = bitcast float %3289 to i32
  %3291 = lshr i32 %3290, 23
  %3292 = zext i32 %3291 to i64
  %3293 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3292
  %3294 = load i16, i16* %3293, align 2
  %3295 = and i32 %3290, 8388607
  %3296 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3292
  %3297 = load i8, i8* %3296, align 1
  %3298 = zext i8 %3297 to i32
  %3299 = lshr i32 %3295, %3298
  %3300 = trunc i32 %3299 to i16
  %3301 = add i16 %3294, %3300
  store i16 %3301, i16* %3285, align 2
  %3302 = bitcast float* %3286 to i32*
  %3303 = load i32, i32* %3302, align 4
  %3304 = lshr i32 %3303, 23
  %3305 = zext i32 %3304 to i64
  %3306 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3305
  %3307 = load i16, i16* %3306, align 2
  %3308 = and i32 %3303, 8388607
  %3309 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3305
  %3310 = load i8, i8* %3309, align 1
  %3311 = zext i8 %3310 to i32
  %3312 = lshr i32 %3308, %3311
  %3313 = trunc i32 %3312 to i16
  %3314 = add i16 %3307, %3313
  %3315 = getelementptr inbounds i16, i16* %3285, i64 1
  store i16 %3314, i16* %3315, align 2
  %3316 = getelementptr inbounds float, float* %3283, i64 4
  %3317 = getelementptr inbounds i16, i16* %3285, i64 2
  %3318 = add nuw i32 %3284, 1
  %3319 = icmp eq i32 %3318, %3278
  br i1 %3319, label %3320, label %3282

3320:                                             ; preds = %3282
  %3321 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3177, align 8
  br label %3322

3322:                                             ; preds = %3320, %3275, %3238
  %3323 = phi %"class.blink::IntRect"* [ %3321, %3320 ], [ %3276, %3275 ], [ %3239, %3238 ]
  %3324 = getelementptr inbounds i8, i8* %3243, i64 %3170
  %3325 = getelementptr inbounds i16, i16* %3242, i64 %3174
  %3326 = add nuw nsw i32 %3241, 1
  %3327 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3323, i64 0, i32 1, i32 1
  %3328 = load i32, i32* %3327, align 4
  %3329 = icmp slt i32 %3326, %3328
  br i1 %3329, label %3238, label %3222

3330:                                             ; preds = %3224, %3202
  %3331 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3331, align 4
  br label %11653

3332:                                             ; preds = %3003
  %3333 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3334 = load i32, i32* %3333, align 8
  %3335 = sext i32 %3334 to i64
  %3336 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3337 = load i32, i32* %3336, align 8
  %3338 = sdiv i32 %3337, 2
  %3339 = sext i32 %3338 to i64
  %3340 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3341 = load i8*, i8** %3340, align 8
  %3342 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3343 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3342, align 8
  %3344 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3343, i64 0, i32 0, i32 1
  %3345 = load i32, i32* %3344, align 4
  %3346 = mul nsw i32 %3345, %3334
  %3347 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3348 = load i32, i32* %3347, align 4
  %3349 = add nsw i32 %3346, %3348
  %3350 = sext i32 %3349 to i64
  %3351 = getelementptr inbounds i8, i8* %3341, i64 %3350
  %3352 = icmp slt i32 %3337, 0
  %3353 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3354 = load i32, i32* %3353, align 8
  %3355 = icmp sgt i32 %3354, 1
  %3356 = and i1 %3352, %3355
  br i1 %3356, label %3357, label %3367

3357:                                             ; preds = %3332
  %3358 = add nsw i32 %3354, -1
  %3359 = sext i32 %3358 to i64
  %3360 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3361 = load i32, i32* %3360, align 4
  %3362 = sext i32 %3361 to i64
  %3363 = mul nsw i64 %3335, %3359
  %3364 = mul i64 %3363, %3362
  %3365 = sub i64 0, %3364
  %3366 = getelementptr inbounds i8, i8* %3351, i64 %3365
  br label %3369

3367:                                             ; preds = %3332
  %3368 = icmp sgt i32 %3354, 0
  br i1 %3368, label %3369, label %3498

3369:                                             ; preds = %3367, %3357
  %3370 = phi i8* [ %3366, %3357 ], [ %3351, %3367 ]
  %3371 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3372 = bitcast i8** %3371 to i16**
  %3373 = load i16*, i16** %3372, align 8
  %3374 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3375 = bitcast i8** %3374 to float**
  %3376 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3377

3377:                                             ; preds = %3389, %3369
  %3378 = phi i32 [ %3354, %3369 ], [ %3390, %3389 ]
  %3379 = phi %"class.blink::IntRect"* [ %3343, %3369 ], [ %3391, %3389 ]
  %3380 = phi %"class.blink::IntRect"* [ %3343, %3369 ], [ %3392, %3389 ]
  %3381 = phi i32 [ 0, %3369 ], [ %3401, %3389 ]
  %3382 = phi i16* [ %3373, %3369 ], [ %3394, %3389 ]
  %3383 = phi i8* [ %3370, %3369 ], [ %3400, %3389 ]
  %3384 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3380, i64 0, i32 1, i32 1
  %3385 = load i32, i32* %3384, align 4
  %3386 = icmp sgt i32 %3385, 0
  br i1 %3386, label %3403, label %3389

3387:                                             ; preds = %3490
  %3388 = load i32, i32* %3353, align 8
  br label %3389

3389:                                             ; preds = %3387, %3377
  %3390 = phi i32 [ %3378, %3377 ], [ %3388, %3387 ]
  %3391 = phi %"class.blink::IntRect"* [ %3379, %3377 ], [ %3491, %3387 ]
  %3392 = phi %"class.blink::IntRect"* [ %3380, %3377 ], [ %3491, %3387 ]
  %3393 = phi i8* [ %3383, %3377 ], [ %3492, %3387 ]
  %3394 = phi i16* [ %3382, %3377 ], [ %3493, %3387 ]
  %3395 = phi i32 [ %3385, %3377 ], [ %3496, %3387 ]
  %3396 = load i32, i32* %3376, align 4
  %3397 = sub nsw i32 %3396, %3395
  %3398 = sext i32 %3397 to i64
  %3399 = mul nsw i64 %3398, %3335
  %3400 = getelementptr inbounds i8, i8* %3393, i64 %3399
  %3401 = add nuw nsw i32 %3381, 1
  %3402 = icmp slt i32 %3401, %3390
  br i1 %3402, label %3377, label %3498

3403:                                             ; preds = %3377, %3490
  %3404 = phi %"class.blink::IntRect"* [ %3491, %3490 ], [ %3379, %3377 ]
  %3405 = phi %"class.blink::IntRect"* [ %3491, %3490 ], [ %3380, %3377 ]
  %3406 = phi i32 [ %3494, %3490 ], [ 0, %3377 ]
  %3407 = phi i16* [ %3493, %3490 ], [ %3382, %3377 ]
  %3408 = phi i8* [ %3492, %3490 ], [ %3383, %3377 ]
  %3409 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3405, i64 0, i32 1, i32 0
  %3410 = load i32, i32* %3409, align 4
  %3411 = icmp eq i32 %3410, 0
  br i1 %3411, label %3490, label %3412

3412:                                             ; preds = %3403
  %3413 = load float*, float** %3375, align 8
  br label %3414

3414:                                             ; preds = %3414, %3412
  %3415 = phi i32 [ %3438, %3414 ], [ 0, %3412 ]
  %3416 = phi i8* [ %3436, %3414 ], [ %3408, %3412 ]
  %3417 = phi float* [ %3437, %3414 ], [ %3413, %3412 ]
  %3418 = load i8, i8* %3416, align 1
  %3419 = uitofp i8 %3418 to float
  %3420 = fmul float %3419, 0x3F70101020000000
  store float %3420, float* %3417, align 4
  %3421 = getelementptr inbounds i8, i8* %3416, i64 1
  %3422 = load i8, i8* %3421, align 1
  %3423 = uitofp i8 %3422 to float
  %3424 = fmul float %3423, 0x3F70101020000000
  %3425 = getelementptr inbounds float, float* %3417, i64 1
  store float %3424, float* %3425, align 4
  %3426 = getelementptr inbounds i8, i8* %3416, i64 2
  %3427 = load i8, i8* %3426, align 1
  %3428 = uitofp i8 %3427 to float
  %3429 = fmul float %3428, 0x3F70101020000000
  %3430 = getelementptr inbounds float, float* %3417, i64 2
  store float %3429, float* %3430, align 4
  %3431 = getelementptr inbounds i8, i8* %3416, i64 3
  %3432 = load i8, i8* %3431, align 1
  %3433 = uitofp i8 %3432 to float
  %3434 = fmul float %3433, 0x3F70101020000000
  %3435 = getelementptr inbounds float, float* %3417, i64 3
  store float %3434, float* %3435, align 4
  %3436 = getelementptr inbounds i8, i8* %3416, i64 4
  %3437 = getelementptr inbounds float, float* %3417, i64 4
  %3438 = add nuw i32 %3415, 1
  %3439 = icmp eq i32 %3438, %3410
  br i1 %3439, label %3440, label %3414

3440:                                             ; preds = %3414
  %3441 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3342, align 8
  %3442 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3441, i64 0, i32 1, i32 0
  %3443 = load i32, i32* %3442, align 4
  %3444 = icmp eq i32 %3443, 0
  br i1 %3444, label %3490, label %3445

3445:                                             ; preds = %3440
  %3446 = load float*, float** %3375, align 8
  br label %3447

3447:                                             ; preds = %3447, %3445
  %3448 = phi i32 [ %3486, %3447 ], [ 0, %3445 ]
  %3449 = phi float* [ %3484, %3447 ], [ %3446, %3445 ]
  %3450 = phi i16* [ %3485, %3447 ], [ %3407, %3445 ]
  %3451 = getelementptr inbounds float, float* %3449, i64 3
  %3452 = load float, float* %3451, align 4
  %3453 = fcmp une float %3452, 0.000000e+00
  %3454 = fdiv float 1.000000e+00, %3452
  %3455 = select i1 %3453, float %3454, float 1.000000e+00
  %3456 = load float, float* %3449, align 4
  %3457 = fmul float %3456, %3455
  %3458 = bitcast float %3457 to i32
  %3459 = lshr i32 %3458, 23
  %3460 = zext i32 %3459 to i64
  %3461 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3460
  %3462 = load i16, i16* %3461, align 2
  %3463 = and i32 %3458, 8388607
  %3464 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3460
  %3465 = load i8, i8* %3464, align 1
  %3466 = zext i8 %3465 to i32
  %3467 = lshr i32 %3463, %3466
  %3468 = trunc i32 %3467 to i16
  %3469 = add i16 %3462, %3468
  store i16 %3469, i16* %3450, align 2
  %3470 = bitcast float* %3451 to i32*
  %3471 = load i32, i32* %3470, align 4
  %3472 = lshr i32 %3471, 23
  %3473 = zext i32 %3472 to i64
  %3474 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3473
  %3475 = load i16, i16* %3474, align 2
  %3476 = and i32 %3471, 8388607
  %3477 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3473
  %3478 = load i8, i8* %3477, align 1
  %3479 = zext i8 %3478 to i32
  %3480 = lshr i32 %3476, %3479
  %3481 = trunc i32 %3480 to i16
  %3482 = add i16 %3475, %3481
  %3483 = getelementptr inbounds i16, i16* %3450, i64 1
  store i16 %3482, i16* %3483, align 2
  %3484 = getelementptr inbounds float, float* %3449, i64 4
  %3485 = getelementptr inbounds i16, i16* %3450, i64 2
  %3486 = add nuw i32 %3448, 1
  %3487 = icmp eq i32 %3486, %3443
  br i1 %3487, label %3488, label %3447

3488:                                             ; preds = %3447
  %3489 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3342, align 8
  br label %3490

3490:                                             ; preds = %3488, %3440, %3403
  %3491 = phi %"class.blink::IntRect"* [ %3489, %3488 ], [ %3441, %3440 ], [ %3404, %3403 ]
  %3492 = getelementptr inbounds i8, i8* %3408, i64 %3335
  %3493 = getelementptr inbounds i16, i16* %3407, i64 %3339
  %3494 = add nuw nsw i32 %3406, 1
  %3495 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3491, i64 0, i32 1, i32 1
  %3496 = load i32, i32* %3495, align 4
  %3497 = icmp slt i32 %3494, %3496
  br i1 %3497, label %3403, label %3387

3498:                                             ; preds = %3389, %3367
  %3499 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3499, align 4
  br label %11653

3500:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %3501
    i32 1, label %3699
    i32 2, label %3869
  ]

3501:                                             ; preds = %3500
  %3502 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3503 = load i32, i32* %3502, align 8
  %3504 = sext i32 %3503 to i64
  %3505 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3506 = load i32, i32* %3505, align 8
  %3507 = sdiv i32 %3506, 4
  %3508 = sext i32 %3507 to i64
  %3509 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3510 = load i8*, i8** %3509, align 8
  %3511 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3512 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3511, align 8
  %3513 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3512, i64 0, i32 0, i32 1
  %3514 = load i32, i32* %3513, align 4
  %3515 = mul nsw i32 %3514, %3503
  %3516 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3517 = load i32, i32* %3516, align 4
  %3518 = add nsw i32 %3515, %3517
  %3519 = sext i32 %3518 to i64
  %3520 = getelementptr inbounds i8, i8* %3510, i64 %3519
  %3521 = icmp slt i32 %3506, 0
  %3522 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3523 = load i32, i32* %3522, align 8
  %3524 = icmp sgt i32 %3523, 1
  %3525 = and i1 %3521, %3524
  br i1 %3525, label %3526, label %3536

3526:                                             ; preds = %3501
  %3527 = add nsw i32 %3523, -1
  %3528 = sext i32 %3527 to i64
  %3529 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3530 = load i32, i32* %3529, align 4
  %3531 = sext i32 %3530 to i64
  %3532 = mul nsw i64 %3504, %3528
  %3533 = mul i64 %3532, %3531
  %3534 = sub i64 0, %3533
  %3535 = getelementptr inbounds i8, i8* %3520, i64 %3534
  br label %3538

3536:                                             ; preds = %3501
  %3537 = icmp sgt i32 %3523, 0
  br i1 %3537, label %3538, label %3697

3538:                                             ; preds = %3536, %3526
  %3539 = phi i8* [ %3535, %3526 ], [ %3520, %3536 ]
  %3540 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3541 = bitcast i8** %3540 to float**
  %3542 = load float*, float** %3541, align 8
  %3543 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3544 = bitcast i8** %3543 to float**
  %3545 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3546

3546:                                             ; preds = %3558, %3538
  %3547 = phi i32 [ %3523, %3538 ], [ %3559, %3558 ]
  %3548 = phi %"class.blink::IntRect"* [ %3512, %3538 ], [ %3560, %3558 ]
  %3549 = phi %"class.blink::IntRect"* [ %3512, %3538 ], [ %3561, %3558 ]
  %3550 = phi i32 [ 0, %3538 ], [ %3570, %3558 ]
  %3551 = phi float* [ %3542, %3538 ], [ %3563, %3558 ]
  %3552 = phi i8* [ %3539, %3538 ], [ %3569, %3558 ]
  %3553 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3549, i64 0, i32 1, i32 1
  %3554 = load i32, i32* %3553, align 4
  %3555 = icmp sgt i32 %3554, 0
  br i1 %3555, label %3572, label %3558

3556:                                             ; preds = %3689
  %3557 = load i32, i32* %3522, align 8
  br label %3558

3558:                                             ; preds = %3556, %3546
  %3559 = phi i32 [ %3547, %3546 ], [ %3557, %3556 ]
  %3560 = phi %"class.blink::IntRect"* [ %3548, %3546 ], [ %3690, %3556 ]
  %3561 = phi %"class.blink::IntRect"* [ %3549, %3546 ], [ %3690, %3556 ]
  %3562 = phi i8* [ %3552, %3546 ], [ %3691, %3556 ]
  %3563 = phi float* [ %3551, %3546 ], [ %3692, %3556 ]
  %3564 = phi i32 [ %3554, %3546 ], [ %3695, %3556 ]
  %3565 = load i32, i32* %3545, align 4
  %3566 = sub nsw i32 %3565, %3564
  %3567 = sext i32 %3566 to i64
  %3568 = mul nsw i64 %3567, %3504
  %3569 = getelementptr inbounds i8, i8* %3562, i64 %3568
  %3570 = add nuw nsw i32 %3550, 1
  %3571 = icmp slt i32 %3570, %3559
  br i1 %3571, label %3546, label %3697

3572:                                             ; preds = %3546, %3689
  %3573 = phi %"class.blink::IntRect"* [ %3690, %3689 ], [ %3548, %3546 ]
  %3574 = phi %"class.blink::IntRect"* [ %3690, %3689 ], [ %3549, %3546 ]
  %3575 = phi i32 [ %3693, %3689 ], [ 0, %3546 ]
  %3576 = phi float* [ %3692, %3689 ], [ %3551, %3546 ]
  %3577 = phi i8* [ %3691, %3689 ], [ %3552, %3546 ]
  %3578 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3574, i64 0, i32 1, i32 0
  %3579 = load i32, i32* %3578, align 4
  %3580 = icmp eq i32 %3579, 0
  br i1 %3580, label %3689, label %3581

3581:                                             ; preds = %3572
  %3582 = load float*, float** %3544, align 8
  br label %3583

3583:                                             ; preds = %3583, %3581
  %3584 = phi i32 [ %3607, %3583 ], [ 0, %3581 ]
  %3585 = phi i8* [ %3605, %3583 ], [ %3577, %3581 ]
  %3586 = phi float* [ %3606, %3583 ], [ %3582, %3581 ]
  %3587 = load i8, i8* %3585, align 1
  %3588 = uitofp i8 %3587 to float
  %3589 = fmul float %3588, 0x3F70101020000000
  store float %3589, float* %3586, align 4
  %3590 = getelementptr inbounds i8, i8* %3585, i64 1
  %3591 = load i8, i8* %3590, align 1
  %3592 = uitofp i8 %3591 to float
  %3593 = fmul float %3592, 0x3F70101020000000
  %3594 = getelementptr inbounds float, float* %3586, i64 1
  store float %3593, float* %3594, align 4
  %3595 = getelementptr inbounds i8, i8* %3585, i64 2
  %3596 = load i8, i8* %3595, align 1
  %3597 = uitofp i8 %3596 to float
  %3598 = fmul float %3597, 0x3F70101020000000
  %3599 = getelementptr inbounds float, float* %3586, i64 2
  store float %3598, float* %3599, align 4
  %3600 = getelementptr inbounds i8, i8* %3585, i64 3
  %3601 = load i8, i8* %3600, align 1
  %3602 = uitofp i8 %3601 to float
  %3603 = fmul float %3602, 0x3F70101020000000
  %3604 = getelementptr inbounds float, float* %3586, i64 3
  store float %3603, float* %3604, align 4
  %3605 = getelementptr inbounds i8, i8* %3585, i64 4
  %3606 = getelementptr inbounds float, float* %3586, i64 4
  %3607 = add nuw i32 %3584, 1
  %3608 = icmp eq i32 %3607, %3579
  br i1 %3608, label %3609, label %3583

3609:                                             ; preds = %3583
  %3610 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3511, align 8
  %3611 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3610, i64 0, i32 1, i32 0
  %3612 = load i32, i32* %3611, align 4
  %3613 = icmp eq i32 %3612, 0
  br i1 %3613, label %3689, label %3614

3614:                                             ; preds = %3609
  %3615 = load float*, float** %3544, align 8
  %3616 = add i32 %3612, -1
  %3617 = and i32 %3612, 3
  %3618 = icmp ult i32 %3616, 3
  br i1 %3618, label %3667, label %3619

3619:                                             ; preds = %3614
  %3620 = sub i32 %3612, %3617
  br label %3621

3621:                                             ; preds = %3621, %3619
  %3622 = phi float* [ %3615, %3619 ], [ %3663, %3621 ]
  %3623 = phi float* [ %3576, %3619 ], [ %3664, %3621 ]
  %3624 = phi i32 [ %3620, %3619 ], [ %3665, %3621 ]
  %3625 = bitcast float* %3622 to i32*
  %3626 = load i32, i32* %3625, align 4
  %3627 = bitcast float* %3623 to i32*
  store i32 %3626, i32* %3627, align 4
  %3628 = getelementptr inbounds float, float* %3622, i64 3
  %3629 = bitcast float* %3628 to i32*
  %3630 = load i32, i32* %3629, align 4
  %3631 = getelementptr inbounds float, float* %3623, i64 1
  %3632 = bitcast float* %3631 to i32*
  store i32 %3630, i32* %3632, align 4
  %3633 = getelementptr inbounds float, float* %3622, i64 4
  %3634 = getelementptr inbounds float, float* %3623, i64 2
  %3635 = bitcast float* %3633 to i32*
  %3636 = load i32, i32* %3635, align 4
  %3637 = bitcast float* %3634 to i32*
  store i32 %3636, i32* %3637, align 4
  %3638 = getelementptr inbounds float, float* %3622, i64 7
  %3639 = bitcast float* %3638 to i32*
  %3640 = load i32, i32* %3639, align 4
  %3641 = getelementptr inbounds float, float* %3623, i64 3
  %3642 = bitcast float* %3641 to i32*
  store i32 %3640, i32* %3642, align 4
  %3643 = getelementptr inbounds float, float* %3622, i64 8
  %3644 = getelementptr inbounds float, float* %3623, i64 4
  %3645 = bitcast float* %3643 to i32*
  %3646 = load i32, i32* %3645, align 4
  %3647 = bitcast float* %3644 to i32*
  store i32 %3646, i32* %3647, align 4
  %3648 = getelementptr inbounds float, float* %3622, i64 11
  %3649 = bitcast float* %3648 to i32*
  %3650 = load i32, i32* %3649, align 4
  %3651 = getelementptr inbounds float, float* %3623, i64 5
  %3652 = bitcast float* %3651 to i32*
  store i32 %3650, i32* %3652, align 4
  %3653 = getelementptr inbounds float, float* %3622, i64 12
  %3654 = getelementptr inbounds float, float* %3623, i64 6
  %3655 = bitcast float* %3653 to i32*
  %3656 = load i32, i32* %3655, align 4
  %3657 = bitcast float* %3654 to i32*
  store i32 %3656, i32* %3657, align 4
  %3658 = getelementptr inbounds float, float* %3622, i64 15
  %3659 = bitcast float* %3658 to i32*
  %3660 = load i32, i32* %3659, align 4
  %3661 = getelementptr inbounds float, float* %3623, i64 7
  %3662 = bitcast float* %3661 to i32*
  store i32 %3660, i32* %3662, align 4
  %3663 = getelementptr inbounds float, float* %3622, i64 16
  %3664 = getelementptr inbounds float, float* %3623, i64 8
  %3665 = add i32 %3624, -4
  %3666 = icmp eq i32 %3665, 0
  br i1 %3666, label %3667, label %3621

3667:                                             ; preds = %3621, %3614
  %3668 = phi float* [ %3615, %3614 ], [ %3663, %3621 ]
  %3669 = phi float* [ %3576, %3614 ], [ %3664, %3621 ]
  %3670 = icmp eq i32 %3617, 0
  br i1 %3670, label %3687, label %3671

3671:                                             ; preds = %3667, %3671
  %3672 = phi float* [ %3683, %3671 ], [ %3668, %3667 ]
  %3673 = phi float* [ %3684, %3671 ], [ %3669, %3667 ]
  %3674 = phi i32 [ %3685, %3671 ], [ %3617, %3667 ]
  %3675 = bitcast float* %3672 to i32*
  %3676 = load i32, i32* %3675, align 4
  %3677 = bitcast float* %3673 to i32*
  store i32 %3676, i32* %3677, align 4
  %3678 = getelementptr inbounds float, float* %3672, i64 3
  %3679 = bitcast float* %3678 to i32*
  %3680 = load i32, i32* %3679, align 4
  %3681 = getelementptr inbounds float, float* %3673, i64 1
  %3682 = bitcast float* %3681 to i32*
  store i32 %3680, i32* %3682, align 4
  %3683 = getelementptr inbounds float, float* %3672, i64 4
  %3684 = getelementptr inbounds float, float* %3673, i64 2
  %3685 = add i32 %3674, -1
  %3686 = icmp eq i32 %3685, 0
  br i1 %3686, label %3687, label %3671, !llvm.loop !163

3687:                                             ; preds = %3671, %3667
  %3688 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3511, align 8
  br label %3689

3689:                                             ; preds = %3687, %3609, %3572
  %3690 = phi %"class.blink::IntRect"* [ %3688, %3687 ], [ %3610, %3609 ], [ %3573, %3572 ]
  %3691 = getelementptr inbounds i8, i8* %3577, i64 %3504
  %3692 = getelementptr inbounds float, float* %3576, i64 %3508
  %3693 = add nuw nsw i32 %3575, 1
  %3694 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3690, i64 0, i32 1, i32 1
  %3695 = load i32, i32* %3694, align 4
  %3696 = icmp slt i32 %3693, %3695
  br i1 %3696, label %3572, label %3556

3697:                                             ; preds = %3558, %3536
  %3698 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3698, align 4
  br label %11653

3699:                                             ; preds = %3500
  %3700 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3701 = load i32, i32* %3700, align 8
  %3702 = sext i32 %3701 to i64
  %3703 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3704 = load i32, i32* %3703, align 8
  %3705 = sdiv i32 %3704, 4
  %3706 = sext i32 %3705 to i64
  %3707 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3708 = load i8*, i8** %3707, align 8
  %3709 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3710 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3709, align 8
  %3711 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3710, i64 0, i32 0, i32 1
  %3712 = load i32, i32* %3711, align 4
  %3713 = mul nsw i32 %3712, %3701
  %3714 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3715 = load i32, i32* %3714, align 4
  %3716 = add nsw i32 %3713, %3715
  %3717 = sext i32 %3716 to i64
  %3718 = getelementptr inbounds i8, i8* %3708, i64 %3717
  %3719 = icmp slt i32 %3704, 0
  %3720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3721 = load i32, i32* %3720, align 8
  %3722 = icmp sgt i32 %3721, 1
  %3723 = and i1 %3719, %3722
  br i1 %3723, label %3724, label %3734

3724:                                             ; preds = %3699
  %3725 = add nsw i32 %3721, -1
  %3726 = sext i32 %3725 to i64
  %3727 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3728 = load i32, i32* %3727, align 4
  %3729 = sext i32 %3728 to i64
  %3730 = mul nsw i64 %3702, %3726
  %3731 = mul i64 %3730, %3729
  %3732 = sub i64 0, %3731
  %3733 = getelementptr inbounds i8, i8* %3718, i64 %3732
  br label %3736

3734:                                             ; preds = %3699
  %3735 = icmp sgt i32 %3721, 0
  br i1 %3735, label %3736, label %3867

3736:                                             ; preds = %3734, %3724
  %3737 = phi i8* [ %3733, %3724 ], [ %3718, %3734 ]
  %3738 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3739 = bitcast i8** %3738 to float**
  %3740 = load float*, float** %3739, align 8
  %3741 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3742 = bitcast i8** %3741 to float**
  %3743 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3744

3744:                                             ; preds = %3756, %3736
  %3745 = phi i32 [ %3721, %3736 ], [ %3757, %3756 ]
  %3746 = phi %"class.blink::IntRect"* [ %3710, %3736 ], [ %3758, %3756 ]
  %3747 = phi %"class.blink::IntRect"* [ %3710, %3736 ], [ %3759, %3756 ]
  %3748 = phi i32 [ 0, %3736 ], [ %3768, %3756 ]
  %3749 = phi float* [ %3740, %3736 ], [ %3761, %3756 ]
  %3750 = phi i8* [ %3737, %3736 ], [ %3767, %3756 ]
  %3751 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3747, i64 0, i32 1, i32 1
  %3752 = load i32, i32* %3751, align 4
  %3753 = icmp sgt i32 %3752, 0
  br i1 %3753, label %3770, label %3756

3754:                                             ; preds = %3859
  %3755 = load i32, i32* %3720, align 8
  br label %3756

3756:                                             ; preds = %3754, %3744
  %3757 = phi i32 [ %3745, %3744 ], [ %3755, %3754 ]
  %3758 = phi %"class.blink::IntRect"* [ %3746, %3744 ], [ %3860, %3754 ]
  %3759 = phi %"class.blink::IntRect"* [ %3747, %3744 ], [ %3860, %3754 ]
  %3760 = phi i8* [ %3750, %3744 ], [ %3861, %3754 ]
  %3761 = phi float* [ %3749, %3744 ], [ %3862, %3754 ]
  %3762 = phi i32 [ %3752, %3744 ], [ %3865, %3754 ]
  %3763 = load i32, i32* %3743, align 4
  %3764 = sub nsw i32 %3763, %3762
  %3765 = sext i32 %3764 to i64
  %3766 = mul nsw i64 %3765, %3702
  %3767 = getelementptr inbounds i8, i8* %3760, i64 %3766
  %3768 = add nuw nsw i32 %3748, 1
  %3769 = icmp slt i32 %3768, %3757
  br i1 %3769, label %3744, label %3867

3770:                                             ; preds = %3744, %3859
  %3771 = phi %"class.blink::IntRect"* [ %3860, %3859 ], [ %3746, %3744 ]
  %3772 = phi %"class.blink::IntRect"* [ %3860, %3859 ], [ %3747, %3744 ]
  %3773 = phi i32 [ %3863, %3859 ], [ 0, %3744 ]
  %3774 = phi float* [ %3862, %3859 ], [ %3749, %3744 ]
  %3775 = phi i8* [ %3861, %3859 ], [ %3750, %3744 ]
  %3776 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3772, i64 0, i32 1, i32 0
  %3777 = load i32, i32* %3776, align 4
  %3778 = icmp eq i32 %3777, 0
  br i1 %3778, label %3859, label %3779

3779:                                             ; preds = %3770
  %3780 = load float*, float** %3742, align 8
  br label %3781

3781:                                             ; preds = %3781, %3779
  %3782 = phi i32 [ %3805, %3781 ], [ 0, %3779 ]
  %3783 = phi i8* [ %3803, %3781 ], [ %3775, %3779 ]
  %3784 = phi float* [ %3804, %3781 ], [ %3780, %3779 ]
  %3785 = load i8, i8* %3783, align 1
  %3786 = uitofp i8 %3785 to float
  %3787 = fmul float %3786, 0x3F70101020000000
  store float %3787, float* %3784, align 4
  %3788 = getelementptr inbounds i8, i8* %3783, i64 1
  %3789 = load i8, i8* %3788, align 1
  %3790 = uitofp i8 %3789 to float
  %3791 = fmul float %3790, 0x3F70101020000000
  %3792 = getelementptr inbounds float, float* %3784, i64 1
  store float %3791, float* %3792, align 4
  %3793 = getelementptr inbounds i8, i8* %3783, i64 2
  %3794 = load i8, i8* %3793, align 1
  %3795 = uitofp i8 %3794 to float
  %3796 = fmul float %3795, 0x3F70101020000000
  %3797 = getelementptr inbounds float, float* %3784, i64 2
  store float %3796, float* %3797, align 4
  %3798 = getelementptr inbounds i8, i8* %3783, i64 3
  %3799 = load i8, i8* %3798, align 1
  %3800 = uitofp i8 %3799 to float
  %3801 = fmul float %3800, 0x3F70101020000000
  %3802 = getelementptr inbounds float, float* %3784, i64 3
  store float %3801, float* %3802, align 4
  %3803 = getelementptr inbounds i8, i8* %3783, i64 4
  %3804 = getelementptr inbounds float, float* %3784, i64 4
  %3805 = add nuw i32 %3782, 1
  %3806 = icmp eq i32 %3805, %3777
  br i1 %3806, label %3807, label %3781

3807:                                             ; preds = %3781
  %3808 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3709, align 8
  %3809 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3808, i64 0, i32 1, i32 0
  %3810 = load i32, i32* %3809, align 4
  %3811 = icmp eq i32 %3810, 0
  br i1 %3811, label %3859, label %3812

3812:                                             ; preds = %3807
  %3813 = load float*, float** %3742, align 8
  %3814 = and i32 %3810, 1
  %3815 = icmp eq i32 %3810, 1
  br i1 %3815, label %3844, label %3816

3816:                                             ; preds = %3812
  %3817 = sub i32 %3810, %3814
  br label %3818

3818:                                             ; preds = %3818, %3816
  %3819 = phi float* [ %3813, %3816 ], [ %3840, %3818 ]
  %3820 = phi float* [ %3774, %3816 ], [ %3841, %3818 ]
  %3821 = phi i32 [ %3817, %3816 ], [ %3842, %3818 ]
  %3822 = getelementptr inbounds float, float* %3819, i64 3
  %3823 = load float, float* %3822, align 4
  %3824 = load float, float* %3819, align 4
  %3825 = fmul float %3823, %3824
  store float %3825, float* %3820, align 4
  %3826 = bitcast float* %3822 to i32*
  %3827 = load i32, i32* %3826, align 4
  %3828 = getelementptr inbounds float, float* %3820, i64 1
  %3829 = bitcast float* %3828 to i32*
  store i32 %3827, i32* %3829, align 4
  %3830 = getelementptr inbounds float, float* %3819, i64 4
  %3831 = getelementptr inbounds float, float* %3820, i64 2
  %3832 = getelementptr inbounds float, float* %3819, i64 7
  %3833 = load float, float* %3832, align 4
  %3834 = load float, float* %3830, align 4
  %3835 = fmul float %3833, %3834
  store float %3835, float* %3831, align 4
  %3836 = bitcast float* %3832 to i32*
  %3837 = load i32, i32* %3836, align 4
  %3838 = getelementptr inbounds float, float* %3820, i64 3
  %3839 = bitcast float* %3838 to i32*
  store i32 %3837, i32* %3839, align 4
  %3840 = getelementptr inbounds float, float* %3819, i64 8
  %3841 = getelementptr inbounds float, float* %3820, i64 4
  %3842 = add i32 %3821, -2
  %3843 = icmp eq i32 %3842, 0
  br i1 %3843, label %3844, label %3818

3844:                                             ; preds = %3818, %3812
  %3845 = phi float* [ %3813, %3812 ], [ %3840, %3818 ]
  %3846 = phi float* [ %3774, %3812 ], [ %3841, %3818 ]
  %3847 = icmp eq i32 %3814, 0
  br i1 %3847, label %3857, label %3848

3848:                                             ; preds = %3844
  %3849 = getelementptr inbounds float, float* %3845, i64 3
  %3850 = load float, float* %3849, align 4
  %3851 = load float, float* %3845, align 4
  %3852 = fmul float %3850, %3851
  store float %3852, float* %3846, align 4
  %3853 = bitcast float* %3849 to i32*
  %3854 = load i32, i32* %3853, align 4
  %3855 = getelementptr inbounds float, float* %3846, i64 1
  %3856 = bitcast float* %3855 to i32*
  store i32 %3854, i32* %3856, align 4
  br label %3857

3857:                                             ; preds = %3844, %3848
  %3858 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3709, align 8
  br label %3859

3859:                                             ; preds = %3857, %3807, %3770
  %3860 = phi %"class.blink::IntRect"* [ %3858, %3857 ], [ %3808, %3807 ], [ %3771, %3770 ]
  %3861 = getelementptr inbounds i8, i8* %3775, i64 %3702
  %3862 = getelementptr inbounds float, float* %3774, i64 %3706
  %3863 = add nuw nsw i32 %3773, 1
  %3864 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3860, i64 0, i32 1, i32 1
  %3865 = load i32, i32* %3864, align 4
  %3866 = icmp slt i32 %3863, %3865
  br i1 %3866, label %3770, label %3754

3867:                                             ; preds = %3756, %3734
  %3868 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3868, align 4
  br label %11653

3869:                                             ; preds = %3500
  %3870 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3871 = load i32, i32* %3870, align 8
  %3872 = sext i32 %3871 to i64
  %3873 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3874 = load i32, i32* %3873, align 8
  %3875 = sdiv i32 %3874, 4
  %3876 = sext i32 %3875 to i64
  %3877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3878 = load i8*, i8** %3877, align 8
  %3879 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3880 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3879, align 8
  %3881 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3880, i64 0, i32 0, i32 1
  %3882 = load i32, i32* %3881, align 4
  %3883 = mul nsw i32 %3882, %3871
  %3884 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3885 = load i32, i32* %3884, align 4
  %3886 = add nsw i32 %3883, %3885
  %3887 = sext i32 %3886 to i64
  %3888 = getelementptr inbounds i8, i8* %3878, i64 %3887
  %3889 = icmp slt i32 %3874, 0
  %3890 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3891 = load i32, i32* %3890, align 8
  %3892 = icmp sgt i32 %3891, 1
  %3893 = and i1 %3889, %3892
  br i1 %3893, label %3894, label %3904

3894:                                             ; preds = %3869
  %3895 = add nsw i32 %3891, -1
  %3896 = sext i32 %3895 to i64
  %3897 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3898 = load i32, i32* %3897, align 4
  %3899 = sext i32 %3898 to i64
  %3900 = mul nsw i64 %3872, %3896
  %3901 = mul i64 %3900, %3899
  %3902 = sub i64 0, %3901
  %3903 = getelementptr inbounds i8, i8* %3888, i64 %3902
  br label %3906

3904:                                             ; preds = %3869
  %3905 = icmp sgt i32 %3891, 0
  br i1 %3905, label %3906, label %4046

3906:                                             ; preds = %3904, %3894
  %3907 = phi i8* [ %3903, %3894 ], [ %3888, %3904 ]
  %3908 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3909 = bitcast i8** %3908 to float**
  %3910 = load float*, float** %3909, align 8
  %3911 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3912 = bitcast i8** %3911 to float**
  %3913 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3914

3914:                                             ; preds = %3926, %3906
  %3915 = phi i32 [ %3891, %3906 ], [ %3927, %3926 ]
  %3916 = phi %"class.blink::IntRect"* [ %3880, %3906 ], [ %3928, %3926 ]
  %3917 = phi %"class.blink::IntRect"* [ %3880, %3906 ], [ %3929, %3926 ]
  %3918 = phi i32 [ 0, %3906 ], [ %3938, %3926 ]
  %3919 = phi float* [ %3910, %3906 ], [ %3931, %3926 ]
  %3920 = phi i8* [ %3907, %3906 ], [ %3937, %3926 ]
  %3921 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3917, i64 0, i32 1, i32 1
  %3922 = load i32, i32* %3921, align 4
  %3923 = icmp sgt i32 %3922, 0
  br i1 %3923, label %3940, label %3926

3924:                                             ; preds = %4038
  %3925 = load i32, i32* %3890, align 8
  br label %3926

3926:                                             ; preds = %3924, %3914
  %3927 = phi i32 [ %3915, %3914 ], [ %3925, %3924 ]
  %3928 = phi %"class.blink::IntRect"* [ %3916, %3914 ], [ %4039, %3924 ]
  %3929 = phi %"class.blink::IntRect"* [ %3917, %3914 ], [ %4039, %3924 ]
  %3930 = phi i8* [ %3920, %3914 ], [ %4040, %3924 ]
  %3931 = phi float* [ %3919, %3914 ], [ %4041, %3924 ]
  %3932 = phi i32 [ %3922, %3914 ], [ %4044, %3924 ]
  %3933 = load i32, i32* %3913, align 4
  %3934 = sub nsw i32 %3933, %3932
  %3935 = sext i32 %3934 to i64
  %3936 = mul nsw i64 %3935, %3872
  %3937 = getelementptr inbounds i8, i8* %3930, i64 %3936
  %3938 = add nuw nsw i32 %3918, 1
  %3939 = icmp slt i32 %3938, %3927
  br i1 %3939, label %3914, label %4046

3940:                                             ; preds = %3914, %4038
  %3941 = phi %"class.blink::IntRect"* [ %4039, %4038 ], [ %3916, %3914 ]
  %3942 = phi %"class.blink::IntRect"* [ %4039, %4038 ], [ %3917, %3914 ]
  %3943 = phi i32 [ %4042, %4038 ], [ 0, %3914 ]
  %3944 = phi float* [ %4041, %4038 ], [ %3919, %3914 ]
  %3945 = phi i8* [ %4040, %4038 ], [ %3920, %3914 ]
  %3946 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3942, i64 0, i32 1, i32 0
  %3947 = load i32, i32* %3946, align 4
  %3948 = icmp eq i32 %3947, 0
  br i1 %3948, label %4038, label %3949

3949:                                             ; preds = %3940
  %3950 = load float*, float** %3912, align 8
  br label %3951

3951:                                             ; preds = %3951, %3949
  %3952 = phi i32 [ %3975, %3951 ], [ 0, %3949 ]
  %3953 = phi i8* [ %3973, %3951 ], [ %3945, %3949 ]
  %3954 = phi float* [ %3974, %3951 ], [ %3950, %3949 ]
  %3955 = load i8, i8* %3953, align 1
  %3956 = uitofp i8 %3955 to float
  %3957 = fmul float %3956, 0x3F70101020000000
  store float %3957, float* %3954, align 4
  %3958 = getelementptr inbounds i8, i8* %3953, i64 1
  %3959 = load i8, i8* %3958, align 1
  %3960 = uitofp i8 %3959 to float
  %3961 = fmul float %3960, 0x3F70101020000000
  %3962 = getelementptr inbounds float, float* %3954, i64 1
  store float %3961, float* %3962, align 4
  %3963 = getelementptr inbounds i8, i8* %3953, i64 2
  %3964 = load i8, i8* %3963, align 1
  %3965 = uitofp i8 %3964 to float
  %3966 = fmul float %3965, 0x3F70101020000000
  %3967 = getelementptr inbounds float, float* %3954, i64 2
  store float %3966, float* %3967, align 4
  %3968 = getelementptr inbounds i8, i8* %3953, i64 3
  %3969 = load i8, i8* %3968, align 1
  %3970 = uitofp i8 %3969 to float
  %3971 = fmul float %3970, 0x3F70101020000000
  %3972 = getelementptr inbounds float, float* %3954, i64 3
  store float %3971, float* %3972, align 4
  %3973 = getelementptr inbounds i8, i8* %3953, i64 4
  %3974 = getelementptr inbounds float, float* %3954, i64 4
  %3975 = add nuw i32 %3952, 1
  %3976 = icmp eq i32 %3975, %3947
  br i1 %3976, label %3977, label %3951

3977:                                             ; preds = %3951
  %3978 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3879, align 8
  %3979 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3978, i64 0, i32 1, i32 0
  %3980 = load i32, i32* %3979, align 4
  %3981 = icmp eq i32 %3980, 0
  br i1 %3981, label %4038, label %3982

3982:                                             ; preds = %3977
  %3983 = load float*, float** %3912, align 8
  %3984 = and i32 %3980, 1
  %3985 = icmp eq i32 %3980, 1
  br i1 %3985, label %4020, label %3986

3986:                                             ; preds = %3982
  %3987 = sub i32 %3980, %3984
  br label %3988

3988:                                             ; preds = %3988, %3986
  %3989 = phi float* [ %3983, %3986 ], [ %4016, %3988 ]
  %3990 = phi float* [ %3944, %3986 ], [ %4017, %3988 ]
  %3991 = phi i32 [ %3987, %3986 ], [ %4018, %3988 ]
  %3992 = getelementptr inbounds float, float* %3989, i64 3
  %3993 = load float, float* %3992, align 4
  %3994 = fcmp une float %3993, 0.000000e+00
  %3995 = fdiv float 1.000000e+00, %3993
  %3996 = select i1 %3994, float %3995, float 1.000000e+00
  %3997 = load float, float* %3989, align 4
  %3998 = fmul float %3997, %3996
  store float %3998, float* %3990, align 4
  %3999 = bitcast float* %3992 to i32*
  %4000 = load i32, i32* %3999, align 4
  %4001 = getelementptr inbounds float, float* %3990, i64 1
  %4002 = bitcast float* %4001 to i32*
  store i32 %4000, i32* %4002, align 4
  %4003 = getelementptr inbounds float, float* %3989, i64 4
  %4004 = getelementptr inbounds float, float* %3990, i64 2
  %4005 = getelementptr inbounds float, float* %3989, i64 7
  %4006 = load float, float* %4005, align 4
  %4007 = fcmp une float %4006, 0.000000e+00
  %4008 = fdiv float 1.000000e+00, %4006
  %4009 = select i1 %4007, float %4008, float 1.000000e+00
  %4010 = load float, float* %4003, align 4
  %4011 = fmul float %4010, %4009
  store float %4011, float* %4004, align 4
  %4012 = bitcast float* %4005 to i32*
  %4013 = load i32, i32* %4012, align 4
  %4014 = getelementptr inbounds float, float* %3990, i64 3
  %4015 = bitcast float* %4014 to i32*
  store i32 %4013, i32* %4015, align 4
  %4016 = getelementptr inbounds float, float* %3989, i64 8
  %4017 = getelementptr inbounds float, float* %3990, i64 4
  %4018 = add i32 %3991, -2
  %4019 = icmp eq i32 %4018, 0
  br i1 %4019, label %4020, label %3988

4020:                                             ; preds = %3988, %3982
  %4021 = phi float* [ %3983, %3982 ], [ %4016, %3988 ]
  %4022 = phi float* [ %3944, %3982 ], [ %4017, %3988 ]
  %4023 = icmp eq i32 %3984, 0
  br i1 %4023, label %4036, label %4024

4024:                                             ; preds = %4020
  %4025 = getelementptr inbounds float, float* %4021, i64 3
  %4026 = load float, float* %4025, align 4
  %4027 = fcmp une float %4026, 0.000000e+00
  %4028 = fdiv float 1.000000e+00, %4026
  %4029 = select i1 %4027, float %4028, float 1.000000e+00
  %4030 = load float, float* %4021, align 4
  %4031 = fmul float %4030, %4029
  store float %4031, float* %4022, align 4
  %4032 = bitcast float* %4025 to i32*
  %4033 = load i32, i32* %4032, align 4
  %4034 = getelementptr inbounds float, float* %4022, i64 1
  %4035 = bitcast float* %4034 to i32*
  store i32 %4033, i32* %4035, align 4
  br label %4036

4036:                                             ; preds = %4020, %4024
  %4037 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3879, align 8
  br label %4038

4038:                                             ; preds = %4036, %3977, %3940
  %4039 = phi %"class.blink::IntRect"* [ %4037, %4036 ], [ %3978, %3977 ], [ %3941, %3940 ]
  %4040 = getelementptr inbounds i8, i8* %3945, i64 %3872
  %4041 = getelementptr inbounds float, float* %3944, i64 %3876
  %4042 = add nuw nsw i32 %3943, 1
  %4043 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4039, i64 0, i32 1, i32 1
  %4044 = load i32, i32* %4043, align 4
  %4045 = icmp slt i32 %4042, %4044
  br i1 %4045, label %3940, label %3924

4046:                                             ; preds = %3926, %3904
  %4047 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4047, align 4
  br label %11653

4048:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %4049
    i32 1, label %4178
    i32 2, label %4361
  ]

4049:                                             ; preds = %4048
  %4050 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4051 = load i32, i32* %4050, align 8
  %4052 = sext i32 %4051 to i64
  %4053 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4054 = load i32, i32* %4053, align 8
  %4055 = sext i32 %4054 to i64
  %4056 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4057 = load i8*, i8** %4056, align 8
  %4058 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4059 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4058, align 8
  %4060 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4059, i64 0, i32 0, i32 1
  %4061 = load i32, i32* %4060, align 4
  %4062 = mul nsw i32 %4061, %4051
  %4063 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4064 = load i32, i32* %4063, align 4
  %4065 = add nsw i32 %4062, %4064
  %4066 = sext i32 %4065 to i64
  %4067 = getelementptr inbounds i8, i8* %4057, i64 %4066
  %4068 = icmp slt i32 %4054, 0
  %4069 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4070 = load i32, i32* %4069, align 8
  %4071 = icmp sgt i32 %4070, 1
  %4072 = and i1 %4068, %4071
  br i1 %4072, label %4073, label %4083

4073:                                             ; preds = %4049
  %4074 = add nsw i32 %4070, -1
  %4075 = sext i32 %4074 to i64
  %4076 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4077 = load i32, i32* %4076, align 4
  %4078 = sext i32 %4077 to i64
  %4079 = mul nsw i64 %4052, %4075
  %4080 = mul i64 %4079, %4078
  %4081 = sub i64 0, %4080
  %4082 = getelementptr inbounds i8, i8* %4067, i64 %4081
  br label %4085

4083:                                             ; preds = %4049
  %4084 = icmp sgt i32 %4070, 0
  br i1 %4084, label %4085, label %4176

4085:                                             ; preds = %4083, %4073
  %4086 = phi i8* [ %4082, %4073 ], [ %4067, %4083 ]
  %4087 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4088 = load i8*, i8** %4087, align 8
  %4089 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4090

4090:                                             ; preds = %4102, %4085
  %4091 = phi i32 [ %4070, %4085 ], [ %4103, %4102 ]
  %4092 = phi %"class.blink::IntRect"* [ %4059, %4085 ], [ %4104, %4102 ]
  %4093 = phi %"class.blink::IntRect"* [ %4059, %4085 ], [ %4105, %4102 ]
  %4094 = phi i32 [ 0, %4085 ], [ %4114, %4102 ]
  %4095 = phi i8* [ %4088, %4085 ], [ %4107, %4102 ]
  %4096 = phi i8* [ %4086, %4085 ], [ %4113, %4102 ]
  %4097 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4093, i64 0, i32 1, i32 1
  %4098 = load i32, i32* %4097, align 4
  %4099 = icmp sgt i32 %4098, 0
  br i1 %4099, label %4116, label %4102

4100:                                             ; preds = %4168
  %4101 = load i32, i32* %4069, align 8
  br label %4102

4102:                                             ; preds = %4100, %4090
  %4103 = phi i32 [ %4091, %4090 ], [ %4101, %4100 ]
  %4104 = phi %"class.blink::IntRect"* [ %4092, %4090 ], [ %4169, %4100 ]
  %4105 = phi %"class.blink::IntRect"* [ %4093, %4090 ], [ %4169, %4100 ]
  %4106 = phi i8* [ %4096, %4090 ], [ %4170, %4100 ]
  %4107 = phi i8* [ %4095, %4090 ], [ %4171, %4100 ]
  %4108 = phi i32 [ %4098, %4090 ], [ %4174, %4100 ]
  %4109 = load i32, i32* %4089, align 4
  %4110 = sub nsw i32 %4109, %4108
  %4111 = sext i32 %4110 to i64
  %4112 = mul nsw i64 %4111, %4052
  %4113 = getelementptr inbounds i8, i8* %4106, i64 %4112
  %4114 = add nuw nsw i32 %4094, 1
  %4115 = icmp slt i32 %4114, %4103
  br i1 %4115, label %4090, label %4176

4116:                                             ; preds = %4090, %4168
  %4117 = phi %"class.blink::IntRect"* [ %4169, %4168 ], [ %4092, %4090 ]
  %4118 = phi %"class.blink::IntRect"* [ %4169, %4168 ], [ %4093, %4090 ]
  %4119 = phi i32 [ %4172, %4168 ], [ 0, %4090 ]
  %4120 = phi i8* [ %4171, %4168 ], [ %4095, %4090 ]
  %4121 = phi i8* [ %4170, %4168 ], [ %4096, %4090 ]
  %4122 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4118, i64 0, i32 1, i32 0
  %4123 = load i32, i32* %4122, align 4
  %4124 = icmp eq i32 %4123, 0
  br i1 %4124, label %4168, label %4125

4125:                                             ; preds = %4116
  %4126 = and i32 %4123, 1
  %4127 = icmp eq i32 %4123, 1
  br i1 %4127, label %4154, label %4128

4128:                                             ; preds = %4125
  %4129 = sub i32 %4123, %4126
  br label %4130

4130:                                             ; preds = %4130, %4128
  %4131 = phi i8* [ %4121, %4128 ], [ %4150, %4130 ]
  %4132 = phi i8* [ %4120, %4128 ], [ %4151, %4130 ]
  %4133 = phi i32 [ %4129, %4128 ], [ %4152, %4130 ]
  %4134 = load i8, i8* %4131, align 1
  store i8 %4134, i8* %4132, align 1
  %4135 = getelementptr inbounds i8, i8* %4131, i64 1
  %4136 = load i8, i8* %4135, align 1
  %4137 = getelementptr inbounds i8, i8* %4132, i64 1
  store i8 %4136, i8* %4137, align 1
  %4138 = getelementptr inbounds i8, i8* %4131, i64 2
  %4139 = load i8, i8* %4138, align 1
  %4140 = getelementptr inbounds i8, i8* %4132, i64 2
  store i8 %4139, i8* %4140, align 1
  %4141 = getelementptr inbounds i8, i8* %4131, i64 4
  %4142 = getelementptr inbounds i8, i8* %4132, i64 3
  %4143 = load i8, i8* %4141, align 1
  store i8 %4143, i8* %4142, align 1
  %4144 = getelementptr inbounds i8, i8* %4131, i64 5
  %4145 = load i8, i8* %4144, align 1
  %4146 = getelementptr inbounds i8, i8* %4132, i64 4
  store i8 %4145, i8* %4146, align 1
  %4147 = getelementptr inbounds i8, i8* %4131, i64 6
  %4148 = load i8, i8* %4147, align 1
  %4149 = getelementptr inbounds i8, i8* %4132, i64 5
  store i8 %4148, i8* %4149, align 1
  %4150 = getelementptr inbounds i8, i8* %4131, i64 8
  %4151 = getelementptr inbounds i8, i8* %4132, i64 6
  %4152 = add i32 %4133, -2
  %4153 = icmp eq i32 %4152, 0
  br i1 %4153, label %4154, label %4130

4154:                                             ; preds = %4130, %4125
  %4155 = phi i8* [ %4121, %4125 ], [ %4150, %4130 ]
  %4156 = phi i8* [ %4120, %4125 ], [ %4151, %4130 ]
  %4157 = icmp eq i32 %4126, 0
  br i1 %4157, label %4166, label %4158

4158:                                             ; preds = %4154
  %4159 = load i8, i8* %4155, align 1
  store i8 %4159, i8* %4156, align 1
  %4160 = getelementptr inbounds i8, i8* %4155, i64 1
  %4161 = load i8, i8* %4160, align 1
  %4162 = getelementptr inbounds i8, i8* %4156, i64 1
  store i8 %4161, i8* %4162, align 1
  %4163 = getelementptr inbounds i8, i8* %4155, i64 2
  %4164 = load i8, i8* %4163, align 1
  %4165 = getelementptr inbounds i8, i8* %4156, i64 2
  store i8 %4164, i8* %4165, align 1
  br label %4166

4166:                                             ; preds = %4154, %4158
  %4167 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4058, align 8
  br label %4168

4168:                                             ; preds = %4166, %4116
  %4169 = phi %"class.blink::IntRect"* [ %4167, %4166 ], [ %4117, %4116 ]
  %4170 = getelementptr inbounds i8, i8* %4121, i64 %4052
  %4171 = getelementptr inbounds i8, i8* %4120, i64 %4055
  %4172 = add nuw nsw i32 %4119, 1
  %4173 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4169, i64 0, i32 1, i32 1
  %4174 = load i32, i32* %4173, align 4
  %4175 = icmp slt i32 %4172, %4174
  br i1 %4175, label %4116, label %4100

4176:                                             ; preds = %4102, %4083
  %4177 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4177, align 4
  br label %11653

4178:                                             ; preds = %4048
  %4179 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4180 = load i32, i32* %4179, align 8
  %4181 = sext i32 %4180 to i64
  %4182 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4183 = load i32, i32* %4182, align 8
  %4184 = sext i32 %4183 to i64
  %4185 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4186 = load i8*, i8** %4185, align 8
  %4187 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4188 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4187, align 8
  %4189 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4188, i64 0, i32 0, i32 1
  %4190 = load i32, i32* %4189, align 4
  %4191 = mul nsw i32 %4190, %4180
  %4192 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4193 = load i32, i32* %4192, align 4
  %4194 = add nsw i32 %4191, %4193
  %4195 = sext i32 %4194 to i64
  %4196 = getelementptr inbounds i8, i8* %4186, i64 %4195
  %4197 = icmp slt i32 %4183, 0
  %4198 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4199 = load i32, i32* %4198, align 8
  %4200 = icmp sgt i32 %4199, 1
  %4201 = and i1 %4197, %4200
  br i1 %4201, label %4202, label %4212

4202:                                             ; preds = %4178
  %4203 = add nsw i32 %4199, -1
  %4204 = sext i32 %4203 to i64
  %4205 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4206 = load i32, i32* %4205, align 4
  %4207 = sext i32 %4206 to i64
  %4208 = mul nsw i64 %4181, %4204
  %4209 = mul i64 %4208, %4207
  %4210 = sub i64 0, %4209
  %4211 = getelementptr inbounds i8, i8* %4196, i64 %4210
  br label %4214

4212:                                             ; preds = %4178
  %4213 = icmp sgt i32 %4199, 0
  br i1 %4213, label %4214, label %4359

4214:                                             ; preds = %4212, %4202
  %4215 = phi i8* [ %4211, %4202 ], [ %4196, %4212 ]
  %4216 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4217 = load i8*, i8** %4216, align 8
  %4218 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4219

4219:                                             ; preds = %4231, %4214
  %4220 = phi i32 [ %4199, %4214 ], [ %4232, %4231 ]
  %4221 = phi %"class.blink::IntRect"* [ %4188, %4214 ], [ %4233, %4231 ]
  %4222 = phi %"class.blink::IntRect"* [ %4188, %4214 ], [ %4234, %4231 ]
  %4223 = phi i32 [ 0, %4214 ], [ %4243, %4231 ]
  %4224 = phi i8* [ %4217, %4214 ], [ %4236, %4231 ]
  %4225 = phi i8* [ %4215, %4214 ], [ %4242, %4231 ]
  %4226 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4222, i64 0, i32 1, i32 1
  %4227 = load i32, i32* %4226, align 4
  %4228 = icmp sgt i32 %4227, 0
  br i1 %4228, label %4245, label %4231

4229:                                             ; preds = %4350
  %4230 = load i32, i32* %4198, align 8
  br label %4231

4231:                                             ; preds = %4229, %4219
  %4232 = phi i32 [ %4220, %4219 ], [ %4230, %4229 ]
  %4233 = phi %"class.blink::IntRect"* [ %4221, %4219 ], [ %4351, %4229 ]
  %4234 = phi %"class.blink::IntRect"* [ %4222, %4219 ], [ %4351, %4229 ]
  %4235 = phi i8* [ %4225, %4219 ], [ %4352, %4229 ]
  %4236 = phi i8* [ %4224, %4219 ], [ %4353, %4229 ]
  %4237 = phi i32 [ %4227, %4219 ], [ %4356, %4229 ]
  %4238 = load i32, i32* %4218, align 4
  %4239 = sub nsw i32 %4238, %4237
  %4240 = sext i32 %4239 to i64
  %4241 = mul nsw i64 %4240, %4181
  %4242 = getelementptr inbounds i8, i8* %4235, i64 %4241
  %4243 = add nuw nsw i32 %4223, 1
  %4244 = icmp slt i32 %4243, %4232
  br i1 %4244, label %4219, label %4359

4245:                                             ; preds = %4219, %4350
  %4246 = phi i64 [ %4358, %4350 ], [ 0, %4219 ]
  %4247 = phi %"class.blink::IntRect"* [ %4351, %4350 ], [ %4221, %4219 ]
  %4248 = phi %"class.blink::IntRect"* [ %4351, %4350 ], [ %4222, %4219 ]
  %4249 = phi i32 [ %4354, %4350 ], [ 0, %4219 ]
  %4250 = phi i8* [ %4353, %4350 ], [ %4224, %4219 ]
  %4251 = phi i8* [ %4352, %4350 ], [ %4225, %4219 ]
  %4252 = mul i64 %4246, %4184
  %4253 = getelementptr i8, i8* %4224, i64 %4252
  %4254 = add i64 %4252, 3
  %4255 = getelementptr i8, i8* %4224, i64 %4254
  %4256 = mul i64 %4246, %4181
  %4257 = getelementptr i8, i8* %4225, i64 %4256
  %4258 = add i64 %4256, 4
  %4259 = getelementptr i8, i8* %4225, i64 %4258
  %4260 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4248, i64 0, i32 1, i32 0
  %4261 = load i32, i32* %4260, align 4
  %4262 = icmp eq i32 %4261, 0
  br i1 %4262, label %4350, label %4263

4263:                                             ; preds = %4245
  %4264 = add i32 %4261, -1
  %4265 = zext i32 %4264 to i64
  %4266 = add nuw nsw i64 %4265, 1
  %4267 = icmp ult i64 %4266, 16
  br i1 %4267, label %4316, label %4268

4268:                                             ; preds = %4263
  %4269 = add i32 %4261, -1
  %4270 = zext i32 %4269 to i64
  %4271 = mul nuw nsw i64 %4270, 3
  %4272 = getelementptr i8, i8* %4255, i64 %4271
  %4273 = shl nuw nsw i64 %4270, 2
  %4274 = getelementptr i8, i8* %4259, i64 %4273
  %4275 = icmp ult i8* %4253, %4274
  %4276 = icmp ult i8* %4257, %4272
  %4277 = and i1 %4275, %4276
  br i1 %4277, label %4316, label %4278

4278:                                             ; preds = %4268
  %4279 = and i64 %4266, 8589934576
  %4280 = shl nuw nsw i64 %4279, 2
  %4281 = getelementptr i8, i8* %4251, i64 %4280
  %4282 = mul nuw nsw i64 %4279, 3
  %4283 = getelementptr i8, i8* %4250, i64 %4282
  %4284 = trunc i64 %4279 to i32
  br label %4285

4285:                                             ; preds = %4285, %4278
  %4286 = phi i64 [ 0, %4278 ], [ %4312, %4285 ]
  %4287 = shl i64 %4286, 2
  %4288 = mul i64 %4286, 3
  %4289 = getelementptr inbounds i8, i8* %4251, i64 %4287
  %4290 = bitcast i8* %4289 to <64 x i8>*
  %4291 = load <64 x i8>, <64 x i8>* %4290, align 1
  %4292 = shufflevector <64 x i8> %4291, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %4293 = shufflevector <64 x i8> %4291, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %4294 = shufflevector <64 x i8> %4291, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %4295 = shufflevector <64 x i8> %4291, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %4296 = uitofp <16 x i8> %4295 to <16 x float>
  %4297 = fdiv <16 x float> %4296, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4298 = uitofp <16 x i8> %4292 to <16 x float>
  %4299 = fmul <16 x float> %4297, %4298
  %4300 = fptoui <16 x float> %4299 to <16 x i8>
  %4301 = uitofp <16 x i8> %4293 to <16 x float>
  %4302 = fmul <16 x float> %4297, %4301
  %4303 = fptoui <16 x float> %4302 to <16 x i8>
  %4304 = uitofp <16 x i8> %4294 to <16 x float>
  %4305 = fmul <16 x float> %4297, %4304
  %4306 = fptoui <16 x float> %4305 to <16 x i8>
  %4307 = getelementptr inbounds i8, i8* %4250, i64 %4288
  %4308 = bitcast i8* %4307 to <48 x i8>*
  %4309 = shufflevector <16 x i8> %4300, <16 x i8> %4303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4310 = shufflevector <16 x i8> %4306, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4311 = shufflevector <32 x i8> %4309, <32 x i8> %4310, <48 x i32> <i32 0, i32 16, i32 32, i32 1, i32 17, i32 33, i32 2, i32 18, i32 34, i32 3, i32 19, i32 35, i32 4, i32 20, i32 36, i32 5, i32 21, i32 37, i32 6, i32 22, i32 38, i32 7, i32 23, i32 39, i32 8, i32 24, i32 40, i32 9, i32 25, i32 41, i32 10, i32 26, i32 42, i32 11, i32 27, i32 43, i32 12, i32 28, i32 44, i32 13, i32 29, i32 45, i32 14, i32 30, i32 46, i32 15, i32 31, i32 47>
  store <48 x i8> %4311, <48 x i8>* %4308, align 1
  %4312 = add i64 %4286, 16
  %4313 = icmp eq i64 %4312, %4279
  br i1 %4313, label %4314, label %4285, !llvm.loop !164

4314:                                             ; preds = %4285
  %4315 = icmp eq i64 %4266, %4279
  br i1 %4315, label %4348, label %4316

4316:                                             ; preds = %4314, %4268, %4263
  %4317 = phi i8* [ %4251, %4268 ], [ %4251, %4263 ], [ %4281, %4314 ]
  %4318 = phi i8* [ %4250, %4268 ], [ %4250, %4263 ], [ %4283, %4314 ]
  %4319 = phi i32 [ 0, %4268 ], [ 0, %4263 ], [ %4284, %4314 ]
  br label %4320

4320:                                             ; preds = %4316, %4320
  %4321 = phi i8* [ %4344, %4320 ], [ %4317, %4316 ]
  %4322 = phi i8* [ %4345, %4320 ], [ %4318, %4316 ]
  %4323 = phi i32 [ %4346, %4320 ], [ %4319, %4316 ]
  %4324 = getelementptr inbounds i8, i8* %4321, i64 3
  %4325 = load i8, i8* %4324, align 1
  %4326 = uitofp i8 %4325 to float
  %4327 = fdiv float %4326, 2.550000e+02
  %4328 = load i8, i8* %4321, align 1
  %4329 = uitofp i8 %4328 to float
  %4330 = fmul float %4327, %4329
  %4331 = fptoui float %4330 to i8
  %4332 = getelementptr inbounds i8, i8* %4321, i64 1
  %4333 = load i8, i8* %4332, align 1
  %4334 = uitofp i8 %4333 to float
  %4335 = fmul float %4327, %4334
  %4336 = fptoui float %4335 to i8
  %4337 = getelementptr inbounds i8, i8* %4321, i64 2
  %4338 = load i8, i8* %4337, align 1
  %4339 = uitofp i8 %4338 to float
  %4340 = fmul float %4327, %4339
  %4341 = fptoui float %4340 to i8
  store i8 %4331, i8* %4322, align 1
  %4342 = getelementptr inbounds i8, i8* %4322, i64 1
  store i8 %4336, i8* %4342, align 1
  %4343 = getelementptr inbounds i8, i8* %4322, i64 2
  store i8 %4341, i8* %4343, align 1
  %4344 = getelementptr inbounds i8, i8* %4321, i64 4
  %4345 = getelementptr inbounds i8, i8* %4322, i64 3
  %4346 = add nuw i32 %4323, 1
  %4347 = icmp eq i32 %4346, %4261
  br i1 %4347, label %4348, label %4320, !llvm.loop !165

4348:                                             ; preds = %4320, %4314
  %4349 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4187, align 8
  br label %4350

4350:                                             ; preds = %4348, %4245
  %4351 = phi %"class.blink::IntRect"* [ %4349, %4348 ], [ %4247, %4245 ]
  %4352 = getelementptr inbounds i8, i8* %4251, i64 %4181
  %4353 = getelementptr inbounds i8, i8* %4250, i64 %4184
  %4354 = add nuw nsw i32 %4249, 1
  %4355 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4351, i64 0, i32 1, i32 1
  %4356 = load i32, i32* %4355, align 4
  %4357 = icmp slt i32 %4354, %4356
  %4358 = add i64 %4246, 1
  br i1 %4357, label %4245, label %4229

4359:                                             ; preds = %4231, %4212
  %4360 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4360, align 4
  br label %11653

4361:                                             ; preds = %4048
  %4362 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4363 = load i32, i32* %4362, align 8
  %4364 = sext i32 %4363 to i64
  %4365 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4366 = load i32, i32* %4365, align 8
  %4367 = sext i32 %4366 to i64
  %4368 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4369 = load i8*, i8** %4368, align 8
  %4370 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4371 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4370, align 8
  %4372 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4371, i64 0, i32 0, i32 1
  %4373 = load i32, i32* %4372, align 4
  %4374 = mul nsw i32 %4373, %4363
  %4375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4376 = load i32, i32* %4375, align 4
  %4377 = add nsw i32 %4374, %4376
  %4378 = sext i32 %4377 to i64
  %4379 = getelementptr inbounds i8, i8* %4369, i64 %4378
  %4380 = icmp slt i32 %4366, 0
  %4381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4382 = load i32, i32* %4381, align 8
  %4383 = icmp sgt i32 %4382, 1
  %4384 = and i1 %4380, %4383
  br i1 %4384, label %4385, label %4395

4385:                                             ; preds = %4361
  %4386 = add nsw i32 %4382, -1
  %4387 = sext i32 %4386 to i64
  %4388 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4389 = load i32, i32* %4388, align 4
  %4390 = sext i32 %4389 to i64
  %4391 = mul nsw i64 %4364, %4387
  %4392 = mul i64 %4391, %4390
  %4393 = sub i64 0, %4392
  %4394 = getelementptr inbounds i8, i8* %4379, i64 %4393
  br label %4397

4395:                                             ; preds = %4361
  %4396 = icmp sgt i32 %4382, 0
  br i1 %4396, label %4397, label %4479

4397:                                             ; preds = %4395, %4385
  %4398 = phi i8* [ %4394, %4385 ], [ %4379, %4395 ]
  %4399 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4400 = load i8*, i8** %4399, align 8
  %4401 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4402

4402:                                             ; preds = %4414, %4397
  %4403 = phi i32 [ %4382, %4397 ], [ %4415, %4414 ]
  %4404 = phi %"class.blink::IntRect"* [ %4371, %4397 ], [ %4416, %4414 ]
  %4405 = phi %"class.blink::IntRect"* [ %4371, %4397 ], [ %4417, %4414 ]
  %4406 = phi i32 [ 0, %4397 ], [ %4426, %4414 ]
  %4407 = phi i8* [ %4400, %4397 ], [ %4419, %4414 ]
  %4408 = phi i8* [ %4398, %4397 ], [ %4425, %4414 ]
  %4409 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4405, i64 0, i32 1, i32 1
  %4410 = load i32, i32* %4409, align 4
  %4411 = icmp sgt i32 %4410, 0
  br i1 %4411, label %4428, label %4414

4412:                                             ; preds = %4471
  %4413 = load i32, i32* %4381, align 8
  br label %4414

4414:                                             ; preds = %4412, %4402
  %4415 = phi i32 [ %4403, %4402 ], [ %4413, %4412 ]
  %4416 = phi %"class.blink::IntRect"* [ %4404, %4402 ], [ %4472, %4412 ]
  %4417 = phi %"class.blink::IntRect"* [ %4405, %4402 ], [ %4472, %4412 ]
  %4418 = phi i8* [ %4408, %4402 ], [ %4473, %4412 ]
  %4419 = phi i8* [ %4407, %4402 ], [ %4474, %4412 ]
  %4420 = phi i32 [ %4410, %4402 ], [ %4477, %4412 ]
  %4421 = load i32, i32* %4401, align 4
  %4422 = sub nsw i32 %4421, %4420
  %4423 = sext i32 %4422 to i64
  %4424 = mul nsw i64 %4423, %4364
  %4425 = getelementptr inbounds i8, i8* %4418, i64 %4424
  %4426 = add nuw nsw i32 %4406, 1
  %4427 = icmp slt i32 %4426, %4415
  br i1 %4427, label %4402, label %4479

4428:                                             ; preds = %4402, %4471
  %4429 = phi %"class.blink::IntRect"* [ %4472, %4471 ], [ %4404, %4402 ]
  %4430 = phi %"class.blink::IntRect"* [ %4472, %4471 ], [ %4405, %4402 ]
  %4431 = phi i32 [ %4475, %4471 ], [ 0, %4402 ]
  %4432 = phi i8* [ %4474, %4471 ], [ %4407, %4402 ]
  %4433 = phi i8* [ %4473, %4471 ], [ %4408, %4402 ]
  %4434 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4430, i64 0, i32 1, i32 0
  %4435 = load i32, i32* %4434, align 4
  %4436 = icmp eq i32 %4435, 0
  br i1 %4436, label %4471, label %4437

4437:                                             ; preds = %4428, %4447
  %4438 = phi i8* [ %4465, %4447 ], [ %4433, %4428 ]
  %4439 = phi i8* [ %4466, %4447 ], [ %4432, %4428 ]
  %4440 = phi i32 [ %4467, %4447 ], [ 0, %4428 ]
  %4441 = getelementptr inbounds i8, i8* %4438, i64 3
  %4442 = load i8, i8* %4441, align 1
  %4443 = icmp eq i8 %4442, 0
  br i1 %4443, label %4447, label %4444

4444:                                             ; preds = %4437
  %4445 = uitofp i8 %4442 to float
  %4446 = fdiv float 2.550000e+02, %4445
  br label %4447

4447:                                             ; preds = %4444, %4437
  %4448 = phi float [ %4446, %4444 ], [ 1.000000e+00, %4437 ]
  %4449 = load i8, i8* %4438, align 1
  %4450 = uitofp i8 %4449 to float
  %4451 = fmul float %4448, %4450
  %4452 = fptoui float %4451 to i8
  %4453 = getelementptr inbounds i8, i8* %4438, i64 1
  %4454 = load i8, i8* %4453, align 1
  %4455 = uitofp i8 %4454 to float
  %4456 = fmul float %4448, %4455
  %4457 = fptoui float %4456 to i8
  %4458 = getelementptr inbounds i8, i8* %4438, i64 2
  %4459 = load i8, i8* %4458, align 1
  %4460 = uitofp i8 %4459 to float
  %4461 = fmul float %4448, %4460
  %4462 = fptoui float %4461 to i8
  store i8 %4452, i8* %4439, align 1
  %4463 = getelementptr inbounds i8, i8* %4439, i64 1
  store i8 %4457, i8* %4463, align 1
  %4464 = getelementptr inbounds i8, i8* %4439, i64 2
  store i8 %4462, i8* %4464, align 1
  %4465 = getelementptr inbounds i8, i8* %4438, i64 4
  %4466 = getelementptr inbounds i8, i8* %4439, i64 3
  %4467 = add nuw i32 %4440, 1
  %4468 = icmp eq i32 %4467, %4435
  br i1 %4468, label %4469, label %4437

4469:                                             ; preds = %4447
  %4470 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4370, align 8
  br label %4471

4471:                                             ; preds = %4469, %4428
  %4472 = phi %"class.blink::IntRect"* [ %4470, %4469 ], [ %4429, %4428 ]
  %4473 = getelementptr inbounds i8, i8* %4433, i64 %4364
  %4474 = getelementptr inbounds i8, i8* %4432, i64 %4367
  %4475 = add nuw nsw i32 %4431, 1
  %4476 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4472, i64 0, i32 1, i32 1
  %4477 = load i32, i32* %4476, align 4
  %4478 = icmp slt i32 %4475, %4477
  br i1 %4478, label %4428, label %4412

4479:                                             ; preds = %4414, %4395
  %4480 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4480, align 4
  br label %11653

4481:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %4482
    i32 1, label %4657
    i32 2, label %4856
  ]

4482:                                             ; preds = %4481
  %4483 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4484 = load i32, i32* %4483, align 8
  %4485 = sext i32 %4484 to i64
  %4486 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4487 = load i32, i32* %4486, align 8
  %4488 = sdiv i32 %4487, 2
  %4489 = sext i32 %4488 to i64
  %4490 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4491 = load i8*, i8** %4490, align 8
  %4492 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4493 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4492, align 8
  %4494 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4493, i64 0, i32 0, i32 1
  %4495 = load i32, i32* %4494, align 4
  %4496 = mul nsw i32 %4495, %4484
  %4497 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4498 = load i32, i32* %4497, align 4
  %4499 = add nsw i32 %4496, %4498
  %4500 = sext i32 %4499 to i64
  %4501 = getelementptr inbounds i8, i8* %4491, i64 %4500
  %4502 = icmp slt i32 %4487, 0
  %4503 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4504 = load i32, i32* %4503, align 8
  %4505 = icmp sgt i32 %4504, 1
  %4506 = and i1 %4502, %4505
  br i1 %4506, label %4507, label %4517

4507:                                             ; preds = %4482
  %4508 = add nsw i32 %4504, -1
  %4509 = sext i32 %4508 to i64
  %4510 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4511 = load i32, i32* %4510, align 4
  %4512 = sext i32 %4511 to i64
  %4513 = mul nsw i64 %4485, %4509
  %4514 = mul i64 %4513, %4512
  %4515 = sub i64 0, %4514
  %4516 = getelementptr inbounds i8, i8* %4501, i64 %4515
  br label %4519

4517:                                             ; preds = %4482
  %4518 = icmp sgt i32 %4504, 0
  br i1 %4518, label %4519, label %4655

4519:                                             ; preds = %4517, %4507
  %4520 = phi i8* [ %4516, %4507 ], [ %4501, %4517 ]
  %4521 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4522 = bitcast i8** %4521 to i16**
  %4523 = load i16*, i16** %4522, align 8
  %4524 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4525

4525:                                             ; preds = %4537, %4519
  %4526 = phi i32 [ %4504, %4519 ], [ %4538, %4537 ]
  %4527 = phi %"class.blink::IntRect"* [ %4493, %4519 ], [ %4539, %4537 ]
  %4528 = phi %"class.blink::IntRect"* [ %4493, %4519 ], [ %4540, %4537 ]
  %4529 = phi i32 [ 0, %4519 ], [ %4549, %4537 ]
  %4530 = phi i16* [ %4523, %4519 ], [ %4542, %4537 ]
  %4531 = phi i8* [ %4520, %4519 ], [ %4548, %4537 ]
  %4532 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4528, i64 0, i32 1, i32 1
  %4533 = load i32, i32* %4532, align 4
  %4534 = icmp sgt i32 %4533, 0
  br i1 %4534, label %4551, label %4537

4535:                                             ; preds = %4646
  %4536 = load i32, i32* %4503, align 8
  br label %4537

4537:                                             ; preds = %4535, %4525
  %4538 = phi i32 [ %4526, %4525 ], [ %4536, %4535 ]
  %4539 = phi %"class.blink::IntRect"* [ %4527, %4525 ], [ %4647, %4535 ]
  %4540 = phi %"class.blink::IntRect"* [ %4528, %4525 ], [ %4647, %4535 ]
  %4541 = phi i8* [ %4531, %4525 ], [ %4648, %4535 ]
  %4542 = phi i16* [ %4530, %4525 ], [ %4649, %4535 ]
  %4543 = phi i32 [ %4533, %4525 ], [ %4652, %4535 ]
  %4544 = load i32, i32* %4524, align 4
  %4545 = sub nsw i32 %4544, %4543
  %4546 = sext i32 %4545 to i64
  %4547 = mul nsw i64 %4546, %4485
  %4548 = getelementptr inbounds i8, i8* %4541, i64 %4547
  %4549 = add nuw nsw i32 %4529, 1
  %4550 = icmp slt i32 %4549, %4538
  br i1 %4550, label %4525, label %4655

4551:                                             ; preds = %4525, %4646
  %4552 = phi i64 [ %4654, %4646 ], [ 0, %4525 ]
  %4553 = phi %"class.blink::IntRect"* [ %4647, %4646 ], [ %4527, %4525 ]
  %4554 = phi %"class.blink::IntRect"* [ %4647, %4646 ], [ %4528, %4525 ]
  %4555 = phi i32 [ %4650, %4646 ], [ 0, %4525 ]
  %4556 = phi i16* [ %4649, %4646 ], [ %4530, %4525 ]
  %4557 = phi i8* [ %4648, %4646 ], [ %4531, %4525 ]
  %4558 = mul i64 %4552, %4489
  %4559 = getelementptr i16, i16* %4530, i64 %4558
  %4560 = bitcast i16* %4559 to i8*
  %4561 = add i64 %4558, 1
  %4562 = getelementptr i16, i16* %4530, i64 %4561
  %4563 = mul i64 %4552, %4485
  %4564 = getelementptr i8, i8* %4531, i64 %4563
  %4565 = add i64 %4563, 3
  %4566 = getelementptr i8, i8* %4531, i64 %4565
  %4567 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4554, i64 0, i32 1, i32 0
  %4568 = load i32, i32* %4567, align 4
  %4569 = icmp eq i32 %4568, 0
  br i1 %4569, label %4646, label %4570

4570:                                             ; preds = %4551
  %4571 = add i32 %4568, -1
  %4572 = zext i32 %4571 to i64
  %4573 = add nuw nsw i64 %4572, 1
  %4574 = icmp ult i64 %4573, 9
  br i1 %4574, label %4617, label %4575

4575:                                             ; preds = %4570
  %4576 = add i32 %4568, -1
  %4577 = zext i32 %4576 to i64
  %4578 = getelementptr i16, i16* %4562, i64 %4577
  %4579 = bitcast i16* %4578 to i8*
  %4580 = shl nuw nsw i64 %4577, 2
  %4581 = getelementptr i8, i8* %4566, i64 %4580
  %4582 = icmp ugt i8* %4581, %4560
  %4583 = icmp ult i8* %4564, %4579
  %4584 = and i1 %4582, %4583
  br i1 %4584, label %4617, label %4585

4585:                                             ; preds = %4575
  %4586 = and i64 %4573, 7
  %4587 = icmp eq i64 %4586, 0
  %4588 = select i1 %4587, i64 8, i64 %4586
  %4589 = sub nsw i64 %4573, %4588
  %4590 = trunc i64 %4589 to i32
  %4591 = shl nsw i64 %4589, 2
  %4592 = getelementptr i8, i8* %4557, i64 %4591
  %4593 = getelementptr i16, i16* %4556, i64 %4589
  br label %4594

4594:                                             ; preds = %4594, %4585
  %4595 = phi i64 [ 0, %4585 ], [ %4615, %4594 ]
  %4596 = shl i64 %4595, 2
  %4597 = getelementptr i8, i8* %4557, i64 %4596
  %4598 = getelementptr i16, i16* %4556, i64 %4595
  %4599 = bitcast i8* %4597 to <32 x i8>*
  %4600 = load <32 x i8>, <32 x i8>* %4599, align 1
  %4601 = shufflevector <32 x i8> %4600, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %4602 = shufflevector <32 x i8> %4600, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %4603 = shufflevector <32 x i8> %4600, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %4604 = and <8 x i8> %4601, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %4605 = zext <8 x i8> %4604 to <8 x i16>
  %4606 = shl nuw <8 x i16> %4605, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4607 = and <8 x i8> %4602, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %4608 = zext <8 x i8> %4607 to <8 x i16>
  %4609 = shl nuw nsw <8 x i16> %4608, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %4610 = or <8 x i16> %4609, %4606
  %4611 = lshr <8 x i8> %4603, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %4612 = zext <8 x i8> %4611 to <8 x i16>
  %4613 = or <8 x i16> %4610, %4612
  %4614 = bitcast i16* %4598 to <8 x i16>*
  store <8 x i16> %4613, <8 x i16>* %4614, align 2, !alias.scope !166, !noalias !169
  %4615 = add i64 %4595, 8
  %4616 = icmp eq i64 %4615, %4589
  br i1 %4616, label %4617, label %4594, !llvm.loop !171

4617:                                             ; preds = %4594, %4575, %4570
  %4618 = phi i32 [ 0, %4575 ], [ 0, %4570 ], [ %4590, %4594 ]
  %4619 = phi i8* [ %4557, %4575 ], [ %4557, %4570 ], [ %4592, %4594 ]
  %4620 = phi i16* [ %4556, %4575 ], [ %4556, %4570 ], [ %4593, %4594 ]
  br label %4621

4621:                                             ; preds = %4617, %4621
  %4622 = phi i32 [ %4642, %4621 ], [ %4618, %4617 ]
  %4623 = phi i8* [ %4640, %4621 ], [ %4619, %4617 ]
  %4624 = phi i16* [ %4641, %4621 ], [ %4620, %4617 ]
  %4625 = load i8, i8* %4623, align 1
  %4626 = and i8 %4625, -8
  %4627 = zext i8 %4626 to i16
  %4628 = shl nuw i16 %4627, 8
  %4629 = getelementptr inbounds i8, i8* %4623, i64 1
  %4630 = load i8, i8* %4629, align 1
  %4631 = and i8 %4630, -4
  %4632 = zext i8 %4631 to i16
  %4633 = shl nuw nsw i16 %4632, 3
  %4634 = or i16 %4633, %4628
  %4635 = getelementptr inbounds i8, i8* %4623, i64 2
  %4636 = load i8, i8* %4635, align 1
  %4637 = lshr i8 %4636, 3
  %4638 = zext i8 %4637 to i16
  %4639 = or i16 %4634, %4638
  store i16 %4639, i16* %4624, align 2
  %4640 = getelementptr inbounds i8, i8* %4623, i64 4
  %4641 = getelementptr inbounds i16, i16* %4624, i64 1
  %4642 = add nuw i32 %4622, 1
  %4643 = icmp eq i32 %4642, %4568
  br i1 %4643, label %4644, label %4621, !llvm.loop !172

4644:                                             ; preds = %4621
  %4645 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4492, align 8
  br label %4646

4646:                                             ; preds = %4644, %4551
  %4647 = phi %"class.blink::IntRect"* [ %4645, %4644 ], [ %4553, %4551 ]
  %4648 = getelementptr inbounds i8, i8* %4557, i64 %4485
  %4649 = getelementptr inbounds i16, i16* %4556, i64 %4489
  %4650 = add nuw nsw i32 %4555, 1
  %4651 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4647, i64 0, i32 1, i32 1
  %4652 = load i32, i32* %4651, align 4
  %4653 = icmp slt i32 %4650, %4652
  %4654 = add i64 %4552, 1
  br i1 %4653, label %4551, label %4535

4655:                                             ; preds = %4537, %4517
  %4656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4656, align 4
  br label %11653

4657:                                             ; preds = %4481
  %4658 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4659 = load i32, i32* %4658, align 8
  %4660 = sext i32 %4659 to i64
  %4661 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4662 = load i32, i32* %4661, align 8
  %4663 = sdiv i32 %4662, 2
  %4664 = sext i32 %4663 to i64
  %4665 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4666 = load i8*, i8** %4665, align 8
  %4667 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4668 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4667, align 8
  %4669 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4668, i64 0, i32 0, i32 1
  %4670 = load i32, i32* %4669, align 4
  %4671 = mul nsw i32 %4670, %4659
  %4672 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4673 = load i32, i32* %4672, align 4
  %4674 = add nsw i32 %4671, %4673
  %4675 = sext i32 %4674 to i64
  %4676 = getelementptr inbounds i8, i8* %4666, i64 %4675
  %4677 = icmp slt i32 %4662, 0
  %4678 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4679 = load i32, i32* %4678, align 8
  %4680 = icmp sgt i32 %4679, 1
  %4681 = and i1 %4677, %4680
  br i1 %4681, label %4682, label %4692

4682:                                             ; preds = %4657
  %4683 = add nsw i32 %4679, -1
  %4684 = sext i32 %4683 to i64
  %4685 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4686 = load i32, i32* %4685, align 4
  %4687 = sext i32 %4686 to i64
  %4688 = mul nsw i64 %4660, %4684
  %4689 = mul i64 %4688, %4687
  %4690 = sub i64 0, %4689
  %4691 = getelementptr inbounds i8, i8* %4676, i64 %4690
  br label %4694

4692:                                             ; preds = %4657
  %4693 = icmp sgt i32 %4679, 0
  br i1 %4693, label %4694, label %4854

4694:                                             ; preds = %4692, %4682
  %4695 = phi i8* [ %4691, %4682 ], [ %4676, %4692 ]
  %4696 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4697 = bitcast i8** %4696 to i16**
  %4698 = load i16*, i16** %4697, align 8
  %4699 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4700

4700:                                             ; preds = %4712, %4694
  %4701 = phi i32 [ %4679, %4694 ], [ %4713, %4712 ]
  %4702 = phi %"class.blink::IntRect"* [ %4668, %4694 ], [ %4714, %4712 ]
  %4703 = phi %"class.blink::IntRect"* [ %4668, %4694 ], [ %4715, %4712 ]
  %4704 = phi i32 [ 0, %4694 ], [ %4724, %4712 ]
  %4705 = phi i16* [ %4698, %4694 ], [ %4717, %4712 ]
  %4706 = phi i8* [ %4695, %4694 ], [ %4723, %4712 ]
  %4707 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4703, i64 0, i32 1, i32 1
  %4708 = load i32, i32* %4707, align 4
  %4709 = icmp sgt i32 %4708, 0
  br i1 %4709, label %4726, label %4712

4710:                                             ; preds = %4845
  %4711 = load i32, i32* %4678, align 8
  br label %4712

4712:                                             ; preds = %4710, %4700
  %4713 = phi i32 [ %4701, %4700 ], [ %4711, %4710 ]
  %4714 = phi %"class.blink::IntRect"* [ %4702, %4700 ], [ %4846, %4710 ]
  %4715 = phi %"class.blink::IntRect"* [ %4703, %4700 ], [ %4846, %4710 ]
  %4716 = phi i8* [ %4706, %4700 ], [ %4847, %4710 ]
  %4717 = phi i16* [ %4705, %4700 ], [ %4848, %4710 ]
  %4718 = phi i32 [ %4708, %4700 ], [ %4851, %4710 ]
  %4719 = load i32, i32* %4699, align 4
  %4720 = sub nsw i32 %4719, %4718
  %4721 = sext i32 %4720 to i64
  %4722 = mul nsw i64 %4721, %4660
  %4723 = getelementptr inbounds i8, i8* %4716, i64 %4722
  %4724 = add nuw nsw i32 %4704, 1
  %4725 = icmp slt i32 %4724, %4713
  br i1 %4725, label %4700, label %4854

4726:                                             ; preds = %4700, %4845
  %4727 = phi i64 [ %4853, %4845 ], [ 0, %4700 ]
  %4728 = phi %"class.blink::IntRect"* [ %4846, %4845 ], [ %4702, %4700 ]
  %4729 = phi %"class.blink::IntRect"* [ %4846, %4845 ], [ %4703, %4700 ]
  %4730 = phi i32 [ %4849, %4845 ], [ 0, %4700 ]
  %4731 = phi i16* [ %4848, %4845 ], [ %4705, %4700 ]
  %4732 = phi i8* [ %4847, %4845 ], [ %4706, %4700 ]
  %4733 = mul i64 %4727, %4664
  %4734 = getelementptr i16, i16* %4705, i64 %4733
  %4735 = bitcast i16* %4734 to i8*
  %4736 = add i64 %4733, 1
  %4737 = getelementptr i16, i16* %4705, i64 %4736
  %4738 = mul i64 %4727, %4660
  %4739 = getelementptr i8, i8* %4706, i64 %4738
  %4740 = add i64 %4738, 4
  %4741 = getelementptr i8, i8* %4706, i64 %4740
  %4742 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4729, i64 0, i32 1, i32 0
  %4743 = load i32, i32* %4742, align 4
  %4744 = icmp eq i32 %4743, 0
  br i1 %4744, label %4845, label %4745

4745:                                             ; preds = %4726
  %4746 = add i32 %4743, -1
  %4747 = zext i32 %4746 to i64
  %4748 = add nuw nsw i64 %4747, 1
  %4749 = icmp ult i64 %4748, 8
  br i1 %4749, label %4803, label %4750

4750:                                             ; preds = %4745
  %4751 = add i32 %4743, -1
  %4752 = zext i32 %4751 to i64
  %4753 = getelementptr i16, i16* %4737, i64 %4752
  %4754 = bitcast i16* %4753 to i8*
  %4755 = shl nuw nsw i64 %4752, 2
  %4756 = getelementptr i8, i8* %4741, i64 %4755
  %4757 = icmp ugt i8* %4756, %4735
  %4758 = icmp ult i8* %4739, %4754
  %4759 = and i1 %4757, %4758
  br i1 %4759, label %4803, label %4760

4760:                                             ; preds = %4750
  %4761 = and i64 %4748, 8589934584
  %4762 = shl nuw nsw i64 %4761, 2
  %4763 = getelementptr i8, i8* %4732, i64 %4762
  %4764 = getelementptr i16, i16* %4731, i64 %4761
  %4765 = trunc i64 %4761 to i32
  br label %4766

4766:                                             ; preds = %4766, %4760
  %4767 = phi i64 [ 0, %4760 ], [ %4799, %4766 ]
  %4768 = shl i64 %4767, 2
  %4769 = getelementptr i16, i16* %4731, i64 %4767
  %4770 = getelementptr inbounds i8, i8* %4732, i64 %4768
  %4771 = bitcast i8* %4770 to <32 x i8>*
  %4772 = load <32 x i8>, <32 x i8>* %4771, align 1
  %4773 = shufflevector <32 x i8> %4772, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %4774 = shufflevector <32 x i8> %4772, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %4775 = shufflevector <32 x i8> %4772, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %4776 = shufflevector <32 x i8> %4772, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %4777 = uitofp <8 x i8> %4776 to <8 x float>
  %4778 = fdiv <8 x float> %4777, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %4779 = uitofp <8 x i8> %4773 to <8 x float>
  %4780 = fmul <8 x float> %4778, %4779
  %4781 = fptoui <8 x float> %4780 to <8 x i8>
  %4782 = uitofp <8 x i8> %4774 to <8 x float>
  %4783 = fmul <8 x float> %4778, %4782
  %4784 = fptoui <8 x float> %4783 to <8 x i8>
  %4785 = uitofp <8 x i8> %4775 to <8 x float>
  %4786 = fmul <8 x float> %4778, %4785
  %4787 = fptoui <8 x float> %4786 to <8 x i8>
  %4788 = and <8 x i8> %4781, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %4789 = zext <8 x i8> %4788 to <8 x i16>
  %4790 = shl nuw <8 x i16> %4789, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4791 = and <8 x i8> %4784, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %4792 = zext <8 x i8> %4791 to <8 x i16>
  %4793 = shl nuw nsw <8 x i16> %4792, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %4794 = or <8 x i16> %4793, %4790
  %4795 = lshr <8 x i8> %4787, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %4796 = zext <8 x i8> %4795 to <8 x i16>
  %4797 = or <8 x i16> %4794, %4796
  %4798 = bitcast i16* %4769 to <8 x i16>*
  store <8 x i16> %4797, <8 x i16>* %4798, align 2, !alias.scope !173, !noalias !176
  %4799 = add i64 %4767, 8
  %4800 = icmp eq i64 %4799, %4761
  br i1 %4800, label %4801, label %4766, !llvm.loop !178

4801:                                             ; preds = %4766
  %4802 = icmp eq i64 %4748, %4761
  br i1 %4802, label %4843, label %4803

4803:                                             ; preds = %4801, %4750, %4745
  %4804 = phi i8* [ %4732, %4750 ], [ %4732, %4745 ], [ %4763, %4801 ]
  %4805 = phi i16* [ %4731, %4750 ], [ %4731, %4745 ], [ %4764, %4801 ]
  %4806 = phi i32 [ 0, %4750 ], [ 0, %4745 ], [ %4765, %4801 ]
  br label %4807

4807:                                             ; preds = %4803, %4807
  %4808 = phi i8* [ %4839, %4807 ], [ %4804, %4803 ]
  %4809 = phi i16* [ %4840, %4807 ], [ %4805, %4803 ]
  %4810 = phi i32 [ %4841, %4807 ], [ %4806, %4803 ]
  %4811 = getelementptr inbounds i8, i8* %4808, i64 3
  %4812 = load i8, i8* %4811, align 1
  %4813 = uitofp i8 %4812 to float
  %4814 = fdiv float %4813, 2.550000e+02
  %4815 = load i8, i8* %4808, align 1
  %4816 = uitofp i8 %4815 to float
  %4817 = fmul float %4814, %4816
  %4818 = fptoui float %4817 to i8
  %4819 = getelementptr inbounds i8, i8* %4808, i64 1
  %4820 = load i8, i8* %4819, align 1
  %4821 = uitofp i8 %4820 to float
  %4822 = fmul float %4814, %4821
  %4823 = fptoui float %4822 to i8
  %4824 = getelementptr inbounds i8, i8* %4808, i64 2
  %4825 = load i8, i8* %4824, align 1
  %4826 = uitofp i8 %4825 to float
  %4827 = fmul float %4814, %4826
  %4828 = fptoui float %4827 to i8
  %4829 = and i8 %4818, -8
  %4830 = zext i8 %4829 to i16
  %4831 = shl nuw i16 %4830, 8
  %4832 = and i8 %4823, -4
  %4833 = zext i8 %4832 to i16
  %4834 = shl nuw nsw i16 %4833, 3
  %4835 = or i16 %4834, %4831
  %4836 = lshr i8 %4828, 3
  %4837 = zext i8 %4836 to i16
  %4838 = or i16 %4835, %4837
  store i16 %4838, i16* %4809, align 2
  %4839 = getelementptr inbounds i8, i8* %4808, i64 4
  %4840 = getelementptr inbounds i16, i16* %4809, i64 1
  %4841 = add nuw i32 %4810, 1
  %4842 = icmp eq i32 %4841, %4743
  br i1 %4842, label %4843, label %4807, !llvm.loop !179

4843:                                             ; preds = %4807, %4801
  %4844 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4667, align 8
  br label %4845

4845:                                             ; preds = %4843, %4726
  %4846 = phi %"class.blink::IntRect"* [ %4844, %4843 ], [ %4728, %4726 ]
  %4847 = getelementptr inbounds i8, i8* %4732, i64 %4660
  %4848 = getelementptr inbounds i16, i16* %4731, i64 %4664
  %4849 = add nuw nsw i32 %4730, 1
  %4850 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4846, i64 0, i32 1, i32 1
  %4851 = load i32, i32* %4850, align 4
  %4852 = icmp slt i32 %4849, %4851
  %4853 = add i64 %4727, 1
  br i1 %4852, label %4726, label %4710

4854:                                             ; preds = %4712, %4692
  %4855 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4855, align 4
  br label %11653

4856:                                             ; preds = %4481
  %4857 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4858 = load i32, i32* %4857, align 8
  %4859 = sext i32 %4858 to i64
  %4860 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4861 = load i32, i32* %4860, align 8
  %4862 = sdiv i32 %4861, 2
  %4863 = sext i32 %4862 to i64
  %4864 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4865 = load i8*, i8** %4864, align 8
  %4866 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4867 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4866, align 8
  %4868 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4867, i64 0, i32 0, i32 1
  %4869 = load i32, i32* %4868, align 4
  %4870 = mul nsw i32 %4869, %4858
  %4871 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4872 = load i32, i32* %4871, align 4
  %4873 = add nsw i32 %4870, %4872
  %4874 = sext i32 %4873 to i64
  %4875 = getelementptr inbounds i8, i8* %4865, i64 %4874
  %4876 = icmp slt i32 %4861, 0
  %4877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4878 = load i32, i32* %4877, align 8
  %4879 = icmp sgt i32 %4878, 1
  %4880 = and i1 %4876, %4879
  br i1 %4880, label %4881, label %4891

4881:                                             ; preds = %4856
  %4882 = add nsw i32 %4878, -1
  %4883 = sext i32 %4882 to i64
  %4884 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4885 = load i32, i32* %4884, align 4
  %4886 = sext i32 %4885 to i64
  %4887 = mul nsw i64 %4859, %4883
  %4888 = mul i64 %4887, %4886
  %4889 = sub i64 0, %4888
  %4890 = getelementptr inbounds i8, i8* %4875, i64 %4889
  br label %4893

4891:                                             ; preds = %4856
  %4892 = icmp sgt i32 %4878, 0
  br i1 %4892, label %4893, label %5059

4893:                                             ; preds = %4891, %4881
  %4894 = phi i8* [ %4890, %4881 ], [ %4875, %4891 ]
  %4895 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4896 = bitcast i8** %4895 to i16**
  %4897 = load i16*, i16** %4896, align 8
  %4898 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4899

4899:                                             ; preds = %4911, %4893
  %4900 = phi i32 [ %4878, %4893 ], [ %4912, %4911 ]
  %4901 = phi %"class.blink::IntRect"* [ %4867, %4893 ], [ %4913, %4911 ]
  %4902 = phi %"class.blink::IntRect"* [ %4867, %4893 ], [ %4914, %4911 ]
  %4903 = phi i32 [ 0, %4893 ], [ %4923, %4911 ]
  %4904 = phi i16* [ %4897, %4893 ], [ %4916, %4911 ]
  %4905 = phi i8* [ %4894, %4893 ], [ %4922, %4911 ]
  %4906 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4902, i64 0, i32 1, i32 1
  %4907 = load i32, i32* %4906, align 4
  %4908 = icmp sgt i32 %4907, 0
  br i1 %4908, label %4925, label %4911

4909:                                             ; preds = %5050
  %4910 = load i32, i32* %4877, align 8
  br label %4911

4911:                                             ; preds = %4909, %4899
  %4912 = phi i32 [ %4900, %4899 ], [ %4910, %4909 ]
  %4913 = phi %"class.blink::IntRect"* [ %4901, %4899 ], [ %5051, %4909 ]
  %4914 = phi %"class.blink::IntRect"* [ %4902, %4899 ], [ %5051, %4909 ]
  %4915 = phi i8* [ %4905, %4899 ], [ %5052, %4909 ]
  %4916 = phi i16* [ %4904, %4899 ], [ %5053, %4909 ]
  %4917 = phi i32 [ %4907, %4899 ], [ %5056, %4909 ]
  %4918 = load i32, i32* %4898, align 4
  %4919 = sub nsw i32 %4918, %4917
  %4920 = sext i32 %4919 to i64
  %4921 = mul nsw i64 %4920, %4859
  %4922 = getelementptr inbounds i8, i8* %4915, i64 %4921
  %4923 = add nuw nsw i32 %4903, 1
  %4924 = icmp slt i32 %4923, %4912
  br i1 %4924, label %4899, label %5059

4925:                                             ; preds = %4899, %5050
  %4926 = phi i64 [ %5058, %5050 ], [ 0, %4899 ]
  %4927 = phi %"class.blink::IntRect"* [ %5051, %5050 ], [ %4901, %4899 ]
  %4928 = phi %"class.blink::IntRect"* [ %5051, %5050 ], [ %4902, %4899 ]
  %4929 = phi i32 [ %5054, %5050 ], [ 0, %4899 ]
  %4930 = phi i16* [ %5053, %5050 ], [ %4904, %4899 ]
  %4931 = phi i8* [ %5052, %5050 ], [ %4905, %4899 ]
  %4932 = mul i64 %4926, %4863
  %4933 = getelementptr i16, i16* %4904, i64 %4932
  %4934 = bitcast i16* %4933 to i8*
  %4935 = add i64 %4932, 1
  %4936 = getelementptr i16, i16* %4904, i64 %4935
  %4937 = mul i64 %4926, %4859
  %4938 = getelementptr i8, i8* %4905, i64 %4937
  %4939 = add i64 %4937, 4
  %4940 = getelementptr i8, i8* %4905, i64 %4939
  %4941 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4928, i64 0, i32 1, i32 0
  %4942 = load i32, i32* %4941, align 4
  %4943 = icmp eq i32 %4942, 0
  br i1 %4943, label %5050, label %4944

4944:                                             ; preds = %4925
  %4945 = add i32 %4942, -1
  %4946 = zext i32 %4945 to i64
  %4947 = add nuw nsw i64 %4946, 1
  %4948 = icmp ult i64 %4947, 8
  br i1 %4948, label %5004, label %4949

4949:                                             ; preds = %4944
  %4950 = add i32 %4942, -1
  %4951 = zext i32 %4950 to i64
  %4952 = getelementptr i16, i16* %4936, i64 %4951
  %4953 = bitcast i16* %4952 to i8*
  %4954 = shl nuw nsw i64 %4951, 2
  %4955 = getelementptr i8, i8* %4940, i64 %4954
  %4956 = icmp ugt i8* %4955, %4934
  %4957 = icmp ult i8* %4938, %4953
  %4958 = and i1 %4956, %4957
  br i1 %4958, label %5004, label %4959

4959:                                             ; preds = %4949
  %4960 = and i64 %4947, 8589934584
  %4961 = shl nuw nsw i64 %4960, 2
  %4962 = getelementptr i8, i8* %4931, i64 %4961
  %4963 = getelementptr i16, i16* %4930, i64 %4960
  %4964 = trunc i64 %4960 to i32
  br label %4965

4965:                                             ; preds = %4965, %4959
  %4966 = phi i64 [ 0, %4959 ], [ %5000, %4965 ]
  %4967 = shl i64 %4966, 2
  %4968 = getelementptr i16, i16* %4930, i64 %4966
  %4969 = getelementptr inbounds i8, i8* %4931, i64 %4967
  %4970 = bitcast i8* %4969 to <32 x i8>*
  %4971 = load <32 x i8>, <32 x i8>* %4970, align 1
  %4972 = shufflevector <32 x i8> %4971, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %4973 = shufflevector <32 x i8> %4971, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %4974 = shufflevector <32 x i8> %4971, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %4975 = shufflevector <32 x i8> %4971, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %4976 = icmp eq <8 x i8> %4975, zeroinitializer
  %4977 = uitofp <8 x i8> %4975 to <8 x float>
  %4978 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %4977
  %4979 = select <8 x i1> %4976, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %4978
  %4980 = uitofp <8 x i8> %4972 to <8 x float>
  %4981 = fmul <8 x float> %4979, %4980
  %4982 = fptoui <8 x float> %4981 to <8 x i8>
  %4983 = uitofp <8 x i8> %4973 to <8 x float>
  %4984 = fmul <8 x float> %4979, %4983
  %4985 = fptoui <8 x float> %4984 to <8 x i8>
  %4986 = uitofp <8 x i8> %4974 to <8 x float>
  %4987 = fmul <8 x float> %4979, %4986
  %4988 = fptoui <8 x float> %4987 to <8 x i8>
  %4989 = and <8 x i8> %4982, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %4990 = zext <8 x i8> %4989 to <8 x i16>
  %4991 = shl nuw <8 x i16> %4990, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %4992 = and <8 x i8> %4985, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %4993 = zext <8 x i8> %4992 to <8 x i16>
  %4994 = shl nuw nsw <8 x i16> %4993, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %4995 = or <8 x i16> %4994, %4991
  %4996 = lshr <8 x i8> %4988, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %4997 = zext <8 x i8> %4996 to <8 x i16>
  %4998 = or <8 x i16> %4995, %4997
  %4999 = bitcast i16* %4968 to <8 x i16>*
  store <8 x i16> %4998, <8 x i16>* %4999, align 2, !alias.scope !180, !noalias !183
  %5000 = add i64 %4966, 8
  %5001 = icmp eq i64 %5000, %4960
  br i1 %5001, label %5002, label %4965, !llvm.loop !185

5002:                                             ; preds = %4965
  %5003 = icmp eq i64 %4947, %4960
  br i1 %5003, label %5048, label %5004

5004:                                             ; preds = %5002, %4949, %4944
  %5005 = phi i8* [ %4931, %4949 ], [ %4931, %4944 ], [ %4962, %5002 ]
  %5006 = phi i16* [ %4930, %4949 ], [ %4930, %4944 ], [ %4963, %5002 ]
  %5007 = phi i32 [ 0, %4949 ], [ 0, %4944 ], [ %4964, %5002 ]
  br label %5008

5008:                                             ; preds = %5004, %5018
  %5009 = phi i8* [ %5044, %5018 ], [ %5005, %5004 ]
  %5010 = phi i16* [ %5045, %5018 ], [ %5006, %5004 ]
  %5011 = phi i32 [ %5046, %5018 ], [ %5007, %5004 ]
  %5012 = getelementptr inbounds i8, i8* %5009, i64 3
  %5013 = load i8, i8* %5012, align 1
  %5014 = icmp eq i8 %5013, 0
  br i1 %5014, label %5018, label %5015

5015:                                             ; preds = %5008
  %5016 = uitofp i8 %5013 to float
  %5017 = fdiv float 2.550000e+02, %5016
  br label %5018

5018:                                             ; preds = %5015, %5008
  %5019 = phi float [ %5017, %5015 ], [ 1.000000e+00, %5008 ]
  %5020 = load i8, i8* %5009, align 1
  %5021 = uitofp i8 %5020 to float
  %5022 = fmul float %5019, %5021
  %5023 = fptoui float %5022 to i8
  %5024 = getelementptr inbounds i8, i8* %5009, i64 1
  %5025 = load i8, i8* %5024, align 1
  %5026 = uitofp i8 %5025 to float
  %5027 = fmul float %5019, %5026
  %5028 = fptoui float %5027 to i8
  %5029 = getelementptr inbounds i8, i8* %5009, i64 2
  %5030 = load i8, i8* %5029, align 1
  %5031 = uitofp i8 %5030 to float
  %5032 = fmul float %5019, %5031
  %5033 = fptoui float %5032 to i8
  %5034 = and i8 %5023, -8
  %5035 = zext i8 %5034 to i16
  %5036 = shl nuw i16 %5035, 8
  %5037 = and i8 %5028, -4
  %5038 = zext i8 %5037 to i16
  %5039 = shl nuw nsw i16 %5038, 3
  %5040 = or i16 %5039, %5036
  %5041 = lshr i8 %5033, 3
  %5042 = zext i8 %5041 to i16
  %5043 = or i16 %5040, %5042
  store i16 %5043, i16* %5010, align 2
  %5044 = getelementptr inbounds i8, i8* %5009, i64 4
  %5045 = getelementptr inbounds i16, i16* %5010, i64 1
  %5046 = add nuw i32 %5011, 1
  %5047 = icmp eq i32 %5046, %4942
  br i1 %5047, label %5048, label %5008, !llvm.loop !186

5048:                                             ; preds = %5018, %5002
  %5049 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4866, align 8
  br label %5050

5050:                                             ; preds = %5048, %4925
  %5051 = phi %"class.blink::IntRect"* [ %5049, %5048 ], [ %4927, %4925 ]
  %5052 = getelementptr inbounds i8, i8* %4931, i64 %4859
  %5053 = getelementptr inbounds i16, i16* %4930, i64 %4863
  %5054 = add nuw nsw i32 %4929, 1
  %5055 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5051, i64 0, i32 1, i32 1
  %5056 = load i32, i32* %5055, align 4
  %5057 = icmp slt i32 %5054, %5056
  %5058 = add i64 %4926, 1
  br i1 %5057, label %4925, label %4909

5059:                                             ; preds = %4911, %4891
  %5060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5060, align 4
  br label %11653

5061:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %5062
    i32 1, label %5240
    i32 2, label %5423
  ]

5062:                                             ; preds = %5061
  %5063 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5064 = load i32, i32* %5063, align 8
  %5065 = sext i32 %5064 to i64
  %5066 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5067 = load i32, i32* %5066, align 8
  %5068 = sdiv i32 %5067, 2
  %5069 = sext i32 %5068 to i64
  %5070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5071 = load i8*, i8** %5070, align 8
  %5072 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5073 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5072, align 8
  %5074 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5073, i64 0, i32 0, i32 1
  %5075 = load i32, i32* %5074, align 4
  %5076 = mul nsw i32 %5075, %5064
  %5077 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5078 = load i32, i32* %5077, align 4
  %5079 = add nsw i32 %5076, %5078
  %5080 = sext i32 %5079 to i64
  %5081 = getelementptr inbounds i8, i8* %5071, i64 %5080
  %5082 = icmp slt i32 %5067, 0
  %5083 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5084 = load i32, i32* %5083, align 8
  %5085 = icmp sgt i32 %5084, 1
  %5086 = and i1 %5082, %5085
  br i1 %5086, label %5087, label %5097

5087:                                             ; preds = %5062
  %5088 = add nsw i32 %5084, -1
  %5089 = sext i32 %5088 to i64
  %5090 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5091 = load i32, i32* %5090, align 4
  %5092 = sext i32 %5091 to i64
  %5093 = mul nsw i64 %5065, %5089
  %5094 = mul i64 %5093, %5092
  %5095 = sub i64 0, %5094
  %5096 = getelementptr inbounds i8, i8* %5081, i64 %5095
  br label %5099

5097:                                             ; preds = %5062
  %5098 = icmp sgt i32 %5084, 0
  br i1 %5098, label %5099, label %5238

5099:                                             ; preds = %5097, %5087
  %5100 = phi i8* [ %5096, %5087 ], [ %5081, %5097 ]
  %5101 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5102 = bitcast i8** %5101 to i16**
  %5103 = load i16*, i16** %5102, align 8
  %5104 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5105 = bitcast i8** %5104 to float**
  %5106 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5107

5107:                                             ; preds = %5119, %5099
  %5108 = phi i32 [ %5084, %5099 ], [ %5120, %5119 ]
  %5109 = phi %"class.blink::IntRect"* [ %5073, %5099 ], [ %5121, %5119 ]
  %5110 = phi %"class.blink::IntRect"* [ %5073, %5099 ], [ %5122, %5119 ]
  %5111 = phi i32 [ 0, %5099 ], [ %5131, %5119 ]
  %5112 = phi i16* [ %5103, %5099 ], [ %5124, %5119 ]
  %5113 = phi i8* [ %5100, %5099 ], [ %5130, %5119 ]
  %5114 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5110, i64 0, i32 1, i32 1
  %5115 = load i32, i32* %5114, align 4
  %5116 = icmp sgt i32 %5115, 0
  br i1 %5116, label %5133, label %5119

5117:                                             ; preds = %5230
  %5118 = load i32, i32* %5083, align 8
  br label %5119

5119:                                             ; preds = %5117, %5107
  %5120 = phi i32 [ %5108, %5107 ], [ %5118, %5117 ]
  %5121 = phi %"class.blink::IntRect"* [ %5109, %5107 ], [ %5231, %5117 ]
  %5122 = phi %"class.blink::IntRect"* [ %5110, %5107 ], [ %5231, %5117 ]
  %5123 = phi i8* [ %5113, %5107 ], [ %5232, %5117 ]
  %5124 = phi i16* [ %5112, %5107 ], [ %5233, %5117 ]
  %5125 = phi i32 [ %5115, %5107 ], [ %5236, %5117 ]
  %5126 = load i32, i32* %5106, align 4
  %5127 = sub nsw i32 %5126, %5125
  %5128 = sext i32 %5127 to i64
  %5129 = mul nsw i64 %5128, %5065
  %5130 = getelementptr inbounds i8, i8* %5123, i64 %5129
  %5131 = add nuw nsw i32 %5111, 1
  %5132 = icmp slt i32 %5131, %5120
  br i1 %5132, label %5107, label %5238

5133:                                             ; preds = %5107, %5230
  %5134 = phi %"class.blink::IntRect"* [ %5231, %5230 ], [ %5109, %5107 ]
  %5135 = phi %"class.blink::IntRect"* [ %5231, %5230 ], [ %5110, %5107 ]
  %5136 = phi i32 [ %5234, %5230 ], [ 0, %5107 ]
  %5137 = phi i16* [ %5233, %5230 ], [ %5112, %5107 ]
  %5138 = phi i8* [ %5232, %5230 ], [ %5113, %5107 ]
  %5139 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5135, i64 0, i32 1, i32 0
  %5140 = load i32, i32* %5139, align 4
  %5141 = icmp eq i32 %5140, 0
  br i1 %5141, label %5230, label %5142

5142:                                             ; preds = %5133
  %5143 = load float*, float** %5105, align 8
  br label %5144

5144:                                             ; preds = %5144, %5142
  %5145 = phi i32 [ %5168, %5144 ], [ 0, %5142 ]
  %5146 = phi i8* [ %5166, %5144 ], [ %5138, %5142 ]
  %5147 = phi float* [ %5167, %5144 ], [ %5143, %5142 ]
  %5148 = load i8, i8* %5146, align 1
  %5149 = uitofp i8 %5148 to float
  %5150 = fmul float %5149, 0x3F70101020000000
  store float %5150, float* %5147, align 4
  %5151 = getelementptr inbounds i8, i8* %5146, i64 1
  %5152 = load i8, i8* %5151, align 1
  %5153 = uitofp i8 %5152 to float
  %5154 = fmul float %5153, 0x3F70101020000000
  %5155 = getelementptr inbounds float, float* %5147, i64 1
  store float %5154, float* %5155, align 4
  %5156 = getelementptr inbounds i8, i8* %5146, i64 2
  %5157 = load i8, i8* %5156, align 1
  %5158 = uitofp i8 %5157 to float
  %5159 = fmul float %5158, 0x3F70101020000000
  %5160 = getelementptr inbounds float, float* %5147, i64 2
  store float %5159, float* %5160, align 4
  %5161 = getelementptr inbounds i8, i8* %5146, i64 3
  %5162 = load i8, i8* %5161, align 1
  %5163 = uitofp i8 %5162 to float
  %5164 = fmul float %5163, 0x3F70101020000000
  %5165 = getelementptr inbounds float, float* %5147, i64 3
  store float %5164, float* %5165, align 4
  %5166 = getelementptr inbounds i8, i8* %5146, i64 4
  %5167 = getelementptr inbounds float, float* %5147, i64 4
  %5168 = add nuw i32 %5145, 1
  %5169 = icmp eq i32 %5168, %5140
  br i1 %5169, label %5170, label %5144

5170:                                             ; preds = %5144
  %5171 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5072, align 8
  %5172 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5171, i64 0, i32 1, i32 0
  %5173 = load i32, i32* %5172, align 4
  %5174 = icmp eq i32 %5173, 0
  br i1 %5174, label %5230, label %5175

5175:                                             ; preds = %5170
  %5176 = load float*, float** %5105, align 8
  br label %5177

5177:                                             ; preds = %5177, %5175
  %5178 = phi i32 [ %5226, %5177 ], [ 0, %5175 ]
  %5179 = phi float* [ %5224, %5177 ], [ %5176, %5175 ]
  %5180 = phi i16* [ %5225, %5177 ], [ %5137, %5175 ]
  %5181 = bitcast float* %5179 to i32*
  %5182 = load i32, i32* %5181, align 4
  %5183 = lshr i32 %5182, 23
  %5184 = zext i32 %5183 to i64
  %5185 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5184
  %5186 = load i16, i16* %5185, align 2
  %5187 = and i32 %5182, 8388607
  %5188 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5184
  %5189 = load i8, i8* %5188, align 1
  %5190 = zext i8 %5189 to i32
  %5191 = lshr i32 %5187, %5190
  %5192 = trunc i32 %5191 to i16
  %5193 = add i16 %5186, %5192
  store i16 %5193, i16* %5180, align 2
  %5194 = getelementptr inbounds float, float* %5179, i64 1
  %5195 = bitcast float* %5194 to i32*
  %5196 = load i32, i32* %5195, align 4
  %5197 = lshr i32 %5196, 23
  %5198 = zext i32 %5197 to i64
  %5199 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5198
  %5200 = load i16, i16* %5199, align 2
  %5201 = and i32 %5196, 8388607
  %5202 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5198
  %5203 = load i8, i8* %5202, align 1
  %5204 = zext i8 %5203 to i32
  %5205 = lshr i32 %5201, %5204
  %5206 = trunc i32 %5205 to i16
  %5207 = add i16 %5200, %5206
  %5208 = getelementptr inbounds i16, i16* %5180, i64 1
  store i16 %5207, i16* %5208, align 2
  %5209 = getelementptr inbounds float, float* %5179, i64 2
  %5210 = bitcast float* %5209 to i32*
  %5211 = load i32, i32* %5210, align 4
  %5212 = lshr i32 %5211, 23
  %5213 = zext i32 %5212 to i64
  %5214 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5213
  %5215 = load i16, i16* %5214, align 2
  %5216 = and i32 %5211, 8388607
  %5217 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5213
  %5218 = load i8, i8* %5217, align 1
  %5219 = zext i8 %5218 to i32
  %5220 = lshr i32 %5216, %5219
  %5221 = trunc i32 %5220 to i16
  %5222 = add i16 %5215, %5221
  %5223 = getelementptr inbounds i16, i16* %5180, i64 2
  store i16 %5222, i16* %5223, align 2
  %5224 = getelementptr inbounds float, float* %5179, i64 4
  %5225 = getelementptr inbounds i16, i16* %5180, i64 3
  %5226 = add nuw i32 %5178, 1
  %5227 = icmp eq i32 %5226, %5173
  br i1 %5227, label %5228, label %5177

5228:                                             ; preds = %5177
  %5229 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5072, align 8
  br label %5230

5230:                                             ; preds = %5228, %5170, %5133
  %5231 = phi %"class.blink::IntRect"* [ %5229, %5228 ], [ %5171, %5170 ], [ %5134, %5133 ]
  %5232 = getelementptr inbounds i8, i8* %5138, i64 %5065
  %5233 = getelementptr inbounds i16, i16* %5137, i64 %5069
  %5234 = add nuw nsw i32 %5136, 1
  %5235 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5231, i64 0, i32 1, i32 1
  %5236 = load i32, i32* %5235, align 4
  %5237 = icmp slt i32 %5234, %5236
  br i1 %5237, label %5133, label %5117

5238:                                             ; preds = %5119, %5097
  %5239 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5239, align 4
  br label %11653

5240:                                             ; preds = %5061
  %5241 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5242 = load i32, i32* %5241, align 8
  %5243 = sext i32 %5242 to i64
  %5244 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5245 = load i32, i32* %5244, align 8
  %5246 = sdiv i32 %5245, 2
  %5247 = sext i32 %5246 to i64
  %5248 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5249 = load i8*, i8** %5248, align 8
  %5250 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5251 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5250, align 8
  %5252 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5251, i64 0, i32 0, i32 1
  %5253 = load i32, i32* %5252, align 4
  %5254 = mul nsw i32 %5253, %5242
  %5255 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5256 = load i32, i32* %5255, align 4
  %5257 = add nsw i32 %5254, %5256
  %5258 = sext i32 %5257 to i64
  %5259 = getelementptr inbounds i8, i8* %5249, i64 %5258
  %5260 = icmp slt i32 %5245, 0
  %5261 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5262 = load i32, i32* %5261, align 8
  %5263 = icmp sgt i32 %5262, 1
  %5264 = and i1 %5260, %5263
  br i1 %5264, label %5265, label %5275

5265:                                             ; preds = %5240
  %5266 = add nsw i32 %5262, -1
  %5267 = sext i32 %5266 to i64
  %5268 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5269 = load i32, i32* %5268, align 4
  %5270 = sext i32 %5269 to i64
  %5271 = mul nsw i64 %5243, %5267
  %5272 = mul i64 %5271, %5270
  %5273 = sub i64 0, %5272
  %5274 = getelementptr inbounds i8, i8* %5259, i64 %5273
  br label %5277

5275:                                             ; preds = %5240
  %5276 = icmp sgt i32 %5262, 0
  br i1 %5276, label %5277, label %5421

5277:                                             ; preds = %5275, %5265
  %5278 = phi i8* [ %5274, %5265 ], [ %5259, %5275 ]
  %5279 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5280 = bitcast i8** %5279 to i16**
  %5281 = load i16*, i16** %5280, align 8
  %5282 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5283 = bitcast i8** %5282 to float**
  %5284 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5285

5285:                                             ; preds = %5297, %5277
  %5286 = phi i32 [ %5262, %5277 ], [ %5298, %5297 ]
  %5287 = phi %"class.blink::IntRect"* [ %5251, %5277 ], [ %5299, %5297 ]
  %5288 = phi %"class.blink::IntRect"* [ %5251, %5277 ], [ %5300, %5297 ]
  %5289 = phi i32 [ 0, %5277 ], [ %5309, %5297 ]
  %5290 = phi i16* [ %5281, %5277 ], [ %5302, %5297 ]
  %5291 = phi i8* [ %5278, %5277 ], [ %5308, %5297 ]
  %5292 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5288, i64 0, i32 1, i32 1
  %5293 = load i32, i32* %5292, align 4
  %5294 = icmp sgt i32 %5293, 0
  br i1 %5294, label %5311, label %5297

5295:                                             ; preds = %5413
  %5296 = load i32, i32* %5261, align 8
  br label %5297

5297:                                             ; preds = %5295, %5285
  %5298 = phi i32 [ %5286, %5285 ], [ %5296, %5295 ]
  %5299 = phi %"class.blink::IntRect"* [ %5287, %5285 ], [ %5414, %5295 ]
  %5300 = phi %"class.blink::IntRect"* [ %5288, %5285 ], [ %5414, %5295 ]
  %5301 = phi i8* [ %5291, %5285 ], [ %5415, %5295 ]
  %5302 = phi i16* [ %5290, %5285 ], [ %5416, %5295 ]
  %5303 = phi i32 [ %5293, %5285 ], [ %5419, %5295 ]
  %5304 = load i32, i32* %5284, align 4
  %5305 = sub nsw i32 %5304, %5303
  %5306 = sext i32 %5305 to i64
  %5307 = mul nsw i64 %5306, %5243
  %5308 = getelementptr inbounds i8, i8* %5301, i64 %5307
  %5309 = add nuw nsw i32 %5289, 1
  %5310 = icmp slt i32 %5309, %5298
  br i1 %5310, label %5285, label %5421

5311:                                             ; preds = %5285, %5413
  %5312 = phi %"class.blink::IntRect"* [ %5414, %5413 ], [ %5287, %5285 ]
  %5313 = phi %"class.blink::IntRect"* [ %5414, %5413 ], [ %5288, %5285 ]
  %5314 = phi i32 [ %5417, %5413 ], [ 0, %5285 ]
  %5315 = phi i16* [ %5416, %5413 ], [ %5290, %5285 ]
  %5316 = phi i8* [ %5415, %5413 ], [ %5291, %5285 ]
  %5317 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5313, i64 0, i32 1, i32 0
  %5318 = load i32, i32* %5317, align 4
  %5319 = icmp eq i32 %5318, 0
  br i1 %5319, label %5413, label %5320

5320:                                             ; preds = %5311
  %5321 = load float*, float** %5283, align 8
  br label %5322

5322:                                             ; preds = %5322, %5320
  %5323 = phi i32 [ %5346, %5322 ], [ 0, %5320 ]
  %5324 = phi i8* [ %5344, %5322 ], [ %5316, %5320 ]
  %5325 = phi float* [ %5345, %5322 ], [ %5321, %5320 ]
  %5326 = load i8, i8* %5324, align 1
  %5327 = uitofp i8 %5326 to float
  %5328 = fmul float %5327, 0x3F70101020000000
  store float %5328, float* %5325, align 4
  %5329 = getelementptr inbounds i8, i8* %5324, i64 1
  %5330 = load i8, i8* %5329, align 1
  %5331 = uitofp i8 %5330 to float
  %5332 = fmul float %5331, 0x3F70101020000000
  %5333 = getelementptr inbounds float, float* %5325, i64 1
  store float %5332, float* %5333, align 4
  %5334 = getelementptr inbounds i8, i8* %5324, i64 2
  %5335 = load i8, i8* %5334, align 1
  %5336 = uitofp i8 %5335 to float
  %5337 = fmul float %5336, 0x3F70101020000000
  %5338 = getelementptr inbounds float, float* %5325, i64 2
  store float %5337, float* %5338, align 4
  %5339 = getelementptr inbounds i8, i8* %5324, i64 3
  %5340 = load i8, i8* %5339, align 1
  %5341 = uitofp i8 %5340 to float
  %5342 = fmul float %5341, 0x3F70101020000000
  %5343 = getelementptr inbounds float, float* %5325, i64 3
  store float %5342, float* %5343, align 4
  %5344 = getelementptr inbounds i8, i8* %5324, i64 4
  %5345 = getelementptr inbounds float, float* %5325, i64 4
  %5346 = add nuw i32 %5323, 1
  %5347 = icmp eq i32 %5346, %5318
  br i1 %5347, label %5348, label %5322

5348:                                             ; preds = %5322
  %5349 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5250, align 8
  %5350 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5349, i64 0, i32 1, i32 0
  %5351 = load i32, i32* %5350, align 4
  %5352 = icmp eq i32 %5351, 0
  br i1 %5352, label %5413, label %5353

5353:                                             ; preds = %5348
  %5354 = load float*, float** %5283, align 8
  br label %5355

5355:                                             ; preds = %5355, %5353
  %5356 = phi float* [ %5407, %5355 ], [ %5354, %5353 ]
  %5357 = phi i32 [ %5409, %5355 ], [ 0, %5353 ]
  %5358 = phi i16* [ %5408, %5355 ], [ %5315, %5353 ]
  %5359 = getelementptr inbounds float, float* %5356, i64 3
  %5360 = load float, float* %5359, align 4
  %5361 = load float, float* %5356, align 4
  %5362 = fmul float %5360, %5361
  %5363 = bitcast float %5362 to i32
  %5364 = lshr i32 %5363, 23
  %5365 = zext i32 %5364 to i64
  %5366 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5365
  %5367 = load i16, i16* %5366, align 2
  %5368 = and i32 %5363, 8388607
  %5369 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5365
  %5370 = load i8, i8* %5369, align 1
  %5371 = zext i8 %5370 to i32
  %5372 = lshr i32 %5368, %5371
  %5373 = trunc i32 %5372 to i16
  %5374 = add i16 %5367, %5373
  store i16 %5374, i16* %5358, align 2
  %5375 = getelementptr inbounds float, float* %5356, i64 1
  %5376 = load float, float* %5375, align 4
  %5377 = fmul float %5360, %5376
  %5378 = bitcast float %5377 to i32
  %5379 = lshr i32 %5378, 23
  %5380 = zext i32 %5379 to i64
  %5381 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5380
  %5382 = load i16, i16* %5381, align 2
  %5383 = and i32 %5378, 8388607
  %5384 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5380
  %5385 = load i8, i8* %5384, align 1
  %5386 = zext i8 %5385 to i32
  %5387 = lshr i32 %5383, %5386
  %5388 = trunc i32 %5387 to i16
  %5389 = add i16 %5382, %5388
  %5390 = getelementptr inbounds i16, i16* %5358, i64 1
  store i16 %5389, i16* %5390, align 2
  %5391 = getelementptr inbounds float, float* %5356, i64 2
  %5392 = load float, float* %5391, align 4
  %5393 = fmul float %5360, %5392
  %5394 = bitcast float %5393 to i32
  %5395 = lshr i32 %5394, 23
  %5396 = zext i32 %5395 to i64
  %5397 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5396
  %5398 = load i16, i16* %5397, align 2
  %5399 = and i32 %5394, 8388607
  %5400 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5396
  %5401 = load i8, i8* %5400, align 1
  %5402 = zext i8 %5401 to i32
  %5403 = lshr i32 %5399, %5402
  %5404 = trunc i32 %5403 to i16
  %5405 = add i16 %5398, %5404
  %5406 = getelementptr inbounds i16, i16* %5358, i64 2
  store i16 %5405, i16* %5406, align 2
  %5407 = getelementptr inbounds float, float* %5356, i64 4
  %5408 = getelementptr inbounds i16, i16* %5358, i64 3
  %5409 = add nuw i32 %5357, 1
  %5410 = icmp eq i32 %5409, %5351
  br i1 %5410, label %5411, label %5355

5411:                                             ; preds = %5355
  %5412 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5250, align 8
  br label %5413

5413:                                             ; preds = %5411, %5348, %5311
  %5414 = phi %"class.blink::IntRect"* [ %5412, %5411 ], [ %5349, %5348 ], [ %5312, %5311 ]
  %5415 = getelementptr inbounds i8, i8* %5316, i64 %5243
  %5416 = getelementptr inbounds i16, i16* %5315, i64 %5247
  %5417 = add nuw nsw i32 %5314, 1
  %5418 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5414, i64 0, i32 1, i32 1
  %5419 = load i32, i32* %5418, align 4
  %5420 = icmp slt i32 %5417, %5419
  br i1 %5420, label %5311, label %5295

5421:                                             ; preds = %5297, %5275
  %5422 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5422, align 4
  br label %11653

5423:                                             ; preds = %5061
  %5424 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5425 = load i32, i32* %5424, align 8
  %5426 = sext i32 %5425 to i64
  %5427 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5428 = load i32, i32* %5427, align 8
  %5429 = sdiv i32 %5428, 2
  %5430 = sext i32 %5429 to i64
  %5431 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5432 = load i8*, i8** %5431, align 8
  %5433 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5434 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5433, align 8
  %5435 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5434, i64 0, i32 0, i32 1
  %5436 = load i32, i32* %5435, align 4
  %5437 = mul nsw i32 %5436, %5425
  %5438 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5439 = load i32, i32* %5438, align 4
  %5440 = add nsw i32 %5437, %5439
  %5441 = sext i32 %5440 to i64
  %5442 = getelementptr inbounds i8, i8* %5432, i64 %5441
  %5443 = icmp slt i32 %5428, 0
  %5444 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5445 = load i32, i32* %5444, align 8
  %5446 = icmp sgt i32 %5445, 1
  %5447 = and i1 %5443, %5446
  br i1 %5447, label %5448, label %5458

5448:                                             ; preds = %5423
  %5449 = add nsw i32 %5445, -1
  %5450 = sext i32 %5449 to i64
  %5451 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5452 = load i32, i32* %5451, align 4
  %5453 = sext i32 %5452 to i64
  %5454 = mul nsw i64 %5426, %5450
  %5455 = mul i64 %5454, %5453
  %5456 = sub i64 0, %5455
  %5457 = getelementptr inbounds i8, i8* %5442, i64 %5456
  br label %5460

5458:                                             ; preds = %5423
  %5459 = icmp sgt i32 %5445, 0
  br i1 %5459, label %5460, label %5607

5460:                                             ; preds = %5458, %5448
  %5461 = phi i8* [ %5457, %5448 ], [ %5442, %5458 ]
  %5462 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5463 = bitcast i8** %5462 to i16**
  %5464 = load i16*, i16** %5463, align 8
  %5465 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5466 = bitcast i8** %5465 to float**
  %5467 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5468

5468:                                             ; preds = %5480, %5460
  %5469 = phi i32 [ %5445, %5460 ], [ %5481, %5480 ]
  %5470 = phi %"class.blink::IntRect"* [ %5434, %5460 ], [ %5482, %5480 ]
  %5471 = phi %"class.blink::IntRect"* [ %5434, %5460 ], [ %5483, %5480 ]
  %5472 = phi i32 [ 0, %5460 ], [ %5492, %5480 ]
  %5473 = phi i16* [ %5464, %5460 ], [ %5485, %5480 ]
  %5474 = phi i8* [ %5461, %5460 ], [ %5491, %5480 ]
  %5475 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5471, i64 0, i32 1, i32 1
  %5476 = load i32, i32* %5475, align 4
  %5477 = icmp sgt i32 %5476, 0
  br i1 %5477, label %5494, label %5480

5478:                                             ; preds = %5599
  %5479 = load i32, i32* %5444, align 8
  br label %5480

5480:                                             ; preds = %5478, %5468
  %5481 = phi i32 [ %5469, %5468 ], [ %5479, %5478 ]
  %5482 = phi %"class.blink::IntRect"* [ %5470, %5468 ], [ %5600, %5478 ]
  %5483 = phi %"class.blink::IntRect"* [ %5471, %5468 ], [ %5600, %5478 ]
  %5484 = phi i8* [ %5474, %5468 ], [ %5601, %5478 ]
  %5485 = phi i16* [ %5473, %5468 ], [ %5602, %5478 ]
  %5486 = phi i32 [ %5476, %5468 ], [ %5605, %5478 ]
  %5487 = load i32, i32* %5467, align 4
  %5488 = sub nsw i32 %5487, %5486
  %5489 = sext i32 %5488 to i64
  %5490 = mul nsw i64 %5489, %5426
  %5491 = getelementptr inbounds i8, i8* %5484, i64 %5490
  %5492 = add nuw nsw i32 %5472, 1
  %5493 = icmp slt i32 %5492, %5481
  br i1 %5493, label %5468, label %5607

5494:                                             ; preds = %5468, %5599
  %5495 = phi %"class.blink::IntRect"* [ %5600, %5599 ], [ %5470, %5468 ]
  %5496 = phi %"class.blink::IntRect"* [ %5600, %5599 ], [ %5471, %5468 ]
  %5497 = phi i32 [ %5603, %5599 ], [ 0, %5468 ]
  %5498 = phi i16* [ %5602, %5599 ], [ %5473, %5468 ]
  %5499 = phi i8* [ %5601, %5599 ], [ %5474, %5468 ]
  %5500 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5496, i64 0, i32 1, i32 0
  %5501 = load i32, i32* %5500, align 4
  %5502 = icmp eq i32 %5501, 0
  br i1 %5502, label %5599, label %5503

5503:                                             ; preds = %5494
  %5504 = load float*, float** %5466, align 8
  br label %5505

5505:                                             ; preds = %5505, %5503
  %5506 = phi i32 [ %5529, %5505 ], [ 0, %5503 ]
  %5507 = phi i8* [ %5527, %5505 ], [ %5499, %5503 ]
  %5508 = phi float* [ %5528, %5505 ], [ %5504, %5503 ]
  %5509 = load i8, i8* %5507, align 1
  %5510 = uitofp i8 %5509 to float
  %5511 = fmul float %5510, 0x3F70101020000000
  store float %5511, float* %5508, align 4
  %5512 = getelementptr inbounds i8, i8* %5507, i64 1
  %5513 = load i8, i8* %5512, align 1
  %5514 = uitofp i8 %5513 to float
  %5515 = fmul float %5514, 0x3F70101020000000
  %5516 = getelementptr inbounds float, float* %5508, i64 1
  store float %5515, float* %5516, align 4
  %5517 = getelementptr inbounds i8, i8* %5507, i64 2
  %5518 = load i8, i8* %5517, align 1
  %5519 = uitofp i8 %5518 to float
  %5520 = fmul float %5519, 0x3F70101020000000
  %5521 = getelementptr inbounds float, float* %5508, i64 2
  store float %5520, float* %5521, align 4
  %5522 = getelementptr inbounds i8, i8* %5507, i64 3
  %5523 = load i8, i8* %5522, align 1
  %5524 = uitofp i8 %5523 to float
  %5525 = fmul float %5524, 0x3F70101020000000
  %5526 = getelementptr inbounds float, float* %5508, i64 3
  store float %5525, float* %5526, align 4
  %5527 = getelementptr inbounds i8, i8* %5507, i64 4
  %5528 = getelementptr inbounds float, float* %5508, i64 4
  %5529 = add nuw i32 %5506, 1
  %5530 = icmp eq i32 %5529, %5501
  br i1 %5530, label %5531, label %5505

5531:                                             ; preds = %5505
  %5532 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5433, align 8
  %5533 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5532, i64 0, i32 1, i32 0
  %5534 = load i32, i32* %5533, align 4
  %5535 = icmp eq i32 %5534, 0
  br i1 %5535, label %5599, label %5536

5536:                                             ; preds = %5531
  %5537 = load float*, float** %5466, align 8
  br label %5538

5538:                                             ; preds = %5538, %5536
  %5539 = phi i32 [ %5595, %5538 ], [ 0, %5536 ]
  %5540 = phi float* [ %5593, %5538 ], [ %5537, %5536 ]
  %5541 = phi i16* [ %5594, %5538 ], [ %5498, %5536 ]
  %5542 = getelementptr inbounds float, float* %5540, i64 3
  %5543 = load float, float* %5542, align 4
  %5544 = fcmp une float %5543, 0.000000e+00
  %5545 = fdiv float 1.000000e+00, %5543
  %5546 = select i1 %5544, float %5545, float 1.000000e+00
  %5547 = load float, float* %5540, align 4
  %5548 = fmul float %5547, %5546
  %5549 = bitcast float %5548 to i32
  %5550 = lshr i32 %5549, 23
  %5551 = zext i32 %5550 to i64
  %5552 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5551
  %5553 = load i16, i16* %5552, align 2
  %5554 = and i32 %5549, 8388607
  %5555 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5551
  %5556 = load i8, i8* %5555, align 1
  %5557 = zext i8 %5556 to i32
  %5558 = lshr i32 %5554, %5557
  %5559 = trunc i32 %5558 to i16
  %5560 = add i16 %5553, %5559
  store i16 %5560, i16* %5541, align 2
  %5561 = getelementptr inbounds float, float* %5540, i64 1
  %5562 = load float, float* %5561, align 4
  %5563 = fmul float %5546, %5562
  %5564 = bitcast float %5563 to i32
  %5565 = lshr i32 %5564, 23
  %5566 = zext i32 %5565 to i64
  %5567 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5566
  %5568 = load i16, i16* %5567, align 2
  %5569 = and i32 %5564, 8388607
  %5570 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5566
  %5571 = load i8, i8* %5570, align 1
  %5572 = zext i8 %5571 to i32
  %5573 = lshr i32 %5569, %5572
  %5574 = trunc i32 %5573 to i16
  %5575 = add i16 %5568, %5574
  %5576 = getelementptr inbounds i16, i16* %5541, i64 1
  store i16 %5575, i16* %5576, align 2
  %5577 = getelementptr inbounds float, float* %5540, i64 2
  %5578 = load float, float* %5577, align 4
  %5579 = fmul float %5546, %5578
  %5580 = bitcast float %5579 to i32
  %5581 = lshr i32 %5580, 23
  %5582 = zext i32 %5581 to i64
  %5583 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %5582
  %5584 = load i16, i16* %5583, align 2
  %5585 = and i32 %5580, 8388607
  %5586 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %5582
  %5587 = load i8, i8* %5586, align 1
  %5588 = zext i8 %5587 to i32
  %5589 = lshr i32 %5585, %5588
  %5590 = trunc i32 %5589 to i16
  %5591 = add i16 %5584, %5590
  %5592 = getelementptr inbounds i16, i16* %5541, i64 2
  store i16 %5591, i16* %5592, align 2
  %5593 = getelementptr inbounds float, float* %5540, i64 4
  %5594 = getelementptr inbounds i16, i16* %5541, i64 3
  %5595 = add nuw i32 %5539, 1
  %5596 = icmp eq i32 %5595, %5534
  br i1 %5596, label %5597, label %5538

5597:                                             ; preds = %5538
  %5598 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5433, align 8
  br label %5599

5599:                                             ; preds = %5597, %5531, %5494
  %5600 = phi %"class.blink::IntRect"* [ %5598, %5597 ], [ %5532, %5531 ], [ %5495, %5494 ]
  %5601 = getelementptr inbounds i8, i8* %5499, i64 %5426
  %5602 = getelementptr inbounds i16, i16* %5498, i64 %5430
  %5603 = add nuw nsw i32 %5497, 1
  %5604 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5600, i64 0, i32 1, i32 1
  %5605 = load i32, i32* %5604, align 4
  %5606 = icmp slt i32 %5603, %5605
  br i1 %5606, label %5494, label %5478

5607:                                             ; preds = %5480, %5458
  %5608 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5608, align 4
  br label %11653

5609:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %5610
    i32 1, label %5795
    i32 2, label %5977
  ]

5610:                                             ; preds = %5609
  %5611 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5612 = load i32, i32* %5611, align 8
  %5613 = sext i32 %5612 to i64
  %5614 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5615 = load i32, i32* %5614, align 8
  %5616 = sdiv i32 %5615, 4
  %5617 = sext i32 %5616 to i64
  %5618 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5619 = load i8*, i8** %5618, align 8
  %5620 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5621 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5620, align 8
  %5622 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5621, i64 0, i32 0, i32 1
  %5623 = load i32, i32* %5622, align 4
  %5624 = mul nsw i32 %5623, %5612
  %5625 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5626 = load i32, i32* %5625, align 4
  %5627 = add nsw i32 %5624, %5626
  %5628 = sext i32 %5627 to i64
  %5629 = getelementptr inbounds i8, i8* %5619, i64 %5628
  %5630 = icmp slt i32 %5615, 0
  %5631 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5632 = load i32, i32* %5631, align 8
  %5633 = icmp sgt i32 %5632, 1
  %5634 = and i1 %5630, %5633
  br i1 %5634, label %5635, label %5645

5635:                                             ; preds = %5610
  %5636 = add nsw i32 %5632, -1
  %5637 = sext i32 %5636 to i64
  %5638 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5639 = load i32, i32* %5638, align 4
  %5640 = sext i32 %5639 to i64
  %5641 = mul nsw i64 %5613, %5637
  %5642 = mul i64 %5641, %5640
  %5643 = sub i64 0, %5642
  %5644 = getelementptr inbounds i8, i8* %5629, i64 %5643
  br label %5647

5645:                                             ; preds = %5610
  %5646 = icmp sgt i32 %5632, 0
  br i1 %5646, label %5647, label %5793

5647:                                             ; preds = %5645, %5635
  %5648 = phi i8* [ %5644, %5635 ], [ %5629, %5645 ]
  %5649 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5650 = bitcast i8** %5649 to float**
  %5651 = load float*, float** %5650, align 8
  %5652 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5653 = bitcast i8** %5652 to float**
  %5654 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5655

5655:                                             ; preds = %5667, %5647
  %5656 = phi i32 [ %5632, %5647 ], [ %5668, %5667 ]
  %5657 = phi %"class.blink::IntRect"* [ %5621, %5647 ], [ %5669, %5667 ]
  %5658 = phi %"class.blink::IntRect"* [ %5621, %5647 ], [ %5670, %5667 ]
  %5659 = phi i32 [ 0, %5647 ], [ %5679, %5667 ]
  %5660 = phi float* [ %5651, %5647 ], [ %5672, %5667 ]
  %5661 = phi i8* [ %5648, %5647 ], [ %5678, %5667 ]
  %5662 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5658, i64 0, i32 1, i32 1
  %5663 = load i32, i32* %5662, align 4
  %5664 = icmp sgt i32 %5663, 0
  br i1 %5664, label %5681, label %5667

5665:                                             ; preds = %5785
  %5666 = load i32, i32* %5631, align 8
  br label %5667

5667:                                             ; preds = %5665, %5655
  %5668 = phi i32 [ %5656, %5655 ], [ %5666, %5665 ]
  %5669 = phi %"class.blink::IntRect"* [ %5657, %5655 ], [ %5786, %5665 ]
  %5670 = phi %"class.blink::IntRect"* [ %5658, %5655 ], [ %5786, %5665 ]
  %5671 = phi i8* [ %5661, %5655 ], [ %5787, %5665 ]
  %5672 = phi float* [ %5660, %5655 ], [ %5788, %5665 ]
  %5673 = phi i32 [ %5663, %5655 ], [ %5791, %5665 ]
  %5674 = load i32, i32* %5654, align 4
  %5675 = sub nsw i32 %5674, %5673
  %5676 = sext i32 %5675 to i64
  %5677 = mul nsw i64 %5676, %5613
  %5678 = getelementptr inbounds i8, i8* %5671, i64 %5677
  %5679 = add nuw nsw i32 %5659, 1
  %5680 = icmp slt i32 %5679, %5668
  br i1 %5680, label %5655, label %5793

5681:                                             ; preds = %5655, %5785
  %5682 = phi %"class.blink::IntRect"* [ %5786, %5785 ], [ %5657, %5655 ]
  %5683 = phi %"class.blink::IntRect"* [ %5786, %5785 ], [ %5658, %5655 ]
  %5684 = phi i32 [ %5789, %5785 ], [ 0, %5655 ]
  %5685 = phi float* [ %5788, %5785 ], [ %5660, %5655 ]
  %5686 = phi i8* [ %5787, %5785 ], [ %5661, %5655 ]
  %5687 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5683, i64 0, i32 1, i32 0
  %5688 = load i32, i32* %5687, align 4
  %5689 = icmp eq i32 %5688, 0
  br i1 %5689, label %5785, label %5690

5690:                                             ; preds = %5681
  %5691 = load float*, float** %5653, align 8
  br label %5692

5692:                                             ; preds = %5692, %5690
  %5693 = phi i32 [ %5716, %5692 ], [ 0, %5690 ]
  %5694 = phi i8* [ %5714, %5692 ], [ %5686, %5690 ]
  %5695 = phi float* [ %5715, %5692 ], [ %5691, %5690 ]
  %5696 = load i8, i8* %5694, align 1
  %5697 = uitofp i8 %5696 to float
  %5698 = fmul float %5697, 0x3F70101020000000
  store float %5698, float* %5695, align 4
  %5699 = getelementptr inbounds i8, i8* %5694, i64 1
  %5700 = load i8, i8* %5699, align 1
  %5701 = uitofp i8 %5700 to float
  %5702 = fmul float %5701, 0x3F70101020000000
  %5703 = getelementptr inbounds float, float* %5695, i64 1
  store float %5702, float* %5703, align 4
  %5704 = getelementptr inbounds i8, i8* %5694, i64 2
  %5705 = load i8, i8* %5704, align 1
  %5706 = uitofp i8 %5705 to float
  %5707 = fmul float %5706, 0x3F70101020000000
  %5708 = getelementptr inbounds float, float* %5695, i64 2
  store float %5707, float* %5708, align 4
  %5709 = getelementptr inbounds i8, i8* %5694, i64 3
  %5710 = load i8, i8* %5709, align 1
  %5711 = uitofp i8 %5710 to float
  %5712 = fmul float %5711, 0x3F70101020000000
  %5713 = getelementptr inbounds float, float* %5695, i64 3
  store float %5712, float* %5713, align 4
  %5714 = getelementptr inbounds i8, i8* %5694, i64 4
  %5715 = getelementptr inbounds float, float* %5695, i64 4
  %5716 = add nuw i32 %5693, 1
  %5717 = icmp eq i32 %5716, %5688
  br i1 %5717, label %5718, label %5692

5718:                                             ; preds = %5692
  %5719 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5620, align 8
  %5720 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5719, i64 0, i32 1, i32 0
  %5721 = load i32, i32* %5720, align 4
  %5722 = icmp eq i32 %5721, 0
  br i1 %5722, label %5785, label %5723

5723:                                             ; preds = %5718
  %5724 = load float*, float** %5653, align 8
  %5725 = and i32 %5721, 1
  %5726 = icmp eq i32 %5721, 1
  br i1 %5726, label %5765, label %5727

5727:                                             ; preds = %5723
  %5728 = sub i32 %5721, %5725
  br label %5729

5729:                                             ; preds = %5729, %5727
  %5730 = phi float* [ %5724, %5727 ], [ %5761, %5729 ]
  %5731 = phi float* [ %5685, %5727 ], [ %5762, %5729 ]
  %5732 = phi i32 [ %5728, %5727 ], [ %5763, %5729 ]
  %5733 = bitcast float* %5730 to i32*
  %5734 = load i32, i32* %5733, align 4
  %5735 = bitcast float* %5731 to i32*
  store i32 %5734, i32* %5735, align 4
  %5736 = getelementptr inbounds float, float* %5730, i64 1
  %5737 = bitcast float* %5736 to i32*
  %5738 = load i32, i32* %5737, align 4
  %5739 = getelementptr inbounds float, float* %5731, i64 1
  %5740 = bitcast float* %5739 to i32*
  store i32 %5738, i32* %5740, align 4
  %5741 = getelementptr inbounds float, float* %5730, i64 2
  %5742 = bitcast float* %5741 to i32*
  %5743 = load i32, i32* %5742, align 4
  %5744 = getelementptr inbounds float, float* %5731, i64 2
  %5745 = bitcast float* %5744 to i32*
  store i32 %5743, i32* %5745, align 4
  %5746 = getelementptr inbounds float, float* %5730, i64 4
  %5747 = getelementptr inbounds float, float* %5731, i64 3
  %5748 = bitcast float* %5746 to i32*
  %5749 = load i32, i32* %5748, align 4
  %5750 = bitcast float* %5747 to i32*
  store i32 %5749, i32* %5750, align 4
  %5751 = getelementptr inbounds float, float* %5730, i64 5
  %5752 = bitcast float* %5751 to i32*
  %5753 = load i32, i32* %5752, align 4
  %5754 = getelementptr inbounds float, float* %5731, i64 4
  %5755 = bitcast float* %5754 to i32*
  store i32 %5753, i32* %5755, align 4
  %5756 = getelementptr inbounds float, float* %5730, i64 6
  %5757 = bitcast float* %5756 to i32*
  %5758 = load i32, i32* %5757, align 4
  %5759 = getelementptr inbounds float, float* %5731, i64 5
  %5760 = bitcast float* %5759 to i32*
  store i32 %5758, i32* %5760, align 4
  %5761 = getelementptr inbounds float, float* %5730, i64 8
  %5762 = getelementptr inbounds float, float* %5731, i64 6
  %5763 = add i32 %5732, -2
  %5764 = icmp eq i32 %5763, 0
  br i1 %5764, label %5765, label %5729

5765:                                             ; preds = %5729, %5723
  %5766 = phi float* [ %5724, %5723 ], [ %5761, %5729 ]
  %5767 = phi float* [ %5685, %5723 ], [ %5762, %5729 ]
  %5768 = icmp eq i32 %5725, 0
  br i1 %5768, label %5783, label %5769

5769:                                             ; preds = %5765
  %5770 = bitcast float* %5766 to i32*
  %5771 = load i32, i32* %5770, align 4
  %5772 = bitcast float* %5767 to i32*
  store i32 %5771, i32* %5772, align 4
  %5773 = getelementptr inbounds float, float* %5766, i64 1
  %5774 = bitcast float* %5773 to i32*
  %5775 = load i32, i32* %5774, align 4
  %5776 = getelementptr inbounds float, float* %5767, i64 1
  %5777 = bitcast float* %5776 to i32*
  store i32 %5775, i32* %5777, align 4
  %5778 = getelementptr inbounds float, float* %5766, i64 2
  %5779 = bitcast float* %5778 to i32*
  %5780 = load i32, i32* %5779, align 4
  %5781 = getelementptr inbounds float, float* %5767, i64 2
  %5782 = bitcast float* %5781 to i32*
  store i32 %5780, i32* %5782, align 4
  br label %5783

5783:                                             ; preds = %5765, %5769
  %5784 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5620, align 8
  br label %5785

5785:                                             ; preds = %5783, %5718, %5681
  %5786 = phi %"class.blink::IntRect"* [ %5784, %5783 ], [ %5719, %5718 ], [ %5682, %5681 ]
  %5787 = getelementptr inbounds i8, i8* %5686, i64 %5613
  %5788 = getelementptr inbounds float, float* %5685, i64 %5617
  %5789 = add nuw nsw i32 %5684, 1
  %5790 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5786, i64 0, i32 1, i32 1
  %5791 = load i32, i32* %5790, align 4
  %5792 = icmp slt i32 %5789, %5791
  br i1 %5792, label %5681, label %5665

5793:                                             ; preds = %5667, %5645
  %5794 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5794, align 4
  br label %11653

5795:                                             ; preds = %5609
  %5796 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5797 = load i32, i32* %5796, align 8
  %5798 = sext i32 %5797 to i64
  %5799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5800 = load i32, i32* %5799, align 8
  %5801 = sdiv i32 %5800, 4
  %5802 = sext i32 %5801 to i64
  %5803 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5804 = load i8*, i8** %5803, align 8
  %5805 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5806 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5805, align 8
  %5807 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5806, i64 0, i32 0, i32 1
  %5808 = load i32, i32* %5807, align 4
  %5809 = mul nsw i32 %5808, %5797
  %5810 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5811 = load i32, i32* %5810, align 4
  %5812 = add nsw i32 %5809, %5811
  %5813 = sext i32 %5812 to i64
  %5814 = getelementptr inbounds i8, i8* %5804, i64 %5813
  %5815 = icmp slt i32 %5800, 0
  %5816 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5817 = load i32, i32* %5816, align 8
  %5818 = icmp sgt i32 %5817, 1
  %5819 = and i1 %5815, %5818
  br i1 %5819, label %5820, label %5830

5820:                                             ; preds = %5795
  %5821 = add nsw i32 %5817, -1
  %5822 = sext i32 %5821 to i64
  %5823 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5824 = load i32, i32* %5823, align 4
  %5825 = sext i32 %5824 to i64
  %5826 = mul nsw i64 %5798, %5822
  %5827 = mul i64 %5826, %5825
  %5828 = sub i64 0, %5827
  %5829 = getelementptr inbounds i8, i8* %5814, i64 %5828
  br label %5832

5830:                                             ; preds = %5795
  %5831 = icmp sgt i32 %5817, 0
  br i1 %5831, label %5832, label %5975

5832:                                             ; preds = %5830, %5820
  %5833 = phi i8* [ %5829, %5820 ], [ %5814, %5830 ]
  %5834 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5835 = bitcast i8** %5834 to float**
  %5836 = load float*, float** %5835, align 8
  %5837 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5838 = bitcast i8** %5837 to float**
  %5839 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5840

5840:                                             ; preds = %5852, %5832
  %5841 = phi i32 [ %5817, %5832 ], [ %5853, %5852 ]
  %5842 = phi %"class.blink::IntRect"* [ %5806, %5832 ], [ %5854, %5852 ]
  %5843 = phi %"class.blink::IntRect"* [ %5806, %5832 ], [ %5855, %5852 ]
  %5844 = phi i32 [ 0, %5832 ], [ %5864, %5852 ]
  %5845 = phi float* [ %5836, %5832 ], [ %5857, %5852 ]
  %5846 = phi i8* [ %5833, %5832 ], [ %5863, %5852 ]
  %5847 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5843, i64 0, i32 1, i32 1
  %5848 = load i32, i32* %5847, align 4
  %5849 = icmp sgt i32 %5848, 0
  br i1 %5849, label %5866, label %5852

5850:                                             ; preds = %5967
  %5851 = load i32, i32* %5816, align 8
  br label %5852

5852:                                             ; preds = %5850, %5840
  %5853 = phi i32 [ %5841, %5840 ], [ %5851, %5850 ]
  %5854 = phi %"class.blink::IntRect"* [ %5842, %5840 ], [ %5968, %5850 ]
  %5855 = phi %"class.blink::IntRect"* [ %5843, %5840 ], [ %5968, %5850 ]
  %5856 = phi i8* [ %5846, %5840 ], [ %5969, %5850 ]
  %5857 = phi float* [ %5845, %5840 ], [ %5970, %5850 ]
  %5858 = phi i32 [ %5848, %5840 ], [ %5973, %5850 ]
  %5859 = load i32, i32* %5839, align 4
  %5860 = sub nsw i32 %5859, %5858
  %5861 = sext i32 %5860 to i64
  %5862 = mul nsw i64 %5861, %5798
  %5863 = getelementptr inbounds i8, i8* %5856, i64 %5862
  %5864 = add nuw nsw i32 %5844, 1
  %5865 = icmp slt i32 %5864, %5853
  br i1 %5865, label %5840, label %5975

5866:                                             ; preds = %5840, %5967
  %5867 = phi %"class.blink::IntRect"* [ %5968, %5967 ], [ %5842, %5840 ]
  %5868 = phi %"class.blink::IntRect"* [ %5968, %5967 ], [ %5843, %5840 ]
  %5869 = phi i32 [ %5971, %5967 ], [ 0, %5840 ]
  %5870 = phi float* [ %5970, %5967 ], [ %5845, %5840 ]
  %5871 = phi i8* [ %5969, %5967 ], [ %5846, %5840 ]
  %5872 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5868, i64 0, i32 1, i32 0
  %5873 = load i32, i32* %5872, align 4
  %5874 = icmp eq i32 %5873, 0
  br i1 %5874, label %5967, label %5875

5875:                                             ; preds = %5866
  %5876 = load float*, float** %5838, align 8
  br label %5877

5877:                                             ; preds = %5877, %5875
  %5878 = phi i32 [ %5901, %5877 ], [ 0, %5875 ]
  %5879 = phi i8* [ %5899, %5877 ], [ %5871, %5875 ]
  %5880 = phi float* [ %5900, %5877 ], [ %5876, %5875 ]
  %5881 = load i8, i8* %5879, align 1
  %5882 = uitofp i8 %5881 to float
  %5883 = fmul float %5882, 0x3F70101020000000
  store float %5883, float* %5880, align 4
  %5884 = getelementptr inbounds i8, i8* %5879, i64 1
  %5885 = load i8, i8* %5884, align 1
  %5886 = uitofp i8 %5885 to float
  %5887 = fmul float %5886, 0x3F70101020000000
  %5888 = getelementptr inbounds float, float* %5880, i64 1
  store float %5887, float* %5888, align 4
  %5889 = getelementptr inbounds i8, i8* %5879, i64 2
  %5890 = load i8, i8* %5889, align 1
  %5891 = uitofp i8 %5890 to float
  %5892 = fmul float %5891, 0x3F70101020000000
  %5893 = getelementptr inbounds float, float* %5880, i64 2
  store float %5892, float* %5893, align 4
  %5894 = getelementptr inbounds i8, i8* %5879, i64 3
  %5895 = load i8, i8* %5894, align 1
  %5896 = uitofp i8 %5895 to float
  %5897 = fmul float %5896, 0x3F70101020000000
  %5898 = getelementptr inbounds float, float* %5880, i64 3
  store float %5897, float* %5898, align 4
  %5899 = getelementptr inbounds i8, i8* %5879, i64 4
  %5900 = getelementptr inbounds float, float* %5880, i64 4
  %5901 = add nuw i32 %5878, 1
  %5902 = icmp eq i32 %5901, %5873
  br i1 %5902, label %5903, label %5877

5903:                                             ; preds = %5877
  %5904 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5805, align 8
  %5905 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5904, i64 0, i32 1, i32 0
  %5906 = load i32, i32* %5905, align 4
  %5907 = icmp eq i32 %5906, 0
  br i1 %5907, label %5967, label %5908

5908:                                             ; preds = %5903
  %5909 = load float*, float** %5838, align 8
  %5910 = and i32 %5906, 1
  %5911 = icmp eq i32 %5906, 1
  br i1 %5911, label %5948, label %5912

5912:                                             ; preds = %5908
  %5913 = sub i32 %5906, %5910
  br label %5914

5914:                                             ; preds = %5914, %5912
  %5915 = phi float* [ %5909, %5912 ], [ %5944, %5914 ]
  %5916 = phi float* [ %5870, %5912 ], [ %5945, %5914 ]
  %5917 = phi i32 [ %5913, %5912 ], [ %5946, %5914 ]
  %5918 = getelementptr inbounds float, float* %5915, i64 3
  %5919 = load float, float* %5918, align 4
  %5920 = load float, float* %5915, align 4
  %5921 = fmul float %5919, %5920
  store float %5921, float* %5916, align 4
  %5922 = getelementptr inbounds float, float* %5915, i64 1
  %5923 = load float, float* %5922, align 4
  %5924 = fmul float %5919, %5923
  %5925 = getelementptr inbounds float, float* %5916, i64 1
  store float %5924, float* %5925, align 4
  %5926 = getelementptr inbounds float, float* %5915, i64 2
  %5927 = load float, float* %5926, align 4
  %5928 = fmul float %5919, %5927
  %5929 = getelementptr inbounds float, float* %5916, i64 2
  store float %5928, float* %5929, align 4
  %5930 = getelementptr inbounds float, float* %5915, i64 4
  %5931 = getelementptr inbounds float, float* %5916, i64 3
  %5932 = getelementptr inbounds float, float* %5915, i64 7
  %5933 = load float, float* %5932, align 4
  %5934 = load float, float* %5930, align 4
  %5935 = fmul float %5933, %5934
  store float %5935, float* %5931, align 4
  %5936 = getelementptr inbounds float, float* %5915, i64 5
  %5937 = load float, float* %5936, align 4
  %5938 = fmul float %5933, %5937
  %5939 = getelementptr inbounds float, float* %5916, i64 4
  store float %5938, float* %5939, align 4
  %5940 = getelementptr inbounds float, float* %5915, i64 6
  %5941 = load float, float* %5940, align 4
  %5942 = fmul float %5933, %5941
  %5943 = getelementptr inbounds float, float* %5916, i64 5
  store float %5942, float* %5943, align 4
  %5944 = getelementptr inbounds float, float* %5915, i64 8
  %5945 = getelementptr inbounds float, float* %5916, i64 6
  %5946 = add i32 %5917, -2
  %5947 = icmp eq i32 %5946, 0
  br i1 %5947, label %5948, label %5914

5948:                                             ; preds = %5914, %5908
  %5949 = phi float* [ %5909, %5908 ], [ %5944, %5914 ]
  %5950 = phi float* [ %5870, %5908 ], [ %5945, %5914 ]
  %5951 = icmp eq i32 %5910, 0
  br i1 %5951, label %5965, label %5952

5952:                                             ; preds = %5948
  %5953 = getelementptr inbounds float, float* %5949, i64 3
  %5954 = load float, float* %5953, align 4
  %5955 = load float, float* %5949, align 4
  %5956 = fmul float %5954, %5955
  store float %5956, float* %5950, align 4
  %5957 = getelementptr inbounds float, float* %5949, i64 1
  %5958 = load float, float* %5957, align 4
  %5959 = fmul float %5954, %5958
  %5960 = getelementptr inbounds float, float* %5950, i64 1
  store float %5959, float* %5960, align 4
  %5961 = getelementptr inbounds float, float* %5949, i64 2
  %5962 = load float, float* %5961, align 4
  %5963 = fmul float %5954, %5962
  %5964 = getelementptr inbounds float, float* %5950, i64 2
  store float %5963, float* %5964, align 4
  br label %5965

5965:                                             ; preds = %5948, %5952
  %5966 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5805, align 8
  br label %5967

5967:                                             ; preds = %5965, %5903, %5866
  %5968 = phi %"class.blink::IntRect"* [ %5966, %5965 ], [ %5904, %5903 ], [ %5867, %5866 ]
  %5969 = getelementptr inbounds i8, i8* %5871, i64 %5798
  %5970 = getelementptr inbounds float, float* %5870, i64 %5802
  %5971 = add nuw nsw i32 %5869, 1
  %5972 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5968, i64 0, i32 1, i32 1
  %5973 = load i32, i32* %5972, align 4
  %5974 = icmp slt i32 %5971, %5973
  br i1 %5974, label %5866, label %5850

5975:                                             ; preds = %5852, %5830
  %5976 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5976, align 4
  br label %11653

5977:                                             ; preds = %5609
  %5978 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5979 = load i32, i32* %5978, align 8
  %5980 = sext i32 %5979 to i64
  %5981 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5982 = load i32, i32* %5981, align 8
  %5983 = sdiv i32 %5982, 4
  %5984 = sext i32 %5983 to i64
  %5985 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5986 = load i8*, i8** %5985, align 8
  %5987 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5988 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5987, align 8
  %5989 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5988, i64 0, i32 0, i32 1
  %5990 = load i32, i32* %5989, align 4
  %5991 = mul nsw i32 %5990, %5979
  %5992 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5993 = load i32, i32* %5992, align 4
  %5994 = add nsw i32 %5991, %5993
  %5995 = sext i32 %5994 to i64
  %5996 = getelementptr inbounds i8, i8* %5986, i64 %5995
  %5997 = icmp slt i32 %5982, 0
  %5998 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5999 = load i32, i32* %5998, align 8
  %6000 = icmp sgt i32 %5999, 1
  %6001 = and i1 %5997, %6000
  br i1 %6001, label %6002, label %6012

6002:                                             ; preds = %5977
  %6003 = add nsw i32 %5999, -1
  %6004 = sext i32 %6003 to i64
  %6005 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6006 = load i32, i32* %6005, align 4
  %6007 = sext i32 %6006 to i64
  %6008 = mul nsw i64 %5980, %6004
  %6009 = mul i64 %6008, %6007
  %6010 = sub i64 0, %6009
  %6011 = getelementptr inbounds i8, i8* %5996, i64 %6010
  br label %6014

6012:                                             ; preds = %5977
  %6013 = icmp sgt i32 %5999, 0
  br i1 %6013, label %6014, label %6183

6014:                                             ; preds = %6012, %6002
  %6015 = phi i8* [ %6011, %6002 ], [ %5996, %6012 ]
  %6016 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6017 = bitcast i8** %6016 to float**
  %6018 = load float*, float** %6017, align 8
  %6019 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6020 = bitcast i8** %6019 to float**
  %6021 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6022

6022:                                             ; preds = %6034, %6014
  %6023 = phi i32 [ %5999, %6014 ], [ %6035, %6034 ]
  %6024 = phi %"class.blink::IntRect"* [ %5988, %6014 ], [ %6036, %6034 ]
  %6025 = phi %"class.blink::IntRect"* [ %5988, %6014 ], [ %6037, %6034 ]
  %6026 = phi i32 [ 0, %6014 ], [ %6046, %6034 ]
  %6027 = phi float* [ %6018, %6014 ], [ %6039, %6034 ]
  %6028 = phi i8* [ %6015, %6014 ], [ %6045, %6034 ]
  %6029 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6025, i64 0, i32 1, i32 1
  %6030 = load i32, i32* %6029, align 4
  %6031 = icmp sgt i32 %6030, 0
  br i1 %6031, label %6048, label %6034

6032:                                             ; preds = %6174
  %6033 = load i32, i32* %5998, align 8
  br label %6034

6034:                                             ; preds = %6032, %6022
  %6035 = phi i32 [ %6023, %6022 ], [ %6033, %6032 ]
  %6036 = phi %"class.blink::IntRect"* [ %6024, %6022 ], [ %6175, %6032 ]
  %6037 = phi %"class.blink::IntRect"* [ %6025, %6022 ], [ %6175, %6032 ]
  %6038 = phi i8* [ %6028, %6022 ], [ %6176, %6032 ]
  %6039 = phi float* [ %6027, %6022 ], [ %6177, %6032 ]
  %6040 = phi i32 [ %6030, %6022 ], [ %6180, %6032 ]
  %6041 = load i32, i32* %6021, align 4
  %6042 = sub nsw i32 %6041, %6040
  %6043 = sext i32 %6042 to i64
  %6044 = mul nsw i64 %6043, %5980
  %6045 = getelementptr inbounds i8, i8* %6038, i64 %6044
  %6046 = add nuw nsw i32 %6026, 1
  %6047 = icmp slt i32 %6046, %6035
  br i1 %6047, label %6022, label %6183

6048:                                             ; preds = %6022, %6174
  %6049 = phi i64 [ %6182, %6174 ], [ 0, %6022 ]
  %6050 = phi %"class.blink::IntRect"* [ %6175, %6174 ], [ %6024, %6022 ]
  %6051 = phi %"class.blink::IntRect"* [ %6175, %6174 ], [ %6025, %6022 ]
  %6052 = phi i32 [ %6178, %6174 ], [ 0, %6022 ]
  %6053 = phi float* [ %6177, %6174 ], [ %6027, %6022 ]
  %6054 = phi i8* [ %6176, %6174 ], [ %6028, %6022 ]
  %6055 = mul i64 %6049, %5984
  %6056 = getelementptr float, float* %6027, i64 %6055
  %6057 = add i64 %6055, 3
  %6058 = getelementptr float, float* %6027, i64 %6057
  %6059 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6051, i64 0, i32 1, i32 0
  %6060 = load i32, i32* %6059, align 4
  %6061 = icmp eq i32 %6060, 0
  br i1 %6061, label %6174, label %6062

6062:                                             ; preds = %6048
  %6063 = load float*, float** %6020, align 8
  br label %6064

6064:                                             ; preds = %6064, %6062
  %6065 = phi i32 [ %6088, %6064 ], [ 0, %6062 ]
  %6066 = phi i8* [ %6086, %6064 ], [ %6054, %6062 ]
  %6067 = phi float* [ %6087, %6064 ], [ %6063, %6062 ]
  %6068 = load i8, i8* %6066, align 1
  %6069 = uitofp i8 %6068 to float
  %6070 = fmul float %6069, 0x3F70101020000000
  store float %6070, float* %6067, align 4
  %6071 = getelementptr inbounds i8, i8* %6066, i64 1
  %6072 = load i8, i8* %6071, align 1
  %6073 = uitofp i8 %6072 to float
  %6074 = fmul float %6073, 0x3F70101020000000
  %6075 = getelementptr inbounds float, float* %6067, i64 1
  store float %6074, float* %6075, align 4
  %6076 = getelementptr inbounds i8, i8* %6066, i64 2
  %6077 = load i8, i8* %6076, align 1
  %6078 = uitofp i8 %6077 to float
  %6079 = fmul float %6078, 0x3F70101020000000
  %6080 = getelementptr inbounds float, float* %6067, i64 2
  store float %6079, float* %6080, align 4
  %6081 = getelementptr inbounds i8, i8* %6066, i64 3
  %6082 = load i8, i8* %6081, align 1
  %6083 = uitofp i8 %6082 to float
  %6084 = fmul float %6083, 0x3F70101020000000
  %6085 = getelementptr inbounds float, float* %6067, i64 3
  store float %6084, float* %6085, align 4
  %6086 = getelementptr inbounds i8, i8* %6066, i64 4
  %6087 = getelementptr inbounds float, float* %6067, i64 4
  %6088 = add nuw i32 %6065, 1
  %6089 = icmp eq i32 %6088, %6060
  br i1 %6089, label %6090, label %6064

6090:                                             ; preds = %6064
  %6091 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5987, align 8
  %6092 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6091, i64 0, i32 1, i32 0
  %6093 = load i32, i32* %6092, align 4
  %6094 = icmp eq i32 %6093, 0
  br i1 %6094, label %6174, label %6095

6095:                                             ; preds = %6090
  %6096 = load float*, float** %6020, align 8
  %6097 = add i32 %6093, -1
  %6098 = zext i32 %6097 to i64
  %6099 = add nuw nsw i64 %6098, 1
  %6100 = icmp ult i64 %6099, 4
  br i1 %6100, label %6145, label %6101

6101:                                             ; preds = %6095
  %6102 = add i32 %6093, -1
  %6103 = zext i32 %6102 to i64
  %6104 = mul nuw nsw i64 %6103, 3
  %6105 = getelementptr float, float* %6058, i64 %6104
  %6106 = getelementptr float, float* %6096, i64 4
  %6107 = shl nuw nsw i64 %6103, 2
  %6108 = getelementptr float, float* %6106, i64 %6107
  %6109 = icmp ult float* %6056, %6108
  %6110 = icmp ult float* %6096, %6105
  %6111 = and i1 %6109, %6110
  br i1 %6111, label %6145, label %6112

6112:                                             ; preds = %6101
  %6113 = and i64 %6099, 8589934588
  %6114 = trunc i64 %6113 to i32
  %6115 = shl nuw nsw i64 %6113, 2
  %6116 = getelementptr float, float* %6096, i64 %6115
  %6117 = mul nuw nsw i64 %6113, 3
  %6118 = getelementptr float, float* %6053, i64 %6117
  br label %6119

6119:                                             ; preds = %6119, %6112
  %6120 = phi i64 [ 0, %6112 ], [ %6141, %6119 ]
  %6121 = shl i64 %6120, 2
  %6122 = mul i64 %6120, 3
  %6123 = getelementptr inbounds float, float* %6096, i64 %6121
  %6124 = bitcast float* %6123 to <16 x float>*
  %6125 = load <16 x float>, <16 x float>* %6124, align 4
  %6126 = shufflevector <16 x float> %6125, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %6127 = shufflevector <16 x float> %6125, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %6128 = shufflevector <16 x float> %6125, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %6129 = shufflevector <16 x float> %6125, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %6130 = fcmp une <4 x float> %6129, zeroinitializer
  %6131 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %6129
  %6132 = select <4 x i1> %6130, <4 x float> %6131, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6133 = fmul <4 x float> %6126, %6132
  %6134 = fmul <4 x float> %6132, %6127
  %6135 = fmul <4 x float> %6132, %6128
  %6136 = getelementptr inbounds float, float* %6053, i64 %6122
  %6137 = bitcast float* %6136 to <12 x float>*
  %6138 = shufflevector <4 x float> %6133, <4 x float> %6134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6139 = shufflevector <4 x float> %6135, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %6140 = shufflevector <8 x float> %6138, <8 x float> %6139, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %6140, <12 x float>* %6137, align 4
  %6141 = add i64 %6120, 4
  %6142 = icmp eq i64 %6141, %6113
  br i1 %6142, label %6143, label %6119, !llvm.loop !187

6143:                                             ; preds = %6119
  %6144 = icmp eq i64 %6099, %6113
  br i1 %6144, label %6172, label %6145

6145:                                             ; preds = %6143, %6101, %6095
  %6146 = phi i32 [ 0, %6101 ], [ 0, %6095 ], [ %6114, %6143 ]
  %6147 = phi float* [ %6096, %6101 ], [ %6096, %6095 ], [ %6116, %6143 ]
  %6148 = phi float* [ %6053, %6101 ], [ %6053, %6095 ], [ %6118, %6143 ]
  br label %6149

6149:                                             ; preds = %6145, %6149
  %6150 = phi i32 [ %6170, %6149 ], [ %6146, %6145 ]
  %6151 = phi float* [ %6168, %6149 ], [ %6147, %6145 ]
  %6152 = phi float* [ %6169, %6149 ], [ %6148, %6145 ]
  %6153 = getelementptr inbounds float, float* %6151, i64 3
  %6154 = load float, float* %6153, align 4
  %6155 = fcmp une float %6154, 0.000000e+00
  %6156 = fdiv float 1.000000e+00, %6154
  %6157 = select i1 %6155, float %6156, float 1.000000e+00
  %6158 = load float, float* %6151, align 4
  %6159 = fmul float %6158, %6157
  store float %6159, float* %6152, align 4
  %6160 = getelementptr inbounds float, float* %6151, i64 1
  %6161 = load float, float* %6160, align 4
  %6162 = fmul float %6157, %6161
  %6163 = getelementptr inbounds float, float* %6152, i64 1
  store float %6162, float* %6163, align 4
  %6164 = getelementptr inbounds float, float* %6151, i64 2
  %6165 = load float, float* %6164, align 4
  %6166 = fmul float %6157, %6165
  %6167 = getelementptr inbounds float, float* %6152, i64 2
  store float %6166, float* %6167, align 4
  %6168 = getelementptr inbounds float, float* %6151, i64 4
  %6169 = getelementptr inbounds float, float* %6152, i64 3
  %6170 = add nuw i32 %6150, 1
  %6171 = icmp eq i32 %6170, %6093
  br i1 %6171, label %6172, label %6149, !llvm.loop !188

6172:                                             ; preds = %6149, %6143
  %6173 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5987, align 8
  br label %6174

6174:                                             ; preds = %6172, %6090, %6048
  %6175 = phi %"class.blink::IntRect"* [ %6173, %6172 ], [ %6091, %6090 ], [ %6050, %6048 ]
  %6176 = getelementptr inbounds i8, i8* %6054, i64 %5980
  %6177 = getelementptr inbounds float, float* %6053, i64 %5984
  %6178 = add nuw nsw i32 %6052, 1
  %6179 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6175, i64 0, i32 1, i32 1
  %6180 = load i32, i32* %6179, align 4
  %6181 = icmp slt i32 %6178, %6180
  %6182 = add i64 %6049, 1
  br i1 %6181, label %6048, label %6032

6183:                                             ; preds = %6034, %6012
  %6184 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6184, align 4
  br label %11653

6185:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 2, label %6375
    i32 1, label %6186
  ]

6186:                                             ; preds = %6185
  %6187 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6188 = load i32, i32* %6187, align 8
  %6189 = sext i32 %6188 to i64
  %6190 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6191 = load i32, i32* %6190, align 8
  %6192 = sext i32 %6191 to i64
  %6193 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6194 = load i8*, i8** %6193, align 8
  %6195 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6196 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6195, align 8
  %6197 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6196, i64 0, i32 0, i32 1
  %6198 = load i32, i32* %6197, align 4
  %6199 = mul nsw i32 %6198, %6188
  %6200 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6201 = load i32, i32* %6200, align 4
  %6202 = add nsw i32 %6199, %6201
  %6203 = sext i32 %6202 to i64
  %6204 = getelementptr inbounds i8, i8* %6194, i64 %6203
  %6205 = icmp slt i32 %6191, 0
  %6206 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6207 = load i32, i32* %6206, align 8
  %6208 = icmp sgt i32 %6207, 1
  %6209 = and i1 %6205, %6208
  br i1 %6209, label %6210, label %6220

6210:                                             ; preds = %6186
  %6211 = add nsw i32 %6207, -1
  %6212 = sext i32 %6211 to i64
  %6213 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6214 = load i32, i32* %6213, align 4
  %6215 = sext i32 %6214 to i64
  %6216 = mul nsw i64 %6189, %6212
  %6217 = mul i64 %6216, %6215
  %6218 = sub i64 0, %6217
  %6219 = getelementptr inbounds i8, i8* %6204, i64 %6218
  br label %6222

6220:                                             ; preds = %6186
  %6221 = icmp sgt i32 %6207, 0
  br i1 %6221, label %6222, label %6373

6222:                                             ; preds = %6220, %6210
  %6223 = phi i8* [ %6219, %6210 ], [ %6204, %6220 ]
  %6224 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6225 = load i8*, i8** %6224, align 8
  %6226 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6227

6227:                                             ; preds = %6239, %6222
  %6228 = phi i32 [ %6207, %6222 ], [ %6240, %6239 ]
  %6229 = phi %"class.blink::IntRect"* [ %6196, %6222 ], [ %6241, %6239 ]
  %6230 = phi %"class.blink::IntRect"* [ %6196, %6222 ], [ %6242, %6239 ]
  %6231 = phi i32 [ 0, %6222 ], [ %6251, %6239 ]
  %6232 = phi i8* [ %6225, %6222 ], [ %6244, %6239 ]
  %6233 = phi i8* [ %6223, %6222 ], [ %6250, %6239 ]
  %6234 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6230, i64 0, i32 1, i32 1
  %6235 = load i32, i32* %6234, align 4
  %6236 = icmp sgt i32 %6235, 0
  br i1 %6236, label %6253, label %6239

6237:                                             ; preds = %6364
  %6238 = load i32, i32* %6206, align 8
  br label %6239

6239:                                             ; preds = %6237, %6227
  %6240 = phi i32 [ %6228, %6227 ], [ %6238, %6237 ]
  %6241 = phi %"class.blink::IntRect"* [ %6229, %6227 ], [ %6365, %6237 ]
  %6242 = phi %"class.blink::IntRect"* [ %6230, %6227 ], [ %6365, %6237 ]
  %6243 = phi i8* [ %6233, %6227 ], [ %6366, %6237 ]
  %6244 = phi i8* [ %6232, %6227 ], [ %6367, %6237 ]
  %6245 = phi i32 [ %6235, %6227 ], [ %6370, %6237 ]
  %6246 = load i32, i32* %6226, align 4
  %6247 = sub nsw i32 %6246, %6245
  %6248 = sext i32 %6247 to i64
  %6249 = mul nsw i64 %6248, %6189
  %6250 = getelementptr inbounds i8, i8* %6243, i64 %6249
  %6251 = add nuw nsw i32 %6231, 1
  %6252 = icmp slt i32 %6251, %6240
  br i1 %6252, label %6227, label %6373

6253:                                             ; preds = %6227, %6364
  %6254 = phi i64 [ %6372, %6364 ], [ 0, %6227 ]
  %6255 = phi %"class.blink::IntRect"* [ %6365, %6364 ], [ %6229, %6227 ]
  %6256 = phi %"class.blink::IntRect"* [ %6365, %6364 ], [ %6230, %6227 ]
  %6257 = phi i32 [ %6368, %6364 ], [ 0, %6227 ]
  %6258 = phi i8* [ %6367, %6364 ], [ %6232, %6227 ]
  %6259 = phi i8* [ %6366, %6364 ], [ %6233, %6227 ]
  %6260 = mul i64 %6254, %6192
  %6261 = getelementptr i8, i8* %6232, i64 %6260
  %6262 = add i64 %6260, 4
  %6263 = getelementptr i8, i8* %6232, i64 %6262
  %6264 = mul i64 %6254, %6189
  %6265 = getelementptr i8, i8* %6233, i64 %6264
  %6266 = add i64 %6264, 4
  %6267 = getelementptr i8, i8* %6233, i64 %6266
  %6268 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6256, i64 0, i32 1, i32 0
  %6269 = load i32, i32* %6268, align 4
  %6270 = icmp eq i32 %6269, 0
  br i1 %6270, label %6364, label %6271

6271:                                             ; preds = %6253
  %6272 = add i32 %6269, -1
  %6273 = zext i32 %6272 to i64
  %6274 = add nuw nsw i64 %6273, 1
  %6275 = icmp ult i64 %6274, 17
  br i1 %6275, label %6328, label %6276

6276:                                             ; preds = %6271
  %6277 = add i32 %6269, -1
  %6278 = zext i32 %6277 to i64
  %6279 = shl nuw nsw i64 %6278, 2
  %6280 = getelementptr i8, i8* %6263, i64 %6279
  %6281 = getelementptr i8, i8* %6267, i64 %6279
  %6282 = icmp ult i8* %6261, %6281
  %6283 = icmp ult i8* %6265, %6280
  %6284 = and i1 %6282, %6283
  br i1 %6284, label %6328, label %6285

6285:                                             ; preds = %6276
  %6286 = and i64 %6274, 15
  %6287 = icmp eq i64 %6286, 0
  %6288 = select i1 %6287, i64 16, i64 %6286
  %6289 = sub nsw i64 %6274, %6288
  %6290 = shl nsw i64 %6289, 2
  %6291 = getelementptr i8, i8* %6259, i64 %6290
  %6292 = shl nsw i64 %6289, 2
  %6293 = getelementptr i8, i8* %6258, i64 %6292
  %6294 = trunc i64 %6289 to i32
  br label %6295

6295:                                             ; preds = %6295, %6285
  %6296 = phi i64 [ 0, %6285 ], [ %6326, %6295 ]
  %6297 = shl i64 %6296, 2
  %6298 = getelementptr i8, i8* %6259, i64 %6297
  %6299 = shl i64 %6296, 2
  %6300 = getelementptr inbounds i8, i8* %6298, i64 3
  %6301 = bitcast i8* %6300 to <64 x i8>*
  %6302 = load <64 x i8>, <64 x i8>* %6301, align 1
  %6303 = shufflevector <64 x i8> %6302, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %6304 = uitofp <16 x i8> %6303 to <16 x float>
  %6305 = fdiv <16 x float> %6304, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %6306 = bitcast i8* %6298 to <64 x i8>*
  %6307 = load <64 x i8>, <64 x i8>* %6306, align 1
  %6308 = shufflevector <64 x i8> %6307, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %6309 = shufflevector <64 x i8> %6307, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %6310 = shufflevector <64 x i8> %6307, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %6311 = shufflevector <64 x i8> %6307, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %6312 = uitofp <16 x i8> %6308 to <16 x float>
  %6313 = fmul <16 x float> %6305, %6312
  %6314 = fptoui <16 x float> %6313 to <16 x i8>
  %6315 = uitofp <16 x i8> %6309 to <16 x float>
  %6316 = fmul <16 x float> %6305, %6315
  %6317 = fptoui <16 x float> %6316 to <16 x i8>
  %6318 = uitofp <16 x i8> %6310 to <16 x float>
  %6319 = fmul <16 x float> %6305, %6318
  %6320 = fptoui <16 x float> %6319 to <16 x i8>
  %6321 = getelementptr inbounds i8, i8* %6258, i64 %6299
  %6322 = bitcast i8* %6321 to <64 x i8>*
  %6323 = shufflevector <16 x i8> %6314, <16 x i8> %6317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6324 = shufflevector <16 x i8> %6320, <16 x i8> %6311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6325 = shufflevector <32 x i8> %6323, <32 x i8> %6324, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %6325, <64 x i8>* %6322, align 1
  %6326 = add i64 %6296, 16
  %6327 = icmp eq i64 %6326, %6289
  br i1 %6327, label %6328, label %6295, !llvm.loop !189

6328:                                             ; preds = %6295, %6276, %6271
  %6329 = phi i8* [ %6259, %6276 ], [ %6259, %6271 ], [ %6291, %6295 ]
  %6330 = phi i8* [ %6258, %6276 ], [ %6258, %6271 ], [ %6293, %6295 ]
  %6331 = phi i32 [ 0, %6276 ], [ 0, %6271 ], [ %6294, %6295 ]
  br label %6332

6332:                                             ; preds = %6328, %6332
  %6333 = phi i8* [ %6358, %6332 ], [ %6329, %6328 ]
  %6334 = phi i8* [ %6359, %6332 ], [ %6330, %6328 ]
  %6335 = phi i32 [ %6360, %6332 ], [ %6331, %6328 ]
  %6336 = getelementptr inbounds i8, i8* %6333, i64 3
  %6337 = load i8, i8* %6336, align 1
  %6338 = uitofp i8 %6337 to float
  %6339 = fdiv float %6338, 2.550000e+02
  %6340 = load i8, i8* %6333, align 1
  %6341 = uitofp i8 %6340 to float
  %6342 = fmul float %6339, %6341
  %6343 = fptoui float %6342 to i8
  %6344 = getelementptr inbounds i8, i8* %6333, i64 1
  %6345 = load i8, i8* %6344, align 1
  %6346 = uitofp i8 %6345 to float
  %6347 = fmul float %6339, %6346
  %6348 = fptoui float %6347 to i8
  %6349 = getelementptr inbounds i8, i8* %6333, i64 2
  %6350 = load i8, i8* %6349, align 1
  %6351 = uitofp i8 %6350 to float
  %6352 = fmul float %6339, %6351
  %6353 = fptoui float %6352 to i8
  store i8 %6343, i8* %6334, align 1
  %6354 = getelementptr inbounds i8, i8* %6334, i64 1
  store i8 %6348, i8* %6354, align 1
  %6355 = getelementptr inbounds i8, i8* %6334, i64 2
  store i8 %6353, i8* %6355, align 1
  %6356 = load i8, i8* %6336, align 1
  %6357 = getelementptr inbounds i8, i8* %6334, i64 3
  store i8 %6356, i8* %6357, align 1
  %6358 = getelementptr inbounds i8, i8* %6333, i64 4
  %6359 = getelementptr inbounds i8, i8* %6334, i64 4
  %6360 = add nuw i32 %6335, 1
  %6361 = icmp eq i32 %6360, %6269
  br i1 %6361, label %6362, label %6332, !llvm.loop !190

6362:                                             ; preds = %6332
  %6363 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6195, align 8
  br label %6364

6364:                                             ; preds = %6362, %6253
  %6365 = phi %"class.blink::IntRect"* [ %6363, %6362 ], [ %6255, %6253 ]
  %6366 = getelementptr inbounds i8, i8* %6259, i64 %6189
  %6367 = getelementptr inbounds i8, i8* %6258, i64 %6192
  %6368 = add nuw nsw i32 %6257, 1
  %6369 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6365, i64 0, i32 1, i32 1
  %6370 = load i32, i32* %6369, align 4
  %6371 = icmp slt i32 %6368, %6370
  %6372 = add i64 %6254, 1
  br i1 %6371, label %6253, label %6237

6373:                                             ; preds = %6239, %6220
  %6374 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6374, align 4
  br label %11653

6375:                                             ; preds = %6185
  %6376 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6377 = load i32, i32* %6376, align 8
  %6378 = sext i32 %6377 to i64
  %6379 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6380 = load i32, i32* %6379, align 8
  %6381 = sext i32 %6380 to i64
  %6382 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6383 = load i8*, i8** %6382, align 8
  %6384 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6385 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6384, align 8
  %6386 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6385, i64 0, i32 0, i32 1
  %6387 = load i32, i32* %6386, align 4
  %6388 = mul nsw i32 %6387, %6377
  %6389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6390 = load i32, i32* %6389, align 4
  %6391 = add nsw i32 %6388, %6390
  %6392 = sext i32 %6391 to i64
  %6393 = getelementptr inbounds i8, i8* %6383, i64 %6392
  %6394 = icmp slt i32 %6380, 0
  %6395 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6396 = load i32, i32* %6395, align 8
  %6397 = icmp sgt i32 %6396, 1
  %6398 = and i1 %6394, %6397
  br i1 %6398, label %6399, label %6409

6399:                                             ; preds = %6375
  %6400 = add nsw i32 %6396, -1
  %6401 = sext i32 %6400 to i64
  %6402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6403 = load i32, i32* %6402, align 4
  %6404 = sext i32 %6403 to i64
  %6405 = mul nsw i64 %6378, %6401
  %6406 = mul i64 %6405, %6404
  %6407 = sub i64 0, %6406
  %6408 = getelementptr inbounds i8, i8* %6393, i64 %6407
  br label %6411

6409:                                             ; preds = %6375
  %6410 = icmp sgt i32 %6396, 0
  br i1 %6410, label %6411, label %6533

6411:                                             ; preds = %6409, %6399
  %6412 = phi i8* [ %6408, %6399 ], [ %6393, %6409 ]
  %6413 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6414 = load i8*, i8** %6413, align 8
  %6415 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6416

6416:                                             ; preds = %6428, %6411
  %6417 = phi %"class.blink::IntRect"* [ %6385, %6411 ], [ %6429, %6428 ]
  %6418 = phi i32 [ %6396, %6411 ], [ %6430, %6428 ]
  %6419 = phi %"class.blink::IntRect"* [ %6385, %6411 ], [ %6431, %6428 ]
  %6420 = phi i32 [ 0, %6411 ], [ %6440, %6428 ]
  %6421 = phi i8* [ %6414, %6411 ], [ %6433, %6428 ]
  %6422 = phi i8* [ %6412, %6411 ], [ %6439, %6428 ]
  %6423 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6419, i64 0, i32 1, i32 1
  %6424 = load i32, i32* %6423, align 4
  %6425 = icmp sgt i32 %6424, 0
  br i1 %6425, label %6442, label %6428

6426:                                             ; preds = %6525
  %6427 = load i32, i32* %6395, align 8
  br label %6428

6428:                                             ; preds = %6426, %6416
  %6429 = phi %"class.blink::IntRect"* [ %6417, %6416 ], [ %6526, %6426 ]
  %6430 = phi i32 [ %6418, %6416 ], [ %6427, %6426 ]
  %6431 = phi %"class.blink::IntRect"* [ %6419, %6416 ], [ %6526, %6426 ]
  %6432 = phi i8* [ %6422, %6416 ], [ %6527, %6426 ]
  %6433 = phi i8* [ %6421, %6416 ], [ %6528, %6426 ]
  %6434 = phi i32 [ %6424, %6416 ], [ %6531, %6426 ]
  %6435 = load i32, i32* %6415, align 4
  %6436 = sub nsw i32 %6435, %6434
  %6437 = sext i32 %6436 to i64
  %6438 = mul nsw i64 %6437, %6378
  %6439 = getelementptr inbounds i8, i8* %6432, i64 %6438
  %6440 = add nuw nsw i32 %6420, 1
  %6441 = icmp slt i32 %6440, %6430
  br i1 %6441, label %6416, label %6533

6442:                                             ; preds = %6416, %6525
  %6443 = phi %"class.blink::IntRect"* [ %6526, %6525 ], [ %6417, %6416 ]
  %6444 = phi %"class.blink::IntRect"* [ %6526, %6525 ], [ %6419, %6416 ]
  %6445 = phi i32 [ %6529, %6525 ], [ 0, %6416 ]
  %6446 = phi i8* [ %6528, %6525 ], [ %6421, %6416 ]
  %6447 = phi i8* [ %6527, %6525 ], [ %6422, %6416 ]
  %6448 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6444, i64 0, i32 1, i32 0
  %6449 = load i32, i32* %6448, align 4
  %6450 = icmp eq i32 %6449, 0
  br i1 %6450, label %6525, label %6451

6451:                                             ; preds = %6442, %6451
  %6452 = phi i8* [ %6485, %6451 ], [ %6447, %6442 ]
  %6453 = phi i32 [ %6487, %6451 ], [ 0, %6442 ]
  %6454 = phi i8* [ %6486, %6451 ], [ %6446, %6442 ]
  %6455 = getelementptr inbounds i8, i8* %6452, i64 3
  %6456 = load i8, i8* %6455, align 1
  %6457 = icmp eq i8 %6456, 0
  %6458 = select i1 %6457, i8 -1, i8 %6456
  %6459 = uitofp i8 %6458 to float
  %6460 = getelementptr inbounds i8, i8* %6452, i64 2
  %6461 = load i8, i8* %6460, align 1
  %6462 = uitofp i8 %6461 to float
  %6463 = getelementptr inbounds i8, i8* %6452, i64 1
  %6464 = load i8, i8* %6463, align 1
  %6465 = uitofp i8 %6464 to float
  %6466 = load i8, i8* %6452, align 1
  %6467 = uitofp i8 %6466 to float
  %6468 = insertelement <4 x float> <float undef, float undef, float undef, float 0.000000e+00>, float %6467, i32 0
  %6469 = insertelement <4 x float> %6468, float %6465, i32 1
  %6470 = insertelement <4 x float> %6469, float %6462, i32 2
  %6471 = insertelement <4 x float> undef, float %6459, i32 0
  %6472 = fdiv <4 x float> <float 2.550000e+02, float undef, float undef, float undef>, %6471
  %6473 = shufflevector <4 x float> %6472, <4 x float> undef, <4 x i32> zeroinitializer
  %6474 = fmul <4 x float> %6473, %6470
  %6475 = extractelement <4 x float> %6474, i32 0
  %6476 = fptoui float %6475 to i8
  store i8 %6476, i8* %6454, align 1
  %6477 = extractelement <4 x float> %6474, i32 1
  %6478 = fptoui float %6477 to i8
  %6479 = getelementptr inbounds i8, i8* %6454, i64 1
  store i8 %6478, i8* %6479, align 1
  %6480 = extractelement <4 x float> %6474, i32 2
  %6481 = fptoui float %6480 to i8
  %6482 = getelementptr inbounds i8, i8* %6454, i64 2
  store i8 %6481, i8* %6482, align 1
  %6483 = load i8, i8* %6455, align 1
  %6484 = getelementptr inbounds i8, i8* %6454, i64 3
  store i8 %6483, i8* %6484, align 1
  %6485 = getelementptr inbounds i8, i8* %6452, i64 4
  %6486 = getelementptr inbounds i8, i8* %6454, i64 4
  %6487 = add nuw i32 %6453, 1
  %6488 = icmp eq i32 %6487, %6449
  br i1 %6488, label %6489, label %6451

6489:                                             ; preds = %6451, %6499
  %6490 = phi i8* [ %6519, %6499 ], [ %6447, %6451 ]
  %6491 = phi i8* [ %6520, %6499 ], [ %6446, %6451 ]
  %6492 = phi i32 [ %6521, %6499 ], [ 0, %6451 ]
  %6493 = getelementptr inbounds i8, i8* %6490, i64 3
  %6494 = load i8, i8* %6493, align 1
  %6495 = icmp eq i8 %6494, 0
  br i1 %6495, label %6499, label %6496

6496:                                             ; preds = %6489
  %6497 = uitofp i8 %6494 to float
  %6498 = fdiv float 2.550000e+02, %6497
  br label %6499

6499:                                             ; preds = %6496, %6489
  %6500 = phi float [ %6498, %6496 ], [ 1.000000e+00, %6489 ]
  %6501 = load i8, i8* %6490, align 1
  %6502 = uitofp i8 %6501 to float
  %6503 = fmul float %6500, %6502
  %6504 = fptoui float %6503 to i8
  %6505 = getelementptr inbounds i8, i8* %6490, i64 1
  %6506 = load i8, i8* %6505, align 1
  %6507 = uitofp i8 %6506 to float
  %6508 = fmul float %6500, %6507
  %6509 = fptoui float %6508 to i8
  %6510 = getelementptr inbounds i8, i8* %6490, i64 2
  %6511 = load i8, i8* %6510, align 1
  %6512 = uitofp i8 %6511 to float
  %6513 = fmul float %6500, %6512
  %6514 = fptoui float %6513 to i8
  store i8 %6504, i8* %6491, align 1
  %6515 = getelementptr inbounds i8, i8* %6491, i64 1
  store i8 %6509, i8* %6515, align 1
  %6516 = getelementptr inbounds i8, i8* %6491, i64 2
  store i8 %6514, i8* %6516, align 1
  %6517 = load i8, i8* %6493, align 1
  %6518 = getelementptr inbounds i8, i8* %6491, i64 3
  store i8 %6517, i8* %6518, align 1
  %6519 = getelementptr inbounds i8, i8* %6490, i64 4
  %6520 = getelementptr inbounds i8, i8* %6491, i64 4
  %6521 = add nuw i32 %6492, 1
  %6522 = icmp eq i32 %6521, %6449
  br i1 %6522, label %6523, label %6489

6523:                                             ; preds = %6499
  %6524 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6384, align 8
  br label %6525

6525:                                             ; preds = %6523, %6442
  %6526 = phi %"class.blink::IntRect"* [ %6524, %6523 ], [ %6443, %6442 ]
  %6527 = getelementptr inbounds i8, i8* %6447, i64 %6378
  %6528 = getelementptr inbounds i8, i8* %6446, i64 %6381
  %6529 = add nuw nsw i32 %6445, 1
  %6530 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6526, i64 0, i32 1, i32 1
  %6531 = load i32, i32* %6530, align 4
  %6532 = icmp slt i32 %6529, %6531
  br i1 %6532, label %6442, label %6426

6533:                                             ; preds = %6428, %6409
  %6534 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6534, align 4
  br label %11653

6535:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %6536
    i32 1, label %6721
    i32 2, label %6928
  ]

6536:                                             ; preds = %6535
  %6537 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6538 = load i32, i32* %6537, align 8
  %6539 = sext i32 %6538 to i64
  %6540 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6541 = load i32, i32* %6540, align 8
  %6542 = sdiv i32 %6541, 2
  %6543 = sext i32 %6542 to i64
  %6544 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6545 = load i8*, i8** %6544, align 8
  %6546 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6547 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6546, align 8
  %6548 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6547, i64 0, i32 0, i32 1
  %6549 = load i32, i32* %6548, align 4
  %6550 = mul nsw i32 %6549, %6538
  %6551 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6552 = load i32, i32* %6551, align 4
  %6553 = add nsw i32 %6550, %6552
  %6554 = sext i32 %6553 to i64
  %6555 = getelementptr inbounds i8, i8* %6545, i64 %6554
  %6556 = icmp slt i32 %6541, 0
  %6557 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6558 = load i32, i32* %6557, align 8
  %6559 = icmp sgt i32 %6558, 1
  %6560 = and i1 %6556, %6559
  br i1 %6560, label %6561, label %6571

6561:                                             ; preds = %6536
  %6562 = add nsw i32 %6558, -1
  %6563 = sext i32 %6562 to i64
  %6564 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6565 = load i32, i32* %6564, align 4
  %6566 = sext i32 %6565 to i64
  %6567 = mul nsw i64 %6539, %6563
  %6568 = mul i64 %6567, %6566
  %6569 = sub i64 0, %6568
  %6570 = getelementptr inbounds i8, i8* %6555, i64 %6569
  br label %6573

6571:                                             ; preds = %6536
  %6572 = icmp sgt i32 %6558, 0
  br i1 %6572, label %6573, label %6719

6573:                                             ; preds = %6571, %6561
  %6574 = phi i8* [ %6570, %6561 ], [ %6555, %6571 ]
  %6575 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6576 = bitcast i8** %6575 to i16**
  %6577 = load i16*, i16** %6576, align 8
  %6578 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6579

6579:                                             ; preds = %6591, %6573
  %6580 = phi i32 [ %6558, %6573 ], [ %6592, %6591 ]
  %6581 = phi %"class.blink::IntRect"* [ %6547, %6573 ], [ %6593, %6591 ]
  %6582 = phi %"class.blink::IntRect"* [ %6547, %6573 ], [ %6594, %6591 ]
  %6583 = phi i32 [ 0, %6573 ], [ %6603, %6591 ]
  %6584 = phi i16* [ %6577, %6573 ], [ %6596, %6591 ]
  %6585 = phi i8* [ %6574, %6573 ], [ %6602, %6591 ]
  %6586 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6582, i64 0, i32 1, i32 1
  %6587 = load i32, i32* %6586, align 4
  %6588 = icmp sgt i32 %6587, 0
  br i1 %6588, label %6605, label %6591

6589:                                             ; preds = %6710
  %6590 = load i32, i32* %6557, align 8
  br label %6591

6591:                                             ; preds = %6589, %6579
  %6592 = phi i32 [ %6580, %6579 ], [ %6590, %6589 ]
  %6593 = phi %"class.blink::IntRect"* [ %6581, %6579 ], [ %6711, %6589 ]
  %6594 = phi %"class.blink::IntRect"* [ %6582, %6579 ], [ %6711, %6589 ]
  %6595 = phi i8* [ %6585, %6579 ], [ %6712, %6589 ]
  %6596 = phi i16* [ %6584, %6579 ], [ %6713, %6589 ]
  %6597 = phi i32 [ %6587, %6579 ], [ %6716, %6589 ]
  %6598 = load i32, i32* %6578, align 4
  %6599 = sub nsw i32 %6598, %6597
  %6600 = sext i32 %6599 to i64
  %6601 = mul nsw i64 %6600, %6539
  %6602 = getelementptr inbounds i8, i8* %6595, i64 %6601
  %6603 = add nuw nsw i32 %6583, 1
  %6604 = icmp slt i32 %6603, %6592
  br i1 %6604, label %6579, label %6719

6605:                                             ; preds = %6579, %6710
  %6606 = phi i64 [ %6718, %6710 ], [ 0, %6579 ]
  %6607 = phi %"class.blink::IntRect"* [ %6711, %6710 ], [ %6581, %6579 ]
  %6608 = phi %"class.blink::IntRect"* [ %6711, %6710 ], [ %6582, %6579 ]
  %6609 = phi i32 [ %6714, %6710 ], [ 0, %6579 ]
  %6610 = phi i16* [ %6713, %6710 ], [ %6584, %6579 ]
  %6611 = phi i8* [ %6712, %6710 ], [ %6585, %6579 ]
  %6612 = mul i64 %6606, %6543
  %6613 = getelementptr i16, i16* %6584, i64 %6612
  %6614 = bitcast i16* %6613 to i8*
  %6615 = add i64 %6612, 1
  %6616 = getelementptr i16, i16* %6584, i64 %6615
  %6617 = mul i64 %6606, %6539
  %6618 = getelementptr i8, i8* %6585, i64 %6617
  %6619 = add i64 %6617, 4
  %6620 = getelementptr i8, i8* %6585, i64 %6619
  %6621 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6608, i64 0, i32 1, i32 0
  %6622 = load i32, i32* %6621, align 4
  %6623 = icmp eq i32 %6622, 0
  br i1 %6623, label %6710, label %6624

6624:                                             ; preds = %6605
  %6625 = add i32 %6622, -1
  %6626 = zext i32 %6625 to i64
  %6627 = add nuw nsw i64 %6626, 1
  %6628 = icmp ult i64 %6627, 8
  br i1 %6628, label %6675, label %6629

6629:                                             ; preds = %6624
  %6630 = add i32 %6622, -1
  %6631 = zext i32 %6630 to i64
  %6632 = getelementptr i16, i16* %6616, i64 %6631
  %6633 = bitcast i16* %6632 to i8*
  %6634 = shl nuw nsw i64 %6631, 2
  %6635 = getelementptr i8, i8* %6620, i64 %6634
  %6636 = icmp ugt i8* %6635, %6614
  %6637 = icmp ult i8* %6618, %6633
  %6638 = and i1 %6636, %6637
  br i1 %6638, label %6675, label %6639

6639:                                             ; preds = %6629
  %6640 = and i64 %6627, 8589934584
  %6641 = trunc i64 %6640 to i32
  %6642 = shl nuw nsw i64 %6640, 2
  %6643 = getelementptr i8, i8* %6611, i64 %6642
  %6644 = getelementptr i16, i16* %6610, i64 %6640
  br label %6645

6645:                                             ; preds = %6645, %6639
  %6646 = phi i64 [ 0, %6639 ], [ %6671, %6645 ]
  %6647 = shl i64 %6646, 2
  %6648 = getelementptr i8, i8* %6611, i64 %6647
  %6649 = getelementptr i16, i16* %6610, i64 %6646
  %6650 = bitcast i8* %6648 to <32 x i8>*
  %6651 = load <32 x i8>, <32 x i8>* %6650, align 1
  %6652 = shufflevector <32 x i8> %6651, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %6653 = shufflevector <32 x i8> %6651, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %6654 = shufflevector <32 x i8> %6651, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %6655 = shufflevector <32 x i8> %6651, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %6656 = and <8 x i8> %6652, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6657 = zext <8 x i8> %6656 to <8 x i16>
  %6658 = shl nuw <8 x i16> %6657, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6659 = and <8 x i8> %6653, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6660 = zext <8 x i8> %6659 to <8 x i16>
  %6661 = shl nuw nsw <8 x i16> %6660, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %6662 = or <8 x i16> %6661, %6658
  %6663 = lshr <8 x i8> %6654, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %6664 = and <8 x i8> %6663, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %6665 = zext <8 x i8> %6664 to <8 x i16>
  %6666 = or <8 x i16> %6662, %6665
  %6667 = lshr <8 x i8> %6655, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %6668 = zext <8 x i8> %6667 to <8 x i16>
  %6669 = or <8 x i16> %6666, %6668
  %6670 = bitcast i16* %6649 to <8 x i16>*
  store <8 x i16> %6669, <8 x i16>* %6670, align 2, !alias.scope !191, !noalias !194
  %6671 = add i64 %6646, 8
  %6672 = icmp eq i64 %6671, %6640
  br i1 %6672, label %6673, label %6645, !llvm.loop !196

6673:                                             ; preds = %6645
  %6674 = icmp eq i64 %6627, %6640
  br i1 %6674, label %6708, label %6675

6675:                                             ; preds = %6673, %6629, %6624
  %6676 = phi i32 [ 0, %6629 ], [ 0, %6624 ], [ %6641, %6673 ]
  %6677 = phi i8* [ %6611, %6629 ], [ %6611, %6624 ], [ %6643, %6673 ]
  %6678 = phi i16* [ %6610, %6629 ], [ %6610, %6624 ], [ %6644, %6673 ]
  br label %6679

6679:                                             ; preds = %6675, %6679
  %6680 = phi i32 [ %6706, %6679 ], [ %6676, %6675 ]
  %6681 = phi i8* [ %6704, %6679 ], [ %6677, %6675 ]
  %6682 = phi i16* [ %6705, %6679 ], [ %6678, %6675 ]
  %6683 = load i8, i8* %6681, align 1
  %6684 = and i8 %6683, -8
  %6685 = zext i8 %6684 to i16
  %6686 = shl nuw i16 %6685, 8
  %6687 = getelementptr inbounds i8, i8* %6681, i64 1
  %6688 = load i8, i8* %6687, align 1
  %6689 = and i8 %6688, -8
  %6690 = zext i8 %6689 to i16
  %6691 = shl nuw nsw i16 %6690, 3
  %6692 = or i16 %6691, %6686
  %6693 = getelementptr inbounds i8, i8* %6681, i64 2
  %6694 = load i8, i8* %6693, align 1
  %6695 = lshr i8 %6694, 2
  %6696 = and i8 %6695, 62
  %6697 = zext i8 %6696 to i16
  %6698 = or i16 %6692, %6697
  %6699 = getelementptr inbounds i8, i8* %6681, i64 3
  %6700 = load i8, i8* %6699, align 1
  %6701 = lshr i8 %6700, 7
  %6702 = zext i8 %6701 to i16
  %6703 = or i16 %6698, %6702
  store i16 %6703, i16* %6682, align 2
  %6704 = getelementptr inbounds i8, i8* %6681, i64 4
  %6705 = getelementptr inbounds i16, i16* %6682, i64 1
  %6706 = add nuw i32 %6680, 1
  %6707 = icmp eq i32 %6706, %6622
  br i1 %6707, label %6708, label %6679, !llvm.loop !197

6708:                                             ; preds = %6679, %6673
  %6709 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6546, align 8
  br label %6710

6710:                                             ; preds = %6708, %6605
  %6711 = phi %"class.blink::IntRect"* [ %6709, %6708 ], [ %6607, %6605 ]
  %6712 = getelementptr inbounds i8, i8* %6611, i64 %6539
  %6713 = getelementptr inbounds i16, i16* %6610, i64 %6543
  %6714 = add nuw nsw i32 %6609, 1
  %6715 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6711, i64 0, i32 1, i32 1
  %6716 = load i32, i32* %6715, align 4
  %6717 = icmp slt i32 %6714, %6716
  %6718 = add i64 %6606, 1
  br i1 %6717, label %6605, label %6589

6719:                                             ; preds = %6591, %6571
  %6720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6720, align 4
  br label %11653

6721:                                             ; preds = %6535
  %6722 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6723 = load i32, i32* %6722, align 8
  %6724 = sext i32 %6723 to i64
  %6725 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6726 = load i32, i32* %6725, align 8
  %6727 = sdiv i32 %6726, 2
  %6728 = sext i32 %6727 to i64
  %6729 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6730 = load i8*, i8** %6729, align 8
  %6731 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6732 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6731, align 8
  %6733 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6732, i64 0, i32 0, i32 1
  %6734 = load i32, i32* %6733, align 4
  %6735 = mul nsw i32 %6734, %6723
  %6736 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6737 = load i32, i32* %6736, align 4
  %6738 = add nsw i32 %6735, %6737
  %6739 = sext i32 %6738 to i64
  %6740 = getelementptr inbounds i8, i8* %6730, i64 %6739
  %6741 = icmp slt i32 %6726, 0
  %6742 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6743 = load i32, i32* %6742, align 8
  %6744 = icmp sgt i32 %6743, 1
  %6745 = and i1 %6741, %6744
  br i1 %6745, label %6746, label %6756

6746:                                             ; preds = %6721
  %6747 = add nsw i32 %6743, -1
  %6748 = sext i32 %6747 to i64
  %6749 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6750 = load i32, i32* %6749, align 4
  %6751 = sext i32 %6750 to i64
  %6752 = mul nsw i64 %6724, %6748
  %6753 = mul i64 %6752, %6751
  %6754 = sub i64 0, %6753
  %6755 = getelementptr inbounds i8, i8* %6740, i64 %6754
  br label %6758

6756:                                             ; preds = %6721
  %6757 = icmp sgt i32 %6743, 0
  br i1 %6757, label %6758, label %6926

6758:                                             ; preds = %6756, %6746
  %6759 = phi i8* [ %6755, %6746 ], [ %6740, %6756 ]
  %6760 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6761 = bitcast i8** %6760 to i16**
  %6762 = load i16*, i16** %6761, align 8
  %6763 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6764

6764:                                             ; preds = %6776, %6758
  %6765 = phi i32 [ %6743, %6758 ], [ %6777, %6776 ]
  %6766 = phi %"class.blink::IntRect"* [ %6732, %6758 ], [ %6778, %6776 ]
  %6767 = phi %"class.blink::IntRect"* [ %6732, %6758 ], [ %6779, %6776 ]
  %6768 = phi i32 [ 0, %6758 ], [ %6788, %6776 ]
  %6769 = phi i16* [ %6762, %6758 ], [ %6781, %6776 ]
  %6770 = phi i8* [ %6759, %6758 ], [ %6787, %6776 ]
  %6771 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6767, i64 0, i32 1, i32 1
  %6772 = load i32, i32* %6771, align 4
  %6773 = icmp sgt i32 %6772, 0
  br i1 %6773, label %6790, label %6776

6774:                                             ; preds = %6917
  %6775 = load i32, i32* %6742, align 8
  br label %6776

6776:                                             ; preds = %6774, %6764
  %6777 = phi i32 [ %6765, %6764 ], [ %6775, %6774 ]
  %6778 = phi %"class.blink::IntRect"* [ %6766, %6764 ], [ %6918, %6774 ]
  %6779 = phi %"class.blink::IntRect"* [ %6767, %6764 ], [ %6918, %6774 ]
  %6780 = phi i8* [ %6770, %6764 ], [ %6919, %6774 ]
  %6781 = phi i16* [ %6769, %6764 ], [ %6920, %6774 ]
  %6782 = phi i32 [ %6772, %6764 ], [ %6923, %6774 ]
  %6783 = load i32, i32* %6763, align 4
  %6784 = sub nsw i32 %6783, %6782
  %6785 = sext i32 %6784 to i64
  %6786 = mul nsw i64 %6785, %6724
  %6787 = getelementptr inbounds i8, i8* %6780, i64 %6786
  %6788 = add nuw nsw i32 %6768, 1
  %6789 = icmp slt i32 %6788, %6777
  br i1 %6789, label %6764, label %6926

6790:                                             ; preds = %6764, %6917
  %6791 = phi i64 [ %6925, %6917 ], [ 0, %6764 ]
  %6792 = phi %"class.blink::IntRect"* [ %6918, %6917 ], [ %6766, %6764 ]
  %6793 = phi %"class.blink::IntRect"* [ %6918, %6917 ], [ %6767, %6764 ]
  %6794 = phi i32 [ %6921, %6917 ], [ 0, %6764 ]
  %6795 = phi i16* [ %6920, %6917 ], [ %6769, %6764 ]
  %6796 = phi i8* [ %6919, %6917 ], [ %6770, %6764 ]
  %6797 = mul i64 %6791, %6728
  %6798 = getelementptr i16, i16* %6769, i64 %6797
  %6799 = bitcast i16* %6798 to i8*
  %6800 = add i64 %6797, 1
  %6801 = getelementptr i16, i16* %6769, i64 %6800
  %6802 = mul i64 %6791, %6724
  %6803 = getelementptr i8, i8* %6770, i64 %6802
  %6804 = add i64 %6802, 4
  %6805 = getelementptr i8, i8* %6770, i64 %6804
  %6806 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6793, i64 0, i32 1, i32 0
  %6807 = load i32, i32* %6806, align 4
  %6808 = icmp eq i32 %6807, 0
  br i1 %6808, label %6917, label %6809

6809:                                             ; preds = %6790
  %6810 = add i32 %6807, -1
  %6811 = zext i32 %6810 to i64
  %6812 = add nuw nsw i64 %6811, 1
  %6813 = icmp ult i64 %6812, 8
  br i1 %6813, label %6871, label %6814

6814:                                             ; preds = %6809
  %6815 = add i32 %6807, -1
  %6816 = zext i32 %6815 to i64
  %6817 = getelementptr i16, i16* %6801, i64 %6816
  %6818 = bitcast i16* %6817 to i8*
  %6819 = shl nuw nsw i64 %6816, 2
  %6820 = getelementptr i8, i8* %6805, i64 %6819
  %6821 = icmp ugt i8* %6820, %6799
  %6822 = icmp ult i8* %6803, %6818
  %6823 = and i1 %6821, %6822
  br i1 %6823, label %6871, label %6824

6824:                                             ; preds = %6814
  %6825 = and i64 %6812, 8589934584
  %6826 = shl nuw nsw i64 %6825, 2
  %6827 = getelementptr i8, i8* %6796, i64 %6826
  %6828 = getelementptr i16, i16* %6795, i64 %6825
  %6829 = trunc i64 %6825 to i32
  br label %6830

6830:                                             ; preds = %6830, %6824
  %6831 = phi i64 [ 0, %6824 ], [ %6867, %6830 ]
  %6832 = shl i64 %6831, 2
  %6833 = getelementptr i16, i16* %6795, i64 %6831
  %6834 = getelementptr inbounds i8, i8* %6796, i64 %6832
  %6835 = bitcast i8* %6834 to <32 x i8>*
  %6836 = load <32 x i8>, <32 x i8>* %6835, align 1
  %6837 = shufflevector <32 x i8> %6836, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %6838 = shufflevector <32 x i8> %6836, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %6839 = shufflevector <32 x i8> %6836, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %6840 = shufflevector <32 x i8> %6836, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %6841 = uitofp <8 x i8> %6840 to <8 x float>
  %6842 = fdiv <8 x float> %6841, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %6843 = uitofp <8 x i8> %6837 to <8 x float>
  %6844 = fmul <8 x float> %6842, %6843
  %6845 = fptoui <8 x float> %6844 to <8 x i8>
  %6846 = uitofp <8 x i8> %6838 to <8 x float>
  %6847 = fmul <8 x float> %6842, %6846
  %6848 = fptoui <8 x float> %6847 to <8 x i8>
  %6849 = uitofp <8 x i8> %6839 to <8 x float>
  %6850 = fmul <8 x float> %6842, %6849
  %6851 = fptoui <8 x float> %6850 to <8 x i8>
  %6852 = and <8 x i8> %6845, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6853 = zext <8 x i8> %6852 to <8 x i16>
  %6854 = shl nuw <8 x i16> %6853, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6855 = and <8 x i8> %6848, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6856 = zext <8 x i8> %6855 to <8 x i16>
  %6857 = shl nuw nsw <8 x i16> %6856, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %6858 = lshr <8 x i8> %6851, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %6859 = and <8 x i8> %6858, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %6860 = zext <8 x i8> %6859 to <8 x i16>
  %6861 = lshr <8 x i8> %6840, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %6862 = zext <8 x i8> %6861 to <8 x i16>
  %6863 = or <8 x i16> %6854, %6862
  %6864 = or <8 x i16> %6863, %6857
  %6865 = or <8 x i16> %6864, %6860
  %6866 = bitcast i16* %6833 to <8 x i16>*
  store <8 x i16> %6865, <8 x i16>* %6866, align 2, !alias.scope !198, !noalias !201
  %6867 = add i64 %6831, 8
  %6868 = icmp eq i64 %6867, %6825
  br i1 %6868, label %6869, label %6830, !llvm.loop !203

6869:                                             ; preds = %6830
  %6870 = icmp eq i64 %6812, %6825
  br i1 %6870, label %6915, label %6871

6871:                                             ; preds = %6869, %6814, %6809
  %6872 = phi i8* [ %6796, %6814 ], [ %6796, %6809 ], [ %6827, %6869 ]
  %6873 = phi i16* [ %6795, %6814 ], [ %6795, %6809 ], [ %6828, %6869 ]
  %6874 = phi i32 [ 0, %6814 ], [ 0, %6809 ], [ %6829, %6869 ]
  br label %6875

6875:                                             ; preds = %6871, %6875
  %6876 = phi i8* [ %6911, %6875 ], [ %6872, %6871 ]
  %6877 = phi i16* [ %6912, %6875 ], [ %6873, %6871 ]
  %6878 = phi i32 [ %6913, %6875 ], [ %6874, %6871 ]
  %6879 = getelementptr inbounds i8, i8* %6876, i64 3
  %6880 = load i8, i8* %6879, align 1
  %6881 = uitofp i8 %6880 to float
  %6882 = fdiv float %6881, 2.550000e+02
  %6883 = load i8, i8* %6876, align 1
  %6884 = uitofp i8 %6883 to float
  %6885 = fmul float %6882, %6884
  %6886 = fptoui float %6885 to i8
  %6887 = getelementptr inbounds i8, i8* %6876, i64 1
  %6888 = load i8, i8* %6887, align 1
  %6889 = uitofp i8 %6888 to float
  %6890 = fmul float %6882, %6889
  %6891 = fptoui float %6890 to i8
  %6892 = getelementptr inbounds i8, i8* %6876, i64 2
  %6893 = load i8, i8* %6892, align 1
  %6894 = uitofp i8 %6893 to float
  %6895 = fmul float %6882, %6894
  %6896 = fptoui float %6895 to i8
  %6897 = and i8 %6886, -8
  %6898 = zext i8 %6897 to i16
  %6899 = shl nuw i16 %6898, 8
  %6900 = and i8 %6891, -8
  %6901 = zext i8 %6900 to i16
  %6902 = shl nuw nsw i16 %6901, 3
  %6903 = lshr i8 %6896, 2
  %6904 = and i8 %6903, 62
  %6905 = zext i8 %6904 to i16
  %6906 = lshr i8 %6880, 7
  %6907 = zext i8 %6906 to i16
  %6908 = or i16 %6899, %6907
  %6909 = or i16 %6908, %6902
  %6910 = or i16 %6909, %6905
  store i16 %6910, i16* %6877, align 2
  %6911 = getelementptr inbounds i8, i8* %6876, i64 4
  %6912 = getelementptr inbounds i16, i16* %6877, i64 1
  %6913 = add nuw i32 %6878, 1
  %6914 = icmp eq i32 %6913, %6807
  br i1 %6914, label %6915, label %6875, !llvm.loop !204

6915:                                             ; preds = %6875, %6869
  %6916 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6731, align 8
  br label %6917

6917:                                             ; preds = %6915, %6790
  %6918 = phi %"class.blink::IntRect"* [ %6916, %6915 ], [ %6792, %6790 ]
  %6919 = getelementptr inbounds i8, i8* %6796, i64 %6724
  %6920 = getelementptr inbounds i16, i16* %6795, i64 %6728
  %6921 = add nuw nsw i32 %6794, 1
  %6922 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6918, i64 0, i32 1, i32 1
  %6923 = load i32, i32* %6922, align 4
  %6924 = icmp slt i32 %6921, %6923
  %6925 = add i64 %6791, 1
  br i1 %6924, label %6790, label %6774

6926:                                             ; preds = %6776, %6756
  %6927 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6927, align 4
  br label %11653

6928:                                             ; preds = %6535
  %6929 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6930 = load i32, i32* %6929, align 8
  %6931 = sext i32 %6930 to i64
  %6932 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6933 = load i32, i32* %6932, align 8
  %6934 = sdiv i32 %6933, 2
  %6935 = sext i32 %6934 to i64
  %6936 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6937 = load i8*, i8** %6936, align 8
  %6938 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6939 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6938, align 8
  %6940 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6939, i64 0, i32 0, i32 1
  %6941 = load i32, i32* %6940, align 4
  %6942 = mul nsw i32 %6941, %6930
  %6943 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6944 = load i32, i32* %6943, align 4
  %6945 = add nsw i32 %6942, %6944
  %6946 = sext i32 %6945 to i64
  %6947 = getelementptr inbounds i8, i8* %6937, i64 %6946
  %6948 = icmp slt i32 %6933, 0
  %6949 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6950 = load i32, i32* %6949, align 8
  %6951 = icmp sgt i32 %6950, 1
  %6952 = and i1 %6948, %6951
  br i1 %6952, label %6953, label %6963

6953:                                             ; preds = %6928
  %6954 = add nsw i32 %6950, -1
  %6955 = sext i32 %6954 to i64
  %6956 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6957 = load i32, i32* %6956, align 4
  %6958 = sext i32 %6957 to i64
  %6959 = mul nsw i64 %6931, %6955
  %6960 = mul i64 %6959, %6958
  %6961 = sub i64 0, %6960
  %6962 = getelementptr inbounds i8, i8* %6947, i64 %6961
  br label %6965

6963:                                             ; preds = %6928
  %6964 = icmp sgt i32 %6950, 0
  br i1 %6964, label %6965, label %7139

6965:                                             ; preds = %6963, %6953
  %6966 = phi i8* [ %6962, %6953 ], [ %6947, %6963 ]
  %6967 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6968 = bitcast i8** %6967 to i16**
  %6969 = load i16*, i16** %6968, align 8
  %6970 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6971

6971:                                             ; preds = %6983, %6965
  %6972 = phi i32 [ %6950, %6965 ], [ %6984, %6983 ]
  %6973 = phi %"class.blink::IntRect"* [ %6939, %6965 ], [ %6985, %6983 ]
  %6974 = phi %"class.blink::IntRect"* [ %6939, %6965 ], [ %6986, %6983 ]
  %6975 = phi i32 [ 0, %6965 ], [ %6995, %6983 ]
  %6976 = phi i16* [ %6969, %6965 ], [ %6988, %6983 ]
  %6977 = phi i8* [ %6966, %6965 ], [ %6994, %6983 ]
  %6978 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6974, i64 0, i32 1, i32 1
  %6979 = load i32, i32* %6978, align 4
  %6980 = icmp sgt i32 %6979, 0
  br i1 %6980, label %6997, label %6983

6981:                                             ; preds = %7130
  %6982 = load i32, i32* %6949, align 8
  br label %6983

6983:                                             ; preds = %6981, %6971
  %6984 = phi i32 [ %6972, %6971 ], [ %6982, %6981 ]
  %6985 = phi %"class.blink::IntRect"* [ %6973, %6971 ], [ %7131, %6981 ]
  %6986 = phi %"class.blink::IntRect"* [ %6974, %6971 ], [ %7131, %6981 ]
  %6987 = phi i8* [ %6977, %6971 ], [ %7132, %6981 ]
  %6988 = phi i16* [ %6976, %6971 ], [ %7133, %6981 ]
  %6989 = phi i32 [ %6979, %6971 ], [ %7136, %6981 ]
  %6990 = load i32, i32* %6970, align 4
  %6991 = sub nsw i32 %6990, %6989
  %6992 = sext i32 %6991 to i64
  %6993 = mul nsw i64 %6992, %6931
  %6994 = getelementptr inbounds i8, i8* %6987, i64 %6993
  %6995 = add nuw nsw i32 %6975, 1
  %6996 = icmp slt i32 %6995, %6984
  br i1 %6996, label %6971, label %7139

6997:                                             ; preds = %6971, %7130
  %6998 = phi i64 [ %7138, %7130 ], [ 0, %6971 ]
  %6999 = phi %"class.blink::IntRect"* [ %7131, %7130 ], [ %6973, %6971 ]
  %7000 = phi %"class.blink::IntRect"* [ %7131, %7130 ], [ %6974, %6971 ]
  %7001 = phi i32 [ %7134, %7130 ], [ 0, %6971 ]
  %7002 = phi i16* [ %7133, %7130 ], [ %6976, %6971 ]
  %7003 = phi i8* [ %7132, %7130 ], [ %6977, %6971 ]
  %7004 = mul i64 %6998, %6935
  %7005 = getelementptr i16, i16* %6976, i64 %7004
  %7006 = bitcast i16* %7005 to i8*
  %7007 = add i64 %7004, 1
  %7008 = getelementptr i16, i16* %6976, i64 %7007
  %7009 = mul i64 %6998, %6931
  %7010 = getelementptr i8, i8* %6977, i64 %7009
  %7011 = add i64 %7009, 4
  %7012 = getelementptr i8, i8* %6977, i64 %7011
  %7013 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7000, i64 0, i32 1, i32 0
  %7014 = load i32, i32* %7013, align 4
  %7015 = icmp eq i32 %7014, 0
  br i1 %7015, label %7130, label %7016

7016:                                             ; preds = %6997
  %7017 = add i32 %7014, -1
  %7018 = zext i32 %7017 to i64
  %7019 = add nuw nsw i64 %7018, 1
  %7020 = icmp ult i64 %7019, 8
  br i1 %7020, label %7080, label %7021

7021:                                             ; preds = %7016
  %7022 = add i32 %7014, -1
  %7023 = zext i32 %7022 to i64
  %7024 = getelementptr i16, i16* %7008, i64 %7023
  %7025 = bitcast i16* %7024 to i8*
  %7026 = shl nuw nsw i64 %7023, 2
  %7027 = getelementptr i8, i8* %7012, i64 %7026
  %7028 = icmp ugt i8* %7027, %7006
  %7029 = icmp ult i8* %7010, %7025
  %7030 = and i1 %7028, %7029
  br i1 %7030, label %7080, label %7031

7031:                                             ; preds = %7021
  %7032 = and i64 %7019, 8589934584
  %7033 = shl nuw nsw i64 %7032, 2
  %7034 = getelementptr i8, i8* %7003, i64 %7033
  %7035 = getelementptr i16, i16* %7002, i64 %7032
  %7036 = trunc i64 %7032 to i32
  br label %7037

7037:                                             ; preds = %7037, %7031
  %7038 = phi i64 [ 0, %7031 ], [ %7076, %7037 ]
  %7039 = shl i64 %7038, 2
  %7040 = getelementptr i16, i16* %7002, i64 %7038
  %7041 = getelementptr inbounds i8, i8* %7003, i64 %7039
  %7042 = bitcast i8* %7041 to <32 x i8>*
  %7043 = load <32 x i8>, <32 x i8>* %7042, align 1
  %7044 = shufflevector <32 x i8> %7043, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %7045 = shufflevector <32 x i8> %7043, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %7046 = shufflevector <32 x i8> %7043, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %7047 = shufflevector <32 x i8> %7043, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %7048 = icmp eq <8 x i8> %7047, zeroinitializer
  %7049 = uitofp <8 x i8> %7047 to <8 x float>
  %7050 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %7049
  %7051 = select <8 x i1> %7048, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %7050
  %7052 = uitofp <8 x i8> %7044 to <8 x float>
  %7053 = fmul <8 x float> %7051, %7052
  %7054 = fptoui <8 x float> %7053 to <8 x i8>
  %7055 = uitofp <8 x i8> %7045 to <8 x float>
  %7056 = fmul <8 x float> %7051, %7055
  %7057 = fptoui <8 x float> %7056 to <8 x i8>
  %7058 = uitofp <8 x i8> %7046 to <8 x float>
  %7059 = fmul <8 x float> %7051, %7058
  %7060 = fptoui <8 x float> %7059 to <8 x i8>
  %7061 = and <8 x i8> %7054, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %7062 = zext <8 x i8> %7061 to <8 x i16>
  %7063 = shl nuw <8 x i16> %7062, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %7064 = and <8 x i8> %7057, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %7065 = zext <8 x i8> %7064 to <8 x i16>
  %7066 = shl nuw nsw <8 x i16> %7065, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %7067 = lshr <8 x i8> %7060, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %7068 = and <8 x i8> %7067, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %7069 = zext <8 x i8> %7068 to <8 x i16>
  %7070 = lshr <8 x i8> %7047, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %7071 = zext <8 x i8> %7070 to <8 x i16>
  %7072 = or <8 x i16> %7063, %7071
  %7073 = or <8 x i16> %7072, %7066
  %7074 = or <8 x i16> %7073, %7069
  %7075 = bitcast i16* %7040 to <8 x i16>*
  store <8 x i16> %7074, <8 x i16>* %7075, align 2, !alias.scope !205, !noalias !208
  %7076 = add i64 %7038, 8
  %7077 = icmp eq i64 %7076, %7032
  br i1 %7077, label %7078, label %7037, !llvm.loop !210

7078:                                             ; preds = %7037
  %7079 = icmp eq i64 %7019, %7032
  br i1 %7079, label %7128, label %7080

7080:                                             ; preds = %7078, %7021, %7016
  %7081 = phi i8* [ %7003, %7021 ], [ %7003, %7016 ], [ %7034, %7078 ]
  %7082 = phi i16* [ %7002, %7021 ], [ %7002, %7016 ], [ %7035, %7078 ]
  %7083 = phi i32 [ 0, %7021 ], [ 0, %7016 ], [ %7036, %7078 ]
  br label %7084

7084:                                             ; preds = %7080, %7094
  %7085 = phi i8* [ %7124, %7094 ], [ %7081, %7080 ]
  %7086 = phi i16* [ %7125, %7094 ], [ %7082, %7080 ]
  %7087 = phi i32 [ %7126, %7094 ], [ %7083, %7080 ]
  %7088 = getelementptr inbounds i8, i8* %7085, i64 3
  %7089 = load i8, i8* %7088, align 1
  %7090 = icmp eq i8 %7089, 0
  br i1 %7090, label %7094, label %7091

7091:                                             ; preds = %7084
  %7092 = uitofp i8 %7089 to float
  %7093 = fdiv float 2.550000e+02, %7092
  br label %7094

7094:                                             ; preds = %7091, %7084
  %7095 = phi float [ %7093, %7091 ], [ 1.000000e+00, %7084 ]
  %7096 = load i8, i8* %7085, align 1
  %7097 = uitofp i8 %7096 to float
  %7098 = fmul float %7095, %7097
  %7099 = fptoui float %7098 to i8
  %7100 = getelementptr inbounds i8, i8* %7085, i64 1
  %7101 = load i8, i8* %7100, align 1
  %7102 = uitofp i8 %7101 to float
  %7103 = fmul float %7095, %7102
  %7104 = fptoui float %7103 to i8
  %7105 = getelementptr inbounds i8, i8* %7085, i64 2
  %7106 = load i8, i8* %7105, align 1
  %7107 = uitofp i8 %7106 to float
  %7108 = fmul float %7095, %7107
  %7109 = fptoui float %7108 to i8
  %7110 = and i8 %7099, -8
  %7111 = zext i8 %7110 to i16
  %7112 = shl nuw i16 %7111, 8
  %7113 = and i8 %7104, -8
  %7114 = zext i8 %7113 to i16
  %7115 = shl nuw nsw i16 %7114, 3
  %7116 = lshr i8 %7109, 2
  %7117 = and i8 %7116, 62
  %7118 = zext i8 %7117 to i16
  %7119 = lshr i8 %7089, 7
  %7120 = zext i8 %7119 to i16
  %7121 = or i16 %7112, %7120
  %7122 = or i16 %7121, %7115
  %7123 = or i16 %7122, %7118
  store i16 %7123, i16* %7086, align 2
  %7124 = getelementptr inbounds i8, i8* %7085, i64 4
  %7125 = getelementptr inbounds i16, i16* %7086, i64 1
  %7126 = add nuw i32 %7087, 1
  %7127 = icmp eq i32 %7126, %7014
  br i1 %7127, label %7128, label %7084, !llvm.loop !211

7128:                                             ; preds = %7094, %7078
  %7129 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6938, align 8
  br label %7130

7130:                                             ; preds = %7128, %6997
  %7131 = phi %"class.blink::IntRect"* [ %7129, %7128 ], [ %6999, %6997 ]
  %7132 = getelementptr inbounds i8, i8* %7003, i64 %6931
  %7133 = getelementptr inbounds i16, i16* %7002, i64 %6935
  %7134 = add nuw nsw i32 %7001, 1
  %7135 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7131, i64 0, i32 1, i32 1
  %7136 = load i32, i32* %7135, align 4
  %7137 = icmp slt i32 %7134, %7136
  %7138 = add i64 %6998, 1
  br i1 %7137, label %6997, label %6981

7139:                                             ; preds = %6983, %6963
  %7140 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7140, align 4
  br label %11653

7141:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %7142
    i32 1, label %7325
    i32 2, label %7530
  ]

7142:                                             ; preds = %7141
  %7143 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7144 = load i32, i32* %7143, align 8
  %7145 = sext i32 %7144 to i64
  %7146 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7147 = load i32, i32* %7146, align 8
  %7148 = sdiv i32 %7147, 2
  %7149 = sext i32 %7148 to i64
  %7150 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7151 = load i8*, i8** %7150, align 8
  %7152 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7153 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7152, align 8
  %7154 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7153, i64 0, i32 0, i32 1
  %7155 = load i32, i32* %7154, align 4
  %7156 = mul nsw i32 %7155, %7144
  %7157 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7158 = load i32, i32* %7157, align 4
  %7159 = add nsw i32 %7156, %7158
  %7160 = sext i32 %7159 to i64
  %7161 = getelementptr inbounds i8, i8* %7151, i64 %7160
  %7162 = icmp slt i32 %7147, 0
  %7163 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7164 = load i32, i32* %7163, align 8
  %7165 = icmp sgt i32 %7164, 1
  %7166 = and i1 %7162, %7165
  br i1 %7166, label %7167, label %7177

7167:                                             ; preds = %7142
  %7168 = add nsw i32 %7164, -1
  %7169 = sext i32 %7168 to i64
  %7170 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7171 = load i32, i32* %7170, align 4
  %7172 = sext i32 %7171 to i64
  %7173 = mul nsw i64 %7145, %7169
  %7174 = mul i64 %7173, %7172
  %7175 = sub i64 0, %7174
  %7176 = getelementptr inbounds i8, i8* %7161, i64 %7175
  br label %7179

7177:                                             ; preds = %7142
  %7178 = icmp sgt i32 %7164, 0
  br i1 %7178, label %7179, label %7323

7179:                                             ; preds = %7177, %7167
  %7180 = phi i8* [ %7176, %7167 ], [ %7161, %7177 ]
  %7181 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7182 = bitcast i8** %7181 to i16**
  %7183 = load i16*, i16** %7182, align 8
  %7184 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7185

7185:                                             ; preds = %7197, %7179
  %7186 = phi i32 [ %7164, %7179 ], [ %7198, %7197 ]
  %7187 = phi %"class.blink::IntRect"* [ %7153, %7179 ], [ %7199, %7197 ]
  %7188 = phi %"class.blink::IntRect"* [ %7153, %7179 ], [ %7200, %7197 ]
  %7189 = phi i32 [ 0, %7179 ], [ %7209, %7197 ]
  %7190 = phi i16* [ %7183, %7179 ], [ %7202, %7197 ]
  %7191 = phi i8* [ %7180, %7179 ], [ %7208, %7197 ]
  %7192 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7188, i64 0, i32 1, i32 1
  %7193 = load i32, i32* %7192, align 4
  %7194 = icmp sgt i32 %7193, 0
  br i1 %7194, label %7211, label %7197

7195:                                             ; preds = %7314
  %7196 = load i32, i32* %7163, align 8
  br label %7197

7197:                                             ; preds = %7195, %7185
  %7198 = phi i32 [ %7186, %7185 ], [ %7196, %7195 ]
  %7199 = phi %"class.blink::IntRect"* [ %7187, %7185 ], [ %7315, %7195 ]
  %7200 = phi %"class.blink::IntRect"* [ %7188, %7185 ], [ %7315, %7195 ]
  %7201 = phi i8* [ %7191, %7185 ], [ %7316, %7195 ]
  %7202 = phi i16* [ %7190, %7185 ], [ %7317, %7195 ]
  %7203 = phi i32 [ %7193, %7185 ], [ %7320, %7195 ]
  %7204 = load i32, i32* %7184, align 4
  %7205 = sub nsw i32 %7204, %7203
  %7206 = sext i32 %7205 to i64
  %7207 = mul nsw i64 %7206, %7145
  %7208 = getelementptr inbounds i8, i8* %7201, i64 %7207
  %7209 = add nuw nsw i32 %7189, 1
  %7210 = icmp slt i32 %7209, %7198
  br i1 %7210, label %7185, label %7323

7211:                                             ; preds = %7185, %7314
  %7212 = phi i64 [ %7322, %7314 ], [ 0, %7185 ]
  %7213 = phi %"class.blink::IntRect"* [ %7315, %7314 ], [ %7187, %7185 ]
  %7214 = phi %"class.blink::IntRect"* [ %7315, %7314 ], [ %7188, %7185 ]
  %7215 = phi i32 [ %7318, %7314 ], [ 0, %7185 ]
  %7216 = phi i16* [ %7317, %7314 ], [ %7190, %7185 ]
  %7217 = phi i8* [ %7316, %7314 ], [ %7191, %7185 ]
  %7218 = mul i64 %7212, %7149
  %7219 = getelementptr i16, i16* %7190, i64 %7218
  %7220 = bitcast i16* %7219 to i8*
  %7221 = add i64 %7218, 1
  %7222 = getelementptr i16, i16* %7190, i64 %7221
  %7223 = mul i64 %7212, %7145
  %7224 = getelementptr i8, i8* %7191, i64 %7223
  %7225 = add i64 %7223, 4
  %7226 = getelementptr i8, i8* %7191, i64 %7225
  %7227 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7214, i64 0, i32 1, i32 0
  %7228 = load i32, i32* %7227, align 4
  %7229 = icmp eq i32 %7228, 0
  br i1 %7229, label %7314, label %7230

7230:                                             ; preds = %7211
  %7231 = add i32 %7228, -1
  %7232 = zext i32 %7231 to i64
  %7233 = add nuw nsw i64 %7232, 1
  %7234 = icmp ult i64 %7233, 8
  br i1 %7234, label %7280, label %7235

7235:                                             ; preds = %7230
  %7236 = add i32 %7228, -1
  %7237 = zext i32 %7236 to i64
  %7238 = getelementptr i16, i16* %7222, i64 %7237
  %7239 = bitcast i16* %7238 to i8*
  %7240 = shl nuw nsw i64 %7237, 2
  %7241 = getelementptr i8, i8* %7226, i64 %7240
  %7242 = icmp ugt i8* %7241, %7220
  %7243 = icmp ult i8* %7224, %7239
  %7244 = and i1 %7242, %7243
  br i1 %7244, label %7280, label %7245

7245:                                             ; preds = %7235
  %7246 = and i64 %7233, 8589934584
  %7247 = trunc i64 %7246 to i32
  %7248 = shl nuw nsw i64 %7246, 2
  %7249 = getelementptr i8, i8* %7217, i64 %7248
  %7250 = getelementptr i16, i16* %7216, i64 %7246
  br label %7251

7251:                                             ; preds = %7251, %7245
  %7252 = phi i64 [ 0, %7245 ], [ %7276, %7251 ]
  %7253 = shl i64 %7252, 2
  %7254 = getelementptr i8, i8* %7217, i64 %7253
  %7255 = getelementptr i16, i16* %7216, i64 %7252
  %7256 = bitcast i8* %7254 to <32 x i8>*
  %7257 = load <32 x i8>, <32 x i8>* %7256, align 1
  %7258 = shufflevector <32 x i8> %7257, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %7259 = shufflevector <32 x i8> %7257, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %7260 = shufflevector <32 x i8> %7257, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %7261 = shufflevector <32 x i8> %7257, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %7262 = and <8 x i8> %7258, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7263 = zext <8 x i8> %7262 to <8 x i16>
  %7264 = shl nuw <8 x i16> %7263, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %7265 = and <8 x i8> %7259, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7266 = zext <8 x i8> %7265 to <8 x i16>
  %7267 = shl nuw nsw <8 x i16> %7266, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %7268 = or <8 x i16> %7267, %7264
  %7269 = and <8 x i8> %7260, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7270 = zext <8 x i8> %7269 to <8 x i16>
  %7271 = or <8 x i16> %7268, %7270
  %7272 = lshr <8 x i8> %7261, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %7273 = zext <8 x i8> %7272 to <8 x i16>
  %7274 = or <8 x i16> %7271, %7273
  %7275 = bitcast i16* %7255 to <8 x i16>*
  store <8 x i16> %7274, <8 x i16>* %7275, align 2, !alias.scope !212, !noalias !215
  %7276 = add i64 %7252, 8
  %7277 = icmp eq i64 %7276, %7246
  br i1 %7277, label %7278, label %7251, !llvm.loop !217

7278:                                             ; preds = %7251
  %7279 = icmp eq i64 %7233, %7246
  br i1 %7279, label %7312, label %7280

7280:                                             ; preds = %7278, %7235, %7230
  %7281 = phi i32 [ 0, %7235 ], [ 0, %7230 ], [ %7247, %7278 ]
  %7282 = phi i8* [ %7217, %7235 ], [ %7217, %7230 ], [ %7249, %7278 ]
  %7283 = phi i16* [ %7216, %7235 ], [ %7216, %7230 ], [ %7250, %7278 ]
  br label %7284

7284:                                             ; preds = %7280, %7284
  %7285 = phi i32 [ %7310, %7284 ], [ %7281, %7280 ]
  %7286 = phi i8* [ %7308, %7284 ], [ %7282, %7280 ]
  %7287 = phi i16* [ %7309, %7284 ], [ %7283, %7280 ]
  %7288 = load i8, i8* %7286, align 1
  %7289 = and i8 %7288, -16
  %7290 = zext i8 %7289 to i16
  %7291 = shl nuw i16 %7290, 8
  %7292 = getelementptr inbounds i8, i8* %7286, i64 1
  %7293 = load i8, i8* %7292, align 1
  %7294 = and i8 %7293, -16
  %7295 = zext i8 %7294 to i16
  %7296 = shl nuw nsw i16 %7295, 4
  %7297 = or i16 %7296, %7291
  %7298 = getelementptr inbounds i8, i8* %7286, i64 2
  %7299 = load i8, i8* %7298, align 1
  %7300 = and i8 %7299, -16
  %7301 = zext i8 %7300 to i16
  %7302 = or i16 %7297, %7301
  %7303 = getelementptr inbounds i8, i8* %7286, i64 3
  %7304 = load i8, i8* %7303, align 1
  %7305 = lshr i8 %7304, 4
  %7306 = zext i8 %7305 to i16
  %7307 = or i16 %7302, %7306
  store i16 %7307, i16* %7287, align 2
  %7308 = getelementptr inbounds i8, i8* %7286, i64 4
  %7309 = getelementptr inbounds i16, i16* %7287, i64 1
  %7310 = add nuw i32 %7285, 1
  %7311 = icmp eq i32 %7310, %7228
  br i1 %7311, label %7312, label %7284, !llvm.loop !218

7312:                                             ; preds = %7284, %7278
  %7313 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7152, align 8
  br label %7314

7314:                                             ; preds = %7312, %7211
  %7315 = phi %"class.blink::IntRect"* [ %7313, %7312 ], [ %7213, %7211 ]
  %7316 = getelementptr inbounds i8, i8* %7217, i64 %7145
  %7317 = getelementptr inbounds i16, i16* %7216, i64 %7149
  %7318 = add nuw nsw i32 %7215, 1
  %7319 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7315, i64 0, i32 1, i32 1
  %7320 = load i32, i32* %7319, align 4
  %7321 = icmp slt i32 %7318, %7320
  %7322 = add i64 %7212, 1
  br i1 %7321, label %7211, label %7195

7323:                                             ; preds = %7197, %7177
  %7324 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7324, align 4
  br label %11653

7325:                                             ; preds = %7141
  %7326 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7327 = load i32, i32* %7326, align 8
  %7328 = sext i32 %7327 to i64
  %7329 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7330 = load i32, i32* %7329, align 8
  %7331 = sdiv i32 %7330, 2
  %7332 = sext i32 %7331 to i64
  %7333 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7334 = load i8*, i8** %7333, align 8
  %7335 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7336 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7335, align 8
  %7337 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7336, i64 0, i32 0, i32 1
  %7338 = load i32, i32* %7337, align 4
  %7339 = mul nsw i32 %7338, %7327
  %7340 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7341 = load i32, i32* %7340, align 4
  %7342 = add nsw i32 %7339, %7341
  %7343 = sext i32 %7342 to i64
  %7344 = getelementptr inbounds i8, i8* %7334, i64 %7343
  %7345 = icmp slt i32 %7330, 0
  %7346 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7347 = load i32, i32* %7346, align 8
  %7348 = icmp sgt i32 %7347, 1
  %7349 = and i1 %7345, %7348
  br i1 %7349, label %7350, label %7360

7350:                                             ; preds = %7325
  %7351 = add nsw i32 %7347, -1
  %7352 = sext i32 %7351 to i64
  %7353 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7354 = load i32, i32* %7353, align 4
  %7355 = sext i32 %7354 to i64
  %7356 = mul nsw i64 %7328, %7352
  %7357 = mul i64 %7356, %7355
  %7358 = sub i64 0, %7357
  %7359 = getelementptr inbounds i8, i8* %7344, i64 %7358
  br label %7362

7360:                                             ; preds = %7325
  %7361 = icmp sgt i32 %7347, 0
  br i1 %7361, label %7362, label %7528

7362:                                             ; preds = %7360, %7350
  %7363 = phi i8* [ %7359, %7350 ], [ %7344, %7360 ]
  %7364 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7365 = bitcast i8** %7364 to i16**
  %7366 = load i16*, i16** %7365, align 8
  %7367 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7368

7368:                                             ; preds = %7380, %7362
  %7369 = phi i32 [ %7347, %7362 ], [ %7381, %7380 ]
  %7370 = phi %"class.blink::IntRect"* [ %7336, %7362 ], [ %7382, %7380 ]
  %7371 = phi %"class.blink::IntRect"* [ %7336, %7362 ], [ %7383, %7380 ]
  %7372 = phi i32 [ 0, %7362 ], [ %7392, %7380 ]
  %7373 = phi i16* [ %7366, %7362 ], [ %7385, %7380 ]
  %7374 = phi i8* [ %7363, %7362 ], [ %7391, %7380 ]
  %7375 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7371, i64 0, i32 1, i32 1
  %7376 = load i32, i32* %7375, align 4
  %7377 = icmp sgt i32 %7376, 0
  br i1 %7377, label %7394, label %7380

7378:                                             ; preds = %7519
  %7379 = load i32, i32* %7346, align 8
  br label %7380

7380:                                             ; preds = %7378, %7368
  %7381 = phi i32 [ %7369, %7368 ], [ %7379, %7378 ]
  %7382 = phi %"class.blink::IntRect"* [ %7370, %7368 ], [ %7520, %7378 ]
  %7383 = phi %"class.blink::IntRect"* [ %7371, %7368 ], [ %7520, %7378 ]
  %7384 = phi i8* [ %7374, %7368 ], [ %7521, %7378 ]
  %7385 = phi i16* [ %7373, %7368 ], [ %7522, %7378 ]
  %7386 = phi i32 [ %7376, %7368 ], [ %7525, %7378 ]
  %7387 = load i32, i32* %7367, align 4
  %7388 = sub nsw i32 %7387, %7386
  %7389 = sext i32 %7388 to i64
  %7390 = mul nsw i64 %7389, %7328
  %7391 = getelementptr inbounds i8, i8* %7384, i64 %7390
  %7392 = add nuw nsw i32 %7372, 1
  %7393 = icmp slt i32 %7392, %7381
  br i1 %7393, label %7368, label %7528

7394:                                             ; preds = %7368, %7519
  %7395 = phi i64 [ %7527, %7519 ], [ 0, %7368 ]
  %7396 = phi %"class.blink::IntRect"* [ %7520, %7519 ], [ %7370, %7368 ]
  %7397 = phi %"class.blink::IntRect"* [ %7520, %7519 ], [ %7371, %7368 ]
  %7398 = phi i32 [ %7523, %7519 ], [ 0, %7368 ]
  %7399 = phi i16* [ %7522, %7519 ], [ %7373, %7368 ]
  %7400 = phi i8* [ %7521, %7519 ], [ %7374, %7368 ]
  %7401 = mul i64 %7395, %7332
  %7402 = getelementptr i16, i16* %7373, i64 %7401
  %7403 = bitcast i16* %7402 to i8*
  %7404 = add i64 %7401, 1
  %7405 = getelementptr i16, i16* %7373, i64 %7404
  %7406 = mul i64 %7395, %7328
  %7407 = getelementptr i8, i8* %7374, i64 %7406
  %7408 = add i64 %7406, 4
  %7409 = getelementptr i8, i8* %7374, i64 %7408
  %7410 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7397, i64 0, i32 1, i32 0
  %7411 = load i32, i32* %7410, align 4
  %7412 = icmp eq i32 %7411, 0
  br i1 %7412, label %7519, label %7413

7413:                                             ; preds = %7394
  %7414 = add i32 %7411, -1
  %7415 = zext i32 %7414 to i64
  %7416 = add nuw nsw i64 %7415, 1
  %7417 = icmp ult i64 %7416, 8
  br i1 %7417, label %7474, label %7418

7418:                                             ; preds = %7413
  %7419 = add i32 %7411, -1
  %7420 = zext i32 %7419 to i64
  %7421 = getelementptr i16, i16* %7405, i64 %7420
  %7422 = bitcast i16* %7421 to i8*
  %7423 = shl nuw nsw i64 %7420, 2
  %7424 = getelementptr i8, i8* %7409, i64 %7423
  %7425 = icmp ugt i8* %7424, %7403
  %7426 = icmp ult i8* %7407, %7422
  %7427 = and i1 %7425, %7426
  br i1 %7427, label %7474, label %7428

7428:                                             ; preds = %7418
  %7429 = and i64 %7416, 8589934584
  %7430 = shl nuw nsw i64 %7429, 2
  %7431 = getelementptr i8, i8* %7400, i64 %7430
  %7432 = getelementptr i16, i16* %7399, i64 %7429
  %7433 = trunc i64 %7429 to i32
  br label %7434

7434:                                             ; preds = %7434, %7428
  %7435 = phi i64 [ 0, %7428 ], [ %7470, %7434 ]
  %7436 = shl i64 %7435, 2
  %7437 = getelementptr i16, i16* %7399, i64 %7435
  %7438 = getelementptr inbounds i8, i8* %7400, i64 %7436
  %7439 = bitcast i8* %7438 to <32 x i8>*
  %7440 = load <32 x i8>, <32 x i8>* %7439, align 1
  %7441 = shufflevector <32 x i8> %7440, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %7442 = shufflevector <32 x i8> %7440, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %7443 = shufflevector <32 x i8> %7440, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %7444 = shufflevector <32 x i8> %7440, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %7445 = uitofp <8 x i8> %7444 to <8 x float>
  %7446 = fdiv <8 x float> %7445, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %7447 = uitofp <8 x i8> %7441 to <8 x float>
  %7448 = fmul <8 x float> %7446, %7447
  %7449 = fptoui <8 x float> %7448 to <8 x i8>
  %7450 = uitofp <8 x i8> %7442 to <8 x float>
  %7451 = fmul <8 x float> %7446, %7450
  %7452 = fptoui <8 x float> %7451 to <8 x i8>
  %7453 = uitofp <8 x i8> %7443 to <8 x float>
  %7454 = fmul <8 x float> %7446, %7453
  %7455 = fptoui <8 x float> %7454 to <8 x i8>
  %7456 = and <8 x i8> %7449, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7457 = zext <8 x i8> %7456 to <8 x i16>
  %7458 = shl nuw <8 x i16> %7457, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %7459 = and <8 x i8> %7452, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7460 = zext <8 x i8> %7459 to <8 x i16>
  %7461 = shl nuw nsw <8 x i16> %7460, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %7462 = and <8 x i8> %7455, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7463 = zext <8 x i8> %7462 to <8 x i16>
  %7464 = lshr <8 x i8> %7444, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %7465 = zext <8 x i8> %7464 to <8 x i16>
  %7466 = or <8 x i16> %7458, %7465
  %7467 = or <8 x i16> %7466, %7461
  %7468 = or <8 x i16> %7467, %7463
  %7469 = bitcast i16* %7437 to <8 x i16>*
  store <8 x i16> %7468, <8 x i16>* %7469, align 2, !alias.scope !219, !noalias !222
  %7470 = add i64 %7435, 8
  %7471 = icmp eq i64 %7470, %7429
  br i1 %7471, label %7472, label %7434, !llvm.loop !224

7472:                                             ; preds = %7434
  %7473 = icmp eq i64 %7416, %7429
  br i1 %7473, label %7517, label %7474

7474:                                             ; preds = %7472, %7418, %7413
  %7475 = phi i8* [ %7400, %7418 ], [ %7400, %7413 ], [ %7431, %7472 ]
  %7476 = phi i16* [ %7399, %7418 ], [ %7399, %7413 ], [ %7432, %7472 ]
  %7477 = phi i32 [ 0, %7418 ], [ 0, %7413 ], [ %7433, %7472 ]
  br label %7478

7478:                                             ; preds = %7474, %7478
  %7479 = phi i8* [ %7513, %7478 ], [ %7475, %7474 ]
  %7480 = phi i16* [ %7514, %7478 ], [ %7476, %7474 ]
  %7481 = phi i32 [ %7515, %7478 ], [ %7477, %7474 ]
  %7482 = getelementptr inbounds i8, i8* %7479, i64 3
  %7483 = load i8, i8* %7482, align 1
  %7484 = uitofp i8 %7483 to float
  %7485 = fdiv float %7484, 2.550000e+02
  %7486 = load i8, i8* %7479, align 1
  %7487 = uitofp i8 %7486 to float
  %7488 = fmul float %7485, %7487
  %7489 = fptoui float %7488 to i8
  %7490 = getelementptr inbounds i8, i8* %7479, i64 1
  %7491 = load i8, i8* %7490, align 1
  %7492 = uitofp i8 %7491 to float
  %7493 = fmul float %7485, %7492
  %7494 = fptoui float %7493 to i8
  %7495 = getelementptr inbounds i8, i8* %7479, i64 2
  %7496 = load i8, i8* %7495, align 1
  %7497 = uitofp i8 %7496 to float
  %7498 = fmul float %7485, %7497
  %7499 = fptoui float %7498 to i8
  %7500 = and i8 %7489, -16
  %7501 = zext i8 %7500 to i16
  %7502 = shl nuw i16 %7501, 8
  %7503 = and i8 %7494, -16
  %7504 = zext i8 %7503 to i16
  %7505 = shl nuw nsw i16 %7504, 4
  %7506 = and i8 %7499, -16
  %7507 = zext i8 %7506 to i16
  %7508 = lshr i8 %7483, 4
  %7509 = zext i8 %7508 to i16
  %7510 = or i16 %7502, %7509
  %7511 = or i16 %7510, %7505
  %7512 = or i16 %7511, %7507
  store i16 %7512, i16* %7480, align 2
  %7513 = getelementptr inbounds i8, i8* %7479, i64 4
  %7514 = getelementptr inbounds i16, i16* %7480, i64 1
  %7515 = add nuw i32 %7481, 1
  %7516 = icmp eq i32 %7515, %7411
  br i1 %7516, label %7517, label %7478, !llvm.loop !225

7517:                                             ; preds = %7478, %7472
  %7518 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7335, align 8
  br label %7519

7519:                                             ; preds = %7517, %7394
  %7520 = phi %"class.blink::IntRect"* [ %7518, %7517 ], [ %7396, %7394 ]
  %7521 = getelementptr inbounds i8, i8* %7400, i64 %7328
  %7522 = getelementptr inbounds i16, i16* %7399, i64 %7332
  %7523 = add nuw nsw i32 %7398, 1
  %7524 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7520, i64 0, i32 1, i32 1
  %7525 = load i32, i32* %7524, align 4
  %7526 = icmp slt i32 %7523, %7525
  %7527 = add i64 %7395, 1
  br i1 %7526, label %7394, label %7378

7528:                                             ; preds = %7380, %7360
  %7529 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7529, align 4
  br label %11653

7530:                                             ; preds = %7141
  %7531 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7532 = load i32, i32* %7531, align 8
  %7533 = sext i32 %7532 to i64
  %7534 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7535 = load i32, i32* %7534, align 8
  %7536 = sdiv i32 %7535, 2
  %7537 = sext i32 %7536 to i64
  %7538 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7539 = load i8*, i8** %7538, align 8
  %7540 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7541 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7540, align 8
  %7542 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7541, i64 0, i32 0, i32 1
  %7543 = load i32, i32* %7542, align 4
  %7544 = mul nsw i32 %7543, %7532
  %7545 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7546 = load i32, i32* %7545, align 4
  %7547 = add nsw i32 %7544, %7546
  %7548 = sext i32 %7547 to i64
  %7549 = getelementptr inbounds i8, i8* %7539, i64 %7548
  %7550 = icmp slt i32 %7535, 0
  %7551 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7552 = load i32, i32* %7551, align 8
  %7553 = icmp sgt i32 %7552, 1
  %7554 = and i1 %7550, %7553
  br i1 %7554, label %7555, label %7565

7555:                                             ; preds = %7530
  %7556 = add nsw i32 %7552, -1
  %7557 = sext i32 %7556 to i64
  %7558 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7559 = load i32, i32* %7558, align 4
  %7560 = sext i32 %7559 to i64
  %7561 = mul nsw i64 %7533, %7557
  %7562 = mul i64 %7561, %7560
  %7563 = sub i64 0, %7562
  %7564 = getelementptr inbounds i8, i8* %7549, i64 %7563
  br label %7567

7565:                                             ; preds = %7530
  %7566 = icmp sgt i32 %7552, 0
  br i1 %7566, label %7567, label %7739

7567:                                             ; preds = %7565, %7555
  %7568 = phi i8* [ %7564, %7555 ], [ %7549, %7565 ]
  %7569 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7570 = bitcast i8** %7569 to i16**
  %7571 = load i16*, i16** %7570, align 8
  %7572 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7573

7573:                                             ; preds = %7585, %7567
  %7574 = phi i32 [ %7552, %7567 ], [ %7586, %7585 ]
  %7575 = phi %"class.blink::IntRect"* [ %7541, %7567 ], [ %7587, %7585 ]
  %7576 = phi %"class.blink::IntRect"* [ %7541, %7567 ], [ %7588, %7585 ]
  %7577 = phi i32 [ 0, %7567 ], [ %7597, %7585 ]
  %7578 = phi i16* [ %7571, %7567 ], [ %7590, %7585 ]
  %7579 = phi i8* [ %7568, %7567 ], [ %7596, %7585 ]
  %7580 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7576, i64 0, i32 1, i32 1
  %7581 = load i32, i32* %7580, align 4
  %7582 = icmp sgt i32 %7581, 0
  br i1 %7582, label %7599, label %7585

7583:                                             ; preds = %7730
  %7584 = load i32, i32* %7551, align 8
  br label %7585

7585:                                             ; preds = %7583, %7573
  %7586 = phi i32 [ %7574, %7573 ], [ %7584, %7583 ]
  %7587 = phi %"class.blink::IntRect"* [ %7575, %7573 ], [ %7731, %7583 ]
  %7588 = phi %"class.blink::IntRect"* [ %7576, %7573 ], [ %7731, %7583 ]
  %7589 = phi i8* [ %7579, %7573 ], [ %7732, %7583 ]
  %7590 = phi i16* [ %7578, %7573 ], [ %7733, %7583 ]
  %7591 = phi i32 [ %7581, %7573 ], [ %7736, %7583 ]
  %7592 = load i32, i32* %7572, align 4
  %7593 = sub nsw i32 %7592, %7591
  %7594 = sext i32 %7593 to i64
  %7595 = mul nsw i64 %7594, %7533
  %7596 = getelementptr inbounds i8, i8* %7589, i64 %7595
  %7597 = add nuw nsw i32 %7577, 1
  %7598 = icmp slt i32 %7597, %7586
  br i1 %7598, label %7573, label %7739

7599:                                             ; preds = %7573, %7730
  %7600 = phi i64 [ %7738, %7730 ], [ 0, %7573 ]
  %7601 = phi %"class.blink::IntRect"* [ %7731, %7730 ], [ %7575, %7573 ]
  %7602 = phi %"class.blink::IntRect"* [ %7731, %7730 ], [ %7576, %7573 ]
  %7603 = phi i32 [ %7734, %7730 ], [ 0, %7573 ]
  %7604 = phi i16* [ %7733, %7730 ], [ %7578, %7573 ]
  %7605 = phi i8* [ %7732, %7730 ], [ %7579, %7573 ]
  %7606 = mul i64 %7600, %7537
  %7607 = getelementptr i16, i16* %7578, i64 %7606
  %7608 = bitcast i16* %7607 to i8*
  %7609 = add i64 %7606, 1
  %7610 = getelementptr i16, i16* %7578, i64 %7609
  %7611 = mul i64 %7600, %7533
  %7612 = getelementptr i8, i8* %7579, i64 %7611
  %7613 = add i64 %7611, 4
  %7614 = getelementptr i8, i8* %7579, i64 %7613
  %7615 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7602, i64 0, i32 1, i32 0
  %7616 = load i32, i32* %7615, align 4
  %7617 = icmp eq i32 %7616, 0
  br i1 %7617, label %7730, label %7618

7618:                                             ; preds = %7599
  %7619 = add i32 %7616, -1
  %7620 = zext i32 %7619 to i64
  %7621 = add nuw nsw i64 %7620, 1
  %7622 = icmp ult i64 %7621, 8
  br i1 %7622, label %7681, label %7623

7623:                                             ; preds = %7618
  %7624 = add i32 %7616, -1
  %7625 = zext i32 %7624 to i64
  %7626 = getelementptr i16, i16* %7610, i64 %7625
  %7627 = bitcast i16* %7626 to i8*
  %7628 = shl nuw nsw i64 %7625, 2
  %7629 = getelementptr i8, i8* %7614, i64 %7628
  %7630 = icmp ugt i8* %7629, %7608
  %7631 = icmp ult i8* %7612, %7627
  %7632 = and i1 %7630, %7631
  br i1 %7632, label %7681, label %7633

7633:                                             ; preds = %7623
  %7634 = and i64 %7621, 8589934584
  %7635 = shl nuw nsw i64 %7634, 2
  %7636 = getelementptr i8, i8* %7605, i64 %7635
  %7637 = getelementptr i16, i16* %7604, i64 %7634
  %7638 = trunc i64 %7634 to i32
  br label %7639

7639:                                             ; preds = %7639, %7633
  %7640 = phi i64 [ 0, %7633 ], [ %7677, %7639 ]
  %7641 = shl i64 %7640, 2
  %7642 = getelementptr i16, i16* %7604, i64 %7640
  %7643 = getelementptr inbounds i8, i8* %7605, i64 %7641
  %7644 = bitcast i8* %7643 to <32 x i8>*
  %7645 = load <32 x i8>, <32 x i8>* %7644, align 1
  %7646 = shufflevector <32 x i8> %7645, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %7647 = shufflevector <32 x i8> %7645, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %7648 = shufflevector <32 x i8> %7645, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %7649 = shufflevector <32 x i8> %7645, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %7650 = icmp eq <8 x i8> %7649, zeroinitializer
  %7651 = uitofp <8 x i8> %7649 to <8 x float>
  %7652 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %7651
  %7653 = select <8 x i1> %7650, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %7652
  %7654 = uitofp <8 x i8> %7646 to <8 x float>
  %7655 = fmul <8 x float> %7653, %7654
  %7656 = fptoui <8 x float> %7655 to <8 x i8>
  %7657 = uitofp <8 x i8> %7647 to <8 x float>
  %7658 = fmul <8 x float> %7653, %7657
  %7659 = fptoui <8 x float> %7658 to <8 x i8>
  %7660 = uitofp <8 x i8> %7648 to <8 x float>
  %7661 = fmul <8 x float> %7653, %7660
  %7662 = fptoui <8 x float> %7661 to <8 x i8>
  %7663 = and <8 x i8> %7656, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7664 = zext <8 x i8> %7663 to <8 x i16>
  %7665 = shl nuw <8 x i16> %7664, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %7666 = and <8 x i8> %7659, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7667 = zext <8 x i8> %7666 to <8 x i16>
  %7668 = shl nuw nsw <8 x i16> %7667, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %7669 = and <8 x i8> %7662, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %7670 = zext <8 x i8> %7669 to <8 x i16>
  %7671 = lshr <8 x i8> %7649, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %7672 = zext <8 x i8> %7671 to <8 x i16>
  %7673 = or <8 x i16> %7665, %7672
  %7674 = or <8 x i16> %7673, %7668
  %7675 = or <8 x i16> %7674, %7670
  %7676 = bitcast i16* %7642 to <8 x i16>*
  store <8 x i16> %7675, <8 x i16>* %7676, align 2, !alias.scope !226, !noalias !229
  %7677 = add i64 %7640, 8
  %7678 = icmp eq i64 %7677, %7634
  br i1 %7678, label %7679, label %7639, !llvm.loop !231

7679:                                             ; preds = %7639
  %7680 = icmp eq i64 %7621, %7634
  br i1 %7680, label %7728, label %7681

7681:                                             ; preds = %7679, %7623, %7618
  %7682 = phi i8* [ %7605, %7623 ], [ %7605, %7618 ], [ %7636, %7679 ]
  %7683 = phi i16* [ %7604, %7623 ], [ %7604, %7618 ], [ %7637, %7679 ]
  %7684 = phi i32 [ 0, %7623 ], [ 0, %7618 ], [ %7638, %7679 ]
  br label %7685

7685:                                             ; preds = %7681, %7695
  %7686 = phi i8* [ %7724, %7695 ], [ %7682, %7681 ]
  %7687 = phi i16* [ %7725, %7695 ], [ %7683, %7681 ]
  %7688 = phi i32 [ %7726, %7695 ], [ %7684, %7681 ]
  %7689 = getelementptr inbounds i8, i8* %7686, i64 3
  %7690 = load i8, i8* %7689, align 1
  %7691 = icmp eq i8 %7690, 0
  br i1 %7691, label %7695, label %7692

7692:                                             ; preds = %7685
  %7693 = uitofp i8 %7690 to float
  %7694 = fdiv float 2.550000e+02, %7693
  br label %7695

7695:                                             ; preds = %7692, %7685
  %7696 = phi float [ %7694, %7692 ], [ 1.000000e+00, %7685 ]
  %7697 = load i8, i8* %7686, align 1
  %7698 = uitofp i8 %7697 to float
  %7699 = fmul float %7696, %7698
  %7700 = fptoui float %7699 to i8
  %7701 = getelementptr inbounds i8, i8* %7686, i64 1
  %7702 = load i8, i8* %7701, align 1
  %7703 = uitofp i8 %7702 to float
  %7704 = fmul float %7696, %7703
  %7705 = fptoui float %7704 to i8
  %7706 = getelementptr inbounds i8, i8* %7686, i64 2
  %7707 = load i8, i8* %7706, align 1
  %7708 = uitofp i8 %7707 to float
  %7709 = fmul float %7696, %7708
  %7710 = fptoui float %7709 to i8
  %7711 = and i8 %7700, -16
  %7712 = zext i8 %7711 to i16
  %7713 = shl nuw i16 %7712, 8
  %7714 = and i8 %7705, -16
  %7715 = zext i8 %7714 to i16
  %7716 = shl nuw nsw i16 %7715, 4
  %7717 = and i8 %7710, -16
  %7718 = zext i8 %7717 to i16
  %7719 = lshr i8 %7690, 4
  %7720 = zext i8 %7719 to i16
  %7721 = or i16 %7713, %7720
  %7722 = or i16 %7721, %7716
  %7723 = or i16 %7722, %7718
  store i16 %7723, i16* %7687, align 2
  %7724 = getelementptr inbounds i8, i8* %7686, i64 4
  %7725 = getelementptr inbounds i16, i16* %7687, i64 1
  %7726 = add nuw i32 %7688, 1
  %7727 = icmp eq i32 %7726, %7616
  br i1 %7727, label %7728, label %7685, !llvm.loop !232

7728:                                             ; preds = %7695, %7679
  %7729 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7540, align 8
  br label %7730

7730:                                             ; preds = %7728, %7599
  %7731 = phi %"class.blink::IntRect"* [ %7729, %7728 ], [ %7601, %7599 ]
  %7732 = getelementptr inbounds i8, i8* %7605, i64 %7533
  %7733 = getelementptr inbounds i16, i16* %7604, i64 %7537
  %7734 = add nuw nsw i32 %7603, 1
  %7735 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7731, i64 0, i32 1, i32 1
  %7736 = load i32, i32* %7735, align 4
  %7737 = icmp slt i32 %7734, %7736
  %7738 = add i64 %7600, 1
  br i1 %7737, label %7599, label %7583

7739:                                             ; preds = %7585, %7565
  %7740 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7740, align 4
  br label %11653

7741:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %7742
    i32 1, label %7935
    i32 2, label %8132
  ]

7742:                                             ; preds = %7741
  %7743 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7744 = load i32, i32* %7743, align 8
  %7745 = sext i32 %7744 to i64
  %7746 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7747 = load i32, i32* %7746, align 8
  %7748 = sdiv i32 %7747, 2
  %7749 = sext i32 %7748 to i64
  %7750 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7751 = load i8*, i8** %7750, align 8
  %7752 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7753 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7752, align 8
  %7754 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7753, i64 0, i32 0, i32 1
  %7755 = load i32, i32* %7754, align 4
  %7756 = mul nsw i32 %7755, %7744
  %7757 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7758 = load i32, i32* %7757, align 4
  %7759 = add nsw i32 %7756, %7758
  %7760 = sext i32 %7759 to i64
  %7761 = getelementptr inbounds i8, i8* %7751, i64 %7760
  %7762 = icmp slt i32 %7747, 0
  %7763 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7764 = load i32, i32* %7763, align 8
  %7765 = icmp sgt i32 %7764, 1
  %7766 = and i1 %7762, %7765
  br i1 %7766, label %7767, label %7777

7767:                                             ; preds = %7742
  %7768 = add nsw i32 %7764, -1
  %7769 = sext i32 %7768 to i64
  %7770 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7771 = load i32, i32* %7770, align 4
  %7772 = sext i32 %7771 to i64
  %7773 = mul nsw i64 %7745, %7769
  %7774 = mul i64 %7773, %7772
  %7775 = sub i64 0, %7774
  %7776 = getelementptr inbounds i8, i8* %7761, i64 %7775
  br label %7779

7777:                                             ; preds = %7742
  %7778 = icmp sgt i32 %7764, 0
  br i1 %7778, label %7779, label %7933

7779:                                             ; preds = %7777, %7767
  %7780 = phi i8* [ %7776, %7767 ], [ %7761, %7777 ]
  %7781 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7782 = bitcast i8** %7781 to i16**
  %7783 = load i16*, i16** %7782, align 8
  %7784 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7785 = bitcast i8** %7784 to float**
  %7786 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7787

7787:                                             ; preds = %7799, %7779
  %7788 = phi i32 [ %7764, %7779 ], [ %7800, %7799 ]
  %7789 = phi %"class.blink::IntRect"* [ %7753, %7779 ], [ %7801, %7799 ]
  %7790 = phi %"class.blink::IntRect"* [ %7753, %7779 ], [ %7802, %7799 ]
  %7791 = phi i32 [ 0, %7779 ], [ %7811, %7799 ]
  %7792 = phi i16* [ %7783, %7779 ], [ %7804, %7799 ]
  %7793 = phi i8* [ %7780, %7779 ], [ %7810, %7799 ]
  %7794 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7790, i64 0, i32 1, i32 1
  %7795 = load i32, i32* %7794, align 4
  %7796 = icmp sgt i32 %7795, 0
  br i1 %7796, label %7813, label %7799

7797:                                             ; preds = %7925
  %7798 = load i32, i32* %7763, align 8
  br label %7799

7799:                                             ; preds = %7797, %7787
  %7800 = phi i32 [ %7788, %7787 ], [ %7798, %7797 ]
  %7801 = phi %"class.blink::IntRect"* [ %7789, %7787 ], [ %7926, %7797 ]
  %7802 = phi %"class.blink::IntRect"* [ %7790, %7787 ], [ %7926, %7797 ]
  %7803 = phi i8* [ %7793, %7787 ], [ %7927, %7797 ]
  %7804 = phi i16* [ %7792, %7787 ], [ %7928, %7797 ]
  %7805 = phi i32 [ %7795, %7787 ], [ %7931, %7797 ]
  %7806 = load i32, i32* %7786, align 4
  %7807 = sub nsw i32 %7806, %7805
  %7808 = sext i32 %7807 to i64
  %7809 = mul nsw i64 %7808, %7745
  %7810 = getelementptr inbounds i8, i8* %7803, i64 %7809
  %7811 = add nuw nsw i32 %7791, 1
  %7812 = icmp slt i32 %7811, %7800
  br i1 %7812, label %7787, label %7933

7813:                                             ; preds = %7787, %7925
  %7814 = phi %"class.blink::IntRect"* [ %7926, %7925 ], [ %7789, %7787 ]
  %7815 = phi %"class.blink::IntRect"* [ %7926, %7925 ], [ %7790, %7787 ]
  %7816 = phi i32 [ %7929, %7925 ], [ 0, %7787 ]
  %7817 = phi i16* [ %7928, %7925 ], [ %7792, %7787 ]
  %7818 = phi i8* [ %7927, %7925 ], [ %7793, %7787 ]
  %7819 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7815, i64 0, i32 1, i32 0
  %7820 = load i32, i32* %7819, align 4
  %7821 = icmp eq i32 %7820, 0
  br i1 %7821, label %7925, label %7822

7822:                                             ; preds = %7813
  %7823 = load float*, float** %7785, align 8
  br label %7824

7824:                                             ; preds = %7824, %7822
  %7825 = phi i32 [ %7848, %7824 ], [ 0, %7822 ]
  %7826 = phi i8* [ %7846, %7824 ], [ %7818, %7822 ]
  %7827 = phi float* [ %7847, %7824 ], [ %7823, %7822 ]
  %7828 = load i8, i8* %7826, align 1
  %7829 = uitofp i8 %7828 to float
  %7830 = fmul float %7829, 0x3F70101020000000
  store float %7830, float* %7827, align 4
  %7831 = getelementptr inbounds i8, i8* %7826, i64 1
  %7832 = load i8, i8* %7831, align 1
  %7833 = uitofp i8 %7832 to float
  %7834 = fmul float %7833, 0x3F70101020000000
  %7835 = getelementptr inbounds float, float* %7827, i64 1
  store float %7834, float* %7835, align 4
  %7836 = getelementptr inbounds i8, i8* %7826, i64 2
  %7837 = load i8, i8* %7836, align 1
  %7838 = uitofp i8 %7837 to float
  %7839 = fmul float %7838, 0x3F70101020000000
  %7840 = getelementptr inbounds float, float* %7827, i64 2
  store float %7839, float* %7840, align 4
  %7841 = getelementptr inbounds i8, i8* %7826, i64 3
  %7842 = load i8, i8* %7841, align 1
  %7843 = uitofp i8 %7842 to float
  %7844 = fmul float %7843, 0x3F70101020000000
  %7845 = getelementptr inbounds float, float* %7827, i64 3
  store float %7844, float* %7845, align 4
  %7846 = getelementptr inbounds i8, i8* %7826, i64 4
  %7847 = getelementptr inbounds float, float* %7827, i64 4
  %7848 = add nuw i32 %7825, 1
  %7849 = icmp eq i32 %7848, %7820
  br i1 %7849, label %7850, label %7824

7850:                                             ; preds = %7824
  %7851 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7752, align 8
  %7852 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7851, i64 0, i32 1, i32 0
  %7853 = load i32, i32* %7852, align 4
  %7854 = icmp eq i32 %7853, 0
  br i1 %7854, label %7925, label %7855

7855:                                             ; preds = %7850
  %7856 = load float*, float** %7785, align 8
  br label %7857

7857:                                             ; preds = %7857, %7855
  %7858 = phi i32 [ %7921, %7857 ], [ 0, %7855 ]
  %7859 = phi float* [ %7919, %7857 ], [ %7856, %7855 ]
  %7860 = phi i16* [ %7920, %7857 ], [ %7817, %7855 ]
  %7861 = bitcast float* %7859 to i32*
  %7862 = load i32, i32* %7861, align 4
  %7863 = lshr i32 %7862, 23
  %7864 = zext i32 %7863 to i64
  %7865 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7864
  %7866 = load i16, i16* %7865, align 2
  %7867 = and i32 %7862, 8388607
  %7868 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7864
  %7869 = load i8, i8* %7868, align 1
  %7870 = zext i8 %7869 to i32
  %7871 = lshr i32 %7867, %7870
  %7872 = trunc i32 %7871 to i16
  %7873 = add i16 %7866, %7872
  store i16 %7873, i16* %7860, align 2
  %7874 = getelementptr inbounds float, float* %7859, i64 1
  %7875 = bitcast float* %7874 to i32*
  %7876 = load i32, i32* %7875, align 4
  %7877 = lshr i32 %7876, 23
  %7878 = zext i32 %7877 to i64
  %7879 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7878
  %7880 = load i16, i16* %7879, align 2
  %7881 = and i32 %7876, 8388607
  %7882 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7878
  %7883 = load i8, i8* %7882, align 1
  %7884 = zext i8 %7883 to i32
  %7885 = lshr i32 %7881, %7884
  %7886 = trunc i32 %7885 to i16
  %7887 = add i16 %7880, %7886
  %7888 = getelementptr inbounds i16, i16* %7860, i64 1
  store i16 %7887, i16* %7888, align 2
  %7889 = getelementptr inbounds float, float* %7859, i64 2
  %7890 = bitcast float* %7889 to i32*
  %7891 = load i32, i32* %7890, align 4
  %7892 = lshr i32 %7891, 23
  %7893 = zext i32 %7892 to i64
  %7894 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7893
  %7895 = load i16, i16* %7894, align 2
  %7896 = and i32 %7891, 8388607
  %7897 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7893
  %7898 = load i8, i8* %7897, align 1
  %7899 = zext i8 %7898 to i32
  %7900 = lshr i32 %7896, %7899
  %7901 = trunc i32 %7900 to i16
  %7902 = add i16 %7895, %7901
  %7903 = getelementptr inbounds i16, i16* %7860, i64 2
  store i16 %7902, i16* %7903, align 2
  %7904 = getelementptr inbounds float, float* %7859, i64 3
  %7905 = bitcast float* %7904 to i32*
  %7906 = load i32, i32* %7905, align 4
  %7907 = lshr i32 %7906, 23
  %7908 = zext i32 %7907 to i64
  %7909 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7908
  %7910 = load i16, i16* %7909, align 2
  %7911 = and i32 %7906, 8388607
  %7912 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7908
  %7913 = load i8, i8* %7912, align 1
  %7914 = zext i8 %7913 to i32
  %7915 = lshr i32 %7911, %7914
  %7916 = trunc i32 %7915 to i16
  %7917 = add i16 %7910, %7916
  %7918 = getelementptr inbounds i16, i16* %7860, i64 3
  store i16 %7917, i16* %7918, align 2
  %7919 = getelementptr inbounds float, float* %7859, i64 4
  %7920 = getelementptr inbounds i16, i16* %7860, i64 4
  %7921 = add nuw i32 %7858, 1
  %7922 = icmp eq i32 %7921, %7853
  br i1 %7922, label %7923, label %7857

7923:                                             ; preds = %7857
  %7924 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7752, align 8
  br label %7925

7925:                                             ; preds = %7923, %7850, %7813
  %7926 = phi %"class.blink::IntRect"* [ %7924, %7923 ], [ %7851, %7850 ], [ %7814, %7813 ]
  %7927 = getelementptr inbounds i8, i8* %7818, i64 %7745
  %7928 = getelementptr inbounds i16, i16* %7817, i64 %7749
  %7929 = add nuw nsw i32 %7816, 1
  %7930 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7926, i64 0, i32 1, i32 1
  %7931 = load i32, i32* %7930, align 4
  %7932 = icmp slt i32 %7929, %7931
  br i1 %7932, label %7813, label %7797

7933:                                             ; preds = %7799, %7777
  %7934 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7934, align 4
  br label %11653

7935:                                             ; preds = %7741
  %7936 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7937 = load i32, i32* %7936, align 8
  %7938 = sext i32 %7937 to i64
  %7939 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7940 = load i32, i32* %7939, align 8
  %7941 = sdiv i32 %7940, 2
  %7942 = sext i32 %7941 to i64
  %7943 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7944 = load i8*, i8** %7943, align 8
  %7945 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7946 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7945, align 8
  %7947 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7946, i64 0, i32 0, i32 1
  %7948 = load i32, i32* %7947, align 4
  %7949 = mul nsw i32 %7948, %7937
  %7950 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7951 = load i32, i32* %7950, align 4
  %7952 = add nsw i32 %7949, %7951
  %7953 = sext i32 %7952 to i64
  %7954 = getelementptr inbounds i8, i8* %7944, i64 %7953
  %7955 = icmp slt i32 %7940, 0
  %7956 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7957 = load i32, i32* %7956, align 8
  %7958 = icmp sgt i32 %7957, 1
  %7959 = and i1 %7955, %7958
  br i1 %7959, label %7960, label %7970

7960:                                             ; preds = %7935
  %7961 = add nsw i32 %7957, -1
  %7962 = sext i32 %7961 to i64
  %7963 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7964 = load i32, i32* %7963, align 4
  %7965 = sext i32 %7964 to i64
  %7966 = mul nsw i64 %7938, %7962
  %7967 = mul i64 %7966, %7965
  %7968 = sub i64 0, %7967
  %7969 = getelementptr inbounds i8, i8* %7954, i64 %7968
  br label %7972

7970:                                             ; preds = %7935
  %7971 = icmp sgt i32 %7957, 0
  br i1 %7971, label %7972, label %8130

7972:                                             ; preds = %7970, %7960
  %7973 = phi i8* [ %7969, %7960 ], [ %7954, %7970 ]
  %7974 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7975 = bitcast i8** %7974 to i16**
  %7976 = load i16*, i16** %7975, align 8
  %7977 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7978 = bitcast i8** %7977 to float**
  %7979 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7980

7980:                                             ; preds = %7992, %7972
  %7981 = phi i32 [ %7957, %7972 ], [ %7993, %7992 ]
  %7982 = phi %"class.blink::IntRect"* [ %7946, %7972 ], [ %7994, %7992 ]
  %7983 = phi %"class.blink::IntRect"* [ %7946, %7972 ], [ %7995, %7992 ]
  %7984 = phi i32 [ 0, %7972 ], [ %8004, %7992 ]
  %7985 = phi i16* [ %7976, %7972 ], [ %7997, %7992 ]
  %7986 = phi i8* [ %7973, %7972 ], [ %8003, %7992 ]
  %7987 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7983, i64 0, i32 1, i32 1
  %7988 = load i32, i32* %7987, align 4
  %7989 = icmp sgt i32 %7988, 0
  br i1 %7989, label %8006, label %7992

7990:                                             ; preds = %8122
  %7991 = load i32, i32* %7956, align 8
  br label %7992

7992:                                             ; preds = %7990, %7980
  %7993 = phi i32 [ %7981, %7980 ], [ %7991, %7990 ]
  %7994 = phi %"class.blink::IntRect"* [ %7982, %7980 ], [ %8123, %7990 ]
  %7995 = phi %"class.blink::IntRect"* [ %7983, %7980 ], [ %8123, %7990 ]
  %7996 = phi i8* [ %7986, %7980 ], [ %8124, %7990 ]
  %7997 = phi i16* [ %7985, %7980 ], [ %8125, %7990 ]
  %7998 = phi i32 [ %7988, %7980 ], [ %8128, %7990 ]
  %7999 = load i32, i32* %7979, align 4
  %8000 = sub nsw i32 %7999, %7998
  %8001 = sext i32 %8000 to i64
  %8002 = mul nsw i64 %8001, %7938
  %8003 = getelementptr inbounds i8, i8* %7996, i64 %8002
  %8004 = add nuw nsw i32 %7984, 1
  %8005 = icmp slt i32 %8004, %7993
  br i1 %8005, label %7980, label %8130

8006:                                             ; preds = %7980, %8122
  %8007 = phi %"class.blink::IntRect"* [ %8123, %8122 ], [ %7982, %7980 ]
  %8008 = phi %"class.blink::IntRect"* [ %8123, %8122 ], [ %7983, %7980 ]
  %8009 = phi i32 [ %8126, %8122 ], [ 0, %7980 ]
  %8010 = phi i16* [ %8125, %8122 ], [ %7985, %7980 ]
  %8011 = phi i8* [ %8124, %8122 ], [ %7986, %7980 ]
  %8012 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8008, i64 0, i32 1, i32 0
  %8013 = load i32, i32* %8012, align 4
  %8014 = icmp eq i32 %8013, 0
  br i1 %8014, label %8122, label %8015

8015:                                             ; preds = %8006
  %8016 = load float*, float** %7978, align 8
  br label %8017

8017:                                             ; preds = %8017, %8015
  %8018 = phi i32 [ %8041, %8017 ], [ 0, %8015 ]
  %8019 = phi i8* [ %8039, %8017 ], [ %8011, %8015 ]
  %8020 = phi float* [ %8040, %8017 ], [ %8016, %8015 ]
  %8021 = load i8, i8* %8019, align 1
  %8022 = uitofp i8 %8021 to float
  %8023 = fmul float %8022, 0x3F70101020000000
  store float %8023, float* %8020, align 4
  %8024 = getelementptr inbounds i8, i8* %8019, i64 1
  %8025 = load i8, i8* %8024, align 1
  %8026 = uitofp i8 %8025 to float
  %8027 = fmul float %8026, 0x3F70101020000000
  %8028 = getelementptr inbounds float, float* %8020, i64 1
  store float %8027, float* %8028, align 4
  %8029 = getelementptr inbounds i8, i8* %8019, i64 2
  %8030 = load i8, i8* %8029, align 1
  %8031 = uitofp i8 %8030 to float
  %8032 = fmul float %8031, 0x3F70101020000000
  %8033 = getelementptr inbounds float, float* %8020, i64 2
  store float %8032, float* %8033, align 4
  %8034 = getelementptr inbounds i8, i8* %8019, i64 3
  %8035 = load i8, i8* %8034, align 1
  %8036 = uitofp i8 %8035 to float
  %8037 = fmul float %8036, 0x3F70101020000000
  %8038 = getelementptr inbounds float, float* %8020, i64 3
  store float %8037, float* %8038, align 4
  %8039 = getelementptr inbounds i8, i8* %8019, i64 4
  %8040 = getelementptr inbounds float, float* %8020, i64 4
  %8041 = add nuw i32 %8018, 1
  %8042 = icmp eq i32 %8041, %8013
  br i1 %8042, label %8043, label %8017

8043:                                             ; preds = %8017
  %8044 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7945, align 8
  %8045 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8044, i64 0, i32 1, i32 0
  %8046 = load i32, i32* %8045, align 4
  %8047 = icmp eq i32 %8046, 0
  br i1 %8047, label %8122, label %8048

8048:                                             ; preds = %8043
  %8049 = load float*, float** %7978, align 8
  br label %8050

8050:                                             ; preds = %8050, %8048
  %8051 = phi float* [ %8116, %8050 ], [ %8049, %8048 ]
  %8052 = phi i32 [ %8118, %8050 ], [ 0, %8048 ]
  %8053 = phi i16* [ %8117, %8050 ], [ %8010, %8048 ]
  %8054 = getelementptr inbounds float, float* %8051, i64 3
  %8055 = load float, float* %8054, align 4
  %8056 = load float, float* %8051, align 4
  %8057 = fmul float %8055, %8056
  %8058 = bitcast float %8057 to i32
  %8059 = lshr i32 %8058, 23
  %8060 = zext i32 %8059 to i64
  %8061 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8060
  %8062 = load i16, i16* %8061, align 2
  %8063 = and i32 %8058, 8388607
  %8064 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8060
  %8065 = load i8, i8* %8064, align 1
  %8066 = zext i8 %8065 to i32
  %8067 = lshr i32 %8063, %8066
  %8068 = trunc i32 %8067 to i16
  %8069 = add i16 %8062, %8068
  store i16 %8069, i16* %8053, align 2
  %8070 = getelementptr inbounds float, float* %8051, i64 1
  %8071 = load float, float* %8070, align 4
  %8072 = fmul float %8055, %8071
  %8073 = bitcast float %8072 to i32
  %8074 = lshr i32 %8073, 23
  %8075 = zext i32 %8074 to i64
  %8076 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8075
  %8077 = load i16, i16* %8076, align 2
  %8078 = and i32 %8073, 8388607
  %8079 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8075
  %8080 = load i8, i8* %8079, align 1
  %8081 = zext i8 %8080 to i32
  %8082 = lshr i32 %8078, %8081
  %8083 = trunc i32 %8082 to i16
  %8084 = add i16 %8077, %8083
  %8085 = getelementptr inbounds i16, i16* %8053, i64 1
  store i16 %8084, i16* %8085, align 2
  %8086 = getelementptr inbounds float, float* %8051, i64 2
  %8087 = load float, float* %8086, align 4
  %8088 = fmul float %8055, %8087
  %8089 = bitcast float %8088 to i32
  %8090 = lshr i32 %8089, 23
  %8091 = zext i32 %8090 to i64
  %8092 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8091
  %8093 = load i16, i16* %8092, align 2
  %8094 = and i32 %8089, 8388607
  %8095 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8091
  %8096 = load i8, i8* %8095, align 1
  %8097 = zext i8 %8096 to i32
  %8098 = lshr i32 %8094, %8097
  %8099 = trunc i32 %8098 to i16
  %8100 = add i16 %8093, %8099
  %8101 = getelementptr inbounds i16, i16* %8053, i64 2
  store i16 %8100, i16* %8101, align 2
  %8102 = bitcast float* %8054 to i32*
  %8103 = load i32, i32* %8102, align 4
  %8104 = lshr i32 %8103, 23
  %8105 = zext i32 %8104 to i64
  %8106 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8105
  %8107 = load i16, i16* %8106, align 2
  %8108 = and i32 %8103, 8388607
  %8109 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8105
  %8110 = load i8, i8* %8109, align 1
  %8111 = zext i8 %8110 to i32
  %8112 = lshr i32 %8108, %8111
  %8113 = trunc i32 %8112 to i16
  %8114 = add i16 %8107, %8113
  %8115 = getelementptr inbounds i16, i16* %8053, i64 3
  store i16 %8114, i16* %8115, align 2
  %8116 = getelementptr inbounds float, float* %8051, i64 4
  %8117 = getelementptr inbounds i16, i16* %8053, i64 4
  %8118 = add nuw i32 %8052, 1
  %8119 = icmp eq i32 %8118, %8046
  br i1 %8119, label %8120, label %8050

8120:                                             ; preds = %8050
  %8121 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7945, align 8
  br label %8122

8122:                                             ; preds = %8120, %8043, %8006
  %8123 = phi %"class.blink::IntRect"* [ %8121, %8120 ], [ %8044, %8043 ], [ %8007, %8006 ]
  %8124 = getelementptr inbounds i8, i8* %8011, i64 %7938
  %8125 = getelementptr inbounds i16, i16* %8010, i64 %7942
  %8126 = add nuw nsw i32 %8009, 1
  %8127 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8123, i64 0, i32 1, i32 1
  %8128 = load i32, i32* %8127, align 4
  %8129 = icmp slt i32 %8126, %8128
  br i1 %8129, label %8006, label %7990

8130:                                             ; preds = %7992, %7970
  %8131 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8131, align 4
  br label %11653

8132:                                             ; preds = %7741
  %8133 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8134 = load i32, i32* %8133, align 8
  %8135 = sext i32 %8134 to i64
  %8136 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8137 = load i32, i32* %8136, align 8
  %8138 = sdiv i32 %8137, 2
  %8139 = sext i32 %8138 to i64
  %8140 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8141 = load i8*, i8** %8140, align 8
  %8142 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8143 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8142, align 8
  %8144 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8143, i64 0, i32 0, i32 1
  %8145 = load i32, i32* %8144, align 4
  %8146 = mul nsw i32 %8145, %8134
  %8147 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8148 = load i32, i32* %8147, align 4
  %8149 = add nsw i32 %8146, %8148
  %8150 = sext i32 %8149 to i64
  %8151 = getelementptr inbounds i8, i8* %8141, i64 %8150
  %8152 = icmp slt i32 %8137, 0
  %8153 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8154 = load i32, i32* %8153, align 8
  %8155 = icmp sgt i32 %8154, 1
  %8156 = and i1 %8152, %8155
  br i1 %8156, label %8157, label %8167

8157:                                             ; preds = %8132
  %8158 = add nsw i32 %8154, -1
  %8159 = sext i32 %8158 to i64
  %8160 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8161 = load i32, i32* %8160, align 4
  %8162 = sext i32 %8161 to i64
  %8163 = mul nsw i64 %8135, %8159
  %8164 = mul i64 %8163, %8162
  %8165 = sub i64 0, %8164
  %8166 = getelementptr inbounds i8, i8* %8151, i64 %8165
  br label %8169

8167:                                             ; preds = %8132
  %8168 = icmp sgt i32 %8154, 0
  br i1 %8168, label %8169, label %8330

8169:                                             ; preds = %8167, %8157
  %8170 = phi i8* [ %8166, %8157 ], [ %8151, %8167 ]
  %8171 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8172 = bitcast i8** %8171 to i16**
  %8173 = load i16*, i16** %8172, align 8
  %8174 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8175 = bitcast i8** %8174 to float**
  %8176 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8177

8177:                                             ; preds = %8189, %8169
  %8178 = phi i32 [ %8154, %8169 ], [ %8190, %8189 ]
  %8179 = phi %"class.blink::IntRect"* [ %8143, %8169 ], [ %8191, %8189 ]
  %8180 = phi %"class.blink::IntRect"* [ %8143, %8169 ], [ %8192, %8189 ]
  %8181 = phi i32 [ 0, %8169 ], [ %8201, %8189 ]
  %8182 = phi i16* [ %8173, %8169 ], [ %8194, %8189 ]
  %8183 = phi i8* [ %8170, %8169 ], [ %8200, %8189 ]
  %8184 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8180, i64 0, i32 1, i32 1
  %8185 = load i32, i32* %8184, align 4
  %8186 = icmp sgt i32 %8185, 0
  br i1 %8186, label %8203, label %8189

8187:                                             ; preds = %8322
  %8188 = load i32, i32* %8153, align 8
  br label %8189

8189:                                             ; preds = %8187, %8177
  %8190 = phi i32 [ %8178, %8177 ], [ %8188, %8187 ]
  %8191 = phi %"class.blink::IntRect"* [ %8179, %8177 ], [ %8323, %8187 ]
  %8192 = phi %"class.blink::IntRect"* [ %8180, %8177 ], [ %8323, %8187 ]
  %8193 = phi i8* [ %8183, %8177 ], [ %8324, %8187 ]
  %8194 = phi i16* [ %8182, %8177 ], [ %8325, %8187 ]
  %8195 = phi i32 [ %8185, %8177 ], [ %8328, %8187 ]
  %8196 = load i32, i32* %8176, align 4
  %8197 = sub nsw i32 %8196, %8195
  %8198 = sext i32 %8197 to i64
  %8199 = mul nsw i64 %8198, %8135
  %8200 = getelementptr inbounds i8, i8* %8193, i64 %8199
  %8201 = add nuw nsw i32 %8181, 1
  %8202 = icmp slt i32 %8201, %8190
  br i1 %8202, label %8177, label %8330

8203:                                             ; preds = %8177, %8322
  %8204 = phi %"class.blink::IntRect"* [ %8323, %8322 ], [ %8179, %8177 ]
  %8205 = phi %"class.blink::IntRect"* [ %8323, %8322 ], [ %8180, %8177 ]
  %8206 = phi i32 [ %8326, %8322 ], [ 0, %8177 ]
  %8207 = phi i16* [ %8325, %8322 ], [ %8182, %8177 ]
  %8208 = phi i8* [ %8324, %8322 ], [ %8183, %8177 ]
  %8209 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8205, i64 0, i32 1, i32 0
  %8210 = load i32, i32* %8209, align 4
  %8211 = icmp eq i32 %8210, 0
  br i1 %8211, label %8322, label %8212

8212:                                             ; preds = %8203
  %8213 = load float*, float** %8175, align 8
  br label %8214

8214:                                             ; preds = %8214, %8212
  %8215 = phi i32 [ %8238, %8214 ], [ 0, %8212 ]
  %8216 = phi i8* [ %8236, %8214 ], [ %8208, %8212 ]
  %8217 = phi float* [ %8237, %8214 ], [ %8213, %8212 ]
  %8218 = load i8, i8* %8216, align 1
  %8219 = uitofp i8 %8218 to float
  %8220 = fmul float %8219, 0x3F70101020000000
  store float %8220, float* %8217, align 4
  %8221 = getelementptr inbounds i8, i8* %8216, i64 1
  %8222 = load i8, i8* %8221, align 1
  %8223 = uitofp i8 %8222 to float
  %8224 = fmul float %8223, 0x3F70101020000000
  %8225 = getelementptr inbounds float, float* %8217, i64 1
  store float %8224, float* %8225, align 4
  %8226 = getelementptr inbounds i8, i8* %8216, i64 2
  %8227 = load i8, i8* %8226, align 1
  %8228 = uitofp i8 %8227 to float
  %8229 = fmul float %8228, 0x3F70101020000000
  %8230 = getelementptr inbounds float, float* %8217, i64 2
  store float %8229, float* %8230, align 4
  %8231 = getelementptr inbounds i8, i8* %8216, i64 3
  %8232 = load i8, i8* %8231, align 1
  %8233 = uitofp i8 %8232 to float
  %8234 = fmul float %8233, 0x3F70101020000000
  %8235 = getelementptr inbounds float, float* %8217, i64 3
  store float %8234, float* %8235, align 4
  %8236 = getelementptr inbounds i8, i8* %8216, i64 4
  %8237 = getelementptr inbounds float, float* %8217, i64 4
  %8238 = add nuw i32 %8215, 1
  %8239 = icmp eq i32 %8238, %8210
  br i1 %8239, label %8240, label %8214

8240:                                             ; preds = %8214
  %8241 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8142, align 8
  %8242 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8241, i64 0, i32 1, i32 0
  %8243 = load i32, i32* %8242, align 4
  %8244 = icmp eq i32 %8243, 0
  br i1 %8244, label %8322, label %8245

8245:                                             ; preds = %8240
  %8246 = load float*, float** %8175, align 8
  br label %8247

8247:                                             ; preds = %8247, %8245
  %8248 = phi i32 [ %8318, %8247 ], [ 0, %8245 ]
  %8249 = phi float* [ %8316, %8247 ], [ %8246, %8245 ]
  %8250 = phi i16* [ %8317, %8247 ], [ %8207, %8245 ]
  %8251 = getelementptr inbounds float, float* %8249, i64 3
  %8252 = load float, float* %8251, align 4
  %8253 = fcmp une float %8252, 0.000000e+00
  %8254 = fdiv float 1.000000e+00, %8252
  %8255 = select i1 %8253, float %8254, float 1.000000e+00
  %8256 = load float, float* %8249, align 4
  %8257 = fmul float %8256, %8255
  %8258 = bitcast float %8257 to i32
  %8259 = lshr i32 %8258, 23
  %8260 = zext i32 %8259 to i64
  %8261 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8260
  %8262 = load i16, i16* %8261, align 2
  %8263 = and i32 %8258, 8388607
  %8264 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8260
  %8265 = load i8, i8* %8264, align 1
  %8266 = zext i8 %8265 to i32
  %8267 = lshr i32 %8263, %8266
  %8268 = trunc i32 %8267 to i16
  %8269 = add i16 %8262, %8268
  store i16 %8269, i16* %8250, align 2
  %8270 = getelementptr inbounds float, float* %8249, i64 1
  %8271 = load float, float* %8270, align 4
  %8272 = fmul float %8255, %8271
  %8273 = bitcast float %8272 to i32
  %8274 = lshr i32 %8273, 23
  %8275 = zext i32 %8274 to i64
  %8276 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8275
  %8277 = load i16, i16* %8276, align 2
  %8278 = and i32 %8273, 8388607
  %8279 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8275
  %8280 = load i8, i8* %8279, align 1
  %8281 = zext i8 %8280 to i32
  %8282 = lshr i32 %8278, %8281
  %8283 = trunc i32 %8282 to i16
  %8284 = add i16 %8277, %8283
  %8285 = getelementptr inbounds i16, i16* %8250, i64 1
  store i16 %8284, i16* %8285, align 2
  %8286 = getelementptr inbounds float, float* %8249, i64 2
  %8287 = load float, float* %8286, align 4
  %8288 = fmul float %8255, %8287
  %8289 = bitcast float %8288 to i32
  %8290 = lshr i32 %8289, 23
  %8291 = zext i32 %8290 to i64
  %8292 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8291
  %8293 = load i16, i16* %8292, align 2
  %8294 = and i32 %8289, 8388607
  %8295 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8291
  %8296 = load i8, i8* %8295, align 1
  %8297 = zext i8 %8296 to i32
  %8298 = lshr i32 %8294, %8297
  %8299 = trunc i32 %8298 to i16
  %8300 = add i16 %8293, %8299
  %8301 = getelementptr inbounds i16, i16* %8250, i64 2
  store i16 %8300, i16* %8301, align 2
  %8302 = bitcast float* %8251 to i32*
  %8303 = load i32, i32* %8302, align 4
  %8304 = lshr i32 %8303, 23
  %8305 = zext i32 %8304 to i64
  %8306 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %8305
  %8307 = load i16, i16* %8306, align 2
  %8308 = and i32 %8303, 8388607
  %8309 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %8305
  %8310 = load i8, i8* %8309, align 1
  %8311 = zext i8 %8310 to i32
  %8312 = lshr i32 %8308, %8311
  %8313 = trunc i32 %8312 to i16
  %8314 = add i16 %8307, %8313
  %8315 = getelementptr inbounds i16, i16* %8250, i64 3
  store i16 %8314, i16* %8315, align 2
  %8316 = getelementptr inbounds float, float* %8249, i64 4
  %8317 = getelementptr inbounds i16, i16* %8250, i64 4
  %8318 = add nuw i32 %8248, 1
  %8319 = icmp eq i32 %8318, %8243
  br i1 %8319, label %8320, label %8247

8320:                                             ; preds = %8247
  %8321 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8142, align 8
  br label %8322

8322:                                             ; preds = %8320, %8240, %8203
  %8323 = phi %"class.blink::IntRect"* [ %8321, %8320 ], [ %8241, %8240 ], [ %8204, %8203 ]
  %8324 = getelementptr inbounds i8, i8* %8208, i64 %8135
  %8325 = getelementptr inbounds i16, i16* %8207, i64 %8139
  %8326 = add nuw nsw i32 %8206, 1
  %8327 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8323, i64 0, i32 1, i32 1
  %8328 = load i32, i32* %8327, align 4
  %8329 = icmp slt i32 %8326, %8328
  br i1 %8329, label %8203, label %8187

8330:                                             ; preds = %8189, %8167
  %8331 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8331, align 4
  br label %11653

8332:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %8333
    i32 1, label %8449
    i32 2, label %8643
  ]

8333:                                             ; preds = %8332
  %8334 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8335 = load i32, i32* %8334, align 8
  %8336 = sext i32 %8335 to i64
  %8337 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8338 = load i32, i32* %8337, align 8
  %8339 = sdiv i32 %8338, 4
  %8340 = sext i32 %8339 to i64
  %8341 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8342 = load i8*, i8** %8341, align 8
  %8343 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8344 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8343, align 8
  %8345 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8344, i64 0, i32 0, i32 1
  %8346 = load i32, i32* %8345, align 4
  %8347 = mul nsw i32 %8346, %8335
  %8348 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8349 = load i32, i32* %8348, align 4
  %8350 = add nsw i32 %8347, %8349
  %8351 = sext i32 %8350 to i64
  %8352 = getelementptr inbounds i8, i8* %8342, i64 %8351
  %8353 = icmp slt i32 %8338, 0
  %8354 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8355 = load i32, i32* %8354, align 8
  %8356 = icmp sgt i32 %8355, 1
  %8357 = and i1 %8353, %8356
  br i1 %8357, label %8358, label %8368

8358:                                             ; preds = %8333
  %8359 = add nsw i32 %8355, -1
  %8360 = sext i32 %8359 to i64
  %8361 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8362 = load i32, i32* %8361, align 4
  %8363 = sext i32 %8362 to i64
  %8364 = mul nsw i64 %8336, %8360
  %8365 = mul i64 %8364, %8363
  %8366 = sub i64 0, %8365
  %8367 = getelementptr inbounds i8, i8* %8352, i64 %8366
  br label %8370

8368:                                             ; preds = %8333
  %8369 = icmp sgt i32 %8355, 0
  br i1 %8369, label %8370, label %8447

8370:                                             ; preds = %8368, %8358
  %8371 = phi i8* [ %8367, %8358 ], [ %8352, %8368 ]
  %8372 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8373 = bitcast i8** %8372 to float**
  %8374 = load float*, float** %8373, align 8
  %8375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8376

8376:                                             ; preds = %8388, %8370
  %8377 = phi i32 [ %8355, %8370 ], [ %8389, %8388 ]
  %8378 = phi %"class.blink::IntRect"* [ %8344, %8370 ], [ %8390, %8388 ]
  %8379 = phi %"class.blink::IntRect"* [ %8344, %8370 ], [ %8391, %8388 ]
  %8380 = phi i32 [ 0, %8370 ], [ %8400, %8388 ]
  %8381 = phi float* [ %8374, %8370 ], [ %8393, %8388 ]
  %8382 = phi i8* [ %8371, %8370 ], [ %8399, %8388 ]
  %8383 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8379, i64 0, i32 1, i32 1
  %8384 = load i32, i32* %8383, align 4
  %8385 = icmp sgt i32 %8384, 0
  br i1 %8385, label %8402, label %8388

8386:                                             ; preds = %8439
  %8387 = load i32, i32* %8354, align 8
  br label %8388

8388:                                             ; preds = %8386, %8376
  %8389 = phi i32 [ %8377, %8376 ], [ %8387, %8386 ]
  %8390 = phi %"class.blink::IntRect"* [ %8378, %8376 ], [ %8440, %8386 ]
  %8391 = phi %"class.blink::IntRect"* [ %8379, %8376 ], [ %8440, %8386 ]
  %8392 = phi i8* [ %8382, %8376 ], [ %8441, %8386 ]
  %8393 = phi float* [ %8381, %8376 ], [ %8442, %8386 ]
  %8394 = phi i32 [ %8384, %8376 ], [ %8445, %8386 ]
  %8395 = load i32, i32* %8375, align 4
  %8396 = sub nsw i32 %8395, %8394
  %8397 = sext i32 %8396 to i64
  %8398 = mul nsw i64 %8397, %8336
  %8399 = getelementptr inbounds i8, i8* %8392, i64 %8398
  %8400 = add nuw nsw i32 %8380, 1
  %8401 = icmp slt i32 %8400, %8389
  br i1 %8401, label %8376, label %8447

8402:                                             ; preds = %8376, %8439
  %8403 = phi %"class.blink::IntRect"* [ %8440, %8439 ], [ %8378, %8376 ]
  %8404 = phi %"class.blink::IntRect"* [ %8440, %8439 ], [ %8379, %8376 ]
  %8405 = phi i32 [ %8443, %8439 ], [ 0, %8376 ]
  %8406 = phi float* [ %8442, %8439 ], [ %8381, %8376 ]
  %8407 = phi i8* [ %8441, %8439 ], [ %8382, %8376 ]
  %8408 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8404, i64 0, i32 1, i32 0
  %8409 = load i32, i32* %8408, align 4
  %8410 = icmp eq i32 %8409, 0
  br i1 %8410, label %8439, label %8411

8411:                                             ; preds = %8402, %8411
  %8412 = phi i32 [ %8435, %8411 ], [ 0, %8402 ]
  %8413 = phi i8* [ %8433, %8411 ], [ %8407, %8402 ]
  %8414 = phi float* [ %8434, %8411 ], [ %8406, %8402 ]
  %8415 = load i8, i8* %8413, align 1
  %8416 = uitofp i8 %8415 to float
  %8417 = fmul float %8416, 0x3F70101020000000
  store float %8417, float* %8414, align 4
  %8418 = getelementptr inbounds i8, i8* %8413, i64 1
  %8419 = load i8, i8* %8418, align 1
  %8420 = uitofp i8 %8419 to float
  %8421 = fmul float %8420, 0x3F70101020000000
  %8422 = getelementptr inbounds float, float* %8414, i64 1
  store float %8421, float* %8422, align 4
  %8423 = getelementptr inbounds i8, i8* %8413, i64 2
  %8424 = load i8, i8* %8423, align 1
  %8425 = uitofp i8 %8424 to float
  %8426 = fmul float %8425, 0x3F70101020000000
  %8427 = getelementptr inbounds float, float* %8414, i64 2
  store float %8426, float* %8427, align 4
  %8428 = getelementptr inbounds i8, i8* %8413, i64 3
  %8429 = load i8, i8* %8428, align 1
  %8430 = uitofp i8 %8429 to float
  %8431 = fmul float %8430, 0x3F70101020000000
  %8432 = getelementptr inbounds float, float* %8414, i64 3
  store float %8431, float* %8432, align 4
  %8433 = getelementptr inbounds i8, i8* %8413, i64 4
  %8434 = getelementptr inbounds float, float* %8414, i64 4
  %8435 = add nuw i32 %8412, 1
  %8436 = icmp eq i32 %8435, %8409
  br i1 %8436, label %8437, label %8411

8437:                                             ; preds = %8411
  %8438 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8343, align 8
  br label %8439

8439:                                             ; preds = %8437, %8402
  %8440 = phi %"class.blink::IntRect"* [ %8438, %8437 ], [ %8403, %8402 ]
  %8441 = getelementptr inbounds i8, i8* %8407, i64 %8336
  %8442 = getelementptr inbounds float, float* %8406, i64 %8340
  %8443 = add nuw nsw i32 %8405, 1
  %8444 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8440, i64 0, i32 1, i32 1
  %8445 = load i32, i32* %8444, align 4
  %8446 = icmp slt i32 %8443, %8445
  br i1 %8446, label %8402, label %8386

8447:                                             ; preds = %8388, %8368
  %8448 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8448, align 4
  br label %11653

8449:                                             ; preds = %8332
  %8450 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8451 = load i32, i32* %8450, align 8
  %8452 = sext i32 %8451 to i64
  %8453 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8454 = load i32, i32* %8453, align 8
  %8455 = sdiv i32 %8454, 4
  %8456 = sext i32 %8455 to i64
  %8457 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8458 = load i8*, i8** %8457, align 8
  %8459 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8460 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8459, align 8
  %8461 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8460, i64 0, i32 0, i32 1
  %8462 = load i32, i32* %8461, align 4
  %8463 = mul nsw i32 %8462, %8451
  %8464 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8465 = load i32, i32* %8464, align 4
  %8466 = add nsw i32 %8463, %8465
  %8467 = sext i32 %8466 to i64
  %8468 = getelementptr inbounds i8, i8* %8458, i64 %8467
  %8469 = icmp slt i32 %8454, 0
  %8470 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8471 = load i32, i32* %8470, align 8
  %8472 = icmp sgt i32 %8471, 1
  %8473 = and i1 %8469, %8472
  br i1 %8473, label %8474, label %8484

8474:                                             ; preds = %8449
  %8475 = add nsw i32 %8471, -1
  %8476 = sext i32 %8475 to i64
  %8477 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8478 = load i32, i32* %8477, align 4
  %8479 = sext i32 %8478 to i64
  %8480 = mul nsw i64 %8452, %8476
  %8481 = mul i64 %8480, %8479
  %8482 = sub i64 0, %8481
  %8483 = getelementptr inbounds i8, i8* %8468, i64 %8482
  br label %8486

8484:                                             ; preds = %8449
  %8485 = icmp sgt i32 %8471, 0
  br i1 %8485, label %8486, label %8641

8486:                                             ; preds = %8484, %8474
  %8487 = phi i8* [ %8483, %8474 ], [ %8468, %8484 ]
  %8488 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8489 = bitcast i8** %8488 to float**
  %8490 = load float*, float** %8489, align 8
  %8491 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8492 = bitcast i8** %8491 to float**
  %8493 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8494

8494:                                             ; preds = %8506, %8486
  %8495 = phi i32 [ %8471, %8486 ], [ %8507, %8506 ]
  %8496 = phi %"class.blink::IntRect"* [ %8460, %8486 ], [ %8508, %8506 ]
  %8497 = phi %"class.blink::IntRect"* [ %8460, %8486 ], [ %8509, %8506 ]
  %8498 = phi i32 [ 0, %8486 ], [ %8518, %8506 ]
  %8499 = phi float* [ %8490, %8486 ], [ %8511, %8506 ]
  %8500 = phi i8* [ %8487, %8486 ], [ %8517, %8506 ]
  %8501 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8497, i64 0, i32 1, i32 1
  %8502 = load i32, i32* %8501, align 4
  %8503 = icmp sgt i32 %8502, 0
  br i1 %8503, label %8520, label %8506

8504:                                             ; preds = %8633
  %8505 = load i32, i32* %8470, align 8
  br label %8506

8506:                                             ; preds = %8504, %8494
  %8507 = phi i32 [ %8495, %8494 ], [ %8505, %8504 ]
  %8508 = phi %"class.blink::IntRect"* [ %8496, %8494 ], [ %8634, %8504 ]
  %8509 = phi %"class.blink::IntRect"* [ %8497, %8494 ], [ %8634, %8504 ]
  %8510 = phi i8* [ %8500, %8494 ], [ %8635, %8504 ]
  %8511 = phi float* [ %8499, %8494 ], [ %8636, %8504 ]
  %8512 = phi i32 [ %8502, %8494 ], [ %8639, %8504 ]
  %8513 = load i32, i32* %8493, align 4
  %8514 = sub nsw i32 %8513, %8512
  %8515 = sext i32 %8514 to i64
  %8516 = mul nsw i64 %8515, %8452
  %8517 = getelementptr inbounds i8, i8* %8510, i64 %8516
  %8518 = add nuw nsw i32 %8498, 1
  %8519 = icmp slt i32 %8518, %8507
  br i1 %8519, label %8494, label %8641

8520:                                             ; preds = %8494, %8633
  %8521 = phi %"class.blink::IntRect"* [ %8634, %8633 ], [ %8496, %8494 ]
  %8522 = phi %"class.blink::IntRect"* [ %8634, %8633 ], [ %8497, %8494 ]
  %8523 = phi i32 [ %8637, %8633 ], [ 0, %8494 ]
  %8524 = phi float* [ %8636, %8633 ], [ %8499, %8494 ]
  %8525 = phi i8* [ %8635, %8633 ], [ %8500, %8494 ]
  %8526 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8522, i64 0, i32 1, i32 0
  %8527 = load i32, i32* %8526, align 4
  %8528 = icmp eq i32 %8527, 0
  br i1 %8528, label %8633, label %8529

8529:                                             ; preds = %8520
  %8530 = load float*, float** %8492, align 8
  br label %8531

8531:                                             ; preds = %8531, %8529
  %8532 = phi i32 [ %8555, %8531 ], [ 0, %8529 ]
  %8533 = phi i8* [ %8553, %8531 ], [ %8525, %8529 ]
  %8534 = phi float* [ %8554, %8531 ], [ %8530, %8529 ]
  %8535 = load i8, i8* %8533, align 1
  %8536 = uitofp i8 %8535 to float
  %8537 = fmul float %8536, 0x3F70101020000000
  store float %8537, float* %8534, align 4
  %8538 = getelementptr inbounds i8, i8* %8533, i64 1
  %8539 = load i8, i8* %8538, align 1
  %8540 = uitofp i8 %8539 to float
  %8541 = fmul float %8540, 0x3F70101020000000
  %8542 = getelementptr inbounds float, float* %8534, i64 1
  store float %8541, float* %8542, align 4
  %8543 = getelementptr inbounds i8, i8* %8533, i64 2
  %8544 = load i8, i8* %8543, align 1
  %8545 = uitofp i8 %8544 to float
  %8546 = fmul float %8545, 0x3F70101020000000
  %8547 = getelementptr inbounds float, float* %8534, i64 2
  store float %8546, float* %8547, align 4
  %8548 = getelementptr inbounds i8, i8* %8533, i64 3
  %8549 = load i8, i8* %8548, align 1
  %8550 = uitofp i8 %8549 to float
  %8551 = fmul float %8550, 0x3F70101020000000
  %8552 = getelementptr inbounds float, float* %8534, i64 3
  store float %8551, float* %8552, align 4
  %8553 = getelementptr inbounds i8, i8* %8533, i64 4
  %8554 = getelementptr inbounds float, float* %8534, i64 4
  %8555 = add nuw i32 %8532, 1
  %8556 = icmp eq i32 %8555, %8527
  br i1 %8556, label %8557, label %8531

8557:                                             ; preds = %8531
  %8558 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8459, align 8
  %8559 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8558, i64 0, i32 1, i32 0
  %8560 = load i32, i32* %8559, align 4
  %8561 = icmp eq i32 %8560, 0
  br i1 %8561, label %8633, label %8562

8562:                                             ; preds = %8557
  %8563 = load float*, float** %8492, align 8
  %8564 = and i32 %8560, 1
  %8565 = icmp eq i32 %8560, 1
  br i1 %8565, label %8610, label %8566

8566:                                             ; preds = %8562
  %8567 = sub i32 %8560, %8564
  br label %8568

8568:                                             ; preds = %8568, %8566
  %8569 = phi float* [ %8563, %8566 ], [ %8606, %8568 ]
  %8570 = phi float* [ %8524, %8566 ], [ %8607, %8568 ]
  %8571 = phi i32 [ %8567, %8566 ], [ %8608, %8568 ]
  %8572 = getelementptr inbounds float, float* %8569, i64 3
  %8573 = load float, float* %8572, align 4
  %8574 = load float, float* %8569, align 4
  %8575 = fmul float %8573, %8574
  store float %8575, float* %8570, align 4
  %8576 = getelementptr inbounds float, float* %8569, i64 1
  %8577 = load float, float* %8576, align 4
  %8578 = fmul float %8573, %8577
  %8579 = getelementptr inbounds float, float* %8570, i64 1
  store float %8578, float* %8579, align 4
  %8580 = getelementptr inbounds float, float* %8569, i64 2
  %8581 = load float, float* %8580, align 4
  %8582 = fmul float %8573, %8581
  %8583 = getelementptr inbounds float, float* %8570, i64 2
  store float %8582, float* %8583, align 4
  %8584 = bitcast float* %8572 to i32*
  %8585 = load i32, i32* %8584, align 4
  %8586 = getelementptr inbounds float, float* %8570, i64 3
  %8587 = bitcast float* %8586 to i32*
  store i32 %8585, i32* %8587, align 4
  %8588 = getelementptr inbounds float, float* %8569, i64 4
  %8589 = getelementptr inbounds float, float* %8570, i64 4
  %8590 = getelementptr inbounds float, float* %8569, i64 7
  %8591 = load float, float* %8590, align 4
  %8592 = load float, float* %8588, align 4
  %8593 = fmul float %8591, %8592
  store float %8593, float* %8589, align 4
  %8594 = getelementptr inbounds float, float* %8569, i64 5
  %8595 = load float, float* %8594, align 4
  %8596 = fmul float %8591, %8595
  %8597 = getelementptr inbounds float, float* %8570, i64 5
  store float %8596, float* %8597, align 4
  %8598 = getelementptr inbounds float, float* %8569, i64 6
  %8599 = load float, float* %8598, align 4
  %8600 = fmul float %8591, %8599
  %8601 = getelementptr inbounds float, float* %8570, i64 6
  store float %8600, float* %8601, align 4
  %8602 = bitcast float* %8590 to i32*
  %8603 = load i32, i32* %8602, align 4
  %8604 = getelementptr inbounds float, float* %8570, i64 7
  %8605 = bitcast float* %8604 to i32*
  store i32 %8603, i32* %8605, align 4
  %8606 = getelementptr inbounds float, float* %8569, i64 8
  %8607 = getelementptr inbounds float, float* %8570, i64 8
  %8608 = add i32 %8571, -2
  %8609 = icmp eq i32 %8608, 0
  br i1 %8609, label %8610, label %8568

8610:                                             ; preds = %8568, %8562
  %8611 = phi float* [ %8563, %8562 ], [ %8606, %8568 ]
  %8612 = phi float* [ %8524, %8562 ], [ %8607, %8568 ]
  %8613 = icmp eq i32 %8564, 0
  br i1 %8613, label %8631, label %8614

8614:                                             ; preds = %8610
  %8615 = getelementptr inbounds float, float* %8611, i64 3
  %8616 = load float, float* %8615, align 4
  %8617 = load float, float* %8611, align 4
  %8618 = fmul float %8616, %8617
  store float %8618, float* %8612, align 4
  %8619 = getelementptr inbounds float, float* %8611, i64 1
  %8620 = load float, float* %8619, align 4
  %8621 = fmul float %8616, %8620
  %8622 = getelementptr inbounds float, float* %8612, i64 1
  store float %8621, float* %8622, align 4
  %8623 = getelementptr inbounds float, float* %8611, i64 2
  %8624 = load float, float* %8623, align 4
  %8625 = fmul float %8616, %8624
  %8626 = getelementptr inbounds float, float* %8612, i64 2
  store float %8625, float* %8626, align 4
  %8627 = bitcast float* %8615 to i32*
  %8628 = load i32, i32* %8627, align 4
  %8629 = getelementptr inbounds float, float* %8612, i64 3
  %8630 = bitcast float* %8629 to i32*
  store i32 %8628, i32* %8630, align 4
  br label %8631

8631:                                             ; preds = %8610, %8614
  %8632 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8459, align 8
  br label %8633

8633:                                             ; preds = %8631, %8557, %8520
  %8634 = phi %"class.blink::IntRect"* [ %8632, %8631 ], [ %8558, %8557 ], [ %8521, %8520 ]
  %8635 = getelementptr inbounds i8, i8* %8525, i64 %8452
  %8636 = getelementptr inbounds float, float* %8524, i64 %8456
  %8637 = add nuw nsw i32 %8523, 1
  %8638 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8634, i64 0, i32 1, i32 1
  %8639 = load i32, i32* %8638, align 4
  %8640 = icmp slt i32 %8637, %8639
  br i1 %8640, label %8520, label %8504

8641:                                             ; preds = %8506, %8484
  %8642 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8642, align 4
  br label %11653

8643:                                             ; preds = %8332
  %8644 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8645 = load i32, i32* %8644, align 8
  %8646 = sext i32 %8645 to i64
  %8647 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8648 = load i32, i32* %8647, align 8
  %8649 = sdiv i32 %8648, 4
  %8650 = sext i32 %8649 to i64
  %8651 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8652 = load i8*, i8** %8651, align 8
  %8653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8654 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8653, align 8
  %8655 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8654, i64 0, i32 0, i32 1
  %8656 = load i32, i32* %8655, align 4
  %8657 = mul nsw i32 %8656, %8645
  %8658 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8659 = load i32, i32* %8658, align 4
  %8660 = add nsw i32 %8657, %8659
  %8661 = sext i32 %8660 to i64
  %8662 = getelementptr inbounds i8, i8* %8652, i64 %8661
  %8663 = icmp slt i32 %8648, 0
  %8664 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8665 = load i32, i32* %8664, align 8
  %8666 = icmp sgt i32 %8665, 1
  %8667 = and i1 %8663, %8666
  br i1 %8667, label %8668, label %8678

8668:                                             ; preds = %8643
  %8669 = add nsw i32 %8665, -1
  %8670 = sext i32 %8669 to i64
  %8671 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8672 = load i32, i32* %8671, align 4
  %8673 = sext i32 %8672 to i64
  %8674 = mul nsw i64 %8646, %8670
  %8675 = mul i64 %8674, %8673
  %8676 = sub i64 0, %8675
  %8677 = getelementptr inbounds i8, i8* %8662, i64 %8676
  br label %8680

8678:                                             ; preds = %8643
  %8679 = icmp sgt i32 %8665, 0
  br i1 %8679, label %8680, label %8795

8680:                                             ; preds = %8678, %8668
  %8681 = phi i8* [ %8677, %8668 ], [ %8662, %8678 ]
  %8682 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8683 = bitcast i8** %8682 to float**
  %8684 = load float*, float** %8683, align 8
  %8685 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8686 = bitcast i8** %8685 to float**
  %8687 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8688

8688:                                             ; preds = %8700, %8680
  %8689 = phi i32 [ %8665, %8680 ], [ %8701, %8700 ]
  %8690 = phi %"class.blink::IntRect"* [ %8654, %8680 ], [ %8702, %8700 ]
  %8691 = phi %"class.blink::IntRect"* [ %8654, %8680 ], [ %8703, %8700 ]
  %8692 = phi i32 [ 0, %8680 ], [ %8712, %8700 ]
  %8693 = phi float* [ %8684, %8680 ], [ %8705, %8700 ]
  %8694 = phi i8* [ %8681, %8680 ], [ %8711, %8700 ]
  %8695 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8691, i64 0, i32 1, i32 1
  %8696 = load i32, i32* %8695, align 4
  %8697 = icmp sgt i32 %8696, 0
  br i1 %8697, label %8714, label %8700

8698:                                             ; preds = %8787
  %8699 = load i32, i32* %8664, align 8
  br label %8700

8700:                                             ; preds = %8698, %8688
  %8701 = phi i32 [ %8689, %8688 ], [ %8699, %8698 ]
  %8702 = phi %"class.blink::IntRect"* [ %8690, %8688 ], [ %8788, %8698 ]
  %8703 = phi %"class.blink::IntRect"* [ %8691, %8688 ], [ %8788, %8698 ]
  %8704 = phi i8* [ %8694, %8688 ], [ %8789, %8698 ]
  %8705 = phi float* [ %8693, %8688 ], [ %8790, %8698 ]
  %8706 = phi i32 [ %8696, %8688 ], [ %8793, %8698 ]
  %8707 = load i32, i32* %8687, align 4
  %8708 = sub nsw i32 %8707, %8706
  %8709 = sext i32 %8708 to i64
  %8710 = mul nsw i64 %8709, %8646
  %8711 = getelementptr inbounds i8, i8* %8704, i64 %8710
  %8712 = add nuw nsw i32 %8692, 1
  %8713 = icmp slt i32 %8712, %8701
  br i1 %8713, label %8688, label %8795

8714:                                             ; preds = %8688, %8787
  %8715 = phi %"class.blink::IntRect"* [ %8788, %8787 ], [ %8690, %8688 ]
  %8716 = phi %"class.blink::IntRect"* [ %8788, %8787 ], [ %8691, %8688 ]
  %8717 = phi i32 [ %8791, %8787 ], [ 0, %8688 ]
  %8718 = phi float* [ %8790, %8787 ], [ %8693, %8688 ]
  %8719 = phi i8* [ %8789, %8787 ], [ %8694, %8688 ]
  %8720 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8716, i64 0, i32 1, i32 0
  %8721 = load i32, i32* %8720, align 4
  %8722 = icmp eq i32 %8721, 0
  br i1 %8722, label %8787, label %8723

8723:                                             ; preds = %8714
  %8724 = load float*, float** %8686, align 8
  br label %8725

8725:                                             ; preds = %8725, %8723
  %8726 = phi i32 [ %8749, %8725 ], [ 0, %8723 ]
  %8727 = phi i8* [ %8747, %8725 ], [ %8719, %8723 ]
  %8728 = phi float* [ %8748, %8725 ], [ %8724, %8723 ]
  %8729 = load i8, i8* %8727, align 1
  %8730 = uitofp i8 %8729 to float
  %8731 = fmul float %8730, 0x3F70101020000000
  store float %8731, float* %8728, align 4
  %8732 = getelementptr inbounds i8, i8* %8727, i64 1
  %8733 = load i8, i8* %8732, align 1
  %8734 = uitofp i8 %8733 to float
  %8735 = fmul float %8734, 0x3F70101020000000
  %8736 = getelementptr inbounds float, float* %8728, i64 1
  store float %8735, float* %8736, align 4
  %8737 = getelementptr inbounds i8, i8* %8727, i64 2
  %8738 = load i8, i8* %8737, align 1
  %8739 = uitofp i8 %8738 to float
  %8740 = fmul float %8739, 0x3F70101020000000
  %8741 = getelementptr inbounds float, float* %8728, i64 2
  store float %8740, float* %8741, align 4
  %8742 = getelementptr inbounds i8, i8* %8727, i64 3
  %8743 = load i8, i8* %8742, align 1
  %8744 = uitofp i8 %8743 to float
  %8745 = fmul float %8744, 0x3F70101020000000
  %8746 = getelementptr inbounds float, float* %8728, i64 3
  store float %8745, float* %8746, align 4
  %8747 = getelementptr inbounds i8, i8* %8727, i64 4
  %8748 = getelementptr inbounds float, float* %8728, i64 4
  %8749 = add nuw i32 %8726, 1
  %8750 = icmp eq i32 %8749, %8721
  br i1 %8750, label %8751, label %8725

8751:                                             ; preds = %8725
  %8752 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8653, align 8
  %8753 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8752, i64 0, i32 1, i32 0
  %8754 = load i32, i32* %8753, align 4
  %8755 = icmp eq i32 %8754, 0
  br i1 %8755, label %8787, label %8756

8756:                                             ; preds = %8751
  %8757 = load float*, float** %8686, align 8
  br label %8758

8758:                                             ; preds = %8758, %8756
  %8759 = phi i32 [ %8783, %8758 ], [ 0, %8756 ]
  %8760 = phi float* [ %8781, %8758 ], [ %8757, %8756 ]
  %8761 = phi float* [ %8782, %8758 ], [ %8718, %8756 ]
  %8762 = getelementptr inbounds float, float* %8760, i64 3
  %8763 = load float, float* %8762, align 4
  %8764 = fcmp une float %8763, 0.000000e+00
  %8765 = fdiv float 1.000000e+00, %8763
  %8766 = select i1 %8764, float %8765, float 1.000000e+00
  %8767 = load float, float* %8760, align 4
  %8768 = fmul float %8767, %8766
  store float %8768, float* %8761, align 4
  %8769 = getelementptr inbounds float, float* %8760, i64 1
  %8770 = load float, float* %8769, align 4
  %8771 = fmul float %8766, %8770
  %8772 = getelementptr inbounds float, float* %8761, i64 1
  store float %8771, float* %8772, align 4
  %8773 = getelementptr inbounds float, float* %8760, i64 2
  %8774 = load float, float* %8773, align 4
  %8775 = fmul float %8766, %8774
  %8776 = getelementptr inbounds float, float* %8761, i64 2
  store float %8775, float* %8776, align 4
  %8777 = bitcast float* %8762 to i32*
  %8778 = load i32, i32* %8777, align 4
  %8779 = getelementptr inbounds float, float* %8761, i64 3
  %8780 = bitcast float* %8779 to i32*
  store i32 %8778, i32* %8780, align 4
  %8781 = getelementptr inbounds float, float* %8760, i64 4
  %8782 = getelementptr inbounds float, float* %8761, i64 4
  %8783 = add nuw i32 %8759, 1
  %8784 = icmp eq i32 %8783, %8754
  br i1 %8784, label %8785, label %8758

8785:                                             ; preds = %8758
  %8786 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8653, align 8
  br label %8787

8787:                                             ; preds = %8785, %8751, %8714
  %8788 = phi %"class.blink::IntRect"* [ %8786, %8785 ], [ %8752, %8751 ], [ %8715, %8714 ]
  %8789 = getelementptr inbounds i8, i8* %8719, i64 %8646
  %8790 = getelementptr inbounds float, float* %8718, i64 %8650
  %8791 = add nuw nsw i32 %8717, 1
  %8792 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8788, i64 0, i32 1, i32 1
  %8793 = load i32, i32* %8792, align 4
  %8794 = icmp slt i32 %8791, %8793
  br i1 %8794, label %8714, label %8698

8795:                                             ; preds = %8700, %8678
  %8796 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8796, align 4
  br label %11653

8797:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %8798
    i32 1, label %8800
  ]

8798:                                             ; preds = %8797
  %8799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8799, align 4
  br label %11653

8800:                                             ; preds = %8797
  %8801 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8802 = load i32, i32* %8801, align 8
  %8803 = sext i32 %8802 to i64
  %8804 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8805 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8804, align 8
  %8806 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8807 = load i32, i32* %8806, align 8
  %8808 = icmp sgt i32 %8807, 0
  br i1 %8808, label %8809, label %8957

8809:                                             ; preds = %8800
  %8810 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8811 = load i8*, i8** %8810, align 8
  %8812 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %8813

8813:                                             ; preds = %8824, %8809
  %8814 = phi i32 [ %8807, %8809 ], [ %8825, %8824 ]
  %8815 = phi %"class.blink::IntRect"* [ %8805, %8809 ], [ %8826, %8824 ]
  %8816 = phi %"class.blink::IntRect"* [ %8805, %8809 ], [ %8827, %8824 ]
  %8817 = phi i32 [ 0, %8809 ], [ %8829, %8824 ]
  %8818 = phi i8* [ %8811, %8809 ], [ %8828, %8824 ]
  %8819 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8816, i64 0, i32 1, i32 1
  %8820 = load i32, i32* %8819, align 4
  %8821 = icmp sgt i32 %8820, 0
  br i1 %8821, label %8831, label %8824

8822:                                             ; preds = %8949
  %8823 = load i32, i32* %8806, align 8
  br label %8824

8824:                                             ; preds = %8822, %8813
  %8825 = phi i32 [ %8814, %8813 ], [ %8823, %8822 ]
  %8826 = phi %"class.blink::IntRect"* [ %8815, %8813 ], [ %8950, %8822 ]
  %8827 = phi %"class.blink::IntRect"* [ %8816, %8813 ], [ %8950, %8822 ]
  %8828 = phi i8* [ %8818, %8813 ], [ %8951, %8822 ]
  %8829 = add nuw nsw i32 %8817, 1
  %8830 = icmp slt i32 %8829, %8825
  br i1 %8830, label %8813, label %8957

8831:                                             ; preds = %8813, %8949
  %8832 = phi i64 [ %8956, %8949 ], [ 0, %8813 ]
  %8833 = phi %"class.blink::IntRect"* [ %8950, %8949 ], [ %8815, %8813 ]
  %8834 = phi %"class.blink::IntRect"* [ %8950, %8949 ], [ %8816, %8813 ]
  %8835 = phi i32 [ %8952, %8949 ], [ 0, %8813 ]
  %8836 = phi i8* [ %8951, %8949 ], [ %8818, %8813 ]
  %8837 = mul i64 %8832, %8803
  %8838 = getelementptr i8, i8* %8818, i64 %8837
  %8839 = add i64 %8837, 4
  %8840 = getelementptr i8, i8* %8818, i64 %8839
  %8841 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8834, i64 0, i32 1, i32 0
  %8842 = load i32, i32* %8841, align 4
  %8843 = icmp eq i32 %8842, 0
  br i1 %8843, label %8949, label %8844

8844:                                             ; preds = %8831
  %8845 = load i8*, i8** %8812, align 8
  %8846 = add i32 %8842, -1
  %8847 = zext i32 %8846 to i64
  %8848 = add nuw nsw i64 %8847, 1
  %8849 = icmp ult i64 %8848, 16
  br i1 %8849, label %8906, label %8850

8850:                                             ; preds = %8844
  %8851 = add i32 %8842, -1
  %8852 = zext i32 %8851 to i64
  %8853 = shl nuw nsw i64 %8852, 2
  %8854 = getelementptr i8, i8* %8840, i64 %8853
  %8855 = getelementptr i8, i8* %8845, i64 4
  %8856 = getelementptr i8, i8* %8855, i64 %8853
  %8857 = icmp ult i8* %8838, %8856
  %8858 = icmp ult i8* %8845, %8854
  %8859 = and i1 %8857, %8858
  br i1 %8859, label %8906, label %8860

8860:                                             ; preds = %8850
  %8861 = and i64 %8848, 8589934576
  %8862 = shl nuw nsw i64 %8861, 2
  %8863 = getelementptr i8, i8* %8845, i64 %8862
  %8864 = trunc i64 %8861 to i32
  %8865 = shl nuw nsw i64 %8861, 2
  %8866 = getelementptr i8, i8* %8836, i64 %8865
  br label %8867

8867:                                             ; preds = %8867, %8860
  %8868 = phi i64 [ 0, %8860 ], [ %8902, %8867 ]
  %8869 = shl i64 %8868, 2
  %8870 = shl i64 %8868, 2
  %8871 = getelementptr inbounds i8, i8* %8845, i64 %8869
  %8872 = bitcast i8* %8871 to <64 x i8>*
  %8873 = load <64 x i8>, <64 x i8>* %8872, align 1
  %8874 = shufflevector <64 x i8> %8873, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %8875 = shufflevector <64 x i8> %8873, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %8876 = shufflevector <64 x i8> %8873, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %8877 = shufflevector <64 x i8> %8873, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %8878 = icmp eq <16 x i8> %8877, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %8879 = select <16 x i1> %8878, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %8877
  %8880 = sitofp <16 x i8> %8879 to <16 x float>
  %8881 = fdiv <16 x float> %8880, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %8882 = icmp eq <16 x i8> %8874, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %8883 = select <16 x i1> %8882, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %8874
  %8884 = sitofp <16 x i8> %8883 to <16 x float>
  %8885 = fmul <16 x float> %8881, %8884
  %8886 = fptosi <16 x float> %8885 to <16 x i8>
  %8887 = icmp eq <16 x i8> %8875, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %8888 = select <16 x i1> %8887, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %8875
  %8889 = sitofp <16 x i8> %8888 to <16 x float>
  %8890 = fmul <16 x float> %8881, %8889
  %8891 = fptosi <16 x float> %8890 to <16 x i8>
  %8892 = icmp eq <16 x i8> %8876, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %8893 = select <16 x i1> %8892, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %8876
  %8894 = sitofp <16 x i8> %8893 to <16 x float>
  %8895 = fmul <16 x float> %8881, %8894
  %8896 = fptosi <16 x float> %8895 to <16 x i8>
  %8897 = getelementptr inbounds i8, i8* %8836, i64 %8870
  %8898 = bitcast i8* %8897 to <64 x i8>*
  %8899 = shufflevector <16 x i8> %8886, <16 x i8> %8891, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8900 = shufflevector <16 x i8> %8896, <16 x i8> %8879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8901 = shufflevector <32 x i8> %8899, <32 x i8> %8900, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %8901, <64 x i8>* %8898, align 1
  %8902 = add i64 %8868, 16
  %8903 = icmp eq i64 %8902, %8861
  br i1 %8903, label %8904, label %8867, !llvm.loop !233

8904:                                             ; preds = %8867
  %8905 = icmp eq i64 %8848, %8861
  br i1 %8905, label %8947, label %8906

8906:                                             ; preds = %8904, %8850, %8844
  %8907 = phi i8* [ %8845, %8850 ], [ %8845, %8844 ], [ %8863, %8904 ]
  %8908 = phi i32 [ 0, %8850 ], [ 0, %8844 ], [ %8864, %8904 ]
  %8909 = phi i8* [ %8836, %8850 ], [ %8836, %8844 ], [ %8866, %8904 ]
  br label %8910

8910:                                             ; preds = %8906, %8910
  %8911 = phi i8* [ %8943, %8910 ], [ %8907, %8906 ]
  %8912 = phi i32 [ %8945, %8910 ], [ %8908, %8906 ]
  %8913 = phi i8* [ %8944, %8910 ], [ %8909, %8906 ]
  %8914 = getelementptr inbounds i8, i8* %8911, i64 3
  %8915 = load i8, i8* %8914, align 1
  %8916 = icmp eq i8 %8915, -128
  %8917 = select i1 %8916, i8 -127, i8 %8915
  %8918 = getelementptr inbounds i8, i8* %8913, i64 3
  store i8 %8917, i8* %8918, align 1
  %8919 = sitofp i8 %8917 to float
  %8920 = fdiv float %8919, 1.270000e+02
  %8921 = load i8, i8* %8911, align 1
  %8922 = icmp eq i8 %8921, -128
  %8923 = select i1 %8922, i8 -127, i8 %8921
  %8924 = sitofp i8 %8923 to float
  %8925 = fmul float %8920, %8924
  %8926 = fptosi float %8925 to i8
  store i8 %8926, i8* %8913, align 1
  %8927 = getelementptr inbounds i8, i8* %8911, i64 1
  %8928 = load i8, i8* %8927, align 1
  %8929 = icmp eq i8 %8928, -128
  %8930 = select i1 %8929, i8 -127, i8 %8928
  %8931 = sitofp i8 %8930 to float
  %8932 = fmul float %8920, %8931
  %8933 = fptosi float %8932 to i8
  %8934 = getelementptr inbounds i8, i8* %8913, i64 1
  store i8 %8933, i8* %8934, align 1
  %8935 = getelementptr inbounds i8, i8* %8911, i64 2
  %8936 = load i8, i8* %8935, align 1
  %8937 = icmp eq i8 %8936, -128
  %8938 = select i1 %8937, i8 -127, i8 %8936
  %8939 = sitofp i8 %8938 to float
  %8940 = fmul float %8920, %8939
  %8941 = fptosi float %8940 to i8
  %8942 = getelementptr inbounds i8, i8* %8913, i64 2
  store i8 %8941, i8* %8942, align 1
  %8943 = getelementptr inbounds i8, i8* %8911, i64 4
  %8944 = getelementptr inbounds i8, i8* %8913, i64 4
  %8945 = add nuw i32 %8912, 1
  %8946 = icmp eq i32 %8945, %8842
  br i1 %8946, label %8947, label %8910, !llvm.loop !234

8947:                                             ; preds = %8910, %8904
  %8948 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8804, align 8
  br label %8949

8949:                                             ; preds = %8947, %8831
  %8950 = phi %"class.blink::IntRect"* [ %8948, %8947 ], [ %8833, %8831 ]
  %8951 = getelementptr inbounds i8, i8* %8836, i64 %8803
  %8952 = add nuw nsw i32 %8835, 1
  %8953 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8950, i64 0, i32 1, i32 1
  %8954 = load i32, i32* %8953, align 4
  %8955 = icmp slt i32 %8952, %8954
  %8956 = add i64 %8832, 1
  br i1 %8955, label %8831, label %8822

8957:                                             ; preds = %8824, %8800
  %8958 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8958, align 4
  br label %11653

8959:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %8960
    i32 1, label %8962
  ]

8960:                                             ; preds = %8959
  %8961 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8961, align 4
  br label %11653

8962:                                             ; preds = %8959
  %8963 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8964 = load i32, i32* %8963, align 8
  %8965 = sdiv i32 %8964, 2
  %8966 = sext i32 %8965 to i64
  %8967 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8968 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8967, align 8
  %8969 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8970 = load i32, i32* %8969, align 8
  %8971 = icmp sgt i32 %8970, 0
  br i1 %8971, label %8972, label %9045

8972:                                             ; preds = %8962
  %8973 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8974 = bitcast i8** %8973 to i16**
  %8975 = load i16*, i16** %8974, align 8
  %8976 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8977 = bitcast i8** %8976 to i16**
  br label %8978

8978:                                             ; preds = %8989, %8972
  %8979 = phi i32 [ %8970, %8972 ], [ %8990, %8989 ]
  %8980 = phi %"class.blink::IntRect"* [ %8968, %8972 ], [ %8991, %8989 ]
  %8981 = phi %"class.blink::IntRect"* [ %8968, %8972 ], [ %8992, %8989 ]
  %8982 = phi i32 [ 0, %8972 ], [ %8994, %8989 ]
  %8983 = phi i16* [ %8975, %8972 ], [ %8993, %8989 ]
  %8984 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8981, i64 0, i32 1, i32 1
  %8985 = load i32, i32* %8984, align 4
  %8986 = icmp sgt i32 %8985, 0
  br i1 %8986, label %8996, label %8989

8987:                                             ; preds = %9038
  %8988 = load i32, i32* %8969, align 8
  br label %8989

8989:                                             ; preds = %8987, %8978
  %8990 = phi i32 [ %8979, %8978 ], [ %8988, %8987 ]
  %8991 = phi %"class.blink::IntRect"* [ %8980, %8978 ], [ %9039, %8987 ]
  %8992 = phi %"class.blink::IntRect"* [ %8981, %8978 ], [ %9039, %8987 ]
  %8993 = phi i16* [ %8983, %8978 ], [ %9040, %8987 ]
  %8994 = add nuw nsw i32 %8982, 1
  %8995 = icmp slt i32 %8994, %8990
  br i1 %8995, label %8978, label %9045

8996:                                             ; preds = %8978, %9038
  %8997 = phi %"class.blink::IntRect"* [ %9039, %9038 ], [ %8980, %8978 ]
  %8998 = phi %"class.blink::IntRect"* [ %9039, %9038 ], [ %8981, %8978 ]
  %8999 = phi i32 [ %9041, %9038 ], [ 0, %8978 ]
  %9000 = phi i16* [ %9040, %9038 ], [ %8983, %8978 ]
  %9001 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8998, i64 0, i32 1, i32 0
  %9002 = load i32, i32* %9001, align 4
  %9003 = icmp eq i32 %9002, 0
  br i1 %9003, label %9038, label %9004

9004:                                             ; preds = %8996
  %9005 = load i16*, i16** %8977, align 8
  br label %9006

9006:                                             ; preds = %9006, %9004
  %9007 = phi i16* [ %9032, %9006 ], [ %9005, %9004 ]
  %9008 = phi i32 [ %9034, %9006 ], [ 0, %9004 ]
  %9009 = phi i16* [ %9033, %9006 ], [ %9000, %9004 ]
  %9010 = getelementptr inbounds i16, i16* %9007, i64 3
  %9011 = load i16, i16* %9010, align 2
  %9012 = uitofp i16 %9011 to float
  %9013 = fdiv float %9012, 6.553500e+04
  %9014 = load i16, i16* %9007, align 2
  %9015 = uitofp i16 %9014 to float
  %9016 = fmul float %9013, %9015
  %9017 = fptoui float %9016 to i16
  store i16 %9017, i16* %9009, align 2
  %9018 = getelementptr inbounds i16, i16* %9007, i64 1
  %9019 = load i16, i16* %9018, align 2
  %9020 = uitofp i16 %9019 to float
  %9021 = fmul float %9013, %9020
  %9022 = fptoui float %9021 to i16
  %9023 = getelementptr inbounds i16, i16* %9009, i64 1
  store i16 %9022, i16* %9023, align 2
  %9024 = getelementptr inbounds i16, i16* %9007, i64 2
  %9025 = load i16, i16* %9024, align 2
  %9026 = uitofp i16 %9025 to float
  %9027 = fmul float %9013, %9026
  %9028 = fptoui float %9027 to i16
  %9029 = getelementptr inbounds i16, i16* %9009, i64 2
  store i16 %9028, i16* %9029, align 2
  %9030 = load i16, i16* %9010, align 2
  %9031 = getelementptr inbounds i16, i16* %9009, i64 3
  store i16 %9030, i16* %9031, align 2
  %9032 = getelementptr inbounds i16, i16* %9007, i64 4
  %9033 = getelementptr inbounds i16, i16* %9009, i64 4
  %9034 = add nuw i32 %9008, 1
  %9035 = icmp eq i32 %9034, %9002
  br i1 %9035, label %9036, label %9006

9036:                                             ; preds = %9006
  %9037 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8967, align 8
  br label %9038

9038:                                             ; preds = %9036, %8996
  %9039 = phi %"class.blink::IntRect"* [ %9037, %9036 ], [ %8997, %8996 ]
  %9040 = getelementptr inbounds i16, i16* %9000, i64 %8966
  %9041 = add nuw nsw i32 %8999, 1
  %9042 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9039, i64 0, i32 1, i32 1
  %9043 = load i32, i32* %9042, align 4
  %9044 = icmp slt i32 %9041, %9043
  br i1 %9044, label %8996, label %8987

9045:                                             ; preds = %8989, %8962
  %9046 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9046, align 4
  br label %11653

9047:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %9048
    i32 1, label %9050
  ]

9048:                                             ; preds = %9047
  %9049 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9049, align 4
  br label %11653

9050:                                             ; preds = %9047
  %9051 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9052 = load i32, i32* %9051, align 8
  %9053 = sdiv i32 %9052, 2
  %9054 = sext i32 %9053 to i64
  %9055 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9056 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9055, align 8
  %9057 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9058 = load i32, i32* %9057, align 8
  %9059 = icmp sgt i32 %9058, 0
  br i1 %9059, label %9060, label %9210

9060:                                             ; preds = %9050
  %9061 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9062 = bitcast i8** %9061 to i16**
  %9063 = load i16*, i16** %9062, align 8
  %9064 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9065 = bitcast i8** %9064 to i16**
  br label %9066

9066:                                             ; preds = %9077, %9060
  %9067 = phi i32 [ %9058, %9060 ], [ %9078, %9077 ]
  %9068 = phi %"class.blink::IntRect"* [ %9056, %9060 ], [ %9079, %9077 ]
  %9069 = phi %"class.blink::IntRect"* [ %9056, %9060 ], [ %9080, %9077 ]
  %9070 = phi i32 [ 0, %9060 ], [ %9082, %9077 ]
  %9071 = phi i16* [ %9063, %9060 ], [ %9081, %9077 ]
  %9072 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9069, i64 0, i32 1, i32 1
  %9073 = load i32, i32* %9072, align 4
  %9074 = icmp sgt i32 %9073, 0
  br i1 %9074, label %9084, label %9077

9075:                                             ; preds = %9202
  %9076 = load i32, i32* %9057, align 8
  br label %9077

9077:                                             ; preds = %9075, %9066
  %9078 = phi i32 [ %9067, %9066 ], [ %9076, %9075 ]
  %9079 = phi %"class.blink::IntRect"* [ %9068, %9066 ], [ %9203, %9075 ]
  %9080 = phi %"class.blink::IntRect"* [ %9069, %9066 ], [ %9203, %9075 ]
  %9081 = phi i16* [ %9071, %9066 ], [ %9204, %9075 ]
  %9082 = add nuw nsw i32 %9070, 1
  %9083 = icmp slt i32 %9082, %9078
  br i1 %9083, label %9066, label %9210

9084:                                             ; preds = %9066, %9202
  %9085 = phi i64 [ %9209, %9202 ], [ 0, %9066 ]
  %9086 = phi %"class.blink::IntRect"* [ %9203, %9202 ], [ %9068, %9066 ]
  %9087 = phi %"class.blink::IntRect"* [ %9203, %9202 ], [ %9069, %9066 ]
  %9088 = phi i32 [ %9205, %9202 ], [ 0, %9066 ]
  %9089 = phi i16* [ %9204, %9202 ], [ %9071, %9066 ]
  %9090 = mul i64 %9085, %9054
  %9091 = getelementptr i16, i16* %9071, i64 %9090
  %9092 = add i64 %9090, 4
  %9093 = getelementptr i16, i16* %9071, i64 %9092
  %9094 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9087, i64 0, i32 1, i32 0
  %9095 = load i32, i32* %9094, align 4
  %9096 = icmp eq i32 %9095, 0
  br i1 %9096, label %9202, label %9097

9097:                                             ; preds = %9084
  %9098 = load i16*, i16** %9065, align 8
  %9099 = add i32 %9095, -1
  %9100 = zext i32 %9099 to i64
  %9101 = add nuw nsw i64 %9100, 1
  %9102 = icmp ult i64 %9101, 4
  br i1 %9102, label %9159, label %9103

9103:                                             ; preds = %9097
  %9104 = add i32 %9095, -1
  %9105 = zext i32 %9104 to i64
  %9106 = shl nuw nsw i64 %9105, 2
  %9107 = getelementptr i16, i16* %9093, i64 %9106
  %9108 = getelementptr i16, i16* %9098, i64 4
  %9109 = getelementptr i16, i16* %9108, i64 %9106
  %9110 = icmp ult i16* %9091, %9109
  %9111 = icmp ult i16* %9098, %9107
  %9112 = and i1 %9110, %9111
  br i1 %9112, label %9159, label %9113

9113:                                             ; preds = %9103
  %9114 = and i64 %9101, 8589934588
  %9115 = shl nuw nsw i64 %9114, 2
  %9116 = getelementptr i16, i16* %9098, i64 %9115
  %9117 = trunc i64 %9114 to i32
  %9118 = shl nuw nsw i64 %9114, 2
  %9119 = getelementptr i16, i16* %9089, i64 %9118
  br label %9120

9120:                                             ; preds = %9120, %9113
  %9121 = phi i64 [ 0, %9113 ], [ %9155, %9120 ]
  %9122 = shl i64 %9121, 2
  %9123 = shl i64 %9121, 2
  %9124 = getelementptr inbounds i16, i16* %9098, i64 %9122
  %9125 = bitcast i16* %9124 to <16 x i16>*
  %9126 = load <16 x i16>, <16 x i16>* %9125, align 2
  %9127 = shufflevector <16 x i16> %9126, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %9128 = shufflevector <16 x i16> %9126, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %9129 = shufflevector <16 x i16> %9126, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %9130 = shufflevector <16 x i16> %9126, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %9131 = icmp eq <4 x i16> %9130, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %9132 = select <4 x i1> %9131, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %9130
  %9133 = sitofp <4 x i16> %9132 to <4 x float>
  %9134 = fdiv <4 x float> %9133, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %9135 = icmp eq <4 x i16> %9127, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %9136 = select <4 x i1> %9135, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %9127
  %9137 = sitofp <4 x i16> %9136 to <4 x float>
  %9138 = fmul <4 x float> %9134, %9137
  %9139 = fptosi <4 x float> %9138 to <4 x i16>
  %9140 = icmp eq <4 x i16> %9128, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %9141 = select <4 x i1> %9140, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %9128
  %9142 = sitofp <4 x i16> %9141 to <4 x float>
  %9143 = fmul <4 x float> %9134, %9142
  %9144 = fptosi <4 x float> %9143 to <4 x i16>
  %9145 = icmp eq <4 x i16> %9129, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %9146 = select <4 x i1> %9145, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %9129
  %9147 = sitofp <4 x i16> %9146 to <4 x float>
  %9148 = fmul <4 x float> %9134, %9147
  %9149 = fptosi <4 x float> %9148 to <4 x i16>
  %9150 = getelementptr inbounds i16, i16* %9089, i64 %9123
  %9151 = bitcast i16* %9150 to <16 x i16>*
  %9152 = shufflevector <4 x i16> %9139, <4 x i16> %9144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9153 = shufflevector <4 x i16> %9149, <4 x i16> %9132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9154 = shufflevector <8 x i16> %9152, <8 x i16> %9153, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %9154, <16 x i16>* %9151, align 2
  %9155 = add i64 %9121, 4
  %9156 = icmp eq i64 %9155, %9114
  br i1 %9156, label %9157, label %9120, !llvm.loop !235

9157:                                             ; preds = %9120
  %9158 = icmp eq i64 %9101, %9114
  br i1 %9158, label %9200, label %9159

9159:                                             ; preds = %9157, %9103, %9097
  %9160 = phi i16* [ %9098, %9103 ], [ %9098, %9097 ], [ %9116, %9157 ]
  %9161 = phi i32 [ 0, %9103 ], [ 0, %9097 ], [ %9117, %9157 ]
  %9162 = phi i16* [ %9089, %9103 ], [ %9089, %9097 ], [ %9119, %9157 ]
  br label %9163

9163:                                             ; preds = %9159, %9163
  %9164 = phi i16* [ %9196, %9163 ], [ %9160, %9159 ]
  %9165 = phi i32 [ %9198, %9163 ], [ %9161, %9159 ]
  %9166 = phi i16* [ %9197, %9163 ], [ %9162, %9159 ]
  %9167 = getelementptr inbounds i16, i16* %9164, i64 3
  %9168 = load i16, i16* %9167, align 2
  %9169 = icmp eq i16 %9168, -32768
  %9170 = select i1 %9169, i16 -32767, i16 %9168
  %9171 = getelementptr inbounds i16, i16* %9166, i64 3
  store i16 %9170, i16* %9171, align 2
  %9172 = sitofp i16 %9170 to float
  %9173 = fdiv float %9172, 3.276700e+04
  %9174 = load i16, i16* %9164, align 2
  %9175 = icmp eq i16 %9174, -32768
  %9176 = select i1 %9175, i16 -32767, i16 %9174
  %9177 = sitofp i16 %9176 to float
  %9178 = fmul float %9173, %9177
  %9179 = fptosi float %9178 to i16
  store i16 %9179, i16* %9166, align 2
  %9180 = getelementptr inbounds i16, i16* %9164, i64 1
  %9181 = load i16, i16* %9180, align 2
  %9182 = icmp eq i16 %9181, -32768
  %9183 = select i1 %9182, i16 -32767, i16 %9181
  %9184 = sitofp i16 %9183 to float
  %9185 = fmul float %9173, %9184
  %9186 = fptosi float %9185 to i16
  %9187 = getelementptr inbounds i16, i16* %9166, i64 1
  store i16 %9186, i16* %9187, align 2
  %9188 = getelementptr inbounds i16, i16* %9164, i64 2
  %9189 = load i16, i16* %9188, align 2
  %9190 = icmp eq i16 %9189, -32768
  %9191 = select i1 %9190, i16 -32767, i16 %9189
  %9192 = sitofp i16 %9191 to float
  %9193 = fmul float %9173, %9192
  %9194 = fptosi float %9193 to i16
  %9195 = getelementptr inbounds i16, i16* %9166, i64 2
  store i16 %9194, i16* %9195, align 2
  %9196 = getelementptr inbounds i16, i16* %9164, i64 4
  %9197 = getelementptr inbounds i16, i16* %9166, i64 4
  %9198 = add nuw i32 %9165, 1
  %9199 = icmp eq i32 %9198, %9095
  br i1 %9199, label %9200, label %9163, !llvm.loop !236

9200:                                             ; preds = %9163, %9157
  %9201 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9055, align 8
  br label %9202

9202:                                             ; preds = %9200, %9084
  %9203 = phi %"class.blink::IntRect"* [ %9201, %9200 ], [ %9086, %9084 ]
  %9204 = getelementptr inbounds i16, i16* %9089, i64 %9054
  %9205 = add nuw nsw i32 %9088, 1
  %9206 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9203, i64 0, i32 1, i32 1
  %9207 = load i32, i32* %9206, align 4
  %9208 = icmp slt i32 %9205, %9207
  %9209 = add i64 %9085, 1
  br i1 %9208, label %9084, label %9075

9210:                                             ; preds = %9077, %9050
  %9211 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9211, align 4
  br label %11653

9212:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %9213
    i32 1, label %9215
  ]

9213:                                             ; preds = %9212
  %9214 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9214, align 4
  br label %11653

9215:                                             ; preds = %9212
  %9216 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9217 = load i32, i32* %9216, align 8
  %9218 = sdiv i32 %9217, 4
  %9219 = sext i32 %9218 to i64
  %9220 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9221 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9220, align 8
  %9222 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9223 = load i32, i32* %9222, align 8
  %9224 = icmp sgt i32 %9223, 0
  br i1 %9224, label %9225, label %9298

9225:                                             ; preds = %9215
  %9226 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9227 = bitcast i8** %9226 to i32**
  %9228 = load i32*, i32** %9227, align 8
  %9229 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9230 = bitcast i8** %9229 to i32**
  br label %9231

9231:                                             ; preds = %9242, %9225
  %9232 = phi i32 [ %9223, %9225 ], [ %9243, %9242 ]
  %9233 = phi %"class.blink::IntRect"* [ %9221, %9225 ], [ %9244, %9242 ]
  %9234 = phi %"class.blink::IntRect"* [ %9221, %9225 ], [ %9245, %9242 ]
  %9235 = phi i32 [ 0, %9225 ], [ %9247, %9242 ]
  %9236 = phi i32* [ %9228, %9225 ], [ %9246, %9242 ]
  %9237 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9234, i64 0, i32 1, i32 1
  %9238 = load i32, i32* %9237, align 4
  %9239 = icmp sgt i32 %9238, 0
  br i1 %9239, label %9249, label %9242

9240:                                             ; preds = %9291
  %9241 = load i32, i32* %9222, align 8
  br label %9242

9242:                                             ; preds = %9240, %9231
  %9243 = phi i32 [ %9232, %9231 ], [ %9241, %9240 ]
  %9244 = phi %"class.blink::IntRect"* [ %9233, %9231 ], [ %9292, %9240 ]
  %9245 = phi %"class.blink::IntRect"* [ %9234, %9231 ], [ %9292, %9240 ]
  %9246 = phi i32* [ %9236, %9231 ], [ %9293, %9240 ]
  %9247 = add nuw nsw i32 %9235, 1
  %9248 = icmp slt i32 %9247, %9243
  br i1 %9248, label %9231, label %9298

9249:                                             ; preds = %9231, %9291
  %9250 = phi %"class.blink::IntRect"* [ %9292, %9291 ], [ %9233, %9231 ]
  %9251 = phi %"class.blink::IntRect"* [ %9292, %9291 ], [ %9234, %9231 ]
  %9252 = phi i32 [ %9294, %9291 ], [ 0, %9231 ]
  %9253 = phi i32* [ %9293, %9291 ], [ %9236, %9231 ]
  %9254 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9251, i64 0, i32 1, i32 0
  %9255 = load i32, i32* %9254, align 4
  %9256 = icmp eq i32 %9255, 0
  br i1 %9256, label %9291, label %9257

9257:                                             ; preds = %9249
  %9258 = load i32*, i32** %9230, align 8
  br label %9259

9259:                                             ; preds = %9259, %9257
  %9260 = phi i32* [ %9285, %9259 ], [ %9258, %9257 ]
  %9261 = phi i32 [ %9287, %9259 ], [ 0, %9257 ]
  %9262 = phi i32* [ %9286, %9259 ], [ %9253, %9257 ]
  %9263 = getelementptr inbounds i32, i32* %9260, i64 3
  %9264 = load i32, i32* %9263, align 4
  %9265 = uitofp i32 %9264 to double
  %9266 = fdiv double %9265, 0x41EFFFFFFFE00000
  %9267 = load i32, i32* %9260, align 4
  %9268 = uitofp i32 %9267 to double
  %9269 = fmul double %9266, %9268
  %9270 = fptoui double %9269 to i32
  store i32 %9270, i32* %9262, align 4
  %9271 = getelementptr inbounds i32, i32* %9260, i64 1
  %9272 = load i32, i32* %9271, align 4
  %9273 = uitofp i32 %9272 to double
  %9274 = fmul double %9266, %9273
  %9275 = fptoui double %9274 to i32
  %9276 = getelementptr inbounds i32, i32* %9262, i64 1
  store i32 %9275, i32* %9276, align 4
  %9277 = getelementptr inbounds i32, i32* %9260, i64 2
  %9278 = load i32, i32* %9277, align 4
  %9279 = uitofp i32 %9278 to double
  %9280 = fmul double %9266, %9279
  %9281 = fptoui double %9280 to i32
  %9282 = getelementptr inbounds i32, i32* %9262, i64 2
  store i32 %9281, i32* %9282, align 4
  %9283 = load i32, i32* %9263, align 4
  %9284 = getelementptr inbounds i32, i32* %9262, i64 3
  store i32 %9283, i32* %9284, align 4
  %9285 = getelementptr inbounds i32, i32* %9260, i64 4
  %9286 = getelementptr inbounds i32, i32* %9262, i64 4
  %9287 = add nuw i32 %9261, 1
  %9288 = icmp eq i32 %9287, %9255
  br i1 %9288, label %9289, label %9259

9289:                                             ; preds = %9259
  %9290 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9220, align 8
  br label %9291

9291:                                             ; preds = %9289, %9249
  %9292 = phi %"class.blink::IntRect"* [ %9290, %9289 ], [ %9250, %9249 ]
  %9293 = getelementptr inbounds i32, i32* %9253, i64 %9219
  %9294 = add nuw nsw i32 %9252, 1
  %9295 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9292, i64 0, i32 1, i32 1
  %9296 = load i32, i32* %9295, align 4
  %9297 = icmp slt i32 %9294, %9296
  br i1 %9297, label %9249, label %9240

9298:                                             ; preds = %9242, %9215
  %9299 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9299, align 4
  br label %11653

9300:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %9301
    i32 1, label %9303
  ]

9301:                                             ; preds = %9300
  %9302 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9302, align 4
  br label %11653

9303:                                             ; preds = %9300
  %9304 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9305 = load i32, i32* %9304, align 8
  %9306 = sdiv i32 %9305, 4
  %9307 = sext i32 %9306 to i64
  %9308 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9309 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9308, align 8
  %9310 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9311 = load i32, i32* %9310, align 8
  %9312 = icmp sgt i32 %9311, 0
  br i1 %9312, label %9313, label %9393

9313:                                             ; preds = %9303
  %9314 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9315 = bitcast i8** %9314 to i32**
  %9316 = load i32*, i32** %9315, align 8
  %9317 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9318 = bitcast i8** %9317 to i32**
  br label %9319

9319:                                             ; preds = %9330, %9313
  %9320 = phi i32 [ %9311, %9313 ], [ %9331, %9330 ]
  %9321 = phi %"class.blink::IntRect"* [ %9309, %9313 ], [ %9332, %9330 ]
  %9322 = phi %"class.blink::IntRect"* [ %9309, %9313 ], [ %9333, %9330 ]
  %9323 = phi i32 [ 0, %9313 ], [ %9335, %9330 ]
  %9324 = phi i32* [ %9316, %9313 ], [ %9334, %9330 ]
  %9325 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9322, i64 0, i32 1, i32 1
  %9326 = load i32, i32* %9325, align 4
  %9327 = icmp sgt i32 %9326, 0
  br i1 %9327, label %9337, label %9330

9328:                                             ; preds = %9386
  %9329 = load i32, i32* %9310, align 8
  br label %9330

9330:                                             ; preds = %9328, %9319
  %9331 = phi i32 [ %9320, %9319 ], [ %9329, %9328 ]
  %9332 = phi %"class.blink::IntRect"* [ %9321, %9319 ], [ %9387, %9328 ]
  %9333 = phi %"class.blink::IntRect"* [ %9322, %9319 ], [ %9387, %9328 ]
  %9334 = phi i32* [ %9324, %9319 ], [ %9388, %9328 ]
  %9335 = add nuw nsw i32 %9323, 1
  %9336 = icmp slt i32 %9335, %9331
  br i1 %9336, label %9319, label %9393

9337:                                             ; preds = %9319, %9386
  %9338 = phi %"class.blink::IntRect"* [ %9387, %9386 ], [ %9321, %9319 ]
  %9339 = phi %"class.blink::IntRect"* [ %9387, %9386 ], [ %9322, %9319 ]
  %9340 = phi i32 [ %9389, %9386 ], [ 0, %9319 ]
  %9341 = phi i32* [ %9388, %9386 ], [ %9324, %9319 ]
  %9342 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9339, i64 0, i32 1, i32 0
  %9343 = load i32, i32* %9342, align 4
  %9344 = icmp eq i32 %9343, 0
  br i1 %9344, label %9386, label %9345

9345:                                             ; preds = %9337
  %9346 = load i32*, i32** %9318, align 8
  br label %9347

9347:                                             ; preds = %9347, %9345
  %9348 = phi i32* [ %9380, %9347 ], [ %9346, %9345 ]
  %9349 = phi i32 [ %9382, %9347 ], [ 0, %9345 ]
  %9350 = phi i32* [ %9381, %9347 ], [ %9341, %9345 ]
  %9351 = getelementptr inbounds i32, i32* %9348, i64 3
  %9352 = load i32, i32* %9351, align 4
  %9353 = icmp eq i32 %9352, -2147483648
  %9354 = select i1 %9353, i32 -2147483647, i32 %9352
  %9355 = getelementptr inbounds i32, i32* %9350, i64 3
  store i32 %9354, i32* %9355, align 4
  %9356 = sitofp i32 %9354 to double
  %9357 = fdiv double %9356, 0x41DFFFFFFFC00000
  %9358 = load i32, i32* %9348, align 4
  %9359 = icmp eq i32 %9358, -2147483648
  %9360 = select i1 %9359, i32 -2147483647, i32 %9358
  %9361 = sitofp i32 %9360 to double
  %9362 = fmul double %9357, %9361
  %9363 = fptosi double %9362 to i32
  store i32 %9363, i32* %9350, align 4
  %9364 = getelementptr inbounds i32, i32* %9348, i64 1
  %9365 = load i32, i32* %9364, align 4
  %9366 = icmp eq i32 %9365, -2147483648
  %9367 = select i1 %9366, i32 -2147483647, i32 %9365
  %9368 = sitofp i32 %9367 to double
  %9369 = fmul double %9357, %9368
  %9370 = fptosi double %9369 to i32
  %9371 = getelementptr inbounds i32, i32* %9350, i64 1
  store i32 %9370, i32* %9371, align 4
  %9372 = getelementptr inbounds i32, i32* %9348, i64 2
  %9373 = load i32, i32* %9372, align 4
  %9374 = icmp eq i32 %9373, -2147483648
  %9375 = select i1 %9374, i32 -2147483647, i32 %9373
  %9376 = sitofp i32 %9375 to double
  %9377 = fmul double %9357, %9376
  %9378 = fptosi double %9377 to i32
  %9379 = getelementptr inbounds i32, i32* %9350, i64 2
  store i32 %9378, i32* %9379, align 4
  %9380 = getelementptr inbounds i32, i32* %9348, i64 4
  %9381 = getelementptr inbounds i32, i32* %9350, i64 4
  %9382 = add nuw i32 %9349, 1
  %9383 = icmp eq i32 %9382, %9343
  br i1 %9383, label %9384, label %9347

9384:                                             ; preds = %9347
  %9385 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9308, align 8
  br label %9386

9386:                                             ; preds = %9384, %9337
  %9387 = phi %"class.blink::IntRect"* [ %9385, %9384 ], [ %9338, %9337 ]
  %9388 = getelementptr inbounds i32, i32* %9341, i64 %9307
  %9389 = add nuw nsw i32 %9340, 1
  %9390 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9387, i64 0, i32 1, i32 1
  %9391 = load i32, i32* %9390, align 4
  %9392 = icmp slt i32 %9389, %9391
  br i1 %9392, label %9337, label %9328

9393:                                             ; preds = %9330, %9303
  %9394 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9394, align 4
  br label %11653

9395:                                             ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %9396
    i32 1, label %9614
    i32 2, label %9838
  ]

9396:                                             ; preds = %9395
  %9397 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9398 = load i32, i32* %9397, align 8
  %9399 = sext i32 %9398 to i64
  %9400 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9401 = load i32, i32* %9400, align 8
  %9402 = sdiv i32 %9401, 4
  %9403 = sext i32 %9402 to i64
  %9404 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9405 = load i8*, i8** %9404, align 8
  %9406 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9407 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9406, align 8
  %9408 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9407, i64 0, i32 0, i32 1
  %9409 = load i32, i32* %9408, align 4
  %9410 = mul nsw i32 %9409, %9398
  %9411 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9412 = load i32, i32* %9411, align 4
  %9413 = add nsw i32 %9410, %9412
  %9414 = sext i32 %9413 to i64
  %9415 = getelementptr inbounds i8, i8* %9405, i64 %9414
  %9416 = icmp slt i32 %9401, 0
  %9417 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9418 = load i32, i32* %9417, align 8
  %9419 = icmp sgt i32 %9418, 1
  %9420 = and i1 %9416, %9419
  br i1 %9420, label %9421, label %9431

9421:                                             ; preds = %9396
  %9422 = add nsw i32 %9418, -1
  %9423 = sext i32 %9422 to i64
  %9424 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9425 = load i32, i32* %9424, align 4
  %9426 = sext i32 %9425 to i64
  %9427 = mul nsw i64 %9399, %9423
  %9428 = mul i64 %9427, %9426
  %9429 = sub i64 0, %9428
  %9430 = getelementptr inbounds i8, i8* %9415, i64 %9429
  br label %9433

9431:                                             ; preds = %9396
  %9432 = icmp sgt i32 %9418, 0
  br i1 %9432, label %9433, label %9612

9433:                                             ; preds = %9431, %9421
  %9434 = phi i8* [ %9430, %9421 ], [ %9415, %9431 ]
  %9435 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9436 = bitcast i8** %9435 to i32**
  %9437 = load i32*, i32** %9436, align 8
  %9438 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9439 = bitcast i8** %9438 to float**
  %9440 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9441

9441:                                             ; preds = %9453, %9433
  %9442 = phi i32 [ %9418, %9433 ], [ %9454, %9453 ]
  %9443 = phi %"class.blink::IntRect"* [ %9407, %9433 ], [ %9455, %9453 ]
  %9444 = phi %"class.blink::IntRect"* [ %9407, %9433 ], [ %9456, %9453 ]
  %9445 = phi i32 [ 0, %9433 ], [ %9465, %9453 ]
  %9446 = phi i32* [ %9437, %9433 ], [ %9458, %9453 ]
  %9447 = phi i8* [ %9434, %9433 ], [ %9464, %9453 ]
  %9448 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9444, i64 0, i32 1, i32 1
  %9449 = load i32, i32* %9448, align 4
  %9450 = icmp sgt i32 %9449, 0
  br i1 %9450, label %9467, label %9453

9451:                                             ; preds = %9603
  %9452 = load i32, i32* %9417, align 8
  br label %9453

9453:                                             ; preds = %9451, %9441
  %9454 = phi i32 [ %9442, %9441 ], [ %9452, %9451 ]
  %9455 = phi %"class.blink::IntRect"* [ %9443, %9441 ], [ %9604, %9451 ]
  %9456 = phi %"class.blink::IntRect"* [ %9444, %9441 ], [ %9604, %9451 ]
  %9457 = phi i8* [ %9447, %9441 ], [ %9605, %9451 ]
  %9458 = phi i32* [ %9446, %9441 ], [ %9606, %9451 ]
  %9459 = phi i32 [ %9449, %9441 ], [ %9609, %9451 ]
  %9460 = load i32, i32* %9440, align 4
  %9461 = sub nsw i32 %9460, %9459
  %9462 = sext i32 %9461 to i64
  %9463 = mul nsw i64 %9462, %9399
  %9464 = getelementptr inbounds i8, i8* %9457, i64 %9463
  %9465 = add nuw nsw i32 %9445, 1
  %9466 = icmp slt i32 %9465, %9454
  br i1 %9466, label %9441, label %9612

9467:                                             ; preds = %9441, %9603
  %9468 = phi i64 [ %9611, %9603 ], [ 0, %9441 ]
  %9469 = phi %"class.blink::IntRect"* [ %9604, %9603 ], [ %9443, %9441 ]
  %9470 = phi %"class.blink::IntRect"* [ %9604, %9603 ], [ %9444, %9441 ]
  %9471 = phi i32 [ %9607, %9603 ], [ 0, %9441 ]
  %9472 = phi i32* [ %9606, %9603 ], [ %9446, %9441 ]
  %9473 = phi i8* [ %9605, %9603 ], [ %9447, %9441 ]
  %9474 = mul i64 %9468, %9403
  %9475 = getelementptr i32, i32* %9446, i64 %9474
  %9476 = add i64 %9474, 1
  %9477 = getelementptr i32, i32* %9446, i64 %9476
  %9478 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9470, i64 0, i32 1, i32 0
  %9479 = load i32, i32* %9478, align 4
  %9480 = icmp eq i32 %9479, 0
  br i1 %9480, label %9603, label %9481

9481:                                             ; preds = %9467
  %9482 = load float*, float** %9439, align 8
  br label %9483

9483:                                             ; preds = %9483, %9481
  %9484 = phi i32 [ %9507, %9483 ], [ 0, %9481 ]
  %9485 = phi i8* [ %9505, %9483 ], [ %9473, %9481 ]
  %9486 = phi float* [ %9506, %9483 ], [ %9482, %9481 ]
  %9487 = load i8, i8* %9485, align 1
  %9488 = uitofp i8 %9487 to float
  %9489 = fmul float %9488, 0x3F70101020000000
  store float %9489, float* %9486, align 4
  %9490 = getelementptr inbounds i8, i8* %9485, i64 1
  %9491 = load i8, i8* %9490, align 1
  %9492 = uitofp i8 %9491 to float
  %9493 = fmul float %9492, 0x3F70101020000000
  %9494 = getelementptr inbounds float, float* %9486, i64 1
  store float %9493, float* %9494, align 4
  %9495 = getelementptr inbounds i8, i8* %9485, i64 2
  %9496 = load i8, i8* %9495, align 1
  %9497 = uitofp i8 %9496 to float
  %9498 = fmul float %9497, 0x3F70101020000000
  %9499 = getelementptr inbounds float, float* %9486, i64 2
  store float %9498, float* %9499, align 4
  %9500 = getelementptr inbounds i8, i8* %9485, i64 3
  %9501 = load i8, i8* %9500, align 1
  %9502 = uitofp i8 %9501 to float
  %9503 = fmul float %9502, 0x3F70101020000000
  %9504 = getelementptr inbounds float, float* %9486, i64 3
  store float %9503, float* %9504, align 4
  %9505 = getelementptr inbounds i8, i8* %9485, i64 4
  %9506 = getelementptr inbounds float, float* %9486, i64 4
  %9507 = add nuw i32 %9484, 1
  %9508 = icmp eq i32 %9507, %9479
  br i1 %9508, label %9509, label %9483

9509:                                             ; preds = %9483
  %9510 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9406, align 8
  %9511 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9510, i64 0, i32 1, i32 0
  %9512 = load i32, i32* %9511, align 4
  %9513 = icmp eq i32 %9512, 0
  br i1 %9513, label %9603, label %9514

9514:                                             ; preds = %9509
  %9515 = load float*, float** %9439, align 8
  %9516 = add i32 %9512, -1
  %9517 = zext i32 %9516 to i64
  %9518 = add nuw nsw i64 %9517, 1
  %9519 = icmp ult i64 %9518, 4
  br i1 %9519, label %9568, label %9520

9520:                                             ; preds = %9514
  %9521 = add i32 %9512, -1
  %9522 = zext i32 %9521 to i64
  %9523 = getelementptr i32, i32* %9477, i64 %9522
  %9524 = getelementptr float, float* %9515, i64 4
  %9525 = shl nuw nsw i64 %9522, 2
  %9526 = getelementptr float, float* %9524, i64 %9525
  %9527 = bitcast float* %9526 to i32*
  %9528 = icmp ult i32* %9475, %9527
  %9529 = bitcast i32* %9523 to float*
  %9530 = icmp ult float* %9515, %9529
  %9531 = and i1 %9528, %9530
  br i1 %9531, label %9568, label %9532

9532:                                             ; preds = %9520
  %9533 = and i64 %9518, 8589934588
  %9534 = shl nuw nsw i64 %9533, 2
  %9535 = getelementptr float, float* %9515, i64 %9534
  %9536 = getelementptr i32, i32* %9472, i64 %9533
  %9537 = trunc i64 %9533 to i32
  br label %9538

9538:                                             ; preds = %9538, %9532
  %9539 = phi i64 [ 0, %9532 ], [ %9564, %9538 ]
  %9540 = shl i64 %9539, 2
  %9541 = getelementptr float, float* %9515, i64 %9540
  %9542 = getelementptr i32, i32* %9472, i64 %9539
  %9543 = bitcast float* %9541 to <16 x float>*
  %9544 = load <16 x float>, <16 x float>* %9543, align 4
  %9545 = shufflevector <16 x float> %9544, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %9546 = shufflevector <16 x float> %9544, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %9547 = shufflevector <16 x float> %9544, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %9548 = shufflevector <16 x float> %9544, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %9549 = fmul <4 x float> %9545, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9550 = fptoui <4 x float> %9549 to <4 x i32>
  %9551 = fmul <4 x float> %9546, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9552 = fptoui <4 x float> %9551 to <4 x i32>
  %9553 = fmul <4 x float> %9547, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9554 = fptoui <4 x float> %9553 to <4 x i32>
  %9555 = fmul <4 x float> %9548, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %9556 = fptoui <4 x float> %9555 to <4 x i32>
  %9557 = shl <4 x i32> %9556, <i32 30, i32 30, i32 30, i32 30>
  %9558 = shl <4 x i32> %9554, <i32 20, i32 20, i32 20, i32 20>
  %9559 = shl <4 x i32> %9552, <i32 10, i32 10, i32 10, i32 10>
  %9560 = or <4 x i32> %9559, %9550
  %9561 = or <4 x i32> %9560, %9558
  %9562 = or <4 x i32> %9561, %9557
  %9563 = bitcast i32* %9542 to <4 x i32>*
  store <4 x i32> %9562, <4 x i32>* %9563, align 4, !alias.scope !237, !noalias !240
  %9564 = add i64 %9539, 4
  %9565 = icmp eq i64 %9564, %9533
  br i1 %9565, label %9566, label %9538, !llvm.loop !242

9566:                                             ; preds = %9538
  %9567 = icmp eq i64 %9518, %9533
  br i1 %9567, label %9601, label %9568

9568:                                             ; preds = %9566, %9520, %9514
  %9569 = phi float* [ %9515, %9520 ], [ %9515, %9514 ], [ %9535, %9566 ]
  %9570 = phi i32* [ %9472, %9520 ], [ %9472, %9514 ], [ %9536, %9566 ]
  %9571 = phi i32 [ 0, %9520 ], [ 0, %9514 ], [ %9537, %9566 ]
  br label %9572

9572:                                             ; preds = %9568, %9572
  %9573 = phi float* [ %9597, %9572 ], [ %9569, %9568 ]
  %9574 = phi i32* [ %9598, %9572 ], [ %9570, %9568 ]
  %9575 = phi i32 [ %9599, %9572 ], [ %9571, %9568 ]
  %9576 = load float, float* %9573, align 4
  %9577 = fmul float %9576, 1.023000e+03
  %9578 = fptoui float %9577 to i32
  %9579 = getelementptr inbounds float, float* %9573, i64 1
  %9580 = load float, float* %9579, align 4
  %9581 = fmul float %9580, 1.023000e+03
  %9582 = fptoui float %9581 to i32
  %9583 = getelementptr inbounds float, float* %9573, i64 2
  %9584 = load float, float* %9583, align 4
  %9585 = fmul float %9584, 1.023000e+03
  %9586 = fptoui float %9585 to i32
  %9587 = getelementptr inbounds float, float* %9573, i64 3
  %9588 = load float, float* %9587, align 4
  %9589 = fmul float %9588, 3.000000e+00
  %9590 = fptoui float %9589 to i32
  %9591 = shl i32 %9590, 30
  %9592 = shl i32 %9586, 20
  %9593 = shl i32 %9582, 10
  %9594 = or i32 %9593, %9578
  %9595 = or i32 %9594, %9592
  %9596 = or i32 %9595, %9591
  store i32 %9596, i32* %9574, align 4
  %9597 = getelementptr inbounds float, float* %9573, i64 4
  %9598 = getelementptr inbounds i32, i32* %9574, i64 1
  %9599 = add nuw i32 %9575, 1
  %9600 = icmp eq i32 %9599, %9512
  br i1 %9600, label %9601, label %9572, !llvm.loop !243

9601:                                             ; preds = %9572, %9566
  %9602 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9406, align 8
  br label %9603

9603:                                             ; preds = %9601, %9509, %9467
  %9604 = phi %"class.blink::IntRect"* [ %9602, %9601 ], [ %9510, %9509 ], [ %9469, %9467 ]
  %9605 = getelementptr inbounds i8, i8* %9473, i64 %9399
  %9606 = getelementptr inbounds i32, i32* %9472, i64 %9403
  %9607 = add nuw nsw i32 %9471, 1
  %9608 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9604, i64 0, i32 1, i32 1
  %9609 = load i32, i32* %9608, align 4
  %9610 = icmp slt i32 %9607, %9609
  %9611 = add i64 %9468, 1
  br i1 %9610, label %9467, label %9451

9612:                                             ; preds = %9453, %9431
  %9613 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9613, align 4
  br label %11653

9614:                                             ; preds = %9395
  %9615 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9616 = load i32, i32* %9615, align 8
  %9617 = sext i32 %9616 to i64
  %9618 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9619 = load i32, i32* %9618, align 8
  %9620 = sdiv i32 %9619, 4
  %9621 = sext i32 %9620 to i64
  %9622 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9623 = load i8*, i8** %9622, align 8
  %9624 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9625 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9624, align 8
  %9626 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9625, i64 0, i32 0, i32 1
  %9627 = load i32, i32* %9626, align 4
  %9628 = mul nsw i32 %9627, %9616
  %9629 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9630 = load i32, i32* %9629, align 4
  %9631 = add nsw i32 %9628, %9630
  %9632 = sext i32 %9631 to i64
  %9633 = getelementptr inbounds i8, i8* %9623, i64 %9632
  %9634 = icmp slt i32 %9619, 0
  %9635 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9636 = load i32, i32* %9635, align 8
  %9637 = icmp sgt i32 %9636, 1
  %9638 = and i1 %9634, %9637
  br i1 %9638, label %9639, label %9649

9639:                                             ; preds = %9614
  %9640 = add nsw i32 %9636, -1
  %9641 = sext i32 %9640 to i64
  %9642 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9643 = load i32, i32* %9642, align 4
  %9644 = sext i32 %9643 to i64
  %9645 = mul nsw i64 %9617, %9641
  %9646 = mul i64 %9645, %9644
  %9647 = sub i64 0, %9646
  %9648 = getelementptr inbounds i8, i8* %9633, i64 %9647
  br label %9651

9649:                                             ; preds = %9614
  %9650 = icmp sgt i32 %9636, 0
  br i1 %9650, label %9651, label %9836

9651:                                             ; preds = %9649, %9639
  %9652 = phi i8* [ %9648, %9639 ], [ %9633, %9649 ]
  %9653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9654 = bitcast i8** %9653 to i32**
  %9655 = load i32*, i32** %9654, align 8
  %9656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9657 = bitcast i8** %9656 to float**
  %9658 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9659

9659:                                             ; preds = %9671, %9651
  %9660 = phi i32 [ %9636, %9651 ], [ %9672, %9671 ]
  %9661 = phi %"class.blink::IntRect"* [ %9625, %9651 ], [ %9673, %9671 ]
  %9662 = phi %"class.blink::IntRect"* [ %9625, %9651 ], [ %9674, %9671 ]
  %9663 = phi i32 [ 0, %9651 ], [ %9683, %9671 ]
  %9664 = phi i32* [ %9655, %9651 ], [ %9676, %9671 ]
  %9665 = phi i8* [ %9652, %9651 ], [ %9682, %9671 ]
  %9666 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9662, i64 0, i32 1, i32 1
  %9667 = load i32, i32* %9666, align 4
  %9668 = icmp sgt i32 %9667, 0
  br i1 %9668, label %9685, label %9671

9669:                                             ; preds = %9827
  %9670 = load i32, i32* %9635, align 8
  br label %9671

9671:                                             ; preds = %9669, %9659
  %9672 = phi i32 [ %9660, %9659 ], [ %9670, %9669 ]
  %9673 = phi %"class.blink::IntRect"* [ %9661, %9659 ], [ %9828, %9669 ]
  %9674 = phi %"class.blink::IntRect"* [ %9662, %9659 ], [ %9828, %9669 ]
  %9675 = phi i8* [ %9665, %9659 ], [ %9829, %9669 ]
  %9676 = phi i32* [ %9664, %9659 ], [ %9830, %9669 ]
  %9677 = phi i32 [ %9667, %9659 ], [ %9833, %9669 ]
  %9678 = load i32, i32* %9658, align 4
  %9679 = sub nsw i32 %9678, %9677
  %9680 = sext i32 %9679 to i64
  %9681 = mul nsw i64 %9680, %9617
  %9682 = getelementptr inbounds i8, i8* %9675, i64 %9681
  %9683 = add nuw nsw i32 %9663, 1
  %9684 = icmp slt i32 %9683, %9672
  br i1 %9684, label %9659, label %9836

9685:                                             ; preds = %9659, %9827
  %9686 = phi i64 [ %9835, %9827 ], [ 0, %9659 ]
  %9687 = phi %"class.blink::IntRect"* [ %9828, %9827 ], [ %9661, %9659 ]
  %9688 = phi %"class.blink::IntRect"* [ %9828, %9827 ], [ %9662, %9659 ]
  %9689 = phi i32 [ %9831, %9827 ], [ 0, %9659 ]
  %9690 = phi i32* [ %9830, %9827 ], [ %9664, %9659 ]
  %9691 = phi i8* [ %9829, %9827 ], [ %9665, %9659 ]
  %9692 = mul i64 %9686, %9621
  %9693 = getelementptr i32, i32* %9664, i64 %9692
  %9694 = add i64 %9692, 1
  %9695 = getelementptr i32, i32* %9664, i64 %9694
  %9696 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9688, i64 0, i32 1, i32 0
  %9697 = load i32, i32* %9696, align 4
  %9698 = icmp eq i32 %9697, 0
  br i1 %9698, label %9827, label %9699

9699:                                             ; preds = %9685
  %9700 = load float*, float** %9657, align 8
  br label %9701

9701:                                             ; preds = %9701, %9699
  %9702 = phi i32 [ %9725, %9701 ], [ 0, %9699 ]
  %9703 = phi i8* [ %9723, %9701 ], [ %9691, %9699 ]
  %9704 = phi float* [ %9724, %9701 ], [ %9700, %9699 ]
  %9705 = load i8, i8* %9703, align 1
  %9706 = uitofp i8 %9705 to float
  %9707 = fmul float %9706, 0x3F70101020000000
  store float %9707, float* %9704, align 4
  %9708 = getelementptr inbounds i8, i8* %9703, i64 1
  %9709 = load i8, i8* %9708, align 1
  %9710 = uitofp i8 %9709 to float
  %9711 = fmul float %9710, 0x3F70101020000000
  %9712 = getelementptr inbounds float, float* %9704, i64 1
  store float %9711, float* %9712, align 4
  %9713 = getelementptr inbounds i8, i8* %9703, i64 2
  %9714 = load i8, i8* %9713, align 1
  %9715 = uitofp i8 %9714 to float
  %9716 = fmul float %9715, 0x3F70101020000000
  %9717 = getelementptr inbounds float, float* %9704, i64 2
  store float %9716, float* %9717, align 4
  %9718 = getelementptr inbounds i8, i8* %9703, i64 3
  %9719 = load i8, i8* %9718, align 1
  %9720 = uitofp i8 %9719 to float
  %9721 = fmul float %9720, 0x3F70101020000000
  %9722 = getelementptr inbounds float, float* %9704, i64 3
  store float %9721, float* %9722, align 4
  %9723 = getelementptr inbounds i8, i8* %9703, i64 4
  %9724 = getelementptr inbounds float, float* %9704, i64 4
  %9725 = add nuw i32 %9702, 1
  %9726 = icmp eq i32 %9725, %9697
  br i1 %9726, label %9727, label %9701

9727:                                             ; preds = %9701
  %9728 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9624, align 8
  %9729 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9728, i64 0, i32 1, i32 0
  %9730 = load i32, i32* %9729, align 4
  %9731 = icmp eq i32 %9730, 0
  br i1 %9731, label %9827, label %9732

9732:                                             ; preds = %9727
  %9733 = load float*, float** %9657, align 8
  %9734 = add i32 %9730, -1
  %9735 = zext i32 %9734 to i64
  %9736 = add nuw nsw i64 %9735, 1
  %9737 = icmp ult i64 %9736, 4
  br i1 %9737, label %9789, label %9738

9738:                                             ; preds = %9732
  %9739 = add i32 %9730, -1
  %9740 = zext i32 %9739 to i64
  %9741 = getelementptr i32, i32* %9695, i64 %9740
  %9742 = getelementptr float, float* %9733, i64 4
  %9743 = shl nuw nsw i64 %9740, 2
  %9744 = getelementptr float, float* %9742, i64 %9743
  %9745 = bitcast float* %9744 to i32*
  %9746 = icmp ult i32* %9693, %9745
  %9747 = bitcast i32* %9741 to float*
  %9748 = icmp ult float* %9733, %9747
  %9749 = and i1 %9746, %9748
  br i1 %9749, label %9789, label %9750

9750:                                             ; preds = %9738
  %9751 = and i64 %9736, 8589934588
  %9752 = shl nuw nsw i64 %9751, 2
  %9753 = getelementptr float, float* %9733, i64 %9752
  %9754 = getelementptr i32, i32* %9690, i64 %9751
  %9755 = trunc i64 %9751 to i32
  br label %9756

9756:                                             ; preds = %9756, %9750
  %9757 = phi i64 [ 0, %9750 ], [ %9785, %9756 ]
  %9758 = shl i64 %9757, 2
  %9759 = getelementptr float, float* %9733, i64 %9758
  %9760 = getelementptr i32, i32* %9690, i64 %9757
  %9761 = bitcast float* %9759 to <16 x float>*
  %9762 = load <16 x float>, <16 x float>* %9761, align 4
  %9763 = shufflevector <16 x float> %9762, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %9764 = shufflevector <16 x float> %9762, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %9765 = shufflevector <16 x float> %9762, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %9766 = shufflevector <16 x float> %9762, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %9767 = fmul <4 x float> %9763, %9766
  %9768 = fmul <4 x float> %9767, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9769 = fptoui <4 x float> %9768 to <4 x i32>
  %9770 = fmul <4 x float> %9766, %9764
  %9771 = fmul <4 x float> %9770, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9772 = fptoui <4 x float> %9771 to <4 x i32>
  %9773 = fmul <4 x float> %9766, %9765
  %9774 = fmul <4 x float> %9773, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9775 = fptoui <4 x float> %9774 to <4 x i32>
  %9776 = fmul <4 x float> %9766, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %9777 = fptoui <4 x float> %9776 to <4 x i32>
  %9778 = shl <4 x i32> %9777, <i32 30, i32 30, i32 30, i32 30>
  %9779 = shl <4 x i32> %9775, <i32 20, i32 20, i32 20, i32 20>
  %9780 = shl <4 x i32> %9772, <i32 10, i32 10, i32 10, i32 10>
  %9781 = or <4 x i32> %9778, %9769
  %9782 = or <4 x i32> %9781, %9780
  %9783 = or <4 x i32> %9782, %9779
  %9784 = bitcast i32* %9760 to <4 x i32>*
  store <4 x i32> %9783, <4 x i32>* %9784, align 4, !alias.scope !244, !noalias !247
  %9785 = add i64 %9757, 4
  %9786 = icmp eq i64 %9785, %9751
  br i1 %9786, label %9787, label %9756, !llvm.loop !249

9787:                                             ; preds = %9756
  %9788 = icmp eq i64 %9736, %9751
  br i1 %9788, label %9825, label %9789

9789:                                             ; preds = %9787, %9738, %9732
  %9790 = phi float* [ %9733, %9738 ], [ %9733, %9732 ], [ %9753, %9787 ]
  %9791 = phi i32* [ %9690, %9738 ], [ %9690, %9732 ], [ %9754, %9787 ]
  %9792 = phi i32 [ 0, %9738 ], [ 0, %9732 ], [ %9755, %9787 ]
  br label %9793

9793:                                             ; preds = %9789, %9793
  %9794 = phi float* [ %9821, %9793 ], [ %9790, %9789 ]
  %9795 = phi i32* [ %9822, %9793 ], [ %9791, %9789 ]
  %9796 = phi i32 [ %9823, %9793 ], [ %9792, %9789 ]
  %9797 = load float, float* %9794, align 4
  %9798 = getelementptr inbounds float, float* %9794, i64 3
  %9799 = load float, float* %9798, align 4
  %9800 = fmul float %9797, %9799
  %9801 = fmul float %9800, 1.023000e+03
  %9802 = fptoui float %9801 to i32
  %9803 = getelementptr inbounds float, float* %9794, i64 1
  %9804 = load float, float* %9803, align 4
  %9805 = fmul float %9799, %9804
  %9806 = fmul float %9805, 1.023000e+03
  %9807 = fptoui float %9806 to i32
  %9808 = getelementptr inbounds float, float* %9794, i64 2
  %9809 = load float, float* %9808, align 4
  %9810 = fmul float %9799, %9809
  %9811 = fmul float %9810, 1.023000e+03
  %9812 = fptoui float %9811 to i32
  %9813 = fmul float %9799, 3.000000e+00
  %9814 = fptoui float %9813 to i32
  %9815 = shl i32 %9814, 30
  %9816 = shl i32 %9812, 20
  %9817 = shl i32 %9807, 10
  %9818 = or i32 %9815, %9802
  %9819 = or i32 %9818, %9817
  %9820 = or i32 %9819, %9816
  store i32 %9820, i32* %9795, align 4
  %9821 = getelementptr inbounds float, float* %9794, i64 4
  %9822 = getelementptr inbounds i32, i32* %9795, i64 1
  %9823 = add nuw i32 %9796, 1
  %9824 = icmp eq i32 %9823, %9730
  br i1 %9824, label %9825, label %9793, !llvm.loop !250

9825:                                             ; preds = %9793, %9787
  %9826 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9624, align 8
  br label %9827

9827:                                             ; preds = %9825, %9727, %9685
  %9828 = phi %"class.blink::IntRect"* [ %9826, %9825 ], [ %9728, %9727 ], [ %9687, %9685 ]
  %9829 = getelementptr inbounds i8, i8* %9691, i64 %9617
  %9830 = getelementptr inbounds i32, i32* %9690, i64 %9621
  %9831 = add nuw nsw i32 %9689, 1
  %9832 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9828, i64 0, i32 1, i32 1
  %9833 = load i32, i32* %9832, align 4
  %9834 = icmp slt i32 %9831, %9833
  %9835 = add i64 %9686, 1
  br i1 %9834, label %9685, label %9669

9836:                                             ; preds = %9671, %9649
  %9837 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9837, align 4
  br label %11653

9838:                                             ; preds = %9395
  %9839 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9840 = load i32, i32* %9839, align 8
  %9841 = sext i32 %9840 to i64
  %9842 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9843 = load i32, i32* %9842, align 8
  %9844 = sdiv i32 %9843, 4
  %9845 = sext i32 %9844 to i64
  %9846 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9847 = load i8*, i8** %9846, align 8
  %9848 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9849 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9848, align 8
  %9850 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9849, i64 0, i32 0, i32 1
  %9851 = load i32, i32* %9850, align 4
  %9852 = mul nsw i32 %9851, %9840
  %9853 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9854 = load i32, i32* %9853, align 4
  %9855 = add nsw i32 %9852, %9854
  %9856 = sext i32 %9855 to i64
  %9857 = getelementptr inbounds i8, i8* %9847, i64 %9856
  %9858 = icmp slt i32 %9843, 0
  %9859 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9860 = load i32, i32* %9859, align 8
  %9861 = icmp sgt i32 %9860, 1
  %9862 = and i1 %9858, %9861
  br i1 %9862, label %9863, label %9873

9863:                                             ; preds = %9838
  %9864 = add nsw i32 %9860, -1
  %9865 = sext i32 %9864 to i64
  %9866 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9867 = load i32, i32* %9866, align 4
  %9868 = sext i32 %9867 to i64
  %9869 = mul nsw i64 %9841, %9865
  %9870 = mul i64 %9869, %9868
  %9871 = sub i64 0, %9870
  %9872 = getelementptr inbounds i8, i8* %9857, i64 %9871
  br label %9875

9873:                                             ; preds = %9838
  %9874 = icmp sgt i32 %9860, 0
  br i1 %9874, label %9875, label %10060

9875:                                             ; preds = %9873, %9863
  %9876 = phi i8* [ %9872, %9863 ], [ %9857, %9873 ]
  %9877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9878 = bitcast i8** %9877 to i32**
  %9879 = load i32*, i32** %9878, align 8
  %9880 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9881 = bitcast i8** %9880 to float**
  %9882 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9883

9883:                                             ; preds = %9895, %9875
  %9884 = phi i32 [ %9860, %9875 ], [ %9896, %9895 ]
  %9885 = phi %"class.blink::IntRect"* [ %9849, %9875 ], [ %9897, %9895 ]
  %9886 = phi %"class.blink::IntRect"* [ %9849, %9875 ], [ %9898, %9895 ]
  %9887 = phi i32 [ 0, %9875 ], [ %9907, %9895 ]
  %9888 = phi i32* [ %9879, %9875 ], [ %9900, %9895 ]
  %9889 = phi i8* [ %9876, %9875 ], [ %9906, %9895 ]
  %9890 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9886, i64 0, i32 1, i32 1
  %9891 = load i32, i32* %9890, align 4
  %9892 = icmp sgt i32 %9891, 0
  br i1 %9892, label %9909, label %9895

9893:                                             ; preds = %10051
  %9894 = load i32, i32* %9859, align 8
  br label %9895

9895:                                             ; preds = %9893, %9883
  %9896 = phi i32 [ %9884, %9883 ], [ %9894, %9893 ]
  %9897 = phi %"class.blink::IntRect"* [ %9885, %9883 ], [ %10052, %9893 ]
  %9898 = phi %"class.blink::IntRect"* [ %9886, %9883 ], [ %10052, %9893 ]
  %9899 = phi i8* [ %9889, %9883 ], [ %10053, %9893 ]
  %9900 = phi i32* [ %9888, %9883 ], [ %10054, %9893 ]
  %9901 = phi i32 [ %9891, %9883 ], [ %10057, %9893 ]
  %9902 = load i32, i32* %9882, align 4
  %9903 = sub nsw i32 %9902, %9901
  %9904 = sext i32 %9903 to i64
  %9905 = mul nsw i64 %9904, %9841
  %9906 = getelementptr inbounds i8, i8* %9899, i64 %9905
  %9907 = add nuw nsw i32 %9887, 1
  %9908 = icmp slt i32 %9907, %9896
  br i1 %9908, label %9883, label %10060

9909:                                             ; preds = %9883, %10051
  %9910 = phi i64 [ %10059, %10051 ], [ 0, %9883 ]
  %9911 = phi %"class.blink::IntRect"* [ %10052, %10051 ], [ %9885, %9883 ]
  %9912 = phi %"class.blink::IntRect"* [ %10052, %10051 ], [ %9886, %9883 ]
  %9913 = phi i32 [ %10055, %10051 ], [ 0, %9883 ]
  %9914 = phi i32* [ %10054, %10051 ], [ %9888, %9883 ]
  %9915 = phi i8* [ %10053, %10051 ], [ %9889, %9883 ]
  %9916 = mul i64 %9910, %9845
  %9917 = getelementptr i32, i32* %9888, i64 %9916
  %9918 = add i64 %9916, 1
  %9919 = getelementptr i32, i32* %9888, i64 %9918
  %9920 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9912, i64 0, i32 1, i32 0
  %9921 = load i32, i32* %9920, align 4
  %9922 = icmp eq i32 %9921, 0
  br i1 %9922, label %10051, label %9923

9923:                                             ; preds = %9909
  %9924 = load float*, float** %9881, align 8
  br label %9925

9925:                                             ; preds = %9925, %9923
  %9926 = phi i32 [ %9949, %9925 ], [ 0, %9923 ]
  %9927 = phi i8* [ %9947, %9925 ], [ %9915, %9923 ]
  %9928 = phi float* [ %9948, %9925 ], [ %9924, %9923 ]
  %9929 = load i8, i8* %9927, align 1
  %9930 = uitofp i8 %9929 to float
  %9931 = fmul float %9930, 0x3F70101020000000
  store float %9931, float* %9928, align 4
  %9932 = getelementptr inbounds i8, i8* %9927, i64 1
  %9933 = load i8, i8* %9932, align 1
  %9934 = uitofp i8 %9933 to float
  %9935 = fmul float %9934, 0x3F70101020000000
  %9936 = getelementptr inbounds float, float* %9928, i64 1
  store float %9935, float* %9936, align 4
  %9937 = getelementptr inbounds i8, i8* %9927, i64 2
  %9938 = load i8, i8* %9937, align 1
  %9939 = uitofp i8 %9938 to float
  %9940 = fmul float %9939, 0x3F70101020000000
  %9941 = getelementptr inbounds float, float* %9928, i64 2
  store float %9940, float* %9941, align 4
  %9942 = getelementptr inbounds i8, i8* %9927, i64 3
  %9943 = load i8, i8* %9942, align 1
  %9944 = uitofp i8 %9943 to float
  %9945 = fmul float %9944, 0x3F70101020000000
  %9946 = getelementptr inbounds float, float* %9928, i64 3
  store float %9945, float* %9946, align 4
  %9947 = getelementptr inbounds i8, i8* %9927, i64 4
  %9948 = getelementptr inbounds float, float* %9928, i64 4
  %9949 = add nuw i32 %9926, 1
  %9950 = icmp eq i32 %9949, %9921
  br i1 %9950, label %9951, label %9925

9951:                                             ; preds = %9925
  %9952 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9848, align 8
  %9953 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9952, i64 0, i32 1, i32 0
  %9954 = load i32, i32* %9953, align 4
  %9955 = icmp eq i32 %9954, 0
  br i1 %9955, label %10051, label %9956

9956:                                             ; preds = %9951
  %9957 = load float*, float** %9881, align 8
  %9958 = add i32 %9954, -1
  %9959 = zext i32 %9958 to i64
  %9960 = add nuw nsw i64 %9959, 1
  %9961 = icmp ult i64 %9960, 4
  br i1 %9961, label %10013, label %9962

9962:                                             ; preds = %9956
  %9963 = add i32 %9954, -1
  %9964 = zext i32 %9963 to i64
  %9965 = getelementptr i32, i32* %9919, i64 %9964
  %9966 = getelementptr float, float* %9957, i64 4
  %9967 = shl nuw nsw i64 %9964, 2
  %9968 = getelementptr float, float* %9966, i64 %9967
  %9969 = bitcast float* %9968 to i32*
  %9970 = icmp ult i32* %9917, %9969
  %9971 = bitcast i32* %9965 to float*
  %9972 = icmp ult float* %9957, %9971
  %9973 = and i1 %9970, %9972
  br i1 %9973, label %10013, label %9974

9974:                                             ; preds = %9962
  %9975 = and i64 %9960, 8589934588
  %9976 = shl nuw nsw i64 %9975, 2
  %9977 = getelementptr float, float* %9957, i64 %9976
  %9978 = getelementptr i32, i32* %9914, i64 %9975
  %9979 = trunc i64 %9975 to i32
  br label %9980

9980:                                             ; preds = %9980, %9974
  %9981 = phi i64 [ 0, %9974 ], [ %10009, %9980 ]
  %9982 = shl i64 %9981, 2
  %9983 = getelementptr i32, i32* %9914, i64 %9981
  %9984 = getelementptr inbounds float, float* %9957, i64 %9982
  %9985 = bitcast float* %9984 to <16 x float>*
  %9986 = load <16 x float>, <16 x float>* %9985, align 4
  %9987 = shufflevector <16 x float> %9986, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %9988 = shufflevector <16 x float> %9986, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %9989 = shufflevector <16 x float> %9986, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %9990 = shufflevector <16 x float> %9986, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %9991 = fcmp une <4 x float> %9990, zeroinitializer
  %9992 = fdiv <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>, %9990
  %9993 = select <4 x i1> %9991, <4 x float> %9992, <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %9994 = fmul <4 x float> %9987, %9993
  %9995 = fptoui <4 x float> %9994 to <4 x i32>
  %9996 = fmul <4 x float> %9988, %9993
  %9997 = fptoui <4 x float> %9996 to <4 x i32>
  %9998 = fmul <4 x float> %9993, %9989
  %9999 = fptoui <4 x float> %9998 to <4 x i32>
  %10000 = fmul <4 x float> %9990, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %10001 = fptoui <4 x float> %10000 to <4 x i32>
  %10002 = shl <4 x i32> %10001, <i32 30, i32 30, i32 30, i32 30>
  %10003 = shl <4 x i32> %9999, <i32 20, i32 20, i32 20, i32 20>
  %10004 = shl <4 x i32> %9997, <i32 10, i32 10, i32 10, i32 10>
  %10005 = or <4 x i32> %10002, %9995
  %10006 = or <4 x i32> %10005, %10004
  %10007 = or <4 x i32> %10006, %10003
  %10008 = bitcast i32* %9983 to <4 x i32>*
  store <4 x i32> %10007, <4 x i32>* %10008, align 4, !alias.scope !251, !noalias !254
  %10009 = add i64 %9981, 4
  %10010 = icmp eq i64 %10009, %9975
  br i1 %10010, label %10011, label %9980, !llvm.loop !256

10011:                                            ; preds = %9980
  %10012 = icmp eq i64 %9960, %9975
  br i1 %10012, label %10049, label %10013

10013:                                            ; preds = %10011, %9962, %9956
  %10014 = phi float* [ %9957, %9962 ], [ %9957, %9956 ], [ %9977, %10011 ]
  %10015 = phi i32* [ %9914, %9962 ], [ %9914, %9956 ], [ %9978, %10011 ]
  %10016 = phi i32 [ 0, %9962 ], [ 0, %9956 ], [ %9979, %10011 ]
  br label %10017

10017:                                            ; preds = %10013, %10017
  %10018 = phi float* [ %10045, %10017 ], [ %10014, %10013 ]
  %10019 = phi i32* [ %10046, %10017 ], [ %10015, %10013 ]
  %10020 = phi i32 [ %10047, %10017 ], [ %10016, %10013 ]
  %10021 = getelementptr inbounds float, float* %10018, i64 3
  %10022 = load float, float* %10021, align 4
  %10023 = fcmp une float %10022, 0.000000e+00
  %10024 = fdiv float 1.023000e+03, %10022
  %10025 = select i1 %10023, float %10024, float 1.023000e+03
  %10026 = load float, float* %10018, align 4
  %10027 = fmul float %10026, %10025
  %10028 = fptoui float %10027 to i32
  %10029 = getelementptr inbounds float, float* %10018, i64 1
  %10030 = load float, float* %10029, align 4
  %10031 = fmul float %10030, %10025
  %10032 = fptoui float %10031 to i32
  %10033 = getelementptr inbounds float, float* %10018, i64 2
  %10034 = load float, float* %10033, align 4
  %10035 = fmul float %10025, %10034
  %10036 = fptoui float %10035 to i32
  %10037 = fmul float %10022, 3.000000e+00
  %10038 = fptoui float %10037 to i32
  %10039 = shl i32 %10038, 30
  %10040 = shl i32 %10036, 20
  %10041 = shl i32 %10032, 10
  %10042 = or i32 %10039, %10028
  %10043 = or i32 %10042, %10041
  %10044 = or i32 %10043, %10040
  store i32 %10044, i32* %10019, align 4
  %10045 = getelementptr inbounds float, float* %10018, i64 4
  %10046 = getelementptr inbounds i32, i32* %10019, i64 1
  %10047 = add nuw i32 %10020, 1
  %10048 = icmp eq i32 %10047, %9954
  br i1 %10048, label %10049, label %10017, !llvm.loop !257

10049:                                            ; preds = %10017, %10011
  %10050 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9848, align 8
  br label %10051

10051:                                            ; preds = %10049, %9951, %9909
  %10052 = phi %"class.blink::IntRect"* [ %10050, %10049 ], [ %9952, %9951 ], [ %9911, %9909 ]
  %10053 = getelementptr inbounds i8, i8* %9915, i64 %9841
  %10054 = getelementptr inbounds i32, i32* %9914, i64 %9845
  %10055 = add nuw nsw i32 %9913, 1
  %10056 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10052, i64 0, i32 1, i32 1
  %10057 = load i32, i32* %10056, align 4
  %10058 = icmp slt i32 %10055, %10057
  %10059 = add i64 %9910, 1
  br i1 %10058, label %9909, label %9893

10060:                                            ; preds = %9895, %9873
  %10061 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10061, align 4
  br label %11653

10062:                                            ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %10063
    i32 1, label %10203
    i32 2, label %10374
  ]

10063:                                            ; preds = %10062
  %10064 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10065 = load i32, i32* %10064, align 8
  %10066 = sext i32 %10065 to i64
  %10067 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10068 = load i32, i32* %10067, align 8
  %10069 = sext i32 %10068 to i64
  %10070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10071 = load i8*, i8** %10070, align 8
  %10072 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10073 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10072, align 8
  %10074 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10073, i64 0, i32 0, i32 1
  %10075 = load i32, i32* %10074, align 4
  %10076 = mul nsw i32 %10075, %10065
  %10077 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10078 = load i32, i32* %10077, align 4
  %10079 = add nsw i32 %10076, %10078
  %10080 = sext i32 %10079 to i64
  %10081 = getelementptr inbounds i8, i8* %10071, i64 %10080
  %10082 = icmp slt i32 %10068, 0
  %10083 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10084 = load i32, i32* %10083, align 8
  %10085 = icmp sgt i32 %10084, 1
  %10086 = and i1 %10082, %10085
  br i1 %10086, label %10087, label %10097

10087:                                            ; preds = %10063
  %10088 = add nsw i32 %10084, -1
  %10089 = sext i32 %10088 to i64
  %10090 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10091 = load i32, i32* %10090, align 4
  %10092 = sext i32 %10091 to i64
  %10093 = mul nsw i64 %10066, %10089
  %10094 = mul i64 %10093, %10092
  %10095 = sub i64 0, %10094
  %10096 = getelementptr inbounds i8, i8* %10081, i64 %10095
  br label %10099

10097:                                            ; preds = %10063
  %10098 = icmp sgt i32 %10084, 0
  br i1 %10098, label %10099, label %10201

10099:                                            ; preds = %10097, %10087
  %10100 = phi i8* [ %10096, %10087 ], [ %10081, %10097 ]
  %10101 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10102 = load i8*, i8** %10101, align 8
  %10103 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10104

10104:                                            ; preds = %10116, %10099
  %10105 = phi i32 [ %10084, %10099 ], [ %10117, %10116 ]
  %10106 = phi %"class.blink::IntRect"* [ %10073, %10099 ], [ %10118, %10116 ]
  %10107 = phi %"class.blink::IntRect"* [ %10073, %10099 ], [ %10119, %10116 ]
  %10108 = phi i32 [ 0, %10099 ], [ %10128, %10116 ]
  %10109 = phi i8* [ %10102, %10099 ], [ %10121, %10116 ]
  %10110 = phi i8* [ %10100, %10099 ], [ %10127, %10116 ]
  %10111 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10107, i64 0, i32 1, i32 1
  %10112 = load i32, i32* %10111, align 4
  %10113 = icmp sgt i32 %10112, 0
  br i1 %10113, label %10130, label %10116

10114:                                            ; preds = %10193
  %10115 = load i32, i32* %10083, align 8
  br label %10116

10116:                                            ; preds = %10114, %10104
  %10117 = phi i32 [ %10105, %10104 ], [ %10115, %10114 ]
  %10118 = phi %"class.blink::IntRect"* [ %10106, %10104 ], [ %10194, %10114 ]
  %10119 = phi %"class.blink::IntRect"* [ %10107, %10104 ], [ %10194, %10114 ]
  %10120 = phi i8* [ %10110, %10104 ], [ %10195, %10114 ]
  %10121 = phi i8* [ %10109, %10104 ], [ %10196, %10114 ]
  %10122 = phi i32 [ %10112, %10104 ], [ %10199, %10114 ]
  %10123 = load i32, i32* %10103, align 4
  %10124 = sub nsw i32 %10123, %10122
  %10125 = sext i32 %10124 to i64
  %10126 = mul nsw i64 %10125, %10066
  %10127 = getelementptr inbounds i8, i8* %10120, i64 %10126
  %10128 = add nuw nsw i32 %10108, 1
  %10129 = icmp slt i32 %10128, %10117
  br i1 %10129, label %10104, label %10201

10130:                                            ; preds = %10104, %10193
  %10131 = phi %"class.blink::IntRect"* [ %10194, %10193 ], [ %10106, %10104 ]
  %10132 = phi %"class.blink::IntRect"* [ %10194, %10193 ], [ %10107, %10104 ]
  %10133 = phi i32 [ %10197, %10193 ], [ 0, %10104 ]
  %10134 = phi i8* [ %10196, %10193 ], [ %10109, %10104 ]
  %10135 = phi i8* [ %10195, %10193 ], [ %10110, %10104 ]
  %10136 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10132, i64 0, i32 1, i32 0
  %10137 = load i32, i32* %10136, align 4
  %10138 = icmp eq i32 %10137, 0
  br i1 %10138, label %10193, label %10139

10139:                                            ; preds = %10130
  %10140 = add i32 %10137, -1
  %10141 = and i32 %10137, 3
  %10142 = icmp ult i32 %10140, 3
  br i1 %10142, label %10175, label %10143

10143:                                            ; preds = %10139
  %10144 = sub i32 %10137, %10141
  br label %10145

10145:                                            ; preds = %10145, %10143
  %10146 = phi i8* [ %10135, %10143 ], [ %10171, %10145 ]
  %10147 = phi i8* [ %10134, %10143 ], [ %10172, %10145 ]
  %10148 = phi i32 [ %10144, %10143 ], [ %10173, %10145 ]
  %10149 = load i8, i8* %10146, align 1
  store i8 %10149, i8* %10147, align 1
  %10150 = getelementptr inbounds i8, i8* %10146, i64 1
  %10151 = load i8, i8* %10150, align 1
  %10152 = getelementptr inbounds i8, i8* %10147, i64 1
  store i8 %10151, i8* %10152, align 1
  %10153 = getelementptr inbounds i8, i8* %10146, i64 4
  %10154 = getelementptr inbounds i8, i8* %10147, i64 2
  %10155 = load i8, i8* %10153, align 1
  store i8 %10155, i8* %10154, align 1
  %10156 = getelementptr inbounds i8, i8* %10146, i64 5
  %10157 = load i8, i8* %10156, align 1
  %10158 = getelementptr inbounds i8, i8* %10147, i64 3
  store i8 %10157, i8* %10158, align 1
  %10159 = getelementptr inbounds i8, i8* %10146, i64 8
  %10160 = getelementptr inbounds i8, i8* %10147, i64 4
  %10161 = load i8, i8* %10159, align 1
  store i8 %10161, i8* %10160, align 1
  %10162 = getelementptr inbounds i8, i8* %10146, i64 9
  %10163 = load i8, i8* %10162, align 1
  %10164 = getelementptr inbounds i8, i8* %10147, i64 5
  store i8 %10163, i8* %10164, align 1
  %10165 = getelementptr inbounds i8, i8* %10146, i64 12
  %10166 = getelementptr inbounds i8, i8* %10147, i64 6
  %10167 = load i8, i8* %10165, align 1
  store i8 %10167, i8* %10166, align 1
  %10168 = getelementptr inbounds i8, i8* %10146, i64 13
  %10169 = load i8, i8* %10168, align 1
  %10170 = getelementptr inbounds i8, i8* %10147, i64 7
  store i8 %10169, i8* %10170, align 1
  %10171 = getelementptr inbounds i8, i8* %10146, i64 16
  %10172 = getelementptr inbounds i8, i8* %10147, i64 8
  %10173 = add i32 %10148, -4
  %10174 = icmp eq i32 %10173, 0
  br i1 %10174, label %10175, label %10145

10175:                                            ; preds = %10145, %10139
  %10176 = phi i8* [ %10135, %10139 ], [ %10171, %10145 ]
  %10177 = phi i8* [ %10134, %10139 ], [ %10172, %10145 ]
  %10178 = icmp eq i32 %10141, 0
  br i1 %10178, label %10191, label %10179

10179:                                            ; preds = %10175, %10179
  %10180 = phi i8* [ %10187, %10179 ], [ %10176, %10175 ]
  %10181 = phi i8* [ %10188, %10179 ], [ %10177, %10175 ]
  %10182 = phi i32 [ %10189, %10179 ], [ %10141, %10175 ]
  %10183 = load i8, i8* %10180, align 1
  store i8 %10183, i8* %10181, align 1
  %10184 = getelementptr inbounds i8, i8* %10180, i64 1
  %10185 = load i8, i8* %10184, align 1
  %10186 = getelementptr inbounds i8, i8* %10181, i64 1
  store i8 %10185, i8* %10186, align 1
  %10187 = getelementptr inbounds i8, i8* %10180, i64 4
  %10188 = getelementptr inbounds i8, i8* %10181, i64 2
  %10189 = add i32 %10182, -1
  %10190 = icmp eq i32 %10189, 0
  br i1 %10190, label %10191, label %10179, !llvm.loop !258

10191:                                            ; preds = %10179, %10175
  %10192 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10072, align 8
  br label %10193

10193:                                            ; preds = %10191, %10130
  %10194 = phi %"class.blink::IntRect"* [ %10192, %10191 ], [ %10131, %10130 ]
  %10195 = getelementptr inbounds i8, i8* %10135, i64 %10066
  %10196 = getelementptr inbounds i8, i8* %10134, i64 %10069
  %10197 = add nuw nsw i32 %10133, 1
  %10198 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10194, i64 0, i32 1, i32 1
  %10199 = load i32, i32* %10198, align 4
  %10200 = icmp slt i32 %10197, %10199
  br i1 %10200, label %10130, label %10114

10201:                                            ; preds = %10116, %10097
  %10202 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10202, align 4
  br label %11653

10203:                                            ; preds = %10062
  %10204 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10205 = load i32, i32* %10204, align 8
  %10206 = sext i32 %10205 to i64
  %10207 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10208 = load i32, i32* %10207, align 8
  %10209 = sext i32 %10208 to i64
  %10210 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10211 = load i8*, i8** %10210, align 8
  %10212 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10213 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10212, align 8
  %10214 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10213, i64 0, i32 0, i32 1
  %10215 = load i32, i32* %10214, align 4
  %10216 = mul nsw i32 %10215, %10205
  %10217 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10218 = load i32, i32* %10217, align 4
  %10219 = add nsw i32 %10216, %10218
  %10220 = sext i32 %10219 to i64
  %10221 = getelementptr inbounds i8, i8* %10211, i64 %10220
  %10222 = icmp slt i32 %10208, 0
  %10223 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10224 = load i32, i32* %10223, align 8
  %10225 = icmp sgt i32 %10224, 1
  %10226 = and i1 %10222, %10225
  br i1 %10226, label %10227, label %10237

10227:                                            ; preds = %10203
  %10228 = add nsw i32 %10224, -1
  %10229 = sext i32 %10228 to i64
  %10230 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10231 = load i32, i32* %10230, align 4
  %10232 = sext i32 %10231 to i64
  %10233 = mul nsw i64 %10206, %10229
  %10234 = mul i64 %10233, %10232
  %10235 = sub i64 0, %10234
  %10236 = getelementptr inbounds i8, i8* %10221, i64 %10235
  br label %10239

10237:                                            ; preds = %10203
  %10238 = icmp sgt i32 %10224, 0
  br i1 %10238, label %10239, label %10372

10239:                                            ; preds = %10237, %10227
  %10240 = phi i8* [ %10236, %10227 ], [ %10221, %10237 ]
  %10241 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10242 = load i8*, i8** %10241, align 8
  %10243 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10244

10244:                                            ; preds = %10256, %10239
  %10245 = phi i32 [ %10224, %10239 ], [ %10257, %10256 ]
  %10246 = phi %"class.blink::IntRect"* [ %10213, %10239 ], [ %10258, %10256 ]
  %10247 = phi %"class.blink::IntRect"* [ %10213, %10239 ], [ %10259, %10256 ]
  %10248 = phi i32 [ 0, %10239 ], [ %10268, %10256 ]
  %10249 = phi i8* [ %10242, %10239 ], [ %10261, %10256 ]
  %10250 = phi i8* [ %10240, %10239 ], [ %10267, %10256 ]
  %10251 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10247, i64 0, i32 1, i32 1
  %10252 = load i32, i32* %10251, align 4
  %10253 = icmp sgt i32 %10252, 0
  br i1 %10253, label %10270, label %10256

10254:                                            ; preds = %10363
  %10255 = load i32, i32* %10223, align 8
  br label %10256

10256:                                            ; preds = %10254, %10244
  %10257 = phi i32 [ %10245, %10244 ], [ %10255, %10254 ]
  %10258 = phi %"class.blink::IntRect"* [ %10246, %10244 ], [ %10364, %10254 ]
  %10259 = phi %"class.blink::IntRect"* [ %10247, %10244 ], [ %10364, %10254 ]
  %10260 = phi i8* [ %10250, %10244 ], [ %10365, %10254 ]
  %10261 = phi i8* [ %10249, %10244 ], [ %10366, %10254 ]
  %10262 = phi i32 [ %10252, %10244 ], [ %10369, %10254 ]
  %10263 = load i32, i32* %10243, align 4
  %10264 = sub nsw i32 %10263, %10262
  %10265 = sext i32 %10264 to i64
  %10266 = mul nsw i64 %10265, %10206
  %10267 = getelementptr inbounds i8, i8* %10260, i64 %10266
  %10268 = add nuw nsw i32 %10248, 1
  %10269 = icmp slt i32 %10268, %10257
  br i1 %10269, label %10244, label %10372

10270:                                            ; preds = %10244, %10363
  %10271 = phi i64 [ %10371, %10363 ], [ 0, %10244 ]
  %10272 = phi %"class.blink::IntRect"* [ %10364, %10363 ], [ %10246, %10244 ]
  %10273 = phi %"class.blink::IntRect"* [ %10364, %10363 ], [ %10247, %10244 ]
  %10274 = phi i32 [ %10367, %10363 ], [ 0, %10244 ]
  %10275 = phi i8* [ %10366, %10363 ], [ %10249, %10244 ]
  %10276 = phi i8* [ %10365, %10363 ], [ %10250, %10244 ]
  %10277 = mul i64 %10271, %10209
  %10278 = getelementptr i8, i8* %10249, i64 %10277
  %10279 = add i64 %10277, 2
  %10280 = getelementptr i8, i8* %10249, i64 %10279
  %10281 = mul i64 %10271, %10206
  %10282 = getelementptr i8, i8* %10250, i64 %10281
  %10283 = add i64 %10281, 4
  %10284 = getelementptr i8, i8* %10250, i64 %10283
  %10285 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10273, i64 0, i32 1, i32 0
  %10286 = load i32, i32* %10285, align 4
  %10287 = icmp eq i32 %10286, 0
  br i1 %10287, label %10363, label %10288

10288:                                            ; preds = %10270
  %10289 = add i32 %10286, -1
  %10290 = zext i32 %10289 to i64
  %10291 = add nuw nsw i64 %10290, 1
  %10292 = icmp ult i64 %10291, 16
  br i1 %10292, label %10335, label %10293

10293:                                            ; preds = %10288
  %10294 = add i32 %10286, -1
  %10295 = zext i32 %10294 to i64
  %10296 = shl nuw nsw i64 %10295, 1
  %10297 = getelementptr i8, i8* %10280, i64 %10296
  %10298 = shl nuw nsw i64 %10295, 2
  %10299 = getelementptr i8, i8* %10284, i64 %10298
  %10300 = icmp ult i8* %10278, %10299
  %10301 = icmp ult i8* %10282, %10297
  %10302 = and i1 %10300, %10301
  br i1 %10302, label %10335, label %10303

10303:                                            ; preds = %10293
  %10304 = and i64 %10291, 8589934576
  %10305 = shl nuw nsw i64 %10304, 2
  %10306 = getelementptr i8, i8* %10276, i64 %10305
  %10307 = trunc i64 %10304 to i32
  %10308 = shl nuw nsw i64 %10304, 1
  %10309 = getelementptr i8, i8* %10275, i64 %10308
  br label %10310

10310:                                            ; preds = %10310, %10303
  %10311 = phi i64 [ 0, %10303 ], [ %10331, %10310 ]
  %10312 = shl i64 %10311, 2
  %10313 = shl i64 %10311, 1
  %10314 = getelementptr inbounds i8, i8* %10276, i64 %10312
  %10315 = bitcast i8* %10314 to <64 x i8>*
  %10316 = load <64 x i8>, <64 x i8>* %10315, align 1
  %10317 = shufflevector <64 x i8> %10316, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %10318 = shufflevector <64 x i8> %10316, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %10319 = shufflevector <64 x i8> %10316, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %10320 = uitofp <16 x i8> %10319 to <16 x float>
  %10321 = fdiv <16 x float> %10320, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %10322 = uitofp <16 x i8> %10317 to <16 x float>
  %10323 = fmul <16 x float> %10321, %10322
  %10324 = fptoui <16 x float> %10323 to <16 x i8>
  %10325 = uitofp <16 x i8> %10318 to <16 x float>
  %10326 = fmul <16 x float> %10321, %10325
  %10327 = fptoui <16 x float> %10326 to <16 x i8>
  %10328 = getelementptr inbounds i8, i8* %10275, i64 %10313
  %10329 = bitcast i8* %10328 to <32 x i8>*
  %10330 = shufflevector <16 x i8> %10324, <16 x i8> %10327, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %10330, <32 x i8>* %10329, align 1
  %10331 = add i64 %10311, 16
  %10332 = icmp eq i64 %10331, %10304
  br i1 %10332, label %10333, label %10310, !llvm.loop !259

10333:                                            ; preds = %10310
  %10334 = icmp eq i64 %10291, %10304
  br i1 %10334, label %10361, label %10335

10335:                                            ; preds = %10333, %10293, %10288
  %10336 = phi i8* [ %10276, %10293 ], [ %10276, %10288 ], [ %10306, %10333 ]
  %10337 = phi i32 [ 0, %10293 ], [ 0, %10288 ], [ %10307, %10333 ]
  %10338 = phi i8* [ %10275, %10293 ], [ %10275, %10288 ], [ %10309, %10333 ]
  br label %10339

10339:                                            ; preds = %10335, %10339
  %10340 = phi i8* [ %10357, %10339 ], [ %10336, %10335 ]
  %10341 = phi i32 [ %10359, %10339 ], [ %10337, %10335 ]
  %10342 = phi i8* [ %10358, %10339 ], [ %10338, %10335 ]
  %10343 = getelementptr inbounds i8, i8* %10340, i64 3
  %10344 = load i8, i8* %10343, align 1
  %10345 = uitofp i8 %10344 to float
  %10346 = fdiv float %10345, 2.550000e+02
  %10347 = load i8, i8* %10340, align 1
  %10348 = uitofp i8 %10347 to float
  %10349 = fmul float %10346, %10348
  %10350 = fptoui float %10349 to i8
  store i8 %10350, i8* %10342, align 1
  %10351 = getelementptr inbounds i8, i8* %10340, i64 1
  %10352 = load i8, i8* %10351, align 1
  %10353 = uitofp i8 %10352 to float
  %10354 = fmul float %10346, %10353
  %10355 = fptoui float %10354 to i8
  %10356 = getelementptr inbounds i8, i8* %10342, i64 1
  store i8 %10355, i8* %10356, align 1
  %10357 = getelementptr inbounds i8, i8* %10340, i64 4
  %10358 = getelementptr inbounds i8, i8* %10342, i64 2
  %10359 = add nuw i32 %10341, 1
  %10360 = icmp eq i32 %10359, %10286
  br i1 %10360, label %10361, label %10339, !llvm.loop !260

10361:                                            ; preds = %10339, %10333
  %10362 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10212, align 8
  br label %10363

10363:                                            ; preds = %10361, %10270
  %10364 = phi %"class.blink::IntRect"* [ %10362, %10361 ], [ %10272, %10270 ]
  %10365 = getelementptr inbounds i8, i8* %10276, i64 %10206
  %10366 = getelementptr inbounds i8, i8* %10275, i64 %10209
  %10367 = add nuw nsw i32 %10274, 1
  %10368 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10364, i64 0, i32 1, i32 1
  %10369 = load i32, i32* %10368, align 4
  %10370 = icmp slt i32 %10367, %10369
  %10371 = add i64 %10271, 1
  br i1 %10370, label %10270, label %10254

10372:                                            ; preds = %10256, %10237
  %10373 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10373, align 4
  br label %11653

10374:                                            ; preds = %10062
  %10375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10376 = load i32, i32* %10375, align 8
  %10377 = sext i32 %10376 to i64
  %10378 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10379 = load i32, i32* %10378, align 8
  %10380 = sext i32 %10379 to i64
  %10381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10382 = load i8*, i8** %10381, align 8
  %10383 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10384 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10383, align 8
  %10385 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10384, i64 0, i32 0, i32 1
  %10386 = load i32, i32* %10385, align 4
  %10387 = mul nsw i32 %10386, %10376
  %10388 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10389 = load i32, i32* %10388, align 4
  %10390 = add nsw i32 %10387, %10389
  %10391 = sext i32 %10390 to i64
  %10392 = getelementptr inbounds i8, i8* %10382, i64 %10391
  %10393 = icmp slt i32 %10379, 0
  %10394 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10395 = load i32, i32* %10394, align 8
  %10396 = icmp sgt i32 %10395, 1
  %10397 = and i1 %10393, %10396
  br i1 %10397, label %10398, label %10408

10398:                                            ; preds = %10374
  %10399 = add nsw i32 %10395, -1
  %10400 = sext i32 %10399 to i64
  %10401 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10402 = load i32, i32* %10401, align 4
  %10403 = sext i32 %10402 to i64
  %10404 = mul nsw i64 %10377, %10400
  %10405 = mul i64 %10404, %10403
  %10406 = sub i64 0, %10405
  %10407 = getelementptr inbounds i8, i8* %10392, i64 %10406
  br label %10410

10408:                                            ; preds = %10374
  %10409 = icmp sgt i32 %10395, 0
  br i1 %10409, label %10410, label %10486

10410:                                            ; preds = %10408, %10398
  %10411 = phi i8* [ %10407, %10398 ], [ %10392, %10408 ]
  %10412 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10413 = load i8*, i8** %10412, align 8
  %10414 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10415

10415:                                            ; preds = %10427, %10410
  %10416 = phi i32 [ %10395, %10410 ], [ %10428, %10427 ]
  %10417 = phi %"class.blink::IntRect"* [ %10384, %10410 ], [ %10429, %10427 ]
  %10418 = phi %"class.blink::IntRect"* [ %10384, %10410 ], [ %10430, %10427 ]
  %10419 = phi i32 [ 0, %10410 ], [ %10439, %10427 ]
  %10420 = phi i8* [ %10413, %10410 ], [ %10432, %10427 ]
  %10421 = phi i8* [ %10411, %10410 ], [ %10438, %10427 ]
  %10422 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10418, i64 0, i32 1, i32 1
  %10423 = load i32, i32* %10422, align 4
  %10424 = icmp sgt i32 %10423, 0
  br i1 %10424, label %10441, label %10427

10425:                                            ; preds = %10478
  %10426 = load i32, i32* %10394, align 8
  br label %10427

10427:                                            ; preds = %10425, %10415
  %10428 = phi i32 [ %10416, %10415 ], [ %10426, %10425 ]
  %10429 = phi %"class.blink::IntRect"* [ %10417, %10415 ], [ %10479, %10425 ]
  %10430 = phi %"class.blink::IntRect"* [ %10418, %10415 ], [ %10479, %10425 ]
  %10431 = phi i8* [ %10421, %10415 ], [ %10480, %10425 ]
  %10432 = phi i8* [ %10420, %10415 ], [ %10481, %10425 ]
  %10433 = phi i32 [ %10423, %10415 ], [ %10484, %10425 ]
  %10434 = load i32, i32* %10414, align 4
  %10435 = sub nsw i32 %10434, %10433
  %10436 = sext i32 %10435 to i64
  %10437 = mul nsw i64 %10436, %10377
  %10438 = getelementptr inbounds i8, i8* %10431, i64 %10437
  %10439 = add nuw nsw i32 %10419, 1
  %10440 = icmp slt i32 %10439, %10428
  br i1 %10440, label %10415, label %10486

10441:                                            ; preds = %10415, %10478
  %10442 = phi %"class.blink::IntRect"* [ %10479, %10478 ], [ %10417, %10415 ]
  %10443 = phi %"class.blink::IntRect"* [ %10479, %10478 ], [ %10418, %10415 ]
  %10444 = phi i32 [ %10482, %10478 ], [ 0, %10415 ]
  %10445 = phi i8* [ %10481, %10478 ], [ %10420, %10415 ]
  %10446 = phi i8* [ %10480, %10478 ], [ %10421, %10415 ]
  %10447 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10443, i64 0, i32 1, i32 0
  %10448 = load i32, i32* %10447, align 4
  %10449 = icmp eq i32 %10448, 0
  br i1 %10449, label %10478, label %10450

10450:                                            ; preds = %10441, %10460
  %10451 = phi i32 [ %10474, %10460 ], [ 0, %10441 ]
  %10452 = phi i8* [ %10472, %10460 ], [ %10446, %10441 ]
  %10453 = phi i8* [ %10473, %10460 ], [ %10445, %10441 ]
  %10454 = getelementptr inbounds i8, i8* %10452, i64 3
  %10455 = load i8, i8* %10454, align 1
  %10456 = icmp eq i8 %10455, 0
  br i1 %10456, label %10460, label %10457

10457:                                            ; preds = %10450
  %10458 = uitofp i8 %10455 to float
  %10459 = fdiv float 2.550000e+02, %10458
  br label %10460

10460:                                            ; preds = %10457, %10450
  %10461 = phi float [ %10459, %10457 ], [ 1.000000e+00, %10450 ]
  %10462 = load i8, i8* %10452, align 1
  %10463 = uitofp i8 %10462 to float
  %10464 = fmul float %10461, %10463
  %10465 = fptoui float %10464 to i8
  store i8 %10465, i8* %10453, align 1
  %10466 = getelementptr inbounds i8, i8* %10452, i64 1
  %10467 = load i8, i8* %10466, align 1
  %10468 = uitofp i8 %10467 to float
  %10469 = fmul float %10461, %10468
  %10470 = fptoui float %10469 to i8
  %10471 = getelementptr inbounds i8, i8* %10453, i64 1
  store i8 %10470, i8* %10471, align 1
  %10472 = getelementptr inbounds i8, i8* %10452, i64 4
  %10473 = getelementptr inbounds i8, i8* %10453, i64 2
  %10474 = add nuw i32 %10451, 1
  %10475 = icmp eq i32 %10474, %10448
  br i1 %10475, label %10476, label %10450

10476:                                            ; preds = %10460
  %10477 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10383, align 8
  br label %10478

10478:                                            ; preds = %10476, %10441
  %10479 = phi %"class.blink::IntRect"* [ %10477, %10476 ], [ %10442, %10441 ]
  %10480 = getelementptr inbounds i8, i8* %10446, i64 %10377
  %10481 = getelementptr inbounds i8, i8* %10445, i64 %10380
  %10482 = add nuw nsw i32 %10444, 1
  %10483 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10479, i64 0, i32 1, i32 1
  %10484 = load i32, i32* %10483, align 4
  %10485 = icmp slt i32 %10482, %10484
  br i1 %10485, label %10441, label %10425

10486:                                            ; preds = %10427, %10408
  %10487 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10487, align 4
  br label %11653

10488:                                            ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %10489
    i32 1, label %10652
    i32 2, label %10819
  ]

10489:                                            ; preds = %10488
  %10490 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10491 = load i32, i32* %10490, align 8
  %10492 = sext i32 %10491 to i64
  %10493 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10494 = load i32, i32* %10493, align 8
  %10495 = sdiv i32 %10494, 2
  %10496 = sext i32 %10495 to i64
  %10497 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10498 = load i8*, i8** %10497, align 8
  %10499 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10500 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10499, align 8
  %10501 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10500, i64 0, i32 0, i32 1
  %10502 = load i32, i32* %10501, align 4
  %10503 = mul nsw i32 %10502, %10491
  %10504 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10505 = load i32, i32* %10504, align 4
  %10506 = add nsw i32 %10503, %10505
  %10507 = sext i32 %10506 to i64
  %10508 = getelementptr inbounds i8, i8* %10498, i64 %10507
  %10509 = icmp slt i32 %10494, 0
  %10510 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10511 = load i32, i32* %10510, align 8
  %10512 = icmp sgt i32 %10511, 1
  %10513 = and i1 %10509, %10512
  br i1 %10513, label %10514, label %10524

10514:                                            ; preds = %10489
  %10515 = add nsw i32 %10511, -1
  %10516 = sext i32 %10515 to i64
  %10517 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10518 = load i32, i32* %10517, align 4
  %10519 = sext i32 %10518 to i64
  %10520 = mul nsw i64 %10492, %10516
  %10521 = mul i64 %10520, %10519
  %10522 = sub i64 0, %10521
  %10523 = getelementptr inbounds i8, i8* %10508, i64 %10522
  br label %10526

10524:                                            ; preds = %10489
  %10525 = icmp sgt i32 %10511, 0
  br i1 %10525, label %10526, label %10650

10526:                                            ; preds = %10524, %10514
  %10527 = phi i8* [ %10523, %10514 ], [ %10508, %10524 ]
  %10528 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10529 = bitcast i8** %10528 to i16**
  %10530 = load i16*, i16** %10529, align 8
  %10531 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10532 = bitcast i8** %10531 to float**
  %10533 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10534

10534:                                            ; preds = %10546, %10526
  %10535 = phi i32 [ %10511, %10526 ], [ %10547, %10546 ]
  %10536 = phi %"class.blink::IntRect"* [ %10500, %10526 ], [ %10548, %10546 ]
  %10537 = phi %"class.blink::IntRect"* [ %10500, %10526 ], [ %10549, %10546 ]
  %10538 = phi i32 [ 0, %10526 ], [ %10558, %10546 ]
  %10539 = phi i16* [ %10530, %10526 ], [ %10551, %10546 ]
  %10540 = phi i8* [ %10527, %10526 ], [ %10557, %10546 ]
  %10541 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10537, i64 0, i32 1, i32 1
  %10542 = load i32, i32* %10541, align 4
  %10543 = icmp sgt i32 %10542, 0
  br i1 %10543, label %10560, label %10546

10544:                                            ; preds = %10642
  %10545 = load i32, i32* %10510, align 8
  br label %10546

10546:                                            ; preds = %10544, %10534
  %10547 = phi i32 [ %10535, %10534 ], [ %10545, %10544 ]
  %10548 = phi %"class.blink::IntRect"* [ %10536, %10534 ], [ %10643, %10544 ]
  %10549 = phi %"class.blink::IntRect"* [ %10537, %10534 ], [ %10643, %10544 ]
  %10550 = phi i8* [ %10540, %10534 ], [ %10644, %10544 ]
  %10551 = phi i16* [ %10539, %10534 ], [ %10645, %10544 ]
  %10552 = phi i32 [ %10542, %10534 ], [ %10648, %10544 ]
  %10553 = load i32, i32* %10533, align 4
  %10554 = sub nsw i32 %10553, %10552
  %10555 = sext i32 %10554 to i64
  %10556 = mul nsw i64 %10555, %10492
  %10557 = getelementptr inbounds i8, i8* %10550, i64 %10556
  %10558 = add nuw nsw i32 %10538, 1
  %10559 = icmp slt i32 %10558, %10547
  br i1 %10559, label %10534, label %10650

10560:                                            ; preds = %10534, %10642
  %10561 = phi %"class.blink::IntRect"* [ %10643, %10642 ], [ %10536, %10534 ]
  %10562 = phi %"class.blink::IntRect"* [ %10643, %10642 ], [ %10537, %10534 ]
  %10563 = phi i32 [ %10646, %10642 ], [ 0, %10534 ]
  %10564 = phi i16* [ %10645, %10642 ], [ %10539, %10534 ]
  %10565 = phi i8* [ %10644, %10642 ], [ %10540, %10534 ]
  %10566 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10562, i64 0, i32 1, i32 0
  %10567 = load i32, i32* %10566, align 4
  %10568 = icmp eq i32 %10567, 0
  br i1 %10568, label %10642, label %10569

10569:                                            ; preds = %10560
  %10570 = load float*, float** %10532, align 8
  br label %10571

10571:                                            ; preds = %10571, %10569
  %10572 = phi i32 [ %10595, %10571 ], [ 0, %10569 ]
  %10573 = phi i8* [ %10593, %10571 ], [ %10565, %10569 ]
  %10574 = phi float* [ %10594, %10571 ], [ %10570, %10569 ]
  %10575 = load i8, i8* %10573, align 1
  %10576 = uitofp i8 %10575 to float
  %10577 = fmul float %10576, 0x3F70101020000000
  store float %10577, float* %10574, align 4
  %10578 = getelementptr inbounds i8, i8* %10573, i64 1
  %10579 = load i8, i8* %10578, align 1
  %10580 = uitofp i8 %10579 to float
  %10581 = fmul float %10580, 0x3F70101020000000
  %10582 = getelementptr inbounds float, float* %10574, i64 1
  store float %10581, float* %10582, align 4
  %10583 = getelementptr inbounds i8, i8* %10573, i64 2
  %10584 = load i8, i8* %10583, align 1
  %10585 = uitofp i8 %10584 to float
  %10586 = fmul float %10585, 0x3F70101020000000
  %10587 = getelementptr inbounds float, float* %10574, i64 2
  store float %10586, float* %10587, align 4
  %10588 = getelementptr inbounds i8, i8* %10573, i64 3
  %10589 = load i8, i8* %10588, align 1
  %10590 = uitofp i8 %10589 to float
  %10591 = fmul float %10590, 0x3F70101020000000
  %10592 = getelementptr inbounds float, float* %10574, i64 3
  store float %10591, float* %10592, align 4
  %10593 = getelementptr inbounds i8, i8* %10573, i64 4
  %10594 = getelementptr inbounds float, float* %10574, i64 4
  %10595 = add nuw i32 %10572, 1
  %10596 = icmp eq i32 %10595, %10567
  br i1 %10596, label %10597, label %10571

10597:                                            ; preds = %10571
  %10598 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10499, align 8
  %10599 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10598, i64 0, i32 1, i32 0
  %10600 = load i32, i32* %10599, align 4
  %10601 = icmp eq i32 %10600, 0
  br i1 %10601, label %10642, label %10602

10602:                                            ; preds = %10597
  %10603 = load float*, float** %10532, align 8
  br label %10604

10604:                                            ; preds = %10604, %10602
  %10605 = phi i32 [ %10638, %10604 ], [ 0, %10602 ]
  %10606 = phi float* [ %10636, %10604 ], [ %10603, %10602 ]
  %10607 = phi i16* [ %10637, %10604 ], [ %10564, %10602 ]
  %10608 = bitcast float* %10606 to i32*
  %10609 = load i32, i32* %10608, align 4
  %10610 = lshr i32 %10609, 23
  %10611 = zext i32 %10610 to i64
  %10612 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10611
  %10613 = load i16, i16* %10612, align 2
  %10614 = and i32 %10609, 8388607
  %10615 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10611
  %10616 = load i8, i8* %10615, align 1
  %10617 = zext i8 %10616 to i32
  %10618 = lshr i32 %10614, %10617
  %10619 = trunc i32 %10618 to i16
  %10620 = add i16 %10613, %10619
  store i16 %10620, i16* %10607, align 2
  %10621 = getelementptr inbounds float, float* %10606, i64 1
  %10622 = bitcast float* %10621 to i32*
  %10623 = load i32, i32* %10622, align 4
  %10624 = lshr i32 %10623, 23
  %10625 = zext i32 %10624 to i64
  %10626 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10625
  %10627 = load i16, i16* %10626, align 2
  %10628 = and i32 %10623, 8388607
  %10629 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10625
  %10630 = load i8, i8* %10629, align 1
  %10631 = zext i8 %10630 to i32
  %10632 = lshr i32 %10628, %10631
  %10633 = trunc i32 %10632 to i16
  %10634 = add i16 %10627, %10633
  %10635 = getelementptr inbounds i16, i16* %10607, i64 1
  store i16 %10634, i16* %10635, align 2
  %10636 = getelementptr inbounds float, float* %10606, i64 4
  %10637 = getelementptr inbounds i16, i16* %10607, i64 2
  %10638 = add nuw i32 %10605, 1
  %10639 = icmp eq i32 %10638, %10600
  br i1 %10639, label %10640, label %10604

10640:                                            ; preds = %10604
  %10641 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10499, align 8
  br label %10642

10642:                                            ; preds = %10640, %10597, %10560
  %10643 = phi %"class.blink::IntRect"* [ %10641, %10640 ], [ %10598, %10597 ], [ %10561, %10560 ]
  %10644 = getelementptr inbounds i8, i8* %10565, i64 %10492
  %10645 = getelementptr inbounds i16, i16* %10564, i64 %10496
  %10646 = add nuw nsw i32 %10563, 1
  %10647 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10643, i64 0, i32 1, i32 1
  %10648 = load i32, i32* %10647, align 4
  %10649 = icmp slt i32 %10646, %10648
  br i1 %10649, label %10560, label %10544

10650:                                            ; preds = %10546, %10524
  %10651 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10651, align 4
  br label %11653

10652:                                            ; preds = %10488
  %10653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10654 = load i32, i32* %10653, align 8
  %10655 = sext i32 %10654 to i64
  %10656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10657 = load i32, i32* %10656, align 8
  %10658 = sdiv i32 %10657, 2
  %10659 = sext i32 %10658 to i64
  %10660 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10661 = load i8*, i8** %10660, align 8
  %10662 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10663 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10662, align 8
  %10664 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10663, i64 0, i32 0, i32 1
  %10665 = load i32, i32* %10664, align 4
  %10666 = mul nsw i32 %10665, %10654
  %10667 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10668 = load i32, i32* %10667, align 4
  %10669 = add nsw i32 %10666, %10668
  %10670 = sext i32 %10669 to i64
  %10671 = getelementptr inbounds i8, i8* %10661, i64 %10670
  %10672 = icmp slt i32 %10657, 0
  %10673 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10674 = load i32, i32* %10673, align 8
  %10675 = icmp sgt i32 %10674, 1
  %10676 = and i1 %10672, %10675
  br i1 %10676, label %10677, label %10687

10677:                                            ; preds = %10652
  %10678 = add nsw i32 %10674, -1
  %10679 = sext i32 %10678 to i64
  %10680 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10681 = load i32, i32* %10680, align 4
  %10682 = sext i32 %10681 to i64
  %10683 = mul nsw i64 %10655, %10679
  %10684 = mul i64 %10683, %10682
  %10685 = sub i64 0, %10684
  %10686 = getelementptr inbounds i8, i8* %10671, i64 %10685
  br label %10689

10687:                                            ; preds = %10652
  %10688 = icmp sgt i32 %10674, 0
  br i1 %10688, label %10689, label %10817

10689:                                            ; preds = %10687, %10677
  %10690 = phi i8* [ %10686, %10677 ], [ %10671, %10687 ]
  %10691 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10692 = bitcast i8** %10691 to i16**
  %10693 = load i16*, i16** %10692, align 8
  %10694 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10695 = bitcast i8** %10694 to float**
  %10696 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10697

10697:                                            ; preds = %10709, %10689
  %10698 = phi i32 [ %10674, %10689 ], [ %10710, %10709 ]
  %10699 = phi %"class.blink::IntRect"* [ %10663, %10689 ], [ %10711, %10709 ]
  %10700 = phi %"class.blink::IntRect"* [ %10663, %10689 ], [ %10712, %10709 ]
  %10701 = phi i32 [ 0, %10689 ], [ %10721, %10709 ]
  %10702 = phi i16* [ %10693, %10689 ], [ %10714, %10709 ]
  %10703 = phi i8* [ %10690, %10689 ], [ %10720, %10709 ]
  %10704 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10700, i64 0, i32 1, i32 1
  %10705 = load i32, i32* %10704, align 4
  %10706 = icmp sgt i32 %10705, 0
  br i1 %10706, label %10723, label %10709

10707:                                            ; preds = %10809
  %10708 = load i32, i32* %10673, align 8
  br label %10709

10709:                                            ; preds = %10707, %10697
  %10710 = phi i32 [ %10698, %10697 ], [ %10708, %10707 ]
  %10711 = phi %"class.blink::IntRect"* [ %10699, %10697 ], [ %10810, %10707 ]
  %10712 = phi %"class.blink::IntRect"* [ %10700, %10697 ], [ %10810, %10707 ]
  %10713 = phi i8* [ %10703, %10697 ], [ %10811, %10707 ]
  %10714 = phi i16* [ %10702, %10697 ], [ %10812, %10707 ]
  %10715 = phi i32 [ %10705, %10697 ], [ %10815, %10707 ]
  %10716 = load i32, i32* %10696, align 4
  %10717 = sub nsw i32 %10716, %10715
  %10718 = sext i32 %10717 to i64
  %10719 = mul nsw i64 %10718, %10655
  %10720 = getelementptr inbounds i8, i8* %10713, i64 %10719
  %10721 = add nuw nsw i32 %10701, 1
  %10722 = icmp slt i32 %10721, %10710
  br i1 %10722, label %10697, label %10817

10723:                                            ; preds = %10697, %10809
  %10724 = phi %"class.blink::IntRect"* [ %10810, %10809 ], [ %10699, %10697 ]
  %10725 = phi %"class.blink::IntRect"* [ %10810, %10809 ], [ %10700, %10697 ]
  %10726 = phi i32 [ %10813, %10809 ], [ 0, %10697 ]
  %10727 = phi i16* [ %10812, %10809 ], [ %10702, %10697 ]
  %10728 = phi i8* [ %10811, %10809 ], [ %10703, %10697 ]
  %10729 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10725, i64 0, i32 1, i32 0
  %10730 = load i32, i32* %10729, align 4
  %10731 = icmp eq i32 %10730, 0
  br i1 %10731, label %10809, label %10732

10732:                                            ; preds = %10723
  %10733 = load float*, float** %10695, align 8
  br label %10734

10734:                                            ; preds = %10734, %10732
  %10735 = phi i32 [ %10758, %10734 ], [ 0, %10732 ]
  %10736 = phi i8* [ %10756, %10734 ], [ %10728, %10732 ]
  %10737 = phi float* [ %10757, %10734 ], [ %10733, %10732 ]
  %10738 = load i8, i8* %10736, align 1
  %10739 = uitofp i8 %10738 to float
  %10740 = fmul float %10739, 0x3F70101020000000
  store float %10740, float* %10737, align 4
  %10741 = getelementptr inbounds i8, i8* %10736, i64 1
  %10742 = load i8, i8* %10741, align 1
  %10743 = uitofp i8 %10742 to float
  %10744 = fmul float %10743, 0x3F70101020000000
  %10745 = getelementptr inbounds float, float* %10737, i64 1
  store float %10744, float* %10745, align 4
  %10746 = getelementptr inbounds i8, i8* %10736, i64 2
  %10747 = load i8, i8* %10746, align 1
  %10748 = uitofp i8 %10747 to float
  %10749 = fmul float %10748, 0x3F70101020000000
  %10750 = getelementptr inbounds float, float* %10737, i64 2
  store float %10749, float* %10750, align 4
  %10751 = getelementptr inbounds i8, i8* %10736, i64 3
  %10752 = load i8, i8* %10751, align 1
  %10753 = uitofp i8 %10752 to float
  %10754 = fmul float %10753, 0x3F70101020000000
  %10755 = getelementptr inbounds float, float* %10737, i64 3
  store float %10754, float* %10755, align 4
  %10756 = getelementptr inbounds i8, i8* %10736, i64 4
  %10757 = getelementptr inbounds float, float* %10737, i64 4
  %10758 = add nuw i32 %10735, 1
  %10759 = icmp eq i32 %10758, %10730
  br i1 %10759, label %10760, label %10734

10760:                                            ; preds = %10734
  %10761 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10662, align 8
  %10762 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10761, i64 0, i32 1, i32 0
  %10763 = load i32, i32* %10762, align 4
  %10764 = icmp eq i32 %10763, 0
  br i1 %10764, label %10809, label %10765

10765:                                            ; preds = %10760
  %10766 = load float*, float** %10695, align 8
  br label %10767

10767:                                            ; preds = %10767, %10765
  %10768 = phi float* [ %10803, %10767 ], [ %10766, %10765 ]
  %10769 = phi i32 [ %10805, %10767 ], [ 0, %10765 ]
  %10770 = phi i16* [ %10804, %10767 ], [ %10727, %10765 ]
  %10771 = getelementptr inbounds float, float* %10768, i64 3
  %10772 = load float, float* %10771, align 4
  %10773 = load float, float* %10768, align 4
  %10774 = fmul float %10772, %10773
  %10775 = bitcast float %10774 to i32
  %10776 = lshr i32 %10775, 23
  %10777 = zext i32 %10776 to i64
  %10778 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10777
  %10779 = load i16, i16* %10778, align 2
  %10780 = and i32 %10775, 8388607
  %10781 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10777
  %10782 = load i8, i8* %10781, align 1
  %10783 = zext i8 %10782 to i32
  %10784 = lshr i32 %10780, %10783
  %10785 = trunc i32 %10784 to i16
  %10786 = add i16 %10779, %10785
  store i16 %10786, i16* %10770, align 2
  %10787 = getelementptr inbounds float, float* %10768, i64 1
  %10788 = load float, float* %10787, align 4
  %10789 = fmul float %10772, %10788
  %10790 = bitcast float %10789 to i32
  %10791 = lshr i32 %10790, 23
  %10792 = zext i32 %10791 to i64
  %10793 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10792
  %10794 = load i16, i16* %10793, align 2
  %10795 = and i32 %10790, 8388607
  %10796 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10792
  %10797 = load i8, i8* %10796, align 1
  %10798 = zext i8 %10797 to i32
  %10799 = lshr i32 %10795, %10798
  %10800 = trunc i32 %10799 to i16
  %10801 = add i16 %10794, %10800
  %10802 = getelementptr inbounds i16, i16* %10770, i64 1
  store i16 %10801, i16* %10802, align 2
  %10803 = getelementptr inbounds float, float* %10768, i64 4
  %10804 = getelementptr inbounds i16, i16* %10770, i64 2
  %10805 = add nuw i32 %10769, 1
  %10806 = icmp eq i32 %10805, %10763
  br i1 %10806, label %10807, label %10767

10807:                                            ; preds = %10767
  %10808 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10662, align 8
  br label %10809

10809:                                            ; preds = %10807, %10760, %10723
  %10810 = phi %"class.blink::IntRect"* [ %10808, %10807 ], [ %10761, %10760 ], [ %10724, %10723 ]
  %10811 = getelementptr inbounds i8, i8* %10728, i64 %10655
  %10812 = getelementptr inbounds i16, i16* %10727, i64 %10659
  %10813 = add nuw nsw i32 %10726, 1
  %10814 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10810, i64 0, i32 1, i32 1
  %10815 = load i32, i32* %10814, align 4
  %10816 = icmp slt i32 %10813, %10815
  br i1 %10816, label %10723, label %10707

10817:                                            ; preds = %10709, %10687
  %10818 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10818, align 4
  br label %11653

10819:                                            ; preds = %10488
  %10820 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10821 = load i32, i32* %10820, align 8
  %10822 = sext i32 %10821 to i64
  %10823 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10824 = load i32, i32* %10823, align 8
  %10825 = sdiv i32 %10824, 2
  %10826 = sext i32 %10825 to i64
  %10827 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10828 = load i8*, i8** %10827, align 8
  %10829 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10830 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10829, align 8
  %10831 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10830, i64 0, i32 0, i32 1
  %10832 = load i32, i32* %10831, align 4
  %10833 = mul nsw i32 %10832, %10821
  %10834 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10835 = load i32, i32* %10834, align 4
  %10836 = add nsw i32 %10833, %10835
  %10837 = sext i32 %10836 to i64
  %10838 = getelementptr inbounds i8, i8* %10828, i64 %10837
  %10839 = icmp slt i32 %10824, 0
  %10840 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10841 = load i32, i32* %10840, align 8
  %10842 = icmp sgt i32 %10841, 1
  %10843 = and i1 %10839, %10842
  br i1 %10843, label %10844, label %10854

10844:                                            ; preds = %10819
  %10845 = add nsw i32 %10841, -1
  %10846 = sext i32 %10845 to i64
  %10847 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10848 = load i32, i32* %10847, align 4
  %10849 = sext i32 %10848 to i64
  %10850 = mul nsw i64 %10822, %10846
  %10851 = mul i64 %10850, %10849
  %10852 = sub i64 0, %10851
  %10853 = getelementptr inbounds i8, i8* %10838, i64 %10852
  br label %10856

10854:                                            ; preds = %10819
  %10855 = icmp sgt i32 %10841, 0
  br i1 %10855, label %10856, label %10987

10856:                                            ; preds = %10854, %10844
  %10857 = phi i8* [ %10853, %10844 ], [ %10838, %10854 ]
  %10858 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10859 = bitcast i8** %10858 to i16**
  %10860 = load i16*, i16** %10859, align 8
  %10861 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10862 = bitcast i8** %10861 to float**
  %10863 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10864

10864:                                            ; preds = %10876, %10856
  %10865 = phi i32 [ %10841, %10856 ], [ %10877, %10876 ]
  %10866 = phi %"class.blink::IntRect"* [ %10830, %10856 ], [ %10878, %10876 ]
  %10867 = phi %"class.blink::IntRect"* [ %10830, %10856 ], [ %10879, %10876 ]
  %10868 = phi i32 [ 0, %10856 ], [ %10888, %10876 ]
  %10869 = phi i16* [ %10860, %10856 ], [ %10881, %10876 ]
  %10870 = phi i8* [ %10857, %10856 ], [ %10887, %10876 ]
  %10871 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10867, i64 0, i32 1, i32 1
  %10872 = load i32, i32* %10871, align 4
  %10873 = icmp sgt i32 %10872, 0
  br i1 %10873, label %10890, label %10876

10874:                                            ; preds = %10979
  %10875 = load i32, i32* %10840, align 8
  br label %10876

10876:                                            ; preds = %10874, %10864
  %10877 = phi i32 [ %10865, %10864 ], [ %10875, %10874 ]
  %10878 = phi %"class.blink::IntRect"* [ %10866, %10864 ], [ %10980, %10874 ]
  %10879 = phi %"class.blink::IntRect"* [ %10867, %10864 ], [ %10980, %10874 ]
  %10880 = phi i8* [ %10870, %10864 ], [ %10981, %10874 ]
  %10881 = phi i16* [ %10869, %10864 ], [ %10982, %10874 ]
  %10882 = phi i32 [ %10872, %10864 ], [ %10985, %10874 ]
  %10883 = load i32, i32* %10863, align 4
  %10884 = sub nsw i32 %10883, %10882
  %10885 = sext i32 %10884 to i64
  %10886 = mul nsw i64 %10885, %10822
  %10887 = getelementptr inbounds i8, i8* %10880, i64 %10886
  %10888 = add nuw nsw i32 %10868, 1
  %10889 = icmp slt i32 %10888, %10877
  br i1 %10889, label %10864, label %10987

10890:                                            ; preds = %10864, %10979
  %10891 = phi %"class.blink::IntRect"* [ %10980, %10979 ], [ %10866, %10864 ]
  %10892 = phi %"class.blink::IntRect"* [ %10980, %10979 ], [ %10867, %10864 ]
  %10893 = phi i32 [ %10983, %10979 ], [ 0, %10864 ]
  %10894 = phi i16* [ %10982, %10979 ], [ %10869, %10864 ]
  %10895 = phi i8* [ %10981, %10979 ], [ %10870, %10864 ]
  %10896 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10892, i64 0, i32 1, i32 0
  %10897 = load i32, i32* %10896, align 4
  %10898 = icmp eq i32 %10897, 0
  br i1 %10898, label %10979, label %10899

10899:                                            ; preds = %10890
  %10900 = load float*, float** %10862, align 8
  br label %10901

10901:                                            ; preds = %10901, %10899
  %10902 = phi i32 [ %10925, %10901 ], [ 0, %10899 ]
  %10903 = phi i8* [ %10923, %10901 ], [ %10895, %10899 ]
  %10904 = phi float* [ %10924, %10901 ], [ %10900, %10899 ]
  %10905 = load i8, i8* %10903, align 1
  %10906 = uitofp i8 %10905 to float
  %10907 = fmul float %10906, 0x3F70101020000000
  store float %10907, float* %10904, align 4
  %10908 = getelementptr inbounds i8, i8* %10903, i64 1
  %10909 = load i8, i8* %10908, align 1
  %10910 = uitofp i8 %10909 to float
  %10911 = fmul float %10910, 0x3F70101020000000
  %10912 = getelementptr inbounds float, float* %10904, i64 1
  store float %10911, float* %10912, align 4
  %10913 = getelementptr inbounds i8, i8* %10903, i64 2
  %10914 = load i8, i8* %10913, align 1
  %10915 = uitofp i8 %10914 to float
  %10916 = fmul float %10915, 0x3F70101020000000
  %10917 = getelementptr inbounds float, float* %10904, i64 2
  store float %10916, float* %10917, align 4
  %10918 = getelementptr inbounds i8, i8* %10903, i64 3
  %10919 = load i8, i8* %10918, align 1
  %10920 = uitofp i8 %10919 to float
  %10921 = fmul float %10920, 0x3F70101020000000
  %10922 = getelementptr inbounds float, float* %10904, i64 3
  store float %10921, float* %10922, align 4
  %10923 = getelementptr inbounds i8, i8* %10903, i64 4
  %10924 = getelementptr inbounds float, float* %10904, i64 4
  %10925 = add nuw i32 %10902, 1
  %10926 = icmp eq i32 %10925, %10897
  br i1 %10926, label %10927, label %10901

10927:                                            ; preds = %10901
  %10928 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10829, align 8
  %10929 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10928, i64 0, i32 1, i32 0
  %10930 = load i32, i32* %10929, align 4
  %10931 = icmp eq i32 %10930, 0
  br i1 %10931, label %10979, label %10932

10932:                                            ; preds = %10927
  %10933 = load float*, float** %10862, align 8
  br label %10934

10934:                                            ; preds = %10934, %10932
  %10935 = phi i32 [ %10975, %10934 ], [ 0, %10932 ]
  %10936 = phi float* [ %10973, %10934 ], [ %10933, %10932 ]
  %10937 = phi i16* [ %10974, %10934 ], [ %10894, %10932 ]
  %10938 = getelementptr inbounds float, float* %10936, i64 3
  %10939 = load float, float* %10938, align 4
  %10940 = fcmp une float %10939, 0.000000e+00
  %10941 = fdiv float 1.000000e+00, %10939
  %10942 = select i1 %10940, float %10941, float 1.000000e+00
  %10943 = load float, float* %10936, align 4
  %10944 = fmul float %10943, %10942
  %10945 = bitcast float %10944 to i32
  %10946 = lshr i32 %10945, 23
  %10947 = zext i32 %10946 to i64
  %10948 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10947
  %10949 = load i16, i16* %10948, align 2
  %10950 = and i32 %10945, 8388607
  %10951 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10947
  %10952 = load i8, i8* %10951, align 1
  %10953 = zext i8 %10952 to i32
  %10954 = lshr i32 %10950, %10953
  %10955 = trunc i32 %10954 to i16
  %10956 = add i16 %10949, %10955
  store i16 %10956, i16* %10937, align 2
  %10957 = getelementptr inbounds float, float* %10936, i64 1
  %10958 = load float, float* %10957, align 4
  %10959 = fmul float %10942, %10958
  %10960 = bitcast float %10959 to i32
  %10961 = lshr i32 %10960, 23
  %10962 = zext i32 %10961 to i64
  %10963 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %10962
  %10964 = load i16, i16* %10963, align 2
  %10965 = and i32 %10960, 8388607
  %10966 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %10962
  %10967 = load i8, i8* %10966, align 1
  %10968 = zext i8 %10967 to i32
  %10969 = lshr i32 %10965, %10968
  %10970 = trunc i32 %10969 to i16
  %10971 = add i16 %10964, %10970
  %10972 = getelementptr inbounds i16, i16* %10937, i64 1
  store i16 %10971, i16* %10972, align 2
  %10973 = getelementptr inbounds float, float* %10936, i64 4
  %10974 = getelementptr inbounds i16, i16* %10937, i64 2
  %10975 = add nuw i32 %10935, 1
  %10976 = icmp eq i32 %10975, %10930
  br i1 %10976, label %10977, label %10934

10977:                                            ; preds = %10934
  %10978 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10829, align 8
  br label %10979

10979:                                            ; preds = %10977, %10927, %10890
  %10980 = phi %"class.blink::IntRect"* [ %10978, %10977 ], [ %10928, %10927 ], [ %10891, %10890 ]
  %10981 = getelementptr inbounds i8, i8* %10895, i64 %10822
  %10982 = getelementptr inbounds i16, i16* %10894, i64 %10826
  %10983 = add nuw nsw i32 %10893, 1
  %10984 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10980, i64 0, i32 1, i32 1
  %10985 = load i32, i32* %10984, align 4
  %10986 = icmp slt i32 %10983, %10985
  br i1 %10986, label %10890, label %10874

10987:                                            ; preds = %10876, %10854
  %10988 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10988, align 4
  br label %11653

10989:                                            ; preds = %3
  switch i32 %2, label %11653 [
    i32 0, label %10990
    i32 1, label %11188
    i32 2, label %11453
  ]

10990:                                            ; preds = %10989
  %10991 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10992 = load i32, i32* %10991, align 8
  %10993 = sext i32 %10992 to i64
  %10994 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10995 = load i32, i32* %10994, align 8
  %10996 = sdiv i32 %10995, 4
  %10997 = sext i32 %10996 to i64
  %10998 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10999 = load i8*, i8** %10998, align 8
  %11000 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11001 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11000, align 8
  %11002 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11001, i64 0, i32 0, i32 1
  %11003 = load i32, i32* %11002, align 4
  %11004 = mul nsw i32 %11003, %10992
  %11005 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11006 = load i32, i32* %11005, align 4
  %11007 = add nsw i32 %11004, %11006
  %11008 = sext i32 %11007 to i64
  %11009 = getelementptr inbounds i8, i8* %10999, i64 %11008
  %11010 = icmp slt i32 %10995, 0
  %11011 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11012 = load i32, i32* %11011, align 8
  %11013 = icmp sgt i32 %11012, 1
  %11014 = and i1 %11010, %11013
  br i1 %11014, label %11015, label %11025

11015:                                            ; preds = %10990
  %11016 = add nsw i32 %11012, -1
  %11017 = sext i32 %11016 to i64
  %11018 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11019 = load i32, i32* %11018, align 4
  %11020 = sext i32 %11019 to i64
  %11021 = mul nsw i64 %10993, %11017
  %11022 = mul i64 %11021, %11020
  %11023 = sub i64 0, %11022
  %11024 = getelementptr inbounds i8, i8* %11009, i64 %11023
  br label %11027

11025:                                            ; preds = %10990
  %11026 = icmp sgt i32 %11012, 0
  br i1 %11026, label %11027, label %11186

11027:                                            ; preds = %11025, %11015
  %11028 = phi i8* [ %11024, %11015 ], [ %11009, %11025 ]
  %11029 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11030 = bitcast i8** %11029 to float**
  %11031 = load float*, float** %11030, align 8
  %11032 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11033 = bitcast i8** %11032 to float**
  %11034 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11035

11035:                                            ; preds = %11047, %11027
  %11036 = phi i32 [ %11012, %11027 ], [ %11048, %11047 ]
  %11037 = phi %"class.blink::IntRect"* [ %11001, %11027 ], [ %11049, %11047 ]
  %11038 = phi %"class.blink::IntRect"* [ %11001, %11027 ], [ %11050, %11047 ]
  %11039 = phi i32 [ 0, %11027 ], [ %11059, %11047 ]
  %11040 = phi float* [ %11031, %11027 ], [ %11052, %11047 ]
  %11041 = phi i8* [ %11028, %11027 ], [ %11058, %11047 ]
  %11042 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11038, i64 0, i32 1, i32 1
  %11043 = load i32, i32* %11042, align 4
  %11044 = icmp sgt i32 %11043, 0
  br i1 %11044, label %11061, label %11047

11045:                                            ; preds = %11178
  %11046 = load i32, i32* %11011, align 8
  br label %11047

11047:                                            ; preds = %11045, %11035
  %11048 = phi i32 [ %11036, %11035 ], [ %11046, %11045 ]
  %11049 = phi %"class.blink::IntRect"* [ %11037, %11035 ], [ %11179, %11045 ]
  %11050 = phi %"class.blink::IntRect"* [ %11038, %11035 ], [ %11179, %11045 ]
  %11051 = phi i8* [ %11041, %11035 ], [ %11180, %11045 ]
  %11052 = phi float* [ %11040, %11035 ], [ %11181, %11045 ]
  %11053 = phi i32 [ %11043, %11035 ], [ %11184, %11045 ]
  %11054 = load i32, i32* %11034, align 4
  %11055 = sub nsw i32 %11054, %11053
  %11056 = sext i32 %11055 to i64
  %11057 = mul nsw i64 %11056, %10993
  %11058 = getelementptr inbounds i8, i8* %11051, i64 %11057
  %11059 = add nuw nsw i32 %11039, 1
  %11060 = icmp slt i32 %11059, %11048
  br i1 %11060, label %11035, label %11186

11061:                                            ; preds = %11035, %11178
  %11062 = phi %"class.blink::IntRect"* [ %11179, %11178 ], [ %11037, %11035 ]
  %11063 = phi %"class.blink::IntRect"* [ %11179, %11178 ], [ %11038, %11035 ]
  %11064 = phi i32 [ %11182, %11178 ], [ 0, %11035 ]
  %11065 = phi float* [ %11181, %11178 ], [ %11040, %11035 ]
  %11066 = phi i8* [ %11180, %11178 ], [ %11041, %11035 ]
  %11067 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11063, i64 0, i32 1, i32 0
  %11068 = load i32, i32* %11067, align 4
  %11069 = icmp eq i32 %11068, 0
  br i1 %11069, label %11178, label %11070

11070:                                            ; preds = %11061
  %11071 = load float*, float** %11033, align 8
  br label %11072

11072:                                            ; preds = %11072, %11070
  %11073 = phi i32 [ %11096, %11072 ], [ 0, %11070 ]
  %11074 = phi i8* [ %11094, %11072 ], [ %11066, %11070 ]
  %11075 = phi float* [ %11095, %11072 ], [ %11071, %11070 ]
  %11076 = load i8, i8* %11074, align 1
  %11077 = uitofp i8 %11076 to float
  %11078 = fmul float %11077, 0x3F70101020000000
  store float %11078, float* %11075, align 4
  %11079 = getelementptr inbounds i8, i8* %11074, i64 1
  %11080 = load i8, i8* %11079, align 1
  %11081 = uitofp i8 %11080 to float
  %11082 = fmul float %11081, 0x3F70101020000000
  %11083 = getelementptr inbounds float, float* %11075, i64 1
  store float %11082, float* %11083, align 4
  %11084 = getelementptr inbounds i8, i8* %11074, i64 2
  %11085 = load i8, i8* %11084, align 1
  %11086 = uitofp i8 %11085 to float
  %11087 = fmul float %11086, 0x3F70101020000000
  %11088 = getelementptr inbounds float, float* %11075, i64 2
  store float %11087, float* %11088, align 4
  %11089 = getelementptr inbounds i8, i8* %11074, i64 3
  %11090 = load i8, i8* %11089, align 1
  %11091 = uitofp i8 %11090 to float
  %11092 = fmul float %11091, 0x3F70101020000000
  %11093 = getelementptr inbounds float, float* %11075, i64 3
  store float %11092, float* %11093, align 4
  %11094 = getelementptr inbounds i8, i8* %11074, i64 4
  %11095 = getelementptr inbounds float, float* %11075, i64 4
  %11096 = add nuw i32 %11073, 1
  %11097 = icmp eq i32 %11096, %11068
  br i1 %11097, label %11098, label %11072

11098:                                            ; preds = %11072
  %11099 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11000, align 8
  %11100 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11099, i64 0, i32 1, i32 0
  %11101 = load i32, i32* %11100, align 4
  %11102 = icmp eq i32 %11101, 0
  br i1 %11102, label %11178, label %11103

11103:                                            ; preds = %11098
  %11104 = load float*, float** %11033, align 8
  %11105 = add i32 %11101, -1
  %11106 = and i32 %11101, 3
  %11107 = icmp ult i32 %11105, 3
  br i1 %11107, label %11156, label %11108

11108:                                            ; preds = %11103
  %11109 = sub i32 %11101, %11106
  br label %11110

11110:                                            ; preds = %11110, %11108
  %11111 = phi float* [ %11104, %11108 ], [ %11152, %11110 ]
  %11112 = phi float* [ %11065, %11108 ], [ %11153, %11110 ]
  %11113 = phi i32 [ %11109, %11108 ], [ %11154, %11110 ]
  %11114 = bitcast float* %11111 to i32*
  %11115 = load i32, i32* %11114, align 4
  %11116 = bitcast float* %11112 to i32*
  store i32 %11115, i32* %11116, align 4
  %11117 = getelementptr inbounds float, float* %11111, i64 1
  %11118 = bitcast float* %11117 to i32*
  %11119 = load i32, i32* %11118, align 4
  %11120 = getelementptr inbounds float, float* %11112, i64 1
  %11121 = bitcast float* %11120 to i32*
  store i32 %11119, i32* %11121, align 4
  %11122 = getelementptr inbounds float, float* %11111, i64 4
  %11123 = getelementptr inbounds float, float* %11112, i64 2
  %11124 = bitcast float* %11122 to i32*
  %11125 = load i32, i32* %11124, align 4
  %11126 = bitcast float* %11123 to i32*
  store i32 %11125, i32* %11126, align 4
  %11127 = getelementptr inbounds float, float* %11111, i64 5
  %11128 = bitcast float* %11127 to i32*
  %11129 = load i32, i32* %11128, align 4
  %11130 = getelementptr inbounds float, float* %11112, i64 3
  %11131 = bitcast float* %11130 to i32*
  store i32 %11129, i32* %11131, align 4
  %11132 = getelementptr inbounds float, float* %11111, i64 8
  %11133 = getelementptr inbounds float, float* %11112, i64 4
  %11134 = bitcast float* %11132 to i32*
  %11135 = load i32, i32* %11134, align 4
  %11136 = bitcast float* %11133 to i32*
  store i32 %11135, i32* %11136, align 4
  %11137 = getelementptr inbounds float, float* %11111, i64 9
  %11138 = bitcast float* %11137 to i32*
  %11139 = load i32, i32* %11138, align 4
  %11140 = getelementptr inbounds float, float* %11112, i64 5
  %11141 = bitcast float* %11140 to i32*
  store i32 %11139, i32* %11141, align 4
  %11142 = getelementptr inbounds float, float* %11111, i64 12
  %11143 = getelementptr inbounds float, float* %11112, i64 6
  %11144 = bitcast float* %11142 to i32*
  %11145 = load i32, i32* %11144, align 4
  %11146 = bitcast float* %11143 to i32*
  store i32 %11145, i32* %11146, align 4
  %11147 = getelementptr inbounds float, float* %11111, i64 13
  %11148 = bitcast float* %11147 to i32*
  %11149 = load i32, i32* %11148, align 4
  %11150 = getelementptr inbounds float, float* %11112, i64 7
  %11151 = bitcast float* %11150 to i32*
  store i32 %11149, i32* %11151, align 4
  %11152 = getelementptr inbounds float, float* %11111, i64 16
  %11153 = getelementptr inbounds float, float* %11112, i64 8
  %11154 = add i32 %11113, -4
  %11155 = icmp eq i32 %11154, 0
  br i1 %11155, label %11156, label %11110

11156:                                            ; preds = %11110, %11103
  %11157 = phi float* [ %11104, %11103 ], [ %11152, %11110 ]
  %11158 = phi float* [ %11065, %11103 ], [ %11153, %11110 ]
  %11159 = icmp eq i32 %11106, 0
  br i1 %11159, label %11176, label %11160

11160:                                            ; preds = %11156, %11160
  %11161 = phi float* [ %11172, %11160 ], [ %11157, %11156 ]
  %11162 = phi float* [ %11173, %11160 ], [ %11158, %11156 ]
  %11163 = phi i32 [ %11174, %11160 ], [ %11106, %11156 ]
  %11164 = bitcast float* %11161 to i32*
  %11165 = load i32, i32* %11164, align 4
  %11166 = bitcast float* %11162 to i32*
  store i32 %11165, i32* %11166, align 4
  %11167 = getelementptr inbounds float, float* %11161, i64 1
  %11168 = bitcast float* %11167 to i32*
  %11169 = load i32, i32* %11168, align 4
  %11170 = getelementptr inbounds float, float* %11162, i64 1
  %11171 = bitcast float* %11170 to i32*
  store i32 %11169, i32* %11171, align 4
  %11172 = getelementptr inbounds float, float* %11161, i64 4
  %11173 = getelementptr inbounds float, float* %11162, i64 2
  %11174 = add i32 %11163, -1
  %11175 = icmp eq i32 %11174, 0
  br i1 %11175, label %11176, label %11160, !llvm.loop !261

11176:                                            ; preds = %11160, %11156
  %11177 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11000, align 8
  br label %11178

11178:                                            ; preds = %11176, %11098, %11061
  %11179 = phi %"class.blink::IntRect"* [ %11177, %11176 ], [ %11099, %11098 ], [ %11062, %11061 ]
  %11180 = getelementptr inbounds i8, i8* %11066, i64 %10993
  %11181 = getelementptr inbounds float, float* %11065, i64 %10997
  %11182 = add nuw nsw i32 %11064, 1
  %11183 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11179, i64 0, i32 1, i32 1
  %11184 = load i32, i32* %11183, align 4
  %11185 = icmp slt i32 %11182, %11184
  br i1 %11185, label %11061, label %11045

11186:                                            ; preds = %11047, %11025
  %11187 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11187, align 4
  br label %11653

11188:                                            ; preds = %10989
  %11189 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11190 = load i32, i32* %11189, align 8
  %11191 = sext i32 %11190 to i64
  %11192 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11193 = load i32, i32* %11192, align 8
  %11194 = sdiv i32 %11193, 4
  %11195 = sext i32 %11194 to i64
  %11196 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11197 = load i8*, i8** %11196, align 8
  %11198 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11199 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11198, align 8
  %11200 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11199, i64 0, i32 0, i32 1
  %11201 = load i32, i32* %11200, align 4
  %11202 = mul nsw i32 %11201, %11190
  %11203 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11204 = load i32, i32* %11203, align 4
  %11205 = add nsw i32 %11202, %11204
  %11206 = sext i32 %11205 to i64
  %11207 = getelementptr inbounds i8, i8* %11197, i64 %11206
  %11208 = icmp slt i32 %11193, 0
  %11209 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11210 = load i32, i32* %11209, align 8
  %11211 = icmp sgt i32 %11210, 1
  %11212 = and i1 %11208, %11211
  br i1 %11212, label %11213, label %11223

11213:                                            ; preds = %11188
  %11214 = add nsw i32 %11210, -1
  %11215 = sext i32 %11214 to i64
  %11216 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11217 = load i32, i32* %11216, align 4
  %11218 = sext i32 %11217 to i64
  %11219 = mul nsw i64 %11191, %11215
  %11220 = mul i64 %11219, %11218
  %11221 = sub i64 0, %11220
  %11222 = getelementptr inbounds i8, i8* %11207, i64 %11221
  br label %11225

11223:                                            ; preds = %11188
  %11224 = icmp sgt i32 %11210, 0
  br i1 %11224, label %11225, label %11451

11225:                                            ; preds = %11223, %11213
  %11226 = phi i8* [ %11222, %11213 ], [ %11207, %11223 ]
  %11227 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11228 = bitcast i8** %11227 to float**
  %11229 = load float*, float** %11228, align 8
  %11230 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11231 = bitcast i8** %11230 to float**
  %11232 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11233

11233:                                            ; preds = %11245, %11225
  %11234 = phi i32 [ %11210, %11225 ], [ %11246, %11245 ]
  %11235 = phi %"class.blink::IntRect"* [ %11199, %11225 ], [ %11247, %11245 ]
  %11236 = phi %"class.blink::IntRect"* [ %11199, %11225 ], [ %11248, %11245 ]
  %11237 = phi i32 [ 0, %11225 ], [ %11257, %11245 ]
  %11238 = phi float* [ %11229, %11225 ], [ %11250, %11245 ]
  %11239 = phi i8* [ %11226, %11225 ], [ %11256, %11245 ]
  %11240 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11236, i64 0, i32 1, i32 1
  %11241 = load i32, i32* %11240, align 4
  %11242 = icmp sgt i32 %11241, 0
  br i1 %11242, label %11259, label %11245

11243:                                            ; preds = %11442
  %11244 = load i32, i32* %11209, align 8
  br label %11245

11245:                                            ; preds = %11243, %11233
  %11246 = phi i32 [ %11234, %11233 ], [ %11244, %11243 ]
  %11247 = phi %"class.blink::IntRect"* [ %11235, %11233 ], [ %11443, %11243 ]
  %11248 = phi %"class.blink::IntRect"* [ %11236, %11233 ], [ %11443, %11243 ]
  %11249 = phi i8* [ %11239, %11233 ], [ %11444, %11243 ]
  %11250 = phi float* [ %11238, %11233 ], [ %11445, %11243 ]
  %11251 = phi i32 [ %11241, %11233 ], [ %11448, %11243 ]
  %11252 = load i32, i32* %11232, align 4
  %11253 = sub nsw i32 %11252, %11251
  %11254 = sext i32 %11253 to i64
  %11255 = mul nsw i64 %11254, %11191
  %11256 = getelementptr inbounds i8, i8* %11249, i64 %11255
  %11257 = add nuw nsw i32 %11237, 1
  %11258 = icmp slt i32 %11257, %11246
  br i1 %11258, label %11233, label %11451

11259:                                            ; preds = %11233, %11442
  %11260 = phi i64 [ %11450, %11442 ], [ 0, %11233 ]
  %11261 = phi %"class.blink::IntRect"* [ %11443, %11442 ], [ %11235, %11233 ]
  %11262 = phi %"class.blink::IntRect"* [ %11443, %11442 ], [ %11236, %11233 ]
  %11263 = phi i32 [ %11446, %11442 ], [ 0, %11233 ]
  %11264 = phi float* [ %11445, %11442 ], [ %11238, %11233 ]
  %11265 = phi i8* [ %11444, %11442 ], [ %11239, %11233 ]
  %11266 = mul i64 %11260, %11195
  %11267 = getelementptr float, float* %11238, i64 %11266
  %11268 = add i64 %11266, 2
  %11269 = getelementptr float, float* %11238, i64 %11268
  %11270 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11262, i64 0, i32 1, i32 0
  %11271 = load i32, i32* %11270, align 4
  %11272 = icmp eq i32 %11271, 0
  br i1 %11272, label %11442, label %11273

11273:                                            ; preds = %11259
  %11274 = load float*, float** %11231, align 8
  br label %11275

11275:                                            ; preds = %11275, %11273
  %11276 = phi i32 [ %11299, %11275 ], [ 0, %11273 ]
  %11277 = phi i8* [ %11297, %11275 ], [ %11265, %11273 ]
  %11278 = phi float* [ %11298, %11275 ], [ %11274, %11273 ]
  %11279 = load i8, i8* %11277, align 1
  %11280 = uitofp i8 %11279 to float
  %11281 = fmul float %11280, 0x3F70101020000000
  store float %11281, float* %11278, align 4
  %11282 = getelementptr inbounds i8, i8* %11277, i64 1
  %11283 = load i8, i8* %11282, align 1
  %11284 = uitofp i8 %11283 to float
  %11285 = fmul float %11284, 0x3F70101020000000
  %11286 = getelementptr inbounds float, float* %11278, i64 1
  store float %11285, float* %11286, align 4
  %11287 = getelementptr inbounds i8, i8* %11277, i64 2
  %11288 = load i8, i8* %11287, align 1
  %11289 = uitofp i8 %11288 to float
  %11290 = fmul float %11289, 0x3F70101020000000
  %11291 = getelementptr inbounds float, float* %11278, i64 2
  store float %11290, float* %11291, align 4
  %11292 = getelementptr inbounds i8, i8* %11277, i64 3
  %11293 = load i8, i8* %11292, align 1
  %11294 = uitofp i8 %11293 to float
  %11295 = fmul float %11294, 0x3F70101020000000
  %11296 = getelementptr inbounds float, float* %11278, i64 3
  store float %11295, float* %11296, align 4
  %11297 = getelementptr inbounds i8, i8* %11277, i64 4
  %11298 = getelementptr inbounds float, float* %11278, i64 4
  %11299 = add nuw i32 %11276, 1
  %11300 = icmp eq i32 %11299, %11271
  br i1 %11300, label %11301, label %11275

11301:                                            ; preds = %11275
  %11302 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11198, align 8
  %11303 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11302, i64 0, i32 1, i32 0
  %11304 = load i32, i32* %11303, align 4
  %11305 = icmp eq i32 %11304, 0
  br i1 %11305, label %11442, label %11306

11306:                                            ; preds = %11301
  %11307 = load float*, float** %11231, align 8
  %11308 = add i32 %11304, -1
  %11309 = zext i32 %11308 to i64
  %11310 = add nuw nsw i64 %11309, 1
  %11311 = icmp ult i64 %11310, 4
  br i1 %11311, label %11389, label %11312

11312:                                            ; preds = %11306
  %11313 = add i32 %11304, -1
  %11314 = zext i32 %11313 to i64
  %11315 = shl nuw nsw i64 %11314, 1
  %11316 = getelementptr float, float* %11269, i64 %11315
  %11317 = getelementptr float, float* %11307, i64 4
  %11318 = shl nuw nsw i64 %11314, 2
  %11319 = getelementptr float, float* %11317, i64 %11318
  %11320 = icmp ult float* %11267, %11319
  %11321 = icmp ult float* %11307, %11316
  %11322 = and i1 %11320, %11321
  br i1 %11322, label %11389, label %11323

11323:                                            ; preds = %11312
  %11324 = and i64 %11310, 8589934588
  %11325 = shl nuw nsw i64 %11324, 2
  %11326 = getelementptr float, float* %11307, i64 %11325
  %11327 = trunc i64 %11324 to i32
  %11328 = shl nuw nsw i64 %11324, 1
  %11329 = getelementptr float, float* %11264, i64 %11328
  %11330 = add nsw i64 %11324, -4
  %11331 = lshr exact i64 %11330, 2
  %11332 = add nuw nsw i64 %11331, 1
  %11333 = and i64 %11332, 1
  %11334 = icmp eq i64 %11330, 0
  br i1 %11334, label %11370, label %11335

11335:                                            ; preds = %11323
  %11336 = sub nuw nsw i64 %11332, %11333
  br label %11337

11337:                                            ; preds = %11337, %11335
  %11338 = phi i64 [ 0, %11335 ], [ %11367, %11337 ]
  %11339 = phi i64 [ %11336, %11335 ], [ %11368, %11337 ]
  %11340 = shl i64 %11338, 2
  %11341 = shl i64 %11338, 1
  %11342 = getelementptr inbounds float, float* %11307, i64 %11340
  %11343 = bitcast float* %11342 to <16 x float>*
  %11344 = load <16 x float>, <16 x float>* %11343, align 4
  %11345 = shufflevector <16 x float> %11344, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11346 = shufflevector <16 x float> %11344, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11347 = shufflevector <16 x float> %11344, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11348 = fmul <4 x float> %11347, %11345
  %11349 = fmul <4 x float> %11347, %11346
  %11350 = getelementptr inbounds float, float* %11264, i64 %11341
  %11351 = bitcast float* %11350 to <8 x float>*
  %11352 = shufflevector <4 x float> %11348, <4 x float> %11349, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %11352, <8 x float>* %11351, align 4
  %11353 = or i64 %11338, 4
  %11354 = shl i64 %11353, 2
  %11355 = shl i64 %11353, 1
  %11356 = getelementptr inbounds float, float* %11307, i64 %11354
  %11357 = bitcast float* %11356 to <16 x float>*
  %11358 = load <16 x float>, <16 x float>* %11357, align 4
  %11359 = shufflevector <16 x float> %11358, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11360 = shufflevector <16 x float> %11358, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11361 = shufflevector <16 x float> %11358, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11362 = fmul <4 x float> %11361, %11359
  %11363 = fmul <4 x float> %11361, %11360
  %11364 = getelementptr inbounds float, float* %11264, i64 %11355
  %11365 = bitcast float* %11364 to <8 x float>*
  %11366 = shufflevector <4 x float> %11362, <4 x float> %11363, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %11366, <8 x float>* %11365, align 4
  %11367 = add i64 %11338, 8
  %11368 = add i64 %11339, -2
  %11369 = icmp eq i64 %11368, 0
  br i1 %11369, label %11370, label %11337, !llvm.loop !262

11370:                                            ; preds = %11337, %11323
  %11371 = phi i64 [ 0, %11323 ], [ %11367, %11337 ]
  %11372 = icmp eq i64 %11333, 0
  br i1 %11372, label %11387, label %11373

11373:                                            ; preds = %11370
  %11374 = shl i64 %11371, 2
  %11375 = shl i64 %11371, 1
  %11376 = getelementptr inbounds float, float* %11307, i64 %11374
  %11377 = bitcast float* %11376 to <16 x float>*
  %11378 = load <16 x float>, <16 x float>* %11377, align 4
  %11379 = shufflevector <16 x float> %11378, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11380 = shufflevector <16 x float> %11378, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11381 = shufflevector <16 x float> %11378, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11382 = fmul <4 x float> %11381, %11379
  %11383 = fmul <4 x float> %11381, %11380
  %11384 = getelementptr inbounds float, float* %11264, i64 %11375
  %11385 = bitcast float* %11384 to <8 x float>*
  %11386 = shufflevector <4 x float> %11382, <4 x float> %11383, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %11386, <8 x float>* %11385, align 4
  br label %11387

11387:                                            ; preds = %11370, %11373
  %11388 = icmp eq i64 %11310, %11324
  br i1 %11388, label %11440, label %11389

11389:                                            ; preds = %11387, %11312, %11306
  %11390 = phi float* [ %11307, %11312 ], [ %11307, %11306 ], [ %11326, %11387 ]
  %11391 = phi i32 [ 0, %11312 ], [ 0, %11306 ], [ %11327, %11387 ]
  %11392 = phi float* [ %11264, %11312 ], [ %11264, %11306 ], [ %11329, %11387 ]
  %11393 = sub i32 %11304, %11391
  %11394 = and i32 %11393, 1
  %11395 = icmp eq i32 %11394, 0
  br i1 %11395, label %11408, label %11396

11396:                                            ; preds = %11389
  %11397 = getelementptr inbounds float, float* %11390, i64 3
  %11398 = load float, float* %11397, align 4
  %11399 = load float, float* %11390, align 4
  %11400 = fmul float %11398, %11399
  store float %11400, float* %11392, align 4
  %11401 = getelementptr inbounds float, float* %11390, i64 1
  %11402 = load float, float* %11401, align 4
  %11403 = fmul float %11398, %11402
  %11404 = getelementptr inbounds float, float* %11392, i64 1
  store float %11403, float* %11404, align 4
  %11405 = getelementptr inbounds float, float* %11390, i64 4
  %11406 = getelementptr inbounds float, float* %11392, i64 2
  %11407 = add nuw i32 %11391, 1
  br label %11408

11408:                                            ; preds = %11396, %11389
  %11409 = phi float* [ %11405, %11396 ], [ %11390, %11389 ]
  %11410 = phi i32 [ %11407, %11396 ], [ %11391, %11389 ]
  %11411 = phi float* [ %11406, %11396 ], [ %11392, %11389 ]
  %11412 = add i32 %11391, 1
  %11413 = icmp eq i32 %11304, %11412
  br i1 %11413, label %11440, label %11414

11414:                                            ; preds = %11408, %11414
  %11415 = phi float* [ %11436, %11414 ], [ %11409, %11408 ]
  %11416 = phi i32 [ %11438, %11414 ], [ %11410, %11408 ]
  %11417 = phi float* [ %11437, %11414 ], [ %11411, %11408 ]
  %11418 = getelementptr inbounds float, float* %11415, i64 3
  %11419 = load float, float* %11418, align 4
  %11420 = load float, float* %11415, align 4
  %11421 = fmul float %11419, %11420
  store float %11421, float* %11417, align 4
  %11422 = getelementptr inbounds float, float* %11415, i64 1
  %11423 = load float, float* %11422, align 4
  %11424 = fmul float %11419, %11423
  %11425 = getelementptr inbounds float, float* %11417, i64 1
  store float %11424, float* %11425, align 4
  %11426 = getelementptr inbounds float, float* %11415, i64 4
  %11427 = getelementptr inbounds float, float* %11417, i64 2
  %11428 = getelementptr inbounds float, float* %11415, i64 7
  %11429 = load float, float* %11428, align 4
  %11430 = load float, float* %11426, align 4
  %11431 = fmul float %11429, %11430
  store float %11431, float* %11427, align 4
  %11432 = getelementptr inbounds float, float* %11415, i64 5
  %11433 = load float, float* %11432, align 4
  %11434 = fmul float %11429, %11433
  %11435 = getelementptr inbounds float, float* %11417, i64 3
  store float %11434, float* %11435, align 4
  %11436 = getelementptr inbounds float, float* %11415, i64 8
  %11437 = getelementptr inbounds float, float* %11417, i64 4
  %11438 = add nuw i32 %11416, 2
  %11439 = icmp eq i32 %11438, %11304
  br i1 %11439, label %11440, label %11414, !llvm.loop !263

11440:                                            ; preds = %11408, %11414, %11387
  %11441 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11198, align 8
  br label %11442

11442:                                            ; preds = %11440, %11301, %11259
  %11443 = phi %"class.blink::IntRect"* [ %11441, %11440 ], [ %11302, %11301 ], [ %11261, %11259 ]
  %11444 = getelementptr inbounds i8, i8* %11265, i64 %11191
  %11445 = getelementptr inbounds float, float* %11264, i64 %11195
  %11446 = add nuw nsw i32 %11263, 1
  %11447 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11443, i64 0, i32 1, i32 1
  %11448 = load i32, i32* %11447, align 4
  %11449 = icmp slt i32 %11446, %11448
  %11450 = add i64 %11260, 1
  br i1 %11449, label %11259, label %11243

11451:                                            ; preds = %11245, %11223
  %11452 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11452, align 4
  br label %11653

11453:                                            ; preds = %10989
  %11454 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11455 = load i32, i32* %11454, align 8
  %11456 = sext i32 %11455 to i64
  %11457 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11458 = load i32, i32* %11457, align 8
  %11459 = sdiv i32 %11458, 4
  %11460 = sext i32 %11459 to i64
  %11461 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11462 = load i8*, i8** %11461, align 8
  %11463 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11464 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11463, align 8
  %11465 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11464, i64 0, i32 0, i32 1
  %11466 = load i32, i32* %11465, align 4
  %11467 = mul nsw i32 %11466, %11455
  %11468 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11469 = load i32, i32* %11468, align 4
  %11470 = add nsw i32 %11467, %11469
  %11471 = sext i32 %11470 to i64
  %11472 = getelementptr inbounds i8, i8* %11462, i64 %11471
  %11473 = icmp slt i32 %11458, 0
  %11474 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11475 = load i32, i32* %11474, align 8
  %11476 = icmp sgt i32 %11475, 1
  %11477 = and i1 %11473, %11476
  br i1 %11477, label %11478, label %11488

11478:                                            ; preds = %11453
  %11479 = add nsw i32 %11475, -1
  %11480 = sext i32 %11479 to i64
  %11481 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11482 = load i32, i32* %11481, align 4
  %11483 = sext i32 %11482 to i64
  %11484 = mul nsw i64 %11456, %11480
  %11485 = mul i64 %11484, %11483
  %11486 = sub i64 0, %11485
  %11487 = getelementptr inbounds i8, i8* %11472, i64 %11486
  br label %11490

11488:                                            ; preds = %11453
  %11489 = icmp sgt i32 %11475, 0
  br i1 %11489, label %11490, label %11651

11490:                                            ; preds = %11488, %11478
  %11491 = phi i8* [ %11487, %11478 ], [ %11472, %11488 ]
  %11492 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11493 = bitcast i8** %11492 to float**
  %11494 = load float*, float** %11493, align 8
  %11495 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11496 = bitcast i8** %11495 to float**
  %11497 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11498

11498:                                            ; preds = %11510, %11490
  %11499 = phi i32 [ %11475, %11490 ], [ %11511, %11510 ]
  %11500 = phi %"class.blink::IntRect"* [ %11464, %11490 ], [ %11512, %11510 ]
  %11501 = phi %"class.blink::IntRect"* [ %11464, %11490 ], [ %11513, %11510 ]
  %11502 = phi i32 [ 0, %11490 ], [ %11522, %11510 ]
  %11503 = phi float* [ %11494, %11490 ], [ %11515, %11510 ]
  %11504 = phi i8* [ %11491, %11490 ], [ %11521, %11510 ]
  %11505 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11501, i64 0, i32 1, i32 1
  %11506 = load i32, i32* %11505, align 4
  %11507 = icmp sgt i32 %11506, 0
  br i1 %11507, label %11524, label %11510

11508:                                            ; preds = %11642
  %11509 = load i32, i32* %11474, align 8
  br label %11510

11510:                                            ; preds = %11508, %11498
  %11511 = phi i32 [ %11499, %11498 ], [ %11509, %11508 ]
  %11512 = phi %"class.blink::IntRect"* [ %11500, %11498 ], [ %11643, %11508 ]
  %11513 = phi %"class.blink::IntRect"* [ %11501, %11498 ], [ %11643, %11508 ]
  %11514 = phi i8* [ %11504, %11498 ], [ %11644, %11508 ]
  %11515 = phi float* [ %11503, %11498 ], [ %11645, %11508 ]
  %11516 = phi i32 [ %11506, %11498 ], [ %11648, %11508 ]
  %11517 = load i32, i32* %11497, align 4
  %11518 = sub nsw i32 %11517, %11516
  %11519 = sext i32 %11518 to i64
  %11520 = mul nsw i64 %11519, %11456
  %11521 = getelementptr inbounds i8, i8* %11514, i64 %11520
  %11522 = add nuw nsw i32 %11502, 1
  %11523 = icmp slt i32 %11522, %11511
  br i1 %11523, label %11498, label %11651

11524:                                            ; preds = %11498, %11642
  %11525 = phi i64 [ %11650, %11642 ], [ 0, %11498 ]
  %11526 = phi %"class.blink::IntRect"* [ %11643, %11642 ], [ %11500, %11498 ]
  %11527 = phi %"class.blink::IntRect"* [ %11643, %11642 ], [ %11501, %11498 ]
  %11528 = phi i32 [ %11646, %11642 ], [ 0, %11498 ]
  %11529 = phi float* [ %11645, %11642 ], [ %11503, %11498 ]
  %11530 = phi i8* [ %11644, %11642 ], [ %11504, %11498 ]
  %11531 = mul i64 %11525, %11460
  %11532 = getelementptr float, float* %11503, i64 %11531
  %11533 = add i64 %11531, 2
  %11534 = getelementptr float, float* %11503, i64 %11533
  %11535 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11527, i64 0, i32 1, i32 0
  %11536 = load i32, i32* %11535, align 4
  %11537 = icmp eq i32 %11536, 0
  br i1 %11537, label %11642, label %11538

11538:                                            ; preds = %11524
  %11539 = load float*, float** %11496, align 8
  br label %11540

11540:                                            ; preds = %11540, %11538
  %11541 = phi i32 [ %11564, %11540 ], [ 0, %11538 ]
  %11542 = phi i8* [ %11562, %11540 ], [ %11530, %11538 ]
  %11543 = phi float* [ %11563, %11540 ], [ %11539, %11538 ]
  %11544 = load i8, i8* %11542, align 1
  %11545 = uitofp i8 %11544 to float
  %11546 = fmul float %11545, 0x3F70101020000000
  store float %11546, float* %11543, align 4
  %11547 = getelementptr inbounds i8, i8* %11542, i64 1
  %11548 = load i8, i8* %11547, align 1
  %11549 = uitofp i8 %11548 to float
  %11550 = fmul float %11549, 0x3F70101020000000
  %11551 = getelementptr inbounds float, float* %11543, i64 1
  store float %11550, float* %11551, align 4
  %11552 = getelementptr inbounds i8, i8* %11542, i64 2
  %11553 = load i8, i8* %11552, align 1
  %11554 = uitofp i8 %11553 to float
  %11555 = fmul float %11554, 0x3F70101020000000
  %11556 = getelementptr inbounds float, float* %11543, i64 2
  store float %11555, float* %11556, align 4
  %11557 = getelementptr inbounds i8, i8* %11542, i64 3
  %11558 = load i8, i8* %11557, align 1
  %11559 = uitofp i8 %11558 to float
  %11560 = fmul float %11559, 0x3F70101020000000
  %11561 = getelementptr inbounds float, float* %11543, i64 3
  store float %11560, float* %11561, align 4
  %11562 = getelementptr inbounds i8, i8* %11542, i64 4
  %11563 = getelementptr inbounds float, float* %11543, i64 4
  %11564 = add nuw i32 %11541, 1
  %11565 = icmp eq i32 %11564, %11536
  br i1 %11565, label %11566, label %11540

11566:                                            ; preds = %11540
  %11567 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11463, align 8
  %11568 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11567, i64 0, i32 1, i32 0
  %11569 = load i32, i32* %11568, align 4
  %11570 = icmp eq i32 %11569, 0
  br i1 %11570, label %11642, label %11571

11571:                                            ; preds = %11566
  %11572 = load float*, float** %11496, align 8
  %11573 = add i32 %11569, -1
  %11574 = zext i32 %11573 to i64
  %11575 = add nuw nsw i64 %11574, 1
  %11576 = icmp ult i64 %11575, 4
  br i1 %11576, label %11617, label %11577

11577:                                            ; preds = %11571
  %11578 = add i32 %11569, -1
  %11579 = zext i32 %11578 to i64
  %11580 = shl nuw nsw i64 %11579, 1
  %11581 = getelementptr float, float* %11534, i64 %11580
  %11582 = getelementptr float, float* %11572, i64 4
  %11583 = shl nuw nsw i64 %11579, 2
  %11584 = getelementptr float, float* %11582, i64 %11583
  %11585 = icmp ult float* %11532, %11584
  %11586 = icmp ult float* %11572, %11581
  %11587 = and i1 %11585, %11586
  br i1 %11587, label %11617, label %11588

11588:                                            ; preds = %11577
  %11589 = and i64 %11575, 8589934588
  %11590 = trunc i64 %11589 to i32
  %11591 = shl nuw nsw i64 %11589, 2
  %11592 = getelementptr float, float* %11572, i64 %11591
  %11593 = shl nuw nsw i64 %11589, 1
  %11594 = getelementptr float, float* %11529, i64 %11593
  br label %11595

11595:                                            ; preds = %11595, %11588
  %11596 = phi i64 [ 0, %11588 ], [ %11613, %11595 ]
  %11597 = shl i64 %11596, 2
  %11598 = shl i64 %11596, 1
  %11599 = getelementptr inbounds float, float* %11572, i64 %11597
  %11600 = bitcast float* %11599 to <16 x float>*
  %11601 = load <16 x float>, <16 x float>* %11600, align 4
  %11602 = shufflevector <16 x float> %11601, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11603 = shufflevector <16 x float> %11601, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11604 = shufflevector <16 x float> %11601, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11605 = fcmp une <4 x float> %11604, zeroinitializer
  %11606 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11604
  %11607 = select <4 x i1> %11605, <4 x float> %11606, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11608 = fmul <4 x float> %11602, %11607
  %11609 = fmul <4 x float> %11607, %11603
  %11610 = getelementptr inbounds float, float* %11529, i64 %11598
  %11611 = bitcast float* %11610 to <8 x float>*
  %11612 = shufflevector <4 x float> %11608, <4 x float> %11609, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %11612, <8 x float>* %11611, align 4
  %11613 = add i64 %11596, 4
  %11614 = icmp eq i64 %11613, %11589
  br i1 %11614, label %11615, label %11595, !llvm.loop !264

11615:                                            ; preds = %11595
  %11616 = icmp eq i64 %11575, %11589
  br i1 %11616, label %11640, label %11617

11617:                                            ; preds = %11615, %11577, %11571
  %11618 = phi i32 [ 0, %11577 ], [ 0, %11571 ], [ %11590, %11615 ]
  %11619 = phi float* [ %11572, %11577 ], [ %11572, %11571 ], [ %11592, %11615 ]
  %11620 = phi float* [ %11529, %11577 ], [ %11529, %11571 ], [ %11594, %11615 ]
  br label %11621

11621:                                            ; preds = %11617, %11621
  %11622 = phi i32 [ %11638, %11621 ], [ %11618, %11617 ]
  %11623 = phi float* [ %11636, %11621 ], [ %11619, %11617 ]
  %11624 = phi float* [ %11637, %11621 ], [ %11620, %11617 ]
  %11625 = getelementptr inbounds float, float* %11623, i64 3
  %11626 = load float, float* %11625, align 4
  %11627 = fcmp une float %11626, 0.000000e+00
  %11628 = fdiv float 1.000000e+00, %11626
  %11629 = select i1 %11627, float %11628, float 1.000000e+00
  %11630 = load float, float* %11623, align 4
  %11631 = fmul float %11630, %11629
  store float %11631, float* %11624, align 4
  %11632 = getelementptr inbounds float, float* %11623, i64 1
  %11633 = load float, float* %11632, align 4
  %11634 = fmul float %11629, %11633
  %11635 = getelementptr inbounds float, float* %11624, i64 1
  store float %11634, float* %11635, align 4
  %11636 = getelementptr inbounds float, float* %11623, i64 4
  %11637 = getelementptr inbounds float, float* %11624, i64 2
  %11638 = add nuw i32 %11622, 1
  %11639 = icmp eq i32 %11638, %11569
  br i1 %11639, label %11640, label %11621, !llvm.loop !265

11640:                                            ; preds = %11621, %11615
  %11641 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11463, align 8
  br label %11642

11642:                                            ; preds = %11640, %11566, %11524
  %11643 = phi %"class.blink::IntRect"* [ %11641, %11640 ], [ %11567, %11566 ], [ %11526, %11524 ]
  %11644 = getelementptr inbounds i8, i8* %11530, i64 %11456
  %11645 = getelementptr inbounds float, float* %11529, i64 %11460
  %11646 = add nuw nsw i32 %11528, 1
  %11647 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11643, i64 0, i32 1, i32 1
  %11648 = load i32, i32* %11647, align 4
  %11649 = icmp slt i32 %11646, %11648
  %11650 = add i64 %11525, 1
  br i1 %11649, label %11524, label %11508

11651:                                            ; preds = %11510, %11488
  %11652 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11652, align 4
  br label %11653

11653:                                            ; preds = %11651, %11451, %11186, %10989, %10987, %10817, %10650, %10488, %10486, %10372, %10201, %10062, %10060, %9836, %9612, %9395, %9393, %9301, %9300, %9298, %9213, %9212, %9210, %9048, %9047, %9045, %8960, %8959, %8957, %8798, %8797, %8795, %8641, %8447, %8332, %8330, %8130, %7933, %7741, %7739, %7528, %7323, %7141, %7139, %6926, %6719, %6535, %6533, %6373, %6185, %6183, %5975, %5793, %5609, %5607, %5421, %5238, %5061, %5059, %4854, %4655, %4481, %4479, %4359, %4176, %4048, %4046, %3867, %3697, %3500, %3498, %3330, %3165, %3003, %3001, %2818, %2650, %2511, %2509, %2256, %2254, %2067, %2065, %1874, %1872, %1615, %1379, %1132, %1130, %976, %782, %598, %596, %378, %190, %4, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE18EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"*, i32, i32) unnamed_addr #7 align 2 {
  switch i32 %1, label %15491 [
    i32 34, label %4
    i32 40, label %1051
    i32 41, label %1585
    i32 46, label %2327
    i32 47, label %2669
    i32 48, label %2858
    i32 42, label %3113
    i32 43, label %4061
    i32 44, label %4558
    i32 9, label %5106
    i32 23, label %5993
    i32 15, label %7020
    i32 16, label %7568
    i32 0, label %8144
    i32 21, label %9025
    i32 22, label %10078
    i32 6, label %11125
    i32 7, label %11716
    i32 1, label %12181
    i32 2, label %12343
    i32 3, label %12431
    i32 4, label %12596
    i32 5, label %12684
    i32 8, label %12779
    i32 26, label %13446
    i32 32, label %14326
    i32 33, label %14827
  ]

4:                                                ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %5
    i32 1, label %341
    i32 2, label %678
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %15 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %17, %7
  %19 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %18, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %13, i64 %22
  %24 = icmp slt i32 %10, 0
  %25 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp sgt i32 %26, 1
  %28 = and i1 %24, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %5
  %30 = add nsw i32 %26, -1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %8, %31
  %36 = mul i64 %35, %34
  %37 = sub i64 0, %36
  %38 = getelementptr inbounds i8, i8* %23, i64 %37
  br label %41

39:                                               ; preds = %5
  %40 = icmp sgt i32 %26, 0
  br i1 %40, label %41, label %339

41:                                               ; preds = %39, %29
  %42 = phi i8* [ %38, %29 ], [ %23, %39 ]
  %43 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %46 = bitcast i8** %45 to i32**
  %47 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %48

48:                                               ; preds = %59, %41
  %49 = phi i32 [ %26, %41 ], [ %60, %59 ]
  %50 = phi %"class.blink::IntRect"* [ %15, %41 ], [ %61, %59 ]
  %51 = phi i32 [ 0, %41 ], [ %70, %59 ]
  %52 = phi i8* [ %44, %41 ], [ %63, %59 ]
  %53 = phi i8* [ %42, %41 ], [ %69, %59 ]
  %54 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %50, i64 0, i32 1, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %72, label %59

57:                                               ; preds = %330
  %58 = load i32, i32* %25, align 8
  br label %59

59:                                               ; preds = %57, %48
  %60 = phi i32 [ %49, %48 ], [ %58, %57 ]
  %61 = phi %"class.blink::IntRect"* [ %50, %48 ], [ %331, %57 ]
  %62 = phi i8* [ %53, %48 ], [ %332, %57 ]
  %63 = phi i8* [ %52, %48 ], [ %333, %57 ]
  %64 = phi i32 [ %55, %48 ], [ %336, %57 ]
  %65 = load i32, i32* %47, align 4
  %66 = sub nsw i32 %65, %64
  %67 = sext i32 %66 to i64
  %68 = mul nsw i64 %67, %8
  %69 = getelementptr inbounds i8, i8* %62, i64 %68
  %70 = add nuw nsw i32 %51, 1
  %71 = icmp slt i32 %70, %60
  br i1 %71, label %48, label %339

72:                                               ; preds = %48, %330
  %73 = phi i64 [ %338, %330 ], [ 0, %48 ]
  %74 = phi %"class.blink::IntRect"* [ %331, %330 ], [ %50, %48 ]
  %75 = phi i32 [ %334, %330 ], [ 0, %48 ]
  %76 = phi i8* [ %333, %330 ], [ %52, %48 ]
  %77 = phi i8* [ %332, %330 ], [ %53, %48 ]
  %78 = mul i64 %73, %11
  %79 = getelementptr i8, i8* %52, i64 %78
  %80 = add i64 %78, 1
  %81 = getelementptr i8, i8* %52, i64 %80
  %82 = load i32*, i32** %46, align 8
  %83 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %74, i64 0, i32 1, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = bitcast i8* %77 to i32*
  %86 = and i32 %84, -4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %145, label %88

88:                                               ; preds = %72
  %89 = add i32 %86, -1
  %90 = lshr i32 %89, 2
  %91 = add nuw nsw i32 %90, 1
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %90, 0
  br i1 %93, label %126, label %94

94:                                               ; preds = %88
  %95 = sub nuw nsw i32 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i32* [ %85, %94 ], [ %122, %96 ]
  %98 = phi i32* [ %82, %94 ], [ %123, %96 ]
  %99 = phi i32 [ %95, %94 ], [ %124, %96 ]
  %100 = bitcast i32* %98 to <2 x i64>*
  %101 = bitcast i32* %97 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 1
  %103 = bitcast <2 x i64> %102 to <8 x i16>
  %104 = shufflevector <8 x i16> %103, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = and <2 x i64> %106, <i64 71777214294589695, i64 71777214294589695>
  %108 = and <2 x i64> %102, <i64 -71777214294589696, i64 -71777214294589696>
  %109 = or <2 x i64> %107, %108
  store <2 x i64> %109, <2 x i64>* %100, align 1
  %110 = getelementptr inbounds i32, i32* %97, i64 4
  %111 = getelementptr inbounds i32, i32* %98, i64 4
  %112 = bitcast i32* %111 to <2 x i64>*
  %113 = bitcast i32* %110 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 1
  %115 = bitcast <2 x i64> %114 to <8 x i16>
  %116 = shufflevector <8 x i16> %115, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 71777214294589695, i64 71777214294589695>
  %120 = and <2 x i64> %114, <i64 -71777214294589696, i64 -71777214294589696>
  %121 = or <2 x i64> %119, %120
  store <2 x i64> %121, <2 x i64>* %112, align 1
  %122 = getelementptr inbounds i32, i32* %97, i64 8
  %123 = getelementptr inbounds i32, i32* %98, i64 8
  %124 = add i32 %99, -2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %96

126:                                              ; preds = %96, %88
  %127 = phi i32* [ undef, %88 ], [ %122, %96 ]
  %128 = phi i32* [ undef, %88 ], [ %123, %96 ]
  %129 = phi i32* [ %85, %88 ], [ %122, %96 ]
  %130 = phi i32* [ %82, %88 ], [ %123, %96 ]
  %131 = icmp eq i32 %92, 0
  br i1 %131, label %145, label %132

132:                                              ; preds = %126
  %133 = bitcast i32* %130 to <2 x i64>*
  %134 = bitcast i32* %129 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1
  %136 = bitcast <2 x i64> %135 to <8 x i16>
  %137 = shufflevector <8 x i16> %136, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %138 = shufflevector <8 x i16> %137, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %139 = bitcast <8 x i16> %138 to <2 x i64>
  %140 = and <2 x i64> %139, <i64 71777214294589695, i64 71777214294589695>
  %141 = and <2 x i64> %135, <i64 -71777214294589696, i64 -71777214294589696>
  %142 = or <2 x i64> %140, %141
  store <2 x i64> %142, <2 x i64>* %133, align 1
  %143 = getelementptr inbounds i32, i32* %130, i64 4
  %144 = getelementptr inbounds i32, i32* %129, i64 4
  br label %145

145:                                              ; preds = %132, %126, %72
  %146 = phi i32* [ %85, %72 ], [ %127, %126 ], [ %144, %132 ]
  %147 = phi i32* [ %82, %72 ], [ %128, %126 ], [ %143, %132 ]
  %148 = sub i32 %84, %86
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %232, label %150

150:                                              ; preds = %145
  %151 = zext i32 %148 to i64
  %152 = icmp ult i32 %148, 8
  br i1 %152, label %189, label %153

153:                                              ; preds = %150
  %154 = getelementptr i32, i32* %147, i64 %151
  %155 = getelementptr i32, i32* %146, i64 %151
  %156 = icmp ult i32* %147, %155
  %157 = icmp ult i32* %146, %154
  %158 = and i1 %156, %157
  br i1 %158, label %189, label %159

159:                                              ; preds = %153
  %160 = and i64 %151, 4294967288
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %185, %161 ]
  %163 = getelementptr inbounds i32, i32* %146, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4, !alias.scope !266
  %166 = getelementptr inbounds i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4, !alias.scope !266
  %169 = lshr <4 x i32> %165, <i32 16, i32 16, i32 16, i32 16>
  %170 = lshr <4 x i32> %168, <i32 16, i32 16, i32 16, i32 16>
  %171 = shl <4 x i32> %165, <i32 16, i32 16, i32 16, i32 16>
  %172 = shl <4 x i32> %168, <i32 16, i32 16, i32 16, i32 16>
  %173 = or <4 x i32> %169, %171
  %174 = or <4 x i32> %170, %172
  %175 = and <4 x i32> %173, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %176 = and <4 x i32> %174, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %177 = and <4 x i32> %165, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %178 = and <4 x i32> %168, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %179 = or <4 x i32> %175, %177
  %180 = or <4 x i32> %176, %178
  %181 = getelementptr inbounds i32, i32* %147, i64 %162
  %182 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %182, align 4, !alias.scope !269, !noalias !266
  %183 = getelementptr inbounds i32, i32* %181, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %180, <4 x i32>* %184, align 4, !alias.scope !269, !noalias !266
  %185 = add i64 %162, 8
  %186 = icmp eq i64 %185, %160
  br i1 %186, label %187, label %161, !llvm.loop !271

187:                                              ; preds = %161
  %188 = icmp eq i64 %160, %151
  br i1 %188, label %232, label %189

189:                                              ; preds = %187, %153, %150
  %190 = phi i64 [ 0, %153 ], [ 0, %150 ], [ %160, %187 ]
  %191 = xor i64 %190, -1
  %192 = and i64 %151, 1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %205, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds i32, i32* %146, i64 %190
  %196 = load i32, i32* %195, align 4
  %197 = lshr i32 %196, 16
  %198 = shl i32 %196, 16
  %199 = or i32 %197, %198
  %200 = and i32 %199, 16711935
  %201 = and i32 %196, -16711936
  %202 = or i32 %200, %201
  %203 = getelementptr inbounds i32, i32* %147, i64 %190
  store i32 %202, i32* %203, align 4
  %204 = or i64 %190, 1
  br label %205

205:                                              ; preds = %194, %189
  %206 = phi i64 [ %204, %194 ], [ %190, %189 ]
  %207 = sub nsw i64 0, %151
  %208 = icmp eq i64 %191, %207
  br i1 %208, label %232, label %209

209:                                              ; preds = %205, %209
  %210 = phi i64 [ %230, %209 ], [ %206, %205 ]
  %211 = getelementptr inbounds i32, i32* %146, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = lshr i32 %212, 16
  %214 = shl i32 %212, 16
  %215 = or i32 %213, %214
  %216 = and i32 %215, 16711935
  %217 = and i32 %212, -16711936
  %218 = or i32 %216, %217
  %219 = getelementptr inbounds i32, i32* %147, i64 %210
  store i32 %218, i32* %219, align 4
  %220 = add nuw nsw i64 %210, 1
  %221 = getelementptr inbounds i32, i32* %146, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = lshr i32 %222, 16
  %224 = shl i32 %222, 16
  %225 = or i32 %223, %224
  %226 = and i32 %225, 16711935
  %227 = and i32 %222, -16711936
  %228 = or i32 %226, %227
  %229 = getelementptr inbounds i32, i32* %147, i64 %220
  store i32 %228, i32* %229, align 4
  %230 = add nuw nsw i64 %210, 2
  %231 = icmp eq i64 %230, %151
  br i1 %231, label %232, label %209, !llvm.loop !272

232:                                              ; preds = %205, %209, %187, %145
  %233 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14, align 8
  %234 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %233, i64 0, i32 1, i32 0
  %235 = load i32, i32* %234, align 4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %330, label %237

237:                                              ; preds = %232
  %238 = load i8*, i8** %45, align 8
  %239 = add i32 %235, -1
  %240 = zext i32 %239 to i64
  %241 = add nuw nsw i64 %240, 1
  %242 = icmp ult i64 %241, 17
  br i1 %242, label %273, label %243

243:                                              ; preds = %237
  %244 = add i32 %235, -1
  %245 = zext i32 %244 to i64
  %246 = getelementptr i8, i8* %81, i64 %245
  %247 = getelementptr i8, i8* %238, i64 1
  %248 = shl nuw nsw i64 %245, 2
  %249 = getelementptr i8, i8* %247, i64 %248
  %250 = icmp ult i8* %79, %249
  %251 = icmp ult i8* %238, %246
  %252 = and i1 %250, %251
  br i1 %252, label %273, label %253

253:                                              ; preds = %243
  %254 = and i64 %241, 15
  %255 = icmp eq i64 %254, 0
  %256 = select i1 %255, i64 16, i64 %254
  %257 = sub nsw i64 %241, %256
  %258 = trunc i64 %257 to i32
  %259 = shl nsw i64 %257, 2
  %260 = getelementptr i8, i8* %238, i64 %259
  %261 = getelementptr i8, i8* %76, i64 %257
  br label %262

262:                                              ; preds = %262, %253
  %263 = phi i64 [ 0, %253 ], [ %271, %262 ]
  %264 = shl i64 %263, 2
  %265 = getelementptr i8, i8* %238, i64 %264
  %266 = getelementptr i8, i8* %76, i64 %263
  %267 = bitcast i8* %265 to <64 x i8>*
  %268 = load <64 x i8>, <64 x i8>* %267, align 1
  %269 = shufflevector <64 x i8> %268, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %270 = bitcast i8* %266 to <16 x i8>*
  store <16 x i8> %269, <16 x i8>* %270, align 1, !alias.scope !273, !noalias !276
  %271 = add i64 %263, 16
  %272 = icmp eq i64 %271, %257
  br i1 %272, label %273, label %262, !llvm.loop !278

273:                                              ; preds = %262, %243, %237
  %274 = phi i32 [ 0, %243 ], [ 0, %237 ], [ %258, %262 ]
  %275 = phi i8* [ %238, %243 ], [ %238, %237 ], [ %260, %262 ]
  %276 = phi i8* [ %76, %243 ], [ %76, %237 ], [ %261, %262 ]
  %277 = sub i32 %235, %274
  %278 = xor i32 %274, -1
  %279 = add i32 %235, %278
  %280 = and i32 %277, 7
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %293, label %282

282:                                              ; preds = %273, %282
  %283 = phi i32 [ %290, %282 ], [ %274, %273 ]
  %284 = phi i8* [ %288, %282 ], [ %275, %273 ]
  %285 = phi i8* [ %289, %282 ], [ %276, %273 ]
  %286 = phi i32 [ %291, %282 ], [ %280, %273 ]
  %287 = load i8, i8* %284, align 1
  store i8 %287, i8* %285, align 1
  %288 = getelementptr inbounds i8, i8* %284, i64 4
  %289 = getelementptr inbounds i8, i8* %285, i64 1
  %290 = add nuw i32 %283, 1
  %291 = add i32 %286, -1
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %282, !llvm.loop !279

293:                                              ; preds = %282, %273
  %294 = phi i32 [ %274, %273 ], [ %290, %282 ]
  %295 = phi i8* [ %275, %273 ], [ %288, %282 ]
  %296 = phi i8* [ %276, %273 ], [ %289, %282 ]
  %297 = icmp ult i32 %279, 7
  br i1 %297, label %328, label %298

298:                                              ; preds = %293, %298
  %299 = phi i32 [ %326, %298 ], [ %294, %293 ]
  %300 = phi i8* [ %324, %298 ], [ %295, %293 ]
  %301 = phi i8* [ %325, %298 ], [ %296, %293 ]
  %302 = load i8, i8* %300, align 1
  store i8 %302, i8* %301, align 1
  %303 = getelementptr inbounds i8, i8* %300, i64 4
  %304 = getelementptr inbounds i8, i8* %301, i64 1
  %305 = load i8, i8* %303, align 1
  store i8 %305, i8* %304, align 1
  %306 = getelementptr inbounds i8, i8* %300, i64 8
  %307 = getelementptr inbounds i8, i8* %301, i64 2
  %308 = load i8, i8* %306, align 1
  store i8 %308, i8* %307, align 1
  %309 = getelementptr inbounds i8, i8* %300, i64 12
  %310 = getelementptr inbounds i8, i8* %301, i64 3
  %311 = load i8, i8* %309, align 1
  store i8 %311, i8* %310, align 1
  %312 = getelementptr inbounds i8, i8* %300, i64 16
  %313 = getelementptr inbounds i8, i8* %301, i64 4
  %314 = load i8, i8* %312, align 1
  store i8 %314, i8* %313, align 1
  %315 = getelementptr inbounds i8, i8* %300, i64 20
  %316 = getelementptr inbounds i8, i8* %301, i64 5
  %317 = load i8, i8* %315, align 1
  store i8 %317, i8* %316, align 1
  %318 = getelementptr inbounds i8, i8* %300, i64 24
  %319 = getelementptr inbounds i8, i8* %301, i64 6
  %320 = load i8, i8* %318, align 1
  store i8 %320, i8* %319, align 1
  %321 = getelementptr inbounds i8, i8* %300, i64 28
  %322 = getelementptr inbounds i8, i8* %301, i64 7
  %323 = load i8, i8* %321, align 1
  store i8 %323, i8* %322, align 1
  %324 = getelementptr inbounds i8, i8* %300, i64 32
  %325 = getelementptr inbounds i8, i8* %301, i64 8
  %326 = add nuw i32 %299, 8
  %327 = icmp eq i32 %326, %235
  br i1 %327, label %328, label %298, !llvm.loop !280

328:                                              ; preds = %298, %293
  %329 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14, align 8
  br label %330

330:                                              ; preds = %328, %232
  %331 = phi %"class.blink::IntRect"* [ %329, %328 ], [ %233, %232 ]
  %332 = getelementptr inbounds i8, i8* %77, i64 %8
  %333 = getelementptr inbounds i8, i8* %76, i64 %11
  %334 = add nuw nsw i32 %75, 1
  %335 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %331, i64 0, i32 1, i32 1
  %336 = load i32, i32* %335, align 4
  %337 = icmp slt i32 %334, %336
  %338 = add i64 %73, 1
  br i1 %337, label %72, label %57

339:                                              ; preds = %59, %39
  %340 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %340, align 4
  br label %15491

341:                                              ; preds = %4
  %342 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %343 = load i32, i32* %342, align 8
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %346 = load i32, i32* %345, align 8
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %349 = load i8*, i8** %348, align 8
  %350 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %351 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %350, align 8
  %352 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %351, i64 0, i32 0, i32 1
  %353 = load i32, i32* %352, align 4
  %354 = mul nsw i32 %353, %343
  %355 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %356 = load i32, i32* %355, align 4
  %357 = add nsw i32 %354, %356
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i8, i8* %349, i64 %358
  %360 = icmp slt i32 %346, 0
  %361 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %362 = load i32, i32* %361, align 8
  %363 = icmp sgt i32 %362, 1
  %364 = and i1 %360, %363
  br i1 %364, label %365, label %375

365:                                              ; preds = %341
  %366 = add nsw i32 %362, -1
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %369 = load i32, i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = mul nsw i64 %344, %367
  %372 = mul i64 %371, %370
  %373 = sub i64 0, %372
  %374 = getelementptr inbounds i8, i8* %359, i64 %373
  br label %377

375:                                              ; preds = %341
  %376 = icmp sgt i32 %362, 0
  br i1 %376, label %377, label %676

377:                                              ; preds = %375, %365
  %378 = phi i8* [ %374, %365 ], [ %359, %375 ]
  %379 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %380 = load i8*, i8** %379, align 8
  %381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %382 = bitcast i8** %381 to i32**
  %383 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %384

384:                                              ; preds = %395, %377
  %385 = phi i32 [ %362, %377 ], [ %396, %395 ]
  %386 = phi %"class.blink::IntRect"* [ %351, %377 ], [ %397, %395 ]
  %387 = phi i32 [ 0, %377 ], [ %406, %395 ]
  %388 = phi i8* [ %380, %377 ], [ %399, %395 ]
  %389 = phi i8* [ %378, %377 ], [ %405, %395 ]
  %390 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %386, i64 0, i32 1, i32 1
  %391 = load i32, i32* %390, align 4
  %392 = icmp sgt i32 %391, 0
  br i1 %392, label %408, label %395

393:                                              ; preds = %667
  %394 = load i32, i32* %361, align 8
  br label %395

395:                                              ; preds = %393, %384
  %396 = phi i32 [ %385, %384 ], [ %394, %393 ]
  %397 = phi %"class.blink::IntRect"* [ %386, %384 ], [ %668, %393 ]
  %398 = phi i8* [ %389, %384 ], [ %669, %393 ]
  %399 = phi i8* [ %388, %384 ], [ %670, %393 ]
  %400 = phi i32 [ %391, %384 ], [ %673, %393 ]
  %401 = load i32, i32* %383, align 4
  %402 = sub nsw i32 %401, %400
  %403 = sext i32 %402 to i64
  %404 = mul nsw i64 %403, %344
  %405 = getelementptr inbounds i8, i8* %398, i64 %404
  %406 = add nuw nsw i32 %387, 1
  %407 = icmp slt i32 %406, %396
  br i1 %407, label %384, label %676

408:                                              ; preds = %384, %667
  %409 = phi i64 [ %675, %667 ], [ 0, %384 ]
  %410 = phi %"class.blink::IntRect"* [ %668, %667 ], [ %386, %384 ]
  %411 = phi i32 [ %671, %667 ], [ 0, %384 ]
  %412 = phi i8* [ %670, %667 ], [ %388, %384 ]
  %413 = phi i8* [ %669, %667 ], [ %389, %384 ]
  %414 = mul i64 %409, %347
  %415 = getelementptr i8, i8* %388, i64 %414
  %416 = add i64 %414, 1
  %417 = getelementptr i8, i8* %388, i64 %416
  %418 = load i32*, i32** %382, align 8
  %419 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %410, i64 0, i32 1, i32 0
  %420 = load i32, i32* %419, align 4
  %421 = bitcast i8* %413 to i32*
  %422 = and i32 %420, -4
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %481, label %424

424:                                              ; preds = %408
  %425 = add i32 %422, -1
  %426 = lshr i32 %425, 2
  %427 = add nuw nsw i32 %426, 1
  %428 = and i32 %427, 1
  %429 = icmp eq i32 %426, 0
  br i1 %429, label %462, label %430

430:                                              ; preds = %424
  %431 = sub nuw nsw i32 %427, %428
  br label %432

432:                                              ; preds = %432, %430
  %433 = phi i32* [ %421, %430 ], [ %458, %432 ]
  %434 = phi i32* [ %418, %430 ], [ %459, %432 ]
  %435 = phi i32 [ %431, %430 ], [ %460, %432 ]
  %436 = bitcast i32* %434 to <2 x i64>*
  %437 = bitcast i32* %433 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 1
  %439 = bitcast <2 x i64> %438 to <8 x i16>
  %440 = shufflevector <8 x i16> %439, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %441 = shufflevector <8 x i16> %440, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %442 = bitcast <8 x i16> %441 to <2 x i64>
  %443 = and <2 x i64> %442, <i64 71777214294589695, i64 71777214294589695>
  %444 = and <2 x i64> %438, <i64 -71777214294589696, i64 -71777214294589696>
  %445 = or <2 x i64> %443, %444
  store <2 x i64> %445, <2 x i64>* %436, align 1
  %446 = getelementptr inbounds i32, i32* %433, i64 4
  %447 = getelementptr inbounds i32, i32* %434, i64 4
  %448 = bitcast i32* %447 to <2 x i64>*
  %449 = bitcast i32* %446 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 1
  %451 = bitcast <2 x i64> %450 to <8 x i16>
  %452 = shufflevector <8 x i16> %451, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %453 = shufflevector <8 x i16> %452, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %454 = bitcast <8 x i16> %453 to <2 x i64>
  %455 = and <2 x i64> %454, <i64 71777214294589695, i64 71777214294589695>
  %456 = and <2 x i64> %450, <i64 -71777214294589696, i64 -71777214294589696>
  %457 = or <2 x i64> %455, %456
  store <2 x i64> %457, <2 x i64>* %448, align 1
  %458 = getelementptr inbounds i32, i32* %433, i64 8
  %459 = getelementptr inbounds i32, i32* %434, i64 8
  %460 = add i32 %435, -2
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %462, label %432

462:                                              ; preds = %432, %424
  %463 = phi i32* [ undef, %424 ], [ %458, %432 ]
  %464 = phi i32* [ undef, %424 ], [ %459, %432 ]
  %465 = phi i32* [ %421, %424 ], [ %458, %432 ]
  %466 = phi i32* [ %418, %424 ], [ %459, %432 ]
  %467 = icmp eq i32 %428, 0
  br i1 %467, label %481, label %468

468:                                              ; preds = %462
  %469 = bitcast i32* %466 to <2 x i64>*
  %470 = bitcast i32* %465 to <2 x i64>*
  %471 = load <2 x i64>, <2 x i64>* %470, align 1
  %472 = bitcast <2 x i64> %471 to <8 x i16>
  %473 = shufflevector <8 x i16> %472, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %474 = shufflevector <8 x i16> %473, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %475 = bitcast <8 x i16> %474 to <2 x i64>
  %476 = and <2 x i64> %475, <i64 71777214294589695, i64 71777214294589695>
  %477 = and <2 x i64> %471, <i64 -71777214294589696, i64 -71777214294589696>
  %478 = or <2 x i64> %476, %477
  store <2 x i64> %478, <2 x i64>* %469, align 1
  %479 = getelementptr inbounds i32, i32* %466, i64 4
  %480 = getelementptr inbounds i32, i32* %465, i64 4
  br label %481

481:                                              ; preds = %468, %462, %408
  %482 = phi i32* [ %421, %408 ], [ %463, %462 ], [ %480, %468 ]
  %483 = phi i32* [ %418, %408 ], [ %464, %462 ], [ %479, %468 ]
  %484 = sub i32 %420, %422
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %568, label %486

486:                                              ; preds = %481
  %487 = zext i32 %484 to i64
  %488 = icmp ult i32 %484, 8
  br i1 %488, label %525, label %489

489:                                              ; preds = %486
  %490 = getelementptr i32, i32* %483, i64 %487
  %491 = getelementptr i32, i32* %482, i64 %487
  %492 = icmp ult i32* %483, %491
  %493 = icmp ult i32* %482, %490
  %494 = and i1 %492, %493
  br i1 %494, label %525, label %495

495:                                              ; preds = %489
  %496 = and i64 %487, 4294967288
  br label %497

497:                                              ; preds = %497, %495
  %498 = phi i64 [ 0, %495 ], [ %521, %497 ]
  %499 = getelementptr inbounds i32, i32* %482, i64 %498
  %500 = bitcast i32* %499 to <4 x i32>*
  %501 = load <4 x i32>, <4 x i32>* %500, align 4, !alias.scope !281
  %502 = getelementptr inbounds i32, i32* %499, i64 4
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4, !alias.scope !281
  %505 = lshr <4 x i32> %501, <i32 16, i32 16, i32 16, i32 16>
  %506 = lshr <4 x i32> %504, <i32 16, i32 16, i32 16, i32 16>
  %507 = shl <4 x i32> %501, <i32 16, i32 16, i32 16, i32 16>
  %508 = shl <4 x i32> %504, <i32 16, i32 16, i32 16, i32 16>
  %509 = or <4 x i32> %505, %507
  %510 = or <4 x i32> %506, %508
  %511 = and <4 x i32> %509, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %512 = and <4 x i32> %510, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %513 = and <4 x i32> %501, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %514 = and <4 x i32> %504, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %515 = or <4 x i32> %511, %513
  %516 = or <4 x i32> %512, %514
  %517 = getelementptr inbounds i32, i32* %483, i64 %498
  %518 = bitcast i32* %517 to <4 x i32>*
  store <4 x i32> %515, <4 x i32>* %518, align 4, !alias.scope !284, !noalias !281
  %519 = getelementptr inbounds i32, i32* %517, i64 4
  %520 = bitcast i32* %519 to <4 x i32>*
  store <4 x i32> %516, <4 x i32>* %520, align 4, !alias.scope !284, !noalias !281
  %521 = add i64 %498, 8
  %522 = icmp eq i64 %521, %496
  br i1 %522, label %523, label %497, !llvm.loop !286

523:                                              ; preds = %497
  %524 = icmp eq i64 %496, %487
  br i1 %524, label %568, label %525

525:                                              ; preds = %523, %489, %486
  %526 = phi i64 [ 0, %489 ], [ 0, %486 ], [ %496, %523 ]
  %527 = xor i64 %526, -1
  %528 = and i64 %487, 1
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %541, label %530

530:                                              ; preds = %525
  %531 = getelementptr inbounds i32, i32* %482, i64 %526
  %532 = load i32, i32* %531, align 4
  %533 = lshr i32 %532, 16
  %534 = shl i32 %532, 16
  %535 = or i32 %533, %534
  %536 = and i32 %535, 16711935
  %537 = and i32 %532, -16711936
  %538 = or i32 %536, %537
  %539 = getelementptr inbounds i32, i32* %483, i64 %526
  store i32 %538, i32* %539, align 4
  %540 = or i64 %526, 1
  br label %541

541:                                              ; preds = %530, %525
  %542 = phi i64 [ %540, %530 ], [ %526, %525 ]
  %543 = sub nsw i64 0, %487
  %544 = icmp eq i64 %527, %543
  br i1 %544, label %568, label %545

545:                                              ; preds = %541, %545
  %546 = phi i64 [ %566, %545 ], [ %542, %541 ]
  %547 = getelementptr inbounds i32, i32* %482, i64 %546
  %548 = load i32, i32* %547, align 4
  %549 = lshr i32 %548, 16
  %550 = shl i32 %548, 16
  %551 = or i32 %549, %550
  %552 = and i32 %551, 16711935
  %553 = and i32 %548, -16711936
  %554 = or i32 %552, %553
  %555 = getelementptr inbounds i32, i32* %483, i64 %546
  store i32 %554, i32* %555, align 4
  %556 = add nuw nsw i64 %546, 1
  %557 = getelementptr inbounds i32, i32* %482, i64 %556
  %558 = load i32, i32* %557, align 4
  %559 = lshr i32 %558, 16
  %560 = shl i32 %558, 16
  %561 = or i32 %559, %560
  %562 = and i32 %561, 16711935
  %563 = and i32 %558, -16711936
  %564 = or i32 %562, %563
  %565 = getelementptr inbounds i32, i32* %483, i64 %556
  store i32 %564, i32* %565, align 4
  %566 = add nuw nsw i64 %546, 2
  %567 = icmp eq i64 %566, %487
  br i1 %567, label %568, label %545, !llvm.loop !287

568:                                              ; preds = %541, %545, %523, %481
  %569 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %350, align 8
  %570 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %569, i64 0, i32 1, i32 0
  %571 = load i32, i32* %570, align 4
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %667, label %573

573:                                              ; preds = %568
  %574 = load i8*, i8** %381, align 8
  %575 = add i32 %571, -1
  %576 = zext i32 %575 to i64
  %577 = add nuw nsw i64 %576, 1
  %578 = icmp ult i64 %577, 16
  br i1 %578, label %614, label %579

579:                                              ; preds = %573
  %580 = add i32 %571, -1
  %581 = zext i32 %580 to i64
  %582 = getelementptr i8, i8* %417, i64 %581
  %583 = getelementptr i8, i8* %574, i64 4
  %584 = shl nuw nsw i64 %581, 2
  %585 = getelementptr i8, i8* %583, i64 %584
  %586 = icmp ult i8* %415, %585
  %587 = icmp ult i8* %574, %582
  %588 = and i1 %586, %587
  br i1 %588, label %614, label %589

589:                                              ; preds = %579
  %590 = and i64 %577, 8589934576
  %591 = shl nuw nsw i64 %590, 2
  %592 = getelementptr i8, i8* %574, i64 %591
  %593 = getelementptr i8, i8* %412, i64 %590
  %594 = trunc i64 %590 to i32
  br label %595

595:                                              ; preds = %595, %589
  %596 = phi i64 [ 0, %589 ], [ %610, %595 ]
  %597 = shl i64 %596, 2
  %598 = getelementptr i8, i8* %412, i64 %596
  %599 = getelementptr inbounds i8, i8* %574, i64 %597
  %600 = bitcast i8* %599 to <64 x i8>*
  %601 = load <64 x i8>, <64 x i8>* %600, align 1
  %602 = shufflevector <64 x i8> %601, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %603 = shufflevector <64 x i8> %601, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %604 = uitofp <16 x i8> %603 to <16 x float>
  %605 = fdiv <16 x float> %604, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %606 = uitofp <16 x i8> %602 to <16 x float>
  %607 = fmul <16 x float> %605, %606
  %608 = fptoui <16 x float> %607 to <16 x i8>
  %609 = bitcast i8* %598 to <16 x i8>*
  store <16 x i8> %608, <16 x i8>* %609, align 1, !alias.scope !288, !noalias !291
  %610 = add i64 %596, 16
  %611 = icmp eq i64 %610, %590
  br i1 %611, label %612, label %595, !llvm.loop !293

612:                                              ; preds = %595
  %613 = icmp eq i64 %577, %590
  br i1 %613, label %665, label %614

614:                                              ; preds = %612, %579, %573
  %615 = phi i8* [ %574, %579 ], [ %574, %573 ], [ %592, %612 ]
  %616 = phi i8* [ %412, %579 ], [ %412, %573 ], [ %593, %612 ]
  %617 = phi i32 [ 0, %579 ], [ 0, %573 ], [ %594, %612 ]
  %618 = sub i32 %571, %617
  %619 = and i32 %618, 1
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %633, label %621

621:                                              ; preds = %614
  %622 = getelementptr inbounds i8, i8* %615, i64 3
  %623 = load i8, i8* %622, align 1
  %624 = uitofp i8 %623 to float
  %625 = fdiv float %624, 2.550000e+02
  %626 = load i8, i8* %615, align 1
  %627 = uitofp i8 %626 to float
  %628 = fmul float %625, %627
  %629 = fptoui float %628 to i8
  store i8 %629, i8* %616, align 1
  %630 = getelementptr inbounds i8, i8* %615, i64 4
  %631 = getelementptr inbounds i8, i8* %616, i64 1
  %632 = add nuw i32 %617, 1
  br label %633

633:                                              ; preds = %621, %614
  %634 = phi i8* [ %630, %621 ], [ %615, %614 ]
  %635 = phi i8* [ %631, %621 ], [ %616, %614 ]
  %636 = phi i32 [ %632, %621 ], [ %617, %614 ]
  %637 = add i32 %617, 1
  %638 = icmp eq i32 %571, %637
  br i1 %638, label %665, label %639

639:                                              ; preds = %633, %639
  %640 = phi i8* [ %661, %639 ], [ %634, %633 ]
  %641 = phi i8* [ %662, %639 ], [ %635, %633 ]
  %642 = phi i32 [ %663, %639 ], [ %636, %633 ]
  %643 = getelementptr inbounds i8, i8* %640, i64 3
  %644 = load i8, i8* %643, align 1
  %645 = uitofp i8 %644 to float
  %646 = fdiv float %645, 2.550000e+02
  %647 = load i8, i8* %640, align 1
  %648 = uitofp i8 %647 to float
  %649 = fmul float %646, %648
  %650 = fptoui float %649 to i8
  store i8 %650, i8* %641, align 1
  %651 = getelementptr inbounds i8, i8* %640, i64 4
  %652 = getelementptr inbounds i8, i8* %641, i64 1
  %653 = getelementptr inbounds i8, i8* %640, i64 7
  %654 = load i8, i8* %653, align 1
  %655 = uitofp i8 %654 to float
  %656 = fdiv float %655, 2.550000e+02
  %657 = load i8, i8* %651, align 1
  %658 = uitofp i8 %657 to float
  %659 = fmul float %656, %658
  %660 = fptoui float %659 to i8
  store i8 %660, i8* %652, align 1
  %661 = getelementptr inbounds i8, i8* %640, i64 8
  %662 = getelementptr inbounds i8, i8* %641, i64 2
  %663 = add nuw i32 %642, 2
  %664 = icmp eq i32 %663, %571
  br i1 %664, label %665, label %639, !llvm.loop !294

665:                                              ; preds = %633, %639, %612
  %666 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %350, align 8
  br label %667

667:                                              ; preds = %665, %568
  %668 = phi %"class.blink::IntRect"* [ %666, %665 ], [ %569, %568 ]
  %669 = getelementptr inbounds i8, i8* %413, i64 %344
  %670 = getelementptr inbounds i8, i8* %412, i64 %347
  %671 = add nuw nsw i32 %411, 1
  %672 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %668, i64 0, i32 1, i32 1
  %673 = load i32, i32* %672, align 4
  %674 = icmp slt i32 %671, %673
  %675 = add i64 %409, 1
  br i1 %674, label %408, label %393

676:                                              ; preds = %395, %375
  %677 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %677, align 4
  br label %15491

678:                                              ; preds = %4
  %679 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %680 = load i32, i32* %679, align 8
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %683 = load i32, i32* %682, align 8
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %686 = load i8*, i8** %685, align 8
  %687 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %688 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %687, align 8
  %689 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %688, i64 0, i32 0, i32 1
  %690 = load i32, i32* %689, align 4
  %691 = mul nsw i32 %690, %680
  %692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %693 = load i32, i32* %692, align 4
  %694 = add nsw i32 %691, %693
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i8, i8* %686, i64 %695
  %697 = icmp slt i32 %683, 0
  %698 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %699 = load i32, i32* %698, align 8
  %700 = icmp sgt i32 %699, 1
  %701 = and i1 %697, %700
  br i1 %701, label %702, label %712

702:                                              ; preds = %678
  %703 = add nsw i32 %699, -1
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %706 = load i32, i32* %705, align 4
  %707 = sext i32 %706 to i64
  %708 = mul nsw i64 %681, %704
  %709 = mul i64 %708, %707
  %710 = sub i64 0, %709
  %711 = getelementptr inbounds i8, i8* %696, i64 %710
  br label %714

712:                                              ; preds = %678
  %713 = icmp sgt i32 %699, 0
  br i1 %713, label %714, label %1049

714:                                              ; preds = %712, %702
  %715 = phi i8* [ %711, %702 ], [ %696, %712 ]
  %716 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %717 = load i8*, i8** %716, align 8
  %718 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %719 = bitcast i8** %718 to i32**
  %720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %721

721:                                              ; preds = %732, %714
  %722 = phi i32 [ %699, %714 ], [ %733, %732 ]
  %723 = phi %"class.blink::IntRect"* [ %688, %714 ], [ %734, %732 ]
  %724 = phi i32 [ 0, %714 ], [ %743, %732 ]
  %725 = phi i8* [ %717, %714 ], [ %736, %732 ]
  %726 = phi i8* [ %715, %714 ], [ %742, %732 ]
  %727 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %723, i64 0, i32 1, i32 1
  %728 = load i32, i32* %727, align 4
  %729 = icmp sgt i32 %728, 0
  br i1 %729, label %745, label %732

730:                                              ; preds = %1041
  %731 = load i32, i32* %698, align 8
  br label %732

732:                                              ; preds = %730, %721
  %733 = phi i32 [ %722, %721 ], [ %731, %730 ]
  %734 = phi %"class.blink::IntRect"* [ %723, %721 ], [ %1045, %730 ]
  %735 = phi i8* [ %726, %721 ], [ %1042, %730 ]
  %736 = phi i8* [ %725, %721 ], [ %1043, %730 ]
  %737 = phi i32 [ %728, %721 ], [ %1047, %730 ]
  %738 = load i32, i32* %720, align 4
  %739 = sub nsw i32 %738, %737
  %740 = sext i32 %739 to i64
  %741 = mul nsw i64 %740, %681
  %742 = getelementptr inbounds i8, i8* %735, i64 %741
  %743 = add nuw nsw i32 %724, 1
  %744 = icmp slt i32 %743, %733
  br i1 %744, label %721, label %1049

745:                                              ; preds = %721, %1041
  %746 = phi %"class.blink::IntRect"* [ %1045, %1041 ], [ %723, %721 ]
  %747 = phi i32 [ %1044, %1041 ], [ 0, %721 ]
  %748 = phi i8* [ %1043, %1041 ], [ %725, %721 ]
  %749 = phi i8* [ %1042, %1041 ], [ %726, %721 ]
  %750 = load i32*, i32** %719, align 8
  %751 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %746, i64 0, i32 1, i32 0
  %752 = load i32, i32* %751, align 4
  %753 = bitcast i8* %749 to i32*
  %754 = and i32 %752, -4
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %813, label %756

756:                                              ; preds = %745
  %757 = add i32 %754, -1
  %758 = lshr i32 %757, 2
  %759 = add nuw nsw i32 %758, 1
  %760 = and i32 %759, 1
  %761 = icmp eq i32 %758, 0
  br i1 %761, label %794, label %762

762:                                              ; preds = %756
  %763 = sub nuw nsw i32 %759, %760
  br label %764

764:                                              ; preds = %764, %762
  %765 = phi i32* [ %753, %762 ], [ %790, %764 ]
  %766 = phi i32* [ %750, %762 ], [ %791, %764 ]
  %767 = phi i32 [ %763, %762 ], [ %792, %764 ]
  %768 = bitcast i32* %766 to <2 x i64>*
  %769 = bitcast i32* %765 to <2 x i64>*
  %770 = load <2 x i64>, <2 x i64>* %769, align 1
  %771 = bitcast <2 x i64> %770 to <8 x i16>
  %772 = shufflevector <8 x i16> %771, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %773 = shufflevector <8 x i16> %772, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %774 = bitcast <8 x i16> %773 to <2 x i64>
  %775 = and <2 x i64> %774, <i64 71777214294589695, i64 71777214294589695>
  %776 = and <2 x i64> %770, <i64 -71777214294589696, i64 -71777214294589696>
  %777 = or <2 x i64> %775, %776
  store <2 x i64> %777, <2 x i64>* %768, align 1
  %778 = getelementptr inbounds i32, i32* %765, i64 4
  %779 = getelementptr inbounds i32, i32* %766, i64 4
  %780 = bitcast i32* %779 to <2 x i64>*
  %781 = bitcast i32* %778 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 1
  %783 = bitcast <2 x i64> %782 to <8 x i16>
  %784 = shufflevector <8 x i16> %783, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %785 = shufflevector <8 x i16> %784, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %786 = bitcast <8 x i16> %785 to <2 x i64>
  %787 = and <2 x i64> %786, <i64 71777214294589695, i64 71777214294589695>
  %788 = and <2 x i64> %782, <i64 -71777214294589696, i64 -71777214294589696>
  %789 = or <2 x i64> %787, %788
  store <2 x i64> %789, <2 x i64>* %780, align 1
  %790 = getelementptr inbounds i32, i32* %765, i64 8
  %791 = getelementptr inbounds i32, i32* %766, i64 8
  %792 = add i32 %767, -2
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %764

794:                                              ; preds = %764, %756
  %795 = phi i32* [ undef, %756 ], [ %790, %764 ]
  %796 = phi i32* [ undef, %756 ], [ %791, %764 ]
  %797 = phi i32* [ %753, %756 ], [ %790, %764 ]
  %798 = phi i32* [ %750, %756 ], [ %791, %764 ]
  %799 = icmp eq i32 %760, 0
  br i1 %799, label %813, label %800

800:                                              ; preds = %794
  %801 = bitcast i32* %798 to <2 x i64>*
  %802 = bitcast i32* %797 to <2 x i64>*
  %803 = load <2 x i64>, <2 x i64>* %802, align 1
  %804 = bitcast <2 x i64> %803 to <8 x i16>
  %805 = shufflevector <8 x i16> %804, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %806 = shufflevector <8 x i16> %805, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %807 = bitcast <8 x i16> %806 to <2 x i64>
  %808 = and <2 x i64> %807, <i64 71777214294589695, i64 71777214294589695>
  %809 = and <2 x i64> %803, <i64 -71777214294589696, i64 -71777214294589696>
  %810 = or <2 x i64> %808, %809
  store <2 x i64> %810, <2 x i64>* %801, align 1
  %811 = getelementptr inbounds i32, i32* %798, i64 4
  %812 = getelementptr inbounds i32, i32* %797, i64 4
  br label %813

813:                                              ; preds = %800, %794, %745
  %814 = phi i32* [ %753, %745 ], [ %795, %794 ], [ %812, %800 ]
  %815 = phi i32* [ %750, %745 ], [ %796, %794 ], [ %811, %800 ]
  %816 = sub i32 %752, %754
  %817 = icmp eq i32 %816, 0
  br i1 %817, label %900, label %818

818:                                              ; preds = %813
  %819 = zext i32 %816 to i64
  %820 = icmp ult i32 %816, 8
  br i1 %820, label %857, label %821

821:                                              ; preds = %818
  %822 = getelementptr i32, i32* %815, i64 %819
  %823 = getelementptr i32, i32* %814, i64 %819
  %824 = icmp ult i32* %815, %823
  %825 = icmp ult i32* %814, %822
  %826 = and i1 %824, %825
  br i1 %826, label %857, label %827

827:                                              ; preds = %821
  %828 = and i64 %819, 4294967288
  br label %829

829:                                              ; preds = %829, %827
  %830 = phi i64 [ 0, %827 ], [ %853, %829 ]
  %831 = getelementptr inbounds i32, i32* %814, i64 %830
  %832 = bitcast i32* %831 to <4 x i32>*
  %833 = load <4 x i32>, <4 x i32>* %832, align 4, !alias.scope !295
  %834 = getelementptr inbounds i32, i32* %831, i64 4
  %835 = bitcast i32* %834 to <4 x i32>*
  %836 = load <4 x i32>, <4 x i32>* %835, align 4, !alias.scope !295
  %837 = lshr <4 x i32> %833, <i32 16, i32 16, i32 16, i32 16>
  %838 = lshr <4 x i32> %836, <i32 16, i32 16, i32 16, i32 16>
  %839 = shl <4 x i32> %833, <i32 16, i32 16, i32 16, i32 16>
  %840 = shl <4 x i32> %836, <i32 16, i32 16, i32 16, i32 16>
  %841 = or <4 x i32> %837, %839
  %842 = or <4 x i32> %838, %840
  %843 = and <4 x i32> %841, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %844 = and <4 x i32> %842, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %845 = and <4 x i32> %833, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %846 = and <4 x i32> %836, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %847 = or <4 x i32> %843, %845
  %848 = or <4 x i32> %844, %846
  %849 = getelementptr inbounds i32, i32* %815, i64 %830
  %850 = bitcast i32* %849 to <4 x i32>*
  store <4 x i32> %847, <4 x i32>* %850, align 4, !alias.scope !298, !noalias !295
  %851 = getelementptr inbounds i32, i32* %849, i64 4
  %852 = bitcast i32* %851 to <4 x i32>*
  store <4 x i32> %848, <4 x i32>* %852, align 4, !alias.scope !298, !noalias !295
  %853 = add i64 %830, 8
  %854 = icmp eq i64 %853, %828
  br i1 %854, label %855, label %829, !llvm.loop !300

855:                                              ; preds = %829
  %856 = icmp eq i64 %828, %819
  br i1 %856, label %900, label %857

857:                                              ; preds = %855, %821, %818
  %858 = phi i64 [ 0, %821 ], [ 0, %818 ], [ %828, %855 ]
  %859 = xor i64 %858, -1
  %860 = and i64 %819, 1
  %861 = icmp eq i64 %860, 0
  br i1 %861, label %873, label %862

862:                                              ; preds = %857
  %863 = getelementptr inbounds i32, i32* %814, i64 %858
  %864 = load i32, i32* %863, align 4
  %865 = lshr i32 %864, 16
  %866 = shl i32 %864, 16
  %867 = or i32 %865, %866
  %868 = and i32 %867, 16711935
  %869 = and i32 %864, -16711936
  %870 = or i32 %868, %869
  %871 = getelementptr inbounds i32, i32* %815, i64 %858
  store i32 %870, i32* %871, align 4
  %872 = or i64 %858, 1
  br label %873

873:                                              ; preds = %862, %857
  %874 = phi i64 [ %872, %862 ], [ %858, %857 ]
  %875 = sub nsw i64 0, %819
  %876 = icmp eq i64 %859, %875
  br i1 %876, label %900, label %877

877:                                              ; preds = %873, %877
  %878 = phi i64 [ %898, %877 ], [ %874, %873 ]
  %879 = getelementptr inbounds i32, i32* %814, i64 %878
  %880 = load i32, i32* %879, align 4
  %881 = lshr i32 %880, 16
  %882 = shl i32 %880, 16
  %883 = or i32 %881, %882
  %884 = and i32 %883, 16711935
  %885 = and i32 %880, -16711936
  %886 = or i32 %884, %885
  %887 = getelementptr inbounds i32, i32* %815, i64 %878
  store i32 %886, i32* %887, align 4
  %888 = add nuw nsw i64 %878, 1
  %889 = getelementptr inbounds i32, i32* %814, i64 %888
  %890 = load i32, i32* %889, align 4
  %891 = lshr i32 %890, 16
  %892 = shl i32 %890, 16
  %893 = or i32 %891, %892
  %894 = and i32 %893, 16711935
  %895 = and i32 %890, -16711936
  %896 = or i32 %894, %895
  %897 = getelementptr inbounds i32, i32* %815, i64 %888
  store i32 %896, i32* %897, align 4
  %898 = add nuw nsw i64 %878, 2
  %899 = icmp eq i64 %898, %819
  br i1 %899, label %900, label %877, !llvm.loop !301

900:                                              ; preds = %873, %877, %855, %813
  %901 = load i8*, i8** %718, align 8
  %902 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %687, align 8
  %903 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %902, i64 0, i32 1, i32 0
  %904 = load i32, i32* %903, align 4
  %905 = and i32 %904, -4
  %906 = icmp eq i32 %905, 0
  br i1 %906, label %967, label %907

907:                                              ; preds = %900, %907
  %908 = phi i8* [ %963, %907 ], [ %901, %900 ]
  %909 = phi i8* [ %964, %907 ], [ %748, %900 ]
  %910 = phi i32 [ %965, %907 ], [ 0, %900 ]
  %911 = getelementptr inbounds i8, i8* %908, i64 15
  %912 = load i8, i8* %911, align 1
  %913 = icmp eq i8 %912, 0
  %914 = select i1 %913, i8 -1, i8 %912
  %915 = uitofp i8 %914 to float
  %916 = getelementptr inbounds i8, i8* %908, i64 11
  %917 = load i8, i8* %916, align 1
  %918 = icmp eq i8 %917, 0
  %919 = select i1 %918, i8 -1, i8 %917
  %920 = uitofp i8 %919 to float
  %921 = getelementptr inbounds i8, i8* %908, i64 7
  %922 = load i8, i8* %921, align 1
  %923 = icmp eq i8 %922, 0
  %924 = select i1 %923, i8 -1, i8 %922
  %925 = uitofp i8 %924 to float
  %926 = getelementptr inbounds i8, i8* %908, i64 3
  %927 = load i8, i8* %926, align 1
  %928 = icmp eq i8 %927, 0
  %929 = select i1 %928, i8 -1, i8 %927
  %930 = uitofp i8 %929 to float
  %931 = insertelement <4 x float> undef, float %930, i32 0
  %932 = insertelement <4 x float> %931, float %925, i32 1
  %933 = insertelement <4 x float> %932, float %920, i32 2
  %934 = insertelement <4 x float> %933, float %915, i32 3
  %935 = getelementptr inbounds i8, i8* %908, i64 12
  %936 = load i8, i8* %935, align 1
  %937 = uitofp i8 %936 to float
  %938 = getelementptr inbounds i8, i8* %908, i64 8
  %939 = load i8, i8* %938, align 1
  %940 = uitofp i8 %939 to float
  %941 = getelementptr inbounds i8, i8* %908, i64 4
  %942 = load i8, i8* %941, align 1
  %943 = uitofp i8 %942 to float
  %944 = load i8, i8* %908, align 1
  %945 = uitofp i8 %944 to float
  %946 = insertelement <4 x float> undef, float %945, i32 0
  %947 = insertelement <4 x float> %946, float %943, i32 1
  %948 = insertelement <4 x float> %947, float %940, i32 2
  %949 = insertelement <4 x float> %948, float %937, i32 3
  %950 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %934
  %951 = fmul <4 x float> %950, %949
  %952 = extractelement <4 x float> %951, i32 0
  %953 = fptoui float %952 to i8
  store i8 %953, i8* %909, align 1
  %954 = extractelement <4 x float> %951, i32 1
  %955 = fptoui float %954 to i8
  %956 = getelementptr inbounds i8, i8* %909, i64 1
  store i8 %955, i8* %956, align 1
  %957 = extractelement <4 x float> %951, i32 2
  %958 = fptoui float %957 to i8
  %959 = getelementptr inbounds i8, i8* %909, i64 2
  store i8 %958, i8* %959, align 1
  %960 = extractelement <4 x float> %951, i32 3
  %961 = fptoui float %960 to i8
  %962 = getelementptr inbounds i8, i8* %909, i64 3
  store i8 %961, i8* %962, align 1
  %963 = getelementptr inbounds i8, i8* %908, i64 16
  %964 = getelementptr inbounds i8, i8* %909, i64 4
  %965 = add nuw i32 %910, 4
  %966 = icmp ult i32 %965, %905
  br i1 %966, label %907, label %967

967:                                              ; preds = %907, %900
  %968 = phi i8* [ %901, %900 ], [ %963, %907 ]
  %969 = phi i8* [ %748, %900 ], [ %964, %907 ]
  %970 = sub i32 %904, %905
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %1041, label %972

972:                                              ; preds = %967
  %973 = xor i32 %905, -1
  %974 = add i32 %904, %973
  %975 = zext i32 %974 to i64
  %976 = add nuw nsw i64 %975, 1
  %977 = icmp ult i64 %976, 16
  br i1 %977, label %1017, label %978

978:                                              ; preds = %972
  %979 = getelementptr i8, i8* %969, i64 1
  %980 = xor i32 %905, -1
  %981 = add i32 %904, %980
  %982 = zext i32 %981 to i64
  %983 = getelementptr i8, i8* %979, i64 %982
  %984 = getelementptr i8, i8* %968, i64 4
  %985 = shl nuw nsw i64 %982, 2
  %986 = getelementptr i8, i8* %984, i64 %985
  %987 = icmp ult i8* %969, %986
  %988 = icmp ult i8* %968, %983
  %989 = and i1 %987, %988
  br i1 %989, label %1017, label %990

990:                                              ; preds = %978
  %991 = and i64 %976, 8589934576
  %992 = trunc i64 %991 to i32
  %993 = getelementptr i8, i8* %969, i64 %991
  %994 = shl nuw nsw i64 %991, 2
  %995 = getelementptr i8, i8* %968, i64 %994
  br label %996

996:                                              ; preds = %996, %990
  %997 = phi i64 [ 0, %990 ], [ %1013, %996 ]
  %998 = getelementptr i8, i8* %969, i64 %997
  %999 = shl i64 %997, 2
  %1000 = getelementptr inbounds i8, i8* %968, i64 %999
  %1001 = bitcast i8* %1000 to <64 x i8>*
  %1002 = load <64 x i8>, <64 x i8>* %1001, align 1
  %1003 = shufflevector <64 x i8> %1002, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %1004 = shufflevector <64 x i8> %1002, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %1005 = icmp eq <16 x i8> %1004, zeroinitializer
  %1006 = uitofp <16 x i8> %1004 to <16 x float>
  %1007 = fdiv <16 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %1006
  %1008 = select <16 x i1> %1005, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %1007
  %1009 = uitofp <16 x i8> %1003 to <16 x float>
  %1010 = fmul <16 x float> %1008, %1009
  %1011 = fptoui <16 x float> %1010 to <16 x i8>
  %1012 = bitcast i8* %998 to <16 x i8>*
  store <16 x i8> %1011, <16 x i8>* %1012, align 1, !alias.scope !302, !noalias !305
  %1013 = add i64 %997, 16
  %1014 = icmp eq i64 %1013, %991
  br i1 %1014, label %1015, label %996, !llvm.loop !307

1015:                                             ; preds = %996
  %1016 = icmp eq i64 %976, %991
  br i1 %1016, label %1041, label %1017

1017:                                             ; preds = %1015, %978, %972
  %1018 = phi i32 [ 0, %978 ], [ 0, %972 ], [ %992, %1015 ]
  %1019 = phi i8* [ %969, %978 ], [ %969, %972 ], [ %993, %1015 ]
  %1020 = phi i8* [ %968, %978 ], [ %968, %972 ], [ %995, %1015 ]
  br label %1021

1021:                                             ; preds = %1017, %1031
  %1022 = phi i32 [ %1039, %1031 ], [ %1018, %1017 ]
  %1023 = phi i8* [ %1038, %1031 ], [ %1019, %1017 ]
  %1024 = phi i8* [ %1037, %1031 ], [ %1020, %1017 ]
  %1025 = getelementptr inbounds i8, i8* %1024, i64 3
  %1026 = load i8, i8* %1025, align 1
  %1027 = icmp eq i8 %1026, 0
  br i1 %1027, label %1031, label %1028

1028:                                             ; preds = %1021
  %1029 = uitofp i8 %1026 to float
  %1030 = fdiv float 2.550000e+02, %1029
  br label %1031

1031:                                             ; preds = %1028, %1021
  %1032 = phi float [ %1030, %1028 ], [ 1.000000e+00, %1021 ]
  %1033 = load i8, i8* %1024, align 1
  %1034 = uitofp i8 %1033 to float
  %1035 = fmul float %1032, %1034
  %1036 = fptoui float %1035 to i8
  store i8 %1036, i8* %1023, align 1
  %1037 = getelementptr inbounds i8, i8* %1024, i64 4
  %1038 = getelementptr inbounds i8, i8* %1023, i64 1
  %1039 = add nuw i32 %1022, 1
  %1040 = icmp eq i32 %1039, %970
  br i1 %1040, label %1041, label %1021, !llvm.loop !308

1041:                                             ; preds = %1031, %1015, %967
  %1042 = getelementptr inbounds i8, i8* %749, i64 %681
  %1043 = getelementptr inbounds i8, i8* %748, i64 %684
  %1044 = add nuw nsw i32 %747, 1
  %1045 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %687, align 8
  %1046 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1045, i64 0, i32 1, i32 1
  %1047 = load i32, i32* %1046, align 4
  %1048 = icmp slt i32 %1044, %1047
  br i1 %1048, label %745, label %730

1049:                                             ; preds = %732, %712
  %1050 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1050, align 4
  br label %15491

1051:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %1052
    i32 1, label %1237
    i32 2, label %1431
  ]

1052:                                             ; preds = %1051
  %1053 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1054 = load i32, i32* %1053, align 8
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1057 = load i32, i32* %1056, align 8
  %1058 = sdiv i32 %1057, 2
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1061 = load i8*, i8** %1060, align 8
  %1062 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1063 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1062, align 8
  %1064 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1063, i64 0, i32 0, i32 1
  %1065 = load i32, i32* %1064, align 4
  %1066 = mul nsw i32 %1065, %1054
  %1067 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1068 = load i32, i32* %1067, align 4
  %1069 = add nsw i32 %1066, %1068
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds i8, i8* %1061, i64 %1070
  %1072 = icmp slt i32 %1057, 0
  %1073 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1074 = load i32, i32* %1073, align 8
  %1075 = icmp sgt i32 %1074, 1
  %1076 = and i1 %1072, %1075
  br i1 %1076, label %1077, label %1087

1077:                                             ; preds = %1052
  %1078 = add nsw i32 %1074, -1
  %1079 = sext i32 %1078 to i64
  %1080 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1081 = load i32, i32* %1080, align 4
  %1082 = sext i32 %1081 to i64
  %1083 = mul nsw i64 %1055, %1079
  %1084 = mul i64 %1083, %1082
  %1085 = sub i64 0, %1084
  %1086 = getelementptr inbounds i8, i8* %1071, i64 %1085
  br label %1089

1087:                                             ; preds = %1052
  %1088 = icmp sgt i32 %1074, 0
  br i1 %1088, label %1089, label %1235

1089:                                             ; preds = %1087, %1077
  %1090 = phi i8* [ %1086, %1077 ], [ %1071, %1087 ]
  %1091 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1092 = bitcast i8** %1091 to i16**
  %1093 = load i16*, i16** %1092, align 8
  %1094 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1095 = bitcast i8** %1094 to float**
  %1096 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1097

1097:                                             ; preds = %1109, %1089
  %1098 = phi i32 [ %1074, %1089 ], [ %1110, %1109 ]
  %1099 = phi %"class.blink::IntRect"* [ %1063, %1089 ], [ %1111, %1109 ]
  %1100 = phi %"class.blink::IntRect"* [ %1063, %1089 ], [ %1112, %1109 ]
  %1101 = phi i32 [ 0, %1089 ], [ %1121, %1109 ]
  %1102 = phi i16* [ %1093, %1089 ], [ %1114, %1109 ]
  %1103 = phi i8* [ %1090, %1089 ], [ %1120, %1109 ]
  %1104 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1100, i64 0, i32 1, i32 1
  %1105 = load i32, i32* %1104, align 4
  %1106 = icmp sgt i32 %1105, 0
  br i1 %1106, label %1123, label %1109

1107:                                             ; preds = %1227
  %1108 = load i32, i32* %1073, align 8
  br label %1109

1109:                                             ; preds = %1107, %1097
  %1110 = phi i32 [ %1098, %1097 ], [ %1108, %1107 ]
  %1111 = phi %"class.blink::IntRect"* [ %1099, %1097 ], [ %1228, %1107 ]
  %1112 = phi %"class.blink::IntRect"* [ %1100, %1097 ], [ %1228, %1107 ]
  %1113 = phi i8* [ %1103, %1097 ], [ %1229, %1107 ]
  %1114 = phi i16* [ %1102, %1097 ], [ %1230, %1107 ]
  %1115 = phi i32 [ %1105, %1097 ], [ %1233, %1107 ]
  %1116 = load i32, i32* %1096, align 4
  %1117 = sub nsw i32 %1116, %1115
  %1118 = sext i32 %1117 to i64
  %1119 = mul nsw i64 %1118, %1055
  %1120 = getelementptr inbounds i8, i8* %1113, i64 %1119
  %1121 = add nuw nsw i32 %1101, 1
  %1122 = icmp slt i32 %1121, %1110
  br i1 %1122, label %1097, label %1235

1123:                                             ; preds = %1097, %1227
  %1124 = phi %"class.blink::IntRect"* [ %1228, %1227 ], [ %1099, %1097 ]
  %1125 = phi %"class.blink::IntRect"* [ %1228, %1227 ], [ %1100, %1097 ]
  %1126 = phi i32 [ %1231, %1227 ], [ 0, %1097 ]
  %1127 = phi i16* [ %1230, %1227 ], [ %1102, %1097 ]
  %1128 = phi i8* [ %1229, %1227 ], [ %1103, %1097 ]
  %1129 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1125, i64 0, i32 1, i32 0
  %1130 = load i32, i32* %1129, align 4
  %1131 = icmp eq i32 %1130, 0
  br i1 %1131, label %1227, label %1132

1132:                                             ; preds = %1123
  %1133 = load float*, float** %1095, align 8
  br label %1134

1134:                                             ; preds = %1134, %1132
  %1135 = phi i32 [ %1158, %1134 ], [ 0, %1132 ]
  %1136 = phi i8* [ %1156, %1134 ], [ %1128, %1132 ]
  %1137 = phi float* [ %1157, %1134 ], [ %1133, %1132 ]
  %1138 = getelementptr inbounds i8, i8* %1136, i64 2
  %1139 = load i8, i8* %1138, align 1
  %1140 = uitofp i8 %1139 to float
  %1141 = fmul float %1140, 0x3F70101020000000
  store float %1141, float* %1137, align 4
  %1142 = getelementptr inbounds i8, i8* %1136, i64 1
  %1143 = load i8, i8* %1142, align 1
  %1144 = uitofp i8 %1143 to float
  %1145 = fmul float %1144, 0x3F70101020000000
  %1146 = getelementptr inbounds float, float* %1137, i64 1
  store float %1145, float* %1146, align 4
  %1147 = load i8, i8* %1136, align 1
  %1148 = uitofp i8 %1147 to float
  %1149 = fmul float %1148, 0x3F70101020000000
  %1150 = getelementptr inbounds float, float* %1137, i64 2
  store float %1149, float* %1150, align 4
  %1151 = getelementptr inbounds i8, i8* %1136, i64 3
  %1152 = load i8, i8* %1151, align 1
  %1153 = uitofp i8 %1152 to float
  %1154 = fmul float %1153, 0x3F70101020000000
  %1155 = getelementptr inbounds float, float* %1137, i64 3
  store float %1154, float* %1155, align 4
  %1156 = getelementptr inbounds i8, i8* %1136, i64 4
  %1157 = getelementptr inbounds float, float* %1137, i64 4
  %1158 = add nuw i32 %1135, 1
  %1159 = icmp eq i32 %1158, %1130
  br i1 %1159, label %1160, label %1134

1160:                                             ; preds = %1134
  %1161 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1062, align 8
  %1162 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1161, i64 0, i32 1, i32 0
  %1163 = load i32, i32* %1162, align 4
  %1164 = icmp eq i32 %1163, 0
  br i1 %1164, label %1227, label %1165

1165:                                             ; preds = %1160
  %1166 = load float*, float** %1095, align 8
  %1167 = and i32 %1163, 1
  %1168 = icmp eq i32 %1163, 1
  br i1 %1168, label %1207, label %1169

1169:                                             ; preds = %1165
  %1170 = sub i32 %1163, %1167
  br label %1171

1171:                                             ; preds = %1171, %1169
  %1172 = phi float* [ %1166, %1169 ], [ %1203, %1171 ]
  %1173 = phi i16* [ %1127, %1169 ], [ %1204, %1171 ]
  %1174 = phi i32 [ %1170, %1169 ], [ %1205, %1171 ]
  %1175 = bitcast float* %1172 to i32*
  %1176 = load i32, i32* %1175, align 4
  %1177 = lshr i32 %1176, 23
  %1178 = zext i32 %1177 to i64
  %1179 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1178
  %1180 = load i16, i16* %1179, align 2
  %1181 = and i32 %1176, 8388607
  %1182 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1178
  %1183 = load i8, i8* %1182, align 1
  %1184 = zext i8 %1183 to i32
  %1185 = lshr i32 %1181, %1184
  %1186 = trunc i32 %1185 to i16
  %1187 = add i16 %1180, %1186
  store i16 %1187, i16* %1173, align 2
  %1188 = getelementptr inbounds float, float* %1172, i64 4
  %1189 = getelementptr inbounds i16, i16* %1173, i64 1
  %1190 = bitcast float* %1188 to i32*
  %1191 = load i32, i32* %1190, align 4
  %1192 = lshr i32 %1191, 23
  %1193 = zext i32 %1192 to i64
  %1194 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1193
  %1195 = load i16, i16* %1194, align 2
  %1196 = and i32 %1191, 8388607
  %1197 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1193
  %1198 = load i8, i8* %1197, align 1
  %1199 = zext i8 %1198 to i32
  %1200 = lshr i32 %1196, %1199
  %1201 = trunc i32 %1200 to i16
  %1202 = add i16 %1195, %1201
  store i16 %1202, i16* %1189, align 2
  %1203 = getelementptr inbounds float, float* %1172, i64 8
  %1204 = getelementptr inbounds i16, i16* %1173, i64 2
  %1205 = add i32 %1174, -2
  %1206 = icmp eq i32 %1205, 0
  br i1 %1206, label %1207, label %1171

1207:                                             ; preds = %1171, %1165
  %1208 = phi float* [ %1166, %1165 ], [ %1203, %1171 ]
  %1209 = phi i16* [ %1127, %1165 ], [ %1204, %1171 ]
  %1210 = icmp eq i32 %1167, 0
  br i1 %1210, label %1225, label %1211

1211:                                             ; preds = %1207
  %1212 = bitcast float* %1208 to i32*
  %1213 = load i32, i32* %1212, align 4
  %1214 = lshr i32 %1213, 23
  %1215 = zext i32 %1214 to i64
  %1216 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1215
  %1217 = load i16, i16* %1216, align 2
  %1218 = and i32 %1213, 8388607
  %1219 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1215
  %1220 = load i8, i8* %1219, align 1
  %1221 = zext i8 %1220 to i32
  %1222 = lshr i32 %1218, %1221
  %1223 = trunc i32 %1222 to i16
  %1224 = add i16 %1217, %1223
  store i16 %1224, i16* %1209, align 2
  br label %1225

1225:                                             ; preds = %1207, %1211
  %1226 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1062, align 8
  br label %1227

1227:                                             ; preds = %1225, %1160, %1123
  %1228 = phi %"class.blink::IntRect"* [ %1226, %1225 ], [ %1161, %1160 ], [ %1124, %1123 ]
  %1229 = getelementptr inbounds i8, i8* %1128, i64 %1055
  %1230 = getelementptr inbounds i16, i16* %1127, i64 %1059
  %1231 = add nuw nsw i32 %1126, 1
  %1232 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1228, i64 0, i32 1, i32 1
  %1233 = load i32, i32* %1232, align 4
  %1234 = icmp slt i32 %1231, %1233
  br i1 %1234, label %1123, label %1107

1235:                                             ; preds = %1109, %1087
  %1236 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1236, align 4
  br label %15491

1237:                                             ; preds = %1051
  %1238 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1239 = load i32, i32* %1238, align 8
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1242 = load i32, i32* %1241, align 8
  %1243 = sdiv i32 %1242, 2
  %1244 = sext i32 %1243 to i64
  %1245 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1246 = load i8*, i8** %1245, align 8
  %1247 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1248 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1247, align 8
  %1249 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1248, i64 0, i32 0, i32 1
  %1250 = load i32, i32* %1249, align 4
  %1251 = mul nsw i32 %1250, %1239
  %1252 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1253 = load i32, i32* %1252, align 4
  %1254 = add nsw i32 %1251, %1253
  %1255 = sext i32 %1254 to i64
  %1256 = getelementptr inbounds i8, i8* %1246, i64 %1255
  %1257 = icmp slt i32 %1242, 0
  %1258 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1259 = load i32, i32* %1258, align 8
  %1260 = icmp sgt i32 %1259, 1
  %1261 = and i1 %1257, %1260
  br i1 %1261, label %1262, label %1272

1262:                                             ; preds = %1237
  %1263 = add nsw i32 %1259, -1
  %1264 = sext i32 %1263 to i64
  %1265 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1266 = load i32, i32* %1265, align 4
  %1267 = sext i32 %1266 to i64
  %1268 = mul nsw i64 %1240, %1264
  %1269 = mul i64 %1268, %1267
  %1270 = sub i64 0, %1269
  %1271 = getelementptr inbounds i8, i8* %1256, i64 %1270
  br label %1274

1272:                                             ; preds = %1237
  %1273 = icmp sgt i32 %1259, 0
  br i1 %1273, label %1274, label %1429

1274:                                             ; preds = %1272, %1262
  %1275 = phi i8* [ %1271, %1262 ], [ %1256, %1272 ]
  %1276 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1277 = bitcast i8** %1276 to i16**
  %1278 = load i16*, i16** %1277, align 8
  %1279 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1280 = bitcast i8** %1279 to float**
  %1281 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1282

1282:                                             ; preds = %1294, %1274
  %1283 = phi i32 [ %1259, %1274 ], [ %1295, %1294 ]
  %1284 = phi %"class.blink::IntRect"* [ %1248, %1274 ], [ %1296, %1294 ]
  %1285 = phi %"class.blink::IntRect"* [ %1248, %1274 ], [ %1297, %1294 ]
  %1286 = phi i32 [ 0, %1274 ], [ %1306, %1294 ]
  %1287 = phi i16* [ %1278, %1274 ], [ %1299, %1294 ]
  %1288 = phi i8* [ %1275, %1274 ], [ %1305, %1294 ]
  %1289 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1285, i64 0, i32 1, i32 1
  %1290 = load i32, i32* %1289, align 4
  %1291 = icmp sgt i32 %1290, 0
  br i1 %1291, label %1308, label %1294

1292:                                             ; preds = %1421
  %1293 = load i32, i32* %1258, align 8
  br label %1294

1294:                                             ; preds = %1292, %1282
  %1295 = phi i32 [ %1283, %1282 ], [ %1293, %1292 ]
  %1296 = phi %"class.blink::IntRect"* [ %1284, %1282 ], [ %1422, %1292 ]
  %1297 = phi %"class.blink::IntRect"* [ %1285, %1282 ], [ %1422, %1292 ]
  %1298 = phi i8* [ %1288, %1282 ], [ %1423, %1292 ]
  %1299 = phi i16* [ %1287, %1282 ], [ %1424, %1292 ]
  %1300 = phi i32 [ %1290, %1282 ], [ %1427, %1292 ]
  %1301 = load i32, i32* %1281, align 4
  %1302 = sub nsw i32 %1301, %1300
  %1303 = sext i32 %1302 to i64
  %1304 = mul nsw i64 %1303, %1240
  %1305 = getelementptr inbounds i8, i8* %1298, i64 %1304
  %1306 = add nuw nsw i32 %1286, 1
  %1307 = icmp slt i32 %1306, %1295
  br i1 %1307, label %1282, label %1429

1308:                                             ; preds = %1282, %1421
  %1309 = phi %"class.blink::IntRect"* [ %1422, %1421 ], [ %1284, %1282 ]
  %1310 = phi %"class.blink::IntRect"* [ %1422, %1421 ], [ %1285, %1282 ]
  %1311 = phi i32 [ %1425, %1421 ], [ 0, %1282 ]
  %1312 = phi i16* [ %1424, %1421 ], [ %1287, %1282 ]
  %1313 = phi i8* [ %1423, %1421 ], [ %1288, %1282 ]
  %1314 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1310, i64 0, i32 1, i32 0
  %1315 = load i32, i32* %1314, align 4
  %1316 = icmp eq i32 %1315, 0
  br i1 %1316, label %1421, label %1317

1317:                                             ; preds = %1308
  %1318 = load float*, float** %1280, align 8
  br label %1319

1319:                                             ; preds = %1319, %1317
  %1320 = phi i32 [ %1343, %1319 ], [ 0, %1317 ]
  %1321 = phi i8* [ %1341, %1319 ], [ %1313, %1317 ]
  %1322 = phi float* [ %1342, %1319 ], [ %1318, %1317 ]
  %1323 = getelementptr inbounds i8, i8* %1321, i64 2
  %1324 = load i8, i8* %1323, align 1
  %1325 = uitofp i8 %1324 to float
  %1326 = fmul float %1325, 0x3F70101020000000
  store float %1326, float* %1322, align 4
  %1327 = getelementptr inbounds i8, i8* %1321, i64 1
  %1328 = load i8, i8* %1327, align 1
  %1329 = uitofp i8 %1328 to float
  %1330 = fmul float %1329, 0x3F70101020000000
  %1331 = getelementptr inbounds float, float* %1322, i64 1
  store float %1330, float* %1331, align 4
  %1332 = load i8, i8* %1321, align 1
  %1333 = uitofp i8 %1332 to float
  %1334 = fmul float %1333, 0x3F70101020000000
  %1335 = getelementptr inbounds float, float* %1322, i64 2
  store float %1334, float* %1335, align 4
  %1336 = getelementptr inbounds i8, i8* %1321, i64 3
  %1337 = load i8, i8* %1336, align 1
  %1338 = uitofp i8 %1337 to float
  %1339 = fmul float %1338, 0x3F70101020000000
  %1340 = getelementptr inbounds float, float* %1322, i64 3
  store float %1339, float* %1340, align 4
  %1341 = getelementptr inbounds i8, i8* %1321, i64 4
  %1342 = getelementptr inbounds float, float* %1322, i64 4
  %1343 = add nuw i32 %1320, 1
  %1344 = icmp eq i32 %1343, %1315
  br i1 %1344, label %1345, label %1319

1345:                                             ; preds = %1319
  %1346 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1247, align 8
  %1347 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1346, i64 0, i32 1, i32 0
  %1348 = load i32, i32* %1347, align 4
  %1349 = icmp eq i32 %1348, 0
  br i1 %1349, label %1421, label %1350

1350:                                             ; preds = %1345
  %1351 = load float*, float** %1280, align 8
  %1352 = and i32 %1348, 1
  %1353 = icmp eq i32 %1348, 1
  br i1 %1353, label %1398, label %1354

1354:                                             ; preds = %1350
  %1355 = sub i32 %1348, %1352
  br label %1356

1356:                                             ; preds = %1356, %1354
  %1357 = phi float* [ %1351, %1354 ], [ %1394, %1356 ]
  %1358 = phi i16* [ %1312, %1354 ], [ %1395, %1356 ]
  %1359 = phi i32 [ %1355, %1354 ], [ %1396, %1356 ]
  %1360 = getelementptr inbounds float, float* %1357, i64 3
  %1361 = load float, float* %1360, align 4
  %1362 = load float, float* %1357, align 4
  %1363 = fmul float %1361, %1362
  %1364 = bitcast float %1363 to i32
  %1365 = lshr i32 %1364, 23
  %1366 = zext i32 %1365 to i64
  %1367 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1366
  %1368 = load i16, i16* %1367, align 2
  %1369 = and i32 %1364, 8388607
  %1370 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1366
  %1371 = load i8, i8* %1370, align 1
  %1372 = zext i8 %1371 to i32
  %1373 = lshr i32 %1369, %1372
  %1374 = trunc i32 %1373 to i16
  %1375 = add i16 %1368, %1374
  store i16 %1375, i16* %1358, align 2
  %1376 = getelementptr inbounds float, float* %1357, i64 4
  %1377 = getelementptr inbounds i16, i16* %1358, i64 1
  %1378 = getelementptr inbounds float, float* %1357, i64 7
  %1379 = load float, float* %1378, align 4
  %1380 = load float, float* %1376, align 4
  %1381 = fmul float %1379, %1380
  %1382 = bitcast float %1381 to i32
  %1383 = lshr i32 %1382, 23
  %1384 = zext i32 %1383 to i64
  %1385 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1384
  %1386 = load i16, i16* %1385, align 2
  %1387 = and i32 %1382, 8388607
  %1388 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1384
  %1389 = load i8, i8* %1388, align 1
  %1390 = zext i8 %1389 to i32
  %1391 = lshr i32 %1387, %1390
  %1392 = trunc i32 %1391 to i16
  %1393 = add i16 %1386, %1392
  store i16 %1393, i16* %1377, align 2
  %1394 = getelementptr inbounds float, float* %1357, i64 8
  %1395 = getelementptr inbounds i16, i16* %1358, i64 2
  %1396 = add i32 %1359, -2
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1398, label %1356

1398:                                             ; preds = %1356, %1350
  %1399 = phi float* [ %1351, %1350 ], [ %1394, %1356 ]
  %1400 = phi i16* [ %1312, %1350 ], [ %1395, %1356 ]
  %1401 = icmp eq i32 %1352, 0
  br i1 %1401, label %1419, label %1402

1402:                                             ; preds = %1398
  %1403 = getelementptr inbounds float, float* %1399, i64 3
  %1404 = load float, float* %1403, align 4
  %1405 = load float, float* %1399, align 4
  %1406 = fmul float %1404, %1405
  %1407 = bitcast float %1406 to i32
  %1408 = lshr i32 %1407, 23
  %1409 = zext i32 %1408 to i64
  %1410 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1409
  %1411 = load i16, i16* %1410, align 2
  %1412 = and i32 %1407, 8388607
  %1413 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1409
  %1414 = load i8, i8* %1413, align 1
  %1415 = zext i8 %1414 to i32
  %1416 = lshr i32 %1412, %1415
  %1417 = trunc i32 %1416 to i16
  %1418 = add i16 %1411, %1417
  store i16 %1418, i16* %1400, align 2
  br label %1419

1419:                                             ; preds = %1398, %1402
  %1420 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1247, align 8
  br label %1421

1421:                                             ; preds = %1419, %1345, %1308
  %1422 = phi %"class.blink::IntRect"* [ %1420, %1419 ], [ %1346, %1345 ], [ %1309, %1308 ]
  %1423 = getelementptr inbounds i8, i8* %1313, i64 %1240
  %1424 = getelementptr inbounds i16, i16* %1312, i64 %1244
  %1425 = add nuw nsw i32 %1311, 1
  %1426 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1422, i64 0, i32 1, i32 1
  %1427 = load i32, i32* %1426, align 4
  %1428 = icmp slt i32 %1425, %1427
  br i1 %1428, label %1308, label %1292

1429:                                             ; preds = %1294, %1272
  %1430 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1430, align 4
  br label %15491

1431:                                             ; preds = %1051
  %1432 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1433 = load i32, i32* %1432, align 8
  %1434 = sext i32 %1433 to i64
  %1435 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1436 = load i32, i32* %1435, align 8
  %1437 = sdiv i32 %1436, 2
  %1438 = sext i32 %1437 to i64
  %1439 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1440 = load i8*, i8** %1439, align 8
  %1441 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1442 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1441, align 8
  %1443 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1442, i64 0, i32 0, i32 1
  %1444 = load i32, i32* %1443, align 4
  %1445 = mul nsw i32 %1444, %1433
  %1446 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1447 = load i32, i32* %1446, align 4
  %1448 = add nsw i32 %1445, %1447
  %1449 = sext i32 %1448 to i64
  %1450 = getelementptr inbounds i8, i8* %1440, i64 %1449
  %1451 = icmp slt i32 %1436, 0
  %1452 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1453 = load i32, i32* %1452, align 8
  %1454 = icmp sgt i32 %1453, 1
  %1455 = and i1 %1451, %1454
  br i1 %1455, label %1456, label %1466

1456:                                             ; preds = %1431
  %1457 = add nsw i32 %1453, -1
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1460 = load i32, i32* %1459, align 4
  %1461 = sext i32 %1460 to i64
  %1462 = mul nsw i64 %1434, %1458
  %1463 = mul i64 %1462, %1461
  %1464 = sub i64 0, %1463
  %1465 = getelementptr inbounds i8, i8* %1450, i64 %1464
  br label %1468

1466:                                             ; preds = %1431
  %1467 = icmp sgt i32 %1453, 0
  br i1 %1467, label %1468, label %1583

1468:                                             ; preds = %1466, %1456
  %1469 = phi i8* [ %1465, %1456 ], [ %1450, %1466 ]
  %1470 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1471 = bitcast i8** %1470 to i16**
  %1472 = load i16*, i16** %1471, align 8
  %1473 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1474 = bitcast i8** %1473 to float**
  %1475 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1476

1476:                                             ; preds = %1488, %1468
  %1477 = phi i32 [ %1453, %1468 ], [ %1489, %1488 ]
  %1478 = phi %"class.blink::IntRect"* [ %1442, %1468 ], [ %1490, %1488 ]
  %1479 = phi %"class.blink::IntRect"* [ %1442, %1468 ], [ %1491, %1488 ]
  %1480 = phi i32 [ 0, %1468 ], [ %1500, %1488 ]
  %1481 = phi i16* [ %1472, %1468 ], [ %1493, %1488 ]
  %1482 = phi i8* [ %1469, %1468 ], [ %1499, %1488 ]
  %1483 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1479, i64 0, i32 1, i32 1
  %1484 = load i32, i32* %1483, align 4
  %1485 = icmp sgt i32 %1484, 0
  br i1 %1485, label %1502, label %1488

1486:                                             ; preds = %1575
  %1487 = load i32, i32* %1452, align 8
  br label %1488

1488:                                             ; preds = %1486, %1476
  %1489 = phi i32 [ %1477, %1476 ], [ %1487, %1486 ]
  %1490 = phi %"class.blink::IntRect"* [ %1478, %1476 ], [ %1576, %1486 ]
  %1491 = phi %"class.blink::IntRect"* [ %1479, %1476 ], [ %1576, %1486 ]
  %1492 = phi i8* [ %1482, %1476 ], [ %1577, %1486 ]
  %1493 = phi i16* [ %1481, %1476 ], [ %1578, %1486 ]
  %1494 = phi i32 [ %1484, %1476 ], [ %1581, %1486 ]
  %1495 = load i32, i32* %1475, align 4
  %1496 = sub nsw i32 %1495, %1494
  %1497 = sext i32 %1496 to i64
  %1498 = mul nsw i64 %1497, %1434
  %1499 = getelementptr inbounds i8, i8* %1492, i64 %1498
  %1500 = add nuw nsw i32 %1480, 1
  %1501 = icmp slt i32 %1500, %1489
  br i1 %1501, label %1476, label %1583

1502:                                             ; preds = %1476, %1575
  %1503 = phi %"class.blink::IntRect"* [ %1576, %1575 ], [ %1478, %1476 ]
  %1504 = phi %"class.blink::IntRect"* [ %1576, %1575 ], [ %1479, %1476 ]
  %1505 = phi i32 [ %1579, %1575 ], [ 0, %1476 ]
  %1506 = phi i16* [ %1578, %1575 ], [ %1481, %1476 ]
  %1507 = phi i8* [ %1577, %1575 ], [ %1482, %1476 ]
  %1508 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1504, i64 0, i32 1, i32 0
  %1509 = load i32, i32* %1508, align 4
  %1510 = icmp eq i32 %1509, 0
  br i1 %1510, label %1575, label %1511

1511:                                             ; preds = %1502
  %1512 = load float*, float** %1474, align 8
  br label %1513

1513:                                             ; preds = %1513, %1511
  %1514 = phi i32 [ %1537, %1513 ], [ 0, %1511 ]
  %1515 = phi i8* [ %1535, %1513 ], [ %1507, %1511 ]
  %1516 = phi float* [ %1536, %1513 ], [ %1512, %1511 ]
  %1517 = getelementptr inbounds i8, i8* %1515, i64 2
  %1518 = load i8, i8* %1517, align 1
  %1519 = uitofp i8 %1518 to float
  %1520 = fmul float %1519, 0x3F70101020000000
  store float %1520, float* %1516, align 4
  %1521 = getelementptr inbounds i8, i8* %1515, i64 1
  %1522 = load i8, i8* %1521, align 1
  %1523 = uitofp i8 %1522 to float
  %1524 = fmul float %1523, 0x3F70101020000000
  %1525 = getelementptr inbounds float, float* %1516, i64 1
  store float %1524, float* %1525, align 4
  %1526 = load i8, i8* %1515, align 1
  %1527 = uitofp i8 %1526 to float
  %1528 = fmul float %1527, 0x3F70101020000000
  %1529 = getelementptr inbounds float, float* %1516, i64 2
  store float %1528, float* %1529, align 4
  %1530 = getelementptr inbounds i8, i8* %1515, i64 3
  %1531 = load i8, i8* %1530, align 1
  %1532 = uitofp i8 %1531 to float
  %1533 = fmul float %1532, 0x3F70101020000000
  %1534 = getelementptr inbounds float, float* %1516, i64 3
  store float %1533, float* %1534, align 4
  %1535 = getelementptr inbounds i8, i8* %1515, i64 4
  %1536 = getelementptr inbounds float, float* %1516, i64 4
  %1537 = add nuw i32 %1514, 1
  %1538 = icmp eq i32 %1537, %1509
  br i1 %1538, label %1539, label %1513

1539:                                             ; preds = %1513
  %1540 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1441, align 8
  %1541 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1540, i64 0, i32 1, i32 0
  %1542 = load i32, i32* %1541, align 4
  %1543 = icmp eq i32 %1542, 0
  br i1 %1543, label %1575, label %1544

1544:                                             ; preds = %1539
  %1545 = load float*, float** %1474, align 8
  br label %1546

1546:                                             ; preds = %1546, %1544
  %1547 = phi i32 [ %1571, %1546 ], [ 0, %1544 ]
  %1548 = phi float* [ %1569, %1546 ], [ %1545, %1544 ]
  %1549 = phi i16* [ %1570, %1546 ], [ %1506, %1544 ]
  %1550 = getelementptr inbounds float, float* %1548, i64 3
  %1551 = load float, float* %1550, align 4
  %1552 = fcmp une float %1551, 0.000000e+00
  %1553 = fdiv float 1.000000e+00, %1551
  %1554 = select i1 %1552, float %1553, float 1.000000e+00
  %1555 = load float, float* %1548, align 4
  %1556 = fmul float %1555, %1554
  %1557 = bitcast float %1556 to i32
  %1558 = lshr i32 %1557, 23
  %1559 = zext i32 %1558 to i64
  %1560 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1559
  %1561 = load i16, i16* %1560, align 2
  %1562 = and i32 %1557, 8388607
  %1563 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1559
  %1564 = load i8, i8* %1563, align 1
  %1565 = zext i8 %1564 to i32
  %1566 = lshr i32 %1562, %1565
  %1567 = trunc i32 %1566 to i16
  %1568 = add i16 %1561, %1567
  store i16 %1568, i16* %1549, align 2
  %1569 = getelementptr inbounds float, float* %1548, i64 4
  %1570 = getelementptr inbounds i16, i16* %1549, i64 1
  %1571 = add nuw i32 %1547, 1
  %1572 = icmp eq i32 %1571, %1542
  br i1 %1572, label %1573, label %1546

1573:                                             ; preds = %1546
  %1574 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1441, align 8
  br label %1575

1575:                                             ; preds = %1573, %1539, %1502
  %1576 = phi %"class.blink::IntRect"* [ %1574, %1573 ], [ %1540, %1539 ], [ %1503, %1502 ]
  %1577 = getelementptr inbounds i8, i8* %1507, i64 %1434
  %1578 = getelementptr inbounds i16, i16* %1506, i64 %1438
  %1579 = add nuw nsw i32 %1505, 1
  %1580 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1576, i64 0, i32 1, i32 1
  %1581 = load i32, i32* %1580, align 4
  %1582 = icmp slt i32 %1579, %1581
  br i1 %1582, label %1502, label %1486

1583:                                             ; preds = %1488, %1466
  %1584 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1584, align 4
  br label %15491

1585:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %1586
    i32 1, label %1834
    i32 2, label %2070
  ]

1586:                                             ; preds = %1585
  %1587 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1588 = load i32, i32* %1587, align 8
  %1589 = sext i32 %1588 to i64
  %1590 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1591 = load i32, i32* %1590, align 8
  %1592 = sdiv i32 %1591, 4
  %1593 = sext i32 %1592 to i64
  %1594 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1595 = load i8*, i8** %1594, align 8
  %1596 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1597 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1596, align 8
  %1598 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1597, i64 0, i32 0, i32 1
  %1599 = load i32, i32* %1598, align 4
  %1600 = mul nsw i32 %1599, %1588
  %1601 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1602 = load i32, i32* %1601, align 4
  %1603 = add nsw i32 %1600, %1602
  %1604 = sext i32 %1603 to i64
  %1605 = getelementptr inbounds i8, i8* %1595, i64 %1604
  %1606 = icmp slt i32 %1591, 0
  %1607 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1608 = load i32, i32* %1607, align 8
  %1609 = icmp sgt i32 %1608, 1
  %1610 = and i1 %1606, %1609
  br i1 %1610, label %1611, label %1621

1611:                                             ; preds = %1586
  %1612 = add nsw i32 %1608, -1
  %1613 = sext i32 %1612 to i64
  %1614 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1615 = load i32, i32* %1614, align 4
  %1616 = sext i32 %1615 to i64
  %1617 = mul nsw i64 %1589, %1613
  %1618 = mul i64 %1617, %1616
  %1619 = sub i64 0, %1618
  %1620 = getelementptr inbounds i8, i8* %1605, i64 %1619
  br label %1623

1621:                                             ; preds = %1586
  %1622 = icmp sgt i32 %1608, 0
  br i1 %1622, label %1623, label %1832

1623:                                             ; preds = %1621, %1611
  %1624 = phi i8* [ %1620, %1611 ], [ %1605, %1621 ]
  %1625 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1626 = bitcast i8** %1625 to float**
  %1627 = load float*, float** %1626, align 8
  %1628 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1629 = bitcast i8** %1628 to float**
  %1630 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1631

1631:                                             ; preds = %1643, %1623
  %1632 = phi i32 [ %1608, %1623 ], [ %1644, %1643 ]
  %1633 = phi %"class.blink::IntRect"* [ %1597, %1623 ], [ %1645, %1643 ]
  %1634 = phi %"class.blink::IntRect"* [ %1597, %1623 ], [ %1646, %1643 ]
  %1635 = phi i32 [ 0, %1623 ], [ %1655, %1643 ]
  %1636 = phi float* [ %1627, %1623 ], [ %1648, %1643 ]
  %1637 = phi i8* [ %1624, %1623 ], [ %1654, %1643 ]
  %1638 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1634, i64 0, i32 1, i32 1
  %1639 = load i32, i32* %1638, align 4
  %1640 = icmp sgt i32 %1639, 0
  br i1 %1640, label %1657, label %1643

1641:                                             ; preds = %1823
  %1642 = load i32, i32* %1607, align 8
  br label %1643

1643:                                             ; preds = %1641, %1631
  %1644 = phi i32 [ %1632, %1631 ], [ %1642, %1641 ]
  %1645 = phi %"class.blink::IntRect"* [ %1633, %1631 ], [ %1824, %1641 ]
  %1646 = phi %"class.blink::IntRect"* [ %1634, %1631 ], [ %1824, %1641 ]
  %1647 = phi i8* [ %1637, %1631 ], [ %1825, %1641 ]
  %1648 = phi float* [ %1636, %1631 ], [ %1826, %1641 ]
  %1649 = phi i32 [ %1639, %1631 ], [ %1829, %1641 ]
  %1650 = load i32, i32* %1630, align 4
  %1651 = sub nsw i32 %1650, %1649
  %1652 = sext i32 %1651 to i64
  %1653 = mul nsw i64 %1652, %1589
  %1654 = getelementptr inbounds i8, i8* %1647, i64 %1653
  %1655 = add nuw nsw i32 %1635, 1
  %1656 = icmp slt i32 %1655, %1644
  br i1 %1656, label %1631, label %1832

1657:                                             ; preds = %1631, %1823
  %1658 = phi i64 [ %1831, %1823 ], [ 0, %1631 ]
  %1659 = phi %"class.blink::IntRect"* [ %1824, %1823 ], [ %1633, %1631 ]
  %1660 = phi %"class.blink::IntRect"* [ %1824, %1823 ], [ %1634, %1631 ]
  %1661 = phi i32 [ %1827, %1823 ], [ 0, %1631 ]
  %1662 = phi float* [ %1826, %1823 ], [ %1636, %1631 ]
  %1663 = phi i8* [ %1825, %1823 ], [ %1637, %1631 ]
  %1664 = mul i64 %1658, %1593
  %1665 = getelementptr float, float* %1636, i64 %1664
  %1666 = add i64 %1664, 1
  %1667 = getelementptr float, float* %1636, i64 %1666
  %1668 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1660, i64 0, i32 1, i32 0
  %1669 = load i32, i32* %1668, align 4
  %1670 = icmp eq i32 %1669, 0
  br i1 %1670, label %1823, label %1671

1671:                                             ; preds = %1657
  %1672 = load float*, float** %1629, align 8
  br label %1673

1673:                                             ; preds = %1673, %1671
  %1674 = phi i32 [ %1697, %1673 ], [ 0, %1671 ]
  %1675 = phi i8* [ %1695, %1673 ], [ %1663, %1671 ]
  %1676 = phi float* [ %1696, %1673 ], [ %1672, %1671 ]
  %1677 = getelementptr inbounds i8, i8* %1675, i64 2
  %1678 = load i8, i8* %1677, align 1
  %1679 = uitofp i8 %1678 to float
  %1680 = fmul float %1679, 0x3F70101020000000
  store float %1680, float* %1676, align 4
  %1681 = getelementptr inbounds i8, i8* %1675, i64 1
  %1682 = load i8, i8* %1681, align 1
  %1683 = uitofp i8 %1682 to float
  %1684 = fmul float %1683, 0x3F70101020000000
  %1685 = getelementptr inbounds float, float* %1676, i64 1
  store float %1684, float* %1685, align 4
  %1686 = load i8, i8* %1675, align 1
  %1687 = uitofp i8 %1686 to float
  %1688 = fmul float %1687, 0x3F70101020000000
  %1689 = getelementptr inbounds float, float* %1676, i64 2
  store float %1688, float* %1689, align 4
  %1690 = getelementptr inbounds i8, i8* %1675, i64 3
  %1691 = load i8, i8* %1690, align 1
  %1692 = uitofp i8 %1691 to float
  %1693 = fmul float %1692, 0x3F70101020000000
  %1694 = getelementptr inbounds float, float* %1676, i64 3
  store float %1693, float* %1694, align 4
  %1695 = getelementptr inbounds i8, i8* %1675, i64 4
  %1696 = getelementptr inbounds float, float* %1676, i64 4
  %1697 = add nuw i32 %1674, 1
  %1698 = icmp eq i32 %1697, %1669
  br i1 %1698, label %1699, label %1673

1699:                                             ; preds = %1673
  %1700 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1596, align 8
  %1701 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1700, i64 0, i32 1, i32 0
  %1702 = load i32, i32* %1701, align 4
  %1703 = icmp eq i32 %1702, 0
  br i1 %1703, label %1823, label %1704

1704:                                             ; preds = %1699
  %1705 = load float*, float** %1629, align 8
  %1706 = add i32 %1702, -1
  %1707 = zext i32 %1706 to i64
  %1708 = add nuw nsw i64 %1707, 1
  %1709 = icmp ult i64 %1708, 9
  br i1 %1709, label %1748, label %1710

1710:                                             ; preds = %1704
  %1711 = add i32 %1702, -1
  %1712 = zext i32 %1711 to i64
  %1713 = getelementptr float, float* %1667, i64 %1712
  %1714 = getelementptr float, float* %1705, i64 1
  %1715 = shl nuw nsw i64 %1712, 2
  %1716 = getelementptr float, float* %1714, i64 %1715
  %1717 = icmp ult float* %1665, %1716
  %1718 = icmp ult float* %1705, %1713
  %1719 = and i1 %1717, %1718
  br i1 %1719, label %1748, label %1720

1720:                                             ; preds = %1710
  %1721 = and i64 %1708, 7
  %1722 = icmp eq i64 %1721, 0
  %1723 = select i1 %1722, i64 8, i64 %1721
  %1724 = sub nsw i64 %1708, %1723
  %1725 = trunc i64 %1724 to i32
  %1726 = shl nsw i64 %1724, 2
  %1727 = getelementptr float, float* %1705, i64 %1726
  %1728 = getelementptr float, float* %1662, i64 %1724
  br label %1729

1729:                                             ; preds = %1729, %1720
  %1730 = phi i64 [ 0, %1720 ], [ %1746, %1729 ]
  %1731 = shl i64 %1730, 2
  %1732 = getelementptr float, float* %1705, i64 %1731
  %1733 = shl i64 %1730, 2
  %1734 = or i64 %1733, 16
  %1735 = getelementptr float, float* %1705, i64 %1734
  %1736 = getelementptr float, float* %1662, i64 %1730
  %1737 = bitcast float* %1732 to <16 x i32>*
  %1738 = bitcast float* %1735 to <16 x i32>*
  %1739 = load <16 x i32>, <16 x i32>* %1737, align 4
  %1740 = load <16 x i32>, <16 x i32>* %1738, align 4
  %1741 = shufflevector <16 x i32> %1739, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1742 = shufflevector <16 x i32> %1740, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1743 = bitcast float* %1736 to <4 x i32>*
  store <4 x i32> %1741, <4 x i32>* %1743, align 4, !alias.scope !309, !noalias !312
  %1744 = getelementptr float, float* %1736, i64 4
  %1745 = bitcast float* %1744 to <4 x i32>*
  store <4 x i32> %1742, <4 x i32>* %1745, align 4, !alias.scope !309, !noalias !312
  %1746 = add i64 %1730, 8
  %1747 = icmp eq i64 %1746, %1724
  br i1 %1747, label %1748, label %1729, !llvm.loop !314

1748:                                             ; preds = %1729, %1710, %1704
  %1749 = phi i32 [ 0, %1710 ], [ 0, %1704 ], [ %1725, %1729 ]
  %1750 = phi float* [ %1705, %1710 ], [ %1705, %1704 ], [ %1727, %1729 ]
  %1751 = phi float* [ %1662, %1710 ], [ %1662, %1704 ], [ %1728, %1729 ]
  %1752 = sub i32 %1702, %1749
  %1753 = xor i32 %1749, -1
  %1754 = add i32 %1702, %1753
  %1755 = and i32 %1752, 7
  %1756 = icmp eq i32 %1755, 0
  br i1 %1756, label %1770, label %1757

1757:                                             ; preds = %1748, %1757
  %1758 = phi i32 [ %1767, %1757 ], [ %1749, %1748 ]
  %1759 = phi float* [ %1765, %1757 ], [ %1750, %1748 ]
  %1760 = phi float* [ %1766, %1757 ], [ %1751, %1748 ]
  %1761 = phi i32 [ %1768, %1757 ], [ %1755, %1748 ]
  %1762 = bitcast float* %1759 to i32*
  %1763 = load i32, i32* %1762, align 4
  %1764 = bitcast float* %1760 to i32*
  store i32 %1763, i32* %1764, align 4
  %1765 = getelementptr inbounds float, float* %1759, i64 4
  %1766 = getelementptr inbounds float, float* %1760, i64 1
  %1767 = add nuw i32 %1758, 1
  %1768 = add i32 %1761, -1
  %1769 = icmp eq i32 %1768, 0
  br i1 %1769, label %1770, label %1757, !llvm.loop !315

1770:                                             ; preds = %1757, %1748
  %1771 = phi i32 [ %1749, %1748 ], [ %1767, %1757 ]
  %1772 = phi float* [ %1750, %1748 ], [ %1765, %1757 ]
  %1773 = phi float* [ %1751, %1748 ], [ %1766, %1757 ]
  %1774 = icmp ult i32 %1754, 7
  br i1 %1774, label %1821, label %1775

1775:                                             ; preds = %1770, %1775
  %1776 = phi i32 [ %1819, %1775 ], [ %1771, %1770 ]
  %1777 = phi float* [ %1817, %1775 ], [ %1772, %1770 ]
  %1778 = phi float* [ %1818, %1775 ], [ %1773, %1770 ]
  %1779 = bitcast float* %1777 to i32*
  %1780 = load i32, i32* %1779, align 4
  %1781 = bitcast float* %1778 to i32*
  store i32 %1780, i32* %1781, align 4
  %1782 = getelementptr inbounds float, float* %1777, i64 4
  %1783 = getelementptr inbounds float, float* %1778, i64 1
  %1784 = bitcast float* %1782 to i32*
  %1785 = load i32, i32* %1784, align 4
  %1786 = bitcast float* %1783 to i32*
  store i32 %1785, i32* %1786, align 4
  %1787 = getelementptr inbounds float, float* %1777, i64 8
  %1788 = getelementptr inbounds float, float* %1778, i64 2
  %1789 = bitcast float* %1787 to i32*
  %1790 = load i32, i32* %1789, align 4
  %1791 = bitcast float* %1788 to i32*
  store i32 %1790, i32* %1791, align 4
  %1792 = getelementptr inbounds float, float* %1777, i64 12
  %1793 = getelementptr inbounds float, float* %1778, i64 3
  %1794 = bitcast float* %1792 to i32*
  %1795 = load i32, i32* %1794, align 4
  %1796 = bitcast float* %1793 to i32*
  store i32 %1795, i32* %1796, align 4
  %1797 = getelementptr inbounds float, float* %1777, i64 16
  %1798 = getelementptr inbounds float, float* %1778, i64 4
  %1799 = bitcast float* %1797 to i32*
  %1800 = load i32, i32* %1799, align 4
  %1801 = bitcast float* %1798 to i32*
  store i32 %1800, i32* %1801, align 4
  %1802 = getelementptr inbounds float, float* %1777, i64 20
  %1803 = getelementptr inbounds float, float* %1778, i64 5
  %1804 = bitcast float* %1802 to i32*
  %1805 = load i32, i32* %1804, align 4
  %1806 = bitcast float* %1803 to i32*
  store i32 %1805, i32* %1806, align 4
  %1807 = getelementptr inbounds float, float* %1777, i64 24
  %1808 = getelementptr inbounds float, float* %1778, i64 6
  %1809 = bitcast float* %1807 to i32*
  %1810 = load i32, i32* %1809, align 4
  %1811 = bitcast float* %1808 to i32*
  store i32 %1810, i32* %1811, align 4
  %1812 = getelementptr inbounds float, float* %1777, i64 28
  %1813 = getelementptr inbounds float, float* %1778, i64 7
  %1814 = bitcast float* %1812 to i32*
  %1815 = load i32, i32* %1814, align 4
  %1816 = bitcast float* %1813 to i32*
  store i32 %1815, i32* %1816, align 4
  %1817 = getelementptr inbounds float, float* %1777, i64 32
  %1818 = getelementptr inbounds float, float* %1778, i64 8
  %1819 = add nuw i32 %1776, 8
  %1820 = icmp eq i32 %1819, %1702
  br i1 %1820, label %1821, label %1775, !llvm.loop !316

1821:                                             ; preds = %1775, %1770
  %1822 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1596, align 8
  br label %1823

1823:                                             ; preds = %1821, %1699, %1657
  %1824 = phi %"class.blink::IntRect"* [ %1822, %1821 ], [ %1700, %1699 ], [ %1659, %1657 ]
  %1825 = getelementptr inbounds i8, i8* %1663, i64 %1589
  %1826 = getelementptr inbounds float, float* %1662, i64 %1593
  %1827 = add nuw nsw i32 %1661, 1
  %1828 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1824, i64 0, i32 1, i32 1
  %1829 = load i32, i32* %1828, align 4
  %1830 = icmp slt i32 %1827, %1829
  %1831 = add i64 %1658, 1
  br i1 %1830, label %1657, label %1641

1832:                                             ; preds = %1643, %1621
  %1833 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1833, align 4
  br label %15491

1834:                                             ; preds = %1585
  %1835 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1836 = load i32, i32* %1835, align 8
  %1837 = sext i32 %1836 to i64
  %1838 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1839 = load i32, i32* %1838, align 8
  %1840 = sdiv i32 %1839, 4
  %1841 = sext i32 %1840 to i64
  %1842 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1843 = load i8*, i8** %1842, align 8
  %1844 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1845 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1844, align 8
  %1846 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1845, i64 0, i32 0, i32 1
  %1847 = load i32, i32* %1846, align 4
  %1848 = mul nsw i32 %1847, %1836
  %1849 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1850 = load i32, i32* %1849, align 4
  %1851 = add nsw i32 %1848, %1850
  %1852 = sext i32 %1851 to i64
  %1853 = getelementptr inbounds i8, i8* %1843, i64 %1852
  %1854 = icmp slt i32 %1839, 0
  %1855 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1856 = load i32, i32* %1855, align 8
  %1857 = icmp sgt i32 %1856, 1
  %1858 = and i1 %1854, %1857
  br i1 %1858, label %1859, label %1869

1859:                                             ; preds = %1834
  %1860 = add nsw i32 %1856, -1
  %1861 = sext i32 %1860 to i64
  %1862 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1863 = load i32, i32* %1862, align 4
  %1864 = sext i32 %1863 to i64
  %1865 = mul nsw i64 %1837, %1861
  %1866 = mul i64 %1865, %1864
  %1867 = sub i64 0, %1866
  %1868 = getelementptr inbounds i8, i8* %1853, i64 %1867
  br label %1871

1869:                                             ; preds = %1834
  %1870 = icmp sgt i32 %1856, 0
  br i1 %1870, label %1871, label %2068

1871:                                             ; preds = %1869, %1859
  %1872 = phi i8* [ %1868, %1859 ], [ %1853, %1869 ]
  %1873 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1874 = bitcast i8** %1873 to float**
  %1875 = load float*, float** %1874, align 8
  %1876 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1877 = bitcast i8** %1876 to float**
  %1878 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1879

1879:                                             ; preds = %1891, %1871
  %1880 = phi i32 [ %1856, %1871 ], [ %1892, %1891 ]
  %1881 = phi %"class.blink::IntRect"* [ %1845, %1871 ], [ %1893, %1891 ]
  %1882 = phi %"class.blink::IntRect"* [ %1845, %1871 ], [ %1894, %1891 ]
  %1883 = phi i32 [ 0, %1871 ], [ %1903, %1891 ]
  %1884 = phi float* [ %1875, %1871 ], [ %1896, %1891 ]
  %1885 = phi i8* [ %1872, %1871 ], [ %1902, %1891 ]
  %1886 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1882, i64 0, i32 1, i32 1
  %1887 = load i32, i32* %1886, align 4
  %1888 = icmp sgt i32 %1887, 0
  br i1 %1888, label %1905, label %1891

1889:                                             ; preds = %2059
  %1890 = load i32, i32* %1855, align 8
  br label %1891

1891:                                             ; preds = %1889, %1879
  %1892 = phi i32 [ %1880, %1879 ], [ %1890, %1889 ]
  %1893 = phi %"class.blink::IntRect"* [ %1881, %1879 ], [ %2060, %1889 ]
  %1894 = phi %"class.blink::IntRect"* [ %1882, %1879 ], [ %2060, %1889 ]
  %1895 = phi i8* [ %1885, %1879 ], [ %2061, %1889 ]
  %1896 = phi float* [ %1884, %1879 ], [ %2062, %1889 ]
  %1897 = phi i32 [ %1887, %1879 ], [ %2065, %1889 ]
  %1898 = load i32, i32* %1878, align 4
  %1899 = sub nsw i32 %1898, %1897
  %1900 = sext i32 %1899 to i64
  %1901 = mul nsw i64 %1900, %1837
  %1902 = getelementptr inbounds i8, i8* %1895, i64 %1901
  %1903 = add nuw nsw i32 %1883, 1
  %1904 = icmp slt i32 %1903, %1892
  br i1 %1904, label %1879, label %2068

1905:                                             ; preds = %1879, %2059
  %1906 = phi i64 [ %2067, %2059 ], [ 0, %1879 ]
  %1907 = phi %"class.blink::IntRect"* [ %2060, %2059 ], [ %1881, %1879 ]
  %1908 = phi %"class.blink::IntRect"* [ %2060, %2059 ], [ %1882, %1879 ]
  %1909 = phi i32 [ %2063, %2059 ], [ 0, %1879 ]
  %1910 = phi float* [ %2062, %2059 ], [ %1884, %1879 ]
  %1911 = phi i8* [ %2061, %2059 ], [ %1885, %1879 ]
  %1912 = mul i64 %1906, %1841
  %1913 = getelementptr float, float* %1884, i64 %1912
  %1914 = add i64 %1912, 1
  %1915 = getelementptr float, float* %1884, i64 %1914
  %1916 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1908, i64 0, i32 1, i32 0
  %1917 = load i32, i32* %1916, align 4
  %1918 = icmp eq i32 %1917, 0
  br i1 %1918, label %2059, label %1919

1919:                                             ; preds = %1905
  %1920 = load float*, float** %1877, align 8
  br label %1921

1921:                                             ; preds = %1921, %1919
  %1922 = phi i32 [ %1945, %1921 ], [ 0, %1919 ]
  %1923 = phi i8* [ %1943, %1921 ], [ %1911, %1919 ]
  %1924 = phi float* [ %1944, %1921 ], [ %1920, %1919 ]
  %1925 = getelementptr inbounds i8, i8* %1923, i64 2
  %1926 = load i8, i8* %1925, align 1
  %1927 = uitofp i8 %1926 to float
  %1928 = fmul float %1927, 0x3F70101020000000
  store float %1928, float* %1924, align 4
  %1929 = getelementptr inbounds i8, i8* %1923, i64 1
  %1930 = load i8, i8* %1929, align 1
  %1931 = uitofp i8 %1930 to float
  %1932 = fmul float %1931, 0x3F70101020000000
  %1933 = getelementptr inbounds float, float* %1924, i64 1
  store float %1932, float* %1933, align 4
  %1934 = load i8, i8* %1923, align 1
  %1935 = uitofp i8 %1934 to float
  %1936 = fmul float %1935, 0x3F70101020000000
  %1937 = getelementptr inbounds float, float* %1924, i64 2
  store float %1936, float* %1937, align 4
  %1938 = getelementptr inbounds i8, i8* %1923, i64 3
  %1939 = load i8, i8* %1938, align 1
  %1940 = uitofp i8 %1939 to float
  %1941 = fmul float %1940, 0x3F70101020000000
  %1942 = getelementptr inbounds float, float* %1924, i64 3
  store float %1941, float* %1942, align 4
  %1943 = getelementptr inbounds i8, i8* %1923, i64 4
  %1944 = getelementptr inbounds float, float* %1924, i64 4
  %1945 = add nuw i32 %1922, 1
  %1946 = icmp eq i32 %1945, %1917
  br i1 %1946, label %1947, label %1921

1947:                                             ; preds = %1921
  %1948 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1844, align 8
  %1949 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1948, i64 0, i32 1, i32 0
  %1950 = load i32, i32* %1949, align 4
  %1951 = icmp eq i32 %1950, 0
  br i1 %1951, label %2059, label %1952

1952:                                             ; preds = %1947
  %1953 = load float*, float** %1877, align 8
  %1954 = add i32 %1950, -1
  %1955 = zext i32 %1954 to i64
  %1956 = add nuw nsw i64 %1955, 1
  %1957 = icmp ult i64 %1956, 8
  br i1 %1957, label %1999, label %1958

1958:                                             ; preds = %1952
  %1959 = add i32 %1950, -1
  %1960 = zext i32 %1959 to i64
  %1961 = getelementptr float, float* %1915, i64 %1960
  %1962 = getelementptr float, float* %1953, i64 4
  %1963 = shl nuw nsw i64 %1960, 2
  %1964 = getelementptr float, float* %1962, i64 %1963
  %1965 = icmp ult float* %1913, %1964
  %1966 = icmp ult float* %1953, %1961
  %1967 = and i1 %1965, %1966
  br i1 %1967, label %1999, label %1968

1968:                                             ; preds = %1958
  %1969 = and i64 %1956, 8589934584
  %1970 = shl nuw nsw i64 %1969, 2
  %1971 = getelementptr float, float* %1953, i64 %1970
  %1972 = trunc i64 %1969 to i32
  %1973 = getelementptr float, float* %1910, i64 %1969
  br label %1974

1974:                                             ; preds = %1974, %1968
  %1975 = phi i64 [ 0, %1968 ], [ %1995, %1974 ]
  %1976 = shl i64 %1975, 2
  %1977 = shl i64 %1975, 2
  %1978 = or i64 %1977, 16
  %1979 = getelementptr float, float* %1910, i64 %1975
  %1980 = getelementptr inbounds float, float* %1953, i64 %1976
  %1981 = bitcast float* %1980 to <16 x float>*
  %1982 = getelementptr inbounds float, float* %1953, i64 %1978
  %1983 = bitcast float* %1982 to <16 x float>*
  %1984 = load <16 x float>, <16 x float>* %1981, align 4
  %1985 = load <16 x float>, <16 x float>* %1983, align 4
  %1986 = shufflevector <16 x float> %1984, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1987 = shufflevector <16 x float> %1985, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1988 = shufflevector <16 x float> %1984, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1989 = shufflevector <16 x float> %1985, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1990 = fmul <4 x float> %1988, %1986
  %1991 = fmul <4 x float> %1989, %1987
  %1992 = bitcast float* %1979 to <4 x float>*
  store <4 x float> %1990, <4 x float>* %1992, align 4, !alias.scope !317, !noalias !320
  %1993 = getelementptr float, float* %1979, i64 4
  %1994 = bitcast float* %1993 to <4 x float>*
  store <4 x float> %1991, <4 x float>* %1994, align 4, !alias.scope !317, !noalias !320
  %1995 = add i64 %1975, 8
  %1996 = icmp eq i64 %1995, %1969
  br i1 %1996, label %1997, label %1974, !llvm.loop !322

1997:                                             ; preds = %1974
  %1998 = icmp eq i64 %1956, %1969
  br i1 %1998, label %2057, label %1999

1999:                                             ; preds = %1997, %1958, %1952
  %2000 = phi float* [ %1953, %1958 ], [ %1953, %1952 ], [ %1971, %1997 ]
  %2001 = phi i32 [ 0, %1958 ], [ 0, %1952 ], [ %1972, %1997 ]
  %2002 = phi float* [ %1910, %1958 ], [ %1910, %1952 ], [ %1973, %1997 ]
  %2003 = sub i32 %1950, %2001
  %2004 = xor i32 %2001, -1
  %2005 = add i32 %1950, %2004
  %2006 = and i32 %2003, 3
  %2007 = icmp eq i32 %2006, 0
  br i1 %2007, label %2022, label %2008

2008:                                             ; preds = %1999, %2008
  %2009 = phi float* [ %2017, %2008 ], [ %2000, %1999 ]
  %2010 = phi i32 [ %2019, %2008 ], [ %2001, %1999 ]
  %2011 = phi float* [ %2018, %2008 ], [ %2002, %1999 ]
  %2012 = phi i32 [ %2020, %2008 ], [ %2006, %1999 ]
  %2013 = getelementptr inbounds float, float* %2009, i64 3
  %2014 = load float, float* %2013, align 4
  %2015 = load float, float* %2009, align 4
  %2016 = fmul float %2014, %2015
  store float %2016, float* %2011, align 4
  %2017 = getelementptr inbounds float, float* %2009, i64 4
  %2018 = getelementptr inbounds float, float* %2011, i64 1
  %2019 = add nuw i32 %2010, 1
  %2020 = add i32 %2012, -1
  %2021 = icmp eq i32 %2020, 0
  br i1 %2021, label %2022, label %2008, !llvm.loop !323

2022:                                             ; preds = %2008, %1999
  %2023 = phi float* [ %2000, %1999 ], [ %2017, %2008 ]
  %2024 = phi i32 [ %2001, %1999 ], [ %2019, %2008 ]
  %2025 = phi float* [ %2002, %1999 ], [ %2018, %2008 ]
  %2026 = icmp ult i32 %2005, 3
  br i1 %2026, label %2057, label %2027

2027:                                             ; preds = %2022, %2027
  %2028 = phi float* [ %2053, %2027 ], [ %2023, %2022 ]
  %2029 = phi i32 [ %2055, %2027 ], [ %2024, %2022 ]
  %2030 = phi float* [ %2054, %2027 ], [ %2025, %2022 ]
  %2031 = getelementptr inbounds float, float* %2028, i64 3
  %2032 = load float, float* %2031, align 4
  %2033 = load float, float* %2028, align 4
  %2034 = fmul float %2032, %2033
  store float %2034, float* %2030, align 4
  %2035 = getelementptr inbounds float, float* %2028, i64 4
  %2036 = getelementptr inbounds float, float* %2030, i64 1
  %2037 = getelementptr inbounds float, float* %2028, i64 7
  %2038 = load float, float* %2037, align 4
  %2039 = load float, float* %2035, align 4
  %2040 = fmul float %2038, %2039
  store float %2040, float* %2036, align 4
  %2041 = getelementptr inbounds float, float* %2028, i64 8
  %2042 = getelementptr inbounds float, float* %2030, i64 2
  %2043 = getelementptr inbounds float, float* %2028, i64 11
  %2044 = load float, float* %2043, align 4
  %2045 = load float, float* %2041, align 4
  %2046 = fmul float %2044, %2045
  store float %2046, float* %2042, align 4
  %2047 = getelementptr inbounds float, float* %2028, i64 12
  %2048 = getelementptr inbounds float, float* %2030, i64 3
  %2049 = getelementptr inbounds float, float* %2028, i64 15
  %2050 = load float, float* %2049, align 4
  %2051 = load float, float* %2047, align 4
  %2052 = fmul float %2050, %2051
  store float %2052, float* %2048, align 4
  %2053 = getelementptr inbounds float, float* %2028, i64 16
  %2054 = getelementptr inbounds float, float* %2030, i64 4
  %2055 = add nuw i32 %2029, 4
  %2056 = icmp eq i32 %2055, %1950
  br i1 %2056, label %2057, label %2027, !llvm.loop !324

2057:                                             ; preds = %2022, %2027, %1997
  %2058 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1844, align 8
  br label %2059

2059:                                             ; preds = %2057, %1947, %1905
  %2060 = phi %"class.blink::IntRect"* [ %2058, %2057 ], [ %1948, %1947 ], [ %1907, %1905 ]
  %2061 = getelementptr inbounds i8, i8* %1911, i64 %1837
  %2062 = getelementptr inbounds float, float* %1910, i64 %1841
  %2063 = add nuw nsw i32 %1909, 1
  %2064 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2060, i64 0, i32 1, i32 1
  %2065 = load i32, i32* %2064, align 4
  %2066 = icmp slt i32 %2063, %2065
  %2067 = add i64 %1906, 1
  br i1 %2066, label %1905, label %1889

2068:                                             ; preds = %1891, %1869
  %2069 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2069, align 4
  br label %15491

2070:                                             ; preds = %1585
  %2071 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2072 = load i32, i32* %2071, align 8
  %2073 = sext i32 %2072 to i64
  %2074 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2075 = load i32, i32* %2074, align 8
  %2076 = sdiv i32 %2075, 4
  %2077 = sext i32 %2076 to i64
  %2078 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2079 = load i8*, i8** %2078, align 8
  %2080 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2081 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2080, align 8
  %2082 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2081, i64 0, i32 0, i32 1
  %2083 = load i32, i32* %2082, align 4
  %2084 = mul nsw i32 %2083, %2072
  %2085 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2086 = load i32, i32* %2085, align 4
  %2087 = add nsw i32 %2084, %2086
  %2088 = sext i32 %2087 to i64
  %2089 = getelementptr inbounds i8, i8* %2079, i64 %2088
  %2090 = icmp slt i32 %2075, 0
  %2091 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2092 = load i32, i32* %2091, align 8
  %2093 = icmp sgt i32 %2092, 1
  %2094 = and i1 %2090, %2093
  br i1 %2094, label %2095, label %2105

2095:                                             ; preds = %2070
  %2096 = add nsw i32 %2092, -1
  %2097 = sext i32 %2096 to i64
  %2098 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2099 = load i32, i32* %2098, align 4
  %2100 = sext i32 %2099 to i64
  %2101 = mul nsw i64 %2073, %2097
  %2102 = mul i64 %2101, %2100
  %2103 = sub i64 0, %2102
  %2104 = getelementptr inbounds i8, i8* %2089, i64 %2103
  br label %2107

2105:                                             ; preds = %2070
  %2106 = icmp sgt i32 %2092, 0
  br i1 %2106, label %2107, label %2325

2107:                                             ; preds = %2105, %2095
  %2108 = phi i8* [ %2104, %2095 ], [ %2089, %2105 ]
  %2109 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2110 = bitcast i8** %2109 to float**
  %2111 = load float*, float** %2110, align 8
  %2112 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2113 = bitcast i8** %2112 to float**
  %2114 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2115

2115:                                             ; preds = %2127, %2107
  %2116 = phi i32 [ %2092, %2107 ], [ %2128, %2127 ]
  %2117 = phi %"class.blink::IntRect"* [ %2081, %2107 ], [ %2129, %2127 ]
  %2118 = phi %"class.blink::IntRect"* [ %2081, %2107 ], [ %2130, %2127 ]
  %2119 = phi i32 [ 0, %2107 ], [ %2139, %2127 ]
  %2120 = phi float* [ %2111, %2107 ], [ %2132, %2127 ]
  %2121 = phi i8* [ %2108, %2107 ], [ %2138, %2127 ]
  %2122 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2118, i64 0, i32 1, i32 1
  %2123 = load i32, i32* %2122, align 4
  %2124 = icmp sgt i32 %2123, 0
  br i1 %2124, label %2141, label %2127

2125:                                             ; preds = %2316
  %2126 = load i32, i32* %2091, align 8
  br label %2127

2127:                                             ; preds = %2125, %2115
  %2128 = phi i32 [ %2116, %2115 ], [ %2126, %2125 ]
  %2129 = phi %"class.blink::IntRect"* [ %2117, %2115 ], [ %2317, %2125 ]
  %2130 = phi %"class.blink::IntRect"* [ %2118, %2115 ], [ %2317, %2125 ]
  %2131 = phi i8* [ %2121, %2115 ], [ %2318, %2125 ]
  %2132 = phi float* [ %2120, %2115 ], [ %2319, %2125 ]
  %2133 = phi i32 [ %2123, %2115 ], [ %2322, %2125 ]
  %2134 = load i32, i32* %2114, align 4
  %2135 = sub nsw i32 %2134, %2133
  %2136 = sext i32 %2135 to i64
  %2137 = mul nsw i64 %2136, %2073
  %2138 = getelementptr inbounds i8, i8* %2131, i64 %2137
  %2139 = add nuw nsw i32 %2119, 1
  %2140 = icmp slt i32 %2139, %2128
  br i1 %2140, label %2115, label %2325

2141:                                             ; preds = %2115, %2316
  %2142 = phi i64 [ %2324, %2316 ], [ 0, %2115 ]
  %2143 = phi %"class.blink::IntRect"* [ %2317, %2316 ], [ %2117, %2115 ]
  %2144 = phi %"class.blink::IntRect"* [ %2317, %2316 ], [ %2118, %2115 ]
  %2145 = phi i32 [ %2320, %2316 ], [ 0, %2115 ]
  %2146 = phi float* [ %2319, %2316 ], [ %2120, %2115 ]
  %2147 = phi i8* [ %2318, %2316 ], [ %2121, %2115 ]
  %2148 = mul i64 %2142, %2077
  %2149 = getelementptr float, float* %2120, i64 %2148
  %2150 = add i64 %2148, 1
  %2151 = getelementptr float, float* %2120, i64 %2150
  %2152 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2144, i64 0, i32 1, i32 0
  %2153 = load i32, i32* %2152, align 4
  %2154 = icmp eq i32 %2153, 0
  br i1 %2154, label %2316, label %2155

2155:                                             ; preds = %2141
  %2156 = load float*, float** %2113, align 8
  br label %2157

2157:                                             ; preds = %2157, %2155
  %2158 = phi i32 [ %2181, %2157 ], [ 0, %2155 ]
  %2159 = phi i8* [ %2179, %2157 ], [ %2147, %2155 ]
  %2160 = phi float* [ %2180, %2157 ], [ %2156, %2155 ]
  %2161 = getelementptr inbounds i8, i8* %2159, i64 2
  %2162 = load i8, i8* %2161, align 1
  %2163 = uitofp i8 %2162 to float
  %2164 = fmul float %2163, 0x3F70101020000000
  store float %2164, float* %2160, align 4
  %2165 = getelementptr inbounds i8, i8* %2159, i64 1
  %2166 = load i8, i8* %2165, align 1
  %2167 = uitofp i8 %2166 to float
  %2168 = fmul float %2167, 0x3F70101020000000
  %2169 = getelementptr inbounds float, float* %2160, i64 1
  store float %2168, float* %2169, align 4
  %2170 = load i8, i8* %2159, align 1
  %2171 = uitofp i8 %2170 to float
  %2172 = fmul float %2171, 0x3F70101020000000
  %2173 = getelementptr inbounds float, float* %2160, i64 2
  store float %2172, float* %2173, align 4
  %2174 = getelementptr inbounds i8, i8* %2159, i64 3
  %2175 = load i8, i8* %2174, align 1
  %2176 = uitofp i8 %2175 to float
  %2177 = fmul float %2176, 0x3F70101020000000
  %2178 = getelementptr inbounds float, float* %2160, i64 3
  store float %2177, float* %2178, align 4
  %2179 = getelementptr inbounds i8, i8* %2159, i64 4
  %2180 = getelementptr inbounds float, float* %2160, i64 4
  %2181 = add nuw i32 %2158, 1
  %2182 = icmp eq i32 %2181, %2153
  br i1 %2182, label %2183, label %2157

2183:                                             ; preds = %2157
  %2184 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2080, align 8
  %2185 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2184, i64 0, i32 1, i32 0
  %2186 = load i32, i32* %2185, align 4
  %2187 = icmp eq i32 %2186, 0
  br i1 %2187, label %2316, label %2188

2188:                                             ; preds = %2183
  %2189 = load float*, float** %2113, align 8
  %2190 = add i32 %2186, -1
  %2191 = zext i32 %2190 to i64
  %2192 = add nuw nsw i64 %2191, 1
  %2193 = icmp ult i64 %2192, 4
  br i1 %2193, label %2266, label %2194

2194:                                             ; preds = %2188
  %2195 = add i32 %2186, -1
  %2196 = zext i32 %2195 to i64
  %2197 = getelementptr float, float* %2151, i64 %2196
  %2198 = getelementptr float, float* %2189, i64 4
  %2199 = shl nuw nsw i64 %2196, 2
  %2200 = getelementptr float, float* %2198, i64 %2199
  %2201 = icmp ult float* %2149, %2200
  %2202 = icmp ult float* %2189, %2197
  %2203 = and i1 %2201, %2202
  br i1 %2203, label %2266, label %2204

2204:                                             ; preds = %2194
  %2205 = and i64 %2192, 8589934588
  %2206 = trunc i64 %2205 to i32
  %2207 = shl nuw nsw i64 %2205, 2
  %2208 = getelementptr float, float* %2189, i64 %2207
  %2209 = getelementptr float, float* %2146, i64 %2205
  %2210 = add nsw i64 %2205, -4
  %2211 = lshr exact i64 %2210, 2
  %2212 = add nuw nsw i64 %2211, 1
  %2213 = and i64 %2212, 1
  %2214 = icmp eq i64 %2210, 0
  br i1 %2214, label %2248, label %2215

2215:                                             ; preds = %2204
  %2216 = sub nuw nsw i64 %2212, %2213
  br label %2217

2217:                                             ; preds = %2217, %2215
  %2218 = phi i64 [ 0, %2215 ], [ %2245, %2217 ]
  %2219 = phi i64 [ %2216, %2215 ], [ %2246, %2217 ]
  %2220 = shl i64 %2218, 2
  %2221 = getelementptr float, float* %2146, i64 %2218
  %2222 = getelementptr inbounds float, float* %2189, i64 %2220
  %2223 = bitcast float* %2222 to <16 x float>*
  %2224 = load <16 x float>, <16 x float>* %2223, align 4
  %2225 = shufflevector <16 x float> %2224, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2226 = shufflevector <16 x float> %2224, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2227 = fcmp une <4 x float> %2226, zeroinitializer
  %2228 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2226
  %2229 = select <4 x i1> %2227, <4 x float> %2228, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2230 = fmul <4 x float> %2225, %2229
  %2231 = bitcast float* %2221 to <4 x float>*
  store <4 x float> %2230, <4 x float>* %2231, align 4, !alias.scope !325, !noalias !328
  %2232 = or i64 %2218, 4
  %2233 = shl i64 %2232, 2
  %2234 = getelementptr float, float* %2146, i64 %2232
  %2235 = getelementptr inbounds float, float* %2189, i64 %2233
  %2236 = bitcast float* %2235 to <16 x float>*
  %2237 = load <16 x float>, <16 x float>* %2236, align 4
  %2238 = shufflevector <16 x float> %2237, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2239 = shufflevector <16 x float> %2237, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2240 = fcmp une <4 x float> %2239, zeroinitializer
  %2241 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2239
  %2242 = select <4 x i1> %2240, <4 x float> %2241, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2243 = fmul <4 x float> %2238, %2242
  %2244 = bitcast float* %2234 to <4 x float>*
  store <4 x float> %2243, <4 x float>* %2244, align 4, !alias.scope !325, !noalias !328
  %2245 = add i64 %2218, 8
  %2246 = add i64 %2219, -2
  %2247 = icmp eq i64 %2246, 0
  br i1 %2247, label %2248, label %2217, !llvm.loop !330

2248:                                             ; preds = %2217, %2204
  %2249 = phi i64 [ 0, %2204 ], [ %2245, %2217 ]
  %2250 = icmp eq i64 %2213, 0
  br i1 %2250, label %2264, label %2251

2251:                                             ; preds = %2248
  %2252 = shl i64 %2249, 2
  %2253 = getelementptr float, float* %2146, i64 %2249
  %2254 = getelementptr inbounds float, float* %2189, i64 %2252
  %2255 = bitcast float* %2254 to <16 x float>*
  %2256 = load <16 x float>, <16 x float>* %2255, align 4
  %2257 = shufflevector <16 x float> %2256, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2258 = shufflevector <16 x float> %2256, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2259 = fcmp une <4 x float> %2258, zeroinitializer
  %2260 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2258
  %2261 = select <4 x i1> %2259, <4 x float> %2260, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2262 = fmul <4 x float> %2257, %2261
  %2263 = bitcast float* %2253 to <4 x float>*
  store <4 x float> %2262, <4 x float>* %2263, align 4, !alias.scope !325, !noalias !328
  br label %2264

2264:                                             ; preds = %2248, %2251
  %2265 = icmp eq i64 %2192, %2205
  br i1 %2265, label %2314, label %2266

2266:                                             ; preds = %2264, %2194, %2188
  %2267 = phi i32 [ 0, %2194 ], [ 0, %2188 ], [ %2206, %2264 ]
  %2268 = phi float* [ %2189, %2194 ], [ %2189, %2188 ], [ %2208, %2264 ]
  %2269 = phi float* [ %2146, %2194 ], [ %2146, %2188 ], [ %2209, %2264 ]
  %2270 = sub i32 %2186, %2267
  %2271 = and i32 %2270, 1
  %2272 = icmp eq i32 %2271, 0
  br i1 %2272, label %2284, label %2273

2273:                                             ; preds = %2266
  %2274 = getelementptr inbounds float, float* %2268, i64 3
  %2275 = load float, float* %2274, align 4
  %2276 = fcmp une float %2275, 0.000000e+00
  %2277 = fdiv float 1.000000e+00, %2275
  %2278 = select i1 %2276, float %2277, float 1.000000e+00
  %2279 = load float, float* %2268, align 4
  %2280 = fmul float %2279, %2278
  store float %2280, float* %2269, align 4
  %2281 = getelementptr inbounds float, float* %2268, i64 4
  %2282 = getelementptr inbounds float, float* %2269, i64 1
  %2283 = add nuw i32 %2267, 1
  br label %2284

2284:                                             ; preds = %2273, %2266
  %2285 = phi i32 [ %2283, %2273 ], [ %2267, %2266 ]
  %2286 = phi float* [ %2281, %2273 ], [ %2268, %2266 ]
  %2287 = phi float* [ %2282, %2273 ], [ %2269, %2266 ]
  %2288 = add i32 %2267, 1
  %2289 = icmp eq i32 %2186, %2288
  br i1 %2289, label %2314, label %2290

2290:                                             ; preds = %2284, %2290
  %2291 = phi i32 [ %2312, %2290 ], [ %2285, %2284 ]
  %2292 = phi float* [ %2310, %2290 ], [ %2286, %2284 ]
  %2293 = phi float* [ %2311, %2290 ], [ %2287, %2284 ]
  %2294 = getelementptr inbounds float, float* %2292, i64 3
  %2295 = load float, float* %2294, align 4
  %2296 = fcmp une float %2295, 0.000000e+00
  %2297 = fdiv float 1.000000e+00, %2295
  %2298 = select i1 %2296, float %2297, float 1.000000e+00
  %2299 = load float, float* %2292, align 4
  %2300 = fmul float %2299, %2298
  store float %2300, float* %2293, align 4
  %2301 = getelementptr inbounds float, float* %2292, i64 4
  %2302 = getelementptr inbounds float, float* %2293, i64 1
  %2303 = getelementptr inbounds float, float* %2292, i64 7
  %2304 = load float, float* %2303, align 4
  %2305 = fcmp une float %2304, 0.000000e+00
  %2306 = fdiv float 1.000000e+00, %2304
  %2307 = select i1 %2305, float %2306, float 1.000000e+00
  %2308 = load float, float* %2301, align 4
  %2309 = fmul float %2308, %2307
  store float %2309, float* %2302, align 4
  %2310 = getelementptr inbounds float, float* %2292, i64 8
  %2311 = getelementptr inbounds float, float* %2293, i64 2
  %2312 = add nuw i32 %2291, 2
  %2313 = icmp eq i32 %2312, %2186
  br i1 %2313, label %2314, label %2290, !llvm.loop !331

2314:                                             ; preds = %2284, %2290, %2264
  %2315 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2080, align 8
  br label %2316

2316:                                             ; preds = %2314, %2183, %2141
  %2317 = phi %"class.blink::IntRect"* [ %2315, %2314 ], [ %2184, %2183 ], [ %2143, %2141 ]
  %2318 = getelementptr inbounds i8, i8* %2147, i64 %2073
  %2319 = getelementptr inbounds float, float* %2146, i64 %2077
  %2320 = add nuw nsw i32 %2145, 1
  %2321 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2317, i64 0, i32 1, i32 1
  %2322 = load i32, i32* %2321, align 4
  %2323 = icmp slt i32 %2320, %2322
  %2324 = add i64 %2142, 1
  br i1 %2323, label %2141, label %2125

2325:                                             ; preds = %2127, %2105
  %2326 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2326, align 4
  br label %15491

2327:                                             ; preds = %3
  %2328 = icmp eq i32 %2, 0
  br i1 %2328, label %2329, label %15491

2329:                                             ; preds = %2327
  %2330 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2331 = load i32, i32* %2330, align 8
  %2332 = sext i32 %2331 to i64
  %2333 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2334 = load i32, i32* %2333, align 8
  %2335 = sext i32 %2334 to i64
  %2336 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2337 = load i8*, i8** %2336, align 8
  %2338 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2339 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2338, align 8
  %2340 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2339, i64 0, i32 0, i32 1
  %2341 = load i32, i32* %2340, align 4
  %2342 = mul nsw i32 %2341, %2331
  %2343 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2344 = load i32, i32* %2343, align 4
  %2345 = add nsw i32 %2342, %2344
  %2346 = sext i32 %2345 to i64
  %2347 = getelementptr inbounds i8, i8* %2337, i64 %2346
  %2348 = icmp slt i32 %2334, 0
  %2349 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2350 = load i32, i32* %2349, align 8
  %2351 = icmp sgt i32 %2350, 1
  %2352 = and i1 %2348, %2351
  br i1 %2352, label %2353, label %2363

2353:                                             ; preds = %2329
  %2354 = add nsw i32 %2350, -1
  %2355 = sext i32 %2354 to i64
  %2356 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2357 = load i32, i32* %2356, align 4
  %2358 = sext i32 %2357 to i64
  %2359 = mul nsw i64 %2332, %2355
  %2360 = mul i64 %2359, %2358
  %2361 = sub i64 0, %2360
  %2362 = getelementptr inbounds i8, i8* %2347, i64 %2361
  br label %2365

2363:                                             ; preds = %2329
  %2364 = icmp sgt i32 %2350, 0
  br i1 %2364, label %2365, label %2667

2365:                                             ; preds = %2363, %2353
  %2366 = phi i8* [ %2362, %2353 ], [ %2347, %2363 ]
  %2367 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2368 = load i8*, i8** %2367, align 8
  %2369 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2370 = bitcast i8** %2369 to i32**
  %2371 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2372

2372:                                             ; preds = %2383, %2365
  %2373 = phi i32 [ %2350, %2365 ], [ %2384, %2383 ]
  %2374 = phi %"class.blink::IntRect"* [ %2339, %2365 ], [ %2385, %2383 ]
  %2375 = phi i32 [ 0, %2365 ], [ %2394, %2383 ]
  %2376 = phi i8* [ %2368, %2365 ], [ %2387, %2383 ]
  %2377 = phi i8* [ %2366, %2365 ], [ %2393, %2383 ]
  %2378 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2374, i64 0, i32 1, i32 1
  %2379 = load i32, i32* %2378, align 4
  %2380 = icmp sgt i32 %2379, 0
  br i1 %2380, label %2396, label %2383

2381:                                             ; preds = %2658
  %2382 = load i32, i32* %2349, align 8
  br label %2383

2383:                                             ; preds = %2381, %2372
  %2384 = phi i32 [ %2373, %2372 ], [ %2382, %2381 ]
  %2385 = phi %"class.blink::IntRect"* [ %2374, %2372 ], [ %2659, %2381 ]
  %2386 = phi i8* [ %2377, %2372 ], [ %2660, %2381 ]
  %2387 = phi i8* [ %2376, %2372 ], [ %2661, %2381 ]
  %2388 = phi i32 [ %2379, %2372 ], [ %2664, %2381 ]
  %2389 = load i32, i32* %2371, align 4
  %2390 = sub nsw i32 %2389, %2388
  %2391 = sext i32 %2390 to i64
  %2392 = mul nsw i64 %2391, %2332
  %2393 = getelementptr inbounds i8, i8* %2386, i64 %2392
  %2394 = add nuw nsw i32 %2375, 1
  %2395 = icmp slt i32 %2394, %2384
  br i1 %2395, label %2372, label %2667

2396:                                             ; preds = %2372, %2658
  %2397 = phi i64 [ %2666, %2658 ], [ 0, %2372 ]
  %2398 = phi %"class.blink::IntRect"* [ %2659, %2658 ], [ %2374, %2372 ]
  %2399 = phi i32 [ %2662, %2658 ], [ 0, %2372 ]
  %2400 = phi i8* [ %2661, %2658 ], [ %2376, %2372 ]
  %2401 = phi i8* [ %2660, %2658 ], [ %2377, %2372 ]
  %2402 = mul i64 %2397, %2335
  %2403 = getelementptr i8, i8* %2376, i64 %2402
  %2404 = add i64 %2402, 1
  %2405 = getelementptr i8, i8* %2376, i64 %2404
  %2406 = load i32*, i32** %2370, align 8
  %2407 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2398, i64 0, i32 1, i32 0
  %2408 = load i32, i32* %2407, align 4
  %2409 = bitcast i8* %2401 to i32*
  %2410 = and i32 %2408, -4
  %2411 = icmp eq i32 %2410, 0
  br i1 %2411, label %2469, label %2412

2412:                                             ; preds = %2396
  %2413 = add i32 %2410, -1
  %2414 = lshr i32 %2413, 2
  %2415 = add nuw nsw i32 %2414, 1
  %2416 = and i32 %2415, 1
  %2417 = icmp eq i32 %2414, 0
  br i1 %2417, label %2450, label %2418

2418:                                             ; preds = %2412
  %2419 = sub nuw nsw i32 %2415, %2416
  br label %2420

2420:                                             ; preds = %2420, %2418
  %2421 = phi i32* [ %2409, %2418 ], [ %2446, %2420 ]
  %2422 = phi i32* [ %2406, %2418 ], [ %2447, %2420 ]
  %2423 = phi i32 [ %2419, %2418 ], [ %2448, %2420 ]
  %2424 = bitcast i32* %2422 to <2 x i64>*
  %2425 = bitcast i32* %2421 to <2 x i64>*
  %2426 = load <2 x i64>, <2 x i64>* %2425, align 1
  %2427 = bitcast <2 x i64> %2426 to <8 x i16>
  %2428 = shufflevector <8 x i16> %2427, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %2429 = shufflevector <8 x i16> %2428, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %2430 = bitcast <8 x i16> %2429 to <2 x i64>
  %2431 = and <2 x i64> %2430, <i64 71777214294589695, i64 71777214294589695>
  %2432 = and <2 x i64> %2426, <i64 -71777214294589696, i64 -71777214294589696>
  %2433 = or <2 x i64> %2431, %2432
  store <2 x i64> %2433, <2 x i64>* %2424, align 1
  %2434 = getelementptr inbounds i32, i32* %2421, i64 4
  %2435 = getelementptr inbounds i32, i32* %2422, i64 4
  %2436 = bitcast i32* %2435 to <2 x i64>*
  %2437 = bitcast i32* %2434 to <2 x i64>*
  %2438 = load <2 x i64>, <2 x i64>* %2437, align 1
  %2439 = bitcast <2 x i64> %2438 to <8 x i16>
  %2440 = shufflevector <8 x i16> %2439, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %2441 = shufflevector <8 x i16> %2440, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %2442 = bitcast <8 x i16> %2441 to <2 x i64>
  %2443 = and <2 x i64> %2442, <i64 71777214294589695, i64 71777214294589695>
  %2444 = and <2 x i64> %2438, <i64 -71777214294589696, i64 -71777214294589696>
  %2445 = or <2 x i64> %2443, %2444
  store <2 x i64> %2445, <2 x i64>* %2436, align 1
  %2446 = getelementptr inbounds i32, i32* %2421, i64 8
  %2447 = getelementptr inbounds i32, i32* %2422, i64 8
  %2448 = add i32 %2423, -2
  %2449 = icmp eq i32 %2448, 0
  br i1 %2449, label %2450, label %2420

2450:                                             ; preds = %2420, %2412
  %2451 = phi i32* [ undef, %2412 ], [ %2446, %2420 ]
  %2452 = phi i32* [ undef, %2412 ], [ %2447, %2420 ]
  %2453 = phi i32* [ %2409, %2412 ], [ %2446, %2420 ]
  %2454 = phi i32* [ %2406, %2412 ], [ %2447, %2420 ]
  %2455 = icmp eq i32 %2416, 0
  br i1 %2455, label %2469, label %2456

2456:                                             ; preds = %2450
  %2457 = bitcast i32* %2454 to <2 x i64>*
  %2458 = bitcast i32* %2453 to <2 x i64>*
  %2459 = load <2 x i64>, <2 x i64>* %2458, align 1
  %2460 = bitcast <2 x i64> %2459 to <8 x i16>
  %2461 = shufflevector <8 x i16> %2460, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %2462 = shufflevector <8 x i16> %2461, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %2463 = bitcast <8 x i16> %2462 to <2 x i64>
  %2464 = and <2 x i64> %2463, <i64 71777214294589695, i64 71777214294589695>
  %2465 = and <2 x i64> %2459, <i64 -71777214294589696, i64 -71777214294589696>
  %2466 = or <2 x i64> %2464, %2465
  store <2 x i64> %2466, <2 x i64>* %2457, align 1
  %2467 = getelementptr inbounds i32, i32* %2454, i64 4
  %2468 = getelementptr inbounds i32, i32* %2453, i64 4
  br label %2469

2469:                                             ; preds = %2456, %2450, %2396
  %2470 = phi i32* [ %2409, %2396 ], [ %2451, %2450 ], [ %2468, %2456 ]
  %2471 = phi i32* [ %2406, %2396 ], [ %2452, %2450 ], [ %2467, %2456 ]
  %2472 = sub i32 %2408, %2410
  %2473 = icmp eq i32 %2472, 0
  br i1 %2473, label %2556, label %2474

2474:                                             ; preds = %2469
  %2475 = zext i32 %2472 to i64
  %2476 = icmp ult i32 %2472, 8
  br i1 %2476, label %2513, label %2477

2477:                                             ; preds = %2474
  %2478 = getelementptr i32, i32* %2471, i64 %2475
  %2479 = getelementptr i32, i32* %2470, i64 %2475
  %2480 = icmp ult i32* %2471, %2479
  %2481 = icmp ult i32* %2470, %2478
  %2482 = and i1 %2480, %2481
  br i1 %2482, label %2513, label %2483

2483:                                             ; preds = %2477
  %2484 = and i64 %2475, 4294967288
  br label %2485

2485:                                             ; preds = %2485, %2483
  %2486 = phi i64 [ 0, %2483 ], [ %2509, %2485 ]
  %2487 = getelementptr inbounds i32, i32* %2470, i64 %2486
  %2488 = bitcast i32* %2487 to <4 x i32>*
  %2489 = load <4 x i32>, <4 x i32>* %2488, align 4, !alias.scope !332
  %2490 = getelementptr inbounds i32, i32* %2487, i64 4
  %2491 = bitcast i32* %2490 to <4 x i32>*
  %2492 = load <4 x i32>, <4 x i32>* %2491, align 4, !alias.scope !332
  %2493 = lshr <4 x i32> %2489, <i32 16, i32 16, i32 16, i32 16>
  %2494 = lshr <4 x i32> %2492, <i32 16, i32 16, i32 16, i32 16>
  %2495 = shl <4 x i32> %2489, <i32 16, i32 16, i32 16, i32 16>
  %2496 = shl <4 x i32> %2492, <i32 16, i32 16, i32 16, i32 16>
  %2497 = or <4 x i32> %2493, %2495
  %2498 = or <4 x i32> %2494, %2496
  %2499 = and <4 x i32> %2497, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %2500 = and <4 x i32> %2498, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %2501 = and <4 x i32> %2489, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %2502 = and <4 x i32> %2492, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %2503 = or <4 x i32> %2499, %2501
  %2504 = or <4 x i32> %2500, %2502
  %2505 = getelementptr inbounds i32, i32* %2471, i64 %2486
  %2506 = bitcast i32* %2505 to <4 x i32>*
  store <4 x i32> %2503, <4 x i32>* %2506, align 4, !alias.scope !335, !noalias !332
  %2507 = getelementptr inbounds i32, i32* %2505, i64 4
  %2508 = bitcast i32* %2507 to <4 x i32>*
  store <4 x i32> %2504, <4 x i32>* %2508, align 4, !alias.scope !335, !noalias !332
  %2509 = add i64 %2486, 8
  %2510 = icmp eq i64 %2509, %2484
  br i1 %2510, label %2511, label %2485, !llvm.loop !337

2511:                                             ; preds = %2485
  %2512 = icmp eq i64 %2484, %2475
  br i1 %2512, label %2556, label %2513

2513:                                             ; preds = %2511, %2477, %2474
  %2514 = phi i64 [ 0, %2477 ], [ 0, %2474 ], [ %2484, %2511 ]
  %2515 = xor i64 %2514, -1
  %2516 = and i64 %2475, 1
  %2517 = icmp eq i64 %2516, 0
  br i1 %2517, label %2529, label %2518

2518:                                             ; preds = %2513
  %2519 = getelementptr inbounds i32, i32* %2470, i64 %2514
  %2520 = load i32, i32* %2519, align 4
  %2521 = lshr i32 %2520, 16
  %2522 = shl i32 %2520, 16
  %2523 = or i32 %2521, %2522
  %2524 = and i32 %2523, 16711935
  %2525 = and i32 %2520, -16711936
  %2526 = or i32 %2524, %2525
  %2527 = getelementptr inbounds i32, i32* %2471, i64 %2514
  store i32 %2526, i32* %2527, align 4
  %2528 = or i64 %2514, 1
  br label %2529

2529:                                             ; preds = %2518, %2513
  %2530 = phi i64 [ %2528, %2518 ], [ %2514, %2513 ]
  %2531 = sub nsw i64 0, %2475
  %2532 = icmp eq i64 %2515, %2531
  br i1 %2532, label %2556, label %2533

2533:                                             ; preds = %2529, %2533
  %2534 = phi i64 [ %2554, %2533 ], [ %2530, %2529 ]
  %2535 = getelementptr inbounds i32, i32* %2470, i64 %2534
  %2536 = load i32, i32* %2535, align 4
  %2537 = lshr i32 %2536, 16
  %2538 = shl i32 %2536, 16
  %2539 = or i32 %2537, %2538
  %2540 = and i32 %2539, 16711935
  %2541 = and i32 %2536, -16711936
  %2542 = or i32 %2540, %2541
  %2543 = getelementptr inbounds i32, i32* %2471, i64 %2534
  store i32 %2542, i32* %2543, align 4
  %2544 = add nuw nsw i64 %2534, 1
  %2545 = getelementptr inbounds i32, i32* %2470, i64 %2544
  %2546 = load i32, i32* %2545, align 4
  %2547 = lshr i32 %2546, 16
  %2548 = shl i32 %2546, 16
  %2549 = or i32 %2547, %2548
  %2550 = and i32 %2549, 16711935
  %2551 = and i32 %2546, -16711936
  %2552 = or i32 %2550, %2551
  %2553 = getelementptr inbounds i32, i32* %2471, i64 %2544
  store i32 %2552, i32* %2553, align 4
  %2554 = add nuw nsw i64 %2534, 2
  %2555 = icmp eq i64 %2554, %2475
  br i1 %2555, label %2556, label %2533, !llvm.loop !338

2556:                                             ; preds = %2529, %2533, %2511, %2469
  %2557 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2338, align 8
  %2558 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2557, i64 0, i32 1, i32 0
  %2559 = load i32, i32* %2558, align 4
  %2560 = icmp eq i32 %2559, 0
  br i1 %2560, label %2658, label %2561

2561:                                             ; preds = %2556
  %2562 = load i8*, i8** %2369, align 8
  %2563 = add i32 %2559, -1
  %2564 = zext i32 %2563 to i64
  %2565 = add nuw nsw i64 %2564, 1
  %2566 = icmp ult i64 %2565, 17
  br i1 %2566, label %2599, label %2567

2567:                                             ; preds = %2561
  %2568 = add i32 %2559, -1
  %2569 = zext i32 %2568 to i64
  %2570 = getelementptr i8, i8* %2405, i64 %2569
  %2571 = getelementptr i8, i8* %2562, i64 3
  %2572 = getelementptr i8, i8* %2562, i64 4
  %2573 = shl nuw nsw i64 %2569, 2
  %2574 = getelementptr i8, i8* %2572, i64 %2573
  %2575 = icmp ult i8* %2403, %2574
  %2576 = icmp ult i8* %2571, %2570
  %2577 = and i1 %2575, %2576
  br i1 %2577, label %2599, label %2578

2578:                                             ; preds = %2567
  %2579 = and i64 %2565, 15
  %2580 = icmp eq i64 %2579, 0
  %2581 = select i1 %2580, i64 16, i64 %2579
  %2582 = sub nsw i64 %2565, %2581
  %2583 = trunc i64 %2582 to i32
  %2584 = shl nsw i64 %2582, 2
  %2585 = getelementptr i8, i8* %2562, i64 %2584
  %2586 = getelementptr i8, i8* %2400, i64 %2582
  %2587 = getelementptr i8, i8* %2562, i64 3
  br label %2588

2588:                                             ; preds = %2588, %2578
  %2589 = phi i64 [ 0, %2578 ], [ %2597, %2588 ]
  %2590 = shl i64 %2589, 2
  %2591 = getelementptr i8, i8* %2400, i64 %2589
  %2592 = getelementptr inbounds i8, i8* %2587, i64 %2590
  %2593 = bitcast i8* %2592 to <64 x i8>*
  %2594 = load <64 x i8>, <64 x i8>* %2593, align 1
  %2595 = shufflevector <64 x i8> %2594, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %2596 = bitcast i8* %2591 to <16 x i8>*
  store <16 x i8> %2595, <16 x i8>* %2596, align 1, !alias.scope !339, !noalias !342
  %2597 = add i64 %2589, 16
  %2598 = icmp eq i64 %2597, %2582
  br i1 %2598, label %2599, label %2588, !llvm.loop !344

2599:                                             ; preds = %2588, %2567, %2561
  %2600 = phi i32 [ 0, %2567 ], [ 0, %2561 ], [ %2583, %2588 ]
  %2601 = phi i8* [ %2562, %2567 ], [ %2562, %2561 ], [ %2585, %2588 ]
  %2602 = phi i8* [ %2400, %2567 ], [ %2400, %2561 ], [ %2586, %2588 ]
  %2603 = sub i32 %2559, %2600
  %2604 = xor i32 %2600, -1
  %2605 = add i32 %2559, %2604
  %2606 = and i32 %2603, 7
  %2607 = icmp eq i32 %2606, 0
  br i1 %2607, label %2620, label %2608

2608:                                             ; preds = %2599, %2608
  %2609 = phi i32 [ %2617, %2608 ], [ %2600, %2599 ]
  %2610 = phi i8* [ %2615, %2608 ], [ %2601, %2599 ]
  %2611 = phi i8* [ %2616, %2608 ], [ %2602, %2599 ]
  %2612 = phi i32 [ %2618, %2608 ], [ %2606, %2599 ]
  %2613 = getelementptr inbounds i8, i8* %2610, i64 3
  %2614 = load i8, i8* %2613, align 1
  store i8 %2614, i8* %2611, align 1
  %2615 = getelementptr inbounds i8, i8* %2610, i64 4
  %2616 = getelementptr inbounds i8, i8* %2611, i64 1
  %2617 = add nuw i32 %2609, 1
  %2618 = add i32 %2612, -1
  %2619 = icmp eq i32 %2618, 0
  br i1 %2619, label %2620, label %2608, !llvm.loop !345

2620:                                             ; preds = %2608, %2599
  %2621 = phi i32 [ %2600, %2599 ], [ %2617, %2608 ]
  %2622 = phi i8* [ %2601, %2599 ], [ %2615, %2608 ]
  %2623 = phi i8* [ %2602, %2599 ], [ %2616, %2608 ]
  %2624 = icmp ult i32 %2605, 7
  br i1 %2624, label %2656, label %2625

2625:                                             ; preds = %2620, %2625
  %2626 = phi i32 [ %2654, %2625 ], [ %2621, %2620 ]
  %2627 = phi i8* [ %2652, %2625 ], [ %2622, %2620 ]
  %2628 = phi i8* [ %2653, %2625 ], [ %2623, %2620 ]
  %2629 = getelementptr inbounds i8, i8* %2627, i64 3
  %2630 = load i8, i8* %2629, align 1
  store i8 %2630, i8* %2628, align 1
  %2631 = getelementptr inbounds i8, i8* %2628, i64 1
  %2632 = getelementptr inbounds i8, i8* %2627, i64 7
  %2633 = load i8, i8* %2632, align 1
  store i8 %2633, i8* %2631, align 1
  %2634 = getelementptr inbounds i8, i8* %2628, i64 2
  %2635 = getelementptr inbounds i8, i8* %2627, i64 11
  %2636 = load i8, i8* %2635, align 1
  store i8 %2636, i8* %2634, align 1
  %2637 = getelementptr inbounds i8, i8* %2628, i64 3
  %2638 = getelementptr inbounds i8, i8* %2627, i64 15
  %2639 = load i8, i8* %2638, align 1
  store i8 %2639, i8* %2637, align 1
  %2640 = getelementptr inbounds i8, i8* %2628, i64 4
  %2641 = getelementptr inbounds i8, i8* %2627, i64 19
  %2642 = load i8, i8* %2641, align 1
  store i8 %2642, i8* %2640, align 1
  %2643 = getelementptr inbounds i8, i8* %2628, i64 5
  %2644 = getelementptr inbounds i8, i8* %2627, i64 23
  %2645 = load i8, i8* %2644, align 1
  store i8 %2645, i8* %2643, align 1
  %2646 = getelementptr inbounds i8, i8* %2628, i64 6
  %2647 = getelementptr inbounds i8, i8* %2627, i64 27
  %2648 = load i8, i8* %2647, align 1
  store i8 %2648, i8* %2646, align 1
  %2649 = getelementptr inbounds i8, i8* %2628, i64 7
  %2650 = getelementptr inbounds i8, i8* %2627, i64 31
  %2651 = load i8, i8* %2650, align 1
  store i8 %2651, i8* %2649, align 1
  %2652 = getelementptr inbounds i8, i8* %2627, i64 32
  %2653 = getelementptr inbounds i8, i8* %2628, i64 8
  %2654 = add nuw i32 %2626, 8
  %2655 = icmp eq i32 %2654, %2559
  br i1 %2655, label %2656, label %2625, !llvm.loop !346

2656:                                             ; preds = %2625, %2620
  %2657 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2338, align 8
  br label %2658

2658:                                             ; preds = %2656, %2556
  %2659 = phi %"class.blink::IntRect"* [ %2657, %2656 ], [ %2557, %2556 ]
  %2660 = getelementptr inbounds i8, i8* %2401, i64 %2332
  %2661 = getelementptr inbounds i8, i8* %2400, i64 %2335
  %2662 = add nuw nsw i32 %2399, 1
  %2663 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2659, i64 0, i32 1, i32 1
  %2664 = load i32, i32* %2663, align 4
  %2665 = icmp slt i32 %2662, %2664
  %2666 = add i64 %2397, 1
  br i1 %2665, label %2396, label %2381

2667:                                             ; preds = %2383, %2363
  %2668 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2668, align 4
  br label %15491

2669:                                             ; preds = %3
  %2670 = icmp eq i32 %2, 0
  br i1 %2670, label %2671, label %15491

2671:                                             ; preds = %2669
  %2672 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2673 = load i32, i32* %2672, align 8
  %2674 = sext i32 %2673 to i64
  %2675 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2676 = load i32, i32* %2675, align 8
  %2677 = sdiv i32 %2676, 2
  %2678 = sext i32 %2677 to i64
  %2679 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2680 = load i8*, i8** %2679, align 8
  %2681 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2682 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2681, align 8
  %2683 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2682, i64 0, i32 0, i32 1
  %2684 = load i32, i32* %2683, align 4
  %2685 = mul nsw i32 %2684, %2673
  %2686 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2687 = load i32, i32* %2686, align 4
  %2688 = add nsw i32 %2685, %2687
  %2689 = sext i32 %2688 to i64
  %2690 = getelementptr inbounds i8, i8* %2680, i64 %2689
  %2691 = icmp slt i32 %2676, 0
  %2692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2693 = load i32, i32* %2692, align 8
  %2694 = icmp sgt i32 %2693, 1
  %2695 = and i1 %2691, %2694
  br i1 %2695, label %2696, label %2706

2696:                                             ; preds = %2671
  %2697 = add nsw i32 %2693, -1
  %2698 = sext i32 %2697 to i64
  %2699 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2700 = load i32, i32* %2699, align 4
  %2701 = sext i32 %2700 to i64
  %2702 = mul nsw i64 %2674, %2698
  %2703 = mul i64 %2702, %2701
  %2704 = sub i64 0, %2703
  %2705 = getelementptr inbounds i8, i8* %2690, i64 %2704
  br label %2708

2706:                                             ; preds = %2671
  %2707 = icmp sgt i32 %2693, 0
  br i1 %2707, label %2708, label %2856

2708:                                             ; preds = %2706, %2696
  %2709 = phi i8* [ %2705, %2696 ], [ %2690, %2706 ]
  %2710 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2711 = bitcast i8** %2710 to i16**
  %2712 = load i16*, i16** %2711, align 8
  %2713 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2714 = bitcast i8** %2713 to float**
  %2715 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2716

2716:                                             ; preds = %2728, %2708
  %2717 = phi i32 [ %2693, %2708 ], [ %2729, %2728 ]
  %2718 = phi %"class.blink::IntRect"* [ %2682, %2708 ], [ %2730, %2728 ]
  %2719 = phi %"class.blink::IntRect"* [ %2682, %2708 ], [ %2731, %2728 ]
  %2720 = phi i32 [ 0, %2708 ], [ %2740, %2728 ]
  %2721 = phi i16* [ %2712, %2708 ], [ %2733, %2728 ]
  %2722 = phi i8* [ %2709, %2708 ], [ %2739, %2728 ]
  %2723 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2719, i64 0, i32 1, i32 1
  %2724 = load i32, i32* %2723, align 4
  %2725 = icmp sgt i32 %2724, 0
  br i1 %2725, label %2742, label %2728

2726:                                             ; preds = %2848
  %2727 = load i32, i32* %2692, align 8
  br label %2728

2728:                                             ; preds = %2726, %2716
  %2729 = phi i32 [ %2717, %2716 ], [ %2727, %2726 ]
  %2730 = phi %"class.blink::IntRect"* [ %2718, %2716 ], [ %2849, %2726 ]
  %2731 = phi %"class.blink::IntRect"* [ %2719, %2716 ], [ %2849, %2726 ]
  %2732 = phi i8* [ %2722, %2716 ], [ %2850, %2726 ]
  %2733 = phi i16* [ %2721, %2716 ], [ %2851, %2726 ]
  %2734 = phi i32 [ %2724, %2716 ], [ %2854, %2726 ]
  %2735 = load i32, i32* %2715, align 4
  %2736 = sub nsw i32 %2735, %2734
  %2737 = sext i32 %2736 to i64
  %2738 = mul nsw i64 %2737, %2674
  %2739 = getelementptr inbounds i8, i8* %2732, i64 %2738
  %2740 = add nuw nsw i32 %2720, 1
  %2741 = icmp slt i32 %2740, %2729
  br i1 %2741, label %2716, label %2856

2742:                                             ; preds = %2716, %2848
  %2743 = phi %"class.blink::IntRect"* [ %2849, %2848 ], [ %2718, %2716 ]
  %2744 = phi %"class.blink::IntRect"* [ %2849, %2848 ], [ %2719, %2716 ]
  %2745 = phi i32 [ %2852, %2848 ], [ 0, %2716 ]
  %2746 = phi i16* [ %2851, %2848 ], [ %2721, %2716 ]
  %2747 = phi i8* [ %2850, %2848 ], [ %2722, %2716 ]
  %2748 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2744, i64 0, i32 1, i32 0
  %2749 = load i32, i32* %2748, align 4
  %2750 = icmp eq i32 %2749, 0
  br i1 %2750, label %2848, label %2751

2751:                                             ; preds = %2742
  %2752 = load float*, float** %2714, align 8
  br label %2753

2753:                                             ; preds = %2753, %2751
  %2754 = phi i32 [ %2777, %2753 ], [ 0, %2751 ]
  %2755 = phi i8* [ %2775, %2753 ], [ %2747, %2751 ]
  %2756 = phi float* [ %2776, %2753 ], [ %2752, %2751 ]
  %2757 = getelementptr inbounds i8, i8* %2755, i64 2
  %2758 = load i8, i8* %2757, align 1
  %2759 = uitofp i8 %2758 to float
  %2760 = fmul float %2759, 0x3F70101020000000
  store float %2760, float* %2756, align 4
  %2761 = getelementptr inbounds i8, i8* %2755, i64 1
  %2762 = load i8, i8* %2761, align 1
  %2763 = uitofp i8 %2762 to float
  %2764 = fmul float %2763, 0x3F70101020000000
  %2765 = getelementptr inbounds float, float* %2756, i64 1
  store float %2764, float* %2765, align 4
  %2766 = load i8, i8* %2755, align 1
  %2767 = uitofp i8 %2766 to float
  %2768 = fmul float %2767, 0x3F70101020000000
  %2769 = getelementptr inbounds float, float* %2756, i64 2
  store float %2768, float* %2769, align 4
  %2770 = getelementptr inbounds i8, i8* %2755, i64 3
  %2771 = load i8, i8* %2770, align 1
  %2772 = uitofp i8 %2771 to float
  %2773 = fmul float %2772, 0x3F70101020000000
  %2774 = getelementptr inbounds float, float* %2756, i64 3
  store float %2773, float* %2774, align 4
  %2775 = getelementptr inbounds i8, i8* %2755, i64 4
  %2776 = getelementptr inbounds float, float* %2756, i64 4
  %2777 = add nuw i32 %2754, 1
  %2778 = icmp eq i32 %2777, %2749
  br i1 %2778, label %2779, label %2753

2779:                                             ; preds = %2753
  %2780 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2681, align 8
  %2781 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2780, i64 0, i32 1, i32 0
  %2782 = load i32, i32* %2781, align 4
  %2783 = icmp eq i32 %2782, 0
  br i1 %2783, label %2848, label %2784

2784:                                             ; preds = %2779
  %2785 = load float*, float** %2714, align 8
  %2786 = and i32 %2782, 1
  %2787 = icmp eq i32 %2782, 1
  br i1 %2787, label %2827, label %2788

2788:                                             ; preds = %2784
  %2789 = sub i32 %2782, %2786
  br label %2790

2790:                                             ; preds = %2790, %2788
  %2791 = phi float* [ %2785, %2788 ], [ %2823, %2790 ]
  %2792 = phi i16* [ %2746, %2788 ], [ %2824, %2790 ]
  %2793 = phi i32 [ %2789, %2788 ], [ %2825, %2790 ]
  %2794 = getelementptr inbounds float, float* %2791, i64 3
  %2795 = bitcast float* %2794 to i32*
  %2796 = load i32, i32* %2795, align 4
  %2797 = lshr i32 %2796, 23
  %2798 = zext i32 %2797 to i64
  %2799 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2798
  %2800 = load i16, i16* %2799, align 2
  %2801 = and i32 %2796, 8388607
  %2802 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2798
  %2803 = load i8, i8* %2802, align 1
  %2804 = zext i8 %2803 to i32
  %2805 = lshr i32 %2801, %2804
  %2806 = trunc i32 %2805 to i16
  %2807 = add i16 %2800, %2806
  store i16 %2807, i16* %2792, align 2
  %2808 = getelementptr inbounds i16, i16* %2792, i64 1
  %2809 = getelementptr inbounds float, float* %2791, i64 7
  %2810 = bitcast float* %2809 to i32*
  %2811 = load i32, i32* %2810, align 4
  %2812 = lshr i32 %2811, 23
  %2813 = zext i32 %2812 to i64
  %2814 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2813
  %2815 = load i16, i16* %2814, align 2
  %2816 = and i32 %2811, 8388607
  %2817 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2813
  %2818 = load i8, i8* %2817, align 1
  %2819 = zext i8 %2818 to i32
  %2820 = lshr i32 %2816, %2819
  %2821 = trunc i32 %2820 to i16
  %2822 = add i16 %2815, %2821
  store i16 %2822, i16* %2808, align 2
  %2823 = getelementptr inbounds float, float* %2791, i64 8
  %2824 = getelementptr inbounds i16, i16* %2792, i64 2
  %2825 = add i32 %2793, -2
  %2826 = icmp eq i32 %2825, 0
  br i1 %2826, label %2827, label %2790

2827:                                             ; preds = %2790, %2784
  %2828 = phi float* [ %2785, %2784 ], [ %2823, %2790 ]
  %2829 = phi i16* [ %2746, %2784 ], [ %2824, %2790 ]
  %2830 = icmp eq i32 %2786, 0
  br i1 %2830, label %2846, label %2831

2831:                                             ; preds = %2827
  %2832 = getelementptr inbounds float, float* %2828, i64 3
  %2833 = bitcast float* %2832 to i32*
  %2834 = load i32, i32* %2833, align 4
  %2835 = lshr i32 %2834, 23
  %2836 = zext i32 %2835 to i64
  %2837 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2836
  %2838 = load i16, i16* %2837, align 2
  %2839 = and i32 %2834, 8388607
  %2840 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2836
  %2841 = load i8, i8* %2840, align 1
  %2842 = zext i8 %2841 to i32
  %2843 = lshr i32 %2839, %2842
  %2844 = trunc i32 %2843 to i16
  %2845 = add i16 %2838, %2844
  store i16 %2845, i16* %2829, align 2
  br label %2846

2846:                                             ; preds = %2827, %2831
  %2847 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2681, align 8
  br label %2848

2848:                                             ; preds = %2846, %2779, %2742
  %2849 = phi %"class.blink::IntRect"* [ %2847, %2846 ], [ %2780, %2779 ], [ %2743, %2742 ]
  %2850 = getelementptr inbounds i8, i8* %2747, i64 %2674
  %2851 = getelementptr inbounds i16, i16* %2746, i64 %2678
  %2852 = add nuw nsw i32 %2745, 1
  %2853 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2849, i64 0, i32 1, i32 1
  %2854 = load i32, i32* %2853, align 4
  %2855 = icmp slt i32 %2852, %2854
  br i1 %2855, label %2742, label %2726

2856:                                             ; preds = %2728, %2706
  %2857 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2857, align 4
  br label %15491

2858:                                             ; preds = %3
  %2859 = icmp eq i32 %2, 0
  br i1 %2859, label %2860, label %15491

2860:                                             ; preds = %2858
  %2861 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2862 = load i32, i32* %2861, align 8
  %2863 = sext i32 %2862 to i64
  %2864 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2865 = load i32, i32* %2864, align 8
  %2866 = sdiv i32 %2865, 4
  %2867 = sext i32 %2866 to i64
  %2868 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2869 = load i8*, i8** %2868, align 8
  %2870 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2871 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2870, align 8
  %2872 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2871, i64 0, i32 0, i32 1
  %2873 = load i32, i32* %2872, align 4
  %2874 = mul nsw i32 %2873, %2862
  %2875 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2876 = load i32, i32* %2875, align 4
  %2877 = add nsw i32 %2874, %2876
  %2878 = sext i32 %2877 to i64
  %2879 = getelementptr inbounds i8, i8* %2869, i64 %2878
  %2880 = icmp slt i32 %2865, 0
  %2881 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2882 = load i32, i32* %2881, align 8
  %2883 = icmp sgt i32 %2882, 1
  %2884 = and i1 %2880, %2883
  br i1 %2884, label %2885, label %2895

2885:                                             ; preds = %2860
  %2886 = add nsw i32 %2882, -1
  %2887 = sext i32 %2886 to i64
  %2888 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2889 = load i32, i32* %2888, align 4
  %2890 = sext i32 %2889 to i64
  %2891 = mul nsw i64 %2863, %2887
  %2892 = mul i64 %2891, %2890
  %2893 = sub i64 0, %2892
  %2894 = getelementptr inbounds i8, i8* %2879, i64 %2893
  br label %2897

2895:                                             ; preds = %2860
  %2896 = icmp sgt i32 %2882, 0
  br i1 %2896, label %2897, label %3111

2897:                                             ; preds = %2895, %2885
  %2898 = phi i8* [ %2894, %2885 ], [ %2879, %2895 ]
  %2899 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2900 = bitcast i8** %2899 to float**
  %2901 = load float*, float** %2900, align 8
  %2902 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2903 = bitcast i8** %2902 to float**
  %2904 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2905

2905:                                             ; preds = %2917, %2897
  %2906 = phi i32 [ %2882, %2897 ], [ %2918, %2917 ]
  %2907 = phi %"class.blink::IntRect"* [ %2871, %2897 ], [ %2919, %2917 ]
  %2908 = phi %"class.blink::IntRect"* [ %2871, %2897 ], [ %2920, %2917 ]
  %2909 = phi i32 [ 0, %2897 ], [ %2929, %2917 ]
  %2910 = phi float* [ %2901, %2897 ], [ %2922, %2917 ]
  %2911 = phi i8* [ %2898, %2897 ], [ %2928, %2917 ]
  %2912 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2908, i64 0, i32 1, i32 1
  %2913 = load i32, i32* %2912, align 4
  %2914 = icmp sgt i32 %2913, 0
  br i1 %2914, label %2931, label %2917

2915:                                             ; preds = %3102
  %2916 = load i32, i32* %2881, align 8
  br label %2917

2917:                                             ; preds = %2915, %2905
  %2918 = phi i32 [ %2906, %2905 ], [ %2916, %2915 ]
  %2919 = phi %"class.blink::IntRect"* [ %2907, %2905 ], [ %3103, %2915 ]
  %2920 = phi %"class.blink::IntRect"* [ %2908, %2905 ], [ %3103, %2915 ]
  %2921 = phi i8* [ %2911, %2905 ], [ %3104, %2915 ]
  %2922 = phi float* [ %2910, %2905 ], [ %3105, %2915 ]
  %2923 = phi i32 [ %2913, %2905 ], [ %3108, %2915 ]
  %2924 = load i32, i32* %2904, align 4
  %2925 = sub nsw i32 %2924, %2923
  %2926 = sext i32 %2925 to i64
  %2927 = mul nsw i64 %2926, %2863
  %2928 = getelementptr inbounds i8, i8* %2921, i64 %2927
  %2929 = add nuw nsw i32 %2909, 1
  %2930 = icmp slt i32 %2929, %2918
  br i1 %2930, label %2905, label %3111

2931:                                             ; preds = %2905, %3102
  %2932 = phi i64 [ %3110, %3102 ], [ 0, %2905 ]
  %2933 = phi %"class.blink::IntRect"* [ %3103, %3102 ], [ %2907, %2905 ]
  %2934 = phi %"class.blink::IntRect"* [ %3103, %3102 ], [ %2908, %2905 ]
  %2935 = phi i32 [ %3106, %3102 ], [ 0, %2905 ]
  %2936 = phi float* [ %3105, %3102 ], [ %2910, %2905 ]
  %2937 = phi i8* [ %3104, %3102 ], [ %2911, %2905 ]
  %2938 = mul i64 %2932, %2867
  %2939 = getelementptr float, float* %2910, i64 %2938
  %2940 = add i64 %2938, 1
  %2941 = getelementptr float, float* %2910, i64 %2940
  %2942 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2934, i64 0, i32 1, i32 0
  %2943 = load i32, i32* %2942, align 4
  %2944 = icmp eq i32 %2943, 0
  br i1 %2944, label %3102, label %2945

2945:                                             ; preds = %2931
  %2946 = load float*, float** %2903, align 8
  br label %2947

2947:                                             ; preds = %2947, %2945
  %2948 = phi i32 [ %2971, %2947 ], [ 0, %2945 ]
  %2949 = phi i8* [ %2969, %2947 ], [ %2937, %2945 ]
  %2950 = phi float* [ %2970, %2947 ], [ %2946, %2945 ]
  %2951 = getelementptr inbounds i8, i8* %2949, i64 2
  %2952 = load i8, i8* %2951, align 1
  %2953 = uitofp i8 %2952 to float
  %2954 = fmul float %2953, 0x3F70101020000000
  store float %2954, float* %2950, align 4
  %2955 = getelementptr inbounds i8, i8* %2949, i64 1
  %2956 = load i8, i8* %2955, align 1
  %2957 = uitofp i8 %2956 to float
  %2958 = fmul float %2957, 0x3F70101020000000
  %2959 = getelementptr inbounds float, float* %2950, i64 1
  store float %2958, float* %2959, align 4
  %2960 = load i8, i8* %2949, align 1
  %2961 = uitofp i8 %2960 to float
  %2962 = fmul float %2961, 0x3F70101020000000
  %2963 = getelementptr inbounds float, float* %2950, i64 2
  store float %2962, float* %2963, align 4
  %2964 = getelementptr inbounds i8, i8* %2949, i64 3
  %2965 = load i8, i8* %2964, align 1
  %2966 = uitofp i8 %2965 to float
  %2967 = fmul float %2966, 0x3F70101020000000
  %2968 = getelementptr inbounds float, float* %2950, i64 3
  store float %2967, float* %2968, align 4
  %2969 = getelementptr inbounds i8, i8* %2949, i64 4
  %2970 = getelementptr inbounds float, float* %2950, i64 4
  %2971 = add nuw i32 %2948, 1
  %2972 = icmp eq i32 %2971, %2943
  br i1 %2972, label %2973, label %2947

2973:                                             ; preds = %2947
  %2974 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2870, align 8
  %2975 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2974, i64 0, i32 1, i32 0
  %2976 = load i32, i32* %2975, align 4
  %2977 = icmp eq i32 %2976, 0
  br i1 %2977, label %3102, label %2978

2978:                                             ; preds = %2973
  %2979 = load float*, float** %2903, align 8
  %2980 = add i32 %2976, -1
  %2981 = zext i32 %2980 to i64
  %2982 = add nuw nsw i64 %2981, 1
  %2983 = icmp ult i64 %2982, 9
  br i1 %2983, label %3025, label %2984

2984:                                             ; preds = %2978
  %2985 = add i32 %2976, -1
  %2986 = zext i32 %2985 to i64
  %2987 = getelementptr float, float* %2941, i64 %2986
  %2988 = getelementptr float, float* %2979, i64 3
  %2989 = getelementptr float, float* %2979, i64 4
  %2990 = shl nuw nsw i64 %2986, 2
  %2991 = getelementptr float, float* %2989, i64 %2990
  %2992 = icmp ult float* %2939, %2991
  %2993 = icmp ult float* %2988, %2987
  %2994 = and i1 %2992, %2993
  br i1 %2994, label %3025, label %2995

2995:                                             ; preds = %2984
  %2996 = and i64 %2982, 7
  %2997 = icmp eq i64 %2996, 0
  %2998 = select i1 %2997, i64 8, i64 %2996
  %2999 = sub nsw i64 %2982, %2998
  %3000 = trunc i64 %2999 to i32
  %3001 = shl nsw i64 %2999, 2
  %3002 = getelementptr float, float* %2979, i64 %3001
  %3003 = getelementptr float, float* %2936, i64 %2999
  %3004 = getelementptr float, float* %2979, i64 3
  %3005 = getelementptr float, float* %2979, i64 3
  br label %3006

3006:                                             ; preds = %3006, %2995
  %3007 = phi i64 [ 0, %2995 ], [ %3023, %3006 ]
  %3008 = shl i64 %3007, 2
  %3009 = shl i64 %3007, 2
  %3010 = or i64 %3009, 16
  %3011 = getelementptr float, float* %2936, i64 %3007
  %3012 = getelementptr inbounds float, float* %3004, i64 %3008
  %3013 = getelementptr inbounds float, float* %3005, i64 %3010
  %3014 = bitcast float* %3012 to <16 x i32>*
  %3015 = bitcast float* %3013 to <16 x i32>*
  %3016 = load <16 x i32>, <16 x i32>* %3014, align 4
  %3017 = load <16 x i32>, <16 x i32>* %3015, align 4
  %3018 = shufflevector <16 x i32> %3016, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %3019 = shufflevector <16 x i32> %3017, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %3020 = bitcast float* %3011 to <4 x i32>*
  store <4 x i32> %3018, <4 x i32>* %3020, align 4, !alias.scope !347, !noalias !350
  %3021 = getelementptr float, float* %3011, i64 4
  %3022 = bitcast float* %3021 to <4 x i32>*
  store <4 x i32> %3019, <4 x i32>* %3022, align 4, !alias.scope !347, !noalias !350
  %3023 = add i64 %3007, 8
  %3024 = icmp eq i64 %3023, %2999
  br i1 %3024, label %3025, label %3006, !llvm.loop !352

3025:                                             ; preds = %3006, %2984, %2978
  %3026 = phi i32 [ 0, %2984 ], [ 0, %2978 ], [ %3000, %3006 ]
  %3027 = phi float* [ %2979, %2984 ], [ %2979, %2978 ], [ %3002, %3006 ]
  %3028 = phi float* [ %2936, %2984 ], [ %2936, %2978 ], [ %3003, %3006 ]
  %3029 = sub i32 %2976, %3026
  %3030 = xor i32 %3026, -1
  %3031 = add i32 %2976, %3030
  %3032 = and i32 %3029, 7
  %3033 = icmp eq i32 %3032, 0
  br i1 %3033, label %3048, label %3034

3034:                                             ; preds = %3025, %3034
  %3035 = phi i32 [ %3045, %3034 ], [ %3026, %3025 ]
  %3036 = phi float* [ %3043, %3034 ], [ %3027, %3025 ]
  %3037 = phi float* [ %3044, %3034 ], [ %3028, %3025 ]
  %3038 = phi i32 [ %3046, %3034 ], [ %3032, %3025 ]
  %3039 = getelementptr inbounds float, float* %3036, i64 3
  %3040 = bitcast float* %3039 to i32*
  %3041 = load i32, i32* %3040, align 4
  %3042 = bitcast float* %3037 to i32*
  store i32 %3041, i32* %3042, align 4
  %3043 = getelementptr inbounds float, float* %3036, i64 4
  %3044 = getelementptr inbounds float, float* %3037, i64 1
  %3045 = add nuw i32 %3035, 1
  %3046 = add i32 %3038, -1
  %3047 = icmp eq i32 %3046, 0
  br i1 %3047, label %3048, label %3034, !llvm.loop !353

3048:                                             ; preds = %3034, %3025
  %3049 = phi i32 [ %3026, %3025 ], [ %3045, %3034 ]
  %3050 = phi float* [ %3027, %3025 ], [ %3043, %3034 ]
  %3051 = phi float* [ %3028, %3025 ], [ %3044, %3034 ]
  %3052 = icmp ult i32 %3031, 7
  br i1 %3052, label %3100, label %3053

3053:                                             ; preds = %3048, %3053
  %3054 = phi i32 [ %3098, %3053 ], [ %3049, %3048 ]
  %3055 = phi float* [ %3096, %3053 ], [ %3050, %3048 ]
  %3056 = phi float* [ %3097, %3053 ], [ %3051, %3048 ]
  %3057 = getelementptr inbounds float, float* %3055, i64 3
  %3058 = bitcast float* %3057 to i32*
  %3059 = load i32, i32* %3058, align 4
  %3060 = bitcast float* %3056 to i32*
  store i32 %3059, i32* %3060, align 4
  %3061 = getelementptr inbounds float, float* %3056, i64 1
  %3062 = getelementptr inbounds float, float* %3055, i64 7
  %3063 = bitcast float* %3062 to i32*
  %3064 = load i32, i32* %3063, align 4
  %3065 = bitcast float* %3061 to i32*
  store i32 %3064, i32* %3065, align 4
  %3066 = getelementptr inbounds float, float* %3056, i64 2
  %3067 = getelementptr inbounds float, float* %3055, i64 11
  %3068 = bitcast float* %3067 to i32*
  %3069 = load i32, i32* %3068, align 4
  %3070 = bitcast float* %3066 to i32*
  store i32 %3069, i32* %3070, align 4
  %3071 = getelementptr inbounds float, float* %3056, i64 3
  %3072 = getelementptr inbounds float, float* %3055, i64 15
  %3073 = bitcast float* %3072 to i32*
  %3074 = load i32, i32* %3073, align 4
  %3075 = bitcast float* %3071 to i32*
  store i32 %3074, i32* %3075, align 4
  %3076 = getelementptr inbounds float, float* %3056, i64 4
  %3077 = getelementptr inbounds float, float* %3055, i64 19
  %3078 = bitcast float* %3077 to i32*
  %3079 = load i32, i32* %3078, align 4
  %3080 = bitcast float* %3076 to i32*
  store i32 %3079, i32* %3080, align 4
  %3081 = getelementptr inbounds float, float* %3056, i64 5
  %3082 = getelementptr inbounds float, float* %3055, i64 23
  %3083 = bitcast float* %3082 to i32*
  %3084 = load i32, i32* %3083, align 4
  %3085 = bitcast float* %3081 to i32*
  store i32 %3084, i32* %3085, align 4
  %3086 = getelementptr inbounds float, float* %3056, i64 6
  %3087 = getelementptr inbounds float, float* %3055, i64 27
  %3088 = bitcast float* %3087 to i32*
  %3089 = load i32, i32* %3088, align 4
  %3090 = bitcast float* %3086 to i32*
  store i32 %3089, i32* %3090, align 4
  %3091 = getelementptr inbounds float, float* %3056, i64 7
  %3092 = getelementptr inbounds float, float* %3055, i64 31
  %3093 = bitcast float* %3092 to i32*
  %3094 = load i32, i32* %3093, align 4
  %3095 = bitcast float* %3091 to i32*
  store i32 %3094, i32* %3095, align 4
  %3096 = getelementptr inbounds float, float* %3055, i64 32
  %3097 = getelementptr inbounds float, float* %3056, i64 8
  %3098 = add nuw i32 %3054, 8
  %3099 = icmp eq i32 %3098, %2976
  br i1 %3099, label %3100, label %3053, !llvm.loop !354

3100:                                             ; preds = %3053, %3048
  %3101 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2870, align 8
  br label %3102

3102:                                             ; preds = %3100, %2973, %2931
  %3103 = phi %"class.blink::IntRect"* [ %3101, %3100 ], [ %2974, %2973 ], [ %2933, %2931 ]
  %3104 = getelementptr inbounds i8, i8* %2937, i64 %2863
  %3105 = getelementptr inbounds float, float* %2936, i64 %2867
  %3106 = add nuw nsw i32 %2935, 1
  %3107 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3103, i64 0, i32 1, i32 1
  %3108 = load i32, i32* %3107, align 4
  %3109 = icmp slt i32 %3106, %3108
  %3110 = add i64 %2932, 1
  br i1 %3109, label %2931, label %2915

3111:                                             ; preds = %2917, %2895
  %3112 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3112, align 4
  br label %15491

3113:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %3114
    i32 1, label %3406
    i32 2, label %3723
  ]

3114:                                             ; preds = %3113
  %3115 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3116 = load i32, i32* %3115, align 8
  %3117 = sext i32 %3116 to i64
  %3118 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3119 = load i32, i32* %3118, align 8
  %3120 = sext i32 %3119 to i64
  %3121 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3122 = load i8*, i8** %3121, align 8
  %3123 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3124 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3123, align 8
  %3125 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3124, i64 0, i32 0, i32 1
  %3126 = load i32, i32* %3125, align 4
  %3127 = mul nsw i32 %3126, %3116
  %3128 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3129 = load i32, i32* %3128, align 4
  %3130 = add nsw i32 %3127, %3129
  %3131 = sext i32 %3130 to i64
  %3132 = getelementptr inbounds i8, i8* %3122, i64 %3131
  %3133 = icmp slt i32 %3119, 0
  %3134 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3135 = load i32, i32* %3134, align 8
  %3136 = icmp sgt i32 %3135, 1
  %3137 = and i1 %3133, %3136
  br i1 %3137, label %3138, label %3148

3138:                                             ; preds = %3114
  %3139 = add nsw i32 %3135, -1
  %3140 = sext i32 %3139 to i64
  %3141 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3142 = load i32, i32* %3141, align 4
  %3143 = sext i32 %3142 to i64
  %3144 = mul nsw i64 %3117, %3140
  %3145 = mul i64 %3144, %3143
  %3146 = sub i64 0, %3145
  %3147 = getelementptr inbounds i8, i8* %3132, i64 %3146
  br label %3150

3148:                                             ; preds = %3114
  %3149 = icmp sgt i32 %3135, 0
  br i1 %3149, label %3150, label %3404

3150:                                             ; preds = %3148, %3138
  %3151 = phi i8* [ %3147, %3138 ], [ %3132, %3148 ]
  %3152 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3153 = load i8*, i8** %3152, align 8
  %3154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3155 = bitcast i8** %3154 to i32**
  %3156 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3157

3157:                                             ; preds = %3168, %3150
  %3158 = phi i32 [ %3135, %3150 ], [ %3169, %3168 ]
  %3159 = phi %"class.blink::IntRect"* [ %3124, %3150 ], [ %3170, %3168 ]
  %3160 = phi i32 [ 0, %3150 ], [ %3179, %3168 ]
  %3161 = phi i8* [ %3153, %3150 ], [ %3172, %3168 ]
  %3162 = phi i8* [ %3151, %3150 ], [ %3178, %3168 ]
  %3163 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3159, i64 0, i32 1, i32 1
  %3164 = load i32, i32* %3163, align 4
  %3165 = icmp sgt i32 %3164, 0
  br i1 %3165, label %3181, label %3168

3166:                                             ; preds = %3396
  %3167 = load i32, i32* %3134, align 8
  br label %3168

3168:                                             ; preds = %3166, %3157
  %3169 = phi i32 [ %3158, %3157 ], [ %3167, %3166 ]
  %3170 = phi %"class.blink::IntRect"* [ %3159, %3157 ], [ %3397, %3166 ]
  %3171 = phi i8* [ %3162, %3157 ], [ %3398, %3166 ]
  %3172 = phi i8* [ %3161, %3157 ], [ %3399, %3166 ]
  %3173 = phi i32 [ %3164, %3157 ], [ %3402, %3166 ]
  %3174 = load i32, i32* %3156, align 4
  %3175 = sub nsw i32 %3174, %3173
  %3176 = sext i32 %3175 to i64
  %3177 = mul nsw i64 %3176, %3117
  %3178 = getelementptr inbounds i8, i8* %3171, i64 %3177
  %3179 = add nuw nsw i32 %3160, 1
  %3180 = icmp slt i32 %3179, %3169
  br i1 %3180, label %3157, label %3404

3181:                                             ; preds = %3157, %3396
  %3182 = phi %"class.blink::IntRect"* [ %3397, %3396 ], [ %3159, %3157 ]
  %3183 = phi i32 [ %3400, %3396 ], [ 0, %3157 ]
  %3184 = phi i8* [ %3399, %3396 ], [ %3161, %3157 ]
  %3185 = phi i8* [ %3398, %3396 ], [ %3162, %3157 ]
  %3186 = load i32*, i32** %3155, align 8
  %3187 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3182, i64 0, i32 1, i32 0
  %3188 = load i32, i32* %3187, align 4
  %3189 = bitcast i8* %3185 to i32*
  %3190 = and i32 %3188, -4
  %3191 = icmp eq i32 %3190, 0
  br i1 %3191, label %3249, label %3192

3192:                                             ; preds = %3181
  %3193 = add i32 %3190, -1
  %3194 = lshr i32 %3193, 2
  %3195 = add nuw nsw i32 %3194, 1
  %3196 = and i32 %3195, 1
  %3197 = icmp eq i32 %3194, 0
  br i1 %3197, label %3230, label %3198

3198:                                             ; preds = %3192
  %3199 = sub nuw nsw i32 %3195, %3196
  br label %3200

3200:                                             ; preds = %3200, %3198
  %3201 = phi i32* [ %3189, %3198 ], [ %3226, %3200 ]
  %3202 = phi i32* [ %3186, %3198 ], [ %3227, %3200 ]
  %3203 = phi i32 [ %3199, %3198 ], [ %3228, %3200 ]
  %3204 = bitcast i32* %3202 to <2 x i64>*
  %3205 = bitcast i32* %3201 to <2 x i64>*
  %3206 = load <2 x i64>, <2 x i64>* %3205, align 1
  %3207 = bitcast <2 x i64> %3206 to <8 x i16>
  %3208 = shufflevector <8 x i16> %3207, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3209 = shufflevector <8 x i16> %3208, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3210 = bitcast <8 x i16> %3209 to <2 x i64>
  %3211 = and <2 x i64> %3210, <i64 71777214294589695, i64 71777214294589695>
  %3212 = and <2 x i64> %3206, <i64 -71777214294589696, i64 -71777214294589696>
  %3213 = or <2 x i64> %3211, %3212
  store <2 x i64> %3213, <2 x i64>* %3204, align 1
  %3214 = getelementptr inbounds i32, i32* %3201, i64 4
  %3215 = getelementptr inbounds i32, i32* %3202, i64 4
  %3216 = bitcast i32* %3215 to <2 x i64>*
  %3217 = bitcast i32* %3214 to <2 x i64>*
  %3218 = load <2 x i64>, <2 x i64>* %3217, align 1
  %3219 = bitcast <2 x i64> %3218 to <8 x i16>
  %3220 = shufflevector <8 x i16> %3219, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3221 = shufflevector <8 x i16> %3220, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3222 = bitcast <8 x i16> %3221 to <2 x i64>
  %3223 = and <2 x i64> %3222, <i64 71777214294589695, i64 71777214294589695>
  %3224 = and <2 x i64> %3218, <i64 -71777214294589696, i64 -71777214294589696>
  %3225 = or <2 x i64> %3223, %3224
  store <2 x i64> %3225, <2 x i64>* %3216, align 1
  %3226 = getelementptr inbounds i32, i32* %3201, i64 8
  %3227 = getelementptr inbounds i32, i32* %3202, i64 8
  %3228 = add i32 %3203, -2
  %3229 = icmp eq i32 %3228, 0
  br i1 %3229, label %3230, label %3200

3230:                                             ; preds = %3200, %3192
  %3231 = phi i32* [ undef, %3192 ], [ %3226, %3200 ]
  %3232 = phi i32* [ undef, %3192 ], [ %3227, %3200 ]
  %3233 = phi i32* [ %3189, %3192 ], [ %3226, %3200 ]
  %3234 = phi i32* [ %3186, %3192 ], [ %3227, %3200 ]
  %3235 = icmp eq i32 %3196, 0
  br i1 %3235, label %3249, label %3236

3236:                                             ; preds = %3230
  %3237 = bitcast i32* %3234 to <2 x i64>*
  %3238 = bitcast i32* %3233 to <2 x i64>*
  %3239 = load <2 x i64>, <2 x i64>* %3238, align 1
  %3240 = bitcast <2 x i64> %3239 to <8 x i16>
  %3241 = shufflevector <8 x i16> %3240, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3242 = shufflevector <8 x i16> %3241, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3243 = bitcast <8 x i16> %3242 to <2 x i64>
  %3244 = and <2 x i64> %3243, <i64 71777214294589695, i64 71777214294589695>
  %3245 = and <2 x i64> %3239, <i64 -71777214294589696, i64 -71777214294589696>
  %3246 = or <2 x i64> %3244, %3245
  store <2 x i64> %3246, <2 x i64>* %3237, align 1
  %3247 = getelementptr inbounds i32, i32* %3234, i64 4
  %3248 = getelementptr inbounds i32, i32* %3233, i64 4
  br label %3249

3249:                                             ; preds = %3236, %3230, %3181
  %3250 = phi i32* [ %3189, %3181 ], [ %3231, %3230 ], [ %3248, %3236 ]
  %3251 = phi i32* [ %3186, %3181 ], [ %3232, %3230 ], [ %3247, %3236 ]
  %3252 = sub i32 %3188, %3190
  %3253 = icmp eq i32 %3252, 0
  br i1 %3253, label %3336, label %3254

3254:                                             ; preds = %3249
  %3255 = zext i32 %3252 to i64
  %3256 = icmp ult i32 %3252, 8
  br i1 %3256, label %3293, label %3257

3257:                                             ; preds = %3254
  %3258 = getelementptr i32, i32* %3251, i64 %3255
  %3259 = getelementptr i32, i32* %3250, i64 %3255
  %3260 = icmp ult i32* %3251, %3259
  %3261 = icmp ult i32* %3250, %3258
  %3262 = and i1 %3260, %3261
  br i1 %3262, label %3293, label %3263

3263:                                             ; preds = %3257
  %3264 = and i64 %3255, 4294967288
  br label %3265

3265:                                             ; preds = %3265, %3263
  %3266 = phi i64 [ 0, %3263 ], [ %3289, %3265 ]
  %3267 = getelementptr inbounds i32, i32* %3250, i64 %3266
  %3268 = bitcast i32* %3267 to <4 x i32>*
  %3269 = load <4 x i32>, <4 x i32>* %3268, align 4, !alias.scope !355
  %3270 = getelementptr inbounds i32, i32* %3267, i64 4
  %3271 = bitcast i32* %3270 to <4 x i32>*
  %3272 = load <4 x i32>, <4 x i32>* %3271, align 4, !alias.scope !355
  %3273 = lshr <4 x i32> %3269, <i32 16, i32 16, i32 16, i32 16>
  %3274 = lshr <4 x i32> %3272, <i32 16, i32 16, i32 16, i32 16>
  %3275 = shl <4 x i32> %3269, <i32 16, i32 16, i32 16, i32 16>
  %3276 = shl <4 x i32> %3272, <i32 16, i32 16, i32 16, i32 16>
  %3277 = or <4 x i32> %3273, %3275
  %3278 = or <4 x i32> %3274, %3276
  %3279 = and <4 x i32> %3277, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3280 = and <4 x i32> %3278, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3281 = and <4 x i32> %3269, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3282 = and <4 x i32> %3272, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3283 = or <4 x i32> %3279, %3281
  %3284 = or <4 x i32> %3280, %3282
  %3285 = getelementptr inbounds i32, i32* %3251, i64 %3266
  %3286 = bitcast i32* %3285 to <4 x i32>*
  store <4 x i32> %3283, <4 x i32>* %3286, align 4, !alias.scope !358, !noalias !355
  %3287 = getelementptr inbounds i32, i32* %3285, i64 4
  %3288 = bitcast i32* %3287 to <4 x i32>*
  store <4 x i32> %3284, <4 x i32>* %3288, align 4, !alias.scope !358, !noalias !355
  %3289 = add i64 %3266, 8
  %3290 = icmp eq i64 %3289, %3264
  br i1 %3290, label %3291, label %3265, !llvm.loop !360

3291:                                             ; preds = %3265
  %3292 = icmp eq i64 %3264, %3255
  br i1 %3292, label %3336, label %3293

3293:                                             ; preds = %3291, %3257, %3254
  %3294 = phi i64 [ 0, %3257 ], [ 0, %3254 ], [ %3264, %3291 ]
  %3295 = xor i64 %3294, -1
  %3296 = and i64 %3255, 1
  %3297 = icmp eq i64 %3296, 0
  br i1 %3297, label %3309, label %3298

3298:                                             ; preds = %3293
  %3299 = getelementptr inbounds i32, i32* %3250, i64 %3294
  %3300 = load i32, i32* %3299, align 4
  %3301 = lshr i32 %3300, 16
  %3302 = shl i32 %3300, 16
  %3303 = or i32 %3301, %3302
  %3304 = and i32 %3303, 16711935
  %3305 = and i32 %3300, -16711936
  %3306 = or i32 %3304, %3305
  %3307 = getelementptr inbounds i32, i32* %3251, i64 %3294
  store i32 %3306, i32* %3307, align 4
  %3308 = or i64 %3294, 1
  br label %3309

3309:                                             ; preds = %3298, %3293
  %3310 = phi i64 [ %3308, %3298 ], [ %3294, %3293 ]
  %3311 = sub nsw i64 0, %3255
  %3312 = icmp eq i64 %3295, %3311
  br i1 %3312, label %3336, label %3313

3313:                                             ; preds = %3309, %3313
  %3314 = phi i64 [ %3334, %3313 ], [ %3310, %3309 ]
  %3315 = getelementptr inbounds i32, i32* %3250, i64 %3314
  %3316 = load i32, i32* %3315, align 4
  %3317 = lshr i32 %3316, 16
  %3318 = shl i32 %3316, 16
  %3319 = or i32 %3317, %3318
  %3320 = and i32 %3319, 16711935
  %3321 = and i32 %3316, -16711936
  %3322 = or i32 %3320, %3321
  %3323 = getelementptr inbounds i32, i32* %3251, i64 %3314
  store i32 %3322, i32* %3323, align 4
  %3324 = add nuw nsw i64 %3314, 1
  %3325 = getelementptr inbounds i32, i32* %3250, i64 %3324
  %3326 = load i32, i32* %3325, align 4
  %3327 = lshr i32 %3326, 16
  %3328 = shl i32 %3326, 16
  %3329 = or i32 %3327, %3328
  %3330 = and i32 %3329, 16711935
  %3331 = and i32 %3326, -16711936
  %3332 = or i32 %3330, %3331
  %3333 = getelementptr inbounds i32, i32* %3251, i64 %3324
  store i32 %3332, i32* %3333, align 4
  %3334 = add nuw nsw i64 %3314, 2
  %3335 = icmp eq i64 %3334, %3255
  br i1 %3335, label %3336, label %3313, !llvm.loop !361

3336:                                             ; preds = %3309, %3313, %3291, %3249
  %3337 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3123, align 8
  %3338 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3337, i64 0, i32 1, i32 0
  %3339 = load i32, i32* %3338, align 4
  %3340 = icmp eq i32 %3339, 0
  br i1 %3340, label %3396, label %3341

3341:                                             ; preds = %3336
  %3342 = load i8*, i8** %3154, align 8
  %3343 = add i32 %3339, -1
  %3344 = and i32 %3339, 3
  %3345 = icmp ult i32 %3343, 3
  br i1 %3345, label %3378, label %3346

3346:                                             ; preds = %3341
  %3347 = sub i32 %3339, %3344
  br label %3348

3348:                                             ; preds = %3348, %3346
  %3349 = phi i8* [ %3342, %3346 ], [ %3374, %3348 ]
  %3350 = phi i8* [ %3184, %3346 ], [ %3375, %3348 ]
  %3351 = phi i32 [ %3347, %3346 ], [ %3376, %3348 ]
  %3352 = load i8, i8* %3349, align 1
  store i8 %3352, i8* %3350, align 1
  %3353 = getelementptr inbounds i8, i8* %3349, i64 3
  %3354 = load i8, i8* %3353, align 1
  %3355 = getelementptr inbounds i8, i8* %3350, i64 1
  store i8 %3354, i8* %3355, align 1
  %3356 = getelementptr inbounds i8, i8* %3349, i64 4
  %3357 = getelementptr inbounds i8, i8* %3350, i64 2
  %3358 = load i8, i8* %3356, align 1
  store i8 %3358, i8* %3357, align 1
  %3359 = getelementptr inbounds i8, i8* %3349, i64 7
  %3360 = load i8, i8* %3359, align 1
  %3361 = getelementptr inbounds i8, i8* %3350, i64 3
  store i8 %3360, i8* %3361, align 1
  %3362 = getelementptr inbounds i8, i8* %3349, i64 8
  %3363 = getelementptr inbounds i8, i8* %3350, i64 4
  %3364 = load i8, i8* %3362, align 1
  store i8 %3364, i8* %3363, align 1
  %3365 = getelementptr inbounds i8, i8* %3349, i64 11
  %3366 = load i8, i8* %3365, align 1
  %3367 = getelementptr inbounds i8, i8* %3350, i64 5
  store i8 %3366, i8* %3367, align 1
  %3368 = getelementptr inbounds i8, i8* %3349, i64 12
  %3369 = getelementptr inbounds i8, i8* %3350, i64 6
  %3370 = load i8, i8* %3368, align 1
  store i8 %3370, i8* %3369, align 1
  %3371 = getelementptr inbounds i8, i8* %3349, i64 15
  %3372 = load i8, i8* %3371, align 1
  %3373 = getelementptr inbounds i8, i8* %3350, i64 7
  store i8 %3372, i8* %3373, align 1
  %3374 = getelementptr inbounds i8, i8* %3349, i64 16
  %3375 = getelementptr inbounds i8, i8* %3350, i64 8
  %3376 = add i32 %3351, -4
  %3377 = icmp eq i32 %3376, 0
  br i1 %3377, label %3378, label %3348

3378:                                             ; preds = %3348, %3341
  %3379 = phi i8* [ %3342, %3341 ], [ %3374, %3348 ]
  %3380 = phi i8* [ %3184, %3341 ], [ %3375, %3348 ]
  %3381 = icmp eq i32 %3344, 0
  br i1 %3381, label %3394, label %3382

3382:                                             ; preds = %3378, %3382
  %3383 = phi i8* [ %3390, %3382 ], [ %3379, %3378 ]
  %3384 = phi i8* [ %3391, %3382 ], [ %3380, %3378 ]
  %3385 = phi i32 [ %3392, %3382 ], [ %3344, %3378 ]
  %3386 = load i8, i8* %3383, align 1
  store i8 %3386, i8* %3384, align 1
  %3387 = getelementptr inbounds i8, i8* %3383, i64 3
  %3388 = load i8, i8* %3387, align 1
  %3389 = getelementptr inbounds i8, i8* %3384, i64 1
  store i8 %3388, i8* %3389, align 1
  %3390 = getelementptr inbounds i8, i8* %3383, i64 4
  %3391 = getelementptr inbounds i8, i8* %3384, i64 2
  %3392 = add i32 %3385, -1
  %3393 = icmp eq i32 %3392, 0
  br i1 %3393, label %3394, label %3382, !llvm.loop !362

3394:                                             ; preds = %3382, %3378
  %3395 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3123, align 8
  br label %3396

3396:                                             ; preds = %3394, %3336
  %3397 = phi %"class.blink::IntRect"* [ %3395, %3394 ], [ %3337, %3336 ]
  %3398 = getelementptr inbounds i8, i8* %3185, i64 %3117
  %3399 = getelementptr inbounds i8, i8* %3184, i64 %3120
  %3400 = add nuw nsw i32 %3183, 1
  %3401 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3397, i64 0, i32 1, i32 1
  %3402 = load i32, i32* %3401, align 4
  %3403 = icmp slt i32 %3400, %3402
  br i1 %3403, label %3181, label %3166

3404:                                             ; preds = %3168, %3148
  %3405 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3405, align 4
  br label %15491

3406:                                             ; preds = %3113
  %3407 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3408 = load i32, i32* %3407, align 8
  %3409 = sext i32 %3408 to i64
  %3410 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3411 = load i32, i32* %3410, align 8
  %3412 = sext i32 %3411 to i64
  %3413 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3414 = load i8*, i8** %3413, align 8
  %3415 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3416 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3415, align 8
  %3417 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3416, i64 0, i32 0, i32 1
  %3418 = load i32, i32* %3417, align 4
  %3419 = mul nsw i32 %3418, %3408
  %3420 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3421 = load i32, i32* %3420, align 4
  %3422 = add nsw i32 %3419, %3421
  %3423 = sext i32 %3422 to i64
  %3424 = getelementptr inbounds i8, i8* %3414, i64 %3423
  %3425 = icmp slt i32 %3411, 0
  %3426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3427 = load i32, i32* %3426, align 8
  %3428 = icmp sgt i32 %3427, 1
  %3429 = and i1 %3425, %3428
  br i1 %3429, label %3430, label %3440

3430:                                             ; preds = %3406
  %3431 = add nsw i32 %3427, -1
  %3432 = sext i32 %3431 to i64
  %3433 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3434 = load i32, i32* %3433, align 4
  %3435 = sext i32 %3434 to i64
  %3436 = mul nsw i64 %3409, %3432
  %3437 = mul i64 %3436, %3435
  %3438 = sub i64 0, %3437
  %3439 = getelementptr inbounds i8, i8* %3424, i64 %3438
  br label %3442

3440:                                             ; preds = %3406
  %3441 = icmp sgt i32 %3427, 0
  br i1 %3441, label %3442, label %3721

3442:                                             ; preds = %3440, %3430
  %3443 = phi i8* [ %3439, %3430 ], [ %3424, %3440 ]
  %3444 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3445 = load i8*, i8** %3444, align 8
  %3446 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3447 = bitcast i8** %3446 to i32**
  %3448 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3449

3449:                                             ; preds = %3460, %3442
  %3450 = phi i32 [ %3427, %3442 ], [ %3461, %3460 ]
  %3451 = phi %"class.blink::IntRect"* [ %3416, %3442 ], [ %3462, %3460 ]
  %3452 = phi i32 [ 0, %3442 ], [ %3471, %3460 ]
  %3453 = phi i8* [ %3445, %3442 ], [ %3464, %3460 ]
  %3454 = phi i8* [ %3443, %3442 ], [ %3470, %3460 ]
  %3455 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3451, i64 0, i32 1, i32 1
  %3456 = load i32, i32* %3455, align 4
  %3457 = icmp sgt i32 %3456, 0
  br i1 %3457, label %3473, label %3460

3458:                                             ; preds = %3712
  %3459 = load i32, i32* %3426, align 8
  br label %3460

3460:                                             ; preds = %3458, %3449
  %3461 = phi i32 [ %3450, %3449 ], [ %3459, %3458 ]
  %3462 = phi %"class.blink::IntRect"* [ %3451, %3449 ], [ %3713, %3458 ]
  %3463 = phi i8* [ %3454, %3449 ], [ %3714, %3458 ]
  %3464 = phi i8* [ %3453, %3449 ], [ %3715, %3458 ]
  %3465 = phi i32 [ %3456, %3449 ], [ %3718, %3458 ]
  %3466 = load i32, i32* %3448, align 4
  %3467 = sub nsw i32 %3466, %3465
  %3468 = sext i32 %3467 to i64
  %3469 = mul nsw i64 %3468, %3409
  %3470 = getelementptr inbounds i8, i8* %3463, i64 %3469
  %3471 = add nuw nsw i32 %3452, 1
  %3472 = icmp slt i32 %3471, %3461
  br i1 %3472, label %3449, label %3721

3473:                                             ; preds = %3449, %3712
  %3474 = phi i64 [ %3720, %3712 ], [ 0, %3449 ]
  %3475 = phi %"class.blink::IntRect"* [ %3713, %3712 ], [ %3451, %3449 ]
  %3476 = phi i32 [ %3716, %3712 ], [ 0, %3449 ]
  %3477 = phi i8* [ %3715, %3712 ], [ %3453, %3449 ]
  %3478 = phi i8* [ %3714, %3712 ], [ %3454, %3449 ]
  %3479 = mul i64 %3474, %3412
  %3480 = getelementptr i8, i8* %3453, i64 %3479
  %3481 = add i64 %3479, 2
  %3482 = getelementptr i8, i8* %3453, i64 %3481
  %3483 = load i32*, i32** %3447, align 8
  %3484 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3475, i64 0, i32 1, i32 0
  %3485 = load i32, i32* %3484, align 4
  %3486 = bitcast i8* %3478 to i32*
  %3487 = and i32 %3485, -4
  %3488 = icmp eq i32 %3487, 0
  br i1 %3488, label %3546, label %3489

3489:                                             ; preds = %3473
  %3490 = add i32 %3487, -1
  %3491 = lshr i32 %3490, 2
  %3492 = add nuw nsw i32 %3491, 1
  %3493 = and i32 %3492, 1
  %3494 = icmp eq i32 %3491, 0
  br i1 %3494, label %3527, label %3495

3495:                                             ; preds = %3489
  %3496 = sub nuw nsw i32 %3492, %3493
  br label %3497

3497:                                             ; preds = %3497, %3495
  %3498 = phi i32* [ %3486, %3495 ], [ %3523, %3497 ]
  %3499 = phi i32* [ %3483, %3495 ], [ %3524, %3497 ]
  %3500 = phi i32 [ %3496, %3495 ], [ %3525, %3497 ]
  %3501 = bitcast i32* %3499 to <2 x i64>*
  %3502 = bitcast i32* %3498 to <2 x i64>*
  %3503 = load <2 x i64>, <2 x i64>* %3502, align 1
  %3504 = bitcast <2 x i64> %3503 to <8 x i16>
  %3505 = shufflevector <8 x i16> %3504, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3506 = shufflevector <8 x i16> %3505, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3507 = bitcast <8 x i16> %3506 to <2 x i64>
  %3508 = and <2 x i64> %3507, <i64 71777214294589695, i64 71777214294589695>
  %3509 = and <2 x i64> %3503, <i64 -71777214294589696, i64 -71777214294589696>
  %3510 = or <2 x i64> %3508, %3509
  store <2 x i64> %3510, <2 x i64>* %3501, align 1
  %3511 = getelementptr inbounds i32, i32* %3498, i64 4
  %3512 = getelementptr inbounds i32, i32* %3499, i64 4
  %3513 = bitcast i32* %3512 to <2 x i64>*
  %3514 = bitcast i32* %3511 to <2 x i64>*
  %3515 = load <2 x i64>, <2 x i64>* %3514, align 1
  %3516 = bitcast <2 x i64> %3515 to <8 x i16>
  %3517 = shufflevector <8 x i16> %3516, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3518 = shufflevector <8 x i16> %3517, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3519 = bitcast <8 x i16> %3518 to <2 x i64>
  %3520 = and <2 x i64> %3519, <i64 71777214294589695, i64 71777214294589695>
  %3521 = and <2 x i64> %3515, <i64 -71777214294589696, i64 -71777214294589696>
  %3522 = or <2 x i64> %3520, %3521
  store <2 x i64> %3522, <2 x i64>* %3513, align 1
  %3523 = getelementptr inbounds i32, i32* %3498, i64 8
  %3524 = getelementptr inbounds i32, i32* %3499, i64 8
  %3525 = add i32 %3500, -2
  %3526 = icmp eq i32 %3525, 0
  br i1 %3526, label %3527, label %3497

3527:                                             ; preds = %3497, %3489
  %3528 = phi i32* [ undef, %3489 ], [ %3523, %3497 ]
  %3529 = phi i32* [ undef, %3489 ], [ %3524, %3497 ]
  %3530 = phi i32* [ %3486, %3489 ], [ %3523, %3497 ]
  %3531 = phi i32* [ %3483, %3489 ], [ %3524, %3497 ]
  %3532 = icmp eq i32 %3493, 0
  br i1 %3532, label %3546, label %3533

3533:                                             ; preds = %3527
  %3534 = bitcast i32* %3531 to <2 x i64>*
  %3535 = bitcast i32* %3530 to <2 x i64>*
  %3536 = load <2 x i64>, <2 x i64>* %3535, align 1
  %3537 = bitcast <2 x i64> %3536 to <8 x i16>
  %3538 = shufflevector <8 x i16> %3537, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3539 = shufflevector <8 x i16> %3538, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3540 = bitcast <8 x i16> %3539 to <2 x i64>
  %3541 = and <2 x i64> %3540, <i64 71777214294589695, i64 71777214294589695>
  %3542 = and <2 x i64> %3536, <i64 -71777214294589696, i64 -71777214294589696>
  %3543 = or <2 x i64> %3541, %3542
  store <2 x i64> %3543, <2 x i64>* %3534, align 1
  %3544 = getelementptr inbounds i32, i32* %3531, i64 4
  %3545 = getelementptr inbounds i32, i32* %3530, i64 4
  br label %3546

3546:                                             ; preds = %3533, %3527, %3473
  %3547 = phi i32* [ %3486, %3473 ], [ %3528, %3527 ], [ %3545, %3533 ]
  %3548 = phi i32* [ %3483, %3473 ], [ %3529, %3527 ], [ %3544, %3533 ]
  %3549 = sub i32 %3485, %3487
  %3550 = icmp eq i32 %3549, 0
  br i1 %3550, label %3633, label %3551

3551:                                             ; preds = %3546
  %3552 = zext i32 %3549 to i64
  %3553 = icmp ult i32 %3549, 8
  br i1 %3553, label %3590, label %3554

3554:                                             ; preds = %3551
  %3555 = getelementptr i32, i32* %3548, i64 %3552
  %3556 = getelementptr i32, i32* %3547, i64 %3552
  %3557 = icmp ult i32* %3548, %3556
  %3558 = icmp ult i32* %3547, %3555
  %3559 = and i1 %3557, %3558
  br i1 %3559, label %3590, label %3560

3560:                                             ; preds = %3554
  %3561 = and i64 %3552, 4294967288
  br label %3562

3562:                                             ; preds = %3562, %3560
  %3563 = phi i64 [ 0, %3560 ], [ %3586, %3562 ]
  %3564 = getelementptr inbounds i32, i32* %3547, i64 %3563
  %3565 = bitcast i32* %3564 to <4 x i32>*
  %3566 = load <4 x i32>, <4 x i32>* %3565, align 4, !alias.scope !363
  %3567 = getelementptr inbounds i32, i32* %3564, i64 4
  %3568 = bitcast i32* %3567 to <4 x i32>*
  %3569 = load <4 x i32>, <4 x i32>* %3568, align 4, !alias.scope !363
  %3570 = lshr <4 x i32> %3566, <i32 16, i32 16, i32 16, i32 16>
  %3571 = lshr <4 x i32> %3569, <i32 16, i32 16, i32 16, i32 16>
  %3572 = shl <4 x i32> %3566, <i32 16, i32 16, i32 16, i32 16>
  %3573 = shl <4 x i32> %3569, <i32 16, i32 16, i32 16, i32 16>
  %3574 = or <4 x i32> %3570, %3572
  %3575 = or <4 x i32> %3571, %3573
  %3576 = and <4 x i32> %3574, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3577 = and <4 x i32> %3575, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3578 = and <4 x i32> %3566, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3579 = and <4 x i32> %3569, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3580 = or <4 x i32> %3576, %3578
  %3581 = or <4 x i32> %3577, %3579
  %3582 = getelementptr inbounds i32, i32* %3548, i64 %3563
  %3583 = bitcast i32* %3582 to <4 x i32>*
  store <4 x i32> %3580, <4 x i32>* %3583, align 4, !alias.scope !366, !noalias !363
  %3584 = getelementptr inbounds i32, i32* %3582, i64 4
  %3585 = bitcast i32* %3584 to <4 x i32>*
  store <4 x i32> %3581, <4 x i32>* %3585, align 4, !alias.scope !366, !noalias !363
  %3586 = add i64 %3563, 8
  %3587 = icmp eq i64 %3586, %3561
  br i1 %3587, label %3588, label %3562, !llvm.loop !368

3588:                                             ; preds = %3562
  %3589 = icmp eq i64 %3561, %3552
  br i1 %3589, label %3633, label %3590

3590:                                             ; preds = %3588, %3554, %3551
  %3591 = phi i64 [ 0, %3554 ], [ 0, %3551 ], [ %3561, %3588 ]
  %3592 = xor i64 %3591, -1
  %3593 = and i64 %3552, 1
  %3594 = icmp eq i64 %3593, 0
  br i1 %3594, label %3606, label %3595

3595:                                             ; preds = %3590
  %3596 = getelementptr inbounds i32, i32* %3547, i64 %3591
  %3597 = load i32, i32* %3596, align 4
  %3598 = lshr i32 %3597, 16
  %3599 = shl i32 %3597, 16
  %3600 = or i32 %3598, %3599
  %3601 = and i32 %3600, 16711935
  %3602 = and i32 %3597, -16711936
  %3603 = or i32 %3601, %3602
  %3604 = getelementptr inbounds i32, i32* %3548, i64 %3591
  store i32 %3603, i32* %3604, align 4
  %3605 = or i64 %3591, 1
  br label %3606

3606:                                             ; preds = %3595, %3590
  %3607 = phi i64 [ %3605, %3595 ], [ %3591, %3590 ]
  %3608 = sub nsw i64 0, %3552
  %3609 = icmp eq i64 %3592, %3608
  br i1 %3609, label %3633, label %3610

3610:                                             ; preds = %3606, %3610
  %3611 = phi i64 [ %3631, %3610 ], [ %3607, %3606 ]
  %3612 = getelementptr inbounds i32, i32* %3547, i64 %3611
  %3613 = load i32, i32* %3612, align 4
  %3614 = lshr i32 %3613, 16
  %3615 = shl i32 %3613, 16
  %3616 = or i32 %3614, %3615
  %3617 = and i32 %3616, 16711935
  %3618 = and i32 %3613, -16711936
  %3619 = or i32 %3617, %3618
  %3620 = getelementptr inbounds i32, i32* %3548, i64 %3611
  store i32 %3619, i32* %3620, align 4
  %3621 = add nuw nsw i64 %3611, 1
  %3622 = getelementptr inbounds i32, i32* %3547, i64 %3621
  %3623 = load i32, i32* %3622, align 4
  %3624 = lshr i32 %3623, 16
  %3625 = shl i32 %3623, 16
  %3626 = or i32 %3624, %3625
  %3627 = and i32 %3626, 16711935
  %3628 = and i32 %3623, -16711936
  %3629 = or i32 %3627, %3628
  %3630 = getelementptr inbounds i32, i32* %3548, i64 %3621
  store i32 %3629, i32* %3630, align 4
  %3631 = add nuw nsw i64 %3611, 2
  %3632 = icmp eq i64 %3631, %3552
  br i1 %3632, label %3633, label %3610, !llvm.loop !369

3633:                                             ; preds = %3606, %3610, %3588, %3546
  %3634 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3415, align 8
  %3635 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3634, i64 0, i32 1, i32 0
  %3636 = load i32, i32* %3635, align 4
  %3637 = icmp eq i32 %3636, 0
  br i1 %3637, label %3712, label %3638

3638:                                             ; preds = %3633
  %3639 = load i8*, i8** %3446, align 8
  %3640 = add i32 %3636, -1
  %3641 = zext i32 %3640 to i64
  %3642 = add nuw nsw i64 %3641, 1
  %3643 = icmp ult i64 %3642, 17
  br i1 %3643, label %3688, label %3644

3644:                                             ; preds = %3638
  %3645 = add i32 %3636, -1
  %3646 = zext i32 %3645 to i64
  %3647 = shl nuw nsw i64 %3646, 1
  %3648 = getelementptr i8, i8* %3482, i64 %3647
  %3649 = getelementptr i8, i8* %3639, i64 4
  %3650 = shl nuw nsw i64 %3646, 2
  %3651 = getelementptr i8, i8* %3649, i64 %3650
  %3652 = icmp ult i8* %3480, %3651
  %3653 = icmp ult i8* %3639, %3648
  %3654 = and i1 %3652, %3653
  br i1 %3654, label %3688, label %3655

3655:                                             ; preds = %3644
  %3656 = and i64 %3642, 15
  %3657 = icmp eq i64 %3656, 0
  %3658 = select i1 %3657, i64 16, i64 %3656
  %3659 = sub nsw i64 %3642, %3658
  %3660 = shl nsw i64 %3659, 2
  %3661 = getelementptr i8, i8* %3639, i64 %3660
  %3662 = shl nsw i64 %3659, 1
  %3663 = getelementptr i8, i8* %3477, i64 %3662
  %3664 = trunc i64 %3659 to i32
  br label %3665

3665:                                             ; preds = %3665, %3655
  %3666 = phi i64 [ 0, %3655 ], [ %3686, %3665 ]
  %3667 = shl i64 %3666, 2
  %3668 = getelementptr i8, i8* %3639, i64 %3667
  %3669 = shl i64 %3666, 1
  %3670 = getelementptr inbounds i8, i8* %3668, i64 3
  %3671 = bitcast i8* %3670 to <64 x i8>*
  %3672 = load <64 x i8>, <64 x i8>* %3671, align 1
  %3673 = shufflevector <64 x i8> %3672, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %3674 = uitofp <16 x i8> %3673 to <16 x float>
  %3675 = fdiv <16 x float> %3674, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3676 = bitcast i8* %3668 to <64 x i8>*
  %3677 = load <64 x i8>, <64 x i8>* %3676, align 1
  %3678 = shufflevector <64 x i8> %3677, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %3679 = shufflevector <64 x i8> %3677, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %3680 = uitofp <16 x i8> %3678 to <16 x float>
  %3681 = fmul <16 x float> %3675, %3680
  %3682 = fptoui <16 x float> %3681 to <16 x i8>
  %3683 = getelementptr inbounds i8, i8* %3477, i64 %3669
  %3684 = bitcast i8* %3683 to <32 x i8>*
  %3685 = shufflevector <16 x i8> %3682, <16 x i8> %3679, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %3685, <32 x i8>* %3684, align 1
  %3686 = add i64 %3666, 16
  %3687 = icmp eq i64 %3686, %3659
  br i1 %3687, label %3688, label %3665, !llvm.loop !370

3688:                                             ; preds = %3665, %3644, %3638
  %3689 = phi i8* [ %3639, %3644 ], [ %3639, %3638 ], [ %3661, %3665 ]
  %3690 = phi i8* [ %3477, %3644 ], [ %3477, %3638 ], [ %3663, %3665 ]
  %3691 = phi i32 [ 0, %3644 ], [ 0, %3638 ], [ %3664, %3665 ]
  br label %3692

3692:                                             ; preds = %3688, %3692
  %3693 = phi i8* [ %3706, %3692 ], [ %3689, %3688 ]
  %3694 = phi i8* [ %3707, %3692 ], [ %3690, %3688 ]
  %3695 = phi i32 [ %3708, %3692 ], [ %3691, %3688 ]
  %3696 = getelementptr inbounds i8, i8* %3693, i64 3
  %3697 = load i8, i8* %3696, align 1
  %3698 = uitofp i8 %3697 to float
  %3699 = fdiv float %3698, 2.550000e+02
  %3700 = load i8, i8* %3693, align 1
  %3701 = uitofp i8 %3700 to float
  %3702 = fmul float %3699, %3701
  %3703 = fptoui float %3702 to i8
  store i8 %3703, i8* %3694, align 1
  %3704 = load i8, i8* %3696, align 1
  %3705 = getelementptr inbounds i8, i8* %3694, i64 1
  store i8 %3704, i8* %3705, align 1
  %3706 = getelementptr inbounds i8, i8* %3693, i64 4
  %3707 = getelementptr inbounds i8, i8* %3694, i64 2
  %3708 = add nuw i32 %3695, 1
  %3709 = icmp eq i32 %3708, %3636
  br i1 %3709, label %3710, label %3692, !llvm.loop !371

3710:                                             ; preds = %3692
  %3711 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3415, align 8
  br label %3712

3712:                                             ; preds = %3710, %3633
  %3713 = phi %"class.blink::IntRect"* [ %3711, %3710 ], [ %3634, %3633 ]
  %3714 = getelementptr inbounds i8, i8* %3478, i64 %3409
  %3715 = getelementptr inbounds i8, i8* %3477, i64 %3412
  %3716 = add nuw nsw i32 %3476, 1
  %3717 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3713, i64 0, i32 1, i32 1
  %3718 = load i32, i32* %3717, align 4
  %3719 = icmp slt i32 %3716, %3718
  %3720 = add i64 %3474, 1
  br i1 %3719, label %3473, label %3458

3721:                                             ; preds = %3460, %3440
  %3722 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3722, align 4
  br label %15491

3723:                                             ; preds = %3113
  %3724 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3725 = load i32, i32* %3724, align 8
  %3726 = sext i32 %3725 to i64
  %3727 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3728 = load i32, i32* %3727, align 8
  %3729 = sext i32 %3728 to i64
  %3730 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3731 = load i8*, i8** %3730, align 8
  %3732 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3733 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3732, align 8
  %3734 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3733, i64 0, i32 0, i32 1
  %3735 = load i32, i32* %3734, align 4
  %3736 = mul nsw i32 %3735, %3725
  %3737 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3738 = load i32, i32* %3737, align 4
  %3739 = add nsw i32 %3736, %3738
  %3740 = sext i32 %3739 to i64
  %3741 = getelementptr inbounds i8, i8* %3731, i64 %3740
  %3742 = icmp slt i32 %3728, 0
  %3743 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3744 = load i32, i32* %3743, align 8
  %3745 = icmp sgt i32 %3744, 1
  %3746 = and i1 %3742, %3745
  br i1 %3746, label %3747, label %3757

3747:                                             ; preds = %3723
  %3748 = add nsw i32 %3744, -1
  %3749 = sext i32 %3748 to i64
  %3750 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3751 = load i32, i32* %3750, align 4
  %3752 = sext i32 %3751 to i64
  %3753 = mul nsw i64 %3726, %3749
  %3754 = mul i64 %3753, %3752
  %3755 = sub i64 0, %3754
  %3756 = getelementptr inbounds i8, i8* %3741, i64 %3755
  br label %3759

3757:                                             ; preds = %3723
  %3758 = icmp sgt i32 %3744, 0
  br i1 %3758, label %3759, label %4059

3759:                                             ; preds = %3757, %3747
  %3760 = phi i8* [ %3756, %3747 ], [ %3741, %3757 ]
  %3761 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3762 = load i8*, i8** %3761, align 8
  %3763 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3764 = bitcast i8** %3763 to i32**
  %3765 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3766

3766:                                             ; preds = %3777, %3759
  %3767 = phi i32 [ %3744, %3759 ], [ %3778, %3777 ]
  %3768 = phi %"class.blink::IntRect"* [ %3733, %3759 ], [ %3779, %3777 ]
  %3769 = phi i32 [ 0, %3759 ], [ %3788, %3777 ]
  %3770 = phi i8* [ %3762, %3759 ], [ %3781, %3777 ]
  %3771 = phi i8* [ %3760, %3759 ], [ %3787, %3777 ]
  %3772 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3768, i64 0, i32 1, i32 1
  %3773 = load i32, i32* %3772, align 4
  %3774 = icmp sgt i32 %3773, 0
  br i1 %3774, label %3790, label %3777

3775:                                             ; preds = %4051
  %3776 = load i32, i32* %3743, align 8
  br label %3777

3777:                                             ; preds = %3775, %3766
  %3778 = phi i32 [ %3767, %3766 ], [ %3776, %3775 ]
  %3779 = phi %"class.blink::IntRect"* [ %3768, %3766 ], [ %4055, %3775 ]
  %3780 = phi i8* [ %3771, %3766 ], [ %4052, %3775 ]
  %3781 = phi i8* [ %3770, %3766 ], [ %4053, %3775 ]
  %3782 = phi i32 [ %3773, %3766 ], [ %4057, %3775 ]
  %3783 = load i32, i32* %3765, align 4
  %3784 = sub nsw i32 %3783, %3782
  %3785 = sext i32 %3784 to i64
  %3786 = mul nsw i64 %3785, %3726
  %3787 = getelementptr inbounds i8, i8* %3780, i64 %3786
  %3788 = add nuw nsw i32 %3769, 1
  %3789 = icmp slt i32 %3788, %3778
  br i1 %3789, label %3766, label %4059

3790:                                             ; preds = %3766, %4051
  %3791 = phi %"class.blink::IntRect"* [ %4055, %4051 ], [ %3768, %3766 ]
  %3792 = phi i32 [ %4054, %4051 ], [ 0, %3766 ]
  %3793 = phi i8* [ %4053, %4051 ], [ %3770, %3766 ]
  %3794 = phi i8* [ %4052, %4051 ], [ %3771, %3766 ]
  %3795 = load i32*, i32** %3764, align 8
  %3796 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3791, i64 0, i32 1, i32 0
  %3797 = load i32, i32* %3796, align 4
  %3798 = bitcast i8* %3794 to i32*
  %3799 = and i32 %3797, -4
  %3800 = icmp eq i32 %3799, 0
  br i1 %3800, label %3858, label %3801

3801:                                             ; preds = %3790
  %3802 = add i32 %3799, -1
  %3803 = lshr i32 %3802, 2
  %3804 = add nuw nsw i32 %3803, 1
  %3805 = and i32 %3804, 1
  %3806 = icmp eq i32 %3803, 0
  br i1 %3806, label %3839, label %3807

3807:                                             ; preds = %3801
  %3808 = sub nuw nsw i32 %3804, %3805
  br label %3809

3809:                                             ; preds = %3809, %3807
  %3810 = phi i32* [ %3798, %3807 ], [ %3835, %3809 ]
  %3811 = phi i32* [ %3795, %3807 ], [ %3836, %3809 ]
  %3812 = phi i32 [ %3808, %3807 ], [ %3837, %3809 ]
  %3813 = bitcast i32* %3811 to <2 x i64>*
  %3814 = bitcast i32* %3810 to <2 x i64>*
  %3815 = load <2 x i64>, <2 x i64>* %3814, align 1
  %3816 = bitcast <2 x i64> %3815 to <8 x i16>
  %3817 = shufflevector <8 x i16> %3816, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3818 = shufflevector <8 x i16> %3817, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3819 = bitcast <8 x i16> %3818 to <2 x i64>
  %3820 = and <2 x i64> %3819, <i64 71777214294589695, i64 71777214294589695>
  %3821 = and <2 x i64> %3815, <i64 -71777214294589696, i64 -71777214294589696>
  %3822 = or <2 x i64> %3820, %3821
  store <2 x i64> %3822, <2 x i64>* %3813, align 1
  %3823 = getelementptr inbounds i32, i32* %3810, i64 4
  %3824 = getelementptr inbounds i32, i32* %3811, i64 4
  %3825 = bitcast i32* %3824 to <2 x i64>*
  %3826 = bitcast i32* %3823 to <2 x i64>*
  %3827 = load <2 x i64>, <2 x i64>* %3826, align 1
  %3828 = bitcast <2 x i64> %3827 to <8 x i16>
  %3829 = shufflevector <8 x i16> %3828, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3830 = shufflevector <8 x i16> %3829, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3831 = bitcast <8 x i16> %3830 to <2 x i64>
  %3832 = and <2 x i64> %3831, <i64 71777214294589695, i64 71777214294589695>
  %3833 = and <2 x i64> %3827, <i64 -71777214294589696, i64 -71777214294589696>
  %3834 = or <2 x i64> %3832, %3833
  store <2 x i64> %3834, <2 x i64>* %3825, align 1
  %3835 = getelementptr inbounds i32, i32* %3810, i64 8
  %3836 = getelementptr inbounds i32, i32* %3811, i64 8
  %3837 = add i32 %3812, -2
  %3838 = icmp eq i32 %3837, 0
  br i1 %3838, label %3839, label %3809

3839:                                             ; preds = %3809, %3801
  %3840 = phi i32* [ undef, %3801 ], [ %3835, %3809 ]
  %3841 = phi i32* [ undef, %3801 ], [ %3836, %3809 ]
  %3842 = phi i32* [ %3798, %3801 ], [ %3835, %3809 ]
  %3843 = phi i32* [ %3795, %3801 ], [ %3836, %3809 ]
  %3844 = icmp eq i32 %3805, 0
  br i1 %3844, label %3858, label %3845

3845:                                             ; preds = %3839
  %3846 = bitcast i32* %3843 to <2 x i64>*
  %3847 = bitcast i32* %3842 to <2 x i64>*
  %3848 = load <2 x i64>, <2 x i64>* %3847, align 1
  %3849 = bitcast <2 x i64> %3848 to <8 x i16>
  %3850 = shufflevector <8 x i16> %3849, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %3851 = shufflevector <8 x i16> %3850, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %3852 = bitcast <8 x i16> %3851 to <2 x i64>
  %3853 = and <2 x i64> %3852, <i64 71777214294589695, i64 71777214294589695>
  %3854 = and <2 x i64> %3848, <i64 -71777214294589696, i64 -71777214294589696>
  %3855 = or <2 x i64> %3853, %3854
  store <2 x i64> %3855, <2 x i64>* %3846, align 1
  %3856 = getelementptr inbounds i32, i32* %3843, i64 4
  %3857 = getelementptr inbounds i32, i32* %3842, i64 4
  br label %3858

3858:                                             ; preds = %3845, %3839, %3790
  %3859 = phi i32* [ %3798, %3790 ], [ %3840, %3839 ], [ %3857, %3845 ]
  %3860 = phi i32* [ %3795, %3790 ], [ %3841, %3839 ], [ %3856, %3845 ]
  %3861 = sub i32 %3797, %3799
  %3862 = icmp eq i32 %3861, 0
  br i1 %3862, label %3945, label %3863

3863:                                             ; preds = %3858
  %3864 = zext i32 %3861 to i64
  %3865 = icmp ult i32 %3861, 8
  br i1 %3865, label %3902, label %3866

3866:                                             ; preds = %3863
  %3867 = getelementptr i32, i32* %3860, i64 %3864
  %3868 = getelementptr i32, i32* %3859, i64 %3864
  %3869 = icmp ult i32* %3860, %3868
  %3870 = icmp ult i32* %3859, %3867
  %3871 = and i1 %3869, %3870
  br i1 %3871, label %3902, label %3872

3872:                                             ; preds = %3866
  %3873 = and i64 %3864, 4294967288
  br label %3874

3874:                                             ; preds = %3874, %3872
  %3875 = phi i64 [ 0, %3872 ], [ %3898, %3874 ]
  %3876 = getelementptr inbounds i32, i32* %3859, i64 %3875
  %3877 = bitcast i32* %3876 to <4 x i32>*
  %3878 = load <4 x i32>, <4 x i32>* %3877, align 4, !alias.scope !372
  %3879 = getelementptr inbounds i32, i32* %3876, i64 4
  %3880 = bitcast i32* %3879 to <4 x i32>*
  %3881 = load <4 x i32>, <4 x i32>* %3880, align 4, !alias.scope !372
  %3882 = lshr <4 x i32> %3878, <i32 16, i32 16, i32 16, i32 16>
  %3883 = lshr <4 x i32> %3881, <i32 16, i32 16, i32 16, i32 16>
  %3884 = shl <4 x i32> %3878, <i32 16, i32 16, i32 16, i32 16>
  %3885 = shl <4 x i32> %3881, <i32 16, i32 16, i32 16, i32 16>
  %3886 = or <4 x i32> %3882, %3884
  %3887 = or <4 x i32> %3883, %3885
  %3888 = and <4 x i32> %3886, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3889 = and <4 x i32> %3887, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %3890 = and <4 x i32> %3878, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3891 = and <4 x i32> %3881, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %3892 = or <4 x i32> %3888, %3890
  %3893 = or <4 x i32> %3889, %3891
  %3894 = getelementptr inbounds i32, i32* %3860, i64 %3875
  %3895 = bitcast i32* %3894 to <4 x i32>*
  store <4 x i32> %3892, <4 x i32>* %3895, align 4, !alias.scope !375, !noalias !372
  %3896 = getelementptr inbounds i32, i32* %3894, i64 4
  %3897 = bitcast i32* %3896 to <4 x i32>*
  store <4 x i32> %3893, <4 x i32>* %3897, align 4, !alias.scope !375, !noalias !372
  %3898 = add i64 %3875, 8
  %3899 = icmp eq i64 %3898, %3873
  br i1 %3899, label %3900, label %3874, !llvm.loop !377

3900:                                             ; preds = %3874
  %3901 = icmp eq i64 %3873, %3864
  br i1 %3901, label %3945, label %3902

3902:                                             ; preds = %3900, %3866, %3863
  %3903 = phi i64 [ 0, %3866 ], [ 0, %3863 ], [ %3873, %3900 ]
  %3904 = xor i64 %3903, -1
  %3905 = and i64 %3864, 1
  %3906 = icmp eq i64 %3905, 0
  br i1 %3906, label %3918, label %3907

3907:                                             ; preds = %3902
  %3908 = getelementptr inbounds i32, i32* %3859, i64 %3903
  %3909 = load i32, i32* %3908, align 4
  %3910 = lshr i32 %3909, 16
  %3911 = shl i32 %3909, 16
  %3912 = or i32 %3910, %3911
  %3913 = and i32 %3912, 16711935
  %3914 = and i32 %3909, -16711936
  %3915 = or i32 %3913, %3914
  %3916 = getelementptr inbounds i32, i32* %3860, i64 %3903
  store i32 %3915, i32* %3916, align 4
  %3917 = or i64 %3903, 1
  br label %3918

3918:                                             ; preds = %3907, %3902
  %3919 = phi i64 [ %3917, %3907 ], [ %3903, %3902 ]
  %3920 = sub nsw i64 0, %3864
  %3921 = icmp eq i64 %3904, %3920
  br i1 %3921, label %3945, label %3922

3922:                                             ; preds = %3918, %3922
  %3923 = phi i64 [ %3943, %3922 ], [ %3919, %3918 ]
  %3924 = getelementptr inbounds i32, i32* %3859, i64 %3923
  %3925 = load i32, i32* %3924, align 4
  %3926 = lshr i32 %3925, 16
  %3927 = shl i32 %3925, 16
  %3928 = or i32 %3926, %3927
  %3929 = and i32 %3928, 16711935
  %3930 = and i32 %3925, -16711936
  %3931 = or i32 %3929, %3930
  %3932 = getelementptr inbounds i32, i32* %3860, i64 %3923
  store i32 %3931, i32* %3932, align 4
  %3933 = add nuw nsw i64 %3923, 1
  %3934 = getelementptr inbounds i32, i32* %3859, i64 %3933
  %3935 = load i32, i32* %3934, align 4
  %3936 = lshr i32 %3935, 16
  %3937 = shl i32 %3935, 16
  %3938 = or i32 %3936, %3937
  %3939 = and i32 %3938, 16711935
  %3940 = and i32 %3935, -16711936
  %3941 = or i32 %3939, %3940
  %3942 = getelementptr inbounds i32, i32* %3860, i64 %3933
  store i32 %3941, i32* %3942, align 4
  %3943 = add nuw nsw i64 %3923, 2
  %3944 = icmp eq i64 %3943, %3864
  br i1 %3944, label %3945, label %3922, !llvm.loop !378

3945:                                             ; preds = %3918, %3922, %3900, %3858
  %3946 = load i8*, i8** %3763, align 8
  %3947 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3732, align 8
  %3948 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3947, i64 0, i32 1, i32 0
  %3949 = load i32, i32* %3948, align 4
  %3950 = and i32 %3949, -4
  %3951 = icmp eq i32 %3950, 0
  br i1 %3951, label %4024, label %3952

3952:                                             ; preds = %3945, %3952
  %3953 = phi i8* [ %4020, %3952 ], [ %3946, %3945 ]
  %3954 = phi i8* [ %4021, %3952 ], [ %3793, %3945 ]
  %3955 = phi i32 [ %4022, %3952 ], [ 0, %3945 ]
  %3956 = getelementptr inbounds i8, i8* %3953, i64 15
  %3957 = load i8, i8* %3956, align 1
  %3958 = icmp eq i8 %3957, 0
  %3959 = uitofp i8 %3957 to double
  %3960 = fptrunc double %3959 to float
  %3961 = select i1 %3958, float 2.550000e+02, float %3960
  %3962 = getelementptr inbounds i8, i8* %3953, i64 11
  %3963 = load i8, i8* %3962, align 1
  %3964 = icmp eq i8 %3963, 0
  %3965 = uitofp i8 %3963 to double
  %3966 = fptrunc double %3965 to float
  %3967 = select i1 %3964, float 2.550000e+02, float %3966
  %3968 = getelementptr inbounds i8, i8* %3953, i64 7
  %3969 = load i8, i8* %3968, align 1
  %3970 = icmp eq i8 %3969, 0
  %3971 = uitofp i8 %3969 to double
  %3972 = fptrunc double %3971 to float
  %3973 = select i1 %3970, float 2.550000e+02, float %3972
  %3974 = getelementptr inbounds i8, i8* %3953, i64 3
  %3975 = load i8, i8* %3974, align 1
  %3976 = icmp eq i8 %3975, 0
  %3977 = uitofp i8 %3975 to double
  %3978 = fptrunc double %3977 to float
  %3979 = select i1 %3976, float 2.550000e+02, float %3978
  %3980 = insertelement <4 x float> undef, float %3979, i32 0
  %3981 = insertelement <4 x float> %3980, float %3973, i32 1
  %3982 = insertelement <4 x float> %3981, float %3967, i32 2
  %3983 = insertelement <4 x float> %3982, float %3961, i32 3
  %3984 = getelementptr inbounds i8, i8* %3953, i64 12
  %3985 = load i8, i8* %3984, align 1
  %3986 = uitofp i8 %3985 to float
  %3987 = getelementptr inbounds i8, i8* %3953, i64 8
  %3988 = load i8, i8* %3987, align 1
  %3989 = uitofp i8 %3988 to float
  %3990 = getelementptr inbounds i8, i8* %3953, i64 4
  %3991 = load i8, i8* %3990, align 1
  %3992 = uitofp i8 %3991 to float
  %3993 = load i8, i8* %3953, align 1
  %3994 = uitofp i8 %3993 to float
  %3995 = insertelement <4 x float> undef, float %3994, i32 0
  %3996 = insertelement <4 x float> %3995, float %3992, i32 1
  %3997 = insertelement <4 x float> %3996, float %3989, i32 2
  %3998 = insertelement <4 x float> %3997, float %3986, i32 3
  %3999 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %3983
  %4000 = fmul <4 x float> %3999, %3998
  %4001 = extractelement <4 x float> %4000, i32 0
  %4002 = fptoui float %4001 to i8
  store i8 %4002, i8* %3954, align 1
  %4003 = load i8, i8* %3974, align 1
  %4004 = getelementptr inbounds i8, i8* %3954, i64 1
  store i8 %4003, i8* %4004, align 1
  %4005 = extractelement <4 x float> %4000, i32 1
  %4006 = fptoui float %4005 to i8
  %4007 = getelementptr inbounds i8, i8* %3954, i64 2
  store i8 %4006, i8* %4007, align 1
  %4008 = load i8, i8* %3968, align 1
  %4009 = getelementptr inbounds i8, i8* %3954, i64 3
  store i8 %4008, i8* %4009, align 1
  %4010 = extractelement <4 x float> %4000, i32 2
  %4011 = fptoui float %4010 to i8
  %4012 = getelementptr inbounds i8, i8* %3954, i64 4
  store i8 %4011, i8* %4012, align 1
  %4013 = load i8, i8* %3962, align 1
  %4014 = getelementptr inbounds i8, i8* %3954, i64 5
  store i8 %4013, i8* %4014, align 1
  %4015 = extractelement <4 x float> %4000, i32 3
  %4016 = fptoui float %4015 to i8
  %4017 = getelementptr inbounds i8, i8* %3954, i64 6
  store i8 %4016, i8* %4017, align 1
  %4018 = load i8, i8* %3956, align 1
  %4019 = getelementptr inbounds i8, i8* %3954, i64 7
  store i8 %4018, i8* %4019, align 1
  %4020 = getelementptr inbounds i8, i8* %3953, i64 16
  %4021 = getelementptr inbounds i8, i8* %3954, i64 8
  %4022 = add nuw i32 %3955, 4
  %4023 = icmp ult i32 %4022, %3950
  br i1 %4023, label %3952, label %4024

4024:                                             ; preds = %3952, %3945
  %4025 = phi i8* [ %3946, %3945 ], [ %4020, %3952 ]
  %4026 = phi i8* [ %3793, %3945 ], [ %4021, %3952 ]
  %4027 = sub i32 %3949, %3950
  %4028 = icmp eq i32 %4027, 0
  br i1 %4028, label %4051, label %4029

4029:                                             ; preds = %4024, %4039
  %4030 = phi i32 [ %4049, %4039 ], [ 0, %4024 ]
  %4031 = phi i8* [ %4048, %4039 ], [ %4026, %4024 ]
  %4032 = phi i8* [ %4047, %4039 ], [ %4025, %4024 ]
  %4033 = getelementptr inbounds i8, i8* %4032, i64 3
  %4034 = load i8, i8* %4033, align 1
  %4035 = icmp eq i8 %4034, 0
  br i1 %4035, label %4039, label %4036

4036:                                             ; preds = %4029
  %4037 = uitofp i8 %4034 to float
  %4038 = fdiv float 2.550000e+02, %4037
  br label %4039

4039:                                             ; preds = %4036, %4029
  %4040 = phi float [ %4038, %4036 ], [ 1.000000e+00, %4029 ]
  %4041 = load i8, i8* %4032, align 1
  %4042 = uitofp i8 %4041 to float
  %4043 = fmul float %4040, %4042
  %4044 = fptoui float %4043 to i8
  store i8 %4044, i8* %4031, align 1
  %4045 = load i8, i8* %4033, align 1
  %4046 = getelementptr inbounds i8, i8* %4031, i64 1
  store i8 %4045, i8* %4046, align 1
  %4047 = getelementptr inbounds i8, i8* %4032, i64 4
  %4048 = getelementptr inbounds i8, i8* %4031, i64 2
  %4049 = add nuw i32 %4030, 1
  %4050 = icmp eq i32 %4049, %4027
  br i1 %4050, label %4051, label %4029

4051:                                             ; preds = %4039, %4024
  %4052 = getelementptr inbounds i8, i8* %3794, i64 %3726
  %4053 = getelementptr inbounds i8, i8* %3793, i64 %3729
  %4054 = add nuw nsw i32 %3792, 1
  %4055 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3732, align 8
  %4056 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4055, i64 0, i32 1, i32 1
  %4057 = load i32, i32* %4056, align 4
  %4058 = icmp slt i32 %4054, %4057
  br i1 %4058, label %3790, label %3775

4059:                                             ; preds = %3777, %3757
  %4060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4060, align 4
  br label %15491

4061:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %4062
    i32 1, label %4225
    i32 2, label %4390
  ]

4062:                                             ; preds = %4061
  %4063 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4064 = load i32, i32* %4063, align 8
  %4065 = sext i32 %4064 to i64
  %4066 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4067 = load i32, i32* %4066, align 8
  %4068 = sdiv i32 %4067, 2
  %4069 = sext i32 %4068 to i64
  %4070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4071 = load i8*, i8** %4070, align 8
  %4072 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4073 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4072, align 8
  %4074 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4073, i64 0, i32 0, i32 1
  %4075 = load i32, i32* %4074, align 4
  %4076 = mul nsw i32 %4075, %4064
  %4077 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4078 = load i32, i32* %4077, align 4
  %4079 = add nsw i32 %4076, %4078
  %4080 = sext i32 %4079 to i64
  %4081 = getelementptr inbounds i8, i8* %4071, i64 %4080
  %4082 = icmp slt i32 %4067, 0
  %4083 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4084 = load i32, i32* %4083, align 8
  %4085 = icmp sgt i32 %4084, 1
  %4086 = and i1 %4082, %4085
  br i1 %4086, label %4087, label %4097

4087:                                             ; preds = %4062
  %4088 = add nsw i32 %4084, -1
  %4089 = sext i32 %4088 to i64
  %4090 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4091 = load i32, i32* %4090, align 4
  %4092 = sext i32 %4091 to i64
  %4093 = mul nsw i64 %4065, %4089
  %4094 = mul i64 %4093, %4092
  %4095 = sub i64 0, %4094
  %4096 = getelementptr inbounds i8, i8* %4081, i64 %4095
  br label %4099

4097:                                             ; preds = %4062
  %4098 = icmp sgt i32 %4084, 0
  br i1 %4098, label %4099, label %4223

4099:                                             ; preds = %4097, %4087
  %4100 = phi i8* [ %4096, %4087 ], [ %4081, %4097 ]
  %4101 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4102 = bitcast i8** %4101 to i16**
  %4103 = load i16*, i16** %4102, align 8
  %4104 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4105 = bitcast i8** %4104 to float**
  %4106 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4107

4107:                                             ; preds = %4119, %4099
  %4108 = phi i32 [ %4084, %4099 ], [ %4120, %4119 ]
  %4109 = phi %"class.blink::IntRect"* [ %4073, %4099 ], [ %4121, %4119 ]
  %4110 = phi %"class.blink::IntRect"* [ %4073, %4099 ], [ %4122, %4119 ]
  %4111 = phi i32 [ 0, %4099 ], [ %4131, %4119 ]
  %4112 = phi i16* [ %4103, %4099 ], [ %4124, %4119 ]
  %4113 = phi i8* [ %4100, %4099 ], [ %4130, %4119 ]
  %4114 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4110, i64 0, i32 1, i32 1
  %4115 = load i32, i32* %4114, align 4
  %4116 = icmp sgt i32 %4115, 0
  br i1 %4116, label %4133, label %4119

4117:                                             ; preds = %4215
  %4118 = load i32, i32* %4083, align 8
  br label %4119

4119:                                             ; preds = %4117, %4107
  %4120 = phi i32 [ %4108, %4107 ], [ %4118, %4117 ]
  %4121 = phi %"class.blink::IntRect"* [ %4109, %4107 ], [ %4216, %4117 ]
  %4122 = phi %"class.blink::IntRect"* [ %4110, %4107 ], [ %4216, %4117 ]
  %4123 = phi i8* [ %4113, %4107 ], [ %4217, %4117 ]
  %4124 = phi i16* [ %4112, %4107 ], [ %4218, %4117 ]
  %4125 = phi i32 [ %4115, %4107 ], [ %4221, %4117 ]
  %4126 = load i32, i32* %4106, align 4
  %4127 = sub nsw i32 %4126, %4125
  %4128 = sext i32 %4127 to i64
  %4129 = mul nsw i64 %4128, %4065
  %4130 = getelementptr inbounds i8, i8* %4123, i64 %4129
  %4131 = add nuw nsw i32 %4111, 1
  %4132 = icmp slt i32 %4131, %4120
  br i1 %4132, label %4107, label %4223

4133:                                             ; preds = %4107, %4215
  %4134 = phi %"class.blink::IntRect"* [ %4216, %4215 ], [ %4109, %4107 ]
  %4135 = phi %"class.blink::IntRect"* [ %4216, %4215 ], [ %4110, %4107 ]
  %4136 = phi i32 [ %4219, %4215 ], [ 0, %4107 ]
  %4137 = phi i16* [ %4218, %4215 ], [ %4112, %4107 ]
  %4138 = phi i8* [ %4217, %4215 ], [ %4113, %4107 ]
  %4139 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4135, i64 0, i32 1, i32 0
  %4140 = load i32, i32* %4139, align 4
  %4141 = icmp eq i32 %4140, 0
  br i1 %4141, label %4215, label %4142

4142:                                             ; preds = %4133
  %4143 = load float*, float** %4105, align 8
  br label %4144

4144:                                             ; preds = %4144, %4142
  %4145 = phi i32 [ %4168, %4144 ], [ 0, %4142 ]
  %4146 = phi i8* [ %4166, %4144 ], [ %4138, %4142 ]
  %4147 = phi float* [ %4167, %4144 ], [ %4143, %4142 ]
  %4148 = getelementptr inbounds i8, i8* %4146, i64 2
  %4149 = load i8, i8* %4148, align 1
  %4150 = uitofp i8 %4149 to float
  %4151 = fmul float %4150, 0x3F70101020000000
  store float %4151, float* %4147, align 4
  %4152 = getelementptr inbounds i8, i8* %4146, i64 1
  %4153 = load i8, i8* %4152, align 1
  %4154 = uitofp i8 %4153 to float
  %4155 = fmul float %4154, 0x3F70101020000000
  %4156 = getelementptr inbounds float, float* %4147, i64 1
  store float %4155, float* %4156, align 4
  %4157 = load i8, i8* %4146, align 1
  %4158 = uitofp i8 %4157 to float
  %4159 = fmul float %4158, 0x3F70101020000000
  %4160 = getelementptr inbounds float, float* %4147, i64 2
  store float %4159, float* %4160, align 4
  %4161 = getelementptr inbounds i8, i8* %4146, i64 3
  %4162 = load i8, i8* %4161, align 1
  %4163 = uitofp i8 %4162 to float
  %4164 = fmul float %4163, 0x3F70101020000000
  %4165 = getelementptr inbounds float, float* %4147, i64 3
  store float %4164, float* %4165, align 4
  %4166 = getelementptr inbounds i8, i8* %4146, i64 4
  %4167 = getelementptr inbounds float, float* %4147, i64 4
  %4168 = add nuw i32 %4145, 1
  %4169 = icmp eq i32 %4168, %4140
  br i1 %4169, label %4170, label %4144

4170:                                             ; preds = %4144
  %4171 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4072, align 8
  %4172 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4171, i64 0, i32 1, i32 0
  %4173 = load i32, i32* %4172, align 4
  %4174 = icmp eq i32 %4173, 0
  br i1 %4174, label %4215, label %4175

4175:                                             ; preds = %4170
  %4176 = load float*, float** %4105, align 8
  br label %4177

4177:                                             ; preds = %4177, %4175
  %4178 = phi i32 [ %4211, %4177 ], [ 0, %4175 ]
  %4179 = phi float* [ %4209, %4177 ], [ %4176, %4175 ]
  %4180 = phi i16* [ %4210, %4177 ], [ %4137, %4175 ]
  %4181 = bitcast float* %4179 to i32*
  %4182 = load i32, i32* %4181, align 4
  %4183 = lshr i32 %4182, 23
  %4184 = zext i32 %4183 to i64
  %4185 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4184
  %4186 = load i16, i16* %4185, align 2
  %4187 = and i32 %4182, 8388607
  %4188 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4184
  %4189 = load i8, i8* %4188, align 1
  %4190 = zext i8 %4189 to i32
  %4191 = lshr i32 %4187, %4190
  %4192 = trunc i32 %4191 to i16
  %4193 = add i16 %4186, %4192
  store i16 %4193, i16* %4180, align 2
  %4194 = getelementptr inbounds float, float* %4179, i64 3
  %4195 = bitcast float* %4194 to i32*
  %4196 = load i32, i32* %4195, align 4
  %4197 = lshr i32 %4196, 23
  %4198 = zext i32 %4197 to i64
  %4199 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4198
  %4200 = load i16, i16* %4199, align 2
  %4201 = and i32 %4196, 8388607
  %4202 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4198
  %4203 = load i8, i8* %4202, align 1
  %4204 = zext i8 %4203 to i32
  %4205 = lshr i32 %4201, %4204
  %4206 = trunc i32 %4205 to i16
  %4207 = add i16 %4200, %4206
  %4208 = getelementptr inbounds i16, i16* %4180, i64 1
  store i16 %4207, i16* %4208, align 2
  %4209 = getelementptr inbounds float, float* %4179, i64 4
  %4210 = getelementptr inbounds i16, i16* %4180, i64 2
  %4211 = add nuw i32 %4178, 1
  %4212 = icmp eq i32 %4211, %4173
  br i1 %4212, label %4213, label %4177

4213:                                             ; preds = %4177
  %4214 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4072, align 8
  br label %4215

4215:                                             ; preds = %4213, %4170, %4133
  %4216 = phi %"class.blink::IntRect"* [ %4214, %4213 ], [ %4171, %4170 ], [ %4134, %4133 ]
  %4217 = getelementptr inbounds i8, i8* %4138, i64 %4065
  %4218 = getelementptr inbounds i16, i16* %4137, i64 %4069
  %4219 = add nuw nsw i32 %4136, 1
  %4220 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4216, i64 0, i32 1, i32 1
  %4221 = load i32, i32* %4220, align 4
  %4222 = icmp slt i32 %4219, %4221
  br i1 %4222, label %4133, label %4117

4223:                                             ; preds = %4119, %4097
  %4224 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4224, align 4
  br label %15491

4225:                                             ; preds = %4061
  %4226 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4227 = load i32, i32* %4226, align 8
  %4228 = sext i32 %4227 to i64
  %4229 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4230 = load i32, i32* %4229, align 8
  %4231 = sdiv i32 %4230, 2
  %4232 = sext i32 %4231 to i64
  %4233 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4234 = load i8*, i8** %4233, align 8
  %4235 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4236 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4235, align 8
  %4237 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4236, i64 0, i32 0, i32 1
  %4238 = load i32, i32* %4237, align 4
  %4239 = mul nsw i32 %4238, %4227
  %4240 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4241 = load i32, i32* %4240, align 4
  %4242 = add nsw i32 %4239, %4241
  %4243 = sext i32 %4242 to i64
  %4244 = getelementptr inbounds i8, i8* %4234, i64 %4243
  %4245 = icmp slt i32 %4230, 0
  %4246 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4247 = load i32, i32* %4246, align 8
  %4248 = icmp sgt i32 %4247, 1
  %4249 = and i1 %4245, %4248
  br i1 %4249, label %4250, label %4260

4250:                                             ; preds = %4225
  %4251 = add nsw i32 %4247, -1
  %4252 = sext i32 %4251 to i64
  %4253 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4254 = load i32, i32* %4253, align 4
  %4255 = sext i32 %4254 to i64
  %4256 = mul nsw i64 %4228, %4252
  %4257 = mul i64 %4256, %4255
  %4258 = sub i64 0, %4257
  %4259 = getelementptr inbounds i8, i8* %4244, i64 %4258
  br label %4262

4260:                                             ; preds = %4225
  %4261 = icmp sgt i32 %4247, 0
  br i1 %4261, label %4262, label %4388

4262:                                             ; preds = %4260, %4250
  %4263 = phi i8* [ %4259, %4250 ], [ %4244, %4260 ]
  %4264 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4265 = bitcast i8** %4264 to i16**
  %4266 = load i16*, i16** %4265, align 8
  %4267 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4268 = bitcast i8** %4267 to float**
  %4269 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4270

4270:                                             ; preds = %4282, %4262
  %4271 = phi i32 [ %4247, %4262 ], [ %4283, %4282 ]
  %4272 = phi %"class.blink::IntRect"* [ %4236, %4262 ], [ %4284, %4282 ]
  %4273 = phi %"class.blink::IntRect"* [ %4236, %4262 ], [ %4285, %4282 ]
  %4274 = phi i32 [ 0, %4262 ], [ %4294, %4282 ]
  %4275 = phi i16* [ %4266, %4262 ], [ %4287, %4282 ]
  %4276 = phi i8* [ %4263, %4262 ], [ %4293, %4282 ]
  %4277 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4273, i64 0, i32 1, i32 1
  %4278 = load i32, i32* %4277, align 4
  %4279 = icmp sgt i32 %4278, 0
  br i1 %4279, label %4296, label %4282

4280:                                             ; preds = %4380
  %4281 = load i32, i32* %4246, align 8
  br label %4282

4282:                                             ; preds = %4280, %4270
  %4283 = phi i32 [ %4271, %4270 ], [ %4281, %4280 ]
  %4284 = phi %"class.blink::IntRect"* [ %4272, %4270 ], [ %4381, %4280 ]
  %4285 = phi %"class.blink::IntRect"* [ %4273, %4270 ], [ %4381, %4280 ]
  %4286 = phi i8* [ %4276, %4270 ], [ %4382, %4280 ]
  %4287 = phi i16* [ %4275, %4270 ], [ %4383, %4280 ]
  %4288 = phi i32 [ %4278, %4270 ], [ %4386, %4280 ]
  %4289 = load i32, i32* %4269, align 4
  %4290 = sub nsw i32 %4289, %4288
  %4291 = sext i32 %4290 to i64
  %4292 = mul nsw i64 %4291, %4228
  %4293 = getelementptr inbounds i8, i8* %4286, i64 %4292
  %4294 = add nuw nsw i32 %4274, 1
  %4295 = icmp slt i32 %4294, %4283
  br i1 %4295, label %4270, label %4388

4296:                                             ; preds = %4270, %4380
  %4297 = phi %"class.blink::IntRect"* [ %4381, %4380 ], [ %4272, %4270 ]
  %4298 = phi %"class.blink::IntRect"* [ %4381, %4380 ], [ %4273, %4270 ]
  %4299 = phi i32 [ %4384, %4380 ], [ 0, %4270 ]
  %4300 = phi i16* [ %4383, %4380 ], [ %4275, %4270 ]
  %4301 = phi i8* [ %4382, %4380 ], [ %4276, %4270 ]
  %4302 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4298, i64 0, i32 1, i32 0
  %4303 = load i32, i32* %4302, align 4
  %4304 = icmp eq i32 %4303, 0
  br i1 %4304, label %4380, label %4305

4305:                                             ; preds = %4296
  %4306 = load float*, float** %4268, align 8
  br label %4307

4307:                                             ; preds = %4307, %4305
  %4308 = phi i32 [ %4331, %4307 ], [ 0, %4305 ]
  %4309 = phi i8* [ %4329, %4307 ], [ %4301, %4305 ]
  %4310 = phi float* [ %4330, %4307 ], [ %4306, %4305 ]
  %4311 = getelementptr inbounds i8, i8* %4309, i64 2
  %4312 = load i8, i8* %4311, align 1
  %4313 = uitofp i8 %4312 to float
  %4314 = fmul float %4313, 0x3F70101020000000
  store float %4314, float* %4310, align 4
  %4315 = getelementptr inbounds i8, i8* %4309, i64 1
  %4316 = load i8, i8* %4315, align 1
  %4317 = uitofp i8 %4316 to float
  %4318 = fmul float %4317, 0x3F70101020000000
  %4319 = getelementptr inbounds float, float* %4310, i64 1
  store float %4318, float* %4319, align 4
  %4320 = load i8, i8* %4309, align 1
  %4321 = uitofp i8 %4320 to float
  %4322 = fmul float %4321, 0x3F70101020000000
  %4323 = getelementptr inbounds float, float* %4310, i64 2
  store float %4322, float* %4323, align 4
  %4324 = getelementptr inbounds i8, i8* %4309, i64 3
  %4325 = load i8, i8* %4324, align 1
  %4326 = uitofp i8 %4325 to float
  %4327 = fmul float %4326, 0x3F70101020000000
  %4328 = getelementptr inbounds float, float* %4310, i64 3
  store float %4327, float* %4328, align 4
  %4329 = getelementptr inbounds i8, i8* %4309, i64 4
  %4330 = getelementptr inbounds float, float* %4310, i64 4
  %4331 = add nuw i32 %4308, 1
  %4332 = icmp eq i32 %4331, %4303
  br i1 %4332, label %4333, label %4307

4333:                                             ; preds = %4307
  %4334 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4235, align 8
  %4335 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4334, i64 0, i32 1, i32 0
  %4336 = load i32, i32* %4335, align 4
  %4337 = icmp eq i32 %4336, 0
  br i1 %4337, label %4380, label %4338

4338:                                             ; preds = %4333
  %4339 = load float*, float** %4268, align 8
  br label %4340

4340:                                             ; preds = %4340, %4338
  %4341 = phi float* [ %4374, %4340 ], [ %4339, %4338 ]
  %4342 = phi i32 [ %4376, %4340 ], [ 0, %4338 ]
  %4343 = phi i16* [ %4375, %4340 ], [ %4300, %4338 ]
  %4344 = getelementptr inbounds float, float* %4341, i64 3
  %4345 = load float, float* %4344, align 4
  %4346 = load float, float* %4341, align 4
  %4347 = fmul float %4345, %4346
  %4348 = bitcast float %4347 to i32
  %4349 = lshr i32 %4348, 23
  %4350 = zext i32 %4349 to i64
  %4351 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4350
  %4352 = load i16, i16* %4351, align 2
  %4353 = and i32 %4348, 8388607
  %4354 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4350
  %4355 = load i8, i8* %4354, align 1
  %4356 = zext i8 %4355 to i32
  %4357 = lshr i32 %4353, %4356
  %4358 = trunc i32 %4357 to i16
  %4359 = add i16 %4352, %4358
  store i16 %4359, i16* %4343, align 2
  %4360 = bitcast float* %4344 to i32*
  %4361 = load i32, i32* %4360, align 4
  %4362 = lshr i32 %4361, 23
  %4363 = zext i32 %4362 to i64
  %4364 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4363
  %4365 = load i16, i16* %4364, align 2
  %4366 = and i32 %4361, 8388607
  %4367 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4363
  %4368 = load i8, i8* %4367, align 1
  %4369 = zext i8 %4368 to i32
  %4370 = lshr i32 %4366, %4369
  %4371 = trunc i32 %4370 to i16
  %4372 = add i16 %4365, %4371
  %4373 = getelementptr inbounds i16, i16* %4343, i64 1
  store i16 %4372, i16* %4373, align 2
  %4374 = getelementptr inbounds float, float* %4341, i64 4
  %4375 = getelementptr inbounds i16, i16* %4343, i64 2
  %4376 = add nuw i32 %4342, 1
  %4377 = icmp eq i32 %4376, %4336
  br i1 %4377, label %4378, label %4340

4378:                                             ; preds = %4340
  %4379 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4235, align 8
  br label %4380

4380:                                             ; preds = %4378, %4333, %4296
  %4381 = phi %"class.blink::IntRect"* [ %4379, %4378 ], [ %4334, %4333 ], [ %4297, %4296 ]
  %4382 = getelementptr inbounds i8, i8* %4301, i64 %4228
  %4383 = getelementptr inbounds i16, i16* %4300, i64 %4232
  %4384 = add nuw nsw i32 %4299, 1
  %4385 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4381, i64 0, i32 1, i32 1
  %4386 = load i32, i32* %4385, align 4
  %4387 = icmp slt i32 %4384, %4386
  br i1 %4387, label %4296, label %4280

4388:                                             ; preds = %4282, %4260
  %4389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4389, align 4
  br label %15491

4390:                                             ; preds = %4061
  %4391 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4392 = load i32, i32* %4391, align 8
  %4393 = sext i32 %4392 to i64
  %4394 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4395 = load i32, i32* %4394, align 8
  %4396 = sdiv i32 %4395, 2
  %4397 = sext i32 %4396 to i64
  %4398 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4399 = load i8*, i8** %4398, align 8
  %4400 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4401 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4400, align 8
  %4402 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4401, i64 0, i32 0, i32 1
  %4403 = load i32, i32* %4402, align 4
  %4404 = mul nsw i32 %4403, %4392
  %4405 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4406 = load i32, i32* %4405, align 4
  %4407 = add nsw i32 %4404, %4406
  %4408 = sext i32 %4407 to i64
  %4409 = getelementptr inbounds i8, i8* %4399, i64 %4408
  %4410 = icmp slt i32 %4395, 0
  %4411 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4412 = load i32, i32* %4411, align 8
  %4413 = icmp sgt i32 %4412, 1
  %4414 = and i1 %4410, %4413
  br i1 %4414, label %4415, label %4425

4415:                                             ; preds = %4390
  %4416 = add nsw i32 %4412, -1
  %4417 = sext i32 %4416 to i64
  %4418 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4419 = load i32, i32* %4418, align 4
  %4420 = sext i32 %4419 to i64
  %4421 = mul nsw i64 %4393, %4417
  %4422 = mul i64 %4421, %4420
  %4423 = sub i64 0, %4422
  %4424 = getelementptr inbounds i8, i8* %4409, i64 %4423
  br label %4427

4425:                                             ; preds = %4390
  %4426 = icmp sgt i32 %4412, 0
  br i1 %4426, label %4427, label %4556

4427:                                             ; preds = %4425, %4415
  %4428 = phi i8* [ %4424, %4415 ], [ %4409, %4425 ]
  %4429 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4430 = bitcast i8** %4429 to i16**
  %4431 = load i16*, i16** %4430, align 8
  %4432 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4433 = bitcast i8** %4432 to float**
  %4434 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4435

4435:                                             ; preds = %4447, %4427
  %4436 = phi i32 [ %4412, %4427 ], [ %4448, %4447 ]
  %4437 = phi %"class.blink::IntRect"* [ %4401, %4427 ], [ %4449, %4447 ]
  %4438 = phi %"class.blink::IntRect"* [ %4401, %4427 ], [ %4450, %4447 ]
  %4439 = phi i32 [ 0, %4427 ], [ %4459, %4447 ]
  %4440 = phi i16* [ %4431, %4427 ], [ %4452, %4447 ]
  %4441 = phi i8* [ %4428, %4427 ], [ %4458, %4447 ]
  %4442 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4438, i64 0, i32 1, i32 1
  %4443 = load i32, i32* %4442, align 4
  %4444 = icmp sgt i32 %4443, 0
  br i1 %4444, label %4461, label %4447

4445:                                             ; preds = %4548
  %4446 = load i32, i32* %4411, align 8
  br label %4447

4447:                                             ; preds = %4445, %4435
  %4448 = phi i32 [ %4436, %4435 ], [ %4446, %4445 ]
  %4449 = phi %"class.blink::IntRect"* [ %4437, %4435 ], [ %4549, %4445 ]
  %4450 = phi %"class.blink::IntRect"* [ %4438, %4435 ], [ %4549, %4445 ]
  %4451 = phi i8* [ %4441, %4435 ], [ %4550, %4445 ]
  %4452 = phi i16* [ %4440, %4435 ], [ %4551, %4445 ]
  %4453 = phi i32 [ %4443, %4435 ], [ %4554, %4445 ]
  %4454 = load i32, i32* %4434, align 4
  %4455 = sub nsw i32 %4454, %4453
  %4456 = sext i32 %4455 to i64
  %4457 = mul nsw i64 %4456, %4393
  %4458 = getelementptr inbounds i8, i8* %4451, i64 %4457
  %4459 = add nuw nsw i32 %4439, 1
  %4460 = icmp slt i32 %4459, %4448
  br i1 %4460, label %4435, label %4556

4461:                                             ; preds = %4435, %4548
  %4462 = phi %"class.blink::IntRect"* [ %4549, %4548 ], [ %4437, %4435 ]
  %4463 = phi %"class.blink::IntRect"* [ %4549, %4548 ], [ %4438, %4435 ]
  %4464 = phi i32 [ %4552, %4548 ], [ 0, %4435 ]
  %4465 = phi i16* [ %4551, %4548 ], [ %4440, %4435 ]
  %4466 = phi i8* [ %4550, %4548 ], [ %4441, %4435 ]
  %4467 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4463, i64 0, i32 1, i32 0
  %4468 = load i32, i32* %4467, align 4
  %4469 = icmp eq i32 %4468, 0
  br i1 %4469, label %4548, label %4470

4470:                                             ; preds = %4461
  %4471 = load float*, float** %4433, align 8
  br label %4472

4472:                                             ; preds = %4472, %4470
  %4473 = phi i32 [ %4496, %4472 ], [ 0, %4470 ]
  %4474 = phi i8* [ %4494, %4472 ], [ %4466, %4470 ]
  %4475 = phi float* [ %4495, %4472 ], [ %4471, %4470 ]
  %4476 = getelementptr inbounds i8, i8* %4474, i64 2
  %4477 = load i8, i8* %4476, align 1
  %4478 = uitofp i8 %4477 to float
  %4479 = fmul float %4478, 0x3F70101020000000
  store float %4479, float* %4475, align 4
  %4480 = getelementptr inbounds i8, i8* %4474, i64 1
  %4481 = load i8, i8* %4480, align 1
  %4482 = uitofp i8 %4481 to float
  %4483 = fmul float %4482, 0x3F70101020000000
  %4484 = getelementptr inbounds float, float* %4475, i64 1
  store float %4483, float* %4484, align 4
  %4485 = load i8, i8* %4474, align 1
  %4486 = uitofp i8 %4485 to float
  %4487 = fmul float %4486, 0x3F70101020000000
  %4488 = getelementptr inbounds float, float* %4475, i64 2
  store float %4487, float* %4488, align 4
  %4489 = getelementptr inbounds i8, i8* %4474, i64 3
  %4490 = load i8, i8* %4489, align 1
  %4491 = uitofp i8 %4490 to float
  %4492 = fmul float %4491, 0x3F70101020000000
  %4493 = getelementptr inbounds float, float* %4475, i64 3
  store float %4492, float* %4493, align 4
  %4494 = getelementptr inbounds i8, i8* %4474, i64 4
  %4495 = getelementptr inbounds float, float* %4475, i64 4
  %4496 = add nuw i32 %4473, 1
  %4497 = icmp eq i32 %4496, %4468
  br i1 %4497, label %4498, label %4472

4498:                                             ; preds = %4472
  %4499 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4400, align 8
  %4500 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4499, i64 0, i32 1, i32 0
  %4501 = load i32, i32* %4500, align 4
  %4502 = icmp eq i32 %4501, 0
  br i1 %4502, label %4548, label %4503

4503:                                             ; preds = %4498
  %4504 = load float*, float** %4433, align 8
  br label %4505

4505:                                             ; preds = %4505, %4503
  %4506 = phi i32 [ %4544, %4505 ], [ 0, %4503 ]
  %4507 = phi float* [ %4542, %4505 ], [ %4504, %4503 ]
  %4508 = phi i16* [ %4543, %4505 ], [ %4465, %4503 ]
  %4509 = getelementptr inbounds float, float* %4507, i64 3
  %4510 = load float, float* %4509, align 4
  %4511 = fcmp une float %4510, 0.000000e+00
  %4512 = fdiv float 1.000000e+00, %4510
  %4513 = select i1 %4511, float %4512, float 1.000000e+00
  %4514 = load float, float* %4507, align 4
  %4515 = fmul float %4514, %4513
  %4516 = bitcast float %4515 to i32
  %4517 = lshr i32 %4516, 23
  %4518 = zext i32 %4517 to i64
  %4519 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4518
  %4520 = load i16, i16* %4519, align 2
  %4521 = and i32 %4516, 8388607
  %4522 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4518
  %4523 = load i8, i8* %4522, align 1
  %4524 = zext i8 %4523 to i32
  %4525 = lshr i32 %4521, %4524
  %4526 = trunc i32 %4525 to i16
  %4527 = add i16 %4520, %4526
  store i16 %4527, i16* %4508, align 2
  %4528 = bitcast float* %4509 to i32*
  %4529 = load i32, i32* %4528, align 4
  %4530 = lshr i32 %4529, 23
  %4531 = zext i32 %4530 to i64
  %4532 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4531
  %4533 = load i16, i16* %4532, align 2
  %4534 = and i32 %4529, 8388607
  %4535 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4531
  %4536 = load i8, i8* %4535, align 1
  %4537 = zext i8 %4536 to i32
  %4538 = lshr i32 %4534, %4537
  %4539 = trunc i32 %4538 to i16
  %4540 = add i16 %4533, %4539
  %4541 = getelementptr inbounds i16, i16* %4508, i64 1
  store i16 %4540, i16* %4541, align 2
  %4542 = getelementptr inbounds float, float* %4507, i64 4
  %4543 = getelementptr inbounds i16, i16* %4508, i64 2
  %4544 = add nuw i32 %4506, 1
  %4545 = icmp eq i32 %4544, %4501
  br i1 %4545, label %4546, label %4505

4546:                                             ; preds = %4505
  %4547 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4400, align 8
  br label %4548

4548:                                             ; preds = %4546, %4498, %4461
  %4549 = phi %"class.blink::IntRect"* [ %4547, %4546 ], [ %4499, %4498 ], [ %4462, %4461 ]
  %4550 = getelementptr inbounds i8, i8* %4466, i64 %4393
  %4551 = getelementptr inbounds i16, i16* %4465, i64 %4397
  %4552 = add nuw nsw i32 %4464, 1
  %4553 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4549, i64 0, i32 1, i32 1
  %4554 = load i32, i32* %4553, align 4
  %4555 = icmp slt i32 %4552, %4554
  br i1 %4555, label %4461, label %4445

4556:                                             ; preds = %4447, %4425
  %4557 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4557, align 4
  br label %15491

4558:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %4559
    i32 1, label %4757
    i32 2, label %4927
  ]

4559:                                             ; preds = %4558
  %4560 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4561 = load i32, i32* %4560, align 8
  %4562 = sext i32 %4561 to i64
  %4563 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4564 = load i32, i32* %4563, align 8
  %4565 = sdiv i32 %4564, 4
  %4566 = sext i32 %4565 to i64
  %4567 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4568 = load i8*, i8** %4567, align 8
  %4569 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4570 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4569, align 8
  %4571 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4570, i64 0, i32 0, i32 1
  %4572 = load i32, i32* %4571, align 4
  %4573 = mul nsw i32 %4572, %4561
  %4574 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4575 = load i32, i32* %4574, align 4
  %4576 = add nsw i32 %4573, %4575
  %4577 = sext i32 %4576 to i64
  %4578 = getelementptr inbounds i8, i8* %4568, i64 %4577
  %4579 = icmp slt i32 %4564, 0
  %4580 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4581 = load i32, i32* %4580, align 8
  %4582 = icmp sgt i32 %4581, 1
  %4583 = and i1 %4579, %4582
  br i1 %4583, label %4584, label %4594

4584:                                             ; preds = %4559
  %4585 = add nsw i32 %4581, -1
  %4586 = sext i32 %4585 to i64
  %4587 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4588 = load i32, i32* %4587, align 4
  %4589 = sext i32 %4588 to i64
  %4590 = mul nsw i64 %4562, %4586
  %4591 = mul i64 %4590, %4589
  %4592 = sub i64 0, %4591
  %4593 = getelementptr inbounds i8, i8* %4578, i64 %4592
  br label %4596

4594:                                             ; preds = %4559
  %4595 = icmp sgt i32 %4581, 0
  br i1 %4595, label %4596, label %4755

4596:                                             ; preds = %4594, %4584
  %4597 = phi i8* [ %4593, %4584 ], [ %4578, %4594 ]
  %4598 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4599 = bitcast i8** %4598 to float**
  %4600 = load float*, float** %4599, align 8
  %4601 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4602 = bitcast i8** %4601 to float**
  %4603 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4604

4604:                                             ; preds = %4616, %4596
  %4605 = phi i32 [ %4581, %4596 ], [ %4617, %4616 ]
  %4606 = phi %"class.blink::IntRect"* [ %4570, %4596 ], [ %4618, %4616 ]
  %4607 = phi %"class.blink::IntRect"* [ %4570, %4596 ], [ %4619, %4616 ]
  %4608 = phi i32 [ 0, %4596 ], [ %4628, %4616 ]
  %4609 = phi float* [ %4600, %4596 ], [ %4621, %4616 ]
  %4610 = phi i8* [ %4597, %4596 ], [ %4627, %4616 ]
  %4611 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4607, i64 0, i32 1, i32 1
  %4612 = load i32, i32* %4611, align 4
  %4613 = icmp sgt i32 %4612, 0
  br i1 %4613, label %4630, label %4616

4614:                                             ; preds = %4747
  %4615 = load i32, i32* %4580, align 8
  br label %4616

4616:                                             ; preds = %4614, %4604
  %4617 = phi i32 [ %4605, %4604 ], [ %4615, %4614 ]
  %4618 = phi %"class.blink::IntRect"* [ %4606, %4604 ], [ %4748, %4614 ]
  %4619 = phi %"class.blink::IntRect"* [ %4607, %4604 ], [ %4748, %4614 ]
  %4620 = phi i8* [ %4610, %4604 ], [ %4749, %4614 ]
  %4621 = phi float* [ %4609, %4604 ], [ %4750, %4614 ]
  %4622 = phi i32 [ %4612, %4604 ], [ %4753, %4614 ]
  %4623 = load i32, i32* %4603, align 4
  %4624 = sub nsw i32 %4623, %4622
  %4625 = sext i32 %4624 to i64
  %4626 = mul nsw i64 %4625, %4562
  %4627 = getelementptr inbounds i8, i8* %4620, i64 %4626
  %4628 = add nuw nsw i32 %4608, 1
  %4629 = icmp slt i32 %4628, %4617
  br i1 %4629, label %4604, label %4755

4630:                                             ; preds = %4604, %4747
  %4631 = phi %"class.blink::IntRect"* [ %4748, %4747 ], [ %4606, %4604 ]
  %4632 = phi %"class.blink::IntRect"* [ %4748, %4747 ], [ %4607, %4604 ]
  %4633 = phi i32 [ %4751, %4747 ], [ 0, %4604 ]
  %4634 = phi float* [ %4750, %4747 ], [ %4609, %4604 ]
  %4635 = phi i8* [ %4749, %4747 ], [ %4610, %4604 ]
  %4636 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4632, i64 0, i32 1, i32 0
  %4637 = load i32, i32* %4636, align 4
  %4638 = icmp eq i32 %4637, 0
  br i1 %4638, label %4747, label %4639

4639:                                             ; preds = %4630
  %4640 = load float*, float** %4602, align 8
  br label %4641

4641:                                             ; preds = %4641, %4639
  %4642 = phi i32 [ %4665, %4641 ], [ 0, %4639 ]
  %4643 = phi i8* [ %4663, %4641 ], [ %4635, %4639 ]
  %4644 = phi float* [ %4664, %4641 ], [ %4640, %4639 ]
  %4645 = getelementptr inbounds i8, i8* %4643, i64 2
  %4646 = load i8, i8* %4645, align 1
  %4647 = uitofp i8 %4646 to float
  %4648 = fmul float %4647, 0x3F70101020000000
  store float %4648, float* %4644, align 4
  %4649 = getelementptr inbounds i8, i8* %4643, i64 1
  %4650 = load i8, i8* %4649, align 1
  %4651 = uitofp i8 %4650 to float
  %4652 = fmul float %4651, 0x3F70101020000000
  %4653 = getelementptr inbounds float, float* %4644, i64 1
  store float %4652, float* %4653, align 4
  %4654 = load i8, i8* %4643, align 1
  %4655 = uitofp i8 %4654 to float
  %4656 = fmul float %4655, 0x3F70101020000000
  %4657 = getelementptr inbounds float, float* %4644, i64 2
  store float %4656, float* %4657, align 4
  %4658 = getelementptr inbounds i8, i8* %4643, i64 3
  %4659 = load i8, i8* %4658, align 1
  %4660 = uitofp i8 %4659 to float
  %4661 = fmul float %4660, 0x3F70101020000000
  %4662 = getelementptr inbounds float, float* %4644, i64 3
  store float %4661, float* %4662, align 4
  %4663 = getelementptr inbounds i8, i8* %4643, i64 4
  %4664 = getelementptr inbounds float, float* %4644, i64 4
  %4665 = add nuw i32 %4642, 1
  %4666 = icmp eq i32 %4665, %4637
  br i1 %4666, label %4667, label %4641

4667:                                             ; preds = %4641
  %4668 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4569, align 8
  %4669 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4668, i64 0, i32 1, i32 0
  %4670 = load i32, i32* %4669, align 4
  %4671 = icmp eq i32 %4670, 0
  br i1 %4671, label %4747, label %4672

4672:                                             ; preds = %4667
  %4673 = load float*, float** %4602, align 8
  %4674 = add i32 %4670, -1
  %4675 = and i32 %4670, 3
  %4676 = icmp ult i32 %4674, 3
  br i1 %4676, label %4725, label %4677

4677:                                             ; preds = %4672
  %4678 = sub i32 %4670, %4675
  br label %4679

4679:                                             ; preds = %4679, %4677
  %4680 = phi float* [ %4673, %4677 ], [ %4721, %4679 ]
  %4681 = phi float* [ %4634, %4677 ], [ %4722, %4679 ]
  %4682 = phi i32 [ %4678, %4677 ], [ %4723, %4679 ]
  %4683 = bitcast float* %4680 to i32*
  %4684 = load i32, i32* %4683, align 4
  %4685 = bitcast float* %4681 to i32*
  store i32 %4684, i32* %4685, align 4
  %4686 = getelementptr inbounds float, float* %4680, i64 3
  %4687 = bitcast float* %4686 to i32*
  %4688 = load i32, i32* %4687, align 4
  %4689 = getelementptr inbounds float, float* %4681, i64 1
  %4690 = bitcast float* %4689 to i32*
  store i32 %4688, i32* %4690, align 4
  %4691 = getelementptr inbounds float, float* %4680, i64 4
  %4692 = getelementptr inbounds float, float* %4681, i64 2
  %4693 = bitcast float* %4691 to i32*
  %4694 = load i32, i32* %4693, align 4
  %4695 = bitcast float* %4692 to i32*
  store i32 %4694, i32* %4695, align 4
  %4696 = getelementptr inbounds float, float* %4680, i64 7
  %4697 = bitcast float* %4696 to i32*
  %4698 = load i32, i32* %4697, align 4
  %4699 = getelementptr inbounds float, float* %4681, i64 3
  %4700 = bitcast float* %4699 to i32*
  store i32 %4698, i32* %4700, align 4
  %4701 = getelementptr inbounds float, float* %4680, i64 8
  %4702 = getelementptr inbounds float, float* %4681, i64 4
  %4703 = bitcast float* %4701 to i32*
  %4704 = load i32, i32* %4703, align 4
  %4705 = bitcast float* %4702 to i32*
  store i32 %4704, i32* %4705, align 4
  %4706 = getelementptr inbounds float, float* %4680, i64 11
  %4707 = bitcast float* %4706 to i32*
  %4708 = load i32, i32* %4707, align 4
  %4709 = getelementptr inbounds float, float* %4681, i64 5
  %4710 = bitcast float* %4709 to i32*
  store i32 %4708, i32* %4710, align 4
  %4711 = getelementptr inbounds float, float* %4680, i64 12
  %4712 = getelementptr inbounds float, float* %4681, i64 6
  %4713 = bitcast float* %4711 to i32*
  %4714 = load i32, i32* %4713, align 4
  %4715 = bitcast float* %4712 to i32*
  store i32 %4714, i32* %4715, align 4
  %4716 = getelementptr inbounds float, float* %4680, i64 15
  %4717 = bitcast float* %4716 to i32*
  %4718 = load i32, i32* %4717, align 4
  %4719 = getelementptr inbounds float, float* %4681, i64 7
  %4720 = bitcast float* %4719 to i32*
  store i32 %4718, i32* %4720, align 4
  %4721 = getelementptr inbounds float, float* %4680, i64 16
  %4722 = getelementptr inbounds float, float* %4681, i64 8
  %4723 = add i32 %4682, -4
  %4724 = icmp eq i32 %4723, 0
  br i1 %4724, label %4725, label %4679

4725:                                             ; preds = %4679, %4672
  %4726 = phi float* [ %4673, %4672 ], [ %4721, %4679 ]
  %4727 = phi float* [ %4634, %4672 ], [ %4722, %4679 ]
  %4728 = icmp eq i32 %4675, 0
  br i1 %4728, label %4745, label %4729

4729:                                             ; preds = %4725, %4729
  %4730 = phi float* [ %4741, %4729 ], [ %4726, %4725 ]
  %4731 = phi float* [ %4742, %4729 ], [ %4727, %4725 ]
  %4732 = phi i32 [ %4743, %4729 ], [ %4675, %4725 ]
  %4733 = bitcast float* %4730 to i32*
  %4734 = load i32, i32* %4733, align 4
  %4735 = bitcast float* %4731 to i32*
  store i32 %4734, i32* %4735, align 4
  %4736 = getelementptr inbounds float, float* %4730, i64 3
  %4737 = bitcast float* %4736 to i32*
  %4738 = load i32, i32* %4737, align 4
  %4739 = getelementptr inbounds float, float* %4731, i64 1
  %4740 = bitcast float* %4739 to i32*
  store i32 %4738, i32* %4740, align 4
  %4741 = getelementptr inbounds float, float* %4730, i64 4
  %4742 = getelementptr inbounds float, float* %4731, i64 2
  %4743 = add i32 %4732, -1
  %4744 = icmp eq i32 %4743, 0
  br i1 %4744, label %4745, label %4729, !llvm.loop !379

4745:                                             ; preds = %4729, %4725
  %4746 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4569, align 8
  br label %4747

4747:                                             ; preds = %4745, %4667, %4630
  %4748 = phi %"class.blink::IntRect"* [ %4746, %4745 ], [ %4668, %4667 ], [ %4631, %4630 ]
  %4749 = getelementptr inbounds i8, i8* %4635, i64 %4562
  %4750 = getelementptr inbounds float, float* %4634, i64 %4566
  %4751 = add nuw nsw i32 %4633, 1
  %4752 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4748, i64 0, i32 1, i32 1
  %4753 = load i32, i32* %4752, align 4
  %4754 = icmp slt i32 %4751, %4753
  br i1 %4754, label %4630, label %4614

4755:                                             ; preds = %4616, %4594
  %4756 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4756, align 4
  br label %15491

4757:                                             ; preds = %4558
  %4758 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4759 = load i32, i32* %4758, align 8
  %4760 = sext i32 %4759 to i64
  %4761 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4762 = load i32, i32* %4761, align 8
  %4763 = sdiv i32 %4762, 4
  %4764 = sext i32 %4763 to i64
  %4765 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4766 = load i8*, i8** %4765, align 8
  %4767 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4768 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4767, align 8
  %4769 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4768, i64 0, i32 0, i32 1
  %4770 = load i32, i32* %4769, align 4
  %4771 = mul nsw i32 %4770, %4759
  %4772 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4773 = load i32, i32* %4772, align 4
  %4774 = add nsw i32 %4771, %4773
  %4775 = sext i32 %4774 to i64
  %4776 = getelementptr inbounds i8, i8* %4766, i64 %4775
  %4777 = icmp slt i32 %4762, 0
  %4778 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4779 = load i32, i32* %4778, align 8
  %4780 = icmp sgt i32 %4779, 1
  %4781 = and i1 %4777, %4780
  br i1 %4781, label %4782, label %4792

4782:                                             ; preds = %4757
  %4783 = add nsw i32 %4779, -1
  %4784 = sext i32 %4783 to i64
  %4785 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4786 = load i32, i32* %4785, align 4
  %4787 = sext i32 %4786 to i64
  %4788 = mul nsw i64 %4760, %4784
  %4789 = mul i64 %4788, %4787
  %4790 = sub i64 0, %4789
  %4791 = getelementptr inbounds i8, i8* %4776, i64 %4790
  br label %4794

4792:                                             ; preds = %4757
  %4793 = icmp sgt i32 %4779, 0
  br i1 %4793, label %4794, label %4925

4794:                                             ; preds = %4792, %4782
  %4795 = phi i8* [ %4791, %4782 ], [ %4776, %4792 ]
  %4796 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4797 = bitcast i8** %4796 to float**
  %4798 = load float*, float** %4797, align 8
  %4799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4800 = bitcast i8** %4799 to float**
  %4801 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4802

4802:                                             ; preds = %4814, %4794
  %4803 = phi i32 [ %4779, %4794 ], [ %4815, %4814 ]
  %4804 = phi %"class.blink::IntRect"* [ %4768, %4794 ], [ %4816, %4814 ]
  %4805 = phi %"class.blink::IntRect"* [ %4768, %4794 ], [ %4817, %4814 ]
  %4806 = phi i32 [ 0, %4794 ], [ %4826, %4814 ]
  %4807 = phi float* [ %4798, %4794 ], [ %4819, %4814 ]
  %4808 = phi i8* [ %4795, %4794 ], [ %4825, %4814 ]
  %4809 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4805, i64 0, i32 1, i32 1
  %4810 = load i32, i32* %4809, align 4
  %4811 = icmp sgt i32 %4810, 0
  br i1 %4811, label %4828, label %4814

4812:                                             ; preds = %4917
  %4813 = load i32, i32* %4778, align 8
  br label %4814

4814:                                             ; preds = %4812, %4802
  %4815 = phi i32 [ %4803, %4802 ], [ %4813, %4812 ]
  %4816 = phi %"class.blink::IntRect"* [ %4804, %4802 ], [ %4918, %4812 ]
  %4817 = phi %"class.blink::IntRect"* [ %4805, %4802 ], [ %4918, %4812 ]
  %4818 = phi i8* [ %4808, %4802 ], [ %4919, %4812 ]
  %4819 = phi float* [ %4807, %4802 ], [ %4920, %4812 ]
  %4820 = phi i32 [ %4810, %4802 ], [ %4923, %4812 ]
  %4821 = load i32, i32* %4801, align 4
  %4822 = sub nsw i32 %4821, %4820
  %4823 = sext i32 %4822 to i64
  %4824 = mul nsw i64 %4823, %4760
  %4825 = getelementptr inbounds i8, i8* %4818, i64 %4824
  %4826 = add nuw nsw i32 %4806, 1
  %4827 = icmp slt i32 %4826, %4815
  br i1 %4827, label %4802, label %4925

4828:                                             ; preds = %4802, %4917
  %4829 = phi %"class.blink::IntRect"* [ %4918, %4917 ], [ %4804, %4802 ]
  %4830 = phi %"class.blink::IntRect"* [ %4918, %4917 ], [ %4805, %4802 ]
  %4831 = phi i32 [ %4921, %4917 ], [ 0, %4802 ]
  %4832 = phi float* [ %4920, %4917 ], [ %4807, %4802 ]
  %4833 = phi i8* [ %4919, %4917 ], [ %4808, %4802 ]
  %4834 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4830, i64 0, i32 1, i32 0
  %4835 = load i32, i32* %4834, align 4
  %4836 = icmp eq i32 %4835, 0
  br i1 %4836, label %4917, label %4837

4837:                                             ; preds = %4828
  %4838 = load float*, float** %4800, align 8
  br label %4839

4839:                                             ; preds = %4839, %4837
  %4840 = phi i32 [ %4863, %4839 ], [ 0, %4837 ]
  %4841 = phi i8* [ %4861, %4839 ], [ %4833, %4837 ]
  %4842 = phi float* [ %4862, %4839 ], [ %4838, %4837 ]
  %4843 = getelementptr inbounds i8, i8* %4841, i64 2
  %4844 = load i8, i8* %4843, align 1
  %4845 = uitofp i8 %4844 to float
  %4846 = fmul float %4845, 0x3F70101020000000
  store float %4846, float* %4842, align 4
  %4847 = getelementptr inbounds i8, i8* %4841, i64 1
  %4848 = load i8, i8* %4847, align 1
  %4849 = uitofp i8 %4848 to float
  %4850 = fmul float %4849, 0x3F70101020000000
  %4851 = getelementptr inbounds float, float* %4842, i64 1
  store float %4850, float* %4851, align 4
  %4852 = load i8, i8* %4841, align 1
  %4853 = uitofp i8 %4852 to float
  %4854 = fmul float %4853, 0x3F70101020000000
  %4855 = getelementptr inbounds float, float* %4842, i64 2
  store float %4854, float* %4855, align 4
  %4856 = getelementptr inbounds i8, i8* %4841, i64 3
  %4857 = load i8, i8* %4856, align 1
  %4858 = uitofp i8 %4857 to float
  %4859 = fmul float %4858, 0x3F70101020000000
  %4860 = getelementptr inbounds float, float* %4842, i64 3
  store float %4859, float* %4860, align 4
  %4861 = getelementptr inbounds i8, i8* %4841, i64 4
  %4862 = getelementptr inbounds float, float* %4842, i64 4
  %4863 = add nuw i32 %4840, 1
  %4864 = icmp eq i32 %4863, %4835
  br i1 %4864, label %4865, label %4839

4865:                                             ; preds = %4839
  %4866 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4767, align 8
  %4867 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4866, i64 0, i32 1, i32 0
  %4868 = load i32, i32* %4867, align 4
  %4869 = icmp eq i32 %4868, 0
  br i1 %4869, label %4917, label %4870

4870:                                             ; preds = %4865
  %4871 = load float*, float** %4800, align 8
  %4872 = and i32 %4868, 1
  %4873 = icmp eq i32 %4868, 1
  br i1 %4873, label %4902, label %4874

4874:                                             ; preds = %4870
  %4875 = sub i32 %4868, %4872
  br label %4876

4876:                                             ; preds = %4876, %4874
  %4877 = phi float* [ %4871, %4874 ], [ %4898, %4876 ]
  %4878 = phi float* [ %4832, %4874 ], [ %4899, %4876 ]
  %4879 = phi i32 [ %4875, %4874 ], [ %4900, %4876 ]
  %4880 = getelementptr inbounds float, float* %4877, i64 3
  %4881 = load float, float* %4880, align 4
  %4882 = load float, float* %4877, align 4
  %4883 = fmul float %4881, %4882
  store float %4883, float* %4878, align 4
  %4884 = bitcast float* %4880 to i32*
  %4885 = load i32, i32* %4884, align 4
  %4886 = getelementptr inbounds float, float* %4878, i64 1
  %4887 = bitcast float* %4886 to i32*
  store i32 %4885, i32* %4887, align 4
  %4888 = getelementptr inbounds float, float* %4877, i64 4
  %4889 = getelementptr inbounds float, float* %4878, i64 2
  %4890 = getelementptr inbounds float, float* %4877, i64 7
  %4891 = load float, float* %4890, align 4
  %4892 = load float, float* %4888, align 4
  %4893 = fmul float %4891, %4892
  store float %4893, float* %4889, align 4
  %4894 = bitcast float* %4890 to i32*
  %4895 = load i32, i32* %4894, align 4
  %4896 = getelementptr inbounds float, float* %4878, i64 3
  %4897 = bitcast float* %4896 to i32*
  store i32 %4895, i32* %4897, align 4
  %4898 = getelementptr inbounds float, float* %4877, i64 8
  %4899 = getelementptr inbounds float, float* %4878, i64 4
  %4900 = add i32 %4879, -2
  %4901 = icmp eq i32 %4900, 0
  br i1 %4901, label %4902, label %4876

4902:                                             ; preds = %4876, %4870
  %4903 = phi float* [ %4871, %4870 ], [ %4898, %4876 ]
  %4904 = phi float* [ %4832, %4870 ], [ %4899, %4876 ]
  %4905 = icmp eq i32 %4872, 0
  br i1 %4905, label %4915, label %4906

4906:                                             ; preds = %4902
  %4907 = getelementptr inbounds float, float* %4903, i64 3
  %4908 = load float, float* %4907, align 4
  %4909 = load float, float* %4903, align 4
  %4910 = fmul float %4908, %4909
  store float %4910, float* %4904, align 4
  %4911 = bitcast float* %4907 to i32*
  %4912 = load i32, i32* %4911, align 4
  %4913 = getelementptr inbounds float, float* %4904, i64 1
  %4914 = bitcast float* %4913 to i32*
  store i32 %4912, i32* %4914, align 4
  br label %4915

4915:                                             ; preds = %4902, %4906
  %4916 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4767, align 8
  br label %4917

4917:                                             ; preds = %4915, %4865, %4828
  %4918 = phi %"class.blink::IntRect"* [ %4916, %4915 ], [ %4866, %4865 ], [ %4829, %4828 ]
  %4919 = getelementptr inbounds i8, i8* %4833, i64 %4760
  %4920 = getelementptr inbounds float, float* %4832, i64 %4764
  %4921 = add nuw nsw i32 %4831, 1
  %4922 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4918, i64 0, i32 1, i32 1
  %4923 = load i32, i32* %4922, align 4
  %4924 = icmp slt i32 %4921, %4923
  br i1 %4924, label %4828, label %4812

4925:                                             ; preds = %4814, %4792
  %4926 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4926, align 4
  br label %15491

4927:                                             ; preds = %4558
  %4928 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4929 = load i32, i32* %4928, align 8
  %4930 = sext i32 %4929 to i64
  %4931 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4932 = load i32, i32* %4931, align 8
  %4933 = sdiv i32 %4932, 4
  %4934 = sext i32 %4933 to i64
  %4935 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4936 = load i8*, i8** %4935, align 8
  %4937 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4938 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4937, align 8
  %4939 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4938, i64 0, i32 0, i32 1
  %4940 = load i32, i32* %4939, align 4
  %4941 = mul nsw i32 %4940, %4929
  %4942 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4943 = load i32, i32* %4942, align 4
  %4944 = add nsw i32 %4941, %4943
  %4945 = sext i32 %4944 to i64
  %4946 = getelementptr inbounds i8, i8* %4936, i64 %4945
  %4947 = icmp slt i32 %4932, 0
  %4948 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4949 = load i32, i32* %4948, align 8
  %4950 = icmp sgt i32 %4949, 1
  %4951 = and i1 %4947, %4950
  br i1 %4951, label %4952, label %4962

4952:                                             ; preds = %4927
  %4953 = add nsw i32 %4949, -1
  %4954 = sext i32 %4953 to i64
  %4955 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4956 = load i32, i32* %4955, align 4
  %4957 = sext i32 %4956 to i64
  %4958 = mul nsw i64 %4930, %4954
  %4959 = mul i64 %4958, %4957
  %4960 = sub i64 0, %4959
  %4961 = getelementptr inbounds i8, i8* %4946, i64 %4960
  br label %4964

4962:                                             ; preds = %4927
  %4963 = icmp sgt i32 %4949, 0
  br i1 %4963, label %4964, label %5104

4964:                                             ; preds = %4962, %4952
  %4965 = phi i8* [ %4961, %4952 ], [ %4946, %4962 ]
  %4966 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4967 = bitcast i8** %4966 to float**
  %4968 = load float*, float** %4967, align 8
  %4969 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4970 = bitcast i8** %4969 to float**
  %4971 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4972

4972:                                             ; preds = %4984, %4964
  %4973 = phi i32 [ %4949, %4964 ], [ %4985, %4984 ]
  %4974 = phi %"class.blink::IntRect"* [ %4938, %4964 ], [ %4986, %4984 ]
  %4975 = phi %"class.blink::IntRect"* [ %4938, %4964 ], [ %4987, %4984 ]
  %4976 = phi i32 [ 0, %4964 ], [ %4996, %4984 ]
  %4977 = phi float* [ %4968, %4964 ], [ %4989, %4984 ]
  %4978 = phi i8* [ %4965, %4964 ], [ %4995, %4984 ]
  %4979 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4975, i64 0, i32 1, i32 1
  %4980 = load i32, i32* %4979, align 4
  %4981 = icmp sgt i32 %4980, 0
  br i1 %4981, label %4998, label %4984

4982:                                             ; preds = %5096
  %4983 = load i32, i32* %4948, align 8
  br label %4984

4984:                                             ; preds = %4982, %4972
  %4985 = phi i32 [ %4973, %4972 ], [ %4983, %4982 ]
  %4986 = phi %"class.blink::IntRect"* [ %4974, %4972 ], [ %5097, %4982 ]
  %4987 = phi %"class.blink::IntRect"* [ %4975, %4972 ], [ %5097, %4982 ]
  %4988 = phi i8* [ %4978, %4972 ], [ %5098, %4982 ]
  %4989 = phi float* [ %4977, %4972 ], [ %5099, %4982 ]
  %4990 = phi i32 [ %4980, %4972 ], [ %5102, %4982 ]
  %4991 = load i32, i32* %4971, align 4
  %4992 = sub nsw i32 %4991, %4990
  %4993 = sext i32 %4992 to i64
  %4994 = mul nsw i64 %4993, %4930
  %4995 = getelementptr inbounds i8, i8* %4988, i64 %4994
  %4996 = add nuw nsw i32 %4976, 1
  %4997 = icmp slt i32 %4996, %4985
  br i1 %4997, label %4972, label %5104

4998:                                             ; preds = %4972, %5096
  %4999 = phi %"class.blink::IntRect"* [ %5097, %5096 ], [ %4974, %4972 ]
  %5000 = phi %"class.blink::IntRect"* [ %5097, %5096 ], [ %4975, %4972 ]
  %5001 = phi i32 [ %5100, %5096 ], [ 0, %4972 ]
  %5002 = phi float* [ %5099, %5096 ], [ %4977, %4972 ]
  %5003 = phi i8* [ %5098, %5096 ], [ %4978, %4972 ]
  %5004 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5000, i64 0, i32 1, i32 0
  %5005 = load i32, i32* %5004, align 4
  %5006 = icmp eq i32 %5005, 0
  br i1 %5006, label %5096, label %5007

5007:                                             ; preds = %4998
  %5008 = load float*, float** %4970, align 8
  br label %5009

5009:                                             ; preds = %5009, %5007
  %5010 = phi i32 [ %5033, %5009 ], [ 0, %5007 ]
  %5011 = phi i8* [ %5031, %5009 ], [ %5003, %5007 ]
  %5012 = phi float* [ %5032, %5009 ], [ %5008, %5007 ]
  %5013 = getelementptr inbounds i8, i8* %5011, i64 2
  %5014 = load i8, i8* %5013, align 1
  %5015 = uitofp i8 %5014 to float
  %5016 = fmul float %5015, 0x3F70101020000000
  store float %5016, float* %5012, align 4
  %5017 = getelementptr inbounds i8, i8* %5011, i64 1
  %5018 = load i8, i8* %5017, align 1
  %5019 = uitofp i8 %5018 to float
  %5020 = fmul float %5019, 0x3F70101020000000
  %5021 = getelementptr inbounds float, float* %5012, i64 1
  store float %5020, float* %5021, align 4
  %5022 = load i8, i8* %5011, align 1
  %5023 = uitofp i8 %5022 to float
  %5024 = fmul float %5023, 0x3F70101020000000
  %5025 = getelementptr inbounds float, float* %5012, i64 2
  store float %5024, float* %5025, align 4
  %5026 = getelementptr inbounds i8, i8* %5011, i64 3
  %5027 = load i8, i8* %5026, align 1
  %5028 = uitofp i8 %5027 to float
  %5029 = fmul float %5028, 0x3F70101020000000
  %5030 = getelementptr inbounds float, float* %5012, i64 3
  store float %5029, float* %5030, align 4
  %5031 = getelementptr inbounds i8, i8* %5011, i64 4
  %5032 = getelementptr inbounds float, float* %5012, i64 4
  %5033 = add nuw i32 %5010, 1
  %5034 = icmp eq i32 %5033, %5005
  br i1 %5034, label %5035, label %5009

5035:                                             ; preds = %5009
  %5036 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4937, align 8
  %5037 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5036, i64 0, i32 1, i32 0
  %5038 = load i32, i32* %5037, align 4
  %5039 = icmp eq i32 %5038, 0
  br i1 %5039, label %5096, label %5040

5040:                                             ; preds = %5035
  %5041 = load float*, float** %4970, align 8
  %5042 = and i32 %5038, 1
  %5043 = icmp eq i32 %5038, 1
  br i1 %5043, label %5078, label %5044

5044:                                             ; preds = %5040
  %5045 = sub i32 %5038, %5042
  br label %5046

5046:                                             ; preds = %5046, %5044
  %5047 = phi float* [ %5041, %5044 ], [ %5074, %5046 ]
  %5048 = phi float* [ %5002, %5044 ], [ %5075, %5046 ]
  %5049 = phi i32 [ %5045, %5044 ], [ %5076, %5046 ]
  %5050 = getelementptr inbounds float, float* %5047, i64 3
  %5051 = load float, float* %5050, align 4
  %5052 = fcmp une float %5051, 0.000000e+00
  %5053 = fdiv float 1.000000e+00, %5051
  %5054 = select i1 %5052, float %5053, float 1.000000e+00
  %5055 = load float, float* %5047, align 4
  %5056 = fmul float %5055, %5054
  store float %5056, float* %5048, align 4
  %5057 = bitcast float* %5050 to i32*
  %5058 = load i32, i32* %5057, align 4
  %5059 = getelementptr inbounds float, float* %5048, i64 1
  %5060 = bitcast float* %5059 to i32*
  store i32 %5058, i32* %5060, align 4
  %5061 = getelementptr inbounds float, float* %5047, i64 4
  %5062 = getelementptr inbounds float, float* %5048, i64 2
  %5063 = getelementptr inbounds float, float* %5047, i64 7
  %5064 = load float, float* %5063, align 4
  %5065 = fcmp une float %5064, 0.000000e+00
  %5066 = fdiv float 1.000000e+00, %5064
  %5067 = select i1 %5065, float %5066, float 1.000000e+00
  %5068 = load float, float* %5061, align 4
  %5069 = fmul float %5068, %5067
  store float %5069, float* %5062, align 4
  %5070 = bitcast float* %5063 to i32*
  %5071 = load i32, i32* %5070, align 4
  %5072 = getelementptr inbounds float, float* %5048, i64 3
  %5073 = bitcast float* %5072 to i32*
  store i32 %5071, i32* %5073, align 4
  %5074 = getelementptr inbounds float, float* %5047, i64 8
  %5075 = getelementptr inbounds float, float* %5048, i64 4
  %5076 = add i32 %5049, -2
  %5077 = icmp eq i32 %5076, 0
  br i1 %5077, label %5078, label %5046

5078:                                             ; preds = %5046, %5040
  %5079 = phi float* [ %5041, %5040 ], [ %5074, %5046 ]
  %5080 = phi float* [ %5002, %5040 ], [ %5075, %5046 ]
  %5081 = icmp eq i32 %5042, 0
  br i1 %5081, label %5094, label %5082

5082:                                             ; preds = %5078
  %5083 = getelementptr inbounds float, float* %5079, i64 3
  %5084 = load float, float* %5083, align 4
  %5085 = fcmp une float %5084, 0.000000e+00
  %5086 = fdiv float 1.000000e+00, %5084
  %5087 = select i1 %5085, float %5086, float 1.000000e+00
  %5088 = load float, float* %5079, align 4
  %5089 = fmul float %5088, %5087
  store float %5089, float* %5080, align 4
  %5090 = bitcast float* %5083 to i32*
  %5091 = load i32, i32* %5090, align 4
  %5092 = getelementptr inbounds float, float* %5080, i64 1
  %5093 = bitcast float* %5092 to i32*
  store i32 %5091, i32* %5093, align 4
  br label %5094

5094:                                             ; preds = %5078, %5082
  %5095 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4937, align 8
  br label %5096

5096:                                             ; preds = %5094, %5035, %4998
  %5097 = phi %"class.blink::IntRect"* [ %5095, %5094 ], [ %5036, %5035 ], [ %4999, %4998 ]
  %5098 = getelementptr inbounds i8, i8* %5003, i64 %4930
  %5099 = getelementptr inbounds float, float* %5002, i64 %4934
  %5100 = add nuw nsw i32 %5001, 1
  %5101 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5097, i64 0, i32 1, i32 1
  %5102 = load i32, i32* %5101, align 4
  %5103 = icmp slt i32 %5100, %5102
  br i1 %5103, label %4998, label %4982

5104:                                             ; preds = %4984, %4962
  %5105 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5105, align 4
  br label %15491

5106:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %5107
    i32 1, label %5388
    i32 2, label %5720
  ]

5107:                                             ; preds = %5106
  %5108 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5109 = load i32, i32* %5108, align 8
  %5110 = sext i32 %5109 to i64
  %5111 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5112 = load i32, i32* %5111, align 8
  %5113 = sext i32 %5112 to i64
  %5114 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5115 = load i8*, i8** %5114, align 8
  %5116 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5117 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5116, align 8
  %5118 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5117, i64 0, i32 0, i32 1
  %5119 = load i32, i32* %5118, align 4
  %5120 = mul nsw i32 %5119, %5109
  %5121 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5122 = load i32, i32* %5121, align 4
  %5123 = add nsw i32 %5120, %5122
  %5124 = sext i32 %5123 to i64
  %5125 = getelementptr inbounds i8, i8* %5115, i64 %5124
  %5126 = icmp slt i32 %5112, 0
  %5127 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5128 = load i32, i32* %5127, align 8
  %5129 = icmp sgt i32 %5128, 1
  %5130 = and i1 %5126, %5129
  br i1 %5130, label %5131, label %5141

5131:                                             ; preds = %5107
  %5132 = add nsw i32 %5128, -1
  %5133 = sext i32 %5132 to i64
  %5134 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5135 = load i32, i32* %5134, align 4
  %5136 = sext i32 %5135 to i64
  %5137 = mul nsw i64 %5110, %5133
  %5138 = mul i64 %5137, %5136
  %5139 = sub i64 0, %5138
  %5140 = getelementptr inbounds i8, i8* %5125, i64 %5139
  br label %5143

5141:                                             ; preds = %5107
  %5142 = icmp sgt i32 %5128, 0
  br i1 %5142, label %5143, label %5386

5143:                                             ; preds = %5141, %5131
  %5144 = phi i8* [ %5140, %5131 ], [ %5125, %5141 ]
  %5145 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5146 = load i8*, i8** %5145, align 8
  %5147 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5148 = bitcast i8** %5147 to i32**
  %5149 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5150

5150:                                             ; preds = %5161, %5143
  %5151 = phi i32 [ %5128, %5143 ], [ %5162, %5161 ]
  %5152 = phi %"class.blink::IntRect"* [ %5117, %5143 ], [ %5163, %5161 ]
  %5153 = phi i32 [ 0, %5143 ], [ %5172, %5161 ]
  %5154 = phi i8* [ %5146, %5143 ], [ %5165, %5161 ]
  %5155 = phi i8* [ %5144, %5143 ], [ %5171, %5161 ]
  %5156 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5152, i64 0, i32 1, i32 1
  %5157 = load i32, i32* %5156, align 4
  %5158 = icmp sgt i32 %5157, 0
  br i1 %5158, label %5174, label %5161

5159:                                             ; preds = %5378
  %5160 = load i32, i32* %5127, align 8
  br label %5161

5161:                                             ; preds = %5159, %5150
  %5162 = phi i32 [ %5151, %5150 ], [ %5160, %5159 ]
  %5163 = phi %"class.blink::IntRect"* [ %5152, %5150 ], [ %5379, %5159 ]
  %5164 = phi i8* [ %5155, %5150 ], [ %5380, %5159 ]
  %5165 = phi i8* [ %5154, %5150 ], [ %5381, %5159 ]
  %5166 = phi i32 [ %5157, %5150 ], [ %5384, %5159 ]
  %5167 = load i32, i32* %5149, align 4
  %5168 = sub nsw i32 %5167, %5166
  %5169 = sext i32 %5168 to i64
  %5170 = mul nsw i64 %5169, %5110
  %5171 = getelementptr inbounds i8, i8* %5164, i64 %5170
  %5172 = add nuw nsw i32 %5153, 1
  %5173 = icmp slt i32 %5172, %5162
  br i1 %5173, label %5150, label %5386

5174:                                             ; preds = %5150, %5378
  %5175 = phi %"class.blink::IntRect"* [ %5379, %5378 ], [ %5152, %5150 ]
  %5176 = phi i32 [ %5382, %5378 ], [ 0, %5150 ]
  %5177 = phi i8* [ %5381, %5378 ], [ %5154, %5150 ]
  %5178 = phi i8* [ %5380, %5378 ], [ %5155, %5150 ]
  %5179 = load i32*, i32** %5148, align 8
  %5180 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5175, i64 0, i32 1, i32 0
  %5181 = load i32, i32* %5180, align 4
  %5182 = bitcast i8* %5178 to i32*
  %5183 = and i32 %5181, -4
  %5184 = icmp eq i32 %5183, 0
  br i1 %5184, label %5242, label %5185

5185:                                             ; preds = %5174
  %5186 = add i32 %5183, -1
  %5187 = lshr i32 %5186, 2
  %5188 = add nuw nsw i32 %5187, 1
  %5189 = and i32 %5188, 1
  %5190 = icmp eq i32 %5187, 0
  br i1 %5190, label %5223, label %5191

5191:                                             ; preds = %5185
  %5192 = sub nuw nsw i32 %5188, %5189
  br label %5193

5193:                                             ; preds = %5193, %5191
  %5194 = phi i32* [ %5182, %5191 ], [ %5219, %5193 ]
  %5195 = phi i32* [ %5179, %5191 ], [ %5220, %5193 ]
  %5196 = phi i32 [ %5192, %5191 ], [ %5221, %5193 ]
  %5197 = bitcast i32* %5195 to <2 x i64>*
  %5198 = bitcast i32* %5194 to <2 x i64>*
  %5199 = load <2 x i64>, <2 x i64>* %5198, align 1
  %5200 = bitcast <2 x i64> %5199 to <8 x i16>
  %5201 = shufflevector <8 x i16> %5200, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5202 = shufflevector <8 x i16> %5201, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5203 = bitcast <8 x i16> %5202 to <2 x i64>
  %5204 = and <2 x i64> %5203, <i64 71777214294589695, i64 71777214294589695>
  %5205 = and <2 x i64> %5199, <i64 -71777214294589696, i64 -71777214294589696>
  %5206 = or <2 x i64> %5204, %5205
  store <2 x i64> %5206, <2 x i64>* %5197, align 1
  %5207 = getelementptr inbounds i32, i32* %5194, i64 4
  %5208 = getelementptr inbounds i32, i32* %5195, i64 4
  %5209 = bitcast i32* %5208 to <2 x i64>*
  %5210 = bitcast i32* %5207 to <2 x i64>*
  %5211 = load <2 x i64>, <2 x i64>* %5210, align 1
  %5212 = bitcast <2 x i64> %5211 to <8 x i16>
  %5213 = shufflevector <8 x i16> %5212, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5214 = shufflevector <8 x i16> %5213, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5215 = bitcast <8 x i16> %5214 to <2 x i64>
  %5216 = and <2 x i64> %5215, <i64 71777214294589695, i64 71777214294589695>
  %5217 = and <2 x i64> %5211, <i64 -71777214294589696, i64 -71777214294589696>
  %5218 = or <2 x i64> %5216, %5217
  store <2 x i64> %5218, <2 x i64>* %5209, align 1
  %5219 = getelementptr inbounds i32, i32* %5194, i64 8
  %5220 = getelementptr inbounds i32, i32* %5195, i64 8
  %5221 = add i32 %5196, -2
  %5222 = icmp eq i32 %5221, 0
  br i1 %5222, label %5223, label %5193

5223:                                             ; preds = %5193, %5185
  %5224 = phi i32* [ undef, %5185 ], [ %5219, %5193 ]
  %5225 = phi i32* [ undef, %5185 ], [ %5220, %5193 ]
  %5226 = phi i32* [ %5182, %5185 ], [ %5219, %5193 ]
  %5227 = phi i32* [ %5179, %5185 ], [ %5220, %5193 ]
  %5228 = icmp eq i32 %5189, 0
  br i1 %5228, label %5242, label %5229

5229:                                             ; preds = %5223
  %5230 = bitcast i32* %5227 to <2 x i64>*
  %5231 = bitcast i32* %5226 to <2 x i64>*
  %5232 = load <2 x i64>, <2 x i64>* %5231, align 1
  %5233 = bitcast <2 x i64> %5232 to <8 x i16>
  %5234 = shufflevector <8 x i16> %5233, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5235 = shufflevector <8 x i16> %5234, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5236 = bitcast <8 x i16> %5235 to <2 x i64>
  %5237 = and <2 x i64> %5236, <i64 71777214294589695, i64 71777214294589695>
  %5238 = and <2 x i64> %5232, <i64 -71777214294589696, i64 -71777214294589696>
  %5239 = or <2 x i64> %5237, %5238
  store <2 x i64> %5239, <2 x i64>* %5230, align 1
  %5240 = getelementptr inbounds i32, i32* %5227, i64 4
  %5241 = getelementptr inbounds i32, i32* %5226, i64 4
  br label %5242

5242:                                             ; preds = %5229, %5223, %5174
  %5243 = phi i32* [ %5182, %5174 ], [ %5224, %5223 ], [ %5241, %5229 ]
  %5244 = phi i32* [ %5179, %5174 ], [ %5225, %5223 ], [ %5240, %5229 ]
  %5245 = sub i32 %5181, %5183
  %5246 = icmp eq i32 %5245, 0
  br i1 %5246, label %5329, label %5247

5247:                                             ; preds = %5242
  %5248 = zext i32 %5245 to i64
  %5249 = icmp ult i32 %5245, 8
  br i1 %5249, label %5286, label %5250

5250:                                             ; preds = %5247
  %5251 = getelementptr i32, i32* %5244, i64 %5248
  %5252 = getelementptr i32, i32* %5243, i64 %5248
  %5253 = icmp ult i32* %5244, %5252
  %5254 = icmp ult i32* %5243, %5251
  %5255 = and i1 %5253, %5254
  br i1 %5255, label %5286, label %5256

5256:                                             ; preds = %5250
  %5257 = and i64 %5248, 4294967288
  br label %5258

5258:                                             ; preds = %5258, %5256
  %5259 = phi i64 [ 0, %5256 ], [ %5282, %5258 ]
  %5260 = getelementptr inbounds i32, i32* %5243, i64 %5259
  %5261 = bitcast i32* %5260 to <4 x i32>*
  %5262 = load <4 x i32>, <4 x i32>* %5261, align 4, !alias.scope !380
  %5263 = getelementptr inbounds i32, i32* %5260, i64 4
  %5264 = bitcast i32* %5263 to <4 x i32>*
  %5265 = load <4 x i32>, <4 x i32>* %5264, align 4, !alias.scope !380
  %5266 = lshr <4 x i32> %5262, <i32 16, i32 16, i32 16, i32 16>
  %5267 = lshr <4 x i32> %5265, <i32 16, i32 16, i32 16, i32 16>
  %5268 = shl <4 x i32> %5262, <i32 16, i32 16, i32 16, i32 16>
  %5269 = shl <4 x i32> %5265, <i32 16, i32 16, i32 16, i32 16>
  %5270 = or <4 x i32> %5266, %5268
  %5271 = or <4 x i32> %5267, %5269
  %5272 = and <4 x i32> %5270, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5273 = and <4 x i32> %5271, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5274 = and <4 x i32> %5262, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5275 = and <4 x i32> %5265, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5276 = or <4 x i32> %5272, %5274
  %5277 = or <4 x i32> %5273, %5275
  %5278 = getelementptr inbounds i32, i32* %5244, i64 %5259
  %5279 = bitcast i32* %5278 to <4 x i32>*
  store <4 x i32> %5276, <4 x i32>* %5279, align 4, !alias.scope !383, !noalias !380
  %5280 = getelementptr inbounds i32, i32* %5278, i64 4
  %5281 = bitcast i32* %5280 to <4 x i32>*
  store <4 x i32> %5277, <4 x i32>* %5281, align 4, !alias.scope !383, !noalias !380
  %5282 = add i64 %5259, 8
  %5283 = icmp eq i64 %5282, %5257
  br i1 %5283, label %5284, label %5258, !llvm.loop !385

5284:                                             ; preds = %5258
  %5285 = icmp eq i64 %5257, %5248
  br i1 %5285, label %5329, label %5286

5286:                                             ; preds = %5284, %5250, %5247
  %5287 = phi i64 [ 0, %5250 ], [ 0, %5247 ], [ %5257, %5284 ]
  %5288 = xor i64 %5287, -1
  %5289 = and i64 %5248, 1
  %5290 = icmp eq i64 %5289, 0
  br i1 %5290, label %5302, label %5291

5291:                                             ; preds = %5286
  %5292 = getelementptr inbounds i32, i32* %5243, i64 %5287
  %5293 = load i32, i32* %5292, align 4
  %5294 = lshr i32 %5293, 16
  %5295 = shl i32 %5293, 16
  %5296 = or i32 %5294, %5295
  %5297 = and i32 %5296, 16711935
  %5298 = and i32 %5293, -16711936
  %5299 = or i32 %5297, %5298
  %5300 = getelementptr inbounds i32, i32* %5244, i64 %5287
  store i32 %5299, i32* %5300, align 4
  %5301 = or i64 %5287, 1
  br label %5302

5302:                                             ; preds = %5291, %5286
  %5303 = phi i64 [ %5301, %5291 ], [ %5287, %5286 ]
  %5304 = sub nsw i64 0, %5248
  %5305 = icmp eq i64 %5288, %5304
  br i1 %5305, label %5329, label %5306

5306:                                             ; preds = %5302, %5306
  %5307 = phi i64 [ %5327, %5306 ], [ %5303, %5302 ]
  %5308 = getelementptr inbounds i32, i32* %5243, i64 %5307
  %5309 = load i32, i32* %5308, align 4
  %5310 = lshr i32 %5309, 16
  %5311 = shl i32 %5309, 16
  %5312 = or i32 %5310, %5311
  %5313 = and i32 %5312, 16711935
  %5314 = and i32 %5309, -16711936
  %5315 = or i32 %5313, %5314
  %5316 = getelementptr inbounds i32, i32* %5244, i64 %5307
  store i32 %5315, i32* %5316, align 4
  %5317 = add nuw nsw i64 %5307, 1
  %5318 = getelementptr inbounds i32, i32* %5243, i64 %5317
  %5319 = load i32, i32* %5318, align 4
  %5320 = lshr i32 %5319, 16
  %5321 = shl i32 %5319, 16
  %5322 = or i32 %5320, %5321
  %5323 = and i32 %5322, 16711935
  %5324 = and i32 %5319, -16711936
  %5325 = or i32 %5323, %5324
  %5326 = getelementptr inbounds i32, i32* %5244, i64 %5317
  store i32 %5325, i32* %5326, align 4
  %5327 = add nuw nsw i64 %5307, 2
  %5328 = icmp eq i64 %5327, %5248
  br i1 %5328, label %5329, label %5306, !llvm.loop !386

5329:                                             ; preds = %5302, %5306, %5284, %5242
  %5330 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5116, align 8
  %5331 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5330, i64 0, i32 1, i32 0
  %5332 = load i32, i32* %5331, align 4
  %5333 = icmp eq i32 %5332, 0
  br i1 %5333, label %5378, label %5334

5334:                                             ; preds = %5329
  %5335 = load i8*, i8** %5147, align 8
  %5336 = and i32 %5332, 1
  %5337 = icmp eq i32 %5332, 1
  br i1 %5337, label %5364, label %5338

5338:                                             ; preds = %5334
  %5339 = sub i32 %5332, %5336
  br label %5340

5340:                                             ; preds = %5340, %5338
  %5341 = phi i8* [ %5335, %5338 ], [ %5360, %5340 ]
  %5342 = phi i8* [ %5177, %5338 ], [ %5361, %5340 ]
  %5343 = phi i32 [ %5339, %5338 ], [ %5362, %5340 ]
  %5344 = load i8, i8* %5341, align 1
  store i8 %5344, i8* %5342, align 1
  %5345 = getelementptr inbounds i8, i8* %5341, i64 1
  %5346 = load i8, i8* %5345, align 1
  %5347 = getelementptr inbounds i8, i8* %5342, i64 1
  store i8 %5346, i8* %5347, align 1
  %5348 = getelementptr inbounds i8, i8* %5341, i64 2
  %5349 = load i8, i8* %5348, align 1
  %5350 = getelementptr inbounds i8, i8* %5342, i64 2
  store i8 %5349, i8* %5350, align 1
  %5351 = getelementptr inbounds i8, i8* %5341, i64 4
  %5352 = getelementptr inbounds i8, i8* %5342, i64 3
  %5353 = load i8, i8* %5351, align 1
  store i8 %5353, i8* %5352, align 1
  %5354 = getelementptr inbounds i8, i8* %5341, i64 5
  %5355 = load i8, i8* %5354, align 1
  %5356 = getelementptr inbounds i8, i8* %5342, i64 4
  store i8 %5355, i8* %5356, align 1
  %5357 = getelementptr inbounds i8, i8* %5341, i64 6
  %5358 = load i8, i8* %5357, align 1
  %5359 = getelementptr inbounds i8, i8* %5342, i64 5
  store i8 %5358, i8* %5359, align 1
  %5360 = getelementptr inbounds i8, i8* %5341, i64 8
  %5361 = getelementptr inbounds i8, i8* %5342, i64 6
  %5362 = add i32 %5343, -2
  %5363 = icmp eq i32 %5362, 0
  br i1 %5363, label %5364, label %5340

5364:                                             ; preds = %5340, %5334
  %5365 = phi i8* [ %5335, %5334 ], [ %5360, %5340 ]
  %5366 = phi i8* [ %5177, %5334 ], [ %5361, %5340 ]
  %5367 = icmp eq i32 %5336, 0
  br i1 %5367, label %5376, label %5368

5368:                                             ; preds = %5364
  %5369 = load i8, i8* %5365, align 1
  store i8 %5369, i8* %5366, align 1
  %5370 = getelementptr inbounds i8, i8* %5365, i64 1
  %5371 = load i8, i8* %5370, align 1
  %5372 = getelementptr inbounds i8, i8* %5366, i64 1
  store i8 %5371, i8* %5372, align 1
  %5373 = getelementptr inbounds i8, i8* %5365, i64 2
  %5374 = load i8, i8* %5373, align 1
  %5375 = getelementptr inbounds i8, i8* %5366, i64 2
  store i8 %5374, i8* %5375, align 1
  br label %5376

5376:                                             ; preds = %5364, %5368
  %5377 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5116, align 8
  br label %5378

5378:                                             ; preds = %5376, %5329
  %5379 = phi %"class.blink::IntRect"* [ %5377, %5376 ], [ %5330, %5329 ]
  %5380 = getelementptr inbounds i8, i8* %5178, i64 %5110
  %5381 = getelementptr inbounds i8, i8* %5177, i64 %5113
  %5382 = add nuw nsw i32 %5176, 1
  %5383 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5379, i64 0, i32 1, i32 1
  %5384 = load i32, i32* %5383, align 4
  %5385 = icmp slt i32 %5382, %5384
  br i1 %5385, label %5174, label %5159

5386:                                             ; preds = %5161, %5141
  %5387 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5387, align 4
  br label %15491

5388:                                             ; preds = %5106
  %5389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5390 = load i32, i32* %5389, align 8
  %5391 = sext i32 %5390 to i64
  %5392 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5393 = load i32, i32* %5392, align 8
  %5394 = sext i32 %5393 to i64
  %5395 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5396 = load i8*, i8** %5395, align 8
  %5397 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5398 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5397, align 8
  %5399 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5398, i64 0, i32 0, i32 1
  %5400 = load i32, i32* %5399, align 4
  %5401 = mul nsw i32 %5400, %5390
  %5402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5403 = load i32, i32* %5402, align 4
  %5404 = add nsw i32 %5401, %5403
  %5405 = sext i32 %5404 to i64
  %5406 = getelementptr inbounds i8, i8* %5396, i64 %5405
  %5407 = icmp slt i32 %5393, 0
  %5408 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5409 = load i32, i32* %5408, align 8
  %5410 = icmp sgt i32 %5409, 1
  %5411 = and i1 %5407, %5410
  br i1 %5411, label %5412, label %5422

5412:                                             ; preds = %5388
  %5413 = add nsw i32 %5409, -1
  %5414 = sext i32 %5413 to i64
  %5415 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5416 = load i32, i32* %5415, align 4
  %5417 = sext i32 %5416 to i64
  %5418 = mul nsw i64 %5391, %5414
  %5419 = mul i64 %5418, %5417
  %5420 = sub i64 0, %5419
  %5421 = getelementptr inbounds i8, i8* %5406, i64 %5420
  br label %5424

5422:                                             ; preds = %5388
  %5423 = icmp sgt i32 %5409, 0
  br i1 %5423, label %5424, label %5718

5424:                                             ; preds = %5422, %5412
  %5425 = phi i8* [ %5421, %5412 ], [ %5406, %5422 ]
  %5426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5427 = load i8*, i8** %5426, align 8
  %5428 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5429 = bitcast i8** %5428 to i32**
  %5430 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5431

5431:                                             ; preds = %5442, %5424
  %5432 = phi i32 [ %5409, %5424 ], [ %5443, %5442 ]
  %5433 = phi %"class.blink::IntRect"* [ %5398, %5424 ], [ %5444, %5442 ]
  %5434 = phi i32 [ 0, %5424 ], [ %5453, %5442 ]
  %5435 = phi i8* [ %5427, %5424 ], [ %5446, %5442 ]
  %5436 = phi i8* [ %5425, %5424 ], [ %5452, %5442 ]
  %5437 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5433, i64 0, i32 1, i32 1
  %5438 = load i32, i32* %5437, align 4
  %5439 = icmp sgt i32 %5438, 0
  br i1 %5439, label %5455, label %5442

5440:                                             ; preds = %5709
  %5441 = load i32, i32* %5408, align 8
  br label %5442

5442:                                             ; preds = %5440, %5431
  %5443 = phi i32 [ %5432, %5431 ], [ %5441, %5440 ]
  %5444 = phi %"class.blink::IntRect"* [ %5433, %5431 ], [ %5710, %5440 ]
  %5445 = phi i8* [ %5436, %5431 ], [ %5711, %5440 ]
  %5446 = phi i8* [ %5435, %5431 ], [ %5712, %5440 ]
  %5447 = phi i32 [ %5438, %5431 ], [ %5715, %5440 ]
  %5448 = load i32, i32* %5430, align 4
  %5449 = sub nsw i32 %5448, %5447
  %5450 = sext i32 %5449 to i64
  %5451 = mul nsw i64 %5450, %5391
  %5452 = getelementptr inbounds i8, i8* %5445, i64 %5451
  %5453 = add nuw nsw i32 %5434, 1
  %5454 = icmp slt i32 %5453, %5443
  br i1 %5454, label %5431, label %5718

5455:                                             ; preds = %5431, %5709
  %5456 = phi i64 [ %5717, %5709 ], [ 0, %5431 ]
  %5457 = phi %"class.blink::IntRect"* [ %5710, %5709 ], [ %5433, %5431 ]
  %5458 = phi i32 [ %5713, %5709 ], [ 0, %5431 ]
  %5459 = phi i8* [ %5712, %5709 ], [ %5435, %5431 ]
  %5460 = phi i8* [ %5711, %5709 ], [ %5436, %5431 ]
  %5461 = mul i64 %5456, %5394
  %5462 = getelementptr i8, i8* %5435, i64 %5461
  %5463 = add i64 %5461, 3
  %5464 = getelementptr i8, i8* %5435, i64 %5463
  %5465 = load i32*, i32** %5429, align 8
  %5466 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5457, i64 0, i32 1, i32 0
  %5467 = load i32, i32* %5466, align 4
  %5468 = bitcast i8* %5460 to i32*
  %5469 = and i32 %5467, -4
  %5470 = icmp eq i32 %5469, 0
  br i1 %5470, label %5528, label %5471

5471:                                             ; preds = %5455
  %5472 = add i32 %5469, -1
  %5473 = lshr i32 %5472, 2
  %5474 = add nuw nsw i32 %5473, 1
  %5475 = and i32 %5474, 1
  %5476 = icmp eq i32 %5473, 0
  br i1 %5476, label %5509, label %5477

5477:                                             ; preds = %5471
  %5478 = sub nuw nsw i32 %5474, %5475
  br label %5479

5479:                                             ; preds = %5479, %5477
  %5480 = phi i32* [ %5468, %5477 ], [ %5505, %5479 ]
  %5481 = phi i32* [ %5465, %5477 ], [ %5506, %5479 ]
  %5482 = phi i32 [ %5478, %5477 ], [ %5507, %5479 ]
  %5483 = bitcast i32* %5481 to <2 x i64>*
  %5484 = bitcast i32* %5480 to <2 x i64>*
  %5485 = load <2 x i64>, <2 x i64>* %5484, align 1
  %5486 = bitcast <2 x i64> %5485 to <8 x i16>
  %5487 = shufflevector <8 x i16> %5486, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5488 = shufflevector <8 x i16> %5487, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5489 = bitcast <8 x i16> %5488 to <2 x i64>
  %5490 = and <2 x i64> %5489, <i64 71777214294589695, i64 71777214294589695>
  %5491 = and <2 x i64> %5485, <i64 -71777214294589696, i64 -71777214294589696>
  %5492 = or <2 x i64> %5490, %5491
  store <2 x i64> %5492, <2 x i64>* %5483, align 1
  %5493 = getelementptr inbounds i32, i32* %5480, i64 4
  %5494 = getelementptr inbounds i32, i32* %5481, i64 4
  %5495 = bitcast i32* %5494 to <2 x i64>*
  %5496 = bitcast i32* %5493 to <2 x i64>*
  %5497 = load <2 x i64>, <2 x i64>* %5496, align 1
  %5498 = bitcast <2 x i64> %5497 to <8 x i16>
  %5499 = shufflevector <8 x i16> %5498, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5500 = shufflevector <8 x i16> %5499, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5501 = bitcast <8 x i16> %5500 to <2 x i64>
  %5502 = and <2 x i64> %5501, <i64 71777214294589695, i64 71777214294589695>
  %5503 = and <2 x i64> %5497, <i64 -71777214294589696, i64 -71777214294589696>
  %5504 = or <2 x i64> %5502, %5503
  store <2 x i64> %5504, <2 x i64>* %5495, align 1
  %5505 = getelementptr inbounds i32, i32* %5480, i64 8
  %5506 = getelementptr inbounds i32, i32* %5481, i64 8
  %5507 = add i32 %5482, -2
  %5508 = icmp eq i32 %5507, 0
  br i1 %5508, label %5509, label %5479

5509:                                             ; preds = %5479, %5471
  %5510 = phi i32* [ undef, %5471 ], [ %5505, %5479 ]
  %5511 = phi i32* [ undef, %5471 ], [ %5506, %5479 ]
  %5512 = phi i32* [ %5468, %5471 ], [ %5505, %5479 ]
  %5513 = phi i32* [ %5465, %5471 ], [ %5506, %5479 ]
  %5514 = icmp eq i32 %5475, 0
  br i1 %5514, label %5528, label %5515

5515:                                             ; preds = %5509
  %5516 = bitcast i32* %5513 to <2 x i64>*
  %5517 = bitcast i32* %5512 to <2 x i64>*
  %5518 = load <2 x i64>, <2 x i64>* %5517, align 1
  %5519 = bitcast <2 x i64> %5518 to <8 x i16>
  %5520 = shufflevector <8 x i16> %5519, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5521 = shufflevector <8 x i16> %5520, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5522 = bitcast <8 x i16> %5521 to <2 x i64>
  %5523 = and <2 x i64> %5522, <i64 71777214294589695, i64 71777214294589695>
  %5524 = and <2 x i64> %5518, <i64 -71777214294589696, i64 -71777214294589696>
  %5525 = or <2 x i64> %5523, %5524
  store <2 x i64> %5525, <2 x i64>* %5516, align 1
  %5526 = getelementptr inbounds i32, i32* %5513, i64 4
  %5527 = getelementptr inbounds i32, i32* %5512, i64 4
  br label %5528

5528:                                             ; preds = %5515, %5509, %5455
  %5529 = phi i32* [ %5468, %5455 ], [ %5510, %5509 ], [ %5527, %5515 ]
  %5530 = phi i32* [ %5465, %5455 ], [ %5511, %5509 ], [ %5526, %5515 ]
  %5531 = sub i32 %5467, %5469
  %5532 = icmp eq i32 %5531, 0
  br i1 %5532, label %5615, label %5533

5533:                                             ; preds = %5528
  %5534 = zext i32 %5531 to i64
  %5535 = icmp ult i32 %5531, 8
  br i1 %5535, label %5572, label %5536

5536:                                             ; preds = %5533
  %5537 = getelementptr i32, i32* %5530, i64 %5534
  %5538 = getelementptr i32, i32* %5529, i64 %5534
  %5539 = icmp ult i32* %5530, %5538
  %5540 = icmp ult i32* %5529, %5537
  %5541 = and i1 %5539, %5540
  br i1 %5541, label %5572, label %5542

5542:                                             ; preds = %5536
  %5543 = and i64 %5534, 4294967288
  br label %5544

5544:                                             ; preds = %5544, %5542
  %5545 = phi i64 [ 0, %5542 ], [ %5568, %5544 ]
  %5546 = getelementptr inbounds i32, i32* %5529, i64 %5545
  %5547 = bitcast i32* %5546 to <4 x i32>*
  %5548 = load <4 x i32>, <4 x i32>* %5547, align 4, !alias.scope !387
  %5549 = getelementptr inbounds i32, i32* %5546, i64 4
  %5550 = bitcast i32* %5549 to <4 x i32>*
  %5551 = load <4 x i32>, <4 x i32>* %5550, align 4, !alias.scope !387
  %5552 = lshr <4 x i32> %5548, <i32 16, i32 16, i32 16, i32 16>
  %5553 = lshr <4 x i32> %5551, <i32 16, i32 16, i32 16, i32 16>
  %5554 = shl <4 x i32> %5548, <i32 16, i32 16, i32 16, i32 16>
  %5555 = shl <4 x i32> %5551, <i32 16, i32 16, i32 16, i32 16>
  %5556 = or <4 x i32> %5552, %5554
  %5557 = or <4 x i32> %5553, %5555
  %5558 = and <4 x i32> %5556, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5559 = and <4 x i32> %5557, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5560 = and <4 x i32> %5548, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5561 = and <4 x i32> %5551, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5562 = or <4 x i32> %5558, %5560
  %5563 = or <4 x i32> %5559, %5561
  %5564 = getelementptr inbounds i32, i32* %5530, i64 %5545
  %5565 = bitcast i32* %5564 to <4 x i32>*
  store <4 x i32> %5562, <4 x i32>* %5565, align 4, !alias.scope !390, !noalias !387
  %5566 = getelementptr inbounds i32, i32* %5564, i64 4
  %5567 = bitcast i32* %5566 to <4 x i32>*
  store <4 x i32> %5563, <4 x i32>* %5567, align 4, !alias.scope !390, !noalias !387
  %5568 = add i64 %5545, 8
  %5569 = icmp eq i64 %5568, %5543
  br i1 %5569, label %5570, label %5544, !llvm.loop !392

5570:                                             ; preds = %5544
  %5571 = icmp eq i64 %5543, %5534
  br i1 %5571, label %5615, label %5572

5572:                                             ; preds = %5570, %5536, %5533
  %5573 = phi i64 [ 0, %5536 ], [ 0, %5533 ], [ %5543, %5570 ]
  %5574 = xor i64 %5573, -1
  %5575 = and i64 %5534, 1
  %5576 = icmp eq i64 %5575, 0
  br i1 %5576, label %5588, label %5577

5577:                                             ; preds = %5572
  %5578 = getelementptr inbounds i32, i32* %5529, i64 %5573
  %5579 = load i32, i32* %5578, align 4
  %5580 = lshr i32 %5579, 16
  %5581 = shl i32 %5579, 16
  %5582 = or i32 %5580, %5581
  %5583 = and i32 %5582, 16711935
  %5584 = and i32 %5579, -16711936
  %5585 = or i32 %5583, %5584
  %5586 = getelementptr inbounds i32, i32* %5530, i64 %5573
  store i32 %5585, i32* %5586, align 4
  %5587 = or i64 %5573, 1
  br label %5588

5588:                                             ; preds = %5577, %5572
  %5589 = phi i64 [ %5587, %5577 ], [ %5573, %5572 ]
  %5590 = sub nsw i64 0, %5534
  %5591 = icmp eq i64 %5574, %5590
  br i1 %5591, label %5615, label %5592

5592:                                             ; preds = %5588, %5592
  %5593 = phi i64 [ %5613, %5592 ], [ %5589, %5588 ]
  %5594 = getelementptr inbounds i32, i32* %5529, i64 %5593
  %5595 = load i32, i32* %5594, align 4
  %5596 = lshr i32 %5595, 16
  %5597 = shl i32 %5595, 16
  %5598 = or i32 %5596, %5597
  %5599 = and i32 %5598, 16711935
  %5600 = and i32 %5595, -16711936
  %5601 = or i32 %5599, %5600
  %5602 = getelementptr inbounds i32, i32* %5530, i64 %5593
  store i32 %5601, i32* %5602, align 4
  %5603 = add nuw nsw i64 %5593, 1
  %5604 = getelementptr inbounds i32, i32* %5529, i64 %5603
  %5605 = load i32, i32* %5604, align 4
  %5606 = lshr i32 %5605, 16
  %5607 = shl i32 %5605, 16
  %5608 = or i32 %5606, %5607
  %5609 = and i32 %5608, 16711935
  %5610 = and i32 %5605, -16711936
  %5611 = or i32 %5609, %5610
  %5612 = getelementptr inbounds i32, i32* %5530, i64 %5603
  store i32 %5611, i32* %5612, align 4
  %5613 = add nuw nsw i64 %5593, 2
  %5614 = icmp eq i64 %5613, %5534
  br i1 %5614, label %5615, label %5592, !llvm.loop !393

5615:                                             ; preds = %5588, %5592, %5570, %5528
  %5616 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5397, align 8
  %5617 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5616, i64 0, i32 1, i32 0
  %5618 = load i32, i32* %5617, align 4
  %5619 = icmp eq i32 %5618, 0
  br i1 %5619, label %5709, label %5620

5620:                                             ; preds = %5615
  %5621 = load i8*, i8** %5428, align 8
  %5622 = add i32 %5618, -1
  %5623 = zext i32 %5622 to i64
  %5624 = add nuw nsw i64 %5623, 1
  %5625 = icmp ult i64 %5624, 16
  br i1 %5625, label %5675, label %5626

5626:                                             ; preds = %5620
  %5627 = add i32 %5618, -1
  %5628 = zext i32 %5627 to i64
  %5629 = mul nuw nsw i64 %5628, 3
  %5630 = getelementptr i8, i8* %5464, i64 %5629
  %5631 = getelementptr i8, i8* %5621, i64 4
  %5632 = shl nuw nsw i64 %5628, 2
  %5633 = getelementptr i8, i8* %5631, i64 %5632
  %5634 = icmp ult i8* %5462, %5633
  %5635 = icmp ult i8* %5621, %5630
  %5636 = and i1 %5634, %5635
  br i1 %5636, label %5675, label %5637

5637:                                             ; preds = %5626
  %5638 = and i64 %5624, 8589934576
  %5639 = shl nuw nsw i64 %5638, 2
  %5640 = getelementptr i8, i8* %5621, i64 %5639
  %5641 = mul nuw nsw i64 %5638, 3
  %5642 = getelementptr i8, i8* %5459, i64 %5641
  %5643 = trunc i64 %5638 to i32
  br label %5644

5644:                                             ; preds = %5644, %5637
  %5645 = phi i64 [ 0, %5637 ], [ %5671, %5644 ]
  %5646 = shl i64 %5645, 2
  %5647 = mul i64 %5645, 3
  %5648 = getelementptr inbounds i8, i8* %5621, i64 %5646
  %5649 = bitcast i8* %5648 to <64 x i8>*
  %5650 = load <64 x i8>, <64 x i8>* %5649, align 1
  %5651 = shufflevector <64 x i8> %5650, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %5652 = shufflevector <64 x i8> %5650, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %5653 = shufflevector <64 x i8> %5650, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %5654 = shufflevector <64 x i8> %5650, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %5655 = uitofp <16 x i8> %5654 to <16 x float>
  %5656 = fdiv <16 x float> %5655, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5657 = uitofp <16 x i8> %5651 to <16 x float>
  %5658 = fmul <16 x float> %5656, %5657
  %5659 = fptoui <16 x float> %5658 to <16 x i8>
  %5660 = uitofp <16 x i8> %5652 to <16 x float>
  %5661 = fmul <16 x float> %5656, %5660
  %5662 = fptoui <16 x float> %5661 to <16 x i8>
  %5663 = uitofp <16 x i8> %5653 to <16 x float>
  %5664 = fmul <16 x float> %5656, %5663
  %5665 = fptoui <16 x float> %5664 to <16 x i8>
  %5666 = getelementptr inbounds i8, i8* %5459, i64 %5647
  %5667 = bitcast i8* %5666 to <48 x i8>*
  %5668 = shufflevector <16 x i8> %5659, <16 x i8> %5662, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5669 = shufflevector <16 x i8> %5665, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5670 = shufflevector <32 x i8> %5668, <32 x i8> %5669, <48 x i32> <i32 0, i32 16, i32 32, i32 1, i32 17, i32 33, i32 2, i32 18, i32 34, i32 3, i32 19, i32 35, i32 4, i32 20, i32 36, i32 5, i32 21, i32 37, i32 6, i32 22, i32 38, i32 7, i32 23, i32 39, i32 8, i32 24, i32 40, i32 9, i32 25, i32 41, i32 10, i32 26, i32 42, i32 11, i32 27, i32 43, i32 12, i32 28, i32 44, i32 13, i32 29, i32 45, i32 14, i32 30, i32 46, i32 15, i32 31, i32 47>
  store <48 x i8> %5670, <48 x i8>* %5667, align 1
  %5671 = add i64 %5645, 16
  %5672 = icmp eq i64 %5671, %5638
  br i1 %5672, label %5673, label %5644, !llvm.loop !394

5673:                                             ; preds = %5644
  %5674 = icmp eq i64 %5624, %5638
  br i1 %5674, label %5707, label %5675

5675:                                             ; preds = %5673, %5626, %5620
  %5676 = phi i8* [ %5621, %5626 ], [ %5621, %5620 ], [ %5640, %5673 ]
  %5677 = phi i8* [ %5459, %5626 ], [ %5459, %5620 ], [ %5642, %5673 ]
  %5678 = phi i32 [ 0, %5626 ], [ 0, %5620 ], [ %5643, %5673 ]
  br label %5679

5679:                                             ; preds = %5675, %5679
  %5680 = phi i8* [ %5703, %5679 ], [ %5676, %5675 ]
  %5681 = phi i8* [ %5704, %5679 ], [ %5677, %5675 ]
  %5682 = phi i32 [ %5705, %5679 ], [ %5678, %5675 ]
  %5683 = getelementptr inbounds i8, i8* %5680, i64 3
  %5684 = load i8, i8* %5683, align 1
  %5685 = uitofp i8 %5684 to float
  %5686 = fdiv float %5685, 2.550000e+02
  %5687 = load i8, i8* %5680, align 1
  %5688 = uitofp i8 %5687 to float
  %5689 = fmul float %5686, %5688
  %5690 = fptoui float %5689 to i8
  %5691 = getelementptr inbounds i8, i8* %5680, i64 1
  %5692 = load i8, i8* %5691, align 1
  %5693 = uitofp i8 %5692 to float
  %5694 = fmul float %5686, %5693
  %5695 = fptoui float %5694 to i8
  %5696 = getelementptr inbounds i8, i8* %5680, i64 2
  %5697 = load i8, i8* %5696, align 1
  %5698 = uitofp i8 %5697 to float
  %5699 = fmul float %5686, %5698
  %5700 = fptoui float %5699 to i8
  store i8 %5690, i8* %5681, align 1
  %5701 = getelementptr inbounds i8, i8* %5681, i64 1
  store i8 %5695, i8* %5701, align 1
  %5702 = getelementptr inbounds i8, i8* %5681, i64 2
  store i8 %5700, i8* %5702, align 1
  %5703 = getelementptr inbounds i8, i8* %5680, i64 4
  %5704 = getelementptr inbounds i8, i8* %5681, i64 3
  %5705 = add nuw i32 %5682, 1
  %5706 = icmp eq i32 %5705, %5618
  br i1 %5706, label %5707, label %5679, !llvm.loop !395

5707:                                             ; preds = %5679, %5673
  %5708 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5397, align 8
  br label %5709

5709:                                             ; preds = %5707, %5615
  %5710 = phi %"class.blink::IntRect"* [ %5708, %5707 ], [ %5616, %5615 ]
  %5711 = getelementptr inbounds i8, i8* %5460, i64 %5391
  %5712 = getelementptr inbounds i8, i8* %5459, i64 %5394
  %5713 = add nuw nsw i32 %5458, 1
  %5714 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5710, i64 0, i32 1, i32 1
  %5715 = load i32, i32* %5714, align 4
  %5716 = icmp slt i32 %5713, %5715
  %5717 = add i64 %5456, 1
  br i1 %5716, label %5455, label %5440

5718:                                             ; preds = %5442, %5422
  %5719 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5719, align 4
  br label %15491

5720:                                             ; preds = %5106
  %5721 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5722 = load i32, i32* %5721, align 8
  %5723 = sext i32 %5722 to i64
  %5724 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5725 = load i32, i32* %5724, align 8
  %5726 = sext i32 %5725 to i64
  %5727 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5728 = load i8*, i8** %5727, align 8
  %5729 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5730 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5729, align 8
  %5731 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5730, i64 0, i32 0, i32 1
  %5732 = load i32, i32* %5731, align 4
  %5733 = mul nsw i32 %5732, %5722
  %5734 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5735 = load i32, i32* %5734, align 4
  %5736 = add nsw i32 %5733, %5735
  %5737 = sext i32 %5736 to i64
  %5738 = getelementptr inbounds i8, i8* %5728, i64 %5737
  %5739 = icmp slt i32 %5725, 0
  %5740 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5741 = load i32, i32* %5740, align 8
  %5742 = icmp sgt i32 %5741, 1
  %5743 = and i1 %5739, %5742
  br i1 %5743, label %5744, label %5754

5744:                                             ; preds = %5720
  %5745 = add nsw i32 %5741, -1
  %5746 = sext i32 %5745 to i64
  %5747 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5748 = load i32, i32* %5747, align 4
  %5749 = sext i32 %5748 to i64
  %5750 = mul nsw i64 %5723, %5746
  %5751 = mul i64 %5750, %5749
  %5752 = sub i64 0, %5751
  %5753 = getelementptr inbounds i8, i8* %5738, i64 %5752
  br label %5756

5754:                                             ; preds = %5720
  %5755 = icmp sgt i32 %5741, 0
  br i1 %5755, label %5756, label %5991

5756:                                             ; preds = %5754, %5744
  %5757 = phi i8* [ %5753, %5744 ], [ %5738, %5754 ]
  %5758 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5759 = load i8*, i8** %5758, align 8
  %5760 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5761 = bitcast i8** %5760 to i32**
  %5762 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5763

5763:                                             ; preds = %5774, %5756
  %5764 = phi i32 [ %5741, %5756 ], [ %5775, %5774 ]
  %5765 = phi %"class.blink::IntRect"* [ %5730, %5756 ], [ %5776, %5774 ]
  %5766 = phi i32 [ 0, %5756 ], [ %5785, %5774 ]
  %5767 = phi i8* [ %5759, %5756 ], [ %5778, %5774 ]
  %5768 = phi i8* [ %5757, %5756 ], [ %5784, %5774 ]
  %5769 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5765, i64 0, i32 1, i32 1
  %5770 = load i32, i32* %5769, align 4
  %5771 = icmp sgt i32 %5770, 0
  br i1 %5771, label %5787, label %5774

5772:                                             ; preds = %5983
  %5773 = load i32, i32* %5740, align 8
  br label %5774

5774:                                             ; preds = %5772, %5763
  %5775 = phi i32 [ %5764, %5763 ], [ %5773, %5772 ]
  %5776 = phi %"class.blink::IntRect"* [ %5765, %5763 ], [ %5984, %5772 ]
  %5777 = phi i8* [ %5768, %5763 ], [ %5985, %5772 ]
  %5778 = phi i8* [ %5767, %5763 ], [ %5986, %5772 ]
  %5779 = phi i32 [ %5770, %5763 ], [ %5989, %5772 ]
  %5780 = load i32, i32* %5762, align 4
  %5781 = sub nsw i32 %5780, %5779
  %5782 = sext i32 %5781 to i64
  %5783 = mul nsw i64 %5782, %5723
  %5784 = getelementptr inbounds i8, i8* %5777, i64 %5783
  %5785 = add nuw nsw i32 %5766, 1
  %5786 = icmp slt i32 %5785, %5775
  br i1 %5786, label %5763, label %5991

5787:                                             ; preds = %5763, %5983
  %5788 = phi %"class.blink::IntRect"* [ %5984, %5983 ], [ %5765, %5763 ]
  %5789 = phi i32 [ %5987, %5983 ], [ 0, %5763 ]
  %5790 = phi i8* [ %5986, %5983 ], [ %5767, %5763 ]
  %5791 = phi i8* [ %5985, %5983 ], [ %5768, %5763 ]
  %5792 = load i32*, i32** %5761, align 8
  %5793 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5788, i64 0, i32 1, i32 0
  %5794 = load i32, i32* %5793, align 4
  %5795 = bitcast i8* %5791 to i32*
  %5796 = and i32 %5794, -4
  %5797 = icmp eq i32 %5796, 0
  br i1 %5797, label %5855, label %5798

5798:                                             ; preds = %5787
  %5799 = add i32 %5796, -1
  %5800 = lshr i32 %5799, 2
  %5801 = add nuw nsw i32 %5800, 1
  %5802 = and i32 %5801, 1
  %5803 = icmp eq i32 %5800, 0
  br i1 %5803, label %5836, label %5804

5804:                                             ; preds = %5798
  %5805 = sub nuw nsw i32 %5801, %5802
  br label %5806

5806:                                             ; preds = %5806, %5804
  %5807 = phi i32* [ %5795, %5804 ], [ %5832, %5806 ]
  %5808 = phi i32* [ %5792, %5804 ], [ %5833, %5806 ]
  %5809 = phi i32 [ %5805, %5804 ], [ %5834, %5806 ]
  %5810 = bitcast i32* %5808 to <2 x i64>*
  %5811 = bitcast i32* %5807 to <2 x i64>*
  %5812 = load <2 x i64>, <2 x i64>* %5811, align 1
  %5813 = bitcast <2 x i64> %5812 to <8 x i16>
  %5814 = shufflevector <8 x i16> %5813, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5815 = shufflevector <8 x i16> %5814, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5816 = bitcast <8 x i16> %5815 to <2 x i64>
  %5817 = and <2 x i64> %5816, <i64 71777214294589695, i64 71777214294589695>
  %5818 = and <2 x i64> %5812, <i64 -71777214294589696, i64 -71777214294589696>
  %5819 = or <2 x i64> %5817, %5818
  store <2 x i64> %5819, <2 x i64>* %5810, align 1
  %5820 = getelementptr inbounds i32, i32* %5807, i64 4
  %5821 = getelementptr inbounds i32, i32* %5808, i64 4
  %5822 = bitcast i32* %5821 to <2 x i64>*
  %5823 = bitcast i32* %5820 to <2 x i64>*
  %5824 = load <2 x i64>, <2 x i64>* %5823, align 1
  %5825 = bitcast <2 x i64> %5824 to <8 x i16>
  %5826 = shufflevector <8 x i16> %5825, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5827 = shufflevector <8 x i16> %5826, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5828 = bitcast <8 x i16> %5827 to <2 x i64>
  %5829 = and <2 x i64> %5828, <i64 71777214294589695, i64 71777214294589695>
  %5830 = and <2 x i64> %5824, <i64 -71777214294589696, i64 -71777214294589696>
  %5831 = or <2 x i64> %5829, %5830
  store <2 x i64> %5831, <2 x i64>* %5822, align 1
  %5832 = getelementptr inbounds i32, i32* %5807, i64 8
  %5833 = getelementptr inbounds i32, i32* %5808, i64 8
  %5834 = add i32 %5809, -2
  %5835 = icmp eq i32 %5834, 0
  br i1 %5835, label %5836, label %5806

5836:                                             ; preds = %5806, %5798
  %5837 = phi i32* [ undef, %5798 ], [ %5832, %5806 ]
  %5838 = phi i32* [ undef, %5798 ], [ %5833, %5806 ]
  %5839 = phi i32* [ %5795, %5798 ], [ %5832, %5806 ]
  %5840 = phi i32* [ %5792, %5798 ], [ %5833, %5806 ]
  %5841 = icmp eq i32 %5802, 0
  br i1 %5841, label %5855, label %5842

5842:                                             ; preds = %5836
  %5843 = bitcast i32* %5840 to <2 x i64>*
  %5844 = bitcast i32* %5839 to <2 x i64>*
  %5845 = load <2 x i64>, <2 x i64>* %5844, align 1
  %5846 = bitcast <2 x i64> %5845 to <8 x i16>
  %5847 = shufflevector <8 x i16> %5846, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %5848 = shufflevector <8 x i16> %5847, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %5849 = bitcast <8 x i16> %5848 to <2 x i64>
  %5850 = and <2 x i64> %5849, <i64 71777214294589695, i64 71777214294589695>
  %5851 = and <2 x i64> %5845, <i64 -71777214294589696, i64 -71777214294589696>
  %5852 = or <2 x i64> %5850, %5851
  store <2 x i64> %5852, <2 x i64>* %5843, align 1
  %5853 = getelementptr inbounds i32, i32* %5840, i64 4
  %5854 = getelementptr inbounds i32, i32* %5839, i64 4
  br label %5855

5855:                                             ; preds = %5842, %5836, %5787
  %5856 = phi i32* [ %5795, %5787 ], [ %5837, %5836 ], [ %5854, %5842 ]
  %5857 = phi i32* [ %5792, %5787 ], [ %5838, %5836 ], [ %5853, %5842 ]
  %5858 = sub i32 %5794, %5796
  %5859 = icmp eq i32 %5858, 0
  br i1 %5859, label %5942, label %5860

5860:                                             ; preds = %5855
  %5861 = zext i32 %5858 to i64
  %5862 = icmp ult i32 %5858, 8
  br i1 %5862, label %5899, label %5863

5863:                                             ; preds = %5860
  %5864 = getelementptr i32, i32* %5857, i64 %5861
  %5865 = getelementptr i32, i32* %5856, i64 %5861
  %5866 = icmp ult i32* %5857, %5865
  %5867 = icmp ult i32* %5856, %5864
  %5868 = and i1 %5866, %5867
  br i1 %5868, label %5899, label %5869

5869:                                             ; preds = %5863
  %5870 = and i64 %5861, 4294967288
  br label %5871

5871:                                             ; preds = %5871, %5869
  %5872 = phi i64 [ 0, %5869 ], [ %5895, %5871 ]
  %5873 = getelementptr inbounds i32, i32* %5856, i64 %5872
  %5874 = bitcast i32* %5873 to <4 x i32>*
  %5875 = load <4 x i32>, <4 x i32>* %5874, align 4, !alias.scope !396
  %5876 = getelementptr inbounds i32, i32* %5873, i64 4
  %5877 = bitcast i32* %5876 to <4 x i32>*
  %5878 = load <4 x i32>, <4 x i32>* %5877, align 4, !alias.scope !396
  %5879 = lshr <4 x i32> %5875, <i32 16, i32 16, i32 16, i32 16>
  %5880 = lshr <4 x i32> %5878, <i32 16, i32 16, i32 16, i32 16>
  %5881 = shl <4 x i32> %5875, <i32 16, i32 16, i32 16, i32 16>
  %5882 = shl <4 x i32> %5878, <i32 16, i32 16, i32 16, i32 16>
  %5883 = or <4 x i32> %5879, %5881
  %5884 = or <4 x i32> %5880, %5882
  %5885 = and <4 x i32> %5883, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5886 = and <4 x i32> %5884, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %5887 = and <4 x i32> %5875, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5888 = and <4 x i32> %5878, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %5889 = or <4 x i32> %5885, %5887
  %5890 = or <4 x i32> %5886, %5888
  %5891 = getelementptr inbounds i32, i32* %5857, i64 %5872
  %5892 = bitcast i32* %5891 to <4 x i32>*
  store <4 x i32> %5889, <4 x i32>* %5892, align 4, !alias.scope !399, !noalias !396
  %5893 = getelementptr inbounds i32, i32* %5891, i64 4
  %5894 = bitcast i32* %5893 to <4 x i32>*
  store <4 x i32> %5890, <4 x i32>* %5894, align 4, !alias.scope !399, !noalias !396
  %5895 = add i64 %5872, 8
  %5896 = icmp eq i64 %5895, %5870
  br i1 %5896, label %5897, label %5871, !llvm.loop !401

5897:                                             ; preds = %5871
  %5898 = icmp eq i64 %5870, %5861
  br i1 %5898, label %5942, label %5899

5899:                                             ; preds = %5897, %5863, %5860
  %5900 = phi i64 [ 0, %5863 ], [ 0, %5860 ], [ %5870, %5897 ]
  %5901 = xor i64 %5900, -1
  %5902 = and i64 %5861, 1
  %5903 = icmp eq i64 %5902, 0
  br i1 %5903, label %5915, label %5904

5904:                                             ; preds = %5899
  %5905 = getelementptr inbounds i32, i32* %5856, i64 %5900
  %5906 = load i32, i32* %5905, align 4
  %5907 = lshr i32 %5906, 16
  %5908 = shl i32 %5906, 16
  %5909 = or i32 %5907, %5908
  %5910 = and i32 %5909, 16711935
  %5911 = and i32 %5906, -16711936
  %5912 = or i32 %5910, %5911
  %5913 = getelementptr inbounds i32, i32* %5857, i64 %5900
  store i32 %5912, i32* %5913, align 4
  %5914 = or i64 %5900, 1
  br label %5915

5915:                                             ; preds = %5904, %5899
  %5916 = phi i64 [ %5914, %5904 ], [ %5900, %5899 ]
  %5917 = sub nsw i64 0, %5861
  %5918 = icmp eq i64 %5901, %5917
  br i1 %5918, label %5942, label %5919

5919:                                             ; preds = %5915, %5919
  %5920 = phi i64 [ %5940, %5919 ], [ %5916, %5915 ]
  %5921 = getelementptr inbounds i32, i32* %5856, i64 %5920
  %5922 = load i32, i32* %5921, align 4
  %5923 = lshr i32 %5922, 16
  %5924 = shl i32 %5922, 16
  %5925 = or i32 %5923, %5924
  %5926 = and i32 %5925, 16711935
  %5927 = and i32 %5922, -16711936
  %5928 = or i32 %5926, %5927
  %5929 = getelementptr inbounds i32, i32* %5857, i64 %5920
  store i32 %5928, i32* %5929, align 4
  %5930 = add nuw nsw i64 %5920, 1
  %5931 = getelementptr inbounds i32, i32* %5856, i64 %5930
  %5932 = load i32, i32* %5931, align 4
  %5933 = lshr i32 %5932, 16
  %5934 = shl i32 %5932, 16
  %5935 = or i32 %5933, %5934
  %5936 = and i32 %5935, 16711935
  %5937 = and i32 %5932, -16711936
  %5938 = or i32 %5936, %5937
  %5939 = getelementptr inbounds i32, i32* %5857, i64 %5930
  store i32 %5938, i32* %5939, align 4
  %5940 = add nuw nsw i64 %5920, 2
  %5941 = icmp eq i64 %5940, %5861
  br i1 %5941, label %5942, label %5919, !llvm.loop !402

5942:                                             ; preds = %5915, %5919, %5897, %5855
  %5943 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5729, align 8
  %5944 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5943, i64 0, i32 1, i32 0
  %5945 = load i32, i32* %5944, align 4
  %5946 = icmp eq i32 %5945, 0
  br i1 %5946, label %5983, label %5947

5947:                                             ; preds = %5942
  %5948 = load i8*, i8** %5760, align 8
  br label %5949

5949:                                             ; preds = %5959, %5947
  %5950 = phi i8* [ %5977, %5959 ], [ %5948, %5947 ]
  %5951 = phi i8* [ %5978, %5959 ], [ %5790, %5947 ]
  %5952 = phi i32 [ %5979, %5959 ], [ 0, %5947 ]
  %5953 = getelementptr inbounds i8, i8* %5950, i64 3
  %5954 = load i8, i8* %5953, align 1
  %5955 = icmp eq i8 %5954, 0
  br i1 %5955, label %5959, label %5956

5956:                                             ; preds = %5949
  %5957 = uitofp i8 %5954 to float
  %5958 = fdiv float 2.550000e+02, %5957
  br label %5959

5959:                                             ; preds = %5956, %5949
  %5960 = phi float [ %5958, %5956 ], [ 1.000000e+00, %5949 ]
  %5961 = load i8, i8* %5950, align 1
  %5962 = uitofp i8 %5961 to float
  %5963 = fmul float %5960, %5962
  %5964 = fptoui float %5963 to i8
  %5965 = getelementptr inbounds i8, i8* %5950, i64 1
  %5966 = load i8, i8* %5965, align 1
  %5967 = uitofp i8 %5966 to float
  %5968 = fmul float %5960, %5967
  %5969 = fptoui float %5968 to i8
  %5970 = getelementptr inbounds i8, i8* %5950, i64 2
  %5971 = load i8, i8* %5970, align 1
  %5972 = uitofp i8 %5971 to float
  %5973 = fmul float %5960, %5972
  %5974 = fptoui float %5973 to i8
  store i8 %5964, i8* %5951, align 1
  %5975 = getelementptr inbounds i8, i8* %5951, i64 1
  store i8 %5969, i8* %5975, align 1
  %5976 = getelementptr inbounds i8, i8* %5951, i64 2
  store i8 %5974, i8* %5976, align 1
  %5977 = getelementptr inbounds i8, i8* %5950, i64 4
  %5978 = getelementptr inbounds i8, i8* %5951, i64 3
  %5979 = add nuw i32 %5952, 1
  %5980 = icmp eq i32 %5979, %5945
  br i1 %5980, label %5981, label %5949

5981:                                             ; preds = %5959
  %5982 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5729, align 8
  br label %5983

5983:                                             ; preds = %5981, %5942
  %5984 = phi %"class.blink::IntRect"* [ %5982, %5981 ], [ %5943, %5942 ]
  %5985 = getelementptr inbounds i8, i8* %5791, i64 %5723
  %5986 = getelementptr inbounds i8, i8* %5790, i64 %5726
  %5987 = add nuw nsw i32 %5789, 1
  %5988 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5984, i64 0, i32 1, i32 1
  %5989 = load i32, i32* %5988, align 4
  %5990 = icmp slt i32 %5987, %5989
  br i1 %5990, label %5787, label %5772

5991:                                             ; preds = %5774, %5754
  %5992 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5992, align 4
  br label %15491

5993:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %5994
    i32 1, label %6318
    i32 2, label %6666
  ]

5994:                                             ; preds = %5993
  %5995 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5996 = load i32, i32* %5995, align 8
  %5997 = sext i32 %5996 to i64
  %5998 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5999 = load i32, i32* %5998, align 8
  %6000 = sdiv i32 %5999, 2
  %6001 = sext i32 %6000 to i64
  %6002 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6003 = load i8*, i8** %6002, align 8
  %6004 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6005 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6004, align 8
  %6006 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6005, i64 0, i32 0, i32 1
  %6007 = load i32, i32* %6006, align 4
  %6008 = mul nsw i32 %6007, %5996
  %6009 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6010 = load i32, i32* %6009, align 4
  %6011 = add nsw i32 %6008, %6010
  %6012 = sext i32 %6011 to i64
  %6013 = getelementptr inbounds i8, i8* %6003, i64 %6012
  %6014 = icmp slt i32 %5999, 0
  %6015 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6016 = load i32, i32* %6015, align 8
  %6017 = icmp sgt i32 %6016, 1
  %6018 = and i1 %6014, %6017
  br i1 %6018, label %6019, label %6029

6019:                                             ; preds = %5994
  %6020 = add nsw i32 %6016, -1
  %6021 = sext i32 %6020 to i64
  %6022 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6023 = load i32, i32* %6022, align 4
  %6024 = sext i32 %6023 to i64
  %6025 = mul nsw i64 %5997, %6021
  %6026 = mul i64 %6025, %6024
  %6027 = sub i64 0, %6026
  %6028 = getelementptr inbounds i8, i8* %6013, i64 %6027
  br label %6031

6029:                                             ; preds = %5994
  %6030 = icmp sgt i32 %6016, 0
  br i1 %6030, label %6031, label %6316

6031:                                             ; preds = %6029, %6019
  %6032 = phi i8* [ %6028, %6019 ], [ %6013, %6029 ]
  %6033 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6034 = bitcast i8** %6033 to i16**
  %6035 = load i16*, i16** %6034, align 8
  %6036 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6037 = bitcast i8** %6036 to i32**
  %6038 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6039

6039:                                             ; preds = %6050, %6031
  %6040 = phi i32 [ %6016, %6031 ], [ %6051, %6050 ]
  %6041 = phi %"class.blink::IntRect"* [ %6005, %6031 ], [ %6052, %6050 ]
  %6042 = phi i32 [ 0, %6031 ], [ %6061, %6050 ]
  %6043 = phi i16* [ %6035, %6031 ], [ %6054, %6050 ]
  %6044 = phi i8* [ %6032, %6031 ], [ %6060, %6050 ]
  %6045 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6041, i64 0, i32 1, i32 1
  %6046 = load i32, i32* %6045, align 4
  %6047 = icmp sgt i32 %6046, 0
  br i1 %6047, label %6063, label %6050

6048:                                             ; preds = %6307
  %6049 = load i32, i32* %6015, align 8
  br label %6050

6050:                                             ; preds = %6048, %6039
  %6051 = phi i32 [ %6040, %6039 ], [ %6049, %6048 ]
  %6052 = phi %"class.blink::IntRect"* [ %6041, %6039 ], [ %6308, %6048 ]
  %6053 = phi i8* [ %6044, %6039 ], [ %6309, %6048 ]
  %6054 = phi i16* [ %6043, %6039 ], [ %6310, %6048 ]
  %6055 = phi i32 [ %6046, %6039 ], [ %6313, %6048 ]
  %6056 = load i32, i32* %6038, align 4
  %6057 = sub nsw i32 %6056, %6055
  %6058 = sext i32 %6057 to i64
  %6059 = mul nsw i64 %6058, %5997
  %6060 = getelementptr inbounds i8, i8* %6053, i64 %6059
  %6061 = add nuw nsw i32 %6042, 1
  %6062 = icmp slt i32 %6061, %6051
  br i1 %6062, label %6039, label %6316

6063:                                             ; preds = %6039, %6307
  %6064 = phi i64 [ %6315, %6307 ], [ 0, %6039 ]
  %6065 = phi %"class.blink::IntRect"* [ %6308, %6307 ], [ %6041, %6039 ]
  %6066 = phi i32 [ %6311, %6307 ], [ 0, %6039 ]
  %6067 = phi i16* [ %6310, %6307 ], [ %6043, %6039 ]
  %6068 = phi i8* [ %6309, %6307 ], [ %6044, %6039 ]
  %6069 = mul i64 %6064, %6001
  %6070 = getelementptr i16, i16* %6043, i64 %6069
  %6071 = bitcast i16* %6070 to i8*
  %6072 = add i64 %6069, 1
  %6073 = getelementptr i16, i16* %6043, i64 %6072
  %6074 = load i32*, i32** %6037, align 8
  %6075 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6065, i64 0, i32 1, i32 0
  %6076 = load i32, i32* %6075, align 4
  %6077 = bitcast i8* %6068 to i32*
  %6078 = and i32 %6076, -4
  %6079 = icmp eq i32 %6078, 0
  br i1 %6079, label %6137, label %6080

6080:                                             ; preds = %6063
  %6081 = add i32 %6078, -1
  %6082 = lshr i32 %6081, 2
  %6083 = add nuw nsw i32 %6082, 1
  %6084 = and i32 %6083, 1
  %6085 = icmp eq i32 %6082, 0
  br i1 %6085, label %6118, label %6086

6086:                                             ; preds = %6080
  %6087 = sub nuw nsw i32 %6083, %6084
  br label %6088

6088:                                             ; preds = %6088, %6086
  %6089 = phi i32* [ %6077, %6086 ], [ %6114, %6088 ]
  %6090 = phi i32* [ %6074, %6086 ], [ %6115, %6088 ]
  %6091 = phi i32 [ %6087, %6086 ], [ %6116, %6088 ]
  %6092 = bitcast i32* %6090 to <2 x i64>*
  %6093 = bitcast i32* %6089 to <2 x i64>*
  %6094 = load <2 x i64>, <2 x i64>* %6093, align 1
  %6095 = bitcast <2 x i64> %6094 to <8 x i16>
  %6096 = shufflevector <8 x i16> %6095, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6097 = shufflevector <8 x i16> %6096, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6098 = bitcast <8 x i16> %6097 to <2 x i64>
  %6099 = and <2 x i64> %6098, <i64 71777214294589695, i64 71777214294589695>
  %6100 = and <2 x i64> %6094, <i64 -71777214294589696, i64 -71777214294589696>
  %6101 = or <2 x i64> %6099, %6100
  store <2 x i64> %6101, <2 x i64>* %6092, align 1
  %6102 = getelementptr inbounds i32, i32* %6089, i64 4
  %6103 = getelementptr inbounds i32, i32* %6090, i64 4
  %6104 = bitcast i32* %6103 to <2 x i64>*
  %6105 = bitcast i32* %6102 to <2 x i64>*
  %6106 = load <2 x i64>, <2 x i64>* %6105, align 1
  %6107 = bitcast <2 x i64> %6106 to <8 x i16>
  %6108 = shufflevector <8 x i16> %6107, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6109 = shufflevector <8 x i16> %6108, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6110 = bitcast <8 x i16> %6109 to <2 x i64>
  %6111 = and <2 x i64> %6110, <i64 71777214294589695, i64 71777214294589695>
  %6112 = and <2 x i64> %6106, <i64 -71777214294589696, i64 -71777214294589696>
  %6113 = or <2 x i64> %6111, %6112
  store <2 x i64> %6113, <2 x i64>* %6104, align 1
  %6114 = getelementptr inbounds i32, i32* %6089, i64 8
  %6115 = getelementptr inbounds i32, i32* %6090, i64 8
  %6116 = add i32 %6091, -2
  %6117 = icmp eq i32 %6116, 0
  br i1 %6117, label %6118, label %6088

6118:                                             ; preds = %6088, %6080
  %6119 = phi i32* [ undef, %6080 ], [ %6114, %6088 ]
  %6120 = phi i32* [ undef, %6080 ], [ %6115, %6088 ]
  %6121 = phi i32* [ %6077, %6080 ], [ %6114, %6088 ]
  %6122 = phi i32* [ %6074, %6080 ], [ %6115, %6088 ]
  %6123 = icmp eq i32 %6084, 0
  br i1 %6123, label %6137, label %6124

6124:                                             ; preds = %6118
  %6125 = bitcast i32* %6122 to <2 x i64>*
  %6126 = bitcast i32* %6121 to <2 x i64>*
  %6127 = load <2 x i64>, <2 x i64>* %6126, align 1
  %6128 = bitcast <2 x i64> %6127 to <8 x i16>
  %6129 = shufflevector <8 x i16> %6128, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6130 = shufflevector <8 x i16> %6129, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6131 = bitcast <8 x i16> %6130 to <2 x i64>
  %6132 = and <2 x i64> %6131, <i64 71777214294589695, i64 71777214294589695>
  %6133 = and <2 x i64> %6127, <i64 -71777214294589696, i64 -71777214294589696>
  %6134 = or <2 x i64> %6132, %6133
  store <2 x i64> %6134, <2 x i64>* %6125, align 1
  %6135 = getelementptr inbounds i32, i32* %6122, i64 4
  %6136 = getelementptr inbounds i32, i32* %6121, i64 4
  br label %6137

6137:                                             ; preds = %6124, %6118, %6063
  %6138 = phi i32* [ %6077, %6063 ], [ %6119, %6118 ], [ %6136, %6124 ]
  %6139 = phi i32* [ %6074, %6063 ], [ %6120, %6118 ], [ %6135, %6124 ]
  %6140 = sub i32 %6076, %6078
  %6141 = icmp eq i32 %6140, 0
  br i1 %6141, label %6224, label %6142

6142:                                             ; preds = %6137
  %6143 = zext i32 %6140 to i64
  %6144 = icmp ult i32 %6140, 8
  br i1 %6144, label %6181, label %6145

6145:                                             ; preds = %6142
  %6146 = getelementptr i32, i32* %6139, i64 %6143
  %6147 = getelementptr i32, i32* %6138, i64 %6143
  %6148 = icmp ult i32* %6139, %6147
  %6149 = icmp ult i32* %6138, %6146
  %6150 = and i1 %6148, %6149
  br i1 %6150, label %6181, label %6151

6151:                                             ; preds = %6145
  %6152 = and i64 %6143, 4294967288
  br label %6153

6153:                                             ; preds = %6153, %6151
  %6154 = phi i64 [ 0, %6151 ], [ %6177, %6153 ]
  %6155 = getelementptr inbounds i32, i32* %6138, i64 %6154
  %6156 = bitcast i32* %6155 to <4 x i32>*
  %6157 = load <4 x i32>, <4 x i32>* %6156, align 4, !alias.scope !403
  %6158 = getelementptr inbounds i32, i32* %6155, i64 4
  %6159 = bitcast i32* %6158 to <4 x i32>*
  %6160 = load <4 x i32>, <4 x i32>* %6159, align 4, !alias.scope !403
  %6161 = lshr <4 x i32> %6157, <i32 16, i32 16, i32 16, i32 16>
  %6162 = lshr <4 x i32> %6160, <i32 16, i32 16, i32 16, i32 16>
  %6163 = shl <4 x i32> %6157, <i32 16, i32 16, i32 16, i32 16>
  %6164 = shl <4 x i32> %6160, <i32 16, i32 16, i32 16, i32 16>
  %6165 = or <4 x i32> %6161, %6163
  %6166 = or <4 x i32> %6162, %6164
  %6167 = and <4 x i32> %6165, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6168 = and <4 x i32> %6166, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6169 = and <4 x i32> %6157, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6170 = and <4 x i32> %6160, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6171 = or <4 x i32> %6167, %6169
  %6172 = or <4 x i32> %6168, %6170
  %6173 = getelementptr inbounds i32, i32* %6139, i64 %6154
  %6174 = bitcast i32* %6173 to <4 x i32>*
  store <4 x i32> %6171, <4 x i32>* %6174, align 4, !alias.scope !406, !noalias !403
  %6175 = getelementptr inbounds i32, i32* %6173, i64 4
  %6176 = bitcast i32* %6175 to <4 x i32>*
  store <4 x i32> %6172, <4 x i32>* %6176, align 4, !alias.scope !406, !noalias !403
  %6177 = add i64 %6154, 8
  %6178 = icmp eq i64 %6177, %6152
  br i1 %6178, label %6179, label %6153, !llvm.loop !408

6179:                                             ; preds = %6153
  %6180 = icmp eq i64 %6152, %6143
  br i1 %6180, label %6224, label %6181

6181:                                             ; preds = %6179, %6145, %6142
  %6182 = phi i64 [ 0, %6145 ], [ 0, %6142 ], [ %6152, %6179 ]
  %6183 = xor i64 %6182, -1
  %6184 = and i64 %6143, 1
  %6185 = icmp eq i64 %6184, 0
  br i1 %6185, label %6197, label %6186

6186:                                             ; preds = %6181
  %6187 = getelementptr inbounds i32, i32* %6138, i64 %6182
  %6188 = load i32, i32* %6187, align 4
  %6189 = lshr i32 %6188, 16
  %6190 = shl i32 %6188, 16
  %6191 = or i32 %6189, %6190
  %6192 = and i32 %6191, 16711935
  %6193 = and i32 %6188, -16711936
  %6194 = or i32 %6192, %6193
  %6195 = getelementptr inbounds i32, i32* %6139, i64 %6182
  store i32 %6194, i32* %6195, align 4
  %6196 = or i64 %6182, 1
  br label %6197

6197:                                             ; preds = %6186, %6181
  %6198 = phi i64 [ %6196, %6186 ], [ %6182, %6181 ]
  %6199 = sub nsw i64 0, %6143
  %6200 = icmp eq i64 %6183, %6199
  br i1 %6200, label %6224, label %6201

6201:                                             ; preds = %6197, %6201
  %6202 = phi i64 [ %6222, %6201 ], [ %6198, %6197 ]
  %6203 = getelementptr inbounds i32, i32* %6138, i64 %6202
  %6204 = load i32, i32* %6203, align 4
  %6205 = lshr i32 %6204, 16
  %6206 = shl i32 %6204, 16
  %6207 = or i32 %6205, %6206
  %6208 = and i32 %6207, 16711935
  %6209 = and i32 %6204, -16711936
  %6210 = or i32 %6208, %6209
  %6211 = getelementptr inbounds i32, i32* %6139, i64 %6202
  store i32 %6210, i32* %6211, align 4
  %6212 = add nuw nsw i64 %6202, 1
  %6213 = getelementptr inbounds i32, i32* %6138, i64 %6212
  %6214 = load i32, i32* %6213, align 4
  %6215 = lshr i32 %6214, 16
  %6216 = shl i32 %6214, 16
  %6217 = or i32 %6215, %6216
  %6218 = and i32 %6217, 16711935
  %6219 = and i32 %6214, -16711936
  %6220 = or i32 %6218, %6219
  %6221 = getelementptr inbounds i32, i32* %6139, i64 %6212
  store i32 %6220, i32* %6221, align 4
  %6222 = add nuw nsw i64 %6202, 2
  %6223 = icmp eq i64 %6222, %6143
  br i1 %6223, label %6224, label %6201, !llvm.loop !409

6224:                                             ; preds = %6197, %6201, %6179, %6137
  %6225 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6004, align 8
  %6226 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6225, i64 0, i32 1, i32 0
  %6227 = load i32, i32* %6226, align 4
  %6228 = icmp eq i32 %6227, 0
  br i1 %6228, label %6307, label %6229

6229:                                             ; preds = %6224
  %6230 = load i8*, i8** %6036, align 8
  %6231 = add i32 %6227, -1
  %6232 = zext i32 %6231 to i64
  %6233 = add nuw nsw i64 %6232, 1
  %6234 = icmp ult i64 %6233, 9
  br i1 %6234, label %6278, label %6235

6235:                                             ; preds = %6229
  %6236 = add i32 %6227, -1
  %6237 = zext i32 %6236 to i64
  %6238 = getelementptr i16, i16* %6073, i64 %6237
  %6239 = bitcast i16* %6238 to i8*
  %6240 = getelementptr i8, i8* %6230, i64 3
  %6241 = shl nuw nsw i64 %6237, 2
  %6242 = getelementptr i8, i8* %6240, i64 %6241
  %6243 = icmp ugt i8* %6242, %6071
  %6244 = icmp ult i8* %6230, %6239
  %6245 = and i1 %6243, %6244
  br i1 %6245, label %6278, label %6246

6246:                                             ; preds = %6235
  %6247 = and i64 %6233, 7
  %6248 = icmp eq i64 %6247, 0
  %6249 = select i1 %6248, i64 8, i64 %6247
  %6250 = sub nsw i64 %6233, %6249
  %6251 = trunc i64 %6250 to i32
  %6252 = shl nsw i64 %6250, 2
  %6253 = getelementptr i8, i8* %6230, i64 %6252
  %6254 = getelementptr i16, i16* %6067, i64 %6250
  br label %6255

6255:                                             ; preds = %6255, %6246
  %6256 = phi i64 [ 0, %6246 ], [ %6276, %6255 ]
  %6257 = shl i64 %6256, 2
  %6258 = getelementptr i8, i8* %6230, i64 %6257
  %6259 = getelementptr i16, i16* %6067, i64 %6256
  %6260 = bitcast i8* %6258 to <32 x i8>*
  %6261 = load <32 x i8>, <32 x i8>* %6260, align 1
  %6262 = shufflevector <32 x i8> %6261, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %6263 = shufflevector <32 x i8> %6261, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %6264 = shufflevector <32 x i8> %6261, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %6265 = and <8 x i8> %6262, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6266 = zext <8 x i8> %6265 to <8 x i16>
  %6267 = shl nuw <8 x i16> %6266, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6268 = and <8 x i8> %6263, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %6269 = zext <8 x i8> %6268 to <8 x i16>
  %6270 = shl nuw nsw <8 x i16> %6269, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %6271 = or <8 x i16> %6270, %6267
  %6272 = lshr <8 x i8> %6264, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %6273 = zext <8 x i8> %6272 to <8 x i16>
  %6274 = or <8 x i16> %6271, %6273
  %6275 = bitcast i16* %6259 to <8 x i16>*
  store <8 x i16> %6274, <8 x i16>* %6275, align 2, !alias.scope !410, !noalias !413
  %6276 = add i64 %6256, 8
  %6277 = icmp eq i64 %6276, %6250
  br i1 %6277, label %6278, label %6255, !llvm.loop !415

6278:                                             ; preds = %6255, %6235, %6229
  %6279 = phi i32 [ 0, %6235 ], [ 0, %6229 ], [ %6251, %6255 ]
  %6280 = phi i8* [ %6230, %6235 ], [ %6230, %6229 ], [ %6253, %6255 ]
  %6281 = phi i16* [ %6067, %6235 ], [ %6067, %6229 ], [ %6254, %6255 ]
  br label %6282

6282:                                             ; preds = %6278, %6282
  %6283 = phi i32 [ %6303, %6282 ], [ %6279, %6278 ]
  %6284 = phi i8* [ %6301, %6282 ], [ %6280, %6278 ]
  %6285 = phi i16* [ %6302, %6282 ], [ %6281, %6278 ]
  %6286 = load i8, i8* %6284, align 1
  %6287 = and i8 %6286, -8
  %6288 = zext i8 %6287 to i16
  %6289 = shl nuw i16 %6288, 8
  %6290 = getelementptr inbounds i8, i8* %6284, i64 1
  %6291 = load i8, i8* %6290, align 1
  %6292 = and i8 %6291, -4
  %6293 = zext i8 %6292 to i16
  %6294 = shl nuw nsw i16 %6293, 3
  %6295 = or i16 %6294, %6289
  %6296 = getelementptr inbounds i8, i8* %6284, i64 2
  %6297 = load i8, i8* %6296, align 1
  %6298 = lshr i8 %6297, 3
  %6299 = zext i8 %6298 to i16
  %6300 = or i16 %6295, %6299
  store i16 %6300, i16* %6285, align 2
  %6301 = getelementptr inbounds i8, i8* %6284, i64 4
  %6302 = getelementptr inbounds i16, i16* %6285, i64 1
  %6303 = add nuw i32 %6283, 1
  %6304 = icmp eq i32 %6303, %6227
  br i1 %6304, label %6305, label %6282, !llvm.loop !416

6305:                                             ; preds = %6282
  %6306 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6004, align 8
  br label %6307

6307:                                             ; preds = %6305, %6224
  %6308 = phi %"class.blink::IntRect"* [ %6306, %6305 ], [ %6225, %6224 ]
  %6309 = getelementptr inbounds i8, i8* %6068, i64 %5997
  %6310 = getelementptr inbounds i16, i16* %6067, i64 %6001
  %6311 = add nuw nsw i32 %6066, 1
  %6312 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6308, i64 0, i32 1, i32 1
  %6313 = load i32, i32* %6312, align 4
  %6314 = icmp slt i32 %6311, %6313
  %6315 = add i64 %6064, 1
  br i1 %6314, label %6063, label %6048

6316:                                             ; preds = %6050, %6029
  %6317 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6317, align 4
  br label %15491

6318:                                             ; preds = %5993
  %6319 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6320 = load i32, i32* %6319, align 8
  %6321 = sext i32 %6320 to i64
  %6322 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6323 = load i32, i32* %6322, align 8
  %6324 = sdiv i32 %6323, 2
  %6325 = sext i32 %6324 to i64
  %6326 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6327 = load i8*, i8** %6326, align 8
  %6328 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6329 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6328, align 8
  %6330 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6329, i64 0, i32 0, i32 1
  %6331 = load i32, i32* %6330, align 4
  %6332 = mul nsw i32 %6331, %6320
  %6333 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6334 = load i32, i32* %6333, align 4
  %6335 = add nsw i32 %6332, %6334
  %6336 = sext i32 %6335 to i64
  %6337 = getelementptr inbounds i8, i8* %6327, i64 %6336
  %6338 = icmp slt i32 %6323, 0
  %6339 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6340 = load i32, i32* %6339, align 8
  %6341 = icmp sgt i32 %6340, 1
  %6342 = and i1 %6338, %6341
  br i1 %6342, label %6343, label %6353

6343:                                             ; preds = %6318
  %6344 = add nsw i32 %6340, -1
  %6345 = sext i32 %6344 to i64
  %6346 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6347 = load i32, i32* %6346, align 4
  %6348 = sext i32 %6347 to i64
  %6349 = mul nsw i64 %6321, %6345
  %6350 = mul i64 %6349, %6348
  %6351 = sub i64 0, %6350
  %6352 = getelementptr inbounds i8, i8* %6337, i64 %6351
  br label %6355

6353:                                             ; preds = %6318
  %6354 = icmp sgt i32 %6340, 0
  br i1 %6354, label %6355, label %6664

6355:                                             ; preds = %6353, %6343
  %6356 = phi i8* [ %6352, %6343 ], [ %6337, %6353 ]
  %6357 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6358 = bitcast i8** %6357 to i16**
  %6359 = load i16*, i16** %6358, align 8
  %6360 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6361 = bitcast i8** %6360 to i32**
  %6362 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6363

6363:                                             ; preds = %6374, %6355
  %6364 = phi i32 [ %6340, %6355 ], [ %6375, %6374 ]
  %6365 = phi %"class.blink::IntRect"* [ %6329, %6355 ], [ %6376, %6374 ]
  %6366 = phi i32 [ 0, %6355 ], [ %6385, %6374 ]
  %6367 = phi i16* [ %6359, %6355 ], [ %6378, %6374 ]
  %6368 = phi i8* [ %6356, %6355 ], [ %6384, %6374 ]
  %6369 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6365, i64 0, i32 1, i32 1
  %6370 = load i32, i32* %6369, align 4
  %6371 = icmp sgt i32 %6370, 0
  br i1 %6371, label %6387, label %6374

6372:                                             ; preds = %6655
  %6373 = load i32, i32* %6339, align 8
  br label %6374

6374:                                             ; preds = %6372, %6363
  %6375 = phi i32 [ %6364, %6363 ], [ %6373, %6372 ]
  %6376 = phi %"class.blink::IntRect"* [ %6365, %6363 ], [ %6656, %6372 ]
  %6377 = phi i8* [ %6368, %6363 ], [ %6657, %6372 ]
  %6378 = phi i16* [ %6367, %6363 ], [ %6658, %6372 ]
  %6379 = phi i32 [ %6370, %6363 ], [ %6661, %6372 ]
  %6380 = load i32, i32* %6362, align 4
  %6381 = sub nsw i32 %6380, %6379
  %6382 = sext i32 %6381 to i64
  %6383 = mul nsw i64 %6382, %6321
  %6384 = getelementptr inbounds i8, i8* %6377, i64 %6383
  %6385 = add nuw nsw i32 %6366, 1
  %6386 = icmp slt i32 %6385, %6375
  br i1 %6386, label %6363, label %6664

6387:                                             ; preds = %6363, %6655
  %6388 = phi i64 [ %6663, %6655 ], [ 0, %6363 ]
  %6389 = phi %"class.blink::IntRect"* [ %6656, %6655 ], [ %6365, %6363 ]
  %6390 = phi i32 [ %6659, %6655 ], [ 0, %6363 ]
  %6391 = phi i16* [ %6658, %6655 ], [ %6367, %6363 ]
  %6392 = phi i8* [ %6657, %6655 ], [ %6368, %6363 ]
  %6393 = mul i64 %6388, %6325
  %6394 = getelementptr i16, i16* %6367, i64 %6393
  %6395 = bitcast i16* %6394 to i8*
  %6396 = add i64 %6393, 1
  %6397 = getelementptr i16, i16* %6367, i64 %6396
  %6398 = load i32*, i32** %6361, align 8
  %6399 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6389, i64 0, i32 1, i32 0
  %6400 = load i32, i32* %6399, align 4
  %6401 = bitcast i8* %6392 to i32*
  %6402 = and i32 %6400, -4
  %6403 = icmp eq i32 %6402, 0
  br i1 %6403, label %6461, label %6404

6404:                                             ; preds = %6387
  %6405 = add i32 %6402, -1
  %6406 = lshr i32 %6405, 2
  %6407 = add nuw nsw i32 %6406, 1
  %6408 = and i32 %6407, 1
  %6409 = icmp eq i32 %6406, 0
  br i1 %6409, label %6442, label %6410

6410:                                             ; preds = %6404
  %6411 = sub nuw nsw i32 %6407, %6408
  br label %6412

6412:                                             ; preds = %6412, %6410
  %6413 = phi i32* [ %6401, %6410 ], [ %6438, %6412 ]
  %6414 = phi i32* [ %6398, %6410 ], [ %6439, %6412 ]
  %6415 = phi i32 [ %6411, %6410 ], [ %6440, %6412 ]
  %6416 = bitcast i32* %6414 to <2 x i64>*
  %6417 = bitcast i32* %6413 to <2 x i64>*
  %6418 = load <2 x i64>, <2 x i64>* %6417, align 1
  %6419 = bitcast <2 x i64> %6418 to <8 x i16>
  %6420 = shufflevector <8 x i16> %6419, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6421 = shufflevector <8 x i16> %6420, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6422 = bitcast <8 x i16> %6421 to <2 x i64>
  %6423 = and <2 x i64> %6422, <i64 71777214294589695, i64 71777214294589695>
  %6424 = and <2 x i64> %6418, <i64 -71777214294589696, i64 -71777214294589696>
  %6425 = or <2 x i64> %6423, %6424
  store <2 x i64> %6425, <2 x i64>* %6416, align 1
  %6426 = getelementptr inbounds i32, i32* %6413, i64 4
  %6427 = getelementptr inbounds i32, i32* %6414, i64 4
  %6428 = bitcast i32* %6427 to <2 x i64>*
  %6429 = bitcast i32* %6426 to <2 x i64>*
  %6430 = load <2 x i64>, <2 x i64>* %6429, align 1
  %6431 = bitcast <2 x i64> %6430 to <8 x i16>
  %6432 = shufflevector <8 x i16> %6431, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6433 = shufflevector <8 x i16> %6432, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6434 = bitcast <8 x i16> %6433 to <2 x i64>
  %6435 = and <2 x i64> %6434, <i64 71777214294589695, i64 71777214294589695>
  %6436 = and <2 x i64> %6430, <i64 -71777214294589696, i64 -71777214294589696>
  %6437 = or <2 x i64> %6435, %6436
  store <2 x i64> %6437, <2 x i64>* %6428, align 1
  %6438 = getelementptr inbounds i32, i32* %6413, i64 8
  %6439 = getelementptr inbounds i32, i32* %6414, i64 8
  %6440 = add i32 %6415, -2
  %6441 = icmp eq i32 %6440, 0
  br i1 %6441, label %6442, label %6412

6442:                                             ; preds = %6412, %6404
  %6443 = phi i32* [ undef, %6404 ], [ %6438, %6412 ]
  %6444 = phi i32* [ undef, %6404 ], [ %6439, %6412 ]
  %6445 = phi i32* [ %6401, %6404 ], [ %6438, %6412 ]
  %6446 = phi i32* [ %6398, %6404 ], [ %6439, %6412 ]
  %6447 = icmp eq i32 %6408, 0
  br i1 %6447, label %6461, label %6448

6448:                                             ; preds = %6442
  %6449 = bitcast i32* %6446 to <2 x i64>*
  %6450 = bitcast i32* %6445 to <2 x i64>*
  %6451 = load <2 x i64>, <2 x i64>* %6450, align 1
  %6452 = bitcast <2 x i64> %6451 to <8 x i16>
  %6453 = shufflevector <8 x i16> %6452, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6454 = shufflevector <8 x i16> %6453, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6455 = bitcast <8 x i16> %6454 to <2 x i64>
  %6456 = and <2 x i64> %6455, <i64 71777214294589695, i64 71777214294589695>
  %6457 = and <2 x i64> %6451, <i64 -71777214294589696, i64 -71777214294589696>
  %6458 = or <2 x i64> %6456, %6457
  store <2 x i64> %6458, <2 x i64>* %6449, align 1
  %6459 = getelementptr inbounds i32, i32* %6446, i64 4
  %6460 = getelementptr inbounds i32, i32* %6445, i64 4
  br label %6461

6461:                                             ; preds = %6448, %6442, %6387
  %6462 = phi i32* [ %6401, %6387 ], [ %6443, %6442 ], [ %6460, %6448 ]
  %6463 = phi i32* [ %6398, %6387 ], [ %6444, %6442 ], [ %6459, %6448 ]
  %6464 = sub i32 %6400, %6402
  %6465 = icmp eq i32 %6464, 0
  br i1 %6465, label %6548, label %6466

6466:                                             ; preds = %6461
  %6467 = zext i32 %6464 to i64
  %6468 = icmp ult i32 %6464, 8
  br i1 %6468, label %6505, label %6469

6469:                                             ; preds = %6466
  %6470 = getelementptr i32, i32* %6463, i64 %6467
  %6471 = getelementptr i32, i32* %6462, i64 %6467
  %6472 = icmp ult i32* %6463, %6471
  %6473 = icmp ult i32* %6462, %6470
  %6474 = and i1 %6472, %6473
  br i1 %6474, label %6505, label %6475

6475:                                             ; preds = %6469
  %6476 = and i64 %6467, 4294967288
  br label %6477

6477:                                             ; preds = %6477, %6475
  %6478 = phi i64 [ 0, %6475 ], [ %6501, %6477 ]
  %6479 = getelementptr inbounds i32, i32* %6462, i64 %6478
  %6480 = bitcast i32* %6479 to <4 x i32>*
  %6481 = load <4 x i32>, <4 x i32>* %6480, align 4, !alias.scope !417
  %6482 = getelementptr inbounds i32, i32* %6479, i64 4
  %6483 = bitcast i32* %6482 to <4 x i32>*
  %6484 = load <4 x i32>, <4 x i32>* %6483, align 4, !alias.scope !417
  %6485 = lshr <4 x i32> %6481, <i32 16, i32 16, i32 16, i32 16>
  %6486 = lshr <4 x i32> %6484, <i32 16, i32 16, i32 16, i32 16>
  %6487 = shl <4 x i32> %6481, <i32 16, i32 16, i32 16, i32 16>
  %6488 = shl <4 x i32> %6484, <i32 16, i32 16, i32 16, i32 16>
  %6489 = or <4 x i32> %6485, %6487
  %6490 = or <4 x i32> %6486, %6488
  %6491 = and <4 x i32> %6489, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6492 = and <4 x i32> %6490, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6493 = and <4 x i32> %6481, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6494 = and <4 x i32> %6484, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6495 = or <4 x i32> %6491, %6493
  %6496 = or <4 x i32> %6492, %6494
  %6497 = getelementptr inbounds i32, i32* %6463, i64 %6478
  %6498 = bitcast i32* %6497 to <4 x i32>*
  store <4 x i32> %6495, <4 x i32>* %6498, align 4, !alias.scope !420, !noalias !417
  %6499 = getelementptr inbounds i32, i32* %6497, i64 4
  %6500 = bitcast i32* %6499 to <4 x i32>*
  store <4 x i32> %6496, <4 x i32>* %6500, align 4, !alias.scope !420, !noalias !417
  %6501 = add i64 %6478, 8
  %6502 = icmp eq i64 %6501, %6476
  br i1 %6502, label %6503, label %6477, !llvm.loop !422

6503:                                             ; preds = %6477
  %6504 = icmp eq i64 %6476, %6467
  br i1 %6504, label %6548, label %6505

6505:                                             ; preds = %6503, %6469, %6466
  %6506 = phi i64 [ 0, %6469 ], [ 0, %6466 ], [ %6476, %6503 ]
  %6507 = xor i64 %6506, -1
  %6508 = and i64 %6467, 1
  %6509 = icmp eq i64 %6508, 0
  br i1 %6509, label %6521, label %6510

6510:                                             ; preds = %6505
  %6511 = getelementptr inbounds i32, i32* %6462, i64 %6506
  %6512 = load i32, i32* %6511, align 4
  %6513 = lshr i32 %6512, 16
  %6514 = shl i32 %6512, 16
  %6515 = or i32 %6513, %6514
  %6516 = and i32 %6515, 16711935
  %6517 = and i32 %6512, -16711936
  %6518 = or i32 %6516, %6517
  %6519 = getelementptr inbounds i32, i32* %6463, i64 %6506
  store i32 %6518, i32* %6519, align 4
  %6520 = or i64 %6506, 1
  br label %6521

6521:                                             ; preds = %6510, %6505
  %6522 = phi i64 [ %6520, %6510 ], [ %6506, %6505 ]
  %6523 = sub nsw i64 0, %6467
  %6524 = icmp eq i64 %6507, %6523
  br i1 %6524, label %6548, label %6525

6525:                                             ; preds = %6521, %6525
  %6526 = phi i64 [ %6546, %6525 ], [ %6522, %6521 ]
  %6527 = getelementptr inbounds i32, i32* %6462, i64 %6526
  %6528 = load i32, i32* %6527, align 4
  %6529 = lshr i32 %6528, 16
  %6530 = shl i32 %6528, 16
  %6531 = or i32 %6529, %6530
  %6532 = and i32 %6531, 16711935
  %6533 = and i32 %6528, -16711936
  %6534 = or i32 %6532, %6533
  %6535 = getelementptr inbounds i32, i32* %6463, i64 %6526
  store i32 %6534, i32* %6535, align 4
  %6536 = add nuw nsw i64 %6526, 1
  %6537 = getelementptr inbounds i32, i32* %6462, i64 %6536
  %6538 = load i32, i32* %6537, align 4
  %6539 = lshr i32 %6538, 16
  %6540 = shl i32 %6538, 16
  %6541 = or i32 %6539, %6540
  %6542 = and i32 %6541, 16711935
  %6543 = and i32 %6538, -16711936
  %6544 = or i32 %6542, %6543
  %6545 = getelementptr inbounds i32, i32* %6463, i64 %6536
  store i32 %6544, i32* %6545, align 4
  %6546 = add nuw nsw i64 %6526, 2
  %6547 = icmp eq i64 %6546, %6467
  br i1 %6547, label %6548, label %6525, !llvm.loop !423

6548:                                             ; preds = %6521, %6525, %6503, %6461
  %6549 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6328, align 8
  %6550 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6549, i64 0, i32 1, i32 0
  %6551 = load i32, i32* %6550, align 4
  %6552 = icmp eq i32 %6551, 0
  br i1 %6552, label %6655, label %6553

6553:                                             ; preds = %6548
  %6554 = load i8*, i8** %6360, align 8
  %6555 = add i32 %6551, -1
  %6556 = zext i32 %6555 to i64
  %6557 = add nuw nsw i64 %6556, 1
  %6558 = icmp ult i64 %6557, 8
  br i1 %6558, label %6613, label %6559

6559:                                             ; preds = %6553
  %6560 = add i32 %6551, -1
  %6561 = zext i32 %6560 to i64
  %6562 = getelementptr i16, i16* %6397, i64 %6561
  %6563 = bitcast i16* %6562 to i8*
  %6564 = getelementptr i8, i8* %6554, i64 4
  %6565 = shl nuw nsw i64 %6561, 2
  %6566 = getelementptr i8, i8* %6564, i64 %6565
  %6567 = icmp ugt i8* %6566, %6395
  %6568 = icmp ult i8* %6554, %6563
  %6569 = and i1 %6567, %6568
  br i1 %6569, label %6613, label %6570

6570:                                             ; preds = %6559
  %6571 = and i64 %6557, 8589934584
  %6572 = shl nuw nsw i64 %6571, 2
  %6573 = getelementptr i8, i8* %6554, i64 %6572
  %6574 = getelementptr i16, i16* %6391, i64 %6571
  %6575 = trunc i64 %6571 to i32
  br label %6576

6576:                                             ; preds = %6576, %6570
  %6577 = phi i64 [ 0, %6570 ], [ %6609, %6576 ]
  %6578 = shl i64 %6577, 2
  %6579 = getelementptr i16, i16* %6391, i64 %6577
  %6580 = getelementptr inbounds i8, i8* %6554, i64 %6578
  %6581 = bitcast i8* %6580 to <32 x i8>*
  %6582 = load <32 x i8>, <32 x i8>* %6581, align 1
  %6583 = shufflevector <32 x i8> %6582, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %6584 = shufflevector <32 x i8> %6582, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %6585 = shufflevector <32 x i8> %6582, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %6586 = shufflevector <32 x i8> %6582, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %6587 = uitofp <8 x i8> %6586 to <8 x float>
  %6588 = fdiv <8 x float> %6587, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %6589 = uitofp <8 x i8> %6583 to <8 x float>
  %6590 = fmul <8 x float> %6588, %6589
  %6591 = fptoui <8 x float> %6590 to <8 x i8>
  %6592 = uitofp <8 x i8> %6584 to <8 x float>
  %6593 = fmul <8 x float> %6588, %6592
  %6594 = fptoui <8 x float> %6593 to <8 x i8>
  %6595 = uitofp <8 x i8> %6585 to <8 x float>
  %6596 = fmul <8 x float> %6588, %6595
  %6597 = fptoui <8 x float> %6596 to <8 x i8>
  %6598 = and <8 x i8> %6591, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6599 = zext <8 x i8> %6598 to <8 x i16>
  %6600 = shl nuw <8 x i16> %6599, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6601 = and <8 x i8> %6594, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %6602 = zext <8 x i8> %6601 to <8 x i16>
  %6603 = shl nuw nsw <8 x i16> %6602, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %6604 = or <8 x i16> %6603, %6600
  %6605 = lshr <8 x i8> %6597, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %6606 = zext <8 x i8> %6605 to <8 x i16>
  %6607 = or <8 x i16> %6604, %6606
  %6608 = bitcast i16* %6579 to <8 x i16>*
  store <8 x i16> %6607, <8 x i16>* %6608, align 2, !alias.scope !424, !noalias !427
  %6609 = add i64 %6577, 8
  %6610 = icmp eq i64 %6609, %6571
  br i1 %6610, label %6611, label %6576, !llvm.loop !429

6611:                                             ; preds = %6576
  %6612 = icmp eq i64 %6557, %6571
  br i1 %6612, label %6653, label %6613

6613:                                             ; preds = %6611, %6559, %6553
  %6614 = phi i8* [ %6554, %6559 ], [ %6554, %6553 ], [ %6573, %6611 ]
  %6615 = phi i16* [ %6391, %6559 ], [ %6391, %6553 ], [ %6574, %6611 ]
  %6616 = phi i32 [ 0, %6559 ], [ 0, %6553 ], [ %6575, %6611 ]
  br label %6617

6617:                                             ; preds = %6613, %6617
  %6618 = phi i8* [ %6649, %6617 ], [ %6614, %6613 ]
  %6619 = phi i16* [ %6650, %6617 ], [ %6615, %6613 ]
  %6620 = phi i32 [ %6651, %6617 ], [ %6616, %6613 ]
  %6621 = getelementptr inbounds i8, i8* %6618, i64 3
  %6622 = load i8, i8* %6621, align 1
  %6623 = uitofp i8 %6622 to float
  %6624 = fdiv float %6623, 2.550000e+02
  %6625 = load i8, i8* %6618, align 1
  %6626 = uitofp i8 %6625 to float
  %6627 = fmul float %6624, %6626
  %6628 = fptoui float %6627 to i8
  %6629 = getelementptr inbounds i8, i8* %6618, i64 1
  %6630 = load i8, i8* %6629, align 1
  %6631 = uitofp i8 %6630 to float
  %6632 = fmul float %6624, %6631
  %6633 = fptoui float %6632 to i8
  %6634 = getelementptr inbounds i8, i8* %6618, i64 2
  %6635 = load i8, i8* %6634, align 1
  %6636 = uitofp i8 %6635 to float
  %6637 = fmul float %6624, %6636
  %6638 = fptoui float %6637 to i8
  %6639 = and i8 %6628, -8
  %6640 = zext i8 %6639 to i16
  %6641 = shl nuw i16 %6640, 8
  %6642 = and i8 %6633, -4
  %6643 = zext i8 %6642 to i16
  %6644 = shl nuw nsw i16 %6643, 3
  %6645 = or i16 %6644, %6641
  %6646 = lshr i8 %6638, 3
  %6647 = zext i8 %6646 to i16
  %6648 = or i16 %6645, %6647
  store i16 %6648, i16* %6619, align 2
  %6649 = getelementptr inbounds i8, i8* %6618, i64 4
  %6650 = getelementptr inbounds i16, i16* %6619, i64 1
  %6651 = add nuw i32 %6620, 1
  %6652 = icmp eq i32 %6651, %6551
  br i1 %6652, label %6653, label %6617, !llvm.loop !430

6653:                                             ; preds = %6617, %6611
  %6654 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6328, align 8
  br label %6655

6655:                                             ; preds = %6653, %6548
  %6656 = phi %"class.blink::IntRect"* [ %6654, %6653 ], [ %6549, %6548 ]
  %6657 = getelementptr inbounds i8, i8* %6392, i64 %6321
  %6658 = getelementptr inbounds i16, i16* %6391, i64 %6325
  %6659 = add nuw nsw i32 %6390, 1
  %6660 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6656, i64 0, i32 1, i32 1
  %6661 = load i32, i32* %6660, align 4
  %6662 = icmp slt i32 %6659, %6661
  %6663 = add i64 %6388, 1
  br i1 %6662, label %6387, label %6372

6664:                                             ; preds = %6374, %6353
  %6665 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6665, align 4
  br label %15491

6666:                                             ; preds = %5993
  %6667 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6668 = load i32, i32* %6667, align 8
  %6669 = sext i32 %6668 to i64
  %6670 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6671 = load i32, i32* %6670, align 8
  %6672 = sdiv i32 %6671, 2
  %6673 = sext i32 %6672 to i64
  %6674 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6675 = load i8*, i8** %6674, align 8
  %6676 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6677 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6676, align 8
  %6678 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6677, i64 0, i32 0, i32 1
  %6679 = load i32, i32* %6678, align 4
  %6680 = mul nsw i32 %6679, %6668
  %6681 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6682 = load i32, i32* %6681, align 4
  %6683 = add nsw i32 %6680, %6682
  %6684 = sext i32 %6683 to i64
  %6685 = getelementptr inbounds i8, i8* %6675, i64 %6684
  %6686 = icmp slt i32 %6671, 0
  %6687 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6688 = load i32, i32* %6687, align 8
  %6689 = icmp sgt i32 %6688, 1
  %6690 = and i1 %6686, %6689
  br i1 %6690, label %6691, label %6701

6691:                                             ; preds = %6666
  %6692 = add nsw i32 %6688, -1
  %6693 = sext i32 %6692 to i64
  %6694 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6695 = load i32, i32* %6694, align 4
  %6696 = sext i32 %6695 to i64
  %6697 = mul nsw i64 %6669, %6693
  %6698 = mul i64 %6697, %6696
  %6699 = sub i64 0, %6698
  %6700 = getelementptr inbounds i8, i8* %6685, i64 %6699
  br label %6703

6701:                                             ; preds = %6666
  %6702 = icmp sgt i32 %6688, 0
  br i1 %6702, label %6703, label %7018

6703:                                             ; preds = %6701, %6691
  %6704 = phi i8* [ %6700, %6691 ], [ %6685, %6701 ]
  %6705 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6706 = bitcast i8** %6705 to i16**
  %6707 = load i16*, i16** %6706, align 8
  %6708 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6709 = bitcast i8** %6708 to i32**
  %6710 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6711

6711:                                             ; preds = %6722, %6703
  %6712 = phi i32 [ %6688, %6703 ], [ %6723, %6722 ]
  %6713 = phi %"class.blink::IntRect"* [ %6677, %6703 ], [ %6724, %6722 ]
  %6714 = phi i32 [ 0, %6703 ], [ %6733, %6722 ]
  %6715 = phi i16* [ %6707, %6703 ], [ %6726, %6722 ]
  %6716 = phi i8* [ %6704, %6703 ], [ %6732, %6722 ]
  %6717 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6713, i64 0, i32 1, i32 1
  %6718 = load i32, i32* %6717, align 4
  %6719 = icmp sgt i32 %6718, 0
  br i1 %6719, label %6735, label %6722

6720:                                             ; preds = %7009
  %6721 = load i32, i32* %6687, align 8
  br label %6722

6722:                                             ; preds = %6720, %6711
  %6723 = phi i32 [ %6712, %6711 ], [ %6721, %6720 ]
  %6724 = phi %"class.blink::IntRect"* [ %6713, %6711 ], [ %7010, %6720 ]
  %6725 = phi i8* [ %6716, %6711 ], [ %7011, %6720 ]
  %6726 = phi i16* [ %6715, %6711 ], [ %7012, %6720 ]
  %6727 = phi i32 [ %6718, %6711 ], [ %7015, %6720 ]
  %6728 = load i32, i32* %6710, align 4
  %6729 = sub nsw i32 %6728, %6727
  %6730 = sext i32 %6729 to i64
  %6731 = mul nsw i64 %6730, %6669
  %6732 = getelementptr inbounds i8, i8* %6725, i64 %6731
  %6733 = add nuw nsw i32 %6714, 1
  %6734 = icmp slt i32 %6733, %6723
  br i1 %6734, label %6711, label %7018

6735:                                             ; preds = %6711, %7009
  %6736 = phi i64 [ %7017, %7009 ], [ 0, %6711 ]
  %6737 = phi %"class.blink::IntRect"* [ %7010, %7009 ], [ %6713, %6711 ]
  %6738 = phi i32 [ %7013, %7009 ], [ 0, %6711 ]
  %6739 = phi i16* [ %7012, %7009 ], [ %6715, %6711 ]
  %6740 = phi i8* [ %7011, %7009 ], [ %6716, %6711 ]
  %6741 = mul i64 %6736, %6673
  %6742 = getelementptr i16, i16* %6715, i64 %6741
  %6743 = bitcast i16* %6742 to i8*
  %6744 = add i64 %6741, 1
  %6745 = getelementptr i16, i16* %6715, i64 %6744
  %6746 = load i32*, i32** %6709, align 8
  %6747 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6737, i64 0, i32 1, i32 0
  %6748 = load i32, i32* %6747, align 4
  %6749 = bitcast i8* %6740 to i32*
  %6750 = and i32 %6748, -4
  %6751 = icmp eq i32 %6750, 0
  br i1 %6751, label %6809, label %6752

6752:                                             ; preds = %6735
  %6753 = add i32 %6750, -1
  %6754 = lshr i32 %6753, 2
  %6755 = add nuw nsw i32 %6754, 1
  %6756 = and i32 %6755, 1
  %6757 = icmp eq i32 %6754, 0
  br i1 %6757, label %6790, label %6758

6758:                                             ; preds = %6752
  %6759 = sub nuw nsw i32 %6755, %6756
  br label %6760

6760:                                             ; preds = %6760, %6758
  %6761 = phi i32* [ %6749, %6758 ], [ %6786, %6760 ]
  %6762 = phi i32* [ %6746, %6758 ], [ %6787, %6760 ]
  %6763 = phi i32 [ %6759, %6758 ], [ %6788, %6760 ]
  %6764 = bitcast i32* %6762 to <2 x i64>*
  %6765 = bitcast i32* %6761 to <2 x i64>*
  %6766 = load <2 x i64>, <2 x i64>* %6765, align 1
  %6767 = bitcast <2 x i64> %6766 to <8 x i16>
  %6768 = shufflevector <8 x i16> %6767, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6769 = shufflevector <8 x i16> %6768, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6770 = bitcast <8 x i16> %6769 to <2 x i64>
  %6771 = and <2 x i64> %6770, <i64 71777214294589695, i64 71777214294589695>
  %6772 = and <2 x i64> %6766, <i64 -71777214294589696, i64 -71777214294589696>
  %6773 = or <2 x i64> %6771, %6772
  store <2 x i64> %6773, <2 x i64>* %6764, align 1
  %6774 = getelementptr inbounds i32, i32* %6761, i64 4
  %6775 = getelementptr inbounds i32, i32* %6762, i64 4
  %6776 = bitcast i32* %6775 to <2 x i64>*
  %6777 = bitcast i32* %6774 to <2 x i64>*
  %6778 = load <2 x i64>, <2 x i64>* %6777, align 1
  %6779 = bitcast <2 x i64> %6778 to <8 x i16>
  %6780 = shufflevector <8 x i16> %6779, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6781 = shufflevector <8 x i16> %6780, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6782 = bitcast <8 x i16> %6781 to <2 x i64>
  %6783 = and <2 x i64> %6782, <i64 71777214294589695, i64 71777214294589695>
  %6784 = and <2 x i64> %6778, <i64 -71777214294589696, i64 -71777214294589696>
  %6785 = or <2 x i64> %6783, %6784
  store <2 x i64> %6785, <2 x i64>* %6776, align 1
  %6786 = getelementptr inbounds i32, i32* %6761, i64 8
  %6787 = getelementptr inbounds i32, i32* %6762, i64 8
  %6788 = add i32 %6763, -2
  %6789 = icmp eq i32 %6788, 0
  br i1 %6789, label %6790, label %6760

6790:                                             ; preds = %6760, %6752
  %6791 = phi i32* [ undef, %6752 ], [ %6786, %6760 ]
  %6792 = phi i32* [ undef, %6752 ], [ %6787, %6760 ]
  %6793 = phi i32* [ %6749, %6752 ], [ %6786, %6760 ]
  %6794 = phi i32* [ %6746, %6752 ], [ %6787, %6760 ]
  %6795 = icmp eq i32 %6756, 0
  br i1 %6795, label %6809, label %6796

6796:                                             ; preds = %6790
  %6797 = bitcast i32* %6794 to <2 x i64>*
  %6798 = bitcast i32* %6793 to <2 x i64>*
  %6799 = load <2 x i64>, <2 x i64>* %6798, align 1
  %6800 = bitcast <2 x i64> %6799 to <8 x i16>
  %6801 = shufflevector <8 x i16> %6800, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %6802 = shufflevector <8 x i16> %6801, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %6803 = bitcast <8 x i16> %6802 to <2 x i64>
  %6804 = and <2 x i64> %6803, <i64 71777214294589695, i64 71777214294589695>
  %6805 = and <2 x i64> %6799, <i64 -71777214294589696, i64 -71777214294589696>
  %6806 = or <2 x i64> %6804, %6805
  store <2 x i64> %6806, <2 x i64>* %6797, align 1
  %6807 = getelementptr inbounds i32, i32* %6794, i64 4
  %6808 = getelementptr inbounds i32, i32* %6793, i64 4
  br label %6809

6809:                                             ; preds = %6796, %6790, %6735
  %6810 = phi i32* [ %6749, %6735 ], [ %6791, %6790 ], [ %6808, %6796 ]
  %6811 = phi i32* [ %6746, %6735 ], [ %6792, %6790 ], [ %6807, %6796 ]
  %6812 = sub i32 %6748, %6750
  %6813 = icmp eq i32 %6812, 0
  br i1 %6813, label %6896, label %6814

6814:                                             ; preds = %6809
  %6815 = zext i32 %6812 to i64
  %6816 = icmp ult i32 %6812, 8
  br i1 %6816, label %6853, label %6817

6817:                                             ; preds = %6814
  %6818 = getelementptr i32, i32* %6811, i64 %6815
  %6819 = getelementptr i32, i32* %6810, i64 %6815
  %6820 = icmp ult i32* %6811, %6819
  %6821 = icmp ult i32* %6810, %6818
  %6822 = and i1 %6820, %6821
  br i1 %6822, label %6853, label %6823

6823:                                             ; preds = %6817
  %6824 = and i64 %6815, 4294967288
  br label %6825

6825:                                             ; preds = %6825, %6823
  %6826 = phi i64 [ 0, %6823 ], [ %6849, %6825 ]
  %6827 = getelementptr inbounds i32, i32* %6810, i64 %6826
  %6828 = bitcast i32* %6827 to <4 x i32>*
  %6829 = load <4 x i32>, <4 x i32>* %6828, align 4, !alias.scope !431
  %6830 = getelementptr inbounds i32, i32* %6827, i64 4
  %6831 = bitcast i32* %6830 to <4 x i32>*
  %6832 = load <4 x i32>, <4 x i32>* %6831, align 4, !alias.scope !431
  %6833 = lshr <4 x i32> %6829, <i32 16, i32 16, i32 16, i32 16>
  %6834 = lshr <4 x i32> %6832, <i32 16, i32 16, i32 16, i32 16>
  %6835 = shl <4 x i32> %6829, <i32 16, i32 16, i32 16, i32 16>
  %6836 = shl <4 x i32> %6832, <i32 16, i32 16, i32 16, i32 16>
  %6837 = or <4 x i32> %6833, %6835
  %6838 = or <4 x i32> %6834, %6836
  %6839 = and <4 x i32> %6837, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6840 = and <4 x i32> %6838, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %6841 = and <4 x i32> %6829, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6842 = and <4 x i32> %6832, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %6843 = or <4 x i32> %6839, %6841
  %6844 = or <4 x i32> %6840, %6842
  %6845 = getelementptr inbounds i32, i32* %6811, i64 %6826
  %6846 = bitcast i32* %6845 to <4 x i32>*
  store <4 x i32> %6843, <4 x i32>* %6846, align 4, !alias.scope !434, !noalias !431
  %6847 = getelementptr inbounds i32, i32* %6845, i64 4
  %6848 = bitcast i32* %6847 to <4 x i32>*
  store <4 x i32> %6844, <4 x i32>* %6848, align 4, !alias.scope !434, !noalias !431
  %6849 = add i64 %6826, 8
  %6850 = icmp eq i64 %6849, %6824
  br i1 %6850, label %6851, label %6825, !llvm.loop !436

6851:                                             ; preds = %6825
  %6852 = icmp eq i64 %6824, %6815
  br i1 %6852, label %6896, label %6853

6853:                                             ; preds = %6851, %6817, %6814
  %6854 = phi i64 [ 0, %6817 ], [ 0, %6814 ], [ %6824, %6851 ]
  %6855 = xor i64 %6854, -1
  %6856 = and i64 %6815, 1
  %6857 = icmp eq i64 %6856, 0
  br i1 %6857, label %6869, label %6858

6858:                                             ; preds = %6853
  %6859 = getelementptr inbounds i32, i32* %6810, i64 %6854
  %6860 = load i32, i32* %6859, align 4
  %6861 = lshr i32 %6860, 16
  %6862 = shl i32 %6860, 16
  %6863 = or i32 %6861, %6862
  %6864 = and i32 %6863, 16711935
  %6865 = and i32 %6860, -16711936
  %6866 = or i32 %6864, %6865
  %6867 = getelementptr inbounds i32, i32* %6811, i64 %6854
  store i32 %6866, i32* %6867, align 4
  %6868 = or i64 %6854, 1
  br label %6869

6869:                                             ; preds = %6858, %6853
  %6870 = phi i64 [ %6868, %6858 ], [ %6854, %6853 ]
  %6871 = sub nsw i64 0, %6815
  %6872 = icmp eq i64 %6855, %6871
  br i1 %6872, label %6896, label %6873

6873:                                             ; preds = %6869, %6873
  %6874 = phi i64 [ %6894, %6873 ], [ %6870, %6869 ]
  %6875 = getelementptr inbounds i32, i32* %6810, i64 %6874
  %6876 = load i32, i32* %6875, align 4
  %6877 = lshr i32 %6876, 16
  %6878 = shl i32 %6876, 16
  %6879 = or i32 %6877, %6878
  %6880 = and i32 %6879, 16711935
  %6881 = and i32 %6876, -16711936
  %6882 = or i32 %6880, %6881
  %6883 = getelementptr inbounds i32, i32* %6811, i64 %6874
  store i32 %6882, i32* %6883, align 4
  %6884 = add nuw nsw i64 %6874, 1
  %6885 = getelementptr inbounds i32, i32* %6810, i64 %6884
  %6886 = load i32, i32* %6885, align 4
  %6887 = lshr i32 %6886, 16
  %6888 = shl i32 %6886, 16
  %6889 = or i32 %6887, %6888
  %6890 = and i32 %6889, 16711935
  %6891 = and i32 %6886, -16711936
  %6892 = or i32 %6890, %6891
  %6893 = getelementptr inbounds i32, i32* %6811, i64 %6884
  store i32 %6892, i32* %6893, align 4
  %6894 = add nuw nsw i64 %6874, 2
  %6895 = icmp eq i64 %6894, %6815
  br i1 %6895, label %6896, label %6873, !llvm.loop !437

6896:                                             ; preds = %6869, %6873, %6851, %6809
  %6897 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6676, align 8
  %6898 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6897, i64 0, i32 1, i32 0
  %6899 = load i32, i32* %6898, align 4
  %6900 = icmp eq i32 %6899, 0
  br i1 %6900, label %7009, label %6901

6901:                                             ; preds = %6896
  %6902 = load i8*, i8** %6708, align 8
  %6903 = add i32 %6899, -1
  %6904 = zext i32 %6903 to i64
  %6905 = add nuw nsw i64 %6904, 1
  %6906 = icmp ult i64 %6905, 8
  br i1 %6906, label %6963, label %6907

6907:                                             ; preds = %6901
  %6908 = add i32 %6899, -1
  %6909 = zext i32 %6908 to i64
  %6910 = getelementptr i16, i16* %6745, i64 %6909
  %6911 = bitcast i16* %6910 to i8*
  %6912 = getelementptr i8, i8* %6902, i64 4
  %6913 = shl nuw nsw i64 %6909, 2
  %6914 = getelementptr i8, i8* %6912, i64 %6913
  %6915 = icmp ugt i8* %6914, %6743
  %6916 = icmp ult i8* %6902, %6911
  %6917 = and i1 %6915, %6916
  br i1 %6917, label %6963, label %6918

6918:                                             ; preds = %6907
  %6919 = and i64 %6905, 8589934584
  %6920 = shl nuw nsw i64 %6919, 2
  %6921 = getelementptr i8, i8* %6902, i64 %6920
  %6922 = getelementptr i16, i16* %6739, i64 %6919
  %6923 = trunc i64 %6919 to i32
  br label %6924

6924:                                             ; preds = %6924, %6918
  %6925 = phi i64 [ 0, %6918 ], [ %6959, %6924 ]
  %6926 = shl i64 %6925, 2
  %6927 = getelementptr i16, i16* %6739, i64 %6925
  %6928 = getelementptr inbounds i8, i8* %6902, i64 %6926
  %6929 = bitcast i8* %6928 to <32 x i8>*
  %6930 = load <32 x i8>, <32 x i8>* %6929, align 1
  %6931 = shufflevector <32 x i8> %6930, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %6932 = shufflevector <32 x i8> %6930, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %6933 = shufflevector <32 x i8> %6930, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %6934 = shufflevector <32 x i8> %6930, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %6935 = icmp eq <8 x i8> %6934, zeroinitializer
  %6936 = uitofp <8 x i8> %6934 to <8 x float>
  %6937 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %6936
  %6938 = select <8 x i1> %6935, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %6937
  %6939 = uitofp <8 x i8> %6931 to <8 x float>
  %6940 = fmul <8 x float> %6938, %6939
  %6941 = fptoui <8 x float> %6940 to <8 x i8>
  %6942 = uitofp <8 x i8> %6932 to <8 x float>
  %6943 = fmul <8 x float> %6938, %6942
  %6944 = fptoui <8 x float> %6943 to <8 x i8>
  %6945 = uitofp <8 x i8> %6933 to <8 x float>
  %6946 = fmul <8 x float> %6938, %6945
  %6947 = fptoui <8 x float> %6946 to <8 x i8>
  %6948 = and <8 x i8> %6941, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %6949 = zext <8 x i8> %6948 to <8 x i16>
  %6950 = shl nuw <8 x i16> %6949, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %6951 = and <8 x i8> %6944, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %6952 = zext <8 x i8> %6951 to <8 x i16>
  %6953 = shl nuw nsw <8 x i16> %6952, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %6954 = or <8 x i16> %6953, %6950
  %6955 = lshr <8 x i8> %6947, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %6956 = zext <8 x i8> %6955 to <8 x i16>
  %6957 = or <8 x i16> %6954, %6956
  %6958 = bitcast i16* %6927 to <8 x i16>*
  store <8 x i16> %6957, <8 x i16>* %6958, align 2, !alias.scope !438, !noalias !441
  %6959 = add i64 %6925, 8
  %6960 = icmp eq i64 %6959, %6919
  br i1 %6960, label %6961, label %6924, !llvm.loop !443

6961:                                             ; preds = %6924
  %6962 = icmp eq i64 %6905, %6919
  br i1 %6962, label %7007, label %6963

6963:                                             ; preds = %6961, %6907, %6901
  %6964 = phi i8* [ %6902, %6907 ], [ %6902, %6901 ], [ %6921, %6961 ]
  %6965 = phi i16* [ %6739, %6907 ], [ %6739, %6901 ], [ %6922, %6961 ]
  %6966 = phi i32 [ 0, %6907 ], [ 0, %6901 ], [ %6923, %6961 ]
  br label %6967

6967:                                             ; preds = %6963, %6977
  %6968 = phi i8* [ %7003, %6977 ], [ %6964, %6963 ]
  %6969 = phi i16* [ %7004, %6977 ], [ %6965, %6963 ]
  %6970 = phi i32 [ %7005, %6977 ], [ %6966, %6963 ]
  %6971 = getelementptr inbounds i8, i8* %6968, i64 3
  %6972 = load i8, i8* %6971, align 1
  %6973 = icmp eq i8 %6972, 0
  br i1 %6973, label %6977, label %6974

6974:                                             ; preds = %6967
  %6975 = uitofp i8 %6972 to float
  %6976 = fdiv float 2.550000e+02, %6975
  br label %6977

6977:                                             ; preds = %6974, %6967
  %6978 = phi float [ %6976, %6974 ], [ 1.000000e+00, %6967 ]
  %6979 = load i8, i8* %6968, align 1
  %6980 = uitofp i8 %6979 to float
  %6981 = fmul float %6978, %6980
  %6982 = fptoui float %6981 to i8
  %6983 = getelementptr inbounds i8, i8* %6968, i64 1
  %6984 = load i8, i8* %6983, align 1
  %6985 = uitofp i8 %6984 to float
  %6986 = fmul float %6978, %6985
  %6987 = fptoui float %6986 to i8
  %6988 = getelementptr inbounds i8, i8* %6968, i64 2
  %6989 = load i8, i8* %6988, align 1
  %6990 = uitofp i8 %6989 to float
  %6991 = fmul float %6978, %6990
  %6992 = fptoui float %6991 to i8
  %6993 = and i8 %6982, -8
  %6994 = zext i8 %6993 to i16
  %6995 = shl nuw i16 %6994, 8
  %6996 = and i8 %6987, -4
  %6997 = zext i8 %6996 to i16
  %6998 = shl nuw nsw i16 %6997, 3
  %6999 = or i16 %6998, %6995
  %7000 = lshr i8 %6992, 3
  %7001 = zext i8 %7000 to i16
  %7002 = or i16 %6999, %7001
  store i16 %7002, i16* %6969, align 2
  %7003 = getelementptr inbounds i8, i8* %6968, i64 4
  %7004 = getelementptr inbounds i16, i16* %6969, i64 1
  %7005 = add nuw i32 %6970, 1
  %7006 = icmp eq i32 %7005, %6899
  br i1 %7006, label %7007, label %6967, !llvm.loop !444

7007:                                             ; preds = %6977, %6961
  %7008 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6676, align 8
  br label %7009

7009:                                             ; preds = %7007, %6896
  %7010 = phi %"class.blink::IntRect"* [ %7008, %7007 ], [ %6897, %6896 ]
  %7011 = getelementptr inbounds i8, i8* %6740, i64 %6669
  %7012 = getelementptr inbounds i16, i16* %6739, i64 %6673
  %7013 = add nuw nsw i32 %6738, 1
  %7014 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7010, i64 0, i32 1, i32 1
  %7015 = load i32, i32* %7014, align 4
  %7016 = icmp slt i32 %7013, %7015
  %7017 = add i64 %6736, 1
  br i1 %7016, label %6735, label %6720

7018:                                             ; preds = %6722, %6701
  %7019 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7019, align 4
  br label %15491

7020:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %7021
    i32 1, label %7199
    i32 2, label %7382
  ]

7021:                                             ; preds = %7020
  %7022 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7023 = load i32, i32* %7022, align 8
  %7024 = sext i32 %7023 to i64
  %7025 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7026 = load i32, i32* %7025, align 8
  %7027 = sdiv i32 %7026, 2
  %7028 = sext i32 %7027 to i64
  %7029 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7030 = load i8*, i8** %7029, align 8
  %7031 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7032 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7031, align 8
  %7033 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7032, i64 0, i32 0, i32 1
  %7034 = load i32, i32* %7033, align 4
  %7035 = mul nsw i32 %7034, %7023
  %7036 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7037 = load i32, i32* %7036, align 4
  %7038 = add nsw i32 %7035, %7037
  %7039 = sext i32 %7038 to i64
  %7040 = getelementptr inbounds i8, i8* %7030, i64 %7039
  %7041 = icmp slt i32 %7026, 0
  %7042 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7043 = load i32, i32* %7042, align 8
  %7044 = icmp sgt i32 %7043, 1
  %7045 = and i1 %7041, %7044
  br i1 %7045, label %7046, label %7056

7046:                                             ; preds = %7021
  %7047 = add nsw i32 %7043, -1
  %7048 = sext i32 %7047 to i64
  %7049 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7050 = load i32, i32* %7049, align 4
  %7051 = sext i32 %7050 to i64
  %7052 = mul nsw i64 %7024, %7048
  %7053 = mul i64 %7052, %7051
  %7054 = sub i64 0, %7053
  %7055 = getelementptr inbounds i8, i8* %7040, i64 %7054
  br label %7058

7056:                                             ; preds = %7021
  %7057 = icmp sgt i32 %7043, 0
  br i1 %7057, label %7058, label %7197

7058:                                             ; preds = %7056, %7046
  %7059 = phi i8* [ %7055, %7046 ], [ %7040, %7056 ]
  %7060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7061 = bitcast i8** %7060 to i16**
  %7062 = load i16*, i16** %7061, align 8
  %7063 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7064 = bitcast i8** %7063 to float**
  %7065 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7066

7066:                                             ; preds = %7078, %7058
  %7067 = phi i32 [ %7043, %7058 ], [ %7079, %7078 ]
  %7068 = phi %"class.blink::IntRect"* [ %7032, %7058 ], [ %7080, %7078 ]
  %7069 = phi %"class.blink::IntRect"* [ %7032, %7058 ], [ %7081, %7078 ]
  %7070 = phi i32 [ 0, %7058 ], [ %7090, %7078 ]
  %7071 = phi i16* [ %7062, %7058 ], [ %7083, %7078 ]
  %7072 = phi i8* [ %7059, %7058 ], [ %7089, %7078 ]
  %7073 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7069, i64 0, i32 1, i32 1
  %7074 = load i32, i32* %7073, align 4
  %7075 = icmp sgt i32 %7074, 0
  br i1 %7075, label %7092, label %7078

7076:                                             ; preds = %7189
  %7077 = load i32, i32* %7042, align 8
  br label %7078

7078:                                             ; preds = %7076, %7066
  %7079 = phi i32 [ %7067, %7066 ], [ %7077, %7076 ]
  %7080 = phi %"class.blink::IntRect"* [ %7068, %7066 ], [ %7190, %7076 ]
  %7081 = phi %"class.blink::IntRect"* [ %7069, %7066 ], [ %7190, %7076 ]
  %7082 = phi i8* [ %7072, %7066 ], [ %7191, %7076 ]
  %7083 = phi i16* [ %7071, %7066 ], [ %7192, %7076 ]
  %7084 = phi i32 [ %7074, %7066 ], [ %7195, %7076 ]
  %7085 = load i32, i32* %7065, align 4
  %7086 = sub nsw i32 %7085, %7084
  %7087 = sext i32 %7086 to i64
  %7088 = mul nsw i64 %7087, %7024
  %7089 = getelementptr inbounds i8, i8* %7082, i64 %7088
  %7090 = add nuw nsw i32 %7070, 1
  %7091 = icmp slt i32 %7090, %7079
  br i1 %7091, label %7066, label %7197

7092:                                             ; preds = %7066, %7189
  %7093 = phi %"class.blink::IntRect"* [ %7190, %7189 ], [ %7068, %7066 ]
  %7094 = phi %"class.blink::IntRect"* [ %7190, %7189 ], [ %7069, %7066 ]
  %7095 = phi i32 [ %7193, %7189 ], [ 0, %7066 ]
  %7096 = phi i16* [ %7192, %7189 ], [ %7071, %7066 ]
  %7097 = phi i8* [ %7191, %7189 ], [ %7072, %7066 ]
  %7098 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7094, i64 0, i32 1, i32 0
  %7099 = load i32, i32* %7098, align 4
  %7100 = icmp eq i32 %7099, 0
  br i1 %7100, label %7189, label %7101

7101:                                             ; preds = %7092
  %7102 = load float*, float** %7064, align 8
  br label %7103

7103:                                             ; preds = %7103, %7101
  %7104 = phi i32 [ %7127, %7103 ], [ 0, %7101 ]
  %7105 = phi i8* [ %7125, %7103 ], [ %7097, %7101 ]
  %7106 = phi float* [ %7126, %7103 ], [ %7102, %7101 ]
  %7107 = getelementptr inbounds i8, i8* %7105, i64 2
  %7108 = load i8, i8* %7107, align 1
  %7109 = uitofp i8 %7108 to float
  %7110 = fmul float %7109, 0x3F70101020000000
  store float %7110, float* %7106, align 4
  %7111 = getelementptr inbounds i8, i8* %7105, i64 1
  %7112 = load i8, i8* %7111, align 1
  %7113 = uitofp i8 %7112 to float
  %7114 = fmul float %7113, 0x3F70101020000000
  %7115 = getelementptr inbounds float, float* %7106, i64 1
  store float %7114, float* %7115, align 4
  %7116 = load i8, i8* %7105, align 1
  %7117 = uitofp i8 %7116 to float
  %7118 = fmul float %7117, 0x3F70101020000000
  %7119 = getelementptr inbounds float, float* %7106, i64 2
  store float %7118, float* %7119, align 4
  %7120 = getelementptr inbounds i8, i8* %7105, i64 3
  %7121 = load i8, i8* %7120, align 1
  %7122 = uitofp i8 %7121 to float
  %7123 = fmul float %7122, 0x3F70101020000000
  %7124 = getelementptr inbounds float, float* %7106, i64 3
  store float %7123, float* %7124, align 4
  %7125 = getelementptr inbounds i8, i8* %7105, i64 4
  %7126 = getelementptr inbounds float, float* %7106, i64 4
  %7127 = add nuw i32 %7104, 1
  %7128 = icmp eq i32 %7127, %7099
  br i1 %7128, label %7129, label %7103

7129:                                             ; preds = %7103
  %7130 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7031, align 8
  %7131 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7130, i64 0, i32 1, i32 0
  %7132 = load i32, i32* %7131, align 4
  %7133 = icmp eq i32 %7132, 0
  br i1 %7133, label %7189, label %7134

7134:                                             ; preds = %7129
  %7135 = load float*, float** %7064, align 8
  br label %7136

7136:                                             ; preds = %7136, %7134
  %7137 = phi i32 [ %7185, %7136 ], [ 0, %7134 ]
  %7138 = phi float* [ %7183, %7136 ], [ %7135, %7134 ]
  %7139 = phi i16* [ %7184, %7136 ], [ %7096, %7134 ]
  %7140 = bitcast float* %7138 to i32*
  %7141 = load i32, i32* %7140, align 4
  %7142 = lshr i32 %7141, 23
  %7143 = zext i32 %7142 to i64
  %7144 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7143
  %7145 = load i16, i16* %7144, align 2
  %7146 = and i32 %7141, 8388607
  %7147 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7143
  %7148 = load i8, i8* %7147, align 1
  %7149 = zext i8 %7148 to i32
  %7150 = lshr i32 %7146, %7149
  %7151 = trunc i32 %7150 to i16
  %7152 = add i16 %7145, %7151
  store i16 %7152, i16* %7139, align 2
  %7153 = getelementptr inbounds float, float* %7138, i64 1
  %7154 = bitcast float* %7153 to i32*
  %7155 = load i32, i32* %7154, align 4
  %7156 = lshr i32 %7155, 23
  %7157 = zext i32 %7156 to i64
  %7158 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7157
  %7159 = load i16, i16* %7158, align 2
  %7160 = and i32 %7155, 8388607
  %7161 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7157
  %7162 = load i8, i8* %7161, align 1
  %7163 = zext i8 %7162 to i32
  %7164 = lshr i32 %7160, %7163
  %7165 = trunc i32 %7164 to i16
  %7166 = add i16 %7159, %7165
  %7167 = getelementptr inbounds i16, i16* %7139, i64 1
  store i16 %7166, i16* %7167, align 2
  %7168 = getelementptr inbounds float, float* %7138, i64 2
  %7169 = bitcast float* %7168 to i32*
  %7170 = load i32, i32* %7169, align 4
  %7171 = lshr i32 %7170, 23
  %7172 = zext i32 %7171 to i64
  %7173 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7172
  %7174 = load i16, i16* %7173, align 2
  %7175 = and i32 %7170, 8388607
  %7176 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7172
  %7177 = load i8, i8* %7176, align 1
  %7178 = zext i8 %7177 to i32
  %7179 = lshr i32 %7175, %7178
  %7180 = trunc i32 %7179 to i16
  %7181 = add i16 %7174, %7180
  %7182 = getelementptr inbounds i16, i16* %7139, i64 2
  store i16 %7181, i16* %7182, align 2
  %7183 = getelementptr inbounds float, float* %7138, i64 4
  %7184 = getelementptr inbounds i16, i16* %7139, i64 3
  %7185 = add nuw i32 %7137, 1
  %7186 = icmp eq i32 %7185, %7132
  br i1 %7186, label %7187, label %7136

7187:                                             ; preds = %7136
  %7188 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7031, align 8
  br label %7189

7189:                                             ; preds = %7187, %7129, %7092
  %7190 = phi %"class.blink::IntRect"* [ %7188, %7187 ], [ %7130, %7129 ], [ %7093, %7092 ]
  %7191 = getelementptr inbounds i8, i8* %7097, i64 %7024
  %7192 = getelementptr inbounds i16, i16* %7096, i64 %7028
  %7193 = add nuw nsw i32 %7095, 1
  %7194 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7190, i64 0, i32 1, i32 1
  %7195 = load i32, i32* %7194, align 4
  %7196 = icmp slt i32 %7193, %7195
  br i1 %7196, label %7092, label %7076

7197:                                             ; preds = %7078, %7056
  %7198 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7198, align 4
  br label %15491

7199:                                             ; preds = %7020
  %7200 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7201 = load i32, i32* %7200, align 8
  %7202 = sext i32 %7201 to i64
  %7203 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7204 = load i32, i32* %7203, align 8
  %7205 = sdiv i32 %7204, 2
  %7206 = sext i32 %7205 to i64
  %7207 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7208 = load i8*, i8** %7207, align 8
  %7209 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7210 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7209, align 8
  %7211 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7210, i64 0, i32 0, i32 1
  %7212 = load i32, i32* %7211, align 4
  %7213 = mul nsw i32 %7212, %7201
  %7214 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7215 = load i32, i32* %7214, align 4
  %7216 = add nsw i32 %7213, %7215
  %7217 = sext i32 %7216 to i64
  %7218 = getelementptr inbounds i8, i8* %7208, i64 %7217
  %7219 = icmp slt i32 %7204, 0
  %7220 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7221 = load i32, i32* %7220, align 8
  %7222 = icmp sgt i32 %7221, 1
  %7223 = and i1 %7219, %7222
  br i1 %7223, label %7224, label %7234

7224:                                             ; preds = %7199
  %7225 = add nsw i32 %7221, -1
  %7226 = sext i32 %7225 to i64
  %7227 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7228 = load i32, i32* %7227, align 4
  %7229 = sext i32 %7228 to i64
  %7230 = mul nsw i64 %7202, %7226
  %7231 = mul i64 %7230, %7229
  %7232 = sub i64 0, %7231
  %7233 = getelementptr inbounds i8, i8* %7218, i64 %7232
  br label %7236

7234:                                             ; preds = %7199
  %7235 = icmp sgt i32 %7221, 0
  br i1 %7235, label %7236, label %7380

7236:                                             ; preds = %7234, %7224
  %7237 = phi i8* [ %7233, %7224 ], [ %7218, %7234 ]
  %7238 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7239 = bitcast i8** %7238 to i16**
  %7240 = load i16*, i16** %7239, align 8
  %7241 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7242 = bitcast i8** %7241 to float**
  %7243 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7244

7244:                                             ; preds = %7256, %7236
  %7245 = phi i32 [ %7221, %7236 ], [ %7257, %7256 ]
  %7246 = phi %"class.blink::IntRect"* [ %7210, %7236 ], [ %7258, %7256 ]
  %7247 = phi %"class.blink::IntRect"* [ %7210, %7236 ], [ %7259, %7256 ]
  %7248 = phi i32 [ 0, %7236 ], [ %7268, %7256 ]
  %7249 = phi i16* [ %7240, %7236 ], [ %7261, %7256 ]
  %7250 = phi i8* [ %7237, %7236 ], [ %7267, %7256 ]
  %7251 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7247, i64 0, i32 1, i32 1
  %7252 = load i32, i32* %7251, align 4
  %7253 = icmp sgt i32 %7252, 0
  br i1 %7253, label %7270, label %7256

7254:                                             ; preds = %7372
  %7255 = load i32, i32* %7220, align 8
  br label %7256

7256:                                             ; preds = %7254, %7244
  %7257 = phi i32 [ %7245, %7244 ], [ %7255, %7254 ]
  %7258 = phi %"class.blink::IntRect"* [ %7246, %7244 ], [ %7373, %7254 ]
  %7259 = phi %"class.blink::IntRect"* [ %7247, %7244 ], [ %7373, %7254 ]
  %7260 = phi i8* [ %7250, %7244 ], [ %7374, %7254 ]
  %7261 = phi i16* [ %7249, %7244 ], [ %7375, %7254 ]
  %7262 = phi i32 [ %7252, %7244 ], [ %7378, %7254 ]
  %7263 = load i32, i32* %7243, align 4
  %7264 = sub nsw i32 %7263, %7262
  %7265 = sext i32 %7264 to i64
  %7266 = mul nsw i64 %7265, %7202
  %7267 = getelementptr inbounds i8, i8* %7260, i64 %7266
  %7268 = add nuw nsw i32 %7248, 1
  %7269 = icmp slt i32 %7268, %7257
  br i1 %7269, label %7244, label %7380

7270:                                             ; preds = %7244, %7372
  %7271 = phi %"class.blink::IntRect"* [ %7373, %7372 ], [ %7246, %7244 ]
  %7272 = phi %"class.blink::IntRect"* [ %7373, %7372 ], [ %7247, %7244 ]
  %7273 = phi i32 [ %7376, %7372 ], [ 0, %7244 ]
  %7274 = phi i16* [ %7375, %7372 ], [ %7249, %7244 ]
  %7275 = phi i8* [ %7374, %7372 ], [ %7250, %7244 ]
  %7276 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7272, i64 0, i32 1, i32 0
  %7277 = load i32, i32* %7276, align 4
  %7278 = icmp eq i32 %7277, 0
  br i1 %7278, label %7372, label %7279

7279:                                             ; preds = %7270
  %7280 = load float*, float** %7242, align 8
  br label %7281

7281:                                             ; preds = %7281, %7279
  %7282 = phi i32 [ %7305, %7281 ], [ 0, %7279 ]
  %7283 = phi i8* [ %7303, %7281 ], [ %7275, %7279 ]
  %7284 = phi float* [ %7304, %7281 ], [ %7280, %7279 ]
  %7285 = getelementptr inbounds i8, i8* %7283, i64 2
  %7286 = load i8, i8* %7285, align 1
  %7287 = uitofp i8 %7286 to float
  %7288 = fmul float %7287, 0x3F70101020000000
  store float %7288, float* %7284, align 4
  %7289 = getelementptr inbounds i8, i8* %7283, i64 1
  %7290 = load i8, i8* %7289, align 1
  %7291 = uitofp i8 %7290 to float
  %7292 = fmul float %7291, 0x3F70101020000000
  %7293 = getelementptr inbounds float, float* %7284, i64 1
  store float %7292, float* %7293, align 4
  %7294 = load i8, i8* %7283, align 1
  %7295 = uitofp i8 %7294 to float
  %7296 = fmul float %7295, 0x3F70101020000000
  %7297 = getelementptr inbounds float, float* %7284, i64 2
  store float %7296, float* %7297, align 4
  %7298 = getelementptr inbounds i8, i8* %7283, i64 3
  %7299 = load i8, i8* %7298, align 1
  %7300 = uitofp i8 %7299 to float
  %7301 = fmul float %7300, 0x3F70101020000000
  %7302 = getelementptr inbounds float, float* %7284, i64 3
  store float %7301, float* %7302, align 4
  %7303 = getelementptr inbounds i8, i8* %7283, i64 4
  %7304 = getelementptr inbounds float, float* %7284, i64 4
  %7305 = add nuw i32 %7282, 1
  %7306 = icmp eq i32 %7305, %7277
  br i1 %7306, label %7307, label %7281

7307:                                             ; preds = %7281
  %7308 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7209, align 8
  %7309 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7308, i64 0, i32 1, i32 0
  %7310 = load i32, i32* %7309, align 4
  %7311 = icmp eq i32 %7310, 0
  br i1 %7311, label %7372, label %7312

7312:                                             ; preds = %7307
  %7313 = load float*, float** %7242, align 8
  br label %7314

7314:                                             ; preds = %7314, %7312
  %7315 = phi float* [ %7366, %7314 ], [ %7313, %7312 ]
  %7316 = phi i32 [ %7368, %7314 ], [ 0, %7312 ]
  %7317 = phi i16* [ %7367, %7314 ], [ %7274, %7312 ]
  %7318 = getelementptr inbounds float, float* %7315, i64 3
  %7319 = load float, float* %7318, align 4
  %7320 = load float, float* %7315, align 4
  %7321 = fmul float %7319, %7320
  %7322 = bitcast float %7321 to i32
  %7323 = lshr i32 %7322, 23
  %7324 = zext i32 %7323 to i64
  %7325 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7324
  %7326 = load i16, i16* %7325, align 2
  %7327 = and i32 %7322, 8388607
  %7328 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7324
  %7329 = load i8, i8* %7328, align 1
  %7330 = zext i8 %7329 to i32
  %7331 = lshr i32 %7327, %7330
  %7332 = trunc i32 %7331 to i16
  %7333 = add i16 %7326, %7332
  store i16 %7333, i16* %7317, align 2
  %7334 = getelementptr inbounds float, float* %7315, i64 1
  %7335 = load float, float* %7334, align 4
  %7336 = fmul float %7319, %7335
  %7337 = bitcast float %7336 to i32
  %7338 = lshr i32 %7337, 23
  %7339 = zext i32 %7338 to i64
  %7340 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7339
  %7341 = load i16, i16* %7340, align 2
  %7342 = and i32 %7337, 8388607
  %7343 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7339
  %7344 = load i8, i8* %7343, align 1
  %7345 = zext i8 %7344 to i32
  %7346 = lshr i32 %7342, %7345
  %7347 = trunc i32 %7346 to i16
  %7348 = add i16 %7341, %7347
  %7349 = getelementptr inbounds i16, i16* %7317, i64 1
  store i16 %7348, i16* %7349, align 2
  %7350 = getelementptr inbounds float, float* %7315, i64 2
  %7351 = load float, float* %7350, align 4
  %7352 = fmul float %7319, %7351
  %7353 = bitcast float %7352 to i32
  %7354 = lshr i32 %7353, 23
  %7355 = zext i32 %7354 to i64
  %7356 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7355
  %7357 = load i16, i16* %7356, align 2
  %7358 = and i32 %7353, 8388607
  %7359 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7355
  %7360 = load i8, i8* %7359, align 1
  %7361 = zext i8 %7360 to i32
  %7362 = lshr i32 %7358, %7361
  %7363 = trunc i32 %7362 to i16
  %7364 = add i16 %7357, %7363
  %7365 = getelementptr inbounds i16, i16* %7317, i64 2
  store i16 %7364, i16* %7365, align 2
  %7366 = getelementptr inbounds float, float* %7315, i64 4
  %7367 = getelementptr inbounds i16, i16* %7317, i64 3
  %7368 = add nuw i32 %7316, 1
  %7369 = icmp eq i32 %7368, %7310
  br i1 %7369, label %7370, label %7314

7370:                                             ; preds = %7314
  %7371 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7209, align 8
  br label %7372

7372:                                             ; preds = %7370, %7307, %7270
  %7373 = phi %"class.blink::IntRect"* [ %7371, %7370 ], [ %7308, %7307 ], [ %7271, %7270 ]
  %7374 = getelementptr inbounds i8, i8* %7275, i64 %7202
  %7375 = getelementptr inbounds i16, i16* %7274, i64 %7206
  %7376 = add nuw nsw i32 %7273, 1
  %7377 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7373, i64 0, i32 1, i32 1
  %7378 = load i32, i32* %7377, align 4
  %7379 = icmp slt i32 %7376, %7378
  br i1 %7379, label %7270, label %7254

7380:                                             ; preds = %7256, %7234
  %7381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7381, align 4
  br label %15491

7382:                                             ; preds = %7020
  %7383 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7384 = load i32, i32* %7383, align 8
  %7385 = sext i32 %7384 to i64
  %7386 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7387 = load i32, i32* %7386, align 8
  %7388 = sdiv i32 %7387, 2
  %7389 = sext i32 %7388 to i64
  %7390 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7391 = load i8*, i8** %7390, align 8
  %7392 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7393 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7392, align 8
  %7394 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7393, i64 0, i32 0, i32 1
  %7395 = load i32, i32* %7394, align 4
  %7396 = mul nsw i32 %7395, %7384
  %7397 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7398 = load i32, i32* %7397, align 4
  %7399 = add nsw i32 %7396, %7398
  %7400 = sext i32 %7399 to i64
  %7401 = getelementptr inbounds i8, i8* %7391, i64 %7400
  %7402 = icmp slt i32 %7387, 0
  %7403 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7404 = load i32, i32* %7403, align 8
  %7405 = icmp sgt i32 %7404, 1
  %7406 = and i1 %7402, %7405
  br i1 %7406, label %7407, label %7417

7407:                                             ; preds = %7382
  %7408 = add nsw i32 %7404, -1
  %7409 = sext i32 %7408 to i64
  %7410 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7411 = load i32, i32* %7410, align 4
  %7412 = sext i32 %7411 to i64
  %7413 = mul nsw i64 %7385, %7409
  %7414 = mul i64 %7413, %7412
  %7415 = sub i64 0, %7414
  %7416 = getelementptr inbounds i8, i8* %7401, i64 %7415
  br label %7419

7417:                                             ; preds = %7382
  %7418 = icmp sgt i32 %7404, 0
  br i1 %7418, label %7419, label %7566

7419:                                             ; preds = %7417, %7407
  %7420 = phi i8* [ %7416, %7407 ], [ %7401, %7417 ]
  %7421 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7422 = bitcast i8** %7421 to i16**
  %7423 = load i16*, i16** %7422, align 8
  %7424 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7425 = bitcast i8** %7424 to float**
  %7426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7427

7427:                                             ; preds = %7439, %7419
  %7428 = phi i32 [ %7404, %7419 ], [ %7440, %7439 ]
  %7429 = phi %"class.blink::IntRect"* [ %7393, %7419 ], [ %7441, %7439 ]
  %7430 = phi %"class.blink::IntRect"* [ %7393, %7419 ], [ %7442, %7439 ]
  %7431 = phi i32 [ 0, %7419 ], [ %7451, %7439 ]
  %7432 = phi i16* [ %7423, %7419 ], [ %7444, %7439 ]
  %7433 = phi i8* [ %7420, %7419 ], [ %7450, %7439 ]
  %7434 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7430, i64 0, i32 1, i32 1
  %7435 = load i32, i32* %7434, align 4
  %7436 = icmp sgt i32 %7435, 0
  br i1 %7436, label %7453, label %7439

7437:                                             ; preds = %7558
  %7438 = load i32, i32* %7403, align 8
  br label %7439

7439:                                             ; preds = %7437, %7427
  %7440 = phi i32 [ %7428, %7427 ], [ %7438, %7437 ]
  %7441 = phi %"class.blink::IntRect"* [ %7429, %7427 ], [ %7559, %7437 ]
  %7442 = phi %"class.blink::IntRect"* [ %7430, %7427 ], [ %7559, %7437 ]
  %7443 = phi i8* [ %7433, %7427 ], [ %7560, %7437 ]
  %7444 = phi i16* [ %7432, %7427 ], [ %7561, %7437 ]
  %7445 = phi i32 [ %7435, %7427 ], [ %7564, %7437 ]
  %7446 = load i32, i32* %7426, align 4
  %7447 = sub nsw i32 %7446, %7445
  %7448 = sext i32 %7447 to i64
  %7449 = mul nsw i64 %7448, %7385
  %7450 = getelementptr inbounds i8, i8* %7443, i64 %7449
  %7451 = add nuw nsw i32 %7431, 1
  %7452 = icmp slt i32 %7451, %7440
  br i1 %7452, label %7427, label %7566

7453:                                             ; preds = %7427, %7558
  %7454 = phi %"class.blink::IntRect"* [ %7559, %7558 ], [ %7429, %7427 ]
  %7455 = phi %"class.blink::IntRect"* [ %7559, %7558 ], [ %7430, %7427 ]
  %7456 = phi i32 [ %7562, %7558 ], [ 0, %7427 ]
  %7457 = phi i16* [ %7561, %7558 ], [ %7432, %7427 ]
  %7458 = phi i8* [ %7560, %7558 ], [ %7433, %7427 ]
  %7459 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7455, i64 0, i32 1, i32 0
  %7460 = load i32, i32* %7459, align 4
  %7461 = icmp eq i32 %7460, 0
  br i1 %7461, label %7558, label %7462

7462:                                             ; preds = %7453
  %7463 = load float*, float** %7425, align 8
  br label %7464

7464:                                             ; preds = %7464, %7462
  %7465 = phi i32 [ %7488, %7464 ], [ 0, %7462 ]
  %7466 = phi i8* [ %7486, %7464 ], [ %7458, %7462 ]
  %7467 = phi float* [ %7487, %7464 ], [ %7463, %7462 ]
  %7468 = getelementptr inbounds i8, i8* %7466, i64 2
  %7469 = load i8, i8* %7468, align 1
  %7470 = uitofp i8 %7469 to float
  %7471 = fmul float %7470, 0x3F70101020000000
  store float %7471, float* %7467, align 4
  %7472 = getelementptr inbounds i8, i8* %7466, i64 1
  %7473 = load i8, i8* %7472, align 1
  %7474 = uitofp i8 %7473 to float
  %7475 = fmul float %7474, 0x3F70101020000000
  %7476 = getelementptr inbounds float, float* %7467, i64 1
  store float %7475, float* %7476, align 4
  %7477 = load i8, i8* %7466, align 1
  %7478 = uitofp i8 %7477 to float
  %7479 = fmul float %7478, 0x3F70101020000000
  %7480 = getelementptr inbounds float, float* %7467, i64 2
  store float %7479, float* %7480, align 4
  %7481 = getelementptr inbounds i8, i8* %7466, i64 3
  %7482 = load i8, i8* %7481, align 1
  %7483 = uitofp i8 %7482 to float
  %7484 = fmul float %7483, 0x3F70101020000000
  %7485 = getelementptr inbounds float, float* %7467, i64 3
  store float %7484, float* %7485, align 4
  %7486 = getelementptr inbounds i8, i8* %7466, i64 4
  %7487 = getelementptr inbounds float, float* %7467, i64 4
  %7488 = add nuw i32 %7465, 1
  %7489 = icmp eq i32 %7488, %7460
  br i1 %7489, label %7490, label %7464

7490:                                             ; preds = %7464
  %7491 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7392, align 8
  %7492 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7491, i64 0, i32 1, i32 0
  %7493 = load i32, i32* %7492, align 4
  %7494 = icmp eq i32 %7493, 0
  br i1 %7494, label %7558, label %7495

7495:                                             ; preds = %7490
  %7496 = load float*, float** %7425, align 8
  br label %7497

7497:                                             ; preds = %7497, %7495
  %7498 = phi i32 [ %7554, %7497 ], [ 0, %7495 ]
  %7499 = phi float* [ %7552, %7497 ], [ %7496, %7495 ]
  %7500 = phi i16* [ %7553, %7497 ], [ %7457, %7495 ]
  %7501 = getelementptr inbounds float, float* %7499, i64 3
  %7502 = load float, float* %7501, align 4
  %7503 = fcmp une float %7502, 0.000000e+00
  %7504 = fdiv float 1.000000e+00, %7502
  %7505 = select i1 %7503, float %7504, float 1.000000e+00
  %7506 = load float, float* %7499, align 4
  %7507 = fmul float %7506, %7505
  %7508 = bitcast float %7507 to i32
  %7509 = lshr i32 %7508, 23
  %7510 = zext i32 %7509 to i64
  %7511 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7510
  %7512 = load i16, i16* %7511, align 2
  %7513 = and i32 %7508, 8388607
  %7514 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7510
  %7515 = load i8, i8* %7514, align 1
  %7516 = zext i8 %7515 to i32
  %7517 = lshr i32 %7513, %7516
  %7518 = trunc i32 %7517 to i16
  %7519 = add i16 %7512, %7518
  store i16 %7519, i16* %7500, align 2
  %7520 = getelementptr inbounds float, float* %7499, i64 1
  %7521 = load float, float* %7520, align 4
  %7522 = fmul float %7505, %7521
  %7523 = bitcast float %7522 to i32
  %7524 = lshr i32 %7523, 23
  %7525 = zext i32 %7524 to i64
  %7526 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7525
  %7527 = load i16, i16* %7526, align 2
  %7528 = and i32 %7523, 8388607
  %7529 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7525
  %7530 = load i8, i8* %7529, align 1
  %7531 = zext i8 %7530 to i32
  %7532 = lshr i32 %7528, %7531
  %7533 = trunc i32 %7532 to i16
  %7534 = add i16 %7527, %7533
  %7535 = getelementptr inbounds i16, i16* %7500, i64 1
  store i16 %7534, i16* %7535, align 2
  %7536 = getelementptr inbounds float, float* %7499, i64 2
  %7537 = load float, float* %7536, align 4
  %7538 = fmul float %7505, %7537
  %7539 = bitcast float %7538 to i32
  %7540 = lshr i32 %7539, 23
  %7541 = zext i32 %7540 to i64
  %7542 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %7541
  %7543 = load i16, i16* %7542, align 2
  %7544 = and i32 %7539, 8388607
  %7545 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %7541
  %7546 = load i8, i8* %7545, align 1
  %7547 = zext i8 %7546 to i32
  %7548 = lshr i32 %7544, %7547
  %7549 = trunc i32 %7548 to i16
  %7550 = add i16 %7543, %7549
  %7551 = getelementptr inbounds i16, i16* %7500, i64 2
  store i16 %7550, i16* %7551, align 2
  %7552 = getelementptr inbounds float, float* %7499, i64 4
  %7553 = getelementptr inbounds i16, i16* %7500, i64 3
  %7554 = add nuw i32 %7498, 1
  %7555 = icmp eq i32 %7554, %7493
  br i1 %7555, label %7556, label %7497

7556:                                             ; preds = %7497
  %7557 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7392, align 8
  br label %7558

7558:                                             ; preds = %7556, %7490, %7453
  %7559 = phi %"class.blink::IntRect"* [ %7557, %7556 ], [ %7491, %7490 ], [ %7454, %7453 ]
  %7560 = getelementptr inbounds i8, i8* %7458, i64 %7385
  %7561 = getelementptr inbounds i16, i16* %7457, i64 %7389
  %7562 = add nuw nsw i32 %7456, 1
  %7563 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7559, i64 0, i32 1, i32 1
  %7564 = load i32, i32* %7563, align 4
  %7565 = icmp slt i32 %7562, %7564
  br i1 %7565, label %7453, label %7437

7566:                                             ; preds = %7439, %7417
  %7567 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7567, align 4
  br label %15491

7568:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %7569
    i32 1, label %7754
    i32 2, label %7936
  ]

7569:                                             ; preds = %7568
  %7570 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7571 = load i32, i32* %7570, align 8
  %7572 = sext i32 %7571 to i64
  %7573 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7574 = load i32, i32* %7573, align 8
  %7575 = sdiv i32 %7574, 4
  %7576 = sext i32 %7575 to i64
  %7577 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7578 = load i8*, i8** %7577, align 8
  %7579 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7580 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7579, align 8
  %7581 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7580, i64 0, i32 0, i32 1
  %7582 = load i32, i32* %7581, align 4
  %7583 = mul nsw i32 %7582, %7571
  %7584 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7585 = load i32, i32* %7584, align 4
  %7586 = add nsw i32 %7583, %7585
  %7587 = sext i32 %7586 to i64
  %7588 = getelementptr inbounds i8, i8* %7578, i64 %7587
  %7589 = icmp slt i32 %7574, 0
  %7590 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7591 = load i32, i32* %7590, align 8
  %7592 = icmp sgt i32 %7591, 1
  %7593 = and i1 %7589, %7592
  br i1 %7593, label %7594, label %7604

7594:                                             ; preds = %7569
  %7595 = add nsw i32 %7591, -1
  %7596 = sext i32 %7595 to i64
  %7597 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7598 = load i32, i32* %7597, align 4
  %7599 = sext i32 %7598 to i64
  %7600 = mul nsw i64 %7572, %7596
  %7601 = mul i64 %7600, %7599
  %7602 = sub i64 0, %7601
  %7603 = getelementptr inbounds i8, i8* %7588, i64 %7602
  br label %7606

7604:                                             ; preds = %7569
  %7605 = icmp sgt i32 %7591, 0
  br i1 %7605, label %7606, label %7752

7606:                                             ; preds = %7604, %7594
  %7607 = phi i8* [ %7603, %7594 ], [ %7588, %7604 ]
  %7608 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7609 = bitcast i8** %7608 to float**
  %7610 = load float*, float** %7609, align 8
  %7611 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7612 = bitcast i8** %7611 to float**
  %7613 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7614

7614:                                             ; preds = %7626, %7606
  %7615 = phi i32 [ %7591, %7606 ], [ %7627, %7626 ]
  %7616 = phi %"class.blink::IntRect"* [ %7580, %7606 ], [ %7628, %7626 ]
  %7617 = phi %"class.blink::IntRect"* [ %7580, %7606 ], [ %7629, %7626 ]
  %7618 = phi i32 [ 0, %7606 ], [ %7638, %7626 ]
  %7619 = phi float* [ %7610, %7606 ], [ %7631, %7626 ]
  %7620 = phi i8* [ %7607, %7606 ], [ %7637, %7626 ]
  %7621 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7617, i64 0, i32 1, i32 1
  %7622 = load i32, i32* %7621, align 4
  %7623 = icmp sgt i32 %7622, 0
  br i1 %7623, label %7640, label %7626

7624:                                             ; preds = %7744
  %7625 = load i32, i32* %7590, align 8
  br label %7626

7626:                                             ; preds = %7624, %7614
  %7627 = phi i32 [ %7615, %7614 ], [ %7625, %7624 ]
  %7628 = phi %"class.blink::IntRect"* [ %7616, %7614 ], [ %7745, %7624 ]
  %7629 = phi %"class.blink::IntRect"* [ %7617, %7614 ], [ %7745, %7624 ]
  %7630 = phi i8* [ %7620, %7614 ], [ %7746, %7624 ]
  %7631 = phi float* [ %7619, %7614 ], [ %7747, %7624 ]
  %7632 = phi i32 [ %7622, %7614 ], [ %7750, %7624 ]
  %7633 = load i32, i32* %7613, align 4
  %7634 = sub nsw i32 %7633, %7632
  %7635 = sext i32 %7634 to i64
  %7636 = mul nsw i64 %7635, %7572
  %7637 = getelementptr inbounds i8, i8* %7630, i64 %7636
  %7638 = add nuw nsw i32 %7618, 1
  %7639 = icmp slt i32 %7638, %7627
  br i1 %7639, label %7614, label %7752

7640:                                             ; preds = %7614, %7744
  %7641 = phi %"class.blink::IntRect"* [ %7745, %7744 ], [ %7616, %7614 ]
  %7642 = phi %"class.blink::IntRect"* [ %7745, %7744 ], [ %7617, %7614 ]
  %7643 = phi i32 [ %7748, %7744 ], [ 0, %7614 ]
  %7644 = phi float* [ %7747, %7744 ], [ %7619, %7614 ]
  %7645 = phi i8* [ %7746, %7744 ], [ %7620, %7614 ]
  %7646 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7642, i64 0, i32 1, i32 0
  %7647 = load i32, i32* %7646, align 4
  %7648 = icmp eq i32 %7647, 0
  br i1 %7648, label %7744, label %7649

7649:                                             ; preds = %7640
  %7650 = load float*, float** %7612, align 8
  br label %7651

7651:                                             ; preds = %7651, %7649
  %7652 = phi i32 [ %7675, %7651 ], [ 0, %7649 ]
  %7653 = phi i8* [ %7673, %7651 ], [ %7645, %7649 ]
  %7654 = phi float* [ %7674, %7651 ], [ %7650, %7649 ]
  %7655 = getelementptr inbounds i8, i8* %7653, i64 2
  %7656 = load i8, i8* %7655, align 1
  %7657 = uitofp i8 %7656 to float
  %7658 = fmul float %7657, 0x3F70101020000000
  store float %7658, float* %7654, align 4
  %7659 = getelementptr inbounds i8, i8* %7653, i64 1
  %7660 = load i8, i8* %7659, align 1
  %7661 = uitofp i8 %7660 to float
  %7662 = fmul float %7661, 0x3F70101020000000
  %7663 = getelementptr inbounds float, float* %7654, i64 1
  store float %7662, float* %7663, align 4
  %7664 = load i8, i8* %7653, align 1
  %7665 = uitofp i8 %7664 to float
  %7666 = fmul float %7665, 0x3F70101020000000
  %7667 = getelementptr inbounds float, float* %7654, i64 2
  store float %7666, float* %7667, align 4
  %7668 = getelementptr inbounds i8, i8* %7653, i64 3
  %7669 = load i8, i8* %7668, align 1
  %7670 = uitofp i8 %7669 to float
  %7671 = fmul float %7670, 0x3F70101020000000
  %7672 = getelementptr inbounds float, float* %7654, i64 3
  store float %7671, float* %7672, align 4
  %7673 = getelementptr inbounds i8, i8* %7653, i64 4
  %7674 = getelementptr inbounds float, float* %7654, i64 4
  %7675 = add nuw i32 %7652, 1
  %7676 = icmp eq i32 %7675, %7647
  br i1 %7676, label %7677, label %7651

7677:                                             ; preds = %7651
  %7678 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7579, align 8
  %7679 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7678, i64 0, i32 1, i32 0
  %7680 = load i32, i32* %7679, align 4
  %7681 = icmp eq i32 %7680, 0
  br i1 %7681, label %7744, label %7682

7682:                                             ; preds = %7677
  %7683 = load float*, float** %7612, align 8
  %7684 = and i32 %7680, 1
  %7685 = icmp eq i32 %7680, 1
  br i1 %7685, label %7724, label %7686

7686:                                             ; preds = %7682
  %7687 = sub i32 %7680, %7684
  br label %7688

7688:                                             ; preds = %7688, %7686
  %7689 = phi float* [ %7683, %7686 ], [ %7720, %7688 ]
  %7690 = phi float* [ %7644, %7686 ], [ %7721, %7688 ]
  %7691 = phi i32 [ %7687, %7686 ], [ %7722, %7688 ]
  %7692 = bitcast float* %7689 to i32*
  %7693 = load i32, i32* %7692, align 4
  %7694 = bitcast float* %7690 to i32*
  store i32 %7693, i32* %7694, align 4
  %7695 = getelementptr inbounds float, float* %7689, i64 1
  %7696 = bitcast float* %7695 to i32*
  %7697 = load i32, i32* %7696, align 4
  %7698 = getelementptr inbounds float, float* %7690, i64 1
  %7699 = bitcast float* %7698 to i32*
  store i32 %7697, i32* %7699, align 4
  %7700 = getelementptr inbounds float, float* %7689, i64 2
  %7701 = bitcast float* %7700 to i32*
  %7702 = load i32, i32* %7701, align 4
  %7703 = getelementptr inbounds float, float* %7690, i64 2
  %7704 = bitcast float* %7703 to i32*
  store i32 %7702, i32* %7704, align 4
  %7705 = getelementptr inbounds float, float* %7689, i64 4
  %7706 = getelementptr inbounds float, float* %7690, i64 3
  %7707 = bitcast float* %7705 to i32*
  %7708 = load i32, i32* %7707, align 4
  %7709 = bitcast float* %7706 to i32*
  store i32 %7708, i32* %7709, align 4
  %7710 = getelementptr inbounds float, float* %7689, i64 5
  %7711 = bitcast float* %7710 to i32*
  %7712 = load i32, i32* %7711, align 4
  %7713 = getelementptr inbounds float, float* %7690, i64 4
  %7714 = bitcast float* %7713 to i32*
  store i32 %7712, i32* %7714, align 4
  %7715 = getelementptr inbounds float, float* %7689, i64 6
  %7716 = bitcast float* %7715 to i32*
  %7717 = load i32, i32* %7716, align 4
  %7718 = getelementptr inbounds float, float* %7690, i64 5
  %7719 = bitcast float* %7718 to i32*
  store i32 %7717, i32* %7719, align 4
  %7720 = getelementptr inbounds float, float* %7689, i64 8
  %7721 = getelementptr inbounds float, float* %7690, i64 6
  %7722 = add i32 %7691, -2
  %7723 = icmp eq i32 %7722, 0
  br i1 %7723, label %7724, label %7688

7724:                                             ; preds = %7688, %7682
  %7725 = phi float* [ %7683, %7682 ], [ %7720, %7688 ]
  %7726 = phi float* [ %7644, %7682 ], [ %7721, %7688 ]
  %7727 = icmp eq i32 %7684, 0
  br i1 %7727, label %7742, label %7728

7728:                                             ; preds = %7724
  %7729 = bitcast float* %7725 to i32*
  %7730 = load i32, i32* %7729, align 4
  %7731 = bitcast float* %7726 to i32*
  store i32 %7730, i32* %7731, align 4
  %7732 = getelementptr inbounds float, float* %7725, i64 1
  %7733 = bitcast float* %7732 to i32*
  %7734 = load i32, i32* %7733, align 4
  %7735 = getelementptr inbounds float, float* %7726, i64 1
  %7736 = bitcast float* %7735 to i32*
  store i32 %7734, i32* %7736, align 4
  %7737 = getelementptr inbounds float, float* %7725, i64 2
  %7738 = bitcast float* %7737 to i32*
  %7739 = load i32, i32* %7738, align 4
  %7740 = getelementptr inbounds float, float* %7726, i64 2
  %7741 = bitcast float* %7740 to i32*
  store i32 %7739, i32* %7741, align 4
  br label %7742

7742:                                             ; preds = %7724, %7728
  %7743 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7579, align 8
  br label %7744

7744:                                             ; preds = %7742, %7677, %7640
  %7745 = phi %"class.blink::IntRect"* [ %7743, %7742 ], [ %7678, %7677 ], [ %7641, %7640 ]
  %7746 = getelementptr inbounds i8, i8* %7645, i64 %7572
  %7747 = getelementptr inbounds float, float* %7644, i64 %7576
  %7748 = add nuw nsw i32 %7643, 1
  %7749 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7745, i64 0, i32 1, i32 1
  %7750 = load i32, i32* %7749, align 4
  %7751 = icmp slt i32 %7748, %7750
  br i1 %7751, label %7640, label %7624

7752:                                             ; preds = %7626, %7604
  %7753 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7753, align 4
  br label %15491

7754:                                             ; preds = %7568
  %7755 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7756 = load i32, i32* %7755, align 8
  %7757 = sext i32 %7756 to i64
  %7758 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7759 = load i32, i32* %7758, align 8
  %7760 = sdiv i32 %7759, 4
  %7761 = sext i32 %7760 to i64
  %7762 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7763 = load i8*, i8** %7762, align 8
  %7764 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7765 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7764, align 8
  %7766 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7765, i64 0, i32 0, i32 1
  %7767 = load i32, i32* %7766, align 4
  %7768 = mul nsw i32 %7767, %7756
  %7769 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7770 = load i32, i32* %7769, align 4
  %7771 = add nsw i32 %7768, %7770
  %7772 = sext i32 %7771 to i64
  %7773 = getelementptr inbounds i8, i8* %7763, i64 %7772
  %7774 = icmp slt i32 %7759, 0
  %7775 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7776 = load i32, i32* %7775, align 8
  %7777 = icmp sgt i32 %7776, 1
  %7778 = and i1 %7774, %7777
  br i1 %7778, label %7779, label %7789

7779:                                             ; preds = %7754
  %7780 = add nsw i32 %7776, -1
  %7781 = sext i32 %7780 to i64
  %7782 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7783 = load i32, i32* %7782, align 4
  %7784 = sext i32 %7783 to i64
  %7785 = mul nsw i64 %7757, %7781
  %7786 = mul i64 %7785, %7784
  %7787 = sub i64 0, %7786
  %7788 = getelementptr inbounds i8, i8* %7773, i64 %7787
  br label %7791

7789:                                             ; preds = %7754
  %7790 = icmp sgt i32 %7776, 0
  br i1 %7790, label %7791, label %7934

7791:                                             ; preds = %7789, %7779
  %7792 = phi i8* [ %7788, %7779 ], [ %7773, %7789 ]
  %7793 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7794 = bitcast i8** %7793 to float**
  %7795 = load float*, float** %7794, align 8
  %7796 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7797 = bitcast i8** %7796 to float**
  %7798 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7799

7799:                                             ; preds = %7811, %7791
  %7800 = phi i32 [ %7776, %7791 ], [ %7812, %7811 ]
  %7801 = phi %"class.blink::IntRect"* [ %7765, %7791 ], [ %7813, %7811 ]
  %7802 = phi %"class.blink::IntRect"* [ %7765, %7791 ], [ %7814, %7811 ]
  %7803 = phi i32 [ 0, %7791 ], [ %7823, %7811 ]
  %7804 = phi float* [ %7795, %7791 ], [ %7816, %7811 ]
  %7805 = phi i8* [ %7792, %7791 ], [ %7822, %7811 ]
  %7806 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7802, i64 0, i32 1, i32 1
  %7807 = load i32, i32* %7806, align 4
  %7808 = icmp sgt i32 %7807, 0
  br i1 %7808, label %7825, label %7811

7809:                                             ; preds = %7926
  %7810 = load i32, i32* %7775, align 8
  br label %7811

7811:                                             ; preds = %7809, %7799
  %7812 = phi i32 [ %7800, %7799 ], [ %7810, %7809 ]
  %7813 = phi %"class.blink::IntRect"* [ %7801, %7799 ], [ %7927, %7809 ]
  %7814 = phi %"class.blink::IntRect"* [ %7802, %7799 ], [ %7927, %7809 ]
  %7815 = phi i8* [ %7805, %7799 ], [ %7928, %7809 ]
  %7816 = phi float* [ %7804, %7799 ], [ %7929, %7809 ]
  %7817 = phi i32 [ %7807, %7799 ], [ %7932, %7809 ]
  %7818 = load i32, i32* %7798, align 4
  %7819 = sub nsw i32 %7818, %7817
  %7820 = sext i32 %7819 to i64
  %7821 = mul nsw i64 %7820, %7757
  %7822 = getelementptr inbounds i8, i8* %7815, i64 %7821
  %7823 = add nuw nsw i32 %7803, 1
  %7824 = icmp slt i32 %7823, %7812
  br i1 %7824, label %7799, label %7934

7825:                                             ; preds = %7799, %7926
  %7826 = phi %"class.blink::IntRect"* [ %7927, %7926 ], [ %7801, %7799 ]
  %7827 = phi %"class.blink::IntRect"* [ %7927, %7926 ], [ %7802, %7799 ]
  %7828 = phi i32 [ %7930, %7926 ], [ 0, %7799 ]
  %7829 = phi float* [ %7929, %7926 ], [ %7804, %7799 ]
  %7830 = phi i8* [ %7928, %7926 ], [ %7805, %7799 ]
  %7831 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7827, i64 0, i32 1, i32 0
  %7832 = load i32, i32* %7831, align 4
  %7833 = icmp eq i32 %7832, 0
  br i1 %7833, label %7926, label %7834

7834:                                             ; preds = %7825
  %7835 = load float*, float** %7797, align 8
  br label %7836

7836:                                             ; preds = %7836, %7834
  %7837 = phi i32 [ %7860, %7836 ], [ 0, %7834 ]
  %7838 = phi i8* [ %7858, %7836 ], [ %7830, %7834 ]
  %7839 = phi float* [ %7859, %7836 ], [ %7835, %7834 ]
  %7840 = getelementptr inbounds i8, i8* %7838, i64 2
  %7841 = load i8, i8* %7840, align 1
  %7842 = uitofp i8 %7841 to float
  %7843 = fmul float %7842, 0x3F70101020000000
  store float %7843, float* %7839, align 4
  %7844 = getelementptr inbounds i8, i8* %7838, i64 1
  %7845 = load i8, i8* %7844, align 1
  %7846 = uitofp i8 %7845 to float
  %7847 = fmul float %7846, 0x3F70101020000000
  %7848 = getelementptr inbounds float, float* %7839, i64 1
  store float %7847, float* %7848, align 4
  %7849 = load i8, i8* %7838, align 1
  %7850 = uitofp i8 %7849 to float
  %7851 = fmul float %7850, 0x3F70101020000000
  %7852 = getelementptr inbounds float, float* %7839, i64 2
  store float %7851, float* %7852, align 4
  %7853 = getelementptr inbounds i8, i8* %7838, i64 3
  %7854 = load i8, i8* %7853, align 1
  %7855 = uitofp i8 %7854 to float
  %7856 = fmul float %7855, 0x3F70101020000000
  %7857 = getelementptr inbounds float, float* %7839, i64 3
  store float %7856, float* %7857, align 4
  %7858 = getelementptr inbounds i8, i8* %7838, i64 4
  %7859 = getelementptr inbounds float, float* %7839, i64 4
  %7860 = add nuw i32 %7837, 1
  %7861 = icmp eq i32 %7860, %7832
  br i1 %7861, label %7862, label %7836

7862:                                             ; preds = %7836
  %7863 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7764, align 8
  %7864 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7863, i64 0, i32 1, i32 0
  %7865 = load i32, i32* %7864, align 4
  %7866 = icmp eq i32 %7865, 0
  br i1 %7866, label %7926, label %7867

7867:                                             ; preds = %7862
  %7868 = load float*, float** %7797, align 8
  %7869 = and i32 %7865, 1
  %7870 = icmp eq i32 %7865, 1
  br i1 %7870, label %7907, label %7871

7871:                                             ; preds = %7867
  %7872 = sub i32 %7865, %7869
  br label %7873

7873:                                             ; preds = %7873, %7871
  %7874 = phi float* [ %7868, %7871 ], [ %7903, %7873 ]
  %7875 = phi float* [ %7829, %7871 ], [ %7904, %7873 ]
  %7876 = phi i32 [ %7872, %7871 ], [ %7905, %7873 ]
  %7877 = getelementptr inbounds float, float* %7874, i64 3
  %7878 = load float, float* %7877, align 4
  %7879 = load float, float* %7874, align 4
  %7880 = fmul float %7878, %7879
  store float %7880, float* %7875, align 4
  %7881 = getelementptr inbounds float, float* %7874, i64 1
  %7882 = load float, float* %7881, align 4
  %7883 = fmul float %7878, %7882
  %7884 = getelementptr inbounds float, float* %7875, i64 1
  store float %7883, float* %7884, align 4
  %7885 = getelementptr inbounds float, float* %7874, i64 2
  %7886 = load float, float* %7885, align 4
  %7887 = fmul float %7878, %7886
  %7888 = getelementptr inbounds float, float* %7875, i64 2
  store float %7887, float* %7888, align 4
  %7889 = getelementptr inbounds float, float* %7874, i64 4
  %7890 = getelementptr inbounds float, float* %7875, i64 3
  %7891 = getelementptr inbounds float, float* %7874, i64 7
  %7892 = load float, float* %7891, align 4
  %7893 = load float, float* %7889, align 4
  %7894 = fmul float %7892, %7893
  store float %7894, float* %7890, align 4
  %7895 = getelementptr inbounds float, float* %7874, i64 5
  %7896 = load float, float* %7895, align 4
  %7897 = fmul float %7892, %7896
  %7898 = getelementptr inbounds float, float* %7875, i64 4
  store float %7897, float* %7898, align 4
  %7899 = getelementptr inbounds float, float* %7874, i64 6
  %7900 = load float, float* %7899, align 4
  %7901 = fmul float %7892, %7900
  %7902 = getelementptr inbounds float, float* %7875, i64 5
  store float %7901, float* %7902, align 4
  %7903 = getelementptr inbounds float, float* %7874, i64 8
  %7904 = getelementptr inbounds float, float* %7875, i64 6
  %7905 = add i32 %7876, -2
  %7906 = icmp eq i32 %7905, 0
  br i1 %7906, label %7907, label %7873

7907:                                             ; preds = %7873, %7867
  %7908 = phi float* [ %7868, %7867 ], [ %7903, %7873 ]
  %7909 = phi float* [ %7829, %7867 ], [ %7904, %7873 ]
  %7910 = icmp eq i32 %7869, 0
  br i1 %7910, label %7924, label %7911

7911:                                             ; preds = %7907
  %7912 = getelementptr inbounds float, float* %7908, i64 3
  %7913 = load float, float* %7912, align 4
  %7914 = load float, float* %7908, align 4
  %7915 = fmul float %7913, %7914
  store float %7915, float* %7909, align 4
  %7916 = getelementptr inbounds float, float* %7908, i64 1
  %7917 = load float, float* %7916, align 4
  %7918 = fmul float %7913, %7917
  %7919 = getelementptr inbounds float, float* %7909, i64 1
  store float %7918, float* %7919, align 4
  %7920 = getelementptr inbounds float, float* %7908, i64 2
  %7921 = load float, float* %7920, align 4
  %7922 = fmul float %7913, %7921
  %7923 = getelementptr inbounds float, float* %7909, i64 2
  store float %7922, float* %7923, align 4
  br label %7924

7924:                                             ; preds = %7907, %7911
  %7925 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7764, align 8
  br label %7926

7926:                                             ; preds = %7924, %7862, %7825
  %7927 = phi %"class.blink::IntRect"* [ %7925, %7924 ], [ %7863, %7862 ], [ %7826, %7825 ]
  %7928 = getelementptr inbounds i8, i8* %7830, i64 %7757
  %7929 = getelementptr inbounds float, float* %7829, i64 %7761
  %7930 = add nuw nsw i32 %7828, 1
  %7931 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7927, i64 0, i32 1, i32 1
  %7932 = load i32, i32* %7931, align 4
  %7933 = icmp slt i32 %7930, %7932
  br i1 %7933, label %7825, label %7809

7934:                                             ; preds = %7811, %7789
  %7935 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7935, align 4
  br label %15491

7936:                                             ; preds = %7568
  %7937 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7938 = load i32, i32* %7937, align 8
  %7939 = sext i32 %7938 to i64
  %7940 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7941 = load i32, i32* %7940, align 8
  %7942 = sdiv i32 %7941, 4
  %7943 = sext i32 %7942 to i64
  %7944 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7945 = load i8*, i8** %7944, align 8
  %7946 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7947 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7946, align 8
  %7948 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7947, i64 0, i32 0, i32 1
  %7949 = load i32, i32* %7948, align 4
  %7950 = mul nsw i32 %7949, %7938
  %7951 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7952 = load i32, i32* %7951, align 4
  %7953 = add nsw i32 %7950, %7952
  %7954 = sext i32 %7953 to i64
  %7955 = getelementptr inbounds i8, i8* %7945, i64 %7954
  %7956 = icmp slt i32 %7941, 0
  %7957 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7958 = load i32, i32* %7957, align 8
  %7959 = icmp sgt i32 %7958, 1
  %7960 = and i1 %7956, %7959
  br i1 %7960, label %7961, label %7971

7961:                                             ; preds = %7936
  %7962 = add nsw i32 %7958, -1
  %7963 = sext i32 %7962 to i64
  %7964 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7965 = load i32, i32* %7964, align 4
  %7966 = sext i32 %7965 to i64
  %7967 = mul nsw i64 %7939, %7963
  %7968 = mul i64 %7967, %7966
  %7969 = sub i64 0, %7968
  %7970 = getelementptr inbounds i8, i8* %7955, i64 %7969
  br label %7973

7971:                                             ; preds = %7936
  %7972 = icmp sgt i32 %7958, 0
  br i1 %7972, label %7973, label %8142

7973:                                             ; preds = %7971, %7961
  %7974 = phi i8* [ %7970, %7961 ], [ %7955, %7971 ]
  %7975 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7976 = bitcast i8** %7975 to float**
  %7977 = load float*, float** %7976, align 8
  %7978 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7979 = bitcast i8** %7978 to float**
  %7980 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7981

7981:                                             ; preds = %7993, %7973
  %7982 = phi i32 [ %7958, %7973 ], [ %7994, %7993 ]
  %7983 = phi %"class.blink::IntRect"* [ %7947, %7973 ], [ %7995, %7993 ]
  %7984 = phi %"class.blink::IntRect"* [ %7947, %7973 ], [ %7996, %7993 ]
  %7985 = phi i32 [ 0, %7973 ], [ %8005, %7993 ]
  %7986 = phi float* [ %7977, %7973 ], [ %7998, %7993 ]
  %7987 = phi i8* [ %7974, %7973 ], [ %8004, %7993 ]
  %7988 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7984, i64 0, i32 1, i32 1
  %7989 = load i32, i32* %7988, align 4
  %7990 = icmp sgt i32 %7989, 0
  br i1 %7990, label %8007, label %7993

7991:                                             ; preds = %8133
  %7992 = load i32, i32* %7957, align 8
  br label %7993

7993:                                             ; preds = %7991, %7981
  %7994 = phi i32 [ %7982, %7981 ], [ %7992, %7991 ]
  %7995 = phi %"class.blink::IntRect"* [ %7983, %7981 ], [ %8134, %7991 ]
  %7996 = phi %"class.blink::IntRect"* [ %7984, %7981 ], [ %8134, %7991 ]
  %7997 = phi i8* [ %7987, %7981 ], [ %8135, %7991 ]
  %7998 = phi float* [ %7986, %7981 ], [ %8136, %7991 ]
  %7999 = phi i32 [ %7989, %7981 ], [ %8139, %7991 ]
  %8000 = load i32, i32* %7980, align 4
  %8001 = sub nsw i32 %8000, %7999
  %8002 = sext i32 %8001 to i64
  %8003 = mul nsw i64 %8002, %7939
  %8004 = getelementptr inbounds i8, i8* %7997, i64 %8003
  %8005 = add nuw nsw i32 %7985, 1
  %8006 = icmp slt i32 %8005, %7994
  br i1 %8006, label %7981, label %8142

8007:                                             ; preds = %7981, %8133
  %8008 = phi i64 [ %8141, %8133 ], [ 0, %7981 ]
  %8009 = phi %"class.blink::IntRect"* [ %8134, %8133 ], [ %7983, %7981 ]
  %8010 = phi %"class.blink::IntRect"* [ %8134, %8133 ], [ %7984, %7981 ]
  %8011 = phi i32 [ %8137, %8133 ], [ 0, %7981 ]
  %8012 = phi float* [ %8136, %8133 ], [ %7986, %7981 ]
  %8013 = phi i8* [ %8135, %8133 ], [ %7987, %7981 ]
  %8014 = mul i64 %8008, %7943
  %8015 = getelementptr float, float* %7986, i64 %8014
  %8016 = add i64 %8014, 3
  %8017 = getelementptr float, float* %7986, i64 %8016
  %8018 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8010, i64 0, i32 1, i32 0
  %8019 = load i32, i32* %8018, align 4
  %8020 = icmp eq i32 %8019, 0
  br i1 %8020, label %8133, label %8021

8021:                                             ; preds = %8007
  %8022 = load float*, float** %7979, align 8
  br label %8023

8023:                                             ; preds = %8023, %8021
  %8024 = phi i32 [ %8047, %8023 ], [ 0, %8021 ]
  %8025 = phi i8* [ %8045, %8023 ], [ %8013, %8021 ]
  %8026 = phi float* [ %8046, %8023 ], [ %8022, %8021 ]
  %8027 = getelementptr inbounds i8, i8* %8025, i64 2
  %8028 = load i8, i8* %8027, align 1
  %8029 = uitofp i8 %8028 to float
  %8030 = fmul float %8029, 0x3F70101020000000
  store float %8030, float* %8026, align 4
  %8031 = getelementptr inbounds i8, i8* %8025, i64 1
  %8032 = load i8, i8* %8031, align 1
  %8033 = uitofp i8 %8032 to float
  %8034 = fmul float %8033, 0x3F70101020000000
  %8035 = getelementptr inbounds float, float* %8026, i64 1
  store float %8034, float* %8035, align 4
  %8036 = load i8, i8* %8025, align 1
  %8037 = uitofp i8 %8036 to float
  %8038 = fmul float %8037, 0x3F70101020000000
  %8039 = getelementptr inbounds float, float* %8026, i64 2
  store float %8038, float* %8039, align 4
  %8040 = getelementptr inbounds i8, i8* %8025, i64 3
  %8041 = load i8, i8* %8040, align 1
  %8042 = uitofp i8 %8041 to float
  %8043 = fmul float %8042, 0x3F70101020000000
  %8044 = getelementptr inbounds float, float* %8026, i64 3
  store float %8043, float* %8044, align 4
  %8045 = getelementptr inbounds i8, i8* %8025, i64 4
  %8046 = getelementptr inbounds float, float* %8026, i64 4
  %8047 = add nuw i32 %8024, 1
  %8048 = icmp eq i32 %8047, %8019
  br i1 %8048, label %8049, label %8023

8049:                                             ; preds = %8023
  %8050 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7946, align 8
  %8051 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8050, i64 0, i32 1, i32 0
  %8052 = load i32, i32* %8051, align 4
  %8053 = icmp eq i32 %8052, 0
  br i1 %8053, label %8133, label %8054

8054:                                             ; preds = %8049
  %8055 = load float*, float** %7979, align 8
  %8056 = add i32 %8052, -1
  %8057 = zext i32 %8056 to i64
  %8058 = add nuw nsw i64 %8057, 1
  %8059 = icmp ult i64 %8058, 4
  br i1 %8059, label %8104, label %8060

8060:                                             ; preds = %8054
  %8061 = add i32 %8052, -1
  %8062 = zext i32 %8061 to i64
  %8063 = mul nuw nsw i64 %8062, 3
  %8064 = getelementptr float, float* %8017, i64 %8063
  %8065 = getelementptr float, float* %8055, i64 4
  %8066 = shl nuw nsw i64 %8062, 2
  %8067 = getelementptr float, float* %8065, i64 %8066
  %8068 = icmp ult float* %8015, %8067
  %8069 = icmp ult float* %8055, %8064
  %8070 = and i1 %8068, %8069
  br i1 %8070, label %8104, label %8071

8071:                                             ; preds = %8060
  %8072 = and i64 %8058, 8589934588
  %8073 = trunc i64 %8072 to i32
  %8074 = shl nuw nsw i64 %8072, 2
  %8075 = getelementptr float, float* %8055, i64 %8074
  %8076 = mul nuw nsw i64 %8072, 3
  %8077 = getelementptr float, float* %8012, i64 %8076
  br label %8078

8078:                                             ; preds = %8078, %8071
  %8079 = phi i64 [ 0, %8071 ], [ %8100, %8078 ]
  %8080 = shl i64 %8079, 2
  %8081 = mul i64 %8079, 3
  %8082 = getelementptr inbounds float, float* %8055, i64 %8080
  %8083 = bitcast float* %8082 to <16 x float>*
  %8084 = load <16 x float>, <16 x float>* %8083, align 4
  %8085 = shufflevector <16 x float> %8084, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %8086 = shufflevector <16 x float> %8084, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %8087 = shufflevector <16 x float> %8084, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %8088 = shufflevector <16 x float> %8084, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %8089 = fcmp une <4 x float> %8088, zeroinitializer
  %8090 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %8088
  %8091 = select <4 x i1> %8089, <4 x float> %8090, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %8092 = fmul <4 x float> %8085, %8091
  %8093 = fmul <4 x float> %8091, %8086
  %8094 = fmul <4 x float> %8091, %8087
  %8095 = getelementptr inbounds float, float* %8012, i64 %8081
  %8096 = bitcast float* %8095 to <12 x float>*
  %8097 = shufflevector <4 x float> %8092, <4 x float> %8093, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8098 = shufflevector <4 x float> %8094, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %8099 = shufflevector <8 x float> %8097, <8 x float> %8098, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %8099, <12 x float>* %8096, align 4
  %8100 = add i64 %8079, 4
  %8101 = icmp eq i64 %8100, %8072
  br i1 %8101, label %8102, label %8078, !llvm.loop !445

8102:                                             ; preds = %8078
  %8103 = icmp eq i64 %8058, %8072
  br i1 %8103, label %8131, label %8104

8104:                                             ; preds = %8102, %8060, %8054
  %8105 = phi i32 [ 0, %8060 ], [ 0, %8054 ], [ %8073, %8102 ]
  %8106 = phi float* [ %8055, %8060 ], [ %8055, %8054 ], [ %8075, %8102 ]
  %8107 = phi float* [ %8012, %8060 ], [ %8012, %8054 ], [ %8077, %8102 ]
  br label %8108

8108:                                             ; preds = %8104, %8108
  %8109 = phi i32 [ %8129, %8108 ], [ %8105, %8104 ]
  %8110 = phi float* [ %8127, %8108 ], [ %8106, %8104 ]
  %8111 = phi float* [ %8128, %8108 ], [ %8107, %8104 ]
  %8112 = getelementptr inbounds float, float* %8110, i64 3
  %8113 = load float, float* %8112, align 4
  %8114 = fcmp une float %8113, 0.000000e+00
  %8115 = fdiv float 1.000000e+00, %8113
  %8116 = select i1 %8114, float %8115, float 1.000000e+00
  %8117 = load float, float* %8110, align 4
  %8118 = fmul float %8117, %8116
  store float %8118, float* %8111, align 4
  %8119 = getelementptr inbounds float, float* %8110, i64 1
  %8120 = load float, float* %8119, align 4
  %8121 = fmul float %8116, %8120
  %8122 = getelementptr inbounds float, float* %8111, i64 1
  store float %8121, float* %8122, align 4
  %8123 = getelementptr inbounds float, float* %8110, i64 2
  %8124 = load float, float* %8123, align 4
  %8125 = fmul float %8116, %8124
  %8126 = getelementptr inbounds float, float* %8111, i64 2
  store float %8125, float* %8126, align 4
  %8127 = getelementptr inbounds float, float* %8110, i64 4
  %8128 = getelementptr inbounds float, float* %8111, i64 3
  %8129 = add nuw i32 %8109, 1
  %8130 = icmp eq i32 %8129, %8052
  br i1 %8130, label %8131, label %8108, !llvm.loop !446

8131:                                             ; preds = %8108, %8102
  %8132 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7946, align 8
  br label %8133

8133:                                             ; preds = %8131, %8049, %8007
  %8134 = phi %"class.blink::IntRect"* [ %8132, %8131 ], [ %8050, %8049 ], [ %8009, %8007 ]
  %8135 = getelementptr inbounds i8, i8* %8013, i64 %7939
  %8136 = getelementptr inbounds float, float* %8012, i64 %7943
  %8137 = add nuw nsw i32 %8011, 1
  %8138 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8134, i64 0, i32 1, i32 1
  %8139 = load i32, i32* %8138, align 4
  %8140 = icmp slt i32 %8137, %8139
  %8141 = add i64 %8008, 1
  br i1 %8140, label %8007, label %7991

8142:                                             ; preds = %7993, %7971
  %8143 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8143, align 4
  br label %15491

8144:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %8145
    i32 1, label %8375
    i32 2, label %8713
  ]

8145:                                             ; preds = %8144
  %8146 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8147 = load i32, i32* %8146, align 8
  %8148 = sext i32 %8147 to i64
  %8149 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8150 = load i32, i32* %8149, align 8
  %8151 = sext i32 %8150 to i64
  %8152 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8153 = load i8*, i8** %8152, align 8
  %8154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8155 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8154, align 8
  %8156 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8155, i64 0, i32 0, i32 1
  %8157 = load i32, i32* %8156, align 4
  %8158 = mul nsw i32 %8157, %8147
  %8159 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8160 = load i32, i32* %8159, align 4
  %8161 = add nsw i32 %8158, %8160
  %8162 = sext i32 %8161 to i64
  %8163 = getelementptr inbounds i8, i8* %8153, i64 %8162
  %8164 = icmp slt i32 %8150, 0
  %8165 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8166 = load i32, i32* %8165, align 8
  %8167 = icmp sgt i32 %8166, 1
  %8168 = and i1 %8164, %8167
  br i1 %8168, label %8169, label %8179

8169:                                             ; preds = %8145
  %8170 = add nsw i32 %8166, -1
  %8171 = sext i32 %8170 to i64
  %8172 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8173 = load i32, i32* %8172, align 4
  %8174 = sext i32 %8173 to i64
  %8175 = mul nsw i64 %8148, %8171
  %8176 = mul i64 %8175, %8174
  %8177 = sub i64 0, %8176
  %8178 = getelementptr inbounds i8, i8* %8163, i64 %8177
  br label %8181

8179:                                             ; preds = %8145
  %8180 = icmp sgt i32 %8166, 0
  br i1 %8180, label %8181, label %8373

8181:                                             ; preds = %8179, %8169
  %8182 = phi i8* [ %8178, %8169 ], [ %8163, %8179 ]
  %8183 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8184 = load i8*, i8** %8183, align 8
  %8185 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8186

8186:                                             ; preds = %8197, %8181
  %8187 = phi i32 [ %8166, %8181 ], [ %8198, %8197 ]
  %8188 = phi %"class.blink::IntRect"* [ %8155, %8181 ], [ %8199, %8197 ]
  %8189 = phi i32 [ 0, %8181 ], [ %8208, %8197 ]
  %8190 = phi i8* [ %8184, %8181 ], [ %8201, %8197 ]
  %8191 = phi i8* [ %8182, %8181 ], [ %8207, %8197 ]
  %8192 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8188, i64 0, i32 1, i32 1
  %8193 = load i32, i32* %8192, align 4
  %8194 = icmp sgt i32 %8193, 0
  br i1 %8194, label %8210, label %8197

8195:                                             ; preds = %8365
  %8196 = load i32, i32* %8165, align 8
  br label %8197

8197:                                             ; preds = %8195, %8186
  %8198 = phi i32 [ %8187, %8186 ], [ %8196, %8195 ]
  %8199 = phi %"class.blink::IntRect"* [ %8188, %8186 ], [ %8369, %8195 ]
  %8200 = phi i8* [ %8191, %8186 ], [ %8366, %8195 ]
  %8201 = phi i8* [ %8190, %8186 ], [ %8367, %8195 ]
  %8202 = phi i32 [ %8193, %8186 ], [ %8371, %8195 ]
  %8203 = load i32, i32* %8185, align 4
  %8204 = sub nsw i32 %8203, %8202
  %8205 = sext i32 %8204 to i64
  %8206 = mul nsw i64 %8205, %8148
  %8207 = getelementptr inbounds i8, i8* %8200, i64 %8206
  %8208 = add nuw nsw i32 %8189, 1
  %8209 = icmp slt i32 %8208, %8198
  br i1 %8209, label %8186, label %8373

8210:                                             ; preds = %8186, %8365
  %8211 = phi %"class.blink::IntRect"* [ %8369, %8365 ], [ %8188, %8186 ]
  %8212 = phi i32 [ %8368, %8365 ], [ 0, %8186 ]
  %8213 = phi i8* [ %8367, %8365 ], [ %8190, %8186 ]
  %8214 = phi i8* [ %8366, %8365 ], [ %8191, %8186 ]
  %8215 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8211, i64 0, i32 1, i32 0
  %8216 = load i32, i32* %8215, align 4
  %8217 = bitcast i8* %8214 to i32*
  %8218 = bitcast i8* %8213 to i32*
  %8219 = and i32 %8216, -4
  %8220 = icmp eq i32 %8219, 0
  br i1 %8220, label %8278, label %8221

8221:                                             ; preds = %8210
  %8222 = add i32 %8219, -1
  %8223 = lshr i32 %8222, 2
  %8224 = add nuw nsw i32 %8223, 1
  %8225 = and i32 %8224, 1
  %8226 = icmp eq i32 %8223, 0
  br i1 %8226, label %8259, label %8227

8227:                                             ; preds = %8221
  %8228 = sub nuw nsw i32 %8224, %8225
  br label %8229

8229:                                             ; preds = %8229, %8227
  %8230 = phi i32* [ %8217, %8227 ], [ %8255, %8229 ]
  %8231 = phi i32* [ %8218, %8227 ], [ %8256, %8229 ]
  %8232 = phi i32 [ %8228, %8227 ], [ %8257, %8229 ]
  %8233 = bitcast i32* %8231 to <2 x i64>*
  %8234 = bitcast i32* %8230 to <2 x i64>*
  %8235 = load <2 x i64>, <2 x i64>* %8234, align 1
  %8236 = bitcast <2 x i64> %8235 to <8 x i16>
  %8237 = shufflevector <8 x i16> %8236, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8238 = shufflevector <8 x i16> %8237, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8239 = bitcast <8 x i16> %8238 to <2 x i64>
  %8240 = and <2 x i64> %8239, <i64 71777214294589695, i64 71777214294589695>
  %8241 = and <2 x i64> %8235, <i64 -71777214294589696, i64 -71777214294589696>
  %8242 = or <2 x i64> %8240, %8241
  store <2 x i64> %8242, <2 x i64>* %8233, align 1
  %8243 = getelementptr inbounds i32, i32* %8230, i64 4
  %8244 = getelementptr inbounds i32, i32* %8231, i64 4
  %8245 = bitcast i32* %8244 to <2 x i64>*
  %8246 = bitcast i32* %8243 to <2 x i64>*
  %8247 = load <2 x i64>, <2 x i64>* %8246, align 1
  %8248 = bitcast <2 x i64> %8247 to <8 x i16>
  %8249 = shufflevector <8 x i16> %8248, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8250 = shufflevector <8 x i16> %8249, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8251 = bitcast <8 x i16> %8250 to <2 x i64>
  %8252 = and <2 x i64> %8251, <i64 71777214294589695, i64 71777214294589695>
  %8253 = and <2 x i64> %8247, <i64 -71777214294589696, i64 -71777214294589696>
  %8254 = or <2 x i64> %8252, %8253
  store <2 x i64> %8254, <2 x i64>* %8245, align 1
  %8255 = getelementptr inbounds i32, i32* %8230, i64 8
  %8256 = getelementptr inbounds i32, i32* %8231, i64 8
  %8257 = add i32 %8232, -2
  %8258 = icmp eq i32 %8257, 0
  br i1 %8258, label %8259, label %8229

8259:                                             ; preds = %8229, %8221
  %8260 = phi i32* [ undef, %8221 ], [ %8255, %8229 ]
  %8261 = phi i32* [ undef, %8221 ], [ %8256, %8229 ]
  %8262 = phi i32* [ %8217, %8221 ], [ %8255, %8229 ]
  %8263 = phi i32* [ %8218, %8221 ], [ %8256, %8229 ]
  %8264 = icmp eq i32 %8225, 0
  br i1 %8264, label %8278, label %8265

8265:                                             ; preds = %8259
  %8266 = bitcast i32* %8263 to <2 x i64>*
  %8267 = bitcast i32* %8262 to <2 x i64>*
  %8268 = load <2 x i64>, <2 x i64>* %8267, align 1
  %8269 = bitcast <2 x i64> %8268 to <8 x i16>
  %8270 = shufflevector <8 x i16> %8269, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8271 = shufflevector <8 x i16> %8270, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8272 = bitcast <8 x i16> %8271 to <2 x i64>
  %8273 = and <2 x i64> %8272, <i64 71777214294589695, i64 71777214294589695>
  %8274 = and <2 x i64> %8268, <i64 -71777214294589696, i64 -71777214294589696>
  %8275 = or <2 x i64> %8273, %8274
  store <2 x i64> %8275, <2 x i64>* %8266, align 1
  %8276 = getelementptr inbounds i32, i32* %8263, i64 4
  %8277 = getelementptr inbounds i32, i32* %8262, i64 4
  br label %8278

8278:                                             ; preds = %8265, %8259, %8210
  %8279 = phi i32* [ %8217, %8210 ], [ %8260, %8259 ], [ %8277, %8265 ]
  %8280 = phi i32* [ %8218, %8210 ], [ %8261, %8259 ], [ %8276, %8265 ]
  %8281 = sub i32 %8216, %8219
  %8282 = icmp eq i32 %8281, 0
  br i1 %8282, label %8365, label %8283

8283:                                             ; preds = %8278
  %8284 = zext i32 %8281 to i64
  %8285 = icmp ult i32 %8281, 8
  br i1 %8285, label %8322, label %8286

8286:                                             ; preds = %8283
  %8287 = getelementptr i32, i32* %8280, i64 %8284
  %8288 = getelementptr i32, i32* %8279, i64 %8284
  %8289 = icmp ult i32* %8280, %8288
  %8290 = icmp ult i32* %8279, %8287
  %8291 = and i1 %8289, %8290
  br i1 %8291, label %8322, label %8292

8292:                                             ; preds = %8286
  %8293 = and i64 %8284, 4294967288
  br label %8294

8294:                                             ; preds = %8294, %8292
  %8295 = phi i64 [ 0, %8292 ], [ %8318, %8294 ]
  %8296 = getelementptr inbounds i32, i32* %8279, i64 %8295
  %8297 = bitcast i32* %8296 to <4 x i32>*
  %8298 = load <4 x i32>, <4 x i32>* %8297, align 4, !alias.scope !447
  %8299 = getelementptr inbounds i32, i32* %8296, i64 4
  %8300 = bitcast i32* %8299 to <4 x i32>*
  %8301 = load <4 x i32>, <4 x i32>* %8300, align 4, !alias.scope !447
  %8302 = lshr <4 x i32> %8298, <i32 16, i32 16, i32 16, i32 16>
  %8303 = lshr <4 x i32> %8301, <i32 16, i32 16, i32 16, i32 16>
  %8304 = shl <4 x i32> %8298, <i32 16, i32 16, i32 16, i32 16>
  %8305 = shl <4 x i32> %8301, <i32 16, i32 16, i32 16, i32 16>
  %8306 = or <4 x i32> %8302, %8304
  %8307 = or <4 x i32> %8303, %8305
  %8308 = and <4 x i32> %8306, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8309 = and <4 x i32> %8307, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8310 = and <4 x i32> %8298, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8311 = and <4 x i32> %8301, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8312 = or <4 x i32> %8308, %8310
  %8313 = or <4 x i32> %8309, %8311
  %8314 = getelementptr inbounds i32, i32* %8280, i64 %8295
  %8315 = bitcast i32* %8314 to <4 x i32>*
  store <4 x i32> %8312, <4 x i32>* %8315, align 4, !alias.scope !450, !noalias !447
  %8316 = getelementptr inbounds i32, i32* %8314, i64 4
  %8317 = bitcast i32* %8316 to <4 x i32>*
  store <4 x i32> %8313, <4 x i32>* %8317, align 4, !alias.scope !450, !noalias !447
  %8318 = add i64 %8295, 8
  %8319 = icmp eq i64 %8318, %8293
  br i1 %8319, label %8320, label %8294, !llvm.loop !452

8320:                                             ; preds = %8294
  %8321 = icmp eq i64 %8293, %8284
  br i1 %8321, label %8365, label %8322

8322:                                             ; preds = %8320, %8286, %8283
  %8323 = phi i64 [ 0, %8286 ], [ 0, %8283 ], [ %8293, %8320 ]
  %8324 = xor i64 %8323, -1
  %8325 = and i64 %8284, 1
  %8326 = icmp eq i64 %8325, 0
  br i1 %8326, label %8338, label %8327

8327:                                             ; preds = %8322
  %8328 = getelementptr inbounds i32, i32* %8279, i64 %8323
  %8329 = load i32, i32* %8328, align 4
  %8330 = lshr i32 %8329, 16
  %8331 = shl i32 %8329, 16
  %8332 = or i32 %8330, %8331
  %8333 = and i32 %8332, 16711935
  %8334 = and i32 %8329, -16711936
  %8335 = or i32 %8333, %8334
  %8336 = getelementptr inbounds i32, i32* %8280, i64 %8323
  store i32 %8335, i32* %8336, align 4
  %8337 = or i64 %8323, 1
  br label %8338

8338:                                             ; preds = %8327, %8322
  %8339 = phi i64 [ %8337, %8327 ], [ %8323, %8322 ]
  %8340 = sub nsw i64 0, %8284
  %8341 = icmp eq i64 %8324, %8340
  br i1 %8341, label %8365, label %8342

8342:                                             ; preds = %8338, %8342
  %8343 = phi i64 [ %8363, %8342 ], [ %8339, %8338 ]
  %8344 = getelementptr inbounds i32, i32* %8279, i64 %8343
  %8345 = load i32, i32* %8344, align 4
  %8346 = lshr i32 %8345, 16
  %8347 = shl i32 %8345, 16
  %8348 = or i32 %8346, %8347
  %8349 = and i32 %8348, 16711935
  %8350 = and i32 %8345, -16711936
  %8351 = or i32 %8349, %8350
  %8352 = getelementptr inbounds i32, i32* %8280, i64 %8343
  store i32 %8351, i32* %8352, align 4
  %8353 = add nuw nsw i64 %8343, 1
  %8354 = getelementptr inbounds i32, i32* %8279, i64 %8353
  %8355 = load i32, i32* %8354, align 4
  %8356 = lshr i32 %8355, 16
  %8357 = shl i32 %8355, 16
  %8358 = or i32 %8356, %8357
  %8359 = and i32 %8358, 16711935
  %8360 = and i32 %8355, -16711936
  %8361 = or i32 %8359, %8360
  %8362 = getelementptr inbounds i32, i32* %8280, i64 %8353
  store i32 %8361, i32* %8362, align 4
  %8363 = add nuw nsw i64 %8343, 2
  %8364 = icmp eq i64 %8363, %8284
  br i1 %8364, label %8365, label %8342, !llvm.loop !453

8365:                                             ; preds = %8338, %8342, %8320, %8278
  %8366 = getelementptr inbounds i8, i8* %8214, i64 %8148
  %8367 = getelementptr inbounds i8, i8* %8213, i64 %8151
  %8368 = add nuw nsw i32 %8212, 1
  %8369 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8154, align 8
  %8370 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8369, i64 0, i32 1, i32 1
  %8371 = load i32, i32* %8370, align 4
  %8372 = icmp slt i32 %8368, %8371
  br i1 %8372, label %8210, label %8195

8373:                                             ; preds = %8197, %8179
  %8374 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8374, align 4
  br label %15491

8375:                                             ; preds = %8144
  %8376 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8377 = load i32, i32* %8376, align 8
  %8378 = sext i32 %8377 to i64
  %8379 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8380 = load i32, i32* %8379, align 8
  %8381 = sext i32 %8380 to i64
  %8382 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8383 = load i8*, i8** %8382, align 8
  %8384 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8385 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8384, align 8
  %8386 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8385, i64 0, i32 0, i32 1
  %8387 = load i32, i32* %8386, align 4
  %8388 = mul nsw i32 %8387, %8377
  %8389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8390 = load i32, i32* %8389, align 4
  %8391 = add nsw i32 %8388, %8390
  %8392 = sext i32 %8391 to i64
  %8393 = getelementptr inbounds i8, i8* %8383, i64 %8392
  %8394 = icmp slt i32 %8380, 0
  %8395 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8396 = load i32, i32* %8395, align 8
  %8397 = icmp sgt i32 %8396, 1
  %8398 = and i1 %8394, %8397
  br i1 %8398, label %8399, label %8409

8399:                                             ; preds = %8375
  %8400 = add nsw i32 %8396, -1
  %8401 = sext i32 %8400 to i64
  %8402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8403 = load i32, i32* %8402, align 4
  %8404 = sext i32 %8403 to i64
  %8405 = mul nsw i64 %8378, %8401
  %8406 = mul i64 %8405, %8404
  %8407 = sub i64 0, %8406
  %8408 = getelementptr inbounds i8, i8* %8393, i64 %8407
  br label %8411

8409:                                             ; preds = %8375
  %8410 = icmp sgt i32 %8396, 0
  br i1 %8410, label %8411, label %8711

8411:                                             ; preds = %8409, %8399
  %8412 = phi i8* [ %8408, %8399 ], [ %8393, %8409 ]
  %8413 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8414 = load i8*, i8** %8413, align 8
  %8415 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8416 = bitcast i8** %8415 to i32**
  %8417 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8418

8418:                                             ; preds = %8429, %8411
  %8419 = phi i32 [ %8396, %8411 ], [ %8430, %8429 ]
  %8420 = phi %"class.blink::IntRect"* [ %8385, %8411 ], [ %8431, %8429 ]
  %8421 = phi i32 [ 0, %8411 ], [ %8440, %8429 ]
  %8422 = phi i8* [ %8414, %8411 ], [ %8433, %8429 ]
  %8423 = phi i8* [ %8412, %8411 ], [ %8439, %8429 ]
  %8424 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8420, i64 0, i32 1, i32 1
  %8425 = load i32, i32* %8424, align 4
  %8426 = icmp sgt i32 %8425, 0
  br i1 %8426, label %8442, label %8429

8427:                                             ; preds = %8702
  %8428 = load i32, i32* %8395, align 8
  br label %8429

8429:                                             ; preds = %8427, %8418
  %8430 = phi i32 [ %8419, %8418 ], [ %8428, %8427 ]
  %8431 = phi %"class.blink::IntRect"* [ %8420, %8418 ], [ %8703, %8427 ]
  %8432 = phi i8* [ %8423, %8418 ], [ %8704, %8427 ]
  %8433 = phi i8* [ %8422, %8418 ], [ %8705, %8427 ]
  %8434 = phi i32 [ %8425, %8418 ], [ %8708, %8427 ]
  %8435 = load i32, i32* %8417, align 4
  %8436 = sub nsw i32 %8435, %8434
  %8437 = sext i32 %8436 to i64
  %8438 = mul nsw i64 %8437, %8378
  %8439 = getelementptr inbounds i8, i8* %8432, i64 %8438
  %8440 = add nuw nsw i32 %8421, 1
  %8441 = icmp slt i32 %8440, %8430
  br i1 %8441, label %8418, label %8711

8442:                                             ; preds = %8418, %8702
  %8443 = phi i64 [ %8710, %8702 ], [ 0, %8418 ]
  %8444 = phi %"class.blink::IntRect"* [ %8703, %8702 ], [ %8420, %8418 ]
  %8445 = phi i32 [ %8706, %8702 ], [ 0, %8418 ]
  %8446 = phi i8* [ %8705, %8702 ], [ %8422, %8418 ]
  %8447 = phi i8* [ %8704, %8702 ], [ %8423, %8418 ]
  %8448 = mul i64 %8443, %8381
  %8449 = getelementptr i8, i8* %8422, i64 %8448
  %8450 = add i64 %8448, 4
  %8451 = getelementptr i8, i8* %8422, i64 %8450
  %8452 = load i32*, i32** %8416, align 8
  %8453 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8444, i64 0, i32 1, i32 0
  %8454 = load i32, i32* %8453, align 4
  %8455 = bitcast i8* %8447 to i32*
  %8456 = and i32 %8454, -4
  %8457 = icmp eq i32 %8456, 0
  br i1 %8457, label %8515, label %8458

8458:                                             ; preds = %8442
  %8459 = add i32 %8456, -1
  %8460 = lshr i32 %8459, 2
  %8461 = add nuw nsw i32 %8460, 1
  %8462 = and i32 %8461, 1
  %8463 = icmp eq i32 %8460, 0
  br i1 %8463, label %8496, label %8464

8464:                                             ; preds = %8458
  %8465 = sub nuw nsw i32 %8461, %8462
  br label %8466

8466:                                             ; preds = %8466, %8464
  %8467 = phi i32* [ %8455, %8464 ], [ %8492, %8466 ]
  %8468 = phi i32* [ %8452, %8464 ], [ %8493, %8466 ]
  %8469 = phi i32 [ %8465, %8464 ], [ %8494, %8466 ]
  %8470 = bitcast i32* %8468 to <2 x i64>*
  %8471 = bitcast i32* %8467 to <2 x i64>*
  %8472 = load <2 x i64>, <2 x i64>* %8471, align 1
  %8473 = bitcast <2 x i64> %8472 to <8 x i16>
  %8474 = shufflevector <8 x i16> %8473, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8475 = shufflevector <8 x i16> %8474, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8476 = bitcast <8 x i16> %8475 to <2 x i64>
  %8477 = and <2 x i64> %8476, <i64 71777214294589695, i64 71777214294589695>
  %8478 = and <2 x i64> %8472, <i64 -71777214294589696, i64 -71777214294589696>
  %8479 = or <2 x i64> %8477, %8478
  store <2 x i64> %8479, <2 x i64>* %8470, align 1
  %8480 = getelementptr inbounds i32, i32* %8467, i64 4
  %8481 = getelementptr inbounds i32, i32* %8468, i64 4
  %8482 = bitcast i32* %8481 to <2 x i64>*
  %8483 = bitcast i32* %8480 to <2 x i64>*
  %8484 = load <2 x i64>, <2 x i64>* %8483, align 1
  %8485 = bitcast <2 x i64> %8484 to <8 x i16>
  %8486 = shufflevector <8 x i16> %8485, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8487 = shufflevector <8 x i16> %8486, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8488 = bitcast <8 x i16> %8487 to <2 x i64>
  %8489 = and <2 x i64> %8488, <i64 71777214294589695, i64 71777214294589695>
  %8490 = and <2 x i64> %8484, <i64 -71777214294589696, i64 -71777214294589696>
  %8491 = or <2 x i64> %8489, %8490
  store <2 x i64> %8491, <2 x i64>* %8482, align 1
  %8492 = getelementptr inbounds i32, i32* %8467, i64 8
  %8493 = getelementptr inbounds i32, i32* %8468, i64 8
  %8494 = add i32 %8469, -2
  %8495 = icmp eq i32 %8494, 0
  br i1 %8495, label %8496, label %8466

8496:                                             ; preds = %8466, %8458
  %8497 = phi i32* [ undef, %8458 ], [ %8492, %8466 ]
  %8498 = phi i32* [ undef, %8458 ], [ %8493, %8466 ]
  %8499 = phi i32* [ %8455, %8458 ], [ %8492, %8466 ]
  %8500 = phi i32* [ %8452, %8458 ], [ %8493, %8466 ]
  %8501 = icmp eq i32 %8462, 0
  br i1 %8501, label %8515, label %8502

8502:                                             ; preds = %8496
  %8503 = bitcast i32* %8500 to <2 x i64>*
  %8504 = bitcast i32* %8499 to <2 x i64>*
  %8505 = load <2 x i64>, <2 x i64>* %8504, align 1
  %8506 = bitcast <2 x i64> %8505 to <8 x i16>
  %8507 = shufflevector <8 x i16> %8506, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8508 = shufflevector <8 x i16> %8507, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8509 = bitcast <8 x i16> %8508 to <2 x i64>
  %8510 = and <2 x i64> %8509, <i64 71777214294589695, i64 71777214294589695>
  %8511 = and <2 x i64> %8505, <i64 -71777214294589696, i64 -71777214294589696>
  %8512 = or <2 x i64> %8510, %8511
  store <2 x i64> %8512, <2 x i64>* %8503, align 1
  %8513 = getelementptr inbounds i32, i32* %8500, i64 4
  %8514 = getelementptr inbounds i32, i32* %8499, i64 4
  br label %8515

8515:                                             ; preds = %8502, %8496, %8442
  %8516 = phi i32* [ %8455, %8442 ], [ %8497, %8496 ], [ %8514, %8502 ]
  %8517 = phi i32* [ %8452, %8442 ], [ %8498, %8496 ], [ %8513, %8502 ]
  %8518 = sub i32 %8454, %8456
  %8519 = icmp eq i32 %8518, 0
  br i1 %8519, label %8602, label %8520

8520:                                             ; preds = %8515
  %8521 = zext i32 %8518 to i64
  %8522 = icmp ult i32 %8518, 8
  br i1 %8522, label %8559, label %8523

8523:                                             ; preds = %8520
  %8524 = getelementptr i32, i32* %8517, i64 %8521
  %8525 = getelementptr i32, i32* %8516, i64 %8521
  %8526 = icmp ult i32* %8517, %8525
  %8527 = icmp ult i32* %8516, %8524
  %8528 = and i1 %8526, %8527
  br i1 %8528, label %8559, label %8529

8529:                                             ; preds = %8523
  %8530 = and i64 %8521, 4294967288
  br label %8531

8531:                                             ; preds = %8531, %8529
  %8532 = phi i64 [ 0, %8529 ], [ %8555, %8531 ]
  %8533 = getelementptr inbounds i32, i32* %8516, i64 %8532
  %8534 = bitcast i32* %8533 to <4 x i32>*
  %8535 = load <4 x i32>, <4 x i32>* %8534, align 4, !alias.scope !454
  %8536 = getelementptr inbounds i32, i32* %8533, i64 4
  %8537 = bitcast i32* %8536 to <4 x i32>*
  %8538 = load <4 x i32>, <4 x i32>* %8537, align 4, !alias.scope !454
  %8539 = lshr <4 x i32> %8535, <i32 16, i32 16, i32 16, i32 16>
  %8540 = lshr <4 x i32> %8538, <i32 16, i32 16, i32 16, i32 16>
  %8541 = shl <4 x i32> %8535, <i32 16, i32 16, i32 16, i32 16>
  %8542 = shl <4 x i32> %8538, <i32 16, i32 16, i32 16, i32 16>
  %8543 = or <4 x i32> %8539, %8541
  %8544 = or <4 x i32> %8540, %8542
  %8545 = and <4 x i32> %8543, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8546 = and <4 x i32> %8544, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8547 = and <4 x i32> %8535, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8548 = and <4 x i32> %8538, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8549 = or <4 x i32> %8545, %8547
  %8550 = or <4 x i32> %8546, %8548
  %8551 = getelementptr inbounds i32, i32* %8517, i64 %8532
  %8552 = bitcast i32* %8551 to <4 x i32>*
  store <4 x i32> %8549, <4 x i32>* %8552, align 4, !alias.scope !457, !noalias !454
  %8553 = getelementptr inbounds i32, i32* %8551, i64 4
  %8554 = bitcast i32* %8553 to <4 x i32>*
  store <4 x i32> %8550, <4 x i32>* %8554, align 4, !alias.scope !457, !noalias !454
  %8555 = add i64 %8532, 8
  %8556 = icmp eq i64 %8555, %8530
  br i1 %8556, label %8557, label %8531, !llvm.loop !459

8557:                                             ; preds = %8531
  %8558 = icmp eq i64 %8530, %8521
  br i1 %8558, label %8602, label %8559

8559:                                             ; preds = %8557, %8523, %8520
  %8560 = phi i64 [ 0, %8523 ], [ 0, %8520 ], [ %8530, %8557 ]
  %8561 = xor i64 %8560, -1
  %8562 = and i64 %8521, 1
  %8563 = icmp eq i64 %8562, 0
  br i1 %8563, label %8575, label %8564

8564:                                             ; preds = %8559
  %8565 = getelementptr inbounds i32, i32* %8516, i64 %8560
  %8566 = load i32, i32* %8565, align 4
  %8567 = lshr i32 %8566, 16
  %8568 = shl i32 %8566, 16
  %8569 = or i32 %8567, %8568
  %8570 = and i32 %8569, 16711935
  %8571 = and i32 %8566, -16711936
  %8572 = or i32 %8570, %8571
  %8573 = getelementptr inbounds i32, i32* %8517, i64 %8560
  store i32 %8572, i32* %8573, align 4
  %8574 = or i64 %8560, 1
  br label %8575

8575:                                             ; preds = %8564, %8559
  %8576 = phi i64 [ %8574, %8564 ], [ %8560, %8559 ]
  %8577 = sub nsw i64 0, %8521
  %8578 = icmp eq i64 %8561, %8577
  br i1 %8578, label %8602, label %8579

8579:                                             ; preds = %8575, %8579
  %8580 = phi i64 [ %8600, %8579 ], [ %8576, %8575 ]
  %8581 = getelementptr inbounds i32, i32* %8516, i64 %8580
  %8582 = load i32, i32* %8581, align 4
  %8583 = lshr i32 %8582, 16
  %8584 = shl i32 %8582, 16
  %8585 = or i32 %8583, %8584
  %8586 = and i32 %8585, 16711935
  %8587 = and i32 %8582, -16711936
  %8588 = or i32 %8586, %8587
  %8589 = getelementptr inbounds i32, i32* %8517, i64 %8580
  store i32 %8588, i32* %8589, align 4
  %8590 = add nuw nsw i64 %8580, 1
  %8591 = getelementptr inbounds i32, i32* %8516, i64 %8590
  %8592 = load i32, i32* %8591, align 4
  %8593 = lshr i32 %8592, 16
  %8594 = shl i32 %8592, 16
  %8595 = or i32 %8593, %8594
  %8596 = and i32 %8595, 16711935
  %8597 = and i32 %8592, -16711936
  %8598 = or i32 %8596, %8597
  %8599 = getelementptr inbounds i32, i32* %8517, i64 %8590
  store i32 %8598, i32* %8599, align 4
  %8600 = add nuw nsw i64 %8580, 2
  %8601 = icmp eq i64 %8600, %8521
  br i1 %8601, label %8602, label %8579, !llvm.loop !460

8602:                                             ; preds = %8575, %8579, %8557, %8515
  %8603 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8384, align 8
  %8604 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8603, i64 0, i32 1, i32 0
  %8605 = load i32, i32* %8604, align 4
  %8606 = icmp eq i32 %8605, 0
  br i1 %8606, label %8702, label %8607

8607:                                             ; preds = %8602
  %8608 = load i8*, i8** %8415, align 8
  %8609 = add i32 %8605, -1
  %8610 = zext i32 %8609 to i64
  %8611 = add nuw nsw i64 %8610, 1
  %8612 = icmp ult i64 %8611, 17
  br i1 %8612, label %8666, label %8613

8613:                                             ; preds = %8607
  %8614 = add i32 %8605, -1
  %8615 = zext i32 %8614 to i64
  %8616 = shl nuw nsw i64 %8615, 2
  %8617 = getelementptr i8, i8* %8451, i64 %8616
  %8618 = getelementptr i8, i8* %8608, i64 4
  %8619 = getelementptr i8, i8* %8618, i64 %8616
  %8620 = icmp ult i8* %8449, %8619
  %8621 = icmp ult i8* %8608, %8617
  %8622 = and i1 %8620, %8621
  br i1 %8622, label %8666, label %8623

8623:                                             ; preds = %8613
  %8624 = and i64 %8611, 15
  %8625 = icmp eq i64 %8624, 0
  %8626 = select i1 %8625, i64 16, i64 %8624
  %8627 = sub nsw i64 %8611, %8626
  %8628 = shl nsw i64 %8627, 2
  %8629 = getelementptr i8, i8* %8608, i64 %8628
  %8630 = shl nsw i64 %8627, 2
  %8631 = getelementptr i8, i8* %8446, i64 %8630
  %8632 = trunc i64 %8627 to i32
  br label %8633

8633:                                             ; preds = %8633, %8623
  %8634 = phi i64 [ 0, %8623 ], [ %8664, %8633 ]
  %8635 = shl i64 %8634, 2
  %8636 = getelementptr i8, i8* %8608, i64 %8635
  %8637 = shl i64 %8634, 2
  %8638 = getelementptr inbounds i8, i8* %8636, i64 3
  %8639 = bitcast i8* %8638 to <64 x i8>*
  %8640 = load <64 x i8>, <64 x i8>* %8639, align 1
  %8641 = shufflevector <64 x i8> %8640, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %8642 = uitofp <16 x i8> %8641 to <16 x float>
  %8643 = fdiv <16 x float> %8642, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %8644 = bitcast i8* %8636 to <64 x i8>*
  %8645 = load <64 x i8>, <64 x i8>* %8644, align 1
  %8646 = shufflevector <64 x i8> %8645, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %8647 = shufflevector <64 x i8> %8645, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %8648 = shufflevector <64 x i8> %8645, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %8649 = shufflevector <64 x i8> %8645, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %8650 = uitofp <16 x i8> %8646 to <16 x float>
  %8651 = fmul <16 x float> %8643, %8650
  %8652 = fptoui <16 x float> %8651 to <16 x i8>
  %8653 = uitofp <16 x i8> %8647 to <16 x float>
  %8654 = fmul <16 x float> %8643, %8653
  %8655 = fptoui <16 x float> %8654 to <16 x i8>
  %8656 = uitofp <16 x i8> %8648 to <16 x float>
  %8657 = fmul <16 x float> %8643, %8656
  %8658 = fptoui <16 x float> %8657 to <16 x i8>
  %8659 = getelementptr inbounds i8, i8* %8446, i64 %8637
  %8660 = bitcast i8* %8659 to <64 x i8>*
  %8661 = shufflevector <16 x i8> %8652, <16 x i8> %8655, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8662 = shufflevector <16 x i8> %8658, <16 x i8> %8649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8663 = shufflevector <32 x i8> %8661, <32 x i8> %8662, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %8663, <64 x i8>* %8660, align 1
  %8664 = add i64 %8634, 16
  %8665 = icmp eq i64 %8664, %8627
  br i1 %8665, label %8666, label %8633, !llvm.loop !461

8666:                                             ; preds = %8633, %8613, %8607
  %8667 = phi i8* [ %8608, %8613 ], [ %8608, %8607 ], [ %8629, %8633 ]
  %8668 = phi i8* [ %8446, %8613 ], [ %8446, %8607 ], [ %8631, %8633 ]
  %8669 = phi i32 [ 0, %8613 ], [ 0, %8607 ], [ %8632, %8633 ]
  br label %8670

8670:                                             ; preds = %8666, %8670
  %8671 = phi i8* [ %8696, %8670 ], [ %8667, %8666 ]
  %8672 = phi i8* [ %8697, %8670 ], [ %8668, %8666 ]
  %8673 = phi i32 [ %8698, %8670 ], [ %8669, %8666 ]
  %8674 = getelementptr inbounds i8, i8* %8671, i64 3
  %8675 = load i8, i8* %8674, align 1
  %8676 = uitofp i8 %8675 to float
  %8677 = fdiv float %8676, 2.550000e+02
  %8678 = load i8, i8* %8671, align 1
  %8679 = uitofp i8 %8678 to float
  %8680 = fmul float %8677, %8679
  %8681 = fptoui float %8680 to i8
  %8682 = getelementptr inbounds i8, i8* %8671, i64 1
  %8683 = load i8, i8* %8682, align 1
  %8684 = uitofp i8 %8683 to float
  %8685 = fmul float %8677, %8684
  %8686 = fptoui float %8685 to i8
  %8687 = getelementptr inbounds i8, i8* %8671, i64 2
  %8688 = load i8, i8* %8687, align 1
  %8689 = uitofp i8 %8688 to float
  %8690 = fmul float %8677, %8689
  %8691 = fptoui float %8690 to i8
  store i8 %8681, i8* %8672, align 1
  %8692 = getelementptr inbounds i8, i8* %8672, i64 1
  store i8 %8686, i8* %8692, align 1
  %8693 = getelementptr inbounds i8, i8* %8672, i64 2
  store i8 %8691, i8* %8693, align 1
  %8694 = load i8, i8* %8674, align 1
  %8695 = getelementptr inbounds i8, i8* %8672, i64 3
  store i8 %8694, i8* %8695, align 1
  %8696 = getelementptr inbounds i8, i8* %8671, i64 4
  %8697 = getelementptr inbounds i8, i8* %8672, i64 4
  %8698 = add nuw i32 %8673, 1
  %8699 = icmp eq i32 %8698, %8605
  br i1 %8699, label %8700, label %8670, !llvm.loop !462

8700:                                             ; preds = %8670
  %8701 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8384, align 8
  br label %8702

8702:                                             ; preds = %8700, %8602
  %8703 = phi %"class.blink::IntRect"* [ %8701, %8700 ], [ %8603, %8602 ]
  %8704 = getelementptr inbounds i8, i8* %8447, i64 %8378
  %8705 = getelementptr inbounds i8, i8* %8446, i64 %8381
  %8706 = add nuw nsw i32 %8445, 1
  %8707 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8703, i64 0, i32 1, i32 1
  %8708 = load i32, i32* %8707, align 4
  %8709 = icmp slt i32 %8706, %8708
  %8710 = add i64 %8443, 1
  br i1 %8709, label %8442, label %8427

8711:                                             ; preds = %8429, %8409
  %8712 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8712, align 4
  br label %15491

8713:                                             ; preds = %8144
  %8714 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8715 = load i32, i32* %8714, align 8
  %8716 = sext i32 %8715 to i64
  %8717 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8718 = load i32, i32* %8717, align 8
  %8719 = sext i32 %8718 to i64
  %8720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8721 = load i8*, i8** %8720, align 8
  %8722 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8723 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8722, align 8
  %8724 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8723, i64 0, i32 0, i32 1
  %8725 = load i32, i32* %8724, align 4
  %8726 = mul nsw i32 %8725, %8715
  %8727 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8728 = load i32, i32* %8727, align 4
  %8729 = add nsw i32 %8726, %8728
  %8730 = sext i32 %8729 to i64
  %8731 = getelementptr inbounds i8, i8* %8721, i64 %8730
  %8732 = icmp slt i32 %8718, 0
  %8733 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8734 = load i32, i32* %8733, align 8
  %8735 = icmp sgt i32 %8734, 1
  %8736 = and i1 %8732, %8735
  br i1 %8736, label %8737, label %8747

8737:                                             ; preds = %8713
  %8738 = add nsw i32 %8734, -1
  %8739 = sext i32 %8738 to i64
  %8740 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8741 = load i32, i32* %8740, align 4
  %8742 = sext i32 %8741 to i64
  %8743 = mul nsw i64 %8716, %8739
  %8744 = mul i64 %8743, %8742
  %8745 = sub i64 0, %8744
  %8746 = getelementptr inbounds i8, i8* %8731, i64 %8745
  br label %8749

8747:                                             ; preds = %8713
  %8748 = icmp sgt i32 %8734, 0
  br i1 %8748, label %8749, label %9023

8749:                                             ; preds = %8747, %8737
  %8750 = phi i8* [ %8746, %8737 ], [ %8731, %8747 ]
  %8751 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8752 = load i8*, i8** %8751, align 8
  %8753 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8754 = bitcast i8** %8753 to i32**
  %8755 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8756

8756:                                             ; preds = %8767, %8749
  %8757 = phi i32 [ %8734, %8749 ], [ %8768, %8767 ]
  %8758 = phi %"class.blink::IntRect"* [ %8723, %8749 ], [ %8769, %8767 ]
  %8759 = phi i32 [ 0, %8749 ], [ %8778, %8767 ]
  %8760 = phi i8* [ %8752, %8749 ], [ %8771, %8767 ]
  %8761 = phi i8* [ %8750, %8749 ], [ %8777, %8767 ]
  %8762 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8758, i64 0, i32 1, i32 1
  %8763 = load i32, i32* %8762, align 4
  %8764 = icmp sgt i32 %8763, 0
  br i1 %8764, label %8780, label %8767

8765:                                             ; preds = %9015
  %8766 = load i32, i32* %8733, align 8
  br label %8767

8767:                                             ; preds = %8765, %8756
  %8768 = phi i32 [ %8757, %8756 ], [ %8766, %8765 ]
  %8769 = phi %"class.blink::IntRect"* [ %8758, %8756 ], [ %9016, %8765 ]
  %8770 = phi i8* [ %8761, %8756 ], [ %9017, %8765 ]
  %8771 = phi i8* [ %8760, %8756 ], [ %9018, %8765 ]
  %8772 = phi i32 [ %8763, %8756 ], [ %9021, %8765 ]
  %8773 = load i32, i32* %8755, align 4
  %8774 = sub nsw i32 %8773, %8772
  %8775 = sext i32 %8774 to i64
  %8776 = mul nsw i64 %8775, %8716
  %8777 = getelementptr inbounds i8, i8* %8770, i64 %8776
  %8778 = add nuw nsw i32 %8759, 1
  %8779 = icmp slt i32 %8778, %8768
  br i1 %8779, label %8756, label %9023

8780:                                             ; preds = %8756, %9015
  %8781 = phi %"class.blink::IntRect"* [ %9016, %9015 ], [ %8758, %8756 ]
  %8782 = phi i32 [ %9019, %9015 ], [ 0, %8756 ]
  %8783 = phi i8* [ %9018, %9015 ], [ %8760, %8756 ]
  %8784 = phi i8* [ %9017, %9015 ], [ %8761, %8756 ]
  %8785 = load i32*, i32** %8754, align 8
  %8786 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8781, i64 0, i32 1, i32 0
  %8787 = load i32, i32* %8786, align 4
  %8788 = bitcast i8* %8784 to i32*
  %8789 = and i32 %8787, -4
  %8790 = icmp eq i32 %8789, 0
  br i1 %8790, label %8848, label %8791

8791:                                             ; preds = %8780
  %8792 = add i32 %8789, -1
  %8793 = lshr i32 %8792, 2
  %8794 = add nuw nsw i32 %8793, 1
  %8795 = and i32 %8794, 1
  %8796 = icmp eq i32 %8793, 0
  br i1 %8796, label %8829, label %8797

8797:                                             ; preds = %8791
  %8798 = sub nuw nsw i32 %8794, %8795
  br label %8799

8799:                                             ; preds = %8799, %8797
  %8800 = phi i32* [ %8788, %8797 ], [ %8825, %8799 ]
  %8801 = phi i32* [ %8785, %8797 ], [ %8826, %8799 ]
  %8802 = phi i32 [ %8798, %8797 ], [ %8827, %8799 ]
  %8803 = bitcast i32* %8801 to <2 x i64>*
  %8804 = bitcast i32* %8800 to <2 x i64>*
  %8805 = load <2 x i64>, <2 x i64>* %8804, align 1
  %8806 = bitcast <2 x i64> %8805 to <8 x i16>
  %8807 = shufflevector <8 x i16> %8806, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8808 = shufflevector <8 x i16> %8807, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8809 = bitcast <8 x i16> %8808 to <2 x i64>
  %8810 = and <2 x i64> %8809, <i64 71777214294589695, i64 71777214294589695>
  %8811 = and <2 x i64> %8805, <i64 -71777214294589696, i64 -71777214294589696>
  %8812 = or <2 x i64> %8810, %8811
  store <2 x i64> %8812, <2 x i64>* %8803, align 1
  %8813 = getelementptr inbounds i32, i32* %8800, i64 4
  %8814 = getelementptr inbounds i32, i32* %8801, i64 4
  %8815 = bitcast i32* %8814 to <2 x i64>*
  %8816 = bitcast i32* %8813 to <2 x i64>*
  %8817 = load <2 x i64>, <2 x i64>* %8816, align 1
  %8818 = bitcast <2 x i64> %8817 to <8 x i16>
  %8819 = shufflevector <8 x i16> %8818, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8820 = shufflevector <8 x i16> %8819, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8821 = bitcast <8 x i16> %8820 to <2 x i64>
  %8822 = and <2 x i64> %8821, <i64 71777214294589695, i64 71777214294589695>
  %8823 = and <2 x i64> %8817, <i64 -71777214294589696, i64 -71777214294589696>
  %8824 = or <2 x i64> %8822, %8823
  store <2 x i64> %8824, <2 x i64>* %8815, align 1
  %8825 = getelementptr inbounds i32, i32* %8800, i64 8
  %8826 = getelementptr inbounds i32, i32* %8801, i64 8
  %8827 = add i32 %8802, -2
  %8828 = icmp eq i32 %8827, 0
  br i1 %8828, label %8829, label %8799

8829:                                             ; preds = %8799, %8791
  %8830 = phi i32* [ undef, %8791 ], [ %8825, %8799 ]
  %8831 = phi i32* [ undef, %8791 ], [ %8826, %8799 ]
  %8832 = phi i32* [ %8788, %8791 ], [ %8825, %8799 ]
  %8833 = phi i32* [ %8785, %8791 ], [ %8826, %8799 ]
  %8834 = icmp eq i32 %8795, 0
  br i1 %8834, label %8848, label %8835

8835:                                             ; preds = %8829
  %8836 = bitcast i32* %8833 to <2 x i64>*
  %8837 = bitcast i32* %8832 to <2 x i64>*
  %8838 = load <2 x i64>, <2 x i64>* %8837, align 1
  %8839 = bitcast <2 x i64> %8838 to <8 x i16>
  %8840 = shufflevector <8 x i16> %8839, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %8841 = shufflevector <8 x i16> %8840, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %8842 = bitcast <8 x i16> %8841 to <2 x i64>
  %8843 = and <2 x i64> %8842, <i64 71777214294589695, i64 71777214294589695>
  %8844 = and <2 x i64> %8838, <i64 -71777214294589696, i64 -71777214294589696>
  %8845 = or <2 x i64> %8843, %8844
  store <2 x i64> %8845, <2 x i64>* %8836, align 1
  %8846 = getelementptr inbounds i32, i32* %8833, i64 4
  %8847 = getelementptr inbounds i32, i32* %8832, i64 4
  br label %8848

8848:                                             ; preds = %8835, %8829, %8780
  %8849 = phi i32* [ %8788, %8780 ], [ %8830, %8829 ], [ %8847, %8835 ]
  %8850 = phi i32* [ %8785, %8780 ], [ %8831, %8829 ], [ %8846, %8835 ]
  %8851 = sub i32 %8787, %8789
  %8852 = icmp eq i32 %8851, 0
  br i1 %8852, label %8935, label %8853

8853:                                             ; preds = %8848
  %8854 = zext i32 %8851 to i64
  %8855 = icmp ult i32 %8851, 8
  br i1 %8855, label %8892, label %8856

8856:                                             ; preds = %8853
  %8857 = getelementptr i32, i32* %8850, i64 %8854
  %8858 = getelementptr i32, i32* %8849, i64 %8854
  %8859 = icmp ult i32* %8850, %8858
  %8860 = icmp ult i32* %8849, %8857
  %8861 = and i1 %8859, %8860
  br i1 %8861, label %8892, label %8862

8862:                                             ; preds = %8856
  %8863 = and i64 %8854, 4294967288
  br label %8864

8864:                                             ; preds = %8864, %8862
  %8865 = phi i64 [ 0, %8862 ], [ %8888, %8864 ]
  %8866 = getelementptr inbounds i32, i32* %8849, i64 %8865
  %8867 = bitcast i32* %8866 to <4 x i32>*
  %8868 = load <4 x i32>, <4 x i32>* %8867, align 4, !alias.scope !463
  %8869 = getelementptr inbounds i32, i32* %8866, i64 4
  %8870 = bitcast i32* %8869 to <4 x i32>*
  %8871 = load <4 x i32>, <4 x i32>* %8870, align 4, !alias.scope !463
  %8872 = lshr <4 x i32> %8868, <i32 16, i32 16, i32 16, i32 16>
  %8873 = lshr <4 x i32> %8871, <i32 16, i32 16, i32 16, i32 16>
  %8874 = shl <4 x i32> %8868, <i32 16, i32 16, i32 16, i32 16>
  %8875 = shl <4 x i32> %8871, <i32 16, i32 16, i32 16, i32 16>
  %8876 = or <4 x i32> %8872, %8874
  %8877 = or <4 x i32> %8873, %8875
  %8878 = and <4 x i32> %8876, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8879 = and <4 x i32> %8877, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %8880 = and <4 x i32> %8868, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8881 = and <4 x i32> %8871, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %8882 = or <4 x i32> %8878, %8880
  %8883 = or <4 x i32> %8879, %8881
  %8884 = getelementptr inbounds i32, i32* %8850, i64 %8865
  %8885 = bitcast i32* %8884 to <4 x i32>*
  store <4 x i32> %8882, <4 x i32>* %8885, align 4, !alias.scope !466, !noalias !463
  %8886 = getelementptr inbounds i32, i32* %8884, i64 4
  %8887 = bitcast i32* %8886 to <4 x i32>*
  store <4 x i32> %8883, <4 x i32>* %8887, align 4, !alias.scope !466, !noalias !463
  %8888 = add i64 %8865, 8
  %8889 = icmp eq i64 %8888, %8863
  br i1 %8889, label %8890, label %8864, !llvm.loop !468

8890:                                             ; preds = %8864
  %8891 = icmp eq i64 %8863, %8854
  br i1 %8891, label %8935, label %8892

8892:                                             ; preds = %8890, %8856, %8853
  %8893 = phi i64 [ 0, %8856 ], [ 0, %8853 ], [ %8863, %8890 ]
  %8894 = xor i64 %8893, -1
  %8895 = and i64 %8854, 1
  %8896 = icmp eq i64 %8895, 0
  br i1 %8896, label %8908, label %8897

8897:                                             ; preds = %8892
  %8898 = getelementptr inbounds i32, i32* %8849, i64 %8893
  %8899 = load i32, i32* %8898, align 4
  %8900 = lshr i32 %8899, 16
  %8901 = shl i32 %8899, 16
  %8902 = or i32 %8900, %8901
  %8903 = and i32 %8902, 16711935
  %8904 = and i32 %8899, -16711936
  %8905 = or i32 %8903, %8904
  %8906 = getelementptr inbounds i32, i32* %8850, i64 %8893
  store i32 %8905, i32* %8906, align 4
  %8907 = or i64 %8893, 1
  br label %8908

8908:                                             ; preds = %8897, %8892
  %8909 = phi i64 [ %8907, %8897 ], [ %8893, %8892 ]
  %8910 = sub nsw i64 0, %8854
  %8911 = icmp eq i64 %8894, %8910
  br i1 %8911, label %8935, label %8912

8912:                                             ; preds = %8908, %8912
  %8913 = phi i64 [ %8933, %8912 ], [ %8909, %8908 ]
  %8914 = getelementptr inbounds i32, i32* %8849, i64 %8913
  %8915 = load i32, i32* %8914, align 4
  %8916 = lshr i32 %8915, 16
  %8917 = shl i32 %8915, 16
  %8918 = or i32 %8916, %8917
  %8919 = and i32 %8918, 16711935
  %8920 = and i32 %8915, -16711936
  %8921 = or i32 %8919, %8920
  %8922 = getelementptr inbounds i32, i32* %8850, i64 %8913
  store i32 %8921, i32* %8922, align 4
  %8923 = add nuw nsw i64 %8913, 1
  %8924 = getelementptr inbounds i32, i32* %8849, i64 %8923
  %8925 = load i32, i32* %8924, align 4
  %8926 = lshr i32 %8925, 16
  %8927 = shl i32 %8925, 16
  %8928 = or i32 %8926, %8927
  %8929 = and i32 %8928, 16711935
  %8930 = and i32 %8925, -16711936
  %8931 = or i32 %8929, %8930
  %8932 = getelementptr inbounds i32, i32* %8850, i64 %8923
  store i32 %8931, i32* %8932, align 4
  %8933 = add nuw nsw i64 %8913, 2
  %8934 = icmp eq i64 %8933, %8854
  br i1 %8934, label %8935, label %8912, !llvm.loop !469

8935:                                             ; preds = %8908, %8912, %8890, %8848
  %8936 = load i8*, i8** %8753, align 8
  %8937 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8722, align 8
  %8938 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8937, i64 0, i32 1, i32 0
  %8939 = load i32, i32* %8938, align 4
  %8940 = icmp eq i32 %8939, 0
  br i1 %8940, label %9015, label %8941

8941:                                             ; preds = %8935, %8941
  %8942 = phi i8* [ %8975, %8941 ], [ %8936, %8935 ]
  %8943 = phi i32 [ %8977, %8941 ], [ 0, %8935 ]
  %8944 = phi i8* [ %8976, %8941 ], [ %8783, %8935 ]
  %8945 = getelementptr inbounds i8, i8* %8942, i64 3
  %8946 = load i8, i8* %8945, align 1
  %8947 = icmp eq i8 %8946, 0
  %8948 = select i1 %8947, i8 -1, i8 %8946
  %8949 = uitofp i8 %8948 to float
  %8950 = getelementptr inbounds i8, i8* %8942, i64 2
  %8951 = load i8, i8* %8950, align 1
  %8952 = uitofp i8 %8951 to float
  %8953 = getelementptr inbounds i8, i8* %8942, i64 1
  %8954 = load i8, i8* %8953, align 1
  %8955 = uitofp i8 %8954 to float
  %8956 = load i8, i8* %8942, align 1
  %8957 = uitofp i8 %8956 to float
  %8958 = insertelement <4 x float> <float undef, float undef, float undef, float 0.000000e+00>, float %8957, i32 0
  %8959 = insertelement <4 x float> %8958, float %8955, i32 1
  %8960 = insertelement <4 x float> %8959, float %8952, i32 2
  %8961 = insertelement <4 x float> undef, float %8949, i32 0
  %8962 = fdiv <4 x float> <float 2.550000e+02, float undef, float undef, float undef>, %8961
  %8963 = shufflevector <4 x float> %8962, <4 x float> undef, <4 x i32> zeroinitializer
  %8964 = fmul <4 x float> %8963, %8960
  %8965 = extractelement <4 x float> %8964, i32 0
  %8966 = fptoui float %8965 to i8
  store i8 %8966, i8* %8944, align 1
  %8967 = extractelement <4 x float> %8964, i32 1
  %8968 = fptoui float %8967 to i8
  %8969 = getelementptr inbounds i8, i8* %8944, i64 1
  store i8 %8968, i8* %8969, align 1
  %8970 = extractelement <4 x float> %8964, i32 2
  %8971 = fptoui float %8970 to i8
  %8972 = getelementptr inbounds i8, i8* %8944, i64 2
  store i8 %8971, i8* %8972, align 1
  %8973 = load i8, i8* %8945, align 1
  %8974 = getelementptr inbounds i8, i8* %8944, i64 3
  store i8 %8973, i8* %8974, align 1
  %8975 = getelementptr inbounds i8, i8* %8942, i64 4
  %8976 = getelementptr inbounds i8, i8* %8944, i64 4
  %8977 = add nuw i32 %8943, 1
  %8978 = icmp eq i32 %8977, %8939
  br i1 %8978, label %8979, label %8941

8979:                                             ; preds = %8941, %8989
  %8980 = phi i8* [ %9009, %8989 ], [ %8936, %8941 ]
  %8981 = phi i8* [ %9010, %8989 ], [ %8783, %8941 ]
  %8982 = phi i32 [ %9011, %8989 ], [ 0, %8941 ]
  %8983 = getelementptr inbounds i8, i8* %8980, i64 3
  %8984 = load i8, i8* %8983, align 1
  %8985 = icmp eq i8 %8984, 0
  br i1 %8985, label %8989, label %8986

8986:                                             ; preds = %8979
  %8987 = uitofp i8 %8984 to float
  %8988 = fdiv float 2.550000e+02, %8987
  br label %8989

8989:                                             ; preds = %8986, %8979
  %8990 = phi float [ %8988, %8986 ], [ 1.000000e+00, %8979 ]
  %8991 = load i8, i8* %8980, align 1
  %8992 = uitofp i8 %8991 to float
  %8993 = fmul float %8990, %8992
  %8994 = fptoui float %8993 to i8
  %8995 = getelementptr inbounds i8, i8* %8980, i64 1
  %8996 = load i8, i8* %8995, align 1
  %8997 = uitofp i8 %8996 to float
  %8998 = fmul float %8990, %8997
  %8999 = fptoui float %8998 to i8
  %9000 = getelementptr inbounds i8, i8* %8980, i64 2
  %9001 = load i8, i8* %9000, align 1
  %9002 = uitofp i8 %9001 to float
  %9003 = fmul float %8990, %9002
  %9004 = fptoui float %9003 to i8
  store i8 %8994, i8* %8981, align 1
  %9005 = getelementptr inbounds i8, i8* %8981, i64 1
  store i8 %8999, i8* %9005, align 1
  %9006 = getelementptr inbounds i8, i8* %8981, i64 2
  store i8 %9004, i8* %9006, align 1
  %9007 = load i8, i8* %8983, align 1
  %9008 = getelementptr inbounds i8, i8* %8981, i64 3
  store i8 %9007, i8* %9008, align 1
  %9009 = getelementptr inbounds i8, i8* %8980, i64 4
  %9010 = getelementptr inbounds i8, i8* %8981, i64 4
  %9011 = add nuw i32 %8982, 1
  %9012 = icmp eq i32 %9011, %8939
  br i1 %9012, label %9013, label %8979

9013:                                             ; preds = %8989
  %9014 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8722, align 8
  br label %9015

9015:                                             ; preds = %9013, %8935
  %9016 = phi %"class.blink::IntRect"* [ %9014, %9013 ], [ %8937, %8935 ]
  %9017 = getelementptr inbounds i8, i8* %8784, i64 %8716
  %9018 = getelementptr inbounds i8, i8* %8783, i64 %8719
  %9019 = add nuw nsw i32 %8782, 1
  %9020 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9016, i64 0, i32 1, i32 1
  %9021 = load i32, i32* %9020, align 4
  %9022 = icmp slt i32 %9019, %9021
  br i1 %9022, label %8780, label %8765

9023:                                             ; preds = %8767, %8747
  %9024 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9024, align 4
  br label %15491

9025:                                             ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %9026
    i32 1, label %9360
    i32 2, label %9716
  ]

9026:                                             ; preds = %9025
  %9027 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9028 = load i32, i32* %9027, align 8
  %9029 = sext i32 %9028 to i64
  %9030 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9031 = load i32, i32* %9030, align 8
  %9032 = sdiv i32 %9031, 2
  %9033 = sext i32 %9032 to i64
  %9034 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9035 = load i8*, i8** %9034, align 8
  %9036 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9037 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9036, align 8
  %9038 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9037, i64 0, i32 0, i32 1
  %9039 = load i32, i32* %9038, align 4
  %9040 = mul nsw i32 %9039, %9028
  %9041 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9042 = load i32, i32* %9041, align 4
  %9043 = add nsw i32 %9040, %9042
  %9044 = sext i32 %9043 to i64
  %9045 = getelementptr inbounds i8, i8* %9035, i64 %9044
  %9046 = icmp slt i32 %9031, 0
  %9047 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9048 = load i32, i32* %9047, align 8
  %9049 = icmp sgt i32 %9048, 1
  %9050 = and i1 %9046, %9049
  br i1 %9050, label %9051, label %9061

9051:                                             ; preds = %9026
  %9052 = add nsw i32 %9048, -1
  %9053 = sext i32 %9052 to i64
  %9054 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9055 = load i32, i32* %9054, align 4
  %9056 = sext i32 %9055 to i64
  %9057 = mul nsw i64 %9029, %9053
  %9058 = mul i64 %9057, %9056
  %9059 = sub i64 0, %9058
  %9060 = getelementptr inbounds i8, i8* %9045, i64 %9059
  br label %9063

9061:                                             ; preds = %9026
  %9062 = icmp sgt i32 %9048, 0
  br i1 %9062, label %9063, label %9358

9063:                                             ; preds = %9061, %9051
  %9064 = phi i8* [ %9060, %9051 ], [ %9045, %9061 ]
  %9065 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9066 = bitcast i8** %9065 to i16**
  %9067 = load i16*, i16** %9066, align 8
  %9068 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9069 = bitcast i8** %9068 to i32**
  %9070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9071

9071:                                             ; preds = %9082, %9063
  %9072 = phi i32 [ %9048, %9063 ], [ %9083, %9082 ]
  %9073 = phi %"class.blink::IntRect"* [ %9037, %9063 ], [ %9084, %9082 ]
  %9074 = phi i32 [ 0, %9063 ], [ %9093, %9082 ]
  %9075 = phi i16* [ %9067, %9063 ], [ %9086, %9082 ]
  %9076 = phi i8* [ %9064, %9063 ], [ %9092, %9082 ]
  %9077 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9073, i64 0, i32 1, i32 1
  %9078 = load i32, i32* %9077, align 4
  %9079 = icmp sgt i32 %9078, 0
  br i1 %9079, label %9095, label %9082

9080:                                             ; preds = %9349
  %9081 = load i32, i32* %9047, align 8
  br label %9082

9082:                                             ; preds = %9080, %9071
  %9083 = phi i32 [ %9072, %9071 ], [ %9081, %9080 ]
  %9084 = phi %"class.blink::IntRect"* [ %9073, %9071 ], [ %9350, %9080 ]
  %9085 = phi i8* [ %9076, %9071 ], [ %9351, %9080 ]
  %9086 = phi i16* [ %9075, %9071 ], [ %9352, %9080 ]
  %9087 = phi i32 [ %9078, %9071 ], [ %9355, %9080 ]
  %9088 = load i32, i32* %9070, align 4
  %9089 = sub nsw i32 %9088, %9087
  %9090 = sext i32 %9089 to i64
  %9091 = mul nsw i64 %9090, %9029
  %9092 = getelementptr inbounds i8, i8* %9085, i64 %9091
  %9093 = add nuw nsw i32 %9074, 1
  %9094 = icmp slt i32 %9093, %9083
  br i1 %9094, label %9071, label %9358

9095:                                             ; preds = %9071, %9349
  %9096 = phi i64 [ %9357, %9349 ], [ 0, %9071 ]
  %9097 = phi %"class.blink::IntRect"* [ %9350, %9349 ], [ %9073, %9071 ]
  %9098 = phi i32 [ %9353, %9349 ], [ 0, %9071 ]
  %9099 = phi i16* [ %9352, %9349 ], [ %9075, %9071 ]
  %9100 = phi i8* [ %9351, %9349 ], [ %9076, %9071 ]
  %9101 = mul i64 %9096, %9033
  %9102 = getelementptr i16, i16* %9075, i64 %9101
  %9103 = bitcast i16* %9102 to i8*
  %9104 = add i64 %9101, 1
  %9105 = getelementptr i16, i16* %9075, i64 %9104
  %9106 = load i32*, i32** %9069, align 8
  %9107 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9097, i64 0, i32 1, i32 0
  %9108 = load i32, i32* %9107, align 4
  %9109 = bitcast i8* %9100 to i32*
  %9110 = and i32 %9108, -4
  %9111 = icmp eq i32 %9110, 0
  br i1 %9111, label %9169, label %9112

9112:                                             ; preds = %9095
  %9113 = add i32 %9110, -1
  %9114 = lshr i32 %9113, 2
  %9115 = add nuw nsw i32 %9114, 1
  %9116 = and i32 %9115, 1
  %9117 = icmp eq i32 %9114, 0
  br i1 %9117, label %9150, label %9118

9118:                                             ; preds = %9112
  %9119 = sub nuw nsw i32 %9115, %9116
  br label %9120

9120:                                             ; preds = %9120, %9118
  %9121 = phi i32* [ %9109, %9118 ], [ %9146, %9120 ]
  %9122 = phi i32* [ %9106, %9118 ], [ %9147, %9120 ]
  %9123 = phi i32 [ %9119, %9118 ], [ %9148, %9120 ]
  %9124 = bitcast i32* %9122 to <2 x i64>*
  %9125 = bitcast i32* %9121 to <2 x i64>*
  %9126 = load <2 x i64>, <2 x i64>* %9125, align 1
  %9127 = bitcast <2 x i64> %9126 to <8 x i16>
  %9128 = shufflevector <8 x i16> %9127, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9129 = shufflevector <8 x i16> %9128, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9130 = bitcast <8 x i16> %9129 to <2 x i64>
  %9131 = and <2 x i64> %9130, <i64 71777214294589695, i64 71777214294589695>
  %9132 = and <2 x i64> %9126, <i64 -71777214294589696, i64 -71777214294589696>
  %9133 = or <2 x i64> %9131, %9132
  store <2 x i64> %9133, <2 x i64>* %9124, align 1
  %9134 = getelementptr inbounds i32, i32* %9121, i64 4
  %9135 = getelementptr inbounds i32, i32* %9122, i64 4
  %9136 = bitcast i32* %9135 to <2 x i64>*
  %9137 = bitcast i32* %9134 to <2 x i64>*
  %9138 = load <2 x i64>, <2 x i64>* %9137, align 1
  %9139 = bitcast <2 x i64> %9138 to <8 x i16>
  %9140 = shufflevector <8 x i16> %9139, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9141 = shufflevector <8 x i16> %9140, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9142 = bitcast <8 x i16> %9141 to <2 x i64>
  %9143 = and <2 x i64> %9142, <i64 71777214294589695, i64 71777214294589695>
  %9144 = and <2 x i64> %9138, <i64 -71777214294589696, i64 -71777214294589696>
  %9145 = or <2 x i64> %9143, %9144
  store <2 x i64> %9145, <2 x i64>* %9136, align 1
  %9146 = getelementptr inbounds i32, i32* %9121, i64 8
  %9147 = getelementptr inbounds i32, i32* %9122, i64 8
  %9148 = add i32 %9123, -2
  %9149 = icmp eq i32 %9148, 0
  br i1 %9149, label %9150, label %9120

9150:                                             ; preds = %9120, %9112
  %9151 = phi i32* [ undef, %9112 ], [ %9146, %9120 ]
  %9152 = phi i32* [ undef, %9112 ], [ %9147, %9120 ]
  %9153 = phi i32* [ %9109, %9112 ], [ %9146, %9120 ]
  %9154 = phi i32* [ %9106, %9112 ], [ %9147, %9120 ]
  %9155 = icmp eq i32 %9116, 0
  br i1 %9155, label %9169, label %9156

9156:                                             ; preds = %9150
  %9157 = bitcast i32* %9154 to <2 x i64>*
  %9158 = bitcast i32* %9153 to <2 x i64>*
  %9159 = load <2 x i64>, <2 x i64>* %9158, align 1
  %9160 = bitcast <2 x i64> %9159 to <8 x i16>
  %9161 = shufflevector <8 x i16> %9160, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9162 = shufflevector <8 x i16> %9161, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9163 = bitcast <8 x i16> %9162 to <2 x i64>
  %9164 = and <2 x i64> %9163, <i64 71777214294589695, i64 71777214294589695>
  %9165 = and <2 x i64> %9159, <i64 -71777214294589696, i64 -71777214294589696>
  %9166 = or <2 x i64> %9164, %9165
  store <2 x i64> %9166, <2 x i64>* %9157, align 1
  %9167 = getelementptr inbounds i32, i32* %9154, i64 4
  %9168 = getelementptr inbounds i32, i32* %9153, i64 4
  br label %9169

9169:                                             ; preds = %9156, %9150, %9095
  %9170 = phi i32* [ %9109, %9095 ], [ %9151, %9150 ], [ %9168, %9156 ]
  %9171 = phi i32* [ %9106, %9095 ], [ %9152, %9150 ], [ %9167, %9156 ]
  %9172 = sub i32 %9108, %9110
  %9173 = icmp eq i32 %9172, 0
  br i1 %9173, label %9256, label %9174

9174:                                             ; preds = %9169
  %9175 = zext i32 %9172 to i64
  %9176 = icmp ult i32 %9172, 8
  br i1 %9176, label %9213, label %9177

9177:                                             ; preds = %9174
  %9178 = getelementptr i32, i32* %9171, i64 %9175
  %9179 = getelementptr i32, i32* %9170, i64 %9175
  %9180 = icmp ult i32* %9171, %9179
  %9181 = icmp ult i32* %9170, %9178
  %9182 = and i1 %9180, %9181
  br i1 %9182, label %9213, label %9183

9183:                                             ; preds = %9177
  %9184 = and i64 %9175, 4294967288
  br label %9185

9185:                                             ; preds = %9185, %9183
  %9186 = phi i64 [ 0, %9183 ], [ %9209, %9185 ]
  %9187 = getelementptr inbounds i32, i32* %9170, i64 %9186
  %9188 = bitcast i32* %9187 to <4 x i32>*
  %9189 = load <4 x i32>, <4 x i32>* %9188, align 4, !alias.scope !470
  %9190 = getelementptr inbounds i32, i32* %9187, i64 4
  %9191 = bitcast i32* %9190 to <4 x i32>*
  %9192 = load <4 x i32>, <4 x i32>* %9191, align 4, !alias.scope !470
  %9193 = lshr <4 x i32> %9189, <i32 16, i32 16, i32 16, i32 16>
  %9194 = lshr <4 x i32> %9192, <i32 16, i32 16, i32 16, i32 16>
  %9195 = shl <4 x i32> %9189, <i32 16, i32 16, i32 16, i32 16>
  %9196 = shl <4 x i32> %9192, <i32 16, i32 16, i32 16, i32 16>
  %9197 = or <4 x i32> %9193, %9195
  %9198 = or <4 x i32> %9194, %9196
  %9199 = and <4 x i32> %9197, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9200 = and <4 x i32> %9198, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9201 = and <4 x i32> %9189, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9202 = and <4 x i32> %9192, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9203 = or <4 x i32> %9199, %9201
  %9204 = or <4 x i32> %9200, %9202
  %9205 = getelementptr inbounds i32, i32* %9171, i64 %9186
  %9206 = bitcast i32* %9205 to <4 x i32>*
  store <4 x i32> %9203, <4 x i32>* %9206, align 4, !alias.scope !473, !noalias !470
  %9207 = getelementptr inbounds i32, i32* %9205, i64 4
  %9208 = bitcast i32* %9207 to <4 x i32>*
  store <4 x i32> %9204, <4 x i32>* %9208, align 4, !alias.scope !473, !noalias !470
  %9209 = add i64 %9186, 8
  %9210 = icmp eq i64 %9209, %9184
  br i1 %9210, label %9211, label %9185, !llvm.loop !475

9211:                                             ; preds = %9185
  %9212 = icmp eq i64 %9184, %9175
  br i1 %9212, label %9256, label %9213

9213:                                             ; preds = %9211, %9177, %9174
  %9214 = phi i64 [ 0, %9177 ], [ 0, %9174 ], [ %9184, %9211 ]
  %9215 = xor i64 %9214, -1
  %9216 = and i64 %9175, 1
  %9217 = icmp eq i64 %9216, 0
  br i1 %9217, label %9229, label %9218

9218:                                             ; preds = %9213
  %9219 = getelementptr inbounds i32, i32* %9170, i64 %9214
  %9220 = load i32, i32* %9219, align 4
  %9221 = lshr i32 %9220, 16
  %9222 = shl i32 %9220, 16
  %9223 = or i32 %9221, %9222
  %9224 = and i32 %9223, 16711935
  %9225 = and i32 %9220, -16711936
  %9226 = or i32 %9224, %9225
  %9227 = getelementptr inbounds i32, i32* %9171, i64 %9214
  store i32 %9226, i32* %9227, align 4
  %9228 = or i64 %9214, 1
  br label %9229

9229:                                             ; preds = %9218, %9213
  %9230 = phi i64 [ %9228, %9218 ], [ %9214, %9213 ]
  %9231 = sub nsw i64 0, %9175
  %9232 = icmp eq i64 %9215, %9231
  br i1 %9232, label %9256, label %9233

9233:                                             ; preds = %9229, %9233
  %9234 = phi i64 [ %9254, %9233 ], [ %9230, %9229 ]
  %9235 = getelementptr inbounds i32, i32* %9170, i64 %9234
  %9236 = load i32, i32* %9235, align 4
  %9237 = lshr i32 %9236, 16
  %9238 = shl i32 %9236, 16
  %9239 = or i32 %9237, %9238
  %9240 = and i32 %9239, 16711935
  %9241 = and i32 %9236, -16711936
  %9242 = or i32 %9240, %9241
  %9243 = getelementptr inbounds i32, i32* %9171, i64 %9234
  store i32 %9242, i32* %9243, align 4
  %9244 = add nuw nsw i64 %9234, 1
  %9245 = getelementptr inbounds i32, i32* %9170, i64 %9244
  %9246 = load i32, i32* %9245, align 4
  %9247 = lshr i32 %9246, 16
  %9248 = shl i32 %9246, 16
  %9249 = or i32 %9247, %9248
  %9250 = and i32 %9249, 16711935
  %9251 = and i32 %9246, -16711936
  %9252 = or i32 %9250, %9251
  %9253 = getelementptr inbounds i32, i32* %9171, i64 %9244
  store i32 %9252, i32* %9253, align 4
  %9254 = add nuw nsw i64 %9234, 2
  %9255 = icmp eq i64 %9254, %9175
  br i1 %9255, label %9256, label %9233, !llvm.loop !476

9256:                                             ; preds = %9229, %9233, %9211, %9169
  %9257 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9036, align 8
  %9258 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9257, i64 0, i32 1, i32 0
  %9259 = load i32, i32* %9258, align 4
  %9260 = icmp eq i32 %9259, 0
  br i1 %9260, label %9349, label %9261

9261:                                             ; preds = %9256
  %9262 = load i8*, i8** %9068, align 8
  %9263 = add i32 %9259, -1
  %9264 = zext i32 %9263 to i64
  %9265 = add nuw nsw i64 %9264, 1
  %9266 = icmp ult i64 %9265, 8
  br i1 %9266, label %9314, label %9267

9267:                                             ; preds = %9261
  %9268 = add i32 %9259, -1
  %9269 = zext i32 %9268 to i64
  %9270 = getelementptr i16, i16* %9105, i64 %9269
  %9271 = bitcast i16* %9270 to i8*
  %9272 = getelementptr i8, i8* %9262, i64 4
  %9273 = shl nuw nsw i64 %9269, 2
  %9274 = getelementptr i8, i8* %9272, i64 %9273
  %9275 = icmp ugt i8* %9274, %9103
  %9276 = icmp ult i8* %9262, %9271
  %9277 = and i1 %9275, %9276
  br i1 %9277, label %9314, label %9278

9278:                                             ; preds = %9267
  %9279 = and i64 %9265, 8589934584
  %9280 = trunc i64 %9279 to i32
  %9281 = shl nuw nsw i64 %9279, 2
  %9282 = getelementptr i8, i8* %9262, i64 %9281
  %9283 = getelementptr i16, i16* %9099, i64 %9279
  br label %9284

9284:                                             ; preds = %9284, %9278
  %9285 = phi i64 [ 0, %9278 ], [ %9310, %9284 ]
  %9286 = shl i64 %9285, 2
  %9287 = getelementptr i8, i8* %9262, i64 %9286
  %9288 = getelementptr i16, i16* %9099, i64 %9285
  %9289 = bitcast i8* %9287 to <32 x i8>*
  %9290 = load <32 x i8>, <32 x i8>* %9289, align 1
  %9291 = shufflevector <32 x i8> %9290, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %9292 = shufflevector <32 x i8> %9290, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %9293 = shufflevector <32 x i8> %9290, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %9294 = shufflevector <32 x i8> %9290, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %9295 = and <8 x i8> %9291, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %9296 = zext <8 x i8> %9295 to <8 x i16>
  %9297 = shl nuw <8 x i16> %9296, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %9298 = and <8 x i8> %9292, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %9299 = zext <8 x i8> %9298 to <8 x i16>
  %9300 = shl nuw nsw <8 x i16> %9299, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %9301 = or <8 x i16> %9300, %9297
  %9302 = lshr <8 x i8> %9293, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %9303 = and <8 x i8> %9302, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %9304 = zext <8 x i8> %9303 to <8 x i16>
  %9305 = or <8 x i16> %9301, %9304
  %9306 = lshr <8 x i8> %9294, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %9307 = zext <8 x i8> %9306 to <8 x i16>
  %9308 = or <8 x i16> %9305, %9307
  %9309 = bitcast i16* %9288 to <8 x i16>*
  store <8 x i16> %9308, <8 x i16>* %9309, align 2, !alias.scope !477, !noalias !480
  %9310 = add i64 %9285, 8
  %9311 = icmp eq i64 %9310, %9279
  br i1 %9311, label %9312, label %9284, !llvm.loop !482

9312:                                             ; preds = %9284
  %9313 = icmp eq i64 %9265, %9279
  br i1 %9313, label %9347, label %9314

9314:                                             ; preds = %9312, %9267, %9261
  %9315 = phi i32 [ 0, %9267 ], [ 0, %9261 ], [ %9280, %9312 ]
  %9316 = phi i8* [ %9262, %9267 ], [ %9262, %9261 ], [ %9282, %9312 ]
  %9317 = phi i16* [ %9099, %9267 ], [ %9099, %9261 ], [ %9283, %9312 ]
  br label %9318

9318:                                             ; preds = %9314, %9318
  %9319 = phi i32 [ %9345, %9318 ], [ %9315, %9314 ]
  %9320 = phi i8* [ %9343, %9318 ], [ %9316, %9314 ]
  %9321 = phi i16* [ %9344, %9318 ], [ %9317, %9314 ]
  %9322 = load i8, i8* %9320, align 1
  %9323 = and i8 %9322, -8
  %9324 = zext i8 %9323 to i16
  %9325 = shl nuw i16 %9324, 8
  %9326 = getelementptr inbounds i8, i8* %9320, i64 1
  %9327 = load i8, i8* %9326, align 1
  %9328 = and i8 %9327, -8
  %9329 = zext i8 %9328 to i16
  %9330 = shl nuw nsw i16 %9329, 3
  %9331 = or i16 %9330, %9325
  %9332 = getelementptr inbounds i8, i8* %9320, i64 2
  %9333 = load i8, i8* %9332, align 1
  %9334 = lshr i8 %9333, 2
  %9335 = and i8 %9334, 62
  %9336 = zext i8 %9335 to i16
  %9337 = or i16 %9331, %9336
  %9338 = getelementptr inbounds i8, i8* %9320, i64 3
  %9339 = load i8, i8* %9338, align 1
  %9340 = lshr i8 %9339, 7
  %9341 = zext i8 %9340 to i16
  %9342 = or i16 %9337, %9341
  store i16 %9342, i16* %9321, align 2
  %9343 = getelementptr inbounds i8, i8* %9320, i64 4
  %9344 = getelementptr inbounds i16, i16* %9321, i64 1
  %9345 = add nuw i32 %9319, 1
  %9346 = icmp eq i32 %9345, %9259
  br i1 %9346, label %9347, label %9318, !llvm.loop !483

9347:                                             ; preds = %9318, %9312
  %9348 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9036, align 8
  br label %9349

9349:                                             ; preds = %9347, %9256
  %9350 = phi %"class.blink::IntRect"* [ %9348, %9347 ], [ %9257, %9256 ]
  %9351 = getelementptr inbounds i8, i8* %9100, i64 %9029
  %9352 = getelementptr inbounds i16, i16* %9099, i64 %9033
  %9353 = add nuw nsw i32 %9098, 1
  %9354 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9350, i64 0, i32 1, i32 1
  %9355 = load i32, i32* %9354, align 4
  %9356 = icmp slt i32 %9353, %9355
  %9357 = add i64 %9096, 1
  br i1 %9356, label %9095, label %9080

9358:                                             ; preds = %9082, %9061
  %9359 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9359, align 4
  br label %15491

9360:                                             ; preds = %9025
  %9361 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9362 = load i32, i32* %9361, align 8
  %9363 = sext i32 %9362 to i64
  %9364 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9365 = load i32, i32* %9364, align 8
  %9366 = sdiv i32 %9365, 2
  %9367 = sext i32 %9366 to i64
  %9368 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9369 = load i8*, i8** %9368, align 8
  %9370 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9371 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9370, align 8
  %9372 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9371, i64 0, i32 0, i32 1
  %9373 = load i32, i32* %9372, align 4
  %9374 = mul nsw i32 %9373, %9362
  %9375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9376 = load i32, i32* %9375, align 4
  %9377 = add nsw i32 %9374, %9376
  %9378 = sext i32 %9377 to i64
  %9379 = getelementptr inbounds i8, i8* %9369, i64 %9378
  %9380 = icmp slt i32 %9365, 0
  %9381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9382 = load i32, i32* %9381, align 8
  %9383 = icmp sgt i32 %9382, 1
  %9384 = and i1 %9380, %9383
  br i1 %9384, label %9385, label %9395

9385:                                             ; preds = %9360
  %9386 = add nsw i32 %9382, -1
  %9387 = sext i32 %9386 to i64
  %9388 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9389 = load i32, i32* %9388, align 4
  %9390 = sext i32 %9389 to i64
  %9391 = mul nsw i64 %9363, %9387
  %9392 = mul i64 %9391, %9390
  %9393 = sub i64 0, %9392
  %9394 = getelementptr inbounds i8, i8* %9379, i64 %9393
  br label %9397

9395:                                             ; preds = %9360
  %9396 = icmp sgt i32 %9382, 0
  br i1 %9396, label %9397, label %9714

9397:                                             ; preds = %9395, %9385
  %9398 = phi i8* [ %9394, %9385 ], [ %9379, %9395 ]
  %9399 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9400 = bitcast i8** %9399 to i16**
  %9401 = load i16*, i16** %9400, align 8
  %9402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9403 = bitcast i8** %9402 to i32**
  %9404 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9405

9405:                                             ; preds = %9416, %9397
  %9406 = phi i32 [ %9382, %9397 ], [ %9417, %9416 ]
  %9407 = phi %"class.blink::IntRect"* [ %9371, %9397 ], [ %9418, %9416 ]
  %9408 = phi i32 [ 0, %9397 ], [ %9427, %9416 ]
  %9409 = phi i16* [ %9401, %9397 ], [ %9420, %9416 ]
  %9410 = phi i8* [ %9398, %9397 ], [ %9426, %9416 ]
  %9411 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9407, i64 0, i32 1, i32 1
  %9412 = load i32, i32* %9411, align 4
  %9413 = icmp sgt i32 %9412, 0
  br i1 %9413, label %9429, label %9416

9414:                                             ; preds = %9705
  %9415 = load i32, i32* %9381, align 8
  br label %9416

9416:                                             ; preds = %9414, %9405
  %9417 = phi i32 [ %9406, %9405 ], [ %9415, %9414 ]
  %9418 = phi %"class.blink::IntRect"* [ %9407, %9405 ], [ %9706, %9414 ]
  %9419 = phi i8* [ %9410, %9405 ], [ %9707, %9414 ]
  %9420 = phi i16* [ %9409, %9405 ], [ %9708, %9414 ]
  %9421 = phi i32 [ %9412, %9405 ], [ %9711, %9414 ]
  %9422 = load i32, i32* %9404, align 4
  %9423 = sub nsw i32 %9422, %9421
  %9424 = sext i32 %9423 to i64
  %9425 = mul nsw i64 %9424, %9363
  %9426 = getelementptr inbounds i8, i8* %9419, i64 %9425
  %9427 = add nuw nsw i32 %9408, 1
  %9428 = icmp slt i32 %9427, %9417
  br i1 %9428, label %9405, label %9714

9429:                                             ; preds = %9405, %9705
  %9430 = phi i64 [ %9713, %9705 ], [ 0, %9405 ]
  %9431 = phi %"class.blink::IntRect"* [ %9706, %9705 ], [ %9407, %9405 ]
  %9432 = phi i32 [ %9709, %9705 ], [ 0, %9405 ]
  %9433 = phi i16* [ %9708, %9705 ], [ %9409, %9405 ]
  %9434 = phi i8* [ %9707, %9705 ], [ %9410, %9405 ]
  %9435 = mul i64 %9430, %9367
  %9436 = getelementptr i16, i16* %9409, i64 %9435
  %9437 = bitcast i16* %9436 to i8*
  %9438 = add i64 %9435, 1
  %9439 = getelementptr i16, i16* %9409, i64 %9438
  %9440 = load i32*, i32** %9403, align 8
  %9441 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9431, i64 0, i32 1, i32 0
  %9442 = load i32, i32* %9441, align 4
  %9443 = bitcast i8* %9434 to i32*
  %9444 = and i32 %9442, -4
  %9445 = icmp eq i32 %9444, 0
  br i1 %9445, label %9503, label %9446

9446:                                             ; preds = %9429
  %9447 = add i32 %9444, -1
  %9448 = lshr i32 %9447, 2
  %9449 = add nuw nsw i32 %9448, 1
  %9450 = and i32 %9449, 1
  %9451 = icmp eq i32 %9448, 0
  br i1 %9451, label %9484, label %9452

9452:                                             ; preds = %9446
  %9453 = sub nuw nsw i32 %9449, %9450
  br label %9454

9454:                                             ; preds = %9454, %9452
  %9455 = phi i32* [ %9443, %9452 ], [ %9480, %9454 ]
  %9456 = phi i32* [ %9440, %9452 ], [ %9481, %9454 ]
  %9457 = phi i32 [ %9453, %9452 ], [ %9482, %9454 ]
  %9458 = bitcast i32* %9456 to <2 x i64>*
  %9459 = bitcast i32* %9455 to <2 x i64>*
  %9460 = load <2 x i64>, <2 x i64>* %9459, align 1
  %9461 = bitcast <2 x i64> %9460 to <8 x i16>
  %9462 = shufflevector <8 x i16> %9461, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9463 = shufflevector <8 x i16> %9462, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9464 = bitcast <8 x i16> %9463 to <2 x i64>
  %9465 = and <2 x i64> %9464, <i64 71777214294589695, i64 71777214294589695>
  %9466 = and <2 x i64> %9460, <i64 -71777214294589696, i64 -71777214294589696>
  %9467 = or <2 x i64> %9465, %9466
  store <2 x i64> %9467, <2 x i64>* %9458, align 1
  %9468 = getelementptr inbounds i32, i32* %9455, i64 4
  %9469 = getelementptr inbounds i32, i32* %9456, i64 4
  %9470 = bitcast i32* %9469 to <2 x i64>*
  %9471 = bitcast i32* %9468 to <2 x i64>*
  %9472 = load <2 x i64>, <2 x i64>* %9471, align 1
  %9473 = bitcast <2 x i64> %9472 to <8 x i16>
  %9474 = shufflevector <8 x i16> %9473, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9475 = shufflevector <8 x i16> %9474, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9476 = bitcast <8 x i16> %9475 to <2 x i64>
  %9477 = and <2 x i64> %9476, <i64 71777214294589695, i64 71777214294589695>
  %9478 = and <2 x i64> %9472, <i64 -71777214294589696, i64 -71777214294589696>
  %9479 = or <2 x i64> %9477, %9478
  store <2 x i64> %9479, <2 x i64>* %9470, align 1
  %9480 = getelementptr inbounds i32, i32* %9455, i64 8
  %9481 = getelementptr inbounds i32, i32* %9456, i64 8
  %9482 = add i32 %9457, -2
  %9483 = icmp eq i32 %9482, 0
  br i1 %9483, label %9484, label %9454

9484:                                             ; preds = %9454, %9446
  %9485 = phi i32* [ undef, %9446 ], [ %9480, %9454 ]
  %9486 = phi i32* [ undef, %9446 ], [ %9481, %9454 ]
  %9487 = phi i32* [ %9443, %9446 ], [ %9480, %9454 ]
  %9488 = phi i32* [ %9440, %9446 ], [ %9481, %9454 ]
  %9489 = icmp eq i32 %9450, 0
  br i1 %9489, label %9503, label %9490

9490:                                             ; preds = %9484
  %9491 = bitcast i32* %9488 to <2 x i64>*
  %9492 = bitcast i32* %9487 to <2 x i64>*
  %9493 = load <2 x i64>, <2 x i64>* %9492, align 1
  %9494 = bitcast <2 x i64> %9493 to <8 x i16>
  %9495 = shufflevector <8 x i16> %9494, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9496 = shufflevector <8 x i16> %9495, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9497 = bitcast <8 x i16> %9496 to <2 x i64>
  %9498 = and <2 x i64> %9497, <i64 71777214294589695, i64 71777214294589695>
  %9499 = and <2 x i64> %9493, <i64 -71777214294589696, i64 -71777214294589696>
  %9500 = or <2 x i64> %9498, %9499
  store <2 x i64> %9500, <2 x i64>* %9491, align 1
  %9501 = getelementptr inbounds i32, i32* %9488, i64 4
  %9502 = getelementptr inbounds i32, i32* %9487, i64 4
  br label %9503

9503:                                             ; preds = %9490, %9484, %9429
  %9504 = phi i32* [ %9443, %9429 ], [ %9485, %9484 ], [ %9502, %9490 ]
  %9505 = phi i32* [ %9440, %9429 ], [ %9486, %9484 ], [ %9501, %9490 ]
  %9506 = sub i32 %9442, %9444
  %9507 = icmp eq i32 %9506, 0
  br i1 %9507, label %9590, label %9508

9508:                                             ; preds = %9503
  %9509 = zext i32 %9506 to i64
  %9510 = icmp ult i32 %9506, 8
  br i1 %9510, label %9547, label %9511

9511:                                             ; preds = %9508
  %9512 = getelementptr i32, i32* %9505, i64 %9509
  %9513 = getelementptr i32, i32* %9504, i64 %9509
  %9514 = icmp ult i32* %9505, %9513
  %9515 = icmp ult i32* %9504, %9512
  %9516 = and i1 %9514, %9515
  br i1 %9516, label %9547, label %9517

9517:                                             ; preds = %9511
  %9518 = and i64 %9509, 4294967288
  br label %9519

9519:                                             ; preds = %9519, %9517
  %9520 = phi i64 [ 0, %9517 ], [ %9543, %9519 ]
  %9521 = getelementptr inbounds i32, i32* %9504, i64 %9520
  %9522 = bitcast i32* %9521 to <4 x i32>*
  %9523 = load <4 x i32>, <4 x i32>* %9522, align 4, !alias.scope !484
  %9524 = getelementptr inbounds i32, i32* %9521, i64 4
  %9525 = bitcast i32* %9524 to <4 x i32>*
  %9526 = load <4 x i32>, <4 x i32>* %9525, align 4, !alias.scope !484
  %9527 = lshr <4 x i32> %9523, <i32 16, i32 16, i32 16, i32 16>
  %9528 = lshr <4 x i32> %9526, <i32 16, i32 16, i32 16, i32 16>
  %9529 = shl <4 x i32> %9523, <i32 16, i32 16, i32 16, i32 16>
  %9530 = shl <4 x i32> %9526, <i32 16, i32 16, i32 16, i32 16>
  %9531 = or <4 x i32> %9527, %9529
  %9532 = or <4 x i32> %9528, %9530
  %9533 = and <4 x i32> %9531, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9534 = and <4 x i32> %9532, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9535 = and <4 x i32> %9523, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9536 = and <4 x i32> %9526, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9537 = or <4 x i32> %9533, %9535
  %9538 = or <4 x i32> %9534, %9536
  %9539 = getelementptr inbounds i32, i32* %9505, i64 %9520
  %9540 = bitcast i32* %9539 to <4 x i32>*
  store <4 x i32> %9537, <4 x i32>* %9540, align 4, !alias.scope !487, !noalias !484
  %9541 = getelementptr inbounds i32, i32* %9539, i64 4
  %9542 = bitcast i32* %9541 to <4 x i32>*
  store <4 x i32> %9538, <4 x i32>* %9542, align 4, !alias.scope !487, !noalias !484
  %9543 = add i64 %9520, 8
  %9544 = icmp eq i64 %9543, %9518
  br i1 %9544, label %9545, label %9519, !llvm.loop !489

9545:                                             ; preds = %9519
  %9546 = icmp eq i64 %9518, %9509
  br i1 %9546, label %9590, label %9547

9547:                                             ; preds = %9545, %9511, %9508
  %9548 = phi i64 [ 0, %9511 ], [ 0, %9508 ], [ %9518, %9545 ]
  %9549 = xor i64 %9548, -1
  %9550 = and i64 %9509, 1
  %9551 = icmp eq i64 %9550, 0
  br i1 %9551, label %9563, label %9552

9552:                                             ; preds = %9547
  %9553 = getelementptr inbounds i32, i32* %9504, i64 %9548
  %9554 = load i32, i32* %9553, align 4
  %9555 = lshr i32 %9554, 16
  %9556 = shl i32 %9554, 16
  %9557 = or i32 %9555, %9556
  %9558 = and i32 %9557, 16711935
  %9559 = and i32 %9554, -16711936
  %9560 = or i32 %9558, %9559
  %9561 = getelementptr inbounds i32, i32* %9505, i64 %9548
  store i32 %9560, i32* %9561, align 4
  %9562 = or i64 %9548, 1
  br label %9563

9563:                                             ; preds = %9552, %9547
  %9564 = phi i64 [ %9562, %9552 ], [ %9548, %9547 ]
  %9565 = sub nsw i64 0, %9509
  %9566 = icmp eq i64 %9549, %9565
  br i1 %9566, label %9590, label %9567

9567:                                             ; preds = %9563, %9567
  %9568 = phi i64 [ %9588, %9567 ], [ %9564, %9563 ]
  %9569 = getelementptr inbounds i32, i32* %9504, i64 %9568
  %9570 = load i32, i32* %9569, align 4
  %9571 = lshr i32 %9570, 16
  %9572 = shl i32 %9570, 16
  %9573 = or i32 %9571, %9572
  %9574 = and i32 %9573, 16711935
  %9575 = and i32 %9570, -16711936
  %9576 = or i32 %9574, %9575
  %9577 = getelementptr inbounds i32, i32* %9505, i64 %9568
  store i32 %9576, i32* %9577, align 4
  %9578 = add nuw nsw i64 %9568, 1
  %9579 = getelementptr inbounds i32, i32* %9504, i64 %9578
  %9580 = load i32, i32* %9579, align 4
  %9581 = lshr i32 %9580, 16
  %9582 = shl i32 %9580, 16
  %9583 = or i32 %9581, %9582
  %9584 = and i32 %9583, 16711935
  %9585 = and i32 %9580, -16711936
  %9586 = or i32 %9584, %9585
  %9587 = getelementptr inbounds i32, i32* %9505, i64 %9578
  store i32 %9586, i32* %9587, align 4
  %9588 = add nuw nsw i64 %9568, 2
  %9589 = icmp eq i64 %9588, %9509
  br i1 %9589, label %9590, label %9567, !llvm.loop !490

9590:                                             ; preds = %9563, %9567, %9545, %9503
  %9591 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9370, align 8
  %9592 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9591, i64 0, i32 1, i32 0
  %9593 = load i32, i32* %9592, align 4
  %9594 = icmp eq i32 %9593, 0
  br i1 %9594, label %9705, label %9595

9595:                                             ; preds = %9590
  %9596 = load i8*, i8** %9402, align 8
  %9597 = add i32 %9593, -1
  %9598 = zext i32 %9597 to i64
  %9599 = add nuw nsw i64 %9598, 1
  %9600 = icmp ult i64 %9599, 8
  br i1 %9600, label %9659, label %9601

9601:                                             ; preds = %9595
  %9602 = add i32 %9593, -1
  %9603 = zext i32 %9602 to i64
  %9604 = getelementptr i16, i16* %9439, i64 %9603
  %9605 = bitcast i16* %9604 to i8*
  %9606 = getelementptr i8, i8* %9596, i64 4
  %9607 = shl nuw nsw i64 %9603, 2
  %9608 = getelementptr i8, i8* %9606, i64 %9607
  %9609 = icmp ugt i8* %9608, %9437
  %9610 = icmp ult i8* %9596, %9605
  %9611 = and i1 %9609, %9610
  br i1 %9611, label %9659, label %9612

9612:                                             ; preds = %9601
  %9613 = and i64 %9599, 8589934584
  %9614 = shl nuw nsw i64 %9613, 2
  %9615 = getelementptr i8, i8* %9596, i64 %9614
  %9616 = getelementptr i16, i16* %9433, i64 %9613
  %9617 = trunc i64 %9613 to i32
  br label %9618

9618:                                             ; preds = %9618, %9612
  %9619 = phi i64 [ 0, %9612 ], [ %9655, %9618 ]
  %9620 = shl i64 %9619, 2
  %9621 = getelementptr i16, i16* %9433, i64 %9619
  %9622 = getelementptr inbounds i8, i8* %9596, i64 %9620
  %9623 = bitcast i8* %9622 to <32 x i8>*
  %9624 = load <32 x i8>, <32 x i8>* %9623, align 1
  %9625 = shufflevector <32 x i8> %9624, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %9626 = shufflevector <32 x i8> %9624, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %9627 = shufflevector <32 x i8> %9624, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %9628 = shufflevector <32 x i8> %9624, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %9629 = uitofp <8 x i8> %9628 to <8 x float>
  %9630 = fdiv <8 x float> %9629, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %9631 = uitofp <8 x i8> %9625 to <8 x float>
  %9632 = fmul <8 x float> %9630, %9631
  %9633 = fptoui <8 x float> %9632 to <8 x i8>
  %9634 = uitofp <8 x i8> %9626 to <8 x float>
  %9635 = fmul <8 x float> %9630, %9634
  %9636 = fptoui <8 x float> %9635 to <8 x i8>
  %9637 = uitofp <8 x i8> %9627 to <8 x float>
  %9638 = fmul <8 x float> %9630, %9637
  %9639 = fptoui <8 x float> %9638 to <8 x i8>
  %9640 = and <8 x i8> %9633, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %9641 = zext <8 x i8> %9640 to <8 x i16>
  %9642 = shl nuw <8 x i16> %9641, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %9643 = and <8 x i8> %9636, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %9644 = zext <8 x i8> %9643 to <8 x i16>
  %9645 = shl nuw nsw <8 x i16> %9644, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %9646 = lshr <8 x i8> %9639, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %9647 = and <8 x i8> %9646, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %9648 = zext <8 x i8> %9647 to <8 x i16>
  %9649 = lshr <8 x i8> %9628, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %9650 = zext <8 x i8> %9649 to <8 x i16>
  %9651 = or <8 x i16> %9642, %9650
  %9652 = or <8 x i16> %9651, %9645
  %9653 = or <8 x i16> %9652, %9648
  %9654 = bitcast i16* %9621 to <8 x i16>*
  store <8 x i16> %9653, <8 x i16>* %9654, align 2, !alias.scope !491, !noalias !494
  %9655 = add i64 %9619, 8
  %9656 = icmp eq i64 %9655, %9613
  br i1 %9656, label %9657, label %9618, !llvm.loop !496

9657:                                             ; preds = %9618
  %9658 = icmp eq i64 %9599, %9613
  br i1 %9658, label %9703, label %9659

9659:                                             ; preds = %9657, %9601, %9595
  %9660 = phi i8* [ %9596, %9601 ], [ %9596, %9595 ], [ %9615, %9657 ]
  %9661 = phi i16* [ %9433, %9601 ], [ %9433, %9595 ], [ %9616, %9657 ]
  %9662 = phi i32 [ 0, %9601 ], [ 0, %9595 ], [ %9617, %9657 ]
  br label %9663

9663:                                             ; preds = %9659, %9663
  %9664 = phi i8* [ %9699, %9663 ], [ %9660, %9659 ]
  %9665 = phi i16* [ %9700, %9663 ], [ %9661, %9659 ]
  %9666 = phi i32 [ %9701, %9663 ], [ %9662, %9659 ]
  %9667 = getelementptr inbounds i8, i8* %9664, i64 3
  %9668 = load i8, i8* %9667, align 1
  %9669 = uitofp i8 %9668 to float
  %9670 = fdiv float %9669, 2.550000e+02
  %9671 = load i8, i8* %9664, align 1
  %9672 = uitofp i8 %9671 to float
  %9673 = fmul float %9670, %9672
  %9674 = fptoui float %9673 to i8
  %9675 = getelementptr inbounds i8, i8* %9664, i64 1
  %9676 = load i8, i8* %9675, align 1
  %9677 = uitofp i8 %9676 to float
  %9678 = fmul float %9670, %9677
  %9679 = fptoui float %9678 to i8
  %9680 = getelementptr inbounds i8, i8* %9664, i64 2
  %9681 = load i8, i8* %9680, align 1
  %9682 = uitofp i8 %9681 to float
  %9683 = fmul float %9670, %9682
  %9684 = fptoui float %9683 to i8
  %9685 = and i8 %9674, -8
  %9686 = zext i8 %9685 to i16
  %9687 = shl nuw i16 %9686, 8
  %9688 = and i8 %9679, -8
  %9689 = zext i8 %9688 to i16
  %9690 = shl nuw nsw i16 %9689, 3
  %9691 = lshr i8 %9684, 2
  %9692 = and i8 %9691, 62
  %9693 = zext i8 %9692 to i16
  %9694 = lshr i8 %9668, 7
  %9695 = zext i8 %9694 to i16
  %9696 = or i16 %9687, %9695
  %9697 = or i16 %9696, %9690
  %9698 = or i16 %9697, %9693
  store i16 %9698, i16* %9665, align 2
  %9699 = getelementptr inbounds i8, i8* %9664, i64 4
  %9700 = getelementptr inbounds i16, i16* %9665, i64 1
  %9701 = add nuw i32 %9666, 1
  %9702 = icmp eq i32 %9701, %9593
  br i1 %9702, label %9703, label %9663, !llvm.loop !497

9703:                                             ; preds = %9663, %9657
  %9704 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9370, align 8
  br label %9705

9705:                                             ; preds = %9703, %9590
  %9706 = phi %"class.blink::IntRect"* [ %9704, %9703 ], [ %9591, %9590 ]
  %9707 = getelementptr inbounds i8, i8* %9434, i64 %9363
  %9708 = getelementptr inbounds i16, i16* %9433, i64 %9367
  %9709 = add nuw nsw i32 %9432, 1
  %9710 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9706, i64 0, i32 1, i32 1
  %9711 = load i32, i32* %9710, align 4
  %9712 = icmp slt i32 %9709, %9711
  %9713 = add i64 %9430, 1
  br i1 %9712, label %9429, label %9414

9714:                                             ; preds = %9416, %9395
  %9715 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9715, align 4
  br label %15491

9716:                                             ; preds = %9025
  %9717 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9718 = load i32, i32* %9717, align 8
  %9719 = sext i32 %9718 to i64
  %9720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9721 = load i32, i32* %9720, align 8
  %9722 = sdiv i32 %9721, 2
  %9723 = sext i32 %9722 to i64
  %9724 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9725 = load i8*, i8** %9724, align 8
  %9726 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9727 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9726, align 8
  %9728 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9727, i64 0, i32 0, i32 1
  %9729 = load i32, i32* %9728, align 4
  %9730 = mul nsw i32 %9729, %9718
  %9731 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9732 = load i32, i32* %9731, align 4
  %9733 = add nsw i32 %9730, %9732
  %9734 = sext i32 %9733 to i64
  %9735 = getelementptr inbounds i8, i8* %9725, i64 %9734
  %9736 = icmp slt i32 %9721, 0
  %9737 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9738 = load i32, i32* %9737, align 8
  %9739 = icmp sgt i32 %9738, 1
  %9740 = and i1 %9736, %9739
  br i1 %9740, label %9741, label %9751

9741:                                             ; preds = %9716
  %9742 = add nsw i32 %9738, -1
  %9743 = sext i32 %9742 to i64
  %9744 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9745 = load i32, i32* %9744, align 4
  %9746 = sext i32 %9745 to i64
  %9747 = mul nsw i64 %9719, %9743
  %9748 = mul i64 %9747, %9746
  %9749 = sub i64 0, %9748
  %9750 = getelementptr inbounds i8, i8* %9735, i64 %9749
  br label %9753

9751:                                             ; preds = %9716
  %9752 = icmp sgt i32 %9738, 0
  br i1 %9752, label %9753, label %10076

9753:                                             ; preds = %9751, %9741
  %9754 = phi i8* [ %9750, %9741 ], [ %9735, %9751 ]
  %9755 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9756 = bitcast i8** %9755 to i16**
  %9757 = load i16*, i16** %9756, align 8
  %9758 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9759 = bitcast i8** %9758 to i32**
  %9760 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9761

9761:                                             ; preds = %9772, %9753
  %9762 = phi i32 [ %9738, %9753 ], [ %9773, %9772 ]
  %9763 = phi %"class.blink::IntRect"* [ %9727, %9753 ], [ %9774, %9772 ]
  %9764 = phi i32 [ 0, %9753 ], [ %9783, %9772 ]
  %9765 = phi i16* [ %9757, %9753 ], [ %9776, %9772 ]
  %9766 = phi i8* [ %9754, %9753 ], [ %9782, %9772 ]
  %9767 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9763, i64 0, i32 1, i32 1
  %9768 = load i32, i32* %9767, align 4
  %9769 = icmp sgt i32 %9768, 0
  br i1 %9769, label %9785, label %9772

9770:                                             ; preds = %10067
  %9771 = load i32, i32* %9737, align 8
  br label %9772

9772:                                             ; preds = %9770, %9761
  %9773 = phi i32 [ %9762, %9761 ], [ %9771, %9770 ]
  %9774 = phi %"class.blink::IntRect"* [ %9763, %9761 ], [ %10068, %9770 ]
  %9775 = phi i8* [ %9766, %9761 ], [ %10069, %9770 ]
  %9776 = phi i16* [ %9765, %9761 ], [ %10070, %9770 ]
  %9777 = phi i32 [ %9768, %9761 ], [ %10073, %9770 ]
  %9778 = load i32, i32* %9760, align 4
  %9779 = sub nsw i32 %9778, %9777
  %9780 = sext i32 %9779 to i64
  %9781 = mul nsw i64 %9780, %9719
  %9782 = getelementptr inbounds i8, i8* %9775, i64 %9781
  %9783 = add nuw nsw i32 %9764, 1
  %9784 = icmp slt i32 %9783, %9773
  br i1 %9784, label %9761, label %10076

9785:                                             ; preds = %9761, %10067
  %9786 = phi i64 [ %10075, %10067 ], [ 0, %9761 ]
  %9787 = phi %"class.blink::IntRect"* [ %10068, %10067 ], [ %9763, %9761 ]
  %9788 = phi i32 [ %10071, %10067 ], [ 0, %9761 ]
  %9789 = phi i16* [ %10070, %10067 ], [ %9765, %9761 ]
  %9790 = phi i8* [ %10069, %10067 ], [ %9766, %9761 ]
  %9791 = mul i64 %9786, %9723
  %9792 = getelementptr i16, i16* %9765, i64 %9791
  %9793 = bitcast i16* %9792 to i8*
  %9794 = add i64 %9791, 1
  %9795 = getelementptr i16, i16* %9765, i64 %9794
  %9796 = load i32*, i32** %9759, align 8
  %9797 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9787, i64 0, i32 1, i32 0
  %9798 = load i32, i32* %9797, align 4
  %9799 = bitcast i8* %9790 to i32*
  %9800 = and i32 %9798, -4
  %9801 = icmp eq i32 %9800, 0
  br i1 %9801, label %9859, label %9802

9802:                                             ; preds = %9785
  %9803 = add i32 %9800, -1
  %9804 = lshr i32 %9803, 2
  %9805 = add nuw nsw i32 %9804, 1
  %9806 = and i32 %9805, 1
  %9807 = icmp eq i32 %9804, 0
  br i1 %9807, label %9840, label %9808

9808:                                             ; preds = %9802
  %9809 = sub nuw nsw i32 %9805, %9806
  br label %9810

9810:                                             ; preds = %9810, %9808
  %9811 = phi i32* [ %9799, %9808 ], [ %9836, %9810 ]
  %9812 = phi i32* [ %9796, %9808 ], [ %9837, %9810 ]
  %9813 = phi i32 [ %9809, %9808 ], [ %9838, %9810 ]
  %9814 = bitcast i32* %9812 to <2 x i64>*
  %9815 = bitcast i32* %9811 to <2 x i64>*
  %9816 = load <2 x i64>, <2 x i64>* %9815, align 1
  %9817 = bitcast <2 x i64> %9816 to <8 x i16>
  %9818 = shufflevector <8 x i16> %9817, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9819 = shufflevector <8 x i16> %9818, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9820 = bitcast <8 x i16> %9819 to <2 x i64>
  %9821 = and <2 x i64> %9820, <i64 71777214294589695, i64 71777214294589695>
  %9822 = and <2 x i64> %9816, <i64 -71777214294589696, i64 -71777214294589696>
  %9823 = or <2 x i64> %9821, %9822
  store <2 x i64> %9823, <2 x i64>* %9814, align 1
  %9824 = getelementptr inbounds i32, i32* %9811, i64 4
  %9825 = getelementptr inbounds i32, i32* %9812, i64 4
  %9826 = bitcast i32* %9825 to <2 x i64>*
  %9827 = bitcast i32* %9824 to <2 x i64>*
  %9828 = load <2 x i64>, <2 x i64>* %9827, align 1
  %9829 = bitcast <2 x i64> %9828 to <8 x i16>
  %9830 = shufflevector <8 x i16> %9829, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9831 = shufflevector <8 x i16> %9830, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9832 = bitcast <8 x i16> %9831 to <2 x i64>
  %9833 = and <2 x i64> %9832, <i64 71777214294589695, i64 71777214294589695>
  %9834 = and <2 x i64> %9828, <i64 -71777214294589696, i64 -71777214294589696>
  %9835 = or <2 x i64> %9833, %9834
  store <2 x i64> %9835, <2 x i64>* %9826, align 1
  %9836 = getelementptr inbounds i32, i32* %9811, i64 8
  %9837 = getelementptr inbounds i32, i32* %9812, i64 8
  %9838 = add i32 %9813, -2
  %9839 = icmp eq i32 %9838, 0
  br i1 %9839, label %9840, label %9810

9840:                                             ; preds = %9810, %9802
  %9841 = phi i32* [ undef, %9802 ], [ %9836, %9810 ]
  %9842 = phi i32* [ undef, %9802 ], [ %9837, %9810 ]
  %9843 = phi i32* [ %9799, %9802 ], [ %9836, %9810 ]
  %9844 = phi i32* [ %9796, %9802 ], [ %9837, %9810 ]
  %9845 = icmp eq i32 %9806, 0
  br i1 %9845, label %9859, label %9846

9846:                                             ; preds = %9840
  %9847 = bitcast i32* %9844 to <2 x i64>*
  %9848 = bitcast i32* %9843 to <2 x i64>*
  %9849 = load <2 x i64>, <2 x i64>* %9848, align 1
  %9850 = bitcast <2 x i64> %9849 to <8 x i16>
  %9851 = shufflevector <8 x i16> %9850, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %9852 = shufflevector <8 x i16> %9851, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %9853 = bitcast <8 x i16> %9852 to <2 x i64>
  %9854 = and <2 x i64> %9853, <i64 71777214294589695, i64 71777214294589695>
  %9855 = and <2 x i64> %9849, <i64 -71777214294589696, i64 -71777214294589696>
  %9856 = or <2 x i64> %9854, %9855
  store <2 x i64> %9856, <2 x i64>* %9847, align 1
  %9857 = getelementptr inbounds i32, i32* %9844, i64 4
  %9858 = getelementptr inbounds i32, i32* %9843, i64 4
  br label %9859

9859:                                             ; preds = %9846, %9840, %9785
  %9860 = phi i32* [ %9799, %9785 ], [ %9841, %9840 ], [ %9858, %9846 ]
  %9861 = phi i32* [ %9796, %9785 ], [ %9842, %9840 ], [ %9857, %9846 ]
  %9862 = sub i32 %9798, %9800
  %9863 = icmp eq i32 %9862, 0
  br i1 %9863, label %9946, label %9864

9864:                                             ; preds = %9859
  %9865 = zext i32 %9862 to i64
  %9866 = icmp ult i32 %9862, 8
  br i1 %9866, label %9903, label %9867

9867:                                             ; preds = %9864
  %9868 = getelementptr i32, i32* %9861, i64 %9865
  %9869 = getelementptr i32, i32* %9860, i64 %9865
  %9870 = icmp ult i32* %9861, %9869
  %9871 = icmp ult i32* %9860, %9868
  %9872 = and i1 %9870, %9871
  br i1 %9872, label %9903, label %9873

9873:                                             ; preds = %9867
  %9874 = and i64 %9865, 4294967288
  br label %9875

9875:                                             ; preds = %9875, %9873
  %9876 = phi i64 [ 0, %9873 ], [ %9899, %9875 ]
  %9877 = getelementptr inbounds i32, i32* %9860, i64 %9876
  %9878 = bitcast i32* %9877 to <4 x i32>*
  %9879 = load <4 x i32>, <4 x i32>* %9878, align 4, !alias.scope !498
  %9880 = getelementptr inbounds i32, i32* %9877, i64 4
  %9881 = bitcast i32* %9880 to <4 x i32>*
  %9882 = load <4 x i32>, <4 x i32>* %9881, align 4, !alias.scope !498
  %9883 = lshr <4 x i32> %9879, <i32 16, i32 16, i32 16, i32 16>
  %9884 = lshr <4 x i32> %9882, <i32 16, i32 16, i32 16, i32 16>
  %9885 = shl <4 x i32> %9879, <i32 16, i32 16, i32 16, i32 16>
  %9886 = shl <4 x i32> %9882, <i32 16, i32 16, i32 16, i32 16>
  %9887 = or <4 x i32> %9883, %9885
  %9888 = or <4 x i32> %9884, %9886
  %9889 = and <4 x i32> %9887, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9890 = and <4 x i32> %9888, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %9891 = and <4 x i32> %9879, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9892 = and <4 x i32> %9882, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %9893 = or <4 x i32> %9889, %9891
  %9894 = or <4 x i32> %9890, %9892
  %9895 = getelementptr inbounds i32, i32* %9861, i64 %9876
  %9896 = bitcast i32* %9895 to <4 x i32>*
  store <4 x i32> %9893, <4 x i32>* %9896, align 4, !alias.scope !501, !noalias !498
  %9897 = getelementptr inbounds i32, i32* %9895, i64 4
  %9898 = bitcast i32* %9897 to <4 x i32>*
  store <4 x i32> %9894, <4 x i32>* %9898, align 4, !alias.scope !501, !noalias !498
  %9899 = add i64 %9876, 8
  %9900 = icmp eq i64 %9899, %9874
  br i1 %9900, label %9901, label %9875, !llvm.loop !503

9901:                                             ; preds = %9875
  %9902 = icmp eq i64 %9874, %9865
  br i1 %9902, label %9946, label %9903

9903:                                             ; preds = %9901, %9867, %9864
  %9904 = phi i64 [ 0, %9867 ], [ 0, %9864 ], [ %9874, %9901 ]
  %9905 = xor i64 %9904, -1
  %9906 = and i64 %9865, 1
  %9907 = icmp eq i64 %9906, 0
  br i1 %9907, label %9919, label %9908

9908:                                             ; preds = %9903
  %9909 = getelementptr inbounds i32, i32* %9860, i64 %9904
  %9910 = load i32, i32* %9909, align 4
  %9911 = lshr i32 %9910, 16
  %9912 = shl i32 %9910, 16
  %9913 = or i32 %9911, %9912
  %9914 = and i32 %9913, 16711935
  %9915 = and i32 %9910, -16711936
  %9916 = or i32 %9914, %9915
  %9917 = getelementptr inbounds i32, i32* %9861, i64 %9904
  store i32 %9916, i32* %9917, align 4
  %9918 = or i64 %9904, 1
  br label %9919

9919:                                             ; preds = %9908, %9903
  %9920 = phi i64 [ %9918, %9908 ], [ %9904, %9903 ]
  %9921 = sub nsw i64 0, %9865
  %9922 = icmp eq i64 %9905, %9921
  br i1 %9922, label %9946, label %9923

9923:                                             ; preds = %9919, %9923
  %9924 = phi i64 [ %9944, %9923 ], [ %9920, %9919 ]
  %9925 = getelementptr inbounds i32, i32* %9860, i64 %9924
  %9926 = load i32, i32* %9925, align 4
  %9927 = lshr i32 %9926, 16
  %9928 = shl i32 %9926, 16
  %9929 = or i32 %9927, %9928
  %9930 = and i32 %9929, 16711935
  %9931 = and i32 %9926, -16711936
  %9932 = or i32 %9930, %9931
  %9933 = getelementptr inbounds i32, i32* %9861, i64 %9924
  store i32 %9932, i32* %9933, align 4
  %9934 = add nuw nsw i64 %9924, 1
  %9935 = getelementptr inbounds i32, i32* %9860, i64 %9934
  %9936 = load i32, i32* %9935, align 4
  %9937 = lshr i32 %9936, 16
  %9938 = shl i32 %9936, 16
  %9939 = or i32 %9937, %9938
  %9940 = and i32 %9939, 16711935
  %9941 = and i32 %9936, -16711936
  %9942 = or i32 %9940, %9941
  %9943 = getelementptr inbounds i32, i32* %9861, i64 %9934
  store i32 %9942, i32* %9943, align 4
  %9944 = add nuw nsw i64 %9924, 2
  %9945 = icmp eq i64 %9944, %9865
  br i1 %9945, label %9946, label %9923, !llvm.loop !504

9946:                                             ; preds = %9919, %9923, %9901, %9859
  %9947 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9726, align 8
  %9948 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9947, i64 0, i32 1, i32 0
  %9949 = load i32, i32* %9948, align 4
  %9950 = icmp eq i32 %9949, 0
  br i1 %9950, label %10067, label %9951

9951:                                             ; preds = %9946
  %9952 = load i8*, i8** %9758, align 8
  %9953 = add i32 %9949, -1
  %9954 = zext i32 %9953 to i64
  %9955 = add nuw nsw i64 %9954, 1
  %9956 = icmp ult i64 %9955, 8
  br i1 %9956, label %10017, label %9957

9957:                                             ; preds = %9951
  %9958 = add i32 %9949, -1
  %9959 = zext i32 %9958 to i64
  %9960 = getelementptr i16, i16* %9795, i64 %9959
  %9961 = bitcast i16* %9960 to i8*
  %9962 = getelementptr i8, i8* %9952, i64 4
  %9963 = shl nuw nsw i64 %9959, 2
  %9964 = getelementptr i8, i8* %9962, i64 %9963
  %9965 = icmp ugt i8* %9964, %9793
  %9966 = icmp ult i8* %9952, %9961
  %9967 = and i1 %9965, %9966
  br i1 %9967, label %10017, label %9968

9968:                                             ; preds = %9957
  %9969 = and i64 %9955, 8589934584
  %9970 = shl nuw nsw i64 %9969, 2
  %9971 = getelementptr i8, i8* %9952, i64 %9970
  %9972 = getelementptr i16, i16* %9789, i64 %9969
  %9973 = trunc i64 %9969 to i32
  br label %9974

9974:                                             ; preds = %9974, %9968
  %9975 = phi i64 [ 0, %9968 ], [ %10013, %9974 ]
  %9976 = shl i64 %9975, 2
  %9977 = getelementptr i16, i16* %9789, i64 %9975
  %9978 = getelementptr inbounds i8, i8* %9952, i64 %9976
  %9979 = bitcast i8* %9978 to <32 x i8>*
  %9980 = load <32 x i8>, <32 x i8>* %9979, align 1
  %9981 = shufflevector <32 x i8> %9980, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %9982 = shufflevector <32 x i8> %9980, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %9983 = shufflevector <32 x i8> %9980, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %9984 = shufflevector <32 x i8> %9980, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %9985 = icmp eq <8 x i8> %9984, zeroinitializer
  %9986 = uitofp <8 x i8> %9984 to <8 x float>
  %9987 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %9986
  %9988 = select <8 x i1> %9985, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %9987
  %9989 = uitofp <8 x i8> %9981 to <8 x float>
  %9990 = fmul <8 x float> %9988, %9989
  %9991 = fptoui <8 x float> %9990 to <8 x i8>
  %9992 = uitofp <8 x i8> %9982 to <8 x float>
  %9993 = fmul <8 x float> %9988, %9992
  %9994 = fptoui <8 x float> %9993 to <8 x i8>
  %9995 = uitofp <8 x i8> %9983 to <8 x float>
  %9996 = fmul <8 x float> %9988, %9995
  %9997 = fptoui <8 x float> %9996 to <8 x i8>
  %9998 = and <8 x i8> %9991, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %9999 = zext <8 x i8> %9998 to <8 x i16>
  %10000 = shl nuw <8 x i16> %9999, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %10001 = and <8 x i8> %9994, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %10002 = zext <8 x i8> %10001 to <8 x i16>
  %10003 = shl nuw nsw <8 x i16> %10002, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %10004 = lshr <8 x i8> %9997, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %10005 = and <8 x i8> %10004, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %10006 = zext <8 x i8> %10005 to <8 x i16>
  %10007 = lshr <8 x i8> %9984, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %10008 = zext <8 x i8> %10007 to <8 x i16>
  %10009 = or <8 x i16> %10000, %10008
  %10010 = or <8 x i16> %10009, %10003
  %10011 = or <8 x i16> %10010, %10006
  %10012 = bitcast i16* %9977 to <8 x i16>*
  store <8 x i16> %10011, <8 x i16>* %10012, align 2, !alias.scope !505, !noalias !508
  %10013 = add i64 %9975, 8
  %10014 = icmp eq i64 %10013, %9969
  br i1 %10014, label %10015, label %9974, !llvm.loop !510

10015:                                            ; preds = %9974
  %10016 = icmp eq i64 %9955, %9969
  br i1 %10016, label %10065, label %10017

10017:                                            ; preds = %10015, %9957, %9951
  %10018 = phi i8* [ %9952, %9957 ], [ %9952, %9951 ], [ %9971, %10015 ]
  %10019 = phi i16* [ %9789, %9957 ], [ %9789, %9951 ], [ %9972, %10015 ]
  %10020 = phi i32 [ 0, %9957 ], [ 0, %9951 ], [ %9973, %10015 ]
  br label %10021

10021:                                            ; preds = %10017, %10031
  %10022 = phi i8* [ %10061, %10031 ], [ %10018, %10017 ]
  %10023 = phi i16* [ %10062, %10031 ], [ %10019, %10017 ]
  %10024 = phi i32 [ %10063, %10031 ], [ %10020, %10017 ]
  %10025 = getelementptr inbounds i8, i8* %10022, i64 3
  %10026 = load i8, i8* %10025, align 1
  %10027 = icmp eq i8 %10026, 0
  br i1 %10027, label %10031, label %10028

10028:                                            ; preds = %10021
  %10029 = uitofp i8 %10026 to float
  %10030 = fdiv float 2.550000e+02, %10029
  br label %10031

10031:                                            ; preds = %10028, %10021
  %10032 = phi float [ %10030, %10028 ], [ 1.000000e+00, %10021 ]
  %10033 = load i8, i8* %10022, align 1
  %10034 = uitofp i8 %10033 to float
  %10035 = fmul float %10032, %10034
  %10036 = fptoui float %10035 to i8
  %10037 = getelementptr inbounds i8, i8* %10022, i64 1
  %10038 = load i8, i8* %10037, align 1
  %10039 = uitofp i8 %10038 to float
  %10040 = fmul float %10032, %10039
  %10041 = fptoui float %10040 to i8
  %10042 = getelementptr inbounds i8, i8* %10022, i64 2
  %10043 = load i8, i8* %10042, align 1
  %10044 = uitofp i8 %10043 to float
  %10045 = fmul float %10032, %10044
  %10046 = fptoui float %10045 to i8
  %10047 = and i8 %10036, -8
  %10048 = zext i8 %10047 to i16
  %10049 = shl nuw i16 %10048, 8
  %10050 = and i8 %10041, -8
  %10051 = zext i8 %10050 to i16
  %10052 = shl nuw nsw i16 %10051, 3
  %10053 = lshr i8 %10046, 2
  %10054 = and i8 %10053, 62
  %10055 = zext i8 %10054 to i16
  %10056 = lshr i8 %10026, 7
  %10057 = zext i8 %10056 to i16
  %10058 = or i16 %10049, %10057
  %10059 = or i16 %10058, %10052
  %10060 = or i16 %10059, %10055
  store i16 %10060, i16* %10023, align 2
  %10061 = getelementptr inbounds i8, i8* %10022, i64 4
  %10062 = getelementptr inbounds i16, i16* %10023, i64 1
  %10063 = add nuw i32 %10024, 1
  %10064 = icmp eq i32 %10063, %9949
  br i1 %10064, label %10065, label %10021, !llvm.loop !511

10065:                                            ; preds = %10031, %10015
  %10066 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9726, align 8
  br label %10067

10067:                                            ; preds = %10065, %9946
  %10068 = phi %"class.blink::IntRect"* [ %10066, %10065 ], [ %9947, %9946 ]
  %10069 = getelementptr inbounds i8, i8* %9790, i64 %9719
  %10070 = getelementptr inbounds i16, i16* %9789, i64 %9723
  %10071 = add nuw nsw i32 %9788, 1
  %10072 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10068, i64 0, i32 1, i32 1
  %10073 = load i32, i32* %10072, align 4
  %10074 = icmp slt i32 %10071, %10073
  %10075 = add i64 %9786, 1
  br i1 %10074, label %9785, label %9770

10076:                                            ; preds = %9772, %9751
  %10077 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10077, align 4
  br label %15491

10078:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %10079
    i32 1, label %10411
    i32 2, label %10765
  ]

10079:                                            ; preds = %10078
  %10080 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10081 = load i32, i32* %10080, align 8
  %10082 = sext i32 %10081 to i64
  %10083 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10084 = load i32, i32* %10083, align 8
  %10085 = sdiv i32 %10084, 2
  %10086 = sext i32 %10085 to i64
  %10087 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10088 = load i8*, i8** %10087, align 8
  %10089 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10090 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10089, align 8
  %10091 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10090, i64 0, i32 0, i32 1
  %10092 = load i32, i32* %10091, align 4
  %10093 = mul nsw i32 %10092, %10081
  %10094 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10095 = load i32, i32* %10094, align 4
  %10096 = add nsw i32 %10093, %10095
  %10097 = sext i32 %10096 to i64
  %10098 = getelementptr inbounds i8, i8* %10088, i64 %10097
  %10099 = icmp slt i32 %10084, 0
  %10100 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10101 = load i32, i32* %10100, align 8
  %10102 = icmp sgt i32 %10101, 1
  %10103 = and i1 %10099, %10102
  br i1 %10103, label %10104, label %10114

10104:                                            ; preds = %10079
  %10105 = add nsw i32 %10101, -1
  %10106 = sext i32 %10105 to i64
  %10107 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10108 = load i32, i32* %10107, align 4
  %10109 = sext i32 %10108 to i64
  %10110 = mul nsw i64 %10082, %10106
  %10111 = mul i64 %10110, %10109
  %10112 = sub i64 0, %10111
  %10113 = getelementptr inbounds i8, i8* %10098, i64 %10112
  br label %10116

10114:                                            ; preds = %10079
  %10115 = icmp sgt i32 %10101, 0
  br i1 %10115, label %10116, label %10409

10116:                                            ; preds = %10114, %10104
  %10117 = phi i8* [ %10113, %10104 ], [ %10098, %10114 ]
  %10118 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10119 = bitcast i8** %10118 to i16**
  %10120 = load i16*, i16** %10119, align 8
  %10121 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10122 = bitcast i8** %10121 to i32**
  %10123 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10124

10124:                                            ; preds = %10135, %10116
  %10125 = phi i32 [ %10101, %10116 ], [ %10136, %10135 ]
  %10126 = phi %"class.blink::IntRect"* [ %10090, %10116 ], [ %10137, %10135 ]
  %10127 = phi i32 [ 0, %10116 ], [ %10146, %10135 ]
  %10128 = phi i16* [ %10120, %10116 ], [ %10139, %10135 ]
  %10129 = phi i8* [ %10117, %10116 ], [ %10145, %10135 ]
  %10130 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10126, i64 0, i32 1, i32 1
  %10131 = load i32, i32* %10130, align 4
  %10132 = icmp sgt i32 %10131, 0
  br i1 %10132, label %10148, label %10135

10133:                                            ; preds = %10400
  %10134 = load i32, i32* %10100, align 8
  br label %10135

10135:                                            ; preds = %10133, %10124
  %10136 = phi i32 [ %10125, %10124 ], [ %10134, %10133 ]
  %10137 = phi %"class.blink::IntRect"* [ %10126, %10124 ], [ %10401, %10133 ]
  %10138 = phi i8* [ %10129, %10124 ], [ %10402, %10133 ]
  %10139 = phi i16* [ %10128, %10124 ], [ %10403, %10133 ]
  %10140 = phi i32 [ %10131, %10124 ], [ %10406, %10133 ]
  %10141 = load i32, i32* %10123, align 4
  %10142 = sub nsw i32 %10141, %10140
  %10143 = sext i32 %10142 to i64
  %10144 = mul nsw i64 %10143, %10082
  %10145 = getelementptr inbounds i8, i8* %10138, i64 %10144
  %10146 = add nuw nsw i32 %10127, 1
  %10147 = icmp slt i32 %10146, %10136
  br i1 %10147, label %10124, label %10409

10148:                                            ; preds = %10124, %10400
  %10149 = phi i64 [ %10408, %10400 ], [ 0, %10124 ]
  %10150 = phi %"class.blink::IntRect"* [ %10401, %10400 ], [ %10126, %10124 ]
  %10151 = phi i32 [ %10404, %10400 ], [ 0, %10124 ]
  %10152 = phi i16* [ %10403, %10400 ], [ %10128, %10124 ]
  %10153 = phi i8* [ %10402, %10400 ], [ %10129, %10124 ]
  %10154 = mul i64 %10149, %10086
  %10155 = getelementptr i16, i16* %10128, i64 %10154
  %10156 = bitcast i16* %10155 to i8*
  %10157 = add i64 %10154, 1
  %10158 = getelementptr i16, i16* %10128, i64 %10157
  %10159 = load i32*, i32** %10122, align 8
  %10160 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10150, i64 0, i32 1, i32 0
  %10161 = load i32, i32* %10160, align 4
  %10162 = bitcast i8* %10153 to i32*
  %10163 = and i32 %10161, -4
  %10164 = icmp eq i32 %10163, 0
  br i1 %10164, label %10222, label %10165

10165:                                            ; preds = %10148
  %10166 = add i32 %10163, -1
  %10167 = lshr i32 %10166, 2
  %10168 = add nuw nsw i32 %10167, 1
  %10169 = and i32 %10168, 1
  %10170 = icmp eq i32 %10167, 0
  br i1 %10170, label %10203, label %10171

10171:                                            ; preds = %10165
  %10172 = sub nuw nsw i32 %10168, %10169
  br label %10173

10173:                                            ; preds = %10173, %10171
  %10174 = phi i32* [ %10162, %10171 ], [ %10199, %10173 ]
  %10175 = phi i32* [ %10159, %10171 ], [ %10200, %10173 ]
  %10176 = phi i32 [ %10172, %10171 ], [ %10201, %10173 ]
  %10177 = bitcast i32* %10175 to <2 x i64>*
  %10178 = bitcast i32* %10174 to <2 x i64>*
  %10179 = load <2 x i64>, <2 x i64>* %10178, align 1
  %10180 = bitcast <2 x i64> %10179 to <8 x i16>
  %10181 = shufflevector <8 x i16> %10180, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10182 = shufflevector <8 x i16> %10181, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10183 = bitcast <8 x i16> %10182 to <2 x i64>
  %10184 = and <2 x i64> %10183, <i64 71777214294589695, i64 71777214294589695>
  %10185 = and <2 x i64> %10179, <i64 -71777214294589696, i64 -71777214294589696>
  %10186 = or <2 x i64> %10184, %10185
  store <2 x i64> %10186, <2 x i64>* %10177, align 1
  %10187 = getelementptr inbounds i32, i32* %10174, i64 4
  %10188 = getelementptr inbounds i32, i32* %10175, i64 4
  %10189 = bitcast i32* %10188 to <2 x i64>*
  %10190 = bitcast i32* %10187 to <2 x i64>*
  %10191 = load <2 x i64>, <2 x i64>* %10190, align 1
  %10192 = bitcast <2 x i64> %10191 to <8 x i16>
  %10193 = shufflevector <8 x i16> %10192, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10194 = shufflevector <8 x i16> %10193, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10195 = bitcast <8 x i16> %10194 to <2 x i64>
  %10196 = and <2 x i64> %10195, <i64 71777214294589695, i64 71777214294589695>
  %10197 = and <2 x i64> %10191, <i64 -71777214294589696, i64 -71777214294589696>
  %10198 = or <2 x i64> %10196, %10197
  store <2 x i64> %10198, <2 x i64>* %10189, align 1
  %10199 = getelementptr inbounds i32, i32* %10174, i64 8
  %10200 = getelementptr inbounds i32, i32* %10175, i64 8
  %10201 = add i32 %10176, -2
  %10202 = icmp eq i32 %10201, 0
  br i1 %10202, label %10203, label %10173

10203:                                            ; preds = %10173, %10165
  %10204 = phi i32* [ undef, %10165 ], [ %10199, %10173 ]
  %10205 = phi i32* [ undef, %10165 ], [ %10200, %10173 ]
  %10206 = phi i32* [ %10162, %10165 ], [ %10199, %10173 ]
  %10207 = phi i32* [ %10159, %10165 ], [ %10200, %10173 ]
  %10208 = icmp eq i32 %10169, 0
  br i1 %10208, label %10222, label %10209

10209:                                            ; preds = %10203
  %10210 = bitcast i32* %10207 to <2 x i64>*
  %10211 = bitcast i32* %10206 to <2 x i64>*
  %10212 = load <2 x i64>, <2 x i64>* %10211, align 1
  %10213 = bitcast <2 x i64> %10212 to <8 x i16>
  %10214 = shufflevector <8 x i16> %10213, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10215 = shufflevector <8 x i16> %10214, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10216 = bitcast <8 x i16> %10215 to <2 x i64>
  %10217 = and <2 x i64> %10216, <i64 71777214294589695, i64 71777214294589695>
  %10218 = and <2 x i64> %10212, <i64 -71777214294589696, i64 -71777214294589696>
  %10219 = or <2 x i64> %10217, %10218
  store <2 x i64> %10219, <2 x i64>* %10210, align 1
  %10220 = getelementptr inbounds i32, i32* %10207, i64 4
  %10221 = getelementptr inbounds i32, i32* %10206, i64 4
  br label %10222

10222:                                            ; preds = %10209, %10203, %10148
  %10223 = phi i32* [ %10162, %10148 ], [ %10204, %10203 ], [ %10221, %10209 ]
  %10224 = phi i32* [ %10159, %10148 ], [ %10205, %10203 ], [ %10220, %10209 ]
  %10225 = sub i32 %10161, %10163
  %10226 = icmp eq i32 %10225, 0
  br i1 %10226, label %10309, label %10227

10227:                                            ; preds = %10222
  %10228 = zext i32 %10225 to i64
  %10229 = icmp ult i32 %10225, 8
  br i1 %10229, label %10266, label %10230

10230:                                            ; preds = %10227
  %10231 = getelementptr i32, i32* %10224, i64 %10228
  %10232 = getelementptr i32, i32* %10223, i64 %10228
  %10233 = icmp ult i32* %10224, %10232
  %10234 = icmp ult i32* %10223, %10231
  %10235 = and i1 %10233, %10234
  br i1 %10235, label %10266, label %10236

10236:                                            ; preds = %10230
  %10237 = and i64 %10228, 4294967288
  br label %10238

10238:                                            ; preds = %10238, %10236
  %10239 = phi i64 [ 0, %10236 ], [ %10262, %10238 ]
  %10240 = getelementptr inbounds i32, i32* %10223, i64 %10239
  %10241 = bitcast i32* %10240 to <4 x i32>*
  %10242 = load <4 x i32>, <4 x i32>* %10241, align 4, !alias.scope !512
  %10243 = getelementptr inbounds i32, i32* %10240, i64 4
  %10244 = bitcast i32* %10243 to <4 x i32>*
  %10245 = load <4 x i32>, <4 x i32>* %10244, align 4, !alias.scope !512
  %10246 = lshr <4 x i32> %10242, <i32 16, i32 16, i32 16, i32 16>
  %10247 = lshr <4 x i32> %10245, <i32 16, i32 16, i32 16, i32 16>
  %10248 = shl <4 x i32> %10242, <i32 16, i32 16, i32 16, i32 16>
  %10249 = shl <4 x i32> %10245, <i32 16, i32 16, i32 16, i32 16>
  %10250 = or <4 x i32> %10246, %10248
  %10251 = or <4 x i32> %10247, %10249
  %10252 = and <4 x i32> %10250, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10253 = and <4 x i32> %10251, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10254 = and <4 x i32> %10242, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10255 = and <4 x i32> %10245, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10256 = or <4 x i32> %10252, %10254
  %10257 = or <4 x i32> %10253, %10255
  %10258 = getelementptr inbounds i32, i32* %10224, i64 %10239
  %10259 = bitcast i32* %10258 to <4 x i32>*
  store <4 x i32> %10256, <4 x i32>* %10259, align 4, !alias.scope !515, !noalias !512
  %10260 = getelementptr inbounds i32, i32* %10258, i64 4
  %10261 = bitcast i32* %10260 to <4 x i32>*
  store <4 x i32> %10257, <4 x i32>* %10261, align 4, !alias.scope !515, !noalias !512
  %10262 = add i64 %10239, 8
  %10263 = icmp eq i64 %10262, %10237
  br i1 %10263, label %10264, label %10238, !llvm.loop !517

10264:                                            ; preds = %10238
  %10265 = icmp eq i64 %10237, %10228
  br i1 %10265, label %10309, label %10266

10266:                                            ; preds = %10264, %10230, %10227
  %10267 = phi i64 [ 0, %10230 ], [ 0, %10227 ], [ %10237, %10264 ]
  %10268 = xor i64 %10267, -1
  %10269 = and i64 %10228, 1
  %10270 = icmp eq i64 %10269, 0
  br i1 %10270, label %10282, label %10271

10271:                                            ; preds = %10266
  %10272 = getelementptr inbounds i32, i32* %10223, i64 %10267
  %10273 = load i32, i32* %10272, align 4
  %10274 = lshr i32 %10273, 16
  %10275 = shl i32 %10273, 16
  %10276 = or i32 %10274, %10275
  %10277 = and i32 %10276, 16711935
  %10278 = and i32 %10273, -16711936
  %10279 = or i32 %10277, %10278
  %10280 = getelementptr inbounds i32, i32* %10224, i64 %10267
  store i32 %10279, i32* %10280, align 4
  %10281 = or i64 %10267, 1
  br label %10282

10282:                                            ; preds = %10271, %10266
  %10283 = phi i64 [ %10281, %10271 ], [ %10267, %10266 ]
  %10284 = sub nsw i64 0, %10228
  %10285 = icmp eq i64 %10268, %10284
  br i1 %10285, label %10309, label %10286

10286:                                            ; preds = %10282, %10286
  %10287 = phi i64 [ %10307, %10286 ], [ %10283, %10282 ]
  %10288 = getelementptr inbounds i32, i32* %10223, i64 %10287
  %10289 = load i32, i32* %10288, align 4
  %10290 = lshr i32 %10289, 16
  %10291 = shl i32 %10289, 16
  %10292 = or i32 %10290, %10291
  %10293 = and i32 %10292, 16711935
  %10294 = and i32 %10289, -16711936
  %10295 = or i32 %10293, %10294
  %10296 = getelementptr inbounds i32, i32* %10224, i64 %10287
  store i32 %10295, i32* %10296, align 4
  %10297 = add nuw nsw i64 %10287, 1
  %10298 = getelementptr inbounds i32, i32* %10223, i64 %10297
  %10299 = load i32, i32* %10298, align 4
  %10300 = lshr i32 %10299, 16
  %10301 = shl i32 %10299, 16
  %10302 = or i32 %10300, %10301
  %10303 = and i32 %10302, 16711935
  %10304 = and i32 %10299, -16711936
  %10305 = or i32 %10303, %10304
  %10306 = getelementptr inbounds i32, i32* %10224, i64 %10297
  store i32 %10305, i32* %10306, align 4
  %10307 = add nuw nsw i64 %10287, 2
  %10308 = icmp eq i64 %10307, %10228
  br i1 %10308, label %10309, label %10286, !llvm.loop !518

10309:                                            ; preds = %10282, %10286, %10264, %10222
  %10310 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10089, align 8
  %10311 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10310, i64 0, i32 1, i32 0
  %10312 = load i32, i32* %10311, align 4
  %10313 = icmp eq i32 %10312, 0
  br i1 %10313, label %10400, label %10314

10314:                                            ; preds = %10309
  %10315 = load i8*, i8** %10121, align 8
  %10316 = add i32 %10312, -1
  %10317 = zext i32 %10316 to i64
  %10318 = add nuw nsw i64 %10317, 1
  %10319 = icmp ult i64 %10318, 8
  br i1 %10319, label %10366, label %10320

10320:                                            ; preds = %10314
  %10321 = add i32 %10312, -1
  %10322 = zext i32 %10321 to i64
  %10323 = getelementptr i16, i16* %10158, i64 %10322
  %10324 = bitcast i16* %10323 to i8*
  %10325 = getelementptr i8, i8* %10315, i64 4
  %10326 = shl nuw nsw i64 %10322, 2
  %10327 = getelementptr i8, i8* %10325, i64 %10326
  %10328 = icmp ugt i8* %10327, %10156
  %10329 = icmp ult i8* %10315, %10324
  %10330 = and i1 %10328, %10329
  br i1 %10330, label %10366, label %10331

10331:                                            ; preds = %10320
  %10332 = and i64 %10318, 8589934584
  %10333 = trunc i64 %10332 to i32
  %10334 = shl nuw nsw i64 %10332, 2
  %10335 = getelementptr i8, i8* %10315, i64 %10334
  %10336 = getelementptr i16, i16* %10152, i64 %10332
  br label %10337

10337:                                            ; preds = %10337, %10331
  %10338 = phi i64 [ 0, %10331 ], [ %10362, %10337 ]
  %10339 = shl i64 %10338, 2
  %10340 = getelementptr i8, i8* %10315, i64 %10339
  %10341 = getelementptr i16, i16* %10152, i64 %10338
  %10342 = bitcast i8* %10340 to <32 x i8>*
  %10343 = load <32 x i8>, <32 x i8>* %10342, align 1
  %10344 = shufflevector <32 x i8> %10343, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %10345 = shufflevector <32 x i8> %10343, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %10346 = shufflevector <32 x i8> %10343, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %10347 = shufflevector <32 x i8> %10343, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %10348 = and <8 x i8> %10344, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10349 = zext <8 x i8> %10348 to <8 x i16>
  %10350 = shl nuw <8 x i16> %10349, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %10351 = and <8 x i8> %10345, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10352 = zext <8 x i8> %10351 to <8 x i16>
  %10353 = shl nuw nsw <8 x i16> %10352, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %10354 = or <8 x i16> %10353, %10350
  %10355 = and <8 x i8> %10346, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10356 = zext <8 x i8> %10355 to <8 x i16>
  %10357 = or <8 x i16> %10354, %10356
  %10358 = lshr <8 x i8> %10347, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %10359 = zext <8 x i8> %10358 to <8 x i16>
  %10360 = or <8 x i16> %10357, %10359
  %10361 = bitcast i16* %10341 to <8 x i16>*
  store <8 x i16> %10360, <8 x i16>* %10361, align 2, !alias.scope !519, !noalias !522
  %10362 = add i64 %10338, 8
  %10363 = icmp eq i64 %10362, %10332
  br i1 %10363, label %10364, label %10337, !llvm.loop !524

10364:                                            ; preds = %10337
  %10365 = icmp eq i64 %10318, %10332
  br i1 %10365, label %10398, label %10366

10366:                                            ; preds = %10364, %10320, %10314
  %10367 = phi i32 [ 0, %10320 ], [ 0, %10314 ], [ %10333, %10364 ]
  %10368 = phi i8* [ %10315, %10320 ], [ %10315, %10314 ], [ %10335, %10364 ]
  %10369 = phi i16* [ %10152, %10320 ], [ %10152, %10314 ], [ %10336, %10364 ]
  br label %10370

10370:                                            ; preds = %10366, %10370
  %10371 = phi i32 [ %10396, %10370 ], [ %10367, %10366 ]
  %10372 = phi i8* [ %10394, %10370 ], [ %10368, %10366 ]
  %10373 = phi i16* [ %10395, %10370 ], [ %10369, %10366 ]
  %10374 = load i8, i8* %10372, align 1
  %10375 = and i8 %10374, -16
  %10376 = zext i8 %10375 to i16
  %10377 = shl nuw i16 %10376, 8
  %10378 = getelementptr inbounds i8, i8* %10372, i64 1
  %10379 = load i8, i8* %10378, align 1
  %10380 = and i8 %10379, -16
  %10381 = zext i8 %10380 to i16
  %10382 = shl nuw nsw i16 %10381, 4
  %10383 = or i16 %10382, %10377
  %10384 = getelementptr inbounds i8, i8* %10372, i64 2
  %10385 = load i8, i8* %10384, align 1
  %10386 = and i8 %10385, -16
  %10387 = zext i8 %10386 to i16
  %10388 = or i16 %10383, %10387
  %10389 = getelementptr inbounds i8, i8* %10372, i64 3
  %10390 = load i8, i8* %10389, align 1
  %10391 = lshr i8 %10390, 4
  %10392 = zext i8 %10391 to i16
  %10393 = or i16 %10388, %10392
  store i16 %10393, i16* %10373, align 2
  %10394 = getelementptr inbounds i8, i8* %10372, i64 4
  %10395 = getelementptr inbounds i16, i16* %10373, i64 1
  %10396 = add nuw i32 %10371, 1
  %10397 = icmp eq i32 %10396, %10312
  br i1 %10397, label %10398, label %10370, !llvm.loop !525

10398:                                            ; preds = %10370, %10364
  %10399 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10089, align 8
  br label %10400

10400:                                            ; preds = %10398, %10309
  %10401 = phi %"class.blink::IntRect"* [ %10399, %10398 ], [ %10310, %10309 ]
  %10402 = getelementptr inbounds i8, i8* %10153, i64 %10082
  %10403 = getelementptr inbounds i16, i16* %10152, i64 %10086
  %10404 = add nuw nsw i32 %10151, 1
  %10405 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10401, i64 0, i32 1, i32 1
  %10406 = load i32, i32* %10405, align 4
  %10407 = icmp slt i32 %10404, %10406
  %10408 = add i64 %10149, 1
  br i1 %10407, label %10148, label %10133

10409:                                            ; preds = %10135, %10114
  %10410 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10410, align 4
  br label %15491

10411:                                            ; preds = %10078
  %10412 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10413 = load i32, i32* %10412, align 8
  %10414 = sext i32 %10413 to i64
  %10415 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10416 = load i32, i32* %10415, align 8
  %10417 = sdiv i32 %10416, 2
  %10418 = sext i32 %10417 to i64
  %10419 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10420 = load i8*, i8** %10419, align 8
  %10421 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10422 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10421, align 8
  %10423 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10422, i64 0, i32 0, i32 1
  %10424 = load i32, i32* %10423, align 4
  %10425 = mul nsw i32 %10424, %10413
  %10426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10427 = load i32, i32* %10426, align 4
  %10428 = add nsw i32 %10425, %10427
  %10429 = sext i32 %10428 to i64
  %10430 = getelementptr inbounds i8, i8* %10420, i64 %10429
  %10431 = icmp slt i32 %10416, 0
  %10432 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10433 = load i32, i32* %10432, align 8
  %10434 = icmp sgt i32 %10433, 1
  %10435 = and i1 %10431, %10434
  br i1 %10435, label %10436, label %10446

10436:                                            ; preds = %10411
  %10437 = add nsw i32 %10433, -1
  %10438 = sext i32 %10437 to i64
  %10439 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10440 = load i32, i32* %10439, align 4
  %10441 = sext i32 %10440 to i64
  %10442 = mul nsw i64 %10414, %10438
  %10443 = mul i64 %10442, %10441
  %10444 = sub i64 0, %10443
  %10445 = getelementptr inbounds i8, i8* %10430, i64 %10444
  br label %10448

10446:                                            ; preds = %10411
  %10447 = icmp sgt i32 %10433, 0
  br i1 %10447, label %10448, label %10763

10448:                                            ; preds = %10446, %10436
  %10449 = phi i8* [ %10445, %10436 ], [ %10430, %10446 ]
  %10450 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10451 = bitcast i8** %10450 to i16**
  %10452 = load i16*, i16** %10451, align 8
  %10453 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10454 = bitcast i8** %10453 to i32**
  %10455 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10456

10456:                                            ; preds = %10467, %10448
  %10457 = phi i32 [ %10433, %10448 ], [ %10468, %10467 ]
  %10458 = phi %"class.blink::IntRect"* [ %10422, %10448 ], [ %10469, %10467 ]
  %10459 = phi i32 [ 0, %10448 ], [ %10478, %10467 ]
  %10460 = phi i16* [ %10452, %10448 ], [ %10471, %10467 ]
  %10461 = phi i8* [ %10449, %10448 ], [ %10477, %10467 ]
  %10462 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10458, i64 0, i32 1, i32 1
  %10463 = load i32, i32* %10462, align 4
  %10464 = icmp sgt i32 %10463, 0
  br i1 %10464, label %10480, label %10467

10465:                                            ; preds = %10754
  %10466 = load i32, i32* %10432, align 8
  br label %10467

10467:                                            ; preds = %10465, %10456
  %10468 = phi i32 [ %10457, %10456 ], [ %10466, %10465 ]
  %10469 = phi %"class.blink::IntRect"* [ %10458, %10456 ], [ %10755, %10465 ]
  %10470 = phi i8* [ %10461, %10456 ], [ %10756, %10465 ]
  %10471 = phi i16* [ %10460, %10456 ], [ %10757, %10465 ]
  %10472 = phi i32 [ %10463, %10456 ], [ %10760, %10465 ]
  %10473 = load i32, i32* %10455, align 4
  %10474 = sub nsw i32 %10473, %10472
  %10475 = sext i32 %10474 to i64
  %10476 = mul nsw i64 %10475, %10414
  %10477 = getelementptr inbounds i8, i8* %10470, i64 %10476
  %10478 = add nuw nsw i32 %10459, 1
  %10479 = icmp slt i32 %10478, %10468
  br i1 %10479, label %10456, label %10763

10480:                                            ; preds = %10456, %10754
  %10481 = phi i64 [ %10762, %10754 ], [ 0, %10456 ]
  %10482 = phi %"class.blink::IntRect"* [ %10755, %10754 ], [ %10458, %10456 ]
  %10483 = phi i32 [ %10758, %10754 ], [ 0, %10456 ]
  %10484 = phi i16* [ %10757, %10754 ], [ %10460, %10456 ]
  %10485 = phi i8* [ %10756, %10754 ], [ %10461, %10456 ]
  %10486 = mul i64 %10481, %10418
  %10487 = getelementptr i16, i16* %10460, i64 %10486
  %10488 = bitcast i16* %10487 to i8*
  %10489 = add i64 %10486, 1
  %10490 = getelementptr i16, i16* %10460, i64 %10489
  %10491 = load i32*, i32** %10454, align 8
  %10492 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10482, i64 0, i32 1, i32 0
  %10493 = load i32, i32* %10492, align 4
  %10494 = bitcast i8* %10485 to i32*
  %10495 = and i32 %10493, -4
  %10496 = icmp eq i32 %10495, 0
  br i1 %10496, label %10554, label %10497

10497:                                            ; preds = %10480
  %10498 = add i32 %10495, -1
  %10499 = lshr i32 %10498, 2
  %10500 = add nuw nsw i32 %10499, 1
  %10501 = and i32 %10500, 1
  %10502 = icmp eq i32 %10499, 0
  br i1 %10502, label %10535, label %10503

10503:                                            ; preds = %10497
  %10504 = sub nuw nsw i32 %10500, %10501
  br label %10505

10505:                                            ; preds = %10505, %10503
  %10506 = phi i32* [ %10494, %10503 ], [ %10531, %10505 ]
  %10507 = phi i32* [ %10491, %10503 ], [ %10532, %10505 ]
  %10508 = phi i32 [ %10504, %10503 ], [ %10533, %10505 ]
  %10509 = bitcast i32* %10507 to <2 x i64>*
  %10510 = bitcast i32* %10506 to <2 x i64>*
  %10511 = load <2 x i64>, <2 x i64>* %10510, align 1
  %10512 = bitcast <2 x i64> %10511 to <8 x i16>
  %10513 = shufflevector <8 x i16> %10512, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10514 = shufflevector <8 x i16> %10513, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10515 = bitcast <8 x i16> %10514 to <2 x i64>
  %10516 = and <2 x i64> %10515, <i64 71777214294589695, i64 71777214294589695>
  %10517 = and <2 x i64> %10511, <i64 -71777214294589696, i64 -71777214294589696>
  %10518 = or <2 x i64> %10516, %10517
  store <2 x i64> %10518, <2 x i64>* %10509, align 1
  %10519 = getelementptr inbounds i32, i32* %10506, i64 4
  %10520 = getelementptr inbounds i32, i32* %10507, i64 4
  %10521 = bitcast i32* %10520 to <2 x i64>*
  %10522 = bitcast i32* %10519 to <2 x i64>*
  %10523 = load <2 x i64>, <2 x i64>* %10522, align 1
  %10524 = bitcast <2 x i64> %10523 to <8 x i16>
  %10525 = shufflevector <8 x i16> %10524, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10526 = shufflevector <8 x i16> %10525, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10527 = bitcast <8 x i16> %10526 to <2 x i64>
  %10528 = and <2 x i64> %10527, <i64 71777214294589695, i64 71777214294589695>
  %10529 = and <2 x i64> %10523, <i64 -71777214294589696, i64 -71777214294589696>
  %10530 = or <2 x i64> %10528, %10529
  store <2 x i64> %10530, <2 x i64>* %10521, align 1
  %10531 = getelementptr inbounds i32, i32* %10506, i64 8
  %10532 = getelementptr inbounds i32, i32* %10507, i64 8
  %10533 = add i32 %10508, -2
  %10534 = icmp eq i32 %10533, 0
  br i1 %10534, label %10535, label %10505

10535:                                            ; preds = %10505, %10497
  %10536 = phi i32* [ undef, %10497 ], [ %10531, %10505 ]
  %10537 = phi i32* [ undef, %10497 ], [ %10532, %10505 ]
  %10538 = phi i32* [ %10494, %10497 ], [ %10531, %10505 ]
  %10539 = phi i32* [ %10491, %10497 ], [ %10532, %10505 ]
  %10540 = icmp eq i32 %10501, 0
  br i1 %10540, label %10554, label %10541

10541:                                            ; preds = %10535
  %10542 = bitcast i32* %10539 to <2 x i64>*
  %10543 = bitcast i32* %10538 to <2 x i64>*
  %10544 = load <2 x i64>, <2 x i64>* %10543, align 1
  %10545 = bitcast <2 x i64> %10544 to <8 x i16>
  %10546 = shufflevector <8 x i16> %10545, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10547 = shufflevector <8 x i16> %10546, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10548 = bitcast <8 x i16> %10547 to <2 x i64>
  %10549 = and <2 x i64> %10548, <i64 71777214294589695, i64 71777214294589695>
  %10550 = and <2 x i64> %10544, <i64 -71777214294589696, i64 -71777214294589696>
  %10551 = or <2 x i64> %10549, %10550
  store <2 x i64> %10551, <2 x i64>* %10542, align 1
  %10552 = getelementptr inbounds i32, i32* %10539, i64 4
  %10553 = getelementptr inbounds i32, i32* %10538, i64 4
  br label %10554

10554:                                            ; preds = %10541, %10535, %10480
  %10555 = phi i32* [ %10494, %10480 ], [ %10536, %10535 ], [ %10553, %10541 ]
  %10556 = phi i32* [ %10491, %10480 ], [ %10537, %10535 ], [ %10552, %10541 ]
  %10557 = sub i32 %10493, %10495
  %10558 = icmp eq i32 %10557, 0
  br i1 %10558, label %10641, label %10559

10559:                                            ; preds = %10554
  %10560 = zext i32 %10557 to i64
  %10561 = icmp ult i32 %10557, 8
  br i1 %10561, label %10598, label %10562

10562:                                            ; preds = %10559
  %10563 = getelementptr i32, i32* %10556, i64 %10560
  %10564 = getelementptr i32, i32* %10555, i64 %10560
  %10565 = icmp ult i32* %10556, %10564
  %10566 = icmp ult i32* %10555, %10563
  %10567 = and i1 %10565, %10566
  br i1 %10567, label %10598, label %10568

10568:                                            ; preds = %10562
  %10569 = and i64 %10560, 4294967288
  br label %10570

10570:                                            ; preds = %10570, %10568
  %10571 = phi i64 [ 0, %10568 ], [ %10594, %10570 ]
  %10572 = getelementptr inbounds i32, i32* %10555, i64 %10571
  %10573 = bitcast i32* %10572 to <4 x i32>*
  %10574 = load <4 x i32>, <4 x i32>* %10573, align 4, !alias.scope !526
  %10575 = getelementptr inbounds i32, i32* %10572, i64 4
  %10576 = bitcast i32* %10575 to <4 x i32>*
  %10577 = load <4 x i32>, <4 x i32>* %10576, align 4, !alias.scope !526
  %10578 = lshr <4 x i32> %10574, <i32 16, i32 16, i32 16, i32 16>
  %10579 = lshr <4 x i32> %10577, <i32 16, i32 16, i32 16, i32 16>
  %10580 = shl <4 x i32> %10574, <i32 16, i32 16, i32 16, i32 16>
  %10581 = shl <4 x i32> %10577, <i32 16, i32 16, i32 16, i32 16>
  %10582 = or <4 x i32> %10578, %10580
  %10583 = or <4 x i32> %10579, %10581
  %10584 = and <4 x i32> %10582, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10585 = and <4 x i32> %10583, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10586 = and <4 x i32> %10574, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10587 = and <4 x i32> %10577, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10588 = or <4 x i32> %10584, %10586
  %10589 = or <4 x i32> %10585, %10587
  %10590 = getelementptr inbounds i32, i32* %10556, i64 %10571
  %10591 = bitcast i32* %10590 to <4 x i32>*
  store <4 x i32> %10588, <4 x i32>* %10591, align 4, !alias.scope !529, !noalias !526
  %10592 = getelementptr inbounds i32, i32* %10590, i64 4
  %10593 = bitcast i32* %10592 to <4 x i32>*
  store <4 x i32> %10589, <4 x i32>* %10593, align 4, !alias.scope !529, !noalias !526
  %10594 = add i64 %10571, 8
  %10595 = icmp eq i64 %10594, %10569
  br i1 %10595, label %10596, label %10570, !llvm.loop !531

10596:                                            ; preds = %10570
  %10597 = icmp eq i64 %10569, %10560
  br i1 %10597, label %10641, label %10598

10598:                                            ; preds = %10596, %10562, %10559
  %10599 = phi i64 [ 0, %10562 ], [ 0, %10559 ], [ %10569, %10596 ]
  %10600 = xor i64 %10599, -1
  %10601 = and i64 %10560, 1
  %10602 = icmp eq i64 %10601, 0
  br i1 %10602, label %10614, label %10603

10603:                                            ; preds = %10598
  %10604 = getelementptr inbounds i32, i32* %10555, i64 %10599
  %10605 = load i32, i32* %10604, align 4
  %10606 = lshr i32 %10605, 16
  %10607 = shl i32 %10605, 16
  %10608 = or i32 %10606, %10607
  %10609 = and i32 %10608, 16711935
  %10610 = and i32 %10605, -16711936
  %10611 = or i32 %10609, %10610
  %10612 = getelementptr inbounds i32, i32* %10556, i64 %10599
  store i32 %10611, i32* %10612, align 4
  %10613 = or i64 %10599, 1
  br label %10614

10614:                                            ; preds = %10603, %10598
  %10615 = phi i64 [ %10613, %10603 ], [ %10599, %10598 ]
  %10616 = sub nsw i64 0, %10560
  %10617 = icmp eq i64 %10600, %10616
  br i1 %10617, label %10641, label %10618

10618:                                            ; preds = %10614, %10618
  %10619 = phi i64 [ %10639, %10618 ], [ %10615, %10614 ]
  %10620 = getelementptr inbounds i32, i32* %10555, i64 %10619
  %10621 = load i32, i32* %10620, align 4
  %10622 = lshr i32 %10621, 16
  %10623 = shl i32 %10621, 16
  %10624 = or i32 %10622, %10623
  %10625 = and i32 %10624, 16711935
  %10626 = and i32 %10621, -16711936
  %10627 = or i32 %10625, %10626
  %10628 = getelementptr inbounds i32, i32* %10556, i64 %10619
  store i32 %10627, i32* %10628, align 4
  %10629 = add nuw nsw i64 %10619, 1
  %10630 = getelementptr inbounds i32, i32* %10555, i64 %10629
  %10631 = load i32, i32* %10630, align 4
  %10632 = lshr i32 %10631, 16
  %10633 = shl i32 %10631, 16
  %10634 = or i32 %10632, %10633
  %10635 = and i32 %10634, 16711935
  %10636 = and i32 %10631, -16711936
  %10637 = or i32 %10635, %10636
  %10638 = getelementptr inbounds i32, i32* %10556, i64 %10629
  store i32 %10637, i32* %10638, align 4
  %10639 = add nuw nsw i64 %10619, 2
  %10640 = icmp eq i64 %10639, %10560
  br i1 %10640, label %10641, label %10618, !llvm.loop !532

10641:                                            ; preds = %10614, %10618, %10596, %10554
  %10642 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10421, align 8
  %10643 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10642, i64 0, i32 1, i32 0
  %10644 = load i32, i32* %10643, align 4
  %10645 = icmp eq i32 %10644, 0
  br i1 %10645, label %10754, label %10646

10646:                                            ; preds = %10641
  %10647 = load i8*, i8** %10453, align 8
  %10648 = add i32 %10644, -1
  %10649 = zext i32 %10648 to i64
  %10650 = add nuw nsw i64 %10649, 1
  %10651 = icmp ult i64 %10650, 8
  br i1 %10651, label %10709, label %10652

10652:                                            ; preds = %10646
  %10653 = add i32 %10644, -1
  %10654 = zext i32 %10653 to i64
  %10655 = getelementptr i16, i16* %10490, i64 %10654
  %10656 = bitcast i16* %10655 to i8*
  %10657 = getelementptr i8, i8* %10647, i64 4
  %10658 = shl nuw nsw i64 %10654, 2
  %10659 = getelementptr i8, i8* %10657, i64 %10658
  %10660 = icmp ugt i8* %10659, %10488
  %10661 = icmp ult i8* %10647, %10656
  %10662 = and i1 %10660, %10661
  br i1 %10662, label %10709, label %10663

10663:                                            ; preds = %10652
  %10664 = and i64 %10650, 8589934584
  %10665 = shl nuw nsw i64 %10664, 2
  %10666 = getelementptr i8, i8* %10647, i64 %10665
  %10667 = getelementptr i16, i16* %10484, i64 %10664
  %10668 = trunc i64 %10664 to i32
  br label %10669

10669:                                            ; preds = %10669, %10663
  %10670 = phi i64 [ 0, %10663 ], [ %10705, %10669 ]
  %10671 = shl i64 %10670, 2
  %10672 = getelementptr i16, i16* %10484, i64 %10670
  %10673 = getelementptr inbounds i8, i8* %10647, i64 %10671
  %10674 = bitcast i8* %10673 to <32 x i8>*
  %10675 = load <32 x i8>, <32 x i8>* %10674, align 1
  %10676 = shufflevector <32 x i8> %10675, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %10677 = shufflevector <32 x i8> %10675, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %10678 = shufflevector <32 x i8> %10675, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %10679 = shufflevector <32 x i8> %10675, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %10680 = uitofp <8 x i8> %10679 to <8 x float>
  %10681 = fdiv <8 x float> %10680, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %10682 = uitofp <8 x i8> %10676 to <8 x float>
  %10683 = fmul <8 x float> %10681, %10682
  %10684 = fptoui <8 x float> %10683 to <8 x i8>
  %10685 = uitofp <8 x i8> %10677 to <8 x float>
  %10686 = fmul <8 x float> %10681, %10685
  %10687 = fptoui <8 x float> %10686 to <8 x i8>
  %10688 = uitofp <8 x i8> %10678 to <8 x float>
  %10689 = fmul <8 x float> %10681, %10688
  %10690 = fptoui <8 x float> %10689 to <8 x i8>
  %10691 = and <8 x i8> %10684, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10692 = zext <8 x i8> %10691 to <8 x i16>
  %10693 = shl nuw <8 x i16> %10692, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %10694 = and <8 x i8> %10687, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10695 = zext <8 x i8> %10694 to <8 x i16>
  %10696 = shl nuw nsw <8 x i16> %10695, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %10697 = and <8 x i8> %10690, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %10698 = zext <8 x i8> %10697 to <8 x i16>
  %10699 = lshr <8 x i8> %10679, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %10700 = zext <8 x i8> %10699 to <8 x i16>
  %10701 = or <8 x i16> %10693, %10700
  %10702 = or <8 x i16> %10701, %10696
  %10703 = or <8 x i16> %10702, %10698
  %10704 = bitcast i16* %10672 to <8 x i16>*
  store <8 x i16> %10703, <8 x i16>* %10704, align 2, !alias.scope !533, !noalias !536
  %10705 = add i64 %10670, 8
  %10706 = icmp eq i64 %10705, %10664
  br i1 %10706, label %10707, label %10669, !llvm.loop !538

10707:                                            ; preds = %10669
  %10708 = icmp eq i64 %10650, %10664
  br i1 %10708, label %10752, label %10709

10709:                                            ; preds = %10707, %10652, %10646
  %10710 = phi i8* [ %10647, %10652 ], [ %10647, %10646 ], [ %10666, %10707 ]
  %10711 = phi i16* [ %10484, %10652 ], [ %10484, %10646 ], [ %10667, %10707 ]
  %10712 = phi i32 [ 0, %10652 ], [ 0, %10646 ], [ %10668, %10707 ]
  br label %10713

10713:                                            ; preds = %10709, %10713
  %10714 = phi i8* [ %10748, %10713 ], [ %10710, %10709 ]
  %10715 = phi i16* [ %10749, %10713 ], [ %10711, %10709 ]
  %10716 = phi i32 [ %10750, %10713 ], [ %10712, %10709 ]
  %10717 = getelementptr inbounds i8, i8* %10714, i64 3
  %10718 = load i8, i8* %10717, align 1
  %10719 = uitofp i8 %10718 to float
  %10720 = fdiv float %10719, 2.550000e+02
  %10721 = load i8, i8* %10714, align 1
  %10722 = uitofp i8 %10721 to float
  %10723 = fmul float %10720, %10722
  %10724 = fptoui float %10723 to i8
  %10725 = getelementptr inbounds i8, i8* %10714, i64 1
  %10726 = load i8, i8* %10725, align 1
  %10727 = uitofp i8 %10726 to float
  %10728 = fmul float %10720, %10727
  %10729 = fptoui float %10728 to i8
  %10730 = getelementptr inbounds i8, i8* %10714, i64 2
  %10731 = load i8, i8* %10730, align 1
  %10732 = uitofp i8 %10731 to float
  %10733 = fmul float %10720, %10732
  %10734 = fptoui float %10733 to i8
  %10735 = and i8 %10724, -16
  %10736 = zext i8 %10735 to i16
  %10737 = shl nuw i16 %10736, 8
  %10738 = and i8 %10729, -16
  %10739 = zext i8 %10738 to i16
  %10740 = shl nuw nsw i16 %10739, 4
  %10741 = and i8 %10734, -16
  %10742 = zext i8 %10741 to i16
  %10743 = lshr i8 %10718, 4
  %10744 = zext i8 %10743 to i16
  %10745 = or i16 %10737, %10744
  %10746 = or i16 %10745, %10740
  %10747 = or i16 %10746, %10742
  store i16 %10747, i16* %10715, align 2
  %10748 = getelementptr inbounds i8, i8* %10714, i64 4
  %10749 = getelementptr inbounds i16, i16* %10715, i64 1
  %10750 = add nuw i32 %10716, 1
  %10751 = icmp eq i32 %10750, %10644
  br i1 %10751, label %10752, label %10713, !llvm.loop !539

10752:                                            ; preds = %10713, %10707
  %10753 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10421, align 8
  br label %10754

10754:                                            ; preds = %10752, %10641
  %10755 = phi %"class.blink::IntRect"* [ %10753, %10752 ], [ %10642, %10641 ]
  %10756 = getelementptr inbounds i8, i8* %10485, i64 %10414
  %10757 = getelementptr inbounds i16, i16* %10484, i64 %10418
  %10758 = add nuw nsw i32 %10483, 1
  %10759 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10755, i64 0, i32 1, i32 1
  %10760 = load i32, i32* %10759, align 4
  %10761 = icmp slt i32 %10758, %10760
  %10762 = add i64 %10481, 1
  br i1 %10761, label %10480, label %10465

10763:                                            ; preds = %10467, %10446
  %10764 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10764, align 4
  br label %15491

10765:                                            ; preds = %10078
  %10766 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10767 = load i32, i32* %10766, align 8
  %10768 = sext i32 %10767 to i64
  %10769 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10770 = load i32, i32* %10769, align 8
  %10771 = sdiv i32 %10770, 2
  %10772 = sext i32 %10771 to i64
  %10773 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10774 = load i8*, i8** %10773, align 8
  %10775 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10776 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10775, align 8
  %10777 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10776, i64 0, i32 0, i32 1
  %10778 = load i32, i32* %10777, align 4
  %10779 = mul nsw i32 %10778, %10767
  %10780 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10781 = load i32, i32* %10780, align 4
  %10782 = add nsw i32 %10779, %10781
  %10783 = sext i32 %10782 to i64
  %10784 = getelementptr inbounds i8, i8* %10774, i64 %10783
  %10785 = icmp slt i32 %10770, 0
  %10786 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10787 = load i32, i32* %10786, align 8
  %10788 = icmp sgt i32 %10787, 1
  %10789 = and i1 %10785, %10788
  br i1 %10789, label %10790, label %10800

10790:                                            ; preds = %10765
  %10791 = add nsw i32 %10787, -1
  %10792 = sext i32 %10791 to i64
  %10793 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10794 = load i32, i32* %10793, align 4
  %10795 = sext i32 %10794 to i64
  %10796 = mul nsw i64 %10768, %10792
  %10797 = mul i64 %10796, %10795
  %10798 = sub i64 0, %10797
  %10799 = getelementptr inbounds i8, i8* %10784, i64 %10798
  br label %10802

10800:                                            ; preds = %10765
  %10801 = icmp sgt i32 %10787, 0
  br i1 %10801, label %10802, label %11123

10802:                                            ; preds = %10800, %10790
  %10803 = phi i8* [ %10799, %10790 ], [ %10784, %10800 ]
  %10804 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10805 = bitcast i8** %10804 to i16**
  %10806 = load i16*, i16** %10805, align 8
  %10807 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10808 = bitcast i8** %10807 to i32**
  %10809 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10810

10810:                                            ; preds = %10821, %10802
  %10811 = phi i32 [ %10787, %10802 ], [ %10822, %10821 ]
  %10812 = phi %"class.blink::IntRect"* [ %10776, %10802 ], [ %10823, %10821 ]
  %10813 = phi i32 [ 0, %10802 ], [ %10832, %10821 ]
  %10814 = phi i16* [ %10806, %10802 ], [ %10825, %10821 ]
  %10815 = phi i8* [ %10803, %10802 ], [ %10831, %10821 ]
  %10816 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10812, i64 0, i32 1, i32 1
  %10817 = load i32, i32* %10816, align 4
  %10818 = icmp sgt i32 %10817, 0
  br i1 %10818, label %10834, label %10821

10819:                                            ; preds = %11114
  %10820 = load i32, i32* %10786, align 8
  br label %10821

10821:                                            ; preds = %10819, %10810
  %10822 = phi i32 [ %10811, %10810 ], [ %10820, %10819 ]
  %10823 = phi %"class.blink::IntRect"* [ %10812, %10810 ], [ %11115, %10819 ]
  %10824 = phi i8* [ %10815, %10810 ], [ %11116, %10819 ]
  %10825 = phi i16* [ %10814, %10810 ], [ %11117, %10819 ]
  %10826 = phi i32 [ %10817, %10810 ], [ %11120, %10819 ]
  %10827 = load i32, i32* %10809, align 4
  %10828 = sub nsw i32 %10827, %10826
  %10829 = sext i32 %10828 to i64
  %10830 = mul nsw i64 %10829, %10768
  %10831 = getelementptr inbounds i8, i8* %10824, i64 %10830
  %10832 = add nuw nsw i32 %10813, 1
  %10833 = icmp slt i32 %10832, %10822
  br i1 %10833, label %10810, label %11123

10834:                                            ; preds = %10810, %11114
  %10835 = phi i64 [ %11122, %11114 ], [ 0, %10810 ]
  %10836 = phi %"class.blink::IntRect"* [ %11115, %11114 ], [ %10812, %10810 ]
  %10837 = phi i32 [ %11118, %11114 ], [ 0, %10810 ]
  %10838 = phi i16* [ %11117, %11114 ], [ %10814, %10810 ]
  %10839 = phi i8* [ %11116, %11114 ], [ %10815, %10810 ]
  %10840 = mul i64 %10835, %10772
  %10841 = getelementptr i16, i16* %10814, i64 %10840
  %10842 = bitcast i16* %10841 to i8*
  %10843 = add i64 %10840, 1
  %10844 = getelementptr i16, i16* %10814, i64 %10843
  %10845 = load i32*, i32** %10808, align 8
  %10846 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10836, i64 0, i32 1, i32 0
  %10847 = load i32, i32* %10846, align 4
  %10848 = bitcast i8* %10839 to i32*
  %10849 = and i32 %10847, -4
  %10850 = icmp eq i32 %10849, 0
  br i1 %10850, label %10908, label %10851

10851:                                            ; preds = %10834
  %10852 = add i32 %10849, -1
  %10853 = lshr i32 %10852, 2
  %10854 = add nuw nsw i32 %10853, 1
  %10855 = and i32 %10854, 1
  %10856 = icmp eq i32 %10853, 0
  br i1 %10856, label %10889, label %10857

10857:                                            ; preds = %10851
  %10858 = sub nuw nsw i32 %10854, %10855
  br label %10859

10859:                                            ; preds = %10859, %10857
  %10860 = phi i32* [ %10848, %10857 ], [ %10885, %10859 ]
  %10861 = phi i32* [ %10845, %10857 ], [ %10886, %10859 ]
  %10862 = phi i32 [ %10858, %10857 ], [ %10887, %10859 ]
  %10863 = bitcast i32* %10861 to <2 x i64>*
  %10864 = bitcast i32* %10860 to <2 x i64>*
  %10865 = load <2 x i64>, <2 x i64>* %10864, align 1
  %10866 = bitcast <2 x i64> %10865 to <8 x i16>
  %10867 = shufflevector <8 x i16> %10866, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10868 = shufflevector <8 x i16> %10867, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10869 = bitcast <8 x i16> %10868 to <2 x i64>
  %10870 = and <2 x i64> %10869, <i64 71777214294589695, i64 71777214294589695>
  %10871 = and <2 x i64> %10865, <i64 -71777214294589696, i64 -71777214294589696>
  %10872 = or <2 x i64> %10870, %10871
  store <2 x i64> %10872, <2 x i64>* %10863, align 1
  %10873 = getelementptr inbounds i32, i32* %10860, i64 4
  %10874 = getelementptr inbounds i32, i32* %10861, i64 4
  %10875 = bitcast i32* %10874 to <2 x i64>*
  %10876 = bitcast i32* %10873 to <2 x i64>*
  %10877 = load <2 x i64>, <2 x i64>* %10876, align 1
  %10878 = bitcast <2 x i64> %10877 to <8 x i16>
  %10879 = shufflevector <8 x i16> %10878, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10880 = shufflevector <8 x i16> %10879, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10881 = bitcast <8 x i16> %10880 to <2 x i64>
  %10882 = and <2 x i64> %10881, <i64 71777214294589695, i64 71777214294589695>
  %10883 = and <2 x i64> %10877, <i64 -71777214294589696, i64 -71777214294589696>
  %10884 = or <2 x i64> %10882, %10883
  store <2 x i64> %10884, <2 x i64>* %10875, align 1
  %10885 = getelementptr inbounds i32, i32* %10860, i64 8
  %10886 = getelementptr inbounds i32, i32* %10861, i64 8
  %10887 = add i32 %10862, -2
  %10888 = icmp eq i32 %10887, 0
  br i1 %10888, label %10889, label %10859

10889:                                            ; preds = %10859, %10851
  %10890 = phi i32* [ undef, %10851 ], [ %10885, %10859 ]
  %10891 = phi i32* [ undef, %10851 ], [ %10886, %10859 ]
  %10892 = phi i32* [ %10848, %10851 ], [ %10885, %10859 ]
  %10893 = phi i32* [ %10845, %10851 ], [ %10886, %10859 ]
  %10894 = icmp eq i32 %10855, 0
  br i1 %10894, label %10908, label %10895

10895:                                            ; preds = %10889
  %10896 = bitcast i32* %10893 to <2 x i64>*
  %10897 = bitcast i32* %10892 to <2 x i64>*
  %10898 = load <2 x i64>, <2 x i64>* %10897, align 1
  %10899 = bitcast <2 x i64> %10898 to <8 x i16>
  %10900 = shufflevector <8 x i16> %10899, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %10901 = shufflevector <8 x i16> %10900, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %10902 = bitcast <8 x i16> %10901 to <2 x i64>
  %10903 = and <2 x i64> %10902, <i64 71777214294589695, i64 71777214294589695>
  %10904 = and <2 x i64> %10898, <i64 -71777214294589696, i64 -71777214294589696>
  %10905 = or <2 x i64> %10903, %10904
  store <2 x i64> %10905, <2 x i64>* %10896, align 1
  %10906 = getelementptr inbounds i32, i32* %10893, i64 4
  %10907 = getelementptr inbounds i32, i32* %10892, i64 4
  br label %10908

10908:                                            ; preds = %10895, %10889, %10834
  %10909 = phi i32* [ %10848, %10834 ], [ %10890, %10889 ], [ %10907, %10895 ]
  %10910 = phi i32* [ %10845, %10834 ], [ %10891, %10889 ], [ %10906, %10895 ]
  %10911 = sub i32 %10847, %10849
  %10912 = icmp eq i32 %10911, 0
  br i1 %10912, label %10995, label %10913

10913:                                            ; preds = %10908
  %10914 = zext i32 %10911 to i64
  %10915 = icmp ult i32 %10911, 8
  br i1 %10915, label %10952, label %10916

10916:                                            ; preds = %10913
  %10917 = getelementptr i32, i32* %10910, i64 %10914
  %10918 = getelementptr i32, i32* %10909, i64 %10914
  %10919 = icmp ult i32* %10910, %10918
  %10920 = icmp ult i32* %10909, %10917
  %10921 = and i1 %10919, %10920
  br i1 %10921, label %10952, label %10922

10922:                                            ; preds = %10916
  %10923 = and i64 %10914, 4294967288
  br label %10924

10924:                                            ; preds = %10924, %10922
  %10925 = phi i64 [ 0, %10922 ], [ %10948, %10924 ]
  %10926 = getelementptr inbounds i32, i32* %10909, i64 %10925
  %10927 = bitcast i32* %10926 to <4 x i32>*
  %10928 = load <4 x i32>, <4 x i32>* %10927, align 4, !alias.scope !540
  %10929 = getelementptr inbounds i32, i32* %10926, i64 4
  %10930 = bitcast i32* %10929 to <4 x i32>*
  %10931 = load <4 x i32>, <4 x i32>* %10930, align 4, !alias.scope !540
  %10932 = lshr <4 x i32> %10928, <i32 16, i32 16, i32 16, i32 16>
  %10933 = lshr <4 x i32> %10931, <i32 16, i32 16, i32 16, i32 16>
  %10934 = shl <4 x i32> %10928, <i32 16, i32 16, i32 16, i32 16>
  %10935 = shl <4 x i32> %10931, <i32 16, i32 16, i32 16, i32 16>
  %10936 = or <4 x i32> %10932, %10934
  %10937 = or <4 x i32> %10933, %10935
  %10938 = and <4 x i32> %10936, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10939 = and <4 x i32> %10937, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %10940 = and <4 x i32> %10928, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10941 = and <4 x i32> %10931, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %10942 = or <4 x i32> %10938, %10940
  %10943 = or <4 x i32> %10939, %10941
  %10944 = getelementptr inbounds i32, i32* %10910, i64 %10925
  %10945 = bitcast i32* %10944 to <4 x i32>*
  store <4 x i32> %10942, <4 x i32>* %10945, align 4, !alias.scope !543, !noalias !540
  %10946 = getelementptr inbounds i32, i32* %10944, i64 4
  %10947 = bitcast i32* %10946 to <4 x i32>*
  store <4 x i32> %10943, <4 x i32>* %10947, align 4, !alias.scope !543, !noalias !540
  %10948 = add i64 %10925, 8
  %10949 = icmp eq i64 %10948, %10923
  br i1 %10949, label %10950, label %10924, !llvm.loop !545

10950:                                            ; preds = %10924
  %10951 = icmp eq i64 %10923, %10914
  br i1 %10951, label %10995, label %10952

10952:                                            ; preds = %10950, %10916, %10913
  %10953 = phi i64 [ 0, %10916 ], [ 0, %10913 ], [ %10923, %10950 ]
  %10954 = xor i64 %10953, -1
  %10955 = and i64 %10914, 1
  %10956 = icmp eq i64 %10955, 0
  br i1 %10956, label %10968, label %10957

10957:                                            ; preds = %10952
  %10958 = getelementptr inbounds i32, i32* %10909, i64 %10953
  %10959 = load i32, i32* %10958, align 4
  %10960 = lshr i32 %10959, 16
  %10961 = shl i32 %10959, 16
  %10962 = or i32 %10960, %10961
  %10963 = and i32 %10962, 16711935
  %10964 = and i32 %10959, -16711936
  %10965 = or i32 %10963, %10964
  %10966 = getelementptr inbounds i32, i32* %10910, i64 %10953
  store i32 %10965, i32* %10966, align 4
  %10967 = or i64 %10953, 1
  br label %10968

10968:                                            ; preds = %10957, %10952
  %10969 = phi i64 [ %10967, %10957 ], [ %10953, %10952 ]
  %10970 = sub nsw i64 0, %10914
  %10971 = icmp eq i64 %10954, %10970
  br i1 %10971, label %10995, label %10972

10972:                                            ; preds = %10968, %10972
  %10973 = phi i64 [ %10993, %10972 ], [ %10969, %10968 ]
  %10974 = getelementptr inbounds i32, i32* %10909, i64 %10973
  %10975 = load i32, i32* %10974, align 4
  %10976 = lshr i32 %10975, 16
  %10977 = shl i32 %10975, 16
  %10978 = or i32 %10976, %10977
  %10979 = and i32 %10978, 16711935
  %10980 = and i32 %10975, -16711936
  %10981 = or i32 %10979, %10980
  %10982 = getelementptr inbounds i32, i32* %10910, i64 %10973
  store i32 %10981, i32* %10982, align 4
  %10983 = add nuw nsw i64 %10973, 1
  %10984 = getelementptr inbounds i32, i32* %10909, i64 %10983
  %10985 = load i32, i32* %10984, align 4
  %10986 = lshr i32 %10985, 16
  %10987 = shl i32 %10985, 16
  %10988 = or i32 %10986, %10987
  %10989 = and i32 %10988, 16711935
  %10990 = and i32 %10985, -16711936
  %10991 = or i32 %10989, %10990
  %10992 = getelementptr inbounds i32, i32* %10910, i64 %10983
  store i32 %10991, i32* %10992, align 4
  %10993 = add nuw nsw i64 %10973, 2
  %10994 = icmp eq i64 %10993, %10914
  br i1 %10994, label %10995, label %10972, !llvm.loop !546

10995:                                            ; preds = %10968, %10972, %10950, %10908
  %10996 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10775, align 8
  %10997 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10996, i64 0, i32 1, i32 0
  %10998 = load i32, i32* %10997, align 4
  %10999 = icmp eq i32 %10998, 0
  br i1 %10999, label %11114, label %11000

11000:                                            ; preds = %10995
  %11001 = load i8*, i8** %10807, align 8
  %11002 = add i32 %10998, -1
  %11003 = zext i32 %11002 to i64
  %11004 = add nuw nsw i64 %11003, 1
  %11005 = icmp ult i64 %11004, 8
  br i1 %11005, label %11065, label %11006

11006:                                            ; preds = %11000
  %11007 = add i32 %10998, -1
  %11008 = zext i32 %11007 to i64
  %11009 = getelementptr i16, i16* %10844, i64 %11008
  %11010 = bitcast i16* %11009 to i8*
  %11011 = getelementptr i8, i8* %11001, i64 4
  %11012 = shl nuw nsw i64 %11008, 2
  %11013 = getelementptr i8, i8* %11011, i64 %11012
  %11014 = icmp ugt i8* %11013, %10842
  %11015 = icmp ult i8* %11001, %11010
  %11016 = and i1 %11014, %11015
  br i1 %11016, label %11065, label %11017

11017:                                            ; preds = %11006
  %11018 = and i64 %11004, 8589934584
  %11019 = shl nuw nsw i64 %11018, 2
  %11020 = getelementptr i8, i8* %11001, i64 %11019
  %11021 = getelementptr i16, i16* %10838, i64 %11018
  %11022 = trunc i64 %11018 to i32
  br label %11023

11023:                                            ; preds = %11023, %11017
  %11024 = phi i64 [ 0, %11017 ], [ %11061, %11023 ]
  %11025 = shl i64 %11024, 2
  %11026 = getelementptr i16, i16* %10838, i64 %11024
  %11027 = getelementptr inbounds i8, i8* %11001, i64 %11025
  %11028 = bitcast i8* %11027 to <32 x i8>*
  %11029 = load <32 x i8>, <32 x i8>* %11028, align 1
  %11030 = shufflevector <32 x i8> %11029, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %11031 = shufflevector <32 x i8> %11029, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %11032 = shufflevector <32 x i8> %11029, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %11033 = shufflevector <32 x i8> %11029, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %11034 = icmp eq <8 x i8> %11033, zeroinitializer
  %11035 = uitofp <8 x i8> %11033 to <8 x float>
  %11036 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %11035
  %11037 = select <8 x i1> %11034, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %11036
  %11038 = uitofp <8 x i8> %11030 to <8 x float>
  %11039 = fmul <8 x float> %11037, %11038
  %11040 = fptoui <8 x float> %11039 to <8 x i8>
  %11041 = uitofp <8 x i8> %11031 to <8 x float>
  %11042 = fmul <8 x float> %11037, %11041
  %11043 = fptoui <8 x float> %11042 to <8 x i8>
  %11044 = uitofp <8 x i8> %11032 to <8 x float>
  %11045 = fmul <8 x float> %11037, %11044
  %11046 = fptoui <8 x float> %11045 to <8 x i8>
  %11047 = and <8 x i8> %11040, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %11048 = zext <8 x i8> %11047 to <8 x i16>
  %11049 = shl nuw <8 x i16> %11048, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %11050 = and <8 x i8> %11043, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %11051 = zext <8 x i8> %11050 to <8 x i16>
  %11052 = shl nuw nsw <8 x i16> %11051, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %11053 = and <8 x i8> %11046, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %11054 = zext <8 x i8> %11053 to <8 x i16>
  %11055 = lshr <8 x i8> %11033, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %11056 = zext <8 x i8> %11055 to <8 x i16>
  %11057 = or <8 x i16> %11049, %11056
  %11058 = or <8 x i16> %11057, %11052
  %11059 = or <8 x i16> %11058, %11054
  %11060 = bitcast i16* %11026 to <8 x i16>*
  store <8 x i16> %11059, <8 x i16>* %11060, align 2, !alias.scope !547, !noalias !550
  %11061 = add i64 %11024, 8
  %11062 = icmp eq i64 %11061, %11018
  br i1 %11062, label %11063, label %11023, !llvm.loop !552

11063:                                            ; preds = %11023
  %11064 = icmp eq i64 %11004, %11018
  br i1 %11064, label %11112, label %11065

11065:                                            ; preds = %11063, %11006, %11000
  %11066 = phi i8* [ %11001, %11006 ], [ %11001, %11000 ], [ %11020, %11063 ]
  %11067 = phi i16* [ %10838, %11006 ], [ %10838, %11000 ], [ %11021, %11063 ]
  %11068 = phi i32 [ 0, %11006 ], [ 0, %11000 ], [ %11022, %11063 ]
  br label %11069

11069:                                            ; preds = %11065, %11079
  %11070 = phi i8* [ %11108, %11079 ], [ %11066, %11065 ]
  %11071 = phi i16* [ %11109, %11079 ], [ %11067, %11065 ]
  %11072 = phi i32 [ %11110, %11079 ], [ %11068, %11065 ]
  %11073 = getelementptr inbounds i8, i8* %11070, i64 3
  %11074 = load i8, i8* %11073, align 1
  %11075 = icmp eq i8 %11074, 0
  br i1 %11075, label %11079, label %11076

11076:                                            ; preds = %11069
  %11077 = uitofp i8 %11074 to float
  %11078 = fdiv float 2.550000e+02, %11077
  br label %11079

11079:                                            ; preds = %11076, %11069
  %11080 = phi float [ %11078, %11076 ], [ 1.000000e+00, %11069 ]
  %11081 = load i8, i8* %11070, align 1
  %11082 = uitofp i8 %11081 to float
  %11083 = fmul float %11080, %11082
  %11084 = fptoui float %11083 to i8
  %11085 = getelementptr inbounds i8, i8* %11070, i64 1
  %11086 = load i8, i8* %11085, align 1
  %11087 = uitofp i8 %11086 to float
  %11088 = fmul float %11080, %11087
  %11089 = fptoui float %11088 to i8
  %11090 = getelementptr inbounds i8, i8* %11070, i64 2
  %11091 = load i8, i8* %11090, align 1
  %11092 = uitofp i8 %11091 to float
  %11093 = fmul float %11080, %11092
  %11094 = fptoui float %11093 to i8
  %11095 = and i8 %11084, -16
  %11096 = zext i8 %11095 to i16
  %11097 = shl nuw i16 %11096, 8
  %11098 = and i8 %11089, -16
  %11099 = zext i8 %11098 to i16
  %11100 = shl nuw nsw i16 %11099, 4
  %11101 = and i8 %11094, -16
  %11102 = zext i8 %11101 to i16
  %11103 = lshr i8 %11074, 4
  %11104 = zext i8 %11103 to i16
  %11105 = or i16 %11097, %11104
  %11106 = or i16 %11105, %11100
  %11107 = or i16 %11106, %11102
  store i16 %11107, i16* %11071, align 2
  %11108 = getelementptr inbounds i8, i8* %11070, i64 4
  %11109 = getelementptr inbounds i16, i16* %11071, i64 1
  %11110 = add nuw i32 %11072, 1
  %11111 = icmp eq i32 %11110, %10998
  br i1 %11111, label %11112, label %11069, !llvm.loop !553

11112:                                            ; preds = %11079, %11063
  %11113 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10775, align 8
  br label %11114

11114:                                            ; preds = %11112, %10995
  %11115 = phi %"class.blink::IntRect"* [ %11113, %11112 ], [ %10996, %10995 ]
  %11116 = getelementptr inbounds i8, i8* %10839, i64 %10768
  %11117 = getelementptr inbounds i16, i16* %10838, i64 %10772
  %11118 = add nuw nsw i32 %10837, 1
  %11119 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11115, i64 0, i32 1, i32 1
  %11120 = load i32, i32* %11119, align 4
  %11121 = icmp slt i32 %11118, %11120
  %11122 = add i64 %10835, 1
  br i1 %11121, label %10834, label %10819

11123:                                            ; preds = %10821, %10800
  %11124 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11124, align 4
  br label %15491

11125:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %11126
    i32 1, label %11319
    i32 2, label %11516
  ]

11126:                                            ; preds = %11125
  %11127 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11128 = load i32, i32* %11127, align 8
  %11129 = sext i32 %11128 to i64
  %11130 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11131 = load i32, i32* %11130, align 8
  %11132 = sdiv i32 %11131, 2
  %11133 = sext i32 %11132 to i64
  %11134 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11135 = load i8*, i8** %11134, align 8
  %11136 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11137 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11136, align 8
  %11138 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11137, i64 0, i32 0, i32 1
  %11139 = load i32, i32* %11138, align 4
  %11140 = mul nsw i32 %11139, %11128
  %11141 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11142 = load i32, i32* %11141, align 4
  %11143 = add nsw i32 %11140, %11142
  %11144 = sext i32 %11143 to i64
  %11145 = getelementptr inbounds i8, i8* %11135, i64 %11144
  %11146 = icmp slt i32 %11131, 0
  %11147 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11148 = load i32, i32* %11147, align 8
  %11149 = icmp sgt i32 %11148, 1
  %11150 = and i1 %11146, %11149
  br i1 %11150, label %11151, label %11161

11151:                                            ; preds = %11126
  %11152 = add nsw i32 %11148, -1
  %11153 = sext i32 %11152 to i64
  %11154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11155 = load i32, i32* %11154, align 4
  %11156 = sext i32 %11155 to i64
  %11157 = mul nsw i64 %11129, %11153
  %11158 = mul i64 %11157, %11156
  %11159 = sub i64 0, %11158
  %11160 = getelementptr inbounds i8, i8* %11145, i64 %11159
  br label %11163

11161:                                            ; preds = %11126
  %11162 = icmp sgt i32 %11148, 0
  br i1 %11162, label %11163, label %11317

11163:                                            ; preds = %11161, %11151
  %11164 = phi i8* [ %11160, %11151 ], [ %11145, %11161 ]
  %11165 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11166 = bitcast i8** %11165 to i16**
  %11167 = load i16*, i16** %11166, align 8
  %11168 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11169 = bitcast i8** %11168 to float**
  %11170 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11171

11171:                                            ; preds = %11183, %11163
  %11172 = phi i32 [ %11148, %11163 ], [ %11184, %11183 ]
  %11173 = phi %"class.blink::IntRect"* [ %11137, %11163 ], [ %11185, %11183 ]
  %11174 = phi %"class.blink::IntRect"* [ %11137, %11163 ], [ %11186, %11183 ]
  %11175 = phi i32 [ 0, %11163 ], [ %11195, %11183 ]
  %11176 = phi i16* [ %11167, %11163 ], [ %11188, %11183 ]
  %11177 = phi i8* [ %11164, %11163 ], [ %11194, %11183 ]
  %11178 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11174, i64 0, i32 1, i32 1
  %11179 = load i32, i32* %11178, align 4
  %11180 = icmp sgt i32 %11179, 0
  br i1 %11180, label %11197, label %11183

11181:                                            ; preds = %11309
  %11182 = load i32, i32* %11147, align 8
  br label %11183

11183:                                            ; preds = %11181, %11171
  %11184 = phi i32 [ %11172, %11171 ], [ %11182, %11181 ]
  %11185 = phi %"class.blink::IntRect"* [ %11173, %11171 ], [ %11310, %11181 ]
  %11186 = phi %"class.blink::IntRect"* [ %11174, %11171 ], [ %11310, %11181 ]
  %11187 = phi i8* [ %11177, %11171 ], [ %11311, %11181 ]
  %11188 = phi i16* [ %11176, %11171 ], [ %11312, %11181 ]
  %11189 = phi i32 [ %11179, %11171 ], [ %11315, %11181 ]
  %11190 = load i32, i32* %11170, align 4
  %11191 = sub nsw i32 %11190, %11189
  %11192 = sext i32 %11191 to i64
  %11193 = mul nsw i64 %11192, %11129
  %11194 = getelementptr inbounds i8, i8* %11187, i64 %11193
  %11195 = add nuw nsw i32 %11175, 1
  %11196 = icmp slt i32 %11195, %11184
  br i1 %11196, label %11171, label %11317

11197:                                            ; preds = %11171, %11309
  %11198 = phi %"class.blink::IntRect"* [ %11310, %11309 ], [ %11173, %11171 ]
  %11199 = phi %"class.blink::IntRect"* [ %11310, %11309 ], [ %11174, %11171 ]
  %11200 = phi i32 [ %11313, %11309 ], [ 0, %11171 ]
  %11201 = phi i16* [ %11312, %11309 ], [ %11176, %11171 ]
  %11202 = phi i8* [ %11311, %11309 ], [ %11177, %11171 ]
  %11203 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11199, i64 0, i32 1, i32 0
  %11204 = load i32, i32* %11203, align 4
  %11205 = icmp eq i32 %11204, 0
  br i1 %11205, label %11309, label %11206

11206:                                            ; preds = %11197
  %11207 = load float*, float** %11169, align 8
  br label %11208

11208:                                            ; preds = %11208, %11206
  %11209 = phi i32 [ %11232, %11208 ], [ 0, %11206 ]
  %11210 = phi i8* [ %11230, %11208 ], [ %11202, %11206 ]
  %11211 = phi float* [ %11231, %11208 ], [ %11207, %11206 ]
  %11212 = getelementptr inbounds i8, i8* %11210, i64 2
  %11213 = load i8, i8* %11212, align 1
  %11214 = uitofp i8 %11213 to float
  %11215 = fmul float %11214, 0x3F70101020000000
  store float %11215, float* %11211, align 4
  %11216 = getelementptr inbounds i8, i8* %11210, i64 1
  %11217 = load i8, i8* %11216, align 1
  %11218 = uitofp i8 %11217 to float
  %11219 = fmul float %11218, 0x3F70101020000000
  %11220 = getelementptr inbounds float, float* %11211, i64 1
  store float %11219, float* %11220, align 4
  %11221 = load i8, i8* %11210, align 1
  %11222 = uitofp i8 %11221 to float
  %11223 = fmul float %11222, 0x3F70101020000000
  %11224 = getelementptr inbounds float, float* %11211, i64 2
  store float %11223, float* %11224, align 4
  %11225 = getelementptr inbounds i8, i8* %11210, i64 3
  %11226 = load i8, i8* %11225, align 1
  %11227 = uitofp i8 %11226 to float
  %11228 = fmul float %11227, 0x3F70101020000000
  %11229 = getelementptr inbounds float, float* %11211, i64 3
  store float %11228, float* %11229, align 4
  %11230 = getelementptr inbounds i8, i8* %11210, i64 4
  %11231 = getelementptr inbounds float, float* %11211, i64 4
  %11232 = add nuw i32 %11209, 1
  %11233 = icmp eq i32 %11232, %11204
  br i1 %11233, label %11234, label %11208

11234:                                            ; preds = %11208
  %11235 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11136, align 8
  %11236 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11235, i64 0, i32 1, i32 0
  %11237 = load i32, i32* %11236, align 4
  %11238 = icmp eq i32 %11237, 0
  br i1 %11238, label %11309, label %11239

11239:                                            ; preds = %11234
  %11240 = load float*, float** %11169, align 8
  br label %11241

11241:                                            ; preds = %11241, %11239
  %11242 = phi i32 [ %11305, %11241 ], [ 0, %11239 ]
  %11243 = phi float* [ %11303, %11241 ], [ %11240, %11239 ]
  %11244 = phi i16* [ %11304, %11241 ], [ %11201, %11239 ]
  %11245 = bitcast float* %11243 to i32*
  %11246 = load i32, i32* %11245, align 4
  %11247 = lshr i32 %11246, 23
  %11248 = zext i32 %11247 to i64
  %11249 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11248
  %11250 = load i16, i16* %11249, align 2
  %11251 = and i32 %11246, 8388607
  %11252 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11248
  %11253 = load i8, i8* %11252, align 1
  %11254 = zext i8 %11253 to i32
  %11255 = lshr i32 %11251, %11254
  %11256 = trunc i32 %11255 to i16
  %11257 = add i16 %11250, %11256
  store i16 %11257, i16* %11244, align 2
  %11258 = getelementptr inbounds float, float* %11243, i64 1
  %11259 = bitcast float* %11258 to i32*
  %11260 = load i32, i32* %11259, align 4
  %11261 = lshr i32 %11260, 23
  %11262 = zext i32 %11261 to i64
  %11263 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11262
  %11264 = load i16, i16* %11263, align 2
  %11265 = and i32 %11260, 8388607
  %11266 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11262
  %11267 = load i8, i8* %11266, align 1
  %11268 = zext i8 %11267 to i32
  %11269 = lshr i32 %11265, %11268
  %11270 = trunc i32 %11269 to i16
  %11271 = add i16 %11264, %11270
  %11272 = getelementptr inbounds i16, i16* %11244, i64 1
  store i16 %11271, i16* %11272, align 2
  %11273 = getelementptr inbounds float, float* %11243, i64 2
  %11274 = bitcast float* %11273 to i32*
  %11275 = load i32, i32* %11274, align 4
  %11276 = lshr i32 %11275, 23
  %11277 = zext i32 %11276 to i64
  %11278 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11277
  %11279 = load i16, i16* %11278, align 2
  %11280 = and i32 %11275, 8388607
  %11281 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11277
  %11282 = load i8, i8* %11281, align 1
  %11283 = zext i8 %11282 to i32
  %11284 = lshr i32 %11280, %11283
  %11285 = trunc i32 %11284 to i16
  %11286 = add i16 %11279, %11285
  %11287 = getelementptr inbounds i16, i16* %11244, i64 2
  store i16 %11286, i16* %11287, align 2
  %11288 = getelementptr inbounds float, float* %11243, i64 3
  %11289 = bitcast float* %11288 to i32*
  %11290 = load i32, i32* %11289, align 4
  %11291 = lshr i32 %11290, 23
  %11292 = zext i32 %11291 to i64
  %11293 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11292
  %11294 = load i16, i16* %11293, align 2
  %11295 = and i32 %11290, 8388607
  %11296 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11292
  %11297 = load i8, i8* %11296, align 1
  %11298 = zext i8 %11297 to i32
  %11299 = lshr i32 %11295, %11298
  %11300 = trunc i32 %11299 to i16
  %11301 = add i16 %11294, %11300
  %11302 = getelementptr inbounds i16, i16* %11244, i64 3
  store i16 %11301, i16* %11302, align 2
  %11303 = getelementptr inbounds float, float* %11243, i64 4
  %11304 = getelementptr inbounds i16, i16* %11244, i64 4
  %11305 = add nuw i32 %11242, 1
  %11306 = icmp eq i32 %11305, %11237
  br i1 %11306, label %11307, label %11241

11307:                                            ; preds = %11241
  %11308 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11136, align 8
  br label %11309

11309:                                            ; preds = %11307, %11234, %11197
  %11310 = phi %"class.blink::IntRect"* [ %11308, %11307 ], [ %11235, %11234 ], [ %11198, %11197 ]
  %11311 = getelementptr inbounds i8, i8* %11202, i64 %11129
  %11312 = getelementptr inbounds i16, i16* %11201, i64 %11133
  %11313 = add nuw nsw i32 %11200, 1
  %11314 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11310, i64 0, i32 1, i32 1
  %11315 = load i32, i32* %11314, align 4
  %11316 = icmp slt i32 %11313, %11315
  br i1 %11316, label %11197, label %11181

11317:                                            ; preds = %11183, %11161
  %11318 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11318, align 4
  br label %15491

11319:                                            ; preds = %11125
  %11320 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11321 = load i32, i32* %11320, align 8
  %11322 = sext i32 %11321 to i64
  %11323 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11324 = load i32, i32* %11323, align 8
  %11325 = sdiv i32 %11324, 2
  %11326 = sext i32 %11325 to i64
  %11327 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11328 = load i8*, i8** %11327, align 8
  %11329 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11330 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11329, align 8
  %11331 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11330, i64 0, i32 0, i32 1
  %11332 = load i32, i32* %11331, align 4
  %11333 = mul nsw i32 %11332, %11321
  %11334 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11335 = load i32, i32* %11334, align 4
  %11336 = add nsw i32 %11333, %11335
  %11337 = sext i32 %11336 to i64
  %11338 = getelementptr inbounds i8, i8* %11328, i64 %11337
  %11339 = icmp slt i32 %11324, 0
  %11340 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11341 = load i32, i32* %11340, align 8
  %11342 = icmp sgt i32 %11341, 1
  %11343 = and i1 %11339, %11342
  br i1 %11343, label %11344, label %11354

11344:                                            ; preds = %11319
  %11345 = add nsw i32 %11341, -1
  %11346 = sext i32 %11345 to i64
  %11347 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11348 = load i32, i32* %11347, align 4
  %11349 = sext i32 %11348 to i64
  %11350 = mul nsw i64 %11322, %11346
  %11351 = mul i64 %11350, %11349
  %11352 = sub i64 0, %11351
  %11353 = getelementptr inbounds i8, i8* %11338, i64 %11352
  br label %11356

11354:                                            ; preds = %11319
  %11355 = icmp sgt i32 %11341, 0
  br i1 %11355, label %11356, label %11514

11356:                                            ; preds = %11354, %11344
  %11357 = phi i8* [ %11353, %11344 ], [ %11338, %11354 ]
  %11358 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11359 = bitcast i8** %11358 to i16**
  %11360 = load i16*, i16** %11359, align 8
  %11361 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11362 = bitcast i8** %11361 to float**
  %11363 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11364

11364:                                            ; preds = %11376, %11356
  %11365 = phi i32 [ %11341, %11356 ], [ %11377, %11376 ]
  %11366 = phi %"class.blink::IntRect"* [ %11330, %11356 ], [ %11378, %11376 ]
  %11367 = phi %"class.blink::IntRect"* [ %11330, %11356 ], [ %11379, %11376 ]
  %11368 = phi i32 [ 0, %11356 ], [ %11388, %11376 ]
  %11369 = phi i16* [ %11360, %11356 ], [ %11381, %11376 ]
  %11370 = phi i8* [ %11357, %11356 ], [ %11387, %11376 ]
  %11371 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11367, i64 0, i32 1, i32 1
  %11372 = load i32, i32* %11371, align 4
  %11373 = icmp sgt i32 %11372, 0
  br i1 %11373, label %11390, label %11376

11374:                                            ; preds = %11506
  %11375 = load i32, i32* %11340, align 8
  br label %11376

11376:                                            ; preds = %11374, %11364
  %11377 = phi i32 [ %11365, %11364 ], [ %11375, %11374 ]
  %11378 = phi %"class.blink::IntRect"* [ %11366, %11364 ], [ %11507, %11374 ]
  %11379 = phi %"class.blink::IntRect"* [ %11367, %11364 ], [ %11507, %11374 ]
  %11380 = phi i8* [ %11370, %11364 ], [ %11508, %11374 ]
  %11381 = phi i16* [ %11369, %11364 ], [ %11509, %11374 ]
  %11382 = phi i32 [ %11372, %11364 ], [ %11512, %11374 ]
  %11383 = load i32, i32* %11363, align 4
  %11384 = sub nsw i32 %11383, %11382
  %11385 = sext i32 %11384 to i64
  %11386 = mul nsw i64 %11385, %11322
  %11387 = getelementptr inbounds i8, i8* %11380, i64 %11386
  %11388 = add nuw nsw i32 %11368, 1
  %11389 = icmp slt i32 %11388, %11377
  br i1 %11389, label %11364, label %11514

11390:                                            ; preds = %11364, %11506
  %11391 = phi %"class.blink::IntRect"* [ %11507, %11506 ], [ %11366, %11364 ]
  %11392 = phi %"class.blink::IntRect"* [ %11507, %11506 ], [ %11367, %11364 ]
  %11393 = phi i32 [ %11510, %11506 ], [ 0, %11364 ]
  %11394 = phi i16* [ %11509, %11506 ], [ %11369, %11364 ]
  %11395 = phi i8* [ %11508, %11506 ], [ %11370, %11364 ]
  %11396 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11392, i64 0, i32 1, i32 0
  %11397 = load i32, i32* %11396, align 4
  %11398 = icmp eq i32 %11397, 0
  br i1 %11398, label %11506, label %11399

11399:                                            ; preds = %11390
  %11400 = load float*, float** %11362, align 8
  br label %11401

11401:                                            ; preds = %11401, %11399
  %11402 = phi i32 [ %11425, %11401 ], [ 0, %11399 ]
  %11403 = phi i8* [ %11423, %11401 ], [ %11395, %11399 ]
  %11404 = phi float* [ %11424, %11401 ], [ %11400, %11399 ]
  %11405 = getelementptr inbounds i8, i8* %11403, i64 2
  %11406 = load i8, i8* %11405, align 1
  %11407 = uitofp i8 %11406 to float
  %11408 = fmul float %11407, 0x3F70101020000000
  store float %11408, float* %11404, align 4
  %11409 = getelementptr inbounds i8, i8* %11403, i64 1
  %11410 = load i8, i8* %11409, align 1
  %11411 = uitofp i8 %11410 to float
  %11412 = fmul float %11411, 0x3F70101020000000
  %11413 = getelementptr inbounds float, float* %11404, i64 1
  store float %11412, float* %11413, align 4
  %11414 = load i8, i8* %11403, align 1
  %11415 = uitofp i8 %11414 to float
  %11416 = fmul float %11415, 0x3F70101020000000
  %11417 = getelementptr inbounds float, float* %11404, i64 2
  store float %11416, float* %11417, align 4
  %11418 = getelementptr inbounds i8, i8* %11403, i64 3
  %11419 = load i8, i8* %11418, align 1
  %11420 = uitofp i8 %11419 to float
  %11421 = fmul float %11420, 0x3F70101020000000
  %11422 = getelementptr inbounds float, float* %11404, i64 3
  store float %11421, float* %11422, align 4
  %11423 = getelementptr inbounds i8, i8* %11403, i64 4
  %11424 = getelementptr inbounds float, float* %11404, i64 4
  %11425 = add nuw i32 %11402, 1
  %11426 = icmp eq i32 %11425, %11397
  br i1 %11426, label %11427, label %11401

11427:                                            ; preds = %11401
  %11428 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11329, align 8
  %11429 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11428, i64 0, i32 1, i32 0
  %11430 = load i32, i32* %11429, align 4
  %11431 = icmp eq i32 %11430, 0
  br i1 %11431, label %11506, label %11432

11432:                                            ; preds = %11427
  %11433 = load float*, float** %11362, align 8
  br label %11434

11434:                                            ; preds = %11434, %11432
  %11435 = phi float* [ %11500, %11434 ], [ %11433, %11432 ]
  %11436 = phi i32 [ %11502, %11434 ], [ 0, %11432 ]
  %11437 = phi i16* [ %11501, %11434 ], [ %11394, %11432 ]
  %11438 = getelementptr inbounds float, float* %11435, i64 3
  %11439 = load float, float* %11438, align 4
  %11440 = load float, float* %11435, align 4
  %11441 = fmul float %11439, %11440
  %11442 = bitcast float %11441 to i32
  %11443 = lshr i32 %11442, 23
  %11444 = zext i32 %11443 to i64
  %11445 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11444
  %11446 = load i16, i16* %11445, align 2
  %11447 = and i32 %11442, 8388607
  %11448 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11444
  %11449 = load i8, i8* %11448, align 1
  %11450 = zext i8 %11449 to i32
  %11451 = lshr i32 %11447, %11450
  %11452 = trunc i32 %11451 to i16
  %11453 = add i16 %11446, %11452
  store i16 %11453, i16* %11437, align 2
  %11454 = getelementptr inbounds float, float* %11435, i64 1
  %11455 = load float, float* %11454, align 4
  %11456 = fmul float %11439, %11455
  %11457 = bitcast float %11456 to i32
  %11458 = lshr i32 %11457, 23
  %11459 = zext i32 %11458 to i64
  %11460 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11459
  %11461 = load i16, i16* %11460, align 2
  %11462 = and i32 %11457, 8388607
  %11463 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11459
  %11464 = load i8, i8* %11463, align 1
  %11465 = zext i8 %11464 to i32
  %11466 = lshr i32 %11462, %11465
  %11467 = trunc i32 %11466 to i16
  %11468 = add i16 %11461, %11467
  %11469 = getelementptr inbounds i16, i16* %11437, i64 1
  store i16 %11468, i16* %11469, align 2
  %11470 = getelementptr inbounds float, float* %11435, i64 2
  %11471 = load float, float* %11470, align 4
  %11472 = fmul float %11439, %11471
  %11473 = bitcast float %11472 to i32
  %11474 = lshr i32 %11473, 23
  %11475 = zext i32 %11474 to i64
  %11476 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11475
  %11477 = load i16, i16* %11476, align 2
  %11478 = and i32 %11473, 8388607
  %11479 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11475
  %11480 = load i8, i8* %11479, align 1
  %11481 = zext i8 %11480 to i32
  %11482 = lshr i32 %11478, %11481
  %11483 = trunc i32 %11482 to i16
  %11484 = add i16 %11477, %11483
  %11485 = getelementptr inbounds i16, i16* %11437, i64 2
  store i16 %11484, i16* %11485, align 2
  %11486 = bitcast float* %11438 to i32*
  %11487 = load i32, i32* %11486, align 4
  %11488 = lshr i32 %11487, 23
  %11489 = zext i32 %11488 to i64
  %11490 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11489
  %11491 = load i16, i16* %11490, align 2
  %11492 = and i32 %11487, 8388607
  %11493 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11489
  %11494 = load i8, i8* %11493, align 1
  %11495 = zext i8 %11494 to i32
  %11496 = lshr i32 %11492, %11495
  %11497 = trunc i32 %11496 to i16
  %11498 = add i16 %11491, %11497
  %11499 = getelementptr inbounds i16, i16* %11437, i64 3
  store i16 %11498, i16* %11499, align 2
  %11500 = getelementptr inbounds float, float* %11435, i64 4
  %11501 = getelementptr inbounds i16, i16* %11437, i64 4
  %11502 = add nuw i32 %11436, 1
  %11503 = icmp eq i32 %11502, %11430
  br i1 %11503, label %11504, label %11434

11504:                                            ; preds = %11434
  %11505 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11329, align 8
  br label %11506

11506:                                            ; preds = %11504, %11427, %11390
  %11507 = phi %"class.blink::IntRect"* [ %11505, %11504 ], [ %11428, %11427 ], [ %11391, %11390 ]
  %11508 = getelementptr inbounds i8, i8* %11395, i64 %11322
  %11509 = getelementptr inbounds i16, i16* %11394, i64 %11326
  %11510 = add nuw nsw i32 %11393, 1
  %11511 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11507, i64 0, i32 1, i32 1
  %11512 = load i32, i32* %11511, align 4
  %11513 = icmp slt i32 %11510, %11512
  br i1 %11513, label %11390, label %11374

11514:                                            ; preds = %11376, %11354
  %11515 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11515, align 4
  br label %15491

11516:                                            ; preds = %11125
  %11517 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11518 = load i32, i32* %11517, align 8
  %11519 = sext i32 %11518 to i64
  %11520 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11521 = load i32, i32* %11520, align 8
  %11522 = sdiv i32 %11521, 2
  %11523 = sext i32 %11522 to i64
  %11524 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11525 = load i8*, i8** %11524, align 8
  %11526 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11527 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11526, align 8
  %11528 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11527, i64 0, i32 0, i32 1
  %11529 = load i32, i32* %11528, align 4
  %11530 = mul nsw i32 %11529, %11518
  %11531 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11532 = load i32, i32* %11531, align 4
  %11533 = add nsw i32 %11530, %11532
  %11534 = sext i32 %11533 to i64
  %11535 = getelementptr inbounds i8, i8* %11525, i64 %11534
  %11536 = icmp slt i32 %11521, 0
  %11537 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11538 = load i32, i32* %11537, align 8
  %11539 = icmp sgt i32 %11538, 1
  %11540 = and i1 %11536, %11539
  br i1 %11540, label %11541, label %11551

11541:                                            ; preds = %11516
  %11542 = add nsw i32 %11538, -1
  %11543 = sext i32 %11542 to i64
  %11544 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11545 = load i32, i32* %11544, align 4
  %11546 = sext i32 %11545 to i64
  %11547 = mul nsw i64 %11519, %11543
  %11548 = mul i64 %11547, %11546
  %11549 = sub i64 0, %11548
  %11550 = getelementptr inbounds i8, i8* %11535, i64 %11549
  br label %11553

11551:                                            ; preds = %11516
  %11552 = icmp sgt i32 %11538, 0
  br i1 %11552, label %11553, label %11714

11553:                                            ; preds = %11551, %11541
  %11554 = phi i8* [ %11550, %11541 ], [ %11535, %11551 ]
  %11555 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11556 = bitcast i8** %11555 to i16**
  %11557 = load i16*, i16** %11556, align 8
  %11558 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11559 = bitcast i8** %11558 to float**
  %11560 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11561

11561:                                            ; preds = %11573, %11553
  %11562 = phi i32 [ %11538, %11553 ], [ %11574, %11573 ]
  %11563 = phi %"class.blink::IntRect"* [ %11527, %11553 ], [ %11575, %11573 ]
  %11564 = phi %"class.blink::IntRect"* [ %11527, %11553 ], [ %11576, %11573 ]
  %11565 = phi i32 [ 0, %11553 ], [ %11585, %11573 ]
  %11566 = phi i16* [ %11557, %11553 ], [ %11578, %11573 ]
  %11567 = phi i8* [ %11554, %11553 ], [ %11584, %11573 ]
  %11568 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11564, i64 0, i32 1, i32 1
  %11569 = load i32, i32* %11568, align 4
  %11570 = icmp sgt i32 %11569, 0
  br i1 %11570, label %11587, label %11573

11571:                                            ; preds = %11706
  %11572 = load i32, i32* %11537, align 8
  br label %11573

11573:                                            ; preds = %11571, %11561
  %11574 = phi i32 [ %11562, %11561 ], [ %11572, %11571 ]
  %11575 = phi %"class.blink::IntRect"* [ %11563, %11561 ], [ %11707, %11571 ]
  %11576 = phi %"class.blink::IntRect"* [ %11564, %11561 ], [ %11707, %11571 ]
  %11577 = phi i8* [ %11567, %11561 ], [ %11708, %11571 ]
  %11578 = phi i16* [ %11566, %11561 ], [ %11709, %11571 ]
  %11579 = phi i32 [ %11569, %11561 ], [ %11712, %11571 ]
  %11580 = load i32, i32* %11560, align 4
  %11581 = sub nsw i32 %11580, %11579
  %11582 = sext i32 %11581 to i64
  %11583 = mul nsw i64 %11582, %11519
  %11584 = getelementptr inbounds i8, i8* %11577, i64 %11583
  %11585 = add nuw nsw i32 %11565, 1
  %11586 = icmp slt i32 %11585, %11574
  br i1 %11586, label %11561, label %11714

11587:                                            ; preds = %11561, %11706
  %11588 = phi %"class.blink::IntRect"* [ %11707, %11706 ], [ %11563, %11561 ]
  %11589 = phi %"class.blink::IntRect"* [ %11707, %11706 ], [ %11564, %11561 ]
  %11590 = phi i32 [ %11710, %11706 ], [ 0, %11561 ]
  %11591 = phi i16* [ %11709, %11706 ], [ %11566, %11561 ]
  %11592 = phi i8* [ %11708, %11706 ], [ %11567, %11561 ]
  %11593 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11589, i64 0, i32 1, i32 0
  %11594 = load i32, i32* %11593, align 4
  %11595 = icmp eq i32 %11594, 0
  br i1 %11595, label %11706, label %11596

11596:                                            ; preds = %11587
  %11597 = load float*, float** %11559, align 8
  br label %11598

11598:                                            ; preds = %11598, %11596
  %11599 = phi i32 [ %11622, %11598 ], [ 0, %11596 ]
  %11600 = phi i8* [ %11620, %11598 ], [ %11592, %11596 ]
  %11601 = phi float* [ %11621, %11598 ], [ %11597, %11596 ]
  %11602 = getelementptr inbounds i8, i8* %11600, i64 2
  %11603 = load i8, i8* %11602, align 1
  %11604 = uitofp i8 %11603 to float
  %11605 = fmul float %11604, 0x3F70101020000000
  store float %11605, float* %11601, align 4
  %11606 = getelementptr inbounds i8, i8* %11600, i64 1
  %11607 = load i8, i8* %11606, align 1
  %11608 = uitofp i8 %11607 to float
  %11609 = fmul float %11608, 0x3F70101020000000
  %11610 = getelementptr inbounds float, float* %11601, i64 1
  store float %11609, float* %11610, align 4
  %11611 = load i8, i8* %11600, align 1
  %11612 = uitofp i8 %11611 to float
  %11613 = fmul float %11612, 0x3F70101020000000
  %11614 = getelementptr inbounds float, float* %11601, i64 2
  store float %11613, float* %11614, align 4
  %11615 = getelementptr inbounds i8, i8* %11600, i64 3
  %11616 = load i8, i8* %11615, align 1
  %11617 = uitofp i8 %11616 to float
  %11618 = fmul float %11617, 0x3F70101020000000
  %11619 = getelementptr inbounds float, float* %11601, i64 3
  store float %11618, float* %11619, align 4
  %11620 = getelementptr inbounds i8, i8* %11600, i64 4
  %11621 = getelementptr inbounds float, float* %11601, i64 4
  %11622 = add nuw i32 %11599, 1
  %11623 = icmp eq i32 %11622, %11594
  br i1 %11623, label %11624, label %11598

11624:                                            ; preds = %11598
  %11625 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11526, align 8
  %11626 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11625, i64 0, i32 1, i32 0
  %11627 = load i32, i32* %11626, align 4
  %11628 = icmp eq i32 %11627, 0
  br i1 %11628, label %11706, label %11629

11629:                                            ; preds = %11624
  %11630 = load float*, float** %11559, align 8
  br label %11631

11631:                                            ; preds = %11631, %11629
  %11632 = phi i32 [ %11702, %11631 ], [ 0, %11629 ]
  %11633 = phi float* [ %11700, %11631 ], [ %11630, %11629 ]
  %11634 = phi i16* [ %11701, %11631 ], [ %11591, %11629 ]
  %11635 = getelementptr inbounds float, float* %11633, i64 3
  %11636 = load float, float* %11635, align 4
  %11637 = fcmp une float %11636, 0.000000e+00
  %11638 = fdiv float 1.000000e+00, %11636
  %11639 = select i1 %11637, float %11638, float 1.000000e+00
  %11640 = load float, float* %11633, align 4
  %11641 = fmul float %11640, %11639
  %11642 = bitcast float %11641 to i32
  %11643 = lshr i32 %11642, 23
  %11644 = zext i32 %11643 to i64
  %11645 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11644
  %11646 = load i16, i16* %11645, align 2
  %11647 = and i32 %11642, 8388607
  %11648 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11644
  %11649 = load i8, i8* %11648, align 1
  %11650 = zext i8 %11649 to i32
  %11651 = lshr i32 %11647, %11650
  %11652 = trunc i32 %11651 to i16
  %11653 = add i16 %11646, %11652
  store i16 %11653, i16* %11634, align 2
  %11654 = getelementptr inbounds float, float* %11633, i64 1
  %11655 = load float, float* %11654, align 4
  %11656 = fmul float %11639, %11655
  %11657 = bitcast float %11656 to i32
  %11658 = lshr i32 %11657, 23
  %11659 = zext i32 %11658 to i64
  %11660 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11659
  %11661 = load i16, i16* %11660, align 2
  %11662 = and i32 %11657, 8388607
  %11663 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11659
  %11664 = load i8, i8* %11663, align 1
  %11665 = zext i8 %11664 to i32
  %11666 = lshr i32 %11662, %11665
  %11667 = trunc i32 %11666 to i16
  %11668 = add i16 %11661, %11667
  %11669 = getelementptr inbounds i16, i16* %11634, i64 1
  store i16 %11668, i16* %11669, align 2
  %11670 = getelementptr inbounds float, float* %11633, i64 2
  %11671 = load float, float* %11670, align 4
  %11672 = fmul float %11639, %11671
  %11673 = bitcast float %11672 to i32
  %11674 = lshr i32 %11673, 23
  %11675 = zext i32 %11674 to i64
  %11676 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11675
  %11677 = load i16, i16* %11676, align 2
  %11678 = and i32 %11673, 8388607
  %11679 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11675
  %11680 = load i8, i8* %11679, align 1
  %11681 = zext i8 %11680 to i32
  %11682 = lshr i32 %11678, %11681
  %11683 = trunc i32 %11682 to i16
  %11684 = add i16 %11677, %11683
  %11685 = getelementptr inbounds i16, i16* %11634, i64 2
  store i16 %11684, i16* %11685, align 2
  %11686 = bitcast float* %11635 to i32*
  %11687 = load i32, i32* %11686, align 4
  %11688 = lshr i32 %11687, 23
  %11689 = zext i32 %11688 to i64
  %11690 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %11689
  %11691 = load i16, i16* %11690, align 2
  %11692 = and i32 %11687, 8388607
  %11693 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %11689
  %11694 = load i8, i8* %11693, align 1
  %11695 = zext i8 %11694 to i32
  %11696 = lshr i32 %11692, %11695
  %11697 = trunc i32 %11696 to i16
  %11698 = add i16 %11691, %11697
  %11699 = getelementptr inbounds i16, i16* %11634, i64 3
  store i16 %11698, i16* %11699, align 2
  %11700 = getelementptr inbounds float, float* %11633, i64 4
  %11701 = getelementptr inbounds i16, i16* %11634, i64 4
  %11702 = add nuw i32 %11632, 1
  %11703 = icmp eq i32 %11702, %11627
  br i1 %11703, label %11704, label %11631

11704:                                            ; preds = %11631
  %11705 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11526, align 8
  br label %11706

11706:                                            ; preds = %11704, %11624, %11587
  %11707 = phi %"class.blink::IntRect"* [ %11705, %11704 ], [ %11625, %11624 ], [ %11588, %11587 ]
  %11708 = getelementptr inbounds i8, i8* %11592, i64 %11519
  %11709 = getelementptr inbounds i16, i16* %11591, i64 %11523
  %11710 = add nuw nsw i32 %11590, 1
  %11711 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11707, i64 0, i32 1, i32 1
  %11712 = load i32, i32* %11711, align 4
  %11713 = icmp slt i32 %11710, %11712
  br i1 %11713, label %11587, label %11571

11714:                                            ; preds = %11573, %11551
  %11715 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11715, align 4
  br label %15491

11716:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %11717
    i32 1, label %11833
    i32 2, label %12027
  ]

11717:                                            ; preds = %11716
  %11718 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11719 = load i32, i32* %11718, align 8
  %11720 = sext i32 %11719 to i64
  %11721 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11722 = load i32, i32* %11721, align 8
  %11723 = sdiv i32 %11722, 4
  %11724 = sext i32 %11723 to i64
  %11725 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11726 = load i8*, i8** %11725, align 8
  %11727 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11728 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11727, align 8
  %11729 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11728, i64 0, i32 0, i32 1
  %11730 = load i32, i32* %11729, align 4
  %11731 = mul nsw i32 %11730, %11719
  %11732 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11733 = load i32, i32* %11732, align 4
  %11734 = add nsw i32 %11731, %11733
  %11735 = sext i32 %11734 to i64
  %11736 = getelementptr inbounds i8, i8* %11726, i64 %11735
  %11737 = icmp slt i32 %11722, 0
  %11738 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11739 = load i32, i32* %11738, align 8
  %11740 = icmp sgt i32 %11739, 1
  %11741 = and i1 %11737, %11740
  br i1 %11741, label %11742, label %11752

11742:                                            ; preds = %11717
  %11743 = add nsw i32 %11739, -1
  %11744 = sext i32 %11743 to i64
  %11745 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11746 = load i32, i32* %11745, align 4
  %11747 = sext i32 %11746 to i64
  %11748 = mul nsw i64 %11720, %11744
  %11749 = mul i64 %11748, %11747
  %11750 = sub i64 0, %11749
  %11751 = getelementptr inbounds i8, i8* %11736, i64 %11750
  br label %11754

11752:                                            ; preds = %11717
  %11753 = icmp sgt i32 %11739, 0
  br i1 %11753, label %11754, label %11831

11754:                                            ; preds = %11752, %11742
  %11755 = phi i8* [ %11751, %11742 ], [ %11736, %11752 ]
  %11756 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11757 = bitcast i8** %11756 to float**
  %11758 = load float*, float** %11757, align 8
  %11759 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11760

11760:                                            ; preds = %11772, %11754
  %11761 = phi i32 [ %11739, %11754 ], [ %11773, %11772 ]
  %11762 = phi %"class.blink::IntRect"* [ %11728, %11754 ], [ %11774, %11772 ]
  %11763 = phi %"class.blink::IntRect"* [ %11728, %11754 ], [ %11775, %11772 ]
  %11764 = phi i32 [ 0, %11754 ], [ %11784, %11772 ]
  %11765 = phi float* [ %11758, %11754 ], [ %11777, %11772 ]
  %11766 = phi i8* [ %11755, %11754 ], [ %11783, %11772 ]
  %11767 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11763, i64 0, i32 1, i32 1
  %11768 = load i32, i32* %11767, align 4
  %11769 = icmp sgt i32 %11768, 0
  br i1 %11769, label %11786, label %11772

11770:                                            ; preds = %11823
  %11771 = load i32, i32* %11738, align 8
  br label %11772

11772:                                            ; preds = %11770, %11760
  %11773 = phi i32 [ %11761, %11760 ], [ %11771, %11770 ]
  %11774 = phi %"class.blink::IntRect"* [ %11762, %11760 ], [ %11824, %11770 ]
  %11775 = phi %"class.blink::IntRect"* [ %11763, %11760 ], [ %11824, %11770 ]
  %11776 = phi i8* [ %11766, %11760 ], [ %11825, %11770 ]
  %11777 = phi float* [ %11765, %11760 ], [ %11826, %11770 ]
  %11778 = phi i32 [ %11768, %11760 ], [ %11829, %11770 ]
  %11779 = load i32, i32* %11759, align 4
  %11780 = sub nsw i32 %11779, %11778
  %11781 = sext i32 %11780 to i64
  %11782 = mul nsw i64 %11781, %11720
  %11783 = getelementptr inbounds i8, i8* %11776, i64 %11782
  %11784 = add nuw nsw i32 %11764, 1
  %11785 = icmp slt i32 %11784, %11773
  br i1 %11785, label %11760, label %11831

11786:                                            ; preds = %11760, %11823
  %11787 = phi %"class.blink::IntRect"* [ %11824, %11823 ], [ %11762, %11760 ]
  %11788 = phi %"class.blink::IntRect"* [ %11824, %11823 ], [ %11763, %11760 ]
  %11789 = phi i32 [ %11827, %11823 ], [ 0, %11760 ]
  %11790 = phi float* [ %11826, %11823 ], [ %11765, %11760 ]
  %11791 = phi i8* [ %11825, %11823 ], [ %11766, %11760 ]
  %11792 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11788, i64 0, i32 1, i32 0
  %11793 = load i32, i32* %11792, align 4
  %11794 = icmp eq i32 %11793, 0
  br i1 %11794, label %11823, label %11795

11795:                                            ; preds = %11786, %11795
  %11796 = phi i32 [ %11819, %11795 ], [ 0, %11786 ]
  %11797 = phi i8* [ %11817, %11795 ], [ %11791, %11786 ]
  %11798 = phi float* [ %11818, %11795 ], [ %11790, %11786 ]
  %11799 = getelementptr inbounds i8, i8* %11797, i64 2
  %11800 = load i8, i8* %11799, align 1
  %11801 = uitofp i8 %11800 to float
  %11802 = fmul float %11801, 0x3F70101020000000
  store float %11802, float* %11798, align 4
  %11803 = getelementptr inbounds i8, i8* %11797, i64 1
  %11804 = load i8, i8* %11803, align 1
  %11805 = uitofp i8 %11804 to float
  %11806 = fmul float %11805, 0x3F70101020000000
  %11807 = getelementptr inbounds float, float* %11798, i64 1
  store float %11806, float* %11807, align 4
  %11808 = load i8, i8* %11797, align 1
  %11809 = uitofp i8 %11808 to float
  %11810 = fmul float %11809, 0x3F70101020000000
  %11811 = getelementptr inbounds float, float* %11798, i64 2
  store float %11810, float* %11811, align 4
  %11812 = getelementptr inbounds i8, i8* %11797, i64 3
  %11813 = load i8, i8* %11812, align 1
  %11814 = uitofp i8 %11813 to float
  %11815 = fmul float %11814, 0x3F70101020000000
  %11816 = getelementptr inbounds float, float* %11798, i64 3
  store float %11815, float* %11816, align 4
  %11817 = getelementptr inbounds i8, i8* %11797, i64 4
  %11818 = getelementptr inbounds float, float* %11798, i64 4
  %11819 = add nuw i32 %11796, 1
  %11820 = icmp eq i32 %11819, %11793
  br i1 %11820, label %11821, label %11795

11821:                                            ; preds = %11795
  %11822 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11727, align 8
  br label %11823

11823:                                            ; preds = %11821, %11786
  %11824 = phi %"class.blink::IntRect"* [ %11822, %11821 ], [ %11787, %11786 ]
  %11825 = getelementptr inbounds i8, i8* %11791, i64 %11720
  %11826 = getelementptr inbounds float, float* %11790, i64 %11724
  %11827 = add nuw nsw i32 %11789, 1
  %11828 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11824, i64 0, i32 1, i32 1
  %11829 = load i32, i32* %11828, align 4
  %11830 = icmp slt i32 %11827, %11829
  br i1 %11830, label %11786, label %11770

11831:                                            ; preds = %11772, %11752
  %11832 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11832, align 4
  br label %15491

11833:                                            ; preds = %11716
  %11834 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11835 = load i32, i32* %11834, align 8
  %11836 = sext i32 %11835 to i64
  %11837 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11838 = load i32, i32* %11837, align 8
  %11839 = sdiv i32 %11838, 4
  %11840 = sext i32 %11839 to i64
  %11841 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11842 = load i8*, i8** %11841, align 8
  %11843 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11844 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11843, align 8
  %11845 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11844, i64 0, i32 0, i32 1
  %11846 = load i32, i32* %11845, align 4
  %11847 = mul nsw i32 %11846, %11835
  %11848 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11849 = load i32, i32* %11848, align 4
  %11850 = add nsw i32 %11847, %11849
  %11851 = sext i32 %11850 to i64
  %11852 = getelementptr inbounds i8, i8* %11842, i64 %11851
  %11853 = icmp slt i32 %11838, 0
  %11854 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11855 = load i32, i32* %11854, align 8
  %11856 = icmp sgt i32 %11855, 1
  %11857 = and i1 %11853, %11856
  br i1 %11857, label %11858, label %11868

11858:                                            ; preds = %11833
  %11859 = add nsw i32 %11855, -1
  %11860 = sext i32 %11859 to i64
  %11861 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11862 = load i32, i32* %11861, align 4
  %11863 = sext i32 %11862 to i64
  %11864 = mul nsw i64 %11836, %11860
  %11865 = mul i64 %11864, %11863
  %11866 = sub i64 0, %11865
  %11867 = getelementptr inbounds i8, i8* %11852, i64 %11866
  br label %11870

11868:                                            ; preds = %11833
  %11869 = icmp sgt i32 %11855, 0
  br i1 %11869, label %11870, label %12025

11870:                                            ; preds = %11868, %11858
  %11871 = phi i8* [ %11867, %11858 ], [ %11852, %11868 ]
  %11872 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11873 = bitcast i8** %11872 to float**
  %11874 = load float*, float** %11873, align 8
  %11875 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11876 = bitcast i8** %11875 to float**
  %11877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11878

11878:                                            ; preds = %11890, %11870
  %11879 = phi i32 [ %11855, %11870 ], [ %11891, %11890 ]
  %11880 = phi %"class.blink::IntRect"* [ %11844, %11870 ], [ %11892, %11890 ]
  %11881 = phi %"class.blink::IntRect"* [ %11844, %11870 ], [ %11893, %11890 ]
  %11882 = phi i32 [ 0, %11870 ], [ %11902, %11890 ]
  %11883 = phi float* [ %11874, %11870 ], [ %11895, %11890 ]
  %11884 = phi i8* [ %11871, %11870 ], [ %11901, %11890 ]
  %11885 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11881, i64 0, i32 1, i32 1
  %11886 = load i32, i32* %11885, align 4
  %11887 = icmp sgt i32 %11886, 0
  br i1 %11887, label %11904, label %11890

11888:                                            ; preds = %12017
  %11889 = load i32, i32* %11854, align 8
  br label %11890

11890:                                            ; preds = %11888, %11878
  %11891 = phi i32 [ %11879, %11878 ], [ %11889, %11888 ]
  %11892 = phi %"class.blink::IntRect"* [ %11880, %11878 ], [ %12018, %11888 ]
  %11893 = phi %"class.blink::IntRect"* [ %11881, %11878 ], [ %12018, %11888 ]
  %11894 = phi i8* [ %11884, %11878 ], [ %12019, %11888 ]
  %11895 = phi float* [ %11883, %11878 ], [ %12020, %11888 ]
  %11896 = phi i32 [ %11886, %11878 ], [ %12023, %11888 ]
  %11897 = load i32, i32* %11877, align 4
  %11898 = sub nsw i32 %11897, %11896
  %11899 = sext i32 %11898 to i64
  %11900 = mul nsw i64 %11899, %11836
  %11901 = getelementptr inbounds i8, i8* %11894, i64 %11900
  %11902 = add nuw nsw i32 %11882, 1
  %11903 = icmp slt i32 %11902, %11891
  br i1 %11903, label %11878, label %12025

11904:                                            ; preds = %11878, %12017
  %11905 = phi %"class.blink::IntRect"* [ %12018, %12017 ], [ %11880, %11878 ]
  %11906 = phi %"class.blink::IntRect"* [ %12018, %12017 ], [ %11881, %11878 ]
  %11907 = phi i32 [ %12021, %12017 ], [ 0, %11878 ]
  %11908 = phi float* [ %12020, %12017 ], [ %11883, %11878 ]
  %11909 = phi i8* [ %12019, %12017 ], [ %11884, %11878 ]
  %11910 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11906, i64 0, i32 1, i32 0
  %11911 = load i32, i32* %11910, align 4
  %11912 = icmp eq i32 %11911, 0
  br i1 %11912, label %12017, label %11913

11913:                                            ; preds = %11904
  %11914 = load float*, float** %11876, align 8
  br label %11915

11915:                                            ; preds = %11915, %11913
  %11916 = phi i32 [ %11939, %11915 ], [ 0, %11913 ]
  %11917 = phi i8* [ %11937, %11915 ], [ %11909, %11913 ]
  %11918 = phi float* [ %11938, %11915 ], [ %11914, %11913 ]
  %11919 = getelementptr inbounds i8, i8* %11917, i64 2
  %11920 = load i8, i8* %11919, align 1
  %11921 = uitofp i8 %11920 to float
  %11922 = fmul float %11921, 0x3F70101020000000
  store float %11922, float* %11918, align 4
  %11923 = getelementptr inbounds i8, i8* %11917, i64 1
  %11924 = load i8, i8* %11923, align 1
  %11925 = uitofp i8 %11924 to float
  %11926 = fmul float %11925, 0x3F70101020000000
  %11927 = getelementptr inbounds float, float* %11918, i64 1
  store float %11926, float* %11927, align 4
  %11928 = load i8, i8* %11917, align 1
  %11929 = uitofp i8 %11928 to float
  %11930 = fmul float %11929, 0x3F70101020000000
  %11931 = getelementptr inbounds float, float* %11918, i64 2
  store float %11930, float* %11931, align 4
  %11932 = getelementptr inbounds i8, i8* %11917, i64 3
  %11933 = load i8, i8* %11932, align 1
  %11934 = uitofp i8 %11933 to float
  %11935 = fmul float %11934, 0x3F70101020000000
  %11936 = getelementptr inbounds float, float* %11918, i64 3
  store float %11935, float* %11936, align 4
  %11937 = getelementptr inbounds i8, i8* %11917, i64 4
  %11938 = getelementptr inbounds float, float* %11918, i64 4
  %11939 = add nuw i32 %11916, 1
  %11940 = icmp eq i32 %11939, %11911
  br i1 %11940, label %11941, label %11915

11941:                                            ; preds = %11915
  %11942 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11843, align 8
  %11943 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11942, i64 0, i32 1, i32 0
  %11944 = load i32, i32* %11943, align 4
  %11945 = icmp eq i32 %11944, 0
  br i1 %11945, label %12017, label %11946

11946:                                            ; preds = %11941
  %11947 = load float*, float** %11876, align 8
  %11948 = and i32 %11944, 1
  %11949 = icmp eq i32 %11944, 1
  br i1 %11949, label %11994, label %11950

11950:                                            ; preds = %11946
  %11951 = sub i32 %11944, %11948
  br label %11952

11952:                                            ; preds = %11952, %11950
  %11953 = phi float* [ %11947, %11950 ], [ %11990, %11952 ]
  %11954 = phi float* [ %11908, %11950 ], [ %11991, %11952 ]
  %11955 = phi i32 [ %11951, %11950 ], [ %11992, %11952 ]
  %11956 = getelementptr inbounds float, float* %11953, i64 3
  %11957 = load float, float* %11956, align 4
  %11958 = load float, float* %11953, align 4
  %11959 = fmul float %11957, %11958
  store float %11959, float* %11954, align 4
  %11960 = getelementptr inbounds float, float* %11953, i64 1
  %11961 = load float, float* %11960, align 4
  %11962 = fmul float %11957, %11961
  %11963 = getelementptr inbounds float, float* %11954, i64 1
  store float %11962, float* %11963, align 4
  %11964 = getelementptr inbounds float, float* %11953, i64 2
  %11965 = load float, float* %11964, align 4
  %11966 = fmul float %11957, %11965
  %11967 = getelementptr inbounds float, float* %11954, i64 2
  store float %11966, float* %11967, align 4
  %11968 = bitcast float* %11956 to i32*
  %11969 = load i32, i32* %11968, align 4
  %11970 = getelementptr inbounds float, float* %11954, i64 3
  %11971 = bitcast float* %11970 to i32*
  store i32 %11969, i32* %11971, align 4
  %11972 = getelementptr inbounds float, float* %11953, i64 4
  %11973 = getelementptr inbounds float, float* %11954, i64 4
  %11974 = getelementptr inbounds float, float* %11953, i64 7
  %11975 = load float, float* %11974, align 4
  %11976 = load float, float* %11972, align 4
  %11977 = fmul float %11975, %11976
  store float %11977, float* %11973, align 4
  %11978 = getelementptr inbounds float, float* %11953, i64 5
  %11979 = load float, float* %11978, align 4
  %11980 = fmul float %11975, %11979
  %11981 = getelementptr inbounds float, float* %11954, i64 5
  store float %11980, float* %11981, align 4
  %11982 = getelementptr inbounds float, float* %11953, i64 6
  %11983 = load float, float* %11982, align 4
  %11984 = fmul float %11975, %11983
  %11985 = getelementptr inbounds float, float* %11954, i64 6
  store float %11984, float* %11985, align 4
  %11986 = bitcast float* %11974 to i32*
  %11987 = load i32, i32* %11986, align 4
  %11988 = getelementptr inbounds float, float* %11954, i64 7
  %11989 = bitcast float* %11988 to i32*
  store i32 %11987, i32* %11989, align 4
  %11990 = getelementptr inbounds float, float* %11953, i64 8
  %11991 = getelementptr inbounds float, float* %11954, i64 8
  %11992 = add i32 %11955, -2
  %11993 = icmp eq i32 %11992, 0
  br i1 %11993, label %11994, label %11952

11994:                                            ; preds = %11952, %11946
  %11995 = phi float* [ %11947, %11946 ], [ %11990, %11952 ]
  %11996 = phi float* [ %11908, %11946 ], [ %11991, %11952 ]
  %11997 = icmp eq i32 %11948, 0
  br i1 %11997, label %12015, label %11998

11998:                                            ; preds = %11994
  %11999 = getelementptr inbounds float, float* %11995, i64 3
  %12000 = load float, float* %11999, align 4
  %12001 = load float, float* %11995, align 4
  %12002 = fmul float %12000, %12001
  store float %12002, float* %11996, align 4
  %12003 = getelementptr inbounds float, float* %11995, i64 1
  %12004 = load float, float* %12003, align 4
  %12005 = fmul float %12000, %12004
  %12006 = getelementptr inbounds float, float* %11996, i64 1
  store float %12005, float* %12006, align 4
  %12007 = getelementptr inbounds float, float* %11995, i64 2
  %12008 = load float, float* %12007, align 4
  %12009 = fmul float %12000, %12008
  %12010 = getelementptr inbounds float, float* %11996, i64 2
  store float %12009, float* %12010, align 4
  %12011 = bitcast float* %11999 to i32*
  %12012 = load i32, i32* %12011, align 4
  %12013 = getelementptr inbounds float, float* %11996, i64 3
  %12014 = bitcast float* %12013 to i32*
  store i32 %12012, i32* %12014, align 4
  br label %12015

12015:                                            ; preds = %11994, %11998
  %12016 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11843, align 8
  br label %12017

12017:                                            ; preds = %12015, %11941, %11904
  %12018 = phi %"class.blink::IntRect"* [ %12016, %12015 ], [ %11942, %11941 ], [ %11905, %11904 ]
  %12019 = getelementptr inbounds i8, i8* %11909, i64 %11836
  %12020 = getelementptr inbounds float, float* %11908, i64 %11840
  %12021 = add nuw nsw i32 %11907, 1
  %12022 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12018, i64 0, i32 1, i32 1
  %12023 = load i32, i32* %12022, align 4
  %12024 = icmp slt i32 %12021, %12023
  br i1 %12024, label %11904, label %11888

12025:                                            ; preds = %11890, %11868
  %12026 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12026, align 4
  br label %15491

12027:                                            ; preds = %11716
  %12028 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12029 = load i32, i32* %12028, align 8
  %12030 = sext i32 %12029 to i64
  %12031 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12032 = load i32, i32* %12031, align 8
  %12033 = sdiv i32 %12032, 4
  %12034 = sext i32 %12033 to i64
  %12035 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12036 = load i8*, i8** %12035, align 8
  %12037 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12038 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12037, align 8
  %12039 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12038, i64 0, i32 0, i32 1
  %12040 = load i32, i32* %12039, align 4
  %12041 = mul nsw i32 %12040, %12029
  %12042 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12043 = load i32, i32* %12042, align 4
  %12044 = add nsw i32 %12041, %12043
  %12045 = sext i32 %12044 to i64
  %12046 = getelementptr inbounds i8, i8* %12036, i64 %12045
  %12047 = icmp slt i32 %12032, 0
  %12048 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12049 = load i32, i32* %12048, align 8
  %12050 = icmp sgt i32 %12049, 1
  %12051 = and i1 %12047, %12050
  br i1 %12051, label %12052, label %12062

12052:                                            ; preds = %12027
  %12053 = add nsw i32 %12049, -1
  %12054 = sext i32 %12053 to i64
  %12055 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12056 = load i32, i32* %12055, align 4
  %12057 = sext i32 %12056 to i64
  %12058 = mul nsw i64 %12030, %12054
  %12059 = mul i64 %12058, %12057
  %12060 = sub i64 0, %12059
  %12061 = getelementptr inbounds i8, i8* %12046, i64 %12060
  br label %12064

12062:                                            ; preds = %12027
  %12063 = icmp sgt i32 %12049, 0
  br i1 %12063, label %12064, label %12179

12064:                                            ; preds = %12062, %12052
  %12065 = phi i8* [ %12061, %12052 ], [ %12046, %12062 ]
  %12066 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12067 = bitcast i8** %12066 to float**
  %12068 = load float*, float** %12067, align 8
  %12069 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12070 = bitcast i8** %12069 to float**
  %12071 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12072

12072:                                            ; preds = %12084, %12064
  %12073 = phi i32 [ %12049, %12064 ], [ %12085, %12084 ]
  %12074 = phi %"class.blink::IntRect"* [ %12038, %12064 ], [ %12086, %12084 ]
  %12075 = phi %"class.blink::IntRect"* [ %12038, %12064 ], [ %12087, %12084 ]
  %12076 = phi i32 [ 0, %12064 ], [ %12096, %12084 ]
  %12077 = phi float* [ %12068, %12064 ], [ %12089, %12084 ]
  %12078 = phi i8* [ %12065, %12064 ], [ %12095, %12084 ]
  %12079 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12075, i64 0, i32 1, i32 1
  %12080 = load i32, i32* %12079, align 4
  %12081 = icmp sgt i32 %12080, 0
  br i1 %12081, label %12098, label %12084

12082:                                            ; preds = %12171
  %12083 = load i32, i32* %12048, align 8
  br label %12084

12084:                                            ; preds = %12082, %12072
  %12085 = phi i32 [ %12073, %12072 ], [ %12083, %12082 ]
  %12086 = phi %"class.blink::IntRect"* [ %12074, %12072 ], [ %12172, %12082 ]
  %12087 = phi %"class.blink::IntRect"* [ %12075, %12072 ], [ %12172, %12082 ]
  %12088 = phi i8* [ %12078, %12072 ], [ %12173, %12082 ]
  %12089 = phi float* [ %12077, %12072 ], [ %12174, %12082 ]
  %12090 = phi i32 [ %12080, %12072 ], [ %12177, %12082 ]
  %12091 = load i32, i32* %12071, align 4
  %12092 = sub nsw i32 %12091, %12090
  %12093 = sext i32 %12092 to i64
  %12094 = mul nsw i64 %12093, %12030
  %12095 = getelementptr inbounds i8, i8* %12088, i64 %12094
  %12096 = add nuw nsw i32 %12076, 1
  %12097 = icmp slt i32 %12096, %12085
  br i1 %12097, label %12072, label %12179

12098:                                            ; preds = %12072, %12171
  %12099 = phi %"class.blink::IntRect"* [ %12172, %12171 ], [ %12074, %12072 ]
  %12100 = phi %"class.blink::IntRect"* [ %12172, %12171 ], [ %12075, %12072 ]
  %12101 = phi i32 [ %12175, %12171 ], [ 0, %12072 ]
  %12102 = phi float* [ %12174, %12171 ], [ %12077, %12072 ]
  %12103 = phi i8* [ %12173, %12171 ], [ %12078, %12072 ]
  %12104 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12100, i64 0, i32 1, i32 0
  %12105 = load i32, i32* %12104, align 4
  %12106 = icmp eq i32 %12105, 0
  br i1 %12106, label %12171, label %12107

12107:                                            ; preds = %12098
  %12108 = load float*, float** %12070, align 8
  br label %12109

12109:                                            ; preds = %12109, %12107
  %12110 = phi i32 [ %12133, %12109 ], [ 0, %12107 ]
  %12111 = phi i8* [ %12131, %12109 ], [ %12103, %12107 ]
  %12112 = phi float* [ %12132, %12109 ], [ %12108, %12107 ]
  %12113 = getelementptr inbounds i8, i8* %12111, i64 2
  %12114 = load i8, i8* %12113, align 1
  %12115 = uitofp i8 %12114 to float
  %12116 = fmul float %12115, 0x3F70101020000000
  store float %12116, float* %12112, align 4
  %12117 = getelementptr inbounds i8, i8* %12111, i64 1
  %12118 = load i8, i8* %12117, align 1
  %12119 = uitofp i8 %12118 to float
  %12120 = fmul float %12119, 0x3F70101020000000
  %12121 = getelementptr inbounds float, float* %12112, i64 1
  store float %12120, float* %12121, align 4
  %12122 = load i8, i8* %12111, align 1
  %12123 = uitofp i8 %12122 to float
  %12124 = fmul float %12123, 0x3F70101020000000
  %12125 = getelementptr inbounds float, float* %12112, i64 2
  store float %12124, float* %12125, align 4
  %12126 = getelementptr inbounds i8, i8* %12111, i64 3
  %12127 = load i8, i8* %12126, align 1
  %12128 = uitofp i8 %12127 to float
  %12129 = fmul float %12128, 0x3F70101020000000
  %12130 = getelementptr inbounds float, float* %12112, i64 3
  store float %12129, float* %12130, align 4
  %12131 = getelementptr inbounds i8, i8* %12111, i64 4
  %12132 = getelementptr inbounds float, float* %12112, i64 4
  %12133 = add nuw i32 %12110, 1
  %12134 = icmp eq i32 %12133, %12105
  br i1 %12134, label %12135, label %12109

12135:                                            ; preds = %12109
  %12136 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12037, align 8
  %12137 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12136, i64 0, i32 1, i32 0
  %12138 = load i32, i32* %12137, align 4
  %12139 = icmp eq i32 %12138, 0
  br i1 %12139, label %12171, label %12140

12140:                                            ; preds = %12135
  %12141 = load float*, float** %12070, align 8
  br label %12142

12142:                                            ; preds = %12142, %12140
  %12143 = phi i32 [ %12167, %12142 ], [ 0, %12140 ]
  %12144 = phi float* [ %12165, %12142 ], [ %12141, %12140 ]
  %12145 = phi float* [ %12166, %12142 ], [ %12102, %12140 ]
  %12146 = getelementptr inbounds float, float* %12144, i64 3
  %12147 = load float, float* %12146, align 4
  %12148 = fcmp une float %12147, 0.000000e+00
  %12149 = fdiv float 1.000000e+00, %12147
  %12150 = select i1 %12148, float %12149, float 1.000000e+00
  %12151 = load float, float* %12144, align 4
  %12152 = fmul float %12151, %12150
  store float %12152, float* %12145, align 4
  %12153 = getelementptr inbounds float, float* %12144, i64 1
  %12154 = load float, float* %12153, align 4
  %12155 = fmul float %12150, %12154
  %12156 = getelementptr inbounds float, float* %12145, i64 1
  store float %12155, float* %12156, align 4
  %12157 = getelementptr inbounds float, float* %12144, i64 2
  %12158 = load float, float* %12157, align 4
  %12159 = fmul float %12150, %12158
  %12160 = getelementptr inbounds float, float* %12145, i64 2
  store float %12159, float* %12160, align 4
  %12161 = bitcast float* %12146 to i32*
  %12162 = load i32, i32* %12161, align 4
  %12163 = getelementptr inbounds float, float* %12145, i64 3
  %12164 = bitcast float* %12163 to i32*
  store i32 %12162, i32* %12164, align 4
  %12165 = getelementptr inbounds float, float* %12144, i64 4
  %12166 = getelementptr inbounds float, float* %12145, i64 4
  %12167 = add nuw i32 %12143, 1
  %12168 = icmp eq i32 %12167, %12138
  br i1 %12168, label %12169, label %12142

12169:                                            ; preds = %12142
  %12170 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12037, align 8
  br label %12171

12171:                                            ; preds = %12169, %12135, %12098
  %12172 = phi %"class.blink::IntRect"* [ %12170, %12169 ], [ %12136, %12135 ], [ %12099, %12098 ]
  %12173 = getelementptr inbounds i8, i8* %12103, i64 %12030
  %12174 = getelementptr inbounds float, float* %12102, i64 %12034
  %12175 = add nuw nsw i32 %12101, 1
  %12176 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12172, i64 0, i32 1, i32 1
  %12177 = load i32, i32* %12176, align 4
  %12178 = icmp slt i32 %12175, %12177
  br i1 %12178, label %12098, label %12082

12179:                                            ; preds = %12084, %12062
  %12180 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12180, align 4
  br label %15491

12181:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12182
    i32 1, label %12184
  ]

12182:                                            ; preds = %12181
  %12183 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12183, align 4
  br label %15491

12184:                                            ; preds = %12181
  %12185 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12186 = load i32, i32* %12185, align 8
  %12187 = sext i32 %12186 to i64
  %12188 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12189 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12188, align 8
  %12190 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12191 = load i32, i32* %12190, align 8
  %12192 = icmp sgt i32 %12191, 0
  br i1 %12192, label %12193, label %12341

12193:                                            ; preds = %12184
  %12194 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12195 = load i8*, i8** %12194, align 8
  %12196 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %12197

12197:                                            ; preds = %12208, %12193
  %12198 = phi i32 [ %12191, %12193 ], [ %12209, %12208 ]
  %12199 = phi %"class.blink::IntRect"* [ %12189, %12193 ], [ %12210, %12208 ]
  %12200 = phi %"class.blink::IntRect"* [ %12189, %12193 ], [ %12211, %12208 ]
  %12201 = phi i32 [ 0, %12193 ], [ %12213, %12208 ]
  %12202 = phi i8* [ %12195, %12193 ], [ %12212, %12208 ]
  %12203 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12200, i64 0, i32 1, i32 1
  %12204 = load i32, i32* %12203, align 4
  %12205 = icmp sgt i32 %12204, 0
  br i1 %12205, label %12215, label %12208

12206:                                            ; preds = %12333
  %12207 = load i32, i32* %12190, align 8
  br label %12208

12208:                                            ; preds = %12206, %12197
  %12209 = phi i32 [ %12198, %12197 ], [ %12207, %12206 ]
  %12210 = phi %"class.blink::IntRect"* [ %12199, %12197 ], [ %12334, %12206 ]
  %12211 = phi %"class.blink::IntRect"* [ %12200, %12197 ], [ %12334, %12206 ]
  %12212 = phi i8* [ %12202, %12197 ], [ %12335, %12206 ]
  %12213 = add nuw nsw i32 %12201, 1
  %12214 = icmp slt i32 %12213, %12209
  br i1 %12214, label %12197, label %12341

12215:                                            ; preds = %12197, %12333
  %12216 = phi i64 [ %12340, %12333 ], [ 0, %12197 ]
  %12217 = phi %"class.blink::IntRect"* [ %12334, %12333 ], [ %12199, %12197 ]
  %12218 = phi %"class.blink::IntRect"* [ %12334, %12333 ], [ %12200, %12197 ]
  %12219 = phi i32 [ %12336, %12333 ], [ 0, %12197 ]
  %12220 = phi i8* [ %12335, %12333 ], [ %12202, %12197 ]
  %12221 = mul i64 %12216, %12187
  %12222 = getelementptr i8, i8* %12202, i64 %12221
  %12223 = add i64 %12221, 4
  %12224 = getelementptr i8, i8* %12202, i64 %12223
  %12225 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12218, i64 0, i32 1, i32 0
  %12226 = load i32, i32* %12225, align 4
  %12227 = icmp eq i32 %12226, 0
  br i1 %12227, label %12333, label %12228

12228:                                            ; preds = %12215
  %12229 = load i8*, i8** %12196, align 8
  %12230 = add i32 %12226, -1
  %12231 = zext i32 %12230 to i64
  %12232 = add nuw nsw i64 %12231, 1
  %12233 = icmp ult i64 %12232, 16
  br i1 %12233, label %12290, label %12234

12234:                                            ; preds = %12228
  %12235 = add i32 %12226, -1
  %12236 = zext i32 %12235 to i64
  %12237 = shl nuw nsw i64 %12236, 2
  %12238 = getelementptr i8, i8* %12224, i64 %12237
  %12239 = getelementptr i8, i8* %12229, i64 4
  %12240 = getelementptr i8, i8* %12239, i64 %12237
  %12241 = icmp ult i8* %12222, %12240
  %12242 = icmp ult i8* %12229, %12238
  %12243 = and i1 %12241, %12242
  br i1 %12243, label %12290, label %12244

12244:                                            ; preds = %12234
  %12245 = and i64 %12232, 8589934576
  %12246 = shl nuw nsw i64 %12245, 2
  %12247 = getelementptr i8, i8* %12229, i64 %12246
  %12248 = trunc i64 %12245 to i32
  %12249 = shl nuw nsw i64 %12245, 2
  %12250 = getelementptr i8, i8* %12220, i64 %12249
  br label %12251

12251:                                            ; preds = %12251, %12244
  %12252 = phi i64 [ 0, %12244 ], [ %12286, %12251 ]
  %12253 = shl i64 %12252, 2
  %12254 = shl i64 %12252, 2
  %12255 = getelementptr inbounds i8, i8* %12229, i64 %12253
  %12256 = bitcast i8* %12255 to <64 x i8>*
  %12257 = load <64 x i8>, <64 x i8>* %12256, align 1
  %12258 = shufflevector <64 x i8> %12257, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %12259 = shufflevector <64 x i8> %12257, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %12260 = shufflevector <64 x i8> %12257, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %12261 = shufflevector <64 x i8> %12257, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %12262 = icmp eq <16 x i8> %12261, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %12263 = select <16 x i1> %12262, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %12261
  %12264 = sitofp <16 x i8> %12263 to <16 x float>
  %12265 = fdiv <16 x float> %12264, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %12266 = icmp eq <16 x i8> %12258, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %12267 = select <16 x i1> %12266, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %12258
  %12268 = sitofp <16 x i8> %12267 to <16 x float>
  %12269 = fmul <16 x float> %12265, %12268
  %12270 = fptosi <16 x float> %12269 to <16 x i8>
  %12271 = icmp eq <16 x i8> %12259, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %12272 = select <16 x i1> %12271, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %12259
  %12273 = sitofp <16 x i8> %12272 to <16 x float>
  %12274 = fmul <16 x float> %12265, %12273
  %12275 = fptosi <16 x float> %12274 to <16 x i8>
  %12276 = icmp eq <16 x i8> %12260, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %12277 = select <16 x i1> %12276, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %12260
  %12278 = sitofp <16 x i8> %12277 to <16 x float>
  %12279 = fmul <16 x float> %12265, %12278
  %12280 = fptosi <16 x float> %12279 to <16 x i8>
  %12281 = getelementptr inbounds i8, i8* %12220, i64 %12254
  %12282 = bitcast i8* %12281 to <64 x i8>*
  %12283 = shufflevector <16 x i8> %12270, <16 x i8> %12275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12284 = shufflevector <16 x i8> %12280, <16 x i8> %12263, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12285 = shufflevector <32 x i8> %12283, <32 x i8> %12284, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %12285, <64 x i8>* %12282, align 1
  %12286 = add i64 %12252, 16
  %12287 = icmp eq i64 %12286, %12245
  br i1 %12287, label %12288, label %12251, !llvm.loop !554

12288:                                            ; preds = %12251
  %12289 = icmp eq i64 %12232, %12245
  br i1 %12289, label %12331, label %12290

12290:                                            ; preds = %12288, %12234, %12228
  %12291 = phi i8* [ %12229, %12234 ], [ %12229, %12228 ], [ %12247, %12288 ]
  %12292 = phi i32 [ 0, %12234 ], [ 0, %12228 ], [ %12248, %12288 ]
  %12293 = phi i8* [ %12220, %12234 ], [ %12220, %12228 ], [ %12250, %12288 ]
  br label %12294

12294:                                            ; preds = %12290, %12294
  %12295 = phi i8* [ %12327, %12294 ], [ %12291, %12290 ]
  %12296 = phi i32 [ %12329, %12294 ], [ %12292, %12290 ]
  %12297 = phi i8* [ %12328, %12294 ], [ %12293, %12290 ]
  %12298 = getelementptr inbounds i8, i8* %12295, i64 3
  %12299 = load i8, i8* %12298, align 1
  %12300 = icmp eq i8 %12299, -128
  %12301 = select i1 %12300, i8 -127, i8 %12299
  %12302 = getelementptr inbounds i8, i8* %12297, i64 3
  store i8 %12301, i8* %12302, align 1
  %12303 = sitofp i8 %12301 to float
  %12304 = fdiv float %12303, 1.270000e+02
  %12305 = load i8, i8* %12295, align 1
  %12306 = icmp eq i8 %12305, -128
  %12307 = select i1 %12306, i8 -127, i8 %12305
  %12308 = sitofp i8 %12307 to float
  %12309 = fmul float %12304, %12308
  %12310 = fptosi float %12309 to i8
  store i8 %12310, i8* %12297, align 1
  %12311 = getelementptr inbounds i8, i8* %12295, i64 1
  %12312 = load i8, i8* %12311, align 1
  %12313 = icmp eq i8 %12312, -128
  %12314 = select i1 %12313, i8 -127, i8 %12312
  %12315 = sitofp i8 %12314 to float
  %12316 = fmul float %12304, %12315
  %12317 = fptosi float %12316 to i8
  %12318 = getelementptr inbounds i8, i8* %12297, i64 1
  store i8 %12317, i8* %12318, align 1
  %12319 = getelementptr inbounds i8, i8* %12295, i64 2
  %12320 = load i8, i8* %12319, align 1
  %12321 = icmp eq i8 %12320, -128
  %12322 = select i1 %12321, i8 -127, i8 %12320
  %12323 = sitofp i8 %12322 to float
  %12324 = fmul float %12304, %12323
  %12325 = fptosi float %12324 to i8
  %12326 = getelementptr inbounds i8, i8* %12297, i64 2
  store i8 %12325, i8* %12326, align 1
  %12327 = getelementptr inbounds i8, i8* %12295, i64 4
  %12328 = getelementptr inbounds i8, i8* %12297, i64 4
  %12329 = add nuw i32 %12296, 1
  %12330 = icmp eq i32 %12329, %12226
  br i1 %12330, label %12331, label %12294, !llvm.loop !555

12331:                                            ; preds = %12294, %12288
  %12332 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12188, align 8
  br label %12333

12333:                                            ; preds = %12331, %12215
  %12334 = phi %"class.blink::IntRect"* [ %12332, %12331 ], [ %12217, %12215 ]
  %12335 = getelementptr inbounds i8, i8* %12220, i64 %12187
  %12336 = add nuw nsw i32 %12219, 1
  %12337 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12334, i64 0, i32 1, i32 1
  %12338 = load i32, i32* %12337, align 4
  %12339 = icmp slt i32 %12336, %12338
  %12340 = add i64 %12216, 1
  br i1 %12339, label %12215, label %12206

12341:                                            ; preds = %12208, %12184
  %12342 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12342, align 4
  br label %15491

12343:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12344
    i32 1, label %12346
  ]

12344:                                            ; preds = %12343
  %12345 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12345, align 4
  br label %15491

12346:                                            ; preds = %12343
  %12347 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12348 = load i32, i32* %12347, align 8
  %12349 = sdiv i32 %12348, 2
  %12350 = sext i32 %12349 to i64
  %12351 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12352 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12351, align 8
  %12353 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12354 = load i32, i32* %12353, align 8
  %12355 = icmp sgt i32 %12354, 0
  br i1 %12355, label %12356, label %12429

12356:                                            ; preds = %12346
  %12357 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12358 = bitcast i8** %12357 to i16**
  %12359 = load i16*, i16** %12358, align 8
  %12360 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12361 = bitcast i8** %12360 to i16**
  br label %12362

12362:                                            ; preds = %12373, %12356
  %12363 = phi i32 [ %12354, %12356 ], [ %12374, %12373 ]
  %12364 = phi %"class.blink::IntRect"* [ %12352, %12356 ], [ %12375, %12373 ]
  %12365 = phi %"class.blink::IntRect"* [ %12352, %12356 ], [ %12376, %12373 ]
  %12366 = phi i32 [ 0, %12356 ], [ %12378, %12373 ]
  %12367 = phi i16* [ %12359, %12356 ], [ %12377, %12373 ]
  %12368 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12365, i64 0, i32 1, i32 1
  %12369 = load i32, i32* %12368, align 4
  %12370 = icmp sgt i32 %12369, 0
  br i1 %12370, label %12380, label %12373

12371:                                            ; preds = %12422
  %12372 = load i32, i32* %12353, align 8
  br label %12373

12373:                                            ; preds = %12371, %12362
  %12374 = phi i32 [ %12363, %12362 ], [ %12372, %12371 ]
  %12375 = phi %"class.blink::IntRect"* [ %12364, %12362 ], [ %12423, %12371 ]
  %12376 = phi %"class.blink::IntRect"* [ %12365, %12362 ], [ %12423, %12371 ]
  %12377 = phi i16* [ %12367, %12362 ], [ %12424, %12371 ]
  %12378 = add nuw nsw i32 %12366, 1
  %12379 = icmp slt i32 %12378, %12374
  br i1 %12379, label %12362, label %12429

12380:                                            ; preds = %12362, %12422
  %12381 = phi %"class.blink::IntRect"* [ %12423, %12422 ], [ %12364, %12362 ]
  %12382 = phi %"class.blink::IntRect"* [ %12423, %12422 ], [ %12365, %12362 ]
  %12383 = phi i32 [ %12425, %12422 ], [ 0, %12362 ]
  %12384 = phi i16* [ %12424, %12422 ], [ %12367, %12362 ]
  %12385 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12382, i64 0, i32 1, i32 0
  %12386 = load i32, i32* %12385, align 4
  %12387 = icmp eq i32 %12386, 0
  br i1 %12387, label %12422, label %12388

12388:                                            ; preds = %12380
  %12389 = load i16*, i16** %12361, align 8
  br label %12390

12390:                                            ; preds = %12390, %12388
  %12391 = phi i16* [ %12416, %12390 ], [ %12389, %12388 ]
  %12392 = phi i32 [ %12418, %12390 ], [ 0, %12388 ]
  %12393 = phi i16* [ %12417, %12390 ], [ %12384, %12388 ]
  %12394 = getelementptr inbounds i16, i16* %12391, i64 3
  %12395 = load i16, i16* %12394, align 2
  %12396 = uitofp i16 %12395 to float
  %12397 = fdiv float %12396, 6.553500e+04
  %12398 = load i16, i16* %12391, align 2
  %12399 = uitofp i16 %12398 to float
  %12400 = fmul float %12397, %12399
  %12401 = fptoui float %12400 to i16
  store i16 %12401, i16* %12393, align 2
  %12402 = getelementptr inbounds i16, i16* %12391, i64 1
  %12403 = load i16, i16* %12402, align 2
  %12404 = uitofp i16 %12403 to float
  %12405 = fmul float %12397, %12404
  %12406 = fptoui float %12405 to i16
  %12407 = getelementptr inbounds i16, i16* %12393, i64 1
  store i16 %12406, i16* %12407, align 2
  %12408 = getelementptr inbounds i16, i16* %12391, i64 2
  %12409 = load i16, i16* %12408, align 2
  %12410 = uitofp i16 %12409 to float
  %12411 = fmul float %12397, %12410
  %12412 = fptoui float %12411 to i16
  %12413 = getelementptr inbounds i16, i16* %12393, i64 2
  store i16 %12412, i16* %12413, align 2
  %12414 = load i16, i16* %12394, align 2
  %12415 = getelementptr inbounds i16, i16* %12393, i64 3
  store i16 %12414, i16* %12415, align 2
  %12416 = getelementptr inbounds i16, i16* %12391, i64 4
  %12417 = getelementptr inbounds i16, i16* %12393, i64 4
  %12418 = add nuw i32 %12392, 1
  %12419 = icmp eq i32 %12418, %12386
  br i1 %12419, label %12420, label %12390

12420:                                            ; preds = %12390
  %12421 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12351, align 8
  br label %12422

12422:                                            ; preds = %12420, %12380
  %12423 = phi %"class.blink::IntRect"* [ %12421, %12420 ], [ %12381, %12380 ]
  %12424 = getelementptr inbounds i16, i16* %12384, i64 %12350
  %12425 = add nuw nsw i32 %12383, 1
  %12426 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12423, i64 0, i32 1, i32 1
  %12427 = load i32, i32* %12426, align 4
  %12428 = icmp slt i32 %12425, %12427
  br i1 %12428, label %12380, label %12371

12429:                                            ; preds = %12373, %12346
  %12430 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12430, align 4
  br label %15491

12431:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12432
    i32 1, label %12434
  ]

12432:                                            ; preds = %12431
  %12433 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12433, align 4
  br label %15491

12434:                                            ; preds = %12431
  %12435 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12436 = load i32, i32* %12435, align 8
  %12437 = sdiv i32 %12436, 2
  %12438 = sext i32 %12437 to i64
  %12439 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12440 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12439, align 8
  %12441 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12442 = load i32, i32* %12441, align 8
  %12443 = icmp sgt i32 %12442, 0
  br i1 %12443, label %12444, label %12594

12444:                                            ; preds = %12434
  %12445 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12446 = bitcast i8** %12445 to i16**
  %12447 = load i16*, i16** %12446, align 8
  %12448 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12449 = bitcast i8** %12448 to i16**
  br label %12450

12450:                                            ; preds = %12461, %12444
  %12451 = phi i32 [ %12442, %12444 ], [ %12462, %12461 ]
  %12452 = phi %"class.blink::IntRect"* [ %12440, %12444 ], [ %12463, %12461 ]
  %12453 = phi %"class.blink::IntRect"* [ %12440, %12444 ], [ %12464, %12461 ]
  %12454 = phi i32 [ 0, %12444 ], [ %12466, %12461 ]
  %12455 = phi i16* [ %12447, %12444 ], [ %12465, %12461 ]
  %12456 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12453, i64 0, i32 1, i32 1
  %12457 = load i32, i32* %12456, align 4
  %12458 = icmp sgt i32 %12457, 0
  br i1 %12458, label %12468, label %12461

12459:                                            ; preds = %12586
  %12460 = load i32, i32* %12441, align 8
  br label %12461

12461:                                            ; preds = %12459, %12450
  %12462 = phi i32 [ %12451, %12450 ], [ %12460, %12459 ]
  %12463 = phi %"class.blink::IntRect"* [ %12452, %12450 ], [ %12587, %12459 ]
  %12464 = phi %"class.blink::IntRect"* [ %12453, %12450 ], [ %12587, %12459 ]
  %12465 = phi i16* [ %12455, %12450 ], [ %12588, %12459 ]
  %12466 = add nuw nsw i32 %12454, 1
  %12467 = icmp slt i32 %12466, %12462
  br i1 %12467, label %12450, label %12594

12468:                                            ; preds = %12450, %12586
  %12469 = phi i64 [ %12593, %12586 ], [ 0, %12450 ]
  %12470 = phi %"class.blink::IntRect"* [ %12587, %12586 ], [ %12452, %12450 ]
  %12471 = phi %"class.blink::IntRect"* [ %12587, %12586 ], [ %12453, %12450 ]
  %12472 = phi i32 [ %12589, %12586 ], [ 0, %12450 ]
  %12473 = phi i16* [ %12588, %12586 ], [ %12455, %12450 ]
  %12474 = mul i64 %12469, %12438
  %12475 = getelementptr i16, i16* %12455, i64 %12474
  %12476 = add i64 %12474, 4
  %12477 = getelementptr i16, i16* %12455, i64 %12476
  %12478 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12471, i64 0, i32 1, i32 0
  %12479 = load i32, i32* %12478, align 4
  %12480 = icmp eq i32 %12479, 0
  br i1 %12480, label %12586, label %12481

12481:                                            ; preds = %12468
  %12482 = load i16*, i16** %12449, align 8
  %12483 = add i32 %12479, -1
  %12484 = zext i32 %12483 to i64
  %12485 = add nuw nsw i64 %12484, 1
  %12486 = icmp ult i64 %12485, 4
  br i1 %12486, label %12543, label %12487

12487:                                            ; preds = %12481
  %12488 = add i32 %12479, -1
  %12489 = zext i32 %12488 to i64
  %12490 = shl nuw nsw i64 %12489, 2
  %12491 = getelementptr i16, i16* %12477, i64 %12490
  %12492 = getelementptr i16, i16* %12482, i64 4
  %12493 = getelementptr i16, i16* %12492, i64 %12490
  %12494 = icmp ult i16* %12475, %12493
  %12495 = icmp ult i16* %12482, %12491
  %12496 = and i1 %12494, %12495
  br i1 %12496, label %12543, label %12497

12497:                                            ; preds = %12487
  %12498 = and i64 %12485, 8589934588
  %12499 = shl nuw nsw i64 %12498, 2
  %12500 = getelementptr i16, i16* %12482, i64 %12499
  %12501 = trunc i64 %12498 to i32
  %12502 = shl nuw nsw i64 %12498, 2
  %12503 = getelementptr i16, i16* %12473, i64 %12502
  br label %12504

12504:                                            ; preds = %12504, %12497
  %12505 = phi i64 [ 0, %12497 ], [ %12539, %12504 ]
  %12506 = shl i64 %12505, 2
  %12507 = shl i64 %12505, 2
  %12508 = getelementptr inbounds i16, i16* %12482, i64 %12506
  %12509 = bitcast i16* %12508 to <16 x i16>*
  %12510 = load <16 x i16>, <16 x i16>* %12509, align 2
  %12511 = shufflevector <16 x i16> %12510, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %12512 = shufflevector <16 x i16> %12510, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %12513 = shufflevector <16 x i16> %12510, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %12514 = shufflevector <16 x i16> %12510, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %12515 = icmp eq <4 x i16> %12514, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %12516 = select <4 x i1> %12515, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %12514
  %12517 = sitofp <4 x i16> %12516 to <4 x float>
  %12518 = fdiv <4 x float> %12517, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %12519 = icmp eq <4 x i16> %12511, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %12520 = select <4 x i1> %12519, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %12511
  %12521 = sitofp <4 x i16> %12520 to <4 x float>
  %12522 = fmul <4 x float> %12518, %12521
  %12523 = fptosi <4 x float> %12522 to <4 x i16>
  %12524 = icmp eq <4 x i16> %12512, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %12525 = select <4 x i1> %12524, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %12512
  %12526 = sitofp <4 x i16> %12525 to <4 x float>
  %12527 = fmul <4 x float> %12518, %12526
  %12528 = fptosi <4 x float> %12527 to <4 x i16>
  %12529 = icmp eq <4 x i16> %12513, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %12530 = select <4 x i1> %12529, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %12513
  %12531 = sitofp <4 x i16> %12530 to <4 x float>
  %12532 = fmul <4 x float> %12518, %12531
  %12533 = fptosi <4 x float> %12532 to <4 x i16>
  %12534 = getelementptr inbounds i16, i16* %12473, i64 %12507
  %12535 = bitcast i16* %12534 to <16 x i16>*
  %12536 = shufflevector <4 x i16> %12523, <4 x i16> %12528, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12537 = shufflevector <4 x i16> %12533, <4 x i16> %12516, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12538 = shufflevector <8 x i16> %12536, <8 x i16> %12537, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %12538, <16 x i16>* %12535, align 2
  %12539 = add i64 %12505, 4
  %12540 = icmp eq i64 %12539, %12498
  br i1 %12540, label %12541, label %12504, !llvm.loop !556

12541:                                            ; preds = %12504
  %12542 = icmp eq i64 %12485, %12498
  br i1 %12542, label %12584, label %12543

12543:                                            ; preds = %12541, %12487, %12481
  %12544 = phi i16* [ %12482, %12487 ], [ %12482, %12481 ], [ %12500, %12541 ]
  %12545 = phi i32 [ 0, %12487 ], [ 0, %12481 ], [ %12501, %12541 ]
  %12546 = phi i16* [ %12473, %12487 ], [ %12473, %12481 ], [ %12503, %12541 ]
  br label %12547

12547:                                            ; preds = %12543, %12547
  %12548 = phi i16* [ %12580, %12547 ], [ %12544, %12543 ]
  %12549 = phi i32 [ %12582, %12547 ], [ %12545, %12543 ]
  %12550 = phi i16* [ %12581, %12547 ], [ %12546, %12543 ]
  %12551 = getelementptr inbounds i16, i16* %12548, i64 3
  %12552 = load i16, i16* %12551, align 2
  %12553 = icmp eq i16 %12552, -32768
  %12554 = select i1 %12553, i16 -32767, i16 %12552
  %12555 = getelementptr inbounds i16, i16* %12550, i64 3
  store i16 %12554, i16* %12555, align 2
  %12556 = sitofp i16 %12554 to float
  %12557 = fdiv float %12556, 3.276700e+04
  %12558 = load i16, i16* %12548, align 2
  %12559 = icmp eq i16 %12558, -32768
  %12560 = select i1 %12559, i16 -32767, i16 %12558
  %12561 = sitofp i16 %12560 to float
  %12562 = fmul float %12557, %12561
  %12563 = fptosi float %12562 to i16
  store i16 %12563, i16* %12550, align 2
  %12564 = getelementptr inbounds i16, i16* %12548, i64 1
  %12565 = load i16, i16* %12564, align 2
  %12566 = icmp eq i16 %12565, -32768
  %12567 = select i1 %12566, i16 -32767, i16 %12565
  %12568 = sitofp i16 %12567 to float
  %12569 = fmul float %12557, %12568
  %12570 = fptosi float %12569 to i16
  %12571 = getelementptr inbounds i16, i16* %12550, i64 1
  store i16 %12570, i16* %12571, align 2
  %12572 = getelementptr inbounds i16, i16* %12548, i64 2
  %12573 = load i16, i16* %12572, align 2
  %12574 = icmp eq i16 %12573, -32768
  %12575 = select i1 %12574, i16 -32767, i16 %12573
  %12576 = sitofp i16 %12575 to float
  %12577 = fmul float %12557, %12576
  %12578 = fptosi float %12577 to i16
  %12579 = getelementptr inbounds i16, i16* %12550, i64 2
  store i16 %12578, i16* %12579, align 2
  %12580 = getelementptr inbounds i16, i16* %12548, i64 4
  %12581 = getelementptr inbounds i16, i16* %12550, i64 4
  %12582 = add nuw i32 %12549, 1
  %12583 = icmp eq i32 %12582, %12479
  br i1 %12583, label %12584, label %12547, !llvm.loop !557

12584:                                            ; preds = %12547, %12541
  %12585 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12439, align 8
  br label %12586

12586:                                            ; preds = %12584, %12468
  %12587 = phi %"class.blink::IntRect"* [ %12585, %12584 ], [ %12470, %12468 ]
  %12588 = getelementptr inbounds i16, i16* %12473, i64 %12438
  %12589 = add nuw nsw i32 %12472, 1
  %12590 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12587, i64 0, i32 1, i32 1
  %12591 = load i32, i32* %12590, align 4
  %12592 = icmp slt i32 %12589, %12591
  %12593 = add i64 %12469, 1
  br i1 %12592, label %12468, label %12459

12594:                                            ; preds = %12461, %12434
  %12595 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12595, align 4
  br label %15491

12596:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12597
    i32 1, label %12599
  ]

12597:                                            ; preds = %12596
  %12598 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12598, align 4
  br label %15491

12599:                                            ; preds = %12596
  %12600 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12601 = load i32, i32* %12600, align 8
  %12602 = sdiv i32 %12601, 4
  %12603 = sext i32 %12602 to i64
  %12604 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12605 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12604, align 8
  %12606 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12607 = load i32, i32* %12606, align 8
  %12608 = icmp sgt i32 %12607, 0
  br i1 %12608, label %12609, label %12682

12609:                                            ; preds = %12599
  %12610 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12611 = bitcast i8** %12610 to i32**
  %12612 = load i32*, i32** %12611, align 8
  %12613 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12614 = bitcast i8** %12613 to i32**
  br label %12615

12615:                                            ; preds = %12626, %12609
  %12616 = phi i32 [ %12607, %12609 ], [ %12627, %12626 ]
  %12617 = phi %"class.blink::IntRect"* [ %12605, %12609 ], [ %12628, %12626 ]
  %12618 = phi %"class.blink::IntRect"* [ %12605, %12609 ], [ %12629, %12626 ]
  %12619 = phi i32 [ 0, %12609 ], [ %12631, %12626 ]
  %12620 = phi i32* [ %12612, %12609 ], [ %12630, %12626 ]
  %12621 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12618, i64 0, i32 1, i32 1
  %12622 = load i32, i32* %12621, align 4
  %12623 = icmp sgt i32 %12622, 0
  br i1 %12623, label %12633, label %12626

12624:                                            ; preds = %12675
  %12625 = load i32, i32* %12606, align 8
  br label %12626

12626:                                            ; preds = %12624, %12615
  %12627 = phi i32 [ %12616, %12615 ], [ %12625, %12624 ]
  %12628 = phi %"class.blink::IntRect"* [ %12617, %12615 ], [ %12676, %12624 ]
  %12629 = phi %"class.blink::IntRect"* [ %12618, %12615 ], [ %12676, %12624 ]
  %12630 = phi i32* [ %12620, %12615 ], [ %12677, %12624 ]
  %12631 = add nuw nsw i32 %12619, 1
  %12632 = icmp slt i32 %12631, %12627
  br i1 %12632, label %12615, label %12682

12633:                                            ; preds = %12615, %12675
  %12634 = phi %"class.blink::IntRect"* [ %12676, %12675 ], [ %12617, %12615 ]
  %12635 = phi %"class.blink::IntRect"* [ %12676, %12675 ], [ %12618, %12615 ]
  %12636 = phi i32 [ %12678, %12675 ], [ 0, %12615 ]
  %12637 = phi i32* [ %12677, %12675 ], [ %12620, %12615 ]
  %12638 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12635, i64 0, i32 1, i32 0
  %12639 = load i32, i32* %12638, align 4
  %12640 = icmp eq i32 %12639, 0
  br i1 %12640, label %12675, label %12641

12641:                                            ; preds = %12633
  %12642 = load i32*, i32** %12614, align 8
  br label %12643

12643:                                            ; preds = %12643, %12641
  %12644 = phi i32* [ %12669, %12643 ], [ %12642, %12641 ]
  %12645 = phi i32 [ %12671, %12643 ], [ 0, %12641 ]
  %12646 = phi i32* [ %12670, %12643 ], [ %12637, %12641 ]
  %12647 = getelementptr inbounds i32, i32* %12644, i64 3
  %12648 = load i32, i32* %12647, align 4
  %12649 = uitofp i32 %12648 to double
  %12650 = fdiv double %12649, 0x41EFFFFFFFE00000
  %12651 = load i32, i32* %12644, align 4
  %12652 = uitofp i32 %12651 to double
  %12653 = fmul double %12650, %12652
  %12654 = fptoui double %12653 to i32
  store i32 %12654, i32* %12646, align 4
  %12655 = getelementptr inbounds i32, i32* %12644, i64 1
  %12656 = load i32, i32* %12655, align 4
  %12657 = uitofp i32 %12656 to double
  %12658 = fmul double %12650, %12657
  %12659 = fptoui double %12658 to i32
  %12660 = getelementptr inbounds i32, i32* %12646, i64 1
  store i32 %12659, i32* %12660, align 4
  %12661 = getelementptr inbounds i32, i32* %12644, i64 2
  %12662 = load i32, i32* %12661, align 4
  %12663 = uitofp i32 %12662 to double
  %12664 = fmul double %12650, %12663
  %12665 = fptoui double %12664 to i32
  %12666 = getelementptr inbounds i32, i32* %12646, i64 2
  store i32 %12665, i32* %12666, align 4
  %12667 = load i32, i32* %12647, align 4
  %12668 = getelementptr inbounds i32, i32* %12646, i64 3
  store i32 %12667, i32* %12668, align 4
  %12669 = getelementptr inbounds i32, i32* %12644, i64 4
  %12670 = getelementptr inbounds i32, i32* %12646, i64 4
  %12671 = add nuw i32 %12645, 1
  %12672 = icmp eq i32 %12671, %12639
  br i1 %12672, label %12673, label %12643

12673:                                            ; preds = %12643
  %12674 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12604, align 8
  br label %12675

12675:                                            ; preds = %12673, %12633
  %12676 = phi %"class.blink::IntRect"* [ %12674, %12673 ], [ %12634, %12633 ]
  %12677 = getelementptr inbounds i32, i32* %12637, i64 %12603
  %12678 = add nuw nsw i32 %12636, 1
  %12679 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12676, i64 0, i32 1, i32 1
  %12680 = load i32, i32* %12679, align 4
  %12681 = icmp slt i32 %12678, %12680
  br i1 %12681, label %12633, label %12624

12682:                                            ; preds = %12626, %12599
  %12683 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12683, align 4
  br label %15491

12684:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12685
    i32 1, label %12687
  ]

12685:                                            ; preds = %12684
  %12686 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12686, align 4
  br label %15491

12687:                                            ; preds = %12684
  %12688 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12689 = load i32, i32* %12688, align 8
  %12690 = sdiv i32 %12689, 4
  %12691 = sext i32 %12690 to i64
  %12692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12693 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12692, align 8
  %12694 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12695 = load i32, i32* %12694, align 8
  %12696 = icmp sgt i32 %12695, 0
  br i1 %12696, label %12697, label %12777

12697:                                            ; preds = %12687
  %12698 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12699 = bitcast i8** %12698 to i32**
  %12700 = load i32*, i32** %12699, align 8
  %12701 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12702 = bitcast i8** %12701 to i32**
  br label %12703

12703:                                            ; preds = %12714, %12697
  %12704 = phi i32 [ %12695, %12697 ], [ %12715, %12714 ]
  %12705 = phi %"class.blink::IntRect"* [ %12693, %12697 ], [ %12716, %12714 ]
  %12706 = phi %"class.blink::IntRect"* [ %12693, %12697 ], [ %12717, %12714 ]
  %12707 = phi i32 [ 0, %12697 ], [ %12719, %12714 ]
  %12708 = phi i32* [ %12700, %12697 ], [ %12718, %12714 ]
  %12709 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12706, i64 0, i32 1, i32 1
  %12710 = load i32, i32* %12709, align 4
  %12711 = icmp sgt i32 %12710, 0
  br i1 %12711, label %12721, label %12714

12712:                                            ; preds = %12770
  %12713 = load i32, i32* %12694, align 8
  br label %12714

12714:                                            ; preds = %12712, %12703
  %12715 = phi i32 [ %12704, %12703 ], [ %12713, %12712 ]
  %12716 = phi %"class.blink::IntRect"* [ %12705, %12703 ], [ %12771, %12712 ]
  %12717 = phi %"class.blink::IntRect"* [ %12706, %12703 ], [ %12771, %12712 ]
  %12718 = phi i32* [ %12708, %12703 ], [ %12772, %12712 ]
  %12719 = add nuw nsw i32 %12707, 1
  %12720 = icmp slt i32 %12719, %12715
  br i1 %12720, label %12703, label %12777

12721:                                            ; preds = %12703, %12770
  %12722 = phi %"class.blink::IntRect"* [ %12771, %12770 ], [ %12705, %12703 ]
  %12723 = phi %"class.blink::IntRect"* [ %12771, %12770 ], [ %12706, %12703 ]
  %12724 = phi i32 [ %12773, %12770 ], [ 0, %12703 ]
  %12725 = phi i32* [ %12772, %12770 ], [ %12708, %12703 ]
  %12726 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12723, i64 0, i32 1, i32 0
  %12727 = load i32, i32* %12726, align 4
  %12728 = icmp eq i32 %12727, 0
  br i1 %12728, label %12770, label %12729

12729:                                            ; preds = %12721
  %12730 = load i32*, i32** %12702, align 8
  br label %12731

12731:                                            ; preds = %12731, %12729
  %12732 = phi i32* [ %12764, %12731 ], [ %12730, %12729 ]
  %12733 = phi i32 [ %12766, %12731 ], [ 0, %12729 ]
  %12734 = phi i32* [ %12765, %12731 ], [ %12725, %12729 ]
  %12735 = getelementptr inbounds i32, i32* %12732, i64 3
  %12736 = load i32, i32* %12735, align 4
  %12737 = icmp eq i32 %12736, -2147483648
  %12738 = select i1 %12737, i32 -2147483647, i32 %12736
  %12739 = getelementptr inbounds i32, i32* %12734, i64 3
  store i32 %12738, i32* %12739, align 4
  %12740 = sitofp i32 %12738 to double
  %12741 = fdiv double %12740, 0x41DFFFFFFFC00000
  %12742 = load i32, i32* %12732, align 4
  %12743 = icmp eq i32 %12742, -2147483648
  %12744 = select i1 %12743, i32 -2147483647, i32 %12742
  %12745 = sitofp i32 %12744 to double
  %12746 = fmul double %12741, %12745
  %12747 = fptosi double %12746 to i32
  store i32 %12747, i32* %12734, align 4
  %12748 = getelementptr inbounds i32, i32* %12732, i64 1
  %12749 = load i32, i32* %12748, align 4
  %12750 = icmp eq i32 %12749, -2147483648
  %12751 = select i1 %12750, i32 -2147483647, i32 %12749
  %12752 = sitofp i32 %12751 to double
  %12753 = fmul double %12741, %12752
  %12754 = fptosi double %12753 to i32
  %12755 = getelementptr inbounds i32, i32* %12734, i64 1
  store i32 %12754, i32* %12755, align 4
  %12756 = getelementptr inbounds i32, i32* %12732, i64 2
  %12757 = load i32, i32* %12756, align 4
  %12758 = icmp eq i32 %12757, -2147483648
  %12759 = select i1 %12758, i32 -2147483647, i32 %12757
  %12760 = sitofp i32 %12759 to double
  %12761 = fmul double %12741, %12760
  %12762 = fptosi double %12761 to i32
  %12763 = getelementptr inbounds i32, i32* %12734, i64 2
  store i32 %12762, i32* %12763, align 4
  %12764 = getelementptr inbounds i32, i32* %12732, i64 4
  %12765 = getelementptr inbounds i32, i32* %12734, i64 4
  %12766 = add nuw i32 %12733, 1
  %12767 = icmp eq i32 %12766, %12727
  br i1 %12767, label %12768, label %12731

12768:                                            ; preds = %12731
  %12769 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12692, align 8
  br label %12770

12770:                                            ; preds = %12768, %12721
  %12771 = phi %"class.blink::IntRect"* [ %12769, %12768 ], [ %12722, %12721 ]
  %12772 = getelementptr inbounds i32, i32* %12725, i64 %12691
  %12773 = add nuw nsw i32 %12724, 1
  %12774 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12771, i64 0, i32 1, i32 1
  %12775 = load i32, i32* %12774, align 4
  %12776 = icmp slt i32 %12773, %12775
  br i1 %12776, label %12721, label %12712

12777:                                            ; preds = %12714, %12687
  %12778 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12778, align 4
  br label %15491

12779:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %12780
    i32 1, label %12998
    i32 2, label %13222
  ]

12780:                                            ; preds = %12779
  %12781 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12782 = load i32, i32* %12781, align 8
  %12783 = sext i32 %12782 to i64
  %12784 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12785 = load i32, i32* %12784, align 8
  %12786 = sdiv i32 %12785, 4
  %12787 = sext i32 %12786 to i64
  %12788 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12789 = load i8*, i8** %12788, align 8
  %12790 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12791 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12790, align 8
  %12792 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12791, i64 0, i32 0, i32 1
  %12793 = load i32, i32* %12792, align 4
  %12794 = mul nsw i32 %12793, %12782
  %12795 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12796 = load i32, i32* %12795, align 4
  %12797 = add nsw i32 %12794, %12796
  %12798 = sext i32 %12797 to i64
  %12799 = getelementptr inbounds i8, i8* %12789, i64 %12798
  %12800 = icmp slt i32 %12785, 0
  %12801 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12802 = load i32, i32* %12801, align 8
  %12803 = icmp sgt i32 %12802, 1
  %12804 = and i1 %12800, %12803
  br i1 %12804, label %12805, label %12815

12805:                                            ; preds = %12780
  %12806 = add nsw i32 %12802, -1
  %12807 = sext i32 %12806 to i64
  %12808 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12809 = load i32, i32* %12808, align 4
  %12810 = sext i32 %12809 to i64
  %12811 = mul nsw i64 %12783, %12807
  %12812 = mul i64 %12811, %12810
  %12813 = sub i64 0, %12812
  %12814 = getelementptr inbounds i8, i8* %12799, i64 %12813
  br label %12817

12815:                                            ; preds = %12780
  %12816 = icmp sgt i32 %12802, 0
  br i1 %12816, label %12817, label %12996

12817:                                            ; preds = %12815, %12805
  %12818 = phi i8* [ %12814, %12805 ], [ %12799, %12815 ]
  %12819 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12820 = bitcast i8** %12819 to i32**
  %12821 = load i32*, i32** %12820, align 8
  %12822 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12823 = bitcast i8** %12822 to float**
  %12824 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12825

12825:                                            ; preds = %12837, %12817
  %12826 = phi i32 [ %12802, %12817 ], [ %12838, %12837 ]
  %12827 = phi %"class.blink::IntRect"* [ %12791, %12817 ], [ %12839, %12837 ]
  %12828 = phi %"class.blink::IntRect"* [ %12791, %12817 ], [ %12840, %12837 ]
  %12829 = phi i32 [ 0, %12817 ], [ %12849, %12837 ]
  %12830 = phi i32* [ %12821, %12817 ], [ %12842, %12837 ]
  %12831 = phi i8* [ %12818, %12817 ], [ %12848, %12837 ]
  %12832 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12828, i64 0, i32 1, i32 1
  %12833 = load i32, i32* %12832, align 4
  %12834 = icmp sgt i32 %12833, 0
  br i1 %12834, label %12851, label %12837

12835:                                            ; preds = %12987
  %12836 = load i32, i32* %12801, align 8
  br label %12837

12837:                                            ; preds = %12835, %12825
  %12838 = phi i32 [ %12826, %12825 ], [ %12836, %12835 ]
  %12839 = phi %"class.blink::IntRect"* [ %12827, %12825 ], [ %12988, %12835 ]
  %12840 = phi %"class.blink::IntRect"* [ %12828, %12825 ], [ %12988, %12835 ]
  %12841 = phi i8* [ %12831, %12825 ], [ %12989, %12835 ]
  %12842 = phi i32* [ %12830, %12825 ], [ %12990, %12835 ]
  %12843 = phi i32 [ %12833, %12825 ], [ %12993, %12835 ]
  %12844 = load i32, i32* %12824, align 4
  %12845 = sub nsw i32 %12844, %12843
  %12846 = sext i32 %12845 to i64
  %12847 = mul nsw i64 %12846, %12783
  %12848 = getelementptr inbounds i8, i8* %12841, i64 %12847
  %12849 = add nuw nsw i32 %12829, 1
  %12850 = icmp slt i32 %12849, %12838
  br i1 %12850, label %12825, label %12996

12851:                                            ; preds = %12825, %12987
  %12852 = phi i64 [ %12995, %12987 ], [ 0, %12825 ]
  %12853 = phi %"class.blink::IntRect"* [ %12988, %12987 ], [ %12827, %12825 ]
  %12854 = phi %"class.blink::IntRect"* [ %12988, %12987 ], [ %12828, %12825 ]
  %12855 = phi i32 [ %12991, %12987 ], [ 0, %12825 ]
  %12856 = phi i32* [ %12990, %12987 ], [ %12830, %12825 ]
  %12857 = phi i8* [ %12989, %12987 ], [ %12831, %12825 ]
  %12858 = mul i64 %12852, %12787
  %12859 = getelementptr i32, i32* %12830, i64 %12858
  %12860 = add i64 %12858, 1
  %12861 = getelementptr i32, i32* %12830, i64 %12860
  %12862 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12854, i64 0, i32 1, i32 0
  %12863 = load i32, i32* %12862, align 4
  %12864 = icmp eq i32 %12863, 0
  br i1 %12864, label %12987, label %12865

12865:                                            ; preds = %12851
  %12866 = load float*, float** %12823, align 8
  br label %12867

12867:                                            ; preds = %12867, %12865
  %12868 = phi i32 [ %12891, %12867 ], [ 0, %12865 ]
  %12869 = phi i8* [ %12889, %12867 ], [ %12857, %12865 ]
  %12870 = phi float* [ %12890, %12867 ], [ %12866, %12865 ]
  %12871 = getelementptr inbounds i8, i8* %12869, i64 2
  %12872 = load i8, i8* %12871, align 1
  %12873 = uitofp i8 %12872 to float
  %12874 = fmul float %12873, 0x3F70101020000000
  store float %12874, float* %12870, align 4
  %12875 = getelementptr inbounds i8, i8* %12869, i64 1
  %12876 = load i8, i8* %12875, align 1
  %12877 = uitofp i8 %12876 to float
  %12878 = fmul float %12877, 0x3F70101020000000
  %12879 = getelementptr inbounds float, float* %12870, i64 1
  store float %12878, float* %12879, align 4
  %12880 = load i8, i8* %12869, align 1
  %12881 = uitofp i8 %12880 to float
  %12882 = fmul float %12881, 0x3F70101020000000
  %12883 = getelementptr inbounds float, float* %12870, i64 2
  store float %12882, float* %12883, align 4
  %12884 = getelementptr inbounds i8, i8* %12869, i64 3
  %12885 = load i8, i8* %12884, align 1
  %12886 = uitofp i8 %12885 to float
  %12887 = fmul float %12886, 0x3F70101020000000
  %12888 = getelementptr inbounds float, float* %12870, i64 3
  store float %12887, float* %12888, align 4
  %12889 = getelementptr inbounds i8, i8* %12869, i64 4
  %12890 = getelementptr inbounds float, float* %12870, i64 4
  %12891 = add nuw i32 %12868, 1
  %12892 = icmp eq i32 %12891, %12863
  br i1 %12892, label %12893, label %12867

12893:                                            ; preds = %12867
  %12894 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12790, align 8
  %12895 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12894, i64 0, i32 1, i32 0
  %12896 = load i32, i32* %12895, align 4
  %12897 = icmp eq i32 %12896, 0
  br i1 %12897, label %12987, label %12898

12898:                                            ; preds = %12893
  %12899 = load float*, float** %12823, align 8
  %12900 = add i32 %12896, -1
  %12901 = zext i32 %12900 to i64
  %12902 = add nuw nsw i64 %12901, 1
  %12903 = icmp ult i64 %12902, 4
  br i1 %12903, label %12952, label %12904

12904:                                            ; preds = %12898
  %12905 = add i32 %12896, -1
  %12906 = zext i32 %12905 to i64
  %12907 = getelementptr i32, i32* %12861, i64 %12906
  %12908 = getelementptr float, float* %12899, i64 4
  %12909 = shl nuw nsw i64 %12906, 2
  %12910 = getelementptr float, float* %12908, i64 %12909
  %12911 = bitcast float* %12910 to i32*
  %12912 = icmp ult i32* %12859, %12911
  %12913 = bitcast i32* %12907 to float*
  %12914 = icmp ult float* %12899, %12913
  %12915 = and i1 %12912, %12914
  br i1 %12915, label %12952, label %12916

12916:                                            ; preds = %12904
  %12917 = and i64 %12902, 8589934588
  %12918 = shl nuw nsw i64 %12917, 2
  %12919 = getelementptr float, float* %12899, i64 %12918
  %12920 = getelementptr i32, i32* %12856, i64 %12917
  %12921 = trunc i64 %12917 to i32
  br label %12922

12922:                                            ; preds = %12922, %12916
  %12923 = phi i64 [ 0, %12916 ], [ %12948, %12922 ]
  %12924 = shl i64 %12923, 2
  %12925 = getelementptr float, float* %12899, i64 %12924
  %12926 = getelementptr i32, i32* %12856, i64 %12923
  %12927 = bitcast float* %12925 to <16 x float>*
  %12928 = load <16 x float>, <16 x float>* %12927, align 4
  %12929 = shufflevector <16 x float> %12928, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %12930 = shufflevector <16 x float> %12928, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %12931 = shufflevector <16 x float> %12928, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %12932 = shufflevector <16 x float> %12928, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %12933 = fmul <4 x float> %12929, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %12934 = fptoui <4 x float> %12933 to <4 x i32>
  %12935 = fmul <4 x float> %12930, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %12936 = fptoui <4 x float> %12935 to <4 x i32>
  %12937 = fmul <4 x float> %12931, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %12938 = fptoui <4 x float> %12937 to <4 x i32>
  %12939 = fmul <4 x float> %12932, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %12940 = fptoui <4 x float> %12939 to <4 x i32>
  %12941 = shl <4 x i32> %12940, <i32 30, i32 30, i32 30, i32 30>
  %12942 = shl <4 x i32> %12938, <i32 20, i32 20, i32 20, i32 20>
  %12943 = shl <4 x i32> %12936, <i32 10, i32 10, i32 10, i32 10>
  %12944 = or <4 x i32> %12943, %12934
  %12945 = or <4 x i32> %12944, %12942
  %12946 = or <4 x i32> %12945, %12941
  %12947 = bitcast i32* %12926 to <4 x i32>*
  store <4 x i32> %12946, <4 x i32>* %12947, align 4, !alias.scope !558, !noalias !561
  %12948 = add i64 %12923, 4
  %12949 = icmp eq i64 %12948, %12917
  br i1 %12949, label %12950, label %12922, !llvm.loop !563

12950:                                            ; preds = %12922
  %12951 = icmp eq i64 %12902, %12917
  br i1 %12951, label %12985, label %12952

12952:                                            ; preds = %12950, %12904, %12898
  %12953 = phi float* [ %12899, %12904 ], [ %12899, %12898 ], [ %12919, %12950 ]
  %12954 = phi i32* [ %12856, %12904 ], [ %12856, %12898 ], [ %12920, %12950 ]
  %12955 = phi i32 [ 0, %12904 ], [ 0, %12898 ], [ %12921, %12950 ]
  br label %12956

12956:                                            ; preds = %12952, %12956
  %12957 = phi float* [ %12981, %12956 ], [ %12953, %12952 ]
  %12958 = phi i32* [ %12982, %12956 ], [ %12954, %12952 ]
  %12959 = phi i32 [ %12983, %12956 ], [ %12955, %12952 ]
  %12960 = load float, float* %12957, align 4
  %12961 = fmul float %12960, 1.023000e+03
  %12962 = fptoui float %12961 to i32
  %12963 = getelementptr inbounds float, float* %12957, i64 1
  %12964 = load float, float* %12963, align 4
  %12965 = fmul float %12964, 1.023000e+03
  %12966 = fptoui float %12965 to i32
  %12967 = getelementptr inbounds float, float* %12957, i64 2
  %12968 = load float, float* %12967, align 4
  %12969 = fmul float %12968, 1.023000e+03
  %12970 = fptoui float %12969 to i32
  %12971 = getelementptr inbounds float, float* %12957, i64 3
  %12972 = load float, float* %12971, align 4
  %12973 = fmul float %12972, 3.000000e+00
  %12974 = fptoui float %12973 to i32
  %12975 = shl i32 %12974, 30
  %12976 = shl i32 %12970, 20
  %12977 = shl i32 %12966, 10
  %12978 = or i32 %12977, %12962
  %12979 = or i32 %12978, %12976
  %12980 = or i32 %12979, %12975
  store i32 %12980, i32* %12958, align 4
  %12981 = getelementptr inbounds float, float* %12957, i64 4
  %12982 = getelementptr inbounds i32, i32* %12958, i64 1
  %12983 = add nuw i32 %12959, 1
  %12984 = icmp eq i32 %12983, %12896
  br i1 %12984, label %12985, label %12956, !llvm.loop !564

12985:                                            ; preds = %12956, %12950
  %12986 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12790, align 8
  br label %12987

12987:                                            ; preds = %12985, %12893, %12851
  %12988 = phi %"class.blink::IntRect"* [ %12986, %12985 ], [ %12894, %12893 ], [ %12853, %12851 ]
  %12989 = getelementptr inbounds i8, i8* %12857, i64 %12783
  %12990 = getelementptr inbounds i32, i32* %12856, i64 %12787
  %12991 = add nuw nsw i32 %12855, 1
  %12992 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12988, i64 0, i32 1, i32 1
  %12993 = load i32, i32* %12992, align 4
  %12994 = icmp slt i32 %12991, %12993
  %12995 = add i64 %12852, 1
  br i1 %12994, label %12851, label %12835

12996:                                            ; preds = %12837, %12815
  %12997 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12997, align 4
  br label %15491

12998:                                            ; preds = %12779
  %12999 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %13000 = load i32, i32* %12999, align 8
  %13001 = sext i32 %13000 to i64
  %13002 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %13003 = load i32, i32* %13002, align 8
  %13004 = sdiv i32 %13003, 4
  %13005 = sext i32 %13004 to i64
  %13006 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13007 = load i8*, i8** %13006, align 8
  %13008 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %13009 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13008, align 8
  %13010 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13009, i64 0, i32 0, i32 1
  %13011 = load i32, i32* %13010, align 4
  %13012 = mul nsw i32 %13011, %13000
  %13013 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %13014 = load i32, i32* %13013, align 4
  %13015 = add nsw i32 %13012, %13014
  %13016 = sext i32 %13015 to i64
  %13017 = getelementptr inbounds i8, i8* %13007, i64 %13016
  %13018 = icmp slt i32 %13003, 0
  %13019 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %13020 = load i32, i32* %13019, align 8
  %13021 = icmp sgt i32 %13020, 1
  %13022 = and i1 %13018, %13021
  br i1 %13022, label %13023, label %13033

13023:                                            ; preds = %12998
  %13024 = add nsw i32 %13020, -1
  %13025 = sext i32 %13024 to i64
  %13026 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %13027 = load i32, i32* %13026, align 4
  %13028 = sext i32 %13027 to i64
  %13029 = mul nsw i64 %13001, %13025
  %13030 = mul i64 %13029, %13028
  %13031 = sub i64 0, %13030
  %13032 = getelementptr inbounds i8, i8* %13017, i64 %13031
  br label %13035

13033:                                            ; preds = %12998
  %13034 = icmp sgt i32 %13020, 0
  br i1 %13034, label %13035, label %13220

13035:                                            ; preds = %13033, %13023
  %13036 = phi i8* [ %13032, %13023 ], [ %13017, %13033 ]
  %13037 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %13038 = bitcast i8** %13037 to i32**
  %13039 = load i32*, i32** %13038, align 8
  %13040 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %13041 = bitcast i8** %13040 to float**
  %13042 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %13043

13043:                                            ; preds = %13055, %13035
  %13044 = phi i32 [ %13020, %13035 ], [ %13056, %13055 ]
  %13045 = phi %"class.blink::IntRect"* [ %13009, %13035 ], [ %13057, %13055 ]
  %13046 = phi %"class.blink::IntRect"* [ %13009, %13035 ], [ %13058, %13055 ]
  %13047 = phi i32 [ 0, %13035 ], [ %13067, %13055 ]
  %13048 = phi i32* [ %13039, %13035 ], [ %13060, %13055 ]
  %13049 = phi i8* [ %13036, %13035 ], [ %13066, %13055 ]
  %13050 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13046, i64 0, i32 1, i32 1
  %13051 = load i32, i32* %13050, align 4
  %13052 = icmp sgt i32 %13051, 0
  br i1 %13052, label %13069, label %13055

13053:                                            ; preds = %13211
  %13054 = load i32, i32* %13019, align 8
  br label %13055

13055:                                            ; preds = %13053, %13043
  %13056 = phi i32 [ %13044, %13043 ], [ %13054, %13053 ]
  %13057 = phi %"class.blink::IntRect"* [ %13045, %13043 ], [ %13212, %13053 ]
  %13058 = phi %"class.blink::IntRect"* [ %13046, %13043 ], [ %13212, %13053 ]
  %13059 = phi i8* [ %13049, %13043 ], [ %13213, %13053 ]
  %13060 = phi i32* [ %13048, %13043 ], [ %13214, %13053 ]
  %13061 = phi i32 [ %13051, %13043 ], [ %13217, %13053 ]
  %13062 = load i32, i32* %13042, align 4
  %13063 = sub nsw i32 %13062, %13061
  %13064 = sext i32 %13063 to i64
  %13065 = mul nsw i64 %13064, %13001
  %13066 = getelementptr inbounds i8, i8* %13059, i64 %13065
  %13067 = add nuw nsw i32 %13047, 1
  %13068 = icmp slt i32 %13067, %13056
  br i1 %13068, label %13043, label %13220

13069:                                            ; preds = %13043, %13211
  %13070 = phi i64 [ %13219, %13211 ], [ 0, %13043 ]
  %13071 = phi %"class.blink::IntRect"* [ %13212, %13211 ], [ %13045, %13043 ]
  %13072 = phi %"class.blink::IntRect"* [ %13212, %13211 ], [ %13046, %13043 ]
  %13073 = phi i32 [ %13215, %13211 ], [ 0, %13043 ]
  %13074 = phi i32* [ %13214, %13211 ], [ %13048, %13043 ]
  %13075 = phi i8* [ %13213, %13211 ], [ %13049, %13043 ]
  %13076 = mul i64 %13070, %13005
  %13077 = getelementptr i32, i32* %13048, i64 %13076
  %13078 = add i64 %13076, 1
  %13079 = getelementptr i32, i32* %13048, i64 %13078
  %13080 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13072, i64 0, i32 1, i32 0
  %13081 = load i32, i32* %13080, align 4
  %13082 = icmp eq i32 %13081, 0
  br i1 %13082, label %13211, label %13083

13083:                                            ; preds = %13069
  %13084 = load float*, float** %13041, align 8
  br label %13085

13085:                                            ; preds = %13085, %13083
  %13086 = phi i32 [ %13109, %13085 ], [ 0, %13083 ]
  %13087 = phi i8* [ %13107, %13085 ], [ %13075, %13083 ]
  %13088 = phi float* [ %13108, %13085 ], [ %13084, %13083 ]
  %13089 = getelementptr inbounds i8, i8* %13087, i64 2
  %13090 = load i8, i8* %13089, align 1
  %13091 = uitofp i8 %13090 to float
  %13092 = fmul float %13091, 0x3F70101020000000
  store float %13092, float* %13088, align 4
  %13093 = getelementptr inbounds i8, i8* %13087, i64 1
  %13094 = load i8, i8* %13093, align 1
  %13095 = uitofp i8 %13094 to float
  %13096 = fmul float %13095, 0x3F70101020000000
  %13097 = getelementptr inbounds float, float* %13088, i64 1
  store float %13096, float* %13097, align 4
  %13098 = load i8, i8* %13087, align 1
  %13099 = uitofp i8 %13098 to float
  %13100 = fmul float %13099, 0x3F70101020000000
  %13101 = getelementptr inbounds float, float* %13088, i64 2
  store float %13100, float* %13101, align 4
  %13102 = getelementptr inbounds i8, i8* %13087, i64 3
  %13103 = load i8, i8* %13102, align 1
  %13104 = uitofp i8 %13103 to float
  %13105 = fmul float %13104, 0x3F70101020000000
  %13106 = getelementptr inbounds float, float* %13088, i64 3
  store float %13105, float* %13106, align 4
  %13107 = getelementptr inbounds i8, i8* %13087, i64 4
  %13108 = getelementptr inbounds float, float* %13088, i64 4
  %13109 = add nuw i32 %13086, 1
  %13110 = icmp eq i32 %13109, %13081
  br i1 %13110, label %13111, label %13085

13111:                                            ; preds = %13085
  %13112 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13008, align 8
  %13113 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13112, i64 0, i32 1, i32 0
  %13114 = load i32, i32* %13113, align 4
  %13115 = icmp eq i32 %13114, 0
  br i1 %13115, label %13211, label %13116

13116:                                            ; preds = %13111
  %13117 = load float*, float** %13041, align 8
  %13118 = add i32 %13114, -1
  %13119 = zext i32 %13118 to i64
  %13120 = add nuw nsw i64 %13119, 1
  %13121 = icmp ult i64 %13120, 4
  br i1 %13121, label %13173, label %13122

13122:                                            ; preds = %13116
  %13123 = add i32 %13114, -1
  %13124 = zext i32 %13123 to i64
  %13125 = getelementptr i32, i32* %13079, i64 %13124
  %13126 = getelementptr float, float* %13117, i64 4
  %13127 = shl nuw nsw i64 %13124, 2
  %13128 = getelementptr float, float* %13126, i64 %13127
  %13129 = bitcast float* %13128 to i32*
  %13130 = icmp ult i32* %13077, %13129
  %13131 = bitcast i32* %13125 to float*
  %13132 = icmp ult float* %13117, %13131
  %13133 = and i1 %13130, %13132
  br i1 %13133, label %13173, label %13134

13134:                                            ; preds = %13122
  %13135 = and i64 %13120, 8589934588
  %13136 = shl nuw nsw i64 %13135, 2
  %13137 = getelementptr float, float* %13117, i64 %13136
  %13138 = getelementptr i32, i32* %13074, i64 %13135
  %13139 = trunc i64 %13135 to i32
  br label %13140

13140:                                            ; preds = %13140, %13134
  %13141 = phi i64 [ 0, %13134 ], [ %13169, %13140 ]
  %13142 = shl i64 %13141, 2
  %13143 = getelementptr float, float* %13117, i64 %13142
  %13144 = getelementptr i32, i32* %13074, i64 %13141
  %13145 = bitcast float* %13143 to <16 x float>*
  %13146 = load <16 x float>, <16 x float>* %13145, align 4
  %13147 = shufflevector <16 x float> %13146, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13148 = shufflevector <16 x float> %13146, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13149 = shufflevector <16 x float> %13146, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %13150 = shufflevector <16 x float> %13146, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13151 = fmul <4 x float> %13147, %13150
  %13152 = fmul <4 x float> %13151, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %13153 = fptoui <4 x float> %13152 to <4 x i32>
  %13154 = fmul <4 x float> %13150, %13148
  %13155 = fmul <4 x float> %13154, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %13156 = fptoui <4 x float> %13155 to <4 x i32>
  %13157 = fmul <4 x float> %13150, %13149
  %13158 = fmul <4 x float> %13157, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %13159 = fptoui <4 x float> %13158 to <4 x i32>
  %13160 = fmul <4 x float> %13150, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %13161 = fptoui <4 x float> %13160 to <4 x i32>
  %13162 = shl <4 x i32> %13161, <i32 30, i32 30, i32 30, i32 30>
  %13163 = shl <4 x i32> %13159, <i32 20, i32 20, i32 20, i32 20>
  %13164 = shl <4 x i32> %13156, <i32 10, i32 10, i32 10, i32 10>
  %13165 = or <4 x i32> %13162, %13153
  %13166 = or <4 x i32> %13165, %13164
  %13167 = or <4 x i32> %13166, %13163
  %13168 = bitcast i32* %13144 to <4 x i32>*
  store <4 x i32> %13167, <4 x i32>* %13168, align 4, !alias.scope !565, !noalias !568
  %13169 = add i64 %13141, 4
  %13170 = icmp eq i64 %13169, %13135
  br i1 %13170, label %13171, label %13140, !llvm.loop !570

13171:                                            ; preds = %13140
  %13172 = icmp eq i64 %13120, %13135
  br i1 %13172, label %13209, label %13173

13173:                                            ; preds = %13171, %13122, %13116
  %13174 = phi float* [ %13117, %13122 ], [ %13117, %13116 ], [ %13137, %13171 ]
  %13175 = phi i32* [ %13074, %13122 ], [ %13074, %13116 ], [ %13138, %13171 ]
  %13176 = phi i32 [ 0, %13122 ], [ 0, %13116 ], [ %13139, %13171 ]
  br label %13177

13177:                                            ; preds = %13173, %13177
  %13178 = phi float* [ %13205, %13177 ], [ %13174, %13173 ]
  %13179 = phi i32* [ %13206, %13177 ], [ %13175, %13173 ]
  %13180 = phi i32 [ %13207, %13177 ], [ %13176, %13173 ]
  %13181 = load float, float* %13178, align 4
  %13182 = getelementptr inbounds float, float* %13178, i64 3
  %13183 = load float, float* %13182, align 4
  %13184 = fmul float %13181, %13183
  %13185 = fmul float %13184, 1.023000e+03
  %13186 = fptoui float %13185 to i32
  %13187 = getelementptr inbounds float, float* %13178, i64 1
  %13188 = load float, float* %13187, align 4
  %13189 = fmul float %13183, %13188
  %13190 = fmul float %13189, 1.023000e+03
  %13191 = fptoui float %13190 to i32
  %13192 = getelementptr inbounds float, float* %13178, i64 2
  %13193 = load float, float* %13192, align 4
  %13194 = fmul float %13183, %13193
  %13195 = fmul float %13194, 1.023000e+03
  %13196 = fptoui float %13195 to i32
  %13197 = fmul float %13183, 3.000000e+00
  %13198 = fptoui float %13197 to i32
  %13199 = shl i32 %13198, 30
  %13200 = shl i32 %13196, 20
  %13201 = shl i32 %13191, 10
  %13202 = or i32 %13199, %13186
  %13203 = or i32 %13202, %13201
  %13204 = or i32 %13203, %13200
  store i32 %13204, i32* %13179, align 4
  %13205 = getelementptr inbounds float, float* %13178, i64 4
  %13206 = getelementptr inbounds i32, i32* %13179, i64 1
  %13207 = add nuw i32 %13180, 1
  %13208 = icmp eq i32 %13207, %13114
  br i1 %13208, label %13209, label %13177, !llvm.loop !571

13209:                                            ; preds = %13177, %13171
  %13210 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13008, align 8
  br label %13211

13211:                                            ; preds = %13209, %13111, %13069
  %13212 = phi %"class.blink::IntRect"* [ %13210, %13209 ], [ %13112, %13111 ], [ %13071, %13069 ]
  %13213 = getelementptr inbounds i8, i8* %13075, i64 %13001
  %13214 = getelementptr inbounds i32, i32* %13074, i64 %13005
  %13215 = add nuw nsw i32 %13073, 1
  %13216 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13212, i64 0, i32 1, i32 1
  %13217 = load i32, i32* %13216, align 4
  %13218 = icmp slt i32 %13215, %13217
  %13219 = add i64 %13070, 1
  br i1 %13218, label %13069, label %13053

13220:                                            ; preds = %13055, %13033
  %13221 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %13221, align 4
  br label %15491

13222:                                            ; preds = %12779
  %13223 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %13224 = load i32, i32* %13223, align 8
  %13225 = sext i32 %13224 to i64
  %13226 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %13227 = load i32, i32* %13226, align 8
  %13228 = sdiv i32 %13227, 4
  %13229 = sext i32 %13228 to i64
  %13230 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13231 = load i8*, i8** %13230, align 8
  %13232 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %13233 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13232, align 8
  %13234 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13233, i64 0, i32 0, i32 1
  %13235 = load i32, i32* %13234, align 4
  %13236 = mul nsw i32 %13235, %13224
  %13237 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %13238 = load i32, i32* %13237, align 4
  %13239 = add nsw i32 %13236, %13238
  %13240 = sext i32 %13239 to i64
  %13241 = getelementptr inbounds i8, i8* %13231, i64 %13240
  %13242 = icmp slt i32 %13227, 0
  %13243 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %13244 = load i32, i32* %13243, align 8
  %13245 = icmp sgt i32 %13244, 1
  %13246 = and i1 %13242, %13245
  br i1 %13246, label %13247, label %13257

13247:                                            ; preds = %13222
  %13248 = add nsw i32 %13244, -1
  %13249 = sext i32 %13248 to i64
  %13250 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %13251 = load i32, i32* %13250, align 4
  %13252 = sext i32 %13251 to i64
  %13253 = mul nsw i64 %13225, %13249
  %13254 = mul i64 %13253, %13252
  %13255 = sub i64 0, %13254
  %13256 = getelementptr inbounds i8, i8* %13241, i64 %13255
  br label %13259

13257:                                            ; preds = %13222
  %13258 = icmp sgt i32 %13244, 0
  br i1 %13258, label %13259, label %13444

13259:                                            ; preds = %13257, %13247
  %13260 = phi i8* [ %13256, %13247 ], [ %13241, %13257 ]
  %13261 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %13262 = bitcast i8** %13261 to i32**
  %13263 = load i32*, i32** %13262, align 8
  %13264 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %13265 = bitcast i8** %13264 to float**
  %13266 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %13267

13267:                                            ; preds = %13279, %13259
  %13268 = phi i32 [ %13244, %13259 ], [ %13280, %13279 ]
  %13269 = phi %"class.blink::IntRect"* [ %13233, %13259 ], [ %13281, %13279 ]
  %13270 = phi %"class.blink::IntRect"* [ %13233, %13259 ], [ %13282, %13279 ]
  %13271 = phi i32 [ 0, %13259 ], [ %13291, %13279 ]
  %13272 = phi i32* [ %13263, %13259 ], [ %13284, %13279 ]
  %13273 = phi i8* [ %13260, %13259 ], [ %13290, %13279 ]
  %13274 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13270, i64 0, i32 1, i32 1
  %13275 = load i32, i32* %13274, align 4
  %13276 = icmp sgt i32 %13275, 0
  br i1 %13276, label %13293, label %13279

13277:                                            ; preds = %13435
  %13278 = load i32, i32* %13243, align 8
  br label %13279

13279:                                            ; preds = %13277, %13267
  %13280 = phi i32 [ %13268, %13267 ], [ %13278, %13277 ]
  %13281 = phi %"class.blink::IntRect"* [ %13269, %13267 ], [ %13436, %13277 ]
  %13282 = phi %"class.blink::IntRect"* [ %13270, %13267 ], [ %13436, %13277 ]
  %13283 = phi i8* [ %13273, %13267 ], [ %13437, %13277 ]
  %13284 = phi i32* [ %13272, %13267 ], [ %13438, %13277 ]
  %13285 = phi i32 [ %13275, %13267 ], [ %13441, %13277 ]
  %13286 = load i32, i32* %13266, align 4
  %13287 = sub nsw i32 %13286, %13285
  %13288 = sext i32 %13287 to i64
  %13289 = mul nsw i64 %13288, %13225
  %13290 = getelementptr inbounds i8, i8* %13283, i64 %13289
  %13291 = add nuw nsw i32 %13271, 1
  %13292 = icmp slt i32 %13291, %13280
  br i1 %13292, label %13267, label %13444

13293:                                            ; preds = %13267, %13435
  %13294 = phi i64 [ %13443, %13435 ], [ 0, %13267 ]
  %13295 = phi %"class.blink::IntRect"* [ %13436, %13435 ], [ %13269, %13267 ]
  %13296 = phi %"class.blink::IntRect"* [ %13436, %13435 ], [ %13270, %13267 ]
  %13297 = phi i32 [ %13439, %13435 ], [ 0, %13267 ]
  %13298 = phi i32* [ %13438, %13435 ], [ %13272, %13267 ]
  %13299 = phi i8* [ %13437, %13435 ], [ %13273, %13267 ]
  %13300 = mul i64 %13294, %13229
  %13301 = getelementptr i32, i32* %13272, i64 %13300
  %13302 = add i64 %13300, 1
  %13303 = getelementptr i32, i32* %13272, i64 %13302
  %13304 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13296, i64 0, i32 1, i32 0
  %13305 = load i32, i32* %13304, align 4
  %13306 = icmp eq i32 %13305, 0
  br i1 %13306, label %13435, label %13307

13307:                                            ; preds = %13293
  %13308 = load float*, float** %13265, align 8
  br label %13309

13309:                                            ; preds = %13309, %13307
  %13310 = phi i32 [ %13333, %13309 ], [ 0, %13307 ]
  %13311 = phi i8* [ %13331, %13309 ], [ %13299, %13307 ]
  %13312 = phi float* [ %13332, %13309 ], [ %13308, %13307 ]
  %13313 = getelementptr inbounds i8, i8* %13311, i64 2
  %13314 = load i8, i8* %13313, align 1
  %13315 = uitofp i8 %13314 to float
  %13316 = fmul float %13315, 0x3F70101020000000
  store float %13316, float* %13312, align 4
  %13317 = getelementptr inbounds i8, i8* %13311, i64 1
  %13318 = load i8, i8* %13317, align 1
  %13319 = uitofp i8 %13318 to float
  %13320 = fmul float %13319, 0x3F70101020000000
  %13321 = getelementptr inbounds float, float* %13312, i64 1
  store float %13320, float* %13321, align 4
  %13322 = load i8, i8* %13311, align 1
  %13323 = uitofp i8 %13322 to float
  %13324 = fmul float %13323, 0x3F70101020000000
  %13325 = getelementptr inbounds float, float* %13312, i64 2
  store float %13324, float* %13325, align 4
  %13326 = getelementptr inbounds i8, i8* %13311, i64 3
  %13327 = load i8, i8* %13326, align 1
  %13328 = uitofp i8 %13327 to float
  %13329 = fmul float %13328, 0x3F70101020000000
  %13330 = getelementptr inbounds float, float* %13312, i64 3
  store float %13329, float* %13330, align 4
  %13331 = getelementptr inbounds i8, i8* %13311, i64 4
  %13332 = getelementptr inbounds float, float* %13312, i64 4
  %13333 = add nuw i32 %13310, 1
  %13334 = icmp eq i32 %13333, %13305
  br i1 %13334, label %13335, label %13309

13335:                                            ; preds = %13309
  %13336 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13232, align 8
  %13337 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13336, i64 0, i32 1, i32 0
  %13338 = load i32, i32* %13337, align 4
  %13339 = icmp eq i32 %13338, 0
  br i1 %13339, label %13435, label %13340

13340:                                            ; preds = %13335
  %13341 = load float*, float** %13265, align 8
  %13342 = add i32 %13338, -1
  %13343 = zext i32 %13342 to i64
  %13344 = add nuw nsw i64 %13343, 1
  %13345 = icmp ult i64 %13344, 4
  br i1 %13345, label %13397, label %13346

13346:                                            ; preds = %13340
  %13347 = add i32 %13338, -1
  %13348 = zext i32 %13347 to i64
  %13349 = getelementptr i32, i32* %13303, i64 %13348
  %13350 = getelementptr float, float* %13341, i64 4
  %13351 = shl nuw nsw i64 %13348, 2
  %13352 = getelementptr float, float* %13350, i64 %13351
  %13353 = bitcast float* %13352 to i32*
  %13354 = icmp ult i32* %13301, %13353
  %13355 = bitcast i32* %13349 to float*
  %13356 = icmp ult float* %13341, %13355
  %13357 = and i1 %13354, %13356
  br i1 %13357, label %13397, label %13358

13358:                                            ; preds = %13346
  %13359 = and i64 %13344, 8589934588
  %13360 = shl nuw nsw i64 %13359, 2
  %13361 = getelementptr float, float* %13341, i64 %13360
  %13362 = getelementptr i32, i32* %13298, i64 %13359
  %13363 = trunc i64 %13359 to i32
  br label %13364

13364:                                            ; preds = %13364, %13358
  %13365 = phi i64 [ 0, %13358 ], [ %13393, %13364 ]
  %13366 = shl i64 %13365, 2
  %13367 = getelementptr i32, i32* %13298, i64 %13365
  %13368 = getelementptr inbounds float, float* %13341, i64 %13366
  %13369 = bitcast float* %13368 to <16 x float>*
  %13370 = load <16 x float>, <16 x float>* %13369, align 4
  %13371 = shufflevector <16 x float> %13370, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13372 = shufflevector <16 x float> %13370, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13373 = shufflevector <16 x float> %13370, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %13374 = shufflevector <16 x float> %13370, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13375 = fcmp une <4 x float> %13374, zeroinitializer
  %13376 = fdiv <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>, %13374
  %13377 = select <4 x i1> %13375, <4 x float> %13376, <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %13378 = fmul <4 x float> %13371, %13377
  %13379 = fptoui <4 x float> %13378 to <4 x i32>
  %13380 = fmul <4 x float> %13372, %13377
  %13381 = fptoui <4 x float> %13380 to <4 x i32>
  %13382 = fmul <4 x float> %13377, %13373
  %13383 = fptoui <4 x float> %13382 to <4 x i32>
  %13384 = fmul <4 x float> %13374, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %13385 = fptoui <4 x float> %13384 to <4 x i32>
  %13386 = shl <4 x i32> %13385, <i32 30, i32 30, i32 30, i32 30>
  %13387 = shl <4 x i32> %13383, <i32 20, i32 20, i32 20, i32 20>
  %13388 = shl <4 x i32> %13381, <i32 10, i32 10, i32 10, i32 10>
  %13389 = or <4 x i32> %13386, %13379
  %13390 = or <4 x i32> %13389, %13388
  %13391 = or <4 x i32> %13390, %13387
  %13392 = bitcast i32* %13367 to <4 x i32>*
  store <4 x i32> %13391, <4 x i32>* %13392, align 4, !alias.scope !572, !noalias !575
  %13393 = add i64 %13365, 4
  %13394 = icmp eq i64 %13393, %13359
  br i1 %13394, label %13395, label %13364, !llvm.loop !577

13395:                                            ; preds = %13364
  %13396 = icmp eq i64 %13344, %13359
  br i1 %13396, label %13433, label %13397

13397:                                            ; preds = %13395, %13346, %13340
  %13398 = phi float* [ %13341, %13346 ], [ %13341, %13340 ], [ %13361, %13395 ]
  %13399 = phi i32* [ %13298, %13346 ], [ %13298, %13340 ], [ %13362, %13395 ]
  %13400 = phi i32 [ 0, %13346 ], [ 0, %13340 ], [ %13363, %13395 ]
  br label %13401

13401:                                            ; preds = %13397, %13401
  %13402 = phi float* [ %13429, %13401 ], [ %13398, %13397 ]
  %13403 = phi i32* [ %13430, %13401 ], [ %13399, %13397 ]
  %13404 = phi i32 [ %13431, %13401 ], [ %13400, %13397 ]
  %13405 = getelementptr inbounds float, float* %13402, i64 3
  %13406 = load float, float* %13405, align 4
  %13407 = fcmp une float %13406, 0.000000e+00
  %13408 = fdiv float 1.023000e+03, %13406
  %13409 = select i1 %13407, float %13408, float 1.023000e+03
  %13410 = load float, float* %13402, align 4
  %13411 = fmul float %13410, %13409
  %13412 = fptoui float %13411 to i32
  %13413 = getelementptr inbounds float, float* %13402, i64 1
  %13414 = load float, float* %13413, align 4
  %13415 = fmul float %13414, %13409
  %13416 = fptoui float %13415 to i32
  %13417 = getelementptr inbounds float, float* %13402, i64 2
  %13418 = load float, float* %13417, align 4
  %13419 = fmul float %13409, %13418
  %13420 = fptoui float %13419 to i32
  %13421 = fmul float %13406, 3.000000e+00
  %13422 = fptoui float %13421 to i32
  %13423 = shl i32 %13422, 30
  %13424 = shl i32 %13420, 20
  %13425 = shl i32 %13416, 10
  %13426 = or i32 %13423, %13412
  %13427 = or i32 %13426, %13425
  %13428 = or i32 %13427, %13424
  store i32 %13428, i32* %13403, align 4
  %13429 = getelementptr inbounds float, float* %13402, i64 4
  %13430 = getelementptr inbounds i32, i32* %13403, i64 1
  %13431 = add nuw i32 %13404, 1
  %13432 = icmp eq i32 %13431, %13338
  br i1 %13432, label %13433, label %13401, !llvm.loop !578

13433:                                            ; preds = %13401, %13395
  %13434 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13232, align 8
  br label %13435

13435:                                            ; preds = %13433, %13335, %13293
  %13436 = phi %"class.blink::IntRect"* [ %13434, %13433 ], [ %13336, %13335 ], [ %13295, %13293 ]
  %13437 = getelementptr inbounds i8, i8* %13299, i64 %13225
  %13438 = getelementptr inbounds i32, i32* %13298, i64 %13229
  %13439 = add nuw nsw i32 %13297, 1
  %13440 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13436, i64 0, i32 1, i32 1
  %13441 = load i32, i32* %13440, align 4
  %13442 = icmp slt i32 %13439, %13441
  %13443 = add i64 %13294, 1
  br i1 %13442, label %13293, label %13277

13444:                                            ; preds = %13279, %13257
  %13445 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %13445, align 4
  br label %15491

13446:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %13447
    i32 1, label %13739
    i32 2, label %14059
  ]

13447:                                            ; preds = %13446
  %13448 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %13449 = load i32, i32* %13448, align 8
  %13450 = sext i32 %13449 to i64
  %13451 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %13452 = load i32, i32* %13451, align 8
  %13453 = sext i32 %13452 to i64
  %13454 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13455 = load i8*, i8** %13454, align 8
  %13456 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %13457 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13456, align 8
  %13458 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13457, i64 0, i32 0, i32 1
  %13459 = load i32, i32* %13458, align 4
  %13460 = mul nsw i32 %13459, %13449
  %13461 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %13462 = load i32, i32* %13461, align 4
  %13463 = add nsw i32 %13460, %13462
  %13464 = sext i32 %13463 to i64
  %13465 = getelementptr inbounds i8, i8* %13455, i64 %13464
  %13466 = icmp slt i32 %13452, 0
  %13467 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %13468 = load i32, i32* %13467, align 8
  %13469 = icmp sgt i32 %13468, 1
  %13470 = and i1 %13466, %13469
  br i1 %13470, label %13471, label %13481

13471:                                            ; preds = %13447
  %13472 = add nsw i32 %13468, -1
  %13473 = sext i32 %13472 to i64
  %13474 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %13475 = load i32, i32* %13474, align 4
  %13476 = sext i32 %13475 to i64
  %13477 = mul nsw i64 %13450, %13473
  %13478 = mul i64 %13477, %13476
  %13479 = sub i64 0, %13478
  %13480 = getelementptr inbounds i8, i8* %13465, i64 %13479
  br label %13483

13481:                                            ; preds = %13447
  %13482 = icmp sgt i32 %13468, 0
  br i1 %13482, label %13483, label %13737

13483:                                            ; preds = %13481, %13471
  %13484 = phi i8* [ %13480, %13471 ], [ %13465, %13481 ]
  %13485 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %13486 = load i8*, i8** %13485, align 8
  %13487 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %13488 = bitcast i8** %13487 to i32**
  %13489 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %13490

13490:                                            ; preds = %13501, %13483
  %13491 = phi i32 [ %13468, %13483 ], [ %13502, %13501 ]
  %13492 = phi %"class.blink::IntRect"* [ %13457, %13483 ], [ %13503, %13501 ]
  %13493 = phi i32 [ 0, %13483 ], [ %13512, %13501 ]
  %13494 = phi i8* [ %13486, %13483 ], [ %13505, %13501 ]
  %13495 = phi i8* [ %13484, %13483 ], [ %13511, %13501 ]
  %13496 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13492, i64 0, i32 1, i32 1
  %13497 = load i32, i32* %13496, align 4
  %13498 = icmp sgt i32 %13497, 0
  br i1 %13498, label %13514, label %13501

13499:                                            ; preds = %13729
  %13500 = load i32, i32* %13467, align 8
  br label %13501

13501:                                            ; preds = %13499, %13490
  %13502 = phi i32 [ %13491, %13490 ], [ %13500, %13499 ]
  %13503 = phi %"class.blink::IntRect"* [ %13492, %13490 ], [ %13730, %13499 ]
  %13504 = phi i8* [ %13495, %13490 ], [ %13731, %13499 ]
  %13505 = phi i8* [ %13494, %13490 ], [ %13732, %13499 ]
  %13506 = phi i32 [ %13497, %13490 ], [ %13735, %13499 ]
  %13507 = load i32, i32* %13489, align 4
  %13508 = sub nsw i32 %13507, %13506
  %13509 = sext i32 %13508 to i64
  %13510 = mul nsw i64 %13509, %13450
  %13511 = getelementptr inbounds i8, i8* %13504, i64 %13510
  %13512 = add nuw nsw i32 %13493, 1
  %13513 = icmp slt i32 %13512, %13502
  br i1 %13513, label %13490, label %13737

13514:                                            ; preds = %13490, %13729
  %13515 = phi %"class.blink::IntRect"* [ %13730, %13729 ], [ %13492, %13490 ]
  %13516 = phi i32 [ %13733, %13729 ], [ 0, %13490 ]
  %13517 = phi i8* [ %13732, %13729 ], [ %13494, %13490 ]
  %13518 = phi i8* [ %13731, %13729 ], [ %13495, %13490 ]
  %13519 = load i32*, i32** %13488, align 8
  %13520 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13515, i64 0, i32 1, i32 0
  %13521 = load i32, i32* %13520, align 4
  %13522 = bitcast i8* %13518 to i32*
  %13523 = and i32 %13521, -4
  %13524 = icmp eq i32 %13523, 0
  br i1 %13524, label %13582, label %13525

13525:                                            ; preds = %13514
  %13526 = add i32 %13523, -1
  %13527 = lshr i32 %13526, 2
  %13528 = add nuw nsw i32 %13527, 1
  %13529 = and i32 %13528, 1
  %13530 = icmp eq i32 %13527, 0
  br i1 %13530, label %13563, label %13531

13531:                                            ; preds = %13525
  %13532 = sub nuw nsw i32 %13528, %13529
  br label %13533

13533:                                            ; preds = %13533, %13531
  %13534 = phi i32* [ %13522, %13531 ], [ %13559, %13533 ]
  %13535 = phi i32* [ %13519, %13531 ], [ %13560, %13533 ]
  %13536 = phi i32 [ %13532, %13531 ], [ %13561, %13533 ]
  %13537 = bitcast i32* %13535 to <2 x i64>*
  %13538 = bitcast i32* %13534 to <2 x i64>*
  %13539 = load <2 x i64>, <2 x i64>* %13538, align 1
  %13540 = bitcast <2 x i64> %13539 to <8 x i16>
  %13541 = shufflevector <8 x i16> %13540, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13542 = shufflevector <8 x i16> %13541, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13543 = bitcast <8 x i16> %13542 to <2 x i64>
  %13544 = and <2 x i64> %13543, <i64 71777214294589695, i64 71777214294589695>
  %13545 = and <2 x i64> %13539, <i64 -71777214294589696, i64 -71777214294589696>
  %13546 = or <2 x i64> %13544, %13545
  store <2 x i64> %13546, <2 x i64>* %13537, align 1
  %13547 = getelementptr inbounds i32, i32* %13534, i64 4
  %13548 = getelementptr inbounds i32, i32* %13535, i64 4
  %13549 = bitcast i32* %13548 to <2 x i64>*
  %13550 = bitcast i32* %13547 to <2 x i64>*
  %13551 = load <2 x i64>, <2 x i64>* %13550, align 1
  %13552 = bitcast <2 x i64> %13551 to <8 x i16>
  %13553 = shufflevector <8 x i16> %13552, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13554 = shufflevector <8 x i16> %13553, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13555 = bitcast <8 x i16> %13554 to <2 x i64>
  %13556 = and <2 x i64> %13555, <i64 71777214294589695, i64 71777214294589695>
  %13557 = and <2 x i64> %13551, <i64 -71777214294589696, i64 -71777214294589696>
  %13558 = or <2 x i64> %13556, %13557
  store <2 x i64> %13558, <2 x i64>* %13549, align 1
  %13559 = getelementptr inbounds i32, i32* %13534, i64 8
  %13560 = getelementptr inbounds i32, i32* %13535, i64 8
  %13561 = add i32 %13536, -2
  %13562 = icmp eq i32 %13561, 0
  br i1 %13562, label %13563, label %13533

13563:                                            ; preds = %13533, %13525
  %13564 = phi i32* [ undef, %13525 ], [ %13559, %13533 ]
  %13565 = phi i32* [ undef, %13525 ], [ %13560, %13533 ]
  %13566 = phi i32* [ %13522, %13525 ], [ %13559, %13533 ]
  %13567 = phi i32* [ %13519, %13525 ], [ %13560, %13533 ]
  %13568 = icmp eq i32 %13529, 0
  br i1 %13568, label %13582, label %13569

13569:                                            ; preds = %13563
  %13570 = bitcast i32* %13567 to <2 x i64>*
  %13571 = bitcast i32* %13566 to <2 x i64>*
  %13572 = load <2 x i64>, <2 x i64>* %13571, align 1
  %13573 = bitcast <2 x i64> %13572 to <8 x i16>
  %13574 = shufflevector <8 x i16> %13573, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13575 = shufflevector <8 x i16> %13574, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13576 = bitcast <8 x i16> %13575 to <2 x i64>
  %13577 = and <2 x i64> %13576, <i64 71777214294589695, i64 71777214294589695>
  %13578 = and <2 x i64> %13572, <i64 -71777214294589696, i64 -71777214294589696>
  %13579 = or <2 x i64> %13577, %13578
  store <2 x i64> %13579, <2 x i64>* %13570, align 1
  %13580 = getelementptr inbounds i32, i32* %13567, i64 4
  %13581 = getelementptr inbounds i32, i32* %13566, i64 4
  br label %13582

13582:                                            ; preds = %13569, %13563, %13514
  %13583 = phi i32* [ %13522, %13514 ], [ %13564, %13563 ], [ %13581, %13569 ]
  %13584 = phi i32* [ %13519, %13514 ], [ %13565, %13563 ], [ %13580, %13569 ]
  %13585 = sub i32 %13521, %13523
  %13586 = icmp eq i32 %13585, 0
  br i1 %13586, label %13669, label %13587

13587:                                            ; preds = %13582
  %13588 = zext i32 %13585 to i64
  %13589 = icmp ult i32 %13585, 8
  br i1 %13589, label %13626, label %13590

13590:                                            ; preds = %13587
  %13591 = getelementptr i32, i32* %13584, i64 %13588
  %13592 = getelementptr i32, i32* %13583, i64 %13588
  %13593 = icmp ult i32* %13584, %13592
  %13594 = icmp ult i32* %13583, %13591
  %13595 = and i1 %13593, %13594
  br i1 %13595, label %13626, label %13596

13596:                                            ; preds = %13590
  %13597 = and i64 %13588, 4294967288
  br label %13598

13598:                                            ; preds = %13598, %13596
  %13599 = phi i64 [ 0, %13596 ], [ %13622, %13598 ]
  %13600 = getelementptr inbounds i32, i32* %13583, i64 %13599
  %13601 = bitcast i32* %13600 to <4 x i32>*
  %13602 = load <4 x i32>, <4 x i32>* %13601, align 4, !alias.scope !579
  %13603 = getelementptr inbounds i32, i32* %13600, i64 4
  %13604 = bitcast i32* %13603 to <4 x i32>*
  %13605 = load <4 x i32>, <4 x i32>* %13604, align 4, !alias.scope !579
  %13606 = lshr <4 x i32> %13602, <i32 16, i32 16, i32 16, i32 16>
  %13607 = lshr <4 x i32> %13605, <i32 16, i32 16, i32 16, i32 16>
  %13608 = shl <4 x i32> %13602, <i32 16, i32 16, i32 16, i32 16>
  %13609 = shl <4 x i32> %13605, <i32 16, i32 16, i32 16, i32 16>
  %13610 = or <4 x i32> %13606, %13608
  %13611 = or <4 x i32> %13607, %13609
  %13612 = and <4 x i32> %13610, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %13613 = and <4 x i32> %13611, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %13614 = and <4 x i32> %13602, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %13615 = and <4 x i32> %13605, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %13616 = or <4 x i32> %13612, %13614
  %13617 = or <4 x i32> %13613, %13615
  %13618 = getelementptr inbounds i32, i32* %13584, i64 %13599
  %13619 = bitcast i32* %13618 to <4 x i32>*
  store <4 x i32> %13616, <4 x i32>* %13619, align 4, !alias.scope !582, !noalias !579
  %13620 = getelementptr inbounds i32, i32* %13618, i64 4
  %13621 = bitcast i32* %13620 to <4 x i32>*
  store <4 x i32> %13617, <4 x i32>* %13621, align 4, !alias.scope !582, !noalias !579
  %13622 = add i64 %13599, 8
  %13623 = icmp eq i64 %13622, %13597
  br i1 %13623, label %13624, label %13598, !llvm.loop !584

13624:                                            ; preds = %13598
  %13625 = icmp eq i64 %13597, %13588
  br i1 %13625, label %13669, label %13626

13626:                                            ; preds = %13624, %13590, %13587
  %13627 = phi i64 [ 0, %13590 ], [ 0, %13587 ], [ %13597, %13624 ]
  %13628 = xor i64 %13627, -1
  %13629 = and i64 %13588, 1
  %13630 = icmp eq i64 %13629, 0
  br i1 %13630, label %13642, label %13631

13631:                                            ; preds = %13626
  %13632 = getelementptr inbounds i32, i32* %13583, i64 %13627
  %13633 = load i32, i32* %13632, align 4
  %13634 = lshr i32 %13633, 16
  %13635 = shl i32 %13633, 16
  %13636 = or i32 %13634, %13635
  %13637 = and i32 %13636, 16711935
  %13638 = and i32 %13633, -16711936
  %13639 = or i32 %13637, %13638
  %13640 = getelementptr inbounds i32, i32* %13584, i64 %13627
  store i32 %13639, i32* %13640, align 4
  %13641 = or i64 %13627, 1
  br label %13642

13642:                                            ; preds = %13631, %13626
  %13643 = phi i64 [ %13641, %13631 ], [ %13627, %13626 ]
  %13644 = sub nsw i64 0, %13588
  %13645 = icmp eq i64 %13628, %13644
  br i1 %13645, label %13669, label %13646

13646:                                            ; preds = %13642, %13646
  %13647 = phi i64 [ %13667, %13646 ], [ %13643, %13642 ]
  %13648 = getelementptr inbounds i32, i32* %13583, i64 %13647
  %13649 = load i32, i32* %13648, align 4
  %13650 = lshr i32 %13649, 16
  %13651 = shl i32 %13649, 16
  %13652 = or i32 %13650, %13651
  %13653 = and i32 %13652, 16711935
  %13654 = and i32 %13649, -16711936
  %13655 = or i32 %13653, %13654
  %13656 = getelementptr inbounds i32, i32* %13584, i64 %13647
  store i32 %13655, i32* %13656, align 4
  %13657 = add nuw nsw i64 %13647, 1
  %13658 = getelementptr inbounds i32, i32* %13583, i64 %13657
  %13659 = load i32, i32* %13658, align 4
  %13660 = lshr i32 %13659, 16
  %13661 = shl i32 %13659, 16
  %13662 = or i32 %13660, %13661
  %13663 = and i32 %13662, 16711935
  %13664 = and i32 %13659, -16711936
  %13665 = or i32 %13663, %13664
  %13666 = getelementptr inbounds i32, i32* %13584, i64 %13657
  store i32 %13665, i32* %13666, align 4
  %13667 = add nuw nsw i64 %13647, 2
  %13668 = icmp eq i64 %13667, %13588
  br i1 %13668, label %13669, label %13646, !llvm.loop !585

13669:                                            ; preds = %13642, %13646, %13624, %13582
  %13670 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13456, align 8
  %13671 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13670, i64 0, i32 1, i32 0
  %13672 = load i32, i32* %13671, align 4
  %13673 = icmp eq i32 %13672, 0
  br i1 %13673, label %13729, label %13674

13674:                                            ; preds = %13669
  %13675 = load i8*, i8** %13487, align 8
  %13676 = add i32 %13672, -1
  %13677 = and i32 %13672, 3
  %13678 = icmp ult i32 %13676, 3
  br i1 %13678, label %13711, label %13679

13679:                                            ; preds = %13674
  %13680 = sub i32 %13672, %13677
  br label %13681

13681:                                            ; preds = %13681, %13679
  %13682 = phi i8* [ %13675, %13679 ], [ %13707, %13681 ]
  %13683 = phi i8* [ %13517, %13679 ], [ %13708, %13681 ]
  %13684 = phi i32 [ %13680, %13679 ], [ %13709, %13681 ]
  %13685 = load i8, i8* %13682, align 1
  store i8 %13685, i8* %13683, align 1
  %13686 = getelementptr inbounds i8, i8* %13682, i64 1
  %13687 = load i8, i8* %13686, align 1
  %13688 = getelementptr inbounds i8, i8* %13683, i64 1
  store i8 %13687, i8* %13688, align 1
  %13689 = getelementptr inbounds i8, i8* %13682, i64 4
  %13690 = getelementptr inbounds i8, i8* %13683, i64 2
  %13691 = load i8, i8* %13689, align 1
  store i8 %13691, i8* %13690, align 1
  %13692 = getelementptr inbounds i8, i8* %13682, i64 5
  %13693 = load i8, i8* %13692, align 1
  %13694 = getelementptr inbounds i8, i8* %13683, i64 3
  store i8 %13693, i8* %13694, align 1
  %13695 = getelementptr inbounds i8, i8* %13682, i64 8
  %13696 = getelementptr inbounds i8, i8* %13683, i64 4
  %13697 = load i8, i8* %13695, align 1
  store i8 %13697, i8* %13696, align 1
  %13698 = getelementptr inbounds i8, i8* %13682, i64 9
  %13699 = load i8, i8* %13698, align 1
  %13700 = getelementptr inbounds i8, i8* %13683, i64 5
  store i8 %13699, i8* %13700, align 1
  %13701 = getelementptr inbounds i8, i8* %13682, i64 12
  %13702 = getelementptr inbounds i8, i8* %13683, i64 6
  %13703 = load i8, i8* %13701, align 1
  store i8 %13703, i8* %13702, align 1
  %13704 = getelementptr inbounds i8, i8* %13682, i64 13
  %13705 = load i8, i8* %13704, align 1
  %13706 = getelementptr inbounds i8, i8* %13683, i64 7
  store i8 %13705, i8* %13706, align 1
  %13707 = getelementptr inbounds i8, i8* %13682, i64 16
  %13708 = getelementptr inbounds i8, i8* %13683, i64 8
  %13709 = add i32 %13684, -4
  %13710 = icmp eq i32 %13709, 0
  br i1 %13710, label %13711, label %13681

13711:                                            ; preds = %13681, %13674
  %13712 = phi i8* [ %13675, %13674 ], [ %13707, %13681 ]
  %13713 = phi i8* [ %13517, %13674 ], [ %13708, %13681 ]
  %13714 = icmp eq i32 %13677, 0
  br i1 %13714, label %13727, label %13715

13715:                                            ; preds = %13711, %13715
  %13716 = phi i8* [ %13723, %13715 ], [ %13712, %13711 ]
  %13717 = phi i8* [ %13724, %13715 ], [ %13713, %13711 ]
  %13718 = phi i32 [ %13725, %13715 ], [ %13677, %13711 ]
  %13719 = load i8, i8* %13716, align 1
  store i8 %13719, i8* %13717, align 1
  %13720 = getelementptr inbounds i8, i8* %13716, i64 1
  %13721 = load i8, i8* %13720, align 1
  %13722 = getelementptr inbounds i8, i8* %13717, i64 1
  store i8 %13721, i8* %13722, align 1
  %13723 = getelementptr inbounds i8, i8* %13716, i64 4
  %13724 = getelementptr inbounds i8, i8* %13717, i64 2
  %13725 = add i32 %13718, -1
  %13726 = icmp eq i32 %13725, 0
  br i1 %13726, label %13727, label %13715, !llvm.loop !586

13727:                                            ; preds = %13715, %13711
  %13728 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13456, align 8
  br label %13729

13729:                                            ; preds = %13727, %13669
  %13730 = phi %"class.blink::IntRect"* [ %13728, %13727 ], [ %13670, %13669 ]
  %13731 = getelementptr inbounds i8, i8* %13518, i64 %13450
  %13732 = getelementptr inbounds i8, i8* %13517, i64 %13453
  %13733 = add nuw nsw i32 %13516, 1
  %13734 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13730, i64 0, i32 1, i32 1
  %13735 = load i32, i32* %13734, align 4
  %13736 = icmp slt i32 %13733, %13735
  br i1 %13736, label %13514, label %13499

13737:                                            ; preds = %13501, %13481
  %13738 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %13738, align 4
  br label %15491

13739:                                            ; preds = %13446
  %13740 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %13741 = load i32, i32* %13740, align 8
  %13742 = sext i32 %13741 to i64
  %13743 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %13744 = load i32, i32* %13743, align 8
  %13745 = sext i32 %13744 to i64
  %13746 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13747 = load i8*, i8** %13746, align 8
  %13748 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %13749 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13748, align 8
  %13750 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13749, i64 0, i32 0, i32 1
  %13751 = load i32, i32* %13750, align 4
  %13752 = mul nsw i32 %13751, %13741
  %13753 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %13754 = load i32, i32* %13753, align 4
  %13755 = add nsw i32 %13752, %13754
  %13756 = sext i32 %13755 to i64
  %13757 = getelementptr inbounds i8, i8* %13747, i64 %13756
  %13758 = icmp slt i32 %13744, 0
  %13759 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %13760 = load i32, i32* %13759, align 8
  %13761 = icmp sgt i32 %13760, 1
  %13762 = and i1 %13758, %13761
  br i1 %13762, label %13763, label %13773

13763:                                            ; preds = %13739
  %13764 = add nsw i32 %13760, -1
  %13765 = sext i32 %13764 to i64
  %13766 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %13767 = load i32, i32* %13766, align 4
  %13768 = sext i32 %13767 to i64
  %13769 = mul nsw i64 %13742, %13765
  %13770 = mul i64 %13769, %13768
  %13771 = sub i64 0, %13770
  %13772 = getelementptr inbounds i8, i8* %13757, i64 %13771
  br label %13775

13773:                                            ; preds = %13739
  %13774 = icmp sgt i32 %13760, 0
  br i1 %13774, label %13775, label %14057

13775:                                            ; preds = %13773, %13763
  %13776 = phi i8* [ %13772, %13763 ], [ %13757, %13773 ]
  %13777 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %13778 = load i8*, i8** %13777, align 8
  %13779 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %13780 = bitcast i8** %13779 to i32**
  %13781 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %13782

13782:                                            ; preds = %13793, %13775
  %13783 = phi i32 [ %13760, %13775 ], [ %13794, %13793 ]
  %13784 = phi %"class.blink::IntRect"* [ %13749, %13775 ], [ %13795, %13793 ]
  %13785 = phi i32 [ 0, %13775 ], [ %13804, %13793 ]
  %13786 = phi i8* [ %13778, %13775 ], [ %13797, %13793 ]
  %13787 = phi i8* [ %13776, %13775 ], [ %13803, %13793 ]
  %13788 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13784, i64 0, i32 1, i32 1
  %13789 = load i32, i32* %13788, align 4
  %13790 = icmp sgt i32 %13789, 0
  br i1 %13790, label %13806, label %13793

13791:                                            ; preds = %14048
  %13792 = load i32, i32* %13759, align 8
  br label %13793

13793:                                            ; preds = %13791, %13782
  %13794 = phi i32 [ %13783, %13782 ], [ %13792, %13791 ]
  %13795 = phi %"class.blink::IntRect"* [ %13784, %13782 ], [ %14049, %13791 ]
  %13796 = phi i8* [ %13787, %13782 ], [ %14050, %13791 ]
  %13797 = phi i8* [ %13786, %13782 ], [ %14051, %13791 ]
  %13798 = phi i32 [ %13789, %13782 ], [ %14054, %13791 ]
  %13799 = load i32, i32* %13781, align 4
  %13800 = sub nsw i32 %13799, %13798
  %13801 = sext i32 %13800 to i64
  %13802 = mul nsw i64 %13801, %13742
  %13803 = getelementptr inbounds i8, i8* %13796, i64 %13802
  %13804 = add nuw nsw i32 %13785, 1
  %13805 = icmp slt i32 %13804, %13794
  br i1 %13805, label %13782, label %14057

13806:                                            ; preds = %13782, %14048
  %13807 = phi i64 [ %14056, %14048 ], [ 0, %13782 ]
  %13808 = phi %"class.blink::IntRect"* [ %14049, %14048 ], [ %13784, %13782 ]
  %13809 = phi i32 [ %14052, %14048 ], [ 0, %13782 ]
  %13810 = phi i8* [ %14051, %14048 ], [ %13786, %13782 ]
  %13811 = phi i8* [ %14050, %14048 ], [ %13787, %13782 ]
  %13812 = mul i64 %13807, %13745
  %13813 = getelementptr i8, i8* %13786, i64 %13812
  %13814 = add i64 %13812, 2
  %13815 = getelementptr i8, i8* %13786, i64 %13814
  %13816 = load i32*, i32** %13780, align 8
  %13817 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13808, i64 0, i32 1, i32 0
  %13818 = load i32, i32* %13817, align 4
  %13819 = bitcast i8* %13811 to i32*
  %13820 = and i32 %13818, -4
  %13821 = icmp eq i32 %13820, 0
  br i1 %13821, label %13879, label %13822

13822:                                            ; preds = %13806
  %13823 = add i32 %13820, -1
  %13824 = lshr i32 %13823, 2
  %13825 = add nuw nsw i32 %13824, 1
  %13826 = and i32 %13825, 1
  %13827 = icmp eq i32 %13824, 0
  br i1 %13827, label %13860, label %13828

13828:                                            ; preds = %13822
  %13829 = sub nuw nsw i32 %13825, %13826
  br label %13830

13830:                                            ; preds = %13830, %13828
  %13831 = phi i32* [ %13819, %13828 ], [ %13856, %13830 ]
  %13832 = phi i32* [ %13816, %13828 ], [ %13857, %13830 ]
  %13833 = phi i32 [ %13829, %13828 ], [ %13858, %13830 ]
  %13834 = bitcast i32* %13832 to <2 x i64>*
  %13835 = bitcast i32* %13831 to <2 x i64>*
  %13836 = load <2 x i64>, <2 x i64>* %13835, align 1
  %13837 = bitcast <2 x i64> %13836 to <8 x i16>
  %13838 = shufflevector <8 x i16> %13837, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13839 = shufflevector <8 x i16> %13838, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13840 = bitcast <8 x i16> %13839 to <2 x i64>
  %13841 = and <2 x i64> %13840, <i64 71777214294589695, i64 71777214294589695>
  %13842 = and <2 x i64> %13836, <i64 -71777214294589696, i64 -71777214294589696>
  %13843 = or <2 x i64> %13841, %13842
  store <2 x i64> %13843, <2 x i64>* %13834, align 1
  %13844 = getelementptr inbounds i32, i32* %13831, i64 4
  %13845 = getelementptr inbounds i32, i32* %13832, i64 4
  %13846 = bitcast i32* %13845 to <2 x i64>*
  %13847 = bitcast i32* %13844 to <2 x i64>*
  %13848 = load <2 x i64>, <2 x i64>* %13847, align 1
  %13849 = bitcast <2 x i64> %13848 to <8 x i16>
  %13850 = shufflevector <8 x i16> %13849, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13851 = shufflevector <8 x i16> %13850, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13852 = bitcast <8 x i16> %13851 to <2 x i64>
  %13853 = and <2 x i64> %13852, <i64 71777214294589695, i64 71777214294589695>
  %13854 = and <2 x i64> %13848, <i64 -71777214294589696, i64 -71777214294589696>
  %13855 = or <2 x i64> %13853, %13854
  store <2 x i64> %13855, <2 x i64>* %13846, align 1
  %13856 = getelementptr inbounds i32, i32* %13831, i64 8
  %13857 = getelementptr inbounds i32, i32* %13832, i64 8
  %13858 = add i32 %13833, -2
  %13859 = icmp eq i32 %13858, 0
  br i1 %13859, label %13860, label %13830

13860:                                            ; preds = %13830, %13822
  %13861 = phi i32* [ undef, %13822 ], [ %13856, %13830 ]
  %13862 = phi i32* [ undef, %13822 ], [ %13857, %13830 ]
  %13863 = phi i32* [ %13819, %13822 ], [ %13856, %13830 ]
  %13864 = phi i32* [ %13816, %13822 ], [ %13857, %13830 ]
  %13865 = icmp eq i32 %13826, 0
  br i1 %13865, label %13879, label %13866

13866:                                            ; preds = %13860
  %13867 = bitcast i32* %13864 to <2 x i64>*
  %13868 = bitcast i32* %13863 to <2 x i64>*
  %13869 = load <2 x i64>, <2 x i64>* %13868, align 1
  %13870 = bitcast <2 x i64> %13869 to <8 x i16>
  %13871 = shufflevector <8 x i16> %13870, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %13872 = shufflevector <8 x i16> %13871, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %13873 = bitcast <8 x i16> %13872 to <2 x i64>
  %13874 = and <2 x i64> %13873, <i64 71777214294589695, i64 71777214294589695>
  %13875 = and <2 x i64> %13869, <i64 -71777214294589696, i64 -71777214294589696>
  %13876 = or <2 x i64> %13874, %13875
  store <2 x i64> %13876, <2 x i64>* %13867, align 1
  %13877 = getelementptr inbounds i32, i32* %13864, i64 4
  %13878 = getelementptr inbounds i32, i32* %13863, i64 4
  br label %13879

13879:                                            ; preds = %13866, %13860, %13806
  %13880 = phi i32* [ %13819, %13806 ], [ %13861, %13860 ], [ %13878, %13866 ]
  %13881 = phi i32* [ %13816, %13806 ], [ %13862, %13860 ], [ %13877, %13866 ]
  %13882 = sub i32 %13818, %13820
  %13883 = icmp eq i32 %13882, 0
  br i1 %13883, label %13966, label %13884

13884:                                            ; preds = %13879
  %13885 = zext i32 %13882 to i64
  %13886 = icmp ult i32 %13882, 8
  br i1 %13886, label %13923, label %13887

13887:                                            ; preds = %13884
  %13888 = getelementptr i32, i32* %13881, i64 %13885
  %13889 = getelementptr i32, i32* %13880, i64 %13885
  %13890 = icmp ult i32* %13881, %13889
  %13891 = icmp ult i32* %13880, %13888
  %13892 = and i1 %13890, %13891
  br i1 %13892, label %13923, label %13893

13893:                                            ; preds = %13887
  %13894 = and i64 %13885, 4294967288
  br label %13895

13895:                                            ; preds = %13895, %13893
  %13896 = phi i64 [ 0, %13893 ], [ %13919, %13895 ]
  %13897 = getelementptr inbounds i32, i32* %13880, i64 %13896
  %13898 = bitcast i32* %13897 to <4 x i32>*
  %13899 = load <4 x i32>, <4 x i32>* %13898, align 4, !alias.scope !587
  %13900 = getelementptr inbounds i32, i32* %13897, i64 4
  %13901 = bitcast i32* %13900 to <4 x i32>*
  %13902 = load <4 x i32>, <4 x i32>* %13901, align 4, !alias.scope !587
  %13903 = lshr <4 x i32> %13899, <i32 16, i32 16, i32 16, i32 16>
  %13904 = lshr <4 x i32> %13902, <i32 16, i32 16, i32 16, i32 16>
  %13905 = shl <4 x i32> %13899, <i32 16, i32 16, i32 16, i32 16>
  %13906 = shl <4 x i32> %13902, <i32 16, i32 16, i32 16, i32 16>
  %13907 = or <4 x i32> %13903, %13905
  %13908 = or <4 x i32> %13904, %13906
  %13909 = and <4 x i32> %13907, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %13910 = and <4 x i32> %13908, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %13911 = and <4 x i32> %13899, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %13912 = and <4 x i32> %13902, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %13913 = or <4 x i32> %13909, %13911
  %13914 = or <4 x i32> %13910, %13912
  %13915 = getelementptr inbounds i32, i32* %13881, i64 %13896
  %13916 = bitcast i32* %13915 to <4 x i32>*
  store <4 x i32> %13913, <4 x i32>* %13916, align 4, !alias.scope !590, !noalias !587
  %13917 = getelementptr inbounds i32, i32* %13915, i64 4
  %13918 = bitcast i32* %13917 to <4 x i32>*
  store <4 x i32> %13914, <4 x i32>* %13918, align 4, !alias.scope !590, !noalias !587
  %13919 = add i64 %13896, 8
  %13920 = icmp eq i64 %13919, %13894
  br i1 %13920, label %13921, label %13895, !llvm.loop !592

13921:                                            ; preds = %13895
  %13922 = icmp eq i64 %13894, %13885
  br i1 %13922, label %13966, label %13923

13923:                                            ; preds = %13921, %13887, %13884
  %13924 = phi i64 [ 0, %13887 ], [ 0, %13884 ], [ %13894, %13921 ]
  %13925 = xor i64 %13924, -1
  %13926 = and i64 %13885, 1
  %13927 = icmp eq i64 %13926, 0
  br i1 %13927, label %13939, label %13928

13928:                                            ; preds = %13923
  %13929 = getelementptr inbounds i32, i32* %13880, i64 %13924
  %13930 = load i32, i32* %13929, align 4
  %13931 = lshr i32 %13930, 16
  %13932 = shl i32 %13930, 16
  %13933 = or i32 %13931, %13932
  %13934 = and i32 %13933, 16711935
  %13935 = and i32 %13930, -16711936
  %13936 = or i32 %13934, %13935
  %13937 = getelementptr inbounds i32, i32* %13881, i64 %13924
  store i32 %13936, i32* %13937, align 4
  %13938 = or i64 %13924, 1
  br label %13939

13939:                                            ; preds = %13928, %13923
  %13940 = phi i64 [ %13938, %13928 ], [ %13924, %13923 ]
  %13941 = sub nsw i64 0, %13885
  %13942 = icmp eq i64 %13925, %13941
  br i1 %13942, label %13966, label %13943

13943:                                            ; preds = %13939, %13943
  %13944 = phi i64 [ %13964, %13943 ], [ %13940, %13939 ]
  %13945 = getelementptr inbounds i32, i32* %13880, i64 %13944
  %13946 = load i32, i32* %13945, align 4
  %13947 = lshr i32 %13946, 16
  %13948 = shl i32 %13946, 16
  %13949 = or i32 %13947, %13948
  %13950 = and i32 %13949, 16711935
  %13951 = and i32 %13946, -16711936
  %13952 = or i32 %13950, %13951
  %13953 = getelementptr inbounds i32, i32* %13881, i64 %13944
  store i32 %13952, i32* %13953, align 4
  %13954 = add nuw nsw i64 %13944, 1
  %13955 = getelementptr inbounds i32, i32* %13880, i64 %13954
  %13956 = load i32, i32* %13955, align 4
  %13957 = lshr i32 %13956, 16
  %13958 = shl i32 %13956, 16
  %13959 = or i32 %13957, %13958
  %13960 = and i32 %13959, 16711935
  %13961 = and i32 %13956, -16711936
  %13962 = or i32 %13960, %13961
  %13963 = getelementptr inbounds i32, i32* %13881, i64 %13954
  store i32 %13962, i32* %13963, align 4
  %13964 = add nuw nsw i64 %13944, 2
  %13965 = icmp eq i64 %13964, %13885
  br i1 %13965, label %13966, label %13943, !llvm.loop !593

13966:                                            ; preds = %13939, %13943, %13921, %13879
  %13967 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13748, align 8
  %13968 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13967, i64 0, i32 1, i32 0
  %13969 = load i32, i32* %13968, align 4
  %13970 = icmp eq i32 %13969, 0
  br i1 %13970, label %14048, label %13971

13971:                                            ; preds = %13966
  %13972 = load i8*, i8** %13779, align 8
  %13973 = add i32 %13969, -1
  %13974 = zext i32 %13973 to i64
  %13975 = add nuw nsw i64 %13974, 1
  %13976 = icmp ult i64 %13975, 16
  br i1 %13976, label %14020, label %13977

13977:                                            ; preds = %13971
  %13978 = add i32 %13969, -1
  %13979 = zext i32 %13978 to i64
  %13980 = shl nuw nsw i64 %13979, 1
  %13981 = getelementptr i8, i8* %13815, i64 %13980
  %13982 = getelementptr i8, i8* %13972, i64 4
  %13983 = shl nuw nsw i64 %13979, 2
  %13984 = getelementptr i8, i8* %13982, i64 %13983
  %13985 = icmp ult i8* %13813, %13984
  %13986 = icmp ult i8* %13972, %13981
  %13987 = and i1 %13985, %13986
  br i1 %13987, label %14020, label %13988

13988:                                            ; preds = %13977
  %13989 = and i64 %13975, 8589934576
  %13990 = shl nuw nsw i64 %13989, 2
  %13991 = getelementptr i8, i8* %13972, i64 %13990
  %13992 = trunc i64 %13989 to i32
  %13993 = shl nuw nsw i64 %13989, 1
  %13994 = getelementptr i8, i8* %13810, i64 %13993
  br label %13995

13995:                                            ; preds = %13995, %13988
  %13996 = phi i64 [ 0, %13988 ], [ %14016, %13995 ]
  %13997 = shl i64 %13996, 2
  %13998 = shl i64 %13996, 1
  %13999 = getelementptr inbounds i8, i8* %13972, i64 %13997
  %14000 = bitcast i8* %13999 to <64 x i8>*
  %14001 = load <64 x i8>, <64 x i8>* %14000, align 1
  %14002 = shufflevector <64 x i8> %14001, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %14003 = shufflevector <64 x i8> %14001, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %14004 = shufflevector <64 x i8> %14001, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %14005 = uitofp <16 x i8> %14004 to <16 x float>
  %14006 = fdiv <16 x float> %14005, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %14007 = uitofp <16 x i8> %14002 to <16 x float>
  %14008 = fmul <16 x float> %14006, %14007
  %14009 = fptoui <16 x float> %14008 to <16 x i8>
  %14010 = uitofp <16 x i8> %14003 to <16 x float>
  %14011 = fmul <16 x float> %14006, %14010
  %14012 = fptoui <16 x float> %14011 to <16 x i8>
  %14013 = getelementptr inbounds i8, i8* %13810, i64 %13998
  %14014 = bitcast i8* %14013 to <32 x i8>*
  %14015 = shufflevector <16 x i8> %14009, <16 x i8> %14012, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %14015, <32 x i8>* %14014, align 1
  %14016 = add i64 %13996, 16
  %14017 = icmp eq i64 %14016, %13989
  br i1 %14017, label %14018, label %13995, !llvm.loop !594

14018:                                            ; preds = %13995
  %14019 = icmp eq i64 %13975, %13989
  br i1 %14019, label %14046, label %14020

14020:                                            ; preds = %14018, %13977, %13971
  %14021 = phi i8* [ %13972, %13977 ], [ %13972, %13971 ], [ %13991, %14018 ]
  %14022 = phi i32 [ 0, %13977 ], [ 0, %13971 ], [ %13992, %14018 ]
  %14023 = phi i8* [ %13810, %13977 ], [ %13810, %13971 ], [ %13994, %14018 ]
  br label %14024

14024:                                            ; preds = %14020, %14024
  %14025 = phi i8* [ %14042, %14024 ], [ %14021, %14020 ]
  %14026 = phi i32 [ %14044, %14024 ], [ %14022, %14020 ]
  %14027 = phi i8* [ %14043, %14024 ], [ %14023, %14020 ]
  %14028 = getelementptr inbounds i8, i8* %14025, i64 3
  %14029 = load i8, i8* %14028, align 1
  %14030 = uitofp i8 %14029 to float
  %14031 = fdiv float %14030, 2.550000e+02
  %14032 = load i8, i8* %14025, align 1
  %14033 = uitofp i8 %14032 to float
  %14034 = fmul float %14031, %14033
  %14035 = fptoui float %14034 to i8
  store i8 %14035, i8* %14027, align 1
  %14036 = getelementptr inbounds i8, i8* %14025, i64 1
  %14037 = load i8, i8* %14036, align 1
  %14038 = uitofp i8 %14037 to float
  %14039 = fmul float %14031, %14038
  %14040 = fptoui float %14039 to i8
  %14041 = getelementptr inbounds i8, i8* %14027, i64 1
  store i8 %14040, i8* %14041, align 1
  %14042 = getelementptr inbounds i8, i8* %14025, i64 4
  %14043 = getelementptr inbounds i8, i8* %14027, i64 2
  %14044 = add nuw i32 %14026, 1
  %14045 = icmp eq i32 %14044, %13969
  br i1 %14045, label %14046, label %14024, !llvm.loop !595

14046:                                            ; preds = %14024, %14018
  %14047 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13748, align 8
  br label %14048

14048:                                            ; preds = %14046, %13966
  %14049 = phi %"class.blink::IntRect"* [ %14047, %14046 ], [ %13967, %13966 ]
  %14050 = getelementptr inbounds i8, i8* %13811, i64 %13742
  %14051 = getelementptr inbounds i8, i8* %13810, i64 %13745
  %14052 = add nuw nsw i32 %13809, 1
  %14053 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14049, i64 0, i32 1, i32 1
  %14054 = load i32, i32* %14053, align 4
  %14055 = icmp slt i32 %14052, %14054
  %14056 = add i64 %13807, 1
  br i1 %14055, label %13806, label %13791

14057:                                            ; preds = %13793, %13773
  %14058 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %14058, align 4
  br label %15491

14059:                                            ; preds = %13446
  %14060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %14061 = load i32, i32* %14060, align 8
  %14062 = sext i32 %14061 to i64
  %14063 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %14064 = load i32, i32* %14063, align 8
  %14065 = sext i32 %14064 to i64
  %14066 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14067 = load i8*, i8** %14066, align 8
  %14068 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %14069 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14068, align 8
  %14070 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14069, i64 0, i32 0, i32 1
  %14071 = load i32, i32* %14070, align 4
  %14072 = mul nsw i32 %14071, %14061
  %14073 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %14074 = load i32, i32* %14073, align 4
  %14075 = add nsw i32 %14072, %14074
  %14076 = sext i32 %14075 to i64
  %14077 = getelementptr inbounds i8, i8* %14067, i64 %14076
  %14078 = icmp slt i32 %14064, 0
  %14079 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %14080 = load i32, i32* %14079, align 8
  %14081 = icmp sgt i32 %14080, 1
  %14082 = and i1 %14078, %14081
  br i1 %14082, label %14083, label %14093

14083:                                            ; preds = %14059
  %14084 = add nsw i32 %14080, -1
  %14085 = sext i32 %14084 to i64
  %14086 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %14087 = load i32, i32* %14086, align 4
  %14088 = sext i32 %14087 to i64
  %14089 = mul nsw i64 %14062, %14085
  %14090 = mul i64 %14089, %14088
  %14091 = sub i64 0, %14090
  %14092 = getelementptr inbounds i8, i8* %14077, i64 %14091
  br label %14095

14093:                                            ; preds = %14059
  %14094 = icmp sgt i32 %14080, 0
  br i1 %14094, label %14095, label %14324

14095:                                            ; preds = %14093, %14083
  %14096 = phi i8* [ %14092, %14083 ], [ %14077, %14093 ]
  %14097 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %14098 = load i8*, i8** %14097, align 8
  %14099 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %14100 = bitcast i8** %14099 to i32**
  %14101 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %14102

14102:                                            ; preds = %14113, %14095
  %14103 = phi i32 [ %14080, %14095 ], [ %14114, %14113 ]
  %14104 = phi %"class.blink::IntRect"* [ %14069, %14095 ], [ %14115, %14113 ]
  %14105 = phi i32 [ 0, %14095 ], [ %14124, %14113 ]
  %14106 = phi i8* [ %14098, %14095 ], [ %14117, %14113 ]
  %14107 = phi i8* [ %14096, %14095 ], [ %14123, %14113 ]
  %14108 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14104, i64 0, i32 1, i32 1
  %14109 = load i32, i32* %14108, align 4
  %14110 = icmp sgt i32 %14109, 0
  br i1 %14110, label %14126, label %14113

14111:                                            ; preds = %14316
  %14112 = load i32, i32* %14079, align 8
  br label %14113

14113:                                            ; preds = %14111, %14102
  %14114 = phi i32 [ %14103, %14102 ], [ %14112, %14111 ]
  %14115 = phi %"class.blink::IntRect"* [ %14104, %14102 ], [ %14317, %14111 ]
  %14116 = phi i8* [ %14107, %14102 ], [ %14318, %14111 ]
  %14117 = phi i8* [ %14106, %14102 ], [ %14319, %14111 ]
  %14118 = phi i32 [ %14109, %14102 ], [ %14322, %14111 ]
  %14119 = load i32, i32* %14101, align 4
  %14120 = sub nsw i32 %14119, %14118
  %14121 = sext i32 %14120 to i64
  %14122 = mul nsw i64 %14121, %14062
  %14123 = getelementptr inbounds i8, i8* %14116, i64 %14122
  %14124 = add nuw nsw i32 %14105, 1
  %14125 = icmp slt i32 %14124, %14114
  br i1 %14125, label %14102, label %14324

14126:                                            ; preds = %14102, %14316
  %14127 = phi %"class.blink::IntRect"* [ %14317, %14316 ], [ %14104, %14102 ]
  %14128 = phi i32 [ %14320, %14316 ], [ 0, %14102 ]
  %14129 = phi i8* [ %14319, %14316 ], [ %14106, %14102 ]
  %14130 = phi i8* [ %14318, %14316 ], [ %14107, %14102 ]
  %14131 = load i32*, i32** %14100, align 8
  %14132 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14127, i64 0, i32 1, i32 0
  %14133 = load i32, i32* %14132, align 4
  %14134 = bitcast i8* %14130 to i32*
  %14135 = and i32 %14133, -4
  %14136 = icmp eq i32 %14135, 0
  br i1 %14136, label %14194, label %14137

14137:                                            ; preds = %14126
  %14138 = add i32 %14135, -1
  %14139 = lshr i32 %14138, 2
  %14140 = add nuw nsw i32 %14139, 1
  %14141 = and i32 %14140, 1
  %14142 = icmp eq i32 %14139, 0
  br i1 %14142, label %14175, label %14143

14143:                                            ; preds = %14137
  %14144 = sub nuw nsw i32 %14140, %14141
  br label %14145

14145:                                            ; preds = %14145, %14143
  %14146 = phi i32* [ %14134, %14143 ], [ %14171, %14145 ]
  %14147 = phi i32* [ %14131, %14143 ], [ %14172, %14145 ]
  %14148 = phi i32 [ %14144, %14143 ], [ %14173, %14145 ]
  %14149 = bitcast i32* %14147 to <2 x i64>*
  %14150 = bitcast i32* %14146 to <2 x i64>*
  %14151 = load <2 x i64>, <2 x i64>* %14150, align 1
  %14152 = bitcast <2 x i64> %14151 to <8 x i16>
  %14153 = shufflevector <8 x i16> %14152, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %14154 = shufflevector <8 x i16> %14153, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %14155 = bitcast <8 x i16> %14154 to <2 x i64>
  %14156 = and <2 x i64> %14155, <i64 71777214294589695, i64 71777214294589695>
  %14157 = and <2 x i64> %14151, <i64 -71777214294589696, i64 -71777214294589696>
  %14158 = or <2 x i64> %14156, %14157
  store <2 x i64> %14158, <2 x i64>* %14149, align 1
  %14159 = getelementptr inbounds i32, i32* %14146, i64 4
  %14160 = getelementptr inbounds i32, i32* %14147, i64 4
  %14161 = bitcast i32* %14160 to <2 x i64>*
  %14162 = bitcast i32* %14159 to <2 x i64>*
  %14163 = load <2 x i64>, <2 x i64>* %14162, align 1
  %14164 = bitcast <2 x i64> %14163 to <8 x i16>
  %14165 = shufflevector <8 x i16> %14164, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %14166 = shufflevector <8 x i16> %14165, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %14167 = bitcast <8 x i16> %14166 to <2 x i64>
  %14168 = and <2 x i64> %14167, <i64 71777214294589695, i64 71777214294589695>
  %14169 = and <2 x i64> %14163, <i64 -71777214294589696, i64 -71777214294589696>
  %14170 = or <2 x i64> %14168, %14169
  store <2 x i64> %14170, <2 x i64>* %14161, align 1
  %14171 = getelementptr inbounds i32, i32* %14146, i64 8
  %14172 = getelementptr inbounds i32, i32* %14147, i64 8
  %14173 = add i32 %14148, -2
  %14174 = icmp eq i32 %14173, 0
  br i1 %14174, label %14175, label %14145

14175:                                            ; preds = %14145, %14137
  %14176 = phi i32* [ undef, %14137 ], [ %14171, %14145 ]
  %14177 = phi i32* [ undef, %14137 ], [ %14172, %14145 ]
  %14178 = phi i32* [ %14134, %14137 ], [ %14171, %14145 ]
  %14179 = phi i32* [ %14131, %14137 ], [ %14172, %14145 ]
  %14180 = icmp eq i32 %14141, 0
  br i1 %14180, label %14194, label %14181

14181:                                            ; preds = %14175
  %14182 = bitcast i32* %14179 to <2 x i64>*
  %14183 = bitcast i32* %14178 to <2 x i64>*
  %14184 = load <2 x i64>, <2 x i64>* %14183, align 1
  %14185 = bitcast <2 x i64> %14184 to <8 x i16>
  %14186 = shufflevector <8 x i16> %14185, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %14187 = shufflevector <8 x i16> %14186, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %14188 = bitcast <8 x i16> %14187 to <2 x i64>
  %14189 = and <2 x i64> %14188, <i64 71777214294589695, i64 71777214294589695>
  %14190 = and <2 x i64> %14184, <i64 -71777214294589696, i64 -71777214294589696>
  %14191 = or <2 x i64> %14189, %14190
  store <2 x i64> %14191, <2 x i64>* %14182, align 1
  %14192 = getelementptr inbounds i32, i32* %14179, i64 4
  %14193 = getelementptr inbounds i32, i32* %14178, i64 4
  br label %14194

14194:                                            ; preds = %14181, %14175, %14126
  %14195 = phi i32* [ %14134, %14126 ], [ %14176, %14175 ], [ %14193, %14181 ]
  %14196 = phi i32* [ %14131, %14126 ], [ %14177, %14175 ], [ %14192, %14181 ]
  %14197 = sub i32 %14133, %14135
  %14198 = icmp eq i32 %14197, 0
  br i1 %14198, label %14281, label %14199

14199:                                            ; preds = %14194
  %14200 = zext i32 %14197 to i64
  %14201 = icmp ult i32 %14197, 8
  br i1 %14201, label %14238, label %14202

14202:                                            ; preds = %14199
  %14203 = getelementptr i32, i32* %14196, i64 %14200
  %14204 = getelementptr i32, i32* %14195, i64 %14200
  %14205 = icmp ult i32* %14196, %14204
  %14206 = icmp ult i32* %14195, %14203
  %14207 = and i1 %14205, %14206
  br i1 %14207, label %14238, label %14208

14208:                                            ; preds = %14202
  %14209 = and i64 %14200, 4294967288
  br label %14210

14210:                                            ; preds = %14210, %14208
  %14211 = phi i64 [ 0, %14208 ], [ %14234, %14210 ]
  %14212 = getelementptr inbounds i32, i32* %14195, i64 %14211
  %14213 = bitcast i32* %14212 to <4 x i32>*
  %14214 = load <4 x i32>, <4 x i32>* %14213, align 4, !alias.scope !596
  %14215 = getelementptr inbounds i32, i32* %14212, i64 4
  %14216 = bitcast i32* %14215 to <4 x i32>*
  %14217 = load <4 x i32>, <4 x i32>* %14216, align 4, !alias.scope !596
  %14218 = lshr <4 x i32> %14214, <i32 16, i32 16, i32 16, i32 16>
  %14219 = lshr <4 x i32> %14217, <i32 16, i32 16, i32 16, i32 16>
  %14220 = shl <4 x i32> %14214, <i32 16, i32 16, i32 16, i32 16>
  %14221 = shl <4 x i32> %14217, <i32 16, i32 16, i32 16, i32 16>
  %14222 = or <4 x i32> %14218, %14220
  %14223 = or <4 x i32> %14219, %14221
  %14224 = and <4 x i32> %14222, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %14225 = and <4 x i32> %14223, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %14226 = and <4 x i32> %14214, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %14227 = and <4 x i32> %14217, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %14228 = or <4 x i32> %14224, %14226
  %14229 = or <4 x i32> %14225, %14227
  %14230 = getelementptr inbounds i32, i32* %14196, i64 %14211
  %14231 = bitcast i32* %14230 to <4 x i32>*
  store <4 x i32> %14228, <4 x i32>* %14231, align 4, !alias.scope !599, !noalias !596
  %14232 = getelementptr inbounds i32, i32* %14230, i64 4
  %14233 = bitcast i32* %14232 to <4 x i32>*
  store <4 x i32> %14229, <4 x i32>* %14233, align 4, !alias.scope !599, !noalias !596
  %14234 = add i64 %14211, 8
  %14235 = icmp eq i64 %14234, %14209
  br i1 %14235, label %14236, label %14210, !llvm.loop !601

14236:                                            ; preds = %14210
  %14237 = icmp eq i64 %14209, %14200
  br i1 %14237, label %14281, label %14238

14238:                                            ; preds = %14236, %14202, %14199
  %14239 = phi i64 [ 0, %14202 ], [ 0, %14199 ], [ %14209, %14236 ]
  %14240 = xor i64 %14239, -1
  %14241 = and i64 %14200, 1
  %14242 = icmp eq i64 %14241, 0
  br i1 %14242, label %14254, label %14243

14243:                                            ; preds = %14238
  %14244 = getelementptr inbounds i32, i32* %14195, i64 %14239
  %14245 = load i32, i32* %14244, align 4
  %14246 = lshr i32 %14245, 16
  %14247 = shl i32 %14245, 16
  %14248 = or i32 %14246, %14247
  %14249 = and i32 %14248, 16711935
  %14250 = and i32 %14245, -16711936
  %14251 = or i32 %14249, %14250
  %14252 = getelementptr inbounds i32, i32* %14196, i64 %14239
  store i32 %14251, i32* %14252, align 4
  %14253 = or i64 %14239, 1
  br label %14254

14254:                                            ; preds = %14243, %14238
  %14255 = phi i64 [ %14253, %14243 ], [ %14239, %14238 ]
  %14256 = sub nsw i64 0, %14200
  %14257 = icmp eq i64 %14240, %14256
  br i1 %14257, label %14281, label %14258

14258:                                            ; preds = %14254, %14258
  %14259 = phi i64 [ %14279, %14258 ], [ %14255, %14254 ]
  %14260 = getelementptr inbounds i32, i32* %14195, i64 %14259
  %14261 = load i32, i32* %14260, align 4
  %14262 = lshr i32 %14261, 16
  %14263 = shl i32 %14261, 16
  %14264 = or i32 %14262, %14263
  %14265 = and i32 %14264, 16711935
  %14266 = and i32 %14261, -16711936
  %14267 = or i32 %14265, %14266
  %14268 = getelementptr inbounds i32, i32* %14196, i64 %14259
  store i32 %14267, i32* %14268, align 4
  %14269 = add nuw nsw i64 %14259, 1
  %14270 = getelementptr inbounds i32, i32* %14195, i64 %14269
  %14271 = load i32, i32* %14270, align 4
  %14272 = lshr i32 %14271, 16
  %14273 = shl i32 %14271, 16
  %14274 = or i32 %14272, %14273
  %14275 = and i32 %14274, 16711935
  %14276 = and i32 %14271, -16711936
  %14277 = or i32 %14275, %14276
  %14278 = getelementptr inbounds i32, i32* %14196, i64 %14269
  store i32 %14277, i32* %14278, align 4
  %14279 = add nuw nsw i64 %14259, 2
  %14280 = icmp eq i64 %14279, %14200
  br i1 %14280, label %14281, label %14258, !llvm.loop !602

14281:                                            ; preds = %14254, %14258, %14236, %14194
  %14282 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14068, align 8
  %14283 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14282, i64 0, i32 1, i32 0
  %14284 = load i32, i32* %14283, align 4
  %14285 = icmp eq i32 %14284, 0
  br i1 %14285, label %14316, label %14286

14286:                                            ; preds = %14281
  %14287 = load i8*, i8** %14099, align 8
  br label %14288

14288:                                            ; preds = %14298, %14286
  %14289 = phi i32 [ %14312, %14298 ], [ 0, %14286 ]
  %14290 = phi i8* [ %14310, %14298 ], [ %14287, %14286 ]
  %14291 = phi i8* [ %14311, %14298 ], [ %14129, %14286 ]
  %14292 = getelementptr inbounds i8, i8* %14290, i64 3
  %14293 = load i8, i8* %14292, align 1
  %14294 = icmp eq i8 %14293, 0
  br i1 %14294, label %14298, label %14295

14295:                                            ; preds = %14288
  %14296 = uitofp i8 %14293 to float
  %14297 = fdiv float 2.550000e+02, %14296
  br label %14298

14298:                                            ; preds = %14295, %14288
  %14299 = phi float [ %14297, %14295 ], [ 1.000000e+00, %14288 ]
  %14300 = load i8, i8* %14290, align 1
  %14301 = uitofp i8 %14300 to float
  %14302 = fmul float %14299, %14301
  %14303 = fptoui float %14302 to i8
  store i8 %14303, i8* %14291, align 1
  %14304 = getelementptr inbounds i8, i8* %14290, i64 1
  %14305 = load i8, i8* %14304, align 1
  %14306 = uitofp i8 %14305 to float
  %14307 = fmul float %14299, %14306
  %14308 = fptoui float %14307 to i8
  %14309 = getelementptr inbounds i8, i8* %14291, i64 1
  store i8 %14308, i8* %14309, align 1
  %14310 = getelementptr inbounds i8, i8* %14290, i64 4
  %14311 = getelementptr inbounds i8, i8* %14291, i64 2
  %14312 = add nuw i32 %14289, 1
  %14313 = icmp eq i32 %14312, %14284
  br i1 %14313, label %14314, label %14288

14314:                                            ; preds = %14298
  %14315 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14068, align 8
  br label %14316

14316:                                            ; preds = %14314, %14281
  %14317 = phi %"class.blink::IntRect"* [ %14315, %14314 ], [ %14282, %14281 ]
  %14318 = getelementptr inbounds i8, i8* %14130, i64 %14062
  %14319 = getelementptr inbounds i8, i8* %14129, i64 %14065
  %14320 = add nuw nsw i32 %14128, 1
  %14321 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14317, i64 0, i32 1, i32 1
  %14322 = load i32, i32* %14321, align 4
  %14323 = icmp slt i32 %14320, %14322
  br i1 %14323, label %14126, label %14111

14324:                                            ; preds = %14113, %14093
  %14325 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %14325, align 4
  br label %15491

14326:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %14327
    i32 1, label %14490
    i32 2, label %14657
  ]

14327:                                            ; preds = %14326
  %14328 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %14329 = load i32, i32* %14328, align 8
  %14330 = sext i32 %14329 to i64
  %14331 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %14332 = load i32, i32* %14331, align 8
  %14333 = sdiv i32 %14332, 2
  %14334 = sext i32 %14333 to i64
  %14335 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14336 = load i8*, i8** %14335, align 8
  %14337 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %14338 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14337, align 8
  %14339 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14338, i64 0, i32 0, i32 1
  %14340 = load i32, i32* %14339, align 4
  %14341 = mul nsw i32 %14340, %14329
  %14342 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %14343 = load i32, i32* %14342, align 4
  %14344 = add nsw i32 %14341, %14343
  %14345 = sext i32 %14344 to i64
  %14346 = getelementptr inbounds i8, i8* %14336, i64 %14345
  %14347 = icmp slt i32 %14332, 0
  %14348 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %14349 = load i32, i32* %14348, align 8
  %14350 = icmp sgt i32 %14349, 1
  %14351 = and i1 %14347, %14350
  br i1 %14351, label %14352, label %14362

14352:                                            ; preds = %14327
  %14353 = add nsw i32 %14349, -1
  %14354 = sext i32 %14353 to i64
  %14355 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %14356 = load i32, i32* %14355, align 4
  %14357 = sext i32 %14356 to i64
  %14358 = mul nsw i64 %14330, %14354
  %14359 = mul i64 %14358, %14357
  %14360 = sub i64 0, %14359
  %14361 = getelementptr inbounds i8, i8* %14346, i64 %14360
  br label %14364

14362:                                            ; preds = %14327
  %14363 = icmp sgt i32 %14349, 0
  br i1 %14363, label %14364, label %14488

14364:                                            ; preds = %14362, %14352
  %14365 = phi i8* [ %14361, %14352 ], [ %14346, %14362 ]
  %14366 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %14367 = bitcast i8** %14366 to i16**
  %14368 = load i16*, i16** %14367, align 8
  %14369 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %14370 = bitcast i8** %14369 to float**
  %14371 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %14372

14372:                                            ; preds = %14384, %14364
  %14373 = phi i32 [ %14349, %14364 ], [ %14385, %14384 ]
  %14374 = phi %"class.blink::IntRect"* [ %14338, %14364 ], [ %14386, %14384 ]
  %14375 = phi %"class.blink::IntRect"* [ %14338, %14364 ], [ %14387, %14384 ]
  %14376 = phi i32 [ 0, %14364 ], [ %14396, %14384 ]
  %14377 = phi i16* [ %14368, %14364 ], [ %14389, %14384 ]
  %14378 = phi i8* [ %14365, %14364 ], [ %14395, %14384 ]
  %14379 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14375, i64 0, i32 1, i32 1
  %14380 = load i32, i32* %14379, align 4
  %14381 = icmp sgt i32 %14380, 0
  br i1 %14381, label %14398, label %14384

14382:                                            ; preds = %14480
  %14383 = load i32, i32* %14348, align 8
  br label %14384

14384:                                            ; preds = %14382, %14372
  %14385 = phi i32 [ %14373, %14372 ], [ %14383, %14382 ]
  %14386 = phi %"class.blink::IntRect"* [ %14374, %14372 ], [ %14481, %14382 ]
  %14387 = phi %"class.blink::IntRect"* [ %14375, %14372 ], [ %14481, %14382 ]
  %14388 = phi i8* [ %14378, %14372 ], [ %14482, %14382 ]
  %14389 = phi i16* [ %14377, %14372 ], [ %14483, %14382 ]
  %14390 = phi i32 [ %14380, %14372 ], [ %14486, %14382 ]
  %14391 = load i32, i32* %14371, align 4
  %14392 = sub nsw i32 %14391, %14390
  %14393 = sext i32 %14392 to i64
  %14394 = mul nsw i64 %14393, %14330
  %14395 = getelementptr inbounds i8, i8* %14388, i64 %14394
  %14396 = add nuw nsw i32 %14376, 1
  %14397 = icmp slt i32 %14396, %14385
  br i1 %14397, label %14372, label %14488

14398:                                            ; preds = %14372, %14480
  %14399 = phi %"class.blink::IntRect"* [ %14481, %14480 ], [ %14374, %14372 ]
  %14400 = phi %"class.blink::IntRect"* [ %14481, %14480 ], [ %14375, %14372 ]
  %14401 = phi i32 [ %14484, %14480 ], [ 0, %14372 ]
  %14402 = phi i16* [ %14483, %14480 ], [ %14377, %14372 ]
  %14403 = phi i8* [ %14482, %14480 ], [ %14378, %14372 ]
  %14404 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14400, i64 0, i32 1, i32 0
  %14405 = load i32, i32* %14404, align 4
  %14406 = icmp eq i32 %14405, 0
  br i1 %14406, label %14480, label %14407

14407:                                            ; preds = %14398
  %14408 = load float*, float** %14370, align 8
  br label %14409

14409:                                            ; preds = %14409, %14407
  %14410 = phi i32 [ %14433, %14409 ], [ 0, %14407 ]
  %14411 = phi i8* [ %14431, %14409 ], [ %14403, %14407 ]
  %14412 = phi float* [ %14432, %14409 ], [ %14408, %14407 ]
  %14413 = getelementptr inbounds i8, i8* %14411, i64 2
  %14414 = load i8, i8* %14413, align 1
  %14415 = uitofp i8 %14414 to float
  %14416 = fmul float %14415, 0x3F70101020000000
  store float %14416, float* %14412, align 4
  %14417 = getelementptr inbounds i8, i8* %14411, i64 1
  %14418 = load i8, i8* %14417, align 1
  %14419 = uitofp i8 %14418 to float
  %14420 = fmul float %14419, 0x3F70101020000000
  %14421 = getelementptr inbounds float, float* %14412, i64 1
  store float %14420, float* %14421, align 4
  %14422 = load i8, i8* %14411, align 1
  %14423 = uitofp i8 %14422 to float
  %14424 = fmul float %14423, 0x3F70101020000000
  %14425 = getelementptr inbounds float, float* %14412, i64 2
  store float %14424, float* %14425, align 4
  %14426 = getelementptr inbounds i8, i8* %14411, i64 3
  %14427 = load i8, i8* %14426, align 1
  %14428 = uitofp i8 %14427 to float
  %14429 = fmul float %14428, 0x3F70101020000000
  %14430 = getelementptr inbounds float, float* %14412, i64 3
  store float %14429, float* %14430, align 4
  %14431 = getelementptr inbounds i8, i8* %14411, i64 4
  %14432 = getelementptr inbounds float, float* %14412, i64 4
  %14433 = add nuw i32 %14410, 1
  %14434 = icmp eq i32 %14433, %14405
  br i1 %14434, label %14435, label %14409

14435:                                            ; preds = %14409
  %14436 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14337, align 8
  %14437 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14436, i64 0, i32 1, i32 0
  %14438 = load i32, i32* %14437, align 4
  %14439 = icmp eq i32 %14438, 0
  br i1 %14439, label %14480, label %14440

14440:                                            ; preds = %14435
  %14441 = load float*, float** %14370, align 8
  br label %14442

14442:                                            ; preds = %14442, %14440
  %14443 = phi i32 [ %14476, %14442 ], [ 0, %14440 ]
  %14444 = phi float* [ %14474, %14442 ], [ %14441, %14440 ]
  %14445 = phi i16* [ %14475, %14442 ], [ %14402, %14440 ]
  %14446 = bitcast float* %14444 to i32*
  %14447 = load i32, i32* %14446, align 4
  %14448 = lshr i32 %14447, 23
  %14449 = zext i32 %14448 to i64
  %14450 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14449
  %14451 = load i16, i16* %14450, align 2
  %14452 = and i32 %14447, 8388607
  %14453 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14449
  %14454 = load i8, i8* %14453, align 1
  %14455 = zext i8 %14454 to i32
  %14456 = lshr i32 %14452, %14455
  %14457 = trunc i32 %14456 to i16
  %14458 = add i16 %14451, %14457
  store i16 %14458, i16* %14445, align 2
  %14459 = getelementptr inbounds float, float* %14444, i64 1
  %14460 = bitcast float* %14459 to i32*
  %14461 = load i32, i32* %14460, align 4
  %14462 = lshr i32 %14461, 23
  %14463 = zext i32 %14462 to i64
  %14464 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14463
  %14465 = load i16, i16* %14464, align 2
  %14466 = and i32 %14461, 8388607
  %14467 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14463
  %14468 = load i8, i8* %14467, align 1
  %14469 = zext i8 %14468 to i32
  %14470 = lshr i32 %14466, %14469
  %14471 = trunc i32 %14470 to i16
  %14472 = add i16 %14465, %14471
  %14473 = getelementptr inbounds i16, i16* %14445, i64 1
  store i16 %14472, i16* %14473, align 2
  %14474 = getelementptr inbounds float, float* %14444, i64 4
  %14475 = getelementptr inbounds i16, i16* %14445, i64 2
  %14476 = add nuw i32 %14443, 1
  %14477 = icmp eq i32 %14476, %14438
  br i1 %14477, label %14478, label %14442

14478:                                            ; preds = %14442
  %14479 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14337, align 8
  br label %14480

14480:                                            ; preds = %14478, %14435, %14398
  %14481 = phi %"class.blink::IntRect"* [ %14479, %14478 ], [ %14436, %14435 ], [ %14399, %14398 ]
  %14482 = getelementptr inbounds i8, i8* %14403, i64 %14330
  %14483 = getelementptr inbounds i16, i16* %14402, i64 %14334
  %14484 = add nuw nsw i32 %14401, 1
  %14485 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14481, i64 0, i32 1, i32 1
  %14486 = load i32, i32* %14485, align 4
  %14487 = icmp slt i32 %14484, %14486
  br i1 %14487, label %14398, label %14382

14488:                                            ; preds = %14384, %14362
  %14489 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %14489, align 4
  br label %15491

14490:                                            ; preds = %14326
  %14491 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %14492 = load i32, i32* %14491, align 8
  %14493 = sext i32 %14492 to i64
  %14494 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %14495 = load i32, i32* %14494, align 8
  %14496 = sdiv i32 %14495, 2
  %14497 = sext i32 %14496 to i64
  %14498 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14499 = load i8*, i8** %14498, align 8
  %14500 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %14501 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14500, align 8
  %14502 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14501, i64 0, i32 0, i32 1
  %14503 = load i32, i32* %14502, align 4
  %14504 = mul nsw i32 %14503, %14492
  %14505 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %14506 = load i32, i32* %14505, align 4
  %14507 = add nsw i32 %14504, %14506
  %14508 = sext i32 %14507 to i64
  %14509 = getelementptr inbounds i8, i8* %14499, i64 %14508
  %14510 = icmp slt i32 %14495, 0
  %14511 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %14512 = load i32, i32* %14511, align 8
  %14513 = icmp sgt i32 %14512, 1
  %14514 = and i1 %14510, %14513
  br i1 %14514, label %14515, label %14525

14515:                                            ; preds = %14490
  %14516 = add nsw i32 %14512, -1
  %14517 = sext i32 %14516 to i64
  %14518 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %14519 = load i32, i32* %14518, align 4
  %14520 = sext i32 %14519 to i64
  %14521 = mul nsw i64 %14493, %14517
  %14522 = mul i64 %14521, %14520
  %14523 = sub i64 0, %14522
  %14524 = getelementptr inbounds i8, i8* %14509, i64 %14523
  br label %14527

14525:                                            ; preds = %14490
  %14526 = icmp sgt i32 %14512, 0
  br i1 %14526, label %14527, label %14655

14527:                                            ; preds = %14525, %14515
  %14528 = phi i8* [ %14524, %14515 ], [ %14509, %14525 ]
  %14529 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %14530 = bitcast i8** %14529 to i16**
  %14531 = load i16*, i16** %14530, align 8
  %14532 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %14533 = bitcast i8** %14532 to float**
  %14534 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %14535

14535:                                            ; preds = %14547, %14527
  %14536 = phi i32 [ %14512, %14527 ], [ %14548, %14547 ]
  %14537 = phi %"class.blink::IntRect"* [ %14501, %14527 ], [ %14549, %14547 ]
  %14538 = phi %"class.blink::IntRect"* [ %14501, %14527 ], [ %14550, %14547 ]
  %14539 = phi i32 [ 0, %14527 ], [ %14559, %14547 ]
  %14540 = phi i16* [ %14531, %14527 ], [ %14552, %14547 ]
  %14541 = phi i8* [ %14528, %14527 ], [ %14558, %14547 ]
  %14542 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14538, i64 0, i32 1, i32 1
  %14543 = load i32, i32* %14542, align 4
  %14544 = icmp sgt i32 %14543, 0
  br i1 %14544, label %14561, label %14547

14545:                                            ; preds = %14647
  %14546 = load i32, i32* %14511, align 8
  br label %14547

14547:                                            ; preds = %14545, %14535
  %14548 = phi i32 [ %14536, %14535 ], [ %14546, %14545 ]
  %14549 = phi %"class.blink::IntRect"* [ %14537, %14535 ], [ %14648, %14545 ]
  %14550 = phi %"class.blink::IntRect"* [ %14538, %14535 ], [ %14648, %14545 ]
  %14551 = phi i8* [ %14541, %14535 ], [ %14649, %14545 ]
  %14552 = phi i16* [ %14540, %14535 ], [ %14650, %14545 ]
  %14553 = phi i32 [ %14543, %14535 ], [ %14653, %14545 ]
  %14554 = load i32, i32* %14534, align 4
  %14555 = sub nsw i32 %14554, %14553
  %14556 = sext i32 %14555 to i64
  %14557 = mul nsw i64 %14556, %14493
  %14558 = getelementptr inbounds i8, i8* %14551, i64 %14557
  %14559 = add nuw nsw i32 %14539, 1
  %14560 = icmp slt i32 %14559, %14548
  br i1 %14560, label %14535, label %14655

14561:                                            ; preds = %14535, %14647
  %14562 = phi %"class.blink::IntRect"* [ %14648, %14647 ], [ %14537, %14535 ]
  %14563 = phi %"class.blink::IntRect"* [ %14648, %14647 ], [ %14538, %14535 ]
  %14564 = phi i32 [ %14651, %14647 ], [ 0, %14535 ]
  %14565 = phi i16* [ %14650, %14647 ], [ %14540, %14535 ]
  %14566 = phi i8* [ %14649, %14647 ], [ %14541, %14535 ]
  %14567 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14563, i64 0, i32 1, i32 0
  %14568 = load i32, i32* %14567, align 4
  %14569 = icmp eq i32 %14568, 0
  br i1 %14569, label %14647, label %14570

14570:                                            ; preds = %14561
  %14571 = load float*, float** %14533, align 8
  br label %14572

14572:                                            ; preds = %14572, %14570
  %14573 = phi i32 [ %14596, %14572 ], [ 0, %14570 ]
  %14574 = phi i8* [ %14594, %14572 ], [ %14566, %14570 ]
  %14575 = phi float* [ %14595, %14572 ], [ %14571, %14570 ]
  %14576 = getelementptr inbounds i8, i8* %14574, i64 2
  %14577 = load i8, i8* %14576, align 1
  %14578 = uitofp i8 %14577 to float
  %14579 = fmul float %14578, 0x3F70101020000000
  store float %14579, float* %14575, align 4
  %14580 = getelementptr inbounds i8, i8* %14574, i64 1
  %14581 = load i8, i8* %14580, align 1
  %14582 = uitofp i8 %14581 to float
  %14583 = fmul float %14582, 0x3F70101020000000
  %14584 = getelementptr inbounds float, float* %14575, i64 1
  store float %14583, float* %14584, align 4
  %14585 = load i8, i8* %14574, align 1
  %14586 = uitofp i8 %14585 to float
  %14587 = fmul float %14586, 0x3F70101020000000
  %14588 = getelementptr inbounds float, float* %14575, i64 2
  store float %14587, float* %14588, align 4
  %14589 = getelementptr inbounds i8, i8* %14574, i64 3
  %14590 = load i8, i8* %14589, align 1
  %14591 = uitofp i8 %14590 to float
  %14592 = fmul float %14591, 0x3F70101020000000
  %14593 = getelementptr inbounds float, float* %14575, i64 3
  store float %14592, float* %14593, align 4
  %14594 = getelementptr inbounds i8, i8* %14574, i64 4
  %14595 = getelementptr inbounds float, float* %14575, i64 4
  %14596 = add nuw i32 %14573, 1
  %14597 = icmp eq i32 %14596, %14568
  br i1 %14597, label %14598, label %14572

14598:                                            ; preds = %14572
  %14599 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14500, align 8
  %14600 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14599, i64 0, i32 1, i32 0
  %14601 = load i32, i32* %14600, align 4
  %14602 = icmp eq i32 %14601, 0
  br i1 %14602, label %14647, label %14603

14603:                                            ; preds = %14598
  %14604 = load float*, float** %14533, align 8
  br label %14605

14605:                                            ; preds = %14605, %14603
  %14606 = phi float* [ %14641, %14605 ], [ %14604, %14603 ]
  %14607 = phi i32 [ %14643, %14605 ], [ 0, %14603 ]
  %14608 = phi i16* [ %14642, %14605 ], [ %14565, %14603 ]
  %14609 = getelementptr inbounds float, float* %14606, i64 3
  %14610 = load float, float* %14609, align 4
  %14611 = load float, float* %14606, align 4
  %14612 = fmul float %14610, %14611
  %14613 = bitcast float %14612 to i32
  %14614 = lshr i32 %14613, 23
  %14615 = zext i32 %14614 to i64
  %14616 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14615
  %14617 = load i16, i16* %14616, align 2
  %14618 = and i32 %14613, 8388607
  %14619 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14615
  %14620 = load i8, i8* %14619, align 1
  %14621 = zext i8 %14620 to i32
  %14622 = lshr i32 %14618, %14621
  %14623 = trunc i32 %14622 to i16
  %14624 = add i16 %14617, %14623
  store i16 %14624, i16* %14608, align 2
  %14625 = getelementptr inbounds float, float* %14606, i64 1
  %14626 = load float, float* %14625, align 4
  %14627 = fmul float %14610, %14626
  %14628 = bitcast float %14627 to i32
  %14629 = lshr i32 %14628, 23
  %14630 = zext i32 %14629 to i64
  %14631 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14630
  %14632 = load i16, i16* %14631, align 2
  %14633 = and i32 %14628, 8388607
  %14634 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14630
  %14635 = load i8, i8* %14634, align 1
  %14636 = zext i8 %14635 to i32
  %14637 = lshr i32 %14633, %14636
  %14638 = trunc i32 %14637 to i16
  %14639 = add i16 %14632, %14638
  %14640 = getelementptr inbounds i16, i16* %14608, i64 1
  store i16 %14639, i16* %14640, align 2
  %14641 = getelementptr inbounds float, float* %14606, i64 4
  %14642 = getelementptr inbounds i16, i16* %14608, i64 2
  %14643 = add nuw i32 %14607, 1
  %14644 = icmp eq i32 %14643, %14601
  br i1 %14644, label %14645, label %14605

14645:                                            ; preds = %14605
  %14646 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14500, align 8
  br label %14647

14647:                                            ; preds = %14645, %14598, %14561
  %14648 = phi %"class.blink::IntRect"* [ %14646, %14645 ], [ %14599, %14598 ], [ %14562, %14561 ]
  %14649 = getelementptr inbounds i8, i8* %14566, i64 %14493
  %14650 = getelementptr inbounds i16, i16* %14565, i64 %14497
  %14651 = add nuw nsw i32 %14564, 1
  %14652 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14648, i64 0, i32 1, i32 1
  %14653 = load i32, i32* %14652, align 4
  %14654 = icmp slt i32 %14651, %14653
  br i1 %14654, label %14561, label %14545

14655:                                            ; preds = %14547, %14525
  %14656 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %14656, align 4
  br label %15491

14657:                                            ; preds = %14326
  %14658 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %14659 = load i32, i32* %14658, align 8
  %14660 = sext i32 %14659 to i64
  %14661 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %14662 = load i32, i32* %14661, align 8
  %14663 = sdiv i32 %14662, 2
  %14664 = sext i32 %14663 to i64
  %14665 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14666 = load i8*, i8** %14665, align 8
  %14667 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %14668 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14667, align 8
  %14669 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14668, i64 0, i32 0, i32 1
  %14670 = load i32, i32* %14669, align 4
  %14671 = mul nsw i32 %14670, %14659
  %14672 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %14673 = load i32, i32* %14672, align 4
  %14674 = add nsw i32 %14671, %14673
  %14675 = sext i32 %14674 to i64
  %14676 = getelementptr inbounds i8, i8* %14666, i64 %14675
  %14677 = icmp slt i32 %14662, 0
  %14678 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %14679 = load i32, i32* %14678, align 8
  %14680 = icmp sgt i32 %14679, 1
  %14681 = and i1 %14677, %14680
  br i1 %14681, label %14682, label %14692

14682:                                            ; preds = %14657
  %14683 = add nsw i32 %14679, -1
  %14684 = sext i32 %14683 to i64
  %14685 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %14686 = load i32, i32* %14685, align 4
  %14687 = sext i32 %14686 to i64
  %14688 = mul nsw i64 %14660, %14684
  %14689 = mul i64 %14688, %14687
  %14690 = sub i64 0, %14689
  %14691 = getelementptr inbounds i8, i8* %14676, i64 %14690
  br label %14694

14692:                                            ; preds = %14657
  %14693 = icmp sgt i32 %14679, 0
  br i1 %14693, label %14694, label %14825

14694:                                            ; preds = %14692, %14682
  %14695 = phi i8* [ %14691, %14682 ], [ %14676, %14692 ]
  %14696 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %14697 = bitcast i8** %14696 to i16**
  %14698 = load i16*, i16** %14697, align 8
  %14699 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %14700 = bitcast i8** %14699 to float**
  %14701 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %14702

14702:                                            ; preds = %14714, %14694
  %14703 = phi i32 [ %14679, %14694 ], [ %14715, %14714 ]
  %14704 = phi %"class.blink::IntRect"* [ %14668, %14694 ], [ %14716, %14714 ]
  %14705 = phi %"class.blink::IntRect"* [ %14668, %14694 ], [ %14717, %14714 ]
  %14706 = phi i32 [ 0, %14694 ], [ %14726, %14714 ]
  %14707 = phi i16* [ %14698, %14694 ], [ %14719, %14714 ]
  %14708 = phi i8* [ %14695, %14694 ], [ %14725, %14714 ]
  %14709 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14705, i64 0, i32 1, i32 1
  %14710 = load i32, i32* %14709, align 4
  %14711 = icmp sgt i32 %14710, 0
  br i1 %14711, label %14728, label %14714

14712:                                            ; preds = %14817
  %14713 = load i32, i32* %14678, align 8
  br label %14714

14714:                                            ; preds = %14712, %14702
  %14715 = phi i32 [ %14703, %14702 ], [ %14713, %14712 ]
  %14716 = phi %"class.blink::IntRect"* [ %14704, %14702 ], [ %14818, %14712 ]
  %14717 = phi %"class.blink::IntRect"* [ %14705, %14702 ], [ %14818, %14712 ]
  %14718 = phi i8* [ %14708, %14702 ], [ %14819, %14712 ]
  %14719 = phi i16* [ %14707, %14702 ], [ %14820, %14712 ]
  %14720 = phi i32 [ %14710, %14702 ], [ %14823, %14712 ]
  %14721 = load i32, i32* %14701, align 4
  %14722 = sub nsw i32 %14721, %14720
  %14723 = sext i32 %14722 to i64
  %14724 = mul nsw i64 %14723, %14660
  %14725 = getelementptr inbounds i8, i8* %14718, i64 %14724
  %14726 = add nuw nsw i32 %14706, 1
  %14727 = icmp slt i32 %14726, %14715
  br i1 %14727, label %14702, label %14825

14728:                                            ; preds = %14702, %14817
  %14729 = phi %"class.blink::IntRect"* [ %14818, %14817 ], [ %14704, %14702 ]
  %14730 = phi %"class.blink::IntRect"* [ %14818, %14817 ], [ %14705, %14702 ]
  %14731 = phi i32 [ %14821, %14817 ], [ 0, %14702 ]
  %14732 = phi i16* [ %14820, %14817 ], [ %14707, %14702 ]
  %14733 = phi i8* [ %14819, %14817 ], [ %14708, %14702 ]
  %14734 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14730, i64 0, i32 1, i32 0
  %14735 = load i32, i32* %14734, align 4
  %14736 = icmp eq i32 %14735, 0
  br i1 %14736, label %14817, label %14737

14737:                                            ; preds = %14728
  %14738 = load float*, float** %14700, align 8
  br label %14739

14739:                                            ; preds = %14739, %14737
  %14740 = phi i32 [ %14763, %14739 ], [ 0, %14737 ]
  %14741 = phi i8* [ %14761, %14739 ], [ %14733, %14737 ]
  %14742 = phi float* [ %14762, %14739 ], [ %14738, %14737 ]
  %14743 = getelementptr inbounds i8, i8* %14741, i64 2
  %14744 = load i8, i8* %14743, align 1
  %14745 = uitofp i8 %14744 to float
  %14746 = fmul float %14745, 0x3F70101020000000
  store float %14746, float* %14742, align 4
  %14747 = getelementptr inbounds i8, i8* %14741, i64 1
  %14748 = load i8, i8* %14747, align 1
  %14749 = uitofp i8 %14748 to float
  %14750 = fmul float %14749, 0x3F70101020000000
  %14751 = getelementptr inbounds float, float* %14742, i64 1
  store float %14750, float* %14751, align 4
  %14752 = load i8, i8* %14741, align 1
  %14753 = uitofp i8 %14752 to float
  %14754 = fmul float %14753, 0x3F70101020000000
  %14755 = getelementptr inbounds float, float* %14742, i64 2
  store float %14754, float* %14755, align 4
  %14756 = getelementptr inbounds i8, i8* %14741, i64 3
  %14757 = load i8, i8* %14756, align 1
  %14758 = uitofp i8 %14757 to float
  %14759 = fmul float %14758, 0x3F70101020000000
  %14760 = getelementptr inbounds float, float* %14742, i64 3
  store float %14759, float* %14760, align 4
  %14761 = getelementptr inbounds i8, i8* %14741, i64 4
  %14762 = getelementptr inbounds float, float* %14742, i64 4
  %14763 = add nuw i32 %14740, 1
  %14764 = icmp eq i32 %14763, %14735
  br i1 %14764, label %14765, label %14739

14765:                                            ; preds = %14739
  %14766 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14667, align 8
  %14767 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14766, i64 0, i32 1, i32 0
  %14768 = load i32, i32* %14767, align 4
  %14769 = icmp eq i32 %14768, 0
  br i1 %14769, label %14817, label %14770

14770:                                            ; preds = %14765
  %14771 = load float*, float** %14700, align 8
  br label %14772

14772:                                            ; preds = %14772, %14770
  %14773 = phi i32 [ %14813, %14772 ], [ 0, %14770 ]
  %14774 = phi float* [ %14811, %14772 ], [ %14771, %14770 ]
  %14775 = phi i16* [ %14812, %14772 ], [ %14732, %14770 ]
  %14776 = getelementptr inbounds float, float* %14774, i64 3
  %14777 = load float, float* %14776, align 4
  %14778 = fcmp une float %14777, 0.000000e+00
  %14779 = fdiv float 1.000000e+00, %14777
  %14780 = select i1 %14778, float %14779, float 1.000000e+00
  %14781 = load float, float* %14774, align 4
  %14782 = fmul float %14781, %14780
  %14783 = bitcast float %14782 to i32
  %14784 = lshr i32 %14783, 23
  %14785 = zext i32 %14784 to i64
  %14786 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14785
  %14787 = load i16, i16* %14786, align 2
  %14788 = and i32 %14783, 8388607
  %14789 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14785
  %14790 = load i8, i8* %14789, align 1
  %14791 = zext i8 %14790 to i32
  %14792 = lshr i32 %14788, %14791
  %14793 = trunc i32 %14792 to i16
  %14794 = add i16 %14787, %14793
  store i16 %14794, i16* %14775, align 2
  %14795 = getelementptr inbounds float, float* %14774, i64 1
  %14796 = load float, float* %14795, align 4
  %14797 = fmul float %14780, %14796
  %14798 = bitcast float %14797 to i32
  %14799 = lshr i32 %14798, 23
  %14800 = zext i32 %14799 to i64
  %14801 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %14800
  %14802 = load i16, i16* %14801, align 2
  %14803 = and i32 %14798, 8388607
  %14804 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %14800
  %14805 = load i8, i8* %14804, align 1
  %14806 = zext i8 %14805 to i32
  %14807 = lshr i32 %14803, %14806
  %14808 = trunc i32 %14807 to i16
  %14809 = add i16 %14802, %14808
  %14810 = getelementptr inbounds i16, i16* %14775, i64 1
  store i16 %14809, i16* %14810, align 2
  %14811 = getelementptr inbounds float, float* %14774, i64 4
  %14812 = getelementptr inbounds i16, i16* %14775, i64 2
  %14813 = add nuw i32 %14773, 1
  %14814 = icmp eq i32 %14813, %14768
  br i1 %14814, label %14815, label %14772

14815:                                            ; preds = %14772
  %14816 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14667, align 8
  br label %14817

14817:                                            ; preds = %14815, %14765, %14728
  %14818 = phi %"class.blink::IntRect"* [ %14816, %14815 ], [ %14766, %14765 ], [ %14729, %14728 ]
  %14819 = getelementptr inbounds i8, i8* %14733, i64 %14660
  %14820 = getelementptr inbounds i16, i16* %14732, i64 %14664
  %14821 = add nuw nsw i32 %14731, 1
  %14822 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14818, i64 0, i32 1, i32 1
  %14823 = load i32, i32* %14822, align 4
  %14824 = icmp slt i32 %14821, %14823
  br i1 %14824, label %14728, label %14712

14825:                                            ; preds = %14714, %14692
  %14826 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %14826, align 4
  br label %15491

14827:                                            ; preds = %3
  switch i32 %2, label %15491 [
    i32 0, label %14828
    i32 1, label %15026
    i32 2, label %15291
  ]

14828:                                            ; preds = %14827
  %14829 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %14830 = load i32, i32* %14829, align 8
  %14831 = sext i32 %14830 to i64
  %14832 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %14833 = load i32, i32* %14832, align 8
  %14834 = sdiv i32 %14833, 4
  %14835 = sext i32 %14834 to i64
  %14836 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14837 = load i8*, i8** %14836, align 8
  %14838 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %14839 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14838, align 8
  %14840 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14839, i64 0, i32 0, i32 1
  %14841 = load i32, i32* %14840, align 4
  %14842 = mul nsw i32 %14841, %14830
  %14843 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %14844 = load i32, i32* %14843, align 4
  %14845 = add nsw i32 %14842, %14844
  %14846 = sext i32 %14845 to i64
  %14847 = getelementptr inbounds i8, i8* %14837, i64 %14846
  %14848 = icmp slt i32 %14833, 0
  %14849 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %14850 = load i32, i32* %14849, align 8
  %14851 = icmp sgt i32 %14850, 1
  %14852 = and i1 %14848, %14851
  br i1 %14852, label %14853, label %14863

14853:                                            ; preds = %14828
  %14854 = add nsw i32 %14850, -1
  %14855 = sext i32 %14854 to i64
  %14856 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %14857 = load i32, i32* %14856, align 4
  %14858 = sext i32 %14857 to i64
  %14859 = mul nsw i64 %14831, %14855
  %14860 = mul i64 %14859, %14858
  %14861 = sub i64 0, %14860
  %14862 = getelementptr inbounds i8, i8* %14847, i64 %14861
  br label %14865

14863:                                            ; preds = %14828
  %14864 = icmp sgt i32 %14850, 0
  br i1 %14864, label %14865, label %15024

14865:                                            ; preds = %14863, %14853
  %14866 = phi i8* [ %14862, %14853 ], [ %14847, %14863 ]
  %14867 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %14868 = bitcast i8** %14867 to float**
  %14869 = load float*, float** %14868, align 8
  %14870 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %14871 = bitcast i8** %14870 to float**
  %14872 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %14873

14873:                                            ; preds = %14885, %14865
  %14874 = phi i32 [ %14850, %14865 ], [ %14886, %14885 ]
  %14875 = phi %"class.blink::IntRect"* [ %14839, %14865 ], [ %14887, %14885 ]
  %14876 = phi %"class.blink::IntRect"* [ %14839, %14865 ], [ %14888, %14885 ]
  %14877 = phi i32 [ 0, %14865 ], [ %14897, %14885 ]
  %14878 = phi float* [ %14869, %14865 ], [ %14890, %14885 ]
  %14879 = phi i8* [ %14866, %14865 ], [ %14896, %14885 ]
  %14880 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14876, i64 0, i32 1, i32 1
  %14881 = load i32, i32* %14880, align 4
  %14882 = icmp sgt i32 %14881, 0
  br i1 %14882, label %14899, label %14885

14883:                                            ; preds = %15016
  %14884 = load i32, i32* %14849, align 8
  br label %14885

14885:                                            ; preds = %14883, %14873
  %14886 = phi i32 [ %14874, %14873 ], [ %14884, %14883 ]
  %14887 = phi %"class.blink::IntRect"* [ %14875, %14873 ], [ %15017, %14883 ]
  %14888 = phi %"class.blink::IntRect"* [ %14876, %14873 ], [ %15017, %14883 ]
  %14889 = phi i8* [ %14879, %14873 ], [ %15018, %14883 ]
  %14890 = phi float* [ %14878, %14873 ], [ %15019, %14883 ]
  %14891 = phi i32 [ %14881, %14873 ], [ %15022, %14883 ]
  %14892 = load i32, i32* %14872, align 4
  %14893 = sub nsw i32 %14892, %14891
  %14894 = sext i32 %14893 to i64
  %14895 = mul nsw i64 %14894, %14831
  %14896 = getelementptr inbounds i8, i8* %14889, i64 %14895
  %14897 = add nuw nsw i32 %14877, 1
  %14898 = icmp slt i32 %14897, %14886
  br i1 %14898, label %14873, label %15024

14899:                                            ; preds = %14873, %15016
  %14900 = phi %"class.blink::IntRect"* [ %15017, %15016 ], [ %14875, %14873 ]
  %14901 = phi %"class.blink::IntRect"* [ %15017, %15016 ], [ %14876, %14873 ]
  %14902 = phi i32 [ %15020, %15016 ], [ 0, %14873 ]
  %14903 = phi float* [ %15019, %15016 ], [ %14878, %14873 ]
  %14904 = phi i8* [ %15018, %15016 ], [ %14879, %14873 ]
  %14905 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14901, i64 0, i32 1, i32 0
  %14906 = load i32, i32* %14905, align 4
  %14907 = icmp eq i32 %14906, 0
  br i1 %14907, label %15016, label %14908

14908:                                            ; preds = %14899
  %14909 = load float*, float** %14871, align 8
  br label %14910

14910:                                            ; preds = %14910, %14908
  %14911 = phi i32 [ %14934, %14910 ], [ 0, %14908 ]
  %14912 = phi i8* [ %14932, %14910 ], [ %14904, %14908 ]
  %14913 = phi float* [ %14933, %14910 ], [ %14909, %14908 ]
  %14914 = getelementptr inbounds i8, i8* %14912, i64 2
  %14915 = load i8, i8* %14914, align 1
  %14916 = uitofp i8 %14915 to float
  %14917 = fmul float %14916, 0x3F70101020000000
  store float %14917, float* %14913, align 4
  %14918 = getelementptr inbounds i8, i8* %14912, i64 1
  %14919 = load i8, i8* %14918, align 1
  %14920 = uitofp i8 %14919 to float
  %14921 = fmul float %14920, 0x3F70101020000000
  %14922 = getelementptr inbounds float, float* %14913, i64 1
  store float %14921, float* %14922, align 4
  %14923 = load i8, i8* %14912, align 1
  %14924 = uitofp i8 %14923 to float
  %14925 = fmul float %14924, 0x3F70101020000000
  %14926 = getelementptr inbounds float, float* %14913, i64 2
  store float %14925, float* %14926, align 4
  %14927 = getelementptr inbounds i8, i8* %14912, i64 3
  %14928 = load i8, i8* %14927, align 1
  %14929 = uitofp i8 %14928 to float
  %14930 = fmul float %14929, 0x3F70101020000000
  %14931 = getelementptr inbounds float, float* %14913, i64 3
  store float %14930, float* %14931, align 4
  %14932 = getelementptr inbounds i8, i8* %14912, i64 4
  %14933 = getelementptr inbounds float, float* %14913, i64 4
  %14934 = add nuw i32 %14911, 1
  %14935 = icmp eq i32 %14934, %14906
  br i1 %14935, label %14936, label %14910

14936:                                            ; preds = %14910
  %14937 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14838, align 8
  %14938 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %14937, i64 0, i32 1, i32 0
  %14939 = load i32, i32* %14938, align 4
  %14940 = icmp eq i32 %14939, 0
  br i1 %14940, label %15016, label %14941

14941:                                            ; preds = %14936
  %14942 = load float*, float** %14871, align 8
  %14943 = add i32 %14939, -1
  %14944 = and i32 %14939, 3
  %14945 = icmp ult i32 %14943, 3
  br i1 %14945, label %14994, label %14946

14946:                                            ; preds = %14941
  %14947 = sub i32 %14939, %14944
  br label %14948

14948:                                            ; preds = %14948, %14946
  %14949 = phi float* [ %14942, %14946 ], [ %14990, %14948 ]
  %14950 = phi float* [ %14903, %14946 ], [ %14991, %14948 ]
  %14951 = phi i32 [ %14947, %14946 ], [ %14992, %14948 ]
  %14952 = bitcast float* %14949 to i32*
  %14953 = load i32, i32* %14952, align 4
  %14954 = bitcast float* %14950 to i32*
  store i32 %14953, i32* %14954, align 4
  %14955 = getelementptr inbounds float, float* %14949, i64 1
  %14956 = bitcast float* %14955 to i32*
  %14957 = load i32, i32* %14956, align 4
  %14958 = getelementptr inbounds float, float* %14950, i64 1
  %14959 = bitcast float* %14958 to i32*
  store i32 %14957, i32* %14959, align 4
  %14960 = getelementptr inbounds float, float* %14949, i64 4
  %14961 = getelementptr inbounds float, float* %14950, i64 2
  %14962 = bitcast float* %14960 to i32*
  %14963 = load i32, i32* %14962, align 4
  %14964 = bitcast float* %14961 to i32*
  store i32 %14963, i32* %14964, align 4
  %14965 = getelementptr inbounds float, float* %14949, i64 5
  %14966 = bitcast float* %14965 to i32*
  %14967 = load i32, i32* %14966, align 4
  %14968 = getelementptr inbounds float, float* %14950, i64 3
  %14969 = bitcast float* %14968 to i32*
  store i32 %14967, i32* %14969, align 4
  %14970 = getelementptr inbounds float, float* %14949, i64 8
  %14971 = getelementptr inbounds float, float* %14950, i64 4
  %14972 = bitcast float* %14970 to i32*
  %14973 = load i32, i32* %14972, align 4
  %14974 = bitcast float* %14971 to i32*
  store i32 %14973, i32* %14974, align 4
  %14975 = getelementptr inbounds float, float* %14949, i64 9
  %14976 = bitcast float* %14975 to i32*
  %14977 = load i32, i32* %14976, align 4
  %14978 = getelementptr inbounds float, float* %14950, i64 5
  %14979 = bitcast float* %14978 to i32*
  store i32 %14977, i32* %14979, align 4
  %14980 = getelementptr inbounds float, float* %14949, i64 12
  %14981 = getelementptr inbounds float, float* %14950, i64 6
  %14982 = bitcast float* %14980 to i32*
  %14983 = load i32, i32* %14982, align 4
  %14984 = bitcast float* %14981 to i32*
  store i32 %14983, i32* %14984, align 4
  %14985 = getelementptr inbounds float, float* %14949, i64 13
  %14986 = bitcast float* %14985 to i32*
  %14987 = load i32, i32* %14986, align 4
  %14988 = getelementptr inbounds float, float* %14950, i64 7
  %14989 = bitcast float* %14988 to i32*
  store i32 %14987, i32* %14989, align 4
  %14990 = getelementptr inbounds float, float* %14949, i64 16
  %14991 = getelementptr inbounds float, float* %14950, i64 8
  %14992 = add i32 %14951, -4
  %14993 = icmp eq i32 %14992, 0
  br i1 %14993, label %14994, label %14948

14994:                                            ; preds = %14948, %14941
  %14995 = phi float* [ %14942, %14941 ], [ %14990, %14948 ]
  %14996 = phi float* [ %14903, %14941 ], [ %14991, %14948 ]
  %14997 = icmp eq i32 %14944, 0
  br i1 %14997, label %15014, label %14998

14998:                                            ; preds = %14994, %14998
  %14999 = phi float* [ %15010, %14998 ], [ %14995, %14994 ]
  %15000 = phi float* [ %15011, %14998 ], [ %14996, %14994 ]
  %15001 = phi i32 [ %15012, %14998 ], [ %14944, %14994 ]
  %15002 = bitcast float* %14999 to i32*
  %15003 = load i32, i32* %15002, align 4
  %15004 = bitcast float* %15000 to i32*
  store i32 %15003, i32* %15004, align 4
  %15005 = getelementptr inbounds float, float* %14999, i64 1
  %15006 = bitcast float* %15005 to i32*
  %15007 = load i32, i32* %15006, align 4
  %15008 = getelementptr inbounds float, float* %15000, i64 1
  %15009 = bitcast float* %15008 to i32*
  store i32 %15007, i32* %15009, align 4
  %15010 = getelementptr inbounds float, float* %14999, i64 4
  %15011 = getelementptr inbounds float, float* %15000, i64 2
  %15012 = add i32 %15001, -1
  %15013 = icmp eq i32 %15012, 0
  br i1 %15013, label %15014, label %14998, !llvm.loop !603

15014:                                            ; preds = %14998, %14994
  %15015 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %14838, align 8
  br label %15016

15016:                                            ; preds = %15014, %14936, %14899
  %15017 = phi %"class.blink::IntRect"* [ %15015, %15014 ], [ %14937, %14936 ], [ %14900, %14899 ]
  %15018 = getelementptr inbounds i8, i8* %14904, i64 %14831
  %15019 = getelementptr inbounds float, float* %14903, i64 %14835
  %15020 = add nuw nsw i32 %14902, 1
  %15021 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15017, i64 0, i32 1, i32 1
  %15022 = load i32, i32* %15021, align 4
  %15023 = icmp slt i32 %15020, %15022
  br i1 %15023, label %14899, label %14883

15024:                                            ; preds = %14885, %14863
  %15025 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %15025, align 4
  br label %15491

15026:                                            ; preds = %14827
  %15027 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %15028 = load i32, i32* %15027, align 8
  %15029 = sext i32 %15028 to i64
  %15030 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %15031 = load i32, i32* %15030, align 8
  %15032 = sdiv i32 %15031, 4
  %15033 = sext i32 %15032 to i64
  %15034 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %15035 = load i8*, i8** %15034, align 8
  %15036 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %15037 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15036, align 8
  %15038 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15037, i64 0, i32 0, i32 1
  %15039 = load i32, i32* %15038, align 4
  %15040 = mul nsw i32 %15039, %15028
  %15041 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %15042 = load i32, i32* %15041, align 4
  %15043 = add nsw i32 %15040, %15042
  %15044 = sext i32 %15043 to i64
  %15045 = getelementptr inbounds i8, i8* %15035, i64 %15044
  %15046 = icmp slt i32 %15031, 0
  %15047 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %15048 = load i32, i32* %15047, align 8
  %15049 = icmp sgt i32 %15048, 1
  %15050 = and i1 %15046, %15049
  br i1 %15050, label %15051, label %15061

15051:                                            ; preds = %15026
  %15052 = add nsw i32 %15048, -1
  %15053 = sext i32 %15052 to i64
  %15054 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %15055 = load i32, i32* %15054, align 4
  %15056 = sext i32 %15055 to i64
  %15057 = mul nsw i64 %15029, %15053
  %15058 = mul i64 %15057, %15056
  %15059 = sub i64 0, %15058
  %15060 = getelementptr inbounds i8, i8* %15045, i64 %15059
  br label %15063

15061:                                            ; preds = %15026
  %15062 = icmp sgt i32 %15048, 0
  br i1 %15062, label %15063, label %15289

15063:                                            ; preds = %15061, %15051
  %15064 = phi i8* [ %15060, %15051 ], [ %15045, %15061 ]
  %15065 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %15066 = bitcast i8** %15065 to float**
  %15067 = load float*, float** %15066, align 8
  %15068 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %15069 = bitcast i8** %15068 to float**
  %15070 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %15071

15071:                                            ; preds = %15083, %15063
  %15072 = phi i32 [ %15048, %15063 ], [ %15084, %15083 ]
  %15073 = phi %"class.blink::IntRect"* [ %15037, %15063 ], [ %15085, %15083 ]
  %15074 = phi %"class.blink::IntRect"* [ %15037, %15063 ], [ %15086, %15083 ]
  %15075 = phi i32 [ 0, %15063 ], [ %15095, %15083 ]
  %15076 = phi float* [ %15067, %15063 ], [ %15088, %15083 ]
  %15077 = phi i8* [ %15064, %15063 ], [ %15094, %15083 ]
  %15078 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15074, i64 0, i32 1, i32 1
  %15079 = load i32, i32* %15078, align 4
  %15080 = icmp sgt i32 %15079, 0
  br i1 %15080, label %15097, label %15083

15081:                                            ; preds = %15280
  %15082 = load i32, i32* %15047, align 8
  br label %15083

15083:                                            ; preds = %15081, %15071
  %15084 = phi i32 [ %15072, %15071 ], [ %15082, %15081 ]
  %15085 = phi %"class.blink::IntRect"* [ %15073, %15071 ], [ %15281, %15081 ]
  %15086 = phi %"class.blink::IntRect"* [ %15074, %15071 ], [ %15281, %15081 ]
  %15087 = phi i8* [ %15077, %15071 ], [ %15282, %15081 ]
  %15088 = phi float* [ %15076, %15071 ], [ %15283, %15081 ]
  %15089 = phi i32 [ %15079, %15071 ], [ %15286, %15081 ]
  %15090 = load i32, i32* %15070, align 4
  %15091 = sub nsw i32 %15090, %15089
  %15092 = sext i32 %15091 to i64
  %15093 = mul nsw i64 %15092, %15029
  %15094 = getelementptr inbounds i8, i8* %15087, i64 %15093
  %15095 = add nuw nsw i32 %15075, 1
  %15096 = icmp slt i32 %15095, %15084
  br i1 %15096, label %15071, label %15289

15097:                                            ; preds = %15071, %15280
  %15098 = phi i64 [ %15288, %15280 ], [ 0, %15071 ]
  %15099 = phi %"class.blink::IntRect"* [ %15281, %15280 ], [ %15073, %15071 ]
  %15100 = phi %"class.blink::IntRect"* [ %15281, %15280 ], [ %15074, %15071 ]
  %15101 = phi i32 [ %15284, %15280 ], [ 0, %15071 ]
  %15102 = phi float* [ %15283, %15280 ], [ %15076, %15071 ]
  %15103 = phi i8* [ %15282, %15280 ], [ %15077, %15071 ]
  %15104 = mul i64 %15098, %15033
  %15105 = getelementptr float, float* %15076, i64 %15104
  %15106 = add i64 %15104, 2
  %15107 = getelementptr float, float* %15076, i64 %15106
  %15108 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15100, i64 0, i32 1, i32 0
  %15109 = load i32, i32* %15108, align 4
  %15110 = icmp eq i32 %15109, 0
  br i1 %15110, label %15280, label %15111

15111:                                            ; preds = %15097
  %15112 = load float*, float** %15069, align 8
  br label %15113

15113:                                            ; preds = %15113, %15111
  %15114 = phi i32 [ %15137, %15113 ], [ 0, %15111 ]
  %15115 = phi i8* [ %15135, %15113 ], [ %15103, %15111 ]
  %15116 = phi float* [ %15136, %15113 ], [ %15112, %15111 ]
  %15117 = getelementptr inbounds i8, i8* %15115, i64 2
  %15118 = load i8, i8* %15117, align 1
  %15119 = uitofp i8 %15118 to float
  %15120 = fmul float %15119, 0x3F70101020000000
  store float %15120, float* %15116, align 4
  %15121 = getelementptr inbounds i8, i8* %15115, i64 1
  %15122 = load i8, i8* %15121, align 1
  %15123 = uitofp i8 %15122 to float
  %15124 = fmul float %15123, 0x3F70101020000000
  %15125 = getelementptr inbounds float, float* %15116, i64 1
  store float %15124, float* %15125, align 4
  %15126 = load i8, i8* %15115, align 1
  %15127 = uitofp i8 %15126 to float
  %15128 = fmul float %15127, 0x3F70101020000000
  %15129 = getelementptr inbounds float, float* %15116, i64 2
  store float %15128, float* %15129, align 4
  %15130 = getelementptr inbounds i8, i8* %15115, i64 3
  %15131 = load i8, i8* %15130, align 1
  %15132 = uitofp i8 %15131 to float
  %15133 = fmul float %15132, 0x3F70101020000000
  %15134 = getelementptr inbounds float, float* %15116, i64 3
  store float %15133, float* %15134, align 4
  %15135 = getelementptr inbounds i8, i8* %15115, i64 4
  %15136 = getelementptr inbounds float, float* %15116, i64 4
  %15137 = add nuw i32 %15114, 1
  %15138 = icmp eq i32 %15137, %15109
  br i1 %15138, label %15139, label %15113

15139:                                            ; preds = %15113
  %15140 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15036, align 8
  %15141 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15140, i64 0, i32 1, i32 0
  %15142 = load i32, i32* %15141, align 4
  %15143 = icmp eq i32 %15142, 0
  br i1 %15143, label %15280, label %15144

15144:                                            ; preds = %15139
  %15145 = load float*, float** %15069, align 8
  %15146 = add i32 %15142, -1
  %15147 = zext i32 %15146 to i64
  %15148 = add nuw nsw i64 %15147, 1
  %15149 = icmp ult i64 %15148, 4
  br i1 %15149, label %15227, label %15150

15150:                                            ; preds = %15144
  %15151 = add i32 %15142, -1
  %15152 = zext i32 %15151 to i64
  %15153 = shl nuw nsw i64 %15152, 1
  %15154 = getelementptr float, float* %15107, i64 %15153
  %15155 = getelementptr float, float* %15145, i64 4
  %15156 = shl nuw nsw i64 %15152, 2
  %15157 = getelementptr float, float* %15155, i64 %15156
  %15158 = icmp ult float* %15105, %15157
  %15159 = icmp ult float* %15145, %15154
  %15160 = and i1 %15158, %15159
  br i1 %15160, label %15227, label %15161

15161:                                            ; preds = %15150
  %15162 = and i64 %15148, 8589934588
  %15163 = shl nuw nsw i64 %15162, 2
  %15164 = getelementptr float, float* %15145, i64 %15163
  %15165 = trunc i64 %15162 to i32
  %15166 = shl nuw nsw i64 %15162, 1
  %15167 = getelementptr float, float* %15102, i64 %15166
  %15168 = add nsw i64 %15162, -4
  %15169 = lshr exact i64 %15168, 2
  %15170 = add nuw nsw i64 %15169, 1
  %15171 = and i64 %15170, 1
  %15172 = icmp eq i64 %15168, 0
  br i1 %15172, label %15208, label %15173

15173:                                            ; preds = %15161
  %15174 = sub nuw nsw i64 %15170, %15171
  br label %15175

15175:                                            ; preds = %15175, %15173
  %15176 = phi i64 [ 0, %15173 ], [ %15205, %15175 ]
  %15177 = phi i64 [ %15174, %15173 ], [ %15206, %15175 ]
  %15178 = shl i64 %15176, 2
  %15179 = shl i64 %15176, 1
  %15180 = getelementptr inbounds float, float* %15145, i64 %15178
  %15181 = bitcast float* %15180 to <16 x float>*
  %15182 = load <16 x float>, <16 x float>* %15181, align 4
  %15183 = shufflevector <16 x float> %15182, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %15184 = shufflevector <16 x float> %15182, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %15185 = shufflevector <16 x float> %15182, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %15186 = fmul <4 x float> %15185, %15183
  %15187 = fmul <4 x float> %15185, %15184
  %15188 = getelementptr inbounds float, float* %15102, i64 %15179
  %15189 = bitcast float* %15188 to <8 x float>*
  %15190 = shufflevector <4 x float> %15186, <4 x float> %15187, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %15190, <8 x float>* %15189, align 4
  %15191 = or i64 %15176, 4
  %15192 = shl i64 %15191, 2
  %15193 = shl i64 %15191, 1
  %15194 = getelementptr inbounds float, float* %15145, i64 %15192
  %15195 = bitcast float* %15194 to <16 x float>*
  %15196 = load <16 x float>, <16 x float>* %15195, align 4
  %15197 = shufflevector <16 x float> %15196, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %15198 = shufflevector <16 x float> %15196, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %15199 = shufflevector <16 x float> %15196, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %15200 = fmul <4 x float> %15199, %15197
  %15201 = fmul <4 x float> %15199, %15198
  %15202 = getelementptr inbounds float, float* %15102, i64 %15193
  %15203 = bitcast float* %15202 to <8 x float>*
  %15204 = shufflevector <4 x float> %15200, <4 x float> %15201, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %15204, <8 x float>* %15203, align 4
  %15205 = add i64 %15176, 8
  %15206 = add i64 %15177, -2
  %15207 = icmp eq i64 %15206, 0
  br i1 %15207, label %15208, label %15175, !llvm.loop !604

15208:                                            ; preds = %15175, %15161
  %15209 = phi i64 [ 0, %15161 ], [ %15205, %15175 ]
  %15210 = icmp eq i64 %15171, 0
  br i1 %15210, label %15225, label %15211

15211:                                            ; preds = %15208
  %15212 = shl i64 %15209, 2
  %15213 = shl i64 %15209, 1
  %15214 = getelementptr inbounds float, float* %15145, i64 %15212
  %15215 = bitcast float* %15214 to <16 x float>*
  %15216 = load <16 x float>, <16 x float>* %15215, align 4
  %15217 = shufflevector <16 x float> %15216, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %15218 = shufflevector <16 x float> %15216, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %15219 = shufflevector <16 x float> %15216, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %15220 = fmul <4 x float> %15219, %15217
  %15221 = fmul <4 x float> %15219, %15218
  %15222 = getelementptr inbounds float, float* %15102, i64 %15213
  %15223 = bitcast float* %15222 to <8 x float>*
  %15224 = shufflevector <4 x float> %15220, <4 x float> %15221, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %15224, <8 x float>* %15223, align 4
  br label %15225

15225:                                            ; preds = %15208, %15211
  %15226 = icmp eq i64 %15148, %15162
  br i1 %15226, label %15278, label %15227

15227:                                            ; preds = %15225, %15150, %15144
  %15228 = phi float* [ %15145, %15150 ], [ %15145, %15144 ], [ %15164, %15225 ]
  %15229 = phi i32 [ 0, %15150 ], [ 0, %15144 ], [ %15165, %15225 ]
  %15230 = phi float* [ %15102, %15150 ], [ %15102, %15144 ], [ %15167, %15225 ]
  %15231 = sub i32 %15142, %15229
  %15232 = and i32 %15231, 1
  %15233 = icmp eq i32 %15232, 0
  br i1 %15233, label %15246, label %15234

15234:                                            ; preds = %15227
  %15235 = getelementptr inbounds float, float* %15228, i64 3
  %15236 = load float, float* %15235, align 4
  %15237 = load float, float* %15228, align 4
  %15238 = fmul float %15236, %15237
  store float %15238, float* %15230, align 4
  %15239 = getelementptr inbounds float, float* %15228, i64 1
  %15240 = load float, float* %15239, align 4
  %15241 = fmul float %15236, %15240
  %15242 = getelementptr inbounds float, float* %15230, i64 1
  store float %15241, float* %15242, align 4
  %15243 = getelementptr inbounds float, float* %15228, i64 4
  %15244 = getelementptr inbounds float, float* %15230, i64 2
  %15245 = add nuw i32 %15229, 1
  br label %15246

15246:                                            ; preds = %15234, %15227
  %15247 = phi float* [ %15243, %15234 ], [ %15228, %15227 ]
  %15248 = phi i32 [ %15245, %15234 ], [ %15229, %15227 ]
  %15249 = phi float* [ %15244, %15234 ], [ %15230, %15227 ]
  %15250 = add i32 %15229, 1
  %15251 = icmp eq i32 %15142, %15250
  br i1 %15251, label %15278, label %15252

15252:                                            ; preds = %15246, %15252
  %15253 = phi float* [ %15274, %15252 ], [ %15247, %15246 ]
  %15254 = phi i32 [ %15276, %15252 ], [ %15248, %15246 ]
  %15255 = phi float* [ %15275, %15252 ], [ %15249, %15246 ]
  %15256 = getelementptr inbounds float, float* %15253, i64 3
  %15257 = load float, float* %15256, align 4
  %15258 = load float, float* %15253, align 4
  %15259 = fmul float %15257, %15258
  store float %15259, float* %15255, align 4
  %15260 = getelementptr inbounds float, float* %15253, i64 1
  %15261 = load float, float* %15260, align 4
  %15262 = fmul float %15257, %15261
  %15263 = getelementptr inbounds float, float* %15255, i64 1
  store float %15262, float* %15263, align 4
  %15264 = getelementptr inbounds float, float* %15253, i64 4
  %15265 = getelementptr inbounds float, float* %15255, i64 2
  %15266 = getelementptr inbounds float, float* %15253, i64 7
  %15267 = load float, float* %15266, align 4
  %15268 = load float, float* %15264, align 4
  %15269 = fmul float %15267, %15268
  store float %15269, float* %15265, align 4
  %15270 = getelementptr inbounds float, float* %15253, i64 5
  %15271 = load float, float* %15270, align 4
  %15272 = fmul float %15267, %15271
  %15273 = getelementptr inbounds float, float* %15255, i64 3
  store float %15272, float* %15273, align 4
  %15274 = getelementptr inbounds float, float* %15253, i64 8
  %15275 = getelementptr inbounds float, float* %15255, i64 4
  %15276 = add nuw i32 %15254, 2
  %15277 = icmp eq i32 %15276, %15142
  br i1 %15277, label %15278, label %15252, !llvm.loop !605

15278:                                            ; preds = %15246, %15252, %15225
  %15279 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15036, align 8
  br label %15280

15280:                                            ; preds = %15278, %15139, %15097
  %15281 = phi %"class.blink::IntRect"* [ %15279, %15278 ], [ %15140, %15139 ], [ %15099, %15097 ]
  %15282 = getelementptr inbounds i8, i8* %15103, i64 %15029
  %15283 = getelementptr inbounds float, float* %15102, i64 %15033
  %15284 = add nuw nsw i32 %15101, 1
  %15285 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15281, i64 0, i32 1, i32 1
  %15286 = load i32, i32* %15285, align 4
  %15287 = icmp slt i32 %15284, %15286
  %15288 = add i64 %15098, 1
  br i1 %15287, label %15097, label %15081

15289:                                            ; preds = %15083, %15061
  %15290 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %15290, align 4
  br label %15491

15291:                                            ; preds = %14827
  %15292 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %15293 = load i32, i32* %15292, align 8
  %15294 = sext i32 %15293 to i64
  %15295 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %15296 = load i32, i32* %15295, align 8
  %15297 = sdiv i32 %15296, 4
  %15298 = sext i32 %15297 to i64
  %15299 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %15300 = load i8*, i8** %15299, align 8
  %15301 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %15302 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15301, align 8
  %15303 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15302, i64 0, i32 0, i32 1
  %15304 = load i32, i32* %15303, align 4
  %15305 = mul nsw i32 %15304, %15293
  %15306 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %15307 = load i32, i32* %15306, align 4
  %15308 = add nsw i32 %15305, %15307
  %15309 = sext i32 %15308 to i64
  %15310 = getelementptr inbounds i8, i8* %15300, i64 %15309
  %15311 = icmp slt i32 %15296, 0
  %15312 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %15313 = load i32, i32* %15312, align 8
  %15314 = icmp sgt i32 %15313, 1
  %15315 = and i1 %15311, %15314
  br i1 %15315, label %15316, label %15326

15316:                                            ; preds = %15291
  %15317 = add nsw i32 %15313, -1
  %15318 = sext i32 %15317 to i64
  %15319 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %15320 = load i32, i32* %15319, align 4
  %15321 = sext i32 %15320 to i64
  %15322 = mul nsw i64 %15294, %15318
  %15323 = mul i64 %15322, %15321
  %15324 = sub i64 0, %15323
  %15325 = getelementptr inbounds i8, i8* %15310, i64 %15324
  br label %15328

15326:                                            ; preds = %15291
  %15327 = icmp sgt i32 %15313, 0
  br i1 %15327, label %15328, label %15489

15328:                                            ; preds = %15326, %15316
  %15329 = phi i8* [ %15325, %15316 ], [ %15310, %15326 ]
  %15330 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %15331 = bitcast i8** %15330 to float**
  %15332 = load float*, float** %15331, align 8
  %15333 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %15334 = bitcast i8** %15333 to float**
  %15335 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %15336

15336:                                            ; preds = %15348, %15328
  %15337 = phi i32 [ %15313, %15328 ], [ %15349, %15348 ]
  %15338 = phi %"class.blink::IntRect"* [ %15302, %15328 ], [ %15350, %15348 ]
  %15339 = phi %"class.blink::IntRect"* [ %15302, %15328 ], [ %15351, %15348 ]
  %15340 = phi i32 [ 0, %15328 ], [ %15360, %15348 ]
  %15341 = phi float* [ %15332, %15328 ], [ %15353, %15348 ]
  %15342 = phi i8* [ %15329, %15328 ], [ %15359, %15348 ]
  %15343 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15339, i64 0, i32 1, i32 1
  %15344 = load i32, i32* %15343, align 4
  %15345 = icmp sgt i32 %15344, 0
  br i1 %15345, label %15362, label %15348

15346:                                            ; preds = %15480
  %15347 = load i32, i32* %15312, align 8
  br label %15348

15348:                                            ; preds = %15346, %15336
  %15349 = phi i32 [ %15337, %15336 ], [ %15347, %15346 ]
  %15350 = phi %"class.blink::IntRect"* [ %15338, %15336 ], [ %15481, %15346 ]
  %15351 = phi %"class.blink::IntRect"* [ %15339, %15336 ], [ %15481, %15346 ]
  %15352 = phi i8* [ %15342, %15336 ], [ %15482, %15346 ]
  %15353 = phi float* [ %15341, %15336 ], [ %15483, %15346 ]
  %15354 = phi i32 [ %15344, %15336 ], [ %15486, %15346 ]
  %15355 = load i32, i32* %15335, align 4
  %15356 = sub nsw i32 %15355, %15354
  %15357 = sext i32 %15356 to i64
  %15358 = mul nsw i64 %15357, %15294
  %15359 = getelementptr inbounds i8, i8* %15352, i64 %15358
  %15360 = add nuw nsw i32 %15340, 1
  %15361 = icmp slt i32 %15360, %15349
  br i1 %15361, label %15336, label %15489

15362:                                            ; preds = %15336, %15480
  %15363 = phi i64 [ %15488, %15480 ], [ 0, %15336 ]
  %15364 = phi %"class.blink::IntRect"* [ %15481, %15480 ], [ %15338, %15336 ]
  %15365 = phi %"class.blink::IntRect"* [ %15481, %15480 ], [ %15339, %15336 ]
  %15366 = phi i32 [ %15484, %15480 ], [ 0, %15336 ]
  %15367 = phi float* [ %15483, %15480 ], [ %15341, %15336 ]
  %15368 = phi i8* [ %15482, %15480 ], [ %15342, %15336 ]
  %15369 = mul i64 %15363, %15298
  %15370 = getelementptr float, float* %15341, i64 %15369
  %15371 = add i64 %15369, 2
  %15372 = getelementptr float, float* %15341, i64 %15371
  %15373 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15365, i64 0, i32 1, i32 0
  %15374 = load i32, i32* %15373, align 4
  %15375 = icmp eq i32 %15374, 0
  br i1 %15375, label %15480, label %15376

15376:                                            ; preds = %15362
  %15377 = load float*, float** %15334, align 8
  br label %15378

15378:                                            ; preds = %15378, %15376
  %15379 = phi i32 [ %15402, %15378 ], [ 0, %15376 ]
  %15380 = phi i8* [ %15400, %15378 ], [ %15368, %15376 ]
  %15381 = phi float* [ %15401, %15378 ], [ %15377, %15376 ]
  %15382 = getelementptr inbounds i8, i8* %15380, i64 2
  %15383 = load i8, i8* %15382, align 1
  %15384 = uitofp i8 %15383 to float
  %15385 = fmul float %15384, 0x3F70101020000000
  store float %15385, float* %15381, align 4
  %15386 = getelementptr inbounds i8, i8* %15380, i64 1
  %15387 = load i8, i8* %15386, align 1
  %15388 = uitofp i8 %15387 to float
  %15389 = fmul float %15388, 0x3F70101020000000
  %15390 = getelementptr inbounds float, float* %15381, i64 1
  store float %15389, float* %15390, align 4
  %15391 = load i8, i8* %15380, align 1
  %15392 = uitofp i8 %15391 to float
  %15393 = fmul float %15392, 0x3F70101020000000
  %15394 = getelementptr inbounds float, float* %15381, i64 2
  store float %15393, float* %15394, align 4
  %15395 = getelementptr inbounds i8, i8* %15380, i64 3
  %15396 = load i8, i8* %15395, align 1
  %15397 = uitofp i8 %15396 to float
  %15398 = fmul float %15397, 0x3F70101020000000
  %15399 = getelementptr inbounds float, float* %15381, i64 3
  store float %15398, float* %15399, align 4
  %15400 = getelementptr inbounds i8, i8* %15380, i64 4
  %15401 = getelementptr inbounds float, float* %15381, i64 4
  %15402 = add nuw i32 %15379, 1
  %15403 = icmp eq i32 %15402, %15374
  br i1 %15403, label %15404, label %15378

15404:                                            ; preds = %15378
  %15405 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15301, align 8
  %15406 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15405, i64 0, i32 1, i32 0
  %15407 = load i32, i32* %15406, align 4
  %15408 = icmp eq i32 %15407, 0
  br i1 %15408, label %15480, label %15409

15409:                                            ; preds = %15404
  %15410 = load float*, float** %15334, align 8
  %15411 = add i32 %15407, -1
  %15412 = zext i32 %15411 to i64
  %15413 = add nuw nsw i64 %15412, 1
  %15414 = icmp ult i64 %15413, 4
  br i1 %15414, label %15455, label %15415

15415:                                            ; preds = %15409
  %15416 = add i32 %15407, -1
  %15417 = zext i32 %15416 to i64
  %15418 = shl nuw nsw i64 %15417, 1
  %15419 = getelementptr float, float* %15372, i64 %15418
  %15420 = getelementptr float, float* %15410, i64 4
  %15421 = shl nuw nsw i64 %15417, 2
  %15422 = getelementptr float, float* %15420, i64 %15421
  %15423 = icmp ult float* %15370, %15422
  %15424 = icmp ult float* %15410, %15419
  %15425 = and i1 %15423, %15424
  br i1 %15425, label %15455, label %15426

15426:                                            ; preds = %15415
  %15427 = and i64 %15413, 8589934588
  %15428 = trunc i64 %15427 to i32
  %15429 = shl nuw nsw i64 %15427, 2
  %15430 = getelementptr float, float* %15410, i64 %15429
  %15431 = shl nuw nsw i64 %15427, 1
  %15432 = getelementptr float, float* %15367, i64 %15431
  br label %15433

15433:                                            ; preds = %15433, %15426
  %15434 = phi i64 [ 0, %15426 ], [ %15451, %15433 ]
  %15435 = shl i64 %15434, 2
  %15436 = shl i64 %15434, 1
  %15437 = getelementptr inbounds float, float* %15410, i64 %15435
  %15438 = bitcast float* %15437 to <16 x float>*
  %15439 = load <16 x float>, <16 x float>* %15438, align 4
  %15440 = shufflevector <16 x float> %15439, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %15441 = shufflevector <16 x float> %15439, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %15442 = shufflevector <16 x float> %15439, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %15443 = fcmp une <4 x float> %15442, zeroinitializer
  %15444 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15442
  %15445 = select <4 x i1> %15443, <4 x float> %15444, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15446 = fmul <4 x float> %15440, %15445
  %15447 = fmul <4 x float> %15445, %15441
  %15448 = getelementptr inbounds float, float* %15367, i64 %15436
  %15449 = bitcast float* %15448 to <8 x float>*
  %15450 = shufflevector <4 x float> %15446, <4 x float> %15447, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %15450, <8 x float>* %15449, align 4
  %15451 = add i64 %15434, 4
  %15452 = icmp eq i64 %15451, %15427
  br i1 %15452, label %15453, label %15433, !llvm.loop !606

15453:                                            ; preds = %15433
  %15454 = icmp eq i64 %15413, %15427
  br i1 %15454, label %15478, label %15455

15455:                                            ; preds = %15453, %15415, %15409
  %15456 = phi i32 [ 0, %15415 ], [ 0, %15409 ], [ %15428, %15453 ]
  %15457 = phi float* [ %15410, %15415 ], [ %15410, %15409 ], [ %15430, %15453 ]
  %15458 = phi float* [ %15367, %15415 ], [ %15367, %15409 ], [ %15432, %15453 ]
  br label %15459

15459:                                            ; preds = %15455, %15459
  %15460 = phi i32 [ %15476, %15459 ], [ %15456, %15455 ]
  %15461 = phi float* [ %15474, %15459 ], [ %15457, %15455 ]
  %15462 = phi float* [ %15475, %15459 ], [ %15458, %15455 ]
  %15463 = getelementptr inbounds float, float* %15461, i64 3
  %15464 = load float, float* %15463, align 4
  %15465 = fcmp une float %15464, 0.000000e+00
  %15466 = fdiv float 1.000000e+00, %15464
  %15467 = select i1 %15465, float %15466, float 1.000000e+00
  %15468 = load float, float* %15461, align 4
  %15469 = fmul float %15468, %15467
  store float %15469, float* %15462, align 4
  %15470 = getelementptr inbounds float, float* %15461, i64 1
  %15471 = load float, float* %15470, align 4
  %15472 = fmul float %15467, %15471
  %15473 = getelementptr inbounds float, float* %15462, i64 1
  store float %15472, float* %15473, align 4
  %15474 = getelementptr inbounds float, float* %15461, i64 4
  %15475 = getelementptr inbounds float, float* %15462, i64 2
  %15476 = add nuw i32 %15460, 1
  %15477 = icmp eq i32 %15476, %15407
  br i1 %15477, label %15478, label %15459, !llvm.loop !607

15478:                                            ; preds = %15459, %15453
  %15479 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15301, align 8
  br label %15480

15480:                                            ; preds = %15478, %15404, %15362
  %15481 = phi %"class.blink::IntRect"* [ %15479, %15478 ], [ %15405, %15404 ], [ %15364, %15362 ]
  %15482 = getelementptr inbounds i8, i8* %15368, i64 %15294
  %15483 = getelementptr inbounds float, float* %15367, i64 %15298
  %15484 = add nuw nsw i32 %15366, 1
  %15485 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %15481, i64 0, i32 1, i32 1
  %15486 = load i32, i32* %15485, align 4
  %15487 = icmp slt i32 %15484, %15486
  %15488 = add i64 %15363, 1
  br i1 %15487, label %15362, label %15346

15489:                                            ; preds = %15348, %15326
  %15490 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %15490, align 4
  br label %15491

15491:                                            ; preds = %15489, %15289, %15024, %14827, %14825, %14655, %14488, %14326, %14324, %14057, %13737, %13446, %13444, %13220, %12996, %12779, %12777, %12685, %12684, %12682, %12597, %12596, %12594, %12432, %12431, %12429, %12344, %12343, %12341, %12182, %12181, %12179, %12025, %11831, %11716, %11714, %11514, %11317, %11125, %11123, %10763, %10409, %10078, %10076, %9714, %9358, %9025, %9023, %8711, %8373, %8144, %8142, %7934, %7752, %7568, %7566, %7380, %7197, %7020, %7018, %6664, %6316, %5993, %5991, %5718, %5386, %5106, %5104, %4925, %4755, %4558, %4556, %4388, %4223, %4061, %4059, %3721, %3404, %3113, %3111, %2858, %2856, %2669, %2667, %2327, %2325, %2068, %1832, %1585, %1583, %1429, %1235, %1051, %1049, %676, %339, %4, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_115FormatConverter7ConvertILNS_20WebGLImageConversion10DataFormatE6EEEvS4_NS3_7AlphaOpE(%"class.blink::(anonymous namespace)::FormatConverter"*, i32, i32) unnamed_addr #7 align 2 {
  switch i32 %1, label %13459 [
    i32 34, label %4
    i32 40, label %610
    i32 41, label %1306
    i32 46, label %2210
    i32 47, label %2405
    i32 48, label %2648
    i32 42, label %2957
    i32 43, label %3464
    i32 44, label %4123
    i32 9, label %4833
    i32 23, label %5279
    i32 15, label %5865
    i32 16, label %6575
    i32 0, label %7313
    i32 21, label %7753
    i32 22, label %8365
    i32 6, label %8971
    i32 7, label %9477
    i32 1, label %10104
    i32 2, label %10266
    i32 3, label %10354
    i32 4, label %10519
    i32 5, label %10607
    i32 8, label %10702
    i32 26, label %11531
    i32 32, label %11970
    i32 33, label %12633
  ]

4:                                                ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %5
    i32 1, label %194
    i32 2, label %384
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = sdiv i32 %7, 2
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %16 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %16, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = mul nsw i32 %18, %7
  %20 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %19, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %14, i64 %23
  %25 = bitcast i8* %24 to i16*
  %26 = icmp slt i32 %11, 0
  %27 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %28, 1
  %30 = and i1 %26, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %5
  %32 = add nsw i32 %28, -1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = mul nsw i64 %9, %33
  %38 = mul i64 %37, %36
  %39 = sub i64 0, %38
  %40 = getelementptr inbounds i16, i16* %25, i64 %39
  br label %43

41:                                               ; preds = %5
  %42 = icmp sgt i32 %28, 0
  br i1 %42, label %43, label %192

43:                                               ; preds = %41, %31
  %44 = phi i16* [ %40, %31 ], [ %25, %41 ]
  %45 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %49

49:                                               ; preds = %60, %43
  %50 = phi i32 [ %28, %43 ], [ %61, %60 ]
  %51 = phi %"class.blink::IntRect"* [ %16, %43 ], [ %62, %60 ]
  %52 = phi i32 [ 0, %43 ], [ %71, %60 ]
  %53 = phi i8* [ %46, %43 ], [ %64, %60 ]
  %54 = phi i16* [ %44, %43 ], [ %70, %60 ]
  %55 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %51, i64 0, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %73, label %60

58:                                               ; preds = %183
  %59 = load i32, i32* %27, align 8
  br label %60

60:                                               ; preds = %58, %49
  %61 = phi i32 [ %50, %49 ], [ %59, %58 ]
  %62 = phi %"class.blink::IntRect"* [ %51, %49 ], [ %184, %58 ]
  %63 = phi i16* [ %54, %49 ], [ %185, %58 ]
  %64 = phi i8* [ %53, %49 ], [ %186, %58 ]
  %65 = phi i32 [ %56, %49 ], [ %189, %58 ]
  %66 = load i32, i32* %48, align 4
  %67 = sub nsw i32 %66, %65
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, %9
  %70 = getelementptr inbounds i16, i16* %63, i64 %69
  %71 = add nuw nsw i32 %52, 1
  %72 = icmp slt i32 %71, %61
  br i1 %72, label %49, label %192

73:                                               ; preds = %49, %183
  %74 = phi i64 [ %191, %183 ], [ 0, %49 ]
  %75 = phi %"class.blink::IntRect"* [ %184, %183 ], [ %51, %49 ]
  %76 = phi i32 [ %187, %183 ], [ 0, %49 ]
  %77 = phi i8* [ %186, %183 ], [ %53, %49 ]
  %78 = phi i16* [ %185, %183 ], [ %54, %49 ]
  %79 = mul i64 %74, %12
  %80 = getelementptr i8, i8* %53, i64 %79
  %81 = add i64 %79, 1
  %82 = getelementptr i8, i8* %53, i64 %81
  %83 = load i8*, i8** %47, align 8
  %84 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %75, i64 0, i32 1, i32 0
  %85 = load i32, i32* %84, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %78, i8* %83, i32 %85) #12
  %86 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15, align 8
  %87 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %86, i64 0, i32 1, i32 0
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %183, label %90

90:                                               ; preds = %73
  %91 = load i8*, i8** %47, align 8
  %92 = add i32 %88, -1
  %93 = zext i32 %92 to i64
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i64 %94, 17
  br i1 %95, label %126, label %96

96:                                               ; preds = %90
  %97 = add i32 %88, -1
  %98 = zext i32 %97 to i64
  %99 = getelementptr i8, i8* %82, i64 %98
  %100 = getelementptr i8, i8* %91, i64 1
  %101 = shl nuw nsw i64 %98, 2
  %102 = getelementptr i8, i8* %100, i64 %101
  %103 = icmp ult i8* %80, %102
  %104 = icmp ult i8* %91, %99
  %105 = and i1 %103, %104
  br i1 %105, label %126, label %106

106:                                              ; preds = %96
  %107 = and i64 %94, 15
  %108 = icmp eq i64 %107, 0
  %109 = select i1 %108, i64 16, i64 %107
  %110 = sub nsw i64 %94, %109
  %111 = trunc i64 %110 to i32
  %112 = shl nsw i64 %110, 2
  %113 = getelementptr i8, i8* %91, i64 %112
  %114 = getelementptr i8, i8* %77, i64 %110
  br label %115

115:                                              ; preds = %115, %106
  %116 = phi i64 [ 0, %106 ], [ %124, %115 ]
  %117 = shl i64 %116, 2
  %118 = getelementptr i8, i8* %91, i64 %117
  %119 = getelementptr i8, i8* %77, i64 %116
  %120 = bitcast i8* %118 to <64 x i8>*
  %121 = load <64 x i8>, <64 x i8>* %120, align 1
  %122 = shufflevector <64 x i8> %121, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %123 = bitcast i8* %119 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %123, align 1, !alias.scope !608, !noalias !611
  %124 = add i64 %116, 16
  %125 = icmp eq i64 %124, %110
  br i1 %125, label %126, label %115, !llvm.loop !613

126:                                              ; preds = %115, %96, %90
  %127 = phi i32 [ 0, %96 ], [ 0, %90 ], [ %111, %115 ]
  %128 = phi i8* [ %91, %96 ], [ %91, %90 ], [ %113, %115 ]
  %129 = phi i8* [ %77, %96 ], [ %77, %90 ], [ %114, %115 ]
  %130 = sub i32 %88, %127
  %131 = xor i32 %127, -1
  %132 = add i32 %88, %131
  %133 = and i32 %130, 7
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %146, label %135

135:                                              ; preds = %126, %135
  %136 = phi i32 [ %143, %135 ], [ %127, %126 ]
  %137 = phi i8* [ %141, %135 ], [ %128, %126 ]
  %138 = phi i8* [ %142, %135 ], [ %129, %126 ]
  %139 = phi i32 [ %144, %135 ], [ %133, %126 ]
  %140 = load i8, i8* %137, align 1
  store i8 %140, i8* %138, align 1
  %141 = getelementptr inbounds i8, i8* %137, i64 4
  %142 = getelementptr inbounds i8, i8* %138, i64 1
  %143 = add nuw i32 %136, 1
  %144 = add i32 %139, -1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %135, !llvm.loop !614

146:                                              ; preds = %135, %126
  %147 = phi i32 [ %127, %126 ], [ %143, %135 ]
  %148 = phi i8* [ %128, %126 ], [ %141, %135 ]
  %149 = phi i8* [ %129, %126 ], [ %142, %135 ]
  %150 = icmp ult i32 %132, 7
  br i1 %150, label %181, label %151

151:                                              ; preds = %146, %151
  %152 = phi i32 [ %179, %151 ], [ %147, %146 ]
  %153 = phi i8* [ %177, %151 ], [ %148, %146 ]
  %154 = phi i8* [ %178, %151 ], [ %149, %146 ]
  %155 = load i8, i8* %153, align 1
  store i8 %155, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 4
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = load i8, i8* %156, align 1
  store i8 %158, i8* %157, align 1
  %159 = getelementptr inbounds i8, i8* %153, i64 8
  %160 = getelementptr inbounds i8, i8* %154, i64 2
  %161 = load i8, i8* %159, align 1
  store i8 %161, i8* %160, align 1
  %162 = getelementptr inbounds i8, i8* %153, i64 12
  %163 = getelementptr inbounds i8, i8* %154, i64 3
  %164 = load i8, i8* %162, align 1
  store i8 %164, i8* %163, align 1
  %165 = getelementptr inbounds i8, i8* %153, i64 16
  %166 = getelementptr inbounds i8, i8* %154, i64 4
  %167 = load i8, i8* %165, align 1
  store i8 %167, i8* %166, align 1
  %168 = getelementptr inbounds i8, i8* %153, i64 20
  %169 = getelementptr inbounds i8, i8* %154, i64 5
  %170 = load i8, i8* %168, align 1
  store i8 %170, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %153, i64 24
  %172 = getelementptr inbounds i8, i8* %154, i64 6
  %173 = load i8, i8* %171, align 1
  store i8 %173, i8* %172, align 1
  %174 = getelementptr inbounds i8, i8* %153, i64 28
  %175 = getelementptr inbounds i8, i8* %154, i64 7
  %176 = load i8, i8* %174, align 1
  store i8 %176, i8* %175, align 1
  %177 = getelementptr inbounds i8, i8* %153, i64 32
  %178 = getelementptr inbounds i8, i8* %154, i64 8
  %179 = add nuw i32 %152, 8
  %180 = icmp eq i32 %179, %88
  br i1 %180, label %181, label %151, !llvm.loop !615

181:                                              ; preds = %151, %146
  %182 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %15, align 8
  br label %183

183:                                              ; preds = %181, %73
  %184 = phi %"class.blink::IntRect"* [ %182, %181 ], [ %86, %73 ]
  %185 = getelementptr inbounds i16, i16* %78, i64 %9
  %186 = getelementptr inbounds i8, i8* %77, i64 %12
  %187 = add nuw nsw i32 %76, 1
  %188 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %184, i64 0, i32 1, i32 1
  %189 = load i32, i32* %188, align 4
  %190 = icmp slt i32 %187, %189
  %191 = add i64 %74, 1
  br i1 %190, label %73, label %58

192:                                              ; preds = %60, %41
  %193 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %193, align 4
  br label %13459

194:                                              ; preds = %4
  %195 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %196 = load i32, i32* %195, align 8
  %197 = sdiv i32 %196, 2
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %200 = load i32, i32* %199, align 8
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %205 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %204, align 8
  %206 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %205, i64 0, i32 0, i32 1
  %207 = load i32, i32* %206, align 4
  %208 = mul nsw i32 %207, %196
  %209 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %210 = load i32, i32* %209, align 4
  %211 = add nsw i32 %208, %210
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %203, i64 %212
  %214 = bitcast i8* %213 to i16*
  %215 = icmp slt i32 %200, 0
  %216 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  %218 = icmp sgt i32 %217, 1
  %219 = and i1 %215, %218
  br i1 %219, label %220, label %230

220:                                              ; preds = %194
  %221 = add nsw i32 %217, -1
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %224 = load i32, i32* %223, align 4
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %198, %222
  %227 = mul i64 %226, %225
  %228 = sub i64 0, %227
  %229 = getelementptr inbounds i16, i16* %214, i64 %228
  br label %232

230:                                              ; preds = %194
  %231 = icmp sgt i32 %217, 0
  br i1 %231, label %232, label %382

232:                                              ; preds = %230, %220
  %233 = phi i16* [ %229, %220 ], [ %214, %230 ]
  %234 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %235 = load i8*, i8** %234, align 8
  %236 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %237 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %238

238:                                              ; preds = %249, %232
  %239 = phi i32 [ %217, %232 ], [ %250, %249 ]
  %240 = phi %"class.blink::IntRect"* [ %205, %232 ], [ %251, %249 ]
  %241 = phi i32 [ 0, %232 ], [ %260, %249 ]
  %242 = phi i8* [ %235, %232 ], [ %253, %249 ]
  %243 = phi i16* [ %233, %232 ], [ %259, %249 ]
  %244 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %240, i64 0, i32 1, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = icmp sgt i32 %245, 0
  br i1 %246, label %262, label %249

247:                                              ; preds = %373
  %248 = load i32, i32* %216, align 8
  br label %249

249:                                              ; preds = %247, %238
  %250 = phi i32 [ %239, %238 ], [ %248, %247 ]
  %251 = phi %"class.blink::IntRect"* [ %240, %238 ], [ %374, %247 ]
  %252 = phi i16* [ %243, %238 ], [ %375, %247 ]
  %253 = phi i8* [ %242, %238 ], [ %376, %247 ]
  %254 = phi i32 [ %245, %238 ], [ %379, %247 ]
  %255 = load i32, i32* %237, align 4
  %256 = sub nsw i32 %255, %254
  %257 = sext i32 %256 to i64
  %258 = mul nsw i64 %257, %198
  %259 = getelementptr inbounds i16, i16* %252, i64 %258
  %260 = add nuw nsw i32 %241, 1
  %261 = icmp slt i32 %260, %250
  br i1 %261, label %238, label %382

262:                                              ; preds = %238, %373
  %263 = phi i64 [ %381, %373 ], [ 0, %238 ]
  %264 = phi %"class.blink::IntRect"* [ %374, %373 ], [ %240, %238 ]
  %265 = phi i32 [ %377, %373 ], [ 0, %238 ]
  %266 = phi i8* [ %376, %373 ], [ %242, %238 ]
  %267 = phi i16* [ %375, %373 ], [ %243, %238 ]
  %268 = mul i64 %263, %201
  %269 = getelementptr i8, i8* %242, i64 %268
  %270 = add i64 %268, 1
  %271 = getelementptr i8, i8* %242, i64 %270
  %272 = load i8*, i8** %236, align 8
  %273 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %264, i64 0, i32 1, i32 0
  %274 = load i32, i32* %273, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %267, i8* %272, i32 %274) #12
  %275 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %204, align 8
  %276 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %275, i64 0, i32 1, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %373, label %279

279:                                              ; preds = %262
  %280 = load i8*, i8** %236, align 8
  %281 = add i32 %277, -1
  %282 = zext i32 %281 to i64
  %283 = add nuw nsw i64 %282, 1
  %284 = icmp ult i64 %283, 16
  br i1 %284, label %320, label %285

285:                                              ; preds = %279
  %286 = add i32 %277, -1
  %287 = zext i32 %286 to i64
  %288 = getelementptr i8, i8* %271, i64 %287
  %289 = getelementptr i8, i8* %280, i64 4
  %290 = shl nuw nsw i64 %287, 2
  %291 = getelementptr i8, i8* %289, i64 %290
  %292 = icmp ult i8* %269, %291
  %293 = icmp ult i8* %280, %288
  %294 = and i1 %292, %293
  br i1 %294, label %320, label %295

295:                                              ; preds = %285
  %296 = and i64 %283, 8589934576
  %297 = shl nuw nsw i64 %296, 2
  %298 = getelementptr i8, i8* %280, i64 %297
  %299 = getelementptr i8, i8* %266, i64 %296
  %300 = trunc i64 %296 to i32
  br label %301

301:                                              ; preds = %301, %295
  %302 = phi i64 [ 0, %295 ], [ %316, %301 ]
  %303 = shl i64 %302, 2
  %304 = getelementptr i8, i8* %266, i64 %302
  %305 = getelementptr inbounds i8, i8* %280, i64 %303
  %306 = bitcast i8* %305 to <64 x i8>*
  %307 = load <64 x i8>, <64 x i8>* %306, align 1
  %308 = shufflevector <64 x i8> %307, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %309 = shufflevector <64 x i8> %307, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %310 = uitofp <16 x i8> %309 to <16 x float>
  %311 = fdiv <16 x float> %310, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %312 = uitofp <16 x i8> %308 to <16 x float>
  %313 = fmul <16 x float> %311, %312
  %314 = fptoui <16 x float> %313 to <16 x i8>
  %315 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %315, align 1, !alias.scope !616, !noalias !619
  %316 = add i64 %302, 16
  %317 = icmp eq i64 %316, %296
  br i1 %317, label %318, label %301, !llvm.loop !621

318:                                              ; preds = %301
  %319 = icmp eq i64 %283, %296
  br i1 %319, label %371, label %320

320:                                              ; preds = %318, %285, %279
  %321 = phi i8* [ %280, %285 ], [ %280, %279 ], [ %298, %318 ]
  %322 = phi i8* [ %266, %285 ], [ %266, %279 ], [ %299, %318 ]
  %323 = phi i32 [ 0, %285 ], [ 0, %279 ], [ %300, %318 ]
  %324 = sub i32 %277, %323
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %339, label %327

327:                                              ; preds = %320
  %328 = getelementptr inbounds i8, i8* %321, i64 3
  %329 = load i8, i8* %328, align 1
  %330 = uitofp i8 %329 to float
  %331 = fdiv float %330, 2.550000e+02
  %332 = load i8, i8* %321, align 1
  %333 = uitofp i8 %332 to float
  %334 = fmul float %331, %333
  %335 = fptoui float %334 to i8
  store i8 %335, i8* %322, align 1
  %336 = getelementptr inbounds i8, i8* %321, i64 4
  %337 = getelementptr inbounds i8, i8* %322, i64 1
  %338 = add nuw i32 %323, 1
  br label %339

339:                                              ; preds = %327, %320
  %340 = phi i8* [ %336, %327 ], [ %321, %320 ]
  %341 = phi i8* [ %337, %327 ], [ %322, %320 ]
  %342 = phi i32 [ %338, %327 ], [ %323, %320 ]
  %343 = add i32 %323, 1
  %344 = icmp eq i32 %277, %343
  br i1 %344, label %371, label %345

345:                                              ; preds = %339, %345
  %346 = phi i8* [ %367, %345 ], [ %340, %339 ]
  %347 = phi i8* [ %368, %345 ], [ %341, %339 ]
  %348 = phi i32 [ %369, %345 ], [ %342, %339 ]
  %349 = getelementptr inbounds i8, i8* %346, i64 3
  %350 = load i8, i8* %349, align 1
  %351 = uitofp i8 %350 to float
  %352 = fdiv float %351, 2.550000e+02
  %353 = load i8, i8* %346, align 1
  %354 = uitofp i8 %353 to float
  %355 = fmul float %352, %354
  %356 = fptoui float %355 to i8
  store i8 %356, i8* %347, align 1
  %357 = getelementptr inbounds i8, i8* %346, i64 4
  %358 = getelementptr inbounds i8, i8* %347, i64 1
  %359 = getelementptr inbounds i8, i8* %346, i64 7
  %360 = load i8, i8* %359, align 1
  %361 = uitofp i8 %360 to float
  %362 = fdiv float %361, 2.550000e+02
  %363 = load i8, i8* %357, align 1
  %364 = uitofp i8 %363 to float
  %365 = fmul float %362, %364
  %366 = fptoui float %365 to i8
  store i8 %366, i8* %358, align 1
  %367 = getelementptr inbounds i8, i8* %346, i64 8
  %368 = getelementptr inbounds i8, i8* %347, i64 2
  %369 = add nuw i32 %348, 2
  %370 = icmp eq i32 %369, %277
  br i1 %370, label %371, label %345, !llvm.loop !622

371:                                              ; preds = %339, %345, %318
  %372 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %204, align 8
  br label %373

373:                                              ; preds = %371, %262
  %374 = phi %"class.blink::IntRect"* [ %372, %371 ], [ %275, %262 ]
  %375 = getelementptr inbounds i16, i16* %267, i64 %198
  %376 = getelementptr inbounds i8, i8* %266, i64 %201
  %377 = add nuw nsw i32 %265, 1
  %378 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %374, i64 0, i32 1, i32 1
  %379 = load i32, i32* %378, align 4
  %380 = icmp slt i32 %377, %379
  %381 = add i64 %263, 1
  br i1 %380, label %262, label %247

382:                                              ; preds = %249, %230
  %383 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %383, align 4
  br label %13459

384:                                              ; preds = %4
  %385 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %386 = load i32, i32* %385, align 8
  %387 = sdiv i32 %386, 2
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %390 = load i32, i32* %389, align 8
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %393 = load i8*, i8** %392, align 8
  %394 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %395 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %394, align 8
  %396 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %395, i64 0, i32 0, i32 1
  %397 = load i32, i32* %396, align 4
  %398 = mul nsw i32 %397, %386
  %399 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %400 = load i32, i32* %399, align 4
  %401 = add nsw i32 %398, %400
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i8, i8* %393, i64 %402
  %404 = bitcast i8* %403 to i16*
  %405 = icmp slt i32 %390, 0
  %406 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %407 = load i32, i32* %406, align 8
  %408 = icmp sgt i32 %407, 1
  %409 = and i1 %405, %408
  br i1 %409, label %410, label %420

410:                                              ; preds = %384
  %411 = add nsw i32 %407, -1
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %414 = load i32, i32* %413, align 4
  %415 = sext i32 %414 to i64
  %416 = mul nsw i64 %388, %412
  %417 = mul i64 %416, %415
  %418 = sub i64 0, %417
  %419 = getelementptr inbounds i16, i16* %404, i64 %418
  br label %422

420:                                              ; preds = %384
  %421 = icmp sgt i32 %407, 0
  br i1 %421, label %422, label %608

422:                                              ; preds = %420, %410
  %423 = phi i16* [ %419, %410 ], [ %404, %420 ]
  %424 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %425 = load i8*, i8** %424, align 8
  %426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %427 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %428

428:                                              ; preds = %439, %422
  %429 = phi i32 [ %407, %422 ], [ %440, %439 ]
  %430 = phi %"class.blink::IntRect"* [ %395, %422 ], [ %441, %439 ]
  %431 = phi i32 [ 0, %422 ], [ %450, %439 ]
  %432 = phi i8* [ %425, %422 ], [ %443, %439 ]
  %433 = phi i16* [ %423, %422 ], [ %449, %439 ]
  %434 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %430, i64 0, i32 1, i32 1
  %435 = load i32, i32* %434, align 4
  %436 = icmp sgt i32 %435, 0
  br i1 %436, label %452, label %439

437:                                              ; preds = %600
  %438 = load i32, i32* %406, align 8
  br label %439

439:                                              ; preds = %437, %428
  %440 = phi i32 [ %429, %428 ], [ %438, %437 ]
  %441 = phi %"class.blink::IntRect"* [ %430, %428 ], [ %604, %437 ]
  %442 = phi i16* [ %433, %428 ], [ %601, %437 ]
  %443 = phi i8* [ %432, %428 ], [ %602, %437 ]
  %444 = phi i32 [ %435, %428 ], [ %606, %437 ]
  %445 = load i32, i32* %427, align 4
  %446 = sub nsw i32 %445, %444
  %447 = sext i32 %446 to i64
  %448 = mul nsw i64 %447, %388
  %449 = getelementptr inbounds i16, i16* %442, i64 %448
  %450 = add nuw nsw i32 %431, 1
  %451 = icmp slt i32 %450, %440
  br i1 %451, label %428, label %608

452:                                              ; preds = %428, %600
  %453 = phi %"class.blink::IntRect"* [ %604, %600 ], [ %430, %428 ]
  %454 = phi i32 [ %603, %600 ], [ 0, %428 ]
  %455 = phi i8* [ %602, %600 ], [ %432, %428 ]
  %456 = phi i16* [ %601, %600 ], [ %433, %428 ]
  %457 = load i8*, i8** %426, align 8
  %458 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %453, i64 0, i32 1, i32 0
  %459 = load i32, i32* %458, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %456, i8* %457, i32 %459) #12
  %460 = load i8*, i8** %426, align 8
  %461 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %394, align 8
  %462 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %461, i64 0, i32 1, i32 0
  %463 = load i32, i32* %462, align 4
  %464 = and i32 %463, -4
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %526, label %466

466:                                              ; preds = %452, %466
  %467 = phi i8* [ %522, %466 ], [ %460, %452 ]
  %468 = phi i8* [ %523, %466 ], [ %455, %452 ]
  %469 = phi i32 [ %524, %466 ], [ 0, %452 ]
  %470 = getelementptr inbounds i8, i8* %467, i64 15
  %471 = load i8, i8* %470, align 1
  %472 = icmp eq i8 %471, 0
  %473 = select i1 %472, i8 -1, i8 %471
  %474 = uitofp i8 %473 to float
  %475 = getelementptr inbounds i8, i8* %467, i64 11
  %476 = load i8, i8* %475, align 1
  %477 = icmp eq i8 %476, 0
  %478 = select i1 %477, i8 -1, i8 %476
  %479 = uitofp i8 %478 to float
  %480 = getelementptr inbounds i8, i8* %467, i64 7
  %481 = load i8, i8* %480, align 1
  %482 = icmp eq i8 %481, 0
  %483 = select i1 %482, i8 -1, i8 %481
  %484 = uitofp i8 %483 to float
  %485 = getelementptr inbounds i8, i8* %467, i64 3
  %486 = load i8, i8* %485, align 1
  %487 = icmp eq i8 %486, 0
  %488 = select i1 %487, i8 -1, i8 %486
  %489 = uitofp i8 %488 to float
  %490 = insertelement <4 x float> undef, float %489, i32 0
  %491 = insertelement <4 x float> %490, float %484, i32 1
  %492 = insertelement <4 x float> %491, float %479, i32 2
  %493 = insertelement <4 x float> %492, float %474, i32 3
  %494 = getelementptr inbounds i8, i8* %467, i64 12
  %495 = load i8, i8* %494, align 1
  %496 = uitofp i8 %495 to float
  %497 = getelementptr inbounds i8, i8* %467, i64 8
  %498 = load i8, i8* %497, align 1
  %499 = uitofp i8 %498 to float
  %500 = getelementptr inbounds i8, i8* %467, i64 4
  %501 = load i8, i8* %500, align 1
  %502 = uitofp i8 %501 to float
  %503 = load i8, i8* %467, align 1
  %504 = uitofp i8 %503 to float
  %505 = insertelement <4 x float> undef, float %504, i32 0
  %506 = insertelement <4 x float> %505, float %502, i32 1
  %507 = insertelement <4 x float> %506, float %499, i32 2
  %508 = insertelement <4 x float> %507, float %496, i32 3
  %509 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %493
  %510 = fmul <4 x float> %509, %508
  %511 = extractelement <4 x float> %510, i32 0
  %512 = fptoui float %511 to i8
  store i8 %512, i8* %468, align 1
  %513 = extractelement <4 x float> %510, i32 1
  %514 = fptoui float %513 to i8
  %515 = getelementptr inbounds i8, i8* %468, i64 1
  store i8 %514, i8* %515, align 1
  %516 = extractelement <4 x float> %510, i32 2
  %517 = fptoui float %516 to i8
  %518 = getelementptr inbounds i8, i8* %468, i64 2
  store i8 %517, i8* %518, align 1
  %519 = extractelement <4 x float> %510, i32 3
  %520 = fptoui float %519 to i8
  %521 = getelementptr inbounds i8, i8* %468, i64 3
  store i8 %520, i8* %521, align 1
  %522 = getelementptr inbounds i8, i8* %467, i64 16
  %523 = getelementptr inbounds i8, i8* %468, i64 4
  %524 = add nuw i32 %469, 4
  %525 = icmp ult i32 %524, %464
  br i1 %525, label %466, label %526

526:                                              ; preds = %466, %452
  %527 = phi i8* [ %460, %452 ], [ %522, %466 ]
  %528 = phi i8* [ %455, %452 ], [ %523, %466 ]
  %529 = sub i32 %463, %464
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %600, label %531

531:                                              ; preds = %526
  %532 = xor i32 %464, -1
  %533 = add i32 %463, %532
  %534 = zext i32 %533 to i64
  %535 = add nuw nsw i64 %534, 1
  %536 = icmp ult i64 %535, 16
  br i1 %536, label %576, label %537

537:                                              ; preds = %531
  %538 = getelementptr i8, i8* %528, i64 1
  %539 = xor i32 %464, -1
  %540 = add i32 %463, %539
  %541 = zext i32 %540 to i64
  %542 = getelementptr i8, i8* %538, i64 %541
  %543 = getelementptr i8, i8* %527, i64 4
  %544 = shl nuw nsw i64 %541, 2
  %545 = getelementptr i8, i8* %543, i64 %544
  %546 = icmp ult i8* %528, %545
  %547 = icmp ult i8* %527, %542
  %548 = and i1 %546, %547
  br i1 %548, label %576, label %549

549:                                              ; preds = %537
  %550 = and i64 %535, 8589934576
  %551 = trunc i64 %550 to i32
  %552 = getelementptr i8, i8* %528, i64 %550
  %553 = shl nuw nsw i64 %550, 2
  %554 = getelementptr i8, i8* %527, i64 %553
  br label %555

555:                                              ; preds = %555, %549
  %556 = phi i64 [ 0, %549 ], [ %572, %555 ]
  %557 = getelementptr i8, i8* %528, i64 %556
  %558 = shl i64 %556, 2
  %559 = getelementptr inbounds i8, i8* %527, i64 %558
  %560 = bitcast i8* %559 to <64 x i8>*
  %561 = load <64 x i8>, <64 x i8>* %560, align 1
  %562 = shufflevector <64 x i8> %561, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %563 = shufflevector <64 x i8> %561, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %564 = icmp eq <16 x i8> %563, zeroinitializer
  %565 = uitofp <16 x i8> %563 to <16 x float>
  %566 = fdiv <16 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %565
  %567 = select <16 x i1> %564, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %566
  %568 = uitofp <16 x i8> %562 to <16 x float>
  %569 = fmul <16 x float> %567, %568
  %570 = fptoui <16 x float> %569 to <16 x i8>
  %571 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %570, <16 x i8>* %571, align 1, !alias.scope !623, !noalias !626
  %572 = add i64 %556, 16
  %573 = icmp eq i64 %572, %550
  br i1 %573, label %574, label %555, !llvm.loop !628

574:                                              ; preds = %555
  %575 = icmp eq i64 %535, %550
  br i1 %575, label %600, label %576

576:                                              ; preds = %574, %537, %531
  %577 = phi i32 [ 0, %537 ], [ 0, %531 ], [ %551, %574 ]
  %578 = phi i8* [ %528, %537 ], [ %528, %531 ], [ %552, %574 ]
  %579 = phi i8* [ %527, %537 ], [ %527, %531 ], [ %554, %574 ]
  br label %580

580:                                              ; preds = %576, %590
  %581 = phi i32 [ %598, %590 ], [ %577, %576 ]
  %582 = phi i8* [ %597, %590 ], [ %578, %576 ]
  %583 = phi i8* [ %596, %590 ], [ %579, %576 ]
  %584 = getelementptr inbounds i8, i8* %583, i64 3
  %585 = load i8, i8* %584, align 1
  %586 = icmp eq i8 %585, 0
  br i1 %586, label %590, label %587

587:                                              ; preds = %580
  %588 = uitofp i8 %585 to float
  %589 = fdiv float 2.550000e+02, %588
  br label %590

590:                                              ; preds = %587, %580
  %591 = phi float [ %589, %587 ], [ 1.000000e+00, %580 ]
  %592 = load i8, i8* %583, align 1
  %593 = uitofp i8 %592 to float
  %594 = fmul float %591, %593
  %595 = fptoui float %594 to i8
  store i8 %595, i8* %582, align 1
  %596 = getelementptr inbounds i8, i8* %583, i64 4
  %597 = getelementptr inbounds i8, i8* %582, i64 1
  %598 = add nuw i32 %581, 1
  %599 = icmp eq i32 %598, %529
  br i1 %599, label %600, label %580, !llvm.loop !629

600:                                              ; preds = %590, %574, %526
  %601 = getelementptr inbounds i16, i16* %456, i64 %388
  %602 = getelementptr inbounds i8, i8* %455, i64 %391
  %603 = add nuw nsw i32 %454, 1
  %604 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %394, align 8
  %605 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %604, i64 0, i32 1, i32 1
  %606 = load i32, i32* %605, align 4
  %607 = icmp slt i32 %603, %606
  br i1 %607, label %452, label %437

608:                                              ; preds = %439, %420
  %609 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %609, align 4
  br label %13459

610:                                              ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %611
    i32 1, label %850
    i32 2, label %1098
  ]

611:                                              ; preds = %610
  %612 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %613 = load i32, i32* %612, align 8
  %614 = sdiv i32 %613, 2
  %615 = sext i32 %614 to i64
  %616 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %617 = load i32, i32* %616, align 8
  %618 = sdiv i32 %617, 2
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %621 = load i8*, i8** %620, align 8
  %622 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %623 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %622, align 8
  %624 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %623, i64 0, i32 0, i32 1
  %625 = load i32, i32* %624, align 4
  %626 = mul nsw i32 %625, %613
  %627 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %628 = load i32, i32* %627, align 4
  %629 = add nsw i32 %626, %628
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds i8, i8* %621, i64 %630
  %632 = bitcast i8* %631 to i16*
  %633 = icmp slt i32 %617, 0
  %634 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %635 = load i32, i32* %634, align 8
  %636 = icmp sgt i32 %635, 1
  %637 = and i1 %633, %636
  br i1 %637, label %638, label %648

638:                                              ; preds = %611
  %639 = add nsw i32 %635, -1
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %642 = load i32, i32* %641, align 4
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %615, %640
  %645 = mul i64 %644, %643
  %646 = sub i64 0, %645
  %647 = getelementptr inbounds i16, i16* %632, i64 %646
  br label %650

648:                                              ; preds = %611
  %649 = icmp sgt i32 %635, 0
  br i1 %649, label %650, label %848

650:                                              ; preds = %648, %638
  %651 = phi i16* [ %647, %638 ], [ %632, %648 ]
  %652 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %653 = bitcast i8** %652 to i16**
  %654 = load i16*, i16** %653, align 8
  %655 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %656 = bitcast i8** %655 to float**
  %657 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %658

658:                                              ; preds = %670, %650
  %659 = phi i32 [ %635, %650 ], [ %671, %670 ]
  %660 = phi %"class.blink::IntRect"* [ %623, %650 ], [ %672, %670 ]
  %661 = phi %"class.blink::IntRect"* [ %623, %650 ], [ %673, %670 ]
  %662 = phi i32 [ 0, %650 ], [ %682, %670 ]
  %663 = phi i16* [ %654, %650 ], [ %675, %670 ]
  %664 = phi i16* [ %651, %650 ], [ %681, %670 ]
  %665 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %661, i64 0, i32 1, i32 1
  %666 = load i32, i32* %665, align 4
  %667 = icmp sgt i32 %666, 0
  br i1 %667, label %684, label %670

668:                                              ; preds = %840
  %669 = load i32, i32* %634, align 8
  br label %670

670:                                              ; preds = %668, %658
  %671 = phi i32 [ %659, %658 ], [ %669, %668 ]
  %672 = phi %"class.blink::IntRect"* [ %660, %658 ], [ %841, %668 ]
  %673 = phi %"class.blink::IntRect"* [ %661, %658 ], [ %841, %668 ]
  %674 = phi i16* [ %664, %658 ], [ %842, %668 ]
  %675 = phi i16* [ %663, %658 ], [ %843, %668 ]
  %676 = phi i32 [ %666, %658 ], [ %846, %668 ]
  %677 = load i32, i32* %657, align 4
  %678 = sub nsw i32 %677, %676
  %679 = sext i32 %678 to i64
  %680 = mul nsw i64 %679, %615
  %681 = getelementptr inbounds i16, i16* %674, i64 %680
  %682 = add nuw nsw i32 %662, 1
  %683 = icmp slt i32 %682, %671
  br i1 %683, label %658, label %848

684:                                              ; preds = %658, %840
  %685 = phi %"class.blink::IntRect"* [ %841, %840 ], [ %660, %658 ]
  %686 = phi %"class.blink::IntRect"* [ %841, %840 ], [ %661, %658 ]
  %687 = phi i32 [ %844, %840 ], [ 0, %658 ]
  %688 = phi i16* [ %843, %840 ], [ %663, %658 ]
  %689 = phi i16* [ %842, %840 ], [ %664, %658 ]
  %690 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %686, i64 0, i32 1, i32 0
  %691 = load i32, i32* %690, align 4
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %840, label %693

693:                                              ; preds = %684
  %694 = load float*, float** %656, align 8
  br label %695

695:                                              ; preds = %695, %693
  %696 = phi i32 [ %771, %695 ], [ 0, %693 ]
  %697 = phi i16* [ %769, %695 ], [ %689, %693 ]
  %698 = phi float* [ %770, %695 ], [ %694, %693 ]
  %699 = load i16, i16* %697, align 2
  %700 = zext i16 %699 to i32
  %701 = lshr i32 %700, 10
  %702 = zext i32 %701 to i64
  %703 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %702
  %704 = load i16, i16* %703, align 2
  %705 = zext i16 %704 to i32
  %706 = and i32 %700, 1023
  %707 = add nuw nsw i32 %706, %705
  %708 = zext i32 %707 to i64
  %709 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %708
  %710 = load i32, i32* %709, align 4
  %711 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %702
  %712 = load i32, i32* %711, align 4
  %713 = add i32 %712, %710
  %714 = bitcast float* %698 to i32*
  store i32 %713, i32* %714, align 4
  %715 = getelementptr inbounds i16, i16* %697, i64 1
  %716 = load i16, i16* %715, align 2
  %717 = zext i16 %716 to i32
  %718 = lshr i32 %717, 10
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %719
  %721 = load i16, i16* %720, align 2
  %722 = zext i16 %721 to i32
  %723 = and i32 %717, 1023
  %724 = add nuw nsw i32 %723, %722
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %725
  %727 = load i32, i32* %726, align 4
  %728 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %719
  %729 = load i32, i32* %728, align 4
  %730 = add i32 %729, %727
  %731 = getelementptr inbounds float, float* %698, i64 1
  %732 = bitcast float* %731 to i32*
  store i32 %730, i32* %732, align 4
  %733 = getelementptr inbounds i16, i16* %697, i64 2
  %734 = load i16, i16* %733, align 2
  %735 = zext i16 %734 to i32
  %736 = lshr i32 %735, 10
  %737 = zext i32 %736 to i64
  %738 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %737
  %739 = load i16, i16* %738, align 2
  %740 = zext i16 %739 to i32
  %741 = and i32 %735, 1023
  %742 = add nuw nsw i32 %741, %740
  %743 = zext i32 %742 to i64
  %744 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %743
  %745 = load i32, i32* %744, align 4
  %746 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %737
  %747 = load i32, i32* %746, align 4
  %748 = add i32 %747, %745
  %749 = getelementptr inbounds float, float* %698, i64 2
  %750 = bitcast float* %749 to i32*
  store i32 %748, i32* %750, align 4
  %751 = getelementptr inbounds i16, i16* %697, i64 3
  %752 = load i16, i16* %751, align 2
  %753 = zext i16 %752 to i32
  %754 = lshr i32 %753, 10
  %755 = zext i32 %754 to i64
  %756 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %755
  %757 = load i16, i16* %756, align 2
  %758 = zext i16 %757 to i32
  %759 = and i32 %753, 1023
  %760 = add nuw nsw i32 %759, %758
  %761 = zext i32 %760 to i64
  %762 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %761
  %763 = load i32, i32* %762, align 4
  %764 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %755
  %765 = load i32, i32* %764, align 4
  %766 = add i32 %765, %763
  %767 = getelementptr inbounds float, float* %698, i64 3
  %768 = bitcast float* %767 to i32*
  store i32 %766, i32* %768, align 4
  %769 = getelementptr inbounds i16, i16* %697, i64 4
  %770 = getelementptr inbounds float, float* %698, i64 4
  %771 = add nuw i32 %696, 1
  %772 = icmp eq i32 %771, %691
  br i1 %772, label %773, label %695

773:                                              ; preds = %695
  %774 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %622, align 8
  %775 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %774, i64 0, i32 1, i32 0
  %776 = load i32, i32* %775, align 4
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %840, label %778

778:                                              ; preds = %773
  %779 = load float*, float** %656, align 8
  %780 = and i32 %776, 1
  %781 = icmp eq i32 %776, 1
  br i1 %781, label %820, label %782

782:                                              ; preds = %778
  %783 = sub i32 %776, %780
  br label %784

784:                                              ; preds = %784, %782
  %785 = phi float* [ %779, %782 ], [ %816, %784 ]
  %786 = phi i16* [ %688, %782 ], [ %817, %784 ]
  %787 = phi i32 [ %783, %782 ], [ %818, %784 ]
  %788 = bitcast float* %785 to i32*
  %789 = load i32, i32* %788, align 4
  %790 = lshr i32 %789, 23
  %791 = zext i32 %790 to i64
  %792 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %791
  %793 = load i16, i16* %792, align 2
  %794 = and i32 %789, 8388607
  %795 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %791
  %796 = load i8, i8* %795, align 1
  %797 = zext i8 %796 to i32
  %798 = lshr i32 %794, %797
  %799 = trunc i32 %798 to i16
  %800 = add i16 %793, %799
  store i16 %800, i16* %786, align 2
  %801 = getelementptr inbounds float, float* %785, i64 4
  %802 = getelementptr inbounds i16, i16* %786, i64 1
  %803 = bitcast float* %801 to i32*
  %804 = load i32, i32* %803, align 4
  %805 = lshr i32 %804, 23
  %806 = zext i32 %805 to i64
  %807 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %806
  %808 = load i16, i16* %807, align 2
  %809 = and i32 %804, 8388607
  %810 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %806
  %811 = load i8, i8* %810, align 1
  %812 = zext i8 %811 to i32
  %813 = lshr i32 %809, %812
  %814 = trunc i32 %813 to i16
  %815 = add i16 %808, %814
  store i16 %815, i16* %802, align 2
  %816 = getelementptr inbounds float, float* %785, i64 8
  %817 = getelementptr inbounds i16, i16* %786, i64 2
  %818 = add i32 %787, -2
  %819 = icmp eq i32 %818, 0
  br i1 %819, label %820, label %784

820:                                              ; preds = %784, %778
  %821 = phi float* [ %779, %778 ], [ %816, %784 ]
  %822 = phi i16* [ %688, %778 ], [ %817, %784 ]
  %823 = icmp eq i32 %780, 0
  br i1 %823, label %838, label %824

824:                                              ; preds = %820
  %825 = bitcast float* %821 to i32*
  %826 = load i32, i32* %825, align 4
  %827 = lshr i32 %826, 23
  %828 = zext i32 %827 to i64
  %829 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %828
  %830 = load i16, i16* %829, align 2
  %831 = and i32 %826, 8388607
  %832 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %828
  %833 = load i8, i8* %832, align 1
  %834 = zext i8 %833 to i32
  %835 = lshr i32 %831, %834
  %836 = trunc i32 %835 to i16
  %837 = add i16 %830, %836
  store i16 %837, i16* %822, align 2
  br label %838

838:                                              ; preds = %820, %824
  %839 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %622, align 8
  br label %840

840:                                              ; preds = %838, %773, %684
  %841 = phi %"class.blink::IntRect"* [ %839, %838 ], [ %774, %773 ], [ %685, %684 ]
  %842 = getelementptr inbounds i16, i16* %689, i64 %615
  %843 = getelementptr inbounds i16, i16* %688, i64 %619
  %844 = add nuw nsw i32 %687, 1
  %845 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %841, i64 0, i32 1, i32 1
  %846 = load i32, i32* %845, align 4
  %847 = icmp slt i32 %844, %846
  br i1 %847, label %684, label %668

848:                                              ; preds = %670, %648
  %849 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %849, align 4
  br label %13459

850:                                              ; preds = %610
  %851 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %852 = load i32, i32* %851, align 8
  %853 = sdiv i32 %852, 2
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %856 = load i32, i32* %855, align 8
  %857 = sdiv i32 %856, 2
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %860 = load i8*, i8** %859, align 8
  %861 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %862 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %861, align 8
  %863 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %862, i64 0, i32 0, i32 1
  %864 = load i32, i32* %863, align 4
  %865 = mul nsw i32 %864, %852
  %866 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %867 = load i32, i32* %866, align 4
  %868 = add nsw i32 %865, %867
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i8, i8* %860, i64 %869
  %871 = bitcast i8* %870 to i16*
  %872 = icmp slt i32 %856, 0
  %873 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %874 = load i32, i32* %873, align 8
  %875 = icmp sgt i32 %874, 1
  %876 = and i1 %872, %875
  br i1 %876, label %877, label %887

877:                                              ; preds = %850
  %878 = add nsw i32 %874, -1
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %881 = load i32, i32* %880, align 4
  %882 = sext i32 %881 to i64
  %883 = mul nsw i64 %854, %879
  %884 = mul i64 %883, %882
  %885 = sub i64 0, %884
  %886 = getelementptr inbounds i16, i16* %871, i64 %885
  br label %889

887:                                              ; preds = %850
  %888 = icmp sgt i32 %874, 0
  br i1 %888, label %889, label %1096

889:                                              ; preds = %887, %877
  %890 = phi i16* [ %886, %877 ], [ %871, %887 ]
  %891 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %892 = bitcast i8** %891 to i16**
  %893 = load i16*, i16** %892, align 8
  %894 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %895 = bitcast i8** %894 to float**
  %896 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %897

897:                                              ; preds = %909, %889
  %898 = phi i32 [ %874, %889 ], [ %910, %909 ]
  %899 = phi %"class.blink::IntRect"* [ %862, %889 ], [ %911, %909 ]
  %900 = phi %"class.blink::IntRect"* [ %862, %889 ], [ %912, %909 ]
  %901 = phi i32 [ 0, %889 ], [ %921, %909 ]
  %902 = phi i16* [ %893, %889 ], [ %914, %909 ]
  %903 = phi i16* [ %890, %889 ], [ %920, %909 ]
  %904 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %900, i64 0, i32 1, i32 1
  %905 = load i32, i32* %904, align 4
  %906 = icmp sgt i32 %905, 0
  br i1 %906, label %923, label %909

907:                                              ; preds = %1088
  %908 = load i32, i32* %873, align 8
  br label %909

909:                                              ; preds = %907, %897
  %910 = phi i32 [ %898, %897 ], [ %908, %907 ]
  %911 = phi %"class.blink::IntRect"* [ %899, %897 ], [ %1089, %907 ]
  %912 = phi %"class.blink::IntRect"* [ %900, %897 ], [ %1089, %907 ]
  %913 = phi i16* [ %903, %897 ], [ %1090, %907 ]
  %914 = phi i16* [ %902, %897 ], [ %1091, %907 ]
  %915 = phi i32 [ %905, %897 ], [ %1094, %907 ]
  %916 = load i32, i32* %896, align 4
  %917 = sub nsw i32 %916, %915
  %918 = sext i32 %917 to i64
  %919 = mul nsw i64 %918, %854
  %920 = getelementptr inbounds i16, i16* %913, i64 %919
  %921 = add nuw nsw i32 %901, 1
  %922 = icmp slt i32 %921, %910
  br i1 %922, label %897, label %1096

923:                                              ; preds = %897, %1088
  %924 = phi %"class.blink::IntRect"* [ %1089, %1088 ], [ %899, %897 ]
  %925 = phi %"class.blink::IntRect"* [ %1089, %1088 ], [ %900, %897 ]
  %926 = phi i32 [ %1092, %1088 ], [ 0, %897 ]
  %927 = phi i16* [ %1091, %1088 ], [ %902, %897 ]
  %928 = phi i16* [ %1090, %1088 ], [ %903, %897 ]
  %929 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %925, i64 0, i32 1, i32 0
  %930 = load i32, i32* %929, align 4
  %931 = icmp eq i32 %930, 0
  br i1 %931, label %1088, label %932

932:                                              ; preds = %923
  %933 = load float*, float** %895, align 8
  br label %934

934:                                              ; preds = %934, %932
  %935 = phi i32 [ %1010, %934 ], [ 0, %932 ]
  %936 = phi i16* [ %1008, %934 ], [ %928, %932 ]
  %937 = phi float* [ %1009, %934 ], [ %933, %932 ]
  %938 = load i16, i16* %936, align 2
  %939 = zext i16 %938 to i32
  %940 = lshr i32 %939, 10
  %941 = zext i32 %940 to i64
  %942 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %941
  %943 = load i16, i16* %942, align 2
  %944 = zext i16 %943 to i32
  %945 = and i32 %939, 1023
  %946 = add nuw nsw i32 %945, %944
  %947 = zext i32 %946 to i64
  %948 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %947
  %949 = load i32, i32* %948, align 4
  %950 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %941
  %951 = load i32, i32* %950, align 4
  %952 = add i32 %951, %949
  %953 = bitcast float* %937 to i32*
  store i32 %952, i32* %953, align 4
  %954 = getelementptr inbounds i16, i16* %936, i64 1
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = lshr i32 %956, 10
  %958 = zext i32 %957 to i64
  %959 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %958
  %960 = load i16, i16* %959, align 2
  %961 = zext i16 %960 to i32
  %962 = and i32 %956, 1023
  %963 = add nuw nsw i32 %962, %961
  %964 = zext i32 %963 to i64
  %965 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %964
  %966 = load i32, i32* %965, align 4
  %967 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %958
  %968 = load i32, i32* %967, align 4
  %969 = add i32 %968, %966
  %970 = getelementptr inbounds float, float* %937, i64 1
  %971 = bitcast float* %970 to i32*
  store i32 %969, i32* %971, align 4
  %972 = getelementptr inbounds i16, i16* %936, i64 2
  %973 = load i16, i16* %972, align 2
  %974 = zext i16 %973 to i32
  %975 = lshr i32 %974, 10
  %976 = zext i32 %975 to i64
  %977 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %976
  %978 = load i16, i16* %977, align 2
  %979 = zext i16 %978 to i32
  %980 = and i32 %974, 1023
  %981 = add nuw nsw i32 %980, %979
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %982
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %976
  %986 = load i32, i32* %985, align 4
  %987 = add i32 %986, %984
  %988 = getelementptr inbounds float, float* %937, i64 2
  %989 = bitcast float* %988 to i32*
  store i32 %987, i32* %989, align 4
  %990 = getelementptr inbounds i16, i16* %936, i64 3
  %991 = load i16, i16* %990, align 2
  %992 = zext i16 %991 to i32
  %993 = lshr i32 %992, 10
  %994 = zext i32 %993 to i64
  %995 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %994
  %996 = load i16, i16* %995, align 2
  %997 = zext i16 %996 to i32
  %998 = and i32 %992, 1023
  %999 = add nuw nsw i32 %998, %997
  %1000 = zext i32 %999 to i64
  %1001 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1000
  %1002 = load i32, i32* %1001, align 4
  %1003 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %994
  %1004 = load i32, i32* %1003, align 4
  %1005 = add i32 %1004, %1002
  %1006 = getelementptr inbounds float, float* %937, i64 3
  %1007 = bitcast float* %1006 to i32*
  store i32 %1005, i32* %1007, align 4
  %1008 = getelementptr inbounds i16, i16* %936, i64 4
  %1009 = getelementptr inbounds float, float* %937, i64 4
  %1010 = add nuw i32 %935, 1
  %1011 = icmp eq i32 %1010, %930
  br i1 %1011, label %1012, label %934

1012:                                             ; preds = %934
  %1013 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %861, align 8
  %1014 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1013, i64 0, i32 1, i32 0
  %1015 = load i32, i32* %1014, align 4
  %1016 = icmp eq i32 %1015, 0
  br i1 %1016, label %1088, label %1017

1017:                                             ; preds = %1012
  %1018 = load float*, float** %895, align 8
  %1019 = and i32 %1015, 1
  %1020 = icmp eq i32 %1015, 1
  br i1 %1020, label %1065, label %1021

1021:                                             ; preds = %1017
  %1022 = sub i32 %1015, %1019
  br label %1023

1023:                                             ; preds = %1023, %1021
  %1024 = phi float* [ %1018, %1021 ], [ %1061, %1023 ]
  %1025 = phi i16* [ %927, %1021 ], [ %1062, %1023 ]
  %1026 = phi i32 [ %1022, %1021 ], [ %1063, %1023 ]
  %1027 = getelementptr inbounds float, float* %1024, i64 3
  %1028 = load float, float* %1027, align 4
  %1029 = load float, float* %1024, align 4
  %1030 = fmul float %1028, %1029
  %1031 = bitcast float %1030 to i32
  %1032 = lshr i32 %1031, 23
  %1033 = zext i32 %1032 to i64
  %1034 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1033
  %1035 = load i16, i16* %1034, align 2
  %1036 = and i32 %1031, 8388607
  %1037 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1033
  %1038 = load i8, i8* %1037, align 1
  %1039 = zext i8 %1038 to i32
  %1040 = lshr i32 %1036, %1039
  %1041 = trunc i32 %1040 to i16
  %1042 = add i16 %1035, %1041
  store i16 %1042, i16* %1025, align 2
  %1043 = getelementptr inbounds float, float* %1024, i64 4
  %1044 = getelementptr inbounds i16, i16* %1025, i64 1
  %1045 = getelementptr inbounds float, float* %1024, i64 7
  %1046 = load float, float* %1045, align 4
  %1047 = load float, float* %1043, align 4
  %1048 = fmul float %1046, %1047
  %1049 = bitcast float %1048 to i32
  %1050 = lshr i32 %1049, 23
  %1051 = zext i32 %1050 to i64
  %1052 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1051
  %1053 = load i16, i16* %1052, align 2
  %1054 = and i32 %1049, 8388607
  %1055 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1051
  %1056 = load i8, i8* %1055, align 1
  %1057 = zext i8 %1056 to i32
  %1058 = lshr i32 %1054, %1057
  %1059 = trunc i32 %1058 to i16
  %1060 = add i16 %1053, %1059
  store i16 %1060, i16* %1044, align 2
  %1061 = getelementptr inbounds float, float* %1024, i64 8
  %1062 = getelementptr inbounds i16, i16* %1025, i64 2
  %1063 = add i32 %1026, -2
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1065, label %1023

1065:                                             ; preds = %1023, %1017
  %1066 = phi float* [ %1018, %1017 ], [ %1061, %1023 ]
  %1067 = phi i16* [ %927, %1017 ], [ %1062, %1023 ]
  %1068 = icmp eq i32 %1019, 0
  br i1 %1068, label %1086, label %1069

1069:                                             ; preds = %1065
  %1070 = getelementptr inbounds float, float* %1066, i64 3
  %1071 = load float, float* %1070, align 4
  %1072 = load float, float* %1066, align 4
  %1073 = fmul float %1071, %1072
  %1074 = bitcast float %1073 to i32
  %1075 = lshr i32 %1074, 23
  %1076 = zext i32 %1075 to i64
  %1077 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1076
  %1078 = load i16, i16* %1077, align 2
  %1079 = and i32 %1074, 8388607
  %1080 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1076
  %1081 = load i8, i8* %1080, align 1
  %1082 = zext i8 %1081 to i32
  %1083 = lshr i32 %1079, %1082
  %1084 = trunc i32 %1083 to i16
  %1085 = add i16 %1078, %1084
  store i16 %1085, i16* %1067, align 2
  br label %1086

1086:                                             ; preds = %1065, %1069
  %1087 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %861, align 8
  br label %1088

1088:                                             ; preds = %1086, %1012, %923
  %1089 = phi %"class.blink::IntRect"* [ %1087, %1086 ], [ %1013, %1012 ], [ %924, %923 ]
  %1090 = getelementptr inbounds i16, i16* %928, i64 %854
  %1091 = getelementptr inbounds i16, i16* %927, i64 %858
  %1092 = add nuw nsw i32 %926, 1
  %1093 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1089, i64 0, i32 1, i32 1
  %1094 = load i32, i32* %1093, align 4
  %1095 = icmp slt i32 %1092, %1094
  br i1 %1095, label %923, label %907

1096:                                             ; preds = %909, %887
  %1097 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1097, align 4
  br label %13459

1098:                                             ; preds = %610
  %1099 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1100 = load i32, i32* %1099, align 8
  %1101 = sdiv i32 %1100, 2
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1104 = load i32, i32* %1103, align 8
  %1105 = sdiv i32 %1104, 2
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1108 = load i8*, i8** %1107, align 8
  %1109 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1110 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1109, align 8
  %1111 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1110, i64 0, i32 0, i32 1
  %1112 = load i32, i32* %1111, align 4
  %1113 = mul nsw i32 %1112, %1100
  %1114 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1115 = load i32, i32* %1114, align 4
  %1116 = add nsw i32 %1113, %1115
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds i8, i8* %1108, i64 %1117
  %1119 = bitcast i8* %1118 to i16*
  %1120 = icmp slt i32 %1104, 0
  %1121 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1122 = load i32, i32* %1121, align 8
  %1123 = icmp sgt i32 %1122, 1
  %1124 = and i1 %1120, %1123
  br i1 %1124, label %1125, label %1135

1125:                                             ; preds = %1098
  %1126 = add nsw i32 %1122, -1
  %1127 = sext i32 %1126 to i64
  %1128 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1129 = load i32, i32* %1128, align 4
  %1130 = sext i32 %1129 to i64
  %1131 = mul nsw i64 %1102, %1127
  %1132 = mul i64 %1131, %1130
  %1133 = sub i64 0, %1132
  %1134 = getelementptr inbounds i16, i16* %1119, i64 %1133
  br label %1137

1135:                                             ; preds = %1098
  %1136 = icmp sgt i32 %1122, 0
  br i1 %1136, label %1137, label %1304

1137:                                             ; preds = %1135, %1125
  %1138 = phi i16* [ %1134, %1125 ], [ %1119, %1135 ]
  %1139 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1140 = bitcast i8** %1139 to i16**
  %1141 = load i16*, i16** %1140, align 8
  %1142 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1143 = bitcast i8** %1142 to float**
  %1144 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1145

1145:                                             ; preds = %1157, %1137
  %1146 = phi i32 [ %1122, %1137 ], [ %1158, %1157 ]
  %1147 = phi %"class.blink::IntRect"* [ %1110, %1137 ], [ %1159, %1157 ]
  %1148 = phi %"class.blink::IntRect"* [ %1110, %1137 ], [ %1160, %1157 ]
  %1149 = phi i32 [ 0, %1137 ], [ %1169, %1157 ]
  %1150 = phi i16* [ %1141, %1137 ], [ %1162, %1157 ]
  %1151 = phi i16* [ %1138, %1137 ], [ %1168, %1157 ]
  %1152 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1148, i64 0, i32 1, i32 1
  %1153 = load i32, i32* %1152, align 4
  %1154 = icmp sgt i32 %1153, 0
  br i1 %1154, label %1171, label %1157

1155:                                             ; preds = %1296
  %1156 = load i32, i32* %1121, align 8
  br label %1157

1157:                                             ; preds = %1155, %1145
  %1158 = phi i32 [ %1146, %1145 ], [ %1156, %1155 ]
  %1159 = phi %"class.blink::IntRect"* [ %1147, %1145 ], [ %1297, %1155 ]
  %1160 = phi %"class.blink::IntRect"* [ %1148, %1145 ], [ %1297, %1155 ]
  %1161 = phi i16* [ %1151, %1145 ], [ %1298, %1155 ]
  %1162 = phi i16* [ %1150, %1145 ], [ %1299, %1155 ]
  %1163 = phi i32 [ %1153, %1145 ], [ %1302, %1155 ]
  %1164 = load i32, i32* %1144, align 4
  %1165 = sub nsw i32 %1164, %1163
  %1166 = sext i32 %1165 to i64
  %1167 = mul nsw i64 %1166, %1102
  %1168 = getelementptr inbounds i16, i16* %1161, i64 %1167
  %1169 = add nuw nsw i32 %1149, 1
  %1170 = icmp slt i32 %1169, %1158
  br i1 %1170, label %1145, label %1304

1171:                                             ; preds = %1145, %1296
  %1172 = phi %"class.blink::IntRect"* [ %1297, %1296 ], [ %1147, %1145 ]
  %1173 = phi %"class.blink::IntRect"* [ %1297, %1296 ], [ %1148, %1145 ]
  %1174 = phi i32 [ %1300, %1296 ], [ 0, %1145 ]
  %1175 = phi i16* [ %1299, %1296 ], [ %1150, %1145 ]
  %1176 = phi i16* [ %1298, %1296 ], [ %1151, %1145 ]
  %1177 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1173, i64 0, i32 1, i32 0
  %1178 = load i32, i32* %1177, align 4
  %1179 = icmp eq i32 %1178, 0
  br i1 %1179, label %1296, label %1180

1180:                                             ; preds = %1171
  %1181 = load float*, float** %1143, align 8
  br label %1182

1182:                                             ; preds = %1182, %1180
  %1183 = phi i32 [ %1258, %1182 ], [ 0, %1180 ]
  %1184 = phi i16* [ %1256, %1182 ], [ %1176, %1180 ]
  %1185 = phi float* [ %1257, %1182 ], [ %1181, %1180 ]
  %1186 = load i16, i16* %1184, align 2
  %1187 = zext i16 %1186 to i32
  %1188 = lshr i32 %1187, 10
  %1189 = zext i32 %1188 to i64
  %1190 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1189
  %1191 = load i16, i16* %1190, align 2
  %1192 = zext i16 %1191 to i32
  %1193 = and i32 %1187, 1023
  %1194 = add nuw nsw i32 %1193, %1192
  %1195 = zext i32 %1194 to i64
  %1196 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1195
  %1197 = load i32, i32* %1196, align 4
  %1198 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1189
  %1199 = load i32, i32* %1198, align 4
  %1200 = add i32 %1199, %1197
  %1201 = bitcast float* %1185 to i32*
  store i32 %1200, i32* %1201, align 4
  %1202 = getelementptr inbounds i16, i16* %1184, i64 1
  %1203 = load i16, i16* %1202, align 2
  %1204 = zext i16 %1203 to i32
  %1205 = lshr i32 %1204, 10
  %1206 = zext i32 %1205 to i64
  %1207 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1206
  %1208 = load i16, i16* %1207, align 2
  %1209 = zext i16 %1208 to i32
  %1210 = and i32 %1204, 1023
  %1211 = add nuw nsw i32 %1210, %1209
  %1212 = zext i32 %1211 to i64
  %1213 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1212
  %1214 = load i32, i32* %1213, align 4
  %1215 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1206
  %1216 = load i32, i32* %1215, align 4
  %1217 = add i32 %1216, %1214
  %1218 = getelementptr inbounds float, float* %1185, i64 1
  %1219 = bitcast float* %1218 to i32*
  store i32 %1217, i32* %1219, align 4
  %1220 = getelementptr inbounds i16, i16* %1184, i64 2
  %1221 = load i16, i16* %1220, align 2
  %1222 = zext i16 %1221 to i32
  %1223 = lshr i32 %1222, 10
  %1224 = zext i32 %1223 to i64
  %1225 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1224
  %1226 = load i16, i16* %1225, align 2
  %1227 = zext i16 %1226 to i32
  %1228 = and i32 %1222, 1023
  %1229 = add nuw nsw i32 %1228, %1227
  %1230 = zext i32 %1229 to i64
  %1231 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1230
  %1232 = load i32, i32* %1231, align 4
  %1233 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1224
  %1234 = load i32, i32* %1233, align 4
  %1235 = add i32 %1234, %1232
  %1236 = getelementptr inbounds float, float* %1185, i64 2
  %1237 = bitcast float* %1236 to i32*
  store i32 %1235, i32* %1237, align 4
  %1238 = getelementptr inbounds i16, i16* %1184, i64 3
  %1239 = load i16, i16* %1238, align 2
  %1240 = zext i16 %1239 to i32
  %1241 = lshr i32 %1240, 10
  %1242 = zext i32 %1241 to i64
  %1243 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1242
  %1244 = load i16, i16* %1243, align 2
  %1245 = zext i16 %1244 to i32
  %1246 = and i32 %1240, 1023
  %1247 = add nuw nsw i32 %1246, %1245
  %1248 = zext i32 %1247 to i64
  %1249 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1248
  %1250 = load i32, i32* %1249, align 4
  %1251 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1242
  %1252 = load i32, i32* %1251, align 4
  %1253 = add i32 %1252, %1250
  %1254 = getelementptr inbounds float, float* %1185, i64 3
  %1255 = bitcast float* %1254 to i32*
  store i32 %1253, i32* %1255, align 4
  %1256 = getelementptr inbounds i16, i16* %1184, i64 4
  %1257 = getelementptr inbounds float, float* %1185, i64 4
  %1258 = add nuw i32 %1183, 1
  %1259 = icmp eq i32 %1258, %1178
  br i1 %1259, label %1260, label %1182

1260:                                             ; preds = %1182
  %1261 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1109, align 8
  %1262 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1261, i64 0, i32 1, i32 0
  %1263 = load i32, i32* %1262, align 4
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %1296, label %1265

1265:                                             ; preds = %1260
  %1266 = load float*, float** %1143, align 8
  br label %1267

1267:                                             ; preds = %1267, %1265
  %1268 = phi i32 [ %1292, %1267 ], [ 0, %1265 ]
  %1269 = phi float* [ %1290, %1267 ], [ %1266, %1265 ]
  %1270 = phi i16* [ %1291, %1267 ], [ %1175, %1265 ]
  %1271 = getelementptr inbounds float, float* %1269, i64 3
  %1272 = load float, float* %1271, align 4
  %1273 = fcmp une float %1272, 0.000000e+00
  %1274 = fdiv float 1.000000e+00, %1272
  %1275 = select i1 %1273, float %1274, float 1.000000e+00
  %1276 = load float, float* %1269, align 4
  %1277 = fmul float %1276, %1275
  %1278 = bitcast float %1277 to i32
  %1279 = lshr i32 %1278, 23
  %1280 = zext i32 %1279 to i64
  %1281 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %1280
  %1282 = load i16, i16* %1281, align 2
  %1283 = and i32 %1278, 8388607
  %1284 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %1280
  %1285 = load i8, i8* %1284, align 1
  %1286 = zext i8 %1285 to i32
  %1287 = lshr i32 %1283, %1286
  %1288 = trunc i32 %1287 to i16
  %1289 = add i16 %1282, %1288
  store i16 %1289, i16* %1270, align 2
  %1290 = getelementptr inbounds float, float* %1269, i64 4
  %1291 = getelementptr inbounds i16, i16* %1270, i64 1
  %1292 = add nuw i32 %1268, 1
  %1293 = icmp eq i32 %1292, %1263
  br i1 %1293, label %1294, label %1267

1294:                                             ; preds = %1267
  %1295 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1109, align 8
  br label %1296

1296:                                             ; preds = %1294, %1260, %1171
  %1297 = phi %"class.blink::IntRect"* [ %1295, %1294 ], [ %1261, %1260 ], [ %1172, %1171 ]
  %1298 = getelementptr inbounds i16, i16* %1176, i64 %1102
  %1299 = getelementptr inbounds i16, i16* %1175, i64 %1106
  %1300 = add nuw nsw i32 %1174, 1
  %1301 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1297, i64 0, i32 1, i32 1
  %1302 = load i32, i32* %1301, align 4
  %1303 = icmp slt i32 %1300, %1302
  br i1 %1303, label %1171, label %1155

1304:                                             ; preds = %1157, %1135
  %1305 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1305, align 4
  br label %13459

1306:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %1307
    i32 1, label %1609
    i32 2, label %1899
  ]

1307:                                             ; preds = %1306
  %1308 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1309 = load i32, i32* %1308, align 8
  %1310 = sdiv i32 %1309, 2
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1313 = load i32, i32* %1312, align 8
  %1314 = sdiv i32 %1313, 4
  %1315 = sext i32 %1314 to i64
  %1316 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1317 = load i8*, i8** %1316, align 8
  %1318 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1319 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1318, align 8
  %1320 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1319, i64 0, i32 0, i32 1
  %1321 = load i32, i32* %1320, align 4
  %1322 = mul nsw i32 %1321, %1309
  %1323 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1324 = load i32, i32* %1323, align 4
  %1325 = add nsw i32 %1322, %1324
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i8, i8* %1317, i64 %1326
  %1328 = bitcast i8* %1327 to i16*
  %1329 = icmp slt i32 %1313, 0
  %1330 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1331 = load i32, i32* %1330, align 8
  %1332 = icmp sgt i32 %1331, 1
  %1333 = and i1 %1329, %1332
  br i1 %1333, label %1334, label %1344

1334:                                             ; preds = %1307
  %1335 = add nsw i32 %1331, -1
  %1336 = sext i32 %1335 to i64
  %1337 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1338 = load i32, i32* %1337, align 4
  %1339 = sext i32 %1338 to i64
  %1340 = mul nsw i64 %1311, %1336
  %1341 = mul i64 %1340, %1339
  %1342 = sub i64 0, %1341
  %1343 = getelementptr inbounds i16, i16* %1328, i64 %1342
  br label %1346

1344:                                             ; preds = %1307
  %1345 = icmp sgt i32 %1331, 0
  br i1 %1345, label %1346, label %1607

1346:                                             ; preds = %1344, %1334
  %1347 = phi i16* [ %1343, %1334 ], [ %1328, %1344 ]
  %1348 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1349 = bitcast i8** %1348 to float**
  %1350 = load float*, float** %1349, align 8
  %1351 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1352 = bitcast i8** %1351 to float**
  %1353 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1354

1354:                                             ; preds = %1366, %1346
  %1355 = phi i32 [ %1331, %1346 ], [ %1367, %1366 ]
  %1356 = phi %"class.blink::IntRect"* [ %1319, %1346 ], [ %1368, %1366 ]
  %1357 = phi %"class.blink::IntRect"* [ %1319, %1346 ], [ %1369, %1366 ]
  %1358 = phi i32 [ 0, %1346 ], [ %1378, %1366 ]
  %1359 = phi float* [ %1350, %1346 ], [ %1371, %1366 ]
  %1360 = phi i16* [ %1347, %1346 ], [ %1377, %1366 ]
  %1361 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1357, i64 0, i32 1, i32 1
  %1362 = load i32, i32* %1361, align 4
  %1363 = icmp sgt i32 %1362, 0
  br i1 %1363, label %1380, label %1366

1364:                                             ; preds = %1598
  %1365 = load i32, i32* %1330, align 8
  br label %1366

1366:                                             ; preds = %1364, %1354
  %1367 = phi i32 [ %1355, %1354 ], [ %1365, %1364 ]
  %1368 = phi %"class.blink::IntRect"* [ %1356, %1354 ], [ %1599, %1364 ]
  %1369 = phi %"class.blink::IntRect"* [ %1357, %1354 ], [ %1599, %1364 ]
  %1370 = phi i16* [ %1360, %1354 ], [ %1600, %1364 ]
  %1371 = phi float* [ %1359, %1354 ], [ %1601, %1364 ]
  %1372 = phi i32 [ %1362, %1354 ], [ %1604, %1364 ]
  %1373 = load i32, i32* %1353, align 4
  %1374 = sub nsw i32 %1373, %1372
  %1375 = sext i32 %1374 to i64
  %1376 = mul nsw i64 %1375, %1311
  %1377 = getelementptr inbounds i16, i16* %1370, i64 %1376
  %1378 = add nuw nsw i32 %1358, 1
  %1379 = icmp slt i32 %1378, %1367
  br i1 %1379, label %1354, label %1607

1380:                                             ; preds = %1354, %1598
  %1381 = phi i64 [ %1606, %1598 ], [ 0, %1354 ]
  %1382 = phi %"class.blink::IntRect"* [ %1599, %1598 ], [ %1356, %1354 ]
  %1383 = phi %"class.blink::IntRect"* [ %1599, %1598 ], [ %1357, %1354 ]
  %1384 = phi i32 [ %1602, %1598 ], [ 0, %1354 ]
  %1385 = phi float* [ %1601, %1598 ], [ %1359, %1354 ]
  %1386 = phi i16* [ %1600, %1598 ], [ %1360, %1354 ]
  %1387 = mul i64 %1381, %1315
  %1388 = getelementptr float, float* %1359, i64 %1387
  %1389 = add i64 %1387, 1
  %1390 = getelementptr float, float* %1359, i64 %1389
  %1391 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1383, i64 0, i32 1, i32 0
  %1392 = load i32, i32* %1391, align 4
  %1393 = icmp eq i32 %1392, 0
  br i1 %1393, label %1598, label %1394

1394:                                             ; preds = %1380
  %1395 = load float*, float** %1352, align 8
  br label %1396

1396:                                             ; preds = %1396, %1394
  %1397 = phi i32 [ %1472, %1396 ], [ 0, %1394 ]
  %1398 = phi i16* [ %1470, %1396 ], [ %1386, %1394 ]
  %1399 = phi float* [ %1471, %1396 ], [ %1395, %1394 ]
  %1400 = load i16, i16* %1398, align 2
  %1401 = zext i16 %1400 to i32
  %1402 = lshr i32 %1401, 10
  %1403 = zext i32 %1402 to i64
  %1404 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1403
  %1405 = load i16, i16* %1404, align 2
  %1406 = zext i16 %1405 to i32
  %1407 = and i32 %1401, 1023
  %1408 = add nuw nsw i32 %1407, %1406
  %1409 = zext i32 %1408 to i64
  %1410 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1409
  %1411 = load i32, i32* %1410, align 4
  %1412 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1403
  %1413 = load i32, i32* %1412, align 4
  %1414 = add i32 %1413, %1411
  %1415 = bitcast float* %1399 to i32*
  store i32 %1414, i32* %1415, align 4
  %1416 = getelementptr inbounds i16, i16* %1398, i64 1
  %1417 = load i16, i16* %1416, align 2
  %1418 = zext i16 %1417 to i32
  %1419 = lshr i32 %1418, 10
  %1420 = zext i32 %1419 to i64
  %1421 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1420
  %1422 = load i16, i16* %1421, align 2
  %1423 = zext i16 %1422 to i32
  %1424 = and i32 %1418, 1023
  %1425 = add nuw nsw i32 %1424, %1423
  %1426 = zext i32 %1425 to i64
  %1427 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1426
  %1428 = load i32, i32* %1427, align 4
  %1429 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1420
  %1430 = load i32, i32* %1429, align 4
  %1431 = add i32 %1430, %1428
  %1432 = getelementptr inbounds float, float* %1399, i64 1
  %1433 = bitcast float* %1432 to i32*
  store i32 %1431, i32* %1433, align 4
  %1434 = getelementptr inbounds i16, i16* %1398, i64 2
  %1435 = load i16, i16* %1434, align 2
  %1436 = zext i16 %1435 to i32
  %1437 = lshr i32 %1436, 10
  %1438 = zext i32 %1437 to i64
  %1439 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1438
  %1440 = load i16, i16* %1439, align 2
  %1441 = zext i16 %1440 to i32
  %1442 = and i32 %1436, 1023
  %1443 = add nuw nsw i32 %1442, %1441
  %1444 = zext i32 %1443 to i64
  %1445 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1444
  %1446 = load i32, i32* %1445, align 4
  %1447 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1438
  %1448 = load i32, i32* %1447, align 4
  %1449 = add i32 %1448, %1446
  %1450 = getelementptr inbounds float, float* %1399, i64 2
  %1451 = bitcast float* %1450 to i32*
  store i32 %1449, i32* %1451, align 4
  %1452 = getelementptr inbounds i16, i16* %1398, i64 3
  %1453 = load i16, i16* %1452, align 2
  %1454 = zext i16 %1453 to i32
  %1455 = lshr i32 %1454, 10
  %1456 = zext i32 %1455 to i64
  %1457 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1456
  %1458 = load i16, i16* %1457, align 2
  %1459 = zext i16 %1458 to i32
  %1460 = and i32 %1454, 1023
  %1461 = add nuw nsw i32 %1460, %1459
  %1462 = zext i32 %1461 to i64
  %1463 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1462
  %1464 = load i32, i32* %1463, align 4
  %1465 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1456
  %1466 = load i32, i32* %1465, align 4
  %1467 = add i32 %1466, %1464
  %1468 = getelementptr inbounds float, float* %1399, i64 3
  %1469 = bitcast float* %1468 to i32*
  store i32 %1467, i32* %1469, align 4
  %1470 = getelementptr inbounds i16, i16* %1398, i64 4
  %1471 = getelementptr inbounds float, float* %1399, i64 4
  %1472 = add nuw i32 %1397, 1
  %1473 = icmp eq i32 %1472, %1392
  br i1 %1473, label %1474, label %1396

1474:                                             ; preds = %1396
  %1475 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1318, align 8
  %1476 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1475, i64 0, i32 1, i32 0
  %1477 = load i32, i32* %1476, align 4
  %1478 = icmp eq i32 %1477, 0
  br i1 %1478, label %1598, label %1479

1479:                                             ; preds = %1474
  %1480 = load float*, float** %1352, align 8
  %1481 = add i32 %1477, -1
  %1482 = zext i32 %1481 to i64
  %1483 = add nuw nsw i64 %1482, 1
  %1484 = icmp ult i64 %1483, 9
  br i1 %1484, label %1523, label %1485

1485:                                             ; preds = %1479
  %1486 = add i32 %1477, -1
  %1487 = zext i32 %1486 to i64
  %1488 = getelementptr float, float* %1390, i64 %1487
  %1489 = getelementptr float, float* %1480, i64 1
  %1490 = shl nuw nsw i64 %1487, 2
  %1491 = getelementptr float, float* %1489, i64 %1490
  %1492 = icmp ult float* %1388, %1491
  %1493 = icmp ult float* %1480, %1488
  %1494 = and i1 %1492, %1493
  br i1 %1494, label %1523, label %1495

1495:                                             ; preds = %1485
  %1496 = and i64 %1483, 7
  %1497 = icmp eq i64 %1496, 0
  %1498 = select i1 %1497, i64 8, i64 %1496
  %1499 = sub nsw i64 %1483, %1498
  %1500 = trunc i64 %1499 to i32
  %1501 = shl nsw i64 %1499, 2
  %1502 = getelementptr float, float* %1480, i64 %1501
  %1503 = getelementptr float, float* %1385, i64 %1499
  br label %1504

1504:                                             ; preds = %1504, %1495
  %1505 = phi i64 [ 0, %1495 ], [ %1521, %1504 ]
  %1506 = shl i64 %1505, 2
  %1507 = getelementptr float, float* %1480, i64 %1506
  %1508 = shl i64 %1505, 2
  %1509 = or i64 %1508, 16
  %1510 = getelementptr float, float* %1480, i64 %1509
  %1511 = getelementptr float, float* %1385, i64 %1505
  %1512 = bitcast float* %1507 to <16 x i32>*
  %1513 = bitcast float* %1510 to <16 x i32>*
  %1514 = load <16 x i32>, <16 x i32>* %1512, align 4
  %1515 = load <16 x i32>, <16 x i32>* %1513, align 4
  %1516 = shufflevector <16 x i32> %1514, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1517 = shufflevector <16 x i32> %1515, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1518 = bitcast float* %1511 to <4 x i32>*
  store <4 x i32> %1516, <4 x i32>* %1518, align 4, !alias.scope !630, !noalias !633
  %1519 = getelementptr float, float* %1511, i64 4
  %1520 = bitcast float* %1519 to <4 x i32>*
  store <4 x i32> %1517, <4 x i32>* %1520, align 4, !alias.scope !630, !noalias !633
  %1521 = add i64 %1505, 8
  %1522 = icmp eq i64 %1521, %1499
  br i1 %1522, label %1523, label %1504, !llvm.loop !635

1523:                                             ; preds = %1504, %1485, %1479
  %1524 = phi i32 [ 0, %1485 ], [ 0, %1479 ], [ %1500, %1504 ]
  %1525 = phi float* [ %1480, %1485 ], [ %1480, %1479 ], [ %1502, %1504 ]
  %1526 = phi float* [ %1385, %1485 ], [ %1385, %1479 ], [ %1503, %1504 ]
  %1527 = sub i32 %1477, %1524
  %1528 = xor i32 %1524, -1
  %1529 = add i32 %1477, %1528
  %1530 = and i32 %1527, 7
  %1531 = icmp eq i32 %1530, 0
  br i1 %1531, label %1545, label %1532

1532:                                             ; preds = %1523, %1532
  %1533 = phi i32 [ %1542, %1532 ], [ %1524, %1523 ]
  %1534 = phi float* [ %1540, %1532 ], [ %1525, %1523 ]
  %1535 = phi float* [ %1541, %1532 ], [ %1526, %1523 ]
  %1536 = phi i32 [ %1543, %1532 ], [ %1530, %1523 ]
  %1537 = bitcast float* %1534 to i32*
  %1538 = load i32, i32* %1537, align 4
  %1539 = bitcast float* %1535 to i32*
  store i32 %1538, i32* %1539, align 4
  %1540 = getelementptr inbounds float, float* %1534, i64 4
  %1541 = getelementptr inbounds float, float* %1535, i64 1
  %1542 = add nuw i32 %1533, 1
  %1543 = add i32 %1536, -1
  %1544 = icmp eq i32 %1543, 0
  br i1 %1544, label %1545, label %1532, !llvm.loop !636

1545:                                             ; preds = %1532, %1523
  %1546 = phi i32 [ %1524, %1523 ], [ %1542, %1532 ]
  %1547 = phi float* [ %1525, %1523 ], [ %1540, %1532 ]
  %1548 = phi float* [ %1526, %1523 ], [ %1541, %1532 ]
  %1549 = icmp ult i32 %1529, 7
  br i1 %1549, label %1596, label %1550

1550:                                             ; preds = %1545, %1550
  %1551 = phi i32 [ %1594, %1550 ], [ %1546, %1545 ]
  %1552 = phi float* [ %1592, %1550 ], [ %1547, %1545 ]
  %1553 = phi float* [ %1593, %1550 ], [ %1548, %1545 ]
  %1554 = bitcast float* %1552 to i32*
  %1555 = load i32, i32* %1554, align 4
  %1556 = bitcast float* %1553 to i32*
  store i32 %1555, i32* %1556, align 4
  %1557 = getelementptr inbounds float, float* %1552, i64 4
  %1558 = getelementptr inbounds float, float* %1553, i64 1
  %1559 = bitcast float* %1557 to i32*
  %1560 = load i32, i32* %1559, align 4
  %1561 = bitcast float* %1558 to i32*
  store i32 %1560, i32* %1561, align 4
  %1562 = getelementptr inbounds float, float* %1552, i64 8
  %1563 = getelementptr inbounds float, float* %1553, i64 2
  %1564 = bitcast float* %1562 to i32*
  %1565 = load i32, i32* %1564, align 4
  %1566 = bitcast float* %1563 to i32*
  store i32 %1565, i32* %1566, align 4
  %1567 = getelementptr inbounds float, float* %1552, i64 12
  %1568 = getelementptr inbounds float, float* %1553, i64 3
  %1569 = bitcast float* %1567 to i32*
  %1570 = load i32, i32* %1569, align 4
  %1571 = bitcast float* %1568 to i32*
  store i32 %1570, i32* %1571, align 4
  %1572 = getelementptr inbounds float, float* %1552, i64 16
  %1573 = getelementptr inbounds float, float* %1553, i64 4
  %1574 = bitcast float* %1572 to i32*
  %1575 = load i32, i32* %1574, align 4
  %1576 = bitcast float* %1573 to i32*
  store i32 %1575, i32* %1576, align 4
  %1577 = getelementptr inbounds float, float* %1552, i64 20
  %1578 = getelementptr inbounds float, float* %1553, i64 5
  %1579 = bitcast float* %1577 to i32*
  %1580 = load i32, i32* %1579, align 4
  %1581 = bitcast float* %1578 to i32*
  store i32 %1580, i32* %1581, align 4
  %1582 = getelementptr inbounds float, float* %1552, i64 24
  %1583 = getelementptr inbounds float, float* %1553, i64 6
  %1584 = bitcast float* %1582 to i32*
  %1585 = load i32, i32* %1584, align 4
  %1586 = bitcast float* %1583 to i32*
  store i32 %1585, i32* %1586, align 4
  %1587 = getelementptr inbounds float, float* %1552, i64 28
  %1588 = getelementptr inbounds float, float* %1553, i64 7
  %1589 = bitcast float* %1587 to i32*
  %1590 = load i32, i32* %1589, align 4
  %1591 = bitcast float* %1588 to i32*
  store i32 %1590, i32* %1591, align 4
  %1592 = getelementptr inbounds float, float* %1552, i64 32
  %1593 = getelementptr inbounds float, float* %1553, i64 8
  %1594 = add nuw i32 %1551, 8
  %1595 = icmp eq i32 %1594, %1477
  br i1 %1595, label %1596, label %1550, !llvm.loop !637

1596:                                             ; preds = %1550, %1545
  %1597 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1318, align 8
  br label %1598

1598:                                             ; preds = %1596, %1474, %1380
  %1599 = phi %"class.blink::IntRect"* [ %1597, %1596 ], [ %1475, %1474 ], [ %1382, %1380 ]
  %1600 = getelementptr inbounds i16, i16* %1386, i64 %1311
  %1601 = getelementptr inbounds float, float* %1385, i64 %1315
  %1602 = add nuw nsw i32 %1384, 1
  %1603 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1599, i64 0, i32 1, i32 1
  %1604 = load i32, i32* %1603, align 4
  %1605 = icmp slt i32 %1602, %1604
  %1606 = add i64 %1381, 1
  br i1 %1605, label %1380, label %1364

1607:                                             ; preds = %1366, %1344
  %1608 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1608, align 4
  br label %13459

1609:                                             ; preds = %1306
  %1610 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1611 = load i32, i32* %1610, align 8
  %1612 = sdiv i32 %1611, 2
  %1613 = sext i32 %1612 to i64
  %1614 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1615 = load i32, i32* %1614, align 8
  %1616 = sdiv i32 %1615, 4
  %1617 = sext i32 %1616 to i64
  %1618 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1619 = load i8*, i8** %1618, align 8
  %1620 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1621 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1620, align 8
  %1622 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1621, i64 0, i32 0, i32 1
  %1623 = load i32, i32* %1622, align 4
  %1624 = mul nsw i32 %1623, %1611
  %1625 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1626 = load i32, i32* %1625, align 4
  %1627 = add nsw i32 %1624, %1626
  %1628 = sext i32 %1627 to i64
  %1629 = getelementptr inbounds i8, i8* %1619, i64 %1628
  %1630 = bitcast i8* %1629 to i16*
  %1631 = icmp slt i32 %1615, 0
  %1632 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1633 = load i32, i32* %1632, align 8
  %1634 = icmp sgt i32 %1633, 1
  %1635 = and i1 %1631, %1634
  br i1 %1635, label %1636, label %1646

1636:                                             ; preds = %1609
  %1637 = add nsw i32 %1633, -1
  %1638 = sext i32 %1637 to i64
  %1639 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1640 = load i32, i32* %1639, align 4
  %1641 = sext i32 %1640 to i64
  %1642 = mul nsw i64 %1613, %1638
  %1643 = mul i64 %1642, %1641
  %1644 = sub i64 0, %1643
  %1645 = getelementptr inbounds i16, i16* %1630, i64 %1644
  br label %1648

1646:                                             ; preds = %1609
  %1647 = icmp sgt i32 %1633, 0
  br i1 %1647, label %1648, label %1897

1648:                                             ; preds = %1646, %1636
  %1649 = phi i16* [ %1645, %1636 ], [ %1630, %1646 ]
  %1650 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1651 = bitcast i8** %1650 to float**
  %1652 = load float*, float** %1651, align 8
  %1653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1654 = bitcast i8** %1653 to float**
  %1655 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1656

1656:                                             ; preds = %1668, %1648
  %1657 = phi i32 [ %1633, %1648 ], [ %1669, %1668 ]
  %1658 = phi %"class.blink::IntRect"* [ %1621, %1648 ], [ %1670, %1668 ]
  %1659 = phi %"class.blink::IntRect"* [ %1621, %1648 ], [ %1671, %1668 ]
  %1660 = phi i32 [ 0, %1648 ], [ %1680, %1668 ]
  %1661 = phi float* [ %1652, %1648 ], [ %1673, %1668 ]
  %1662 = phi i16* [ %1649, %1648 ], [ %1679, %1668 ]
  %1663 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1659, i64 0, i32 1, i32 1
  %1664 = load i32, i32* %1663, align 4
  %1665 = icmp sgt i32 %1664, 0
  br i1 %1665, label %1682, label %1668

1666:                                             ; preds = %1888
  %1667 = load i32, i32* %1632, align 8
  br label %1668

1668:                                             ; preds = %1666, %1656
  %1669 = phi i32 [ %1657, %1656 ], [ %1667, %1666 ]
  %1670 = phi %"class.blink::IntRect"* [ %1658, %1656 ], [ %1889, %1666 ]
  %1671 = phi %"class.blink::IntRect"* [ %1659, %1656 ], [ %1889, %1666 ]
  %1672 = phi i16* [ %1662, %1656 ], [ %1890, %1666 ]
  %1673 = phi float* [ %1661, %1656 ], [ %1891, %1666 ]
  %1674 = phi i32 [ %1664, %1656 ], [ %1894, %1666 ]
  %1675 = load i32, i32* %1655, align 4
  %1676 = sub nsw i32 %1675, %1674
  %1677 = sext i32 %1676 to i64
  %1678 = mul nsw i64 %1677, %1613
  %1679 = getelementptr inbounds i16, i16* %1672, i64 %1678
  %1680 = add nuw nsw i32 %1660, 1
  %1681 = icmp slt i32 %1680, %1669
  br i1 %1681, label %1656, label %1897

1682:                                             ; preds = %1656, %1888
  %1683 = phi i64 [ %1896, %1888 ], [ 0, %1656 ]
  %1684 = phi %"class.blink::IntRect"* [ %1889, %1888 ], [ %1658, %1656 ]
  %1685 = phi %"class.blink::IntRect"* [ %1889, %1888 ], [ %1659, %1656 ]
  %1686 = phi i32 [ %1892, %1888 ], [ 0, %1656 ]
  %1687 = phi float* [ %1891, %1888 ], [ %1661, %1656 ]
  %1688 = phi i16* [ %1890, %1888 ], [ %1662, %1656 ]
  %1689 = mul i64 %1683, %1617
  %1690 = getelementptr float, float* %1661, i64 %1689
  %1691 = add i64 %1689, 1
  %1692 = getelementptr float, float* %1661, i64 %1691
  %1693 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1685, i64 0, i32 1, i32 0
  %1694 = load i32, i32* %1693, align 4
  %1695 = icmp eq i32 %1694, 0
  br i1 %1695, label %1888, label %1696

1696:                                             ; preds = %1682
  %1697 = load float*, float** %1654, align 8
  br label %1698

1698:                                             ; preds = %1698, %1696
  %1699 = phi i32 [ %1774, %1698 ], [ 0, %1696 ]
  %1700 = phi i16* [ %1772, %1698 ], [ %1688, %1696 ]
  %1701 = phi float* [ %1773, %1698 ], [ %1697, %1696 ]
  %1702 = load i16, i16* %1700, align 2
  %1703 = zext i16 %1702 to i32
  %1704 = lshr i32 %1703, 10
  %1705 = zext i32 %1704 to i64
  %1706 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1705
  %1707 = load i16, i16* %1706, align 2
  %1708 = zext i16 %1707 to i32
  %1709 = and i32 %1703, 1023
  %1710 = add nuw nsw i32 %1709, %1708
  %1711 = zext i32 %1710 to i64
  %1712 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1711
  %1713 = load i32, i32* %1712, align 4
  %1714 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1705
  %1715 = load i32, i32* %1714, align 4
  %1716 = add i32 %1715, %1713
  %1717 = bitcast float* %1701 to i32*
  store i32 %1716, i32* %1717, align 4
  %1718 = getelementptr inbounds i16, i16* %1700, i64 1
  %1719 = load i16, i16* %1718, align 2
  %1720 = zext i16 %1719 to i32
  %1721 = lshr i32 %1720, 10
  %1722 = zext i32 %1721 to i64
  %1723 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1722
  %1724 = load i16, i16* %1723, align 2
  %1725 = zext i16 %1724 to i32
  %1726 = and i32 %1720, 1023
  %1727 = add nuw nsw i32 %1726, %1725
  %1728 = zext i32 %1727 to i64
  %1729 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1728
  %1730 = load i32, i32* %1729, align 4
  %1731 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1722
  %1732 = load i32, i32* %1731, align 4
  %1733 = add i32 %1732, %1730
  %1734 = getelementptr inbounds float, float* %1701, i64 1
  %1735 = bitcast float* %1734 to i32*
  store i32 %1733, i32* %1735, align 4
  %1736 = getelementptr inbounds i16, i16* %1700, i64 2
  %1737 = load i16, i16* %1736, align 2
  %1738 = zext i16 %1737 to i32
  %1739 = lshr i32 %1738, 10
  %1740 = zext i32 %1739 to i64
  %1741 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1740
  %1742 = load i16, i16* %1741, align 2
  %1743 = zext i16 %1742 to i32
  %1744 = and i32 %1738, 1023
  %1745 = add nuw nsw i32 %1744, %1743
  %1746 = zext i32 %1745 to i64
  %1747 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1746
  %1748 = load i32, i32* %1747, align 4
  %1749 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1740
  %1750 = load i32, i32* %1749, align 4
  %1751 = add i32 %1750, %1748
  %1752 = getelementptr inbounds float, float* %1701, i64 2
  %1753 = bitcast float* %1752 to i32*
  store i32 %1751, i32* %1753, align 4
  %1754 = getelementptr inbounds i16, i16* %1700, i64 3
  %1755 = load i16, i16* %1754, align 2
  %1756 = zext i16 %1755 to i32
  %1757 = lshr i32 %1756, 10
  %1758 = zext i32 %1757 to i64
  %1759 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1758
  %1760 = load i16, i16* %1759, align 2
  %1761 = zext i16 %1760 to i32
  %1762 = and i32 %1756, 1023
  %1763 = add nuw nsw i32 %1762, %1761
  %1764 = zext i32 %1763 to i64
  %1765 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %1764
  %1766 = load i32, i32* %1765, align 4
  %1767 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1758
  %1768 = load i32, i32* %1767, align 4
  %1769 = add i32 %1768, %1766
  %1770 = getelementptr inbounds float, float* %1701, i64 3
  %1771 = bitcast float* %1770 to i32*
  store i32 %1769, i32* %1771, align 4
  %1772 = getelementptr inbounds i16, i16* %1700, i64 4
  %1773 = getelementptr inbounds float, float* %1701, i64 4
  %1774 = add nuw i32 %1699, 1
  %1775 = icmp eq i32 %1774, %1694
  br i1 %1775, label %1776, label %1698

1776:                                             ; preds = %1698
  %1777 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1620, align 8
  %1778 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1777, i64 0, i32 1, i32 0
  %1779 = load i32, i32* %1778, align 4
  %1780 = icmp eq i32 %1779, 0
  br i1 %1780, label %1888, label %1781

1781:                                             ; preds = %1776
  %1782 = load float*, float** %1654, align 8
  %1783 = add i32 %1779, -1
  %1784 = zext i32 %1783 to i64
  %1785 = add nuw nsw i64 %1784, 1
  %1786 = icmp ult i64 %1785, 8
  br i1 %1786, label %1828, label %1787

1787:                                             ; preds = %1781
  %1788 = add i32 %1779, -1
  %1789 = zext i32 %1788 to i64
  %1790 = getelementptr float, float* %1692, i64 %1789
  %1791 = getelementptr float, float* %1782, i64 4
  %1792 = shl nuw nsw i64 %1789, 2
  %1793 = getelementptr float, float* %1791, i64 %1792
  %1794 = icmp ult float* %1690, %1793
  %1795 = icmp ult float* %1782, %1790
  %1796 = and i1 %1794, %1795
  br i1 %1796, label %1828, label %1797

1797:                                             ; preds = %1787
  %1798 = and i64 %1785, 8589934584
  %1799 = shl nuw nsw i64 %1798, 2
  %1800 = getelementptr float, float* %1782, i64 %1799
  %1801 = trunc i64 %1798 to i32
  %1802 = getelementptr float, float* %1687, i64 %1798
  br label %1803

1803:                                             ; preds = %1803, %1797
  %1804 = phi i64 [ 0, %1797 ], [ %1824, %1803 ]
  %1805 = shl i64 %1804, 2
  %1806 = shl i64 %1804, 2
  %1807 = or i64 %1806, 16
  %1808 = getelementptr float, float* %1687, i64 %1804
  %1809 = getelementptr inbounds float, float* %1782, i64 %1805
  %1810 = bitcast float* %1809 to <16 x float>*
  %1811 = getelementptr inbounds float, float* %1782, i64 %1807
  %1812 = bitcast float* %1811 to <16 x float>*
  %1813 = load <16 x float>, <16 x float>* %1810, align 4
  %1814 = load <16 x float>, <16 x float>* %1812, align 4
  %1815 = shufflevector <16 x float> %1813, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1816 = shufflevector <16 x float> %1814, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %1817 = shufflevector <16 x float> %1813, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1818 = shufflevector <16 x float> %1814, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %1819 = fmul <4 x float> %1817, %1815
  %1820 = fmul <4 x float> %1818, %1816
  %1821 = bitcast float* %1808 to <4 x float>*
  store <4 x float> %1819, <4 x float>* %1821, align 4, !alias.scope !638, !noalias !641
  %1822 = getelementptr float, float* %1808, i64 4
  %1823 = bitcast float* %1822 to <4 x float>*
  store <4 x float> %1820, <4 x float>* %1823, align 4, !alias.scope !638, !noalias !641
  %1824 = add i64 %1804, 8
  %1825 = icmp eq i64 %1824, %1798
  br i1 %1825, label %1826, label %1803, !llvm.loop !643

1826:                                             ; preds = %1803
  %1827 = icmp eq i64 %1785, %1798
  br i1 %1827, label %1886, label %1828

1828:                                             ; preds = %1826, %1787, %1781
  %1829 = phi float* [ %1782, %1787 ], [ %1782, %1781 ], [ %1800, %1826 ]
  %1830 = phi i32 [ 0, %1787 ], [ 0, %1781 ], [ %1801, %1826 ]
  %1831 = phi float* [ %1687, %1787 ], [ %1687, %1781 ], [ %1802, %1826 ]
  %1832 = sub i32 %1779, %1830
  %1833 = xor i32 %1830, -1
  %1834 = add i32 %1779, %1833
  %1835 = and i32 %1832, 3
  %1836 = icmp eq i32 %1835, 0
  br i1 %1836, label %1851, label %1837

1837:                                             ; preds = %1828, %1837
  %1838 = phi float* [ %1846, %1837 ], [ %1829, %1828 ]
  %1839 = phi i32 [ %1848, %1837 ], [ %1830, %1828 ]
  %1840 = phi float* [ %1847, %1837 ], [ %1831, %1828 ]
  %1841 = phi i32 [ %1849, %1837 ], [ %1835, %1828 ]
  %1842 = getelementptr inbounds float, float* %1838, i64 3
  %1843 = load float, float* %1842, align 4
  %1844 = load float, float* %1838, align 4
  %1845 = fmul float %1843, %1844
  store float %1845, float* %1840, align 4
  %1846 = getelementptr inbounds float, float* %1838, i64 4
  %1847 = getelementptr inbounds float, float* %1840, i64 1
  %1848 = add nuw i32 %1839, 1
  %1849 = add i32 %1841, -1
  %1850 = icmp eq i32 %1849, 0
  br i1 %1850, label %1851, label %1837, !llvm.loop !644

1851:                                             ; preds = %1837, %1828
  %1852 = phi float* [ %1829, %1828 ], [ %1846, %1837 ]
  %1853 = phi i32 [ %1830, %1828 ], [ %1848, %1837 ]
  %1854 = phi float* [ %1831, %1828 ], [ %1847, %1837 ]
  %1855 = icmp ult i32 %1834, 3
  br i1 %1855, label %1886, label %1856

1856:                                             ; preds = %1851, %1856
  %1857 = phi float* [ %1882, %1856 ], [ %1852, %1851 ]
  %1858 = phi i32 [ %1884, %1856 ], [ %1853, %1851 ]
  %1859 = phi float* [ %1883, %1856 ], [ %1854, %1851 ]
  %1860 = getelementptr inbounds float, float* %1857, i64 3
  %1861 = load float, float* %1860, align 4
  %1862 = load float, float* %1857, align 4
  %1863 = fmul float %1861, %1862
  store float %1863, float* %1859, align 4
  %1864 = getelementptr inbounds float, float* %1857, i64 4
  %1865 = getelementptr inbounds float, float* %1859, i64 1
  %1866 = getelementptr inbounds float, float* %1857, i64 7
  %1867 = load float, float* %1866, align 4
  %1868 = load float, float* %1864, align 4
  %1869 = fmul float %1867, %1868
  store float %1869, float* %1865, align 4
  %1870 = getelementptr inbounds float, float* %1857, i64 8
  %1871 = getelementptr inbounds float, float* %1859, i64 2
  %1872 = getelementptr inbounds float, float* %1857, i64 11
  %1873 = load float, float* %1872, align 4
  %1874 = load float, float* %1870, align 4
  %1875 = fmul float %1873, %1874
  store float %1875, float* %1871, align 4
  %1876 = getelementptr inbounds float, float* %1857, i64 12
  %1877 = getelementptr inbounds float, float* %1859, i64 3
  %1878 = getelementptr inbounds float, float* %1857, i64 15
  %1879 = load float, float* %1878, align 4
  %1880 = load float, float* %1876, align 4
  %1881 = fmul float %1879, %1880
  store float %1881, float* %1877, align 4
  %1882 = getelementptr inbounds float, float* %1857, i64 16
  %1883 = getelementptr inbounds float, float* %1859, i64 4
  %1884 = add nuw i32 %1858, 4
  %1885 = icmp eq i32 %1884, %1779
  br i1 %1885, label %1886, label %1856, !llvm.loop !645

1886:                                             ; preds = %1851, %1856, %1826
  %1887 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1620, align 8
  br label %1888

1888:                                             ; preds = %1886, %1776, %1682
  %1889 = phi %"class.blink::IntRect"* [ %1887, %1886 ], [ %1777, %1776 ], [ %1684, %1682 ]
  %1890 = getelementptr inbounds i16, i16* %1688, i64 %1613
  %1891 = getelementptr inbounds float, float* %1687, i64 %1617
  %1892 = add nuw nsw i32 %1686, 1
  %1893 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1889, i64 0, i32 1, i32 1
  %1894 = load i32, i32* %1893, align 4
  %1895 = icmp slt i32 %1892, %1894
  %1896 = add i64 %1683, 1
  br i1 %1895, label %1682, label %1666

1897:                                             ; preds = %1668, %1646
  %1898 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %1898, align 4
  br label %13459

1899:                                             ; preds = %1306
  %1900 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %1901 = load i32, i32* %1900, align 8
  %1902 = sdiv i32 %1901, 2
  %1903 = sext i32 %1902 to i64
  %1904 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %1905 = load i32, i32* %1904, align 8
  %1906 = sdiv i32 %1905, 4
  %1907 = sext i32 %1906 to i64
  %1908 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %1909 = load i8*, i8** %1908, align 8
  %1910 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %1911 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1910, align 8
  %1912 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1911, i64 0, i32 0, i32 1
  %1913 = load i32, i32* %1912, align 4
  %1914 = mul nsw i32 %1913, %1901
  %1915 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %1916 = load i32, i32* %1915, align 4
  %1917 = add nsw i32 %1914, %1916
  %1918 = sext i32 %1917 to i64
  %1919 = getelementptr inbounds i8, i8* %1909, i64 %1918
  %1920 = bitcast i8* %1919 to i16*
  %1921 = icmp slt i32 %1905, 0
  %1922 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %1923 = load i32, i32* %1922, align 8
  %1924 = icmp sgt i32 %1923, 1
  %1925 = and i1 %1921, %1924
  br i1 %1925, label %1926, label %1936

1926:                                             ; preds = %1899
  %1927 = add nsw i32 %1923, -1
  %1928 = sext i32 %1927 to i64
  %1929 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %1930 = load i32, i32* %1929, align 4
  %1931 = sext i32 %1930 to i64
  %1932 = mul nsw i64 %1903, %1928
  %1933 = mul i64 %1932, %1931
  %1934 = sub i64 0, %1933
  %1935 = getelementptr inbounds i16, i16* %1920, i64 %1934
  br label %1938

1936:                                             ; preds = %1899
  %1937 = icmp sgt i32 %1923, 0
  br i1 %1937, label %1938, label %2208

1938:                                             ; preds = %1936, %1926
  %1939 = phi i16* [ %1935, %1926 ], [ %1920, %1936 ]
  %1940 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %1941 = bitcast i8** %1940 to float**
  %1942 = load float*, float** %1941, align 8
  %1943 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %1944 = bitcast i8** %1943 to float**
  %1945 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %1946

1946:                                             ; preds = %1958, %1938
  %1947 = phi i32 [ %1923, %1938 ], [ %1959, %1958 ]
  %1948 = phi %"class.blink::IntRect"* [ %1911, %1938 ], [ %1960, %1958 ]
  %1949 = phi %"class.blink::IntRect"* [ %1911, %1938 ], [ %1961, %1958 ]
  %1950 = phi i32 [ 0, %1938 ], [ %1970, %1958 ]
  %1951 = phi float* [ %1942, %1938 ], [ %1963, %1958 ]
  %1952 = phi i16* [ %1939, %1938 ], [ %1969, %1958 ]
  %1953 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1949, i64 0, i32 1, i32 1
  %1954 = load i32, i32* %1953, align 4
  %1955 = icmp sgt i32 %1954, 0
  br i1 %1955, label %1972, label %1958

1956:                                             ; preds = %2199
  %1957 = load i32, i32* %1922, align 8
  br label %1958

1958:                                             ; preds = %1956, %1946
  %1959 = phi i32 [ %1947, %1946 ], [ %1957, %1956 ]
  %1960 = phi %"class.blink::IntRect"* [ %1948, %1946 ], [ %2200, %1956 ]
  %1961 = phi %"class.blink::IntRect"* [ %1949, %1946 ], [ %2200, %1956 ]
  %1962 = phi i16* [ %1952, %1946 ], [ %2201, %1956 ]
  %1963 = phi float* [ %1951, %1946 ], [ %2202, %1956 ]
  %1964 = phi i32 [ %1954, %1946 ], [ %2205, %1956 ]
  %1965 = load i32, i32* %1945, align 4
  %1966 = sub nsw i32 %1965, %1964
  %1967 = sext i32 %1966 to i64
  %1968 = mul nsw i64 %1967, %1903
  %1969 = getelementptr inbounds i16, i16* %1962, i64 %1968
  %1970 = add nuw nsw i32 %1950, 1
  %1971 = icmp slt i32 %1970, %1959
  br i1 %1971, label %1946, label %2208

1972:                                             ; preds = %1946, %2199
  %1973 = phi i64 [ %2207, %2199 ], [ 0, %1946 ]
  %1974 = phi %"class.blink::IntRect"* [ %2200, %2199 ], [ %1948, %1946 ]
  %1975 = phi %"class.blink::IntRect"* [ %2200, %2199 ], [ %1949, %1946 ]
  %1976 = phi i32 [ %2203, %2199 ], [ 0, %1946 ]
  %1977 = phi float* [ %2202, %2199 ], [ %1951, %1946 ]
  %1978 = phi i16* [ %2201, %2199 ], [ %1952, %1946 ]
  %1979 = mul i64 %1973, %1907
  %1980 = getelementptr float, float* %1951, i64 %1979
  %1981 = add i64 %1979, 1
  %1982 = getelementptr float, float* %1951, i64 %1981
  %1983 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1975, i64 0, i32 1, i32 0
  %1984 = load i32, i32* %1983, align 4
  %1985 = icmp eq i32 %1984, 0
  br i1 %1985, label %2199, label %1986

1986:                                             ; preds = %1972
  %1987 = load float*, float** %1944, align 8
  br label %1988

1988:                                             ; preds = %1988, %1986
  %1989 = phi i32 [ %2064, %1988 ], [ 0, %1986 ]
  %1990 = phi i16* [ %2062, %1988 ], [ %1978, %1986 ]
  %1991 = phi float* [ %2063, %1988 ], [ %1987, %1986 ]
  %1992 = load i16, i16* %1990, align 2
  %1993 = zext i16 %1992 to i32
  %1994 = lshr i32 %1993, 10
  %1995 = zext i32 %1994 to i64
  %1996 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %1995
  %1997 = load i16, i16* %1996, align 2
  %1998 = zext i16 %1997 to i32
  %1999 = and i32 %1993, 1023
  %2000 = add nuw nsw i32 %1999, %1998
  %2001 = zext i32 %2000 to i64
  %2002 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2001
  %2003 = load i32, i32* %2002, align 4
  %2004 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %1995
  %2005 = load i32, i32* %2004, align 4
  %2006 = add i32 %2005, %2003
  %2007 = bitcast float* %1991 to i32*
  store i32 %2006, i32* %2007, align 4
  %2008 = getelementptr inbounds i16, i16* %1990, i64 1
  %2009 = load i16, i16* %2008, align 2
  %2010 = zext i16 %2009 to i32
  %2011 = lshr i32 %2010, 10
  %2012 = zext i32 %2011 to i64
  %2013 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2012
  %2014 = load i16, i16* %2013, align 2
  %2015 = zext i16 %2014 to i32
  %2016 = and i32 %2010, 1023
  %2017 = add nuw nsw i32 %2016, %2015
  %2018 = zext i32 %2017 to i64
  %2019 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2018
  %2020 = load i32, i32* %2019, align 4
  %2021 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2012
  %2022 = load i32, i32* %2021, align 4
  %2023 = add i32 %2022, %2020
  %2024 = getelementptr inbounds float, float* %1991, i64 1
  %2025 = bitcast float* %2024 to i32*
  store i32 %2023, i32* %2025, align 4
  %2026 = getelementptr inbounds i16, i16* %1990, i64 2
  %2027 = load i16, i16* %2026, align 2
  %2028 = zext i16 %2027 to i32
  %2029 = lshr i32 %2028, 10
  %2030 = zext i32 %2029 to i64
  %2031 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2030
  %2032 = load i16, i16* %2031, align 2
  %2033 = zext i16 %2032 to i32
  %2034 = and i32 %2028, 1023
  %2035 = add nuw nsw i32 %2034, %2033
  %2036 = zext i32 %2035 to i64
  %2037 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2036
  %2038 = load i32, i32* %2037, align 4
  %2039 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2030
  %2040 = load i32, i32* %2039, align 4
  %2041 = add i32 %2040, %2038
  %2042 = getelementptr inbounds float, float* %1991, i64 2
  %2043 = bitcast float* %2042 to i32*
  store i32 %2041, i32* %2043, align 4
  %2044 = getelementptr inbounds i16, i16* %1990, i64 3
  %2045 = load i16, i16* %2044, align 2
  %2046 = zext i16 %2045 to i32
  %2047 = lshr i32 %2046, 10
  %2048 = zext i32 %2047 to i64
  %2049 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2048
  %2050 = load i16, i16* %2049, align 2
  %2051 = zext i16 %2050 to i32
  %2052 = and i32 %2046, 1023
  %2053 = add nuw nsw i32 %2052, %2051
  %2054 = zext i32 %2053 to i64
  %2055 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2054
  %2056 = load i32, i32* %2055, align 4
  %2057 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2048
  %2058 = load i32, i32* %2057, align 4
  %2059 = add i32 %2058, %2056
  %2060 = getelementptr inbounds float, float* %1991, i64 3
  %2061 = bitcast float* %2060 to i32*
  store i32 %2059, i32* %2061, align 4
  %2062 = getelementptr inbounds i16, i16* %1990, i64 4
  %2063 = getelementptr inbounds float, float* %1991, i64 4
  %2064 = add nuw i32 %1989, 1
  %2065 = icmp eq i32 %2064, %1984
  br i1 %2065, label %2066, label %1988

2066:                                             ; preds = %1988
  %2067 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1910, align 8
  %2068 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2067, i64 0, i32 1, i32 0
  %2069 = load i32, i32* %2068, align 4
  %2070 = icmp eq i32 %2069, 0
  br i1 %2070, label %2199, label %2071

2071:                                             ; preds = %2066
  %2072 = load float*, float** %1944, align 8
  %2073 = add i32 %2069, -1
  %2074 = zext i32 %2073 to i64
  %2075 = add nuw nsw i64 %2074, 1
  %2076 = icmp ult i64 %2075, 4
  br i1 %2076, label %2149, label %2077

2077:                                             ; preds = %2071
  %2078 = add i32 %2069, -1
  %2079 = zext i32 %2078 to i64
  %2080 = getelementptr float, float* %1982, i64 %2079
  %2081 = getelementptr float, float* %2072, i64 4
  %2082 = shl nuw nsw i64 %2079, 2
  %2083 = getelementptr float, float* %2081, i64 %2082
  %2084 = icmp ult float* %1980, %2083
  %2085 = icmp ult float* %2072, %2080
  %2086 = and i1 %2084, %2085
  br i1 %2086, label %2149, label %2087

2087:                                             ; preds = %2077
  %2088 = and i64 %2075, 8589934588
  %2089 = trunc i64 %2088 to i32
  %2090 = shl nuw nsw i64 %2088, 2
  %2091 = getelementptr float, float* %2072, i64 %2090
  %2092 = getelementptr float, float* %1977, i64 %2088
  %2093 = add nsw i64 %2088, -4
  %2094 = lshr exact i64 %2093, 2
  %2095 = add nuw nsw i64 %2094, 1
  %2096 = and i64 %2095, 1
  %2097 = icmp eq i64 %2093, 0
  br i1 %2097, label %2131, label %2098

2098:                                             ; preds = %2087
  %2099 = sub nuw nsw i64 %2095, %2096
  br label %2100

2100:                                             ; preds = %2100, %2098
  %2101 = phi i64 [ 0, %2098 ], [ %2128, %2100 ]
  %2102 = phi i64 [ %2099, %2098 ], [ %2129, %2100 ]
  %2103 = shl i64 %2101, 2
  %2104 = getelementptr float, float* %1977, i64 %2101
  %2105 = getelementptr inbounds float, float* %2072, i64 %2103
  %2106 = bitcast float* %2105 to <16 x float>*
  %2107 = load <16 x float>, <16 x float>* %2106, align 4
  %2108 = shufflevector <16 x float> %2107, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2109 = shufflevector <16 x float> %2107, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2110 = fcmp une <4 x float> %2109, zeroinitializer
  %2111 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2109
  %2112 = select <4 x i1> %2110, <4 x float> %2111, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2113 = fmul <4 x float> %2108, %2112
  %2114 = bitcast float* %2104 to <4 x float>*
  store <4 x float> %2113, <4 x float>* %2114, align 4, !alias.scope !646, !noalias !649
  %2115 = or i64 %2101, 4
  %2116 = shl i64 %2115, 2
  %2117 = getelementptr float, float* %1977, i64 %2115
  %2118 = getelementptr inbounds float, float* %2072, i64 %2116
  %2119 = bitcast float* %2118 to <16 x float>*
  %2120 = load <16 x float>, <16 x float>* %2119, align 4
  %2121 = shufflevector <16 x float> %2120, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2122 = shufflevector <16 x float> %2120, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2123 = fcmp une <4 x float> %2122, zeroinitializer
  %2124 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2122
  %2125 = select <4 x i1> %2123, <4 x float> %2124, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2126 = fmul <4 x float> %2121, %2125
  %2127 = bitcast float* %2117 to <4 x float>*
  store <4 x float> %2126, <4 x float>* %2127, align 4, !alias.scope !646, !noalias !649
  %2128 = add i64 %2101, 8
  %2129 = add i64 %2102, -2
  %2130 = icmp eq i64 %2129, 0
  br i1 %2130, label %2131, label %2100, !llvm.loop !651

2131:                                             ; preds = %2100, %2087
  %2132 = phi i64 [ 0, %2087 ], [ %2128, %2100 ]
  %2133 = icmp eq i64 %2096, 0
  br i1 %2133, label %2147, label %2134

2134:                                             ; preds = %2131
  %2135 = shl i64 %2132, 2
  %2136 = getelementptr float, float* %1977, i64 %2132
  %2137 = getelementptr inbounds float, float* %2072, i64 %2135
  %2138 = bitcast float* %2137 to <16 x float>*
  %2139 = load <16 x float>, <16 x float>* %2138, align 4
  %2140 = shufflevector <16 x float> %2139, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2141 = shufflevector <16 x float> %2139, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %2142 = fcmp une <4 x float> %2141, zeroinitializer
  %2143 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %2141
  %2144 = select <4 x i1> %2142, <4 x float> %2143, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %2145 = fmul <4 x float> %2140, %2144
  %2146 = bitcast float* %2136 to <4 x float>*
  store <4 x float> %2145, <4 x float>* %2146, align 4, !alias.scope !646, !noalias !649
  br label %2147

2147:                                             ; preds = %2131, %2134
  %2148 = icmp eq i64 %2075, %2088
  br i1 %2148, label %2197, label %2149

2149:                                             ; preds = %2147, %2077, %2071
  %2150 = phi i32 [ 0, %2077 ], [ 0, %2071 ], [ %2089, %2147 ]
  %2151 = phi float* [ %2072, %2077 ], [ %2072, %2071 ], [ %2091, %2147 ]
  %2152 = phi float* [ %1977, %2077 ], [ %1977, %2071 ], [ %2092, %2147 ]
  %2153 = sub i32 %2069, %2150
  %2154 = and i32 %2153, 1
  %2155 = icmp eq i32 %2154, 0
  br i1 %2155, label %2167, label %2156

2156:                                             ; preds = %2149
  %2157 = getelementptr inbounds float, float* %2151, i64 3
  %2158 = load float, float* %2157, align 4
  %2159 = fcmp une float %2158, 0.000000e+00
  %2160 = fdiv float 1.000000e+00, %2158
  %2161 = select i1 %2159, float %2160, float 1.000000e+00
  %2162 = load float, float* %2151, align 4
  %2163 = fmul float %2162, %2161
  store float %2163, float* %2152, align 4
  %2164 = getelementptr inbounds float, float* %2151, i64 4
  %2165 = getelementptr inbounds float, float* %2152, i64 1
  %2166 = add nuw i32 %2150, 1
  br label %2167

2167:                                             ; preds = %2156, %2149
  %2168 = phi i32 [ %2166, %2156 ], [ %2150, %2149 ]
  %2169 = phi float* [ %2164, %2156 ], [ %2151, %2149 ]
  %2170 = phi float* [ %2165, %2156 ], [ %2152, %2149 ]
  %2171 = add i32 %2150, 1
  %2172 = icmp eq i32 %2069, %2171
  br i1 %2172, label %2197, label %2173

2173:                                             ; preds = %2167, %2173
  %2174 = phi i32 [ %2195, %2173 ], [ %2168, %2167 ]
  %2175 = phi float* [ %2193, %2173 ], [ %2169, %2167 ]
  %2176 = phi float* [ %2194, %2173 ], [ %2170, %2167 ]
  %2177 = getelementptr inbounds float, float* %2175, i64 3
  %2178 = load float, float* %2177, align 4
  %2179 = fcmp une float %2178, 0.000000e+00
  %2180 = fdiv float 1.000000e+00, %2178
  %2181 = select i1 %2179, float %2180, float 1.000000e+00
  %2182 = load float, float* %2175, align 4
  %2183 = fmul float %2182, %2181
  store float %2183, float* %2176, align 4
  %2184 = getelementptr inbounds float, float* %2175, i64 4
  %2185 = getelementptr inbounds float, float* %2176, i64 1
  %2186 = getelementptr inbounds float, float* %2175, i64 7
  %2187 = load float, float* %2186, align 4
  %2188 = fcmp une float %2187, 0.000000e+00
  %2189 = fdiv float 1.000000e+00, %2187
  %2190 = select i1 %2188, float %2189, float 1.000000e+00
  %2191 = load float, float* %2184, align 4
  %2192 = fmul float %2191, %2190
  store float %2192, float* %2185, align 4
  %2193 = getelementptr inbounds float, float* %2175, i64 8
  %2194 = getelementptr inbounds float, float* %2176, i64 2
  %2195 = add nuw i32 %2174, 2
  %2196 = icmp eq i32 %2195, %2069
  br i1 %2196, label %2197, label %2173, !llvm.loop !652

2197:                                             ; preds = %2167, %2173, %2147
  %2198 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %1910, align 8
  br label %2199

2199:                                             ; preds = %2197, %2066, %1972
  %2200 = phi %"class.blink::IntRect"* [ %2198, %2197 ], [ %2067, %2066 ], [ %1974, %1972 ]
  %2201 = getelementptr inbounds i16, i16* %1978, i64 %1903
  %2202 = getelementptr inbounds float, float* %1977, i64 %1907
  %2203 = add nuw nsw i32 %1976, 1
  %2204 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2200, i64 0, i32 1, i32 1
  %2205 = load i32, i32* %2204, align 4
  %2206 = icmp slt i32 %2203, %2205
  %2207 = add i64 %1973, 1
  br i1 %2206, label %1972, label %1956

2208:                                             ; preds = %1958, %1936
  %2209 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2209, align 4
  br label %13459

2210:                                             ; preds = %3
  %2211 = icmp eq i32 %2, 0
  br i1 %2211, label %2212, label %13459

2212:                                             ; preds = %2210
  %2213 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2214 = load i32, i32* %2213, align 8
  %2215 = sdiv i32 %2214, 2
  %2216 = sext i32 %2215 to i64
  %2217 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2218 = load i32, i32* %2217, align 8
  %2219 = sext i32 %2218 to i64
  %2220 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2221 = load i8*, i8** %2220, align 8
  %2222 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2223 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2222, align 8
  %2224 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2223, i64 0, i32 0, i32 1
  %2225 = load i32, i32* %2224, align 4
  %2226 = mul nsw i32 %2225, %2214
  %2227 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2228 = load i32, i32* %2227, align 4
  %2229 = add nsw i32 %2226, %2228
  %2230 = sext i32 %2229 to i64
  %2231 = getelementptr inbounds i8, i8* %2221, i64 %2230
  %2232 = bitcast i8* %2231 to i16*
  %2233 = icmp slt i32 %2218, 0
  %2234 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2235 = load i32, i32* %2234, align 8
  %2236 = icmp sgt i32 %2235, 1
  %2237 = and i1 %2233, %2236
  br i1 %2237, label %2238, label %2248

2238:                                             ; preds = %2212
  %2239 = add nsw i32 %2235, -1
  %2240 = sext i32 %2239 to i64
  %2241 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2242 = load i32, i32* %2241, align 4
  %2243 = sext i32 %2242 to i64
  %2244 = mul nsw i64 %2216, %2240
  %2245 = mul i64 %2244, %2243
  %2246 = sub i64 0, %2245
  %2247 = getelementptr inbounds i16, i16* %2232, i64 %2246
  br label %2250

2248:                                             ; preds = %2212
  %2249 = icmp sgt i32 %2235, 0
  br i1 %2249, label %2250, label %2403

2250:                                             ; preds = %2248, %2238
  %2251 = phi i16* [ %2247, %2238 ], [ %2232, %2248 ]
  %2252 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2253 = load i8*, i8** %2252, align 8
  %2254 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2255 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2256

2256:                                             ; preds = %2267, %2250
  %2257 = phi i32 [ %2235, %2250 ], [ %2268, %2267 ]
  %2258 = phi %"class.blink::IntRect"* [ %2223, %2250 ], [ %2269, %2267 ]
  %2259 = phi i32 [ 0, %2250 ], [ %2278, %2267 ]
  %2260 = phi i8* [ %2253, %2250 ], [ %2271, %2267 ]
  %2261 = phi i16* [ %2251, %2250 ], [ %2277, %2267 ]
  %2262 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2258, i64 0, i32 1, i32 1
  %2263 = load i32, i32* %2262, align 4
  %2264 = icmp sgt i32 %2263, 0
  br i1 %2264, label %2280, label %2267

2265:                                             ; preds = %2394
  %2266 = load i32, i32* %2234, align 8
  br label %2267

2267:                                             ; preds = %2265, %2256
  %2268 = phi i32 [ %2257, %2256 ], [ %2266, %2265 ]
  %2269 = phi %"class.blink::IntRect"* [ %2258, %2256 ], [ %2395, %2265 ]
  %2270 = phi i16* [ %2261, %2256 ], [ %2396, %2265 ]
  %2271 = phi i8* [ %2260, %2256 ], [ %2397, %2265 ]
  %2272 = phi i32 [ %2263, %2256 ], [ %2400, %2265 ]
  %2273 = load i32, i32* %2255, align 4
  %2274 = sub nsw i32 %2273, %2272
  %2275 = sext i32 %2274 to i64
  %2276 = mul nsw i64 %2275, %2216
  %2277 = getelementptr inbounds i16, i16* %2270, i64 %2276
  %2278 = add nuw nsw i32 %2259, 1
  %2279 = icmp slt i32 %2278, %2268
  br i1 %2279, label %2256, label %2403

2280:                                             ; preds = %2256, %2394
  %2281 = phi i64 [ %2402, %2394 ], [ 0, %2256 ]
  %2282 = phi %"class.blink::IntRect"* [ %2395, %2394 ], [ %2258, %2256 ]
  %2283 = phi i32 [ %2398, %2394 ], [ 0, %2256 ]
  %2284 = phi i8* [ %2397, %2394 ], [ %2260, %2256 ]
  %2285 = phi i16* [ %2396, %2394 ], [ %2261, %2256 ]
  %2286 = mul i64 %2281, %2219
  %2287 = getelementptr i8, i8* %2260, i64 %2286
  %2288 = add i64 %2286, 1
  %2289 = getelementptr i8, i8* %2260, i64 %2288
  %2290 = load i8*, i8** %2254, align 8
  %2291 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2282, i64 0, i32 1, i32 0
  %2292 = load i32, i32* %2291, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %2285, i8* %2290, i32 %2292) #12
  %2293 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2222, align 8
  %2294 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2293, i64 0, i32 1, i32 0
  %2295 = load i32, i32* %2294, align 4
  %2296 = icmp eq i32 %2295, 0
  br i1 %2296, label %2394, label %2297

2297:                                             ; preds = %2280
  %2298 = load i8*, i8** %2254, align 8
  %2299 = add i32 %2295, -1
  %2300 = zext i32 %2299 to i64
  %2301 = add nuw nsw i64 %2300, 1
  %2302 = icmp ult i64 %2301, 17
  br i1 %2302, label %2335, label %2303

2303:                                             ; preds = %2297
  %2304 = add i32 %2295, -1
  %2305 = zext i32 %2304 to i64
  %2306 = getelementptr i8, i8* %2289, i64 %2305
  %2307 = getelementptr i8, i8* %2298, i64 3
  %2308 = getelementptr i8, i8* %2298, i64 4
  %2309 = shl nuw nsw i64 %2305, 2
  %2310 = getelementptr i8, i8* %2308, i64 %2309
  %2311 = icmp ult i8* %2287, %2310
  %2312 = icmp ult i8* %2307, %2306
  %2313 = and i1 %2311, %2312
  br i1 %2313, label %2335, label %2314

2314:                                             ; preds = %2303
  %2315 = and i64 %2301, 15
  %2316 = icmp eq i64 %2315, 0
  %2317 = select i1 %2316, i64 16, i64 %2315
  %2318 = sub nsw i64 %2301, %2317
  %2319 = trunc i64 %2318 to i32
  %2320 = shl nsw i64 %2318, 2
  %2321 = getelementptr i8, i8* %2298, i64 %2320
  %2322 = getelementptr i8, i8* %2284, i64 %2318
  %2323 = getelementptr i8, i8* %2298, i64 3
  br label %2324

2324:                                             ; preds = %2324, %2314
  %2325 = phi i64 [ 0, %2314 ], [ %2333, %2324 ]
  %2326 = shl i64 %2325, 2
  %2327 = getelementptr i8, i8* %2284, i64 %2325
  %2328 = getelementptr inbounds i8, i8* %2323, i64 %2326
  %2329 = bitcast i8* %2328 to <64 x i8>*
  %2330 = load <64 x i8>, <64 x i8>* %2329, align 1
  %2331 = shufflevector <64 x i8> %2330, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %2332 = bitcast i8* %2327 to <16 x i8>*
  store <16 x i8> %2331, <16 x i8>* %2332, align 1, !alias.scope !653, !noalias !656
  %2333 = add i64 %2325, 16
  %2334 = icmp eq i64 %2333, %2318
  br i1 %2334, label %2335, label %2324, !llvm.loop !658

2335:                                             ; preds = %2324, %2303, %2297
  %2336 = phi i32 [ 0, %2303 ], [ 0, %2297 ], [ %2319, %2324 ]
  %2337 = phi i8* [ %2298, %2303 ], [ %2298, %2297 ], [ %2321, %2324 ]
  %2338 = phi i8* [ %2284, %2303 ], [ %2284, %2297 ], [ %2322, %2324 ]
  %2339 = sub i32 %2295, %2336
  %2340 = xor i32 %2336, -1
  %2341 = add i32 %2295, %2340
  %2342 = and i32 %2339, 7
  %2343 = icmp eq i32 %2342, 0
  br i1 %2343, label %2356, label %2344

2344:                                             ; preds = %2335, %2344
  %2345 = phi i32 [ %2353, %2344 ], [ %2336, %2335 ]
  %2346 = phi i8* [ %2351, %2344 ], [ %2337, %2335 ]
  %2347 = phi i8* [ %2352, %2344 ], [ %2338, %2335 ]
  %2348 = phi i32 [ %2354, %2344 ], [ %2342, %2335 ]
  %2349 = getelementptr inbounds i8, i8* %2346, i64 3
  %2350 = load i8, i8* %2349, align 1
  store i8 %2350, i8* %2347, align 1
  %2351 = getelementptr inbounds i8, i8* %2346, i64 4
  %2352 = getelementptr inbounds i8, i8* %2347, i64 1
  %2353 = add nuw i32 %2345, 1
  %2354 = add i32 %2348, -1
  %2355 = icmp eq i32 %2354, 0
  br i1 %2355, label %2356, label %2344, !llvm.loop !659

2356:                                             ; preds = %2344, %2335
  %2357 = phi i32 [ %2336, %2335 ], [ %2353, %2344 ]
  %2358 = phi i8* [ %2337, %2335 ], [ %2351, %2344 ]
  %2359 = phi i8* [ %2338, %2335 ], [ %2352, %2344 ]
  %2360 = icmp ult i32 %2341, 7
  br i1 %2360, label %2392, label %2361

2361:                                             ; preds = %2356, %2361
  %2362 = phi i32 [ %2390, %2361 ], [ %2357, %2356 ]
  %2363 = phi i8* [ %2388, %2361 ], [ %2358, %2356 ]
  %2364 = phi i8* [ %2389, %2361 ], [ %2359, %2356 ]
  %2365 = getelementptr inbounds i8, i8* %2363, i64 3
  %2366 = load i8, i8* %2365, align 1
  store i8 %2366, i8* %2364, align 1
  %2367 = getelementptr inbounds i8, i8* %2364, i64 1
  %2368 = getelementptr inbounds i8, i8* %2363, i64 7
  %2369 = load i8, i8* %2368, align 1
  store i8 %2369, i8* %2367, align 1
  %2370 = getelementptr inbounds i8, i8* %2364, i64 2
  %2371 = getelementptr inbounds i8, i8* %2363, i64 11
  %2372 = load i8, i8* %2371, align 1
  store i8 %2372, i8* %2370, align 1
  %2373 = getelementptr inbounds i8, i8* %2364, i64 3
  %2374 = getelementptr inbounds i8, i8* %2363, i64 15
  %2375 = load i8, i8* %2374, align 1
  store i8 %2375, i8* %2373, align 1
  %2376 = getelementptr inbounds i8, i8* %2364, i64 4
  %2377 = getelementptr inbounds i8, i8* %2363, i64 19
  %2378 = load i8, i8* %2377, align 1
  store i8 %2378, i8* %2376, align 1
  %2379 = getelementptr inbounds i8, i8* %2364, i64 5
  %2380 = getelementptr inbounds i8, i8* %2363, i64 23
  %2381 = load i8, i8* %2380, align 1
  store i8 %2381, i8* %2379, align 1
  %2382 = getelementptr inbounds i8, i8* %2364, i64 6
  %2383 = getelementptr inbounds i8, i8* %2363, i64 27
  %2384 = load i8, i8* %2383, align 1
  store i8 %2384, i8* %2382, align 1
  %2385 = getelementptr inbounds i8, i8* %2364, i64 7
  %2386 = getelementptr inbounds i8, i8* %2363, i64 31
  %2387 = load i8, i8* %2386, align 1
  store i8 %2387, i8* %2385, align 1
  %2388 = getelementptr inbounds i8, i8* %2363, i64 32
  %2389 = getelementptr inbounds i8, i8* %2364, i64 8
  %2390 = add nuw i32 %2362, 8
  %2391 = icmp eq i32 %2390, %2295
  br i1 %2391, label %2392, label %2361, !llvm.loop !660

2392:                                             ; preds = %2361, %2356
  %2393 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2222, align 8
  br label %2394

2394:                                             ; preds = %2392, %2280
  %2395 = phi %"class.blink::IntRect"* [ %2393, %2392 ], [ %2293, %2280 ]
  %2396 = getelementptr inbounds i16, i16* %2285, i64 %2216
  %2397 = getelementptr inbounds i8, i8* %2284, i64 %2219
  %2398 = add nuw nsw i32 %2283, 1
  %2399 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2395, i64 0, i32 1, i32 1
  %2400 = load i32, i32* %2399, align 4
  %2401 = icmp slt i32 %2398, %2400
  %2402 = add i64 %2281, 1
  br i1 %2401, label %2280, label %2265

2403:                                             ; preds = %2267, %2248
  %2404 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2404, align 4
  br label %13459

2405:                                             ; preds = %3
  %2406 = icmp eq i32 %2, 0
  br i1 %2406, label %2407, label %13459

2407:                                             ; preds = %2405
  %2408 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2409 = load i32, i32* %2408, align 8
  %2410 = sdiv i32 %2409, 2
  %2411 = sext i32 %2410 to i64
  %2412 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2413 = load i32, i32* %2412, align 8
  %2414 = sdiv i32 %2413, 2
  %2415 = sext i32 %2414 to i64
  %2416 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2417 = load i8*, i8** %2416, align 8
  %2418 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2419 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2418, align 8
  %2420 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2419, i64 0, i32 0, i32 1
  %2421 = load i32, i32* %2420, align 4
  %2422 = mul nsw i32 %2421, %2409
  %2423 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2424 = load i32, i32* %2423, align 4
  %2425 = add nsw i32 %2422, %2424
  %2426 = sext i32 %2425 to i64
  %2427 = getelementptr inbounds i8, i8* %2417, i64 %2426
  %2428 = bitcast i8* %2427 to i16*
  %2429 = icmp slt i32 %2413, 0
  %2430 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2431 = load i32, i32* %2430, align 8
  %2432 = icmp sgt i32 %2431, 1
  %2433 = and i1 %2429, %2432
  br i1 %2433, label %2434, label %2444

2434:                                             ; preds = %2407
  %2435 = add nsw i32 %2431, -1
  %2436 = sext i32 %2435 to i64
  %2437 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2438 = load i32, i32* %2437, align 4
  %2439 = sext i32 %2438 to i64
  %2440 = mul nsw i64 %2411, %2436
  %2441 = mul i64 %2440, %2439
  %2442 = sub i64 0, %2441
  %2443 = getelementptr inbounds i16, i16* %2428, i64 %2442
  br label %2446

2444:                                             ; preds = %2407
  %2445 = icmp sgt i32 %2431, 0
  br i1 %2445, label %2446, label %2646

2446:                                             ; preds = %2444, %2434
  %2447 = phi i16* [ %2443, %2434 ], [ %2428, %2444 ]
  %2448 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2449 = bitcast i8** %2448 to i16**
  %2450 = load i16*, i16** %2449, align 8
  %2451 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2452 = bitcast i8** %2451 to float**
  %2453 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2454

2454:                                             ; preds = %2466, %2446
  %2455 = phi i32 [ %2431, %2446 ], [ %2467, %2466 ]
  %2456 = phi %"class.blink::IntRect"* [ %2419, %2446 ], [ %2468, %2466 ]
  %2457 = phi %"class.blink::IntRect"* [ %2419, %2446 ], [ %2469, %2466 ]
  %2458 = phi i32 [ 0, %2446 ], [ %2478, %2466 ]
  %2459 = phi i16* [ %2450, %2446 ], [ %2471, %2466 ]
  %2460 = phi i16* [ %2447, %2446 ], [ %2477, %2466 ]
  %2461 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2457, i64 0, i32 1, i32 1
  %2462 = load i32, i32* %2461, align 4
  %2463 = icmp sgt i32 %2462, 0
  br i1 %2463, label %2480, label %2466

2464:                                             ; preds = %2638
  %2465 = load i32, i32* %2430, align 8
  br label %2466

2466:                                             ; preds = %2464, %2454
  %2467 = phi i32 [ %2455, %2454 ], [ %2465, %2464 ]
  %2468 = phi %"class.blink::IntRect"* [ %2456, %2454 ], [ %2639, %2464 ]
  %2469 = phi %"class.blink::IntRect"* [ %2457, %2454 ], [ %2639, %2464 ]
  %2470 = phi i16* [ %2460, %2454 ], [ %2640, %2464 ]
  %2471 = phi i16* [ %2459, %2454 ], [ %2641, %2464 ]
  %2472 = phi i32 [ %2462, %2454 ], [ %2644, %2464 ]
  %2473 = load i32, i32* %2453, align 4
  %2474 = sub nsw i32 %2473, %2472
  %2475 = sext i32 %2474 to i64
  %2476 = mul nsw i64 %2475, %2411
  %2477 = getelementptr inbounds i16, i16* %2470, i64 %2476
  %2478 = add nuw nsw i32 %2458, 1
  %2479 = icmp slt i32 %2478, %2467
  br i1 %2479, label %2454, label %2646

2480:                                             ; preds = %2454, %2638
  %2481 = phi %"class.blink::IntRect"* [ %2639, %2638 ], [ %2456, %2454 ]
  %2482 = phi %"class.blink::IntRect"* [ %2639, %2638 ], [ %2457, %2454 ]
  %2483 = phi i32 [ %2642, %2638 ], [ 0, %2454 ]
  %2484 = phi i16* [ %2641, %2638 ], [ %2459, %2454 ]
  %2485 = phi i16* [ %2640, %2638 ], [ %2460, %2454 ]
  %2486 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2482, i64 0, i32 1, i32 0
  %2487 = load i32, i32* %2486, align 4
  %2488 = icmp eq i32 %2487, 0
  br i1 %2488, label %2638, label %2489

2489:                                             ; preds = %2480
  %2490 = load float*, float** %2452, align 8
  br label %2491

2491:                                             ; preds = %2491, %2489
  %2492 = phi i32 [ %2567, %2491 ], [ 0, %2489 ]
  %2493 = phi i16* [ %2565, %2491 ], [ %2485, %2489 ]
  %2494 = phi float* [ %2566, %2491 ], [ %2490, %2489 ]
  %2495 = load i16, i16* %2493, align 2
  %2496 = zext i16 %2495 to i32
  %2497 = lshr i32 %2496, 10
  %2498 = zext i32 %2497 to i64
  %2499 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2498
  %2500 = load i16, i16* %2499, align 2
  %2501 = zext i16 %2500 to i32
  %2502 = and i32 %2496, 1023
  %2503 = add nuw nsw i32 %2502, %2501
  %2504 = zext i32 %2503 to i64
  %2505 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2504
  %2506 = load i32, i32* %2505, align 4
  %2507 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2498
  %2508 = load i32, i32* %2507, align 4
  %2509 = add i32 %2508, %2506
  %2510 = bitcast float* %2494 to i32*
  store i32 %2509, i32* %2510, align 4
  %2511 = getelementptr inbounds i16, i16* %2493, i64 1
  %2512 = load i16, i16* %2511, align 2
  %2513 = zext i16 %2512 to i32
  %2514 = lshr i32 %2513, 10
  %2515 = zext i32 %2514 to i64
  %2516 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2515
  %2517 = load i16, i16* %2516, align 2
  %2518 = zext i16 %2517 to i32
  %2519 = and i32 %2513, 1023
  %2520 = add nuw nsw i32 %2519, %2518
  %2521 = zext i32 %2520 to i64
  %2522 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2521
  %2523 = load i32, i32* %2522, align 4
  %2524 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2515
  %2525 = load i32, i32* %2524, align 4
  %2526 = add i32 %2525, %2523
  %2527 = getelementptr inbounds float, float* %2494, i64 1
  %2528 = bitcast float* %2527 to i32*
  store i32 %2526, i32* %2528, align 4
  %2529 = getelementptr inbounds i16, i16* %2493, i64 2
  %2530 = load i16, i16* %2529, align 2
  %2531 = zext i16 %2530 to i32
  %2532 = lshr i32 %2531, 10
  %2533 = zext i32 %2532 to i64
  %2534 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2533
  %2535 = load i16, i16* %2534, align 2
  %2536 = zext i16 %2535 to i32
  %2537 = and i32 %2531, 1023
  %2538 = add nuw nsw i32 %2537, %2536
  %2539 = zext i32 %2538 to i64
  %2540 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2539
  %2541 = load i32, i32* %2540, align 4
  %2542 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2533
  %2543 = load i32, i32* %2542, align 4
  %2544 = add i32 %2543, %2541
  %2545 = getelementptr inbounds float, float* %2494, i64 2
  %2546 = bitcast float* %2545 to i32*
  store i32 %2544, i32* %2546, align 4
  %2547 = getelementptr inbounds i16, i16* %2493, i64 3
  %2548 = load i16, i16* %2547, align 2
  %2549 = zext i16 %2548 to i32
  %2550 = lshr i32 %2549, 10
  %2551 = zext i32 %2550 to i64
  %2552 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2551
  %2553 = load i16, i16* %2552, align 2
  %2554 = zext i16 %2553 to i32
  %2555 = and i32 %2549, 1023
  %2556 = add nuw nsw i32 %2555, %2554
  %2557 = zext i32 %2556 to i64
  %2558 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2557
  %2559 = load i32, i32* %2558, align 4
  %2560 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2551
  %2561 = load i32, i32* %2560, align 4
  %2562 = add i32 %2561, %2559
  %2563 = getelementptr inbounds float, float* %2494, i64 3
  %2564 = bitcast float* %2563 to i32*
  store i32 %2562, i32* %2564, align 4
  %2565 = getelementptr inbounds i16, i16* %2493, i64 4
  %2566 = getelementptr inbounds float, float* %2494, i64 4
  %2567 = add nuw i32 %2492, 1
  %2568 = icmp eq i32 %2567, %2487
  br i1 %2568, label %2569, label %2491

2569:                                             ; preds = %2491
  %2570 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2418, align 8
  %2571 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2570, i64 0, i32 1, i32 0
  %2572 = load i32, i32* %2571, align 4
  %2573 = icmp eq i32 %2572, 0
  br i1 %2573, label %2638, label %2574

2574:                                             ; preds = %2569
  %2575 = load float*, float** %2452, align 8
  %2576 = and i32 %2572, 1
  %2577 = icmp eq i32 %2572, 1
  br i1 %2577, label %2617, label %2578

2578:                                             ; preds = %2574
  %2579 = sub i32 %2572, %2576
  br label %2580

2580:                                             ; preds = %2580, %2578
  %2581 = phi float* [ %2575, %2578 ], [ %2613, %2580 ]
  %2582 = phi i16* [ %2484, %2578 ], [ %2614, %2580 ]
  %2583 = phi i32 [ %2579, %2578 ], [ %2615, %2580 ]
  %2584 = getelementptr inbounds float, float* %2581, i64 3
  %2585 = bitcast float* %2584 to i32*
  %2586 = load i32, i32* %2585, align 4
  %2587 = lshr i32 %2586, 23
  %2588 = zext i32 %2587 to i64
  %2589 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2588
  %2590 = load i16, i16* %2589, align 2
  %2591 = and i32 %2586, 8388607
  %2592 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2588
  %2593 = load i8, i8* %2592, align 1
  %2594 = zext i8 %2593 to i32
  %2595 = lshr i32 %2591, %2594
  %2596 = trunc i32 %2595 to i16
  %2597 = add i16 %2590, %2596
  store i16 %2597, i16* %2582, align 2
  %2598 = getelementptr inbounds i16, i16* %2582, i64 1
  %2599 = getelementptr inbounds float, float* %2581, i64 7
  %2600 = bitcast float* %2599 to i32*
  %2601 = load i32, i32* %2600, align 4
  %2602 = lshr i32 %2601, 23
  %2603 = zext i32 %2602 to i64
  %2604 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2603
  %2605 = load i16, i16* %2604, align 2
  %2606 = and i32 %2601, 8388607
  %2607 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2603
  %2608 = load i8, i8* %2607, align 1
  %2609 = zext i8 %2608 to i32
  %2610 = lshr i32 %2606, %2609
  %2611 = trunc i32 %2610 to i16
  %2612 = add i16 %2605, %2611
  store i16 %2612, i16* %2598, align 2
  %2613 = getelementptr inbounds float, float* %2581, i64 8
  %2614 = getelementptr inbounds i16, i16* %2582, i64 2
  %2615 = add i32 %2583, -2
  %2616 = icmp eq i32 %2615, 0
  br i1 %2616, label %2617, label %2580

2617:                                             ; preds = %2580, %2574
  %2618 = phi float* [ %2575, %2574 ], [ %2613, %2580 ]
  %2619 = phi i16* [ %2484, %2574 ], [ %2614, %2580 ]
  %2620 = icmp eq i32 %2576, 0
  br i1 %2620, label %2636, label %2621

2621:                                             ; preds = %2617
  %2622 = getelementptr inbounds float, float* %2618, i64 3
  %2623 = bitcast float* %2622 to i32*
  %2624 = load i32, i32* %2623, align 4
  %2625 = lshr i32 %2624, 23
  %2626 = zext i32 %2625 to i64
  %2627 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %2626
  %2628 = load i16, i16* %2627, align 2
  %2629 = and i32 %2624, 8388607
  %2630 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %2626
  %2631 = load i8, i8* %2630, align 1
  %2632 = zext i8 %2631 to i32
  %2633 = lshr i32 %2629, %2632
  %2634 = trunc i32 %2633 to i16
  %2635 = add i16 %2628, %2634
  store i16 %2635, i16* %2619, align 2
  br label %2636

2636:                                             ; preds = %2617, %2621
  %2637 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2418, align 8
  br label %2638

2638:                                             ; preds = %2636, %2569, %2480
  %2639 = phi %"class.blink::IntRect"* [ %2637, %2636 ], [ %2570, %2569 ], [ %2481, %2480 ]
  %2640 = getelementptr inbounds i16, i16* %2485, i64 %2411
  %2641 = getelementptr inbounds i16, i16* %2484, i64 %2415
  %2642 = add nuw nsw i32 %2483, 1
  %2643 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2639, i64 0, i32 1, i32 1
  %2644 = load i32, i32* %2643, align 4
  %2645 = icmp slt i32 %2642, %2644
  br i1 %2645, label %2480, label %2464

2646:                                             ; preds = %2466, %2444
  %2647 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2647, align 4
  br label %13459

2648:                                             ; preds = %3
  %2649 = icmp eq i32 %2, 0
  br i1 %2649, label %2650, label %13459

2650:                                             ; preds = %2648
  %2651 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2652 = load i32, i32* %2651, align 8
  %2653 = sdiv i32 %2652, 2
  %2654 = sext i32 %2653 to i64
  %2655 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2656 = load i32, i32* %2655, align 8
  %2657 = sdiv i32 %2656, 4
  %2658 = sext i32 %2657 to i64
  %2659 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2660 = load i8*, i8** %2659, align 8
  %2661 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2662 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2661, align 8
  %2663 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2662, i64 0, i32 0, i32 1
  %2664 = load i32, i32* %2663, align 4
  %2665 = mul nsw i32 %2664, %2652
  %2666 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2667 = load i32, i32* %2666, align 4
  %2668 = add nsw i32 %2665, %2667
  %2669 = sext i32 %2668 to i64
  %2670 = getelementptr inbounds i8, i8* %2660, i64 %2669
  %2671 = bitcast i8* %2670 to i16*
  %2672 = icmp slt i32 %2656, 0
  %2673 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2674 = load i32, i32* %2673, align 8
  %2675 = icmp sgt i32 %2674, 1
  %2676 = and i1 %2672, %2675
  br i1 %2676, label %2677, label %2687

2677:                                             ; preds = %2650
  %2678 = add nsw i32 %2674, -1
  %2679 = sext i32 %2678 to i64
  %2680 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2681 = load i32, i32* %2680, align 4
  %2682 = sext i32 %2681 to i64
  %2683 = mul nsw i64 %2654, %2679
  %2684 = mul i64 %2683, %2682
  %2685 = sub i64 0, %2684
  %2686 = getelementptr inbounds i16, i16* %2671, i64 %2685
  br label %2689

2687:                                             ; preds = %2650
  %2688 = icmp sgt i32 %2674, 0
  br i1 %2688, label %2689, label %2955

2689:                                             ; preds = %2687, %2677
  %2690 = phi i16* [ %2686, %2677 ], [ %2671, %2687 ]
  %2691 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2692 = bitcast i8** %2691 to float**
  %2693 = load float*, float** %2692, align 8
  %2694 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %2695 = bitcast i8** %2694 to float**
  %2696 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %2697

2697:                                             ; preds = %2709, %2689
  %2698 = phi i32 [ %2674, %2689 ], [ %2710, %2709 ]
  %2699 = phi %"class.blink::IntRect"* [ %2662, %2689 ], [ %2711, %2709 ]
  %2700 = phi %"class.blink::IntRect"* [ %2662, %2689 ], [ %2712, %2709 ]
  %2701 = phi i32 [ 0, %2689 ], [ %2721, %2709 ]
  %2702 = phi float* [ %2693, %2689 ], [ %2714, %2709 ]
  %2703 = phi i16* [ %2690, %2689 ], [ %2720, %2709 ]
  %2704 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2700, i64 0, i32 1, i32 1
  %2705 = load i32, i32* %2704, align 4
  %2706 = icmp sgt i32 %2705, 0
  br i1 %2706, label %2723, label %2709

2707:                                             ; preds = %2946
  %2708 = load i32, i32* %2673, align 8
  br label %2709

2709:                                             ; preds = %2707, %2697
  %2710 = phi i32 [ %2698, %2697 ], [ %2708, %2707 ]
  %2711 = phi %"class.blink::IntRect"* [ %2699, %2697 ], [ %2947, %2707 ]
  %2712 = phi %"class.blink::IntRect"* [ %2700, %2697 ], [ %2947, %2707 ]
  %2713 = phi i16* [ %2703, %2697 ], [ %2948, %2707 ]
  %2714 = phi float* [ %2702, %2697 ], [ %2949, %2707 ]
  %2715 = phi i32 [ %2705, %2697 ], [ %2952, %2707 ]
  %2716 = load i32, i32* %2696, align 4
  %2717 = sub nsw i32 %2716, %2715
  %2718 = sext i32 %2717 to i64
  %2719 = mul nsw i64 %2718, %2654
  %2720 = getelementptr inbounds i16, i16* %2713, i64 %2719
  %2721 = add nuw nsw i32 %2701, 1
  %2722 = icmp slt i32 %2721, %2710
  br i1 %2722, label %2697, label %2955

2723:                                             ; preds = %2697, %2946
  %2724 = phi i64 [ %2954, %2946 ], [ 0, %2697 ]
  %2725 = phi %"class.blink::IntRect"* [ %2947, %2946 ], [ %2699, %2697 ]
  %2726 = phi %"class.blink::IntRect"* [ %2947, %2946 ], [ %2700, %2697 ]
  %2727 = phi i32 [ %2950, %2946 ], [ 0, %2697 ]
  %2728 = phi float* [ %2949, %2946 ], [ %2702, %2697 ]
  %2729 = phi i16* [ %2948, %2946 ], [ %2703, %2697 ]
  %2730 = mul i64 %2724, %2658
  %2731 = getelementptr float, float* %2702, i64 %2730
  %2732 = add i64 %2730, 1
  %2733 = getelementptr float, float* %2702, i64 %2732
  %2734 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2726, i64 0, i32 1, i32 0
  %2735 = load i32, i32* %2734, align 4
  %2736 = icmp eq i32 %2735, 0
  br i1 %2736, label %2946, label %2737

2737:                                             ; preds = %2723
  %2738 = load float*, float** %2695, align 8
  br label %2739

2739:                                             ; preds = %2739, %2737
  %2740 = phi i32 [ %2815, %2739 ], [ 0, %2737 ]
  %2741 = phi i16* [ %2813, %2739 ], [ %2729, %2737 ]
  %2742 = phi float* [ %2814, %2739 ], [ %2738, %2737 ]
  %2743 = load i16, i16* %2741, align 2
  %2744 = zext i16 %2743 to i32
  %2745 = lshr i32 %2744, 10
  %2746 = zext i32 %2745 to i64
  %2747 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2746
  %2748 = load i16, i16* %2747, align 2
  %2749 = zext i16 %2748 to i32
  %2750 = and i32 %2744, 1023
  %2751 = add nuw nsw i32 %2750, %2749
  %2752 = zext i32 %2751 to i64
  %2753 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2752
  %2754 = load i32, i32* %2753, align 4
  %2755 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2746
  %2756 = load i32, i32* %2755, align 4
  %2757 = add i32 %2756, %2754
  %2758 = bitcast float* %2742 to i32*
  store i32 %2757, i32* %2758, align 4
  %2759 = getelementptr inbounds i16, i16* %2741, i64 1
  %2760 = load i16, i16* %2759, align 2
  %2761 = zext i16 %2760 to i32
  %2762 = lshr i32 %2761, 10
  %2763 = zext i32 %2762 to i64
  %2764 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2763
  %2765 = load i16, i16* %2764, align 2
  %2766 = zext i16 %2765 to i32
  %2767 = and i32 %2761, 1023
  %2768 = add nuw nsw i32 %2767, %2766
  %2769 = zext i32 %2768 to i64
  %2770 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2769
  %2771 = load i32, i32* %2770, align 4
  %2772 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2763
  %2773 = load i32, i32* %2772, align 4
  %2774 = add i32 %2773, %2771
  %2775 = getelementptr inbounds float, float* %2742, i64 1
  %2776 = bitcast float* %2775 to i32*
  store i32 %2774, i32* %2776, align 4
  %2777 = getelementptr inbounds i16, i16* %2741, i64 2
  %2778 = load i16, i16* %2777, align 2
  %2779 = zext i16 %2778 to i32
  %2780 = lshr i32 %2779, 10
  %2781 = zext i32 %2780 to i64
  %2782 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2781
  %2783 = load i16, i16* %2782, align 2
  %2784 = zext i16 %2783 to i32
  %2785 = and i32 %2779, 1023
  %2786 = add nuw nsw i32 %2785, %2784
  %2787 = zext i32 %2786 to i64
  %2788 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2787
  %2789 = load i32, i32* %2788, align 4
  %2790 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2781
  %2791 = load i32, i32* %2790, align 4
  %2792 = add i32 %2791, %2789
  %2793 = getelementptr inbounds float, float* %2742, i64 2
  %2794 = bitcast float* %2793 to i32*
  store i32 %2792, i32* %2794, align 4
  %2795 = getelementptr inbounds i16, i16* %2741, i64 3
  %2796 = load i16, i16* %2795, align 2
  %2797 = zext i16 %2796 to i32
  %2798 = lshr i32 %2797, 10
  %2799 = zext i32 %2798 to i64
  %2800 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %2799
  %2801 = load i16, i16* %2800, align 2
  %2802 = zext i16 %2801 to i32
  %2803 = and i32 %2797, 1023
  %2804 = add nuw nsw i32 %2803, %2802
  %2805 = zext i32 %2804 to i64
  %2806 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %2805
  %2807 = load i32, i32* %2806, align 4
  %2808 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %2799
  %2809 = load i32, i32* %2808, align 4
  %2810 = add i32 %2809, %2807
  %2811 = getelementptr inbounds float, float* %2742, i64 3
  %2812 = bitcast float* %2811 to i32*
  store i32 %2810, i32* %2812, align 4
  %2813 = getelementptr inbounds i16, i16* %2741, i64 4
  %2814 = getelementptr inbounds float, float* %2742, i64 4
  %2815 = add nuw i32 %2740, 1
  %2816 = icmp eq i32 %2815, %2735
  br i1 %2816, label %2817, label %2739

2817:                                             ; preds = %2739
  %2818 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2661, align 8
  %2819 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2818, i64 0, i32 1, i32 0
  %2820 = load i32, i32* %2819, align 4
  %2821 = icmp eq i32 %2820, 0
  br i1 %2821, label %2946, label %2822

2822:                                             ; preds = %2817
  %2823 = load float*, float** %2695, align 8
  %2824 = add i32 %2820, -1
  %2825 = zext i32 %2824 to i64
  %2826 = add nuw nsw i64 %2825, 1
  %2827 = icmp ult i64 %2826, 9
  br i1 %2827, label %2869, label %2828

2828:                                             ; preds = %2822
  %2829 = add i32 %2820, -1
  %2830 = zext i32 %2829 to i64
  %2831 = getelementptr float, float* %2733, i64 %2830
  %2832 = getelementptr float, float* %2823, i64 3
  %2833 = getelementptr float, float* %2823, i64 4
  %2834 = shl nuw nsw i64 %2830, 2
  %2835 = getelementptr float, float* %2833, i64 %2834
  %2836 = icmp ult float* %2731, %2835
  %2837 = icmp ult float* %2832, %2831
  %2838 = and i1 %2836, %2837
  br i1 %2838, label %2869, label %2839

2839:                                             ; preds = %2828
  %2840 = and i64 %2826, 7
  %2841 = icmp eq i64 %2840, 0
  %2842 = select i1 %2841, i64 8, i64 %2840
  %2843 = sub nsw i64 %2826, %2842
  %2844 = trunc i64 %2843 to i32
  %2845 = shl nsw i64 %2843, 2
  %2846 = getelementptr float, float* %2823, i64 %2845
  %2847 = getelementptr float, float* %2728, i64 %2843
  %2848 = getelementptr float, float* %2823, i64 3
  %2849 = getelementptr float, float* %2823, i64 3
  br label %2850

2850:                                             ; preds = %2850, %2839
  %2851 = phi i64 [ 0, %2839 ], [ %2867, %2850 ]
  %2852 = shl i64 %2851, 2
  %2853 = shl i64 %2851, 2
  %2854 = or i64 %2853, 16
  %2855 = getelementptr float, float* %2728, i64 %2851
  %2856 = getelementptr inbounds float, float* %2848, i64 %2852
  %2857 = getelementptr inbounds float, float* %2849, i64 %2854
  %2858 = bitcast float* %2856 to <16 x i32>*
  %2859 = bitcast float* %2857 to <16 x i32>*
  %2860 = load <16 x i32>, <16 x i32>* %2858, align 4
  %2861 = load <16 x i32>, <16 x i32>* %2859, align 4
  %2862 = shufflevector <16 x i32> %2860, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2863 = shufflevector <16 x i32> %2861, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %2864 = bitcast float* %2855 to <4 x i32>*
  store <4 x i32> %2862, <4 x i32>* %2864, align 4, !alias.scope !661, !noalias !664
  %2865 = getelementptr float, float* %2855, i64 4
  %2866 = bitcast float* %2865 to <4 x i32>*
  store <4 x i32> %2863, <4 x i32>* %2866, align 4, !alias.scope !661, !noalias !664
  %2867 = add i64 %2851, 8
  %2868 = icmp eq i64 %2867, %2843
  br i1 %2868, label %2869, label %2850, !llvm.loop !666

2869:                                             ; preds = %2850, %2828, %2822
  %2870 = phi i32 [ 0, %2828 ], [ 0, %2822 ], [ %2844, %2850 ]
  %2871 = phi float* [ %2823, %2828 ], [ %2823, %2822 ], [ %2846, %2850 ]
  %2872 = phi float* [ %2728, %2828 ], [ %2728, %2822 ], [ %2847, %2850 ]
  %2873 = sub i32 %2820, %2870
  %2874 = xor i32 %2870, -1
  %2875 = add i32 %2820, %2874
  %2876 = and i32 %2873, 7
  %2877 = icmp eq i32 %2876, 0
  br i1 %2877, label %2892, label %2878

2878:                                             ; preds = %2869, %2878
  %2879 = phi i32 [ %2889, %2878 ], [ %2870, %2869 ]
  %2880 = phi float* [ %2887, %2878 ], [ %2871, %2869 ]
  %2881 = phi float* [ %2888, %2878 ], [ %2872, %2869 ]
  %2882 = phi i32 [ %2890, %2878 ], [ %2876, %2869 ]
  %2883 = getelementptr inbounds float, float* %2880, i64 3
  %2884 = bitcast float* %2883 to i32*
  %2885 = load i32, i32* %2884, align 4
  %2886 = bitcast float* %2881 to i32*
  store i32 %2885, i32* %2886, align 4
  %2887 = getelementptr inbounds float, float* %2880, i64 4
  %2888 = getelementptr inbounds float, float* %2881, i64 1
  %2889 = add nuw i32 %2879, 1
  %2890 = add i32 %2882, -1
  %2891 = icmp eq i32 %2890, 0
  br i1 %2891, label %2892, label %2878, !llvm.loop !667

2892:                                             ; preds = %2878, %2869
  %2893 = phi i32 [ %2870, %2869 ], [ %2889, %2878 ]
  %2894 = phi float* [ %2871, %2869 ], [ %2887, %2878 ]
  %2895 = phi float* [ %2872, %2869 ], [ %2888, %2878 ]
  %2896 = icmp ult i32 %2875, 7
  br i1 %2896, label %2944, label %2897

2897:                                             ; preds = %2892, %2897
  %2898 = phi i32 [ %2942, %2897 ], [ %2893, %2892 ]
  %2899 = phi float* [ %2940, %2897 ], [ %2894, %2892 ]
  %2900 = phi float* [ %2941, %2897 ], [ %2895, %2892 ]
  %2901 = getelementptr inbounds float, float* %2899, i64 3
  %2902 = bitcast float* %2901 to i32*
  %2903 = load i32, i32* %2902, align 4
  %2904 = bitcast float* %2900 to i32*
  store i32 %2903, i32* %2904, align 4
  %2905 = getelementptr inbounds float, float* %2900, i64 1
  %2906 = getelementptr inbounds float, float* %2899, i64 7
  %2907 = bitcast float* %2906 to i32*
  %2908 = load i32, i32* %2907, align 4
  %2909 = bitcast float* %2905 to i32*
  store i32 %2908, i32* %2909, align 4
  %2910 = getelementptr inbounds float, float* %2900, i64 2
  %2911 = getelementptr inbounds float, float* %2899, i64 11
  %2912 = bitcast float* %2911 to i32*
  %2913 = load i32, i32* %2912, align 4
  %2914 = bitcast float* %2910 to i32*
  store i32 %2913, i32* %2914, align 4
  %2915 = getelementptr inbounds float, float* %2900, i64 3
  %2916 = getelementptr inbounds float, float* %2899, i64 15
  %2917 = bitcast float* %2916 to i32*
  %2918 = load i32, i32* %2917, align 4
  %2919 = bitcast float* %2915 to i32*
  store i32 %2918, i32* %2919, align 4
  %2920 = getelementptr inbounds float, float* %2900, i64 4
  %2921 = getelementptr inbounds float, float* %2899, i64 19
  %2922 = bitcast float* %2921 to i32*
  %2923 = load i32, i32* %2922, align 4
  %2924 = bitcast float* %2920 to i32*
  store i32 %2923, i32* %2924, align 4
  %2925 = getelementptr inbounds float, float* %2900, i64 5
  %2926 = getelementptr inbounds float, float* %2899, i64 23
  %2927 = bitcast float* %2926 to i32*
  %2928 = load i32, i32* %2927, align 4
  %2929 = bitcast float* %2925 to i32*
  store i32 %2928, i32* %2929, align 4
  %2930 = getelementptr inbounds float, float* %2900, i64 6
  %2931 = getelementptr inbounds float, float* %2899, i64 27
  %2932 = bitcast float* %2931 to i32*
  %2933 = load i32, i32* %2932, align 4
  %2934 = bitcast float* %2930 to i32*
  store i32 %2933, i32* %2934, align 4
  %2935 = getelementptr inbounds float, float* %2900, i64 7
  %2936 = getelementptr inbounds float, float* %2899, i64 31
  %2937 = bitcast float* %2936 to i32*
  %2938 = load i32, i32* %2937, align 4
  %2939 = bitcast float* %2935 to i32*
  store i32 %2938, i32* %2939, align 4
  %2940 = getelementptr inbounds float, float* %2899, i64 32
  %2941 = getelementptr inbounds float, float* %2900, i64 8
  %2942 = add nuw i32 %2898, 8
  %2943 = icmp eq i32 %2942, %2820
  br i1 %2943, label %2944, label %2897, !llvm.loop !668

2944:                                             ; preds = %2897, %2892
  %2945 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2661, align 8
  br label %2946

2946:                                             ; preds = %2944, %2817, %2723
  %2947 = phi %"class.blink::IntRect"* [ %2945, %2944 ], [ %2818, %2817 ], [ %2725, %2723 ]
  %2948 = getelementptr inbounds i16, i16* %2729, i64 %2654
  %2949 = getelementptr inbounds float, float* %2728, i64 %2658
  %2950 = add nuw nsw i32 %2727, 1
  %2951 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2947, i64 0, i32 1, i32 1
  %2952 = load i32, i32* %2951, align 4
  %2953 = icmp slt i32 %2950, %2952
  %2954 = add i64 %2724, 1
  br i1 %2953, label %2723, label %2707

2955:                                             ; preds = %2709, %2687
  %2956 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %2956, align 4
  br label %13459

2957:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %2958
    i32 1, label %3103
    i32 2, label %3273
  ]

2958:                                             ; preds = %2957
  %2959 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %2960 = load i32, i32* %2959, align 8
  %2961 = sdiv i32 %2960, 2
  %2962 = sext i32 %2961 to i64
  %2963 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %2964 = load i32, i32* %2963, align 8
  %2965 = sext i32 %2964 to i64
  %2966 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %2967 = load i8*, i8** %2966, align 8
  %2968 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %2969 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2968, align 8
  %2970 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %2969, i64 0, i32 0, i32 1
  %2971 = load i32, i32* %2970, align 4
  %2972 = mul nsw i32 %2971, %2960
  %2973 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %2974 = load i32, i32* %2973, align 4
  %2975 = add nsw i32 %2972, %2974
  %2976 = sext i32 %2975 to i64
  %2977 = getelementptr inbounds i8, i8* %2967, i64 %2976
  %2978 = bitcast i8* %2977 to i16*
  %2979 = icmp slt i32 %2964, 0
  %2980 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %2981 = load i32, i32* %2980, align 8
  %2982 = icmp sgt i32 %2981, 1
  %2983 = and i1 %2979, %2982
  br i1 %2983, label %2984, label %2994

2984:                                             ; preds = %2958
  %2985 = add nsw i32 %2981, -1
  %2986 = sext i32 %2985 to i64
  %2987 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %2988 = load i32, i32* %2987, align 4
  %2989 = sext i32 %2988 to i64
  %2990 = mul nsw i64 %2962, %2986
  %2991 = mul i64 %2990, %2989
  %2992 = sub i64 0, %2991
  %2993 = getelementptr inbounds i16, i16* %2978, i64 %2992
  br label %2996

2994:                                             ; preds = %2958
  %2995 = icmp sgt i32 %2981, 0
  br i1 %2995, label %2996, label %3101

2996:                                             ; preds = %2994, %2984
  %2997 = phi i16* [ %2993, %2984 ], [ %2978, %2994 ]
  %2998 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %2999 = load i8*, i8** %2998, align 8
  %3000 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3001 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3002

3002:                                             ; preds = %3013, %2996
  %3003 = phi i32 [ %2981, %2996 ], [ %3014, %3013 ]
  %3004 = phi %"class.blink::IntRect"* [ %2969, %2996 ], [ %3015, %3013 ]
  %3005 = phi i32 [ 0, %2996 ], [ %3024, %3013 ]
  %3006 = phi i8* [ %2999, %2996 ], [ %3017, %3013 ]
  %3007 = phi i16* [ %2997, %2996 ], [ %3023, %3013 ]
  %3008 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3004, i64 0, i32 1, i32 1
  %3009 = load i32, i32* %3008, align 4
  %3010 = icmp sgt i32 %3009, 0
  br i1 %3010, label %3026, label %3013

3011:                                             ; preds = %3093
  %3012 = load i32, i32* %2980, align 8
  br label %3013

3013:                                             ; preds = %3011, %3002
  %3014 = phi i32 [ %3003, %3002 ], [ %3012, %3011 ]
  %3015 = phi %"class.blink::IntRect"* [ %3004, %3002 ], [ %3094, %3011 ]
  %3016 = phi i16* [ %3007, %3002 ], [ %3095, %3011 ]
  %3017 = phi i8* [ %3006, %3002 ], [ %3096, %3011 ]
  %3018 = phi i32 [ %3009, %3002 ], [ %3099, %3011 ]
  %3019 = load i32, i32* %3001, align 4
  %3020 = sub nsw i32 %3019, %3018
  %3021 = sext i32 %3020 to i64
  %3022 = mul nsw i64 %3021, %2962
  %3023 = getelementptr inbounds i16, i16* %3016, i64 %3022
  %3024 = add nuw nsw i32 %3005, 1
  %3025 = icmp slt i32 %3024, %3014
  br i1 %3025, label %3002, label %3101

3026:                                             ; preds = %3002, %3093
  %3027 = phi %"class.blink::IntRect"* [ %3094, %3093 ], [ %3004, %3002 ]
  %3028 = phi i32 [ %3097, %3093 ], [ 0, %3002 ]
  %3029 = phi i8* [ %3096, %3093 ], [ %3006, %3002 ]
  %3030 = phi i16* [ %3095, %3093 ], [ %3007, %3002 ]
  %3031 = load i8*, i8** %3000, align 8
  %3032 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3027, i64 0, i32 1, i32 0
  %3033 = load i32, i32* %3032, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %3030, i8* %3031, i32 %3033) #12
  %3034 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2968, align 8
  %3035 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3034, i64 0, i32 1, i32 0
  %3036 = load i32, i32* %3035, align 4
  %3037 = icmp eq i32 %3036, 0
  br i1 %3037, label %3093, label %3038

3038:                                             ; preds = %3026
  %3039 = load i8*, i8** %3000, align 8
  %3040 = add i32 %3036, -1
  %3041 = and i32 %3036, 3
  %3042 = icmp ult i32 %3040, 3
  br i1 %3042, label %3075, label %3043

3043:                                             ; preds = %3038
  %3044 = sub i32 %3036, %3041
  br label %3045

3045:                                             ; preds = %3045, %3043
  %3046 = phi i8* [ %3039, %3043 ], [ %3071, %3045 ]
  %3047 = phi i8* [ %3029, %3043 ], [ %3072, %3045 ]
  %3048 = phi i32 [ %3044, %3043 ], [ %3073, %3045 ]
  %3049 = load i8, i8* %3046, align 1
  store i8 %3049, i8* %3047, align 1
  %3050 = getelementptr inbounds i8, i8* %3046, i64 3
  %3051 = load i8, i8* %3050, align 1
  %3052 = getelementptr inbounds i8, i8* %3047, i64 1
  store i8 %3051, i8* %3052, align 1
  %3053 = getelementptr inbounds i8, i8* %3046, i64 4
  %3054 = getelementptr inbounds i8, i8* %3047, i64 2
  %3055 = load i8, i8* %3053, align 1
  store i8 %3055, i8* %3054, align 1
  %3056 = getelementptr inbounds i8, i8* %3046, i64 7
  %3057 = load i8, i8* %3056, align 1
  %3058 = getelementptr inbounds i8, i8* %3047, i64 3
  store i8 %3057, i8* %3058, align 1
  %3059 = getelementptr inbounds i8, i8* %3046, i64 8
  %3060 = getelementptr inbounds i8, i8* %3047, i64 4
  %3061 = load i8, i8* %3059, align 1
  store i8 %3061, i8* %3060, align 1
  %3062 = getelementptr inbounds i8, i8* %3046, i64 11
  %3063 = load i8, i8* %3062, align 1
  %3064 = getelementptr inbounds i8, i8* %3047, i64 5
  store i8 %3063, i8* %3064, align 1
  %3065 = getelementptr inbounds i8, i8* %3046, i64 12
  %3066 = getelementptr inbounds i8, i8* %3047, i64 6
  %3067 = load i8, i8* %3065, align 1
  store i8 %3067, i8* %3066, align 1
  %3068 = getelementptr inbounds i8, i8* %3046, i64 15
  %3069 = load i8, i8* %3068, align 1
  %3070 = getelementptr inbounds i8, i8* %3047, i64 7
  store i8 %3069, i8* %3070, align 1
  %3071 = getelementptr inbounds i8, i8* %3046, i64 16
  %3072 = getelementptr inbounds i8, i8* %3047, i64 8
  %3073 = add i32 %3048, -4
  %3074 = icmp eq i32 %3073, 0
  br i1 %3074, label %3075, label %3045

3075:                                             ; preds = %3045, %3038
  %3076 = phi i8* [ %3039, %3038 ], [ %3071, %3045 ]
  %3077 = phi i8* [ %3029, %3038 ], [ %3072, %3045 ]
  %3078 = icmp eq i32 %3041, 0
  br i1 %3078, label %3091, label %3079

3079:                                             ; preds = %3075, %3079
  %3080 = phi i8* [ %3087, %3079 ], [ %3076, %3075 ]
  %3081 = phi i8* [ %3088, %3079 ], [ %3077, %3075 ]
  %3082 = phi i32 [ %3089, %3079 ], [ %3041, %3075 ]
  %3083 = load i8, i8* %3080, align 1
  store i8 %3083, i8* %3081, align 1
  %3084 = getelementptr inbounds i8, i8* %3080, i64 3
  %3085 = load i8, i8* %3084, align 1
  %3086 = getelementptr inbounds i8, i8* %3081, i64 1
  store i8 %3085, i8* %3086, align 1
  %3087 = getelementptr inbounds i8, i8* %3080, i64 4
  %3088 = getelementptr inbounds i8, i8* %3081, i64 2
  %3089 = add i32 %3082, -1
  %3090 = icmp eq i32 %3089, 0
  br i1 %3090, label %3091, label %3079, !llvm.loop !669

3091:                                             ; preds = %3079, %3075
  %3092 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %2968, align 8
  br label %3093

3093:                                             ; preds = %3091, %3026
  %3094 = phi %"class.blink::IntRect"* [ %3092, %3091 ], [ %3034, %3026 ]
  %3095 = getelementptr inbounds i16, i16* %3030, i64 %2962
  %3096 = getelementptr inbounds i8, i8* %3029, i64 %2965
  %3097 = add nuw nsw i32 %3028, 1
  %3098 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3094, i64 0, i32 1, i32 1
  %3099 = load i32, i32* %3098, align 4
  %3100 = icmp slt i32 %3097, %3099
  br i1 %3100, label %3026, label %3011

3101:                                             ; preds = %3013, %2994
  %3102 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3102, align 4
  br label %13459

3103:                                             ; preds = %2957
  %3104 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3105 = load i32, i32* %3104, align 8
  %3106 = sdiv i32 %3105, 2
  %3107 = sext i32 %3106 to i64
  %3108 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3109 = load i32, i32* %3108, align 8
  %3110 = sext i32 %3109 to i64
  %3111 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3112 = load i8*, i8** %3111, align 8
  %3113 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3114 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3113, align 8
  %3115 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3114, i64 0, i32 0, i32 1
  %3116 = load i32, i32* %3115, align 4
  %3117 = mul nsw i32 %3116, %3105
  %3118 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3119 = load i32, i32* %3118, align 4
  %3120 = add nsw i32 %3117, %3119
  %3121 = sext i32 %3120 to i64
  %3122 = getelementptr inbounds i8, i8* %3112, i64 %3121
  %3123 = bitcast i8* %3122 to i16*
  %3124 = icmp slt i32 %3109, 0
  %3125 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3126 = load i32, i32* %3125, align 8
  %3127 = icmp sgt i32 %3126, 1
  %3128 = and i1 %3124, %3127
  br i1 %3128, label %3129, label %3139

3129:                                             ; preds = %3103
  %3130 = add nsw i32 %3126, -1
  %3131 = sext i32 %3130 to i64
  %3132 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3133 = load i32, i32* %3132, align 4
  %3134 = sext i32 %3133 to i64
  %3135 = mul nsw i64 %3107, %3131
  %3136 = mul i64 %3135, %3134
  %3137 = sub i64 0, %3136
  %3138 = getelementptr inbounds i16, i16* %3123, i64 %3137
  br label %3141

3139:                                             ; preds = %3103
  %3140 = icmp sgt i32 %3126, 0
  br i1 %3140, label %3141, label %3271

3141:                                             ; preds = %3139, %3129
  %3142 = phi i16* [ %3138, %3129 ], [ %3123, %3139 ]
  %3143 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3144 = load i8*, i8** %3143, align 8
  %3145 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3146 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3147

3147:                                             ; preds = %3158, %3141
  %3148 = phi i32 [ %3126, %3141 ], [ %3159, %3158 ]
  %3149 = phi %"class.blink::IntRect"* [ %3114, %3141 ], [ %3160, %3158 ]
  %3150 = phi i32 [ 0, %3141 ], [ %3169, %3158 ]
  %3151 = phi i8* [ %3144, %3141 ], [ %3162, %3158 ]
  %3152 = phi i16* [ %3142, %3141 ], [ %3168, %3158 ]
  %3153 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3149, i64 0, i32 1, i32 1
  %3154 = load i32, i32* %3153, align 4
  %3155 = icmp sgt i32 %3154, 0
  br i1 %3155, label %3171, label %3158

3156:                                             ; preds = %3262
  %3157 = load i32, i32* %3125, align 8
  br label %3158

3158:                                             ; preds = %3156, %3147
  %3159 = phi i32 [ %3148, %3147 ], [ %3157, %3156 ]
  %3160 = phi %"class.blink::IntRect"* [ %3149, %3147 ], [ %3263, %3156 ]
  %3161 = phi i16* [ %3152, %3147 ], [ %3264, %3156 ]
  %3162 = phi i8* [ %3151, %3147 ], [ %3265, %3156 ]
  %3163 = phi i32 [ %3154, %3147 ], [ %3268, %3156 ]
  %3164 = load i32, i32* %3146, align 4
  %3165 = sub nsw i32 %3164, %3163
  %3166 = sext i32 %3165 to i64
  %3167 = mul nsw i64 %3166, %3107
  %3168 = getelementptr inbounds i16, i16* %3161, i64 %3167
  %3169 = add nuw nsw i32 %3150, 1
  %3170 = icmp slt i32 %3169, %3159
  br i1 %3170, label %3147, label %3271

3171:                                             ; preds = %3147, %3262
  %3172 = phi i64 [ %3270, %3262 ], [ 0, %3147 ]
  %3173 = phi %"class.blink::IntRect"* [ %3263, %3262 ], [ %3149, %3147 ]
  %3174 = phi i32 [ %3266, %3262 ], [ 0, %3147 ]
  %3175 = phi i8* [ %3265, %3262 ], [ %3151, %3147 ]
  %3176 = phi i16* [ %3264, %3262 ], [ %3152, %3147 ]
  %3177 = mul i64 %3172, %3110
  %3178 = getelementptr i8, i8* %3151, i64 %3177
  %3179 = add i64 %3177, 2
  %3180 = getelementptr i8, i8* %3151, i64 %3179
  %3181 = load i8*, i8** %3145, align 8
  %3182 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3173, i64 0, i32 1, i32 0
  %3183 = load i32, i32* %3182, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %3176, i8* %3181, i32 %3183) #12
  %3184 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3113, align 8
  %3185 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3184, i64 0, i32 1, i32 0
  %3186 = load i32, i32* %3185, align 4
  %3187 = icmp eq i32 %3186, 0
  br i1 %3187, label %3262, label %3188

3188:                                             ; preds = %3171
  %3189 = load i8*, i8** %3145, align 8
  %3190 = add i32 %3186, -1
  %3191 = zext i32 %3190 to i64
  %3192 = add nuw nsw i64 %3191, 1
  %3193 = icmp ult i64 %3192, 17
  br i1 %3193, label %3238, label %3194

3194:                                             ; preds = %3188
  %3195 = add i32 %3186, -1
  %3196 = zext i32 %3195 to i64
  %3197 = shl nuw nsw i64 %3196, 1
  %3198 = getelementptr i8, i8* %3180, i64 %3197
  %3199 = getelementptr i8, i8* %3189, i64 4
  %3200 = shl nuw nsw i64 %3196, 2
  %3201 = getelementptr i8, i8* %3199, i64 %3200
  %3202 = icmp ult i8* %3178, %3201
  %3203 = icmp ult i8* %3189, %3198
  %3204 = and i1 %3202, %3203
  br i1 %3204, label %3238, label %3205

3205:                                             ; preds = %3194
  %3206 = and i64 %3192, 15
  %3207 = icmp eq i64 %3206, 0
  %3208 = select i1 %3207, i64 16, i64 %3206
  %3209 = sub nsw i64 %3192, %3208
  %3210 = shl nsw i64 %3209, 2
  %3211 = getelementptr i8, i8* %3189, i64 %3210
  %3212 = shl nsw i64 %3209, 1
  %3213 = getelementptr i8, i8* %3175, i64 %3212
  %3214 = trunc i64 %3209 to i32
  br label %3215

3215:                                             ; preds = %3215, %3205
  %3216 = phi i64 [ 0, %3205 ], [ %3236, %3215 ]
  %3217 = shl i64 %3216, 2
  %3218 = getelementptr i8, i8* %3189, i64 %3217
  %3219 = shl i64 %3216, 1
  %3220 = getelementptr inbounds i8, i8* %3218, i64 3
  %3221 = bitcast i8* %3220 to <64 x i8>*
  %3222 = load <64 x i8>, <64 x i8>* %3221, align 1
  %3223 = shufflevector <64 x i8> %3222, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %3224 = uitofp <16 x i8> %3223 to <16 x float>
  %3225 = fdiv <16 x float> %3224, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %3226 = bitcast i8* %3218 to <64 x i8>*
  %3227 = load <64 x i8>, <64 x i8>* %3226, align 1
  %3228 = shufflevector <64 x i8> %3227, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %3229 = shufflevector <64 x i8> %3227, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %3230 = uitofp <16 x i8> %3228 to <16 x float>
  %3231 = fmul <16 x float> %3225, %3230
  %3232 = fptoui <16 x float> %3231 to <16 x i8>
  %3233 = getelementptr inbounds i8, i8* %3175, i64 %3219
  %3234 = bitcast i8* %3233 to <32 x i8>*
  %3235 = shufflevector <16 x i8> %3232, <16 x i8> %3229, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %3235, <32 x i8>* %3234, align 1
  %3236 = add i64 %3216, 16
  %3237 = icmp eq i64 %3236, %3209
  br i1 %3237, label %3238, label %3215, !llvm.loop !670

3238:                                             ; preds = %3215, %3194, %3188
  %3239 = phi i8* [ %3189, %3194 ], [ %3189, %3188 ], [ %3211, %3215 ]
  %3240 = phi i8* [ %3175, %3194 ], [ %3175, %3188 ], [ %3213, %3215 ]
  %3241 = phi i32 [ 0, %3194 ], [ 0, %3188 ], [ %3214, %3215 ]
  br label %3242

3242:                                             ; preds = %3238, %3242
  %3243 = phi i8* [ %3256, %3242 ], [ %3239, %3238 ]
  %3244 = phi i8* [ %3257, %3242 ], [ %3240, %3238 ]
  %3245 = phi i32 [ %3258, %3242 ], [ %3241, %3238 ]
  %3246 = getelementptr inbounds i8, i8* %3243, i64 3
  %3247 = load i8, i8* %3246, align 1
  %3248 = uitofp i8 %3247 to float
  %3249 = fdiv float %3248, 2.550000e+02
  %3250 = load i8, i8* %3243, align 1
  %3251 = uitofp i8 %3250 to float
  %3252 = fmul float %3249, %3251
  %3253 = fptoui float %3252 to i8
  store i8 %3253, i8* %3244, align 1
  %3254 = load i8, i8* %3246, align 1
  %3255 = getelementptr inbounds i8, i8* %3244, i64 1
  store i8 %3254, i8* %3255, align 1
  %3256 = getelementptr inbounds i8, i8* %3243, i64 4
  %3257 = getelementptr inbounds i8, i8* %3244, i64 2
  %3258 = add nuw i32 %3245, 1
  %3259 = icmp eq i32 %3258, %3186
  br i1 %3259, label %3260, label %3242, !llvm.loop !671

3260:                                             ; preds = %3242
  %3261 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3113, align 8
  br label %3262

3262:                                             ; preds = %3260, %3171
  %3263 = phi %"class.blink::IntRect"* [ %3261, %3260 ], [ %3184, %3171 ]
  %3264 = getelementptr inbounds i16, i16* %3176, i64 %3107
  %3265 = getelementptr inbounds i8, i8* %3175, i64 %3110
  %3266 = add nuw nsw i32 %3174, 1
  %3267 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3263, i64 0, i32 1, i32 1
  %3268 = load i32, i32* %3267, align 4
  %3269 = icmp slt i32 %3266, %3268
  %3270 = add i64 %3172, 1
  br i1 %3269, label %3171, label %3156

3271:                                             ; preds = %3158, %3139
  %3272 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3272, align 4
  br label %13459

3273:                                             ; preds = %2957
  %3274 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3275 = load i32, i32* %3274, align 8
  %3276 = sdiv i32 %3275, 2
  %3277 = sext i32 %3276 to i64
  %3278 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3279 = load i32, i32* %3278, align 8
  %3280 = sext i32 %3279 to i64
  %3281 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3282 = load i8*, i8** %3281, align 8
  %3283 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3284 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3283, align 8
  %3285 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3284, i64 0, i32 0, i32 1
  %3286 = load i32, i32* %3285, align 4
  %3287 = mul nsw i32 %3286, %3275
  %3288 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3289 = load i32, i32* %3288, align 4
  %3290 = add nsw i32 %3287, %3289
  %3291 = sext i32 %3290 to i64
  %3292 = getelementptr inbounds i8, i8* %3282, i64 %3291
  %3293 = bitcast i8* %3292 to i16*
  %3294 = icmp slt i32 %3279, 0
  %3295 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3296 = load i32, i32* %3295, align 8
  %3297 = icmp sgt i32 %3296, 1
  %3298 = and i1 %3294, %3297
  br i1 %3298, label %3299, label %3309

3299:                                             ; preds = %3273
  %3300 = add nsw i32 %3296, -1
  %3301 = sext i32 %3300 to i64
  %3302 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3303 = load i32, i32* %3302, align 4
  %3304 = sext i32 %3303 to i64
  %3305 = mul nsw i64 %3277, %3301
  %3306 = mul i64 %3305, %3304
  %3307 = sub i64 0, %3306
  %3308 = getelementptr inbounds i16, i16* %3293, i64 %3307
  br label %3311

3309:                                             ; preds = %3273
  %3310 = icmp sgt i32 %3296, 0
  br i1 %3310, label %3311, label %3462

3311:                                             ; preds = %3309, %3299
  %3312 = phi i16* [ %3308, %3299 ], [ %3293, %3309 ]
  %3313 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3314 = load i8*, i8** %3313, align 8
  %3315 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3316 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3317

3317:                                             ; preds = %3328, %3311
  %3318 = phi i32 [ %3296, %3311 ], [ %3329, %3328 ]
  %3319 = phi %"class.blink::IntRect"* [ %3284, %3311 ], [ %3330, %3328 ]
  %3320 = phi i32 [ 0, %3311 ], [ %3339, %3328 ]
  %3321 = phi i8* [ %3314, %3311 ], [ %3332, %3328 ]
  %3322 = phi i16* [ %3312, %3311 ], [ %3338, %3328 ]
  %3323 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3319, i64 0, i32 1, i32 1
  %3324 = load i32, i32* %3323, align 4
  %3325 = icmp sgt i32 %3324, 0
  br i1 %3325, label %3341, label %3328

3326:                                             ; preds = %3454
  %3327 = load i32, i32* %3295, align 8
  br label %3328

3328:                                             ; preds = %3326, %3317
  %3329 = phi i32 [ %3318, %3317 ], [ %3327, %3326 ]
  %3330 = phi %"class.blink::IntRect"* [ %3319, %3317 ], [ %3458, %3326 ]
  %3331 = phi i16* [ %3322, %3317 ], [ %3455, %3326 ]
  %3332 = phi i8* [ %3321, %3317 ], [ %3456, %3326 ]
  %3333 = phi i32 [ %3324, %3317 ], [ %3460, %3326 ]
  %3334 = load i32, i32* %3316, align 4
  %3335 = sub nsw i32 %3334, %3333
  %3336 = sext i32 %3335 to i64
  %3337 = mul nsw i64 %3336, %3277
  %3338 = getelementptr inbounds i16, i16* %3331, i64 %3337
  %3339 = add nuw nsw i32 %3320, 1
  %3340 = icmp slt i32 %3339, %3329
  br i1 %3340, label %3317, label %3462

3341:                                             ; preds = %3317, %3454
  %3342 = phi %"class.blink::IntRect"* [ %3458, %3454 ], [ %3319, %3317 ]
  %3343 = phi i32 [ %3457, %3454 ], [ 0, %3317 ]
  %3344 = phi i8* [ %3456, %3454 ], [ %3321, %3317 ]
  %3345 = phi i16* [ %3455, %3454 ], [ %3322, %3317 ]
  %3346 = load i8*, i8** %3315, align 8
  %3347 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3342, i64 0, i32 1, i32 0
  %3348 = load i32, i32* %3347, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %3345, i8* %3346, i32 %3348) #12
  %3349 = load i8*, i8** %3315, align 8
  %3350 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3283, align 8
  %3351 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3350, i64 0, i32 1, i32 0
  %3352 = load i32, i32* %3351, align 4
  %3353 = and i32 %3352, -4
  %3354 = icmp eq i32 %3353, 0
  br i1 %3354, label %3427, label %3355

3355:                                             ; preds = %3341, %3355
  %3356 = phi i8* [ %3423, %3355 ], [ %3349, %3341 ]
  %3357 = phi i8* [ %3424, %3355 ], [ %3344, %3341 ]
  %3358 = phi i32 [ %3425, %3355 ], [ 0, %3341 ]
  %3359 = getelementptr inbounds i8, i8* %3356, i64 15
  %3360 = load i8, i8* %3359, align 1
  %3361 = icmp eq i8 %3360, 0
  %3362 = uitofp i8 %3360 to double
  %3363 = fptrunc double %3362 to float
  %3364 = select i1 %3361, float 2.550000e+02, float %3363
  %3365 = getelementptr inbounds i8, i8* %3356, i64 11
  %3366 = load i8, i8* %3365, align 1
  %3367 = icmp eq i8 %3366, 0
  %3368 = uitofp i8 %3366 to double
  %3369 = fptrunc double %3368 to float
  %3370 = select i1 %3367, float 2.550000e+02, float %3369
  %3371 = getelementptr inbounds i8, i8* %3356, i64 7
  %3372 = load i8, i8* %3371, align 1
  %3373 = icmp eq i8 %3372, 0
  %3374 = uitofp i8 %3372 to double
  %3375 = fptrunc double %3374 to float
  %3376 = select i1 %3373, float 2.550000e+02, float %3375
  %3377 = getelementptr inbounds i8, i8* %3356, i64 3
  %3378 = load i8, i8* %3377, align 1
  %3379 = icmp eq i8 %3378, 0
  %3380 = uitofp i8 %3378 to double
  %3381 = fptrunc double %3380 to float
  %3382 = select i1 %3379, float 2.550000e+02, float %3381
  %3383 = insertelement <4 x float> undef, float %3382, i32 0
  %3384 = insertelement <4 x float> %3383, float %3376, i32 1
  %3385 = insertelement <4 x float> %3384, float %3370, i32 2
  %3386 = insertelement <4 x float> %3385, float %3364, i32 3
  %3387 = getelementptr inbounds i8, i8* %3356, i64 12
  %3388 = load i8, i8* %3387, align 1
  %3389 = uitofp i8 %3388 to float
  %3390 = getelementptr inbounds i8, i8* %3356, i64 8
  %3391 = load i8, i8* %3390, align 1
  %3392 = uitofp i8 %3391 to float
  %3393 = getelementptr inbounds i8, i8* %3356, i64 4
  %3394 = load i8, i8* %3393, align 1
  %3395 = uitofp i8 %3394 to float
  %3396 = load i8, i8* %3356, align 1
  %3397 = uitofp i8 %3396 to float
  %3398 = insertelement <4 x float> undef, float %3397, i32 0
  %3399 = insertelement <4 x float> %3398, float %3395, i32 1
  %3400 = insertelement <4 x float> %3399, float %3392, i32 2
  %3401 = insertelement <4 x float> %3400, float %3389, i32 3
  %3402 = fdiv <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %3386
  %3403 = fmul <4 x float> %3402, %3401
  %3404 = extractelement <4 x float> %3403, i32 0
  %3405 = fptoui float %3404 to i8
  store i8 %3405, i8* %3357, align 1
  %3406 = load i8, i8* %3377, align 1
  %3407 = getelementptr inbounds i8, i8* %3357, i64 1
  store i8 %3406, i8* %3407, align 1
  %3408 = extractelement <4 x float> %3403, i32 1
  %3409 = fptoui float %3408 to i8
  %3410 = getelementptr inbounds i8, i8* %3357, i64 2
  store i8 %3409, i8* %3410, align 1
  %3411 = load i8, i8* %3371, align 1
  %3412 = getelementptr inbounds i8, i8* %3357, i64 3
  store i8 %3411, i8* %3412, align 1
  %3413 = extractelement <4 x float> %3403, i32 2
  %3414 = fptoui float %3413 to i8
  %3415 = getelementptr inbounds i8, i8* %3357, i64 4
  store i8 %3414, i8* %3415, align 1
  %3416 = load i8, i8* %3365, align 1
  %3417 = getelementptr inbounds i8, i8* %3357, i64 5
  store i8 %3416, i8* %3417, align 1
  %3418 = extractelement <4 x float> %3403, i32 3
  %3419 = fptoui float %3418 to i8
  %3420 = getelementptr inbounds i8, i8* %3357, i64 6
  store i8 %3419, i8* %3420, align 1
  %3421 = load i8, i8* %3359, align 1
  %3422 = getelementptr inbounds i8, i8* %3357, i64 7
  store i8 %3421, i8* %3422, align 1
  %3423 = getelementptr inbounds i8, i8* %3356, i64 16
  %3424 = getelementptr inbounds i8, i8* %3357, i64 8
  %3425 = add nuw i32 %3358, 4
  %3426 = icmp ult i32 %3425, %3353
  br i1 %3426, label %3355, label %3427

3427:                                             ; preds = %3355, %3341
  %3428 = phi i8* [ %3349, %3341 ], [ %3423, %3355 ]
  %3429 = phi i8* [ %3344, %3341 ], [ %3424, %3355 ]
  %3430 = sub i32 %3352, %3353
  %3431 = icmp eq i32 %3430, 0
  br i1 %3431, label %3454, label %3432

3432:                                             ; preds = %3427, %3442
  %3433 = phi i32 [ %3452, %3442 ], [ 0, %3427 ]
  %3434 = phi i8* [ %3451, %3442 ], [ %3429, %3427 ]
  %3435 = phi i8* [ %3450, %3442 ], [ %3428, %3427 ]
  %3436 = getelementptr inbounds i8, i8* %3435, i64 3
  %3437 = load i8, i8* %3436, align 1
  %3438 = icmp eq i8 %3437, 0
  br i1 %3438, label %3442, label %3439

3439:                                             ; preds = %3432
  %3440 = uitofp i8 %3437 to float
  %3441 = fdiv float 2.550000e+02, %3440
  br label %3442

3442:                                             ; preds = %3439, %3432
  %3443 = phi float [ %3441, %3439 ], [ 1.000000e+00, %3432 ]
  %3444 = load i8, i8* %3435, align 1
  %3445 = uitofp i8 %3444 to float
  %3446 = fmul float %3443, %3445
  %3447 = fptoui float %3446 to i8
  store i8 %3447, i8* %3434, align 1
  %3448 = load i8, i8* %3436, align 1
  %3449 = getelementptr inbounds i8, i8* %3434, i64 1
  store i8 %3448, i8* %3449, align 1
  %3450 = getelementptr inbounds i8, i8* %3435, i64 4
  %3451 = getelementptr inbounds i8, i8* %3434, i64 2
  %3452 = add nuw i32 %3433, 1
  %3453 = icmp eq i32 %3452, %3430
  br i1 %3453, label %3454, label %3432

3454:                                             ; preds = %3442, %3427
  %3455 = getelementptr inbounds i16, i16* %3345, i64 %3277
  %3456 = getelementptr inbounds i8, i8* %3344, i64 %3280
  %3457 = add nuw nsw i32 %3343, 1
  %3458 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3283, align 8
  %3459 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3458, i64 0, i32 1, i32 1
  %3460 = load i32, i32* %3459, align 4
  %3461 = icmp slt i32 %3457, %3460
  br i1 %3461, label %3341, label %3326

3462:                                             ; preds = %3328, %3309
  %3463 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3463, align 4
  br label %13459

3464:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %3465
    i32 1, label %3682
    i32 2, label %3901
  ]

3465:                                             ; preds = %3464
  %3466 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3467 = load i32, i32* %3466, align 8
  %3468 = sdiv i32 %3467, 2
  %3469 = sext i32 %3468 to i64
  %3470 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3471 = load i32, i32* %3470, align 8
  %3472 = sdiv i32 %3471, 2
  %3473 = sext i32 %3472 to i64
  %3474 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3475 = load i8*, i8** %3474, align 8
  %3476 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3477 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3476, align 8
  %3478 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3477, i64 0, i32 0, i32 1
  %3479 = load i32, i32* %3478, align 4
  %3480 = mul nsw i32 %3479, %3467
  %3481 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3482 = load i32, i32* %3481, align 4
  %3483 = add nsw i32 %3480, %3482
  %3484 = sext i32 %3483 to i64
  %3485 = getelementptr inbounds i8, i8* %3475, i64 %3484
  %3486 = bitcast i8* %3485 to i16*
  %3487 = icmp slt i32 %3471, 0
  %3488 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3489 = load i32, i32* %3488, align 8
  %3490 = icmp sgt i32 %3489, 1
  %3491 = and i1 %3487, %3490
  br i1 %3491, label %3492, label %3502

3492:                                             ; preds = %3465
  %3493 = add nsw i32 %3489, -1
  %3494 = sext i32 %3493 to i64
  %3495 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3496 = load i32, i32* %3495, align 4
  %3497 = sext i32 %3496 to i64
  %3498 = mul nsw i64 %3469, %3494
  %3499 = mul i64 %3498, %3497
  %3500 = sub i64 0, %3499
  %3501 = getelementptr inbounds i16, i16* %3486, i64 %3500
  br label %3504

3502:                                             ; preds = %3465
  %3503 = icmp sgt i32 %3489, 0
  br i1 %3503, label %3504, label %3680

3504:                                             ; preds = %3502, %3492
  %3505 = phi i16* [ %3501, %3492 ], [ %3486, %3502 ]
  %3506 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3507 = bitcast i8** %3506 to i16**
  %3508 = load i16*, i16** %3507, align 8
  %3509 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3510 = bitcast i8** %3509 to float**
  %3511 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3512

3512:                                             ; preds = %3524, %3504
  %3513 = phi i32 [ %3489, %3504 ], [ %3525, %3524 ]
  %3514 = phi %"class.blink::IntRect"* [ %3477, %3504 ], [ %3526, %3524 ]
  %3515 = phi %"class.blink::IntRect"* [ %3477, %3504 ], [ %3527, %3524 ]
  %3516 = phi i32 [ 0, %3504 ], [ %3536, %3524 ]
  %3517 = phi i16* [ %3508, %3504 ], [ %3529, %3524 ]
  %3518 = phi i16* [ %3505, %3504 ], [ %3535, %3524 ]
  %3519 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3515, i64 0, i32 1, i32 1
  %3520 = load i32, i32* %3519, align 4
  %3521 = icmp sgt i32 %3520, 0
  br i1 %3521, label %3538, label %3524

3522:                                             ; preds = %3672
  %3523 = load i32, i32* %3488, align 8
  br label %3524

3524:                                             ; preds = %3522, %3512
  %3525 = phi i32 [ %3513, %3512 ], [ %3523, %3522 ]
  %3526 = phi %"class.blink::IntRect"* [ %3514, %3512 ], [ %3673, %3522 ]
  %3527 = phi %"class.blink::IntRect"* [ %3515, %3512 ], [ %3673, %3522 ]
  %3528 = phi i16* [ %3518, %3512 ], [ %3674, %3522 ]
  %3529 = phi i16* [ %3517, %3512 ], [ %3675, %3522 ]
  %3530 = phi i32 [ %3520, %3512 ], [ %3678, %3522 ]
  %3531 = load i32, i32* %3511, align 4
  %3532 = sub nsw i32 %3531, %3530
  %3533 = sext i32 %3532 to i64
  %3534 = mul nsw i64 %3533, %3469
  %3535 = getelementptr inbounds i16, i16* %3528, i64 %3534
  %3536 = add nuw nsw i32 %3516, 1
  %3537 = icmp slt i32 %3536, %3525
  br i1 %3537, label %3512, label %3680

3538:                                             ; preds = %3512, %3672
  %3539 = phi %"class.blink::IntRect"* [ %3673, %3672 ], [ %3514, %3512 ]
  %3540 = phi %"class.blink::IntRect"* [ %3673, %3672 ], [ %3515, %3512 ]
  %3541 = phi i32 [ %3676, %3672 ], [ 0, %3512 ]
  %3542 = phi i16* [ %3675, %3672 ], [ %3517, %3512 ]
  %3543 = phi i16* [ %3674, %3672 ], [ %3518, %3512 ]
  %3544 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3540, i64 0, i32 1, i32 0
  %3545 = load i32, i32* %3544, align 4
  %3546 = icmp eq i32 %3545, 0
  br i1 %3546, label %3672, label %3547

3547:                                             ; preds = %3538
  %3548 = load float*, float** %3510, align 8
  br label %3549

3549:                                             ; preds = %3549, %3547
  %3550 = phi i32 [ %3625, %3549 ], [ 0, %3547 ]
  %3551 = phi i16* [ %3623, %3549 ], [ %3543, %3547 ]
  %3552 = phi float* [ %3624, %3549 ], [ %3548, %3547 ]
  %3553 = load i16, i16* %3551, align 2
  %3554 = zext i16 %3553 to i32
  %3555 = lshr i32 %3554, 10
  %3556 = zext i32 %3555 to i64
  %3557 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3556
  %3558 = load i16, i16* %3557, align 2
  %3559 = zext i16 %3558 to i32
  %3560 = and i32 %3554, 1023
  %3561 = add nuw nsw i32 %3560, %3559
  %3562 = zext i32 %3561 to i64
  %3563 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3562
  %3564 = load i32, i32* %3563, align 4
  %3565 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3556
  %3566 = load i32, i32* %3565, align 4
  %3567 = add i32 %3566, %3564
  %3568 = bitcast float* %3552 to i32*
  store i32 %3567, i32* %3568, align 4
  %3569 = getelementptr inbounds i16, i16* %3551, i64 1
  %3570 = load i16, i16* %3569, align 2
  %3571 = zext i16 %3570 to i32
  %3572 = lshr i32 %3571, 10
  %3573 = zext i32 %3572 to i64
  %3574 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3573
  %3575 = load i16, i16* %3574, align 2
  %3576 = zext i16 %3575 to i32
  %3577 = and i32 %3571, 1023
  %3578 = add nuw nsw i32 %3577, %3576
  %3579 = zext i32 %3578 to i64
  %3580 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3579
  %3581 = load i32, i32* %3580, align 4
  %3582 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3573
  %3583 = load i32, i32* %3582, align 4
  %3584 = add i32 %3583, %3581
  %3585 = getelementptr inbounds float, float* %3552, i64 1
  %3586 = bitcast float* %3585 to i32*
  store i32 %3584, i32* %3586, align 4
  %3587 = getelementptr inbounds i16, i16* %3551, i64 2
  %3588 = load i16, i16* %3587, align 2
  %3589 = zext i16 %3588 to i32
  %3590 = lshr i32 %3589, 10
  %3591 = zext i32 %3590 to i64
  %3592 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3591
  %3593 = load i16, i16* %3592, align 2
  %3594 = zext i16 %3593 to i32
  %3595 = and i32 %3589, 1023
  %3596 = add nuw nsw i32 %3595, %3594
  %3597 = zext i32 %3596 to i64
  %3598 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3597
  %3599 = load i32, i32* %3598, align 4
  %3600 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3591
  %3601 = load i32, i32* %3600, align 4
  %3602 = add i32 %3601, %3599
  %3603 = getelementptr inbounds float, float* %3552, i64 2
  %3604 = bitcast float* %3603 to i32*
  store i32 %3602, i32* %3604, align 4
  %3605 = getelementptr inbounds i16, i16* %3551, i64 3
  %3606 = load i16, i16* %3605, align 2
  %3607 = zext i16 %3606 to i32
  %3608 = lshr i32 %3607, 10
  %3609 = zext i32 %3608 to i64
  %3610 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3609
  %3611 = load i16, i16* %3610, align 2
  %3612 = zext i16 %3611 to i32
  %3613 = and i32 %3607, 1023
  %3614 = add nuw nsw i32 %3613, %3612
  %3615 = zext i32 %3614 to i64
  %3616 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3615
  %3617 = load i32, i32* %3616, align 4
  %3618 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3609
  %3619 = load i32, i32* %3618, align 4
  %3620 = add i32 %3619, %3617
  %3621 = getelementptr inbounds float, float* %3552, i64 3
  %3622 = bitcast float* %3621 to i32*
  store i32 %3620, i32* %3622, align 4
  %3623 = getelementptr inbounds i16, i16* %3551, i64 4
  %3624 = getelementptr inbounds float, float* %3552, i64 4
  %3625 = add nuw i32 %3550, 1
  %3626 = icmp eq i32 %3625, %3545
  br i1 %3626, label %3627, label %3549

3627:                                             ; preds = %3549
  %3628 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3476, align 8
  %3629 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3628, i64 0, i32 1, i32 0
  %3630 = load i32, i32* %3629, align 4
  %3631 = icmp eq i32 %3630, 0
  br i1 %3631, label %3672, label %3632

3632:                                             ; preds = %3627
  %3633 = load float*, float** %3510, align 8
  br label %3634

3634:                                             ; preds = %3634, %3632
  %3635 = phi i32 [ %3668, %3634 ], [ 0, %3632 ]
  %3636 = phi float* [ %3666, %3634 ], [ %3633, %3632 ]
  %3637 = phi i16* [ %3667, %3634 ], [ %3542, %3632 ]
  %3638 = bitcast float* %3636 to i32*
  %3639 = load i32, i32* %3638, align 4
  %3640 = lshr i32 %3639, 23
  %3641 = zext i32 %3640 to i64
  %3642 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3641
  %3643 = load i16, i16* %3642, align 2
  %3644 = and i32 %3639, 8388607
  %3645 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3641
  %3646 = load i8, i8* %3645, align 1
  %3647 = zext i8 %3646 to i32
  %3648 = lshr i32 %3644, %3647
  %3649 = trunc i32 %3648 to i16
  %3650 = add i16 %3643, %3649
  store i16 %3650, i16* %3637, align 2
  %3651 = getelementptr inbounds float, float* %3636, i64 3
  %3652 = bitcast float* %3651 to i32*
  %3653 = load i32, i32* %3652, align 4
  %3654 = lshr i32 %3653, 23
  %3655 = zext i32 %3654 to i64
  %3656 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3655
  %3657 = load i16, i16* %3656, align 2
  %3658 = and i32 %3653, 8388607
  %3659 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3655
  %3660 = load i8, i8* %3659, align 1
  %3661 = zext i8 %3660 to i32
  %3662 = lshr i32 %3658, %3661
  %3663 = trunc i32 %3662 to i16
  %3664 = add i16 %3657, %3663
  %3665 = getelementptr inbounds i16, i16* %3637, i64 1
  store i16 %3664, i16* %3665, align 2
  %3666 = getelementptr inbounds float, float* %3636, i64 4
  %3667 = getelementptr inbounds i16, i16* %3637, i64 2
  %3668 = add nuw i32 %3635, 1
  %3669 = icmp eq i32 %3668, %3630
  br i1 %3669, label %3670, label %3634

3670:                                             ; preds = %3634
  %3671 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3476, align 8
  br label %3672

3672:                                             ; preds = %3670, %3627, %3538
  %3673 = phi %"class.blink::IntRect"* [ %3671, %3670 ], [ %3628, %3627 ], [ %3539, %3538 ]
  %3674 = getelementptr inbounds i16, i16* %3543, i64 %3469
  %3675 = getelementptr inbounds i16, i16* %3542, i64 %3473
  %3676 = add nuw nsw i32 %3541, 1
  %3677 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3673, i64 0, i32 1, i32 1
  %3678 = load i32, i32* %3677, align 4
  %3679 = icmp slt i32 %3676, %3678
  br i1 %3679, label %3538, label %3522

3680:                                             ; preds = %3524, %3502
  %3681 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3681, align 4
  br label %13459

3682:                                             ; preds = %3464
  %3683 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3684 = load i32, i32* %3683, align 8
  %3685 = sdiv i32 %3684, 2
  %3686 = sext i32 %3685 to i64
  %3687 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3688 = load i32, i32* %3687, align 8
  %3689 = sdiv i32 %3688, 2
  %3690 = sext i32 %3689 to i64
  %3691 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3692 = load i8*, i8** %3691, align 8
  %3693 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3694 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3693, align 8
  %3695 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3694, i64 0, i32 0, i32 1
  %3696 = load i32, i32* %3695, align 4
  %3697 = mul nsw i32 %3696, %3684
  %3698 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3699 = load i32, i32* %3698, align 4
  %3700 = add nsw i32 %3697, %3699
  %3701 = sext i32 %3700 to i64
  %3702 = getelementptr inbounds i8, i8* %3692, i64 %3701
  %3703 = bitcast i8* %3702 to i16*
  %3704 = icmp slt i32 %3688, 0
  %3705 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3706 = load i32, i32* %3705, align 8
  %3707 = icmp sgt i32 %3706, 1
  %3708 = and i1 %3704, %3707
  br i1 %3708, label %3709, label %3719

3709:                                             ; preds = %3682
  %3710 = add nsw i32 %3706, -1
  %3711 = sext i32 %3710 to i64
  %3712 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3713 = load i32, i32* %3712, align 4
  %3714 = sext i32 %3713 to i64
  %3715 = mul nsw i64 %3686, %3711
  %3716 = mul i64 %3715, %3714
  %3717 = sub i64 0, %3716
  %3718 = getelementptr inbounds i16, i16* %3703, i64 %3717
  br label %3721

3719:                                             ; preds = %3682
  %3720 = icmp sgt i32 %3706, 0
  br i1 %3720, label %3721, label %3899

3721:                                             ; preds = %3719, %3709
  %3722 = phi i16* [ %3718, %3709 ], [ %3703, %3719 ]
  %3723 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3724 = bitcast i8** %3723 to i16**
  %3725 = load i16*, i16** %3724, align 8
  %3726 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3727 = bitcast i8** %3726 to float**
  %3728 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3729

3729:                                             ; preds = %3741, %3721
  %3730 = phi i32 [ %3706, %3721 ], [ %3742, %3741 ]
  %3731 = phi %"class.blink::IntRect"* [ %3694, %3721 ], [ %3743, %3741 ]
  %3732 = phi %"class.blink::IntRect"* [ %3694, %3721 ], [ %3744, %3741 ]
  %3733 = phi i32 [ 0, %3721 ], [ %3753, %3741 ]
  %3734 = phi i16* [ %3725, %3721 ], [ %3746, %3741 ]
  %3735 = phi i16* [ %3722, %3721 ], [ %3752, %3741 ]
  %3736 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3732, i64 0, i32 1, i32 1
  %3737 = load i32, i32* %3736, align 4
  %3738 = icmp sgt i32 %3737, 0
  br i1 %3738, label %3755, label %3741

3739:                                             ; preds = %3891
  %3740 = load i32, i32* %3705, align 8
  br label %3741

3741:                                             ; preds = %3739, %3729
  %3742 = phi i32 [ %3730, %3729 ], [ %3740, %3739 ]
  %3743 = phi %"class.blink::IntRect"* [ %3731, %3729 ], [ %3892, %3739 ]
  %3744 = phi %"class.blink::IntRect"* [ %3732, %3729 ], [ %3892, %3739 ]
  %3745 = phi i16* [ %3735, %3729 ], [ %3893, %3739 ]
  %3746 = phi i16* [ %3734, %3729 ], [ %3894, %3739 ]
  %3747 = phi i32 [ %3737, %3729 ], [ %3897, %3739 ]
  %3748 = load i32, i32* %3728, align 4
  %3749 = sub nsw i32 %3748, %3747
  %3750 = sext i32 %3749 to i64
  %3751 = mul nsw i64 %3750, %3686
  %3752 = getelementptr inbounds i16, i16* %3745, i64 %3751
  %3753 = add nuw nsw i32 %3733, 1
  %3754 = icmp slt i32 %3753, %3742
  br i1 %3754, label %3729, label %3899

3755:                                             ; preds = %3729, %3891
  %3756 = phi %"class.blink::IntRect"* [ %3892, %3891 ], [ %3731, %3729 ]
  %3757 = phi %"class.blink::IntRect"* [ %3892, %3891 ], [ %3732, %3729 ]
  %3758 = phi i32 [ %3895, %3891 ], [ 0, %3729 ]
  %3759 = phi i16* [ %3894, %3891 ], [ %3734, %3729 ]
  %3760 = phi i16* [ %3893, %3891 ], [ %3735, %3729 ]
  %3761 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3757, i64 0, i32 1, i32 0
  %3762 = load i32, i32* %3761, align 4
  %3763 = icmp eq i32 %3762, 0
  br i1 %3763, label %3891, label %3764

3764:                                             ; preds = %3755
  %3765 = load float*, float** %3727, align 8
  br label %3766

3766:                                             ; preds = %3766, %3764
  %3767 = phi i32 [ %3842, %3766 ], [ 0, %3764 ]
  %3768 = phi i16* [ %3840, %3766 ], [ %3760, %3764 ]
  %3769 = phi float* [ %3841, %3766 ], [ %3765, %3764 ]
  %3770 = load i16, i16* %3768, align 2
  %3771 = zext i16 %3770 to i32
  %3772 = lshr i32 %3771, 10
  %3773 = zext i32 %3772 to i64
  %3774 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3773
  %3775 = load i16, i16* %3774, align 2
  %3776 = zext i16 %3775 to i32
  %3777 = and i32 %3771, 1023
  %3778 = add nuw nsw i32 %3777, %3776
  %3779 = zext i32 %3778 to i64
  %3780 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3779
  %3781 = load i32, i32* %3780, align 4
  %3782 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3773
  %3783 = load i32, i32* %3782, align 4
  %3784 = add i32 %3783, %3781
  %3785 = bitcast float* %3769 to i32*
  store i32 %3784, i32* %3785, align 4
  %3786 = getelementptr inbounds i16, i16* %3768, i64 1
  %3787 = load i16, i16* %3786, align 2
  %3788 = zext i16 %3787 to i32
  %3789 = lshr i32 %3788, 10
  %3790 = zext i32 %3789 to i64
  %3791 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3790
  %3792 = load i16, i16* %3791, align 2
  %3793 = zext i16 %3792 to i32
  %3794 = and i32 %3788, 1023
  %3795 = add nuw nsw i32 %3794, %3793
  %3796 = zext i32 %3795 to i64
  %3797 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3796
  %3798 = load i32, i32* %3797, align 4
  %3799 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3790
  %3800 = load i32, i32* %3799, align 4
  %3801 = add i32 %3800, %3798
  %3802 = getelementptr inbounds float, float* %3769, i64 1
  %3803 = bitcast float* %3802 to i32*
  store i32 %3801, i32* %3803, align 4
  %3804 = getelementptr inbounds i16, i16* %3768, i64 2
  %3805 = load i16, i16* %3804, align 2
  %3806 = zext i16 %3805 to i32
  %3807 = lshr i32 %3806, 10
  %3808 = zext i32 %3807 to i64
  %3809 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3808
  %3810 = load i16, i16* %3809, align 2
  %3811 = zext i16 %3810 to i32
  %3812 = and i32 %3806, 1023
  %3813 = add nuw nsw i32 %3812, %3811
  %3814 = zext i32 %3813 to i64
  %3815 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3814
  %3816 = load i32, i32* %3815, align 4
  %3817 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3808
  %3818 = load i32, i32* %3817, align 4
  %3819 = add i32 %3818, %3816
  %3820 = getelementptr inbounds float, float* %3769, i64 2
  %3821 = bitcast float* %3820 to i32*
  store i32 %3819, i32* %3821, align 4
  %3822 = getelementptr inbounds i16, i16* %3768, i64 3
  %3823 = load i16, i16* %3822, align 2
  %3824 = zext i16 %3823 to i32
  %3825 = lshr i32 %3824, 10
  %3826 = zext i32 %3825 to i64
  %3827 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3826
  %3828 = load i16, i16* %3827, align 2
  %3829 = zext i16 %3828 to i32
  %3830 = and i32 %3824, 1023
  %3831 = add nuw nsw i32 %3830, %3829
  %3832 = zext i32 %3831 to i64
  %3833 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3832
  %3834 = load i32, i32* %3833, align 4
  %3835 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3826
  %3836 = load i32, i32* %3835, align 4
  %3837 = add i32 %3836, %3834
  %3838 = getelementptr inbounds float, float* %3769, i64 3
  %3839 = bitcast float* %3838 to i32*
  store i32 %3837, i32* %3839, align 4
  %3840 = getelementptr inbounds i16, i16* %3768, i64 4
  %3841 = getelementptr inbounds float, float* %3769, i64 4
  %3842 = add nuw i32 %3767, 1
  %3843 = icmp eq i32 %3842, %3762
  br i1 %3843, label %3844, label %3766

3844:                                             ; preds = %3766
  %3845 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3693, align 8
  %3846 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3845, i64 0, i32 1, i32 0
  %3847 = load i32, i32* %3846, align 4
  %3848 = icmp eq i32 %3847, 0
  br i1 %3848, label %3891, label %3849

3849:                                             ; preds = %3844
  %3850 = load float*, float** %3727, align 8
  br label %3851

3851:                                             ; preds = %3851, %3849
  %3852 = phi float* [ %3885, %3851 ], [ %3850, %3849 ]
  %3853 = phi i32 [ %3887, %3851 ], [ 0, %3849 ]
  %3854 = phi i16* [ %3886, %3851 ], [ %3759, %3849 ]
  %3855 = getelementptr inbounds float, float* %3852, i64 3
  %3856 = load float, float* %3855, align 4
  %3857 = load float, float* %3852, align 4
  %3858 = fmul float %3856, %3857
  %3859 = bitcast float %3858 to i32
  %3860 = lshr i32 %3859, 23
  %3861 = zext i32 %3860 to i64
  %3862 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3861
  %3863 = load i16, i16* %3862, align 2
  %3864 = and i32 %3859, 8388607
  %3865 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3861
  %3866 = load i8, i8* %3865, align 1
  %3867 = zext i8 %3866 to i32
  %3868 = lshr i32 %3864, %3867
  %3869 = trunc i32 %3868 to i16
  %3870 = add i16 %3863, %3869
  store i16 %3870, i16* %3854, align 2
  %3871 = bitcast float* %3855 to i32*
  %3872 = load i32, i32* %3871, align 4
  %3873 = lshr i32 %3872, 23
  %3874 = zext i32 %3873 to i64
  %3875 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %3874
  %3876 = load i16, i16* %3875, align 2
  %3877 = and i32 %3872, 8388607
  %3878 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %3874
  %3879 = load i8, i8* %3878, align 1
  %3880 = zext i8 %3879 to i32
  %3881 = lshr i32 %3877, %3880
  %3882 = trunc i32 %3881 to i16
  %3883 = add i16 %3876, %3882
  %3884 = getelementptr inbounds i16, i16* %3854, i64 1
  store i16 %3883, i16* %3884, align 2
  %3885 = getelementptr inbounds float, float* %3852, i64 4
  %3886 = getelementptr inbounds i16, i16* %3854, i64 2
  %3887 = add nuw i32 %3853, 1
  %3888 = icmp eq i32 %3887, %3847
  br i1 %3888, label %3889, label %3851

3889:                                             ; preds = %3851
  %3890 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3693, align 8
  br label %3891

3891:                                             ; preds = %3889, %3844, %3755
  %3892 = phi %"class.blink::IntRect"* [ %3890, %3889 ], [ %3845, %3844 ], [ %3756, %3755 ]
  %3893 = getelementptr inbounds i16, i16* %3760, i64 %3686
  %3894 = getelementptr inbounds i16, i16* %3759, i64 %3690
  %3895 = add nuw nsw i32 %3758, 1
  %3896 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3892, i64 0, i32 1, i32 1
  %3897 = load i32, i32* %3896, align 4
  %3898 = icmp slt i32 %3895, %3897
  br i1 %3898, label %3755, label %3739

3899:                                             ; preds = %3741, %3719
  %3900 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %3900, align 4
  br label %13459

3901:                                             ; preds = %3464
  %3902 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %3903 = load i32, i32* %3902, align 8
  %3904 = sdiv i32 %3903, 2
  %3905 = sext i32 %3904 to i64
  %3906 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %3907 = load i32, i32* %3906, align 8
  %3908 = sdiv i32 %3907, 2
  %3909 = sext i32 %3908 to i64
  %3910 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %3911 = load i8*, i8** %3910, align 8
  %3912 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %3913 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3912, align 8
  %3914 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3913, i64 0, i32 0, i32 1
  %3915 = load i32, i32* %3914, align 4
  %3916 = mul nsw i32 %3915, %3903
  %3917 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %3918 = load i32, i32* %3917, align 4
  %3919 = add nsw i32 %3916, %3918
  %3920 = sext i32 %3919 to i64
  %3921 = getelementptr inbounds i8, i8* %3911, i64 %3920
  %3922 = bitcast i8* %3921 to i16*
  %3923 = icmp slt i32 %3907, 0
  %3924 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %3925 = load i32, i32* %3924, align 8
  %3926 = icmp sgt i32 %3925, 1
  %3927 = and i1 %3923, %3926
  br i1 %3927, label %3928, label %3938

3928:                                             ; preds = %3901
  %3929 = add nsw i32 %3925, -1
  %3930 = sext i32 %3929 to i64
  %3931 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %3932 = load i32, i32* %3931, align 4
  %3933 = sext i32 %3932 to i64
  %3934 = mul nsw i64 %3905, %3930
  %3935 = mul i64 %3934, %3933
  %3936 = sub i64 0, %3935
  %3937 = getelementptr inbounds i16, i16* %3922, i64 %3936
  br label %3940

3938:                                             ; preds = %3901
  %3939 = icmp sgt i32 %3925, 0
  br i1 %3939, label %3940, label %4121

3940:                                             ; preds = %3938, %3928
  %3941 = phi i16* [ %3937, %3928 ], [ %3922, %3938 ]
  %3942 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %3943 = bitcast i8** %3942 to i16**
  %3944 = load i16*, i16** %3943, align 8
  %3945 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3946 = bitcast i8** %3945 to float**
  %3947 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %3948

3948:                                             ; preds = %3960, %3940
  %3949 = phi i32 [ %3925, %3940 ], [ %3961, %3960 ]
  %3950 = phi %"class.blink::IntRect"* [ %3913, %3940 ], [ %3962, %3960 ]
  %3951 = phi %"class.blink::IntRect"* [ %3913, %3940 ], [ %3963, %3960 ]
  %3952 = phi i32 [ 0, %3940 ], [ %3972, %3960 ]
  %3953 = phi i16* [ %3944, %3940 ], [ %3965, %3960 ]
  %3954 = phi i16* [ %3941, %3940 ], [ %3971, %3960 ]
  %3955 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3951, i64 0, i32 1, i32 1
  %3956 = load i32, i32* %3955, align 4
  %3957 = icmp sgt i32 %3956, 0
  br i1 %3957, label %3974, label %3960

3958:                                             ; preds = %4113
  %3959 = load i32, i32* %3924, align 8
  br label %3960

3960:                                             ; preds = %3958, %3948
  %3961 = phi i32 [ %3949, %3948 ], [ %3959, %3958 ]
  %3962 = phi %"class.blink::IntRect"* [ %3950, %3948 ], [ %4114, %3958 ]
  %3963 = phi %"class.blink::IntRect"* [ %3951, %3948 ], [ %4114, %3958 ]
  %3964 = phi i16* [ %3954, %3948 ], [ %4115, %3958 ]
  %3965 = phi i16* [ %3953, %3948 ], [ %4116, %3958 ]
  %3966 = phi i32 [ %3956, %3948 ], [ %4119, %3958 ]
  %3967 = load i32, i32* %3947, align 4
  %3968 = sub nsw i32 %3967, %3966
  %3969 = sext i32 %3968 to i64
  %3970 = mul nsw i64 %3969, %3905
  %3971 = getelementptr inbounds i16, i16* %3964, i64 %3970
  %3972 = add nuw nsw i32 %3952, 1
  %3973 = icmp slt i32 %3972, %3961
  br i1 %3973, label %3948, label %4121

3974:                                             ; preds = %3948, %4113
  %3975 = phi %"class.blink::IntRect"* [ %4114, %4113 ], [ %3950, %3948 ]
  %3976 = phi %"class.blink::IntRect"* [ %4114, %4113 ], [ %3951, %3948 ]
  %3977 = phi i32 [ %4117, %4113 ], [ 0, %3948 ]
  %3978 = phi i16* [ %4116, %4113 ], [ %3953, %3948 ]
  %3979 = phi i16* [ %4115, %4113 ], [ %3954, %3948 ]
  %3980 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3976, i64 0, i32 1, i32 0
  %3981 = load i32, i32* %3980, align 4
  %3982 = icmp eq i32 %3981, 0
  br i1 %3982, label %4113, label %3983

3983:                                             ; preds = %3974
  %3984 = load float*, float** %3946, align 8
  br label %3985

3985:                                             ; preds = %3985, %3983
  %3986 = phi i32 [ %4061, %3985 ], [ 0, %3983 ]
  %3987 = phi i16* [ %4059, %3985 ], [ %3979, %3983 ]
  %3988 = phi float* [ %4060, %3985 ], [ %3984, %3983 ]
  %3989 = load i16, i16* %3987, align 2
  %3990 = zext i16 %3989 to i32
  %3991 = lshr i32 %3990, 10
  %3992 = zext i32 %3991 to i64
  %3993 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %3992
  %3994 = load i16, i16* %3993, align 2
  %3995 = zext i16 %3994 to i32
  %3996 = and i32 %3990, 1023
  %3997 = add nuw nsw i32 %3996, %3995
  %3998 = zext i32 %3997 to i64
  %3999 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %3998
  %4000 = load i32, i32* %3999, align 4
  %4001 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %3992
  %4002 = load i32, i32* %4001, align 4
  %4003 = add i32 %4002, %4000
  %4004 = bitcast float* %3988 to i32*
  store i32 %4003, i32* %4004, align 4
  %4005 = getelementptr inbounds i16, i16* %3987, i64 1
  %4006 = load i16, i16* %4005, align 2
  %4007 = zext i16 %4006 to i32
  %4008 = lshr i32 %4007, 10
  %4009 = zext i32 %4008 to i64
  %4010 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4009
  %4011 = load i16, i16* %4010, align 2
  %4012 = zext i16 %4011 to i32
  %4013 = and i32 %4007, 1023
  %4014 = add nuw nsw i32 %4013, %4012
  %4015 = zext i32 %4014 to i64
  %4016 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4015
  %4017 = load i32, i32* %4016, align 4
  %4018 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4009
  %4019 = load i32, i32* %4018, align 4
  %4020 = add i32 %4019, %4017
  %4021 = getelementptr inbounds float, float* %3988, i64 1
  %4022 = bitcast float* %4021 to i32*
  store i32 %4020, i32* %4022, align 4
  %4023 = getelementptr inbounds i16, i16* %3987, i64 2
  %4024 = load i16, i16* %4023, align 2
  %4025 = zext i16 %4024 to i32
  %4026 = lshr i32 %4025, 10
  %4027 = zext i32 %4026 to i64
  %4028 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4027
  %4029 = load i16, i16* %4028, align 2
  %4030 = zext i16 %4029 to i32
  %4031 = and i32 %4025, 1023
  %4032 = add nuw nsw i32 %4031, %4030
  %4033 = zext i32 %4032 to i64
  %4034 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4033
  %4035 = load i32, i32* %4034, align 4
  %4036 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4027
  %4037 = load i32, i32* %4036, align 4
  %4038 = add i32 %4037, %4035
  %4039 = getelementptr inbounds float, float* %3988, i64 2
  %4040 = bitcast float* %4039 to i32*
  store i32 %4038, i32* %4040, align 4
  %4041 = getelementptr inbounds i16, i16* %3987, i64 3
  %4042 = load i16, i16* %4041, align 2
  %4043 = zext i16 %4042 to i32
  %4044 = lshr i32 %4043, 10
  %4045 = zext i32 %4044 to i64
  %4046 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4045
  %4047 = load i16, i16* %4046, align 2
  %4048 = zext i16 %4047 to i32
  %4049 = and i32 %4043, 1023
  %4050 = add nuw nsw i32 %4049, %4048
  %4051 = zext i32 %4050 to i64
  %4052 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4051
  %4053 = load i32, i32* %4052, align 4
  %4054 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4045
  %4055 = load i32, i32* %4054, align 4
  %4056 = add i32 %4055, %4053
  %4057 = getelementptr inbounds float, float* %3988, i64 3
  %4058 = bitcast float* %4057 to i32*
  store i32 %4056, i32* %4058, align 4
  %4059 = getelementptr inbounds i16, i16* %3987, i64 4
  %4060 = getelementptr inbounds float, float* %3988, i64 4
  %4061 = add nuw i32 %3986, 1
  %4062 = icmp eq i32 %4061, %3981
  br i1 %4062, label %4063, label %3985

4063:                                             ; preds = %3985
  %4064 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3912, align 8
  %4065 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4064, i64 0, i32 1, i32 0
  %4066 = load i32, i32* %4065, align 4
  %4067 = icmp eq i32 %4066, 0
  br i1 %4067, label %4113, label %4068

4068:                                             ; preds = %4063
  %4069 = load float*, float** %3946, align 8
  br label %4070

4070:                                             ; preds = %4070, %4068
  %4071 = phi i32 [ %4109, %4070 ], [ 0, %4068 ]
  %4072 = phi float* [ %4107, %4070 ], [ %4069, %4068 ]
  %4073 = phi i16* [ %4108, %4070 ], [ %3978, %4068 ]
  %4074 = getelementptr inbounds float, float* %4072, i64 3
  %4075 = load float, float* %4074, align 4
  %4076 = fcmp une float %4075, 0.000000e+00
  %4077 = fdiv float 1.000000e+00, %4075
  %4078 = select i1 %4076, float %4077, float 1.000000e+00
  %4079 = load float, float* %4072, align 4
  %4080 = fmul float %4079, %4078
  %4081 = bitcast float %4080 to i32
  %4082 = lshr i32 %4081, 23
  %4083 = zext i32 %4082 to i64
  %4084 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4083
  %4085 = load i16, i16* %4084, align 2
  %4086 = and i32 %4081, 8388607
  %4087 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4083
  %4088 = load i8, i8* %4087, align 1
  %4089 = zext i8 %4088 to i32
  %4090 = lshr i32 %4086, %4089
  %4091 = trunc i32 %4090 to i16
  %4092 = add i16 %4085, %4091
  store i16 %4092, i16* %4073, align 2
  %4093 = bitcast float* %4074 to i32*
  %4094 = load i32, i32* %4093, align 4
  %4095 = lshr i32 %4094, 23
  %4096 = zext i32 %4095 to i64
  %4097 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %4096
  %4098 = load i16, i16* %4097, align 2
  %4099 = and i32 %4094, 8388607
  %4100 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %4096
  %4101 = load i8, i8* %4100, align 1
  %4102 = zext i8 %4101 to i32
  %4103 = lshr i32 %4099, %4102
  %4104 = trunc i32 %4103 to i16
  %4105 = add i16 %4098, %4104
  %4106 = getelementptr inbounds i16, i16* %4073, i64 1
  store i16 %4105, i16* %4106, align 2
  %4107 = getelementptr inbounds float, float* %4072, i64 4
  %4108 = getelementptr inbounds i16, i16* %4073, i64 2
  %4109 = add nuw i32 %4071, 1
  %4110 = icmp eq i32 %4109, %4066
  br i1 %4110, label %4111, label %4070

4111:                                             ; preds = %4070
  %4112 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %3912, align 8
  br label %4113

4113:                                             ; preds = %4111, %4063, %3974
  %4114 = phi %"class.blink::IntRect"* [ %4112, %4111 ], [ %4064, %4063 ], [ %3975, %3974 ]
  %4115 = getelementptr inbounds i16, i16* %3979, i64 %3905
  %4116 = getelementptr inbounds i16, i16* %3978, i64 %3909
  %4117 = add nuw nsw i32 %3977, 1
  %4118 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4114, i64 0, i32 1, i32 1
  %4119 = load i32, i32* %4118, align 4
  %4120 = icmp slt i32 %4117, %4119
  br i1 %4120, label %3974, label %3958

4121:                                             ; preds = %3960, %3938
  %4122 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4122, align 4
  br label %13459

4123:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %4124
    i32 1, label %4376
    i32 2, label %4600
  ]

4124:                                             ; preds = %4123
  %4125 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4126 = load i32, i32* %4125, align 8
  %4127 = sdiv i32 %4126, 2
  %4128 = sext i32 %4127 to i64
  %4129 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4130 = load i32, i32* %4129, align 8
  %4131 = sdiv i32 %4130, 4
  %4132 = sext i32 %4131 to i64
  %4133 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4134 = load i8*, i8** %4133, align 8
  %4135 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4136 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4135, align 8
  %4137 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4136, i64 0, i32 0, i32 1
  %4138 = load i32, i32* %4137, align 4
  %4139 = mul nsw i32 %4138, %4126
  %4140 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4141 = load i32, i32* %4140, align 4
  %4142 = add nsw i32 %4139, %4141
  %4143 = sext i32 %4142 to i64
  %4144 = getelementptr inbounds i8, i8* %4134, i64 %4143
  %4145 = bitcast i8* %4144 to i16*
  %4146 = icmp slt i32 %4130, 0
  %4147 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4148 = load i32, i32* %4147, align 8
  %4149 = icmp sgt i32 %4148, 1
  %4150 = and i1 %4146, %4149
  br i1 %4150, label %4151, label %4161

4151:                                             ; preds = %4124
  %4152 = add nsw i32 %4148, -1
  %4153 = sext i32 %4152 to i64
  %4154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4155 = load i32, i32* %4154, align 4
  %4156 = sext i32 %4155 to i64
  %4157 = mul nsw i64 %4128, %4153
  %4158 = mul i64 %4157, %4156
  %4159 = sub i64 0, %4158
  %4160 = getelementptr inbounds i16, i16* %4145, i64 %4159
  br label %4163

4161:                                             ; preds = %4124
  %4162 = icmp sgt i32 %4148, 0
  br i1 %4162, label %4163, label %4374

4163:                                             ; preds = %4161, %4151
  %4164 = phi i16* [ %4160, %4151 ], [ %4145, %4161 ]
  %4165 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4166 = bitcast i8** %4165 to float**
  %4167 = load float*, float** %4166, align 8
  %4168 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4169 = bitcast i8** %4168 to float**
  %4170 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4171

4171:                                             ; preds = %4183, %4163
  %4172 = phi i32 [ %4148, %4163 ], [ %4184, %4183 ]
  %4173 = phi %"class.blink::IntRect"* [ %4136, %4163 ], [ %4185, %4183 ]
  %4174 = phi %"class.blink::IntRect"* [ %4136, %4163 ], [ %4186, %4183 ]
  %4175 = phi i32 [ 0, %4163 ], [ %4195, %4183 ]
  %4176 = phi float* [ %4167, %4163 ], [ %4188, %4183 ]
  %4177 = phi i16* [ %4164, %4163 ], [ %4194, %4183 ]
  %4178 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4174, i64 0, i32 1, i32 1
  %4179 = load i32, i32* %4178, align 4
  %4180 = icmp sgt i32 %4179, 0
  br i1 %4180, label %4197, label %4183

4181:                                             ; preds = %4366
  %4182 = load i32, i32* %4147, align 8
  br label %4183

4183:                                             ; preds = %4181, %4171
  %4184 = phi i32 [ %4172, %4171 ], [ %4182, %4181 ]
  %4185 = phi %"class.blink::IntRect"* [ %4173, %4171 ], [ %4367, %4181 ]
  %4186 = phi %"class.blink::IntRect"* [ %4174, %4171 ], [ %4367, %4181 ]
  %4187 = phi i16* [ %4177, %4171 ], [ %4368, %4181 ]
  %4188 = phi float* [ %4176, %4171 ], [ %4369, %4181 ]
  %4189 = phi i32 [ %4179, %4171 ], [ %4372, %4181 ]
  %4190 = load i32, i32* %4170, align 4
  %4191 = sub nsw i32 %4190, %4189
  %4192 = sext i32 %4191 to i64
  %4193 = mul nsw i64 %4192, %4128
  %4194 = getelementptr inbounds i16, i16* %4187, i64 %4193
  %4195 = add nuw nsw i32 %4175, 1
  %4196 = icmp slt i32 %4195, %4184
  br i1 %4196, label %4171, label %4374

4197:                                             ; preds = %4171, %4366
  %4198 = phi %"class.blink::IntRect"* [ %4367, %4366 ], [ %4173, %4171 ]
  %4199 = phi %"class.blink::IntRect"* [ %4367, %4366 ], [ %4174, %4171 ]
  %4200 = phi i32 [ %4370, %4366 ], [ 0, %4171 ]
  %4201 = phi float* [ %4369, %4366 ], [ %4176, %4171 ]
  %4202 = phi i16* [ %4368, %4366 ], [ %4177, %4171 ]
  %4203 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4199, i64 0, i32 1, i32 0
  %4204 = load i32, i32* %4203, align 4
  %4205 = icmp eq i32 %4204, 0
  br i1 %4205, label %4366, label %4206

4206:                                             ; preds = %4197
  %4207 = load float*, float** %4169, align 8
  br label %4208

4208:                                             ; preds = %4208, %4206
  %4209 = phi i32 [ %4284, %4208 ], [ 0, %4206 ]
  %4210 = phi i16* [ %4282, %4208 ], [ %4202, %4206 ]
  %4211 = phi float* [ %4283, %4208 ], [ %4207, %4206 ]
  %4212 = load i16, i16* %4210, align 2
  %4213 = zext i16 %4212 to i32
  %4214 = lshr i32 %4213, 10
  %4215 = zext i32 %4214 to i64
  %4216 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4215
  %4217 = load i16, i16* %4216, align 2
  %4218 = zext i16 %4217 to i32
  %4219 = and i32 %4213, 1023
  %4220 = add nuw nsw i32 %4219, %4218
  %4221 = zext i32 %4220 to i64
  %4222 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4221
  %4223 = load i32, i32* %4222, align 4
  %4224 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4215
  %4225 = load i32, i32* %4224, align 4
  %4226 = add i32 %4225, %4223
  %4227 = bitcast float* %4211 to i32*
  store i32 %4226, i32* %4227, align 4
  %4228 = getelementptr inbounds i16, i16* %4210, i64 1
  %4229 = load i16, i16* %4228, align 2
  %4230 = zext i16 %4229 to i32
  %4231 = lshr i32 %4230, 10
  %4232 = zext i32 %4231 to i64
  %4233 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4232
  %4234 = load i16, i16* %4233, align 2
  %4235 = zext i16 %4234 to i32
  %4236 = and i32 %4230, 1023
  %4237 = add nuw nsw i32 %4236, %4235
  %4238 = zext i32 %4237 to i64
  %4239 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4238
  %4240 = load i32, i32* %4239, align 4
  %4241 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4232
  %4242 = load i32, i32* %4241, align 4
  %4243 = add i32 %4242, %4240
  %4244 = getelementptr inbounds float, float* %4211, i64 1
  %4245 = bitcast float* %4244 to i32*
  store i32 %4243, i32* %4245, align 4
  %4246 = getelementptr inbounds i16, i16* %4210, i64 2
  %4247 = load i16, i16* %4246, align 2
  %4248 = zext i16 %4247 to i32
  %4249 = lshr i32 %4248, 10
  %4250 = zext i32 %4249 to i64
  %4251 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4250
  %4252 = load i16, i16* %4251, align 2
  %4253 = zext i16 %4252 to i32
  %4254 = and i32 %4248, 1023
  %4255 = add nuw nsw i32 %4254, %4253
  %4256 = zext i32 %4255 to i64
  %4257 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4256
  %4258 = load i32, i32* %4257, align 4
  %4259 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4250
  %4260 = load i32, i32* %4259, align 4
  %4261 = add i32 %4260, %4258
  %4262 = getelementptr inbounds float, float* %4211, i64 2
  %4263 = bitcast float* %4262 to i32*
  store i32 %4261, i32* %4263, align 4
  %4264 = getelementptr inbounds i16, i16* %4210, i64 3
  %4265 = load i16, i16* %4264, align 2
  %4266 = zext i16 %4265 to i32
  %4267 = lshr i32 %4266, 10
  %4268 = zext i32 %4267 to i64
  %4269 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4268
  %4270 = load i16, i16* %4269, align 2
  %4271 = zext i16 %4270 to i32
  %4272 = and i32 %4266, 1023
  %4273 = add nuw nsw i32 %4272, %4271
  %4274 = zext i32 %4273 to i64
  %4275 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4274
  %4276 = load i32, i32* %4275, align 4
  %4277 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4268
  %4278 = load i32, i32* %4277, align 4
  %4279 = add i32 %4278, %4276
  %4280 = getelementptr inbounds float, float* %4211, i64 3
  %4281 = bitcast float* %4280 to i32*
  store i32 %4279, i32* %4281, align 4
  %4282 = getelementptr inbounds i16, i16* %4210, i64 4
  %4283 = getelementptr inbounds float, float* %4211, i64 4
  %4284 = add nuw i32 %4209, 1
  %4285 = icmp eq i32 %4284, %4204
  br i1 %4285, label %4286, label %4208

4286:                                             ; preds = %4208
  %4287 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4135, align 8
  %4288 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4287, i64 0, i32 1, i32 0
  %4289 = load i32, i32* %4288, align 4
  %4290 = icmp eq i32 %4289, 0
  br i1 %4290, label %4366, label %4291

4291:                                             ; preds = %4286
  %4292 = load float*, float** %4169, align 8
  %4293 = add i32 %4289, -1
  %4294 = and i32 %4289, 3
  %4295 = icmp ult i32 %4293, 3
  br i1 %4295, label %4344, label %4296

4296:                                             ; preds = %4291
  %4297 = sub i32 %4289, %4294
  br label %4298

4298:                                             ; preds = %4298, %4296
  %4299 = phi float* [ %4292, %4296 ], [ %4340, %4298 ]
  %4300 = phi float* [ %4201, %4296 ], [ %4341, %4298 ]
  %4301 = phi i32 [ %4297, %4296 ], [ %4342, %4298 ]
  %4302 = bitcast float* %4299 to i32*
  %4303 = load i32, i32* %4302, align 4
  %4304 = bitcast float* %4300 to i32*
  store i32 %4303, i32* %4304, align 4
  %4305 = getelementptr inbounds float, float* %4299, i64 3
  %4306 = bitcast float* %4305 to i32*
  %4307 = load i32, i32* %4306, align 4
  %4308 = getelementptr inbounds float, float* %4300, i64 1
  %4309 = bitcast float* %4308 to i32*
  store i32 %4307, i32* %4309, align 4
  %4310 = getelementptr inbounds float, float* %4299, i64 4
  %4311 = getelementptr inbounds float, float* %4300, i64 2
  %4312 = bitcast float* %4310 to i32*
  %4313 = load i32, i32* %4312, align 4
  %4314 = bitcast float* %4311 to i32*
  store i32 %4313, i32* %4314, align 4
  %4315 = getelementptr inbounds float, float* %4299, i64 7
  %4316 = bitcast float* %4315 to i32*
  %4317 = load i32, i32* %4316, align 4
  %4318 = getelementptr inbounds float, float* %4300, i64 3
  %4319 = bitcast float* %4318 to i32*
  store i32 %4317, i32* %4319, align 4
  %4320 = getelementptr inbounds float, float* %4299, i64 8
  %4321 = getelementptr inbounds float, float* %4300, i64 4
  %4322 = bitcast float* %4320 to i32*
  %4323 = load i32, i32* %4322, align 4
  %4324 = bitcast float* %4321 to i32*
  store i32 %4323, i32* %4324, align 4
  %4325 = getelementptr inbounds float, float* %4299, i64 11
  %4326 = bitcast float* %4325 to i32*
  %4327 = load i32, i32* %4326, align 4
  %4328 = getelementptr inbounds float, float* %4300, i64 5
  %4329 = bitcast float* %4328 to i32*
  store i32 %4327, i32* %4329, align 4
  %4330 = getelementptr inbounds float, float* %4299, i64 12
  %4331 = getelementptr inbounds float, float* %4300, i64 6
  %4332 = bitcast float* %4330 to i32*
  %4333 = load i32, i32* %4332, align 4
  %4334 = bitcast float* %4331 to i32*
  store i32 %4333, i32* %4334, align 4
  %4335 = getelementptr inbounds float, float* %4299, i64 15
  %4336 = bitcast float* %4335 to i32*
  %4337 = load i32, i32* %4336, align 4
  %4338 = getelementptr inbounds float, float* %4300, i64 7
  %4339 = bitcast float* %4338 to i32*
  store i32 %4337, i32* %4339, align 4
  %4340 = getelementptr inbounds float, float* %4299, i64 16
  %4341 = getelementptr inbounds float, float* %4300, i64 8
  %4342 = add i32 %4301, -4
  %4343 = icmp eq i32 %4342, 0
  br i1 %4343, label %4344, label %4298

4344:                                             ; preds = %4298, %4291
  %4345 = phi float* [ %4292, %4291 ], [ %4340, %4298 ]
  %4346 = phi float* [ %4201, %4291 ], [ %4341, %4298 ]
  %4347 = icmp eq i32 %4294, 0
  br i1 %4347, label %4364, label %4348

4348:                                             ; preds = %4344, %4348
  %4349 = phi float* [ %4360, %4348 ], [ %4345, %4344 ]
  %4350 = phi float* [ %4361, %4348 ], [ %4346, %4344 ]
  %4351 = phi i32 [ %4362, %4348 ], [ %4294, %4344 ]
  %4352 = bitcast float* %4349 to i32*
  %4353 = load i32, i32* %4352, align 4
  %4354 = bitcast float* %4350 to i32*
  store i32 %4353, i32* %4354, align 4
  %4355 = getelementptr inbounds float, float* %4349, i64 3
  %4356 = bitcast float* %4355 to i32*
  %4357 = load i32, i32* %4356, align 4
  %4358 = getelementptr inbounds float, float* %4350, i64 1
  %4359 = bitcast float* %4358 to i32*
  store i32 %4357, i32* %4359, align 4
  %4360 = getelementptr inbounds float, float* %4349, i64 4
  %4361 = getelementptr inbounds float, float* %4350, i64 2
  %4362 = add i32 %4351, -1
  %4363 = icmp eq i32 %4362, 0
  br i1 %4363, label %4364, label %4348, !llvm.loop !672

4364:                                             ; preds = %4348, %4344
  %4365 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4135, align 8
  br label %4366

4366:                                             ; preds = %4364, %4286, %4197
  %4367 = phi %"class.blink::IntRect"* [ %4365, %4364 ], [ %4287, %4286 ], [ %4198, %4197 ]
  %4368 = getelementptr inbounds i16, i16* %4202, i64 %4128
  %4369 = getelementptr inbounds float, float* %4201, i64 %4132
  %4370 = add nuw nsw i32 %4200, 1
  %4371 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4367, i64 0, i32 1, i32 1
  %4372 = load i32, i32* %4371, align 4
  %4373 = icmp slt i32 %4370, %4372
  br i1 %4373, label %4197, label %4181

4374:                                             ; preds = %4183, %4161
  %4375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4375, align 4
  br label %13459

4376:                                             ; preds = %4123
  %4377 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4378 = load i32, i32* %4377, align 8
  %4379 = sdiv i32 %4378, 2
  %4380 = sext i32 %4379 to i64
  %4381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4382 = load i32, i32* %4381, align 8
  %4383 = sdiv i32 %4382, 4
  %4384 = sext i32 %4383 to i64
  %4385 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4386 = load i8*, i8** %4385, align 8
  %4387 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4388 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4387, align 8
  %4389 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4388, i64 0, i32 0, i32 1
  %4390 = load i32, i32* %4389, align 4
  %4391 = mul nsw i32 %4390, %4378
  %4392 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4393 = load i32, i32* %4392, align 4
  %4394 = add nsw i32 %4391, %4393
  %4395 = sext i32 %4394 to i64
  %4396 = getelementptr inbounds i8, i8* %4386, i64 %4395
  %4397 = bitcast i8* %4396 to i16*
  %4398 = icmp slt i32 %4382, 0
  %4399 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4400 = load i32, i32* %4399, align 8
  %4401 = icmp sgt i32 %4400, 1
  %4402 = and i1 %4398, %4401
  br i1 %4402, label %4403, label %4413

4403:                                             ; preds = %4376
  %4404 = add nsw i32 %4400, -1
  %4405 = sext i32 %4404 to i64
  %4406 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4407 = load i32, i32* %4406, align 4
  %4408 = sext i32 %4407 to i64
  %4409 = mul nsw i64 %4380, %4405
  %4410 = mul i64 %4409, %4408
  %4411 = sub i64 0, %4410
  %4412 = getelementptr inbounds i16, i16* %4397, i64 %4411
  br label %4415

4413:                                             ; preds = %4376
  %4414 = icmp sgt i32 %4400, 0
  br i1 %4414, label %4415, label %4598

4415:                                             ; preds = %4413, %4403
  %4416 = phi i16* [ %4412, %4403 ], [ %4397, %4413 ]
  %4417 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4418 = bitcast i8** %4417 to float**
  %4419 = load float*, float** %4418, align 8
  %4420 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4421 = bitcast i8** %4420 to float**
  %4422 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4423

4423:                                             ; preds = %4435, %4415
  %4424 = phi i32 [ %4400, %4415 ], [ %4436, %4435 ]
  %4425 = phi %"class.blink::IntRect"* [ %4388, %4415 ], [ %4437, %4435 ]
  %4426 = phi %"class.blink::IntRect"* [ %4388, %4415 ], [ %4438, %4435 ]
  %4427 = phi i32 [ 0, %4415 ], [ %4447, %4435 ]
  %4428 = phi float* [ %4419, %4415 ], [ %4440, %4435 ]
  %4429 = phi i16* [ %4416, %4415 ], [ %4446, %4435 ]
  %4430 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4426, i64 0, i32 1, i32 1
  %4431 = load i32, i32* %4430, align 4
  %4432 = icmp sgt i32 %4431, 0
  br i1 %4432, label %4449, label %4435

4433:                                             ; preds = %4590
  %4434 = load i32, i32* %4399, align 8
  br label %4435

4435:                                             ; preds = %4433, %4423
  %4436 = phi i32 [ %4424, %4423 ], [ %4434, %4433 ]
  %4437 = phi %"class.blink::IntRect"* [ %4425, %4423 ], [ %4591, %4433 ]
  %4438 = phi %"class.blink::IntRect"* [ %4426, %4423 ], [ %4591, %4433 ]
  %4439 = phi i16* [ %4429, %4423 ], [ %4592, %4433 ]
  %4440 = phi float* [ %4428, %4423 ], [ %4593, %4433 ]
  %4441 = phi i32 [ %4431, %4423 ], [ %4596, %4433 ]
  %4442 = load i32, i32* %4422, align 4
  %4443 = sub nsw i32 %4442, %4441
  %4444 = sext i32 %4443 to i64
  %4445 = mul nsw i64 %4444, %4380
  %4446 = getelementptr inbounds i16, i16* %4439, i64 %4445
  %4447 = add nuw nsw i32 %4427, 1
  %4448 = icmp slt i32 %4447, %4436
  br i1 %4448, label %4423, label %4598

4449:                                             ; preds = %4423, %4590
  %4450 = phi %"class.blink::IntRect"* [ %4591, %4590 ], [ %4425, %4423 ]
  %4451 = phi %"class.blink::IntRect"* [ %4591, %4590 ], [ %4426, %4423 ]
  %4452 = phi i32 [ %4594, %4590 ], [ 0, %4423 ]
  %4453 = phi float* [ %4593, %4590 ], [ %4428, %4423 ]
  %4454 = phi i16* [ %4592, %4590 ], [ %4429, %4423 ]
  %4455 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4451, i64 0, i32 1, i32 0
  %4456 = load i32, i32* %4455, align 4
  %4457 = icmp eq i32 %4456, 0
  br i1 %4457, label %4590, label %4458

4458:                                             ; preds = %4449
  %4459 = load float*, float** %4421, align 8
  br label %4460

4460:                                             ; preds = %4460, %4458
  %4461 = phi i32 [ %4536, %4460 ], [ 0, %4458 ]
  %4462 = phi i16* [ %4534, %4460 ], [ %4454, %4458 ]
  %4463 = phi float* [ %4535, %4460 ], [ %4459, %4458 ]
  %4464 = load i16, i16* %4462, align 2
  %4465 = zext i16 %4464 to i32
  %4466 = lshr i32 %4465, 10
  %4467 = zext i32 %4466 to i64
  %4468 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4467
  %4469 = load i16, i16* %4468, align 2
  %4470 = zext i16 %4469 to i32
  %4471 = and i32 %4465, 1023
  %4472 = add nuw nsw i32 %4471, %4470
  %4473 = zext i32 %4472 to i64
  %4474 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4473
  %4475 = load i32, i32* %4474, align 4
  %4476 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4467
  %4477 = load i32, i32* %4476, align 4
  %4478 = add i32 %4477, %4475
  %4479 = bitcast float* %4463 to i32*
  store i32 %4478, i32* %4479, align 4
  %4480 = getelementptr inbounds i16, i16* %4462, i64 1
  %4481 = load i16, i16* %4480, align 2
  %4482 = zext i16 %4481 to i32
  %4483 = lshr i32 %4482, 10
  %4484 = zext i32 %4483 to i64
  %4485 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4484
  %4486 = load i16, i16* %4485, align 2
  %4487 = zext i16 %4486 to i32
  %4488 = and i32 %4482, 1023
  %4489 = add nuw nsw i32 %4488, %4487
  %4490 = zext i32 %4489 to i64
  %4491 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4490
  %4492 = load i32, i32* %4491, align 4
  %4493 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4484
  %4494 = load i32, i32* %4493, align 4
  %4495 = add i32 %4494, %4492
  %4496 = getelementptr inbounds float, float* %4463, i64 1
  %4497 = bitcast float* %4496 to i32*
  store i32 %4495, i32* %4497, align 4
  %4498 = getelementptr inbounds i16, i16* %4462, i64 2
  %4499 = load i16, i16* %4498, align 2
  %4500 = zext i16 %4499 to i32
  %4501 = lshr i32 %4500, 10
  %4502 = zext i32 %4501 to i64
  %4503 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4502
  %4504 = load i16, i16* %4503, align 2
  %4505 = zext i16 %4504 to i32
  %4506 = and i32 %4500, 1023
  %4507 = add nuw nsw i32 %4506, %4505
  %4508 = zext i32 %4507 to i64
  %4509 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4508
  %4510 = load i32, i32* %4509, align 4
  %4511 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4502
  %4512 = load i32, i32* %4511, align 4
  %4513 = add i32 %4512, %4510
  %4514 = getelementptr inbounds float, float* %4463, i64 2
  %4515 = bitcast float* %4514 to i32*
  store i32 %4513, i32* %4515, align 4
  %4516 = getelementptr inbounds i16, i16* %4462, i64 3
  %4517 = load i16, i16* %4516, align 2
  %4518 = zext i16 %4517 to i32
  %4519 = lshr i32 %4518, 10
  %4520 = zext i32 %4519 to i64
  %4521 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4520
  %4522 = load i16, i16* %4521, align 2
  %4523 = zext i16 %4522 to i32
  %4524 = and i32 %4518, 1023
  %4525 = add nuw nsw i32 %4524, %4523
  %4526 = zext i32 %4525 to i64
  %4527 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4526
  %4528 = load i32, i32* %4527, align 4
  %4529 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4520
  %4530 = load i32, i32* %4529, align 4
  %4531 = add i32 %4530, %4528
  %4532 = getelementptr inbounds float, float* %4463, i64 3
  %4533 = bitcast float* %4532 to i32*
  store i32 %4531, i32* %4533, align 4
  %4534 = getelementptr inbounds i16, i16* %4462, i64 4
  %4535 = getelementptr inbounds float, float* %4463, i64 4
  %4536 = add nuw i32 %4461, 1
  %4537 = icmp eq i32 %4536, %4456
  br i1 %4537, label %4538, label %4460

4538:                                             ; preds = %4460
  %4539 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4387, align 8
  %4540 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4539, i64 0, i32 1, i32 0
  %4541 = load i32, i32* %4540, align 4
  %4542 = icmp eq i32 %4541, 0
  br i1 %4542, label %4590, label %4543

4543:                                             ; preds = %4538
  %4544 = load float*, float** %4421, align 8
  %4545 = and i32 %4541, 1
  %4546 = icmp eq i32 %4541, 1
  br i1 %4546, label %4575, label %4547

4547:                                             ; preds = %4543
  %4548 = sub i32 %4541, %4545
  br label %4549

4549:                                             ; preds = %4549, %4547
  %4550 = phi float* [ %4544, %4547 ], [ %4571, %4549 ]
  %4551 = phi float* [ %4453, %4547 ], [ %4572, %4549 ]
  %4552 = phi i32 [ %4548, %4547 ], [ %4573, %4549 ]
  %4553 = getelementptr inbounds float, float* %4550, i64 3
  %4554 = load float, float* %4553, align 4
  %4555 = load float, float* %4550, align 4
  %4556 = fmul float %4554, %4555
  store float %4556, float* %4551, align 4
  %4557 = bitcast float* %4553 to i32*
  %4558 = load i32, i32* %4557, align 4
  %4559 = getelementptr inbounds float, float* %4551, i64 1
  %4560 = bitcast float* %4559 to i32*
  store i32 %4558, i32* %4560, align 4
  %4561 = getelementptr inbounds float, float* %4550, i64 4
  %4562 = getelementptr inbounds float, float* %4551, i64 2
  %4563 = getelementptr inbounds float, float* %4550, i64 7
  %4564 = load float, float* %4563, align 4
  %4565 = load float, float* %4561, align 4
  %4566 = fmul float %4564, %4565
  store float %4566, float* %4562, align 4
  %4567 = bitcast float* %4563 to i32*
  %4568 = load i32, i32* %4567, align 4
  %4569 = getelementptr inbounds float, float* %4551, i64 3
  %4570 = bitcast float* %4569 to i32*
  store i32 %4568, i32* %4570, align 4
  %4571 = getelementptr inbounds float, float* %4550, i64 8
  %4572 = getelementptr inbounds float, float* %4551, i64 4
  %4573 = add i32 %4552, -2
  %4574 = icmp eq i32 %4573, 0
  br i1 %4574, label %4575, label %4549

4575:                                             ; preds = %4549, %4543
  %4576 = phi float* [ %4544, %4543 ], [ %4571, %4549 ]
  %4577 = phi float* [ %4453, %4543 ], [ %4572, %4549 ]
  %4578 = icmp eq i32 %4545, 0
  br i1 %4578, label %4588, label %4579

4579:                                             ; preds = %4575
  %4580 = getelementptr inbounds float, float* %4576, i64 3
  %4581 = load float, float* %4580, align 4
  %4582 = load float, float* %4576, align 4
  %4583 = fmul float %4581, %4582
  store float %4583, float* %4577, align 4
  %4584 = bitcast float* %4580 to i32*
  %4585 = load i32, i32* %4584, align 4
  %4586 = getelementptr inbounds float, float* %4577, i64 1
  %4587 = bitcast float* %4586 to i32*
  store i32 %4585, i32* %4587, align 4
  br label %4588

4588:                                             ; preds = %4575, %4579
  %4589 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4387, align 8
  br label %4590

4590:                                             ; preds = %4588, %4538, %4449
  %4591 = phi %"class.blink::IntRect"* [ %4589, %4588 ], [ %4539, %4538 ], [ %4450, %4449 ]
  %4592 = getelementptr inbounds i16, i16* %4454, i64 %4380
  %4593 = getelementptr inbounds float, float* %4453, i64 %4384
  %4594 = add nuw nsw i32 %4452, 1
  %4595 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4591, i64 0, i32 1, i32 1
  %4596 = load i32, i32* %4595, align 4
  %4597 = icmp slt i32 %4594, %4596
  br i1 %4597, label %4449, label %4433

4598:                                             ; preds = %4435, %4413
  %4599 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4599, align 4
  br label %13459

4600:                                             ; preds = %4123
  %4601 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4602 = load i32, i32* %4601, align 8
  %4603 = sdiv i32 %4602, 2
  %4604 = sext i32 %4603 to i64
  %4605 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4606 = load i32, i32* %4605, align 8
  %4607 = sdiv i32 %4606, 4
  %4608 = sext i32 %4607 to i64
  %4609 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4610 = load i8*, i8** %4609, align 8
  %4611 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4612 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4611, align 8
  %4613 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4612, i64 0, i32 0, i32 1
  %4614 = load i32, i32* %4613, align 4
  %4615 = mul nsw i32 %4614, %4602
  %4616 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4617 = load i32, i32* %4616, align 4
  %4618 = add nsw i32 %4615, %4617
  %4619 = sext i32 %4618 to i64
  %4620 = getelementptr inbounds i8, i8* %4610, i64 %4619
  %4621 = bitcast i8* %4620 to i16*
  %4622 = icmp slt i32 %4606, 0
  %4623 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4624 = load i32, i32* %4623, align 8
  %4625 = icmp sgt i32 %4624, 1
  %4626 = and i1 %4622, %4625
  br i1 %4626, label %4627, label %4637

4627:                                             ; preds = %4600
  %4628 = add nsw i32 %4624, -1
  %4629 = sext i32 %4628 to i64
  %4630 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4631 = load i32, i32* %4630, align 4
  %4632 = sext i32 %4631 to i64
  %4633 = mul nsw i64 %4604, %4629
  %4634 = mul i64 %4633, %4632
  %4635 = sub i64 0, %4634
  %4636 = getelementptr inbounds i16, i16* %4621, i64 %4635
  br label %4639

4637:                                             ; preds = %4600
  %4638 = icmp sgt i32 %4624, 0
  br i1 %4638, label %4639, label %4831

4639:                                             ; preds = %4637, %4627
  %4640 = phi i16* [ %4636, %4627 ], [ %4621, %4637 ]
  %4641 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4642 = bitcast i8** %4641 to float**
  %4643 = load float*, float** %4642, align 8
  %4644 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4645 = bitcast i8** %4644 to float**
  %4646 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4647

4647:                                             ; preds = %4659, %4639
  %4648 = phi i32 [ %4624, %4639 ], [ %4660, %4659 ]
  %4649 = phi %"class.blink::IntRect"* [ %4612, %4639 ], [ %4661, %4659 ]
  %4650 = phi %"class.blink::IntRect"* [ %4612, %4639 ], [ %4662, %4659 ]
  %4651 = phi i32 [ 0, %4639 ], [ %4671, %4659 ]
  %4652 = phi float* [ %4643, %4639 ], [ %4664, %4659 ]
  %4653 = phi i16* [ %4640, %4639 ], [ %4670, %4659 ]
  %4654 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4650, i64 0, i32 1, i32 1
  %4655 = load i32, i32* %4654, align 4
  %4656 = icmp sgt i32 %4655, 0
  br i1 %4656, label %4673, label %4659

4657:                                             ; preds = %4823
  %4658 = load i32, i32* %4623, align 8
  br label %4659

4659:                                             ; preds = %4657, %4647
  %4660 = phi i32 [ %4648, %4647 ], [ %4658, %4657 ]
  %4661 = phi %"class.blink::IntRect"* [ %4649, %4647 ], [ %4824, %4657 ]
  %4662 = phi %"class.blink::IntRect"* [ %4650, %4647 ], [ %4824, %4657 ]
  %4663 = phi i16* [ %4653, %4647 ], [ %4825, %4657 ]
  %4664 = phi float* [ %4652, %4647 ], [ %4826, %4657 ]
  %4665 = phi i32 [ %4655, %4647 ], [ %4829, %4657 ]
  %4666 = load i32, i32* %4646, align 4
  %4667 = sub nsw i32 %4666, %4665
  %4668 = sext i32 %4667 to i64
  %4669 = mul nsw i64 %4668, %4604
  %4670 = getelementptr inbounds i16, i16* %4663, i64 %4669
  %4671 = add nuw nsw i32 %4651, 1
  %4672 = icmp slt i32 %4671, %4660
  br i1 %4672, label %4647, label %4831

4673:                                             ; preds = %4647, %4823
  %4674 = phi %"class.blink::IntRect"* [ %4824, %4823 ], [ %4649, %4647 ]
  %4675 = phi %"class.blink::IntRect"* [ %4824, %4823 ], [ %4650, %4647 ]
  %4676 = phi i32 [ %4827, %4823 ], [ 0, %4647 ]
  %4677 = phi float* [ %4826, %4823 ], [ %4652, %4647 ]
  %4678 = phi i16* [ %4825, %4823 ], [ %4653, %4647 ]
  %4679 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4675, i64 0, i32 1, i32 0
  %4680 = load i32, i32* %4679, align 4
  %4681 = icmp eq i32 %4680, 0
  br i1 %4681, label %4823, label %4682

4682:                                             ; preds = %4673
  %4683 = load float*, float** %4645, align 8
  br label %4684

4684:                                             ; preds = %4684, %4682
  %4685 = phi i32 [ %4760, %4684 ], [ 0, %4682 ]
  %4686 = phi i16* [ %4758, %4684 ], [ %4678, %4682 ]
  %4687 = phi float* [ %4759, %4684 ], [ %4683, %4682 ]
  %4688 = load i16, i16* %4686, align 2
  %4689 = zext i16 %4688 to i32
  %4690 = lshr i32 %4689, 10
  %4691 = zext i32 %4690 to i64
  %4692 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4691
  %4693 = load i16, i16* %4692, align 2
  %4694 = zext i16 %4693 to i32
  %4695 = and i32 %4689, 1023
  %4696 = add nuw nsw i32 %4695, %4694
  %4697 = zext i32 %4696 to i64
  %4698 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4697
  %4699 = load i32, i32* %4698, align 4
  %4700 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4691
  %4701 = load i32, i32* %4700, align 4
  %4702 = add i32 %4701, %4699
  %4703 = bitcast float* %4687 to i32*
  store i32 %4702, i32* %4703, align 4
  %4704 = getelementptr inbounds i16, i16* %4686, i64 1
  %4705 = load i16, i16* %4704, align 2
  %4706 = zext i16 %4705 to i32
  %4707 = lshr i32 %4706, 10
  %4708 = zext i32 %4707 to i64
  %4709 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4708
  %4710 = load i16, i16* %4709, align 2
  %4711 = zext i16 %4710 to i32
  %4712 = and i32 %4706, 1023
  %4713 = add nuw nsw i32 %4712, %4711
  %4714 = zext i32 %4713 to i64
  %4715 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4714
  %4716 = load i32, i32* %4715, align 4
  %4717 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4708
  %4718 = load i32, i32* %4717, align 4
  %4719 = add i32 %4718, %4716
  %4720 = getelementptr inbounds float, float* %4687, i64 1
  %4721 = bitcast float* %4720 to i32*
  store i32 %4719, i32* %4721, align 4
  %4722 = getelementptr inbounds i16, i16* %4686, i64 2
  %4723 = load i16, i16* %4722, align 2
  %4724 = zext i16 %4723 to i32
  %4725 = lshr i32 %4724, 10
  %4726 = zext i32 %4725 to i64
  %4727 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4726
  %4728 = load i16, i16* %4727, align 2
  %4729 = zext i16 %4728 to i32
  %4730 = and i32 %4724, 1023
  %4731 = add nuw nsw i32 %4730, %4729
  %4732 = zext i32 %4731 to i64
  %4733 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4732
  %4734 = load i32, i32* %4733, align 4
  %4735 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4726
  %4736 = load i32, i32* %4735, align 4
  %4737 = add i32 %4736, %4734
  %4738 = getelementptr inbounds float, float* %4687, i64 2
  %4739 = bitcast float* %4738 to i32*
  store i32 %4737, i32* %4739, align 4
  %4740 = getelementptr inbounds i16, i16* %4686, i64 3
  %4741 = load i16, i16* %4740, align 2
  %4742 = zext i16 %4741 to i32
  %4743 = lshr i32 %4742, 10
  %4744 = zext i32 %4743 to i64
  %4745 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %4744
  %4746 = load i16, i16* %4745, align 2
  %4747 = zext i16 %4746 to i32
  %4748 = and i32 %4742, 1023
  %4749 = add nuw nsw i32 %4748, %4747
  %4750 = zext i32 %4749 to i64
  %4751 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %4750
  %4752 = load i32, i32* %4751, align 4
  %4753 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %4744
  %4754 = load i32, i32* %4753, align 4
  %4755 = add i32 %4754, %4752
  %4756 = getelementptr inbounds float, float* %4687, i64 3
  %4757 = bitcast float* %4756 to i32*
  store i32 %4755, i32* %4757, align 4
  %4758 = getelementptr inbounds i16, i16* %4686, i64 4
  %4759 = getelementptr inbounds float, float* %4687, i64 4
  %4760 = add nuw i32 %4685, 1
  %4761 = icmp eq i32 %4760, %4680
  br i1 %4761, label %4762, label %4684

4762:                                             ; preds = %4684
  %4763 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4611, align 8
  %4764 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4763, i64 0, i32 1, i32 0
  %4765 = load i32, i32* %4764, align 4
  %4766 = icmp eq i32 %4765, 0
  br i1 %4766, label %4823, label %4767

4767:                                             ; preds = %4762
  %4768 = load float*, float** %4645, align 8
  %4769 = and i32 %4765, 1
  %4770 = icmp eq i32 %4765, 1
  br i1 %4770, label %4805, label %4771

4771:                                             ; preds = %4767
  %4772 = sub i32 %4765, %4769
  br label %4773

4773:                                             ; preds = %4773, %4771
  %4774 = phi float* [ %4768, %4771 ], [ %4801, %4773 ]
  %4775 = phi float* [ %4677, %4771 ], [ %4802, %4773 ]
  %4776 = phi i32 [ %4772, %4771 ], [ %4803, %4773 ]
  %4777 = getelementptr inbounds float, float* %4774, i64 3
  %4778 = load float, float* %4777, align 4
  %4779 = fcmp une float %4778, 0.000000e+00
  %4780 = fdiv float 1.000000e+00, %4778
  %4781 = select i1 %4779, float %4780, float 1.000000e+00
  %4782 = load float, float* %4774, align 4
  %4783 = fmul float %4782, %4781
  store float %4783, float* %4775, align 4
  %4784 = bitcast float* %4777 to i32*
  %4785 = load i32, i32* %4784, align 4
  %4786 = getelementptr inbounds float, float* %4775, i64 1
  %4787 = bitcast float* %4786 to i32*
  store i32 %4785, i32* %4787, align 4
  %4788 = getelementptr inbounds float, float* %4774, i64 4
  %4789 = getelementptr inbounds float, float* %4775, i64 2
  %4790 = getelementptr inbounds float, float* %4774, i64 7
  %4791 = load float, float* %4790, align 4
  %4792 = fcmp une float %4791, 0.000000e+00
  %4793 = fdiv float 1.000000e+00, %4791
  %4794 = select i1 %4792, float %4793, float 1.000000e+00
  %4795 = load float, float* %4788, align 4
  %4796 = fmul float %4795, %4794
  store float %4796, float* %4789, align 4
  %4797 = bitcast float* %4790 to i32*
  %4798 = load i32, i32* %4797, align 4
  %4799 = getelementptr inbounds float, float* %4775, i64 3
  %4800 = bitcast float* %4799 to i32*
  store i32 %4798, i32* %4800, align 4
  %4801 = getelementptr inbounds float, float* %4774, i64 8
  %4802 = getelementptr inbounds float, float* %4775, i64 4
  %4803 = add i32 %4776, -2
  %4804 = icmp eq i32 %4803, 0
  br i1 %4804, label %4805, label %4773

4805:                                             ; preds = %4773, %4767
  %4806 = phi float* [ %4768, %4767 ], [ %4801, %4773 ]
  %4807 = phi float* [ %4677, %4767 ], [ %4802, %4773 ]
  %4808 = icmp eq i32 %4769, 0
  br i1 %4808, label %4821, label %4809

4809:                                             ; preds = %4805
  %4810 = getelementptr inbounds float, float* %4806, i64 3
  %4811 = load float, float* %4810, align 4
  %4812 = fcmp une float %4811, 0.000000e+00
  %4813 = fdiv float 1.000000e+00, %4811
  %4814 = select i1 %4812, float %4813, float 1.000000e+00
  %4815 = load float, float* %4806, align 4
  %4816 = fmul float %4815, %4814
  store float %4816, float* %4807, align 4
  %4817 = bitcast float* %4810 to i32*
  %4818 = load i32, i32* %4817, align 4
  %4819 = getelementptr inbounds float, float* %4807, i64 1
  %4820 = bitcast float* %4819 to i32*
  store i32 %4818, i32* %4820, align 4
  br label %4821

4821:                                             ; preds = %4805, %4809
  %4822 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4611, align 8
  br label %4823

4823:                                             ; preds = %4821, %4762, %4673
  %4824 = phi %"class.blink::IntRect"* [ %4822, %4821 ], [ %4763, %4762 ], [ %4674, %4673 ]
  %4825 = getelementptr inbounds i16, i16* %4678, i64 %4604
  %4826 = getelementptr inbounds float, float* %4677, i64 %4608
  %4827 = add nuw nsw i32 %4676, 1
  %4828 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4824, i64 0, i32 1, i32 1
  %4829 = load i32, i32* %4828, align 4
  %4830 = icmp slt i32 %4827, %4829
  br i1 %4830, label %4673, label %4657

4831:                                             ; preds = %4659, %4637
  %4832 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4832, align 4
  br label %13459

4833:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %4834
    i32 1, label %4968
    i32 2, label %5153
  ]

4834:                                             ; preds = %4833
  %4835 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4836 = load i32, i32* %4835, align 8
  %4837 = sdiv i32 %4836, 2
  %4838 = sext i32 %4837 to i64
  %4839 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4840 = load i32, i32* %4839, align 8
  %4841 = sext i32 %4840 to i64
  %4842 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4843 = load i8*, i8** %4842, align 8
  %4844 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4845 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4844, align 8
  %4846 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4845, i64 0, i32 0, i32 1
  %4847 = load i32, i32* %4846, align 4
  %4848 = mul nsw i32 %4847, %4836
  %4849 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4850 = load i32, i32* %4849, align 4
  %4851 = add nsw i32 %4848, %4850
  %4852 = sext i32 %4851 to i64
  %4853 = getelementptr inbounds i8, i8* %4843, i64 %4852
  %4854 = bitcast i8* %4853 to i16*
  %4855 = icmp slt i32 %4840, 0
  %4856 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4857 = load i32, i32* %4856, align 8
  %4858 = icmp sgt i32 %4857, 1
  %4859 = and i1 %4855, %4858
  br i1 %4859, label %4860, label %4870

4860:                                             ; preds = %4834
  %4861 = add nsw i32 %4857, -1
  %4862 = sext i32 %4861 to i64
  %4863 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4864 = load i32, i32* %4863, align 4
  %4865 = sext i32 %4864 to i64
  %4866 = mul nsw i64 %4838, %4862
  %4867 = mul i64 %4866, %4865
  %4868 = sub i64 0, %4867
  %4869 = getelementptr inbounds i16, i16* %4854, i64 %4868
  br label %4872

4870:                                             ; preds = %4834
  %4871 = icmp sgt i32 %4857, 0
  br i1 %4871, label %4872, label %4966

4872:                                             ; preds = %4870, %4860
  %4873 = phi i16* [ %4869, %4860 ], [ %4854, %4870 ]
  %4874 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %4875 = load i8*, i8** %4874, align 8
  %4876 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %4877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %4878

4878:                                             ; preds = %4889, %4872
  %4879 = phi i32 [ %4857, %4872 ], [ %4890, %4889 ]
  %4880 = phi %"class.blink::IntRect"* [ %4845, %4872 ], [ %4891, %4889 ]
  %4881 = phi i32 [ 0, %4872 ], [ %4900, %4889 ]
  %4882 = phi i8* [ %4875, %4872 ], [ %4893, %4889 ]
  %4883 = phi i16* [ %4873, %4872 ], [ %4899, %4889 ]
  %4884 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4880, i64 0, i32 1, i32 1
  %4885 = load i32, i32* %4884, align 4
  %4886 = icmp sgt i32 %4885, 0
  br i1 %4886, label %4902, label %4889

4887:                                             ; preds = %4958
  %4888 = load i32, i32* %4856, align 8
  br label %4889

4889:                                             ; preds = %4887, %4878
  %4890 = phi i32 [ %4879, %4878 ], [ %4888, %4887 ]
  %4891 = phi %"class.blink::IntRect"* [ %4880, %4878 ], [ %4959, %4887 ]
  %4892 = phi i16* [ %4883, %4878 ], [ %4960, %4887 ]
  %4893 = phi i8* [ %4882, %4878 ], [ %4961, %4887 ]
  %4894 = phi i32 [ %4885, %4878 ], [ %4964, %4887 ]
  %4895 = load i32, i32* %4877, align 4
  %4896 = sub nsw i32 %4895, %4894
  %4897 = sext i32 %4896 to i64
  %4898 = mul nsw i64 %4897, %4838
  %4899 = getelementptr inbounds i16, i16* %4892, i64 %4898
  %4900 = add nuw nsw i32 %4881, 1
  %4901 = icmp slt i32 %4900, %4890
  br i1 %4901, label %4878, label %4966

4902:                                             ; preds = %4878, %4958
  %4903 = phi %"class.blink::IntRect"* [ %4959, %4958 ], [ %4880, %4878 ]
  %4904 = phi i32 [ %4962, %4958 ], [ 0, %4878 ]
  %4905 = phi i8* [ %4961, %4958 ], [ %4882, %4878 ]
  %4906 = phi i16* [ %4960, %4958 ], [ %4883, %4878 ]
  %4907 = load i8*, i8** %4876, align 8
  %4908 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4903, i64 0, i32 1, i32 0
  %4909 = load i32, i32* %4908, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %4906, i8* %4907, i32 %4909) #12
  %4910 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4844, align 8
  %4911 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4910, i64 0, i32 1, i32 0
  %4912 = load i32, i32* %4911, align 4
  %4913 = icmp eq i32 %4912, 0
  br i1 %4913, label %4958, label %4914

4914:                                             ; preds = %4902
  %4915 = load i8*, i8** %4876, align 8
  %4916 = and i32 %4912, 1
  %4917 = icmp eq i32 %4912, 1
  br i1 %4917, label %4944, label %4918

4918:                                             ; preds = %4914
  %4919 = sub i32 %4912, %4916
  br label %4920

4920:                                             ; preds = %4920, %4918
  %4921 = phi i8* [ %4915, %4918 ], [ %4940, %4920 ]
  %4922 = phi i8* [ %4905, %4918 ], [ %4941, %4920 ]
  %4923 = phi i32 [ %4919, %4918 ], [ %4942, %4920 ]
  %4924 = load i8, i8* %4921, align 1
  store i8 %4924, i8* %4922, align 1
  %4925 = getelementptr inbounds i8, i8* %4921, i64 1
  %4926 = load i8, i8* %4925, align 1
  %4927 = getelementptr inbounds i8, i8* %4922, i64 1
  store i8 %4926, i8* %4927, align 1
  %4928 = getelementptr inbounds i8, i8* %4921, i64 2
  %4929 = load i8, i8* %4928, align 1
  %4930 = getelementptr inbounds i8, i8* %4922, i64 2
  store i8 %4929, i8* %4930, align 1
  %4931 = getelementptr inbounds i8, i8* %4921, i64 4
  %4932 = getelementptr inbounds i8, i8* %4922, i64 3
  %4933 = load i8, i8* %4931, align 1
  store i8 %4933, i8* %4932, align 1
  %4934 = getelementptr inbounds i8, i8* %4921, i64 5
  %4935 = load i8, i8* %4934, align 1
  %4936 = getelementptr inbounds i8, i8* %4922, i64 4
  store i8 %4935, i8* %4936, align 1
  %4937 = getelementptr inbounds i8, i8* %4921, i64 6
  %4938 = load i8, i8* %4937, align 1
  %4939 = getelementptr inbounds i8, i8* %4922, i64 5
  store i8 %4938, i8* %4939, align 1
  %4940 = getelementptr inbounds i8, i8* %4921, i64 8
  %4941 = getelementptr inbounds i8, i8* %4922, i64 6
  %4942 = add i32 %4923, -2
  %4943 = icmp eq i32 %4942, 0
  br i1 %4943, label %4944, label %4920

4944:                                             ; preds = %4920, %4914
  %4945 = phi i8* [ %4915, %4914 ], [ %4940, %4920 ]
  %4946 = phi i8* [ %4905, %4914 ], [ %4941, %4920 ]
  %4947 = icmp eq i32 %4916, 0
  br i1 %4947, label %4956, label %4948

4948:                                             ; preds = %4944
  %4949 = load i8, i8* %4945, align 1
  store i8 %4949, i8* %4946, align 1
  %4950 = getelementptr inbounds i8, i8* %4945, i64 1
  %4951 = load i8, i8* %4950, align 1
  %4952 = getelementptr inbounds i8, i8* %4946, i64 1
  store i8 %4951, i8* %4952, align 1
  %4953 = getelementptr inbounds i8, i8* %4945, i64 2
  %4954 = load i8, i8* %4953, align 1
  %4955 = getelementptr inbounds i8, i8* %4946, i64 2
  store i8 %4954, i8* %4955, align 1
  br label %4956

4956:                                             ; preds = %4944, %4948
  %4957 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4844, align 8
  br label %4958

4958:                                             ; preds = %4956, %4902
  %4959 = phi %"class.blink::IntRect"* [ %4957, %4956 ], [ %4910, %4902 ]
  %4960 = getelementptr inbounds i16, i16* %4906, i64 %4838
  %4961 = getelementptr inbounds i8, i8* %4905, i64 %4841
  %4962 = add nuw nsw i32 %4904, 1
  %4963 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4959, i64 0, i32 1, i32 1
  %4964 = load i32, i32* %4963, align 4
  %4965 = icmp slt i32 %4962, %4964
  br i1 %4965, label %4902, label %4887

4966:                                             ; preds = %4889, %4870
  %4967 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %4967, align 4
  br label %13459

4968:                                             ; preds = %4833
  %4969 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %4970 = load i32, i32* %4969, align 8
  %4971 = sdiv i32 %4970, 2
  %4972 = sext i32 %4971 to i64
  %4973 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %4974 = load i32, i32* %4973, align 8
  %4975 = sext i32 %4974 to i64
  %4976 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %4977 = load i8*, i8** %4976, align 8
  %4978 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %4979 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4978, align 8
  %4980 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %4979, i64 0, i32 0, i32 1
  %4981 = load i32, i32* %4980, align 4
  %4982 = mul nsw i32 %4981, %4970
  %4983 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %4984 = load i32, i32* %4983, align 4
  %4985 = add nsw i32 %4982, %4984
  %4986 = sext i32 %4985 to i64
  %4987 = getelementptr inbounds i8, i8* %4977, i64 %4986
  %4988 = bitcast i8* %4987 to i16*
  %4989 = icmp slt i32 %4974, 0
  %4990 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %4991 = load i32, i32* %4990, align 8
  %4992 = icmp sgt i32 %4991, 1
  %4993 = and i1 %4989, %4992
  br i1 %4993, label %4994, label %5004

4994:                                             ; preds = %4968
  %4995 = add nsw i32 %4991, -1
  %4996 = sext i32 %4995 to i64
  %4997 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %4998 = load i32, i32* %4997, align 4
  %4999 = sext i32 %4998 to i64
  %5000 = mul nsw i64 %4972, %4996
  %5001 = mul i64 %5000, %4999
  %5002 = sub i64 0, %5001
  %5003 = getelementptr inbounds i16, i16* %4988, i64 %5002
  br label %5006

5004:                                             ; preds = %4968
  %5005 = icmp sgt i32 %4991, 0
  br i1 %5005, label %5006, label %5151

5006:                                             ; preds = %5004, %4994
  %5007 = phi i16* [ %5003, %4994 ], [ %4988, %5004 ]
  %5008 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5009 = load i8*, i8** %5008, align 8
  %5010 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5011 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5012

5012:                                             ; preds = %5023, %5006
  %5013 = phi i32 [ %4991, %5006 ], [ %5024, %5023 ]
  %5014 = phi %"class.blink::IntRect"* [ %4979, %5006 ], [ %5025, %5023 ]
  %5015 = phi i32 [ 0, %5006 ], [ %5034, %5023 ]
  %5016 = phi i8* [ %5009, %5006 ], [ %5027, %5023 ]
  %5017 = phi i16* [ %5007, %5006 ], [ %5033, %5023 ]
  %5018 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5014, i64 0, i32 1, i32 1
  %5019 = load i32, i32* %5018, align 4
  %5020 = icmp sgt i32 %5019, 0
  br i1 %5020, label %5036, label %5023

5021:                                             ; preds = %5142
  %5022 = load i32, i32* %4990, align 8
  br label %5023

5023:                                             ; preds = %5021, %5012
  %5024 = phi i32 [ %5013, %5012 ], [ %5022, %5021 ]
  %5025 = phi %"class.blink::IntRect"* [ %5014, %5012 ], [ %5143, %5021 ]
  %5026 = phi i16* [ %5017, %5012 ], [ %5144, %5021 ]
  %5027 = phi i8* [ %5016, %5012 ], [ %5145, %5021 ]
  %5028 = phi i32 [ %5019, %5012 ], [ %5148, %5021 ]
  %5029 = load i32, i32* %5011, align 4
  %5030 = sub nsw i32 %5029, %5028
  %5031 = sext i32 %5030 to i64
  %5032 = mul nsw i64 %5031, %4972
  %5033 = getelementptr inbounds i16, i16* %5026, i64 %5032
  %5034 = add nuw nsw i32 %5015, 1
  %5035 = icmp slt i32 %5034, %5024
  br i1 %5035, label %5012, label %5151

5036:                                             ; preds = %5012, %5142
  %5037 = phi i64 [ %5150, %5142 ], [ 0, %5012 ]
  %5038 = phi %"class.blink::IntRect"* [ %5143, %5142 ], [ %5014, %5012 ]
  %5039 = phi i32 [ %5146, %5142 ], [ 0, %5012 ]
  %5040 = phi i8* [ %5145, %5142 ], [ %5016, %5012 ]
  %5041 = phi i16* [ %5144, %5142 ], [ %5017, %5012 ]
  %5042 = mul i64 %5037, %4975
  %5043 = getelementptr i8, i8* %5016, i64 %5042
  %5044 = add i64 %5042, 3
  %5045 = getelementptr i8, i8* %5016, i64 %5044
  %5046 = load i8*, i8** %5010, align 8
  %5047 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5038, i64 0, i32 1, i32 0
  %5048 = load i32, i32* %5047, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %5041, i8* %5046, i32 %5048) #12
  %5049 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4978, align 8
  %5050 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5049, i64 0, i32 1, i32 0
  %5051 = load i32, i32* %5050, align 4
  %5052 = icmp eq i32 %5051, 0
  br i1 %5052, label %5142, label %5053

5053:                                             ; preds = %5036
  %5054 = load i8*, i8** %5010, align 8
  %5055 = add i32 %5051, -1
  %5056 = zext i32 %5055 to i64
  %5057 = add nuw nsw i64 %5056, 1
  %5058 = icmp ult i64 %5057, 16
  br i1 %5058, label %5108, label %5059

5059:                                             ; preds = %5053
  %5060 = add i32 %5051, -1
  %5061 = zext i32 %5060 to i64
  %5062 = mul nuw nsw i64 %5061, 3
  %5063 = getelementptr i8, i8* %5045, i64 %5062
  %5064 = getelementptr i8, i8* %5054, i64 4
  %5065 = shl nuw nsw i64 %5061, 2
  %5066 = getelementptr i8, i8* %5064, i64 %5065
  %5067 = icmp ult i8* %5043, %5066
  %5068 = icmp ult i8* %5054, %5063
  %5069 = and i1 %5067, %5068
  br i1 %5069, label %5108, label %5070

5070:                                             ; preds = %5059
  %5071 = and i64 %5057, 8589934576
  %5072 = shl nuw nsw i64 %5071, 2
  %5073 = getelementptr i8, i8* %5054, i64 %5072
  %5074 = mul nuw nsw i64 %5071, 3
  %5075 = getelementptr i8, i8* %5040, i64 %5074
  %5076 = trunc i64 %5071 to i32
  br label %5077

5077:                                             ; preds = %5077, %5070
  %5078 = phi i64 [ 0, %5070 ], [ %5104, %5077 ]
  %5079 = shl i64 %5078, 2
  %5080 = mul i64 %5078, 3
  %5081 = getelementptr inbounds i8, i8* %5054, i64 %5079
  %5082 = bitcast i8* %5081 to <64 x i8>*
  %5083 = load <64 x i8>, <64 x i8>* %5082, align 1
  %5084 = shufflevector <64 x i8> %5083, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %5085 = shufflevector <64 x i8> %5083, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %5086 = shufflevector <64 x i8> %5083, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %5087 = shufflevector <64 x i8> %5083, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %5088 = uitofp <16 x i8> %5087 to <16 x float>
  %5089 = fdiv <16 x float> %5088, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5090 = uitofp <16 x i8> %5084 to <16 x float>
  %5091 = fmul <16 x float> %5089, %5090
  %5092 = fptoui <16 x float> %5091 to <16 x i8>
  %5093 = uitofp <16 x i8> %5085 to <16 x float>
  %5094 = fmul <16 x float> %5089, %5093
  %5095 = fptoui <16 x float> %5094 to <16 x i8>
  %5096 = uitofp <16 x i8> %5086 to <16 x float>
  %5097 = fmul <16 x float> %5089, %5096
  %5098 = fptoui <16 x float> %5097 to <16 x i8>
  %5099 = getelementptr inbounds i8, i8* %5040, i64 %5080
  %5100 = bitcast i8* %5099 to <48 x i8>*
  %5101 = shufflevector <16 x i8> %5092, <16 x i8> %5095, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5102 = shufflevector <16 x i8> %5098, <16 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5103 = shufflevector <32 x i8> %5101, <32 x i8> %5102, <48 x i32> <i32 0, i32 16, i32 32, i32 1, i32 17, i32 33, i32 2, i32 18, i32 34, i32 3, i32 19, i32 35, i32 4, i32 20, i32 36, i32 5, i32 21, i32 37, i32 6, i32 22, i32 38, i32 7, i32 23, i32 39, i32 8, i32 24, i32 40, i32 9, i32 25, i32 41, i32 10, i32 26, i32 42, i32 11, i32 27, i32 43, i32 12, i32 28, i32 44, i32 13, i32 29, i32 45, i32 14, i32 30, i32 46, i32 15, i32 31, i32 47>
  store <48 x i8> %5103, <48 x i8>* %5100, align 1
  %5104 = add i64 %5078, 16
  %5105 = icmp eq i64 %5104, %5071
  br i1 %5105, label %5106, label %5077, !llvm.loop !673

5106:                                             ; preds = %5077
  %5107 = icmp eq i64 %5057, %5071
  br i1 %5107, label %5140, label %5108

5108:                                             ; preds = %5106, %5059, %5053
  %5109 = phi i8* [ %5054, %5059 ], [ %5054, %5053 ], [ %5073, %5106 ]
  %5110 = phi i8* [ %5040, %5059 ], [ %5040, %5053 ], [ %5075, %5106 ]
  %5111 = phi i32 [ 0, %5059 ], [ 0, %5053 ], [ %5076, %5106 ]
  br label %5112

5112:                                             ; preds = %5108, %5112
  %5113 = phi i8* [ %5136, %5112 ], [ %5109, %5108 ]
  %5114 = phi i8* [ %5137, %5112 ], [ %5110, %5108 ]
  %5115 = phi i32 [ %5138, %5112 ], [ %5111, %5108 ]
  %5116 = getelementptr inbounds i8, i8* %5113, i64 3
  %5117 = load i8, i8* %5116, align 1
  %5118 = uitofp i8 %5117 to float
  %5119 = fdiv float %5118, 2.550000e+02
  %5120 = load i8, i8* %5113, align 1
  %5121 = uitofp i8 %5120 to float
  %5122 = fmul float %5119, %5121
  %5123 = fptoui float %5122 to i8
  %5124 = getelementptr inbounds i8, i8* %5113, i64 1
  %5125 = load i8, i8* %5124, align 1
  %5126 = uitofp i8 %5125 to float
  %5127 = fmul float %5119, %5126
  %5128 = fptoui float %5127 to i8
  %5129 = getelementptr inbounds i8, i8* %5113, i64 2
  %5130 = load i8, i8* %5129, align 1
  %5131 = uitofp i8 %5130 to float
  %5132 = fmul float %5119, %5131
  %5133 = fptoui float %5132 to i8
  store i8 %5123, i8* %5114, align 1
  %5134 = getelementptr inbounds i8, i8* %5114, i64 1
  store i8 %5128, i8* %5134, align 1
  %5135 = getelementptr inbounds i8, i8* %5114, i64 2
  store i8 %5133, i8* %5135, align 1
  %5136 = getelementptr inbounds i8, i8* %5113, i64 4
  %5137 = getelementptr inbounds i8, i8* %5114, i64 3
  %5138 = add nuw i32 %5115, 1
  %5139 = icmp eq i32 %5138, %5051
  br i1 %5139, label %5140, label %5112, !llvm.loop !674

5140:                                             ; preds = %5112, %5106
  %5141 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %4978, align 8
  br label %5142

5142:                                             ; preds = %5140, %5036
  %5143 = phi %"class.blink::IntRect"* [ %5141, %5140 ], [ %5049, %5036 ]
  %5144 = getelementptr inbounds i16, i16* %5041, i64 %4972
  %5145 = getelementptr inbounds i8, i8* %5040, i64 %4975
  %5146 = add nuw nsw i32 %5039, 1
  %5147 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5143, i64 0, i32 1, i32 1
  %5148 = load i32, i32* %5147, align 4
  %5149 = icmp slt i32 %5146, %5148
  %5150 = add i64 %5037, 1
  br i1 %5149, label %5036, label %5021

5151:                                             ; preds = %5023, %5004
  %5152 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5152, align 4
  br label %13459

5153:                                             ; preds = %4833
  %5154 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5155 = load i32, i32* %5154, align 8
  %5156 = sdiv i32 %5155, 2
  %5157 = sext i32 %5156 to i64
  %5158 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5159 = load i32, i32* %5158, align 8
  %5160 = sext i32 %5159 to i64
  %5161 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5162 = load i8*, i8** %5161, align 8
  %5163 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5164 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5163, align 8
  %5165 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5164, i64 0, i32 0, i32 1
  %5166 = load i32, i32* %5165, align 4
  %5167 = mul nsw i32 %5166, %5155
  %5168 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5169 = load i32, i32* %5168, align 4
  %5170 = add nsw i32 %5167, %5169
  %5171 = sext i32 %5170 to i64
  %5172 = getelementptr inbounds i8, i8* %5162, i64 %5171
  %5173 = bitcast i8* %5172 to i16*
  %5174 = icmp slt i32 %5159, 0
  %5175 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5176 = load i32, i32* %5175, align 8
  %5177 = icmp sgt i32 %5176, 1
  %5178 = and i1 %5174, %5177
  br i1 %5178, label %5179, label %5189

5179:                                             ; preds = %5153
  %5180 = add nsw i32 %5176, -1
  %5181 = sext i32 %5180 to i64
  %5182 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5183 = load i32, i32* %5182, align 4
  %5184 = sext i32 %5183 to i64
  %5185 = mul nsw i64 %5157, %5181
  %5186 = mul i64 %5185, %5184
  %5187 = sub i64 0, %5186
  %5188 = getelementptr inbounds i16, i16* %5173, i64 %5187
  br label %5191

5189:                                             ; preds = %5153
  %5190 = icmp sgt i32 %5176, 0
  br i1 %5190, label %5191, label %5277

5191:                                             ; preds = %5189, %5179
  %5192 = phi i16* [ %5188, %5179 ], [ %5173, %5189 ]
  %5193 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5194 = load i8*, i8** %5193, align 8
  %5195 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5196 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5197

5197:                                             ; preds = %5208, %5191
  %5198 = phi i32 [ %5176, %5191 ], [ %5209, %5208 ]
  %5199 = phi %"class.blink::IntRect"* [ %5164, %5191 ], [ %5210, %5208 ]
  %5200 = phi i32 [ 0, %5191 ], [ %5219, %5208 ]
  %5201 = phi i8* [ %5194, %5191 ], [ %5212, %5208 ]
  %5202 = phi i16* [ %5192, %5191 ], [ %5218, %5208 ]
  %5203 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5199, i64 0, i32 1, i32 1
  %5204 = load i32, i32* %5203, align 4
  %5205 = icmp sgt i32 %5204, 0
  br i1 %5205, label %5221, label %5208

5206:                                             ; preds = %5269
  %5207 = load i32, i32* %5175, align 8
  br label %5208

5208:                                             ; preds = %5206, %5197
  %5209 = phi i32 [ %5198, %5197 ], [ %5207, %5206 ]
  %5210 = phi %"class.blink::IntRect"* [ %5199, %5197 ], [ %5270, %5206 ]
  %5211 = phi i16* [ %5202, %5197 ], [ %5271, %5206 ]
  %5212 = phi i8* [ %5201, %5197 ], [ %5272, %5206 ]
  %5213 = phi i32 [ %5204, %5197 ], [ %5275, %5206 ]
  %5214 = load i32, i32* %5196, align 4
  %5215 = sub nsw i32 %5214, %5213
  %5216 = sext i32 %5215 to i64
  %5217 = mul nsw i64 %5216, %5157
  %5218 = getelementptr inbounds i16, i16* %5211, i64 %5217
  %5219 = add nuw nsw i32 %5200, 1
  %5220 = icmp slt i32 %5219, %5209
  br i1 %5220, label %5197, label %5277

5221:                                             ; preds = %5197, %5269
  %5222 = phi %"class.blink::IntRect"* [ %5270, %5269 ], [ %5199, %5197 ]
  %5223 = phi i32 [ %5273, %5269 ], [ 0, %5197 ]
  %5224 = phi i8* [ %5272, %5269 ], [ %5201, %5197 ]
  %5225 = phi i16* [ %5271, %5269 ], [ %5202, %5197 ]
  %5226 = load i8*, i8** %5195, align 8
  %5227 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5222, i64 0, i32 1, i32 0
  %5228 = load i32, i32* %5227, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %5225, i8* %5226, i32 %5228) #12
  %5229 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5163, align 8
  %5230 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5229, i64 0, i32 1, i32 0
  %5231 = load i32, i32* %5230, align 4
  %5232 = icmp eq i32 %5231, 0
  br i1 %5232, label %5269, label %5233

5233:                                             ; preds = %5221
  %5234 = load i8*, i8** %5195, align 8
  br label %5235

5235:                                             ; preds = %5245, %5233
  %5236 = phi i8* [ %5263, %5245 ], [ %5234, %5233 ]
  %5237 = phi i8* [ %5264, %5245 ], [ %5224, %5233 ]
  %5238 = phi i32 [ %5265, %5245 ], [ 0, %5233 ]
  %5239 = getelementptr inbounds i8, i8* %5236, i64 3
  %5240 = load i8, i8* %5239, align 1
  %5241 = icmp eq i8 %5240, 0
  br i1 %5241, label %5245, label %5242

5242:                                             ; preds = %5235
  %5243 = uitofp i8 %5240 to float
  %5244 = fdiv float 2.550000e+02, %5243
  br label %5245

5245:                                             ; preds = %5242, %5235
  %5246 = phi float [ %5244, %5242 ], [ 1.000000e+00, %5235 ]
  %5247 = load i8, i8* %5236, align 1
  %5248 = uitofp i8 %5247 to float
  %5249 = fmul float %5246, %5248
  %5250 = fptoui float %5249 to i8
  %5251 = getelementptr inbounds i8, i8* %5236, i64 1
  %5252 = load i8, i8* %5251, align 1
  %5253 = uitofp i8 %5252 to float
  %5254 = fmul float %5246, %5253
  %5255 = fptoui float %5254 to i8
  %5256 = getelementptr inbounds i8, i8* %5236, i64 2
  %5257 = load i8, i8* %5256, align 1
  %5258 = uitofp i8 %5257 to float
  %5259 = fmul float %5246, %5258
  %5260 = fptoui float %5259 to i8
  store i8 %5250, i8* %5237, align 1
  %5261 = getelementptr inbounds i8, i8* %5237, i64 1
  store i8 %5255, i8* %5261, align 1
  %5262 = getelementptr inbounds i8, i8* %5237, i64 2
  store i8 %5260, i8* %5262, align 1
  %5263 = getelementptr inbounds i8, i8* %5236, i64 4
  %5264 = getelementptr inbounds i8, i8* %5237, i64 3
  %5265 = add nuw i32 %5238, 1
  %5266 = icmp eq i32 %5265, %5231
  br i1 %5266, label %5267, label %5235

5267:                                             ; preds = %5245
  %5268 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5163, align 8
  br label %5269

5269:                                             ; preds = %5267, %5221
  %5270 = phi %"class.blink::IntRect"* [ %5268, %5267 ], [ %5229, %5221 ]
  %5271 = getelementptr inbounds i16, i16* %5225, i64 %5157
  %5272 = getelementptr inbounds i8, i8* %5224, i64 %5160
  %5273 = add nuw nsw i32 %5223, 1
  %5274 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5270, i64 0, i32 1, i32 1
  %5275 = load i32, i32* %5274, align 4
  %5276 = icmp slt i32 %5273, %5275
  br i1 %5276, label %5221, label %5206

5277:                                             ; preds = %5208, %5189
  %5278 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5278, align 4
  br label %13459

5279:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %5280
    i32 1, label %5457
    i32 2, label %5658
  ]

5280:                                             ; preds = %5279
  %5281 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5282 = load i32, i32* %5281, align 8
  %5283 = sdiv i32 %5282, 2
  %5284 = sext i32 %5283 to i64
  %5285 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5286 = load i32, i32* %5285, align 8
  %5287 = sdiv i32 %5286, 2
  %5288 = sext i32 %5287 to i64
  %5289 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5290 = load i8*, i8** %5289, align 8
  %5291 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5292 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5291, align 8
  %5293 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5292, i64 0, i32 0, i32 1
  %5294 = load i32, i32* %5293, align 4
  %5295 = mul nsw i32 %5294, %5282
  %5296 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5297 = load i32, i32* %5296, align 4
  %5298 = add nsw i32 %5295, %5297
  %5299 = sext i32 %5298 to i64
  %5300 = getelementptr inbounds i8, i8* %5290, i64 %5299
  %5301 = bitcast i8* %5300 to i16*
  %5302 = icmp slt i32 %5286, 0
  %5303 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5304 = load i32, i32* %5303, align 8
  %5305 = icmp sgt i32 %5304, 1
  %5306 = and i1 %5302, %5305
  br i1 %5306, label %5307, label %5317

5307:                                             ; preds = %5280
  %5308 = add nsw i32 %5304, -1
  %5309 = sext i32 %5308 to i64
  %5310 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5311 = load i32, i32* %5310, align 4
  %5312 = sext i32 %5311 to i64
  %5313 = mul nsw i64 %5284, %5309
  %5314 = mul i64 %5313, %5312
  %5315 = sub i64 0, %5314
  %5316 = getelementptr inbounds i16, i16* %5301, i64 %5315
  br label %5319

5317:                                             ; preds = %5280
  %5318 = icmp sgt i32 %5304, 0
  br i1 %5318, label %5319, label %5455

5319:                                             ; preds = %5317, %5307
  %5320 = phi i16* [ %5316, %5307 ], [ %5301, %5317 ]
  %5321 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5322 = bitcast i8** %5321 to i16**
  %5323 = load i16*, i16** %5322, align 8
  %5324 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5325 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5326

5326:                                             ; preds = %5337, %5319
  %5327 = phi i32 [ %5304, %5319 ], [ %5338, %5337 ]
  %5328 = phi %"class.blink::IntRect"* [ %5292, %5319 ], [ %5339, %5337 ]
  %5329 = phi i32 [ 0, %5319 ], [ %5348, %5337 ]
  %5330 = phi i16* [ %5323, %5319 ], [ %5341, %5337 ]
  %5331 = phi i16* [ %5320, %5319 ], [ %5347, %5337 ]
  %5332 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5328, i64 0, i32 1, i32 1
  %5333 = load i32, i32* %5332, align 4
  %5334 = icmp sgt i32 %5333, 0
  br i1 %5334, label %5350, label %5337

5335:                                             ; preds = %5446
  %5336 = load i32, i32* %5303, align 8
  br label %5337

5337:                                             ; preds = %5335, %5326
  %5338 = phi i32 [ %5327, %5326 ], [ %5336, %5335 ]
  %5339 = phi %"class.blink::IntRect"* [ %5328, %5326 ], [ %5447, %5335 ]
  %5340 = phi i16* [ %5331, %5326 ], [ %5448, %5335 ]
  %5341 = phi i16* [ %5330, %5326 ], [ %5449, %5335 ]
  %5342 = phi i32 [ %5333, %5326 ], [ %5452, %5335 ]
  %5343 = load i32, i32* %5325, align 4
  %5344 = sub nsw i32 %5343, %5342
  %5345 = sext i32 %5344 to i64
  %5346 = mul nsw i64 %5345, %5284
  %5347 = getelementptr inbounds i16, i16* %5340, i64 %5346
  %5348 = add nuw nsw i32 %5329, 1
  %5349 = icmp slt i32 %5348, %5338
  br i1 %5349, label %5326, label %5455

5350:                                             ; preds = %5326, %5446
  %5351 = phi i64 [ %5454, %5446 ], [ 0, %5326 ]
  %5352 = phi %"class.blink::IntRect"* [ %5447, %5446 ], [ %5328, %5326 ]
  %5353 = phi i32 [ %5450, %5446 ], [ 0, %5326 ]
  %5354 = phi i16* [ %5449, %5446 ], [ %5330, %5326 ]
  %5355 = phi i16* [ %5448, %5446 ], [ %5331, %5326 ]
  %5356 = mul i64 %5351, %5288
  %5357 = getelementptr i16, i16* %5330, i64 %5356
  %5358 = bitcast i16* %5357 to i8*
  %5359 = add i64 %5356, 1
  %5360 = getelementptr i16, i16* %5330, i64 %5359
  %5361 = load i8*, i8** %5324, align 8
  %5362 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5352, i64 0, i32 1, i32 0
  %5363 = load i32, i32* %5362, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %5355, i8* %5361, i32 %5363) #12
  %5364 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5291, align 8
  %5365 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5364, i64 0, i32 1, i32 0
  %5366 = load i32, i32* %5365, align 4
  %5367 = icmp eq i32 %5366, 0
  br i1 %5367, label %5446, label %5368

5368:                                             ; preds = %5350
  %5369 = load i8*, i8** %5324, align 8
  %5370 = add i32 %5366, -1
  %5371 = zext i32 %5370 to i64
  %5372 = add nuw nsw i64 %5371, 1
  %5373 = icmp ult i64 %5372, 9
  br i1 %5373, label %5417, label %5374

5374:                                             ; preds = %5368
  %5375 = add i32 %5366, -1
  %5376 = zext i32 %5375 to i64
  %5377 = getelementptr i16, i16* %5360, i64 %5376
  %5378 = bitcast i16* %5377 to i8*
  %5379 = getelementptr i8, i8* %5369, i64 3
  %5380 = shl nuw nsw i64 %5376, 2
  %5381 = getelementptr i8, i8* %5379, i64 %5380
  %5382 = icmp ugt i8* %5381, %5358
  %5383 = icmp ult i8* %5369, %5378
  %5384 = and i1 %5382, %5383
  br i1 %5384, label %5417, label %5385

5385:                                             ; preds = %5374
  %5386 = and i64 %5372, 7
  %5387 = icmp eq i64 %5386, 0
  %5388 = select i1 %5387, i64 8, i64 %5386
  %5389 = sub nsw i64 %5372, %5388
  %5390 = trunc i64 %5389 to i32
  %5391 = shl nsw i64 %5389, 2
  %5392 = getelementptr i8, i8* %5369, i64 %5391
  %5393 = getelementptr i16, i16* %5354, i64 %5389
  br label %5394

5394:                                             ; preds = %5394, %5385
  %5395 = phi i64 [ 0, %5385 ], [ %5415, %5394 ]
  %5396 = shl i64 %5395, 2
  %5397 = getelementptr i8, i8* %5369, i64 %5396
  %5398 = getelementptr i16, i16* %5354, i64 %5395
  %5399 = bitcast i8* %5397 to <32 x i8>*
  %5400 = load <32 x i8>, <32 x i8>* %5399, align 1
  %5401 = shufflevector <32 x i8> %5400, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %5402 = shufflevector <32 x i8> %5400, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %5403 = shufflevector <32 x i8> %5400, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %5404 = and <8 x i8> %5401, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %5405 = zext <8 x i8> %5404 to <8 x i16>
  %5406 = shl nuw <8 x i16> %5405, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %5407 = and <8 x i8> %5402, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %5408 = zext <8 x i8> %5407 to <8 x i16>
  %5409 = shl nuw nsw <8 x i16> %5408, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %5410 = or <8 x i16> %5409, %5406
  %5411 = lshr <8 x i8> %5403, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %5412 = zext <8 x i8> %5411 to <8 x i16>
  %5413 = or <8 x i16> %5410, %5412
  %5414 = bitcast i16* %5398 to <8 x i16>*
  store <8 x i16> %5413, <8 x i16>* %5414, align 2, !alias.scope !675, !noalias !678
  %5415 = add i64 %5395, 8
  %5416 = icmp eq i64 %5415, %5389
  br i1 %5416, label %5417, label %5394, !llvm.loop !680

5417:                                             ; preds = %5394, %5374, %5368
  %5418 = phi i32 [ 0, %5374 ], [ 0, %5368 ], [ %5390, %5394 ]
  %5419 = phi i8* [ %5369, %5374 ], [ %5369, %5368 ], [ %5392, %5394 ]
  %5420 = phi i16* [ %5354, %5374 ], [ %5354, %5368 ], [ %5393, %5394 ]
  br label %5421

5421:                                             ; preds = %5417, %5421
  %5422 = phi i32 [ %5442, %5421 ], [ %5418, %5417 ]
  %5423 = phi i8* [ %5440, %5421 ], [ %5419, %5417 ]
  %5424 = phi i16* [ %5441, %5421 ], [ %5420, %5417 ]
  %5425 = load i8, i8* %5423, align 1
  %5426 = and i8 %5425, -8
  %5427 = zext i8 %5426 to i16
  %5428 = shl nuw i16 %5427, 8
  %5429 = getelementptr inbounds i8, i8* %5423, i64 1
  %5430 = load i8, i8* %5429, align 1
  %5431 = and i8 %5430, -4
  %5432 = zext i8 %5431 to i16
  %5433 = shl nuw nsw i16 %5432, 3
  %5434 = or i16 %5433, %5428
  %5435 = getelementptr inbounds i8, i8* %5423, i64 2
  %5436 = load i8, i8* %5435, align 1
  %5437 = lshr i8 %5436, 3
  %5438 = zext i8 %5437 to i16
  %5439 = or i16 %5434, %5438
  store i16 %5439, i16* %5424, align 2
  %5440 = getelementptr inbounds i8, i8* %5423, i64 4
  %5441 = getelementptr inbounds i16, i16* %5424, i64 1
  %5442 = add nuw i32 %5422, 1
  %5443 = icmp eq i32 %5442, %5366
  br i1 %5443, label %5444, label %5421, !llvm.loop !681

5444:                                             ; preds = %5421
  %5445 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5291, align 8
  br label %5446

5446:                                             ; preds = %5444, %5350
  %5447 = phi %"class.blink::IntRect"* [ %5445, %5444 ], [ %5364, %5350 ]
  %5448 = getelementptr inbounds i16, i16* %5355, i64 %5284
  %5449 = getelementptr inbounds i16, i16* %5354, i64 %5288
  %5450 = add nuw nsw i32 %5353, 1
  %5451 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5447, i64 0, i32 1, i32 1
  %5452 = load i32, i32* %5451, align 4
  %5453 = icmp slt i32 %5450, %5452
  %5454 = add i64 %5351, 1
  br i1 %5453, label %5350, label %5335

5455:                                             ; preds = %5337, %5317
  %5456 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5456, align 4
  br label %13459

5457:                                             ; preds = %5279
  %5458 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5459 = load i32, i32* %5458, align 8
  %5460 = sdiv i32 %5459, 2
  %5461 = sext i32 %5460 to i64
  %5462 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5463 = load i32, i32* %5462, align 8
  %5464 = sdiv i32 %5463, 2
  %5465 = sext i32 %5464 to i64
  %5466 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5467 = load i8*, i8** %5466, align 8
  %5468 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5469 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5468, align 8
  %5470 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5469, i64 0, i32 0, i32 1
  %5471 = load i32, i32* %5470, align 4
  %5472 = mul nsw i32 %5471, %5459
  %5473 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5474 = load i32, i32* %5473, align 4
  %5475 = add nsw i32 %5472, %5474
  %5476 = sext i32 %5475 to i64
  %5477 = getelementptr inbounds i8, i8* %5467, i64 %5476
  %5478 = bitcast i8* %5477 to i16*
  %5479 = icmp slt i32 %5463, 0
  %5480 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5481 = load i32, i32* %5480, align 8
  %5482 = icmp sgt i32 %5481, 1
  %5483 = and i1 %5479, %5482
  br i1 %5483, label %5484, label %5494

5484:                                             ; preds = %5457
  %5485 = add nsw i32 %5481, -1
  %5486 = sext i32 %5485 to i64
  %5487 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5488 = load i32, i32* %5487, align 4
  %5489 = sext i32 %5488 to i64
  %5490 = mul nsw i64 %5461, %5486
  %5491 = mul i64 %5490, %5489
  %5492 = sub i64 0, %5491
  %5493 = getelementptr inbounds i16, i16* %5478, i64 %5492
  br label %5496

5494:                                             ; preds = %5457
  %5495 = icmp sgt i32 %5481, 0
  br i1 %5495, label %5496, label %5656

5496:                                             ; preds = %5494, %5484
  %5497 = phi i16* [ %5493, %5484 ], [ %5478, %5494 ]
  %5498 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5499 = bitcast i8** %5498 to i16**
  %5500 = load i16*, i16** %5499, align 8
  %5501 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5502 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5503

5503:                                             ; preds = %5514, %5496
  %5504 = phi i32 [ %5481, %5496 ], [ %5515, %5514 ]
  %5505 = phi %"class.blink::IntRect"* [ %5469, %5496 ], [ %5516, %5514 ]
  %5506 = phi i32 [ 0, %5496 ], [ %5525, %5514 ]
  %5507 = phi i16* [ %5500, %5496 ], [ %5518, %5514 ]
  %5508 = phi i16* [ %5497, %5496 ], [ %5524, %5514 ]
  %5509 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5505, i64 0, i32 1, i32 1
  %5510 = load i32, i32* %5509, align 4
  %5511 = icmp sgt i32 %5510, 0
  br i1 %5511, label %5527, label %5514

5512:                                             ; preds = %5647
  %5513 = load i32, i32* %5480, align 8
  br label %5514

5514:                                             ; preds = %5512, %5503
  %5515 = phi i32 [ %5504, %5503 ], [ %5513, %5512 ]
  %5516 = phi %"class.blink::IntRect"* [ %5505, %5503 ], [ %5648, %5512 ]
  %5517 = phi i16* [ %5508, %5503 ], [ %5649, %5512 ]
  %5518 = phi i16* [ %5507, %5503 ], [ %5650, %5512 ]
  %5519 = phi i32 [ %5510, %5503 ], [ %5653, %5512 ]
  %5520 = load i32, i32* %5502, align 4
  %5521 = sub nsw i32 %5520, %5519
  %5522 = sext i32 %5521 to i64
  %5523 = mul nsw i64 %5522, %5461
  %5524 = getelementptr inbounds i16, i16* %5517, i64 %5523
  %5525 = add nuw nsw i32 %5506, 1
  %5526 = icmp slt i32 %5525, %5515
  br i1 %5526, label %5503, label %5656

5527:                                             ; preds = %5503, %5647
  %5528 = phi i64 [ %5655, %5647 ], [ 0, %5503 ]
  %5529 = phi %"class.blink::IntRect"* [ %5648, %5647 ], [ %5505, %5503 ]
  %5530 = phi i32 [ %5651, %5647 ], [ 0, %5503 ]
  %5531 = phi i16* [ %5650, %5647 ], [ %5507, %5503 ]
  %5532 = phi i16* [ %5649, %5647 ], [ %5508, %5503 ]
  %5533 = mul i64 %5528, %5465
  %5534 = getelementptr i16, i16* %5507, i64 %5533
  %5535 = bitcast i16* %5534 to i8*
  %5536 = add i64 %5533, 1
  %5537 = getelementptr i16, i16* %5507, i64 %5536
  %5538 = load i8*, i8** %5501, align 8
  %5539 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5529, i64 0, i32 1, i32 0
  %5540 = load i32, i32* %5539, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %5532, i8* %5538, i32 %5540) #12
  %5541 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5468, align 8
  %5542 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5541, i64 0, i32 1, i32 0
  %5543 = load i32, i32* %5542, align 4
  %5544 = icmp eq i32 %5543, 0
  br i1 %5544, label %5647, label %5545

5545:                                             ; preds = %5527
  %5546 = load i8*, i8** %5501, align 8
  %5547 = add i32 %5543, -1
  %5548 = zext i32 %5547 to i64
  %5549 = add nuw nsw i64 %5548, 1
  %5550 = icmp ult i64 %5549, 8
  br i1 %5550, label %5605, label %5551

5551:                                             ; preds = %5545
  %5552 = add i32 %5543, -1
  %5553 = zext i32 %5552 to i64
  %5554 = getelementptr i16, i16* %5537, i64 %5553
  %5555 = bitcast i16* %5554 to i8*
  %5556 = getelementptr i8, i8* %5546, i64 4
  %5557 = shl nuw nsw i64 %5553, 2
  %5558 = getelementptr i8, i8* %5556, i64 %5557
  %5559 = icmp ugt i8* %5558, %5535
  %5560 = icmp ult i8* %5546, %5555
  %5561 = and i1 %5559, %5560
  br i1 %5561, label %5605, label %5562

5562:                                             ; preds = %5551
  %5563 = and i64 %5549, 8589934584
  %5564 = shl nuw nsw i64 %5563, 2
  %5565 = getelementptr i8, i8* %5546, i64 %5564
  %5566 = getelementptr i16, i16* %5531, i64 %5563
  %5567 = trunc i64 %5563 to i32
  br label %5568

5568:                                             ; preds = %5568, %5562
  %5569 = phi i64 [ 0, %5562 ], [ %5601, %5568 ]
  %5570 = shl i64 %5569, 2
  %5571 = getelementptr i16, i16* %5531, i64 %5569
  %5572 = getelementptr inbounds i8, i8* %5546, i64 %5570
  %5573 = bitcast i8* %5572 to <32 x i8>*
  %5574 = load <32 x i8>, <32 x i8>* %5573, align 1
  %5575 = shufflevector <32 x i8> %5574, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %5576 = shufflevector <32 x i8> %5574, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %5577 = shufflevector <32 x i8> %5574, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %5578 = shufflevector <32 x i8> %5574, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %5579 = uitofp <8 x i8> %5578 to <8 x float>
  %5580 = fdiv <8 x float> %5579, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %5581 = uitofp <8 x i8> %5575 to <8 x float>
  %5582 = fmul <8 x float> %5580, %5581
  %5583 = fptoui <8 x float> %5582 to <8 x i8>
  %5584 = uitofp <8 x i8> %5576 to <8 x float>
  %5585 = fmul <8 x float> %5580, %5584
  %5586 = fptoui <8 x float> %5585 to <8 x i8>
  %5587 = uitofp <8 x i8> %5577 to <8 x float>
  %5588 = fmul <8 x float> %5580, %5587
  %5589 = fptoui <8 x float> %5588 to <8 x i8>
  %5590 = and <8 x i8> %5583, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %5591 = zext <8 x i8> %5590 to <8 x i16>
  %5592 = shl nuw <8 x i16> %5591, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %5593 = and <8 x i8> %5586, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %5594 = zext <8 x i8> %5593 to <8 x i16>
  %5595 = shl nuw nsw <8 x i16> %5594, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %5596 = or <8 x i16> %5595, %5592
  %5597 = lshr <8 x i8> %5589, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %5598 = zext <8 x i8> %5597 to <8 x i16>
  %5599 = or <8 x i16> %5596, %5598
  %5600 = bitcast i16* %5571 to <8 x i16>*
  store <8 x i16> %5599, <8 x i16>* %5600, align 2, !alias.scope !682, !noalias !685
  %5601 = add i64 %5569, 8
  %5602 = icmp eq i64 %5601, %5563
  br i1 %5602, label %5603, label %5568, !llvm.loop !687

5603:                                             ; preds = %5568
  %5604 = icmp eq i64 %5549, %5563
  br i1 %5604, label %5645, label %5605

5605:                                             ; preds = %5603, %5551, %5545
  %5606 = phi i8* [ %5546, %5551 ], [ %5546, %5545 ], [ %5565, %5603 ]
  %5607 = phi i16* [ %5531, %5551 ], [ %5531, %5545 ], [ %5566, %5603 ]
  %5608 = phi i32 [ 0, %5551 ], [ 0, %5545 ], [ %5567, %5603 ]
  br label %5609

5609:                                             ; preds = %5605, %5609
  %5610 = phi i8* [ %5641, %5609 ], [ %5606, %5605 ]
  %5611 = phi i16* [ %5642, %5609 ], [ %5607, %5605 ]
  %5612 = phi i32 [ %5643, %5609 ], [ %5608, %5605 ]
  %5613 = getelementptr inbounds i8, i8* %5610, i64 3
  %5614 = load i8, i8* %5613, align 1
  %5615 = uitofp i8 %5614 to float
  %5616 = fdiv float %5615, 2.550000e+02
  %5617 = load i8, i8* %5610, align 1
  %5618 = uitofp i8 %5617 to float
  %5619 = fmul float %5616, %5618
  %5620 = fptoui float %5619 to i8
  %5621 = getelementptr inbounds i8, i8* %5610, i64 1
  %5622 = load i8, i8* %5621, align 1
  %5623 = uitofp i8 %5622 to float
  %5624 = fmul float %5616, %5623
  %5625 = fptoui float %5624 to i8
  %5626 = getelementptr inbounds i8, i8* %5610, i64 2
  %5627 = load i8, i8* %5626, align 1
  %5628 = uitofp i8 %5627 to float
  %5629 = fmul float %5616, %5628
  %5630 = fptoui float %5629 to i8
  %5631 = and i8 %5620, -8
  %5632 = zext i8 %5631 to i16
  %5633 = shl nuw i16 %5632, 8
  %5634 = and i8 %5625, -4
  %5635 = zext i8 %5634 to i16
  %5636 = shl nuw nsw i16 %5635, 3
  %5637 = or i16 %5636, %5633
  %5638 = lshr i8 %5630, 3
  %5639 = zext i8 %5638 to i16
  %5640 = or i16 %5637, %5639
  store i16 %5640, i16* %5611, align 2
  %5641 = getelementptr inbounds i8, i8* %5610, i64 4
  %5642 = getelementptr inbounds i16, i16* %5611, i64 1
  %5643 = add nuw i32 %5612, 1
  %5644 = icmp eq i32 %5643, %5543
  br i1 %5644, label %5645, label %5609, !llvm.loop !688

5645:                                             ; preds = %5609, %5603
  %5646 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5468, align 8
  br label %5647

5647:                                             ; preds = %5645, %5527
  %5648 = phi %"class.blink::IntRect"* [ %5646, %5645 ], [ %5541, %5527 ]
  %5649 = getelementptr inbounds i16, i16* %5532, i64 %5461
  %5650 = getelementptr inbounds i16, i16* %5531, i64 %5465
  %5651 = add nuw nsw i32 %5530, 1
  %5652 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5648, i64 0, i32 1, i32 1
  %5653 = load i32, i32* %5652, align 4
  %5654 = icmp slt i32 %5651, %5653
  %5655 = add i64 %5528, 1
  br i1 %5654, label %5527, label %5512

5656:                                             ; preds = %5514, %5494
  %5657 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5657, align 4
  br label %13459

5658:                                             ; preds = %5279
  %5659 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5660 = load i32, i32* %5659, align 8
  %5661 = sdiv i32 %5660, 2
  %5662 = sext i32 %5661 to i64
  %5663 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5664 = load i32, i32* %5663, align 8
  %5665 = sdiv i32 %5664, 2
  %5666 = sext i32 %5665 to i64
  %5667 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5668 = load i8*, i8** %5667, align 8
  %5669 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5670 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5669, align 8
  %5671 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5670, i64 0, i32 0, i32 1
  %5672 = load i32, i32* %5671, align 4
  %5673 = mul nsw i32 %5672, %5660
  %5674 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5675 = load i32, i32* %5674, align 4
  %5676 = add nsw i32 %5673, %5675
  %5677 = sext i32 %5676 to i64
  %5678 = getelementptr inbounds i8, i8* %5668, i64 %5677
  %5679 = bitcast i8* %5678 to i16*
  %5680 = icmp slt i32 %5664, 0
  %5681 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5682 = load i32, i32* %5681, align 8
  %5683 = icmp sgt i32 %5682, 1
  %5684 = and i1 %5680, %5683
  br i1 %5684, label %5685, label %5695

5685:                                             ; preds = %5658
  %5686 = add nsw i32 %5682, -1
  %5687 = sext i32 %5686 to i64
  %5688 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5689 = load i32, i32* %5688, align 4
  %5690 = sext i32 %5689 to i64
  %5691 = mul nsw i64 %5662, %5687
  %5692 = mul i64 %5691, %5690
  %5693 = sub i64 0, %5692
  %5694 = getelementptr inbounds i16, i16* %5679, i64 %5693
  br label %5697

5695:                                             ; preds = %5658
  %5696 = icmp sgt i32 %5682, 0
  br i1 %5696, label %5697, label %5863

5697:                                             ; preds = %5695, %5685
  %5698 = phi i16* [ %5694, %5685 ], [ %5679, %5695 ]
  %5699 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5700 = bitcast i8** %5699 to i16**
  %5701 = load i16*, i16** %5700, align 8
  %5702 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5703 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5704

5704:                                             ; preds = %5715, %5697
  %5705 = phi i32 [ %5682, %5697 ], [ %5716, %5715 ]
  %5706 = phi %"class.blink::IntRect"* [ %5670, %5697 ], [ %5717, %5715 ]
  %5707 = phi i32 [ 0, %5697 ], [ %5726, %5715 ]
  %5708 = phi i16* [ %5701, %5697 ], [ %5719, %5715 ]
  %5709 = phi i16* [ %5698, %5697 ], [ %5725, %5715 ]
  %5710 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5706, i64 0, i32 1, i32 1
  %5711 = load i32, i32* %5710, align 4
  %5712 = icmp sgt i32 %5711, 0
  br i1 %5712, label %5728, label %5715

5713:                                             ; preds = %5854
  %5714 = load i32, i32* %5681, align 8
  br label %5715

5715:                                             ; preds = %5713, %5704
  %5716 = phi i32 [ %5705, %5704 ], [ %5714, %5713 ]
  %5717 = phi %"class.blink::IntRect"* [ %5706, %5704 ], [ %5855, %5713 ]
  %5718 = phi i16* [ %5709, %5704 ], [ %5856, %5713 ]
  %5719 = phi i16* [ %5708, %5704 ], [ %5857, %5713 ]
  %5720 = phi i32 [ %5711, %5704 ], [ %5860, %5713 ]
  %5721 = load i32, i32* %5703, align 4
  %5722 = sub nsw i32 %5721, %5720
  %5723 = sext i32 %5722 to i64
  %5724 = mul nsw i64 %5723, %5662
  %5725 = getelementptr inbounds i16, i16* %5718, i64 %5724
  %5726 = add nuw nsw i32 %5707, 1
  %5727 = icmp slt i32 %5726, %5716
  br i1 %5727, label %5704, label %5863

5728:                                             ; preds = %5704, %5854
  %5729 = phi i64 [ %5862, %5854 ], [ 0, %5704 ]
  %5730 = phi %"class.blink::IntRect"* [ %5855, %5854 ], [ %5706, %5704 ]
  %5731 = phi i32 [ %5858, %5854 ], [ 0, %5704 ]
  %5732 = phi i16* [ %5857, %5854 ], [ %5708, %5704 ]
  %5733 = phi i16* [ %5856, %5854 ], [ %5709, %5704 ]
  %5734 = mul i64 %5729, %5666
  %5735 = getelementptr i16, i16* %5708, i64 %5734
  %5736 = bitcast i16* %5735 to i8*
  %5737 = add i64 %5734, 1
  %5738 = getelementptr i16, i16* %5708, i64 %5737
  %5739 = load i8*, i8** %5702, align 8
  %5740 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5730, i64 0, i32 1, i32 0
  %5741 = load i32, i32* %5740, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %5733, i8* %5739, i32 %5741) #12
  %5742 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5669, align 8
  %5743 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5742, i64 0, i32 1, i32 0
  %5744 = load i32, i32* %5743, align 4
  %5745 = icmp eq i32 %5744, 0
  br i1 %5745, label %5854, label %5746

5746:                                             ; preds = %5728
  %5747 = load i8*, i8** %5702, align 8
  %5748 = add i32 %5744, -1
  %5749 = zext i32 %5748 to i64
  %5750 = add nuw nsw i64 %5749, 1
  %5751 = icmp ult i64 %5750, 8
  br i1 %5751, label %5808, label %5752

5752:                                             ; preds = %5746
  %5753 = add i32 %5744, -1
  %5754 = zext i32 %5753 to i64
  %5755 = getelementptr i16, i16* %5738, i64 %5754
  %5756 = bitcast i16* %5755 to i8*
  %5757 = getelementptr i8, i8* %5747, i64 4
  %5758 = shl nuw nsw i64 %5754, 2
  %5759 = getelementptr i8, i8* %5757, i64 %5758
  %5760 = icmp ugt i8* %5759, %5736
  %5761 = icmp ult i8* %5747, %5756
  %5762 = and i1 %5760, %5761
  br i1 %5762, label %5808, label %5763

5763:                                             ; preds = %5752
  %5764 = and i64 %5750, 8589934584
  %5765 = shl nuw nsw i64 %5764, 2
  %5766 = getelementptr i8, i8* %5747, i64 %5765
  %5767 = getelementptr i16, i16* %5732, i64 %5764
  %5768 = trunc i64 %5764 to i32
  br label %5769

5769:                                             ; preds = %5769, %5763
  %5770 = phi i64 [ 0, %5763 ], [ %5804, %5769 ]
  %5771 = shl i64 %5770, 2
  %5772 = getelementptr i16, i16* %5732, i64 %5770
  %5773 = getelementptr inbounds i8, i8* %5747, i64 %5771
  %5774 = bitcast i8* %5773 to <32 x i8>*
  %5775 = load <32 x i8>, <32 x i8>* %5774, align 1
  %5776 = shufflevector <32 x i8> %5775, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %5777 = shufflevector <32 x i8> %5775, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %5778 = shufflevector <32 x i8> %5775, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %5779 = shufflevector <32 x i8> %5775, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %5780 = icmp eq <8 x i8> %5779, zeroinitializer
  %5781 = uitofp <8 x i8> %5779 to <8 x float>
  %5782 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %5781
  %5783 = select <8 x i1> %5780, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %5782
  %5784 = uitofp <8 x i8> %5776 to <8 x float>
  %5785 = fmul <8 x float> %5783, %5784
  %5786 = fptoui <8 x float> %5785 to <8 x i8>
  %5787 = uitofp <8 x i8> %5777 to <8 x float>
  %5788 = fmul <8 x float> %5783, %5787
  %5789 = fptoui <8 x float> %5788 to <8 x i8>
  %5790 = uitofp <8 x i8> %5778 to <8 x float>
  %5791 = fmul <8 x float> %5783, %5790
  %5792 = fptoui <8 x float> %5791 to <8 x i8>
  %5793 = and <8 x i8> %5786, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %5794 = zext <8 x i8> %5793 to <8 x i16>
  %5795 = shl nuw <8 x i16> %5794, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %5796 = and <8 x i8> %5789, <i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4, i8 -4>
  %5797 = zext <8 x i8> %5796 to <8 x i16>
  %5798 = shl nuw nsw <8 x i16> %5797, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %5799 = or <8 x i16> %5798, %5795
  %5800 = lshr <8 x i8> %5792, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %5801 = zext <8 x i8> %5800 to <8 x i16>
  %5802 = or <8 x i16> %5799, %5801
  %5803 = bitcast i16* %5772 to <8 x i16>*
  store <8 x i16> %5802, <8 x i16>* %5803, align 2, !alias.scope !689, !noalias !692
  %5804 = add i64 %5770, 8
  %5805 = icmp eq i64 %5804, %5764
  br i1 %5805, label %5806, label %5769, !llvm.loop !694

5806:                                             ; preds = %5769
  %5807 = icmp eq i64 %5750, %5764
  br i1 %5807, label %5852, label %5808

5808:                                             ; preds = %5806, %5752, %5746
  %5809 = phi i8* [ %5747, %5752 ], [ %5747, %5746 ], [ %5766, %5806 ]
  %5810 = phi i16* [ %5732, %5752 ], [ %5732, %5746 ], [ %5767, %5806 ]
  %5811 = phi i32 [ 0, %5752 ], [ 0, %5746 ], [ %5768, %5806 ]
  br label %5812

5812:                                             ; preds = %5808, %5822
  %5813 = phi i8* [ %5848, %5822 ], [ %5809, %5808 ]
  %5814 = phi i16* [ %5849, %5822 ], [ %5810, %5808 ]
  %5815 = phi i32 [ %5850, %5822 ], [ %5811, %5808 ]
  %5816 = getelementptr inbounds i8, i8* %5813, i64 3
  %5817 = load i8, i8* %5816, align 1
  %5818 = icmp eq i8 %5817, 0
  br i1 %5818, label %5822, label %5819

5819:                                             ; preds = %5812
  %5820 = uitofp i8 %5817 to float
  %5821 = fdiv float 2.550000e+02, %5820
  br label %5822

5822:                                             ; preds = %5819, %5812
  %5823 = phi float [ %5821, %5819 ], [ 1.000000e+00, %5812 ]
  %5824 = load i8, i8* %5813, align 1
  %5825 = uitofp i8 %5824 to float
  %5826 = fmul float %5823, %5825
  %5827 = fptoui float %5826 to i8
  %5828 = getelementptr inbounds i8, i8* %5813, i64 1
  %5829 = load i8, i8* %5828, align 1
  %5830 = uitofp i8 %5829 to float
  %5831 = fmul float %5823, %5830
  %5832 = fptoui float %5831 to i8
  %5833 = getelementptr inbounds i8, i8* %5813, i64 2
  %5834 = load i8, i8* %5833, align 1
  %5835 = uitofp i8 %5834 to float
  %5836 = fmul float %5823, %5835
  %5837 = fptoui float %5836 to i8
  %5838 = and i8 %5827, -8
  %5839 = zext i8 %5838 to i16
  %5840 = shl nuw i16 %5839, 8
  %5841 = and i8 %5832, -4
  %5842 = zext i8 %5841 to i16
  %5843 = shl nuw nsw i16 %5842, 3
  %5844 = or i16 %5843, %5840
  %5845 = lshr i8 %5837, 3
  %5846 = zext i8 %5845 to i16
  %5847 = or i16 %5844, %5846
  store i16 %5847, i16* %5814, align 2
  %5848 = getelementptr inbounds i8, i8* %5813, i64 4
  %5849 = getelementptr inbounds i16, i16* %5814, i64 1
  %5850 = add nuw i32 %5815, 1
  %5851 = icmp eq i32 %5850, %5744
  br i1 %5851, label %5852, label %5812, !llvm.loop !695

5852:                                             ; preds = %5822, %5806
  %5853 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5669, align 8
  br label %5854

5854:                                             ; preds = %5852, %5728
  %5855 = phi %"class.blink::IntRect"* [ %5853, %5852 ], [ %5742, %5728 ]
  %5856 = getelementptr inbounds i16, i16* %5733, i64 %5662
  %5857 = getelementptr inbounds i16, i16* %5732, i64 %5666
  %5858 = add nuw nsw i32 %5731, 1
  %5859 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5855, i64 0, i32 1, i32 1
  %5860 = load i32, i32* %5859, align 4
  %5861 = icmp slt i32 %5858, %5860
  %5862 = add i64 %5729, 1
  br i1 %5861, label %5728, label %5713

5863:                                             ; preds = %5715, %5695
  %5864 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %5864, align 4
  br label %13459

5865:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %5866
    i32 1, label %6098
    i32 2, label %6335
  ]

5866:                                             ; preds = %5865
  %5867 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %5868 = load i32, i32* %5867, align 8
  %5869 = sdiv i32 %5868, 2
  %5870 = sext i32 %5869 to i64
  %5871 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %5872 = load i32, i32* %5871, align 8
  %5873 = sdiv i32 %5872, 2
  %5874 = sext i32 %5873 to i64
  %5875 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %5876 = load i8*, i8** %5875, align 8
  %5877 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %5878 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5877, align 8
  %5879 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5878, i64 0, i32 0, i32 1
  %5880 = load i32, i32* %5879, align 4
  %5881 = mul nsw i32 %5880, %5868
  %5882 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %5883 = load i32, i32* %5882, align 4
  %5884 = add nsw i32 %5881, %5883
  %5885 = sext i32 %5884 to i64
  %5886 = getelementptr inbounds i8, i8* %5876, i64 %5885
  %5887 = bitcast i8* %5886 to i16*
  %5888 = icmp slt i32 %5872, 0
  %5889 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %5890 = load i32, i32* %5889, align 8
  %5891 = icmp sgt i32 %5890, 1
  %5892 = and i1 %5888, %5891
  br i1 %5892, label %5893, label %5903

5893:                                             ; preds = %5866
  %5894 = add nsw i32 %5890, -1
  %5895 = sext i32 %5894 to i64
  %5896 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %5897 = load i32, i32* %5896, align 4
  %5898 = sext i32 %5897 to i64
  %5899 = mul nsw i64 %5870, %5895
  %5900 = mul i64 %5899, %5898
  %5901 = sub i64 0, %5900
  %5902 = getelementptr inbounds i16, i16* %5887, i64 %5901
  br label %5905

5903:                                             ; preds = %5866
  %5904 = icmp sgt i32 %5890, 0
  br i1 %5904, label %5905, label %6096

5905:                                             ; preds = %5903, %5893
  %5906 = phi i16* [ %5902, %5893 ], [ %5887, %5903 ]
  %5907 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %5908 = bitcast i8** %5907 to i16**
  %5909 = load i16*, i16** %5908, align 8
  %5910 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %5911 = bitcast i8** %5910 to float**
  %5912 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %5913

5913:                                             ; preds = %5925, %5905
  %5914 = phi i32 [ %5890, %5905 ], [ %5926, %5925 ]
  %5915 = phi %"class.blink::IntRect"* [ %5878, %5905 ], [ %5927, %5925 ]
  %5916 = phi %"class.blink::IntRect"* [ %5878, %5905 ], [ %5928, %5925 ]
  %5917 = phi i32 [ 0, %5905 ], [ %5937, %5925 ]
  %5918 = phi i16* [ %5909, %5905 ], [ %5930, %5925 ]
  %5919 = phi i16* [ %5906, %5905 ], [ %5936, %5925 ]
  %5920 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5916, i64 0, i32 1, i32 1
  %5921 = load i32, i32* %5920, align 4
  %5922 = icmp sgt i32 %5921, 0
  br i1 %5922, label %5939, label %5925

5923:                                             ; preds = %6088
  %5924 = load i32, i32* %5889, align 8
  br label %5925

5925:                                             ; preds = %5923, %5913
  %5926 = phi i32 [ %5914, %5913 ], [ %5924, %5923 ]
  %5927 = phi %"class.blink::IntRect"* [ %5915, %5913 ], [ %6089, %5923 ]
  %5928 = phi %"class.blink::IntRect"* [ %5916, %5913 ], [ %6089, %5923 ]
  %5929 = phi i16* [ %5919, %5913 ], [ %6090, %5923 ]
  %5930 = phi i16* [ %5918, %5913 ], [ %6091, %5923 ]
  %5931 = phi i32 [ %5921, %5913 ], [ %6094, %5923 ]
  %5932 = load i32, i32* %5912, align 4
  %5933 = sub nsw i32 %5932, %5931
  %5934 = sext i32 %5933 to i64
  %5935 = mul nsw i64 %5934, %5870
  %5936 = getelementptr inbounds i16, i16* %5929, i64 %5935
  %5937 = add nuw nsw i32 %5917, 1
  %5938 = icmp slt i32 %5937, %5926
  br i1 %5938, label %5913, label %6096

5939:                                             ; preds = %5913, %6088
  %5940 = phi %"class.blink::IntRect"* [ %6089, %6088 ], [ %5915, %5913 ]
  %5941 = phi %"class.blink::IntRect"* [ %6089, %6088 ], [ %5916, %5913 ]
  %5942 = phi i32 [ %6092, %6088 ], [ 0, %5913 ]
  %5943 = phi i16* [ %6091, %6088 ], [ %5918, %5913 ]
  %5944 = phi i16* [ %6090, %6088 ], [ %5919, %5913 ]
  %5945 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %5941, i64 0, i32 1, i32 0
  %5946 = load i32, i32* %5945, align 4
  %5947 = icmp eq i32 %5946, 0
  br i1 %5947, label %6088, label %5948

5948:                                             ; preds = %5939
  %5949 = load float*, float** %5911, align 8
  br label %5950

5950:                                             ; preds = %5950, %5948
  %5951 = phi i32 [ %6026, %5950 ], [ 0, %5948 ]
  %5952 = phi i16* [ %6024, %5950 ], [ %5944, %5948 ]
  %5953 = phi float* [ %6025, %5950 ], [ %5949, %5948 ]
  %5954 = load i16, i16* %5952, align 2
  %5955 = zext i16 %5954 to i32
  %5956 = lshr i32 %5955, 10
  %5957 = zext i32 %5956 to i64
  %5958 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %5957
  %5959 = load i16, i16* %5958, align 2
  %5960 = zext i16 %5959 to i32
  %5961 = and i32 %5955, 1023
  %5962 = add nuw nsw i32 %5961, %5960
  %5963 = zext i32 %5962 to i64
  %5964 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %5963
  %5965 = load i32, i32* %5964, align 4
  %5966 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %5957
  %5967 = load i32, i32* %5966, align 4
  %5968 = add i32 %5967, %5965
  %5969 = bitcast float* %5953 to i32*
  store i32 %5968, i32* %5969, align 4
  %5970 = getelementptr inbounds i16, i16* %5952, i64 1
  %5971 = load i16, i16* %5970, align 2
  %5972 = zext i16 %5971 to i32
  %5973 = lshr i32 %5972, 10
  %5974 = zext i32 %5973 to i64
  %5975 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %5974
  %5976 = load i16, i16* %5975, align 2
  %5977 = zext i16 %5976 to i32
  %5978 = and i32 %5972, 1023
  %5979 = add nuw nsw i32 %5978, %5977
  %5980 = zext i32 %5979 to i64
  %5981 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %5980
  %5982 = load i32, i32* %5981, align 4
  %5983 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %5974
  %5984 = load i32, i32* %5983, align 4
  %5985 = add i32 %5984, %5982
  %5986 = getelementptr inbounds float, float* %5953, i64 1
  %5987 = bitcast float* %5986 to i32*
  store i32 %5985, i32* %5987, align 4
  %5988 = getelementptr inbounds i16, i16* %5952, i64 2
  %5989 = load i16, i16* %5988, align 2
  %5990 = zext i16 %5989 to i32
  %5991 = lshr i32 %5990, 10
  %5992 = zext i32 %5991 to i64
  %5993 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %5992
  %5994 = load i16, i16* %5993, align 2
  %5995 = zext i16 %5994 to i32
  %5996 = and i32 %5990, 1023
  %5997 = add nuw nsw i32 %5996, %5995
  %5998 = zext i32 %5997 to i64
  %5999 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %5998
  %6000 = load i32, i32* %5999, align 4
  %6001 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %5992
  %6002 = load i32, i32* %6001, align 4
  %6003 = add i32 %6002, %6000
  %6004 = getelementptr inbounds float, float* %5953, i64 2
  %6005 = bitcast float* %6004 to i32*
  store i32 %6003, i32* %6005, align 4
  %6006 = getelementptr inbounds i16, i16* %5952, i64 3
  %6007 = load i16, i16* %6006, align 2
  %6008 = zext i16 %6007 to i32
  %6009 = lshr i32 %6008, 10
  %6010 = zext i32 %6009 to i64
  %6011 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6010
  %6012 = load i16, i16* %6011, align 2
  %6013 = zext i16 %6012 to i32
  %6014 = and i32 %6008, 1023
  %6015 = add nuw nsw i32 %6014, %6013
  %6016 = zext i32 %6015 to i64
  %6017 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6016
  %6018 = load i32, i32* %6017, align 4
  %6019 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6010
  %6020 = load i32, i32* %6019, align 4
  %6021 = add i32 %6020, %6018
  %6022 = getelementptr inbounds float, float* %5953, i64 3
  %6023 = bitcast float* %6022 to i32*
  store i32 %6021, i32* %6023, align 4
  %6024 = getelementptr inbounds i16, i16* %5952, i64 4
  %6025 = getelementptr inbounds float, float* %5953, i64 4
  %6026 = add nuw i32 %5951, 1
  %6027 = icmp eq i32 %6026, %5946
  br i1 %6027, label %6028, label %5950

6028:                                             ; preds = %5950
  %6029 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5877, align 8
  %6030 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6029, i64 0, i32 1, i32 0
  %6031 = load i32, i32* %6030, align 4
  %6032 = icmp eq i32 %6031, 0
  br i1 %6032, label %6088, label %6033

6033:                                             ; preds = %6028
  %6034 = load float*, float** %5911, align 8
  br label %6035

6035:                                             ; preds = %6035, %6033
  %6036 = phi i32 [ %6084, %6035 ], [ 0, %6033 ]
  %6037 = phi float* [ %6082, %6035 ], [ %6034, %6033 ]
  %6038 = phi i16* [ %6083, %6035 ], [ %5943, %6033 ]
  %6039 = bitcast float* %6037 to i32*
  %6040 = load i32, i32* %6039, align 4
  %6041 = lshr i32 %6040, 23
  %6042 = zext i32 %6041 to i64
  %6043 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6042
  %6044 = load i16, i16* %6043, align 2
  %6045 = and i32 %6040, 8388607
  %6046 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6042
  %6047 = load i8, i8* %6046, align 1
  %6048 = zext i8 %6047 to i32
  %6049 = lshr i32 %6045, %6048
  %6050 = trunc i32 %6049 to i16
  %6051 = add i16 %6044, %6050
  store i16 %6051, i16* %6038, align 2
  %6052 = getelementptr inbounds float, float* %6037, i64 1
  %6053 = bitcast float* %6052 to i32*
  %6054 = load i32, i32* %6053, align 4
  %6055 = lshr i32 %6054, 23
  %6056 = zext i32 %6055 to i64
  %6057 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6056
  %6058 = load i16, i16* %6057, align 2
  %6059 = and i32 %6054, 8388607
  %6060 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6056
  %6061 = load i8, i8* %6060, align 1
  %6062 = zext i8 %6061 to i32
  %6063 = lshr i32 %6059, %6062
  %6064 = trunc i32 %6063 to i16
  %6065 = add i16 %6058, %6064
  %6066 = getelementptr inbounds i16, i16* %6038, i64 1
  store i16 %6065, i16* %6066, align 2
  %6067 = getelementptr inbounds float, float* %6037, i64 2
  %6068 = bitcast float* %6067 to i32*
  %6069 = load i32, i32* %6068, align 4
  %6070 = lshr i32 %6069, 23
  %6071 = zext i32 %6070 to i64
  %6072 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6071
  %6073 = load i16, i16* %6072, align 2
  %6074 = and i32 %6069, 8388607
  %6075 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6071
  %6076 = load i8, i8* %6075, align 1
  %6077 = zext i8 %6076 to i32
  %6078 = lshr i32 %6074, %6077
  %6079 = trunc i32 %6078 to i16
  %6080 = add i16 %6073, %6079
  %6081 = getelementptr inbounds i16, i16* %6038, i64 2
  store i16 %6080, i16* %6081, align 2
  %6082 = getelementptr inbounds float, float* %6037, i64 4
  %6083 = getelementptr inbounds i16, i16* %6038, i64 3
  %6084 = add nuw i32 %6036, 1
  %6085 = icmp eq i32 %6084, %6031
  br i1 %6085, label %6086, label %6035

6086:                                             ; preds = %6035
  %6087 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %5877, align 8
  br label %6088

6088:                                             ; preds = %6086, %6028, %5939
  %6089 = phi %"class.blink::IntRect"* [ %6087, %6086 ], [ %6029, %6028 ], [ %5940, %5939 ]
  %6090 = getelementptr inbounds i16, i16* %5944, i64 %5870
  %6091 = getelementptr inbounds i16, i16* %5943, i64 %5874
  %6092 = add nuw nsw i32 %5942, 1
  %6093 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6089, i64 0, i32 1, i32 1
  %6094 = load i32, i32* %6093, align 4
  %6095 = icmp slt i32 %6092, %6094
  br i1 %6095, label %5939, label %5923

6096:                                             ; preds = %5925, %5903
  %6097 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6097, align 4
  br label %13459

6098:                                             ; preds = %5865
  %6099 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6100 = load i32, i32* %6099, align 8
  %6101 = sdiv i32 %6100, 2
  %6102 = sext i32 %6101 to i64
  %6103 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6104 = load i32, i32* %6103, align 8
  %6105 = sdiv i32 %6104, 2
  %6106 = sext i32 %6105 to i64
  %6107 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6108 = load i8*, i8** %6107, align 8
  %6109 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6110 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6109, align 8
  %6111 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6110, i64 0, i32 0, i32 1
  %6112 = load i32, i32* %6111, align 4
  %6113 = mul nsw i32 %6112, %6100
  %6114 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6115 = load i32, i32* %6114, align 4
  %6116 = add nsw i32 %6113, %6115
  %6117 = sext i32 %6116 to i64
  %6118 = getelementptr inbounds i8, i8* %6108, i64 %6117
  %6119 = bitcast i8* %6118 to i16*
  %6120 = icmp slt i32 %6104, 0
  %6121 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6122 = load i32, i32* %6121, align 8
  %6123 = icmp sgt i32 %6122, 1
  %6124 = and i1 %6120, %6123
  br i1 %6124, label %6125, label %6135

6125:                                             ; preds = %6098
  %6126 = add nsw i32 %6122, -1
  %6127 = sext i32 %6126 to i64
  %6128 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6129 = load i32, i32* %6128, align 4
  %6130 = sext i32 %6129 to i64
  %6131 = mul nsw i64 %6102, %6127
  %6132 = mul i64 %6131, %6130
  %6133 = sub i64 0, %6132
  %6134 = getelementptr inbounds i16, i16* %6119, i64 %6133
  br label %6137

6135:                                             ; preds = %6098
  %6136 = icmp sgt i32 %6122, 0
  br i1 %6136, label %6137, label %6333

6137:                                             ; preds = %6135, %6125
  %6138 = phi i16* [ %6134, %6125 ], [ %6119, %6135 ]
  %6139 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6140 = bitcast i8** %6139 to i16**
  %6141 = load i16*, i16** %6140, align 8
  %6142 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6143 = bitcast i8** %6142 to float**
  %6144 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6145

6145:                                             ; preds = %6157, %6137
  %6146 = phi i32 [ %6122, %6137 ], [ %6158, %6157 ]
  %6147 = phi %"class.blink::IntRect"* [ %6110, %6137 ], [ %6159, %6157 ]
  %6148 = phi %"class.blink::IntRect"* [ %6110, %6137 ], [ %6160, %6157 ]
  %6149 = phi i32 [ 0, %6137 ], [ %6169, %6157 ]
  %6150 = phi i16* [ %6141, %6137 ], [ %6162, %6157 ]
  %6151 = phi i16* [ %6138, %6137 ], [ %6168, %6157 ]
  %6152 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6148, i64 0, i32 1, i32 1
  %6153 = load i32, i32* %6152, align 4
  %6154 = icmp sgt i32 %6153, 0
  br i1 %6154, label %6171, label %6157

6155:                                             ; preds = %6325
  %6156 = load i32, i32* %6121, align 8
  br label %6157

6157:                                             ; preds = %6155, %6145
  %6158 = phi i32 [ %6146, %6145 ], [ %6156, %6155 ]
  %6159 = phi %"class.blink::IntRect"* [ %6147, %6145 ], [ %6326, %6155 ]
  %6160 = phi %"class.blink::IntRect"* [ %6148, %6145 ], [ %6326, %6155 ]
  %6161 = phi i16* [ %6151, %6145 ], [ %6327, %6155 ]
  %6162 = phi i16* [ %6150, %6145 ], [ %6328, %6155 ]
  %6163 = phi i32 [ %6153, %6145 ], [ %6331, %6155 ]
  %6164 = load i32, i32* %6144, align 4
  %6165 = sub nsw i32 %6164, %6163
  %6166 = sext i32 %6165 to i64
  %6167 = mul nsw i64 %6166, %6102
  %6168 = getelementptr inbounds i16, i16* %6161, i64 %6167
  %6169 = add nuw nsw i32 %6149, 1
  %6170 = icmp slt i32 %6169, %6158
  br i1 %6170, label %6145, label %6333

6171:                                             ; preds = %6145, %6325
  %6172 = phi %"class.blink::IntRect"* [ %6326, %6325 ], [ %6147, %6145 ]
  %6173 = phi %"class.blink::IntRect"* [ %6326, %6325 ], [ %6148, %6145 ]
  %6174 = phi i32 [ %6329, %6325 ], [ 0, %6145 ]
  %6175 = phi i16* [ %6328, %6325 ], [ %6150, %6145 ]
  %6176 = phi i16* [ %6327, %6325 ], [ %6151, %6145 ]
  %6177 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6173, i64 0, i32 1, i32 0
  %6178 = load i32, i32* %6177, align 4
  %6179 = icmp eq i32 %6178, 0
  br i1 %6179, label %6325, label %6180

6180:                                             ; preds = %6171
  %6181 = load float*, float** %6143, align 8
  br label %6182

6182:                                             ; preds = %6182, %6180
  %6183 = phi i32 [ %6258, %6182 ], [ 0, %6180 ]
  %6184 = phi i16* [ %6256, %6182 ], [ %6176, %6180 ]
  %6185 = phi float* [ %6257, %6182 ], [ %6181, %6180 ]
  %6186 = load i16, i16* %6184, align 2
  %6187 = zext i16 %6186 to i32
  %6188 = lshr i32 %6187, 10
  %6189 = zext i32 %6188 to i64
  %6190 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6189
  %6191 = load i16, i16* %6190, align 2
  %6192 = zext i16 %6191 to i32
  %6193 = and i32 %6187, 1023
  %6194 = add nuw nsw i32 %6193, %6192
  %6195 = zext i32 %6194 to i64
  %6196 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6195
  %6197 = load i32, i32* %6196, align 4
  %6198 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6189
  %6199 = load i32, i32* %6198, align 4
  %6200 = add i32 %6199, %6197
  %6201 = bitcast float* %6185 to i32*
  store i32 %6200, i32* %6201, align 4
  %6202 = getelementptr inbounds i16, i16* %6184, i64 1
  %6203 = load i16, i16* %6202, align 2
  %6204 = zext i16 %6203 to i32
  %6205 = lshr i32 %6204, 10
  %6206 = zext i32 %6205 to i64
  %6207 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6206
  %6208 = load i16, i16* %6207, align 2
  %6209 = zext i16 %6208 to i32
  %6210 = and i32 %6204, 1023
  %6211 = add nuw nsw i32 %6210, %6209
  %6212 = zext i32 %6211 to i64
  %6213 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6212
  %6214 = load i32, i32* %6213, align 4
  %6215 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6206
  %6216 = load i32, i32* %6215, align 4
  %6217 = add i32 %6216, %6214
  %6218 = getelementptr inbounds float, float* %6185, i64 1
  %6219 = bitcast float* %6218 to i32*
  store i32 %6217, i32* %6219, align 4
  %6220 = getelementptr inbounds i16, i16* %6184, i64 2
  %6221 = load i16, i16* %6220, align 2
  %6222 = zext i16 %6221 to i32
  %6223 = lshr i32 %6222, 10
  %6224 = zext i32 %6223 to i64
  %6225 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6224
  %6226 = load i16, i16* %6225, align 2
  %6227 = zext i16 %6226 to i32
  %6228 = and i32 %6222, 1023
  %6229 = add nuw nsw i32 %6228, %6227
  %6230 = zext i32 %6229 to i64
  %6231 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6230
  %6232 = load i32, i32* %6231, align 4
  %6233 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6224
  %6234 = load i32, i32* %6233, align 4
  %6235 = add i32 %6234, %6232
  %6236 = getelementptr inbounds float, float* %6185, i64 2
  %6237 = bitcast float* %6236 to i32*
  store i32 %6235, i32* %6237, align 4
  %6238 = getelementptr inbounds i16, i16* %6184, i64 3
  %6239 = load i16, i16* %6238, align 2
  %6240 = zext i16 %6239 to i32
  %6241 = lshr i32 %6240, 10
  %6242 = zext i32 %6241 to i64
  %6243 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6242
  %6244 = load i16, i16* %6243, align 2
  %6245 = zext i16 %6244 to i32
  %6246 = and i32 %6240, 1023
  %6247 = add nuw nsw i32 %6246, %6245
  %6248 = zext i32 %6247 to i64
  %6249 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6248
  %6250 = load i32, i32* %6249, align 4
  %6251 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6242
  %6252 = load i32, i32* %6251, align 4
  %6253 = add i32 %6252, %6250
  %6254 = getelementptr inbounds float, float* %6185, i64 3
  %6255 = bitcast float* %6254 to i32*
  store i32 %6253, i32* %6255, align 4
  %6256 = getelementptr inbounds i16, i16* %6184, i64 4
  %6257 = getelementptr inbounds float, float* %6185, i64 4
  %6258 = add nuw i32 %6183, 1
  %6259 = icmp eq i32 %6258, %6178
  br i1 %6259, label %6260, label %6182

6260:                                             ; preds = %6182
  %6261 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6109, align 8
  %6262 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6261, i64 0, i32 1, i32 0
  %6263 = load i32, i32* %6262, align 4
  %6264 = icmp eq i32 %6263, 0
  br i1 %6264, label %6325, label %6265

6265:                                             ; preds = %6260
  %6266 = load float*, float** %6143, align 8
  br label %6267

6267:                                             ; preds = %6267, %6265
  %6268 = phi float* [ %6319, %6267 ], [ %6266, %6265 ]
  %6269 = phi i32 [ %6321, %6267 ], [ 0, %6265 ]
  %6270 = phi i16* [ %6320, %6267 ], [ %6175, %6265 ]
  %6271 = getelementptr inbounds float, float* %6268, i64 3
  %6272 = load float, float* %6271, align 4
  %6273 = load float, float* %6268, align 4
  %6274 = fmul float %6272, %6273
  %6275 = bitcast float %6274 to i32
  %6276 = lshr i32 %6275, 23
  %6277 = zext i32 %6276 to i64
  %6278 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6277
  %6279 = load i16, i16* %6278, align 2
  %6280 = and i32 %6275, 8388607
  %6281 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6277
  %6282 = load i8, i8* %6281, align 1
  %6283 = zext i8 %6282 to i32
  %6284 = lshr i32 %6280, %6283
  %6285 = trunc i32 %6284 to i16
  %6286 = add i16 %6279, %6285
  store i16 %6286, i16* %6270, align 2
  %6287 = getelementptr inbounds float, float* %6268, i64 1
  %6288 = load float, float* %6287, align 4
  %6289 = fmul float %6272, %6288
  %6290 = bitcast float %6289 to i32
  %6291 = lshr i32 %6290, 23
  %6292 = zext i32 %6291 to i64
  %6293 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6292
  %6294 = load i16, i16* %6293, align 2
  %6295 = and i32 %6290, 8388607
  %6296 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6292
  %6297 = load i8, i8* %6296, align 1
  %6298 = zext i8 %6297 to i32
  %6299 = lshr i32 %6295, %6298
  %6300 = trunc i32 %6299 to i16
  %6301 = add i16 %6294, %6300
  %6302 = getelementptr inbounds i16, i16* %6270, i64 1
  store i16 %6301, i16* %6302, align 2
  %6303 = getelementptr inbounds float, float* %6268, i64 2
  %6304 = load float, float* %6303, align 4
  %6305 = fmul float %6272, %6304
  %6306 = bitcast float %6305 to i32
  %6307 = lshr i32 %6306, 23
  %6308 = zext i32 %6307 to i64
  %6309 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6308
  %6310 = load i16, i16* %6309, align 2
  %6311 = and i32 %6306, 8388607
  %6312 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6308
  %6313 = load i8, i8* %6312, align 1
  %6314 = zext i8 %6313 to i32
  %6315 = lshr i32 %6311, %6314
  %6316 = trunc i32 %6315 to i16
  %6317 = add i16 %6310, %6316
  %6318 = getelementptr inbounds i16, i16* %6270, i64 2
  store i16 %6317, i16* %6318, align 2
  %6319 = getelementptr inbounds float, float* %6268, i64 4
  %6320 = getelementptr inbounds i16, i16* %6270, i64 3
  %6321 = add nuw i32 %6269, 1
  %6322 = icmp eq i32 %6321, %6263
  br i1 %6322, label %6323, label %6267

6323:                                             ; preds = %6267
  %6324 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6109, align 8
  br label %6325

6325:                                             ; preds = %6323, %6260, %6171
  %6326 = phi %"class.blink::IntRect"* [ %6324, %6323 ], [ %6261, %6260 ], [ %6172, %6171 ]
  %6327 = getelementptr inbounds i16, i16* %6176, i64 %6102
  %6328 = getelementptr inbounds i16, i16* %6175, i64 %6106
  %6329 = add nuw nsw i32 %6174, 1
  %6330 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6326, i64 0, i32 1, i32 1
  %6331 = load i32, i32* %6330, align 4
  %6332 = icmp slt i32 %6329, %6331
  br i1 %6332, label %6171, label %6155

6333:                                             ; preds = %6157, %6135
  %6334 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6334, align 4
  br label %13459

6335:                                             ; preds = %5865
  %6336 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6337 = load i32, i32* %6336, align 8
  %6338 = sdiv i32 %6337, 2
  %6339 = sext i32 %6338 to i64
  %6340 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6341 = load i32, i32* %6340, align 8
  %6342 = sdiv i32 %6341, 2
  %6343 = sext i32 %6342 to i64
  %6344 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6345 = load i8*, i8** %6344, align 8
  %6346 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6347 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6346, align 8
  %6348 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6347, i64 0, i32 0, i32 1
  %6349 = load i32, i32* %6348, align 4
  %6350 = mul nsw i32 %6349, %6337
  %6351 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6352 = load i32, i32* %6351, align 4
  %6353 = add nsw i32 %6350, %6352
  %6354 = sext i32 %6353 to i64
  %6355 = getelementptr inbounds i8, i8* %6345, i64 %6354
  %6356 = bitcast i8* %6355 to i16*
  %6357 = icmp slt i32 %6341, 0
  %6358 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6359 = load i32, i32* %6358, align 8
  %6360 = icmp sgt i32 %6359, 1
  %6361 = and i1 %6357, %6360
  br i1 %6361, label %6362, label %6372

6362:                                             ; preds = %6335
  %6363 = add nsw i32 %6359, -1
  %6364 = sext i32 %6363 to i64
  %6365 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6366 = load i32, i32* %6365, align 4
  %6367 = sext i32 %6366 to i64
  %6368 = mul nsw i64 %6339, %6364
  %6369 = mul i64 %6368, %6367
  %6370 = sub i64 0, %6369
  %6371 = getelementptr inbounds i16, i16* %6356, i64 %6370
  br label %6374

6372:                                             ; preds = %6335
  %6373 = icmp sgt i32 %6359, 0
  br i1 %6373, label %6374, label %6573

6374:                                             ; preds = %6372, %6362
  %6375 = phi i16* [ %6371, %6362 ], [ %6356, %6372 ]
  %6376 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6377 = bitcast i8** %6376 to i16**
  %6378 = load i16*, i16** %6377, align 8
  %6379 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6380 = bitcast i8** %6379 to float**
  %6381 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6382

6382:                                             ; preds = %6394, %6374
  %6383 = phi i32 [ %6359, %6374 ], [ %6395, %6394 ]
  %6384 = phi %"class.blink::IntRect"* [ %6347, %6374 ], [ %6396, %6394 ]
  %6385 = phi %"class.blink::IntRect"* [ %6347, %6374 ], [ %6397, %6394 ]
  %6386 = phi i32 [ 0, %6374 ], [ %6406, %6394 ]
  %6387 = phi i16* [ %6378, %6374 ], [ %6399, %6394 ]
  %6388 = phi i16* [ %6375, %6374 ], [ %6405, %6394 ]
  %6389 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6385, i64 0, i32 1, i32 1
  %6390 = load i32, i32* %6389, align 4
  %6391 = icmp sgt i32 %6390, 0
  br i1 %6391, label %6408, label %6394

6392:                                             ; preds = %6565
  %6393 = load i32, i32* %6358, align 8
  br label %6394

6394:                                             ; preds = %6392, %6382
  %6395 = phi i32 [ %6383, %6382 ], [ %6393, %6392 ]
  %6396 = phi %"class.blink::IntRect"* [ %6384, %6382 ], [ %6566, %6392 ]
  %6397 = phi %"class.blink::IntRect"* [ %6385, %6382 ], [ %6566, %6392 ]
  %6398 = phi i16* [ %6388, %6382 ], [ %6567, %6392 ]
  %6399 = phi i16* [ %6387, %6382 ], [ %6568, %6392 ]
  %6400 = phi i32 [ %6390, %6382 ], [ %6571, %6392 ]
  %6401 = load i32, i32* %6381, align 4
  %6402 = sub nsw i32 %6401, %6400
  %6403 = sext i32 %6402 to i64
  %6404 = mul nsw i64 %6403, %6339
  %6405 = getelementptr inbounds i16, i16* %6398, i64 %6404
  %6406 = add nuw nsw i32 %6386, 1
  %6407 = icmp slt i32 %6406, %6395
  br i1 %6407, label %6382, label %6573

6408:                                             ; preds = %6382, %6565
  %6409 = phi %"class.blink::IntRect"* [ %6566, %6565 ], [ %6384, %6382 ]
  %6410 = phi %"class.blink::IntRect"* [ %6566, %6565 ], [ %6385, %6382 ]
  %6411 = phi i32 [ %6569, %6565 ], [ 0, %6382 ]
  %6412 = phi i16* [ %6568, %6565 ], [ %6387, %6382 ]
  %6413 = phi i16* [ %6567, %6565 ], [ %6388, %6382 ]
  %6414 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6410, i64 0, i32 1, i32 0
  %6415 = load i32, i32* %6414, align 4
  %6416 = icmp eq i32 %6415, 0
  br i1 %6416, label %6565, label %6417

6417:                                             ; preds = %6408
  %6418 = load float*, float** %6380, align 8
  br label %6419

6419:                                             ; preds = %6419, %6417
  %6420 = phi i32 [ %6495, %6419 ], [ 0, %6417 ]
  %6421 = phi i16* [ %6493, %6419 ], [ %6413, %6417 ]
  %6422 = phi float* [ %6494, %6419 ], [ %6418, %6417 ]
  %6423 = load i16, i16* %6421, align 2
  %6424 = zext i16 %6423 to i32
  %6425 = lshr i32 %6424, 10
  %6426 = zext i32 %6425 to i64
  %6427 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6426
  %6428 = load i16, i16* %6427, align 2
  %6429 = zext i16 %6428 to i32
  %6430 = and i32 %6424, 1023
  %6431 = add nuw nsw i32 %6430, %6429
  %6432 = zext i32 %6431 to i64
  %6433 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6432
  %6434 = load i32, i32* %6433, align 4
  %6435 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6426
  %6436 = load i32, i32* %6435, align 4
  %6437 = add i32 %6436, %6434
  %6438 = bitcast float* %6422 to i32*
  store i32 %6437, i32* %6438, align 4
  %6439 = getelementptr inbounds i16, i16* %6421, i64 1
  %6440 = load i16, i16* %6439, align 2
  %6441 = zext i16 %6440 to i32
  %6442 = lshr i32 %6441, 10
  %6443 = zext i32 %6442 to i64
  %6444 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6443
  %6445 = load i16, i16* %6444, align 2
  %6446 = zext i16 %6445 to i32
  %6447 = and i32 %6441, 1023
  %6448 = add nuw nsw i32 %6447, %6446
  %6449 = zext i32 %6448 to i64
  %6450 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6449
  %6451 = load i32, i32* %6450, align 4
  %6452 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6443
  %6453 = load i32, i32* %6452, align 4
  %6454 = add i32 %6453, %6451
  %6455 = getelementptr inbounds float, float* %6422, i64 1
  %6456 = bitcast float* %6455 to i32*
  store i32 %6454, i32* %6456, align 4
  %6457 = getelementptr inbounds i16, i16* %6421, i64 2
  %6458 = load i16, i16* %6457, align 2
  %6459 = zext i16 %6458 to i32
  %6460 = lshr i32 %6459, 10
  %6461 = zext i32 %6460 to i64
  %6462 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6461
  %6463 = load i16, i16* %6462, align 2
  %6464 = zext i16 %6463 to i32
  %6465 = and i32 %6459, 1023
  %6466 = add nuw nsw i32 %6465, %6464
  %6467 = zext i32 %6466 to i64
  %6468 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6467
  %6469 = load i32, i32* %6468, align 4
  %6470 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6461
  %6471 = load i32, i32* %6470, align 4
  %6472 = add i32 %6471, %6469
  %6473 = getelementptr inbounds float, float* %6422, i64 2
  %6474 = bitcast float* %6473 to i32*
  store i32 %6472, i32* %6474, align 4
  %6475 = getelementptr inbounds i16, i16* %6421, i64 3
  %6476 = load i16, i16* %6475, align 2
  %6477 = zext i16 %6476 to i32
  %6478 = lshr i32 %6477, 10
  %6479 = zext i32 %6478 to i64
  %6480 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6479
  %6481 = load i16, i16* %6480, align 2
  %6482 = zext i16 %6481 to i32
  %6483 = and i32 %6477, 1023
  %6484 = add nuw nsw i32 %6483, %6482
  %6485 = zext i32 %6484 to i64
  %6486 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6485
  %6487 = load i32, i32* %6486, align 4
  %6488 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6479
  %6489 = load i32, i32* %6488, align 4
  %6490 = add i32 %6489, %6487
  %6491 = getelementptr inbounds float, float* %6422, i64 3
  %6492 = bitcast float* %6491 to i32*
  store i32 %6490, i32* %6492, align 4
  %6493 = getelementptr inbounds i16, i16* %6421, i64 4
  %6494 = getelementptr inbounds float, float* %6422, i64 4
  %6495 = add nuw i32 %6420, 1
  %6496 = icmp eq i32 %6495, %6415
  br i1 %6496, label %6497, label %6419

6497:                                             ; preds = %6419
  %6498 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6346, align 8
  %6499 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6498, i64 0, i32 1, i32 0
  %6500 = load i32, i32* %6499, align 4
  %6501 = icmp eq i32 %6500, 0
  br i1 %6501, label %6565, label %6502

6502:                                             ; preds = %6497
  %6503 = load float*, float** %6380, align 8
  br label %6504

6504:                                             ; preds = %6504, %6502
  %6505 = phi i32 [ %6561, %6504 ], [ 0, %6502 ]
  %6506 = phi float* [ %6559, %6504 ], [ %6503, %6502 ]
  %6507 = phi i16* [ %6560, %6504 ], [ %6412, %6502 ]
  %6508 = getelementptr inbounds float, float* %6506, i64 3
  %6509 = load float, float* %6508, align 4
  %6510 = fcmp une float %6509, 0.000000e+00
  %6511 = fdiv float 1.000000e+00, %6509
  %6512 = select i1 %6510, float %6511, float 1.000000e+00
  %6513 = load float, float* %6506, align 4
  %6514 = fmul float %6513, %6512
  %6515 = bitcast float %6514 to i32
  %6516 = lshr i32 %6515, 23
  %6517 = zext i32 %6516 to i64
  %6518 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6517
  %6519 = load i16, i16* %6518, align 2
  %6520 = and i32 %6515, 8388607
  %6521 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6517
  %6522 = load i8, i8* %6521, align 1
  %6523 = zext i8 %6522 to i32
  %6524 = lshr i32 %6520, %6523
  %6525 = trunc i32 %6524 to i16
  %6526 = add i16 %6519, %6525
  store i16 %6526, i16* %6507, align 2
  %6527 = getelementptr inbounds float, float* %6506, i64 1
  %6528 = load float, float* %6527, align 4
  %6529 = fmul float %6512, %6528
  %6530 = bitcast float %6529 to i32
  %6531 = lshr i32 %6530, 23
  %6532 = zext i32 %6531 to i64
  %6533 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6532
  %6534 = load i16, i16* %6533, align 2
  %6535 = and i32 %6530, 8388607
  %6536 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6532
  %6537 = load i8, i8* %6536, align 1
  %6538 = zext i8 %6537 to i32
  %6539 = lshr i32 %6535, %6538
  %6540 = trunc i32 %6539 to i16
  %6541 = add i16 %6534, %6540
  %6542 = getelementptr inbounds i16, i16* %6507, i64 1
  store i16 %6541, i16* %6542, align 2
  %6543 = getelementptr inbounds float, float* %6506, i64 2
  %6544 = load float, float* %6543, align 4
  %6545 = fmul float %6512, %6544
  %6546 = bitcast float %6545 to i32
  %6547 = lshr i32 %6546, 23
  %6548 = zext i32 %6547 to i64
  %6549 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %6548
  %6550 = load i16, i16* %6549, align 2
  %6551 = and i32 %6546, 8388607
  %6552 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %6548
  %6553 = load i8, i8* %6552, align 1
  %6554 = zext i8 %6553 to i32
  %6555 = lshr i32 %6551, %6554
  %6556 = trunc i32 %6555 to i16
  %6557 = add i16 %6550, %6556
  %6558 = getelementptr inbounds i16, i16* %6507, i64 2
  store i16 %6557, i16* %6558, align 2
  %6559 = getelementptr inbounds float, float* %6506, i64 4
  %6560 = getelementptr inbounds i16, i16* %6507, i64 3
  %6561 = add nuw i32 %6505, 1
  %6562 = icmp eq i32 %6561, %6500
  br i1 %6562, label %6563, label %6504

6563:                                             ; preds = %6504
  %6564 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6346, align 8
  br label %6565

6565:                                             ; preds = %6563, %6497, %6408
  %6566 = phi %"class.blink::IntRect"* [ %6564, %6563 ], [ %6498, %6497 ], [ %6409, %6408 ]
  %6567 = getelementptr inbounds i16, i16* %6413, i64 %6339
  %6568 = getelementptr inbounds i16, i16* %6412, i64 %6343
  %6569 = add nuw nsw i32 %6411, 1
  %6570 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6566, i64 0, i32 1, i32 1
  %6571 = load i32, i32* %6570, align 4
  %6572 = icmp slt i32 %6569, %6571
  br i1 %6572, label %6408, label %6392

6573:                                             ; preds = %6394, %6372
  %6574 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6574, align 4
  br label %13459

6575:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %6576
    i32 1, label %6815
    i32 2, label %7051
  ]

6576:                                             ; preds = %6575
  %6577 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6578 = load i32, i32* %6577, align 8
  %6579 = sdiv i32 %6578, 2
  %6580 = sext i32 %6579 to i64
  %6581 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6582 = load i32, i32* %6581, align 8
  %6583 = sdiv i32 %6582, 4
  %6584 = sext i32 %6583 to i64
  %6585 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6586 = load i8*, i8** %6585, align 8
  %6587 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6588 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6587, align 8
  %6589 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6588, i64 0, i32 0, i32 1
  %6590 = load i32, i32* %6589, align 4
  %6591 = mul nsw i32 %6590, %6578
  %6592 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6593 = load i32, i32* %6592, align 4
  %6594 = add nsw i32 %6591, %6593
  %6595 = sext i32 %6594 to i64
  %6596 = getelementptr inbounds i8, i8* %6586, i64 %6595
  %6597 = bitcast i8* %6596 to i16*
  %6598 = icmp slt i32 %6582, 0
  %6599 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6600 = load i32, i32* %6599, align 8
  %6601 = icmp sgt i32 %6600, 1
  %6602 = and i1 %6598, %6601
  br i1 %6602, label %6603, label %6613

6603:                                             ; preds = %6576
  %6604 = add nsw i32 %6600, -1
  %6605 = sext i32 %6604 to i64
  %6606 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6607 = load i32, i32* %6606, align 4
  %6608 = sext i32 %6607 to i64
  %6609 = mul nsw i64 %6580, %6605
  %6610 = mul i64 %6609, %6608
  %6611 = sub i64 0, %6610
  %6612 = getelementptr inbounds i16, i16* %6597, i64 %6611
  br label %6615

6613:                                             ; preds = %6576
  %6614 = icmp sgt i32 %6600, 0
  br i1 %6614, label %6615, label %6813

6615:                                             ; preds = %6613, %6603
  %6616 = phi i16* [ %6612, %6603 ], [ %6597, %6613 ]
  %6617 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6618 = bitcast i8** %6617 to float**
  %6619 = load float*, float** %6618, align 8
  %6620 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6621 = bitcast i8** %6620 to float**
  %6622 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6623

6623:                                             ; preds = %6635, %6615
  %6624 = phi i32 [ %6600, %6615 ], [ %6636, %6635 ]
  %6625 = phi %"class.blink::IntRect"* [ %6588, %6615 ], [ %6637, %6635 ]
  %6626 = phi %"class.blink::IntRect"* [ %6588, %6615 ], [ %6638, %6635 ]
  %6627 = phi i32 [ 0, %6615 ], [ %6647, %6635 ]
  %6628 = phi float* [ %6619, %6615 ], [ %6640, %6635 ]
  %6629 = phi i16* [ %6616, %6615 ], [ %6646, %6635 ]
  %6630 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6626, i64 0, i32 1, i32 1
  %6631 = load i32, i32* %6630, align 4
  %6632 = icmp sgt i32 %6631, 0
  br i1 %6632, label %6649, label %6635

6633:                                             ; preds = %6805
  %6634 = load i32, i32* %6599, align 8
  br label %6635

6635:                                             ; preds = %6633, %6623
  %6636 = phi i32 [ %6624, %6623 ], [ %6634, %6633 ]
  %6637 = phi %"class.blink::IntRect"* [ %6625, %6623 ], [ %6806, %6633 ]
  %6638 = phi %"class.blink::IntRect"* [ %6626, %6623 ], [ %6806, %6633 ]
  %6639 = phi i16* [ %6629, %6623 ], [ %6807, %6633 ]
  %6640 = phi float* [ %6628, %6623 ], [ %6808, %6633 ]
  %6641 = phi i32 [ %6631, %6623 ], [ %6811, %6633 ]
  %6642 = load i32, i32* %6622, align 4
  %6643 = sub nsw i32 %6642, %6641
  %6644 = sext i32 %6643 to i64
  %6645 = mul nsw i64 %6644, %6580
  %6646 = getelementptr inbounds i16, i16* %6639, i64 %6645
  %6647 = add nuw nsw i32 %6627, 1
  %6648 = icmp slt i32 %6647, %6636
  br i1 %6648, label %6623, label %6813

6649:                                             ; preds = %6623, %6805
  %6650 = phi %"class.blink::IntRect"* [ %6806, %6805 ], [ %6625, %6623 ]
  %6651 = phi %"class.blink::IntRect"* [ %6806, %6805 ], [ %6626, %6623 ]
  %6652 = phi i32 [ %6809, %6805 ], [ 0, %6623 ]
  %6653 = phi float* [ %6808, %6805 ], [ %6628, %6623 ]
  %6654 = phi i16* [ %6807, %6805 ], [ %6629, %6623 ]
  %6655 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6651, i64 0, i32 1, i32 0
  %6656 = load i32, i32* %6655, align 4
  %6657 = icmp eq i32 %6656, 0
  br i1 %6657, label %6805, label %6658

6658:                                             ; preds = %6649
  %6659 = load float*, float** %6621, align 8
  br label %6660

6660:                                             ; preds = %6660, %6658
  %6661 = phi i32 [ %6736, %6660 ], [ 0, %6658 ]
  %6662 = phi i16* [ %6734, %6660 ], [ %6654, %6658 ]
  %6663 = phi float* [ %6735, %6660 ], [ %6659, %6658 ]
  %6664 = load i16, i16* %6662, align 2
  %6665 = zext i16 %6664 to i32
  %6666 = lshr i32 %6665, 10
  %6667 = zext i32 %6666 to i64
  %6668 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6667
  %6669 = load i16, i16* %6668, align 2
  %6670 = zext i16 %6669 to i32
  %6671 = and i32 %6665, 1023
  %6672 = add nuw nsw i32 %6671, %6670
  %6673 = zext i32 %6672 to i64
  %6674 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6673
  %6675 = load i32, i32* %6674, align 4
  %6676 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6667
  %6677 = load i32, i32* %6676, align 4
  %6678 = add i32 %6677, %6675
  %6679 = bitcast float* %6663 to i32*
  store i32 %6678, i32* %6679, align 4
  %6680 = getelementptr inbounds i16, i16* %6662, i64 1
  %6681 = load i16, i16* %6680, align 2
  %6682 = zext i16 %6681 to i32
  %6683 = lshr i32 %6682, 10
  %6684 = zext i32 %6683 to i64
  %6685 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6684
  %6686 = load i16, i16* %6685, align 2
  %6687 = zext i16 %6686 to i32
  %6688 = and i32 %6682, 1023
  %6689 = add nuw nsw i32 %6688, %6687
  %6690 = zext i32 %6689 to i64
  %6691 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6690
  %6692 = load i32, i32* %6691, align 4
  %6693 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6684
  %6694 = load i32, i32* %6693, align 4
  %6695 = add i32 %6694, %6692
  %6696 = getelementptr inbounds float, float* %6663, i64 1
  %6697 = bitcast float* %6696 to i32*
  store i32 %6695, i32* %6697, align 4
  %6698 = getelementptr inbounds i16, i16* %6662, i64 2
  %6699 = load i16, i16* %6698, align 2
  %6700 = zext i16 %6699 to i32
  %6701 = lshr i32 %6700, 10
  %6702 = zext i32 %6701 to i64
  %6703 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6702
  %6704 = load i16, i16* %6703, align 2
  %6705 = zext i16 %6704 to i32
  %6706 = and i32 %6700, 1023
  %6707 = add nuw nsw i32 %6706, %6705
  %6708 = zext i32 %6707 to i64
  %6709 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6708
  %6710 = load i32, i32* %6709, align 4
  %6711 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6702
  %6712 = load i32, i32* %6711, align 4
  %6713 = add i32 %6712, %6710
  %6714 = getelementptr inbounds float, float* %6663, i64 2
  %6715 = bitcast float* %6714 to i32*
  store i32 %6713, i32* %6715, align 4
  %6716 = getelementptr inbounds i16, i16* %6662, i64 3
  %6717 = load i16, i16* %6716, align 2
  %6718 = zext i16 %6717 to i32
  %6719 = lshr i32 %6718, 10
  %6720 = zext i32 %6719 to i64
  %6721 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6720
  %6722 = load i16, i16* %6721, align 2
  %6723 = zext i16 %6722 to i32
  %6724 = and i32 %6718, 1023
  %6725 = add nuw nsw i32 %6724, %6723
  %6726 = zext i32 %6725 to i64
  %6727 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6726
  %6728 = load i32, i32* %6727, align 4
  %6729 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6720
  %6730 = load i32, i32* %6729, align 4
  %6731 = add i32 %6730, %6728
  %6732 = getelementptr inbounds float, float* %6663, i64 3
  %6733 = bitcast float* %6732 to i32*
  store i32 %6731, i32* %6733, align 4
  %6734 = getelementptr inbounds i16, i16* %6662, i64 4
  %6735 = getelementptr inbounds float, float* %6663, i64 4
  %6736 = add nuw i32 %6661, 1
  %6737 = icmp eq i32 %6736, %6656
  br i1 %6737, label %6738, label %6660

6738:                                             ; preds = %6660
  %6739 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6587, align 8
  %6740 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6739, i64 0, i32 1, i32 0
  %6741 = load i32, i32* %6740, align 4
  %6742 = icmp eq i32 %6741, 0
  br i1 %6742, label %6805, label %6743

6743:                                             ; preds = %6738
  %6744 = load float*, float** %6621, align 8
  %6745 = and i32 %6741, 1
  %6746 = icmp eq i32 %6741, 1
  br i1 %6746, label %6785, label %6747

6747:                                             ; preds = %6743
  %6748 = sub i32 %6741, %6745
  br label %6749

6749:                                             ; preds = %6749, %6747
  %6750 = phi float* [ %6744, %6747 ], [ %6781, %6749 ]
  %6751 = phi float* [ %6653, %6747 ], [ %6782, %6749 ]
  %6752 = phi i32 [ %6748, %6747 ], [ %6783, %6749 ]
  %6753 = bitcast float* %6750 to i32*
  %6754 = load i32, i32* %6753, align 4
  %6755 = bitcast float* %6751 to i32*
  store i32 %6754, i32* %6755, align 4
  %6756 = getelementptr inbounds float, float* %6750, i64 1
  %6757 = bitcast float* %6756 to i32*
  %6758 = load i32, i32* %6757, align 4
  %6759 = getelementptr inbounds float, float* %6751, i64 1
  %6760 = bitcast float* %6759 to i32*
  store i32 %6758, i32* %6760, align 4
  %6761 = getelementptr inbounds float, float* %6750, i64 2
  %6762 = bitcast float* %6761 to i32*
  %6763 = load i32, i32* %6762, align 4
  %6764 = getelementptr inbounds float, float* %6751, i64 2
  %6765 = bitcast float* %6764 to i32*
  store i32 %6763, i32* %6765, align 4
  %6766 = getelementptr inbounds float, float* %6750, i64 4
  %6767 = getelementptr inbounds float, float* %6751, i64 3
  %6768 = bitcast float* %6766 to i32*
  %6769 = load i32, i32* %6768, align 4
  %6770 = bitcast float* %6767 to i32*
  store i32 %6769, i32* %6770, align 4
  %6771 = getelementptr inbounds float, float* %6750, i64 5
  %6772 = bitcast float* %6771 to i32*
  %6773 = load i32, i32* %6772, align 4
  %6774 = getelementptr inbounds float, float* %6751, i64 4
  %6775 = bitcast float* %6774 to i32*
  store i32 %6773, i32* %6775, align 4
  %6776 = getelementptr inbounds float, float* %6750, i64 6
  %6777 = bitcast float* %6776 to i32*
  %6778 = load i32, i32* %6777, align 4
  %6779 = getelementptr inbounds float, float* %6751, i64 5
  %6780 = bitcast float* %6779 to i32*
  store i32 %6778, i32* %6780, align 4
  %6781 = getelementptr inbounds float, float* %6750, i64 8
  %6782 = getelementptr inbounds float, float* %6751, i64 6
  %6783 = add i32 %6752, -2
  %6784 = icmp eq i32 %6783, 0
  br i1 %6784, label %6785, label %6749

6785:                                             ; preds = %6749, %6743
  %6786 = phi float* [ %6744, %6743 ], [ %6781, %6749 ]
  %6787 = phi float* [ %6653, %6743 ], [ %6782, %6749 ]
  %6788 = icmp eq i32 %6745, 0
  br i1 %6788, label %6803, label %6789

6789:                                             ; preds = %6785
  %6790 = bitcast float* %6786 to i32*
  %6791 = load i32, i32* %6790, align 4
  %6792 = bitcast float* %6787 to i32*
  store i32 %6791, i32* %6792, align 4
  %6793 = getelementptr inbounds float, float* %6786, i64 1
  %6794 = bitcast float* %6793 to i32*
  %6795 = load i32, i32* %6794, align 4
  %6796 = getelementptr inbounds float, float* %6787, i64 1
  %6797 = bitcast float* %6796 to i32*
  store i32 %6795, i32* %6797, align 4
  %6798 = getelementptr inbounds float, float* %6786, i64 2
  %6799 = bitcast float* %6798 to i32*
  %6800 = load i32, i32* %6799, align 4
  %6801 = getelementptr inbounds float, float* %6787, i64 2
  %6802 = bitcast float* %6801 to i32*
  store i32 %6800, i32* %6802, align 4
  br label %6803

6803:                                             ; preds = %6785, %6789
  %6804 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6587, align 8
  br label %6805

6805:                                             ; preds = %6803, %6738, %6649
  %6806 = phi %"class.blink::IntRect"* [ %6804, %6803 ], [ %6739, %6738 ], [ %6650, %6649 ]
  %6807 = getelementptr inbounds i16, i16* %6654, i64 %6580
  %6808 = getelementptr inbounds float, float* %6653, i64 %6584
  %6809 = add nuw nsw i32 %6652, 1
  %6810 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6806, i64 0, i32 1, i32 1
  %6811 = load i32, i32* %6810, align 4
  %6812 = icmp slt i32 %6809, %6811
  br i1 %6812, label %6649, label %6633

6813:                                             ; preds = %6635, %6613
  %6814 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %6814, align 4
  br label %13459

6815:                                             ; preds = %6575
  %6816 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %6817 = load i32, i32* %6816, align 8
  %6818 = sdiv i32 %6817, 2
  %6819 = sext i32 %6818 to i64
  %6820 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %6821 = load i32, i32* %6820, align 8
  %6822 = sdiv i32 %6821, 4
  %6823 = sext i32 %6822 to i64
  %6824 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %6825 = load i8*, i8** %6824, align 8
  %6826 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %6827 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6826, align 8
  %6828 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6827, i64 0, i32 0, i32 1
  %6829 = load i32, i32* %6828, align 4
  %6830 = mul nsw i32 %6829, %6817
  %6831 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %6832 = load i32, i32* %6831, align 4
  %6833 = add nsw i32 %6830, %6832
  %6834 = sext i32 %6833 to i64
  %6835 = getelementptr inbounds i8, i8* %6825, i64 %6834
  %6836 = bitcast i8* %6835 to i16*
  %6837 = icmp slt i32 %6821, 0
  %6838 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %6839 = load i32, i32* %6838, align 8
  %6840 = icmp sgt i32 %6839, 1
  %6841 = and i1 %6837, %6840
  br i1 %6841, label %6842, label %6852

6842:                                             ; preds = %6815
  %6843 = add nsw i32 %6839, -1
  %6844 = sext i32 %6843 to i64
  %6845 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %6846 = load i32, i32* %6845, align 4
  %6847 = sext i32 %6846 to i64
  %6848 = mul nsw i64 %6819, %6844
  %6849 = mul i64 %6848, %6847
  %6850 = sub i64 0, %6849
  %6851 = getelementptr inbounds i16, i16* %6836, i64 %6850
  br label %6854

6852:                                             ; preds = %6815
  %6853 = icmp sgt i32 %6839, 0
  br i1 %6853, label %6854, label %7049

6854:                                             ; preds = %6852, %6842
  %6855 = phi i16* [ %6851, %6842 ], [ %6836, %6852 ]
  %6856 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %6857 = bitcast i8** %6856 to float**
  %6858 = load float*, float** %6857, align 8
  %6859 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %6860 = bitcast i8** %6859 to float**
  %6861 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %6862

6862:                                             ; preds = %6874, %6854
  %6863 = phi i32 [ %6839, %6854 ], [ %6875, %6874 ]
  %6864 = phi %"class.blink::IntRect"* [ %6827, %6854 ], [ %6876, %6874 ]
  %6865 = phi %"class.blink::IntRect"* [ %6827, %6854 ], [ %6877, %6874 ]
  %6866 = phi i32 [ 0, %6854 ], [ %6886, %6874 ]
  %6867 = phi float* [ %6858, %6854 ], [ %6879, %6874 ]
  %6868 = phi i16* [ %6855, %6854 ], [ %6885, %6874 ]
  %6869 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6865, i64 0, i32 1, i32 1
  %6870 = load i32, i32* %6869, align 4
  %6871 = icmp sgt i32 %6870, 0
  br i1 %6871, label %6888, label %6874

6872:                                             ; preds = %7041
  %6873 = load i32, i32* %6838, align 8
  br label %6874

6874:                                             ; preds = %6872, %6862
  %6875 = phi i32 [ %6863, %6862 ], [ %6873, %6872 ]
  %6876 = phi %"class.blink::IntRect"* [ %6864, %6862 ], [ %7042, %6872 ]
  %6877 = phi %"class.blink::IntRect"* [ %6865, %6862 ], [ %7042, %6872 ]
  %6878 = phi i16* [ %6868, %6862 ], [ %7043, %6872 ]
  %6879 = phi float* [ %6867, %6862 ], [ %7044, %6872 ]
  %6880 = phi i32 [ %6870, %6862 ], [ %7047, %6872 ]
  %6881 = load i32, i32* %6861, align 4
  %6882 = sub nsw i32 %6881, %6880
  %6883 = sext i32 %6882 to i64
  %6884 = mul nsw i64 %6883, %6819
  %6885 = getelementptr inbounds i16, i16* %6878, i64 %6884
  %6886 = add nuw nsw i32 %6866, 1
  %6887 = icmp slt i32 %6886, %6875
  br i1 %6887, label %6862, label %7049

6888:                                             ; preds = %6862, %7041
  %6889 = phi %"class.blink::IntRect"* [ %7042, %7041 ], [ %6864, %6862 ]
  %6890 = phi %"class.blink::IntRect"* [ %7042, %7041 ], [ %6865, %6862 ]
  %6891 = phi i32 [ %7045, %7041 ], [ 0, %6862 ]
  %6892 = phi float* [ %7044, %7041 ], [ %6867, %6862 ]
  %6893 = phi i16* [ %7043, %7041 ], [ %6868, %6862 ]
  %6894 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6890, i64 0, i32 1, i32 0
  %6895 = load i32, i32* %6894, align 4
  %6896 = icmp eq i32 %6895, 0
  br i1 %6896, label %7041, label %6897

6897:                                             ; preds = %6888
  %6898 = load float*, float** %6860, align 8
  br label %6899

6899:                                             ; preds = %6899, %6897
  %6900 = phi i32 [ %6975, %6899 ], [ 0, %6897 ]
  %6901 = phi i16* [ %6973, %6899 ], [ %6893, %6897 ]
  %6902 = phi float* [ %6974, %6899 ], [ %6898, %6897 ]
  %6903 = load i16, i16* %6901, align 2
  %6904 = zext i16 %6903 to i32
  %6905 = lshr i32 %6904, 10
  %6906 = zext i32 %6905 to i64
  %6907 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6906
  %6908 = load i16, i16* %6907, align 2
  %6909 = zext i16 %6908 to i32
  %6910 = and i32 %6904, 1023
  %6911 = add nuw nsw i32 %6910, %6909
  %6912 = zext i32 %6911 to i64
  %6913 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6912
  %6914 = load i32, i32* %6913, align 4
  %6915 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6906
  %6916 = load i32, i32* %6915, align 4
  %6917 = add i32 %6916, %6914
  %6918 = bitcast float* %6902 to i32*
  store i32 %6917, i32* %6918, align 4
  %6919 = getelementptr inbounds i16, i16* %6901, i64 1
  %6920 = load i16, i16* %6919, align 2
  %6921 = zext i16 %6920 to i32
  %6922 = lshr i32 %6921, 10
  %6923 = zext i32 %6922 to i64
  %6924 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6923
  %6925 = load i16, i16* %6924, align 2
  %6926 = zext i16 %6925 to i32
  %6927 = and i32 %6921, 1023
  %6928 = add nuw nsw i32 %6927, %6926
  %6929 = zext i32 %6928 to i64
  %6930 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6929
  %6931 = load i32, i32* %6930, align 4
  %6932 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6923
  %6933 = load i32, i32* %6932, align 4
  %6934 = add i32 %6933, %6931
  %6935 = getelementptr inbounds float, float* %6902, i64 1
  %6936 = bitcast float* %6935 to i32*
  store i32 %6934, i32* %6936, align 4
  %6937 = getelementptr inbounds i16, i16* %6901, i64 2
  %6938 = load i16, i16* %6937, align 2
  %6939 = zext i16 %6938 to i32
  %6940 = lshr i32 %6939, 10
  %6941 = zext i32 %6940 to i64
  %6942 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6941
  %6943 = load i16, i16* %6942, align 2
  %6944 = zext i16 %6943 to i32
  %6945 = and i32 %6939, 1023
  %6946 = add nuw nsw i32 %6945, %6944
  %6947 = zext i32 %6946 to i64
  %6948 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6947
  %6949 = load i32, i32* %6948, align 4
  %6950 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6941
  %6951 = load i32, i32* %6950, align 4
  %6952 = add i32 %6951, %6949
  %6953 = getelementptr inbounds float, float* %6902, i64 2
  %6954 = bitcast float* %6953 to i32*
  store i32 %6952, i32* %6954, align 4
  %6955 = getelementptr inbounds i16, i16* %6901, i64 3
  %6956 = load i16, i16* %6955, align 2
  %6957 = zext i16 %6956 to i32
  %6958 = lshr i32 %6957, 10
  %6959 = zext i32 %6958 to i64
  %6960 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %6959
  %6961 = load i16, i16* %6960, align 2
  %6962 = zext i16 %6961 to i32
  %6963 = and i32 %6957, 1023
  %6964 = add nuw nsw i32 %6963, %6962
  %6965 = zext i32 %6964 to i64
  %6966 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %6965
  %6967 = load i32, i32* %6966, align 4
  %6968 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %6959
  %6969 = load i32, i32* %6968, align 4
  %6970 = add i32 %6969, %6967
  %6971 = getelementptr inbounds float, float* %6902, i64 3
  %6972 = bitcast float* %6971 to i32*
  store i32 %6970, i32* %6972, align 4
  %6973 = getelementptr inbounds i16, i16* %6901, i64 4
  %6974 = getelementptr inbounds float, float* %6902, i64 4
  %6975 = add nuw i32 %6900, 1
  %6976 = icmp eq i32 %6975, %6895
  br i1 %6976, label %6977, label %6899

6977:                                             ; preds = %6899
  %6978 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6826, align 8
  %6979 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %6978, i64 0, i32 1, i32 0
  %6980 = load i32, i32* %6979, align 4
  %6981 = icmp eq i32 %6980, 0
  br i1 %6981, label %7041, label %6982

6982:                                             ; preds = %6977
  %6983 = load float*, float** %6860, align 8
  %6984 = and i32 %6980, 1
  %6985 = icmp eq i32 %6980, 1
  br i1 %6985, label %7022, label %6986

6986:                                             ; preds = %6982
  %6987 = sub i32 %6980, %6984
  br label %6988

6988:                                             ; preds = %6988, %6986
  %6989 = phi float* [ %6983, %6986 ], [ %7018, %6988 ]
  %6990 = phi float* [ %6892, %6986 ], [ %7019, %6988 ]
  %6991 = phi i32 [ %6987, %6986 ], [ %7020, %6988 ]
  %6992 = getelementptr inbounds float, float* %6989, i64 3
  %6993 = load float, float* %6992, align 4
  %6994 = load float, float* %6989, align 4
  %6995 = fmul float %6993, %6994
  store float %6995, float* %6990, align 4
  %6996 = getelementptr inbounds float, float* %6989, i64 1
  %6997 = load float, float* %6996, align 4
  %6998 = fmul float %6993, %6997
  %6999 = getelementptr inbounds float, float* %6990, i64 1
  store float %6998, float* %6999, align 4
  %7000 = getelementptr inbounds float, float* %6989, i64 2
  %7001 = load float, float* %7000, align 4
  %7002 = fmul float %6993, %7001
  %7003 = getelementptr inbounds float, float* %6990, i64 2
  store float %7002, float* %7003, align 4
  %7004 = getelementptr inbounds float, float* %6989, i64 4
  %7005 = getelementptr inbounds float, float* %6990, i64 3
  %7006 = getelementptr inbounds float, float* %6989, i64 7
  %7007 = load float, float* %7006, align 4
  %7008 = load float, float* %7004, align 4
  %7009 = fmul float %7007, %7008
  store float %7009, float* %7005, align 4
  %7010 = getelementptr inbounds float, float* %6989, i64 5
  %7011 = load float, float* %7010, align 4
  %7012 = fmul float %7007, %7011
  %7013 = getelementptr inbounds float, float* %6990, i64 4
  store float %7012, float* %7013, align 4
  %7014 = getelementptr inbounds float, float* %6989, i64 6
  %7015 = load float, float* %7014, align 4
  %7016 = fmul float %7007, %7015
  %7017 = getelementptr inbounds float, float* %6990, i64 5
  store float %7016, float* %7017, align 4
  %7018 = getelementptr inbounds float, float* %6989, i64 8
  %7019 = getelementptr inbounds float, float* %6990, i64 6
  %7020 = add i32 %6991, -2
  %7021 = icmp eq i32 %7020, 0
  br i1 %7021, label %7022, label %6988

7022:                                             ; preds = %6988, %6982
  %7023 = phi float* [ %6983, %6982 ], [ %7018, %6988 ]
  %7024 = phi float* [ %6892, %6982 ], [ %7019, %6988 ]
  %7025 = icmp eq i32 %6984, 0
  br i1 %7025, label %7039, label %7026

7026:                                             ; preds = %7022
  %7027 = getelementptr inbounds float, float* %7023, i64 3
  %7028 = load float, float* %7027, align 4
  %7029 = load float, float* %7023, align 4
  %7030 = fmul float %7028, %7029
  store float %7030, float* %7024, align 4
  %7031 = getelementptr inbounds float, float* %7023, i64 1
  %7032 = load float, float* %7031, align 4
  %7033 = fmul float %7028, %7032
  %7034 = getelementptr inbounds float, float* %7024, i64 1
  store float %7033, float* %7034, align 4
  %7035 = getelementptr inbounds float, float* %7023, i64 2
  %7036 = load float, float* %7035, align 4
  %7037 = fmul float %7028, %7036
  %7038 = getelementptr inbounds float, float* %7024, i64 2
  store float %7037, float* %7038, align 4
  br label %7039

7039:                                             ; preds = %7022, %7026
  %7040 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %6826, align 8
  br label %7041

7041:                                             ; preds = %7039, %6977, %6888
  %7042 = phi %"class.blink::IntRect"* [ %7040, %7039 ], [ %6978, %6977 ], [ %6889, %6888 ]
  %7043 = getelementptr inbounds i16, i16* %6893, i64 %6819
  %7044 = getelementptr inbounds float, float* %6892, i64 %6823
  %7045 = add nuw nsw i32 %6891, 1
  %7046 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7042, i64 0, i32 1, i32 1
  %7047 = load i32, i32* %7046, align 4
  %7048 = icmp slt i32 %7045, %7047
  br i1 %7048, label %6888, label %6872

7049:                                             ; preds = %6874, %6852
  %7050 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7050, align 4
  br label %13459

7051:                                             ; preds = %6575
  %7052 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7053 = load i32, i32* %7052, align 8
  %7054 = sdiv i32 %7053, 2
  %7055 = sext i32 %7054 to i64
  %7056 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7057 = load i32, i32* %7056, align 8
  %7058 = sdiv i32 %7057, 4
  %7059 = sext i32 %7058 to i64
  %7060 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7061 = load i8*, i8** %7060, align 8
  %7062 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7063 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7062, align 8
  %7064 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7063, i64 0, i32 0, i32 1
  %7065 = load i32, i32* %7064, align 4
  %7066 = mul nsw i32 %7065, %7053
  %7067 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7068 = load i32, i32* %7067, align 4
  %7069 = add nsw i32 %7066, %7068
  %7070 = sext i32 %7069 to i64
  %7071 = getelementptr inbounds i8, i8* %7061, i64 %7070
  %7072 = bitcast i8* %7071 to i16*
  %7073 = icmp slt i32 %7057, 0
  %7074 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7075 = load i32, i32* %7074, align 8
  %7076 = icmp sgt i32 %7075, 1
  %7077 = and i1 %7073, %7076
  br i1 %7077, label %7078, label %7088

7078:                                             ; preds = %7051
  %7079 = add nsw i32 %7075, -1
  %7080 = sext i32 %7079 to i64
  %7081 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7082 = load i32, i32* %7081, align 4
  %7083 = sext i32 %7082 to i64
  %7084 = mul nsw i64 %7055, %7080
  %7085 = mul i64 %7084, %7083
  %7086 = sub i64 0, %7085
  %7087 = getelementptr inbounds i16, i16* %7072, i64 %7086
  br label %7090

7088:                                             ; preds = %7051
  %7089 = icmp sgt i32 %7075, 0
  br i1 %7089, label %7090, label %7311

7090:                                             ; preds = %7088, %7078
  %7091 = phi i16* [ %7087, %7078 ], [ %7072, %7088 ]
  %7092 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7093 = bitcast i8** %7092 to float**
  %7094 = load float*, float** %7093, align 8
  %7095 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7096 = bitcast i8** %7095 to float**
  %7097 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7098

7098:                                             ; preds = %7110, %7090
  %7099 = phi i32 [ %7075, %7090 ], [ %7111, %7110 ]
  %7100 = phi %"class.blink::IntRect"* [ %7063, %7090 ], [ %7112, %7110 ]
  %7101 = phi %"class.blink::IntRect"* [ %7063, %7090 ], [ %7113, %7110 ]
  %7102 = phi i32 [ 0, %7090 ], [ %7122, %7110 ]
  %7103 = phi float* [ %7094, %7090 ], [ %7115, %7110 ]
  %7104 = phi i16* [ %7091, %7090 ], [ %7121, %7110 ]
  %7105 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7101, i64 0, i32 1, i32 1
  %7106 = load i32, i32* %7105, align 4
  %7107 = icmp sgt i32 %7106, 0
  br i1 %7107, label %7124, label %7110

7108:                                             ; preds = %7302
  %7109 = load i32, i32* %7074, align 8
  br label %7110

7110:                                             ; preds = %7108, %7098
  %7111 = phi i32 [ %7099, %7098 ], [ %7109, %7108 ]
  %7112 = phi %"class.blink::IntRect"* [ %7100, %7098 ], [ %7303, %7108 ]
  %7113 = phi %"class.blink::IntRect"* [ %7101, %7098 ], [ %7303, %7108 ]
  %7114 = phi i16* [ %7104, %7098 ], [ %7304, %7108 ]
  %7115 = phi float* [ %7103, %7098 ], [ %7305, %7108 ]
  %7116 = phi i32 [ %7106, %7098 ], [ %7308, %7108 ]
  %7117 = load i32, i32* %7097, align 4
  %7118 = sub nsw i32 %7117, %7116
  %7119 = sext i32 %7118 to i64
  %7120 = mul nsw i64 %7119, %7055
  %7121 = getelementptr inbounds i16, i16* %7114, i64 %7120
  %7122 = add nuw nsw i32 %7102, 1
  %7123 = icmp slt i32 %7122, %7111
  br i1 %7123, label %7098, label %7311

7124:                                             ; preds = %7098, %7302
  %7125 = phi i64 [ %7310, %7302 ], [ 0, %7098 ]
  %7126 = phi %"class.blink::IntRect"* [ %7303, %7302 ], [ %7100, %7098 ]
  %7127 = phi %"class.blink::IntRect"* [ %7303, %7302 ], [ %7101, %7098 ]
  %7128 = phi i32 [ %7306, %7302 ], [ 0, %7098 ]
  %7129 = phi float* [ %7305, %7302 ], [ %7103, %7098 ]
  %7130 = phi i16* [ %7304, %7302 ], [ %7104, %7098 ]
  %7131 = mul i64 %7125, %7059
  %7132 = getelementptr float, float* %7103, i64 %7131
  %7133 = add i64 %7131, 3
  %7134 = getelementptr float, float* %7103, i64 %7133
  %7135 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7127, i64 0, i32 1, i32 0
  %7136 = load i32, i32* %7135, align 4
  %7137 = icmp eq i32 %7136, 0
  br i1 %7137, label %7302, label %7138

7138:                                             ; preds = %7124
  %7139 = load float*, float** %7096, align 8
  br label %7140

7140:                                             ; preds = %7140, %7138
  %7141 = phi i32 [ %7216, %7140 ], [ 0, %7138 ]
  %7142 = phi i16* [ %7214, %7140 ], [ %7130, %7138 ]
  %7143 = phi float* [ %7215, %7140 ], [ %7139, %7138 ]
  %7144 = load i16, i16* %7142, align 2
  %7145 = zext i16 %7144 to i32
  %7146 = lshr i32 %7145, 10
  %7147 = zext i32 %7146 to i64
  %7148 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %7147
  %7149 = load i16, i16* %7148, align 2
  %7150 = zext i16 %7149 to i32
  %7151 = and i32 %7145, 1023
  %7152 = add nuw nsw i32 %7151, %7150
  %7153 = zext i32 %7152 to i64
  %7154 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %7153
  %7155 = load i32, i32* %7154, align 4
  %7156 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %7147
  %7157 = load i32, i32* %7156, align 4
  %7158 = add i32 %7157, %7155
  %7159 = bitcast float* %7143 to i32*
  store i32 %7158, i32* %7159, align 4
  %7160 = getelementptr inbounds i16, i16* %7142, i64 1
  %7161 = load i16, i16* %7160, align 2
  %7162 = zext i16 %7161 to i32
  %7163 = lshr i32 %7162, 10
  %7164 = zext i32 %7163 to i64
  %7165 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %7164
  %7166 = load i16, i16* %7165, align 2
  %7167 = zext i16 %7166 to i32
  %7168 = and i32 %7162, 1023
  %7169 = add nuw nsw i32 %7168, %7167
  %7170 = zext i32 %7169 to i64
  %7171 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %7170
  %7172 = load i32, i32* %7171, align 4
  %7173 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %7164
  %7174 = load i32, i32* %7173, align 4
  %7175 = add i32 %7174, %7172
  %7176 = getelementptr inbounds float, float* %7143, i64 1
  %7177 = bitcast float* %7176 to i32*
  store i32 %7175, i32* %7177, align 4
  %7178 = getelementptr inbounds i16, i16* %7142, i64 2
  %7179 = load i16, i16* %7178, align 2
  %7180 = zext i16 %7179 to i32
  %7181 = lshr i32 %7180, 10
  %7182 = zext i32 %7181 to i64
  %7183 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %7182
  %7184 = load i16, i16* %7183, align 2
  %7185 = zext i16 %7184 to i32
  %7186 = and i32 %7180, 1023
  %7187 = add nuw nsw i32 %7186, %7185
  %7188 = zext i32 %7187 to i64
  %7189 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %7188
  %7190 = load i32, i32* %7189, align 4
  %7191 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %7182
  %7192 = load i32, i32* %7191, align 4
  %7193 = add i32 %7192, %7190
  %7194 = getelementptr inbounds float, float* %7143, i64 2
  %7195 = bitcast float* %7194 to i32*
  store i32 %7193, i32* %7195, align 4
  %7196 = getelementptr inbounds i16, i16* %7142, i64 3
  %7197 = load i16, i16* %7196, align 2
  %7198 = zext i16 %7197 to i32
  %7199 = lshr i32 %7198, 10
  %7200 = zext i32 %7199 to i64
  %7201 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %7200
  %7202 = load i16, i16* %7201, align 2
  %7203 = zext i16 %7202 to i32
  %7204 = and i32 %7198, 1023
  %7205 = add nuw nsw i32 %7204, %7203
  %7206 = zext i32 %7205 to i64
  %7207 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %7206
  %7208 = load i32, i32* %7207, align 4
  %7209 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %7200
  %7210 = load i32, i32* %7209, align 4
  %7211 = add i32 %7210, %7208
  %7212 = getelementptr inbounds float, float* %7143, i64 3
  %7213 = bitcast float* %7212 to i32*
  store i32 %7211, i32* %7213, align 4
  %7214 = getelementptr inbounds i16, i16* %7142, i64 4
  %7215 = getelementptr inbounds float, float* %7143, i64 4
  %7216 = add nuw i32 %7141, 1
  %7217 = icmp eq i32 %7216, %7136
  br i1 %7217, label %7218, label %7140

7218:                                             ; preds = %7140
  %7219 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7062, align 8
  %7220 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7219, i64 0, i32 1, i32 0
  %7221 = load i32, i32* %7220, align 4
  %7222 = icmp eq i32 %7221, 0
  br i1 %7222, label %7302, label %7223

7223:                                             ; preds = %7218
  %7224 = load float*, float** %7096, align 8
  %7225 = add i32 %7221, -1
  %7226 = zext i32 %7225 to i64
  %7227 = add nuw nsw i64 %7226, 1
  %7228 = icmp ult i64 %7227, 4
  br i1 %7228, label %7273, label %7229

7229:                                             ; preds = %7223
  %7230 = add i32 %7221, -1
  %7231 = zext i32 %7230 to i64
  %7232 = mul nuw nsw i64 %7231, 3
  %7233 = getelementptr float, float* %7134, i64 %7232
  %7234 = getelementptr float, float* %7224, i64 4
  %7235 = shl nuw nsw i64 %7231, 2
  %7236 = getelementptr float, float* %7234, i64 %7235
  %7237 = icmp ult float* %7132, %7236
  %7238 = icmp ult float* %7224, %7233
  %7239 = and i1 %7237, %7238
  br i1 %7239, label %7273, label %7240

7240:                                             ; preds = %7229
  %7241 = and i64 %7227, 8589934588
  %7242 = trunc i64 %7241 to i32
  %7243 = shl nuw nsw i64 %7241, 2
  %7244 = getelementptr float, float* %7224, i64 %7243
  %7245 = mul nuw nsw i64 %7241, 3
  %7246 = getelementptr float, float* %7129, i64 %7245
  br label %7247

7247:                                             ; preds = %7247, %7240
  %7248 = phi i64 [ 0, %7240 ], [ %7269, %7247 ]
  %7249 = shl i64 %7248, 2
  %7250 = mul i64 %7248, 3
  %7251 = getelementptr inbounds float, float* %7224, i64 %7249
  %7252 = bitcast float* %7251 to <16 x float>*
  %7253 = load <16 x float>, <16 x float>* %7252, align 4
  %7254 = shufflevector <16 x float> %7253, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %7255 = shufflevector <16 x float> %7253, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %7256 = shufflevector <16 x float> %7253, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %7257 = shufflevector <16 x float> %7253, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %7258 = fcmp une <4 x float> %7257, zeroinitializer
  %7259 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7257
  %7260 = select <4 x i1> %7258, <4 x float> %7259, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7261 = fmul <4 x float> %7254, %7260
  %7262 = fmul <4 x float> %7260, %7255
  %7263 = fmul <4 x float> %7260, %7256
  %7264 = getelementptr inbounds float, float* %7129, i64 %7250
  %7265 = bitcast float* %7264 to <12 x float>*
  %7266 = shufflevector <4 x float> %7261, <4 x float> %7262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7267 = shufflevector <4 x float> %7263, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %7268 = shufflevector <8 x float> %7266, <8 x float> %7267, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %7268, <12 x float>* %7265, align 4
  %7269 = add i64 %7248, 4
  %7270 = icmp eq i64 %7269, %7241
  br i1 %7270, label %7271, label %7247, !llvm.loop !696

7271:                                             ; preds = %7247
  %7272 = icmp eq i64 %7227, %7241
  br i1 %7272, label %7300, label %7273

7273:                                             ; preds = %7271, %7229, %7223
  %7274 = phi i32 [ 0, %7229 ], [ 0, %7223 ], [ %7242, %7271 ]
  %7275 = phi float* [ %7224, %7229 ], [ %7224, %7223 ], [ %7244, %7271 ]
  %7276 = phi float* [ %7129, %7229 ], [ %7129, %7223 ], [ %7246, %7271 ]
  br label %7277

7277:                                             ; preds = %7273, %7277
  %7278 = phi i32 [ %7298, %7277 ], [ %7274, %7273 ]
  %7279 = phi float* [ %7296, %7277 ], [ %7275, %7273 ]
  %7280 = phi float* [ %7297, %7277 ], [ %7276, %7273 ]
  %7281 = getelementptr inbounds float, float* %7279, i64 3
  %7282 = load float, float* %7281, align 4
  %7283 = fcmp une float %7282, 0.000000e+00
  %7284 = fdiv float 1.000000e+00, %7282
  %7285 = select i1 %7283, float %7284, float 1.000000e+00
  %7286 = load float, float* %7279, align 4
  %7287 = fmul float %7286, %7285
  store float %7287, float* %7280, align 4
  %7288 = getelementptr inbounds float, float* %7279, i64 1
  %7289 = load float, float* %7288, align 4
  %7290 = fmul float %7285, %7289
  %7291 = getelementptr inbounds float, float* %7280, i64 1
  store float %7290, float* %7291, align 4
  %7292 = getelementptr inbounds float, float* %7279, i64 2
  %7293 = load float, float* %7292, align 4
  %7294 = fmul float %7285, %7293
  %7295 = getelementptr inbounds float, float* %7280, i64 2
  store float %7294, float* %7295, align 4
  %7296 = getelementptr inbounds float, float* %7279, i64 4
  %7297 = getelementptr inbounds float, float* %7280, i64 3
  %7298 = add nuw i32 %7278, 1
  %7299 = icmp eq i32 %7298, %7221
  br i1 %7299, label %7300, label %7277, !llvm.loop !697

7300:                                             ; preds = %7277, %7271
  %7301 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7062, align 8
  br label %7302

7302:                                             ; preds = %7300, %7218, %7124
  %7303 = phi %"class.blink::IntRect"* [ %7301, %7300 ], [ %7219, %7218 ], [ %7126, %7124 ]
  %7304 = getelementptr inbounds i16, i16* %7130, i64 %7055
  %7305 = getelementptr inbounds float, float* %7129, i64 %7059
  %7306 = add nuw nsw i32 %7128, 1
  %7307 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7303, i64 0, i32 1, i32 1
  %7308 = load i32, i32* %7307, align 4
  %7309 = icmp slt i32 %7306, %7308
  %7310 = add i64 %7125, 1
  br i1 %7309, label %7124, label %7108

7311:                                             ; preds = %7110, %7088
  %7312 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7312, align 4
  br label %13459

7313:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %7314
    i32 1, label %7397
    i32 2, label %7588
  ]

7314:                                             ; preds = %7313
  %7315 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7316 = load i32, i32* %7315, align 8
  %7317 = sdiv i32 %7316, 2
  %7318 = sext i32 %7317 to i64
  %7319 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7320 = load i32, i32* %7319, align 8
  %7321 = sext i32 %7320 to i64
  %7322 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7323 = load i8*, i8** %7322, align 8
  %7324 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7325 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7324, align 8
  %7326 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7325, i64 0, i32 0, i32 1
  %7327 = load i32, i32* %7326, align 4
  %7328 = mul nsw i32 %7327, %7316
  %7329 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7330 = load i32, i32* %7329, align 4
  %7331 = add nsw i32 %7328, %7330
  %7332 = sext i32 %7331 to i64
  %7333 = getelementptr inbounds i8, i8* %7323, i64 %7332
  %7334 = bitcast i8* %7333 to i16*
  %7335 = icmp slt i32 %7320, 0
  %7336 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7337 = load i32, i32* %7336, align 8
  %7338 = icmp sgt i32 %7337, 1
  %7339 = and i1 %7335, %7338
  br i1 %7339, label %7340, label %7350

7340:                                             ; preds = %7314
  %7341 = add nsw i32 %7337, -1
  %7342 = sext i32 %7341 to i64
  %7343 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7344 = load i32, i32* %7343, align 4
  %7345 = sext i32 %7344 to i64
  %7346 = mul nsw i64 %7318, %7342
  %7347 = mul i64 %7346, %7345
  %7348 = sub i64 0, %7347
  %7349 = getelementptr inbounds i16, i16* %7334, i64 %7348
  br label %7352

7350:                                             ; preds = %7314
  %7351 = icmp sgt i32 %7337, 0
  br i1 %7351, label %7352, label %7395

7352:                                             ; preds = %7350, %7340
  %7353 = phi i16* [ %7349, %7340 ], [ %7334, %7350 ]
  %7354 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7355 = load i8*, i8** %7354, align 8
  %7356 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7357

7357:                                             ; preds = %7368, %7352
  %7358 = phi i32 [ %7337, %7352 ], [ %7369, %7368 ]
  %7359 = phi %"class.blink::IntRect"* [ %7325, %7352 ], [ %7370, %7368 ]
  %7360 = phi i32 [ 0, %7352 ], [ %7379, %7368 ]
  %7361 = phi i8* [ %7355, %7352 ], [ %7372, %7368 ]
  %7362 = phi i16* [ %7353, %7352 ], [ %7378, %7368 ]
  %7363 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7359, i64 0, i32 1, i32 1
  %7364 = load i32, i32* %7363, align 4
  %7365 = icmp sgt i32 %7364, 0
  br i1 %7365, label %7381, label %7368

7366:                                             ; preds = %7381
  %7367 = load i32, i32* %7336, align 8
  br label %7368

7368:                                             ; preds = %7366, %7357
  %7369 = phi i32 [ %7358, %7357 ], [ %7367, %7366 ]
  %7370 = phi %"class.blink::IntRect"* [ %7359, %7357 ], [ %7391, %7366 ]
  %7371 = phi i16* [ %7362, %7357 ], [ %7388, %7366 ]
  %7372 = phi i8* [ %7361, %7357 ], [ %7389, %7366 ]
  %7373 = phi i32 [ %7364, %7357 ], [ %7393, %7366 ]
  %7374 = load i32, i32* %7356, align 4
  %7375 = sub nsw i32 %7374, %7373
  %7376 = sext i32 %7375 to i64
  %7377 = mul nsw i64 %7376, %7318
  %7378 = getelementptr inbounds i16, i16* %7371, i64 %7377
  %7379 = add nuw nsw i32 %7360, 1
  %7380 = icmp slt i32 %7379, %7369
  br i1 %7380, label %7357, label %7395

7381:                                             ; preds = %7357, %7381
  %7382 = phi %"class.blink::IntRect"* [ %7391, %7381 ], [ %7359, %7357 ]
  %7383 = phi i32 [ %7390, %7381 ], [ 0, %7357 ]
  %7384 = phi i8* [ %7389, %7381 ], [ %7361, %7357 ]
  %7385 = phi i16* [ %7388, %7381 ], [ %7362, %7357 ]
  %7386 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7382, i64 0, i32 1, i32 0
  %7387 = load i32, i32* %7386, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %7385, i8* %7384, i32 %7387) #12
  %7388 = getelementptr inbounds i16, i16* %7385, i64 %7318
  %7389 = getelementptr inbounds i8, i8* %7384, i64 %7321
  %7390 = add nuw nsw i32 %7383, 1
  %7391 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7324, align 8
  %7392 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7391, i64 0, i32 1, i32 1
  %7393 = load i32, i32* %7392, align 4
  %7394 = icmp slt i32 %7390, %7393
  br i1 %7394, label %7381, label %7366

7395:                                             ; preds = %7368, %7350
  %7396 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7396, align 4
  br label %13459

7397:                                             ; preds = %7313
  %7398 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7399 = load i32, i32* %7398, align 8
  %7400 = sdiv i32 %7399, 2
  %7401 = sext i32 %7400 to i64
  %7402 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7403 = load i32, i32* %7402, align 8
  %7404 = sext i32 %7403 to i64
  %7405 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7406 = load i8*, i8** %7405, align 8
  %7407 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7408 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7407, align 8
  %7409 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7408, i64 0, i32 0, i32 1
  %7410 = load i32, i32* %7409, align 4
  %7411 = mul nsw i32 %7410, %7399
  %7412 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7413 = load i32, i32* %7412, align 4
  %7414 = add nsw i32 %7411, %7413
  %7415 = sext i32 %7414 to i64
  %7416 = getelementptr inbounds i8, i8* %7406, i64 %7415
  %7417 = bitcast i8* %7416 to i16*
  %7418 = icmp slt i32 %7403, 0
  %7419 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7420 = load i32, i32* %7419, align 8
  %7421 = icmp sgt i32 %7420, 1
  %7422 = and i1 %7418, %7421
  br i1 %7422, label %7423, label %7433

7423:                                             ; preds = %7397
  %7424 = add nsw i32 %7420, -1
  %7425 = sext i32 %7424 to i64
  %7426 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7427 = load i32, i32* %7426, align 4
  %7428 = sext i32 %7427 to i64
  %7429 = mul nsw i64 %7401, %7425
  %7430 = mul i64 %7429, %7428
  %7431 = sub i64 0, %7430
  %7432 = getelementptr inbounds i16, i16* %7417, i64 %7431
  br label %7435

7433:                                             ; preds = %7397
  %7434 = icmp sgt i32 %7420, 0
  br i1 %7434, label %7435, label %7586

7435:                                             ; preds = %7433, %7423
  %7436 = phi i16* [ %7432, %7423 ], [ %7417, %7433 ]
  %7437 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7438 = load i8*, i8** %7437, align 8
  %7439 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7440 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7441

7441:                                             ; preds = %7452, %7435
  %7442 = phi i32 [ %7420, %7435 ], [ %7453, %7452 ]
  %7443 = phi %"class.blink::IntRect"* [ %7408, %7435 ], [ %7454, %7452 ]
  %7444 = phi i32 [ 0, %7435 ], [ %7463, %7452 ]
  %7445 = phi i8* [ %7438, %7435 ], [ %7456, %7452 ]
  %7446 = phi i16* [ %7436, %7435 ], [ %7462, %7452 ]
  %7447 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7443, i64 0, i32 1, i32 1
  %7448 = load i32, i32* %7447, align 4
  %7449 = icmp sgt i32 %7448, 0
  br i1 %7449, label %7465, label %7452

7450:                                             ; preds = %7577
  %7451 = load i32, i32* %7419, align 8
  br label %7452

7452:                                             ; preds = %7450, %7441
  %7453 = phi i32 [ %7442, %7441 ], [ %7451, %7450 ]
  %7454 = phi %"class.blink::IntRect"* [ %7443, %7441 ], [ %7578, %7450 ]
  %7455 = phi i16* [ %7446, %7441 ], [ %7579, %7450 ]
  %7456 = phi i8* [ %7445, %7441 ], [ %7580, %7450 ]
  %7457 = phi i32 [ %7448, %7441 ], [ %7583, %7450 ]
  %7458 = load i32, i32* %7440, align 4
  %7459 = sub nsw i32 %7458, %7457
  %7460 = sext i32 %7459 to i64
  %7461 = mul nsw i64 %7460, %7401
  %7462 = getelementptr inbounds i16, i16* %7455, i64 %7461
  %7463 = add nuw nsw i32 %7444, 1
  %7464 = icmp slt i32 %7463, %7453
  br i1 %7464, label %7441, label %7586

7465:                                             ; preds = %7441, %7577
  %7466 = phi i64 [ %7585, %7577 ], [ 0, %7441 ]
  %7467 = phi %"class.blink::IntRect"* [ %7578, %7577 ], [ %7443, %7441 ]
  %7468 = phi i32 [ %7581, %7577 ], [ 0, %7441 ]
  %7469 = phi i8* [ %7580, %7577 ], [ %7445, %7441 ]
  %7470 = phi i16* [ %7579, %7577 ], [ %7446, %7441 ]
  %7471 = mul i64 %7466, %7404
  %7472 = getelementptr i8, i8* %7445, i64 %7471
  %7473 = add i64 %7471, 4
  %7474 = getelementptr i8, i8* %7445, i64 %7473
  %7475 = load i8*, i8** %7439, align 8
  %7476 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7467, i64 0, i32 1, i32 0
  %7477 = load i32, i32* %7476, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %7470, i8* %7475, i32 %7477) #12
  %7478 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7407, align 8
  %7479 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7478, i64 0, i32 1, i32 0
  %7480 = load i32, i32* %7479, align 4
  %7481 = icmp eq i32 %7480, 0
  br i1 %7481, label %7577, label %7482

7482:                                             ; preds = %7465
  %7483 = load i8*, i8** %7439, align 8
  %7484 = add i32 %7480, -1
  %7485 = zext i32 %7484 to i64
  %7486 = add nuw nsw i64 %7485, 1
  %7487 = icmp ult i64 %7486, 17
  br i1 %7487, label %7541, label %7488

7488:                                             ; preds = %7482
  %7489 = add i32 %7480, -1
  %7490 = zext i32 %7489 to i64
  %7491 = shl nuw nsw i64 %7490, 2
  %7492 = getelementptr i8, i8* %7474, i64 %7491
  %7493 = getelementptr i8, i8* %7483, i64 4
  %7494 = getelementptr i8, i8* %7493, i64 %7491
  %7495 = icmp ult i8* %7472, %7494
  %7496 = icmp ult i8* %7483, %7492
  %7497 = and i1 %7495, %7496
  br i1 %7497, label %7541, label %7498

7498:                                             ; preds = %7488
  %7499 = and i64 %7486, 15
  %7500 = icmp eq i64 %7499, 0
  %7501 = select i1 %7500, i64 16, i64 %7499
  %7502 = sub nsw i64 %7486, %7501
  %7503 = shl nsw i64 %7502, 2
  %7504 = getelementptr i8, i8* %7483, i64 %7503
  %7505 = shl nsw i64 %7502, 2
  %7506 = getelementptr i8, i8* %7469, i64 %7505
  %7507 = trunc i64 %7502 to i32
  br label %7508

7508:                                             ; preds = %7508, %7498
  %7509 = phi i64 [ 0, %7498 ], [ %7539, %7508 ]
  %7510 = shl i64 %7509, 2
  %7511 = getelementptr i8, i8* %7483, i64 %7510
  %7512 = shl i64 %7509, 2
  %7513 = getelementptr inbounds i8, i8* %7511, i64 3
  %7514 = bitcast i8* %7513 to <64 x i8>*
  %7515 = load <64 x i8>, <64 x i8>* %7514, align 1
  %7516 = shufflevector <64 x i8> %7515, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %7517 = uitofp <16 x i8> %7516 to <16 x float>
  %7518 = fdiv <16 x float> %7517, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %7519 = bitcast i8* %7511 to <64 x i8>*
  %7520 = load <64 x i8>, <64 x i8>* %7519, align 1
  %7521 = shufflevector <64 x i8> %7520, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %7522 = shufflevector <64 x i8> %7520, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %7523 = shufflevector <64 x i8> %7520, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %7524 = shufflevector <64 x i8> %7520, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %7525 = uitofp <16 x i8> %7521 to <16 x float>
  %7526 = fmul <16 x float> %7518, %7525
  %7527 = fptoui <16 x float> %7526 to <16 x i8>
  %7528 = uitofp <16 x i8> %7522 to <16 x float>
  %7529 = fmul <16 x float> %7518, %7528
  %7530 = fptoui <16 x float> %7529 to <16 x i8>
  %7531 = uitofp <16 x i8> %7523 to <16 x float>
  %7532 = fmul <16 x float> %7518, %7531
  %7533 = fptoui <16 x float> %7532 to <16 x i8>
  %7534 = getelementptr inbounds i8, i8* %7469, i64 %7512
  %7535 = bitcast i8* %7534 to <64 x i8>*
  %7536 = shufflevector <16 x i8> %7527, <16 x i8> %7530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7537 = shufflevector <16 x i8> %7533, <16 x i8> %7524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7538 = shufflevector <32 x i8> %7536, <32 x i8> %7537, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %7538, <64 x i8>* %7535, align 1
  %7539 = add i64 %7509, 16
  %7540 = icmp eq i64 %7539, %7502
  br i1 %7540, label %7541, label %7508, !llvm.loop !698

7541:                                             ; preds = %7508, %7488, %7482
  %7542 = phi i8* [ %7483, %7488 ], [ %7483, %7482 ], [ %7504, %7508 ]
  %7543 = phi i8* [ %7469, %7488 ], [ %7469, %7482 ], [ %7506, %7508 ]
  %7544 = phi i32 [ 0, %7488 ], [ 0, %7482 ], [ %7507, %7508 ]
  br label %7545

7545:                                             ; preds = %7541, %7545
  %7546 = phi i8* [ %7571, %7545 ], [ %7542, %7541 ]
  %7547 = phi i8* [ %7572, %7545 ], [ %7543, %7541 ]
  %7548 = phi i32 [ %7573, %7545 ], [ %7544, %7541 ]
  %7549 = getelementptr inbounds i8, i8* %7546, i64 3
  %7550 = load i8, i8* %7549, align 1
  %7551 = uitofp i8 %7550 to float
  %7552 = fdiv float %7551, 2.550000e+02
  %7553 = load i8, i8* %7546, align 1
  %7554 = uitofp i8 %7553 to float
  %7555 = fmul float %7552, %7554
  %7556 = fptoui float %7555 to i8
  %7557 = getelementptr inbounds i8, i8* %7546, i64 1
  %7558 = load i8, i8* %7557, align 1
  %7559 = uitofp i8 %7558 to float
  %7560 = fmul float %7552, %7559
  %7561 = fptoui float %7560 to i8
  %7562 = getelementptr inbounds i8, i8* %7546, i64 2
  %7563 = load i8, i8* %7562, align 1
  %7564 = uitofp i8 %7563 to float
  %7565 = fmul float %7552, %7564
  %7566 = fptoui float %7565 to i8
  store i8 %7556, i8* %7547, align 1
  %7567 = getelementptr inbounds i8, i8* %7547, i64 1
  store i8 %7561, i8* %7567, align 1
  %7568 = getelementptr inbounds i8, i8* %7547, i64 2
  store i8 %7566, i8* %7568, align 1
  %7569 = load i8, i8* %7549, align 1
  %7570 = getelementptr inbounds i8, i8* %7547, i64 3
  store i8 %7569, i8* %7570, align 1
  %7571 = getelementptr inbounds i8, i8* %7546, i64 4
  %7572 = getelementptr inbounds i8, i8* %7547, i64 4
  %7573 = add nuw i32 %7548, 1
  %7574 = icmp eq i32 %7573, %7480
  br i1 %7574, label %7575, label %7545, !llvm.loop !699

7575:                                             ; preds = %7545
  %7576 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7407, align 8
  br label %7577

7577:                                             ; preds = %7575, %7465
  %7578 = phi %"class.blink::IntRect"* [ %7576, %7575 ], [ %7478, %7465 ]
  %7579 = getelementptr inbounds i16, i16* %7470, i64 %7401
  %7580 = getelementptr inbounds i8, i8* %7469, i64 %7404
  %7581 = add nuw nsw i32 %7468, 1
  %7582 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7578, i64 0, i32 1, i32 1
  %7583 = load i32, i32* %7582, align 4
  %7584 = icmp slt i32 %7581, %7583
  %7585 = add i64 %7466, 1
  br i1 %7584, label %7465, label %7450

7586:                                             ; preds = %7452, %7433
  %7587 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7587, align 4
  br label %13459

7588:                                             ; preds = %7313
  %7589 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7590 = load i32, i32* %7589, align 8
  %7591 = sdiv i32 %7590, 2
  %7592 = sext i32 %7591 to i64
  %7593 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7594 = load i32, i32* %7593, align 8
  %7595 = sext i32 %7594 to i64
  %7596 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7597 = load i8*, i8** %7596, align 8
  %7598 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7599 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7598, align 8
  %7600 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7599, i64 0, i32 0, i32 1
  %7601 = load i32, i32* %7600, align 4
  %7602 = mul nsw i32 %7601, %7590
  %7603 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7604 = load i32, i32* %7603, align 4
  %7605 = add nsw i32 %7602, %7604
  %7606 = sext i32 %7605 to i64
  %7607 = getelementptr inbounds i8, i8* %7597, i64 %7606
  %7608 = bitcast i8* %7607 to i16*
  %7609 = icmp slt i32 %7594, 0
  %7610 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7611 = load i32, i32* %7610, align 8
  %7612 = icmp sgt i32 %7611, 1
  %7613 = and i1 %7609, %7612
  br i1 %7613, label %7614, label %7624

7614:                                             ; preds = %7588
  %7615 = add nsw i32 %7611, -1
  %7616 = sext i32 %7615 to i64
  %7617 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7618 = load i32, i32* %7617, align 4
  %7619 = sext i32 %7618 to i64
  %7620 = mul nsw i64 %7592, %7616
  %7621 = mul i64 %7620, %7619
  %7622 = sub i64 0, %7621
  %7623 = getelementptr inbounds i16, i16* %7608, i64 %7622
  br label %7626

7624:                                             ; preds = %7588
  %7625 = icmp sgt i32 %7611, 0
  br i1 %7625, label %7626, label %7751

7626:                                             ; preds = %7624, %7614
  %7627 = phi i16* [ %7623, %7614 ], [ %7608, %7624 ]
  %7628 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7629 = load i8*, i8** %7628, align 8
  %7630 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7631 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7632

7632:                                             ; preds = %7643, %7626
  %7633 = phi i32 [ %7611, %7626 ], [ %7644, %7643 ]
  %7634 = phi %"class.blink::IntRect"* [ %7599, %7626 ], [ %7645, %7643 ]
  %7635 = phi i32 [ 0, %7626 ], [ %7654, %7643 ]
  %7636 = phi i8* [ %7629, %7626 ], [ %7647, %7643 ]
  %7637 = phi i16* [ %7627, %7626 ], [ %7653, %7643 ]
  %7638 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7634, i64 0, i32 1, i32 1
  %7639 = load i32, i32* %7638, align 4
  %7640 = icmp sgt i32 %7639, 0
  br i1 %7640, label %7656, label %7643

7641:                                             ; preds = %7743
  %7642 = load i32, i32* %7610, align 8
  br label %7643

7643:                                             ; preds = %7641, %7632
  %7644 = phi i32 [ %7633, %7632 ], [ %7642, %7641 ]
  %7645 = phi %"class.blink::IntRect"* [ %7634, %7632 ], [ %7744, %7641 ]
  %7646 = phi i16* [ %7637, %7632 ], [ %7745, %7641 ]
  %7647 = phi i8* [ %7636, %7632 ], [ %7746, %7641 ]
  %7648 = phi i32 [ %7639, %7632 ], [ %7749, %7641 ]
  %7649 = load i32, i32* %7631, align 4
  %7650 = sub nsw i32 %7649, %7648
  %7651 = sext i32 %7650 to i64
  %7652 = mul nsw i64 %7651, %7592
  %7653 = getelementptr inbounds i16, i16* %7646, i64 %7652
  %7654 = add nuw nsw i32 %7635, 1
  %7655 = icmp slt i32 %7654, %7644
  br i1 %7655, label %7632, label %7751

7656:                                             ; preds = %7632, %7743
  %7657 = phi %"class.blink::IntRect"* [ %7744, %7743 ], [ %7634, %7632 ]
  %7658 = phi i32 [ %7747, %7743 ], [ 0, %7632 ]
  %7659 = phi i8* [ %7746, %7743 ], [ %7636, %7632 ]
  %7660 = phi i16* [ %7745, %7743 ], [ %7637, %7632 ]
  %7661 = load i8*, i8** %7630, align 8
  %7662 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7657, i64 0, i32 1, i32 0
  %7663 = load i32, i32* %7662, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %7660, i8* %7661, i32 %7663) #12
  %7664 = load i8*, i8** %7630, align 8
  %7665 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7598, align 8
  %7666 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7665, i64 0, i32 1, i32 0
  %7667 = load i32, i32* %7666, align 4
  %7668 = icmp eq i32 %7667, 0
  br i1 %7668, label %7743, label %7669

7669:                                             ; preds = %7656, %7669
  %7670 = phi i8* [ %7703, %7669 ], [ %7664, %7656 ]
  %7671 = phi i32 [ %7705, %7669 ], [ 0, %7656 ]
  %7672 = phi i8* [ %7704, %7669 ], [ %7659, %7656 ]
  %7673 = getelementptr inbounds i8, i8* %7670, i64 3
  %7674 = load i8, i8* %7673, align 1
  %7675 = icmp eq i8 %7674, 0
  %7676 = select i1 %7675, i8 -1, i8 %7674
  %7677 = uitofp i8 %7676 to float
  %7678 = getelementptr inbounds i8, i8* %7670, i64 2
  %7679 = load i8, i8* %7678, align 1
  %7680 = uitofp i8 %7679 to float
  %7681 = getelementptr inbounds i8, i8* %7670, i64 1
  %7682 = load i8, i8* %7681, align 1
  %7683 = uitofp i8 %7682 to float
  %7684 = load i8, i8* %7670, align 1
  %7685 = uitofp i8 %7684 to float
  %7686 = insertelement <4 x float> <float undef, float undef, float undef, float 0.000000e+00>, float %7685, i32 0
  %7687 = insertelement <4 x float> %7686, float %7683, i32 1
  %7688 = insertelement <4 x float> %7687, float %7680, i32 2
  %7689 = insertelement <4 x float> undef, float %7677, i32 0
  %7690 = fdiv <4 x float> <float 2.550000e+02, float undef, float undef, float undef>, %7689
  %7691 = shufflevector <4 x float> %7690, <4 x float> undef, <4 x i32> zeroinitializer
  %7692 = fmul <4 x float> %7691, %7688
  %7693 = extractelement <4 x float> %7692, i32 0
  %7694 = fptoui float %7693 to i8
  store i8 %7694, i8* %7672, align 1
  %7695 = extractelement <4 x float> %7692, i32 1
  %7696 = fptoui float %7695 to i8
  %7697 = getelementptr inbounds i8, i8* %7672, i64 1
  store i8 %7696, i8* %7697, align 1
  %7698 = extractelement <4 x float> %7692, i32 2
  %7699 = fptoui float %7698 to i8
  %7700 = getelementptr inbounds i8, i8* %7672, i64 2
  store i8 %7699, i8* %7700, align 1
  %7701 = load i8, i8* %7673, align 1
  %7702 = getelementptr inbounds i8, i8* %7672, i64 3
  store i8 %7701, i8* %7702, align 1
  %7703 = getelementptr inbounds i8, i8* %7670, i64 4
  %7704 = getelementptr inbounds i8, i8* %7672, i64 4
  %7705 = add nuw i32 %7671, 1
  %7706 = icmp eq i32 %7705, %7667
  br i1 %7706, label %7707, label %7669

7707:                                             ; preds = %7669, %7717
  %7708 = phi i8* [ %7737, %7717 ], [ %7664, %7669 ]
  %7709 = phi i8* [ %7738, %7717 ], [ %7659, %7669 ]
  %7710 = phi i32 [ %7739, %7717 ], [ 0, %7669 ]
  %7711 = getelementptr inbounds i8, i8* %7708, i64 3
  %7712 = load i8, i8* %7711, align 1
  %7713 = icmp eq i8 %7712, 0
  br i1 %7713, label %7717, label %7714

7714:                                             ; preds = %7707
  %7715 = uitofp i8 %7712 to float
  %7716 = fdiv float 2.550000e+02, %7715
  br label %7717

7717:                                             ; preds = %7714, %7707
  %7718 = phi float [ %7716, %7714 ], [ 1.000000e+00, %7707 ]
  %7719 = load i8, i8* %7708, align 1
  %7720 = uitofp i8 %7719 to float
  %7721 = fmul float %7718, %7720
  %7722 = fptoui float %7721 to i8
  %7723 = getelementptr inbounds i8, i8* %7708, i64 1
  %7724 = load i8, i8* %7723, align 1
  %7725 = uitofp i8 %7724 to float
  %7726 = fmul float %7718, %7725
  %7727 = fptoui float %7726 to i8
  %7728 = getelementptr inbounds i8, i8* %7708, i64 2
  %7729 = load i8, i8* %7728, align 1
  %7730 = uitofp i8 %7729 to float
  %7731 = fmul float %7718, %7730
  %7732 = fptoui float %7731 to i8
  store i8 %7722, i8* %7709, align 1
  %7733 = getelementptr inbounds i8, i8* %7709, i64 1
  store i8 %7727, i8* %7733, align 1
  %7734 = getelementptr inbounds i8, i8* %7709, i64 2
  store i8 %7732, i8* %7734, align 1
  %7735 = load i8, i8* %7711, align 1
  %7736 = getelementptr inbounds i8, i8* %7709, i64 3
  store i8 %7735, i8* %7736, align 1
  %7737 = getelementptr inbounds i8, i8* %7708, i64 4
  %7738 = getelementptr inbounds i8, i8* %7709, i64 4
  %7739 = add nuw i32 %7710, 1
  %7740 = icmp eq i32 %7739, %7667
  br i1 %7740, label %7741, label %7707

7741:                                             ; preds = %7717
  %7742 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7598, align 8
  br label %7743

7743:                                             ; preds = %7741, %7656
  %7744 = phi %"class.blink::IntRect"* [ %7742, %7741 ], [ %7665, %7656 ]
  %7745 = getelementptr inbounds i16, i16* %7660, i64 %7592
  %7746 = getelementptr inbounds i8, i8* %7659, i64 %7595
  %7747 = add nuw nsw i32 %7658, 1
  %7748 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7744, i64 0, i32 1, i32 1
  %7749 = load i32, i32* %7748, align 4
  %7750 = icmp slt i32 %7747, %7749
  br i1 %7750, label %7656, label %7641

7751:                                             ; preds = %7643, %7624
  %7752 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7752, align 4
  br label %13459

7753:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %7754
    i32 1, label %7941
    i32 2, label %8150
  ]

7754:                                             ; preds = %7753
  %7755 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7756 = load i32, i32* %7755, align 8
  %7757 = sdiv i32 %7756, 2
  %7758 = sext i32 %7757 to i64
  %7759 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7760 = load i32, i32* %7759, align 8
  %7761 = sdiv i32 %7760, 2
  %7762 = sext i32 %7761 to i64
  %7763 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7764 = load i8*, i8** %7763, align 8
  %7765 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7766 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7765, align 8
  %7767 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7766, i64 0, i32 0, i32 1
  %7768 = load i32, i32* %7767, align 4
  %7769 = mul nsw i32 %7768, %7756
  %7770 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7771 = load i32, i32* %7770, align 4
  %7772 = add nsw i32 %7769, %7771
  %7773 = sext i32 %7772 to i64
  %7774 = getelementptr inbounds i8, i8* %7764, i64 %7773
  %7775 = bitcast i8* %7774 to i16*
  %7776 = icmp slt i32 %7760, 0
  %7777 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7778 = load i32, i32* %7777, align 8
  %7779 = icmp sgt i32 %7778, 1
  %7780 = and i1 %7776, %7779
  br i1 %7780, label %7781, label %7791

7781:                                             ; preds = %7754
  %7782 = add nsw i32 %7778, -1
  %7783 = sext i32 %7782 to i64
  %7784 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7785 = load i32, i32* %7784, align 4
  %7786 = sext i32 %7785 to i64
  %7787 = mul nsw i64 %7758, %7783
  %7788 = mul i64 %7787, %7786
  %7789 = sub i64 0, %7788
  %7790 = getelementptr inbounds i16, i16* %7775, i64 %7789
  br label %7793

7791:                                             ; preds = %7754
  %7792 = icmp sgt i32 %7778, 0
  br i1 %7792, label %7793, label %7939

7793:                                             ; preds = %7791, %7781
  %7794 = phi i16* [ %7790, %7781 ], [ %7775, %7791 ]
  %7795 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7796 = bitcast i8** %7795 to i16**
  %7797 = load i16*, i16** %7796, align 8
  %7798 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7800

7800:                                             ; preds = %7811, %7793
  %7801 = phi i32 [ %7778, %7793 ], [ %7812, %7811 ]
  %7802 = phi %"class.blink::IntRect"* [ %7766, %7793 ], [ %7813, %7811 ]
  %7803 = phi i32 [ 0, %7793 ], [ %7822, %7811 ]
  %7804 = phi i16* [ %7797, %7793 ], [ %7815, %7811 ]
  %7805 = phi i16* [ %7794, %7793 ], [ %7821, %7811 ]
  %7806 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7802, i64 0, i32 1, i32 1
  %7807 = load i32, i32* %7806, align 4
  %7808 = icmp sgt i32 %7807, 0
  br i1 %7808, label %7824, label %7811

7809:                                             ; preds = %7930
  %7810 = load i32, i32* %7777, align 8
  br label %7811

7811:                                             ; preds = %7809, %7800
  %7812 = phi i32 [ %7801, %7800 ], [ %7810, %7809 ]
  %7813 = phi %"class.blink::IntRect"* [ %7802, %7800 ], [ %7931, %7809 ]
  %7814 = phi i16* [ %7805, %7800 ], [ %7932, %7809 ]
  %7815 = phi i16* [ %7804, %7800 ], [ %7933, %7809 ]
  %7816 = phi i32 [ %7807, %7800 ], [ %7936, %7809 ]
  %7817 = load i32, i32* %7799, align 4
  %7818 = sub nsw i32 %7817, %7816
  %7819 = sext i32 %7818 to i64
  %7820 = mul nsw i64 %7819, %7758
  %7821 = getelementptr inbounds i16, i16* %7814, i64 %7820
  %7822 = add nuw nsw i32 %7803, 1
  %7823 = icmp slt i32 %7822, %7812
  br i1 %7823, label %7800, label %7939

7824:                                             ; preds = %7800, %7930
  %7825 = phi i64 [ %7938, %7930 ], [ 0, %7800 ]
  %7826 = phi %"class.blink::IntRect"* [ %7931, %7930 ], [ %7802, %7800 ]
  %7827 = phi i32 [ %7934, %7930 ], [ 0, %7800 ]
  %7828 = phi i16* [ %7933, %7930 ], [ %7804, %7800 ]
  %7829 = phi i16* [ %7932, %7930 ], [ %7805, %7800 ]
  %7830 = mul i64 %7825, %7762
  %7831 = getelementptr i16, i16* %7804, i64 %7830
  %7832 = bitcast i16* %7831 to i8*
  %7833 = add i64 %7830, 1
  %7834 = getelementptr i16, i16* %7804, i64 %7833
  %7835 = load i8*, i8** %7798, align 8
  %7836 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7826, i64 0, i32 1, i32 0
  %7837 = load i32, i32* %7836, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %7829, i8* %7835, i32 %7837) #12
  %7838 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7765, align 8
  %7839 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7838, i64 0, i32 1, i32 0
  %7840 = load i32, i32* %7839, align 4
  %7841 = icmp eq i32 %7840, 0
  br i1 %7841, label %7930, label %7842

7842:                                             ; preds = %7824
  %7843 = load i8*, i8** %7798, align 8
  %7844 = add i32 %7840, -1
  %7845 = zext i32 %7844 to i64
  %7846 = add nuw nsw i64 %7845, 1
  %7847 = icmp ult i64 %7846, 8
  br i1 %7847, label %7895, label %7848

7848:                                             ; preds = %7842
  %7849 = add i32 %7840, -1
  %7850 = zext i32 %7849 to i64
  %7851 = getelementptr i16, i16* %7834, i64 %7850
  %7852 = bitcast i16* %7851 to i8*
  %7853 = getelementptr i8, i8* %7843, i64 4
  %7854 = shl nuw nsw i64 %7850, 2
  %7855 = getelementptr i8, i8* %7853, i64 %7854
  %7856 = icmp ugt i8* %7855, %7832
  %7857 = icmp ult i8* %7843, %7852
  %7858 = and i1 %7856, %7857
  br i1 %7858, label %7895, label %7859

7859:                                             ; preds = %7848
  %7860 = and i64 %7846, 8589934584
  %7861 = trunc i64 %7860 to i32
  %7862 = shl nuw nsw i64 %7860, 2
  %7863 = getelementptr i8, i8* %7843, i64 %7862
  %7864 = getelementptr i16, i16* %7828, i64 %7860
  br label %7865

7865:                                             ; preds = %7865, %7859
  %7866 = phi i64 [ 0, %7859 ], [ %7891, %7865 ]
  %7867 = shl i64 %7866, 2
  %7868 = getelementptr i8, i8* %7843, i64 %7867
  %7869 = getelementptr i16, i16* %7828, i64 %7866
  %7870 = bitcast i8* %7868 to <32 x i8>*
  %7871 = load <32 x i8>, <32 x i8>* %7870, align 1
  %7872 = shufflevector <32 x i8> %7871, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %7873 = shufflevector <32 x i8> %7871, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %7874 = shufflevector <32 x i8> %7871, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %7875 = shufflevector <32 x i8> %7871, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %7876 = and <8 x i8> %7872, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %7877 = zext <8 x i8> %7876 to <8 x i16>
  %7878 = shl nuw <8 x i16> %7877, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %7879 = and <8 x i8> %7873, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %7880 = zext <8 x i8> %7879 to <8 x i16>
  %7881 = shl nuw nsw <8 x i16> %7880, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %7882 = or <8 x i16> %7881, %7878
  %7883 = lshr <8 x i8> %7874, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %7884 = and <8 x i8> %7883, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %7885 = zext <8 x i8> %7884 to <8 x i16>
  %7886 = or <8 x i16> %7882, %7885
  %7887 = lshr <8 x i8> %7875, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %7888 = zext <8 x i8> %7887 to <8 x i16>
  %7889 = or <8 x i16> %7886, %7888
  %7890 = bitcast i16* %7869 to <8 x i16>*
  store <8 x i16> %7889, <8 x i16>* %7890, align 2, !alias.scope !700, !noalias !703
  %7891 = add i64 %7866, 8
  %7892 = icmp eq i64 %7891, %7860
  br i1 %7892, label %7893, label %7865, !llvm.loop !705

7893:                                             ; preds = %7865
  %7894 = icmp eq i64 %7846, %7860
  br i1 %7894, label %7928, label %7895

7895:                                             ; preds = %7893, %7848, %7842
  %7896 = phi i32 [ 0, %7848 ], [ 0, %7842 ], [ %7861, %7893 ]
  %7897 = phi i8* [ %7843, %7848 ], [ %7843, %7842 ], [ %7863, %7893 ]
  %7898 = phi i16* [ %7828, %7848 ], [ %7828, %7842 ], [ %7864, %7893 ]
  br label %7899

7899:                                             ; preds = %7895, %7899
  %7900 = phi i32 [ %7926, %7899 ], [ %7896, %7895 ]
  %7901 = phi i8* [ %7924, %7899 ], [ %7897, %7895 ]
  %7902 = phi i16* [ %7925, %7899 ], [ %7898, %7895 ]
  %7903 = load i8, i8* %7901, align 1
  %7904 = and i8 %7903, -8
  %7905 = zext i8 %7904 to i16
  %7906 = shl nuw i16 %7905, 8
  %7907 = getelementptr inbounds i8, i8* %7901, i64 1
  %7908 = load i8, i8* %7907, align 1
  %7909 = and i8 %7908, -8
  %7910 = zext i8 %7909 to i16
  %7911 = shl nuw nsw i16 %7910, 3
  %7912 = or i16 %7911, %7906
  %7913 = getelementptr inbounds i8, i8* %7901, i64 2
  %7914 = load i8, i8* %7913, align 1
  %7915 = lshr i8 %7914, 2
  %7916 = and i8 %7915, 62
  %7917 = zext i8 %7916 to i16
  %7918 = or i16 %7912, %7917
  %7919 = getelementptr inbounds i8, i8* %7901, i64 3
  %7920 = load i8, i8* %7919, align 1
  %7921 = lshr i8 %7920, 7
  %7922 = zext i8 %7921 to i16
  %7923 = or i16 %7918, %7922
  store i16 %7923, i16* %7902, align 2
  %7924 = getelementptr inbounds i8, i8* %7901, i64 4
  %7925 = getelementptr inbounds i16, i16* %7902, i64 1
  %7926 = add nuw i32 %7900, 1
  %7927 = icmp eq i32 %7926, %7840
  br i1 %7927, label %7928, label %7899, !llvm.loop !706

7928:                                             ; preds = %7899, %7893
  %7929 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7765, align 8
  br label %7930

7930:                                             ; preds = %7928, %7824
  %7931 = phi %"class.blink::IntRect"* [ %7929, %7928 ], [ %7838, %7824 ]
  %7932 = getelementptr inbounds i16, i16* %7829, i64 %7758
  %7933 = getelementptr inbounds i16, i16* %7828, i64 %7762
  %7934 = add nuw nsw i32 %7827, 1
  %7935 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7931, i64 0, i32 1, i32 1
  %7936 = load i32, i32* %7935, align 4
  %7937 = icmp slt i32 %7934, %7936
  %7938 = add i64 %7825, 1
  br i1 %7937, label %7824, label %7809

7939:                                             ; preds = %7811, %7791
  %7940 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %7940, align 4
  br label %13459

7941:                                             ; preds = %7753
  %7942 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %7943 = load i32, i32* %7942, align 8
  %7944 = sdiv i32 %7943, 2
  %7945 = sext i32 %7944 to i64
  %7946 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %7947 = load i32, i32* %7946, align 8
  %7948 = sdiv i32 %7947, 2
  %7949 = sext i32 %7948 to i64
  %7950 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %7951 = load i8*, i8** %7950, align 8
  %7952 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %7953 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7952, align 8
  %7954 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7953, i64 0, i32 0, i32 1
  %7955 = load i32, i32* %7954, align 4
  %7956 = mul nsw i32 %7955, %7943
  %7957 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %7958 = load i32, i32* %7957, align 4
  %7959 = add nsw i32 %7956, %7958
  %7960 = sext i32 %7959 to i64
  %7961 = getelementptr inbounds i8, i8* %7951, i64 %7960
  %7962 = bitcast i8* %7961 to i16*
  %7963 = icmp slt i32 %7947, 0
  %7964 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %7965 = load i32, i32* %7964, align 8
  %7966 = icmp sgt i32 %7965, 1
  %7967 = and i1 %7963, %7966
  br i1 %7967, label %7968, label %7978

7968:                                             ; preds = %7941
  %7969 = add nsw i32 %7965, -1
  %7970 = sext i32 %7969 to i64
  %7971 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %7972 = load i32, i32* %7971, align 4
  %7973 = sext i32 %7972 to i64
  %7974 = mul nsw i64 %7945, %7970
  %7975 = mul i64 %7974, %7973
  %7976 = sub i64 0, %7975
  %7977 = getelementptr inbounds i16, i16* %7962, i64 %7976
  br label %7980

7978:                                             ; preds = %7941
  %7979 = icmp sgt i32 %7965, 0
  br i1 %7979, label %7980, label %8148

7980:                                             ; preds = %7978, %7968
  %7981 = phi i16* [ %7977, %7968 ], [ %7962, %7978 ]
  %7982 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %7983 = bitcast i8** %7982 to i16**
  %7984 = load i16*, i16** %7983, align 8
  %7985 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %7986 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %7987

7987:                                             ; preds = %7998, %7980
  %7988 = phi i32 [ %7965, %7980 ], [ %7999, %7998 ]
  %7989 = phi %"class.blink::IntRect"* [ %7953, %7980 ], [ %8000, %7998 ]
  %7990 = phi i32 [ 0, %7980 ], [ %8009, %7998 ]
  %7991 = phi i16* [ %7984, %7980 ], [ %8002, %7998 ]
  %7992 = phi i16* [ %7981, %7980 ], [ %8008, %7998 ]
  %7993 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %7989, i64 0, i32 1, i32 1
  %7994 = load i32, i32* %7993, align 4
  %7995 = icmp sgt i32 %7994, 0
  br i1 %7995, label %8011, label %7998

7996:                                             ; preds = %8139
  %7997 = load i32, i32* %7964, align 8
  br label %7998

7998:                                             ; preds = %7996, %7987
  %7999 = phi i32 [ %7988, %7987 ], [ %7997, %7996 ]
  %8000 = phi %"class.blink::IntRect"* [ %7989, %7987 ], [ %8140, %7996 ]
  %8001 = phi i16* [ %7992, %7987 ], [ %8141, %7996 ]
  %8002 = phi i16* [ %7991, %7987 ], [ %8142, %7996 ]
  %8003 = phi i32 [ %7994, %7987 ], [ %8145, %7996 ]
  %8004 = load i32, i32* %7986, align 4
  %8005 = sub nsw i32 %8004, %8003
  %8006 = sext i32 %8005 to i64
  %8007 = mul nsw i64 %8006, %7945
  %8008 = getelementptr inbounds i16, i16* %8001, i64 %8007
  %8009 = add nuw nsw i32 %7990, 1
  %8010 = icmp slt i32 %8009, %7999
  br i1 %8010, label %7987, label %8148

8011:                                             ; preds = %7987, %8139
  %8012 = phi i64 [ %8147, %8139 ], [ 0, %7987 ]
  %8013 = phi %"class.blink::IntRect"* [ %8140, %8139 ], [ %7989, %7987 ]
  %8014 = phi i32 [ %8143, %8139 ], [ 0, %7987 ]
  %8015 = phi i16* [ %8142, %8139 ], [ %7991, %7987 ]
  %8016 = phi i16* [ %8141, %8139 ], [ %7992, %7987 ]
  %8017 = mul i64 %8012, %7949
  %8018 = getelementptr i16, i16* %7991, i64 %8017
  %8019 = bitcast i16* %8018 to i8*
  %8020 = add i64 %8017, 1
  %8021 = getelementptr i16, i16* %7991, i64 %8020
  %8022 = load i8*, i8** %7985, align 8
  %8023 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8013, i64 0, i32 1, i32 0
  %8024 = load i32, i32* %8023, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %8016, i8* %8022, i32 %8024) #12
  %8025 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7952, align 8
  %8026 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8025, i64 0, i32 1, i32 0
  %8027 = load i32, i32* %8026, align 4
  %8028 = icmp eq i32 %8027, 0
  br i1 %8028, label %8139, label %8029

8029:                                             ; preds = %8011
  %8030 = load i8*, i8** %7985, align 8
  %8031 = add i32 %8027, -1
  %8032 = zext i32 %8031 to i64
  %8033 = add nuw nsw i64 %8032, 1
  %8034 = icmp ult i64 %8033, 8
  br i1 %8034, label %8093, label %8035

8035:                                             ; preds = %8029
  %8036 = add i32 %8027, -1
  %8037 = zext i32 %8036 to i64
  %8038 = getelementptr i16, i16* %8021, i64 %8037
  %8039 = bitcast i16* %8038 to i8*
  %8040 = getelementptr i8, i8* %8030, i64 4
  %8041 = shl nuw nsw i64 %8037, 2
  %8042 = getelementptr i8, i8* %8040, i64 %8041
  %8043 = icmp ugt i8* %8042, %8019
  %8044 = icmp ult i8* %8030, %8039
  %8045 = and i1 %8043, %8044
  br i1 %8045, label %8093, label %8046

8046:                                             ; preds = %8035
  %8047 = and i64 %8033, 8589934584
  %8048 = shl nuw nsw i64 %8047, 2
  %8049 = getelementptr i8, i8* %8030, i64 %8048
  %8050 = getelementptr i16, i16* %8015, i64 %8047
  %8051 = trunc i64 %8047 to i32
  br label %8052

8052:                                             ; preds = %8052, %8046
  %8053 = phi i64 [ 0, %8046 ], [ %8089, %8052 ]
  %8054 = shl i64 %8053, 2
  %8055 = getelementptr i16, i16* %8015, i64 %8053
  %8056 = getelementptr inbounds i8, i8* %8030, i64 %8054
  %8057 = bitcast i8* %8056 to <32 x i8>*
  %8058 = load <32 x i8>, <32 x i8>* %8057, align 1
  %8059 = shufflevector <32 x i8> %8058, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %8060 = shufflevector <32 x i8> %8058, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %8061 = shufflevector <32 x i8> %8058, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %8062 = shufflevector <32 x i8> %8058, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %8063 = uitofp <8 x i8> %8062 to <8 x float>
  %8064 = fdiv <8 x float> %8063, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %8065 = uitofp <8 x i8> %8059 to <8 x float>
  %8066 = fmul <8 x float> %8064, %8065
  %8067 = fptoui <8 x float> %8066 to <8 x i8>
  %8068 = uitofp <8 x i8> %8060 to <8 x float>
  %8069 = fmul <8 x float> %8064, %8068
  %8070 = fptoui <8 x float> %8069 to <8 x i8>
  %8071 = uitofp <8 x i8> %8061 to <8 x float>
  %8072 = fmul <8 x float> %8064, %8071
  %8073 = fptoui <8 x float> %8072 to <8 x i8>
  %8074 = and <8 x i8> %8067, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %8075 = zext <8 x i8> %8074 to <8 x i16>
  %8076 = shl nuw <8 x i16> %8075, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %8077 = and <8 x i8> %8070, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %8078 = zext <8 x i8> %8077 to <8 x i16>
  %8079 = shl nuw nsw <8 x i16> %8078, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %8080 = lshr <8 x i8> %8073, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %8081 = and <8 x i8> %8080, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %8082 = zext <8 x i8> %8081 to <8 x i16>
  %8083 = lshr <8 x i8> %8062, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %8084 = zext <8 x i8> %8083 to <8 x i16>
  %8085 = or <8 x i16> %8076, %8084
  %8086 = or <8 x i16> %8085, %8079
  %8087 = or <8 x i16> %8086, %8082
  %8088 = bitcast i16* %8055 to <8 x i16>*
  store <8 x i16> %8087, <8 x i16>* %8088, align 2, !alias.scope !707, !noalias !710
  %8089 = add i64 %8053, 8
  %8090 = icmp eq i64 %8089, %8047
  br i1 %8090, label %8091, label %8052, !llvm.loop !712

8091:                                             ; preds = %8052
  %8092 = icmp eq i64 %8033, %8047
  br i1 %8092, label %8137, label %8093

8093:                                             ; preds = %8091, %8035, %8029
  %8094 = phi i8* [ %8030, %8035 ], [ %8030, %8029 ], [ %8049, %8091 ]
  %8095 = phi i16* [ %8015, %8035 ], [ %8015, %8029 ], [ %8050, %8091 ]
  %8096 = phi i32 [ 0, %8035 ], [ 0, %8029 ], [ %8051, %8091 ]
  br label %8097

8097:                                             ; preds = %8093, %8097
  %8098 = phi i8* [ %8133, %8097 ], [ %8094, %8093 ]
  %8099 = phi i16* [ %8134, %8097 ], [ %8095, %8093 ]
  %8100 = phi i32 [ %8135, %8097 ], [ %8096, %8093 ]
  %8101 = getelementptr inbounds i8, i8* %8098, i64 3
  %8102 = load i8, i8* %8101, align 1
  %8103 = uitofp i8 %8102 to float
  %8104 = fdiv float %8103, 2.550000e+02
  %8105 = load i8, i8* %8098, align 1
  %8106 = uitofp i8 %8105 to float
  %8107 = fmul float %8104, %8106
  %8108 = fptoui float %8107 to i8
  %8109 = getelementptr inbounds i8, i8* %8098, i64 1
  %8110 = load i8, i8* %8109, align 1
  %8111 = uitofp i8 %8110 to float
  %8112 = fmul float %8104, %8111
  %8113 = fptoui float %8112 to i8
  %8114 = getelementptr inbounds i8, i8* %8098, i64 2
  %8115 = load i8, i8* %8114, align 1
  %8116 = uitofp i8 %8115 to float
  %8117 = fmul float %8104, %8116
  %8118 = fptoui float %8117 to i8
  %8119 = and i8 %8108, -8
  %8120 = zext i8 %8119 to i16
  %8121 = shl nuw i16 %8120, 8
  %8122 = and i8 %8113, -8
  %8123 = zext i8 %8122 to i16
  %8124 = shl nuw nsw i16 %8123, 3
  %8125 = lshr i8 %8118, 2
  %8126 = and i8 %8125, 62
  %8127 = zext i8 %8126 to i16
  %8128 = lshr i8 %8102, 7
  %8129 = zext i8 %8128 to i16
  %8130 = or i16 %8121, %8129
  %8131 = or i16 %8130, %8124
  %8132 = or i16 %8131, %8127
  store i16 %8132, i16* %8099, align 2
  %8133 = getelementptr inbounds i8, i8* %8098, i64 4
  %8134 = getelementptr inbounds i16, i16* %8099, i64 1
  %8135 = add nuw i32 %8100, 1
  %8136 = icmp eq i32 %8135, %8027
  br i1 %8136, label %8137, label %8097, !llvm.loop !713

8137:                                             ; preds = %8097, %8091
  %8138 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %7952, align 8
  br label %8139

8139:                                             ; preds = %8137, %8011
  %8140 = phi %"class.blink::IntRect"* [ %8138, %8137 ], [ %8025, %8011 ]
  %8141 = getelementptr inbounds i16, i16* %8016, i64 %7945
  %8142 = getelementptr inbounds i16, i16* %8015, i64 %7949
  %8143 = add nuw nsw i32 %8014, 1
  %8144 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8140, i64 0, i32 1, i32 1
  %8145 = load i32, i32* %8144, align 4
  %8146 = icmp slt i32 %8143, %8145
  %8147 = add i64 %8012, 1
  br i1 %8146, label %8011, label %7996

8148:                                             ; preds = %7998, %7978
  %8149 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8149, align 4
  br label %13459

8150:                                             ; preds = %7753
  %8151 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8152 = load i32, i32* %8151, align 8
  %8153 = sdiv i32 %8152, 2
  %8154 = sext i32 %8153 to i64
  %8155 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8156 = load i32, i32* %8155, align 8
  %8157 = sdiv i32 %8156, 2
  %8158 = sext i32 %8157 to i64
  %8159 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8160 = load i8*, i8** %8159, align 8
  %8161 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8162 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8161, align 8
  %8163 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8162, i64 0, i32 0, i32 1
  %8164 = load i32, i32* %8163, align 4
  %8165 = mul nsw i32 %8164, %8152
  %8166 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8167 = load i32, i32* %8166, align 4
  %8168 = add nsw i32 %8165, %8167
  %8169 = sext i32 %8168 to i64
  %8170 = getelementptr inbounds i8, i8* %8160, i64 %8169
  %8171 = bitcast i8* %8170 to i16*
  %8172 = icmp slt i32 %8156, 0
  %8173 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8174 = load i32, i32* %8173, align 8
  %8175 = icmp sgt i32 %8174, 1
  %8176 = and i1 %8172, %8175
  br i1 %8176, label %8177, label %8187

8177:                                             ; preds = %8150
  %8178 = add nsw i32 %8174, -1
  %8179 = sext i32 %8178 to i64
  %8180 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8181 = load i32, i32* %8180, align 4
  %8182 = sext i32 %8181 to i64
  %8183 = mul nsw i64 %8154, %8179
  %8184 = mul i64 %8183, %8182
  %8185 = sub i64 0, %8184
  %8186 = getelementptr inbounds i16, i16* %8171, i64 %8185
  br label %8189

8187:                                             ; preds = %8150
  %8188 = icmp sgt i32 %8174, 0
  br i1 %8188, label %8189, label %8363

8189:                                             ; preds = %8187, %8177
  %8190 = phi i16* [ %8186, %8177 ], [ %8171, %8187 ]
  %8191 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8192 = bitcast i8** %8191 to i16**
  %8193 = load i16*, i16** %8192, align 8
  %8194 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8195 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8196

8196:                                             ; preds = %8207, %8189
  %8197 = phi i32 [ %8174, %8189 ], [ %8208, %8207 ]
  %8198 = phi %"class.blink::IntRect"* [ %8162, %8189 ], [ %8209, %8207 ]
  %8199 = phi i32 [ 0, %8189 ], [ %8218, %8207 ]
  %8200 = phi i16* [ %8193, %8189 ], [ %8211, %8207 ]
  %8201 = phi i16* [ %8190, %8189 ], [ %8217, %8207 ]
  %8202 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8198, i64 0, i32 1, i32 1
  %8203 = load i32, i32* %8202, align 4
  %8204 = icmp sgt i32 %8203, 0
  br i1 %8204, label %8220, label %8207

8205:                                             ; preds = %8354
  %8206 = load i32, i32* %8173, align 8
  br label %8207

8207:                                             ; preds = %8205, %8196
  %8208 = phi i32 [ %8197, %8196 ], [ %8206, %8205 ]
  %8209 = phi %"class.blink::IntRect"* [ %8198, %8196 ], [ %8355, %8205 ]
  %8210 = phi i16* [ %8201, %8196 ], [ %8356, %8205 ]
  %8211 = phi i16* [ %8200, %8196 ], [ %8357, %8205 ]
  %8212 = phi i32 [ %8203, %8196 ], [ %8360, %8205 ]
  %8213 = load i32, i32* %8195, align 4
  %8214 = sub nsw i32 %8213, %8212
  %8215 = sext i32 %8214 to i64
  %8216 = mul nsw i64 %8215, %8154
  %8217 = getelementptr inbounds i16, i16* %8210, i64 %8216
  %8218 = add nuw nsw i32 %8199, 1
  %8219 = icmp slt i32 %8218, %8208
  br i1 %8219, label %8196, label %8363

8220:                                             ; preds = %8196, %8354
  %8221 = phi i64 [ %8362, %8354 ], [ 0, %8196 ]
  %8222 = phi %"class.blink::IntRect"* [ %8355, %8354 ], [ %8198, %8196 ]
  %8223 = phi i32 [ %8358, %8354 ], [ 0, %8196 ]
  %8224 = phi i16* [ %8357, %8354 ], [ %8200, %8196 ]
  %8225 = phi i16* [ %8356, %8354 ], [ %8201, %8196 ]
  %8226 = mul i64 %8221, %8158
  %8227 = getelementptr i16, i16* %8200, i64 %8226
  %8228 = bitcast i16* %8227 to i8*
  %8229 = add i64 %8226, 1
  %8230 = getelementptr i16, i16* %8200, i64 %8229
  %8231 = load i8*, i8** %8194, align 8
  %8232 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8222, i64 0, i32 1, i32 0
  %8233 = load i32, i32* %8232, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %8225, i8* %8231, i32 %8233) #12
  %8234 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8161, align 8
  %8235 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8234, i64 0, i32 1, i32 0
  %8236 = load i32, i32* %8235, align 4
  %8237 = icmp eq i32 %8236, 0
  br i1 %8237, label %8354, label %8238

8238:                                             ; preds = %8220
  %8239 = load i8*, i8** %8194, align 8
  %8240 = add i32 %8236, -1
  %8241 = zext i32 %8240 to i64
  %8242 = add nuw nsw i64 %8241, 1
  %8243 = icmp ult i64 %8242, 8
  br i1 %8243, label %8304, label %8244

8244:                                             ; preds = %8238
  %8245 = add i32 %8236, -1
  %8246 = zext i32 %8245 to i64
  %8247 = getelementptr i16, i16* %8230, i64 %8246
  %8248 = bitcast i16* %8247 to i8*
  %8249 = getelementptr i8, i8* %8239, i64 4
  %8250 = shl nuw nsw i64 %8246, 2
  %8251 = getelementptr i8, i8* %8249, i64 %8250
  %8252 = icmp ugt i8* %8251, %8228
  %8253 = icmp ult i8* %8239, %8248
  %8254 = and i1 %8252, %8253
  br i1 %8254, label %8304, label %8255

8255:                                             ; preds = %8244
  %8256 = and i64 %8242, 8589934584
  %8257 = shl nuw nsw i64 %8256, 2
  %8258 = getelementptr i8, i8* %8239, i64 %8257
  %8259 = getelementptr i16, i16* %8224, i64 %8256
  %8260 = trunc i64 %8256 to i32
  br label %8261

8261:                                             ; preds = %8261, %8255
  %8262 = phi i64 [ 0, %8255 ], [ %8300, %8261 ]
  %8263 = shl i64 %8262, 2
  %8264 = getelementptr i16, i16* %8224, i64 %8262
  %8265 = getelementptr inbounds i8, i8* %8239, i64 %8263
  %8266 = bitcast i8* %8265 to <32 x i8>*
  %8267 = load <32 x i8>, <32 x i8>* %8266, align 1
  %8268 = shufflevector <32 x i8> %8267, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %8269 = shufflevector <32 x i8> %8267, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %8270 = shufflevector <32 x i8> %8267, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %8271 = shufflevector <32 x i8> %8267, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %8272 = icmp eq <8 x i8> %8271, zeroinitializer
  %8273 = uitofp <8 x i8> %8271 to <8 x float>
  %8274 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %8273
  %8275 = select <8 x i1> %8272, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8274
  %8276 = uitofp <8 x i8> %8268 to <8 x float>
  %8277 = fmul <8 x float> %8275, %8276
  %8278 = fptoui <8 x float> %8277 to <8 x i8>
  %8279 = uitofp <8 x i8> %8269 to <8 x float>
  %8280 = fmul <8 x float> %8275, %8279
  %8281 = fptoui <8 x float> %8280 to <8 x i8>
  %8282 = uitofp <8 x i8> %8270 to <8 x float>
  %8283 = fmul <8 x float> %8275, %8282
  %8284 = fptoui <8 x float> %8283 to <8 x i8>
  %8285 = and <8 x i8> %8278, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %8286 = zext <8 x i8> %8285 to <8 x i16>
  %8287 = shl nuw <8 x i16> %8286, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %8288 = and <8 x i8> %8281, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %8289 = zext <8 x i8> %8288 to <8 x i16>
  %8290 = shl nuw nsw <8 x i16> %8289, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %8291 = lshr <8 x i8> %8284, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %8292 = and <8 x i8> %8291, <i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62, i8 62>
  %8293 = zext <8 x i8> %8292 to <8 x i16>
  %8294 = lshr <8 x i8> %8271, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %8295 = zext <8 x i8> %8294 to <8 x i16>
  %8296 = or <8 x i16> %8287, %8295
  %8297 = or <8 x i16> %8296, %8290
  %8298 = or <8 x i16> %8297, %8293
  %8299 = bitcast i16* %8264 to <8 x i16>*
  store <8 x i16> %8298, <8 x i16>* %8299, align 2, !alias.scope !714, !noalias !717
  %8300 = add i64 %8262, 8
  %8301 = icmp eq i64 %8300, %8256
  br i1 %8301, label %8302, label %8261, !llvm.loop !719

8302:                                             ; preds = %8261
  %8303 = icmp eq i64 %8242, %8256
  br i1 %8303, label %8352, label %8304

8304:                                             ; preds = %8302, %8244, %8238
  %8305 = phi i8* [ %8239, %8244 ], [ %8239, %8238 ], [ %8258, %8302 ]
  %8306 = phi i16* [ %8224, %8244 ], [ %8224, %8238 ], [ %8259, %8302 ]
  %8307 = phi i32 [ 0, %8244 ], [ 0, %8238 ], [ %8260, %8302 ]
  br label %8308

8308:                                             ; preds = %8304, %8318
  %8309 = phi i8* [ %8348, %8318 ], [ %8305, %8304 ]
  %8310 = phi i16* [ %8349, %8318 ], [ %8306, %8304 ]
  %8311 = phi i32 [ %8350, %8318 ], [ %8307, %8304 ]
  %8312 = getelementptr inbounds i8, i8* %8309, i64 3
  %8313 = load i8, i8* %8312, align 1
  %8314 = icmp eq i8 %8313, 0
  br i1 %8314, label %8318, label %8315

8315:                                             ; preds = %8308
  %8316 = uitofp i8 %8313 to float
  %8317 = fdiv float 2.550000e+02, %8316
  br label %8318

8318:                                             ; preds = %8315, %8308
  %8319 = phi float [ %8317, %8315 ], [ 1.000000e+00, %8308 ]
  %8320 = load i8, i8* %8309, align 1
  %8321 = uitofp i8 %8320 to float
  %8322 = fmul float %8319, %8321
  %8323 = fptoui float %8322 to i8
  %8324 = getelementptr inbounds i8, i8* %8309, i64 1
  %8325 = load i8, i8* %8324, align 1
  %8326 = uitofp i8 %8325 to float
  %8327 = fmul float %8319, %8326
  %8328 = fptoui float %8327 to i8
  %8329 = getelementptr inbounds i8, i8* %8309, i64 2
  %8330 = load i8, i8* %8329, align 1
  %8331 = uitofp i8 %8330 to float
  %8332 = fmul float %8319, %8331
  %8333 = fptoui float %8332 to i8
  %8334 = and i8 %8323, -8
  %8335 = zext i8 %8334 to i16
  %8336 = shl nuw i16 %8335, 8
  %8337 = and i8 %8328, -8
  %8338 = zext i8 %8337 to i16
  %8339 = shl nuw nsw i16 %8338, 3
  %8340 = lshr i8 %8333, 2
  %8341 = and i8 %8340, 62
  %8342 = zext i8 %8341 to i16
  %8343 = lshr i8 %8313, 7
  %8344 = zext i8 %8343 to i16
  %8345 = or i16 %8336, %8344
  %8346 = or i16 %8345, %8339
  %8347 = or i16 %8346, %8342
  store i16 %8347, i16* %8310, align 2
  %8348 = getelementptr inbounds i8, i8* %8309, i64 4
  %8349 = getelementptr inbounds i16, i16* %8310, i64 1
  %8350 = add nuw i32 %8311, 1
  %8351 = icmp eq i32 %8350, %8236
  br i1 %8351, label %8352, label %8308, !llvm.loop !720

8352:                                             ; preds = %8318, %8302
  %8353 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8161, align 8
  br label %8354

8354:                                             ; preds = %8352, %8220
  %8355 = phi %"class.blink::IntRect"* [ %8353, %8352 ], [ %8234, %8220 ]
  %8356 = getelementptr inbounds i16, i16* %8225, i64 %8154
  %8357 = getelementptr inbounds i16, i16* %8224, i64 %8158
  %8358 = add nuw nsw i32 %8223, 1
  %8359 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8355, i64 0, i32 1, i32 1
  %8360 = load i32, i32* %8359, align 4
  %8361 = icmp slt i32 %8358, %8360
  %8362 = add i64 %8221, 1
  br i1 %8361, label %8220, label %8205

8363:                                             ; preds = %8207, %8187
  %8364 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8364, align 4
  br label %13459

8365:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %8366
    i32 1, label %8551
    i32 2, label %8758
  ]

8366:                                             ; preds = %8365
  %8367 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8368 = load i32, i32* %8367, align 8
  %8369 = sdiv i32 %8368, 2
  %8370 = sext i32 %8369 to i64
  %8371 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8372 = load i32, i32* %8371, align 8
  %8373 = sdiv i32 %8372, 2
  %8374 = sext i32 %8373 to i64
  %8375 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8376 = load i8*, i8** %8375, align 8
  %8377 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8378 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8377, align 8
  %8379 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8378, i64 0, i32 0, i32 1
  %8380 = load i32, i32* %8379, align 4
  %8381 = mul nsw i32 %8380, %8368
  %8382 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8383 = load i32, i32* %8382, align 4
  %8384 = add nsw i32 %8381, %8383
  %8385 = sext i32 %8384 to i64
  %8386 = getelementptr inbounds i8, i8* %8376, i64 %8385
  %8387 = bitcast i8* %8386 to i16*
  %8388 = icmp slt i32 %8372, 0
  %8389 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8390 = load i32, i32* %8389, align 8
  %8391 = icmp sgt i32 %8390, 1
  %8392 = and i1 %8388, %8391
  br i1 %8392, label %8393, label %8403

8393:                                             ; preds = %8366
  %8394 = add nsw i32 %8390, -1
  %8395 = sext i32 %8394 to i64
  %8396 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8397 = load i32, i32* %8396, align 4
  %8398 = sext i32 %8397 to i64
  %8399 = mul nsw i64 %8370, %8395
  %8400 = mul i64 %8399, %8398
  %8401 = sub i64 0, %8400
  %8402 = getelementptr inbounds i16, i16* %8387, i64 %8401
  br label %8405

8403:                                             ; preds = %8366
  %8404 = icmp sgt i32 %8390, 0
  br i1 %8404, label %8405, label %8549

8405:                                             ; preds = %8403, %8393
  %8406 = phi i16* [ %8402, %8393 ], [ %8387, %8403 ]
  %8407 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8408 = bitcast i8** %8407 to i16**
  %8409 = load i16*, i16** %8408, align 8
  %8410 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8411 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8412

8412:                                             ; preds = %8423, %8405
  %8413 = phi i32 [ %8390, %8405 ], [ %8424, %8423 ]
  %8414 = phi %"class.blink::IntRect"* [ %8378, %8405 ], [ %8425, %8423 ]
  %8415 = phi i32 [ 0, %8405 ], [ %8434, %8423 ]
  %8416 = phi i16* [ %8409, %8405 ], [ %8427, %8423 ]
  %8417 = phi i16* [ %8406, %8405 ], [ %8433, %8423 ]
  %8418 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8414, i64 0, i32 1, i32 1
  %8419 = load i32, i32* %8418, align 4
  %8420 = icmp sgt i32 %8419, 0
  br i1 %8420, label %8436, label %8423

8421:                                             ; preds = %8540
  %8422 = load i32, i32* %8389, align 8
  br label %8423

8423:                                             ; preds = %8421, %8412
  %8424 = phi i32 [ %8413, %8412 ], [ %8422, %8421 ]
  %8425 = phi %"class.blink::IntRect"* [ %8414, %8412 ], [ %8541, %8421 ]
  %8426 = phi i16* [ %8417, %8412 ], [ %8542, %8421 ]
  %8427 = phi i16* [ %8416, %8412 ], [ %8543, %8421 ]
  %8428 = phi i32 [ %8419, %8412 ], [ %8546, %8421 ]
  %8429 = load i32, i32* %8411, align 4
  %8430 = sub nsw i32 %8429, %8428
  %8431 = sext i32 %8430 to i64
  %8432 = mul nsw i64 %8431, %8370
  %8433 = getelementptr inbounds i16, i16* %8426, i64 %8432
  %8434 = add nuw nsw i32 %8415, 1
  %8435 = icmp slt i32 %8434, %8424
  br i1 %8435, label %8412, label %8549

8436:                                             ; preds = %8412, %8540
  %8437 = phi i64 [ %8548, %8540 ], [ 0, %8412 ]
  %8438 = phi %"class.blink::IntRect"* [ %8541, %8540 ], [ %8414, %8412 ]
  %8439 = phi i32 [ %8544, %8540 ], [ 0, %8412 ]
  %8440 = phi i16* [ %8543, %8540 ], [ %8416, %8412 ]
  %8441 = phi i16* [ %8542, %8540 ], [ %8417, %8412 ]
  %8442 = mul i64 %8437, %8374
  %8443 = getelementptr i16, i16* %8416, i64 %8442
  %8444 = bitcast i16* %8443 to i8*
  %8445 = add i64 %8442, 1
  %8446 = getelementptr i16, i16* %8416, i64 %8445
  %8447 = load i8*, i8** %8410, align 8
  %8448 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8438, i64 0, i32 1, i32 0
  %8449 = load i32, i32* %8448, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %8441, i8* %8447, i32 %8449) #12
  %8450 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8377, align 8
  %8451 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8450, i64 0, i32 1, i32 0
  %8452 = load i32, i32* %8451, align 4
  %8453 = icmp eq i32 %8452, 0
  br i1 %8453, label %8540, label %8454

8454:                                             ; preds = %8436
  %8455 = load i8*, i8** %8410, align 8
  %8456 = add i32 %8452, -1
  %8457 = zext i32 %8456 to i64
  %8458 = add nuw nsw i64 %8457, 1
  %8459 = icmp ult i64 %8458, 8
  br i1 %8459, label %8506, label %8460

8460:                                             ; preds = %8454
  %8461 = add i32 %8452, -1
  %8462 = zext i32 %8461 to i64
  %8463 = getelementptr i16, i16* %8446, i64 %8462
  %8464 = bitcast i16* %8463 to i8*
  %8465 = getelementptr i8, i8* %8455, i64 4
  %8466 = shl nuw nsw i64 %8462, 2
  %8467 = getelementptr i8, i8* %8465, i64 %8466
  %8468 = icmp ugt i8* %8467, %8444
  %8469 = icmp ult i8* %8455, %8464
  %8470 = and i1 %8468, %8469
  br i1 %8470, label %8506, label %8471

8471:                                             ; preds = %8460
  %8472 = and i64 %8458, 8589934584
  %8473 = trunc i64 %8472 to i32
  %8474 = shl nuw nsw i64 %8472, 2
  %8475 = getelementptr i8, i8* %8455, i64 %8474
  %8476 = getelementptr i16, i16* %8440, i64 %8472
  br label %8477

8477:                                             ; preds = %8477, %8471
  %8478 = phi i64 [ 0, %8471 ], [ %8502, %8477 ]
  %8479 = shl i64 %8478, 2
  %8480 = getelementptr i8, i8* %8455, i64 %8479
  %8481 = getelementptr i16, i16* %8440, i64 %8478
  %8482 = bitcast i8* %8480 to <32 x i8>*
  %8483 = load <32 x i8>, <32 x i8>* %8482, align 1
  %8484 = shufflevector <32 x i8> %8483, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %8485 = shufflevector <32 x i8> %8483, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %8486 = shufflevector <32 x i8> %8483, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %8487 = shufflevector <32 x i8> %8483, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %8488 = and <8 x i8> %8484, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8489 = zext <8 x i8> %8488 to <8 x i16>
  %8490 = shl nuw <8 x i16> %8489, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %8491 = and <8 x i8> %8485, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8492 = zext <8 x i8> %8491 to <8 x i16>
  %8493 = shl nuw nsw <8 x i16> %8492, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %8494 = or <8 x i16> %8493, %8490
  %8495 = and <8 x i8> %8486, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8496 = zext <8 x i8> %8495 to <8 x i16>
  %8497 = or <8 x i16> %8494, %8496
  %8498 = lshr <8 x i8> %8487, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %8499 = zext <8 x i8> %8498 to <8 x i16>
  %8500 = or <8 x i16> %8497, %8499
  %8501 = bitcast i16* %8481 to <8 x i16>*
  store <8 x i16> %8500, <8 x i16>* %8501, align 2, !alias.scope !721, !noalias !724
  %8502 = add i64 %8478, 8
  %8503 = icmp eq i64 %8502, %8472
  br i1 %8503, label %8504, label %8477, !llvm.loop !726

8504:                                             ; preds = %8477
  %8505 = icmp eq i64 %8458, %8472
  br i1 %8505, label %8538, label %8506

8506:                                             ; preds = %8504, %8460, %8454
  %8507 = phi i32 [ 0, %8460 ], [ 0, %8454 ], [ %8473, %8504 ]
  %8508 = phi i8* [ %8455, %8460 ], [ %8455, %8454 ], [ %8475, %8504 ]
  %8509 = phi i16* [ %8440, %8460 ], [ %8440, %8454 ], [ %8476, %8504 ]
  br label %8510

8510:                                             ; preds = %8506, %8510
  %8511 = phi i32 [ %8536, %8510 ], [ %8507, %8506 ]
  %8512 = phi i8* [ %8534, %8510 ], [ %8508, %8506 ]
  %8513 = phi i16* [ %8535, %8510 ], [ %8509, %8506 ]
  %8514 = load i8, i8* %8512, align 1
  %8515 = and i8 %8514, -16
  %8516 = zext i8 %8515 to i16
  %8517 = shl nuw i16 %8516, 8
  %8518 = getelementptr inbounds i8, i8* %8512, i64 1
  %8519 = load i8, i8* %8518, align 1
  %8520 = and i8 %8519, -16
  %8521 = zext i8 %8520 to i16
  %8522 = shl nuw nsw i16 %8521, 4
  %8523 = or i16 %8522, %8517
  %8524 = getelementptr inbounds i8, i8* %8512, i64 2
  %8525 = load i8, i8* %8524, align 1
  %8526 = and i8 %8525, -16
  %8527 = zext i8 %8526 to i16
  %8528 = or i16 %8523, %8527
  %8529 = getelementptr inbounds i8, i8* %8512, i64 3
  %8530 = load i8, i8* %8529, align 1
  %8531 = lshr i8 %8530, 4
  %8532 = zext i8 %8531 to i16
  %8533 = or i16 %8528, %8532
  store i16 %8533, i16* %8513, align 2
  %8534 = getelementptr inbounds i8, i8* %8512, i64 4
  %8535 = getelementptr inbounds i16, i16* %8513, i64 1
  %8536 = add nuw i32 %8511, 1
  %8537 = icmp eq i32 %8536, %8452
  br i1 %8537, label %8538, label %8510, !llvm.loop !727

8538:                                             ; preds = %8510, %8504
  %8539 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8377, align 8
  br label %8540

8540:                                             ; preds = %8538, %8436
  %8541 = phi %"class.blink::IntRect"* [ %8539, %8538 ], [ %8450, %8436 ]
  %8542 = getelementptr inbounds i16, i16* %8441, i64 %8370
  %8543 = getelementptr inbounds i16, i16* %8440, i64 %8374
  %8544 = add nuw nsw i32 %8439, 1
  %8545 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8541, i64 0, i32 1, i32 1
  %8546 = load i32, i32* %8545, align 4
  %8547 = icmp slt i32 %8544, %8546
  %8548 = add i64 %8437, 1
  br i1 %8547, label %8436, label %8421

8549:                                             ; preds = %8423, %8403
  %8550 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8550, align 4
  br label %13459

8551:                                             ; preds = %8365
  %8552 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8553 = load i32, i32* %8552, align 8
  %8554 = sdiv i32 %8553, 2
  %8555 = sext i32 %8554 to i64
  %8556 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8557 = load i32, i32* %8556, align 8
  %8558 = sdiv i32 %8557, 2
  %8559 = sext i32 %8558 to i64
  %8560 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8561 = load i8*, i8** %8560, align 8
  %8562 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8563 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8562, align 8
  %8564 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8563, i64 0, i32 0, i32 1
  %8565 = load i32, i32* %8564, align 4
  %8566 = mul nsw i32 %8565, %8553
  %8567 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8568 = load i32, i32* %8567, align 4
  %8569 = add nsw i32 %8566, %8568
  %8570 = sext i32 %8569 to i64
  %8571 = getelementptr inbounds i8, i8* %8561, i64 %8570
  %8572 = bitcast i8* %8571 to i16*
  %8573 = icmp slt i32 %8557, 0
  %8574 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8575 = load i32, i32* %8574, align 8
  %8576 = icmp sgt i32 %8575, 1
  %8577 = and i1 %8573, %8576
  br i1 %8577, label %8578, label %8588

8578:                                             ; preds = %8551
  %8579 = add nsw i32 %8575, -1
  %8580 = sext i32 %8579 to i64
  %8581 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8582 = load i32, i32* %8581, align 4
  %8583 = sext i32 %8582 to i64
  %8584 = mul nsw i64 %8555, %8580
  %8585 = mul i64 %8584, %8583
  %8586 = sub i64 0, %8585
  %8587 = getelementptr inbounds i16, i16* %8572, i64 %8586
  br label %8590

8588:                                             ; preds = %8551
  %8589 = icmp sgt i32 %8575, 0
  br i1 %8589, label %8590, label %8756

8590:                                             ; preds = %8588, %8578
  %8591 = phi i16* [ %8587, %8578 ], [ %8572, %8588 ]
  %8592 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8593 = bitcast i8** %8592 to i16**
  %8594 = load i16*, i16** %8593, align 8
  %8595 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8596 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8597

8597:                                             ; preds = %8608, %8590
  %8598 = phi i32 [ %8575, %8590 ], [ %8609, %8608 ]
  %8599 = phi %"class.blink::IntRect"* [ %8563, %8590 ], [ %8610, %8608 ]
  %8600 = phi i32 [ 0, %8590 ], [ %8619, %8608 ]
  %8601 = phi i16* [ %8594, %8590 ], [ %8612, %8608 ]
  %8602 = phi i16* [ %8591, %8590 ], [ %8618, %8608 ]
  %8603 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8599, i64 0, i32 1, i32 1
  %8604 = load i32, i32* %8603, align 4
  %8605 = icmp sgt i32 %8604, 0
  br i1 %8605, label %8621, label %8608

8606:                                             ; preds = %8747
  %8607 = load i32, i32* %8574, align 8
  br label %8608

8608:                                             ; preds = %8606, %8597
  %8609 = phi i32 [ %8598, %8597 ], [ %8607, %8606 ]
  %8610 = phi %"class.blink::IntRect"* [ %8599, %8597 ], [ %8748, %8606 ]
  %8611 = phi i16* [ %8602, %8597 ], [ %8749, %8606 ]
  %8612 = phi i16* [ %8601, %8597 ], [ %8750, %8606 ]
  %8613 = phi i32 [ %8604, %8597 ], [ %8753, %8606 ]
  %8614 = load i32, i32* %8596, align 4
  %8615 = sub nsw i32 %8614, %8613
  %8616 = sext i32 %8615 to i64
  %8617 = mul nsw i64 %8616, %8555
  %8618 = getelementptr inbounds i16, i16* %8611, i64 %8617
  %8619 = add nuw nsw i32 %8600, 1
  %8620 = icmp slt i32 %8619, %8609
  br i1 %8620, label %8597, label %8756

8621:                                             ; preds = %8597, %8747
  %8622 = phi i64 [ %8755, %8747 ], [ 0, %8597 ]
  %8623 = phi %"class.blink::IntRect"* [ %8748, %8747 ], [ %8599, %8597 ]
  %8624 = phi i32 [ %8751, %8747 ], [ 0, %8597 ]
  %8625 = phi i16* [ %8750, %8747 ], [ %8601, %8597 ]
  %8626 = phi i16* [ %8749, %8747 ], [ %8602, %8597 ]
  %8627 = mul i64 %8622, %8559
  %8628 = getelementptr i16, i16* %8601, i64 %8627
  %8629 = bitcast i16* %8628 to i8*
  %8630 = add i64 %8627, 1
  %8631 = getelementptr i16, i16* %8601, i64 %8630
  %8632 = load i8*, i8** %8595, align 8
  %8633 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8623, i64 0, i32 1, i32 0
  %8634 = load i32, i32* %8633, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %8626, i8* %8632, i32 %8634) #12
  %8635 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8562, align 8
  %8636 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8635, i64 0, i32 1, i32 0
  %8637 = load i32, i32* %8636, align 4
  %8638 = icmp eq i32 %8637, 0
  br i1 %8638, label %8747, label %8639

8639:                                             ; preds = %8621
  %8640 = load i8*, i8** %8595, align 8
  %8641 = add i32 %8637, -1
  %8642 = zext i32 %8641 to i64
  %8643 = add nuw nsw i64 %8642, 1
  %8644 = icmp ult i64 %8643, 8
  br i1 %8644, label %8702, label %8645

8645:                                             ; preds = %8639
  %8646 = add i32 %8637, -1
  %8647 = zext i32 %8646 to i64
  %8648 = getelementptr i16, i16* %8631, i64 %8647
  %8649 = bitcast i16* %8648 to i8*
  %8650 = getelementptr i8, i8* %8640, i64 4
  %8651 = shl nuw nsw i64 %8647, 2
  %8652 = getelementptr i8, i8* %8650, i64 %8651
  %8653 = icmp ugt i8* %8652, %8629
  %8654 = icmp ult i8* %8640, %8649
  %8655 = and i1 %8653, %8654
  br i1 %8655, label %8702, label %8656

8656:                                             ; preds = %8645
  %8657 = and i64 %8643, 8589934584
  %8658 = shl nuw nsw i64 %8657, 2
  %8659 = getelementptr i8, i8* %8640, i64 %8658
  %8660 = getelementptr i16, i16* %8625, i64 %8657
  %8661 = trunc i64 %8657 to i32
  br label %8662

8662:                                             ; preds = %8662, %8656
  %8663 = phi i64 [ 0, %8656 ], [ %8698, %8662 ]
  %8664 = shl i64 %8663, 2
  %8665 = getelementptr i16, i16* %8625, i64 %8663
  %8666 = getelementptr inbounds i8, i8* %8640, i64 %8664
  %8667 = bitcast i8* %8666 to <32 x i8>*
  %8668 = load <32 x i8>, <32 x i8>* %8667, align 1
  %8669 = shufflevector <32 x i8> %8668, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %8670 = shufflevector <32 x i8> %8668, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %8671 = shufflevector <32 x i8> %8668, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %8672 = shufflevector <32 x i8> %8668, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %8673 = uitofp <8 x i8> %8672 to <8 x float>
  %8674 = fdiv <8 x float> %8673, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %8675 = uitofp <8 x i8> %8669 to <8 x float>
  %8676 = fmul <8 x float> %8674, %8675
  %8677 = fptoui <8 x float> %8676 to <8 x i8>
  %8678 = uitofp <8 x i8> %8670 to <8 x float>
  %8679 = fmul <8 x float> %8674, %8678
  %8680 = fptoui <8 x float> %8679 to <8 x i8>
  %8681 = uitofp <8 x i8> %8671 to <8 x float>
  %8682 = fmul <8 x float> %8674, %8681
  %8683 = fptoui <8 x float> %8682 to <8 x i8>
  %8684 = and <8 x i8> %8677, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8685 = zext <8 x i8> %8684 to <8 x i16>
  %8686 = shl nuw <8 x i16> %8685, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %8687 = and <8 x i8> %8680, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8688 = zext <8 x i8> %8687 to <8 x i16>
  %8689 = shl nuw nsw <8 x i16> %8688, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %8690 = and <8 x i8> %8683, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8691 = zext <8 x i8> %8690 to <8 x i16>
  %8692 = lshr <8 x i8> %8672, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %8693 = zext <8 x i8> %8692 to <8 x i16>
  %8694 = or <8 x i16> %8686, %8693
  %8695 = or <8 x i16> %8694, %8689
  %8696 = or <8 x i16> %8695, %8691
  %8697 = bitcast i16* %8665 to <8 x i16>*
  store <8 x i16> %8696, <8 x i16>* %8697, align 2, !alias.scope !728, !noalias !731
  %8698 = add i64 %8663, 8
  %8699 = icmp eq i64 %8698, %8657
  br i1 %8699, label %8700, label %8662, !llvm.loop !733

8700:                                             ; preds = %8662
  %8701 = icmp eq i64 %8643, %8657
  br i1 %8701, label %8745, label %8702

8702:                                             ; preds = %8700, %8645, %8639
  %8703 = phi i8* [ %8640, %8645 ], [ %8640, %8639 ], [ %8659, %8700 ]
  %8704 = phi i16* [ %8625, %8645 ], [ %8625, %8639 ], [ %8660, %8700 ]
  %8705 = phi i32 [ 0, %8645 ], [ 0, %8639 ], [ %8661, %8700 ]
  br label %8706

8706:                                             ; preds = %8702, %8706
  %8707 = phi i8* [ %8741, %8706 ], [ %8703, %8702 ]
  %8708 = phi i16* [ %8742, %8706 ], [ %8704, %8702 ]
  %8709 = phi i32 [ %8743, %8706 ], [ %8705, %8702 ]
  %8710 = getelementptr inbounds i8, i8* %8707, i64 3
  %8711 = load i8, i8* %8710, align 1
  %8712 = uitofp i8 %8711 to float
  %8713 = fdiv float %8712, 2.550000e+02
  %8714 = load i8, i8* %8707, align 1
  %8715 = uitofp i8 %8714 to float
  %8716 = fmul float %8713, %8715
  %8717 = fptoui float %8716 to i8
  %8718 = getelementptr inbounds i8, i8* %8707, i64 1
  %8719 = load i8, i8* %8718, align 1
  %8720 = uitofp i8 %8719 to float
  %8721 = fmul float %8713, %8720
  %8722 = fptoui float %8721 to i8
  %8723 = getelementptr inbounds i8, i8* %8707, i64 2
  %8724 = load i8, i8* %8723, align 1
  %8725 = uitofp i8 %8724 to float
  %8726 = fmul float %8713, %8725
  %8727 = fptoui float %8726 to i8
  %8728 = and i8 %8717, -16
  %8729 = zext i8 %8728 to i16
  %8730 = shl nuw i16 %8729, 8
  %8731 = and i8 %8722, -16
  %8732 = zext i8 %8731 to i16
  %8733 = shl nuw nsw i16 %8732, 4
  %8734 = and i8 %8727, -16
  %8735 = zext i8 %8734 to i16
  %8736 = lshr i8 %8711, 4
  %8737 = zext i8 %8736 to i16
  %8738 = or i16 %8730, %8737
  %8739 = or i16 %8738, %8733
  %8740 = or i16 %8739, %8735
  store i16 %8740, i16* %8708, align 2
  %8741 = getelementptr inbounds i8, i8* %8707, i64 4
  %8742 = getelementptr inbounds i16, i16* %8708, i64 1
  %8743 = add nuw i32 %8709, 1
  %8744 = icmp eq i32 %8743, %8637
  br i1 %8744, label %8745, label %8706, !llvm.loop !734

8745:                                             ; preds = %8706, %8700
  %8746 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8562, align 8
  br label %8747

8747:                                             ; preds = %8745, %8621
  %8748 = phi %"class.blink::IntRect"* [ %8746, %8745 ], [ %8635, %8621 ]
  %8749 = getelementptr inbounds i16, i16* %8626, i64 %8555
  %8750 = getelementptr inbounds i16, i16* %8625, i64 %8559
  %8751 = add nuw nsw i32 %8624, 1
  %8752 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8748, i64 0, i32 1, i32 1
  %8753 = load i32, i32* %8752, align 4
  %8754 = icmp slt i32 %8751, %8753
  %8755 = add i64 %8622, 1
  br i1 %8754, label %8621, label %8606

8756:                                             ; preds = %8608, %8588
  %8757 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8757, align 4
  br label %13459

8758:                                             ; preds = %8365
  %8759 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8760 = load i32, i32* %8759, align 8
  %8761 = sdiv i32 %8760, 2
  %8762 = sext i32 %8761 to i64
  %8763 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8764 = load i32, i32* %8763, align 8
  %8765 = sdiv i32 %8764, 2
  %8766 = sext i32 %8765 to i64
  %8767 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8768 = load i8*, i8** %8767, align 8
  %8769 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8770 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8769, align 8
  %8771 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8770, i64 0, i32 0, i32 1
  %8772 = load i32, i32* %8771, align 4
  %8773 = mul nsw i32 %8772, %8760
  %8774 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8775 = load i32, i32* %8774, align 4
  %8776 = add nsw i32 %8773, %8775
  %8777 = sext i32 %8776 to i64
  %8778 = getelementptr inbounds i8, i8* %8768, i64 %8777
  %8779 = bitcast i8* %8778 to i16*
  %8780 = icmp slt i32 %8764, 0
  %8781 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8782 = load i32, i32* %8781, align 8
  %8783 = icmp sgt i32 %8782, 1
  %8784 = and i1 %8780, %8783
  br i1 %8784, label %8785, label %8795

8785:                                             ; preds = %8758
  %8786 = add nsw i32 %8782, -1
  %8787 = sext i32 %8786 to i64
  %8788 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %8789 = load i32, i32* %8788, align 4
  %8790 = sext i32 %8789 to i64
  %8791 = mul nsw i64 %8762, %8787
  %8792 = mul i64 %8791, %8790
  %8793 = sub i64 0, %8792
  %8794 = getelementptr inbounds i16, i16* %8779, i64 %8793
  br label %8797

8795:                                             ; preds = %8758
  %8796 = icmp sgt i32 %8782, 0
  br i1 %8796, label %8797, label %8969

8797:                                             ; preds = %8795, %8785
  %8798 = phi i16* [ %8794, %8785 ], [ %8779, %8795 ]
  %8799 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %8800 = bitcast i8** %8799 to i16**
  %8801 = load i16*, i16** %8800, align 8
  %8802 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %8803 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %8804

8804:                                             ; preds = %8815, %8797
  %8805 = phi i32 [ %8782, %8797 ], [ %8816, %8815 ]
  %8806 = phi %"class.blink::IntRect"* [ %8770, %8797 ], [ %8817, %8815 ]
  %8807 = phi i32 [ 0, %8797 ], [ %8826, %8815 ]
  %8808 = phi i16* [ %8801, %8797 ], [ %8819, %8815 ]
  %8809 = phi i16* [ %8798, %8797 ], [ %8825, %8815 ]
  %8810 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8806, i64 0, i32 1, i32 1
  %8811 = load i32, i32* %8810, align 4
  %8812 = icmp sgt i32 %8811, 0
  br i1 %8812, label %8828, label %8815

8813:                                             ; preds = %8960
  %8814 = load i32, i32* %8781, align 8
  br label %8815

8815:                                             ; preds = %8813, %8804
  %8816 = phi i32 [ %8805, %8804 ], [ %8814, %8813 ]
  %8817 = phi %"class.blink::IntRect"* [ %8806, %8804 ], [ %8961, %8813 ]
  %8818 = phi i16* [ %8809, %8804 ], [ %8962, %8813 ]
  %8819 = phi i16* [ %8808, %8804 ], [ %8963, %8813 ]
  %8820 = phi i32 [ %8811, %8804 ], [ %8966, %8813 ]
  %8821 = load i32, i32* %8803, align 4
  %8822 = sub nsw i32 %8821, %8820
  %8823 = sext i32 %8822 to i64
  %8824 = mul nsw i64 %8823, %8762
  %8825 = getelementptr inbounds i16, i16* %8818, i64 %8824
  %8826 = add nuw nsw i32 %8807, 1
  %8827 = icmp slt i32 %8826, %8816
  br i1 %8827, label %8804, label %8969

8828:                                             ; preds = %8804, %8960
  %8829 = phi i64 [ %8968, %8960 ], [ 0, %8804 ]
  %8830 = phi %"class.blink::IntRect"* [ %8961, %8960 ], [ %8806, %8804 ]
  %8831 = phi i32 [ %8964, %8960 ], [ 0, %8804 ]
  %8832 = phi i16* [ %8963, %8960 ], [ %8808, %8804 ]
  %8833 = phi i16* [ %8962, %8960 ], [ %8809, %8804 ]
  %8834 = mul i64 %8829, %8766
  %8835 = getelementptr i16, i16* %8808, i64 %8834
  %8836 = bitcast i16* %8835 to i8*
  %8837 = add i64 %8834, 1
  %8838 = getelementptr i16, i16* %8808, i64 %8837
  %8839 = load i8*, i8** %8802, align 8
  %8840 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8830, i64 0, i32 1, i32 0
  %8841 = load i32, i32* %8840, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %8833, i8* %8839, i32 %8841) #12
  %8842 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8769, align 8
  %8843 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8842, i64 0, i32 1, i32 0
  %8844 = load i32, i32* %8843, align 4
  %8845 = icmp eq i32 %8844, 0
  br i1 %8845, label %8960, label %8846

8846:                                             ; preds = %8828
  %8847 = load i8*, i8** %8802, align 8
  %8848 = add i32 %8844, -1
  %8849 = zext i32 %8848 to i64
  %8850 = add nuw nsw i64 %8849, 1
  %8851 = icmp ult i64 %8850, 8
  br i1 %8851, label %8911, label %8852

8852:                                             ; preds = %8846
  %8853 = add i32 %8844, -1
  %8854 = zext i32 %8853 to i64
  %8855 = getelementptr i16, i16* %8838, i64 %8854
  %8856 = bitcast i16* %8855 to i8*
  %8857 = getelementptr i8, i8* %8847, i64 4
  %8858 = shl nuw nsw i64 %8854, 2
  %8859 = getelementptr i8, i8* %8857, i64 %8858
  %8860 = icmp ugt i8* %8859, %8836
  %8861 = icmp ult i8* %8847, %8856
  %8862 = and i1 %8860, %8861
  br i1 %8862, label %8911, label %8863

8863:                                             ; preds = %8852
  %8864 = and i64 %8850, 8589934584
  %8865 = shl nuw nsw i64 %8864, 2
  %8866 = getelementptr i8, i8* %8847, i64 %8865
  %8867 = getelementptr i16, i16* %8832, i64 %8864
  %8868 = trunc i64 %8864 to i32
  br label %8869

8869:                                             ; preds = %8869, %8863
  %8870 = phi i64 [ 0, %8863 ], [ %8907, %8869 ]
  %8871 = shl i64 %8870, 2
  %8872 = getelementptr i16, i16* %8832, i64 %8870
  %8873 = getelementptr inbounds i8, i8* %8847, i64 %8871
  %8874 = bitcast i8* %8873 to <32 x i8>*
  %8875 = load <32 x i8>, <32 x i8>* %8874, align 1
  %8876 = shufflevector <32 x i8> %8875, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %8877 = shufflevector <32 x i8> %8875, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %8878 = shufflevector <32 x i8> %8875, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %8879 = shufflevector <32 x i8> %8875, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %8880 = icmp eq <8 x i8> %8879, zeroinitializer
  %8881 = uitofp <8 x i8> %8879 to <8 x float>
  %8882 = fdiv <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %8881
  %8883 = select <8 x i1> %8880, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8882
  %8884 = uitofp <8 x i8> %8876 to <8 x float>
  %8885 = fmul <8 x float> %8883, %8884
  %8886 = fptoui <8 x float> %8885 to <8 x i8>
  %8887 = uitofp <8 x i8> %8877 to <8 x float>
  %8888 = fmul <8 x float> %8883, %8887
  %8889 = fptoui <8 x float> %8888 to <8 x i8>
  %8890 = uitofp <8 x i8> %8878 to <8 x float>
  %8891 = fmul <8 x float> %8883, %8890
  %8892 = fptoui <8 x float> %8891 to <8 x i8>
  %8893 = and <8 x i8> %8886, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8894 = zext <8 x i8> %8893 to <8 x i16>
  %8895 = shl nuw <8 x i16> %8894, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %8896 = and <8 x i8> %8889, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8897 = zext <8 x i8> %8896 to <8 x i16>
  %8898 = shl nuw nsw <8 x i16> %8897, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %8899 = and <8 x i8> %8892, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %8900 = zext <8 x i8> %8899 to <8 x i16>
  %8901 = lshr <8 x i8> %8879, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %8902 = zext <8 x i8> %8901 to <8 x i16>
  %8903 = or <8 x i16> %8895, %8902
  %8904 = or <8 x i16> %8903, %8898
  %8905 = or <8 x i16> %8904, %8900
  %8906 = bitcast i16* %8872 to <8 x i16>*
  store <8 x i16> %8905, <8 x i16>* %8906, align 2, !alias.scope !735, !noalias !738
  %8907 = add i64 %8870, 8
  %8908 = icmp eq i64 %8907, %8864
  br i1 %8908, label %8909, label %8869, !llvm.loop !740

8909:                                             ; preds = %8869
  %8910 = icmp eq i64 %8850, %8864
  br i1 %8910, label %8958, label %8911

8911:                                             ; preds = %8909, %8852, %8846
  %8912 = phi i8* [ %8847, %8852 ], [ %8847, %8846 ], [ %8866, %8909 ]
  %8913 = phi i16* [ %8832, %8852 ], [ %8832, %8846 ], [ %8867, %8909 ]
  %8914 = phi i32 [ 0, %8852 ], [ 0, %8846 ], [ %8868, %8909 ]
  br label %8915

8915:                                             ; preds = %8911, %8925
  %8916 = phi i8* [ %8954, %8925 ], [ %8912, %8911 ]
  %8917 = phi i16* [ %8955, %8925 ], [ %8913, %8911 ]
  %8918 = phi i32 [ %8956, %8925 ], [ %8914, %8911 ]
  %8919 = getelementptr inbounds i8, i8* %8916, i64 3
  %8920 = load i8, i8* %8919, align 1
  %8921 = icmp eq i8 %8920, 0
  br i1 %8921, label %8925, label %8922

8922:                                             ; preds = %8915
  %8923 = uitofp i8 %8920 to float
  %8924 = fdiv float 2.550000e+02, %8923
  br label %8925

8925:                                             ; preds = %8922, %8915
  %8926 = phi float [ %8924, %8922 ], [ 1.000000e+00, %8915 ]
  %8927 = load i8, i8* %8916, align 1
  %8928 = uitofp i8 %8927 to float
  %8929 = fmul float %8926, %8928
  %8930 = fptoui float %8929 to i8
  %8931 = getelementptr inbounds i8, i8* %8916, i64 1
  %8932 = load i8, i8* %8931, align 1
  %8933 = uitofp i8 %8932 to float
  %8934 = fmul float %8926, %8933
  %8935 = fptoui float %8934 to i8
  %8936 = getelementptr inbounds i8, i8* %8916, i64 2
  %8937 = load i8, i8* %8936, align 1
  %8938 = uitofp i8 %8937 to float
  %8939 = fmul float %8926, %8938
  %8940 = fptoui float %8939 to i8
  %8941 = and i8 %8930, -16
  %8942 = zext i8 %8941 to i16
  %8943 = shl nuw i16 %8942, 8
  %8944 = and i8 %8935, -16
  %8945 = zext i8 %8944 to i16
  %8946 = shl nuw nsw i16 %8945, 4
  %8947 = and i8 %8940, -16
  %8948 = zext i8 %8947 to i16
  %8949 = lshr i8 %8920, 4
  %8950 = zext i8 %8949 to i16
  %8951 = or i16 %8943, %8950
  %8952 = or i16 %8951, %8946
  %8953 = or i16 %8952, %8948
  store i16 %8953, i16* %8917, align 2
  %8954 = getelementptr inbounds i8, i8* %8916, i64 4
  %8955 = getelementptr inbounds i16, i16* %8917, i64 1
  %8956 = add nuw i32 %8918, 1
  %8957 = icmp eq i32 %8956, %8844
  br i1 %8957, label %8958, label %8915, !llvm.loop !741

8958:                                             ; preds = %8925, %8909
  %8959 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8769, align 8
  br label %8960

8960:                                             ; preds = %8958, %8828
  %8961 = phi %"class.blink::IntRect"* [ %8959, %8958 ], [ %8842, %8828 ]
  %8962 = getelementptr inbounds i16, i16* %8833, i64 %8762
  %8963 = getelementptr inbounds i16, i16* %8832, i64 %8766
  %8964 = add nuw nsw i32 %8831, 1
  %8965 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8961, i64 0, i32 1, i32 1
  %8966 = load i32, i32* %8965, align 4
  %8967 = icmp slt i32 %8964, %8966
  %8968 = add i64 %8829, 1
  br i1 %8967, label %8828, label %8813

8969:                                             ; preds = %8815, %8795
  %8970 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %8970, align 4
  br label %13459

8971:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 2, label %9223
    i32 1, label %8972
  ]

8972:                                             ; preds = %8971
  %8973 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %8974 = load i32, i32* %8973, align 8
  %8975 = sdiv i32 %8974, 2
  %8976 = sext i32 %8975 to i64
  %8977 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %8978 = load i32, i32* %8977, align 8
  %8979 = sdiv i32 %8978, 2
  %8980 = sext i32 %8979 to i64
  %8981 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %8982 = load i8*, i8** %8981, align 8
  %8983 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %8984 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8983, align 8
  %8985 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %8984, i64 0, i32 0, i32 1
  %8986 = load i32, i32* %8985, align 4
  %8987 = mul nsw i32 %8986, %8974
  %8988 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %8989 = load i32, i32* %8988, align 4
  %8990 = add nsw i32 %8987, %8989
  %8991 = sext i32 %8990 to i64
  %8992 = getelementptr inbounds i8, i8* %8982, i64 %8991
  %8993 = bitcast i8* %8992 to i16*
  %8994 = icmp slt i32 %8978, 0
  %8995 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %8996 = load i32, i32* %8995, align 8
  %8997 = icmp sgt i32 %8996, 1
  %8998 = and i1 %8994, %8997
  br i1 %8998, label %8999, label %9009

8999:                                             ; preds = %8972
  %9000 = add nsw i32 %8996, -1
  %9001 = sext i32 %9000 to i64
  %9002 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9003 = load i32, i32* %9002, align 4
  %9004 = sext i32 %9003 to i64
  %9005 = mul nsw i64 %8976, %9001
  %9006 = mul i64 %9005, %9004
  %9007 = sub i64 0, %9006
  %9008 = getelementptr inbounds i16, i16* %8993, i64 %9007
  br label %9011

9009:                                             ; preds = %8972
  %9010 = icmp sgt i32 %8996, 0
  br i1 %9010, label %9011, label %9221

9011:                                             ; preds = %9009, %8999
  %9012 = phi i16* [ %9008, %8999 ], [ %8993, %9009 ]
  %9013 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9014 = bitcast i8** %9013 to i16**
  %9015 = load i16*, i16** %9014, align 8
  %9016 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9017 = bitcast i8** %9016 to float**
  %9018 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9019

9019:                                             ; preds = %9031, %9011
  %9020 = phi i32 [ %8996, %9011 ], [ %9032, %9031 ]
  %9021 = phi %"class.blink::IntRect"* [ %8984, %9011 ], [ %9033, %9031 ]
  %9022 = phi %"class.blink::IntRect"* [ %8984, %9011 ], [ %9034, %9031 ]
  %9023 = phi i32 [ 0, %9011 ], [ %9043, %9031 ]
  %9024 = phi i16* [ %9015, %9011 ], [ %9036, %9031 ]
  %9025 = phi i16* [ %9012, %9011 ], [ %9042, %9031 ]
  %9026 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9022, i64 0, i32 1, i32 1
  %9027 = load i32, i32* %9026, align 4
  %9028 = icmp sgt i32 %9027, 0
  br i1 %9028, label %9045, label %9031

9029:                                             ; preds = %9213
  %9030 = load i32, i32* %8995, align 8
  br label %9031

9031:                                             ; preds = %9029, %9019
  %9032 = phi i32 [ %9020, %9019 ], [ %9030, %9029 ]
  %9033 = phi %"class.blink::IntRect"* [ %9021, %9019 ], [ %9214, %9029 ]
  %9034 = phi %"class.blink::IntRect"* [ %9022, %9019 ], [ %9214, %9029 ]
  %9035 = phi i16* [ %9025, %9019 ], [ %9215, %9029 ]
  %9036 = phi i16* [ %9024, %9019 ], [ %9216, %9029 ]
  %9037 = phi i32 [ %9027, %9019 ], [ %9219, %9029 ]
  %9038 = load i32, i32* %9018, align 4
  %9039 = sub nsw i32 %9038, %9037
  %9040 = sext i32 %9039 to i64
  %9041 = mul nsw i64 %9040, %8976
  %9042 = getelementptr inbounds i16, i16* %9035, i64 %9041
  %9043 = add nuw nsw i32 %9023, 1
  %9044 = icmp slt i32 %9043, %9032
  br i1 %9044, label %9019, label %9221

9045:                                             ; preds = %9019, %9213
  %9046 = phi %"class.blink::IntRect"* [ %9214, %9213 ], [ %9021, %9019 ]
  %9047 = phi %"class.blink::IntRect"* [ %9214, %9213 ], [ %9022, %9019 ]
  %9048 = phi i32 [ %9217, %9213 ], [ 0, %9019 ]
  %9049 = phi i16* [ %9216, %9213 ], [ %9024, %9019 ]
  %9050 = phi i16* [ %9215, %9213 ], [ %9025, %9019 ]
  %9051 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9047, i64 0, i32 1, i32 0
  %9052 = load i32, i32* %9051, align 4
  %9053 = icmp eq i32 %9052, 0
  br i1 %9053, label %9213, label %9054

9054:                                             ; preds = %9045
  %9055 = load float*, float** %9017, align 8
  br label %9056

9056:                                             ; preds = %9056, %9054
  %9057 = phi i32 [ %9132, %9056 ], [ 0, %9054 ]
  %9058 = phi i16* [ %9130, %9056 ], [ %9050, %9054 ]
  %9059 = phi float* [ %9131, %9056 ], [ %9055, %9054 ]
  %9060 = load i16, i16* %9058, align 2
  %9061 = zext i16 %9060 to i32
  %9062 = lshr i32 %9061, 10
  %9063 = zext i32 %9062 to i64
  %9064 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9063
  %9065 = load i16, i16* %9064, align 2
  %9066 = zext i16 %9065 to i32
  %9067 = and i32 %9061, 1023
  %9068 = add nuw nsw i32 %9067, %9066
  %9069 = zext i32 %9068 to i64
  %9070 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9069
  %9071 = load i32, i32* %9070, align 4
  %9072 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9063
  %9073 = load i32, i32* %9072, align 4
  %9074 = add i32 %9073, %9071
  %9075 = bitcast float* %9059 to i32*
  store i32 %9074, i32* %9075, align 4
  %9076 = getelementptr inbounds i16, i16* %9058, i64 1
  %9077 = load i16, i16* %9076, align 2
  %9078 = zext i16 %9077 to i32
  %9079 = lshr i32 %9078, 10
  %9080 = zext i32 %9079 to i64
  %9081 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9080
  %9082 = load i16, i16* %9081, align 2
  %9083 = zext i16 %9082 to i32
  %9084 = and i32 %9078, 1023
  %9085 = add nuw nsw i32 %9084, %9083
  %9086 = zext i32 %9085 to i64
  %9087 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9086
  %9088 = load i32, i32* %9087, align 4
  %9089 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9080
  %9090 = load i32, i32* %9089, align 4
  %9091 = add i32 %9090, %9088
  %9092 = getelementptr inbounds float, float* %9059, i64 1
  %9093 = bitcast float* %9092 to i32*
  store i32 %9091, i32* %9093, align 4
  %9094 = getelementptr inbounds i16, i16* %9058, i64 2
  %9095 = load i16, i16* %9094, align 2
  %9096 = zext i16 %9095 to i32
  %9097 = lshr i32 %9096, 10
  %9098 = zext i32 %9097 to i64
  %9099 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9098
  %9100 = load i16, i16* %9099, align 2
  %9101 = zext i16 %9100 to i32
  %9102 = and i32 %9096, 1023
  %9103 = add nuw nsw i32 %9102, %9101
  %9104 = zext i32 %9103 to i64
  %9105 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9104
  %9106 = load i32, i32* %9105, align 4
  %9107 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9098
  %9108 = load i32, i32* %9107, align 4
  %9109 = add i32 %9108, %9106
  %9110 = getelementptr inbounds float, float* %9059, i64 2
  %9111 = bitcast float* %9110 to i32*
  store i32 %9109, i32* %9111, align 4
  %9112 = getelementptr inbounds i16, i16* %9058, i64 3
  %9113 = load i16, i16* %9112, align 2
  %9114 = zext i16 %9113 to i32
  %9115 = lshr i32 %9114, 10
  %9116 = zext i32 %9115 to i64
  %9117 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9116
  %9118 = load i16, i16* %9117, align 2
  %9119 = zext i16 %9118 to i32
  %9120 = and i32 %9114, 1023
  %9121 = add nuw nsw i32 %9120, %9119
  %9122 = zext i32 %9121 to i64
  %9123 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9122
  %9124 = load i32, i32* %9123, align 4
  %9125 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9116
  %9126 = load i32, i32* %9125, align 4
  %9127 = add i32 %9126, %9124
  %9128 = getelementptr inbounds float, float* %9059, i64 3
  %9129 = bitcast float* %9128 to i32*
  store i32 %9127, i32* %9129, align 4
  %9130 = getelementptr inbounds i16, i16* %9058, i64 4
  %9131 = getelementptr inbounds float, float* %9059, i64 4
  %9132 = add nuw i32 %9057, 1
  %9133 = icmp eq i32 %9132, %9052
  br i1 %9133, label %9134, label %9056

9134:                                             ; preds = %9056
  %9135 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8983, align 8
  %9136 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9135, i64 0, i32 1, i32 0
  %9137 = load i32, i32* %9136, align 4
  %9138 = icmp eq i32 %9137, 0
  br i1 %9138, label %9213, label %9139

9139:                                             ; preds = %9134
  %9140 = load float*, float** %9017, align 8
  br label %9141

9141:                                             ; preds = %9141, %9139
  %9142 = phi float* [ %9207, %9141 ], [ %9140, %9139 ]
  %9143 = phi i32 [ %9209, %9141 ], [ 0, %9139 ]
  %9144 = phi i16* [ %9208, %9141 ], [ %9049, %9139 ]
  %9145 = getelementptr inbounds float, float* %9142, i64 3
  %9146 = load float, float* %9145, align 4
  %9147 = load float, float* %9142, align 4
  %9148 = fmul float %9146, %9147
  %9149 = bitcast float %9148 to i32
  %9150 = lshr i32 %9149, 23
  %9151 = zext i32 %9150 to i64
  %9152 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9151
  %9153 = load i16, i16* %9152, align 2
  %9154 = and i32 %9149, 8388607
  %9155 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9151
  %9156 = load i8, i8* %9155, align 1
  %9157 = zext i8 %9156 to i32
  %9158 = lshr i32 %9154, %9157
  %9159 = trunc i32 %9158 to i16
  %9160 = add i16 %9153, %9159
  store i16 %9160, i16* %9144, align 2
  %9161 = getelementptr inbounds float, float* %9142, i64 1
  %9162 = load float, float* %9161, align 4
  %9163 = fmul float %9146, %9162
  %9164 = bitcast float %9163 to i32
  %9165 = lshr i32 %9164, 23
  %9166 = zext i32 %9165 to i64
  %9167 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9166
  %9168 = load i16, i16* %9167, align 2
  %9169 = and i32 %9164, 8388607
  %9170 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9166
  %9171 = load i8, i8* %9170, align 1
  %9172 = zext i8 %9171 to i32
  %9173 = lshr i32 %9169, %9172
  %9174 = trunc i32 %9173 to i16
  %9175 = add i16 %9168, %9174
  %9176 = getelementptr inbounds i16, i16* %9144, i64 1
  store i16 %9175, i16* %9176, align 2
  %9177 = getelementptr inbounds float, float* %9142, i64 2
  %9178 = load float, float* %9177, align 4
  %9179 = fmul float %9146, %9178
  %9180 = bitcast float %9179 to i32
  %9181 = lshr i32 %9180, 23
  %9182 = zext i32 %9181 to i64
  %9183 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9182
  %9184 = load i16, i16* %9183, align 2
  %9185 = and i32 %9180, 8388607
  %9186 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9182
  %9187 = load i8, i8* %9186, align 1
  %9188 = zext i8 %9187 to i32
  %9189 = lshr i32 %9185, %9188
  %9190 = trunc i32 %9189 to i16
  %9191 = add i16 %9184, %9190
  %9192 = getelementptr inbounds i16, i16* %9144, i64 2
  store i16 %9191, i16* %9192, align 2
  %9193 = bitcast float* %9145 to i32*
  %9194 = load i32, i32* %9193, align 4
  %9195 = lshr i32 %9194, 23
  %9196 = zext i32 %9195 to i64
  %9197 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9196
  %9198 = load i16, i16* %9197, align 2
  %9199 = and i32 %9194, 8388607
  %9200 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9196
  %9201 = load i8, i8* %9200, align 1
  %9202 = zext i8 %9201 to i32
  %9203 = lshr i32 %9199, %9202
  %9204 = trunc i32 %9203 to i16
  %9205 = add i16 %9198, %9204
  %9206 = getelementptr inbounds i16, i16* %9144, i64 3
  store i16 %9205, i16* %9206, align 2
  %9207 = getelementptr inbounds float, float* %9142, i64 4
  %9208 = getelementptr inbounds i16, i16* %9144, i64 4
  %9209 = add nuw i32 %9143, 1
  %9210 = icmp eq i32 %9209, %9137
  br i1 %9210, label %9211, label %9141

9211:                                             ; preds = %9141
  %9212 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %8983, align 8
  br label %9213

9213:                                             ; preds = %9211, %9134, %9045
  %9214 = phi %"class.blink::IntRect"* [ %9212, %9211 ], [ %9135, %9134 ], [ %9046, %9045 ]
  %9215 = getelementptr inbounds i16, i16* %9050, i64 %8976
  %9216 = getelementptr inbounds i16, i16* %9049, i64 %8980
  %9217 = add nuw nsw i32 %9048, 1
  %9218 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9214, i64 0, i32 1, i32 1
  %9219 = load i32, i32* %9218, align 4
  %9220 = icmp slt i32 %9217, %9219
  br i1 %9220, label %9045, label %9029

9221:                                             ; preds = %9031, %9009
  %9222 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9222, align 4
  br label %13459

9223:                                             ; preds = %8971
  %9224 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9225 = load i32, i32* %9224, align 8
  %9226 = sdiv i32 %9225, 2
  %9227 = sext i32 %9226 to i64
  %9228 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9229 = load i32, i32* %9228, align 8
  %9230 = sdiv i32 %9229, 2
  %9231 = sext i32 %9230 to i64
  %9232 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9233 = load i8*, i8** %9232, align 8
  %9234 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9235 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9234, align 8
  %9236 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9235, i64 0, i32 0, i32 1
  %9237 = load i32, i32* %9236, align 4
  %9238 = mul nsw i32 %9237, %9225
  %9239 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9240 = load i32, i32* %9239, align 4
  %9241 = add nsw i32 %9238, %9240
  %9242 = sext i32 %9241 to i64
  %9243 = getelementptr inbounds i8, i8* %9233, i64 %9242
  %9244 = bitcast i8* %9243 to i16*
  %9245 = icmp slt i32 %9229, 0
  %9246 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9247 = load i32, i32* %9246, align 8
  %9248 = icmp sgt i32 %9247, 1
  %9249 = and i1 %9245, %9248
  br i1 %9249, label %9250, label %9260

9250:                                             ; preds = %9223
  %9251 = add nsw i32 %9247, -1
  %9252 = sext i32 %9251 to i64
  %9253 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9254 = load i32, i32* %9253, align 4
  %9255 = sext i32 %9254 to i64
  %9256 = mul nsw i64 %9227, %9252
  %9257 = mul i64 %9256, %9255
  %9258 = sub i64 0, %9257
  %9259 = getelementptr inbounds i16, i16* %9244, i64 %9258
  br label %9262

9260:                                             ; preds = %9223
  %9261 = icmp sgt i32 %9247, 0
  br i1 %9261, label %9262, label %9475

9262:                                             ; preds = %9260, %9250
  %9263 = phi i16* [ %9259, %9250 ], [ %9244, %9260 ]
  %9264 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9265 = bitcast i8** %9264 to i16**
  %9266 = load i16*, i16** %9265, align 8
  %9267 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9268 = bitcast i8** %9267 to float**
  %9269 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9270

9270:                                             ; preds = %9282, %9262
  %9271 = phi i32 [ %9247, %9262 ], [ %9283, %9282 ]
  %9272 = phi %"class.blink::IntRect"* [ %9235, %9262 ], [ %9284, %9282 ]
  %9273 = phi %"class.blink::IntRect"* [ %9235, %9262 ], [ %9285, %9282 ]
  %9274 = phi i32 [ 0, %9262 ], [ %9294, %9282 ]
  %9275 = phi i16* [ %9266, %9262 ], [ %9287, %9282 ]
  %9276 = phi i16* [ %9263, %9262 ], [ %9293, %9282 ]
  %9277 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9273, i64 0, i32 1, i32 1
  %9278 = load i32, i32* %9277, align 4
  %9279 = icmp sgt i32 %9278, 0
  br i1 %9279, label %9296, label %9282

9280:                                             ; preds = %9467
  %9281 = load i32, i32* %9246, align 8
  br label %9282

9282:                                             ; preds = %9280, %9270
  %9283 = phi i32 [ %9271, %9270 ], [ %9281, %9280 ]
  %9284 = phi %"class.blink::IntRect"* [ %9272, %9270 ], [ %9468, %9280 ]
  %9285 = phi %"class.blink::IntRect"* [ %9273, %9270 ], [ %9468, %9280 ]
  %9286 = phi i16* [ %9276, %9270 ], [ %9469, %9280 ]
  %9287 = phi i16* [ %9275, %9270 ], [ %9470, %9280 ]
  %9288 = phi i32 [ %9278, %9270 ], [ %9473, %9280 ]
  %9289 = load i32, i32* %9269, align 4
  %9290 = sub nsw i32 %9289, %9288
  %9291 = sext i32 %9290 to i64
  %9292 = mul nsw i64 %9291, %9227
  %9293 = getelementptr inbounds i16, i16* %9286, i64 %9292
  %9294 = add nuw nsw i32 %9274, 1
  %9295 = icmp slt i32 %9294, %9283
  br i1 %9295, label %9270, label %9475

9296:                                             ; preds = %9270, %9467
  %9297 = phi %"class.blink::IntRect"* [ %9468, %9467 ], [ %9272, %9270 ]
  %9298 = phi %"class.blink::IntRect"* [ %9468, %9467 ], [ %9273, %9270 ]
  %9299 = phi i32 [ %9471, %9467 ], [ 0, %9270 ]
  %9300 = phi i16* [ %9470, %9467 ], [ %9275, %9270 ]
  %9301 = phi i16* [ %9469, %9467 ], [ %9276, %9270 ]
  %9302 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9298, i64 0, i32 1, i32 0
  %9303 = load i32, i32* %9302, align 4
  %9304 = icmp eq i32 %9303, 0
  br i1 %9304, label %9467, label %9305

9305:                                             ; preds = %9296
  %9306 = load float*, float** %9268, align 8
  br label %9307

9307:                                             ; preds = %9307, %9305
  %9308 = phi i32 [ %9383, %9307 ], [ 0, %9305 ]
  %9309 = phi i16* [ %9381, %9307 ], [ %9301, %9305 ]
  %9310 = phi float* [ %9382, %9307 ], [ %9306, %9305 ]
  %9311 = load i16, i16* %9309, align 2
  %9312 = zext i16 %9311 to i32
  %9313 = lshr i32 %9312, 10
  %9314 = zext i32 %9313 to i64
  %9315 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9314
  %9316 = load i16, i16* %9315, align 2
  %9317 = zext i16 %9316 to i32
  %9318 = and i32 %9312, 1023
  %9319 = add nuw nsw i32 %9318, %9317
  %9320 = zext i32 %9319 to i64
  %9321 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9320
  %9322 = load i32, i32* %9321, align 4
  %9323 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9314
  %9324 = load i32, i32* %9323, align 4
  %9325 = add i32 %9324, %9322
  %9326 = bitcast float* %9310 to i32*
  store i32 %9325, i32* %9326, align 4
  %9327 = getelementptr inbounds i16, i16* %9309, i64 1
  %9328 = load i16, i16* %9327, align 2
  %9329 = zext i16 %9328 to i32
  %9330 = lshr i32 %9329, 10
  %9331 = zext i32 %9330 to i64
  %9332 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9331
  %9333 = load i16, i16* %9332, align 2
  %9334 = zext i16 %9333 to i32
  %9335 = and i32 %9329, 1023
  %9336 = add nuw nsw i32 %9335, %9334
  %9337 = zext i32 %9336 to i64
  %9338 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9337
  %9339 = load i32, i32* %9338, align 4
  %9340 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9331
  %9341 = load i32, i32* %9340, align 4
  %9342 = add i32 %9341, %9339
  %9343 = getelementptr inbounds float, float* %9310, i64 1
  %9344 = bitcast float* %9343 to i32*
  store i32 %9342, i32* %9344, align 4
  %9345 = getelementptr inbounds i16, i16* %9309, i64 2
  %9346 = load i16, i16* %9345, align 2
  %9347 = zext i16 %9346 to i32
  %9348 = lshr i32 %9347, 10
  %9349 = zext i32 %9348 to i64
  %9350 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9349
  %9351 = load i16, i16* %9350, align 2
  %9352 = zext i16 %9351 to i32
  %9353 = and i32 %9347, 1023
  %9354 = add nuw nsw i32 %9353, %9352
  %9355 = zext i32 %9354 to i64
  %9356 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9355
  %9357 = load i32, i32* %9356, align 4
  %9358 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9349
  %9359 = load i32, i32* %9358, align 4
  %9360 = add i32 %9359, %9357
  %9361 = getelementptr inbounds float, float* %9310, i64 2
  %9362 = bitcast float* %9361 to i32*
  store i32 %9360, i32* %9362, align 4
  %9363 = getelementptr inbounds i16, i16* %9309, i64 3
  %9364 = load i16, i16* %9363, align 2
  %9365 = zext i16 %9364 to i32
  %9366 = lshr i32 %9365, 10
  %9367 = zext i32 %9366 to i64
  %9368 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9367
  %9369 = load i16, i16* %9368, align 2
  %9370 = zext i16 %9369 to i32
  %9371 = and i32 %9365, 1023
  %9372 = add nuw nsw i32 %9371, %9370
  %9373 = zext i32 %9372 to i64
  %9374 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9373
  %9375 = load i32, i32* %9374, align 4
  %9376 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9367
  %9377 = load i32, i32* %9376, align 4
  %9378 = add i32 %9377, %9375
  %9379 = getelementptr inbounds float, float* %9310, i64 3
  %9380 = bitcast float* %9379 to i32*
  store i32 %9378, i32* %9380, align 4
  %9381 = getelementptr inbounds i16, i16* %9309, i64 4
  %9382 = getelementptr inbounds float, float* %9310, i64 4
  %9383 = add nuw i32 %9308, 1
  %9384 = icmp eq i32 %9383, %9303
  br i1 %9384, label %9385, label %9307

9385:                                             ; preds = %9307
  %9386 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9234, align 8
  %9387 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9386, i64 0, i32 1, i32 0
  %9388 = load i32, i32* %9387, align 4
  %9389 = icmp eq i32 %9388, 0
  br i1 %9389, label %9467, label %9390

9390:                                             ; preds = %9385
  %9391 = load float*, float** %9268, align 8
  br label %9392

9392:                                             ; preds = %9392, %9390
  %9393 = phi i32 [ %9463, %9392 ], [ 0, %9390 ]
  %9394 = phi float* [ %9461, %9392 ], [ %9391, %9390 ]
  %9395 = phi i16* [ %9462, %9392 ], [ %9300, %9390 ]
  %9396 = getelementptr inbounds float, float* %9394, i64 3
  %9397 = load float, float* %9396, align 4
  %9398 = fcmp une float %9397, 0.000000e+00
  %9399 = fdiv float 1.000000e+00, %9397
  %9400 = select i1 %9398, float %9399, float 1.000000e+00
  %9401 = load float, float* %9394, align 4
  %9402 = fmul float %9401, %9400
  %9403 = bitcast float %9402 to i32
  %9404 = lshr i32 %9403, 23
  %9405 = zext i32 %9404 to i64
  %9406 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9405
  %9407 = load i16, i16* %9406, align 2
  %9408 = and i32 %9403, 8388607
  %9409 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9405
  %9410 = load i8, i8* %9409, align 1
  %9411 = zext i8 %9410 to i32
  %9412 = lshr i32 %9408, %9411
  %9413 = trunc i32 %9412 to i16
  %9414 = add i16 %9407, %9413
  store i16 %9414, i16* %9395, align 2
  %9415 = getelementptr inbounds float, float* %9394, i64 1
  %9416 = load float, float* %9415, align 4
  %9417 = fmul float %9400, %9416
  %9418 = bitcast float %9417 to i32
  %9419 = lshr i32 %9418, 23
  %9420 = zext i32 %9419 to i64
  %9421 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9420
  %9422 = load i16, i16* %9421, align 2
  %9423 = and i32 %9418, 8388607
  %9424 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9420
  %9425 = load i8, i8* %9424, align 1
  %9426 = zext i8 %9425 to i32
  %9427 = lshr i32 %9423, %9426
  %9428 = trunc i32 %9427 to i16
  %9429 = add i16 %9422, %9428
  %9430 = getelementptr inbounds i16, i16* %9395, i64 1
  store i16 %9429, i16* %9430, align 2
  %9431 = getelementptr inbounds float, float* %9394, i64 2
  %9432 = load float, float* %9431, align 4
  %9433 = fmul float %9400, %9432
  %9434 = bitcast float %9433 to i32
  %9435 = lshr i32 %9434, 23
  %9436 = zext i32 %9435 to i64
  %9437 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9436
  %9438 = load i16, i16* %9437, align 2
  %9439 = and i32 %9434, 8388607
  %9440 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9436
  %9441 = load i8, i8* %9440, align 1
  %9442 = zext i8 %9441 to i32
  %9443 = lshr i32 %9439, %9442
  %9444 = trunc i32 %9443 to i16
  %9445 = add i16 %9438, %9444
  %9446 = getelementptr inbounds i16, i16* %9395, i64 2
  store i16 %9445, i16* %9446, align 2
  %9447 = bitcast float* %9396 to i32*
  %9448 = load i32, i32* %9447, align 4
  %9449 = lshr i32 %9448, 23
  %9450 = zext i32 %9449 to i64
  %9451 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %9450
  %9452 = load i16, i16* %9451, align 2
  %9453 = and i32 %9448, 8388607
  %9454 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %9450
  %9455 = load i8, i8* %9454, align 1
  %9456 = zext i8 %9455 to i32
  %9457 = lshr i32 %9453, %9456
  %9458 = trunc i32 %9457 to i16
  %9459 = add i16 %9452, %9458
  %9460 = getelementptr inbounds i16, i16* %9395, i64 3
  store i16 %9459, i16* %9460, align 2
  %9461 = getelementptr inbounds float, float* %9394, i64 4
  %9462 = getelementptr inbounds i16, i16* %9395, i64 4
  %9463 = add nuw i32 %9393, 1
  %9464 = icmp eq i32 %9463, %9388
  br i1 %9464, label %9465, label %9392

9465:                                             ; preds = %9392
  %9466 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9234, align 8
  br label %9467

9467:                                             ; preds = %9465, %9385, %9296
  %9468 = phi %"class.blink::IntRect"* [ %9466, %9465 ], [ %9386, %9385 ], [ %9297, %9296 ]
  %9469 = getelementptr inbounds i16, i16* %9301, i64 %9227
  %9470 = getelementptr inbounds i16, i16* %9300, i64 %9231
  %9471 = add nuw nsw i32 %9299, 1
  %9472 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9468, i64 0, i32 1, i32 1
  %9473 = load i32, i32* %9472, align 4
  %9474 = icmp slt i32 %9471, %9473
  br i1 %9474, label %9296, label %9280

9475:                                             ; preds = %9282, %9260
  %9476 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9476, align 4
  br label %13459

9477:                                             ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %9478
    i32 1, label %9648
    i32 2, label %9896
  ]

9478:                                             ; preds = %9477
  %9479 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9480 = load i32, i32* %9479, align 8
  %9481 = sdiv i32 %9480, 2
  %9482 = sext i32 %9481 to i64
  %9483 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9484 = load i32, i32* %9483, align 8
  %9485 = sdiv i32 %9484, 4
  %9486 = sext i32 %9485 to i64
  %9487 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9488 = load i8*, i8** %9487, align 8
  %9489 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9490 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9489, align 8
  %9491 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9490, i64 0, i32 0, i32 1
  %9492 = load i32, i32* %9491, align 4
  %9493 = mul nsw i32 %9492, %9480
  %9494 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9495 = load i32, i32* %9494, align 4
  %9496 = add nsw i32 %9493, %9495
  %9497 = sext i32 %9496 to i64
  %9498 = getelementptr inbounds i8, i8* %9488, i64 %9497
  %9499 = bitcast i8* %9498 to i16*
  %9500 = icmp slt i32 %9484, 0
  %9501 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9502 = load i32, i32* %9501, align 8
  %9503 = icmp sgt i32 %9502, 1
  %9504 = and i1 %9500, %9503
  br i1 %9504, label %9505, label %9515

9505:                                             ; preds = %9478
  %9506 = add nsw i32 %9502, -1
  %9507 = sext i32 %9506 to i64
  %9508 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9509 = load i32, i32* %9508, align 4
  %9510 = sext i32 %9509 to i64
  %9511 = mul nsw i64 %9482, %9507
  %9512 = mul i64 %9511, %9510
  %9513 = sub i64 0, %9512
  %9514 = getelementptr inbounds i16, i16* %9499, i64 %9513
  br label %9517

9515:                                             ; preds = %9478
  %9516 = icmp sgt i32 %9502, 0
  br i1 %9516, label %9517, label %9646

9517:                                             ; preds = %9515, %9505
  %9518 = phi i16* [ %9514, %9505 ], [ %9499, %9515 ]
  %9519 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9520 = bitcast i8** %9519 to float**
  %9521 = load float*, float** %9520, align 8
  %9522 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9523

9523:                                             ; preds = %9535, %9517
  %9524 = phi i32 [ %9502, %9517 ], [ %9536, %9535 ]
  %9525 = phi %"class.blink::IntRect"* [ %9490, %9517 ], [ %9537, %9535 ]
  %9526 = phi %"class.blink::IntRect"* [ %9490, %9517 ], [ %9538, %9535 ]
  %9527 = phi i32 [ 0, %9517 ], [ %9547, %9535 ]
  %9528 = phi float* [ %9521, %9517 ], [ %9540, %9535 ]
  %9529 = phi i16* [ %9518, %9517 ], [ %9546, %9535 ]
  %9530 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9526, i64 0, i32 1, i32 1
  %9531 = load i32, i32* %9530, align 4
  %9532 = icmp sgt i32 %9531, 0
  br i1 %9532, label %9549, label %9535

9533:                                             ; preds = %9638
  %9534 = load i32, i32* %9501, align 8
  br label %9535

9535:                                             ; preds = %9533, %9523
  %9536 = phi i32 [ %9524, %9523 ], [ %9534, %9533 ]
  %9537 = phi %"class.blink::IntRect"* [ %9525, %9523 ], [ %9639, %9533 ]
  %9538 = phi %"class.blink::IntRect"* [ %9526, %9523 ], [ %9639, %9533 ]
  %9539 = phi i16* [ %9529, %9523 ], [ %9640, %9533 ]
  %9540 = phi float* [ %9528, %9523 ], [ %9641, %9533 ]
  %9541 = phi i32 [ %9531, %9523 ], [ %9644, %9533 ]
  %9542 = load i32, i32* %9522, align 4
  %9543 = sub nsw i32 %9542, %9541
  %9544 = sext i32 %9543 to i64
  %9545 = mul nsw i64 %9544, %9482
  %9546 = getelementptr inbounds i16, i16* %9539, i64 %9545
  %9547 = add nuw nsw i32 %9527, 1
  %9548 = icmp slt i32 %9547, %9536
  br i1 %9548, label %9523, label %9646

9549:                                             ; preds = %9523, %9638
  %9550 = phi %"class.blink::IntRect"* [ %9639, %9638 ], [ %9525, %9523 ]
  %9551 = phi %"class.blink::IntRect"* [ %9639, %9638 ], [ %9526, %9523 ]
  %9552 = phi i32 [ %9642, %9638 ], [ 0, %9523 ]
  %9553 = phi float* [ %9641, %9638 ], [ %9528, %9523 ]
  %9554 = phi i16* [ %9640, %9638 ], [ %9529, %9523 ]
  %9555 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9551, i64 0, i32 1, i32 0
  %9556 = load i32, i32* %9555, align 4
  %9557 = icmp eq i32 %9556, 0
  br i1 %9557, label %9638, label %9558

9558:                                             ; preds = %9549, %9558
  %9559 = phi i32 [ %9634, %9558 ], [ 0, %9549 ]
  %9560 = phi i16* [ %9632, %9558 ], [ %9554, %9549 ]
  %9561 = phi float* [ %9633, %9558 ], [ %9553, %9549 ]
  %9562 = load i16, i16* %9560, align 2
  %9563 = zext i16 %9562 to i32
  %9564 = lshr i32 %9563, 10
  %9565 = zext i32 %9564 to i64
  %9566 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9565
  %9567 = load i16, i16* %9566, align 2
  %9568 = zext i16 %9567 to i32
  %9569 = and i32 %9563, 1023
  %9570 = add nuw nsw i32 %9569, %9568
  %9571 = zext i32 %9570 to i64
  %9572 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9571
  %9573 = load i32, i32* %9572, align 4
  %9574 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9565
  %9575 = load i32, i32* %9574, align 4
  %9576 = add i32 %9575, %9573
  %9577 = bitcast float* %9561 to i32*
  store i32 %9576, i32* %9577, align 4
  %9578 = getelementptr inbounds i16, i16* %9560, i64 1
  %9579 = load i16, i16* %9578, align 2
  %9580 = zext i16 %9579 to i32
  %9581 = lshr i32 %9580, 10
  %9582 = zext i32 %9581 to i64
  %9583 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9582
  %9584 = load i16, i16* %9583, align 2
  %9585 = zext i16 %9584 to i32
  %9586 = and i32 %9580, 1023
  %9587 = add nuw nsw i32 %9586, %9585
  %9588 = zext i32 %9587 to i64
  %9589 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9588
  %9590 = load i32, i32* %9589, align 4
  %9591 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9582
  %9592 = load i32, i32* %9591, align 4
  %9593 = add i32 %9592, %9590
  %9594 = getelementptr inbounds float, float* %9561, i64 1
  %9595 = bitcast float* %9594 to i32*
  store i32 %9593, i32* %9595, align 4
  %9596 = getelementptr inbounds i16, i16* %9560, i64 2
  %9597 = load i16, i16* %9596, align 2
  %9598 = zext i16 %9597 to i32
  %9599 = lshr i32 %9598, 10
  %9600 = zext i32 %9599 to i64
  %9601 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9600
  %9602 = load i16, i16* %9601, align 2
  %9603 = zext i16 %9602 to i32
  %9604 = and i32 %9598, 1023
  %9605 = add nuw nsw i32 %9604, %9603
  %9606 = zext i32 %9605 to i64
  %9607 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9606
  %9608 = load i32, i32* %9607, align 4
  %9609 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9600
  %9610 = load i32, i32* %9609, align 4
  %9611 = add i32 %9610, %9608
  %9612 = getelementptr inbounds float, float* %9561, i64 2
  %9613 = bitcast float* %9612 to i32*
  store i32 %9611, i32* %9613, align 4
  %9614 = getelementptr inbounds i16, i16* %9560, i64 3
  %9615 = load i16, i16* %9614, align 2
  %9616 = zext i16 %9615 to i32
  %9617 = lshr i32 %9616, 10
  %9618 = zext i32 %9617 to i64
  %9619 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9618
  %9620 = load i16, i16* %9619, align 2
  %9621 = zext i16 %9620 to i32
  %9622 = and i32 %9616, 1023
  %9623 = add nuw nsw i32 %9622, %9621
  %9624 = zext i32 %9623 to i64
  %9625 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9624
  %9626 = load i32, i32* %9625, align 4
  %9627 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9618
  %9628 = load i32, i32* %9627, align 4
  %9629 = add i32 %9628, %9626
  %9630 = getelementptr inbounds float, float* %9561, i64 3
  %9631 = bitcast float* %9630 to i32*
  store i32 %9629, i32* %9631, align 4
  %9632 = getelementptr inbounds i16, i16* %9560, i64 4
  %9633 = getelementptr inbounds float, float* %9561, i64 4
  %9634 = add nuw i32 %9559, 1
  %9635 = icmp eq i32 %9634, %9556
  br i1 %9635, label %9636, label %9558

9636:                                             ; preds = %9558
  %9637 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9489, align 8
  br label %9638

9638:                                             ; preds = %9636, %9549
  %9639 = phi %"class.blink::IntRect"* [ %9637, %9636 ], [ %9550, %9549 ]
  %9640 = getelementptr inbounds i16, i16* %9554, i64 %9482
  %9641 = getelementptr inbounds float, float* %9553, i64 %9486
  %9642 = add nuw nsw i32 %9552, 1
  %9643 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9639, i64 0, i32 1, i32 1
  %9644 = load i32, i32* %9643, align 4
  %9645 = icmp slt i32 %9642, %9644
  br i1 %9645, label %9549, label %9533

9646:                                             ; preds = %9535, %9515
  %9647 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9647, align 4
  br label %13459

9648:                                             ; preds = %9477
  %9649 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9650 = load i32, i32* %9649, align 8
  %9651 = sdiv i32 %9650, 2
  %9652 = sext i32 %9651 to i64
  %9653 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9654 = load i32, i32* %9653, align 8
  %9655 = sdiv i32 %9654, 4
  %9656 = sext i32 %9655 to i64
  %9657 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9658 = load i8*, i8** %9657, align 8
  %9659 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9660 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9659, align 8
  %9661 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9660, i64 0, i32 0, i32 1
  %9662 = load i32, i32* %9661, align 4
  %9663 = mul nsw i32 %9662, %9650
  %9664 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9665 = load i32, i32* %9664, align 4
  %9666 = add nsw i32 %9663, %9665
  %9667 = sext i32 %9666 to i64
  %9668 = getelementptr inbounds i8, i8* %9658, i64 %9667
  %9669 = bitcast i8* %9668 to i16*
  %9670 = icmp slt i32 %9654, 0
  %9671 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9672 = load i32, i32* %9671, align 8
  %9673 = icmp sgt i32 %9672, 1
  %9674 = and i1 %9670, %9673
  br i1 %9674, label %9675, label %9685

9675:                                             ; preds = %9648
  %9676 = add nsw i32 %9672, -1
  %9677 = sext i32 %9676 to i64
  %9678 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9679 = load i32, i32* %9678, align 4
  %9680 = sext i32 %9679 to i64
  %9681 = mul nsw i64 %9652, %9677
  %9682 = mul i64 %9681, %9680
  %9683 = sub i64 0, %9682
  %9684 = getelementptr inbounds i16, i16* %9669, i64 %9683
  br label %9687

9685:                                             ; preds = %9648
  %9686 = icmp sgt i32 %9672, 0
  br i1 %9686, label %9687, label %9894

9687:                                             ; preds = %9685, %9675
  %9688 = phi i16* [ %9684, %9675 ], [ %9669, %9685 ]
  %9689 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9690 = bitcast i8** %9689 to float**
  %9691 = load float*, float** %9690, align 8
  %9692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9693 = bitcast i8** %9692 to float**
  %9694 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9695

9695:                                             ; preds = %9707, %9687
  %9696 = phi i32 [ %9672, %9687 ], [ %9708, %9707 ]
  %9697 = phi %"class.blink::IntRect"* [ %9660, %9687 ], [ %9709, %9707 ]
  %9698 = phi %"class.blink::IntRect"* [ %9660, %9687 ], [ %9710, %9707 ]
  %9699 = phi i32 [ 0, %9687 ], [ %9719, %9707 ]
  %9700 = phi float* [ %9691, %9687 ], [ %9712, %9707 ]
  %9701 = phi i16* [ %9688, %9687 ], [ %9718, %9707 ]
  %9702 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9698, i64 0, i32 1, i32 1
  %9703 = load i32, i32* %9702, align 4
  %9704 = icmp sgt i32 %9703, 0
  br i1 %9704, label %9721, label %9707

9705:                                             ; preds = %9886
  %9706 = load i32, i32* %9671, align 8
  br label %9707

9707:                                             ; preds = %9705, %9695
  %9708 = phi i32 [ %9696, %9695 ], [ %9706, %9705 ]
  %9709 = phi %"class.blink::IntRect"* [ %9697, %9695 ], [ %9887, %9705 ]
  %9710 = phi %"class.blink::IntRect"* [ %9698, %9695 ], [ %9887, %9705 ]
  %9711 = phi i16* [ %9701, %9695 ], [ %9888, %9705 ]
  %9712 = phi float* [ %9700, %9695 ], [ %9889, %9705 ]
  %9713 = phi i32 [ %9703, %9695 ], [ %9892, %9705 ]
  %9714 = load i32, i32* %9694, align 4
  %9715 = sub nsw i32 %9714, %9713
  %9716 = sext i32 %9715 to i64
  %9717 = mul nsw i64 %9716, %9652
  %9718 = getelementptr inbounds i16, i16* %9711, i64 %9717
  %9719 = add nuw nsw i32 %9699, 1
  %9720 = icmp slt i32 %9719, %9708
  br i1 %9720, label %9695, label %9894

9721:                                             ; preds = %9695, %9886
  %9722 = phi %"class.blink::IntRect"* [ %9887, %9886 ], [ %9697, %9695 ]
  %9723 = phi %"class.blink::IntRect"* [ %9887, %9886 ], [ %9698, %9695 ]
  %9724 = phi i32 [ %9890, %9886 ], [ 0, %9695 ]
  %9725 = phi float* [ %9889, %9886 ], [ %9700, %9695 ]
  %9726 = phi i16* [ %9888, %9886 ], [ %9701, %9695 ]
  %9727 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9723, i64 0, i32 1, i32 0
  %9728 = load i32, i32* %9727, align 4
  %9729 = icmp eq i32 %9728, 0
  br i1 %9729, label %9886, label %9730

9730:                                             ; preds = %9721
  %9731 = load float*, float** %9693, align 8
  br label %9732

9732:                                             ; preds = %9732, %9730
  %9733 = phi i32 [ %9808, %9732 ], [ 0, %9730 ]
  %9734 = phi i16* [ %9806, %9732 ], [ %9726, %9730 ]
  %9735 = phi float* [ %9807, %9732 ], [ %9731, %9730 ]
  %9736 = load i16, i16* %9734, align 2
  %9737 = zext i16 %9736 to i32
  %9738 = lshr i32 %9737, 10
  %9739 = zext i32 %9738 to i64
  %9740 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9739
  %9741 = load i16, i16* %9740, align 2
  %9742 = zext i16 %9741 to i32
  %9743 = and i32 %9737, 1023
  %9744 = add nuw nsw i32 %9743, %9742
  %9745 = zext i32 %9744 to i64
  %9746 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9745
  %9747 = load i32, i32* %9746, align 4
  %9748 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9739
  %9749 = load i32, i32* %9748, align 4
  %9750 = add i32 %9749, %9747
  %9751 = bitcast float* %9735 to i32*
  store i32 %9750, i32* %9751, align 4
  %9752 = getelementptr inbounds i16, i16* %9734, i64 1
  %9753 = load i16, i16* %9752, align 2
  %9754 = zext i16 %9753 to i32
  %9755 = lshr i32 %9754, 10
  %9756 = zext i32 %9755 to i64
  %9757 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9756
  %9758 = load i16, i16* %9757, align 2
  %9759 = zext i16 %9758 to i32
  %9760 = and i32 %9754, 1023
  %9761 = add nuw nsw i32 %9760, %9759
  %9762 = zext i32 %9761 to i64
  %9763 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9762
  %9764 = load i32, i32* %9763, align 4
  %9765 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9756
  %9766 = load i32, i32* %9765, align 4
  %9767 = add i32 %9766, %9764
  %9768 = getelementptr inbounds float, float* %9735, i64 1
  %9769 = bitcast float* %9768 to i32*
  store i32 %9767, i32* %9769, align 4
  %9770 = getelementptr inbounds i16, i16* %9734, i64 2
  %9771 = load i16, i16* %9770, align 2
  %9772 = zext i16 %9771 to i32
  %9773 = lshr i32 %9772, 10
  %9774 = zext i32 %9773 to i64
  %9775 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9774
  %9776 = load i16, i16* %9775, align 2
  %9777 = zext i16 %9776 to i32
  %9778 = and i32 %9772, 1023
  %9779 = add nuw nsw i32 %9778, %9777
  %9780 = zext i32 %9779 to i64
  %9781 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9780
  %9782 = load i32, i32* %9781, align 4
  %9783 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9774
  %9784 = load i32, i32* %9783, align 4
  %9785 = add i32 %9784, %9782
  %9786 = getelementptr inbounds float, float* %9735, i64 2
  %9787 = bitcast float* %9786 to i32*
  store i32 %9785, i32* %9787, align 4
  %9788 = getelementptr inbounds i16, i16* %9734, i64 3
  %9789 = load i16, i16* %9788, align 2
  %9790 = zext i16 %9789 to i32
  %9791 = lshr i32 %9790, 10
  %9792 = zext i32 %9791 to i64
  %9793 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9792
  %9794 = load i16, i16* %9793, align 2
  %9795 = zext i16 %9794 to i32
  %9796 = and i32 %9790, 1023
  %9797 = add nuw nsw i32 %9796, %9795
  %9798 = zext i32 %9797 to i64
  %9799 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9798
  %9800 = load i32, i32* %9799, align 4
  %9801 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9792
  %9802 = load i32, i32* %9801, align 4
  %9803 = add i32 %9802, %9800
  %9804 = getelementptr inbounds float, float* %9735, i64 3
  %9805 = bitcast float* %9804 to i32*
  store i32 %9803, i32* %9805, align 4
  %9806 = getelementptr inbounds i16, i16* %9734, i64 4
  %9807 = getelementptr inbounds float, float* %9735, i64 4
  %9808 = add nuw i32 %9733, 1
  %9809 = icmp eq i32 %9808, %9728
  br i1 %9809, label %9810, label %9732

9810:                                             ; preds = %9732
  %9811 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9659, align 8
  %9812 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9811, i64 0, i32 1, i32 0
  %9813 = load i32, i32* %9812, align 4
  %9814 = icmp eq i32 %9813, 0
  br i1 %9814, label %9886, label %9815

9815:                                             ; preds = %9810
  %9816 = load float*, float** %9693, align 8
  %9817 = and i32 %9813, 1
  %9818 = icmp eq i32 %9813, 1
  br i1 %9818, label %9863, label %9819

9819:                                             ; preds = %9815
  %9820 = sub i32 %9813, %9817
  br label %9821

9821:                                             ; preds = %9821, %9819
  %9822 = phi float* [ %9816, %9819 ], [ %9859, %9821 ]
  %9823 = phi float* [ %9725, %9819 ], [ %9860, %9821 ]
  %9824 = phi i32 [ %9820, %9819 ], [ %9861, %9821 ]
  %9825 = getelementptr inbounds float, float* %9822, i64 3
  %9826 = load float, float* %9825, align 4
  %9827 = load float, float* %9822, align 4
  %9828 = fmul float %9826, %9827
  store float %9828, float* %9823, align 4
  %9829 = getelementptr inbounds float, float* %9822, i64 1
  %9830 = load float, float* %9829, align 4
  %9831 = fmul float %9826, %9830
  %9832 = getelementptr inbounds float, float* %9823, i64 1
  store float %9831, float* %9832, align 4
  %9833 = getelementptr inbounds float, float* %9822, i64 2
  %9834 = load float, float* %9833, align 4
  %9835 = fmul float %9826, %9834
  %9836 = getelementptr inbounds float, float* %9823, i64 2
  store float %9835, float* %9836, align 4
  %9837 = bitcast float* %9825 to i32*
  %9838 = load i32, i32* %9837, align 4
  %9839 = getelementptr inbounds float, float* %9823, i64 3
  %9840 = bitcast float* %9839 to i32*
  store i32 %9838, i32* %9840, align 4
  %9841 = getelementptr inbounds float, float* %9822, i64 4
  %9842 = getelementptr inbounds float, float* %9823, i64 4
  %9843 = getelementptr inbounds float, float* %9822, i64 7
  %9844 = load float, float* %9843, align 4
  %9845 = load float, float* %9841, align 4
  %9846 = fmul float %9844, %9845
  store float %9846, float* %9842, align 4
  %9847 = getelementptr inbounds float, float* %9822, i64 5
  %9848 = load float, float* %9847, align 4
  %9849 = fmul float %9844, %9848
  %9850 = getelementptr inbounds float, float* %9823, i64 5
  store float %9849, float* %9850, align 4
  %9851 = getelementptr inbounds float, float* %9822, i64 6
  %9852 = load float, float* %9851, align 4
  %9853 = fmul float %9844, %9852
  %9854 = getelementptr inbounds float, float* %9823, i64 6
  store float %9853, float* %9854, align 4
  %9855 = bitcast float* %9843 to i32*
  %9856 = load i32, i32* %9855, align 4
  %9857 = getelementptr inbounds float, float* %9823, i64 7
  %9858 = bitcast float* %9857 to i32*
  store i32 %9856, i32* %9858, align 4
  %9859 = getelementptr inbounds float, float* %9822, i64 8
  %9860 = getelementptr inbounds float, float* %9823, i64 8
  %9861 = add i32 %9824, -2
  %9862 = icmp eq i32 %9861, 0
  br i1 %9862, label %9863, label %9821

9863:                                             ; preds = %9821, %9815
  %9864 = phi float* [ %9816, %9815 ], [ %9859, %9821 ]
  %9865 = phi float* [ %9725, %9815 ], [ %9860, %9821 ]
  %9866 = icmp eq i32 %9817, 0
  br i1 %9866, label %9884, label %9867

9867:                                             ; preds = %9863
  %9868 = getelementptr inbounds float, float* %9864, i64 3
  %9869 = load float, float* %9868, align 4
  %9870 = load float, float* %9864, align 4
  %9871 = fmul float %9869, %9870
  store float %9871, float* %9865, align 4
  %9872 = getelementptr inbounds float, float* %9864, i64 1
  %9873 = load float, float* %9872, align 4
  %9874 = fmul float %9869, %9873
  %9875 = getelementptr inbounds float, float* %9865, i64 1
  store float %9874, float* %9875, align 4
  %9876 = getelementptr inbounds float, float* %9864, i64 2
  %9877 = load float, float* %9876, align 4
  %9878 = fmul float %9869, %9877
  %9879 = getelementptr inbounds float, float* %9865, i64 2
  store float %9878, float* %9879, align 4
  %9880 = bitcast float* %9868 to i32*
  %9881 = load i32, i32* %9880, align 4
  %9882 = getelementptr inbounds float, float* %9865, i64 3
  %9883 = bitcast float* %9882 to i32*
  store i32 %9881, i32* %9883, align 4
  br label %9884

9884:                                             ; preds = %9863, %9867
  %9885 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9659, align 8
  br label %9886

9886:                                             ; preds = %9884, %9810, %9721
  %9887 = phi %"class.blink::IntRect"* [ %9885, %9884 ], [ %9811, %9810 ], [ %9722, %9721 ]
  %9888 = getelementptr inbounds i16, i16* %9726, i64 %9652
  %9889 = getelementptr inbounds float, float* %9725, i64 %9656
  %9890 = add nuw nsw i32 %9724, 1
  %9891 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9887, i64 0, i32 1, i32 1
  %9892 = load i32, i32* %9891, align 4
  %9893 = icmp slt i32 %9890, %9892
  br i1 %9893, label %9721, label %9705

9894:                                             ; preds = %9707, %9685
  %9895 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %9895, align 4
  br label %13459

9896:                                             ; preds = %9477
  %9897 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %9898 = load i32, i32* %9897, align 8
  %9899 = sdiv i32 %9898, 2
  %9900 = sext i32 %9899 to i64
  %9901 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %9902 = load i32, i32* %9901, align 8
  %9903 = sdiv i32 %9902, 4
  %9904 = sext i32 %9903 to i64
  %9905 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %9906 = load i8*, i8** %9905, align 8
  %9907 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %9908 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9907, align 8
  %9909 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9908, i64 0, i32 0, i32 1
  %9910 = load i32, i32* %9909, align 4
  %9911 = mul nsw i32 %9910, %9898
  %9912 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %9913 = load i32, i32* %9912, align 4
  %9914 = add nsw i32 %9911, %9913
  %9915 = sext i32 %9914 to i64
  %9916 = getelementptr inbounds i8, i8* %9906, i64 %9915
  %9917 = bitcast i8* %9916 to i16*
  %9918 = icmp slt i32 %9902, 0
  %9919 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %9920 = load i32, i32* %9919, align 8
  %9921 = icmp sgt i32 %9920, 1
  %9922 = and i1 %9918, %9921
  br i1 %9922, label %9923, label %9933

9923:                                             ; preds = %9896
  %9924 = add nsw i32 %9920, -1
  %9925 = sext i32 %9924 to i64
  %9926 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %9927 = load i32, i32* %9926, align 4
  %9928 = sext i32 %9927 to i64
  %9929 = mul nsw i64 %9900, %9925
  %9930 = mul i64 %9929, %9928
  %9931 = sub i64 0, %9930
  %9932 = getelementptr inbounds i16, i16* %9917, i64 %9931
  br label %9935

9933:                                             ; preds = %9896
  %9934 = icmp sgt i32 %9920, 0
  br i1 %9934, label %9935, label %10102

9935:                                             ; preds = %9933, %9923
  %9936 = phi i16* [ %9932, %9923 ], [ %9917, %9933 ]
  %9937 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %9938 = bitcast i8** %9937 to float**
  %9939 = load float*, float** %9938, align 8
  %9940 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %9941 = bitcast i8** %9940 to float**
  %9942 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %9943

9943:                                             ; preds = %9955, %9935
  %9944 = phi i32 [ %9920, %9935 ], [ %9956, %9955 ]
  %9945 = phi %"class.blink::IntRect"* [ %9908, %9935 ], [ %9957, %9955 ]
  %9946 = phi %"class.blink::IntRect"* [ %9908, %9935 ], [ %9958, %9955 ]
  %9947 = phi i32 [ 0, %9935 ], [ %9967, %9955 ]
  %9948 = phi float* [ %9939, %9935 ], [ %9960, %9955 ]
  %9949 = phi i16* [ %9936, %9935 ], [ %9966, %9955 ]
  %9950 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9946, i64 0, i32 1, i32 1
  %9951 = load i32, i32* %9950, align 4
  %9952 = icmp sgt i32 %9951, 0
  br i1 %9952, label %9969, label %9955

9953:                                             ; preds = %10094
  %9954 = load i32, i32* %9919, align 8
  br label %9955

9955:                                             ; preds = %9953, %9943
  %9956 = phi i32 [ %9944, %9943 ], [ %9954, %9953 ]
  %9957 = phi %"class.blink::IntRect"* [ %9945, %9943 ], [ %10095, %9953 ]
  %9958 = phi %"class.blink::IntRect"* [ %9946, %9943 ], [ %10095, %9953 ]
  %9959 = phi i16* [ %9949, %9943 ], [ %10096, %9953 ]
  %9960 = phi float* [ %9948, %9943 ], [ %10097, %9953 ]
  %9961 = phi i32 [ %9951, %9943 ], [ %10100, %9953 ]
  %9962 = load i32, i32* %9942, align 4
  %9963 = sub nsw i32 %9962, %9961
  %9964 = sext i32 %9963 to i64
  %9965 = mul nsw i64 %9964, %9900
  %9966 = getelementptr inbounds i16, i16* %9959, i64 %9965
  %9967 = add nuw nsw i32 %9947, 1
  %9968 = icmp slt i32 %9967, %9956
  br i1 %9968, label %9943, label %10102

9969:                                             ; preds = %9943, %10094
  %9970 = phi %"class.blink::IntRect"* [ %10095, %10094 ], [ %9945, %9943 ]
  %9971 = phi %"class.blink::IntRect"* [ %10095, %10094 ], [ %9946, %9943 ]
  %9972 = phi i32 [ %10098, %10094 ], [ 0, %9943 ]
  %9973 = phi float* [ %10097, %10094 ], [ %9948, %9943 ]
  %9974 = phi i16* [ %10096, %10094 ], [ %9949, %9943 ]
  %9975 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %9971, i64 0, i32 1, i32 0
  %9976 = load i32, i32* %9975, align 4
  %9977 = icmp eq i32 %9976, 0
  br i1 %9977, label %10094, label %9978

9978:                                             ; preds = %9969
  %9979 = load float*, float** %9941, align 8
  br label %9980

9980:                                             ; preds = %9980, %9978
  %9981 = phi i32 [ %10056, %9980 ], [ 0, %9978 ]
  %9982 = phi i16* [ %10054, %9980 ], [ %9974, %9978 ]
  %9983 = phi float* [ %10055, %9980 ], [ %9979, %9978 ]
  %9984 = load i16, i16* %9982, align 2
  %9985 = zext i16 %9984 to i32
  %9986 = lshr i32 %9985, 10
  %9987 = zext i32 %9986 to i64
  %9988 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %9987
  %9989 = load i16, i16* %9988, align 2
  %9990 = zext i16 %9989 to i32
  %9991 = and i32 %9985, 1023
  %9992 = add nuw nsw i32 %9991, %9990
  %9993 = zext i32 %9992 to i64
  %9994 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %9993
  %9995 = load i32, i32* %9994, align 4
  %9996 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %9987
  %9997 = load i32, i32* %9996, align 4
  %9998 = add i32 %9997, %9995
  %9999 = bitcast float* %9983 to i32*
  store i32 %9998, i32* %9999, align 4
  %10000 = getelementptr inbounds i16, i16* %9982, i64 1
  %10001 = load i16, i16* %10000, align 2
  %10002 = zext i16 %10001 to i32
  %10003 = lshr i32 %10002, 10
  %10004 = zext i32 %10003 to i64
  %10005 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10004
  %10006 = load i16, i16* %10005, align 2
  %10007 = zext i16 %10006 to i32
  %10008 = and i32 %10002, 1023
  %10009 = add nuw nsw i32 %10008, %10007
  %10010 = zext i32 %10009 to i64
  %10011 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10010
  %10012 = load i32, i32* %10011, align 4
  %10013 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10004
  %10014 = load i32, i32* %10013, align 4
  %10015 = add i32 %10014, %10012
  %10016 = getelementptr inbounds float, float* %9983, i64 1
  %10017 = bitcast float* %10016 to i32*
  store i32 %10015, i32* %10017, align 4
  %10018 = getelementptr inbounds i16, i16* %9982, i64 2
  %10019 = load i16, i16* %10018, align 2
  %10020 = zext i16 %10019 to i32
  %10021 = lshr i32 %10020, 10
  %10022 = zext i32 %10021 to i64
  %10023 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10022
  %10024 = load i16, i16* %10023, align 2
  %10025 = zext i16 %10024 to i32
  %10026 = and i32 %10020, 1023
  %10027 = add nuw nsw i32 %10026, %10025
  %10028 = zext i32 %10027 to i64
  %10029 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10028
  %10030 = load i32, i32* %10029, align 4
  %10031 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10022
  %10032 = load i32, i32* %10031, align 4
  %10033 = add i32 %10032, %10030
  %10034 = getelementptr inbounds float, float* %9983, i64 2
  %10035 = bitcast float* %10034 to i32*
  store i32 %10033, i32* %10035, align 4
  %10036 = getelementptr inbounds i16, i16* %9982, i64 3
  %10037 = load i16, i16* %10036, align 2
  %10038 = zext i16 %10037 to i32
  %10039 = lshr i32 %10038, 10
  %10040 = zext i32 %10039 to i64
  %10041 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10040
  %10042 = load i16, i16* %10041, align 2
  %10043 = zext i16 %10042 to i32
  %10044 = and i32 %10038, 1023
  %10045 = add nuw nsw i32 %10044, %10043
  %10046 = zext i32 %10045 to i64
  %10047 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10046
  %10048 = load i32, i32* %10047, align 4
  %10049 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10040
  %10050 = load i32, i32* %10049, align 4
  %10051 = add i32 %10050, %10048
  %10052 = getelementptr inbounds float, float* %9983, i64 3
  %10053 = bitcast float* %10052 to i32*
  store i32 %10051, i32* %10053, align 4
  %10054 = getelementptr inbounds i16, i16* %9982, i64 4
  %10055 = getelementptr inbounds float, float* %9983, i64 4
  %10056 = add nuw i32 %9981, 1
  %10057 = icmp eq i32 %10056, %9976
  br i1 %10057, label %10058, label %9980

10058:                                            ; preds = %9980
  %10059 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9907, align 8
  %10060 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10059, i64 0, i32 1, i32 0
  %10061 = load i32, i32* %10060, align 4
  %10062 = icmp eq i32 %10061, 0
  br i1 %10062, label %10094, label %10063

10063:                                            ; preds = %10058
  %10064 = load float*, float** %9941, align 8
  br label %10065

10065:                                            ; preds = %10065, %10063
  %10066 = phi i32 [ %10090, %10065 ], [ 0, %10063 ]
  %10067 = phi float* [ %10088, %10065 ], [ %10064, %10063 ]
  %10068 = phi float* [ %10089, %10065 ], [ %9973, %10063 ]
  %10069 = getelementptr inbounds float, float* %10067, i64 3
  %10070 = load float, float* %10069, align 4
  %10071 = fcmp une float %10070, 0.000000e+00
  %10072 = fdiv float 1.000000e+00, %10070
  %10073 = select i1 %10071, float %10072, float 1.000000e+00
  %10074 = load float, float* %10067, align 4
  %10075 = fmul float %10074, %10073
  store float %10075, float* %10068, align 4
  %10076 = getelementptr inbounds float, float* %10067, i64 1
  %10077 = load float, float* %10076, align 4
  %10078 = fmul float %10073, %10077
  %10079 = getelementptr inbounds float, float* %10068, i64 1
  store float %10078, float* %10079, align 4
  %10080 = getelementptr inbounds float, float* %10067, i64 2
  %10081 = load float, float* %10080, align 4
  %10082 = fmul float %10073, %10081
  %10083 = getelementptr inbounds float, float* %10068, i64 2
  store float %10082, float* %10083, align 4
  %10084 = bitcast float* %10069 to i32*
  %10085 = load i32, i32* %10084, align 4
  %10086 = getelementptr inbounds float, float* %10068, i64 3
  %10087 = bitcast float* %10086 to i32*
  store i32 %10085, i32* %10087, align 4
  %10088 = getelementptr inbounds float, float* %10067, i64 4
  %10089 = getelementptr inbounds float, float* %10068, i64 4
  %10090 = add nuw i32 %10066, 1
  %10091 = icmp eq i32 %10090, %10061
  br i1 %10091, label %10092, label %10065

10092:                                            ; preds = %10065
  %10093 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %9907, align 8
  br label %10094

10094:                                            ; preds = %10092, %10058, %9969
  %10095 = phi %"class.blink::IntRect"* [ %10093, %10092 ], [ %10059, %10058 ], [ %9970, %9969 ]
  %10096 = getelementptr inbounds i16, i16* %9974, i64 %9900
  %10097 = getelementptr inbounds float, float* %9973, i64 %9904
  %10098 = add nuw nsw i32 %9972, 1
  %10099 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10095, i64 0, i32 1, i32 1
  %10100 = load i32, i32* %10099, align 4
  %10101 = icmp slt i32 %10098, %10100
  br i1 %10101, label %9969, label %9953

10102:                                            ; preds = %9955, %9933
  %10103 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10103, align 4
  br label %13459

10104:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10105
    i32 1, label %10107
  ]

10105:                                            ; preds = %10104
  %10106 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10106, align 4
  br label %13459

10107:                                            ; preds = %10104
  %10108 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10109 = load i32, i32* %10108, align 8
  %10110 = sext i32 %10109 to i64
  %10111 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10112 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10111, align 8
  %10113 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10114 = load i32, i32* %10113, align 8
  %10115 = icmp sgt i32 %10114, 0
  br i1 %10115, label %10116, label %10264

10116:                                            ; preds = %10107
  %10117 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10118 = load i8*, i8** %10117, align 8
  %10119 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  br label %10120

10120:                                            ; preds = %10131, %10116
  %10121 = phi i32 [ %10114, %10116 ], [ %10132, %10131 ]
  %10122 = phi %"class.blink::IntRect"* [ %10112, %10116 ], [ %10133, %10131 ]
  %10123 = phi %"class.blink::IntRect"* [ %10112, %10116 ], [ %10134, %10131 ]
  %10124 = phi i32 [ 0, %10116 ], [ %10136, %10131 ]
  %10125 = phi i8* [ %10118, %10116 ], [ %10135, %10131 ]
  %10126 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10123, i64 0, i32 1, i32 1
  %10127 = load i32, i32* %10126, align 4
  %10128 = icmp sgt i32 %10127, 0
  br i1 %10128, label %10138, label %10131

10129:                                            ; preds = %10256
  %10130 = load i32, i32* %10113, align 8
  br label %10131

10131:                                            ; preds = %10129, %10120
  %10132 = phi i32 [ %10121, %10120 ], [ %10130, %10129 ]
  %10133 = phi %"class.blink::IntRect"* [ %10122, %10120 ], [ %10257, %10129 ]
  %10134 = phi %"class.blink::IntRect"* [ %10123, %10120 ], [ %10257, %10129 ]
  %10135 = phi i8* [ %10125, %10120 ], [ %10258, %10129 ]
  %10136 = add nuw nsw i32 %10124, 1
  %10137 = icmp slt i32 %10136, %10132
  br i1 %10137, label %10120, label %10264

10138:                                            ; preds = %10120, %10256
  %10139 = phi i64 [ %10263, %10256 ], [ 0, %10120 ]
  %10140 = phi %"class.blink::IntRect"* [ %10257, %10256 ], [ %10122, %10120 ]
  %10141 = phi %"class.blink::IntRect"* [ %10257, %10256 ], [ %10123, %10120 ]
  %10142 = phi i32 [ %10259, %10256 ], [ 0, %10120 ]
  %10143 = phi i8* [ %10258, %10256 ], [ %10125, %10120 ]
  %10144 = mul i64 %10139, %10110
  %10145 = getelementptr i8, i8* %10125, i64 %10144
  %10146 = add i64 %10144, 4
  %10147 = getelementptr i8, i8* %10125, i64 %10146
  %10148 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10141, i64 0, i32 1, i32 0
  %10149 = load i32, i32* %10148, align 4
  %10150 = icmp eq i32 %10149, 0
  br i1 %10150, label %10256, label %10151

10151:                                            ; preds = %10138
  %10152 = load i8*, i8** %10119, align 8
  %10153 = add i32 %10149, -1
  %10154 = zext i32 %10153 to i64
  %10155 = add nuw nsw i64 %10154, 1
  %10156 = icmp ult i64 %10155, 16
  br i1 %10156, label %10213, label %10157

10157:                                            ; preds = %10151
  %10158 = add i32 %10149, -1
  %10159 = zext i32 %10158 to i64
  %10160 = shl nuw nsw i64 %10159, 2
  %10161 = getelementptr i8, i8* %10147, i64 %10160
  %10162 = getelementptr i8, i8* %10152, i64 4
  %10163 = getelementptr i8, i8* %10162, i64 %10160
  %10164 = icmp ult i8* %10145, %10163
  %10165 = icmp ult i8* %10152, %10161
  %10166 = and i1 %10164, %10165
  br i1 %10166, label %10213, label %10167

10167:                                            ; preds = %10157
  %10168 = and i64 %10155, 8589934576
  %10169 = shl nuw nsw i64 %10168, 2
  %10170 = getelementptr i8, i8* %10152, i64 %10169
  %10171 = trunc i64 %10168 to i32
  %10172 = shl nuw nsw i64 %10168, 2
  %10173 = getelementptr i8, i8* %10143, i64 %10172
  br label %10174

10174:                                            ; preds = %10174, %10167
  %10175 = phi i64 [ 0, %10167 ], [ %10209, %10174 ]
  %10176 = shl i64 %10175, 2
  %10177 = shl i64 %10175, 2
  %10178 = getelementptr inbounds i8, i8* %10152, i64 %10176
  %10179 = bitcast i8* %10178 to <64 x i8>*
  %10180 = load <64 x i8>, <64 x i8>* %10179, align 1
  %10181 = shufflevector <64 x i8> %10180, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %10182 = shufflevector <64 x i8> %10180, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %10183 = shufflevector <64 x i8> %10180, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %10184 = shufflevector <64 x i8> %10180, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %10185 = icmp eq <16 x i8> %10184, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %10186 = select <16 x i1> %10185, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %10184
  %10187 = sitofp <16 x i8> %10186 to <16 x float>
  %10188 = fdiv <16 x float> %10187, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %10189 = icmp eq <16 x i8> %10181, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %10190 = select <16 x i1> %10189, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %10181
  %10191 = sitofp <16 x i8> %10190 to <16 x float>
  %10192 = fmul <16 x float> %10188, %10191
  %10193 = fptosi <16 x float> %10192 to <16 x i8>
  %10194 = icmp eq <16 x i8> %10182, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %10195 = select <16 x i1> %10194, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %10182
  %10196 = sitofp <16 x i8> %10195 to <16 x float>
  %10197 = fmul <16 x float> %10188, %10196
  %10198 = fptosi <16 x float> %10197 to <16 x i8>
  %10199 = icmp eq <16 x i8> %10183, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %10200 = select <16 x i1> %10199, <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8> %10183
  %10201 = sitofp <16 x i8> %10200 to <16 x float>
  %10202 = fmul <16 x float> %10188, %10201
  %10203 = fptosi <16 x float> %10202 to <16 x i8>
  %10204 = getelementptr inbounds i8, i8* %10143, i64 %10177
  %10205 = bitcast i8* %10204 to <64 x i8>*
  %10206 = shufflevector <16 x i8> %10193, <16 x i8> %10198, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10207 = shufflevector <16 x i8> %10203, <16 x i8> %10186, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10208 = shufflevector <32 x i8> %10206, <32 x i8> %10207, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %10208, <64 x i8>* %10205, align 1
  %10209 = add i64 %10175, 16
  %10210 = icmp eq i64 %10209, %10168
  br i1 %10210, label %10211, label %10174, !llvm.loop !742

10211:                                            ; preds = %10174
  %10212 = icmp eq i64 %10155, %10168
  br i1 %10212, label %10254, label %10213

10213:                                            ; preds = %10211, %10157, %10151
  %10214 = phi i8* [ %10152, %10157 ], [ %10152, %10151 ], [ %10170, %10211 ]
  %10215 = phi i32 [ 0, %10157 ], [ 0, %10151 ], [ %10171, %10211 ]
  %10216 = phi i8* [ %10143, %10157 ], [ %10143, %10151 ], [ %10173, %10211 ]
  br label %10217

10217:                                            ; preds = %10213, %10217
  %10218 = phi i8* [ %10250, %10217 ], [ %10214, %10213 ]
  %10219 = phi i32 [ %10252, %10217 ], [ %10215, %10213 ]
  %10220 = phi i8* [ %10251, %10217 ], [ %10216, %10213 ]
  %10221 = getelementptr inbounds i8, i8* %10218, i64 3
  %10222 = load i8, i8* %10221, align 1
  %10223 = icmp eq i8 %10222, -128
  %10224 = select i1 %10223, i8 -127, i8 %10222
  %10225 = getelementptr inbounds i8, i8* %10220, i64 3
  store i8 %10224, i8* %10225, align 1
  %10226 = sitofp i8 %10224 to float
  %10227 = fdiv float %10226, 1.270000e+02
  %10228 = load i8, i8* %10218, align 1
  %10229 = icmp eq i8 %10228, -128
  %10230 = select i1 %10229, i8 -127, i8 %10228
  %10231 = sitofp i8 %10230 to float
  %10232 = fmul float %10227, %10231
  %10233 = fptosi float %10232 to i8
  store i8 %10233, i8* %10220, align 1
  %10234 = getelementptr inbounds i8, i8* %10218, i64 1
  %10235 = load i8, i8* %10234, align 1
  %10236 = icmp eq i8 %10235, -128
  %10237 = select i1 %10236, i8 -127, i8 %10235
  %10238 = sitofp i8 %10237 to float
  %10239 = fmul float %10227, %10238
  %10240 = fptosi float %10239 to i8
  %10241 = getelementptr inbounds i8, i8* %10220, i64 1
  store i8 %10240, i8* %10241, align 1
  %10242 = getelementptr inbounds i8, i8* %10218, i64 2
  %10243 = load i8, i8* %10242, align 1
  %10244 = icmp eq i8 %10243, -128
  %10245 = select i1 %10244, i8 -127, i8 %10243
  %10246 = sitofp i8 %10245 to float
  %10247 = fmul float %10227, %10246
  %10248 = fptosi float %10247 to i8
  %10249 = getelementptr inbounds i8, i8* %10220, i64 2
  store i8 %10248, i8* %10249, align 1
  %10250 = getelementptr inbounds i8, i8* %10218, i64 4
  %10251 = getelementptr inbounds i8, i8* %10220, i64 4
  %10252 = add nuw i32 %10219, 1
  %10253 = icmp eq i32 %10252, %10149
  br i1 %10253, label %10254, label %10217, !llvm.loop !743

10254:                                            ; preds = %10217, %10211
  %10255 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10111, align 8
  br label %10256

10256:                                            ; preds = %10254, %10138
  %10257 = phi %"class.blink::IntRect"* [ %10255, %10254 ], [ %10140, %10138 ]
  %10258 = getelementptr inbounds i8, i8* %10143, i64 %10110
  %10259 = add nuw nsw i32 %10142, 1
  %10260 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10257, i64 0, i32 1, i32 1
  %10261 = load i32, i32* %10260, align 4
  %10262 = icmp slt i32 %10259, %10261
  %10263 = add i64 %10139, 1
  br i1 %10262, label %10138, label %10129

10264:                                            ; preds = %10131, %10107
  %10265 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10265, align 4
  br label %13459

10266:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10267
    i32 1, label %10269
  ]

10267:                                            ; preds = %10266
  %10268 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10268, align 4
  br label %13459

10269:                                            ; preds = %10266
  %10270 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10271 = load i32, i32* %10270, align 8
  %10272 = sdiv i32 %10271, 2
  %10273 = sext i32 %10272 to i64
  %10274 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10275 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10274, align 8
  %10276 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10277 = load i32, i32* %10276, align 8
  %10278 = icmp sgt i32 %10277, 0
  br i1 %10278, label %10279, label %10352

10279:                                            ; preds = %10269
  %10280 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10281 = bitcast i8** %10280 to i16**
  %10282 = load i16*, i16** %10281, align 8
  %10283 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10284 = bitcast i8** %10283 to i16**
  br label %10285

10285:                                            ; preds = %10296, %10279
  %10286 = phi i32 [ %10277, %10279 ], [ %10297, %10296 ]
  %10287 = phi %"class.blink::IntRect"* [ %10275, %10279 ], [ %10298, %10296 ]
  %10288 = phi %"class.blink::IntRect"* [ %10275, %10279 ], [ %10299, %10296 ]
  %10289 = phi i32 [ 0, %10279 ], [ %10301, %10296 ]
  %10290 = phi i16* [ %10282, %10279 ], [ %10300, %10296 ]
  %10291 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10288, i64 0, i32 1, i32 1
  %10292 = load i32, i32* %10291, align 4
  %10293 = icmp sgt i32 %10292, 0
  br i1 %10293, label %10303, label %10296

10294:                                            ; preds = %10345
  %10295 = load i32, i32* %10276, align 8
  br label %10296

10296:                                            ; preds = %10294, %10285
  %10297 = phi i32 [ %10286, %10285 ], [ %10295, %10294 ]
  %10298 = phi %"class.blink::IntRect"* [ %10287, %10285 ], [ %10346, %10294 ]
  %10299 = phi %"class.blink::IntRect"* [ %10288, %10285 ], [ %10346, %10294 ]
  %10300 = phi i16* [ %10290, %10285 ], [ %10347, %10294 ]
  %10301 = add nuw nsw i32 %10289, 1
  %10302 = icmp slt i32 %10301, %10297
  br i1 %10302, label %10285, label %10352

10303:                                            ; preds = %10285, %10345
  %10304 = phi %"class.blink::IntRect"* [ %10346, %10345 ], [ %10287, %10285 ]
  %10305 = phi %"class.blink::IntRect"* [ %10346, %10345 ], [ %10288, %10285 ]
  %10306 = phi i32 [ %10348, %10345 ], [ 0, %10285 ]
  %10307 = phi i16* [ %10347, %10345 ], [ %10290, %10285 ]
  %10308 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10305, i64 0, i32 1, i32 0
  %10309 = load i32, i32* %10308, align 4
  %10310 = icmp eq i32 %10309, 0
  br i1 %10310, label %10345, label %10311

10311:                                            ; preds = %10303
  %10312 = load i16*, i16** %10284, align 8
  br label %10313

10313:                                            ; preds = %10313, %10311
  %10314 = phi i16* [ %10339, %10313 ], [ %10312, %10311 ]
  %10315 = phi i32 [ %10341, %10313 ], [ 0, %10311 ]
  %10316 = phi i16* [ %10340, %10313 ], [ %10307, %10311 ]
  %10317 = getelementptr inbounds i16, i16* %10314, i64 3
  %10318 = load i16, i16* %10317, align 2
  %10319 = uitofp i16 %10318 to float
  %10320 = fdiv float %10319, 6.553500e+04
  %10321 = load i16, i16* %10314, align 2
  %10322 = uitofp i16 %10321 to float
  %10323 = fmul float %10320, %10322
  %10324 = fptoui float %10323 to i16
  store i16 %10324, i16* %10316, align 2
  %10325 = getelementptr inbounds i16, i16* %10314, i64 1
  %10326 = load i16, i16* %10325, align 2
  %10327 = uitofp i16 %10326 to float
  %10328 = fmul float %10320, %10327
  %10329 = fptoui float %10328 to i16
  %10330 = getelementptr inbounds i16, i16* %10316, i64 1
  store i16 %10329, i16* %10330, align 2
  %10331 = getelementptr inbounds i16, i16* %10314, i64 2
  %10332 = load i16, i16* %10331, align 2
  %10333 = uitofp i16 %10332 to float
  %10334 = fmul float %10320, %10333
  %10335 = fptoui float %10334 to i16
  %10336 = getelementptr inbounds i16, i16* %10316, i64 2
  store i16 %10335, i16* %10336, align 2
  %10337 = load i16, i16* %10317, align 2
  %10338 = getelementptr inbounds i16, i16* %10316, i64 3
  store i16 %10337, i16* %10338, align 2
  %10339 = getelementptr inbounds i16, i16* %10314, i64 4
  %10340 = getelementptr inbounds i16, i16* %10316, i64 4
  %10341 = add nuw i32 %10315, 1
  %10342 = icmp eq i32 %10341, %10309
  br i1 %10342, label %10343, label %10313

10343:                                            ; preds = %10313
  %10344 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10274, align 8
  br label %10345

10345:                                            ; preds = %10343, %10303
  %10346 = phi %"class.blink::IntRect"* [ %10344, %10343 ], [ %10304, %10303 ]
  %10347 = getelementptr inbounds i16, i16* %10307, i64 %10273
  %10348 = add nuw nsw i32 %10306, 1
  %10349 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10346, i64 0, i32 1, i32 1
  %10350 = load i32, i32* %10349, align 4
  %10351 = icmp slt i32 %10348, %10350
  br i1 %10351, label %10303, label %10294

10352:                                            ; preds = %10296, %10269
  %10353 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10353, align 4
  br label %13459

10354:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10355
    i32 1, label %10357
  ]

10355:                                            ; preds = %10354
  %10356 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10356, align 4
  br label %13459

10357:                                            ; preds = %10354
  %10358 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10359 = load i32, i32* %10358, align 8
  %10360 = sdiv i32 %10359, 2
  %10361 = sext i32 %10360 to i64
  %10362 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10363 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10362, align 8
  %10364 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10365 = load i32, i32* %10364, align 8
  %10366 = icmp sgt i32 %10365, 0
  br i1 %10366, label %10367, label %10517

10367:                                            ; preds = %10357
  %10368 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10369 = bitcast i8** %10368 to i16**
  %10370 = load i16*, i16** %10369, align 8
  %10371 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10372 = bitcast i8** %10371 to i16**
  br label %10373

10373:                                            ; preds = %10384, %10367
  %10374 = phi i32 [ %10365, %10367 ], [ %10385, %10384 ]
  %10375 = phi %"class.blink::IntRect"* [ %10363, %10367 ], [ %10386, %10384 ]
  %10376 = phi %"class.blink::IntRect"* [ %10363, %10367 ], [ %10387, %10384 ]
  %10377 = phi i32 [ 0, %10367 ], [ %10389, %10384 ]
  %10378 = phi i16* [ %10370, %10367 ], [ %10388, %10384 ]
  %10379 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10376, i64 0, i32 1, i32 1
  %10380 = load i32, i32* %10379, align 4
  %10381 = icmp sgt i32 %10380, 0
  br i1 %10381, label %10391, label %10384

10382:                                            ; preds = %10509
  %10383 = load i32, i32* %10364, align 8
  br label %10384

10384:                                            ; preds = %10382, %10373
  %10385 = phi i32 [ %10374, %10373 ], [ %10383, %10382 ]
  %10386 = phi %"class.blink::IntRect"* [ %10375, %10373 ], [ %10510, %10382 ]
  %10387 = phi %"class.blink::IntRect"* [ %10376, %10373 ], [ %10510, %10382 ]
  %10388 = phi i16* [ %10378, %10373 ], [ %10511, %10382 ]
  %10389 = add nuw nsw i32 %10377, 1
  %10390 = icmp slt i32 %10389, %10385
  br i1 %10390, label %10373, label %10517

10391:                                            ; preds = %10373, %10509
  %10392 = phi i64 [ %10516, %10509 ], [ 0, %10373 ]
  %10393 = phi %"class.blink::IntRect"* [ %10510, %10509 ], [ %10375, %10373 ]
  %10394 = phi %"class.blink::IntRect"* [ %10510, %10509 ], [ %10376, %10373 ]
  %10395 = phi i32 [ %10512, %10509 ], [ 0, %10373 ]
  %10396 = phi i16* [ %10511, %10509 ], [ %10378, %10373 ]
  %10397 = mul i64 %10392, %10361
  %10398 = getelementptr i16, i16* %10378, i64 %10397
  %10399 = add i64 %10397, 4
  %10400 = getelementptr i16, i16* %10378, i64 %10399
  %10401 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10394, i64 0, i32 1, i32 0
  %10402 = load i32, i32* %10401, align 4
  %10403 = icmp eq i32 %10402, 0
  br i1 %10403, label %10509, label %10404

10404:                                            ; preds = %10391
  %10405 = load i16*, i16** %10372, align 8
  %10406 = add i32 %10402, -1
  %10407 = zext i32 %10406 to i64
  %10408 = add nuw nsw i64 %10407, 1
  %10409 = icmp ult i64 %10408, 4
  br i1 %10409, label %10466, label %10410

10410:                                            ; preds = %10404
  %10411 = add i32 %10402, -1
  %10412 = zext i32 %10411 to i64
  %10413 = shl nuw nsw i64 %10412, 2
  %10414 = getelementptr i16, i16* %10400, i64 %10413
  %10415 = getelementptr i16, i16* %10405, i64 4
  %10416 = getelementptr i16, i16* %10415, i64 %10413
  %10417 = icmp ult i16* %10398, %10416
  %10418 = icmp ult i16* %10405, %10414
  %10419 = and i1 %10417, %10418
  br i1 %10419, label %10466, label %10420

10420:                                            ; preds = %10410
  %10421 = and i64 %10408, 8589934588
  %10422 = shl nuw nsw i64 %10421, 2
  %10423 = getelementptr i16, i16* %10405, i64 %10422
  %10424 = trunc i64 %10421 to i32
  %10425 = shl nuw nsw i64 %10421, 2
  %10426 = getelementptr i16, i16* %10396, i64 %10425
  br label %10427

10427:                                            ; preds = %10427, %10420
  %10428 = phi i64 [ 0, %10420 ], [ %10462, %10427 ]
  %10429 = shl i64 %10428, 2
  %10430 = shl i64 %10428, 2
  %10431 = getelementptr inbounds i16, i16* %10405, i64 %10429
  %10432 = bitcast i16* %10431 to <16 x i16>*
  %10433 = load <16 x i16>, <16 x i16>* %10432, align 2
  %10434 = shufflevector <16 x i16> %10433, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %10435 = shufflevector <16 x i16> %10433, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %10436 = shufflevector <16 x i16> %10433, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %10437 = shufflevector <16 x i16> %10433, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %10438 = icmp eq <4 x i16> %10437, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %10439 = select <4 x i1> %10438, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %10437
  %10440 = sitofp <4 x i16> %10439 to <4 x float>
  %10441 = fdiv <4 x float> %10440, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %10442 = icmp eq <4 x i16> %10434, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %10443 = select <4 x i1> %10442, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %10434
  %10444 = sitofp <4 x i16> %10443 to <4 x float>
  %10445 = fmul <4 x float> %10441, %10444
  %10446 = fptosi <4 x float> %10445 to <4 x i16>
  %10447 = icmp eq <4 x i16> %10435, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %10448 = select <4 x i1> %10447, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %10435
  %10449 = sitofp <4 x i16> %10448 to <4 x float>
  %10450 = fmul <4 x float> %10441, %10449
  %10451 = fptosi <4 x float> %10450 to <4 x i16>
  %10452 = icmp eq <4 x i16> %10436, <i16 -32768, i16 -32768, i16 -32768, i16 -32768>
  %10453 = select <4 x i1> %10452, <4 x i16> <i16 -32767, i16 -32767, i16 -32767, i16 -32767>, <4 x i16> %10436
  %10454 = sitofp <4 x i16> %10453 to <4 x float>
  %10455 = fmul <4 x float> %10441, %10454
  %10456 = fptosi <4 x float> %10455 to <4 x i16>
  %10457 = getelementptr inbounds i16, i16* %10396, i64 %10430
  %10458 = bitcast i16* %10457 to <16 x i16>*
  %10459 = shufflevector <4 x i16> %10446, <4 x i16> %10451, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10460 = shufflevector <4 x i16> %10456, <4 x i16> %10439, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10461 = shufflevector <8 x i16> %10459, <8 x i16> %10460, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %10461, <16 x i16>* %10458, align 2
  %10462 = add i64 %10428, 4
  %10463 = icmp eq i64 %10462, %10421
  br i1 %10463, label %10464, label %10427, !llvm.loop !744

10464:                                            ; preds = %10427
  %10465 = icmp eq i64 %10408, %10421
  br i1 %10465, label %10507, label %10466

10466:                                            ; preds = %10464, %10410, %10404
  %10467 = phi i16* [ %10405, %10410 ], [ %10405, %10404 ], [ %10423, %10464 ]
  %10468 = phi i32 [ 0, %10410 ], [ 0, %10404 ], [ %10424, %10464 ]
  %10469 = phi i16* [ %10396, %10410 ], [ %10396, %10404 ], [ %10426, %10464 ]
  br label %10470

10470:                                            ; preds = %10466, %10470
  %10471 = phi i16* [ %10503, %10470 ], [ %10467, %10466 ]
  %10472 = phi i32 [ %10505, %10470 ], [ %10468, %10466 ]
  %10473 = phi i16* [ %10504, %10470 ], [ %10469, %10466 ]
  %10474 = getelementptr inbounds i16, i16* %10471, i64 3
  %10475 = load i16, i16* %10474, align 2
  %10476 = icmp eq i16 %10475, -32768
  %10477 = select i1 %10476, i16 -32767, i16 %10475
  %10478 = getelementptr inbounds i16, i16* %10473, i64 3
  store i16 %10477, i16* %10478, align 2
  %10479 = sitofp i16 %10477 to float
  %10480 = fdiv float %10479, 3.276700e+04
  %10481 = load i16, i16* %10471, align 2
  %10482 = icmp eq i16 %10481, -32768
  %10483 = select i1 %10482, i16 -32767, i16 %10481
  %10484 = sitofp i16 %10483 to float
  %10485 = fmul float %10480, %10484
  %10486 = fptosi float %10485 to i16
  store i16 %10486, i16* %10473, align 2
  %10487 = getelementptr inbounds i16, i16* %10471, i64 1
  %10488 = load i16, i16* %10487, align 2
  %10489 = icmp eq i16 %10488, -32768
  %10490 = select i1 %10489, i16 -32767, i16 %10488
  %10491 = sitofp i16 %10490 to float
  %10492 = fmul float %10480, %10491
  %10493 = fptosi float %10492 to i16
  %10494 = getelementptr inbounds i16, i16* %10473, i64 1
  store i16 %10493, i16* %10494, align 2
  %10495 = getelementptr inbounds i16, i16* %10471, i64 2
  %10496 = load i16, i16* %10495, align 2
  %10497 = icmp eq i16 %10496, -32768
  %10498 = select i1 %10497, i16 -32767, i16 %10496
  %10499 = sitofp i16 %10498 to float
  %10500 = fmul float %10480, %10499
  %10501 = fptosi float %10500 to i16
  %10502 = getelementptr inbounds i16, i16* %10473, i64 2
  store i16 %10501, i16* %10502, align 2
  %10503 = getelementptr inbounds i16, i16* %10471, i64 4
  %10504 = getelementptr inbounds i16, i16* %10473, i64 4
  %10505 = add nuw i32 %10472, 1
  %10506 = icmp eq i32 %10505, %10402
  br i1 %10506, label %10507, label %10470, !llvm.loop !745

10507:                                            ; preds = %10470, %10464
  %10508 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10362, align 8
  br label %10509

10509:                                            ; preds = %10507, %10391
  %10510 = phi %"class.blink::IntRect"* [ %10508, %10507 ], [ %10393, %10391 ]
  %10511 = getelementptr inbounds i16, i16* %10396, i64 %10361
  %10512 = add nuw nsw i32 %10395, 1
  %10513 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10510, i64 0, i32 1, i32 1
  %10514 = load i32, i32* %10513, align 4
  %10515 = icmp slt i32 %10512, %10514
  %10516 = add i64 %10392, 1
  br i1 %10515, label %10391, label %10382

10517:                                            ; preds = %10384, %10357
  %10518 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10518, align 4
  br label %13459

10519:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10520
    i32 1, label %10522
  ]

10520:                                            ; preds = %10519
  %10521 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10521, align 4
  br label %13459

10522:                                            ; preds = %10519
  %10523 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10524 = load i32, i32* %10523, align 8
  %10525 = sdiv i32 %10524, 4
  %10526 = sext i32 %10525 to i64
  %10527 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10528 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10527, align 8
  %10529 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10530 = load i32, i32* %10529, align 8
  %10531 = icmp sgt i32 %10530, 0
  br i1 %10531, label %10532, label %10605

10532:                                            ; preds = %10522
  %10533 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10534 = bitcast i8** %10533 to i32**
  %10535 = load i32*, i32** %10534, align 8
  %10536 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10537 = bitcast i8** %10536 to i32**
  br label %10538

10538:                                            ; preds = %10549, %10532
  %10539 = phi i32 [ %10530, %10532 ], [ %10550, %10549 ]
  %10540 = phi %"class.blink::IntRect"* [ %10528, %10532 ], [ %10551, %10549 ]
  %10541 = phi %"class.blink::IntRect"* [ %10528, %10532 ], [ %10552, %10549 ]
  %10542 = phi i32 [ 0, %10532 ], [ %10554, %10549 ]
  %10543 = phi i32* [ %10535, %10532 ], [ %10553, %10549 ]
  %10544 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10541, i64 0, i32 1, i32 1
  %10545 = load i32, i32* %10544, align 4
  %10546 = icmp sgt i32 %10545, 0
  br i1 %10546, label %10556, label %10549

10547:                                            ; preds = %10598
  %10548 = load i32, i32* %10529, align 8
  br label %10549

10549:                                            ; preds = %10547, %10538
  %10550 = phi i32 [ %10539, %10538 ], [ %10548, %10547 ]
  %10551 = phi %"class.blink::IntRect"* [ %10540, %10538 ], [ %10599, %10547 ]
  %10552 = phi %"class.blink::IntRect"* [ %10541, %10538 ], [ %10599, %10547 ]
  %10553 = phi i32* [ %10543, %10538 ], [ %10600, %10547 ]
  %10554 = add nuw nsw i32 %10542, 1
  %10555 = icmp slt i32 %10554, %10550
  br i1 %10555, label %10538, label %10605

10556:                                            ; preds = %10538, %10598
  %10557 = phi %"class.blink::IntRect"* [ %10599, %10598 ], [ %10540, %10538 ]
  %10558 = phi %"class.blink::IntRect"* [ %10599, %10598 ], [ %10541, %10538 ]
  %10559 = phi i32 [ %10601, %10598 ], [ 0, %10538 ]
  %10560 = phi i32* [ %10600, %10598 ], [ %10543, %10538 ]
  %10561 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10558, i64 0, i32 1, i32 0
  %10562 = load i32, i32* %10561, align 4
  %10563 = icmp eq i32 %10562, 0
  br i1 %10563, label %10598, label %10564

10564:                                            ; preds = %10556
  %10565 = load i32*, i32** %10537, align 8
  br label %10566

10566:                                            ; preds = %10566, %10564
  %10567 = phi i32* [ %10592, %10566 ], [ %10565, %10564 ]
  %10568 = phi i32 [ %10594, %10566 ], [ 0, %10564 ]
  %10569 = phi i32* [ %10593, %10566 ], [ %10560, %10564 ]
  %10570 = getelementptr inbounds i32, i32* %10567, i64 3
  %10571 = load i32, i32* %10570, align 4
  %10572 = uitofp i32 %10571 to double
  %10573 = fdiv double %10572, 0x41EFFFFFFFE00000
  %10574 = load i32, i32* %10567, align 4
  %10575 = uitofp i32 %10574 to double
  %10576 = fmul double %10573, %10575
  %10577 = fptoui double %10576 to i32
  store i32 %10577, i32* %10569, align 4
  %10578 = getelementptr inbounds i32, i32* %10567, i64 1
  %10579 = load i32, i32* %10578, align 4
  %10580 = uitofp i32 %10579 to double
  %10581 = fmul double %10573, %10580
  %10582 = fptoui double %10581 to i32
  %10583 = getelementptr inbounds i32, i32* %10569, i64 1
  store i32 %10582, i32* %10583, align 4
  %10584 = getelementptr inbounds i32, i32* %10567, i64 2
  %10585 = load i32, i32* %10584, align 4
  %10586 = uitofp i32 %10585 to double
  %10587 = fmul double %10573, %10586
  %10588 = fptoui double %10587 to i32
  %10589 = getelementptr inbounds i32, i32* %10569, i64 2
  store i32 %10588, i32* %10589, align 4
  %10590 = load i32, i32* %10570, align 4
  %10591 = getelementptr inbounds i32, i32* %10569, i64 3
  store i32 %10590, i32* %10591, align 4
  %10592 = getelementptr inbounds i32, i32* %10567, i64 4
  %10593 = getelementptr inbounds i32, i32* %10569, i64 4
  %10594 = add nuw i32 %10568, 1
  %10595 = icmp eq i32 %10594, %10562
  br i1 %10595, label %10596, label %10566

10596:                                            ; preds = %10566
  %10597 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10527, align 8
  br label %10598

10598:                                            ; preds = %10596, %10556
  %10599 = phi %"class.blink::IntRect"* [ %10597, %10596 ], [ %10557, %10556 ]
  %10600 = getelementptr inbounds i32, i32* %10560, i64 %10526
  %10601 = add nuw nsw i32 %10559, 1
  %10602 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10599, i64 0, i32 1, i32 1
  %10603 = load i32, i32* %10602, align 4
  %10604 = icmp slt i32 %10601, %10603
  br i1 %10604, label %10556, label %10547

10605:                                            ; preds = %10549, %10522
  %10606 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10606, align 4
  br label %13459

10607:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10608
    i32 1, label %10610
  ]

10608:                                            ; preds = %10607
  %10609 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10609, align 4
  br label %13459

10610:                                            ; preds = %10607
  %10611 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10612 = load i32, i32* %10611, align 8
  %10613 = sdiv i32 %10612, 4
  %10614 = sext i32 %10613 to i64
  %10615 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10616 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10615, align 8
  %10617 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10618 = load i32, i32* %10617, align 8
  %10619 = icmp sgt i32 %10618, 0
  br i1 %10619, label %10620, label %10700

10620:                                            ; preds = %10610
  %10621 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10622 = bitcast i8** %10621 to i32**
  %10623 = load i32*, i32** %10622, align 8
  %10624 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10625 = bitcast i8** %10624 to i32**
  br label %10626

10626:                                            ; preds = %10637, %10620
  %10627 = phi i32 [ %10618, %10620 ], [ %10638, %10637 ]
  %10628 = phi %"class.blink::IntRect"* [ %10616, %10620 ], [ %10639, %10637 ]
  %10629 = phi %"class.blink::IntRect"* [ %10616, %10620 ], [ %10640, %10637 ]
  %10630 = phi i32 [ 0, %10620 ], [ %10642, %10637 ]
  %10631 = phi i32* [ %10623, %10620 ], [ %10641, %10637 ]
  %10632 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10629, i64 0, i32 1, i32 1
  %10633 = load i32, i32* %10632, align 4
  %10634 = icmp sgt i32 %10633, 0
  br i1 %10634, label %10644, label %10637

10635:                                            ; preds = %10693
  %10636 = load i32, i32* %10617, align 8
  br label %10637

10637:                                            ; preds = %10635, %10626
  %10638 = phi i32 [ %10627, %10626 ], [ %10636, %10635 ]
  %10639 = phi %"class.blink::IntRect"* [ %10628, %10626 ], [ %10694, %10635 ]
  %10640 = phi %"class.blink::IntRect"* [ %10629, %10626 ], [ %10694, %10635 ]
  %10641 = phi i32* [ %10631, %10626 ], [ %10695, %10635 ]
  %10642 = add nuw nsw i32 %10630, 1
  %10643 = icmp slt i32 %10642, %10638
  br i1 %10643, label %10626, label %10700

10644:                                            ; preds = %10626, %10693
  %10645 = phi %"class.blink::IntRect"* [ %10694, %10693 ], [ %10628, %10626 ]
  %10646 = phi %"class.blink::IntRect"* [ %10694, %10693 ], [ %10629, %10626 ]
  %10647 = phi i32 [ %10696, %10693 ], [ 0, %10626 ]
  %10648 = phi i32* [ %10695, %10693 ], [ %10631, %10626 ]
  %10649 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10646, i64 0, i32 1, i32 0
  %10650 = load i32, i32* %10649, align 4
  %10651 = icmp eq i32 %10650, 0
  br i1 %10651, label %10693, label %10652

10652:                                            ; preds = %10644
  %10653 = load i32*, i32** %10625, align 8
  br label %10654

10654:                                            ; preds = %10654, %10652
  %10655 = phi i32* [ %10687, %10654 ], [ %10653, %10652 ]
  %10656 = phi i32 [ %10689, %10654 ], [ 0, %10652 ]
  %10657 = phi i32* [ %10688, %10654 ], [ %10648, %10652 ]
  %10658 = getelementptr inbounds i32, i32* %10655, i64 3
  %10659 = load i32, i32* %10658, align 4
  %10660 = icmp eq i32 %10659, -2147483648
  %10661 = select i1 %10660, i32 -2147483647, i32 %10659
  %10662 = getelementptr inbounds i32, i32* %10657, i64 3
  store i32 %10661, i32* %10662, align 4
  %10663 = sitofp i32 %10661 to double
  %10664 = fdiv double %10663, 0x41DFFFFFFFC00000
  %10665 = load i32, i32* %10655, align 4
  %10666 = icmp eq i32 %10665, -2147483648
  %10667 = select i1 %10666, i32 -2147483647, i32 %10665
  %10668 = sitofp i32 %10667 to double
  %10669 = fmul double %10664, %10668
  %10670 = fptosi double %10669 to i32
  store i32 %10670, i32* %10657, align 4
  %10671 = getelementptr inbounds i32, i32* %10655, i64 1
  %10672 = load i32, i32* %10671, align 4
  %10673 = icmp eq i32 %10672, -2147483648
  %10674 = select i1 %10673, i32 -2147483647, i32 %10672
  %10675 = sitofp i32 %10674 to double
  %10676 = fmul double %10664, %10675
  %10677 = fptosi double %10676 to i32
  %10678 = getelementptr inbounds i32, i32* %10657, i64 1
  store i32 %10677, i32* %10678, align 4
  %10679 = getelementptr inbounds i32, i32* %10655, i64 2
  %10680 = load i32, i32* %10679, align 4
  %10681 = icmp eq i32 %10680, -2147483648
  %10682 = select i1 %10681, i32 -2147483647, i32 %10680
  %10683 = sitofp i32 %10682 to double
  %10684 = fmul double %10664, %10683
  %10685 = fptosi double %10684 to i32
  %10686 = getelementptr inbounds i32, i32* %10657, i64 2
  store i32 %10685, i32* %10686, align 4
  %10687 = getelementptr inbounds i32, i32* %10655, i64 4
  %10688 = getelementptr inbounds i32, i32* %10657, i64 4
  %10689 = add nuw i32 %10656, 1
  %10690 = icmp eq i32 %10689, %10650
  br i1 %10690, label %10691, label %10654

10691:                                            ; preds = %10654
  %10692 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10615, align 8
  br label %10693

10693:                                            ; preds = %10691, %10644
  %10694 = phi %"class.blink::IntRect"* [ %10692, %10691 ], [ %10645, %10644 ]
  %10695 = getelementptr inbounds i32, i32* %10648, i64 %10614
  %10696 = add nuw nsw i32 %10647, 1
  %10697 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10694, i64 0, i32 1, i32 1
  %10698 = load i32, i32* %10697, align 4
  %10699 = icmp slt i32 %10696, %10698
  br i1 %10699, label %10644, label %10635

10700:                                            ; preds = %10637, %10610
  %10701 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10701, align 4
  br label %13459

10702:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %10703
    i32 1, label %10975
    i32 2, label %11253
  ]

10703:                                            ; preds = %10702
  %10704 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10705 = load i32, i32* %10704, align 8
  %10706 = sdiv i32 %10705, 2
  %10707 = sext i32 %10706 to i64
  %10708 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10709 = load i32, i32* %10708, align 8
  %10710 = sdiv i32 %10709, 4
  %10711 = sext i32 %10710 to i64
  %10712 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10713 = load i8*, i8** %10712, align 8
  %10714 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10715 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10714, align 8
  %10716 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10715, i64 0, i32 0, i32 1
  %10717 = load i32, i32* %10716, align 4
  %10718 = mul nsw i32 %10717, %10705
  %10719 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10720 = load i32, i32* %10719, align 4
  %10721 = add nsw i32 %10718, %10720
  %10722 = sext i32 %10721 to i64
  %10723 = getelementptr inbounds i8, i8* %10713, i64 %10722
  %10724 = bitcast i8* %10723 to i16*
  %10725 = icmp slt i32 %10709, 0
  %10726 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10727 = load i32, i32* %10726, align 8
  %10728 = icmp sgt i32 %10727, 1
  %10729 = and i1 %10725, %10728
  br i1 %10729, label %10730, label %10740

10730:                                            ; preds = %10703
  %10731 = add nsw i32 %10727, -1
  %10732 = sext i32 %10731 to i64
  %10733 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %10734 = load i32, i32* %10733, align 4
  %10735 = sext i32 %10734 to i64
  %10736 = mul nsw i64 %10707, %10732
  %10737 = mul i64 %10736, %10735
  %10738 = sub i64 0, %10737
  %10739 = getelementptr inbounds i16, i16* %10724, i64 %10738
  br label %10742

10740:                                            ; preds = %10703
  %10741 = icmp sgt i32 %10727, 0
  br i1 %10741, label %10742, label %10973

10742:                                            ; preds = %10740, %10730
  %10743 = phi i16* [ %10739, %10730 ], [ %10724, %10740 ]
  %10744 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %10745 = bitcast i8** %10744 to i32**
  %10746 = load i32*, i32** %10745, align 8
  %10747 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %10748 = bitcast i8** %10747 to float**
  %10749 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %10750

10750:                                            ; preds = %10762, %10742
  %10751 = phi i32 [ %10727, %10742 ], [ %10763, %10762 ]
  %10752 = phi %"class.blink::IntRect"* [ %10715, %10742 ], [ %10764, %10762 ]
  %10753 = phi %"class.blink::IntRect"* [ %10715, %10742 ], [ %10765, %10762 ]
  %10754 = phi i32 [ 0, %10742 ], [ %10774, %10762 ]
  %10755 = phi i32* [ %10746, %10742 ], [ %10767, %10762 ]
  %10756 = phi i16* [ %10743, %10742 ], [ %10773, %10762 ]
  %10757 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10753, i64 0, i32 1, i32 1
  %10758 = load i32, i32* %10757, align 4
  %10759 = icmp sgt i32 %10758, 0
  br i1 %10759, label %10776, label %10762

10760:                                            ; preds = %10964
  %10761 = load i32, i32* %10726, align 8
  br label %10762

10762:                                            ; preds = %10760, %10750
  %10763 = phi i32 [ %10751, %10750 ], [ %10761, %10760 ]
  %10764 = phi %"class.blink::IntRect"* [ %10752, %10750 ], [ %10965, %10760 ]
  %10765 = phi %"class.blink::IntRect"* [ %10753, %10750 ], [ %10965, %10760 ]
  %10766 = phi i16* [ %10756, %10750 ], [ %10966, %10760 ]
  %10767 = phi i32* [ %10755, %10750 ], [ %10967, %10760 ]
  %10768 = phi i32 [ %10758, %10750 ], [ %10970, %10760 ]
  %10769 = load i32, i32* %10749, align 4
  %10770 = sub nsw i32 %10769, %10768
  %10771 = sext i32 %10770 to i64
  %10772 = mul nsw i64 %10771, %10707
  %10773 = getelementptr inbounds i16, i16* %10766, i64 %10772
  %10774 = add nuw nsw i32 %10754, 1
  %10775 = icmp slt i32 %10774, %10763
  br i1 %10775, label %10750, label %10973

10776:                                            ; preds = %10750, %10964
  %10777 = phi i64 [ %10972, %10964 ], [ 0, %10750 ]
  %10778 = phi %"class.blink::IntRect"* [ %10965, %10964 ], [ %10752, %10750 ]
  %10779 = phi %"class.blink::IntRect"* [ %10965, %10964 ], [ %10753, %10750 ]
  %10780 = phi i32 [ %10968, %10964 ], [ 0, %10750 ]
  %10781 = phi i32* [ %10967, %10964 ], [ %10755, %10750 ]
  %10782 = phi i16* [ %10966, %10964 ], [ %10756, %10750 ]
  %10783 = mul i64 %10777, %10711
  %10784 = getelementptr i32, i32* %10755, i64 %10783
  %10785 = add i64 %10783, 1
  %10786 = getelementptr i32, i32* %10755, i64 %10785
  %10787 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10779, i64 0, i32 1, i32 0
  %10788 = load i32, i32* %10787, align 4
  %10789 = icmp eq i32 %10788, 0
  br i1 %10789, label %10964, label %10790

10790:                                            ; preds = %10776
  %10791 = load float*, float** %10748, align 8
  br label %10792

10792:                                            ; preds = %10792, %10790
  %10793 = phi i32 [ %10868, %10792 ], [ 0, %10790 ]
  %10794 = phi i16* [ %10866, %10792 ], [ %10782, %10790 ]
  %10795 = phi float* [ %10867, %10792 ], [ %10791, %10790 ]
  %10796 = load i16, i16* %10794, align 2
  %10797 = zext i16 %10796 to i32
  %10798 = lshr i32 %10797, 10
  %10799 = zext i32 %10798 to i64
  %10800 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10799
  %10801 = load i16, i16* %10800, align 2
  %10802 = zext i16 %10801 to i32
  %10803 = and i32 %10797, 1023
  %10804 = add nuw nsw i32 %10803, %10802
  %10805 = zext i32 %10804 to i64
  %10806 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10805
  %10807 = load i32, i32* %10806, align 4
  %10808 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10799
  %10809 = load i32, i32* %10808, align 4
  %10810 = add i32 %10809, %10807
  %10811 = bitcast float* %10795 to i32*
  store i32 %10810, i32* %10811, align 4
  %10812 = getelementptr inbounds i16, i16* %10794, i64 1
  %10813 = load i16, i16* %10812, align 2
  %10814 = zext i16 %10813 to i32
  %10815 = lshr i32 %10814, 10
  %10816 = zext i32 %10815 to i64
  %10817 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10816
  %10818 = load i16, i16* %10817, align 2
  %10819 = zext i16 %10818 to i32
  %10820 = and i32 %10814, 1023
  %10821 = add nuw nsw i32 %10820, %10819
  %10822 = zext i32 %10821 to i64
  %10823 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10822
  %10824 = load i32, i32* %10823, align 4
  %10825 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10816
  %10826 = load i32, i32* %10825, align 4
  %10827 = add i32 %10826, %10824
  %10828 = getelementptr inbounds float, float* %10795, i64 1
  %10829 = bitcast float* %10828 to i32*
  store i32 %10827, i32* %10829, align 4
  %10830 = getelementptr inbounds i16, i16* %10794, i64 2
  %10831 = load i16, i16* %10830, align 2
  %10832 = zext i16 %10831 to i32
  %10833 = lshr i32 %10832, 10
  %10834 = zext i32 %10833 to i64
  %10835 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10834
  %10836 = load i16, i16* %10835, align 2
  %10837 = zext i16 %10836 to i32
  %10838 = and i32 %10832, 1023
  %10839 = add nuw nsw i32 %10838, %10837
  %10840 = zext i32 %10839 to i64
  %10841 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10840
  %10842 = load i32, i32* %10841, align 4
  %10843 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10834
  %10844 = load i32, i32* %10843, align 4
  %10845 = add i32 %10844, %10842
  %10846 = getelementptr inbounds float, float* %10795, i64 2
  %10847 = bitcast float* %10846 to i32*
  store i32 %10845, i32* %10847, align 4
  %10848 = getelementptr inbounds i16, i16* %10794, i64 3
  %10849 = load i16, i16* %10848, align 2
  %10850 = zext i16 %10849 to i32
  %10851 = lshr i32 %10850, 10
  %10852 = zext i32 %10851 to i64
  %10853 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %10852
  %10854 = load i16, i16* %10853, align 2
  %10855 = zext i16 %10854 to i32
  %10856 = and i32 %10850, 1023
  %10857 = add nuw nsw i32 %10856, %10855
  %10858 = zext i32 %10857 to i64
  %10859 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %10858
  %10860 = load i32, i32* %10859, align 4
  %10861 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %10852
  %10862 = load i32, i32* %10861, align 4
  %10863 = add i32 %10862, %10860
  %10864 = getelementptr inbounds float, float* %10795, i64 3
  %10865 = bitcast float* %10864 to i32*
  store i32 %10863, i32* %10865, align 4
  %10866 = getelementptr inbounds i16, i16* %10794, i64 4
  %10867 = getelementptr inbounds float, float* %10795, i64 4
  %10868 = add nuw i32 %10793, 1
  %10869 = icmp eq i32 %10868, %10788
  br i1 %10869, label %10870, label %10792

10870:                                            ; preds = %10792
  %10871 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10714, align 8
  %10872 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10871, i64 0, i32 1, i32 0
  %10873 = load i32, i32* %10872, align 4
  %10874 = icmp eq i32 %10873, 0
  br i1 %10874, label %10964, label %10875

10875:                                            ; preds = %10870
  %10876 = load float*, float** %10748, align 8
  %10877 = add i32 %10873, -1
  %10878 = zext i32 %10877 to i64
  %10879 = add nuw nsw i64 %10878, 1
  %10880 = icmp ult i64 %10879, 4
  br i1 %10880, label %10929, label %10881

10881:                                            ; preds = %10875
  %10882 = add i32 %10873, -1
  %10883 = zext i32 %10882 to i64
  %10884 = getelementptr i32, i32* %10786, i64 %10883
  %10885 = getelementptr float, float* %10876, i64 4
  %10886 = shl nuw nsw i64 %10883, 2
  %10887 = getelementptr float, float* %10885, i64 %10886
  %10888 = bitcast float* %10887 to i32*
  %10889 = icmp ult i32* %10784, %10888
  %10890 = bitcast i32* %10884 to float*
  %10891 = icmp ult float* %10876, %10890
  %10892 = and i1 %10889, %10891
  br i1 %10892, label %10929, label %10893

10893:                                            ; preds = %10881
  %10894 = and i64 %10879, 8589934588
  %10895 = shl nuw nsw i64 %10894, 2
  %10896 = getelementptr float, float* %10876, i64 %10895
  %10897 = getelementptr i32, i32* %10781, i64 %10894
  %10898 = trunc i64 %10894 to i32
  br label %10899

10899:                                            ; preds = %10899, %10893
  %10900 = phi i64 [ 0, %10893 ], [ %10925, %10899 ]
  %10901 = shl i64 %10900, 2
  %10902 = getelementptr float, float* %10876, i64 %10901
  %10903 = getelementptr i32, i32* %10781, i64 %10900
  %10904 = bitcast float* %10902 to <16 x float>*
  %10905 = load <16 x float>, <16 x float>* %10904, align 4
  %10906 = shufflevector <16 x float> %10905, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %10907 = shufflevector <16 x float> %10905, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %10908 = shufflevector <16 x float> %10905, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %10909 = shufflevector <16 x float> %10905, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %10910 = fmul <4 x float> %10906, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %10911 = fptoui <4 x float> %10910 to <4 x i32>
  %10912 = fmul <4 x float> %10907, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %10913 = fptoui <4 x float> %10912 to <4 x i32>
  %10914 = fmul <4 x float> %10908, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %10915 = fptoui <4 x float> %10914 to <4 x i32>
  %10916 = fmul <4 x float> %10909, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %10917 = fptoui <4 x float> %10916 to <4 x i32>
  %10918 = shl <4 x i32> %10917, <i32 30, i32 30, i32 30, i32 30>
  %10919 = shl <4 x i32> %10915, <i32 20, i32 20, i32 20, i32 20>
  %10920 = shl <4 x i32> %10913, <i32 10, i32 10, i32 10, i32 10>
  %10921 = or <4 x i32> %10920, %10911
  %10922 = or <4 x i32> %10921, %10919
  %10923 = or <4 x i32> %10922, %10918
  %10924 = bitcast i32* %10903 to <4 x i32>*
  store <4 x i32> %10923, <4 x i32>* %10924, align 4, !alias.scope !746, !noalias !749
  %10925 = add i64 %10900, 4
  %10926 = icmp eq i64 %10925, %10894
  br i1 %10926, label %10927, label %10899, !llvm.loop !751

10927:                                            ; preds = %10899
  %10928 = icmp eq i64 %10879, %10894
  br i1 %10928, label %10962, label %10929

10929:                                            ; preds = %10927, %10881, %10875
  %10930 = phi float* [ %10876, %10881 ], [ %10876, %10875 ], [ %10896, %10927 ]
  %10931 = phi i32* [ %10781, %10881 ], [ %10781, %10875 ], [ %10897, %10927 ]
  %10932 = phi i32 [ 0, %10881 ], [ 0, %10875 ], [ %10898, %10927 ]
  br label %10933

10933:                                            ; preds = %10929, %10933
  %10934 = phi float* [ %10958, %10933 ], [ %10930, %10929 ]
  %10935 = phi i32* [ %10959, %10933 ], [ %10931, %10929 ]
  %10936 = phi i32 [ %10960, %10933 ], [ %10932, %10929 ]
  %10937 = load float, float* %10934, align 4
  %10938 = fmul float %10937, 1.023000e+03
  %10939 = fptoui float %10938 to i32
  %10940 = getelementptr inbounds float, float* %10934, i64 1
  %10941 = load float, float* %10940, align 4
  %10942 = fmul float %10941, 1.023000e+03
  %10943 = fptoui float %10942 to i32
  %10944 = getelementptr inbounds float, float* %10934, i64 2
  %10945 = load float, float* %10944, align 4
  %10946 = fmul float %10945, 1.023000e+03
  %10947 = fptoui float %10946 to i32
  %10948 = getelementptr inbounds float, float* %10934, i64 3
  %10949 = load float, float* %10948, align 4
  %10950 = fmul float %10949, 3.000000e+00
  %10951 = fptoui float %10950 to i32
  %10952 = shl i32 %10951, 30
  %10953 = shl i32 %10947, 20
  %10954 = shl i32 %10943, 10
  %10955 = or i32 %10954, %10939
  %10956 = or i32 %10955, %10953
  %10957 = or i32 %10956, %10952
  store i32 %10957, i32* %10935, align 4
  %10958 = getelementptr inbounds float, float* %10934, i64 4
  %10959 = getelementptr inbounds i32, i32* %10935, i64 1
  %10960 = add nuw i32 %10936, 1
  %10961 = icmp eq i32 %10960, %10873
  br i1 %10961, label %10962, label %10933, !llvm.loop !752

10962:                                            ; preds = %10933, %10927
  %10963 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10714, align 8
  br label %10964

10964:                                            ; preds = %10962, %10870, %10776
  %10965 = phi %"class.blink::IntRect"* [ %10963, %10962 ], [ %10871, %10870 ], [ %10778, %10776 ]
  %10966 = getelementptr inbounds i16, i16* %10782, i64 %10707
  %10967 = getelementptr inbounds i32, i32* %10781, i64 %10711
  %10968 = add nuw nsw i32 %10780, 1
  %10969 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10965, i64 0, i32 1, i32 1
  %10970 = load i32, i32* %10969, align 4
  %10971 = icmp slt i32 %10968, %10970
  %10972 = add i64 %10777, 1
  br i1 %10971, label %10776, label %10760

10973:                                            ; preds = %10762, %10740
  %10974 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %10974, align 4
  br label %13459

10975:                                            ; preds = %10702
  %10976 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %10977 = load i32, i32* %10976, align 8
  %10978 = sdiv i32 %10977, 2
  %10979 = sext i32 %10978 to i64
  %10980 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %10981 = load i32, i32* %10980, align 8
  %10982 = sdiv i32 %10981, 4
  %10983 = sext i32 %10982 to i64
  %10984 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %10985 = load i8*, i8** %10984, align 8
  %10986 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %10987 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10986, align 8
  %10988 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %10987, i64 0, i32 0, i32 1
  %10989 = load i32, i32* %10988, align 4
  %10990 = mul nsw i32 %10989, %10977
  %10991 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %10992 = load i32, i32* %10991, align 4
  %10993 = add nsw i32 %10990, %10992
  %10994 = sext i32 %10993 to i64
  %10995 = getelementptr inbounds i8, i8* %10985, i64 %10994
  %10996 = bitcast i8* %10995 to i16*
  %10997 = icmp slt i32 %10981, 0
  %10998 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %10999 = load i32, i32* %10998, align 8
  %11000 = icmp sgt i32 %10999, 1
  %11001 = and i1 %10997, %11000
  br i1 %11001, label %11002, label %11012

11002:                                            ; preds = %10975
  %11003 = add nsw i32 %10999, -1
  %11004 = sext i32 %11003 to i64
  %11005 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11006 = load i32, i32* %11005, align 4
  %11007 = sext i32 %11006 to i64
  %11008 = mul nsw i64 %10979, %11004
  %11009 = mul i64 %11008, %11007
  %11010 = sub i64 0, %11009
  %11011 = getelementptr inbounds i16, i16* %10996, i64 %11010
  br label %11014

11012:                                            ; preds = %10975
  %11013 = icmp sgt i32 %10999, 0
  br i1 %11013, label %11014, label %11251

11014:                                            ; preds = %11012, %11002
  %11015 = phi i16* [ %11011, %11002 ], [ %10996, %11012 ]
  %11016 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11017 = bitcast i8** %11016 to i32**
  %11018 = load i32*, i32** %11017, align 8
  %11019 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11020 = bitcast i8** %11019 to float**
  %11021 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11022

11022:                                            ; preds = %11034, %11014
  %11023 = phi i32 [ %10999, %11014 ], [ %11035, %11034 ]
  %11024 = phi %"class.blink::IntRect"* [ %10987, %11014 ], [ %11036, %11034 ]
  %11025 = phi %"class.blink::IntRect"* [ %10987, %11014 ], [ %11037, %11034 ]
  %11026 = phi i32 [ 0, %11014 ], [ %11046, %11034 ]
  %11027 = phi i32* [ %11018, %11014 ], [ %11039, %11034 ]
  %11028 = phi i16* [ %11015, %11014 ], [ %11045, %11034 ]
  %11029 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11025, i64 0, i32 1, i32 1
  %11030 = load i32, i32* %11029, align 4
  %11031 = icmp sgt i32 %11030, 0
  br i1 %11031, label %11048, label %11034

11032:                                            ; preds = %11242
  %11033 = load i32, i32* %10998, align 8
  br label %11034

11034:                                            ; preds = %11032, %11022
  %11035 = phi i32 [ %11023, %11022 ], [ %11033, %11032 ]
  %11036 = phi %"class.blink::IntRect"* [ %11024, %11022 ], [ %11243, %11032 ]
  %11037 = phi %"class.blink::IntRect"* [ %11025, %11022 ], [ %11243, %11032 ]
  %11038 = phi i16* [ %11028, %11022 ], [ %11244, %11032 ]
  %11039 = phi i32* [ %11027, %11022 ], [ %11245, %11032 ]
  %11040 = phi i32 [ %11030, %11022 ], [ %11248, %11032 ]
  %11041 = load i32, i32* %11021, align 4
  %11042 = sub nsw i32 %11041, %11040
  %11043 = sext i32 %11042 to i64
  %11044 = mul nsw i64 %11043, %10979
  %11045 = getelementptr inbounds i16, i16* %11038, i64 %11044
  %11046 = add nuw nsw i32 %11026, 1
  %11047 = icmp slt i32 %11046, %11035
  br i1 %11047, label %11022, label %11251

11048:                                            ; preds = %11022, %11242
  %11049 = phi i64 [ %11250, %11242 ], [ 0, %11022 ]
  %11050 = phi %"class.blink::IntRect"* [ %11243, %11242 ], [ %11024, %11022 ]
  %11051 = phi %"class.blink::IntRect"* [ %11243, %11242 ], [ %11025, %11022 ]
  %11052 = phi i32 [ %11246, %11242 ], [ 0, %11022 ]
  %11053 = phi i32* [ %11245, %11242 ], [ %11027, %11022 ]
  %11054 = phi i16* [ %11244, %11242 ], [ %11028, %11022 ]
  %11055 = mul i64 %11049, %10983
  %11056 = getelementptr i32, i32* %11027, i64 %11055
  %11057 = add i64 %11055, 1
  %11058 = getelementptr i32, i32* %11027, i64 %11057
  %11059 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11051, i64 0, i32 1, i32 0
  %11060 = load i32, i32* %11059, align 4
  %11061 = icmp eq i32 %11060, 0
  br i1 %11061, label %11242, label %11062

11062:                                            ; preds = %11048
  %11063 = load float*, float** %11020, align 8
  br label %11064

11064:                                            ; preds = %11064, %11062
  %11065 = phi i32 [ %11140, %11064 ], [ 0, %11062 ]
  %11066 = phi i16* [ %11138, %11064 ], [ %11054, %11062 ]
  %11067 = phi float* [ %11139, %11064 ], [ %11063, %11062 ]
  %11068 = load i16, i16* %11066, align 2
  %11069 = zext i16 %11068 to i32
  %11070 = lshr i32 %11069, 10
  %11071 = zext i32 %11070 to i64
  %11072 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11071
  %11073 = load i16, i16* %11072, align 2
  %11074 = zext i16 %11073 to i32
  %11075 = and i32 %11069, 1023
  %11076 = add nuw nsw i32 %11075, %11074
  %11077 = zext i32 %11076 to i64
  %11078 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11077
  %11079 = load i32, i32* %11078, align 4
  %11080 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11071
  %11081 = load i32, i32* %11080, align 4
  %11082 = add i32 %11081, %11079
  %11083 = bitcast float* %11067 to i32*
  store i32 %11082, i32* %11083, align 4
  %11084 = getelementptr inbounds i16, i16* %11066, i64 1
  %11085 = load i16, i16* %11084, align 2
  %11086 = zext i16 %11085 to i32
  %11087 = lshr i32 %11086, 10
  %11088 = zext i32 %11087 to i64
  %11089 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11088
  %11090 = load i16, i16* %11089, align 2
  %11091 = zext i16 %11090 to i32
  %11092 = and i32 %11086, 1023
  %11093 = add nuw nsw i32 %11092, %11091
  %11094 = zext i32 %11093 to i64
  %11095 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11094
  %11096 = load i32, i32* %11095, align 4
  %11097 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11088
  %11098 = load i32, i32* %11097, align 4
  %11099 = add i32 %11098, %11096
  %11100 = getelementptr inbounds float, float* %11067, i64 1
  %11101 = bitcast float* %11100 to i32*
  store i32 %11099, i32* %11101, align 4
  %11102 = getelementptr inbounds i16, i16* %11066, i64 2
  %11103 = load i16, i16* %11102, align 2
  %11104 = zext i16 %11103 to i32
  %11105 = lshr i32 %11104, 10
  %11106 = zext i32 %11105 to i64
  %11107 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11106
  %11108 = load i16, i16* %11107, align 2
  %11109 = zext i16 %11108 to i32
  %11110 = and i32 %11104, 1023
  %11111 = add nuw nsw i32 %11110, %11109
  %11112 = zext i32 %11111 to i64
  %11113 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11112
  %11114 = load i32, i32* %11113, align 4
  %11115 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11106
  %11116 = load i32, i32* %11115, align 4
  %11117 = add i32 %11116, %11114
  %11118 = getelementptr inbounds float, float* %11067, i64 2
  %11119 = bitcast float* %11118 to i32*
  store i32 %11117, i32* %11119, align 4
  %11120 = getelementptr inbounds i16, i16* %11066, i64 3
  %11121 = load i16, i16* %11120, align 2
  %11122 = zext i16 %11121 to i32
  %11123 = lshr i32 %11122, 10
  %11124 = zext i32 %11123 to i64
  %11125 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11124
  %11126 = load i16, i16* %11125, align 2
  %11127 = zext i16 %11126 to i32
  %11128 = and i32 %11122, 1023
  %11129 = add nuw nsw i32 %11128, %11127
  %11130 = zext i32 %11129 to i64
  %11131 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11130
  %11132 = load i32, i32* %11131, align 4
  %11133 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11124
  %11134 = load i32, i32* %11133, align 4
  %11135 = add i32 %11134, %11132
  %11136 = getelementptr inbounds float, float* %11067, i64 3
  %11137 = bitcast float* %11136 to i32*
  store i32 %11135, i32* %11137, align 4
  %11138 = getelementptr inbounds i16, i16* %11066, i64 4
  %11139 = getelementptr inbounds float, float* %11067, i64 4
  %11140 = add nuw i32 %11065, 1
  %11141 = icmp eq i32 %11140, %11060
  br i1 %11141, label %11142, label %11064

11142:                                            ; preds = %11064
  %11143 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10986, align 8
  %11144 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11143, i64 0, i32 1, i32 0
  %11145 = load i32, i32* %11144, align 4
  %11146 = icmp eq i32 %11145, 0
  br i1 %11146, label %11242, label %11147

11147:                                            ; preds = %11142
  %11148 = load float*, float** %11020, align 8
  %11149 = add i32 %11145, -1
  %11150 = zext i32 %11149 to i64
  %11151 = add nuw nsw i64 %11150, 1
  %11152 = icmp ult i64 %11151, 4
  br i1 %11152, label %11204, label %11153

11153:                                            ; preds = %11147
  %11154 = add i32 %11145, -1
  %11155 = zext i32 %11154 to i64
  %11156 = getelementptr i32, i32* %11058, i64 %11155
  %11157 = getelementptr float, float* %11148, i64 4
  %11158 = shl nuw nsw i64 %11155, 2
  %11159 = getelementptr float, float* %11157, i64 %11158
  %11160 = bitcast float* %11159 to i32*
  %11161 = icmp ult i32* %11056, %11160
  %11162 = bitcast i32* %11156 to float*
  %11163 = icmp ult float* %11148, %11162
  %11164 = and i1 %11161, %11163
  br i1 %11164, label %11204, label %11165

11165:                                            ; preds = %11153
  %11166 = and i64 %11151, 8589934588
  %11167 = shl nuw nsw i64 %11166, 2
  %11168 = getelementptr float, float* %11148, i64 %11167
  %11169 = getelementptr i32, i32* %11053, i64 %11166
  %11170 = trunc i64 %11166 to i32
  br label %11171

11171:                                            ; preds = %11171, %11165
  %11172 = phi i64 [ 0, %11165 ], [ %11200, %11171 ]
  %11173 = shl i64 %11172, 2
  %11174 = getelementptr float, float* %11148, i64 %11173
  %11175 = getelementptr i32, i32* %11053, i64 %11172
  %11176 = bitcast float* %11174 to <16 x float>*
  %11177 = load <16 x float>, <16 x float>* %11176, align 4
  %11178 = shufflevector <16 x float> %11177, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11179 = shufflevector <16 x float> %11177, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11180 = shufflevector <16 x float> %11177, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %11181 = shufflevector <16 x float> %11177, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11182 = fmul <4 x float> %11178, %11181
  %11183 = fmul <4 x float> %11182, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %11184 = fptoui <4 x float> %11183 to <4 x i32>
  %11185 = fmul <4 x float> %11181, %11179
  %11186 = fmul <4 x float> %11185, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %11187 = fptoui <4 x float> %11186 to <4 x i32>
  %11188 = fmul <4 x float> %11181, %11180
  %11189 = fmul <4 x float> %11188, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %11190 = fptoui <4 x float> %11189 to <4 x i32>
  %11191 = fmul <4 x float> %11181, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %11192 = fptoui <4 x float> %11191 to <4 x i32>
  %11193 = shl <4 x i32> %11192, <i32 30, i32 30, i32 30, i32 30>
  %11194 = shl <4 x i32> %11190, <i32 20, i32 20, i32 20, i32 20>
  %11195 = shl <4 x i32> %11187, <i32 10, i32 10, i32 10, i32 10>
  %11196 = or <4 x i32> %11193, %11184
  %11197 = or <4 x i32> %11196, %11195
  %11198 = or <4 x i32> %11197, %11194
  %11199 = bitcast i32* %11175 to <4 x i32>*
  store <4 x i32> %11198, <4 x i32>* %11199, align 4, !alias.scope !753, !noalias !756
  %11200 = add i64 %11172, 4
  %11201 = icmp eq i64 %11200, %11166
  br i1 %11201, label %11202, label %11171, !llvm.loop !758

11202:                                            ; preds = %11171
  %11203 = icmp eq i64 %11151, %11166
  br i1 %11203, label %11240, label %11204

11204:                                            ; preds = %11202, %11153, %11147
  %11205 = phi float* [ %11148, %11153 ], [ %11148, %11147 ], [ %11168, %11202 ]
  %11206 = phi i32* [ %11053, %11153 ], [ %11053, %11147 ], [ %11169, %11202 ]
  %11207 = phi i32 [ 0, %11153 ], [ 0, %11147 ], [ %11170, %11202 ]
  br label %11208

11208:                                            ; preds = %11204, %11208
  %11209 = phi float* [ %11236, %11208 ], [ %11205, %11204 ]
  %11210 = phi i32* [ %11237, %11208 ], [ %11206, %11204 ]
  %11211 = phi i32 [ %11238, %11208 ], [ %11207, %11204 ]
  %11212 = load float, float* %11209, align 4
  %11213 = getelementptr inbounds float, float* %11209, i64 3
  %11214 = load float, float* %11213, align 4
  %11215 = fmul float %11212, %11214
  %11216 = fmul float %11215, 1.023000e+03
  %11217 = fptoui float %11216 to i32
  %11218 = getelementptr inbounds float, float* %11209, i64 1
  %11219 = load float, float* %11218, align 4
  %11220 = fmul float %11214, %11219
  %11221 = fmul float %11220, 1.023000e+03
  %11222 = fptoui float %11221 to i32
  %11223 = getelementptr inbounds float, float* %11209, i64 2
  %11224 = load float, float* %11223, align 4
  %11225 = fmul float %11214, %11224
  %11226 = fmul float %11225, 1.023000e+03
  %11227 = fptoui float %11226 to i32
  %11228 = fmul float %11214, 3.000000e+00
  %11229 = fptoui float %11228 to i32
  %11230 = shl i32 %11229, 30
  %11231 = shl i32 %11227, 20
  %11232 = shl i32 %11222, 10
  %11233 = or i32 %11230, %11217
  %11234 = or i32 %11233, %11232
  %11235 = or i32 %11234, %11231
  store i32 %11235, i32* %11210, align 4
  %11236 = getelementptr inbounds float, float* %11209, i64 4
  %11237 = getelementptr inbounds i32, i32* %11210, i64 1
  %11238 = add nuw i32 %11211, 1
  %11239 = icmp eq i32 %11238, %11145
  br i1 %11239, label %11240, label %11208, !llvm.loop !759

11240:                                            ; preds = %11208, %11202
  %11241 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %10986, align 8
  br label %11242

11242:                                            ; preds = %11240, %11142, %11048
  %11243 = phi %"class.blink::IntRect"* [ %11241, %11240 ], [ %11143, %11142 ], [ %11050, %11048 ]
  %11244 = getelementptr inbounds i16, i16* %11054, i64 %10979
  %11245 = getelementptr inbounds i32, i32* %11053, i64 %10983
  %11246 = add nuw nsw i32 %11052, 1
  %11247 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11243, i64 0, i32 1, i32 1
  %11248 = load i32, i32* %11247, align 4
  %11249 = icmp slt i32 %11246, %11248
  %11250 = add i64 %11049, 1
  br i1 %11249, label %11048, label %11032

11251:                                            ; preds = %11034, %11012
  %11252 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11252, align 4
  br label %13459

11253:                                            ; preds = %10702
  %11254 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11255 = load i32, i32* %11254, align 8
  %11256 = sdiv i32 %11255, 2
  %11257 = sext i32 %11256 to i64
  %11258 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11259 = load i32, i32* %11258, align 8
  %11260 = sdiv i32 %11259, 4
  %11261 = sext i32 %11260 to i64
  %11262 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11263 = load i8*, i8** %11262, align 8
  %11264 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11265 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11264, align 8
  %11266 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11265, i64 0, i32 0, i32 1
  %11267 = load i32, i32* %11266, align 4
  %11268 = mul nsw i32 %11267, %11255
  %11269 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11270 = load i32, i32* %11269, align 4
  %11271 = add nsw i32 %11268, %11270
  %11272 = sext i32 %11271 to i64
  %11273 = getelementptr inbounds i8, i8* %11263, i64 %11272
  %11274 = bitcast i8* %11273 to i16*
  %11275 = icmp slt i32 %11259, 0
  %11276 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11277 = load i32, i32* %11276, align 8
  %11278 = icmp sgt i32 %11277, 1
  %11279 = and i1 %11275, %11278
  br i1 %11279, label %11280, label %11290

11280:                                            ; preds = %11253
  %11281 = add nsw i32 %11277, -1
  %11282 = sext i32 %11281 to i64
  %11283 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11284 = load i32, i32* %11283, align 4
  %11285 = sext i32 %11284 to i64
  %11286 = mul nsw i64 %11257, %11282
  %11287 = mul i64 %11286, %11285
  %11288 = sub i64 0, %11287
  %11289 = getelementptr inbounds i16, i16* %11274, i64 %11288
  br label %11292

11290:                                            ; preds = %11253
  %11291 = icmp sgt i32 %11277, 0
  br i1 %11291, label %11292, label %11529

11292:                                            ; preds = %11290, %11280
  %11293 = phi i16* [ %11289, %11280 ], [ %11274, %11290 ]
  %11294 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11295 = bitcast i8** %11294 to i32**
  %11296 = load i32*, i32** %11295, align 8
  %11297 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11298 = bitcast i8** %11297 to float**
  %11299 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11300

11300:                                            ; preds = %11312, %11292
  %11301 = phi i32 [ %11277, %11292 ], [ %11313, %11312 ]
  %11302 = phi %"class.blink::IntRect"* [ %11265, %11292 ], [ %11314, %11312 ]
  %11303 = phi %"class.blink::IntRect"* [ %11265, %11292 ], [ %11315, %11312 ]
  %11304 = phi i32 [ 0, %11292 ], [ %11324, %11312 ]
  %11305 = phi i32* [ %11296, %11292 ], [ %11317, %11312 ]
  %11306 = phi i16* [ %11293, %11292 ], [ %11323, %11312 ]
  %11307 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11303, i64 0, i32 1, i32 1
  %11308 = load i32, i32* %11307, align 4
  %11309 = icmp sgt i32 %11308, 0
  br i1 %11309, label %11326, label %11312

11310:                                            ; preds = %11520
  %11311 = load i32, i32* %11276, align 8
  br label %11312

11312:                                            ; preds = %11310, %11300
  %11313 = phi i32 [ %11301, %11300 ], [ %11311, %11310 ]
  %11314 = phi %"class.blink::IntRect"* [ %11302, %11300 ], [ %11521, %11310 ]
  %11315 = phi %"class.blink::IntRect"* [ %11303, %11300 ], [ %11521, %11310 ]
  %11316 = phi i16* [ %11306, %11300 ], [ %11522, %11310 ]
  %11317 = phi i32* [ %11305, %11300 ], [ %11523, %11310 ]
  %11318 = phi i32 [ %11308, %11300 ], [ %11526, %11310 ]
  %11319 = load i32, i32* %11299, align 4
  %11320 = sub nsw i32 %11319, %11318
  %11321 = sext i32 %11320 to i64
  %11322 = mul nsw i64 %11321, %11257
  %11323 = getelementptr inbounds i16, i16* %11316, i64 %11322
  %11324 = add nuw nsw i32 %11304, 1
  %11325 = icmp slt i32 %11324, %11313
  br i1 %11325, label %11300, label %11529

11326:                                            ; preds = %11300, %11520
  %11327 = phi i64 [ %11528, %11520 ], [ 0, %11300 ]
  %11328 = phi %"class.blink::IntRect"* [ %11521, %11520 ], [ %11302, %11300 ]
  %11329 = phi %"class.blink::IntRect"* [ %11521, %11520 ], [ %11303, %11300 ]
  %11330 = phi i32 [ %11524, %11520 ], [ 0, %11300 ]
  %11331 = phi i32* [ %11523, %11520 ], [ %11305, %11300 ]
  %11332 = phi i16* [ %11522, %11520 ], [ %11306, %11300 ]
  %11333 = mul i64 %11327, %11261
  %11334 = getelementptr i32, i32* %11305, i64 %11333
  %11335 = add i64 %11333, 1
  %11336 = getelementptr i32, i32* %11305, i64 %11335
  %11337 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11329, i64 0, i32 1, i32 0
  %11338 = load i32, i32* %11337, align 4
  %11339 = icmp eq i32 %11338, 0
  br i1 %11339, label %11520, label %11340

11340:                                            ; preds = %11326
  %11341 = load float*, float** %11298, align 8
  br label %11342

11342:                                            ; preds = %11342, %11340
  %11343 = phi i32 [ %11418, %11342 ], [ 0, %11340 ]
  %11344 = phi i16* [ %11416, %11342 ], [ %11332, %11340 ]
  %11345 = phi float* [ %11417, %11342 ], [ %11341, %11340 ]
  %11346 = load i16, i16* %11344, align 2
  %11347 = zext i16 %11346 to i32
  %11348 = lshr i32 %11347, 10
  %11349 = zext i32 %11348 to i64
  %11350 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11349
  %11351 = load i16, i16* %11350, align 2
  %11352 = zext i16 %11351 to i32
  %11353 = and i32 %11347, 1023
  %11354 = add nuw nsw i32 %11353, %11352
  %11355 = zext i32 %11354 to i64
  %11356 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11355
  %11357 = load i32, i32* %11356, align 4
  %11358 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11349
  %11359 = load i32, i32* %11358, align 4
  %11360 = add i32 %11359, %11357
  %11361 = bitcast float* %11345 to i32*
  store i32 %11360, i32* %11361, align 4
  %11362 = getelementptr inbounds i16, i16* %11344, i64 1
  %11363 = load i16, i16* %11362, align 2
  %11364 = zext i16 %11363 to i32
  %11365 = lshr i32 %11364, 10
  %11366 = zext i32 %11365 to i64
  %11367 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11366
  %11368 = load i16, i16* %11367, align 2
  %11369 = zext i16 %11368 to i32
  %11370 = and i32 %11364, 1023
  %11371 = add nuw nsw i32 %11370, %11369
  %11372 = zext i32 %11371 to i64
  %11373 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11372
  %11374 = load i32, i32* %11373, align 4
  %11375 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11366
  %11376 = load i32, i32* %11375, align 4
  %11377 = add i32 %11376, %11374
  %11378 = getelementptr inbounds float, float* %11345, i64 1
  %11379 = bitcast float* %11378 to i32*
  store i32 %11377, i32* %11379, align 4
  %11380 = getelementptr inbounds i16, i16* %11344, i64 2
  %11381 = load i16, i16* %11380, align 2
  %11382 = zext i16 %11381 to i32
  %11383 = lshr i32 %11382, 10
  %11384 = zext i32 %11383 to i64
  %11385 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11384
  %11386 = load i16, i16* %11385, align 2
  %11387 = zext i16 %11386 to i32
  %11388 = and i32 %11382, 1023
  %11389 = add nuw nsw i32 %11388, %11387
  %11390 = zext i32 %11389 to i64
  %11391 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11390
  %11392 = load i32, i32* %11391, align 4
  %11393 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11384
  %11394 = load i32, i32* %11393, align 4
  %11395 = add i32 %11394, %11392
  %11396 = getelementptr inbounds float, float* %11345, i64 2
  %11397 = bitcast float* %11396 to i32*
  store i32 %11395, i32* %11397, align 4
  %11398 = getelementptr inbounds i16, i16* %11344, i64 3
  %11399 = load i16, i16* %11398, align 2
  %11400 = zext i16 %11399 to i32
  %11401 = lshr i32 %11400, 10
  %11402 = zext i32 %11401 to i64
  %11403 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %11402
  %11404 = load i16, i16* %11403, align 2
  %11405 = zext i16 %11404 to i32
  %11406 = and i32 %11400, 1023
  %11407 = add nuw nsw i32 %11406, %11405
  %11408 = zext i32 %11407 to i64
  %11409 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %11408
  %11410 = load i32, i32* %11409, align 4
  %11411 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %11402
  %11412 = load i32, i32* %11411, align 4
  %11413 = add i32 %11412, %11410
  %11414 = getelementptr inbounds float, float* %11345, i64 3
  %11415 = bitcast float* %11414 to i32*
  store i32 %11413, i32* %11415, align 4
  %11416 = getelementptr inbounds i16, i16* %11344, i64 4
  %11417 = getelementptr inbounds float, float* %11345, i64 4
  %11418 = add nuw i32 %11343, 1
  %11419 = icmp eq i32 %11418, %11338
  br i1 %11419, label %11420, label %11342

11420:                                            ; preds = %11342
  %11421 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11264, align 8
  %11422 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11421, i64 0, i32 1, i32 0
  %11423 = load i32, i32* %11422, align 4
  %11424 = icmp eq i32 %11423, 0
  br i1 %11424, label %11520, label %11425

11425:                                            ; preds = %11420
  %11426 = load float*, float** %11298, align 8
  %11427 = add i32 %11423, -1
  %11428 = zext i32 %11427 to i64
  %11429 = add nuw nsw i64 %11428, 1
  %11430 = icmp ult i64 %11429, 4
  br i1 %11430, label %11482, label %11431

11431:                                            ; preds = %11425
  %11432 = add i32 %11423, -1
  %11433 = zext i32 %11432 to i64
  %11434 = getelementptr i32, i32* %11336, i64 %11433
  %11435 = getelementptr float, float* %11426, i64 4
  %11436 = shl nuw nsw i64 %11433, 2
  %11437 = getelementptr float, float* %11435, i64 %11436
  %11438 = bitcast float* %11437 to i32*
  %11439 = icmp ult i32* %11334, %11438
  %11440 = bitcast i32* %11434 to float*
  %11441 = icmp ult float* %11426, %11440
  %11442 = and i1 %11439, %11441
  br i1 %11442, label %11482, label %11443

11443:                                            ; preds = %11431
  %11444 = and i64 %11429, 8589934588
  %11445 = shl nuw nsw i64 %11444, 2
  %11446 = getelementptr float, float* %11426, i64 %11445
  %11447 = getelementptr i32, i32* %11331, i64 %11444
  %11448 = trunc i64 %11444 to i32
  br label %11449

11449:                                            ; preds = %11449, %11443
  %11450 = phi i64 [ 0, %11443 ], [ %11478, %11449 ]
  %11451 = shl i64 %11450, 2
  %11452 = getelementptr i32, i32* %11331, i64 %11450
  %11453 = getelementptr inbounds float, float* %11426, i64 %11451
  %11454 = bitcast float* %11453 to <16 x float>*
  %11455 = load <16 x float>, <16 x float>* %11454, align 4
  %11456 = shufflevector <16 x float> %11455, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %11457 = shufflevector <16 x float> %11455, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %11458 = shufflevector <16 x float> %11455, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %11459 = shufflevector <16 x float> %11455, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %11460 = fcmp une <4 x float> %11459, zeroinitializer
  %11461 = fdiv <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>, %11459
  %11462 = select <4 x i1> %11460, <4 x float> %11461, <4 x float> <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %11463 = fmul <4 x float> %11456, %11462
  %11464 = fptoui <4 x float> %11463 to <4 x i32>
  %11465 = fmul <4 x float> %11457, %11462
  %11466 = fptoui <4 x float> %11465 to <4 x i32>
  %11467 = fmul <4 x float> %11462, %11458
  %11468 = fptoui <4 x float> %11467 to <4 x i32>
  %11469 = fmul <4 x float> %11459, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %11470 = fptoui <4 x float> %11469 to <4 x i32>
  %11471 = shl <4 x i32> %11470, <i32 30, i32 30, i32 30, i32 30>
  %11472 = shl <4 x i32> %11468, <i32 20, i32 20, i32 20, i32 20>
  %11473 = shl <4 x i32> %11466, <i32 10, i32 10, i32 10, i32 10>
  %11474 = or <4 x i32> %11471, %11464
  %11475 = or <4 x i32> %11474, %11473
  %11476 = or <4 x i32> %11475, %11472
  %11477 = bitcast i32* %11452 to <4 x i32>*
  store <4 x i32> %11476, <4 x i32>* %11477, align 4, !alias.scope !760, !noalias !763
  %11478 = add i64 %11450, 4
  %11479 = icmp eq i64 %11478, %11444
  br i1 %11479, label %11480, label %11449, !llvm.loop !765

11480:                                            ; preds = %11449
  %11481 = icmp eq i64 %11429, %11444
  br i1 %11481, label %11518, label %11482

11482:                                            ; preds = %11480, %11431, %11425
  %11483 = phi float* [ %11426, %11431 ], [ %11426, %11425 ], [ %11446, %11480 ]
  %11484 = phi i32* [ %11331, %11431 ], [ %11331, %11425 ], [ %11447, %11480 ]
  %11485 = phi i32 [ 0, %11431 ], [ 0, %11425 ], [ %11448, %11480 ]
  br label %11486

11486:                                            ; preds = %11482, %11486
  %11487 = phi float* [ %11514, %11486 ], [ %11483, %11482 ]
  %11488 = phi i32* [ %11515, %11486 ], [ %11484, %11482 ]
  %11489 = phi i32 [ %11516, %11486 ], [ %11485, %11482 ]
  %11490 = getelementptr inbounds float, float* %11487, i64 3
  %11491 = load float, float* %11490, align 4
  %11492 = fcmp une float %11491, 0.000000e+00
  %11493 = fdiv float 1.023000e+03, %11491
  %11494 = select i1 %11492, float %11493, float 1.023000e+03
  %11495 = load float, float* %11487, align 4
  %11496 = fmul float %11495, %11494
  %11497 = fptoui float %11496 to i32
  %11498 = getelementptr inbounds float, float* %11487, i64 1
  %11499 = load float, float* %11498, align 4
  %11500 = fmul float %11499, %11494
  %11501 = fptoui float %11500 to i32
  %11502 = getelementptr inbounds float, float* %11487, i64 2
  %11503 = load float, float* %11502, align 4
  %11504 = fmul float %11494, %11503
  %11505 = fptoui float %11504 to i32
  %11506 = fmul float %11491, 3.000000e+00
  %11507 = fptoui float %11506 to i32
  %11508 = shl i32 %11507, 30
  %11509 = shl i32 %11505, 20
  %11510 = shl i32 %11501, 10
  %11511 = or i32 %11508, %11497
  %11512 = or i32 %11511, %11510
  %11513 = or i32 %11512, %11509
  store i32 %11513, i32* %11488, align 4
  %11514 = getelementptr inbounds float, float* %11487, i64 4
  %11515 = getelementptr inbounds i32, i32* %11488, i64 1
  %11516 = add nuw i32 %11489, 1
  %11517 = icmp eq i32 %11516, %11423
  br i1 %11517, label %11518, label %11486, !llvm.loop !766

11518:                                            ; preds = %11486, %11480
  %11519 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11264, align 8
  br label %11520

11520:                                            ; preds = %11518, %11420, %11326
  %11521 = phi %"class.blink::IntRect"* [ %11519, %11518 ], [ %11421, %11420 ], [ %11328, %11326 ]
  %11522 = getelementptr inbounds i16, i16* %11332, i64 %11257
  %11523 = getelementptr inbounds i32, i32* %11331, i64 %11261
  %11524 = add nuw nsw i32 %11330, 1
  %11525 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11521, i64 0, i32 1, i32 1
  %11526 = load i32, i32* %11525, align 4
  %11527 = icmp slt i32 %11524, %11526
  %11528 = add i64 %11327, 1
  br i1 %11527, label %11326, label %11310

11529:                                            ; preds = %11312, %11290
  %11530 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11530, align 4
  br label %13459

11531:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %11532
    i32 1, label %11677
    i32 2, label %11850
  ]

11532:                                            ; preds = %11531
  %11533 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11534 = load i32, i32* %11533, align 8
  %11535 = sdiv i32 %11534, 2
  %11536 = sext i32 %11535 to i64
  %11537 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11538 = load i32, i32* %11537, align 8
  %11539 = sext i32 %11538 to i64
  %11540 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11541 = load i8*, i8** %11540, align 8
  %11542 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11543 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11542, align 8
  %11544 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11543, i64 0, i32 0, i32 1
  %11545 = load i32, i32* %11544, align 4
  %11546 = mul nsw i32 %11545, %11534
  %11547 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11548 = load i32, i32* %11547, align 4
  %11549 = add nsw i32 %11546, %11548
  %11550 = sext i32 %11549 to i64
  %11551 = getelementptr inbounds i8, i8* %11541, i64 %11550
  %11552 = bitcast i8* %11551 to i16*
  %11553 = icmp slt i32 %11538, 0
  %11554 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11555 = load i32, i32* %11554, align 8
  %11556 = icmp sgt i32 %11555, 1
  %11557 = and i1 %11553, %11556
  br i1 %11557, label %11558, label %11568

11558:                                            ; preds = %11532
  %11559 = add nsw i32 %11555, -1
  %11560 = sext i32 %11559 to i64
  %11561 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11562 = load i32, i32* %11561, align 4
  %11563 = sext i32 %11562 to i64
  %11564 = mul nsw i64 %11536, %11560
  %11565 = mul i64 %11564, %11563
  %11566 = sub i64 0, %11565
  %11567 = getelementptr inbounds i16, i16* %11552, i64 %11566
  br label %11570

11568:                                            ; preds = %11532
  %11569 = icmp sgt i32 %11555, 0
  br i1 %11569, label %11570, label %11675

11570:                                            ; preds = %11568, %11558
  %11571 = phi i16* [ %11567, %11558 ], [ %11552, %11568 ]
  %11572 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11573 = load i8*, i8** %11572, align 8
  %11574 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11575 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11576

11576:                                            ; preds = %11587, %11570
  %11577 = phi i32 [ %11555, %11570 ], [ %11588, %11587 ]
  %11578 = phi %"class.blink::IntRect"* [ %11543, %11570 ], [ %11589, %11587 ]
  %11579 = phi i32 [ 0, %11570 ], [ %11598, %11587 ]
  %11580 = phi i8* [ %11573, %11570 ], [ %11591, %11587 ]
  %11581 = phi i16* [ %11571, %11570 ], [ %11597, %11587 ]
  %11582 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11578, i64 0, i32 1, i32 1
  %11583 = load i32, i32* %11582, align 4
  %11584 = icmp sgt i32 %11583, 0
  br i1 %11584, label %11600, label %11587

11585:                                            ; preds = %11667
  %11586 = load i32, i32* %11554, align 8
  br label %11587

11587:                                            ; preds = %11585, %11576
  %11588 = phi i32 [ %11577, %11576 ], [ %11586, %11585 ]
  %11589 = phi %"class.blink::IntRect"* [ %11578, %11576 ], [ %11668, %11585 ]
  %11590 = phi i16* [ %11581, %11576 ], [ %11669, %11585 ]
  %11591 = phi i8* [ %11580, %11576 ], [ %11670, %11585 ]
  %11592 = phi i32 [ %11583, %11576 ], [ %11673, %11585 ]
  %11593 = load i32, i32* %11575, align 4
  %11594 = sub nsw i32 %11593, %11592
  %11595 = sext i32 %11594 to i64
  %11596 = mul nsw i64 %11595, %11536
  %11597 = getelementptr inbounds i16, i16* %11590, i64 %11596
  %11598 = add nuw nsw i32 %11579, 1
  %11599 = icmp slt i32 %11598, %11588
  br i1 %11599, label %11576, label %11675

11600:                                            ; preds = %11576, %11667
  %11601 = phi %"class.blink::IntRect"* [ %11668, %11667 ], [ %11578, %11576 ]
  %11602 = phi i32 [ %11671, %11667 ], [ 0, %11576 ]
  %11603 = phi i8* [ %11670, %11667 ], [ %11580, %11576 ]
  %11604 = phi i16* [ %11669, %11667 ], [ %11581, %11576 ]
  %11605 = load i8*, i8** %11574, align 8
  %11606 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11601, i64 0, i32 1, i32 0
  %11607 = load i32, i32* %11606, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %11604, i8* %11605, i32 %11607) #12
  %11608 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11542, align 8
  %11609 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11608, i64 0, i32 1, i32 0
  %11610 = load i32, i32* %11609, align 4
  %11611 = icmp eq i32 %11610, 0
  br i1 %11611, label %11667, label %11612

11612:                                            ; preds = %11600
  %11613 = load i8*, i8** %11574, align 8
  %11614 = add i32 %11610, -1
  %11615 = and i32 %11610, 3
  %11616 = icmp ult i32 %11614, 3
  br i1 %11616, label %11649, label %11617

11617:                                            ; preds = %11612
  %11618 = sub i32 %11610, %11615
  br label %11619

11619:                                            ; preds = %11619, %11617
  %11620 = phi i8* [ %11613, %11617 ], [ %11645, %11619 ]
  %11621 = phi i8* [ %11603, %11617 ], [ %11646, %11619 ]
  %11622 = phi i32 [ %11618, %11617 ], [ %11647, %11619 ]
  %11623 = load i8, i8* %11620, align 1
  store i8 %11623, i8* %11621, align 1
  %11624 = getelementptr inbounds i8, i8* %11620, i64 1
  %11625 = load i8, i8* %11624, align 1
  %11626 = getelementptr inbounds i8, i8* %11621, i64 1
  store i8 %11625, i8* %11626, align 1
  %11627 = getelementptr inbounds i8, i8* %11620, i64 4
  %11628 = getelementptr inbounds i8, i8* %11621, i64 2
  %11629 = load i8, i8* %11627, align 1
  store i8 %11629, i8* %11628, align 1
  %11630 = getelementptr inbounds i8, i8* %11620, i64 5
  %11631 = load i8, i8* %11630, align 1
  %11632 = getelementptr inbounds i8, i8* %11621, i64 3
  store i8 %11631, i8* %11632, align 1
  %11633 = getelementptr inbounds i8, i8* %11620, i64 8
  %11634 = getelementptr inbounds i8, i8* %11621, i64 4
  %11635 = load i8, i8* %11633, align 1
  store i8 %11635, i8* %11634, align 1
  %11636 = getelementptr inbounds i8, i8* %11620, i64 9
  %11637 = load i8, i8* %11636, align 1
  %11638 = getelementptr inbounds i8, i8* %11621, i64 5
  store i8 %11637, i8* %11638, align 1
  %11639 = getelementptr inbounds i8, i8* %11620, i64 12
  %11640 = getelementptr inbounds i8, i8* %11621, i64 6
  %11641 = load i8, i8* %11639, align 1
  store i8 %11641, i8* %11640, align 1
  %11642 = getelementptr inbounds i8, i8* %11620, i64 13
  %11643 = load i8, i8* %11642, align 1
  %11644 = getelementptr inbounds i8, i8* %11621, i64 7
  store i8 %11643, i8* %11644, align 1
  %11645 = getelementptr inbounds i8, i8* %11620, i64 16
  %11646 = getelementptr inbounds i8, i8* %11621, i64 8
  %11647 = add i32 %11622, -4
  %11648 = icmp eq i32 %11647, 0
  br i1 %11648, label %11649, label %11619

11649:                                            ; preds = %11619, %11612
  %11650 = phi i8* [ %11613, %11612 ], [ %11645, %11619 ]
  %11651 = phi i8* [ %11603, %11612 ], [ %11646, %11619 ]
  %11652 = icmp eq i32 %11615, 0
  br i1 %11652, label %11665, label %11653

11653:                                            ; preds = %11649, %11653
  %11654 = phi i8* [ %11661, %11653 ], [ %11650, %11649 ]
  %11655 = phi i8* [ %11662, %11653 ], [ %11651, %11649 ]
  %11656 = phi i32 [ %11663, %11653 ], [ %11615, %11649 ]
  %11657 = load i8, i8* %11654, align 1
  store i8 %11657, i8* %11655, align 1
  %11658 = getelementptr inbounds i8, i8* %11654, i64 1
  %11659 = load i8, i8* %11658, align 1
  %11660 = getelementptr inbounds i8, i8* %11655, i64 1
  store i8 %11659, i8* %11660, align 1
  %11661 = getelementptr inbounds i8, i8* %11654, i64 4
  %11662 = getelementptr inbounds i8, i8* %11655, i64 2
  %11663 = add i32 %11656, -1
  %11664 = icmp eq i32 %11663, 0
  br i1 %11664, label %11665, label %11653, !llvm.loop !767

11665:                                            ; preds = %11653, %11649
  %11666 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11542, align 8
  br label %11667

11667:                                            ; preds = %11665, %11600
  %11668 = phi %"class.blink::IntRect"* [ %11666, %11665 ], [ %11608, %11600 ]
  %11669 = getelementptr inbounds i16, i16* %11604, i64 %11536
  %11670 = getelementptr inbounds i8, i8* %11603, i64 %11539
  %11671 = add nuw nsw i32 %11602, 1
  %11672 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11668, i64 0, i32 1, i32 1
  %11673 = load i32, i32* %11672, align 4
  %11674 = icmp slt i32 %11671, %11673
  br i1 %11674, label %11600, label %11585

11675:                                            ; preds = %11587, %11568
  %11676 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11676, align 4
  br label %13459

11677:                                            ; preds = %11531
  %11678 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11679 = load i32, i32* %11678, align 8
  %11680 = sdiv i32 %11679, 2
  %11681 = sext i32 %11680 to i64
  %11682 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11683 = load i32, i32* %11682, align 8
  %11684 = sext i32 %11683 to i64
  %11685 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11686 = load i8*, i8** %11685, align 8
  %11687 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11688 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11687, align 8
  %11689 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11688, i64 0, i32 0, i32 1
  %11690 = load i32, i32* %11689, align 4
  %11691 = mul nsw i32 %11690, %11679
  %11692 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11693 = load i32, i32* %11692, align 4
  %11694 = add nsw i32 %11691, %11693
  %11695 = sext i32 %11694 to i64
  %11696 = getelementptr inbounds i8, i8* %11686, i64 %11695
  %11697 = bitcast i8* %11696 to i16*
  %11698 = icmp slt i32 %11683, 0
  %11699 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11700 = load i32, i32* %11699, align 8
  %11701 = icmp sgt i32 %11700, 1
  %11702 = and i1 %11698, %11701
  br i1 %11702, label %11703, label %11713

11703:                                            ; preds = %11677
  %11704 = add nsw i32 %11700, -1
  %11705 = sext i32 %11704 to i64
  %11706 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11707 = load i32, i32* %11706, align 4
  %11708 = sext i32 %11707 to i64
  %11709 = mul nsw i64 %11681, %11705
  %11710 = mul i64 %11709, %11708
  %11711 = sub i64 0, %11710
  %11712 = getelementptr inbounds i16, i16* %11697, i64 %11711
  br label %11715

11713:                                            ; preds = %11677
  %11714 = icmp sgt i32 %11700, 0
  br i1 %11714, label %11715, label %11848

11715:                                            ; preds = %11713, %11703
  %11716 = phi i16* [ %11712, %11703 ], [ %11697, %11713 ]
  %11717 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11718 = load i8*, i8** %11717, align 8
  %11719 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11720 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11721

11721:                                            ; preds = %11732, %11715
  %11722 = phi i32 [ %11700, %11715 ], [ %11733, %11732 ]
  %11723 = phi %"class.blink::IntRect"* [ %11688, %11715 ], [ %11734, %11732 ]
  %11724 = phi i32 [ 0, %11715 ], [ %11743, %11732 ]
  %11725 = phi i8* [ %11718, %11715 ], [ %11736, %11732 ]
  %11726 = phi i16* [ %11716, %11715 ], [ %11742, %11732 ]
  %11727 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11723, i64 0, i32 1, i32 1
  %11728 = load i32, i32* %11727, align 4
  %11729 = icmp sgt i32 %11728, 0
  br i1 %11729, label %11745, label %11732

11730:                                            ; preds = %11839
  %11731 = load i32, i32* %11699, align 8
  br label %11732

11732:                                            ; preds = %11730, %11721
  %11733 = phi i32 [ %11722, %11721 ], [ %11731, %11730 ]
  %11734 = phi %"class.blink::IntRect"* [ %11723, %11721 ], [ %11840, %11730 ]
  %11735 = phi i16* [ %11726, %11721 ], [ %11841, %11730 ]
  %11736 = phi i8* [ %11725, %11721 ], [ %11842, %11730 ]
  %11737 = phi i32 [ %11728, %11721 ], [ %11845, %11730 ]
  %11738 = load i32, i32* %11720, align 4
  %11739 = sub nsw i32 %11738, %11737
  %11740 = sext i32 %11739 to i64
  %11741 = mul nsw i64 %11740, %11681
  %11742 = getelementptr inbounds i16, i16* %11735, i64 %11741
  %11743 = add nuw nsw i32 %11724, 1
  %11744 = icmp slt i32 %11743, %11733
  br i1 %11744, label %11721, label %11848

11745:                                            ; preds = %11721, %11839
  %11746 = phi i64 [ %11847, %11839 ], [ 0, %11721 ]
  %11747 = phi %"class.blink::IntRect"* [ %11840, %11839 ], [ %11723, %11721 ]
  %11748 = phi i32 [ %11843, %11839 ], [ 0, %11721 ]
  %11749 = phi i8* [ %11842, %11839 ], [ %11725, %11721 ]
  %11750 = phi i16* [ %11841, %11839 ], [ %11726, %11721 ]
  %11751 = mul i64 %11746, %11684
  %11752 = getelementptr i8, i8* %11725, i64 %11751
  %11753 = add i64 %11751, 2
  %11754 = getelementptr i8, i8* %11725, i64 %11753
  %11755 = load i8*, i8** %11719, align 8
  %11756 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11747, i64 0, i32 1, i32 0
  %11757 = load i32, i32* %11756, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %11750, i8* %11755, i32 %11757) #12
  %11758 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11687, align 8
  %11759 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11758, i64 0, i32 1, i32 0
  %11760 = load i32, i32* %11759, align 4
  %11761 = icmp eq i32 %11760, 0
  br i1 %11761, label %11839, label %11762

11762:                                            ; preds = %11745
  %11763 = load i8*, i8** %11719, align 8
  %11764 = add i32 %11760, -1
  %11765 = zext i32 %11764 to i64
  %11766 = add nuw nsw i64 %11765, 1
  %11767 = icmp ult i64 %11766, 16
  br i1 %11767, label %11811, label %11768

11768:                                            ; preds = %11762
  %11769 = add i32 %11760, -1
  %11770 = zext i32 %11769 to i64
  %11771 = shl nuw nsw i64 %11770, 1
  %11772 = getelementptr i8, i8* %11754, i64 %11771
  %11773 = getelementptr i8, i8* %11763, i64 4
  %11774 = shl nuw nsw i64 %11770, 2
  %11775 = getelementptr i8, i8* %11773, i64 %11774
  %11776 = icmp ult i8* %11752, %11775
  %11777 = icmp ult i8* %11763, %11772
  %11778 = and i1 %11776, %11777
  br i1 %11778, label %11811, label %11779

11779:                                            ; preds = %11768
  %11780 = and i64 %11766, 8589934576
  %11781 = shl nuw nsw i64 %11780, 2
  %11782 = getelementptr i8, i8* %11763, i64 %11781
  %11783 = trunc i64 %11780 to i32
  %11784 = shl nuw nsw i64 %11780, 1
  %11785 = getelementptr i8, i8* %11749, i64 %11784
  br label %11786

11786:                                            ; preds = %11786, %11779
  %11787 = phi i64 [ 0, %11779 ], [ %11807, %11786 ]
  %11788 = shl i64 %11787, 2
  %11789 = shl i64 %11787, 1
  %11790 = getelementptr inbounds i8, i8* %11763, i64 %11788
  %11791 = bitcast i8* %11790 to <64 x i8>*
  %11792 = load <64 x i8>, <64 x i8>* %11791, align 1
  %11793 = shufflevector <64 x i8> %11792, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %11794 = shufflevector <64 x i8> %11792, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %11795 = shufflevector <64 x i8> %11792, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %11796 = uitofp <16 x i8> %11795 to <16 x float>
  %11797 = fdiv <16 x float> %11796, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %11798 = uitofp <16 x i8> %11793 to <16 x float>
  %11799 = fmul <16 x float> %11797, %11798
  %11800 = fptoui <16 x float> %11799 to <16 x i8>
  %11801 = uitofp <16 x i8> %11794 to <16 x float>
  %11802 = fmul <16 x float> %11797, %11801
  %11803 = fptoui <16 x float> %11802 to <16 x i8>
  %11804 = getelementptr inbounds i8, i8* %11749, i64 %11789
  %11805 = bitcast i8* %11804 to <32 x i8>*
  %11806 = shufflevector <16 x i8> %11800, <16 x i8> %11803, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %11806, <32 x i8>* %11805, align 1
  %11807 = add i64 %11787, 16
  %11808 = icmp eq i64 %11807, %11780
  br i1 %11808, label %11809, label %11786, !llvm.loop !768

11809:                                            ; preds = %11786
  %11810 = icmp eq i64 %11766, %11780
  br i1 %11810, label %11837, label %11811

11811:                                            ; preds = %11809, %11768, %11762
  %11812 = phi i8* [ %11763, %11768 ], [ %11763, %11762 ], [ %11782, %11809 ]
  %11813 = phi i32 [ 0, %11768 ], [ 0, %11762 ], [ %11783, %11809 ]
  %11814 = phi i8* [ %11749, %11768 ], [ %11749, %11762 ], [ %11785, %11809 ]
  br label %11815

11815:                                            ; preds = %11811, %11815
  %11816 = phi i8* [ %11833, %11815 ], [ %11812, %11811 ]
  %11817 = phi i32 [ %11835, %11815 ], [ %11813, %11811 ]
  %11818 = phi i8* [ %11834, %11815 ], [ %11814, %11811 ]
  %11819 = getelementptr inbounds i8, i8* %11816, i64 3
  %11820 = load i8, i8* %11819, align 1
  %11821 = uitofp i8 %11820 to float
  %11822 = fdiv float %11821, 2.550000e+02
  %11823 = load i8, i8* %11816, align 1
  %11824 = uitofp i8 %11823 to float
  %11825 = fmul float %11822, %11824
  %11826 = fptoui float %11825 to i8
  store i8 %11826, i8* %11818, align 1
  %11827 = getelementptr inbounds i8, i8* %11816, i64 1
  %11828 = load i8, i8* %11827, align 1
  %11829 = uitofp i8 %11828 to float
  %11830 = fmul float %11822, %11829
  %11831 = fptoui float %11830 to i8
  %11832 = getelementptr inbounds i8, i8* %11818, i64 1
  store i8 %11831, i8* %11832, align 1
  %11833 = getelementptr inbounds i8, i8* %11816, i64 4
  %11834 = getelementptr inbounds i8, i8* %11818, i64 2
  %11835 = add nuw i32 %11817, 1
  %11836 = icmp eq i32 %11835, %11760
  br i1 %11836, label %11837, label %11815, !llvm.loop !769

11837:                                            ; preds = %11815, %11809
  %11838 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11687, align 8
  br label %11839

11839:                                            ; preds = %11837, %11745
  %11840 = phi %"class.blink::IntRect"* [ %11838, %11837 ], [ %11758, %11745 ]
  %11841 = getelementptr inbounds i16, i16* %11750, i64 %11681
  %11842 = getelementptr inbounds i8, i8* %11749, i64 %11684
  %11843 = add nuw nsw i32 %11748, 1
  %11844 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11840, i64 0, i32 1, i32 1
  %11845 = load i32, i32* %11844, align 4
  %11846 = icmp slt i32 %11843, %11845
  %11847 = add i64 %11746, 1
  br i1 %11846, label %11745, label %11730

11848:                                            ; preds = %11732, %11713
  %11849 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11849, align 4
  br label %13459

11850:                                            ; preds = %11531
  %11851 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11852 = load i32, i32* %11851, align 8
  %11853 = sdiv i32 %11852, 2
  %11854 = sext i32 %11853 to i64
  %11855 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11856 = load i32, i32* %11855, align 8
  %11857 = sext i32 %11856 to i64
  %11858 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11859 = load i8*, i8** %11858, align 8
  %11860 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11861 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11860, align 8
  %11862 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11861, i64 0, i32 0, i32 1
  %11863 = load i32, i32* %11862, align 4
  %11864 = mul nsw i32 %11863, %11852
  %11865 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11866 = load i32, i32* %11865, align 4
  %11867 = add nsw i32 %11864, %11866
  %11868 = sext i32 %11867 to i64
  %11869 = getelementptr inbounds i8, i8* %11859, i64 %11868
  %11870 = bitcast i8* %11869 to i16*
  %11871 = icmp slt i32 %11856, 0
  %11872 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11873 = load i32, i32* %11872, align 8
  %11874 = icmp sgt i32 %11873, 1
  %11875 = and i1 %11871, %11874
  br i1 %11875, label %11876, label %11886

11876:                                            ; preds = %11850
  %11877 = add nsw i32 %11873, -1
  %11878 = sext i32 %11877 to i64
  %11879 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %11880 = load i32, i32* %11879, align 4
  %11881 = sext i32 %11880 to i64
  %11882 = mul nsw i64 %11854, %11878
  %11883 = mul i64 %11882, %11881
  %11884 = sub i64 0, %11883
  %11885 = getelementptr inbounds i16, i16* %11870, i64 %11884
  br label %11888

11886:                                            ; preds = %11850
  %11887 = icmp sgt i32 %11873, 0
  br i1 %11887, label %11888, label %11968

11888:                                            ; preds = %11886, %11876
  %11889 = phi i16* [ %11885, %11876 ], [ %11870, %11886 ]
  %11890 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %11891 = load i8*, i8** %11890, align 8
  %11892 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %11893 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %11894

11894:                                            ; preds = %11905, %11888
  %11895 = phi i32 [ %11873, %11888 ], [ %11906, %11905 ]
  %11896 = phi %"class.blink::IntRect"* [ %11861, %11888 ], [ %11907, %11905 ]
  %11897 = phi i32 [ 0, %11888 ], [ %11916, %11905 ]
  %11898 = phi i8* [ %11891, %11888 ], [ %11909, %11905 ]
  %11899 = phi i16* [ %11889, %11888 ], [ %11915, %11905 ]
  %11900 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11896, i64 0, i32 1, i32 1
  %11901 = load i32, i32* %11900, align 4
  %11902 = icmp sgt i32 %11901, 0
  br i1 %11902, label %11918, label %11905

11903:                                            ; preds = %11960
  %11904 = load i32, i32* %11872, align 8
  br label %11905

11905:                                            ; preds = %11903, %11894
  %11906 = phi i32 [ %11895, %11894 ], [ %11904, %11903 ]
  %11907 = phi %"class.blink::IntRect"* [ %11896, %11894 ], [ %11961, %11903 ]
  %11908 = phi i16* [ %11899, %11894 ], [ %11962, %11903 ]
  %11909 = phi i8* [ %11898, %11894 ], [ %11963, %11903 ]
  %11910 = phi i32 [ %11901, %11894 ], [ %11966, %11903 ]
  %11911 = load i32, i32* %11893, align 4
  %11912 = sub nsw i32 %11911, %11910
  %11913 = sext i32 %11912 to i64
  %11914 = mul nsw i64 %11913, %11854
  %11915 = getelementptr inbounds i16, i16* %11908, i64 %11914
  %11916 = add nuw nsw i32 %11897, 1
  %11917 = icmp slt i32 %11916, %11906
  br i1 %11917, label %11894, label %11968

11918:                                            ; preds = %11894, %11960
  %11919 = phi %"class.blink::IntRect"* [ %11961, %11960 ], [ %11896, %11894 ]
  %11920 = phi i32 [ %11964, %11960 ], [ 0, %11894 ]
  %11921 = phi i8* [ %11963, %11960 ], [ %11898, %11894 ]
  %11922 = phi i16* [ %11962, %11960 ], [ %11899, %11894 ]
  %11923 = load i8*, i8** %11892, align 8
  %11924 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11919, i64 0, i32 1, i32 0
  %11925 = load i32, i32* %11924, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* %11922, i8* %11923, i32 %11925) #12
  %11926 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11860, align 8
  %11927 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11926, i64 0, i32 1, i32 0
  %11928 = load i32, i32* %11927, align 4
  %11929 = icmp eq i32 %11928, 0
  br i1 %11929, label %11960, label %11930

11930:                                            ; preds = %11918
  %11931 = load i8*, i8** %11892, align 8
  br label %11932

11932:                                            ; preds = %11942, %11930
  %11933 = phi i32 [ %11956, %11942 ], [ 0, %11930 ]
  %11934 = phi i8* [ %11954, %11942 ], [ %11931, %11930 ]
  %11935 = phi i8* [ %11955, %11942 ], [ %11921, %11930 ]
  %11936 = getelementptr inbounds i8, i8* %11934, i64 3
  %11937 = load i8, i8* %11936, align 1
  %11938 = icmp eq i8 %11937, 0
  br i1 %11938, label %11942, label %11939

11939:                                            ; preds = %11932
  %11940 = uitofp i8 %11937 to float
  %11941 = fdiv float 2.550000e+02, %11940
  br label %11942

11942:                                            ; preds = %11939, %11932
  %11943 = phi float [ %11941, %11939 ], [ 1.000000e+00, %11932 ]
  %11944 = load i8, i8* %11934, align 1
  %11945 = uitofp i8 %11944 to float
  %11946 = fmul float %11943, %11945
  %11947 = fptoui float %11946 to i8
  store i8 %11947, i8* %11935, align 1
  %11948 = getelementptr inbounds i8, i8* %11934, i64 1
  %11949 = load i8, i8* %11948, align 1
  %11950 = uitofp i8 %11949 to float
  %11951 = fmul float %11943, %11950
  %11952 = fptoui float %11951 to i8
  %11953 = getelementptr inbounds i8, i8* %11935, i64 1
  store i8 %11952, i8* %11953, align 1
  %11954 = getelementptr inbounds i8, i8* %11934, i64 4
  %11955 = getelementptr inbounds i8, i8* %11935, i64 2
  %11956 = add nuw i32 %11933, 1
  %11957 = icmp eq i32 %11956, %11928
  br i1 %11957, label %11958, label %11932

11958:                                            ; preds = %11942
  %11959 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11860, align 8
  br label %11960

11960:                                            ; preds = %11958, %11918
  %11961 = phi %"class.blink::IntRect"* [ %11959, %11958 ], [ %11926, %11918 ]
  %11962 = getelementptr inbounds i16, i16* %11922, i64 %11854
  %11963 = getelementptr inbounds i8, i8* %11921, i64 %11857
  %11964 = add nuw nsw i32 %11920, 1
  %11965 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11961, i64 0, i32 1, i32 1
  %11966 = load i32, i32* %11965, align 4
  %11967 = icmp slt i32 %11964, %11966
  br i1 %11967, label %11918, label %11903

11968:                                            ; preds = %11905, %11886
  %11969 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %11969, align 4
  br label %13459

11970:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %11971
    i32 1, label %12188
    i32 2, label %12409
  ]

11971:                                            ; preds = %11970
  %11972 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %11973 = load i32, i32* %11972, align 8
  %11974 = sdiv i32 %11973, 2
  %11975 = sext i32 %11974 to i64
  %11976 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %11977 = load i32, i32* %11976, align 8
  %11978 = sdiv i32 %11977, 2
  %11979 = sext i32 %11978 to i64
  %11980 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %11981 = load i8*, i8** %11980, align 8
  %11982 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %11983 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11982, align 8
  %11984 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %11983, i64 0, i32 0, i32 1
  %11985 = load i32, i32* %11984, align 4
  %11986 = mul nsw i32 %11985, %11973
  %11987 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %11988 = load i32, i32* %11987, align 4
  %11989 = add nsw i32 %11986, %11988
  %11990 = sext i32 %11989 to i64
  %11991 = getelementptr inbounds i8, i8* %11981, i64 %11990
  %11992 = bitcast i8* %11991 to i16*
  %11993 = icmp slt i32 %11977, 0
  %11994 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %11995 = load i32, i32* %11994, align 8
  %11996 = icmp sgt i32 %11995, 1
  %11997 = and i1 %11993, %11996
  br i1 %11997, label %11998, label %12008

11998:                                            ; preds = %11971
  %11999 = add nsw i32 %11995, -1
  %12000 = sext i32 %11999 to i64
  %12001 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12002 = load i32, i32* %12001, align 4
  %12003 = sext i32 %12002 to i64
  %12004 = mul nsw i64 %11975, %12000
  %12005 = mul i64 %12004, %12003
  %12006 = sub i64 0, %12005
  %12007 = getelementptr inbounds i16, i16* %11992, i64 %12006
  br label %12010

12008:                                            ; preds = %11971
  %12009 = icmp sgt i32 %11995, 0
  br i1 %12009, label %12010, label %12186

12010:                                            ; preds = %12008, %11998
  %12011 = phi i16* [ %12007, %11998 ], [ %11992, %12008 ]
  %12012 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12013 = bitcast i8** %12012 to i16**
  %12014 = load i16*, i16** %12013, align 8
  %12015 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12016 = bitcast i8** %12015 to float**
  %12017 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12018

12018:                                            ; preds = %12030, %12010
  %12019 = phi i32 [ %11995, %12010 ], [ %12031, %12030 ]
  %12020 = phi %"class.blink::IntRect"* [ %11983, %12010 ], [ %12032, %12030 ]
  %12021 = phi %"class.blink::IntRect"* [ %11983, %12010 ], [ %12033, %12030 ]
  %12022 = phi i32 [ 0, %12010 ], [ %12042, %12030 ]
  %12023 = phi i16* [ %12014, %12010 ], [ %12035, %12030 ]
  %12024 = phi i16* [ %12011, %12010 ], [ %12041, %12030 ]
  %12025 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12021, i64 0, i32 1, i32 1
  %12026 = load i32, i32* %12025, align 4
  %12027 = icmp sgt i32 %12026, 0
  br i1 %12027, label %12044, label %12030

12028:                                            ; preds = %12178
  %12029 = load i32, i32* %11994, align 8
  br label %12030

12030:                                            ; preds = %12028, %12018
  %12031 = phi i32 [ %12019, %12018 ], [ %12029, %12028 ]
  %12032 = phi %"class.blink::IntRect"* [ %12020, %12018 ], [ %12179, %12028 ]
  %12033 = phi %"class.blink::IntRect"* [ %12021, %12018 ], [ %12179, %12028 ]
  %12034 = phi i16* [ %12024, %12018 ], [ %12180, %12028 ]
  %12035 = phi i16* [ %12023, %12018 ], [ %12181, %12028 ]
  %12036 = phi i32 [ %12026, %12018 ], [ %12184, %12028 ]
  %12037 = load i32, i32* %12017, align 4
  %12038 = sub nsw i32 %12037, %12036
  %12039 = sext i32 %12038 to i64
  %12040 = mul nsw i64 %12039, %11975
  %12041 = getelementptr inbounds i16, i16* %12034, i64 %12040
  %12042 = add nuw nsw i32 %12022, 1
  %12043 = icmp slt i32 %12042, %12031
  br i1 %12043, label %12018, label %12186

12044:                                            ; preds = %12018, %12178
  %12045 = phi %"class.blink::IntRect"* [ %12179, %12178 ], [ %12020, %12018 ]
  %12046 = phi %"class.blink::IntRect"* [ %12179, %12178 ], [ %12021, %12018 ]
  %12047 = phi i32 [ %12182, %12178 ], [ 0, %12018 ]
  %12048 = phi i16* [ %12181, %12178 ], [ %12023, %12018 ]
  %12049 = phi i16* [ %12180, %12178 ], [ %12024, %12018 ]
  %12050 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12046, i64 0, i32 1, i32 0
  %12051 = load i32, i32* %12050, align 4
  %12052 = icmp eq i32 %12051, 0
  br i1 %12052, label %12178, label %12053

12053:                                            ; preds = %12044
  %12054 = load float*, float** %12016, align 8
  br label %12055

12055:                                            ; preds = %12055, %12053
  %12056 = phi i32 [ %12131, %12055 ], [ 0, %12053 ]
  %12057 = phi i16* [ %12129, %12055 ], [ %12049, %12053 ]
  %12058 = phi float* [ %12130, %12055 ], [ %12054, %12053 ]
  %12059 = load i16, i16* %12057, align 2
  %12060 = zext i16 %12059 to i32
  %12061 = lshr i32 %12060, 10
  %12062 = zext i32 %12061 to i64
  %12063 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12062
  %12064 = load i16, i16* %12063, align 2
  %12065 = zext i16 %12064 to i32
  %12066 = and i32 %12060, 1023
  %12067 = add nuw nsw i32 %12066, %12065
  %12068 = zext i32 %12067 to i64
  %12069 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12068
  %12070 = load i32, i32* %12069, align 4
  %12071 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12062
  %12072 = load i32, i32* %12071, align 4
  %12073 = add i32 %12072, %12070
  %12074 = bitcast float* %12058 to i32*
  store i32 %12073, i32* %12074, align 4
  %12075 = getelementptr inbounds i16, i16* %12057, i64 1
  %12076 = load i16, i16* %12075, align 2
  %12077 = zext i16 %12076 to i32
  %12078 = lshr i32 %12077, 10
  %12079 = zext i32 %12078 to i64
  %12080 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12079
  %12081 = load i16, i16* %12080, align 2
  %12082 = zext i16 %12081 to i32
  %12083 = and i32 %12077, 1023
  %12084 = add nuw nsw i32 %12083, %12082
  %12085 = zext i32 %12084 to i64
  %12086 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12085
  %12087 = load i32, i32* %12086, align 4
  %12088 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12079
  %12089 = load i32, i32* %12088, align 4
  %12090 = add i32 %12089, %12087
  %12091 = getelementptr inbounds float, float* %12058, i64 1
  %12092 = bitcast float* %12091 to i32*
  store i32 %12090, i32* %12092, align 4
  %12093 = getelementptr inbounds i16, i16* %12057, i64 2
  %12094 = load i16, i16* %12093, align 2
  %12095 = zext i16 %12094 to i32
  %12096 = lshr i32 %12095, 10
  %12097 = zext i32 %12096 to i64
  %12098 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12097
  %12099 = load i16, i16* %12098, align 2
  %12100 = zext i16 %12099 to i32
  %12101 = and i32 %12095, 1023
  %12102 = add nuw nsw i32 %12101, %12100
  %12103 = zext i32 %12102 to i64
  %12104 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12103
  %12105 = load i32, i32* %12104, align 4
  %12106 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12097
  %12107 = load i32, i32* %12106, align 4
  %12108 = add i32 %12107, %12105
  %12109 = getelementptr inbounds float, float* %12058, i64 2
  %12110 = bitcast float* %12109 to i32*
  store i32 %12108, i32* %12110, align 4
  %12111 = getelementptr inbounds i16, i16* %12057, i64 3
  %12112 = load i16, i16* %12111, align 2
  %12113 = zext i16 %12112 to i32
  %12114 = lshr i32 %12113, 10
  %12115 = zext i32 %12114 to i64
  %12116 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12115
  %12117 = load i16, i16* %12116, align 2
  %12118 = zext i16 %12117 to i32
  %12119 = and i32 %12113, 1023
  %12120 = add nuw nsw i32 %12119, %12118
  %12121 = zext i32 %12120 to i64
  %12122 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12121
  %12123 = load i32, i32* %12122, align 4
  %12124 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12115
  %12125 = load i32, i32* %12124, align 4
  %12126 = add i32 %12125, %12123
  %12127 = getelementptr inbounds float, float* %12058, i64 3
  %12128 = bitcast float* %12127 to i32*
  store i32 %12126, i32* %12128, align 4
  %12129 = getelementptr inbounds i16, i16* %12057, i64 4
  %12130 = getelementptr inbounds float, float* %12058, i64 4
  %12131 = add nuw i32 %12056, 1
  %12132 = icmp eq i32 %12131, %12051
  br i1 %12132, label %12133, label %12055

12133:                                            ; preds = %12055
  %12134 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11982, align 8
  %12135 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12134, i64 0, i32 1, i32 0
  %12136 = load i32, i32* %12135, align 4
  %12137 = icmp eq i32 %12136, 0
  br i1 %12137, label %12178, label %12138

12138:                                            ; preds = %12133
  %12139 = load float*, float** %12016, align 8
  br label %12140

12140:                                            ; preds = %12140, %12138
  %12141 = phi i32 [ %12174, %12140 ], [ 0, %12138 ]
  %12142 = phi float* [ %12172, %12140 ], [ %12139, %12138 ]
  %12143 = phi i16* [ %12173, %12140 ], [ %12048, %12138 ]
  %12144 = bitcast float* %12142 to i32*
  %12145 = load i32, i32* %12144, align 4
  %12146 = lshr i32 %12145, 23
  %12147 = zext i32 %12146 to i64
  %12148 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12147
  %12149 = load i16, i16* %12148, align 2
  %12150 = and i32 %12145, 8388607
  %12151 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12147
  %12152 = load i8, i8* %12151, align 1
  %12153 = zext i8 %12152 to i32
  %12154 = lshr i32 %12150, %12153
  %12155 = trunc i32 %12154 to i16
  %12156 = add i16 %12149, %12155
  store i16 %12156, i16* %12143, align 2
  %12157 = getelementptr inbounds float, float* %12142, i64 1
  %12158 = bitcast float* %12157 to i32*
  %12159 = load i32, i32* %12158, align 4
  %12160 = lshr i32 %12159, 23
  %12161 = zext i32 %12160 to i64
  %12162 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12161
  %12163 = load i16, i16* %12162, align 2
  %12164 = and i32 %12159, 8388607
  %12165 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12161
  %12166 = load i8, i8* %12165, align 1
  %12167 = zext i8 %12166 to i32
  %12168 = lshr i32 %12164, %12167
  %12169 = trunc i32 %12168 to i16
  %12170 = add i16 %12163, %12169
  %12171 = getelementptr inbounds i16, i16* %12143, i64 1
  store i16 %12170, i16* %12171, align 2
  %12172 = getelementptr inbounds float, float* %12142, i64 4
  %12173 = getelementptr inbounds i16, i16* %12143, i64 2
  %12174 = add nuw i32 %12141, 1
  %12175 = icmp eq i32 %12174, %12136
  br i1 %12175, label %12176, label %12140

12176:                                            ; preds = %12140
  %12177 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %11982, align 8
  br label %12178

12178:                                            ; preds = %12176, %12133, %12044
  %12179 = phi %"class.blink::IntRect"* [ %12177, %12176 ], [ %12134, %12133 ], [ %12045, %12044 ]
  %12180 = getelementptr inbounds i16, i16* %12049, i64 %11975
  %12181 = getelementptr inbounds i16, i16* %12048, i64 %11979
  %12182 = add nuw nsw i32 %12047, 1
  %12183 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12179, i64 0, i32 1, i32 1
  %12184 = load i32, i32* %12183, align 4
  %12185 = icmp slt i32 %12182, %12184
  br i1 %12185, label %12044, label %12028

12186:                                            ; preds = %12030, %12008
  %12187 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12187, align 4
  br label %13459

12188:                                            ; preds = %11970
  %12189 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12190 = load i32, i32* %12189, align 8
  %12191 = sdiv i32 %12190, 2
  %12192 = sext i32 %12191 to i64
  %12193 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12194 = load i32, i32* %12193, align 8
  %12195 = sdiv i32 %12194, 2
  %12196 = sext i32 %12195 to i64
  %12197 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12198 = load i8*, i8** %12197, align 8
  %12199 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12200 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12199, align 8
  %12201 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12200, i64 0, i32 0, i32 1
  %12202 = load i32, i32* %12201, align 4
  %12203 = mul nsw i32 %12202, %12190
  %12204 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12205 = load i32, i32* %12204, align 4
  %12206 = add nsw i32 %12203, %12205
  %12207 = sext i32 %12206 to i64
  %12208 = getelementptr inbounds i8, i8* %12198, i64 %12207
  %12209 = bitcast i8* %12208 to i16*
  %12210 = icmp slt i32 %12194, 0
  %12211 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12212 = load i32, i32* %12211, align 8
  %12213 = icmp sgt i32 %12212, 1
  %12214 = and i1 %12210, %12213
  br i1 %12214, label %12215, label %12225

12215:                                            ; preds = %12188
  %12216 = add nsw i32 %12212, -1
  %12217 = sext i32 %12216 to i64
  %12218 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12219 = load i32, i32* %12218, align 4
  %12220 = sext i32 %12219 to i64
  %12221 = mul nsw i64 %12192, %12217
  %12222 = mul i64 %12221, %12220
  %12223 = sub i64 0, %12222
  %12224 = getelementptr inbounds i16, i16* %12209, i64 %12223
  br label %12227

12225:                                            ; preds = %12188
  %12226 = icmp sgt i32 %12212, 0
  br i1 %12226, label %12227, label %12407

12227:                                            ; preds = %12225, %12215
  %12228 = phi i16* [ %12224, %12215 ], [ %12209, %12225 ]
  %12229 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12230 = bitcast i8** %12229 to i16**
  %12231 = load i16*, i16** %12230, align 8
  %12232 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12233 = bitcast i8** %12232 to float**
  %12234 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12235

12235:                                            ; preds = %12247, %12227
  %12236 = phi i32 [ %12212, %12227 ], [ %12248, %12247 ]
  %12237 = phi %"class.blink::IntRect"* [ %12200, %12227 ], [ %12249, %12247 ]
  %12238 = phi %"class.blink::IntRect"* [ %12200, %12227 ], [ %12250, %12247 ]
  %12239 = phi i32 [ 0, %12227 ], [ %12259, %12247 ]
  %12240 = phi i16* [ %12231, %12227 ], [ %12252, %12247 ]
  %12241 = phi i16* [ %12228, %12227 ], [ %12258, %12247 ]
  %12242 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12238, i64 0, i32 1, i32 1
  %12243 = load i32, i32* %12242, align 4
  %12244 = icmp sgt i32 %12243, 0
  br i1 %12244, label %12261, label %12247

12245:                                            ; preds = %12399
  %12246 = load i32, i32* %12211, align 8
  br label %12247

12247:                                            ; preds = %12245, %12235
  %12248 = phi i32 [ %12236, %12235 ], [ %12246, %12245 ]
  %12249 = phi %"class.blink::IntRect"* [ %12237, %12235 ], [ %12400, %12245 ]
  %12250 = phi %"class.blink::IntRect"* [ %12238, %12235 ], [ %12400, %12245 ]
  %12251 = phi i16* [ %12241, %12235 ], [ %12401, %12245 ]
  %12252 = phi i16* [ %12240, %12235 ], [ %12402, %12245 ]
  %12253 = phi i32 [ %12243, %12235 ], [ %12405, %12245 ]
  %12254 = load i32, i32* %12234, align 4
  %12255 = sub nsw i32 %12254, %12253
  %12256 = sext i32 %12255 to i64
  %12257 = mul nsw i64 %12256, %12192
  %12258 = getelementptr inbounds i16, i16* %12251, i64 %12257
  %12259 = add nuw nsw i32 %12239, 1
  %12260 = icmp slt i32 %12259, %12248
  br i1 %12260, label %12235, label %12407

12261:                                            ; preds = %12235, %12399
  %12262 = phi %"class.blink::IntRect"* [ %12400, %12399 ], [ %12237, %12235 ]
  %12263 = phi %"class.blink::IntRect"* [ %12400, %12399 ], [ %12238, %12235 ]
  %12264 = phi i32 [ %12403, %12399 ], [ 0, %12235 ]
  %12265 = phi i16* [ %12402, %12399 ], [ %12240, %12235 ]
  %12266 = phi i16* [ %12401, %12399 ], [ %12241, %12235 ]
  %12267 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12263, i64 0, i32 1, i32 0
  %12268 = load i32, i32* %12267, align 4
  %12269 = icmp eq i32 %12268, 0
  br i1 %12269, label %12399, label %12270

12270:                                            ; preds = %12261
  %12271 = load float*, float** %12233, align 8
  br label %12272

12272:                                            ; preds = %12272, %12270
  %12273 = phi i32 [ %12348, %12272 ], [ 0, %12270 ]
  %12274 = phi i16* [ %12346, %12272 ], [ %12266, %12270 ]
  %12275 = phi float* [ %12347, %12272 ], [ %12271, %12270 ]
  %12276 = load i16, i16* %12274, align 2
  %12277 = zext i16 %12276 to i32
  %12278 = lshr i32 %12277, 10
  %12279 = zext i32 %12278 to i64
  %12280 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12279
  %12281 = load i16, i16* %12280, align 2
  %12282 = zext i16 %12281 to i32
  %12283 = and i32 %12277, 1023
  %12284 = add nuw nsw i32 %12283, %12282
  %12285 = zext i32 %12284 to i64
  %12286 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12285
  %12287 = load i32, i32* %12286, align 4
  %12288 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12279
  %12289 = load i32, i32* %12288, align 4
  %12290 = add i32 %12289, %12287
  %12291 = bitcast float* %12275 to i32*
  store i32 %12290, i32* %12291, align 4
  %12292 = getelementptr inbounds i16, i16* %12274, i64 1
  %12293 = load i16, i16* %12292, align 2
  %12294 = zext i16 %12293 to i32
  %12295 = lshr i32 %12294, 10
  %12296 = zext i32 %12295 to i64
  %12297 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12296
  %12298 = load i16, i16* %12297, align 2
  %12299 = zext i16 %12298 to i32
  %12300 = and i32 %12294, 1023
  %12301 = add nuw nsw i32 %12300, %12299
  %12302 = zext i32 %12301 to i64
  %12303 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12302
  %12304 = load i32, i32* %12303, align 4
  %12305 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12296
  %12306 = load i32, i32* %12305, align 4
  %12307 = add i32 %12306, %12304
  %12308 = getelementptr inbounds float, float* %12275, i64 1
  %12309 = bitcast float* %12308 to i32*
  store i32 %12307, i32* %12309, align 4
  %12310 = getelementptr inbounds i16, i16* %12274, i64 2
  %12311 = load i16, i16* %12310, align 2
  %12312 = zext i16 %12311 to i32
  %12313 = lshr i32 %12312, 10
  %12314 = zext i32 %12313 to i64
  %12315 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12314
  %12316 = load i16, i16* %12315, align 2
  %12317 = zext i16 %12316 to i32
  %12318 = and i32 %12312, 1023
  %12319 = add nuw nsw i32 %12318, %12317
  %12320 = zext i32 %12319 to i64
  %12321 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12320
  %12322 = load i32, i32* %12321, align 4
  %12323 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12314
  %12324 = load i32, i32* %12323, align 4
  %12325 = add i32 %12324, %12322
  %12326 = getelementptr inbounds float, float* %12275, i64 2
  %12327 = bitcast float* %12326 to i32*
  store i32 %12325, i32* %12327, align 4
  %12328 = getelementptr inbounds i16, i16* %12274, i64 3
  %12329 = load i16, i16* %12328, align 2
  %12330 = zext i16 %12329 to i32
  %12331 = lshr i32 %12330, 10
  %12332 = zext i32 %12331 to i64
  %12333 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12332
  %12334 = load i16, i16* %12333, align 2
  %12335 = zext i16 %12334 to i32
  %12336 = and i32 %12330, 1023
  %12337 = add nuw nsw i32 %12336, %12335
  %12338 = zext i32 %12337 to i64
  %12339 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12338
  %12340 = load i32, i32* %12339, align 4
  %12341 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12332
  %12342 = load i32, i32* %12341, align 4
  %12343 = add i32 %12342, %12340
  %12344 = getelementptr inbounds float, float* %12275, i64 3
  %12345 = bitcast float* %12344 to i32*
  store i32 %12343, i32* %12345, align 4
  %12346 = getelementptr inbounds i16, i16* %12274, i64 4
  %12347 = getelementptr inbounds float, float* %12275, i64 4
  %12348 = add nuw i32 %12273, 1
  %12349 = icmp eq i32 %12348, %12268
  br i1 %12349, label %12350, label %12272

12350:                                            ; preds = %12272
  %12351 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12199, align 8
  %12352 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12351, i64 0, i32 1, i32 0
  %12353 = load i32, i32* %12352, align 4
  %12354 = icmp eq i32 %12353, 0
  br i1 %12354, label %12399, label %12355

12355:                                            ; preds = %12350
  %12356 = load float*, float** %12233, align 8
  br label %12357

12357:                                            ; preds = %12357, %12355
  %12358 = phi float* [ %12393, %12357 ], [ %12356, %12355 ]
  %12359 = phi i32 [ %12395, %12357 ], [ 0, %12355 ]
  %12360 = phi i16* [ %12394, %12357 ], [ %12265, %12355 ]
  %12361 = getelementptr inbounds float, float* %12358, i64 3
  %12362 = load float, float* %12361, align 4
  %12363 = load float, float* %12358, align 4
  %12364 = fmul float %12362, %12363
  %12365 = bitcast float %12364 to i32
  %12366 = lshr i32 %12365, 23
  %12367 = zext i32 %12366 to i64
  %12368 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12367
  %12369 = load i16, i16* %12368, align 2
  %12370 = and i32 %12365, 8388607
  %12371 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12367
  %12372 = load i8, i8* %12371, align 1
  %12373 = zext i8 %12372 to i32
  %12374 = lshr i32 %12370, %12373
  %12375 = trunc i32 %12374 to i16
  %12376 = add i16 %12369, %12375
  store i16 %12376, i16* %12360, align 2
  %12377 = getelementptr inbounds float, float* %12358, i64 1
  %12378 = load float, float* %12377, align 4
  %12379 = fmul float %12362, %12378
  %12380 = bitcast float %12379 to i32
  %12381 = lshr i32 %12380, 23
  %12382 = zext i32 %12381 to i64
  %12383 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12382
  %12384 = load i16, i16* %12383, align 2
  %12385 = and i32 %12380, 8388607
  %12386 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12382
  %12387 = load i8, i8* %12386, align 1
  %12388 = zext i8 %12387 to i32
  %12389 = lshr i32 %12385, %12388
  %12390 = trunc i32 %12389 to i16
  %12391 = add i16 %12384, %12390
  %12392 = getelementptr inbounds i16, i16* %12360, i64 1
  store i16 %12391, i16* %12392, align 2
  %12393 = getelementptr inbounds float, float* %12358, i64 4
  %12394 = getelementptr inbounds i16, i16* %12360, i64 2
  %12395 = add nuw i32 %12359, 1
  %12396 = icmp eq i32 %12395, %12353
  br i1 %12396, label %12397, label %12357

12397:                                            ; preds = %12357
  %12398 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12199, align 8
  br label %12399

12399:                                            ; preds = %12397, %12350, %12261
  %12400 = phi %"class.blink::IntRect"* [ %12398, %12397 ], [ %12351, %12350 ], [ %12262, %12261 ]
  %12401 = getelementptr inbounds i16, i16* %12266, i64 %12192
  %12402 = getelementptr inbounds i16, i16* %12265, i64 %12196
  %12403 = add nuw nsw i32 %12264, 1
  %12404 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12400, i64 0, i32 1, i32 1
  %12405 = load i32, i32* %12404, align 4
  %12406 = icmp slt i32 %12403, %12405
  br i1 %12406, label %12261, label %12245

12407:                                            ; preds = %12247, %12225
  %12408 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12408, align 4
  br label %13459

12409:                                            ; preds = %11970
  %12410 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12411 = load i32, i32* %12410, align 8
  %12412 = sdiv i32 %12411, 2
  %12413 = sext i32 %12412 to i64
  %12414 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12415 = load i32, i32* %12414, align 8
  %12416 = sdiv i32 %12415, 2
  %12417 = sext i32 %12416 to i64
  %12418 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12419 = load i8*, i8** %12418, align 8
  %12420 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12421 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12420, align 8
  %12422 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12421, i64 0, i32 0, i32 1
  %12423 = load i32, i32* %12422, align 4
  %12424 = mul nsw i32 %12423, %12411
  %12425 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12426 = load i32, i32* %12425, align 4
  %12427 = add nsw i32 %12424, %12426
  %12428 = sext i32 %12427 to i64
  %12429 = getelementptr inbounds i8, i8* %12419, i64 %12428
  %12430 = bitcast i8* %12429 to i16*
  %12431 = icmp slt i32 %12415, 0
  %12432 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12433 = load i32, i32* %12432, align 8
  %12434 = icmp sgt i32 %12433, 1
  %12435 = and i1 %12431, %12434
  br i1 %12435, label %12436, label %12446

12436:                                            ; preds = %12409
  %12437 = add nsw i32 %12433, -1
  %12438 = sext i32 %12437 to i64
  %12439 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12440 = load i32, i32* %12439, align 4
  %12441 = sext i32 %12440 to i64
  %12442 = mul nsw i64 %12413, %12438
  %12443 = mul i64 %12442, %12441
  %12444 = sub i64 0, %12443
  %12445 = getelementptr inbounds i16, i16* %12430, i64 %12444
  br label %12448

12446:                                            ; preds = %12409
  %12447 = icmp sgt i32 %12433, 0
  br i1 %12447, label %12448, label %12631

12448:                                            ; preds = %12446, %12436
  %12449 = phi i16* [ %12445, %12436 ], [ %12430, %12446 ]
  %12450 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12451 = bitcast i8** %12450 to i16**
  %12452 = load i16*, i16** %12451, align 8
  %12453 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12454 = bitcast i8** %12453 to float**
  %12455 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12456

12456:                                            ; preds = %12468, %12448
  %12457 = phi i32 [ %12433, %12448 ], [ %12469, %12468 ]
  %12458 = phi %"class.blink::IntRect"* [ %12421, %12448 ], [ %12470, %12468 ]
  %12459 = phi %"class.blink::IntRect"* [ %12421, %12448 ], [ %12471, %12468 ]
  %12460 = phi i32 [ 0, %12448 ], [ %12480, %12468 ]
  %12461 = phi i16* [ %12452, %12448 ], [ %12473, %12468 ]
  %12462 = phi i16* [ %12449, %12448 ], [ %12479, %12468 ]
  %12463 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12459, i64 0, i32 1, i32 1
  %12464 = load i32, i32* %12463, align 4
  %12465 = icmp sgt i32 %12464, 0
  br i1 %12465, label %12482, label %12468

12466:                                            ; preds = %12623
  %12467 = load i32, i32* %12432, align 8
  br label %12468

12468:                                            ; preds = %12466, %12456
  %12469 = phi i32 [ %12457, %12456 ], [ %12467, %12466 ]
  %12470 = phi %"class.blink::IntRect"* [ %12458, %12456 ], [ %12624, %12466 ]
  %12471 = phi %"class.blink::IntRect"* [ %12459, %12456 ], [ %12624, %12466 ]
  %12472 = phi i16* [ %12462, %12456 ], [ %12625, %12466 ]
  %12473 = phi i16* [ %12461, %12456 ], [ %12626, %12466 ]
  %12474 = phi i32 [ %12464, %12456 ], [ %12629, %12466 ]
  %12475 = load i32, i32* %12455, align 4
  %12476 = sub nsw i32 %12475, %12474
  %12477 = sext i32 %12476 to i64
  %12478 = mul nsw i64 %12477, %12413
  %12479 = getelementptr inbounds i16, i16* %12472, i64 %12478
  %12480 = add nuw nsw i32 %12460, 1
  %12481 = icmp slt i32 %12480, %12469
  br i1 %12481, label %12456, label %12631

12482:                                            ; preds = %12456, %12623
  %12483 = phi %"class.blink::IntRect"* [ %12624, %12623 ], [ %12458, %12456 ]
  %12484 = phi %"class.blink::IntRect"* [ %12624, %12623 ], [ %12459, %12456 ]
  %12485 = phi i32 [ %12627, %12623 ], [ 0, %12456 ]
  %12486 = phi i16* [ %12626, %12623 ], [ %12461, %12456 ]
  %12487 = phi i16* [ %12625, %12623 ], [ %12462, %12456 ]
  %12488 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12484, i64 0, i32 1, i32 0
  %12489 = load i32, i32* %12488, align 4
  %12490 = icmp eq i32 %12489, 0
  br i1 %12490, label %12623, label %12491

12491:                                            ; preds = %12482
  %12492 = load float*, float** %12454, align 8
  br label %12493

12493:                                            ; preds = %12493, %12491
  %12494 = phi i32 [ %12569, %12493 ], [ 0, %12491 ]
  %12495 = phi i16* [ %12567, %12493 ], [ %12487, %12491 ]
  %12496 = phi float* [ %12568, %12493 ], [ %12492, %12491 ]
  %12497 = load i16, i16* %12495, align 2
  %12498 = zext i16 %12497 to i32
  %12499 = lshr i32 %12498, 10
  %12500 = zext i32 %12499 to i64
  %12501 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12500
  %12502 = load i16, i16* %12501, align 2
  %12503 = zext i16 %12502 to i32
  %12504 = and i32 %12498, 1023
  %12505 = add nuw nsw i32 %12504, %12503
  %12506 = zext i32 %12505 to i64
  %12507 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12506
  %12508 = load i32, i32* %12507, align 4
  %12509 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12500
  %12510 = load i32, i32* %12509, align 4
  %12511 = add i32 %12510, %12508
  %12512 = bitcast float* %12496 to i32*
  store i32 %12511, i32* %12512, align 4
  %12513 = getelementptr inbounds i16, i16* %12495, i64 1
  %12514 = load i16, i16* %12513, align 2
  %12515 = zext i16 %12514 to i32
  %12516 = lshr i32 %12515, 10
  %12517 = zext i32 %12516 to i64
  %12518 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12517
  %12519 = load i16, i16* %12518, align 2
  %12520 = zext i16 %12519 to i32
  %12521 = and i32 %12515, 1023
  %12522 = add nuw nsw i32 %12521, %12520
  %12523 = zext i32 %12522 to i64
  %12524 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12523
  %12525 = load i32, i32* %12524, align 4
  %12526 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12517
  %12527 = load i32, i32* %12526, align 4
  %12528 = add i32 %12527, %12525
  %12529 = getelementptr inbounds float, float* %12496, i64 1
  %12530 = bitcast float* %12529 to i32*
  store i32 %12528, i32* %12530, align 4
  %12531 = getelementptr inbounds i16, i16* %12495, i64 2
  %12532 = load i16, i16* %12531, align 2
  %12533 = zext i16 %12532 to i32
  %12534 = lshr i32 %12533, 10
  %12535 = zext i32 %12534 to i64
  %12536 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12535
  %12537 = load i16, i16* %12536, align 2
  %12538 = zext i16 %12537 to i32
  %12539 = and i32 %12533, 1023
  %12540 = add nuw nsw i32 %12539, %12538
  %12541 = zext i32 %12540 to i64
  %12542 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12541
  %12543 = load i32, i32* %12542, align 4
  %12544 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12535
  %12545 = load i32, i32* %12544, align 4
  %12546 = add i32 %12545, %12543
  %12547 = getelementptr inbounds float, float* %12496, i64 2
  %12548 = bitcast float* %12547 to i32*
  store i32 %12546, i32* %12548, align 4
  %12549 = getelementptr inbounds i16, i16* %12495, i64 3
  %12550 = load i16, i16* %12549, align 2
  %12551 = zext i16 %12550 to i32
  %12552 = lshr i32 %12551, 10
  %12553 = zext i32 %12552 to i64
  %12554 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12553
  %12555 = load i16, i16* %12554, align 2
  %12556 = zext i16 %12555 to i32
  %12557 = and i32 %12551, 1023
  %12558 = add nuw nsw i32 %12557, %12556
  %12559 = zext i32 %12558 to i64
  %12560 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12559
  %12561 = load i32, i32* %12560, align 4
  %12562 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12553
  %12563 = load i32, i32* %12562, align 4
  %12564 = add i32 %12563, %12561
  %12565 = getelementptr inbounds float, float* %12496, i64 3
  %12566 = bitcast float* %12565 to i32*
  store i32 %12564, i32* %12566, align 4
  %12567 = getelementptr inbounds i16, i16* %12495, i64 4
  %12568 = getelementptr inbounds float, float* %12496, i64 4
  %12569 = add nuw i32 %12494, 1
  %12570 = icmp eq i32 %12569, %12489
  br i1 %12570, label %12571, label %12493

12571:                                            ; preds = %12493
  %12572 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12420, align 8
  %12573 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12572, i64 0, i32 1, i32 0
  %12574 = load i32, i32* %12573, align 4
  %12575 = icmp eq i32 %12574, 0
  br i1 %12575, label %12623, label %12576

12576:                                            ; preds = %12571
  %12577 = load float*, float** %12454, align 8
  br label %12578

12578:                                            ; preds = %12578, %12576
  %12579 = phi i32 [ %12619, %12578 ], [ 0, %12576 ]
  %12580 = phi float* [ %12617, %12578 ], [ %12577, %12576 ]
  %12581 = phi i16* [ %12618, %12578 ], [ %12486, %12576 ]
  %12582 = getelementptr inbounds float, float* %12580, i64 3
  %12583 = load float, float* %12582, align 4
  %12584 = fcmp une float %12583, 0.000000e+00
  %12585 = fdiv float 1.000000e+00, %12583
  %12586 = select i1 %12584, float %12585, float 1.000000e+00
  %12587 = load float, float* %12580, align 4
  %12588 = fmul float %12587, %12586
  %12589 = bitcast float %12588 to i32
  %12590 = lshr i32 %12589, 23
  %12591 = zext i32 %12590 to i64
  %12592 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12591
  %12593 = load i16, i16* %12592, align 2
  %12594 = and i32 %12589, 8388607
  %12595 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12591
  %12596 = load i8, i8* %12595, align 1
  %12597 = zext i8 %12596 to i32
  %12598 = lshr i32 %12594, %12597
  %12599 = trunc i32 %12598 to i16
  %12600 = add i16 %12593, %12599
  store i16 %12600, i16* %12581, align 2
  %12601 = getelementptr inbounds float, float* %12580, i64 1
  %12602 = load float, float* %12601, align 4
  %12603 = fmul float %12586, %12602
  %12604 = bitcast float %12603 to i32
  %12605 = lshr i32 %12604, 23
  %12606 = zext i32 %12605 to i64
  %12607 = getelementptr inbounds [512 x i16], [512 x i16]* @_ZN5blink12_GLOBAL__N_112g_base_tableE, i64 0, i64 %12606
  %12608 = load i16, i16* %12607, align 2
  %12609 = and i32 %12604, 8388607
  %12610 = getelementptr inbounds [512 x i8], [512 x i8]* @_ZN5blink12_GLOBAL__N_113g_shift_tableE, i64 0, i64 %12606
  %12611 = load i8, i8* %12610, align 1
  %12612 = zext i8 %12611 to i32
  %12613 = lshr i32 %12609, %12612
  %12614 = trunc i32 %12613 to i16
  %12615 = add i16 %12608, %12614
  %12616 = getelementptr inbounds i16, i16* %12581, i64 1
  store i16 %12615, i16* %12616, align 2
  %12617 = getelementptr inbounds float, float* %12580, i64 4
  %12618 = getelementptr inbounds i16, i16* %12581, i64 2
  %12619 = add nuw i32 %12579, 1
  %12620 = icmp eq i32 %12619, %12574
  br i1 %12620, label %12621, label %12578

12621:                                            ; preds = %12578
  %12622 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12420, align 8
  br label %12623

12623:                                            ; preds = %12621, %12571, %12482
  %12624 = phi %"class.blink::IntRect"* [ %12622, %12621 ], [ %12572, %12571 ], [ %12483, %12482 ]
  %12625 = getelementptr inbounds i16, i16* %12487, i64 %12413
  %12626 = getelementptr inbounds i16, i16* %12486, i64 %12417
  %12627 = add nuw nsw i32 %12485, 1
  %12628 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12624, i64 0, i32 1, i32 1
  %12629 = load i32, i32* %12628, align 4
  %12630 = icmp slt i32 %12627, %12629
  br i1 %12630, label %12482, label %12466

12631:                                            ; preds = %12468, %12446
  %12632 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12632, align 4
  br label %13459

12633:                                            ; preds = %3
  switch i32 %2, label %13459 [
    i32 0, label %12634
    i32 1, label %12886
    i32 2, label %13205
  ]

12634:                                            ; preds = %12633
  %12635 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12636 = load i32, i32* %12635, align 8
  %12637 = sdiv i32 %12636, 2
  %12638 = sext i32 %12637 to i64
  %12639 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12640 = load i32, i32* %12639, align 8
  %12641 = sdiv i32 %12640, 4
  %12642 = sext i32 %12641 to i64
  %12643 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12644 = load i8*, i8** %12643, align 8
  %12645 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12646 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12645, align 8
  %12647 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12646, i64 0, i32 0, i32 1
  %12648 = load i32, i32* %12647, align 4
  %12649 = mul nsw i32 %12648, %12636
  %12650 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12651 = load i32, i32* %12650, align 4
  %12652 = add nsw i32 %12649, %12651
  %12653 = sext i32 %12652 to i64
  %12654 = getelementptr inbounds i8, i8* %12644, i64 %12653
  %12655 = bitcast i8* %12654 to i16*
  %12656 = icmp slt i32 %12640, 0
  %12657 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12658 = load i32, i32* %12657, align 8
  %12659 = icmp sgt i32 %12658, 1
  %12660 = and i1 %12656, %12659
  br i1 %12660, label %12661, label %12671

12661:                                            ; preds = %12634
  %12662 = add nsw i32 %12658, -1
  %12663 = sext i32 %12662 to i64
  %12664 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12665 = load i32, i32* %12664, align 4
  %12666 = sext i32 %12665 to i64
  %12667 = mul nsw i64 %12638, %12663
  %12668 = mul i64 %12667, %12666
  %12669 = sub i64 0, %12668
  %12670 = getelementptr inbounds i16, i16* %12655, i64 %12669
  br label %12673

12671:                                            ; preds = %12634
  %12672 = icmp sgt i32 %12658, 0
  br i1 %12672, label %12673, label %12884

12673:                                            ; preds = %12671, %12661
  %12674 = phi i16* [ %12670, %12661 ], [ %12655, %12671 ]
  %12675 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12676 = bitcast i8** %12675 to float**
  %12677 = load float*, float** %12676, align 8
  %12678 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12679 = bitcast i8** %12678 to float**
  %12680 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12681

12681:                                            ; preds = %12693, %12673
  %12682 = phi i32 [ %12658, %12673 ], [ %12694, %12693 ]
  %12683 = phi %"class.blink::IntRect"* [ %12646, %12673 ], [ %12695, %12693 ]
  %12684 = phi %"class.blink::IntRect"* [ %12646, %12673 ], [ %12696, %12693 ]
  %12685 = phi i32 [ 0, %12673 ], [ %12705, %12693 ]
  %12686 = phi float* [ %12677, %12673 ], [ %12698, %12693 ]
  %12687 = phi i16* [ %12674, %12673 ], [ %12704, %12693 ]
  %12688 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12684, i64 0, i32 1, i32 1
  %12689 = load i32, i32* %12688, align 4
  %12690 = icmp sgt i32 %12689, 0
  br i1 %12690, label %12707, label %12693

12691:                                            ; preds = %12876
  %12692 = load i32, i32* %12657, align 8
  br label %12693

12693:                                            ; preds = %12691, %12681
  %12694 = phi i32 [ %12682, %12681 ], [ %12692, %12691 ]
  %12695 = phi %"class.blink::IntRect"* [ %12683, %12681 ], [ %12877, %12691 ]
  %12696 = phi %"class.blink::IntRect"* [ %12684, %12681 ], [ %12877, %12691 ]
  %12697 = phi i16* [ %12687, %12681 ], [ %12878, %12691 ]
  %12698 = phi float* [ %12686, %12681 ], [ %12879, %12691 ]
  %12699 = phi i32 [ %12689, %12681 ], [ %12882, %12691 ]
  %12700 = load i32, i32* %12680, align 4
  %12701 = sub nsw i32 %12700, %12699
  %12702 = sext i32 %12701 to i64
  %12703 = mul nsw i64 %12702, %12638
  %12704 = getelementptr inbounds i16, i16* %12697, i64 %12703
  %12705 = add nuw nsw i32 %12685, 1
  %12706 = icmp slt i32 %12705, %12694
  br i1 %12706, label %12681, label %12884

12707:                                            ; preds = %12681, %12876
  %12708 = phi %"class.blink::IntRect"* [ %12877, %12876 ], [ %12683, %12681 ]
  %12709 = phi %"class.blink::IntRect"* [ %12877, %12876 ], [ %12684, %12681 ]
  %12710 = phi i32 [ %12880, %12876 ], [ 0, %12681 ]
  %12711 = phi float* [ %12879, %12876 ], [ %12686, %12681 ]
  %12712 = phi i16* [ %12878, %12876 ], [ %12687, %12681 ]
  %12713 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12709, i64 0, i32 1, i32 0
  %12714 = load i32, i32* %12713, align 4
  %12715 = icmp eq i32 %12714, 0
  br i1 %12715, label %12876, label %12716

12716:                                            ; preds = %12707
  %12717 = load float*, float** %12679, align 8
  br label %12718

12718:                                            ; preds = %12718, %12716
  %12719 = phi i32 [ %12794, %12718 ], [ 0, %12716 ]
  %12720 = phi i16* [ %12792, %12718 ], [ %12712, %12716 ]
  %12721 = phi float* [ %12793, %12718 ], [ %12717, %12716 ]
  %12722 = load i16, i16* %12720, align 2
  %12723 = zext i16 %12722 to i32
  %12724 = lshr i32 %12723, 10
  %12725 = zext i32 %12724 to i64
  %12726 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12725
  %12727 = load i16, i16* %12726, align 2
  %12728 = zext i16 %12727 to i32
  %12729 = and i32 %12723, 1023
  %12730 = add nuw nsw i32 %12729, %12728
  %12731 = zext i32 %12730 to i64
  %12732 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12731
  %12733 = load i32, i32* %12732, align 4
  %12734 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12725
  %12735 = load i32, i32* %12734, align 4
  %12736 = add i32 %12735, %12733
  %12737 = bitcast float* %12721 to i32*
  store i32 %12736, i32* %12737, align 4
  %12738 = getelementptr inbounds i16, i16* %12720, i64 1
  %12739 = load i16, i16* %12738, align 2
  %12740 = zext i16 %12739 to i32
  %12741 = lshr i32 %12740, 10
  %12742 = zext i32 %12741 to i64
  %12743 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12742
  %12744 = load i16, i16* %12743, align 2
  %12745 = zext i16 %12744 to i32
  %12746 = and i32 %12740, 1023
  %12747 = add nuw nsw i32 %12746, %12745
  %12748 = zext i32 %12747 to i64
  %12749 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12748
  %12750 = load i32, i32* %12749, align 4
  %12751 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12742
  %12752 = load i32, i32* %12751, align 4
  %12753 = add i32 %12752, %12750
  %12754 = getelementptr inbounds float, float* %12721, i64 1
  %12755 = bitcast float* %12754 to i32*
  store i32 %12753, i32* %12755, align 4
  %12756 = getelementptr inbounds i16, i16* %12720, i64 2
  %12757 = load i16, i16* %12756, align 2
  %12758 = zext i16 %12757 to i32
  %12759 = lshr i32 %12758, 10
  %12760 = zext i32 %12759 to i64
  %12761 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12760
  %12762 = load i16, i16* %12761, align 2
  %12763 = zext i16 %12762 to i32
  %12764 = and i32 %12758, 1023
  %12765 = add nuw nsw i32 %12764, %12763
  %12766 = zext i32 %12765 to i64
  %12767 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12766
  %12768 = load i32, i32* %12767, align 4
  %12769 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12760
  %12770 = load i32, i32* %12769, align 4
  %12771 = add i32 %12770, %12768
  %12772 = getelementptr inbounds float, float* %12721, i64 2
  %12773 = bitcast float* %12772 to i32*
  store i32 %12771, i32* %12773, align 4
  %12774 = getelementptr inbounds i16, i16* %12720, i64 3
  %12775 = load i16, i16* %12774, align 2
  %12776 = zext i16 %12775 to i32
  %12777 = lshr i32 %12776, 10
  %12778 = zext i32 %12777 to i64
  %12779 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12778
  %12780 = load i16, i16* %12779, align 2
  %12781 = zext i16 %12780 to i32
  %12782 = and i32 %12776, 1023
  %12783 = add nuw nsw i32 %12782, %12781
  %12784 = zext i32 %12783 to i64
  %12785 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12784
  %12786 = load i32, i32* %12785, align 4
  %12787 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12778
  %12788 = load i32, i32* %12787, align 4
  %12789 = add i32 %12788, %12786
  %12790 = getelementptr inbounds float, float* %12721, i64 3
  %12791 = bitcast float* %12790 to i32*
  store i32 %12789, i32* %12791, align 4
  %12792 = getelementptr inbounds i16, i16* %12720, i64 4
  %12793 = getelementptr inbounds float, float* %12721, i64 4
  %12794 = add nuw i32 %12719, 1
  %12795 = icmp eq i32 %12794, %12714
  br i1 %12795, label %12796, label %12718

12796:                                            ; preds = %12718
  %12797 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12645, align 8
  %12798 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12797, i64 0, i32 1, i32 0
  %12799 = load i32, i32* %12798, align 4
  %12800 = icmp eq i32 %12799, 0
  br i1 %12800, label %12876, label %12801

12801:                                            ; preds = %12796
  %12802 = load float*, float** %12679, align 8
  %12803 = add i32 %12799, -1
  %12804 = and i32 %12799, 3
  %12805 = icmp ult i32 %12803, 3
  br i1 %12805, label %12854, label %12806

12806:                                            ; preds = %12801
  %12807 = sub i32 %12799, %12804
  br label %12808

12808:                                            ; preds = %12808, %12806
  %12809 = phi float* [ %12802, %12806 ], [ %12850, %12808 ]
  %12810 = phi float* [ %12711, %12806 ], [ %12851, %12808 ]
  %12811 = phi i32 [ %12807, %12806 ], [ %12852, %12808 ]
  %12812 = bitcast float* %12809 to i32*
  %12813 = load i32, i32* %12812, align 4
  %12814 = bitcast float* %12810 to i32*
  store i32 %12813, i32* %12814, align 4
  %12815 = getelementptr inbounds float, float* %12809, i64 1
  %12816 = bitcast float* %12815 to i32*
  %12817 = load i32, i32* %12816, align 4
  %12818 = getelementptr inbounds float, float* %12810, i64 1
  %12819 = bitcast float* %12818 to i32*
  store i32 %12817, i32* %12819, align 4
  %12820 = getelementptr inbounds float, float* %12809, i64 4
  %12821 = getelementptr inbounds float, float* %12810, i64 2
  %12822 = bitcast float* %12820 to i32*
  %12823 = load i32, i32* %12822, align 4
  %12824 = bitcast float* %12821 to i32*
  store i32 %12823, i32* %12824, align 4
  %12825 = getelementptr inbounds float, float* %12809, i64 5
  %12826 = bitcast float* %12825 to i32*
  %12827 = load i32, i32* %12826, align 4
  %12828 = getelementptr inbounds float, float* %12810, i64 3
  %12829 = bitcast float* %12828 to i32*
  store i32 %12827, i32* %12829, align 4
  %12830 = getelementptr inbounds float, float* %12809, i64 8
  %12831 = getelementptr inbounds float, float* %12810, i64 4
  %12832 = bitcast float* %12830 to i32*
  %12833 = load i32, i32* %12832, align 4
  %12834 = bitcast float* %12831 to i32*
  store i32 %12833, i32* %12834, align 4
  %12835 = getelementptr inbounds float, float* %12809, i64 9
  %12836 = bitcast float* %12835 to i32*
  %12837 = load i32, i32* %12836, align 4
  %12838 = getelementptr inbounds float, float* %12810, i64 5
  %12839 = bitcast float* %12838 to i32*
  store i32 %12837, i32* %12839, align 4
  %12840 = getelementptr inbounds float, float* %12809, i64 12
  %12841 = getelementptr inbounds float, float* %12810, i64 6
  %12842 = bitcast float* %12840 to i32*
  %12843 = load i32, i32* %12842, align 4
  %12844 = bitcast float* %12841 to i32*
  store i32 %12843, i32* %12844, align 4
  %12845 = getelementptr inbounds float, float* %12809, i64 13
  %12846 = bitcast float* %12845 to i32*
  %12847 = load i32, i32* %12846, align 4
  %12848 = getelementptr inbounds float, float* %12810, i64 7
  %12849 = bitcast float* %12848 to i32*
  store i32 %12847, i32* %12849, align 4
  %12850 = getelementptr inbounds float, float* %12809, i64 16
  %12851 = getelementptr inbounds float, float* %12810, i64 8
  %12852 = add i32 %12811, -4
  %12853 = icmp eq i32 %12852, 0
  br i1 %12853, label %12854, label %12808

12854:                                            ; preds = %12808, %12801
  %12855 = phi float* [ %12802, %12801 ], [ %12850, %12808 ]
  %12856 = phi float* [ %12711, %12801 ], [ %12851, %12808 ]
  %12857 = icmp eq i32 %12804, 0
  br i1 %12857, label %12874, label %12858

12858:                                            ; preds = %12854, %12858
  %12859 = phi float* [ %12870, %12858 ], [ %12855, %12854 ]
  %12860 = phi float* [ %12871, %12858 ], [ %12856, %12854 ]
  %12861 = phi i32 [ %12872, %12858 ], [ %12804, %12854 ]
  %12862 = bitcast float* %12859 to i32*
  %12863 = load i32, i32* %12862, align 4
  %12864 = bitcast float* %12860 to i32*
  store i32 %12863, i32* %12864, align 4
  %12865 = getelementptr inbounds float, float* %12859, i64 1
  %12866 = bitcast float* %12865 to i32*
  %12867 = load i32, i32* %12866, align 4
  %12868 = getelementptr inbounds float, float* %12860, i64 1
  %12869 = bitcast float* %12868 to i32*
  store i32 %12867, i32* %12869, align 4
  %12870 = getelementptr inbounds float, float* %12859, i64 4
  %12871 = getelementptr inbounds float, float* %12860, i64 2
  %12872 = add i32 %12861, -1
  %12873 = icmp eq i32 %12872, 0
  br i1 %12873, label %12874, label %12858, !llvm.loop !770

12874:                                            ; preds = %12858, %12854
  %12875 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12645, align 8
  br label %12876

12876:                                            ; preds = %12874, %12796, %12707
  %12877 = phi %"class.blink::IntRect"* [ %12875, %12874 ], [ %12797, %12796 ], [ %12708, %12707 ]
  %12878 = getelementptr inbounds i16, i16* %12712, i64 %12638
  %12879 = getelementptr inbounds float, float* %12711, i64 %12642
  %12880 = add nuw nsw i32 %12710, 1
  %12881 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12877, i64 0, i32 1, i32 1
  %12882 = load i32, i32* %12881, align 4
  %12883 = icmp slt i32 %12880, %12882
  br i1 %12883, label %12707, label %12691

12884:                                            ; preds = %12693, %12671
  %12885 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %12885, align 4
  br label %13459

12886:                                            ; preds = %12633
  %12887 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %12888 = load i32, i32* %12887, align 8
  %12889 = sdiv i32 %12888, 2
  %12890 = sext i32 %12889 to i64
  %12891 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %12892 = load i32, i32* %12891, align 8
  %12893 = sdiv i32 %12892, 4
  %12894 = sext i32 %12893 to i64
  %12895 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %12896 = load i8*, i8** %12895, align 8
  %12897 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %12898 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12897, align 8
  %12899 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12898, i64 0, i32 0, i32 1
  %12900 = load i32, i32* %12899, align 4
  %12901 = mul nsw i32 %12900, %12888
  %12902 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %12903 = load i32, i32* %12902, align 4
  %12904 = add nsw i32 %12901, %12903
  %12905 = sext i32 %12904 to i64
  %12906 = getelementptr inbounds i8, i8* %12896, i64 %12905
  %12907 = bitcast i8* %12906 to i16*
  %12908 = icmp slt i32 %12892, 0
  %12909 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %12910 = load i32, i32* %12909, align 8
  %12911 = icmp sgt i32 %12910, 1
  %12912 = and i1 %12908, %12911
  br i1 %12912, label %12913, label %12923

12913:                                            ; preds = %12886
  %12914 = add nsw i32 %12910, -1
  %12915 = sext i32 %12914 to i64
  %12916 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %12917 = load i32, i32* %12916, align 4
  %12918 = sext i32 %12917 to i64
  %12919 = mul nsw i64 %12890, %12915
  %12920 = mul i64 %12919, %12918
  %12921 = sub i64 0, %12920
  %12922 = getelementptr inbounds i16, i16* %12907, i64 %12921
  br label %12925

12923:                                            ; preds = %12886
  %12924 = icmp sgt i32 %12910, 0
  br i1 %12924, label %12925, label %13203

12925:                                            ; preds = %12923, %12913
  %12926 = phi i16* [ %12922, %12913 ], [ %12907, %12923 ]
  %12927 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %12928 = bitcast i8** %12927 to float**
  %12929 = load float*, float** %12928, align 8
  %12930 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %12931 = bitcast i8** %12930 to float**
  %12932 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %12933

12933:                                            ; preds = %12945, %12925
  %12934 = phi i32 [ %12910, %12925 ], [ %12946, %12945 ]
  %12935 = phi %"class.blink::IntRect"* [ %12898, %12925 ], [ %12947, %12945 ]
  %12936 = phi %"class.blink::IntRect"* [ %12898, %12925 ], [ %12948, %12945 ]
  %12937 = phi i32 [ 0, %12925 ], [ %12957, %12945 ]
  %12938 = phi float* [ %12929, %12925 ], [ %12950, %12945 ]
  %12939 = phi i16* [ %12926, %12925 ], [ %12956, %12945 ]
  %12940 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12936, i64 0, i32 1, i32 1
  %12941 = load i32, i32* %12940, align 4
  %12942 = icmp sgt i32 %12941, 0
  br i1 %12942, label %12959, label %12945

12943:                                            ; preds = %13194
  %12944 = load i32, i32* %12909, align 8
  br label %12945

12945:                                            ; preds = %12943, %12933
  %12946 = phi i32 [ %12934, %12933 ], [ %12944, %12943 ]
  %12947 = phi %"class.blink::IntRect"* [ %12935, %12933 ], [ %13195, %12943 ]
  %12948 = phi %"class.blink::IntRect"* [ %12936, %12933 ], [ %13195, %12943 ]
  %12949 = phi i16* [ %12939, %12933 ], [ %13196, %12943 ]
  %12950 = phi float* [ %12938, %12933 ], [ %13197, %12943 ]
  %12951 = phi i32 [ %12941, %12933 ], [ %13200, %12943 ]
  %12952 = load i32, i32* %12932, align 4
  %12953 = sub nsw i32 %12952, %12951
  %12954 = sext i32 %12953 to i64
  %12955 = mul nsw i64 %12954, %12890
  %12956 = getelementptr inbounds i16, i16* %12949, i64 %12955
  %12957 = add nuw nsw i32 %12937, 1
  %12958 = icmp slt i32 %12957, %12946
  br i1 %12958, label %12933, label %13203

12959:                                            ; preds = %12933, %13194
  %12960 = phi i64 [ %13202, %13194 ], [ 0, %12933 ]
  %12961 = phi %"class.blink::IntRect"* [ %13195, %13194 ], [ %12935, %12933 ]
  %12962 = phi %"class.blink::IntRect"* [ %13195, %13194 ], [ %12936, %12933 ]
  %12963 = phi i32 [ %13198, %13194 ], [ 0, %12933 ]
  %12964 = phi float* [ %13197, %13194 ], [ %12938, %12933 ]
  %12965 = phi i16* [ %13196, %13194 ], [ %12939, %12933 ]
  %12966 = mul i64 %12960, %12894
  %12967 = getelementptr float, float* %12938, i64 %12966
  %12968 = add i64 %12966, 2
  %12969 = getelementptr float, float* %12938, i64 %12968
  %12970 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %12962, i64 0, i32 1, i32 0
  %12971 = load i32, i32* %12970, align 4
  %12972 = icmp eq i32 %12971, 0
  br i1 %12972, label %13194, label %12973

12973:                                            ; preds = %12959
  %12974 = load float*, float** %12931, align 8
  br label %12975

12975:                                            ; preds = %12975, %12973
  %12976 = phi i32 [ %13051, %12975 ], [ 0, %12973 ]
  %12977 = phi i16* [ %13049, %12975 ], [ %12965, %12973 ]
  %12978 = phi float* [ %13050, %12975 ], [ %12974, %12973 ]
  %12979 = load i16, i16* %12977, align 2
  %12980 = zext i16 %12979 to i32
  %12981 = lshr i32 %12980, 10
  %12982 = zext i32 %12981 to i64
  %12983 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12982
  %12984 = load i16, i16* %12983, align 2
  %12985 = zext i16 %12984 to i32
  %12986 = and i32 %12980, 1023
  %12987 = add nuw nsw i32 %12986, %12985
  %12988 = zext i32 %12987 to i64
  %12989 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %12988
  %12990 = load i32, i32* %12989, align 4
  %12991 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12982
  %12992 = load i32, i32* %12991, align 4
  %12993 = add i32 %12992, %12990
  %12994 = bitcast float* %12978 to i32*
  store i32 %12993, i32* %12994, align 4
  %12995 = getelementptr inbounds i16, i16* %12977, i64 1
  %12996 = load i16, i16* %12995, align 2
  %12997 = zext i16 %12996 to i32
  %12998 = lshr i32 %12997, 10
  %12999 = zext i32 %12998 to i64
  %13000 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %12999
  %13001 = load i16, i16* %13000, align 2
  %13002 = zext i16 %13001 to i32
  %13003 = and i32 %12997, 1023
  %13004 = add nuw nsw i32 %13003, %13002
  %13005 = zext i32 %13004 to i64
  %13006 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13005
  %13007 = load i32, i32* %13006, align 4
  %13008 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %12999
  %13009 = load i32, i32* %13008, align 4
  %13010 = add i32 %13009, %13007
  %13011 = getelementptr inbounds float, float* %12978, i64 1
  %13012 = bitcast float* %13011 to i32*
  store i32 %13010, i32* %13012, align 4
  %13013 = getelementptr inbounds i16, i16* %12977, i64 2
  %13014 = load i16, i16* %13013, align 2
  %13015 = zext i16 %13014 to i32
  %13016 = lshr i32 %13015, 10
  %13017 = zext i32 %13016 to i64
  %13018 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13017
  %13019 = load i16, i16* %13018, align 2
  %13020 = zext i16 %13019 to i32
  %13021 = and i32 %13015, 1023
  %13022 = add nuw nsw i32 %13021, %13020
  %13023 = zext i32 %13022 to i64
  %13024 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13023
  %13025 = load i32, i32* %13024, align 4
  %13026 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13017
  %13027 = load i32, i32* %13026, align 4
  %13028 = add i32 %13027, %13025
  %13029 = getelementptr inbounds float, float* %12978, i64 2
  %13030 = bitcast float* %13029 to i32*
  store i32 %13028, i32* %13030, align 4
  %13031 = getelementptr inbounds i16, i16* %12977, i64 3
  %13032 = load i16, i16* %13031, align 2
  %13033 = zext i16 %13032 to i32
  %13034 = lshr i32 %13033, 10
  %13035 = zext i32 %13034 to i64
  %13036 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13035
  %13037 = load i16, i16* %13036, align 2
  %13038 = zext i16 %13037 to i32
  %13039 = and i32 %13033, 1023
  %13040 = add nuw nsw i32 %13039, %13038
  %13041 = zext i32 %13040 to i64
  %13042 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13041
  %13043 = load i32, i32* %13042, align 4
  %13044 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13035
  %13045 = load i32, i32* %13044, align 4
  %13046 = add i32 %13045, %13043
  %13047 = getelementptr inbounds float, float* %12978, i64 3
  %13048 = bitcast float* %13047 to i32*
  store i32 %13046, i32* %13048, align 4
  %13049 = getelementptr inbounds i16, i16* %12977, i64 4
  %13050 = getelementptr inbounds float, float* %12978, i64 4
  %13051 = add nuw i32 %12976, 1
  %13052 = icmp eq i32 %13051, %12971
  br i1 %13052, label %13053, label %12975

13053:                                            ; preds = %12975
  %13054 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12897, align 8
  %13055 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13054, i64 0, i32 1, i32 0
  %13056 = load i32, i32* %13055, align 4
  %13057 = icmp eq i32 %13056, 0
  br i1 %13057, label %13194, label %13058

13058:                                            ; preds = %13053
  %13059 = load float*, float** %12931, align 8
  %13060 = add i32 %13056, -1
  %13061 = zext i32 %13060 to i64
  %13062 = add nuw nsw i64 %13061, 1
  %13063 = icmp ult i64 %13062, 4
  br i1 %13063, label %13141, label %13064

13064:                                            ; preds = %13058
  %13065 = add i32 %13056, -1
  %13066 = zext i32 %13065 to i64
  %13067 = shl nuw nsw i64 %13066, 1
  %13068 = getelementptr float, float* %12969, i64 %13067
  %13069 = getelementptr float, float* %13059, i64 4
  %13070 = shl nuw nsw i64 %13066, 2
  %13071 = getelementptr float, float* %13069, i64 %13070
  %13072 = icmp ult float* %12967, %13071
  %13073 = icmp ult float* %13059, %13068
  %13074 = and i1 %13072, %13073
  br i1 %13074, label %13141, label %13075

13075:                                            ; preds = %13064
  %13076 = and i64 %13062, 8589934588
  %13077 = shl nuw nsw i64 %13076, 2
  %13078 = getelementptr float, float* %13059, i64 %13077
  %13079 = trunc i64 %13076 to i32
  %13080 = shl nuw nsw i64 %13076, 1
  %13081 = getelementptr float, float* %12964, i64 %13080
  %13082 = add nsw i64 %13076, -4
  %13083 = lshr exact i64 %13082, 2
  %13084 = add nuw nsw i64 %13083, 1
  %13085 = and i64 %13084, 1
  %13086 = icmp eq i64 %13082, 0
  br i1 %13086, label %13122, label %13087

13087:                                            ; preds = %13075
  %13088 = sub nuw nsw i64 %13084, %13085
  br label %13089

13089:                                            ; preds = %13089, %13087
  %13090 = phi i64 [ 0, %13087 ], [ %13119, %13089 ]
  %13091 = phi i64 [ %13088, %13087 ], [ %13120, %13089 ]
  %13092 = shl i64 %13090, 2
  %13093 = shl i64 %13090, 1
  %13094 = getelementptr inbounds float, float* %13059, i64 %13092
  %13095 = bitcast float* %13094 to <16 x float>*
  %13096 = load <16 x float>, <16 x float>* %13095, align 4
  %13097 = shufflevector <16 x float> %13096, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13098 = shufflevector <16 x float> %13096, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13099 = shufflevector <16 x float> %13096, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13100 = fmul <4 x float> %13099, %13097
  %13101 = fmul <4 x float> %13099, %13098
  %13102 = getelementptr inbounds float, float* %12964, i64 %13093
  %13103 = bitcast float* %13102 to <8 x float>*
  %13104 = shufflevector <4 x float> %13100, <4 x float> %13101, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %13104, <8 x float>* %13103, align 4
  %13105 = or i64 %13090, 4
  %13106 = shl i64 %13105, 2
  %13107 = shl i64 %13105, 1
  %13108 = getelementptr inbounds float, float* %13059, i64 %13106
  %13109 = bitcast float* %13108 to <16 x float>*
  %13110 = load <16 x float>, <16 x float>* %13109, align 4
  %13111 = shufflevector <16 x float> %13110, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13112 = shufflevector <16 x float> %13110, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13113 = shufflevector <16 x float> %13110, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13114 = fmul <4 x float> %13113, %13111
  %13115 = fmul <4 x float> %13113, %13112
  %13116 = getelementptr inbounds float, float* %12964, i64 %13107
  %13117 = bitcast float* %13116 to <8 x float>*
  %13118 = shufflevector <4 x float> %13114, <4 x float> %13115, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %13118, <8 x float>* %13117, align 4
  %13119 = add i64 %13090, 8
  %13120 = add i64 %13091, -2
  %13121 = icmp eq i64 %13120, 0
  br i1 %13121, label %13122, label %13089, !llvm.loop !771

13122:                                            ; preds = %13089, %13075
  %13123 = phi i64 [ 0, %13075 ], [ %13119, %13089 ]
  %13124 = icmp eq i64 %13085, 0
  br i1 %13124, label %13139, label %13125

13125:                                            ; preds = %13122
  %13126 = shl i64 %13123, 2
  %13127 = shl i64 %13123, 1
  %13128 = getelementptr inbounds float, float* %13059, i64 %13126
  %13129 = bitcast float* %13128 to <16 x float>*
  %13130 = load <16 x float>, <16 x float>* %13129, align 4
  %13131 = shufflevector <16 x float> %13130, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13132 = shufflevector <16 x float> %13130, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13133 = shufflevector <16 x float> %13130, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13134 = fmul <4 x float> %13133, %13131
  %13135 = fmul <4 x float> %13133, %13132
  %13136 = getelementptr inbounds float, float* %12964, i64 %13127
  %13137 = bitcast float* %13136 to <8 x float>*
  %13138 = shufflevector <4 x float> %13134, <4 x float> %13135, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %13138, <8 x float>* %13137, align 4
  br label %13139

13139:                                            ; preds = %13122, %13125
  %13140 = icmp eq i64 %13062, %13076
  br i1 %13140, label %13192, label %13141

13141:                                            ; preds = %13139, %13064, %13058
  %13142 = phi float* [ %13059, %13064 ], [ %13059, %13058 ], [ %13078, %13139 ]
  %13143 = phi i32 [ 0, %13064 ], [ 0, %13058 ], [ %13079, %13139 ]
  %13144 = phi float* [ %12964, %13064 ], [ %12964, %13058 ], [ %13081, %13139 ]
  %13145 = sub i32 %13056, %13143
  %13146 = and i32 %13145, 1
  %13147 = icmp eq i32 %13146, 0
  br i1 %13147, label %13160, label %13148

13148:                                            ; preds = %13141
  %13149 = getelementptr inbounds float, float* %13142, i64 3
  %13150 = load float, float* %13149, align 4
  %13151 = load float, float* %13142, align 4
  %13152 = fmul float %13150, %13151
  store float %13152, float* %13144, align 4
  %13153 = getelementptr inbounds float, float* %13142, i64 1
  %13154 = load float, float* %13153, align 4
  %13155 = fmul float %13150, %13154
  %13156 = getelementptr inbounds float, float* %13144, i64 1
  store float %13155, float* %13156, align 4
  %13157 = getelementptr inbounds float, float* %13142, i64 4
  %13158 = getelementptr inbounds float, float* %13144, i64 2
  %13159 = add nuw i32 %13143, 1
  br label %13160

13160:                                            ; preds = %13148, %13141
  %13161 = phi float* [ %13157, %13148 ], [ %13142, %13141 ]
  %13162 = phi i32 [ %13159, %13148 ], [ %13143, %13141 ]
  %13163 = phi float* [ %13158, %13148 ], [ %13144, %13141 ]
  %13164 = add i32 %13143, 1
  %13165 = icmp eq i32 %13056, %13164
  br i1 %13165, label %13192, label %13166

13166:                                            ; preds = %13160, %13166
  %13167 = phi float* [ %13188, %13166 ], [ %13161, %13160 ]
  %13168 = phi i32 [ %13190, %13166 ], [ %13162, %13160 ]
  %13169 = phi float* [ %13189, %13166 ], [ %13163, %13160 ]
  %13170 = getelementptr inbounds float, float* %13167, i64 3
  %13171 = load float, float* %13170, align 4
  %13172 = load float, float* %13167, align 4
  %13173 = fmul float %13171, %13172
  store float %13173, float* %13169, align 4
  %13174 = getelementptr inbounds float, float* %13167, i64 1
  %13175 = load float, float* %13174, align 4
  %13176 = fmul float %13171, %13175
  %13177 = getelementptr inbounds float, float* %13169, i64 1
  store float %13176, float* %13177, align 4
  %13178 = getelementptr inbounds float, float* %13167, i64 4
  %13179 = getelementptr inbounds float, float* %13169, i64 2
  %13180 = getelementptr inbounds float, float* %13167, i64 7
  %13181 = load float, float* %13180, align 4
  %13182 = load float, float* %13178, align 4
  %13183 = fmul float %13181, %13182
  store float %13183, float* %13179, align 4
  %13184 = getelementptr inbounds float, float* %13167, i64 5
  %13185 = load float, float* %13184, align 4
  %13186 = fmul float %13181, %13185
  %13187 = getelementptr inbounds float, float* %13169, i64 3
  store float %13186, float* %13187, align 4
  %13188 = getelementptr inbounds float, float* %13167, i64 8
  %13189 = getelementptr inbounds float, float* %13169, i64 4
  %13190 = add nuw i32 %13168, 2
  %13191 = icmp eq i32 %13190, %13056
  br i1 %13191, label %13192, label %13166, !llvm.loop !772

13192:                                            ; preds = %13160, %13166, %13139
  %13193 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %12897, align 8
  br label %13194

13194:                                            ; preds = %13192, %13053, %12959
  %13195 = phi %"class.blink::IntRect"* [ %13193, %13192 ], [ %13054, %13053 ], [ %12961, %12959 ]
  %13196 = getelementptr inbounds i16, i16* %12965, i64 %12890
  %13197 = getelementptr inbounds float, float* %12964, i64 %12894
  %13198 = add nuw nsw i32 %12963, 1
  %13199 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13195, i64 0, i32 1, i32 1
  %13200 = load i32, i32* %13199, align 4
  %13201 = icmp slt i32 %13198, %13200
  %13202 = add i64 %12960, 1
  br i1 %13201, label %12959, label %12943

13203:                                            ; preds = %12945, %12923
  %13204 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %13204, align 4
  br label %13459

13205:                                            ; preds = %12633
  %13206 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 5
  %13207 = load i32, i32* %13206, align 8
  %13208 = sdiv i32 %13207, 2
  %13209 = sext i32 %13208 to i64
  %13210 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 7
  %13211 = load i32, i32* %13210, align 8
  %13212 = sdiv i32 %13211, 4
  %13213 = sext i32 %13212 to i64
  %13214 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 3
  %13215 = load i8*, i8** %13214, align 8
  %13216 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 0
  %13217 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13216, align 8
  %13218 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13217, i64 0, i32 0, i32 1
  %13219 = load i32, i32* %13218, align 4
  %13220 = mul nsw i32 %13219, %13207
  %13221 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 6
  %13222 = load i32, i32* %13221, align 4
  %13223 = add nsw i32 %13220, %13222
  %13224 = sext i32 %13223 to i64
  %13225 = getelementptr inbounds i8, i8* %13215, i64 %13224
  %13226 = bitcast i8* %13225 to i16*
  %13227 = icmp slt i32 %13211, 0
  %13228 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 1
  %13229 = load i32, i32* %13228, align 8
  %13230 = icmp sgt i32 %13229, 1
  %13231 = and i1 %13227, %13230
  br i1 %13231, label %13232, label %13242

13232:                                            ; preds = %13205
  %13233 = add nsw i32 %13229, -1
  %13234 = sext i32 %13233 to i64
  %13235 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  %13236 = load i32, i32* %13235, align 4
  %13237 = sext i32 %13236 to i64
  %13238 = mul nsw i64 %13209, %13234
  %13239 = mul i64 %13238, %13237
  %13240 = sub i64 0, %13239
  %13241 = getelementptr inbounds i16, i16* %13226, i64 %13240
  br label %13244

13242:                                            ; preds = %13205
  %13243 = icmp sgt i32 %13229, 0
  br i1 %13243, label %13244, label %13457

13244:                                            ; preds = %13242, %13232
  %13245 = phi i16* [ %13241, %13232 ], [ %13226, %13242 ]
  %13246 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 4
  %13247 = bitcast i8** %13246 to float**
  %13248 = load float*, float** %13247, align 8
  %13249 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %13250 = bitcast i8** %13249 to float**
  %13251 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 2
  br label %13252

13252:                                            ; preds = %13264, %13244
  %13253 = phi i32 [ %13229, %13244 ], [ %13265, %13264 ]
  %13254 = phi %"class.blink::IntRect"* [ %13217, %13244 ], [ %13266, %13264 ]
  %13255 = phi %"class.blink::IntRect"* [ %13217, %13244 ], [ %13267, %13264 ]
  %13256 = phi i32 [ 0, %13244 ], [ %13276, %13264 ]
  %13257 = phi float* [ %13248, %13244 ], [ %13269, %13264 ]
  %13258 = phi i16* [ %13245, %13244 ], [ %13275, %13264 ]
  %13259 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13255, i64 0, i32 1, i32 1
  %13260 = load i32, i32* %13259, align 4
  %13261 = icmp sgt i32 %13260, 0
  br i1 %13261, label %13278, label %13264

13262:                                            ; preds = %13448
  %13263 = load i32, i32* %13228, align 8
  br label %13264

13264:                                            ; preds = %13262, %13252
  %13265 = phi i32 [ %13253, %13252 ], [ %13263, %13262 ]
  %13266 = phi %"class.blink::IntRect"* [ %13254, %13252 ], [ %13449, %13262 ]
  %13267 = phi %"class.blink::IntRect"* [ %13255, %13252 ], [ %13449, %13262 ]
  %13268 = phi i16* [ %13258, %13252 ], [ %13450, %13262 ]
  %13269 = phi float* [ %13257, %13252 ], [ %13451, %13262 ]
  %13270 = phi i32 [ %13260, %13252 ], [ %13454, %13262 ]
  %13271 = load i32, i32* %13251, align 4
  %13272 = sub nsw i32 %13271, %13270
  %13273 = sext i32 %13272 to i64
  %13274 = mul nsw i64 %13273, %13209
  %13275 = getelementptr inbounds i16, i16* %13268, i64 %13274
  %13276 = add nuw nsw i32 %13256, 1
  %13277 = icmp slt i32 %13276, %13265
  br i1 %13277, label %13252, label %13457

13278:                                            ; preds = %13252, %13448
  %13279 = phi i64 [ %13456, %13448 ], [ 0, %13252 ]
  %13280 = phi %"class.blink::IntRect"* [ %13449, %13448 ], [ %13254, %13252 ]
  %13281 = phi %"class.blink::IntRect"* [ %13449, %13448 ], [ %13255, %13252 ]
  %13282 = phi i32 [ %13452, %13448 ], [ 0, %13252 ]
  %13283 = phi float* [ %13451, %13448 ], [ %13257, %13252 ]
  %13284 = phi i16* [ %13450, %13448 ], [ %13258, %13252 ]
  %13285 = mul i64 %13279, %13213
  %13286 = getelementptr float, float* %13257, i64 %13285
  %13287 = add i64 %13285, 2
  %13288 = getelementptr float, float* %13257, i64 %13287
  %13289 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13281, i64 0, i32 1, i32 0
  %13290 = load i32, i32* %13289, align 4
  %13291 = icmp eq i32 %13290, 0
  br i1 %13291, label %13448, label %13292

13292:                                            ; preds = %13278
  %13293 = load float*, float** %13250, align 8
  br label %13294

13294:                                            ; preds = %13294, %13292
  %13295 = phi i32 [ %13370, %13294 ], [ 0, %13292 ]
  %13296 = phi i16* [ %13368, %13294 ], [ %13284, %13292 ]
  %13297 = phi float* [ %13369, %13294 ], [ %13293, %13292 ]
  %13298 = load i16, i16* %13296, align 2
  %13299 = zext i16 %13298 to i32
  %13300 = lshr i32 %13299, 10
  %13301 = zext i32 %13300 to i64
  %13302 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13301
  %13303 = load i16, i16* %13302, align 2
  %13304 = zext i16 %13303 to i32
  %13305 = and i32 %13299, 1023
  %13306 = add nuw nsw i32 %13305, %13304
  %13307 = zext i32 %13306 to i64
  %13308 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13307
  %13309 = load i32, i32* %13308, align 4
  %13310 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13301
  %13311 = load i32, i32* %13310, align 4
  %13312 = add i32 %13311, %13309
  %13313 = bitcast float* %13297 to i32*
  store i32 %13312, i32* %13313, align 4
  %13314 = getelementptr inbounds i16, i16* %13296, i64 1
  %13315 = load i16, i16* %13314, align 2
  %13316 = zext i16 %13315 to i32
  %13317 = lshr i32 %13316, 10
  %13318 = zext i32 %13317 to i64
  %13319 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13318
  %13320 = load i16, i16* %13319, align 2
  %13321 = zext i16 %13320 to i32
  %13322 = and i32 %13316, 1023
  %13323 = add nuw nsw i32 %13322, %13321
  %13324 = zext i32 %13323 to i64
  %13325 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13324
  %13326 = load i32, i32* %13325, align 4
  %13327 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13318
  %13328 = load i32, i32* %13327, align 4
  %13329 = add i32 %13328, %13326
  %13330 = getelementptr inbounds float, float* %13297, i64 1
  %13331 = bitcast float* %13330 to i32*
  store i32 %13329, i32* %13331, align 4
  %13332 = getelementptr inbounds i16, i16* %13296, i64 2
  %13333 = load i16, i16* %13332, align 2
  %13334 = zext i16 %13333 to i32
  %13335 = lshr i32 %13334, 10
  %13336 = zext i32 %13335 to i64
  %13337 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13336
  %13338 = load i16, i16* %13337, align 2
  %13339 = zext i16 %13338 to i32
  %13340 = and i32 %13334, 1023
  %13341 = add nuw nsw i32 %13340, %13339
  %13342 = zext i32 %13341 to i64
  %13343 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13342
  %13344 = load i32, i32* %13343, align 4
  %13345 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13336
  %13346 = load i32, i32* %13345, align 4
  %13347 = add i32 %13346, %13344
  %13348 = getelementptr inbounds float, float* %13297, i64 2
  %13349 = bitcast float* %13348 to i32*
  store i32 %13347, i32* %13349, align 4
  %13350 = getelementptr inbounds i16, i16* %13296, i64 3
  %13351 = load i16, i16* %13350, align 2
  %13352 = zext i16 %13351 to i32
  %13353 = lshr i32 %13352, 10
  %13354 = zext i32 %13353 to i64
  %13355 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13354
  %13356 = load i16, i16* %13355, align 2
  %13357 = zext i16 %13356 to i32
  %13358 = and i32 %13352, 1023
  %13359 = add nuw nsw i32 %13358, %13357
  %13360 = zext i32 %13359 to i64
  %13361 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %13360
  %13362 = load i32, i32* %13361, align 4
  %13363 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13354
  %13364 = load i32, i32* %13363, align 4
  %13365 = add i32 %13364, %13362
  %13366 = getelementptr inbounds float, float* %13297, i64 3
  %13367 = bitcast float* %13366 to i32*
  store i32 %13365, i32* %13367, align 4
  %13368 = getelementptr inbounds i16, i16* %13296, i64 4
  %13369 = getelementptr inbounds float, float* %13297, i64 4
  %13370 = add nuw i32 %13295, 1
  %13371 = icmp eq i32 %13370, %13290
  br i1 %13371, label %13372, label %13294

13372:                                            ; preds = %13294
  %13373 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13216, align 8
  %13374 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13373, i64 0, i32 1, i32 0
  %13375 = load i32, i32* %13374, align 4
  %13376 = icmp eq i32 %13375, 0
  br i1 %13376, label %13448, label %13377

13377:                                            ; preds = %13372
  %13378 = load float*, float** %13250, align 8
  %13379 = add i32 %13375, -1
  %13380 = zext i32 %13379 to i64
  %13381 = add nuw nsw i64 %13380, 1
  %13382 = icmp ult i64 %13381, 4
  br i1 %13382, label %13423, label %13383

13383:                                            ; preds = %13377
  %13384 = add i32 %13375, -1
  %13385 = zext i32 %13384 to i64
  %13386 = shl nuw nsw i64 %13385, 1
  %13387 = getelementptr float, float* %13288, i64 %13386
  %13388 = getelementptr float, float* %13378, i64 4
  %13389 = shl nuw nsw i64 %13385, 2
  %13390 = getelementptr float, float* %13388, i64 %13389
  %13391 = icmp ult float* %13286, %13390
  %13392 = icmp ult float* %13378, %13387
  %13393 = and i1 %13391, %13392
  br i1 %13393, label %13423, label %13394

13394:                                            ; preds = %13383
  %13395 = and i64 %13381, 8589934588
  %13396 = trunc i64 %13395 to i32
  %13397 = shl nuw nsw i64 %13395, 2
  %13398 = getelementptr float, float* %13378, i64 %13397
  %13399 = shl nuw nsw i64 %13395, 1
  %13400 = getelementptr float, float* %13283, i64 %13399
  br label %13401

13401:                                            ; preds = %13401, %13394
  %13402 = phi i64 [ 0, %13394 ], [ %13419, %13401 ]
  %13403 = shl i64 %13402, 2
  %13404 = shl i64 %13402, 1
  %13405 = getelementptr inbounds float, float* %13378, i64 %13403
  %13406 = bitcast float* %13405 to <16 x float>*
  %13407 = load <16 x float>, <16 x float>* %13406, align 4
  %13408 = shufflevector <16 x float> %13407, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %13409 = shufflevector <16 x float> %13407, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %13410 = shufflevector <16 x float> %13407, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %13411 = fcmp une <4 x float> %13410, zeroinitializer
  %13412 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13410
  %13413 = select <4 x i1> %13411, <4 x float> %13412, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13414 = fmul <4 x float> %13408, %13413
  %13415 = fmul <4 x float> %13413, %13409
  %13416 = getelementptr inbounds float, float* %13283, i64 %13404
  %13417 = bitcast float* %13416 to <8 x float>*
  %13418 = shufflevector <4 x float> %13414, <4 x float> %13415, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %13418, <8 x float>* %13417, align 4
  %13419 = add i64 %13402, 4
  %13420 = icmp eq i64 %13419, %13395
  br i1 %13420, label %13421, label %13401, !llvm.loop !773

13421:                                            ; preds = %13401
  %13422 = icmp eq i64 %13381, %13395
  br i1 %13422, label %13446, label %13423

13423:                                            ; preds = %13421, %13383, %13377
  %13424 = phi i32 [ 0, %13383 ], [ 0, %13377 ], [ %13396, %13421 ]
  %13425 = phi float* [ %13378, %13383 ], [ %13378, %13377 ], [ %13398, %13421 ]
  %13426 = phi float* [ %13283, %13383 ], [ %13283, %13377 ], [ %13400, %13421 ]
  br label %13427

13427:                                            ; preds = %13423, %13427
  %13428 = phi i32 [ %13444, %13427 ], [ %13424, %13423 ]
  %13429 = phi float* [ %13442, %13427 ], [ %13425, %13423 ]
  %13430 = phi float* [ %13443, %13427 ], [ %13426, %13423 ]
  %13431 = getelementptr inbounds float, float* %13429, i64 3
  %13432 = load float, float* %13431, align 4
  %13433 = fcmp une float %13432, 0.000000e+00
  %13434 = fdiv float 1.000000e+00, %13432
  %13435 = select i1 %13433, float %13434, float 1.000000e+00
  %13436 = load float, float* %13429, align 4
  %13437 = fmul float %13436, %13435
  store float %13437, float* %13430, align 4
  %13438 = getelementptr inbounds float, float* %13429, i64 1
  %13439 = load float, float* %13438, align 4
  %13440 = fmul float %13435, %13439
  %13441 = getelementptr inbounds float, float* %13430, i64 1
  store float %13440, float* %13441, align 4
  %13442 = getelementptr inbounds float, float* %13429, i64 4
  %13443 = getelementptr inbounds float, float* %13430, i64 2
  %13444 = add nuw i32 %13428, 1
  %13445 = icmp eq i32 %13444, %13375
  br i1 %13445, label %13446, label %13427, !llvm.loop !774

13446:                                            ; preds = %13427, %13421
  %13447 = load %"class.blink::IntRect"*, %"class.blink::IntRect"** %13216, align 8
  br label %13448

13448:                                            ; preds = %13446, %13372, %13278
  %13449 = phi %"class.blink::IntRect"* [ %13447, %13446 ], [ %13373, %13372 ], [ %13280, %13278 ]
  %13450 = getelementptr inbounds i16, i16* %13284, i64 %13209
  %13451 = getelementptr inbounds float, float* %13283, i64 %13213
  %13452 = add nuw nsw i32 %13282, 1
  %13453 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %13449, i64 0, i32 1, i32 1
  %13454 = load i32, i32* %13453, align 4
  %13455 = icmp slt i32 %13452, %13454
  %13456 = add i64 %13279, 1
  br i1 %13455, label %13278, label %13262

13457:                                            ; preds = %13264, %13242
  %13458 = getelementptr inbounds %"class.blink::(anonymous namespace)::FormatConverter", %"class.blink::(anonymous namespace)::FormatConverter"* %0, i64 0, i32 8
  store i8 1, i8* %13458, align 4
  br label %13459

13459:                                            ; preds = %13457, %13203, %12884, %12633, %12631, %12407, %12186, %11970, %11968, %11848, %11675, %11531, %11529, %11251, %10973, %10702, %10700, %10608, %10607, %10605, %10520, %10519, %10517, %10355, %10354, %10352, %10267, %10266, %10264, %10105, %10104, %10102, %9894, %9646, %9477, %9475, %9221, %8971, %8969, %8756, %8549, %8365, %8363, %8148, %7939, %7753, %7751, %7586, %7395, %7313, %7311, %7049, %6813, %6575, %6573, %6333, %6096, %5865, %5863, %5656, %5455, %5279, %5277, %5151, %4966, %4833, %4831, %4598, %4374, %4123, %4121, %3899, %3680, %3464, %3462, %3271, %3101, %2957, %2955, %2648, %2646, %2405, %2403, %2210, %2208, %1897, %1607, %1306, %1304, %1096, %848, %610, %608, %382, %192, %4, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_16UnpackILi6EthEEvPKT0_PT1_j(i16* nocapture readonly, i8* nocapture, i32) unnamed_addr #11 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %109, %3
  ret void

6:                                                ; preds = %3, %109
  %7 = phi i32 [ %114, %109 ], [ 0, %3 ]
  %8 = phi i16* [ %112, %109 ], [ %0, %3 ]
  %9 = phi i8* [ %113, %109 ], [ %1, %3 ]
  %10 = load i16, i16* %8, align 2
  %11 = zext i16 %10 to i32
  %12 = lshr i32 %11, 10
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = and i32 %11, 1023
  %18 = add nuw nsw i32 %17, %16
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %13
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %21
  %25 = bitcast i32 %24 to float
  %26 = fmul float %25, 2.550000e+02
  %27 = fcmp olt float %26, 0.000000e+00
  br i1 %27, label %32, label %28

28:                                               ; preds = %6
  %29 = fcmp ogt float %26, 2.550000e+02
  br i1 %29, label %32, label %30

30:                                               ; preds = %28
  %31 = fptoui float %26 to i8
  br label %32

32:                                               ; preds = %6, %28, %30
  %33 = phi i8 [ %31, %30 ], [ 0, %6 ], [ -1, %28 ]
  store i8 %33, i8* %9, align 1
  %34 = getelementptr inbounds i16, i16* %8, i64 1
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = lshr i32 %36, 10
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = and i32 %36, 1023
  %43 = add nuw nsw i32 %42, %41
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %38
  %48 = load i32, i32* %47, align 4
  %49 = add i32 %48, %46
  %50 = bitcast i32 %49 to float
  %51 = fmul float %50, 2.550000e+02
  %52 = fcmp olt float %51, 0.000000e+00
  br i1 %52, label %57, label %53

53:                                               ; preds = %32
  %54 = fcmp ogt float %51, 2.550000e+02
  br i1 %54, label %57, label %55

55:                                               ; preds = %53
  %56 = fptoui float %51 to i8
  br label %57

57:                                               ; preds = %32, %53, %55
  %58 = phi i8 [ %56, %55 ], [ 0, %32 ], [ -1, %53 ]
  %59 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %58, i8* %59, align 1
  %60 = getelementptr inbounds i16, i16* %8, i64 2
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = lshr i32 %62, 10
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = and i32 %62, 1023
  %69 = add nuw nsw i32 %68, %67
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %64
  %74 = load i32, i32* %73, align 4
  %75 = add i32 %74, %72
  %76 = bitcast i32 %75 to float
  %77 = fmul float %76, 2.550000e+02
  %78 = fcmp olt float %77, 0.000000e+00
  br i1 %78, label %83, label %79

79:                                               ; preds = %57
  %80 = fcmp ogt float %77, 2.550000e+02
  br i1 %80, label %83, label %81

81:                                               ; preds = %79
  %82 = fptoui float %77 to i8
  br label %83

83:                                               ; preds = %57, %79, %81
  %84 = phi i8 [ %82, %81 ], [ 0, %57 ], [ -1, %79 ]
  %85 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds i16, i16* %8, i64 3
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = lshr i32 %88, 10
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN5blink12_GLOBAL__N_114g_offset_tableE, i64 0, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = and i32 %88, 1023
  %95 = add nuw nsw i32 %94, %93
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [2048 x i32], [2048 x i32]* @_ZN5blink12_GLOBAL__N_116g_mantissa_tableE, i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds [64 x i32], [64 x i32]* @_ZN5blink12_GLOBAL__N_116g_exponent_tableE, i64 0, i64 %90
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %100, %98
  %102 = bitcast i32 %101 to float
  %103 = fmul float %102, 2.550000e+02
  %104 = fcmp olt float %103, 0.000000e+00
  br i1 %104, label %109, label %105

105:                                              ; preds = %83
  %106 = fcmp ogt float %103, 2.550000e+02
  br i1 %106, label %109, label %107

107:                                              ; preds = %105
  %108 = fptoui float %103 to i8
  br label %109

109:                                              ; preds = %83, %105, %107
  %110 = phi i8 [ %108, %107 ], [ 0, %83 ], [ -1, %105 ]
  %111 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %110, i8* %111, align 1
  %112 = getelementptr inbounds i16, i16* %8, i64 4
  %113 = getelementptr inbounds i8, i8* %9, i64 4
  %114 = add nuw i32 %7, 1
  %115 = icmp eq i32 %114, %2
  br i1 %115, label %5, label %6
}

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3WTF12SharedBufferD1Ev(%"class.WTF::SharedBuffer"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN5blink16ImagePixelLockerC1E5sk_spIK7SkImageE11SkAlphaType11SkColorType(%"class.blink::ImagePixelLocker"*, %class.sk_sp*, i32, i32) unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.6, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2002, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN11SkImageInfo11MakeUnknownEv: argument 0"}
!5 = distinct !{!5, !"_ZN11SkImageInfo11MakeUnknownEv"}
!6 = !{!7, !9}
!7 = distinct !{!7, !8, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!8 = distinct !{!8, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!9 = distinct !{!9, !10, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE: argument 0"}
!10 = distinct !{!10, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE"}
!11 = !{i8 0, i8 2}
!12 = !{!"branch_weights", i32 2000, i32 1}
!13 = !{!"branch_weights", i32 1, i32 2000}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !15}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = distinct !{!20, !15}
!21 = distinct !{!21, !15}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !15}
!28 = distinct !{!28, !15}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = distinct !{!32, !15}
!33 = distinct !{!33, !15}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !15}
!40 = distinct !{!40, !15}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = distinct !{!44, !15}
!45 = distinct !{!45, !15}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !15}
!52 = distinct !{!52, !15}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = distinct !{!56, !15}
!57 = distinct !{!57, !15}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = distinct !{!61, !15}
!62 = distinct !{!62, !15}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !15}
!69 = distinct !{!69, !15}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !15}
!76 = distinct !{!76, !15}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !15}
!83 = distinct !{!83, !15}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !15}
!90 = distinct !{!90, !15}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = distinct !{!96, !15}
!97 = distinct !{!97, !15}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !15}
!104 = distinct !{!104, !105}
!105 = !{!"llvm.loop.unroll.disable"}
!106 = distinct !{!106, !15}
!107 = !{!108}
!108 = distinct !{!108, !109}
!109 = distinct !{!109, !"LVerDomain"}
!110 = !{!111}
!111 = distinct !{!111, !109}
!112 = distinct !{!112, !15}
!113 = distinct !{!113, !15}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = distinct !{!119, !15}
!120 = distinct !{!120, !15}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = distinct !{!126, !15}
!127 = distinct !{!127, !105}
!128 = distinct !{!128, !15}
!129 = !{!130}
!130 = distinct !{!130, !131}
!131 = distinct !{!131, !"LVerDomain"}
!132 = !{!133}
!133 = distinct !{!133, !131}
!134 = distinct !{!134, !15}
!135 = distinct !{!135, !105}
!136 = distinct !{!136, !15}
!137 = !{!138}
!138 = distinct !{!138, !139}
!139 = distinct !{!139, !"LVerDomain"}
!140 = !{!141}
!141 = distinct !{!141, !139}
!142 = distinct !{!142, !15}
!143 = distinct !{!143, !15}
!144 = !{!145}
!145 = distinct !{!145, !146}
!146 = distinct !{!146, !"LVerDomain"}
!147 = !{!148}
!148 = distinct !{!148, !146}
!149 = distinct !{!149, !15}
!150 = distinct !{!150, !105}
!151 = distinct !{!151, !15}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = distinct !{!157, !15}
!158 = distinct !{!158, !105}
!159 = distinct !{!159, !15}
!160 = distinct !{!160, !105}
!161 = distinct !{!161, !15}
!162 = distinct !{!162, !15}
!163 = distinct !{!163, !105}
!164 = distinct !{!164, !15}
!165 = distinct !{!165, !15}
!166 = !{!167}
!167 = distinct !{!167, !168}
!168 = distinct !{!168, !"LVerDomain"}
!169 = !{!170}
!170 = distinct !{!170, !168}
!171 = distinct !{!171, !15}
!172 = distinct !{!172, !15}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !15}
!179 = distinct !{!179, !15}
!180 = !{!181}
!181 = distinct !{!181, !182}
!182 = distinct !{!182, !"LVerDomain"}
!183 = !{!184}
!184 = distinct !{!184, !182}
!185 = distinct !{!185, !15}
!186 = distinct !{!186, !15}
!187 = distinct !{!187, !15}
!188 = distinct !{!188, !15}
!189 = distinct !{!189, !15}
!190 = distinct !{!190, !15}
!191 = !{!192}
!192 = distinct !{!192, !193}
!193 = distinct !{!193, !"LVerDomain"}
!194 = !{!195}
!195 = distinct !{!195, !193}
!196 = distinct !{!196, !15}
!197 = distinct !{!197, !15}
!198 = !{!199}
!199 = distinct !{!199, !200}
!200 = distinct !{!200, !"LVerDomain"}
!201 = !{!202}
!202 = distinct !{!202, !200}
!203 = distinct !{!203, !15}
!204 = distinct !{!204, !15}
!205 = !{!206}
!206 = distinct !{!206, !207}
!207 = distinct !{!207, !"LVerDomain"}
!208 = !{!209}
!209 = distinct !{!209, !207}
!210 = distinct !{!210, !15}
!211 = distinct !{!211, !15}
!212 = !{!213}
!213 = distinct !{!213, !214}
!214 = distinct !{!214, !"LVerDomain"}
!215 = !{!216}
!216 = distinct !{!216, !214}
!217 = distinct !{!217, !15}
!218 = distinct !{!218, !15}
!219 = !{!220}
!220 = distinct !{!220, !221}
!221 = distinct !{!221, !"LVerDomain"}
!222 = !{!223}
!223 = distinct !{!223, !221}
!224 = distinct !{!224, !15}
!225 = distinct !{!225, !15}
!226 = !{!227}
!227 = distinct !{!227, !228}
!228 = distinct !{!228, !"LVerDomain"}
!229 = !{!230}
!230 = distinct !{!230, !228}
!231 = distinct !{!231, !15}
!232 = distinct !{!232, !15}
!233 = distinct !{!233, !15}
!234 = distinct !{!234, !15}
!235 = distinct !{!235, !15}
!236 = distinct !{!236, !15}
!237 = !{!238}
!238 = distinct !{!238, !239}
!239 = distinct !{!239, !"LVerDomain"}
!240 = !{!241}
!241 = distinct !{!241, !239}
!242 = distinct !{!242, !15}
!243 = distinct !{!243, !15}
!244 = !{!245}
!245 = distinct !{!245, !246}
!246 = distinct !{!246, !"LVerDomain"}
!247 = !{!248}
!248 = distinct !{!248, !246}
!249 = distinct !{!249, !15}
!250 = distinct !{!250, !15}
!251 = !{!252}
!252 = distinct !{!252, !253}
!253 = distinct !{!253, !"LVerDomain"}
!254 = !{!255}
!255 = distinct !{!255, !253}
!256 = distinct !{!256, !15}
!257 = distinct !{!257, !15}
!258 = distinct !{!258, !105}
!259 = distinct !{!259, !15}
!260 = distinct !{!260, !15}
!261 = distinct !{!261, !105}
!262 = distinct !{!262, !15}
!263 = distinct !{!263, !15}
!264 = distinct !{!264, !15}
!265 = distinct !{!265, !15}
!266 = !{!267}
!267 = distinct !{!267, !268}
!268 = distinct !{!268, !"LVerDomain"}
!269 = !{!270}
!270 = distinct !{!270, !268}
!271 = distinct !{!271, !15}
!272 = distinct !{!272, !15}
!273 = !{!274}
!274 = distinct !{!274, !275}
!275 = distinct !{!275, !"LVerDomain"}
!276 = !{!277}
!277 = distinct !{!277, !275}
!278 = distinct !{!278, !15}
!279 = distinct !{!279, !105}
!280 = distinct !{!280, !15}
!281 = !{!282}
!282 = distinct !{!282, !283}
!283 = distinct !{!283, !"LVerDomain"}
!284 = !{!285}
!285 = distinct !{!285, !283}
!286 = distinct !{!286, !15}
!287 = distinct !{!287, !15}
!288 = !{!289}
!289 = distinct !{!289, !290}
!290 = distinct !{!290, !"LVerDomain"}
!291 = !{!292}
!292 = distinct !{!292, !290}
!293 = distinct !{!293, !15}
!294 = distinct !{!294, !15}
!295 = !{!296}
!296 = distinct !{!296, !297}
!297 = distinct !{!297, !"LVerDomain"}
!298 = !{!299}
!299 = distinct !{!299, !297}
!300 = distinct !{!300, !15}
!301 = distinct !{!301, !15}
!302 = !{!303}
!303 = distinct !{!303, !304}
!304 = distinct !{!304, !"LVerDomain"}
!305 = !{!306}
!306 = distinct !{!306, !304}
!307 = distinct !{!307, !15}
!308 = distinct !{!308, !15}
!309 = !{!310}
!310 = distinct !{!310, !311}
!311 = distinct !{!311, !"LVerDomain"}
!312 = !{!313}
!313 = distinct !{!313, !311}
!314 = distinct !{!314, !15}
!315 = distinct !{!315, !105}
!316 = distinct !{!316, !15}
!317 = !{!318}
!318 = distinct !{!318, !319}
!319 = distinct !{!319, !"LVerDomain"}
!320 = !{!321}
!321 = distinct !{!321, !319}
!322 = distinct !{!322, !15}
!323 = distinct !{!323, !105}
!324 = distinct !{!324, !15}
!325 = !{!326}
!326 = distinct !{!326, !327}
!327 = distinct !{!327, !"LVerDomain"}
!328 = !{!329}
!329 = distinct !{!329, !327}
!330 = distinct !{!330, !15}
!331 = distinct !{!331, !15}
!332 = !{!333}
!333 = distinct !{!333, !334}
!334 = distinct !{!334, !"LVerDomain"}
!335 = !{!336}
!336 = distinct !{!336, !334}
!337 = distinct !{!337, !15}
!338 = distinct !{!338, !15}
!339 = !{!340}
!340 = distinct !{!340, !341}
!341 = distinct !{!341, !"LVerDomain"}
!342 = !{!343}
!343 = distinct !{!343, !341}
!344 = distinct !{!344, !15}
!345 = distinct !{!345, !105}
!346 = distinct !{!346, !15}
!347 = !{!348}
!348 = distinct !{!348, !349}
!349 = distinct !{!349, !"LVerDomain"}
!350 = !{!351}
!351 = distinct !{!351, !349}
!352 = distinct !{!352, !15}
!353 = distinct !{!353, !105}
!354 = distinct !{!354, !15}
!355 = !{!356}
!356 = distinct !{!356, !357}
!357 = distinct !{!357, !"LVerDomain"}
!358 = !{!359}
!359 = distinct !{!359, !357}
!360 = distinct !{!360, !15}
!361 = distinct !{!361, !15}
!362 = distinct !{!362, !105}
!363 = !{!364}
!364 = distinct !{!364, !365}
!365 = distinct !{!365, !"LVerDomain"}
!366 = !{!367}
!367 = distinct !{!367, !365}
!368 = distinct !{!368, !15}
!369 = distinct !{!369, !15}
!370 = distinct !{!370, !15}
!371 = distinct !{!371, !15}
!372 = !{!373}
!373 = distinct !{!373, !374}
!374 = distinct !{!374, !"LVerDomain"}
!375 = !{!376}
!376 = distinct !{!376, !374}
!377 = distinct !{!377, !15}
!378 = distinct !{!378, !15}
!379 = distinct !{!379, !105}
!380 = !{!381}
!381 = distinct !{!381, !382}
!382 = distinct !{!382, !"LVerDomain"}
!383 = !{!384}
!384 = distinct !{!384, !382}
!385 = distinct !{!385, !15}
!386 = distinct !{!386, !15}
!387 = !{!388}
!388 = distinct !{!388, !389}
!389 = distinct !{!389, !"LVerDomain"}
!390 = !{!391}
!391 = distinct !{!391, !389}
!392 = distinct !{!392, !15}
!393 = distinct !{!393, !15}
!394 = distinct !{!394, !15}
!395 = distinct !{!395, !15}
!396 = !{!397}
!397 = distinct !{!397, !398}
!398 = distinct !{!398, !"LVerDomain"}
!399 = !{!400}
!400 = distinct !{!400, !398}
!401 = distinct !{!401, !15}
!402 = distinct !{!402, !15}
!403 = !{!404}
!404 = distinct !{!404, !405}
!405 = distinct !{!405, !"LVerDomain"}
!406 = !{!407}
!407 = distinct !{!407, !405}
!408 = distinct !{!408, !15}
!409 = distinct !{!409, !15}
!410 = !{!411}
!411 = distinct !{!411, !412}
!412 = distinct !{!412, !"LVerDomain"}
!413 = !{!414}
!414 = distinct !{!414, !412}
!415 = distinct !{!415, !15}
!416 = distinct !{!416, !15}
!417 = !{!418}
!418 = distinct !{!418, !419}
!419 = distinct !{!419, !"LVerDomain"}
!420 = !{!421}
!421 = distinct !{!421, !419}
!422 = distinct !{!422, !15}
!423 = distinct !{!423, !15}
!424 = !{!425}
!425 = distinct !{!425, !426}
!426 = distinct !{!426, !"LVerDomain"}
!427 = !{!428}
!428 = distinct !{!428, !426}
!429 = distinct !{!429, !15}
!430 = distinct !{!430, !15}
!431 = !{!432}
!432 = distinct !{!432, !433}
!433 = distinct !{!433, !"LVerDomain"}
!434 = !{!435}
!435 = distinct !{!435, !433}
!436 = distinct !{!436, !15}
!437 = distinct !{!437, !15}
!438 = !{!439}
!439 = distinct !{!439, !440}
!440 = distinct !{!440, !"LVerDomain"}
!441 = !{!442}
!442 = distinct !{!442, !440}
!443 = distinct !{!443, !15}
!444 = distinct !{!444, !15}
!445 = distinct !{!445, !15}
!446 = distinct !{!446, !15}
!447 = !{!448}
!448 = distinct !{!448, !449}
!449 = distinct !{!449, !"LVerDomain"}
!450 = !{!451}
!451 = distinct !{!451, !449}
!452 = distinct !{!452, !15}
!453 = distinct !{!453, !15}
!454 = !{!455}
!455 = distinct !{!455, !456}
!456 = distinct !{!456, !"LVerDomain"}
!457 = !{!458}
!458 = distinct !{!458, !456}
!459 = distinct !{!459, !15}
!460 = distinct !{!460, !15}
!461 = distinct !{!461, !15}
!462 = distinct !{!462, !15}
!463 = !{!464}
!464 = distinct !{!464, !465}
!465 = distinct !{!465, !"LVerDomain"}
!466 = !{!467}
!467 = distinct !{!467, !465}
!468 = distinct !{!468, !15}
!469 = distinct !{!469, !15}
!470 = !{!471}
!471 = distinct !{!471, !472}
!472 = distinct !{!472, !"LVerDomain"}
!473 = !{!474}
!474 = distinct !{!474, !472}
!475 = distinct !{!475, !15}
!476 = distinct !{!476, !15}
!477 = !{!478}
!478 = distinct !{!478, !479}
!479 = distinct !{!479, !"LVerDomain"}
!480 = !{!481}
!481 = distinct !{!481, !479}
!482 = distinct !{!482, !15}
!483 = distinct !{!483, !15}
!484 = !{!485}
!485 = distinct !{!485, !486}
!486 = distinct !{!486, !"LVerDomain"}
!487 = !{!488}
!488 = distinct !{!488, !486}
!489 = distinct !{!489, !15}
!490 = distinct !{!490, !15}
!491 = !{!492}
!492 = distinct !{!492, !493}
!493 = distinct !{!493, !"LVerDomain"}
!494 = !{!495}
!495 = distinct !{!495, !493}
!496 = distinct !{!496, !15}
!497 = distinct !{!497, !15}
!498 = !{!499}
!499 = distinct !{!499, !500}
!500 = distinct !{!500, !"LVerDomain"}
!501 = !{!502}
!502 = distinct !{!502, !500}
!503 = distinct !{!503, !15}
!504 = distinct !{!504, !15}
!505 = !{!506}
!506 = distinct !{!506, !507}
!507 = distinct !{!507, !"LVerDomain"}
!508 = !{!509}
!509 = distinct !{!509, !507}
!510 = distinct !{!510, !15}
!511 = distinct !{!511, !15}
!512 = !{!513}
!513 = distinct !{!513, !514}
!514 = distinct !{!514, !"LVerDomain"}
!515 = !{!516}
!516 = distinct !{!516, !514}
!517 = distinct !{!517, !15}
!518 = distinct !{!518, !15}
!519 = !{!520}
!520 = distinct !{!520, !521}
!521 = distinct !{!521, !"LVerDomain"}
!522 = !{!523}
!523 = distinct !{!523, !521}
!524 = distinct !{!524, !15}
!525 = distinct !{!525, !15}
!526 = !{!527}
!527 = distinct !{!527, !528}
!528 = distinct !{!528, !"LVerDomain"}
!529 = !{!530}
!530 = distinct !{!530, !528}
!531 = distinct !{!531, !15}
!532 = distinct !{!532, !15}
!533 = !{!534}
!534 = distinct !{!534, !535}
!535 = distinct !{!535, !"LVerDomain"}
!536 = !{!537}
!537 = distinct !{!537, !535}
!538 = distinct !{!538, !15}
!539 = distinct !{!539, !15}
!540 = !{!541}
!541 = distinct !{!541, !542}
!542 = distinct !{!542, !"LVerDomain"}
!543 = !{!544}
!544 = distinct !{!544, !542}
!545 = distinct !{!545, !15}
!546 = distinct !{!546, !15}
!547 = !{!548}
!548 = distinct !{!548, !549}
!549 = distinct !{!549, !"LVerDomain"}
!550 = !{!551}
!551 = distinct !{!551, !549}
!552 = distinct !{!552, !15}
!553 = distinct !{!553, !15}
!554 = distinct !{!554, !15}
!555 = distinct !{!555, !15}
!556 = distinct !{!556, !15}
!557 = distinct !{!557, !15}
!558 = !{!559}
!559 = distinct !{!559, !560}
!560 = distinct !{!560, !"LVerDomain"}
!561 = !{!562}
!562 = distinct !{!562, !560}
!563 = distinct !{!563, !15}
!564 = distinct !{!564, !15}
!565 = !{!566}
!566 = distinct !{!566, !567}
!567 = distinct !{!567, !"LVerDomain"}
!568 = !{!569}
!569 = distinct !{!569, !567}
!570 = distinct !{!570, !15}
!571 = distinct !{!571, !15}
!572 = !{!573}
!573 = distinct !{!573, !574}
!574 = distinct !{!574, !"LVerDomain"}
!575 = !{!576}
!576 = distinct !{!576, !574}
!577 = distinct !{!577, !15}
!578 = distinct !{!578, !15}
!579 = !{!580}
!580 = distinct !{!580, !581}
!581 = distinct !{!581, !"LVerDomain"}
!582 = !{!583}
!583 = distinct !{!583, !581}
!584 = distinct !{!584, !15}
!585 = distinct !{!585, !15}
!586 = distinct !{!586, !105}
!587 = !{!588}
!588 = distinct !{!588, !589}
!589 = distinct !{!589, !"LVerDomain"}
!590 = !{!591}
!591 = distinct !{!591, !589}
!592 = distinct !{!592, !15}
!593 = distinct !{!593, !15}
!594 = distinct !{!594, !15}
!595 = distinct !{!595, !15}
!596 = !{!597}
!597 = distinct !{!597, !598}
!598 = distinct !{!598, !"LVerDomain"}
!599 = !{!600}
!600 = distinct !{!600, !598}
!601 = distinct !{!601, !15}
!602 = distinct !{!602, !15}
!603 = distinct !{!603, !105}
!604 = distinct !{!604, !15}
!605 = distinct !{!605, !15}
!606 = distinct !{!606, !15}
!607 = distinct !{!607, !15}
!608 = !{!609}
!609 = distinct !{!609, !610}
!610 = distinct !{!610, !"LVerDomain"}
!611 = !{!612}
!612 = distinct !{!612, !610}
!613 = distinct !{!613, !15}
!614 = distinct !{!614, !105}
!615 = distinct !{!615, !15}
!616 = !{!617}
!617 = distinct !{!617, !618}
!618 = distinct !{!618, !"LVerDomain"}
!619 = !{!620}
!620 = distinct !{!620, !618}
!621 = distinct !{!621, !15}
!622 = distinct !{!622, !15}
!623 = !{!624}
!624 = distinct !{!624, !625}
!625 = distinct !{!625, !"LVerDomain"}
!626 = !{!627}
!627 = distinct !{!627, !625}
!628 = distinct !{!628, !15}
!629 = distinct !{!629, !15}
!630 = !{!631}
!631 = distinct !{!631, !632}
!632 = distinct !{!632, !"LVerDomain"}
!633 = !{!634}
!634 = distinct !{!634, !632}
!635 = distinct !{!635, !15}
!636 = distinct !{!636, !105}
!637 = distinct !{!637, !15}
!638 = !{!639}
!639 = distinct !{!639, !640}
!640 = distinct !{!640, !"LVerDomain"}
!641 = !{!642}
!642 = distinct !{!642, !640}
!643 = distinct !{!643, !15}
!644 = distinct !{!644, !105}
!645 = distinct !{!645, !15}
!646 = !{!647}
!647 = distinct !{!647, !648}
!648 = distinct !{!648, !"LVerDomain"}
!649 = !{!650}
!650 = distinct !{!650, !648}
!651 = distinct !{!651, !15}
!652 = distinct !{!652, !15}
!653 = !{!654}
!654 = distinct !{!654, !655}
!655 = distinct !{!655, !"LVerDomain"}
!656 = !{!657}
!657 = distinct !{!657, !655}
!658 = distinct !{!658, !15}
!659 = distinct !{!659, !105}
!660 = distinct !{!660, !15}
!661 = !{!662}
!662 = distinct !{!662, !663}
!663 = distinct !{!663, !"LVerDomain"}
!664 = !{!665}
!665 = distinct !{!665, !663}
!666 = distinct !{!666, !15}
!667 = distinct !{!667, !105}
!668 = distinct !{!668, !15}
!669 = distinct !{!669, !105}
!670 = distinct !{!670, !15}
!671 = distinct !{!671, !15}
!672 = distinct !{!672, !105}
!673 = distinct !{!673, !15}
!674 = distinct !{!674, !15}
!675 = !{!676}
!676 = distinct !{!676, !677}
!677 = distinct !{!677, !"LVerDomain"}
!678 = !{!679}
!679 = distinct !{!679, !677}
!680 = distinct !{!680, !15}
!681 = distinct !{!681, !15}
!682 = !{!683}
!683 = distinct !{!683, !684}
!684 = distinct !{!684, !"LVerDomain"}
!685 = !{!686}
!686 = distinct !{!686, !684}
!687 = distinct !{!687, !15}
!688 = distinct !{!688, !15}
!689 = !{!690}
!690 = distinct !{!690, !691}
!691 = distinct !{!691, !"LVerDomain"}
!692 = !{!693}
!693 = distinct !{!693, !691}
!694 = distinct !{!694, !15}
!695 = distinct !{!695, !15}
!696 = distinct !{!696, !15}
!697 = distinct !{!697, !15}
!698 = distinct !{!698, !15}
!699 = distinct !{!699, !15}
!700 = !{!701}
!701 = distinct !{!701, !702}
!702 = distinct !{!702, !"LVerDomain"}
!703 = !{!704}
!704 = distinct !{!704, !702}
!705 = distinct !{!705, !15}
!706 = distinct !{!706, !15}
!707 = !{!708}
!708 = distinct !{!708, !709}
!709 = distinct !{!709, !"LVerDomain"}
!710 = !{!711}
!711 = distinct !{!711, !709}
!712 = distinct !{!712, !15}
!713 = distinct !{!713, !15}
!714 = !{!715}
!715 = distinct !{!715, !716}
!716 = distinct !{!716, !"LVerDomain"}
!717 = !{!718}
!718 = distinct !{!718, !716}
!719 = distinct !{!719, !15}
!720 = distinct !{!720, !15}
!721 = !{!722}
!722 = distinct !{!722, !723}
!723 = distinct !{!723, !"LVerDomain"}
!724 = !{!725}
!725 = distinct !{!725, !723}
!726 = distinct !{!726, !15}
!727 = distinct !{!727, !15}
!728 = !{!729}
!729 = distinct !{!729, !730}
!730 = distinct !{!730, !"LVerDomain"}
!731 = !{!732}
!732 = distinct !{!732, !730}
!733 = distinct !{!733, !15}
!734 = distinct !{!734, !15}
!735 = !{!736}
!736 = distinct !{!736, !737}
!737 = distinct !{!737, !"LVerDomain"}
!738 = !{!739}
!739 = distinct !{!739, !737}
!740 = distinct !{!740, !15}
!741 = distinct !{!741, !15}
!742 = distinct !{!742, !15}
!743 = distinct !{!743, !15}
!744 = distinct !{!744, !15}
!745 = distinct !{!745, !15}
!746 = !{!747}
!747 = distinct !{!747, !748}
!748 = distinct !{!748, !"LVerDomain"}
!749 = !{!750}
!750 = distinct !{!750, !748}
!751 = distinct !{!751, !15}
!752 = distinct !{!752, !15}
!753 = !{!754}
!754 = distinct !{!754, !755}
!755 = distinct !{!755, !"LVerDomain"}
!756 = !{!757}
!757 = distinct !{!757, !755}
!758 = distinct !{!758, !15}
!759 = distinct !{!759, !15}
!760 = !{!761}
!761 = distinct !{!761, !762}
!762 = distinct !{!762, !"LVerDomain"}
!763 = !{!764}
!764 = distinct !{!764, !762}
!765 = distinct !{!765, !15}
!766 = distinct !{!766, !15}
!767 = distinct !{!767, !105}
!768 = distinct !{!768, !15}
!769 = distinct !{!769, !15}
!770 = distinct !{!770, !105}
!771 = distinct !{!771, !15}
!772 = distinct !{!772, !15}
!773 = distinct !{!773, !15}
!774 = distinct !{!774, !15}
