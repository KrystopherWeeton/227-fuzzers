; ModuleID = '../../third_party/nasm/asm/nasm.c'
source_filename = "../../third_party/nasm/asm/nasm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type { i32, i32, [5 x i64], [5 x i16], i8*, i32 }
%struct.src_location = type { i8*, i32 }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.ofmt_alias = type { i8*, %struct.ofmt* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.optimization = type { i32, i32 }
%struct.limit_info = type { i8*, i8*, i64 }
%struct.location = type { i64, i32, i32 }
%struct.RAA = type opaque
%struct.iflag_t = type { [4 x i32] }
%struct.strlist = type { %struct.hash_table, %struct.strlist_entry*, %struct.strlist_entry**, i64, i64, i8 }
%struct.hash_table = type { %struct.hash_node*, i64, i64, i64 }
%struct.hash_node = type { i64, i8*, i64, i8* }
%struct.strlist_entry = type { %struct.strlist_entry*, i64, i64, %union.intorptr, [1 x i8] }
%union.intorptr = type { i64 }
%struct.SAA = type { i64, i64, i64, i64, i64, i64, i8**, i64, i64, i8**, i64, i64, i8** }
%struct.preproc_ops = type { void ()*, void (i8*, i32, %struct.strlist*)*, i8* ()*, void ()*, void ()*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*, i8*)*, void (%struct.strlist*)*, void (i32)*, i1 (i32)* }
%struct.error_format = type { i8*, i8*, i8* }
%struct.nasm_errhold = type { %struct.nasm_errhold*, %struct.nasm_errtext*, %struct.nasm_errtext** }
%struct.nasm_errtext = type { %struct.nasm_errtext*, i8*, %struct.src_location, i32, i32 }
%struct.compile_time = type { i64, i8, i8, i8, i64, %struct.tm, %struct.tm }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.src_location_stack = type { %struct.src_location, %struct.src_location_stack*, %struct.src_location_stack*, i8* }
%struct.textargs = type { i8*, i32, i32, i32 }
%struct.lfmt = type { void (i8*)*, void ()*, void (%struct.out_data*)*, void (i32, i32, i8*)*, void (i32, i64)*, void (i32)*, void (i32, i8*, ...)*, void (i64)* }
%struct.forwrefinfo = type { i32, i32 }
%struct.insn = type { i8*, [7 x i32], i32, i32, i32, i32, [5 x %struct.operand], %struct.extop*, i32, i32, i8, i8, i32, i32, i32, i32, [3 x i8], i32, i32, i8 }
%struct.operand = type { i64, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i16 }
%struct.extop = type { %struct.extop*, %union.anon, i64, i32, i32 }
%union.anon = type { %struct.anon.0 }
%struct.anon.0 = type { i64, i32, i32, i8 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@tasm_compatible_mode = hidden local_unnamed_addr global i8 0, align 1
@.str = private unnamed_addr constant [5 x i8] c"init\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"preproc-only\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"first\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"optimize\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"stabilize\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"final\00", align 1
@_pass_types = hidden local_unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0)], align 16
@globalrel = hidden local_unnamed_addr global i32 0, align 4
@globalbnd = hidden local_unnamed_addr global i32 0, align 4
@of_bin = external constant %struct.ofmt, align 8
@ofmt = hidden local_unnamed_addr global %struct.ofmt* @of_bin, align 8
@ofmt_alias = hidden global %struct.ofmt_alias* null, align 8
@ofile = hidden local_unnamed_addr global %struct._IO_FILE* null, align 8
@optimizing = hidden local_unnamed_addr global %struct.optimization { i32 1073741823, i32 0 }, align 4
@user_nolist = hidden local_unnamed_addr global i8 0, align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@limit_info = internal unnamed_addr constant [8 x %struct.limit_info] [%struct.limit_info { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i32 0, i32 0), i64 4611686018427387903 }, %struct.limit_info { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.24, i32 0, i32 0), i64 1000 }, %struct.limit_info { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26, i32 0, i32 0), i64 10000 }, %struct.limit_info { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.28, i32 0, i32 0), i64 10000000 }, %struct.limit_info { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.30, i32 0, i32 0), i64 100000 }, %struct.limit_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.32, i32 0, i32 0), i64 1000000 }, %struct.limit_info { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i32 0, i32 0), i64 8192 }, %struct.limit_info { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.36, i32 0, i32 0), i64 2000000000 }], align 16
@.str.7 = private unnamed_addr constant [20 x i8] c"unknown limit: `%s'\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"unlimited\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"invalid limit value: `%s'\00", align 1
@nasm_limit = common hidden local_unnamed_addr global [8 x i64] zeroinitializer, align 16
@location = common hidden local_unnamed_addr global %struct.location zeroinitializer, align 8
@absolute = common hidden local_unnamed_addr global %struct.location zeroinitializer, align 8
@in_absolute = common hidden local_unnamed_addr global i8 0, align 1
@offsets = internal unnamed_addr global %struct.RAA* null, align 8
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@error_file = common hidden local_unnamed_addr global %struct._IO_FILE* null, align 8
@_progname = common hidden local_unnamed_addr global i8* null, align 8
@.str.10 = private constant [5 x i8] c"nasm\00", align 1
@cpu = common hidden local_unnamed_addr global %struct.iflag_t zeroinitializer, align 4
@cmd_cpu = internal unnamed_addr global %struct.iflag_t zeroinitializer, align 4
@include_path = internal global %struct.strlist* null, align 8
@_pass_type = common hidden local_unnamed_addr global i32 0, align 4
@_passn = common hidden local_unnamed_addr global i64 0, align 8
@terminate_after_phase = internal unnamed_addr global i1 false, align 1
@forwrefs = internal unnamed_addr global %struct.SAA* null, align 8
@nasmpp = external constant %struct.preproc_ops, align 8
@preproc = internal unnamed_addr global %struct.preproc_ops* null, align 8
@operating_mode = internal unnamed_addr global i32 0, align 4
@using_debug_info = internal unnamed_addr global i1 false, align 1
@null_debug_form = external constant %struct.dfmt, align 8
@dfmt = common hidden local_unnamed_addr global %struct.dfmt* null, align 8
@debug_format = internal unnamed_addr global i8* null, align 8
@.str.11 = private unnamed_addr constant [54 x i8] c"unrecognized debug format `%s' for output format `%s'\00", align 1
@depend_file = internal unnamed_addr global i8* null, align 8
@outname = common hidden local_unnamed_addr global i8* null, align 8
@.str.12 = private unnamed_addr constant [3 x i8] c".d\00", align 1
@inname = common hidden local_unnamed_addr global i8* null, align 8
@.str.13 = private unnamed_addr constant [9 x i8] c"nasm.out\00", align 1
@.str.14 = private unnamed_addr constant [58 x i8] c"default output file same as input, using `%s' for output\0A\00", align 1
@depend_list = common hidden local_unnamed_addr global %struct.strlist* null, align 8
@depend_target = internal unnamed_addr global i8* null, align 8
@quote_for_make = internal unnamed_addr global i8* (i8*)* @quote_for_pmake, align 8
@depend_missing_ok = internal unnamed_addr global i1 false, align 1
@.str.15 = private unnamed_addr constant [32 x i8] c"unable to open output file `%s'\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [17 x i8] c"%%line %d%+d %s\0A\00", align 1
@keep_all = internal unnamed_addr global i1 false, align 1
@.str.17 = private unnamed_addr constant [32 x i8] c"write error on output file `%s'\00", align 1
@nasm_verror_critical.been_here = internal unnamed_addr global i1 false, align 1
@error_pfx_table = internal unnamed_addr constant [8 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.139, i32 0, i32 0)], align 16
@.str.18 = private unnamed_addr constant [7 x i8] c"%s%d%s\00", align 1
@errfmt = internal unnamed_addr global %struct.error_format* @errfmt_gnu, align 8
@errhold_stack = internal unnamed_addr global %struct.nasm_errhold* null, align 8
@.str.19 = private unnamed_addr constant [34 x i8] c"../../third_party/nasm/asm/nasm.c\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"eh == errhold_stack\00", align 1
@debug_nasm = common hidden local_unnamed_addr global i32 0, align 4
@official_compile_time = common hidden global %struct.compile_time zeroinitializer, align 8
@pp_noline = common hidden local_unnamed_addr global i8 0, align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"passes\00", align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"total number of passes\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"stalled-passes\00", align 1
@.str.24 = private unnamed_addr constant [42 x i8] c"number of passes without forward progress\00", align 1
@.str.25 = private unnamed_addr constant [13 x i8] c"macro-levels\00", align 1
@.str.26 = private unnamed_addr constant [26 x i8] c"levels of macro expansion\00", align 1
@.str.27 = private unnamed_addr constant [13 x i8] c"macro-tokens\00", align 1
@.str.28 = private unnamed_addr constant [52 x i8] c"tokens processed during single-lime macro expansion\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"mmacros\00", align 1
@.str.30 = private unnamed_addr constant [38 x i8] c"multi-line macros before final return\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"rep\00", align 1
@.str.32 = private unnamed_addr constant [11 x i8] c"%rep count\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"eval\00", align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"expression evaluation descent\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"lines\00", align 1
@.str.36 = private unnamed_addr constant [29 x i8] c"total source lines processed\00", align 1
@.str.37 = private unnamed_addr constant [22 x i8] c"__?DATE?__=\22%Y-%m-%d\22\00", align 1
@.str.38 = private unnamed_addr constant [22 x i8] c"__?DATE_NUM?__=%Y%m%d\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"__?TIME?__=\22%H:%M:%S\22\00", align 1
@.str.40 = private unnamed_addr constant [22 x i8] c"__?TIME_NUM?__=%H%M%S\00", align 1
@.str.41 = private unnamed_addr constant [26 x i8] c"__?UTC_DATE?__=\22%Y-%m-%d\22\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c"__?UTC_DATE_NUM?__=%Y%m%d\00", align 1
@.str.43 = private unnamed_addr constant [26 x i8] c"__?UTC_TIME?__=\22%H:%M:%S\22\00", align 1
@.str.44 = private unnamed_addr constant [26 x i8] c"__?UTC_TIME_NUM?__=%H%M%S\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"__?POSIX_TIME?__=%ld\00", align 1
@.str.46 = private unnamed_addr constant [23 x i8] c"__?OUTPUT_FORMAT?__=%s\00", align 1
@.str.47 = private unnamed_addr constant [22 x i8] c"__?DEBUG_FORMAT?__=%s\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"\22\22\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16
@_src_bottom = external local_unnamed_addr global %struct.src_location_stack*, align 8
@.str.49 = private unnamed_addr constant [5 x i8] c" &\0A \00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c" \5C\0A \00", align 1
@.str.51 = private unnamed_addr constant [8 x i8] c"\09%null\0A\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"unable to write dependency file `%s'\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"%s :\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@depend_emit_phony = internal unnamed_addr global i1 false, align 1
@.str.57 = private unnamed_addr constant [9 x i8] c"%s :\0A%s\0A\00", align 1
@warning_state = external local_unnamed_addr global [35 x i8], align 16
@warning_default = external local_unnamed_addr constant [35 x i8], align 16
@.str.58 = private unnamed_addr constant [8 x i8] c"NASMENV\00", align 1
@stopoptions = internal unnamed_addr global i1 false, align 1
@.str.59 = private unnamed_addr constant [34 x i8] c"unable to open response file `%s'\00", align 1
@.str.60 = private unnamed_addr constant [24 x i8] c"no input file specified\00", align 1
@errname = internal unnamed_addr global i8* null, align 8
@listname = internal unnamed_addr global i8* null, align 8
@.str.61 = private unnamed_addr constant [30 x i8] c"will not overwrite input file\00", align 1
@.str.62 = private unnamed_addr constant [41 x i8] c"cannot open file `%s' for error messages\00", align 1
@.str.63 = private unnamed_addr constant [34 x i8] c"option `-%c' requires an argument\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c"\0D\0A\1A\00", align 1
@.str.65 = private unnamed_addr constant [19 x i8] c"oOfpPdDiIlLFXuUZwW\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.67 = private unnamed_addr constant [53 x i8] c"unrecognised output format `%s' - use -hf for a list\00", align 1
@opt_verbose_info = internal unnamed_addr global i1 false, align 1
@.str.68 = private unnamed_addr constant [34 x i8] c"unknown optimization option -O%c\0A\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"listing\00", align 1
@list_options = external local_unnamed_addr global i64, align 8
@.str.70 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.71 = private unnamed_addr constant [3 x i8] c"vc\00", align 1
@.str.72 = private unnamed_addr constant [5 x i8] c"msvc\00", align 1
@.str.73 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@errfmt_msvc = internal constant %struct.error_format { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i32 0, i32 0) }, align 8
@.str.74 = private unnamed_addr constant [4 x i8] c"gnu\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"gcc\00", align 1
@errfmt_gnu = internal constant %struct.error_format { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0) }, align 8
@.str.76 = private unnamed_addr constant [41 x i8] c"unrecognized error reporting format `%s'\00", align 1
@preproc_nop = external constant %struct.preproc_ops, align 8
@.str.77 = private unnamed_addr constant [33 x i8] c"unknown dependency option `-M%c'\00", align 1
@.str.78 = private unnamed_addr constant [35 x i8] c"option `-M%c' requires a parameter\00", align 1
@textopts = internal unnamed_addr constant [18 x %struct.textargs] [%struct.textargs { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.106, i32 0, i32 0), i32 1, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.107, i32 0, i32 0), i32 1, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i32 2, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.109, i32 0, i32 0), i32 3, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i32 0, i32 0), i32 4, i32 1, i32 2 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.111, i32 0, i32 0), i32 4, i32 1, i32 3 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 4, i32 1, i32 2 }, %struct.textargs { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i32 4, i32 1, i32 3 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.114, i32 0, i32 0), i32 4, i32 1, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115, i32 0, i32 0), i32 4, i32 1, i32 1 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.116, i32 0, i32 0), i32 5, i32 1, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i32 0, i32 0), i32 6, i32 1, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0), i32 7, i32 1, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i32 8, i32 1, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i32 0, i32 0), i32 9, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0), i32 10, i32 0, i32 0 }, %struct.textargs { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.121, i32 0, i32 0), i32 11, i32 2, i32 0 }, %struct.textargs zeroinitializer], align 16
@.str.79 = private unnamed_addr constant [27 x i8] c"unrecognized option `--%s'\00", align 1
@.str.80 = private unnamed_addr constant [35 x i8] c"option `--%s' requires an argument\00", align 1
@.str.81 = private unnamed_addr constant [40 x i8] c"option `--%s' does not take an argument\00", align 1
@abort_on_panic = internal unnamed_addr global i1 false, align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"pragma\00", align 1
@.str.83 = private unnamed_addr constant [26 x i8] c"unrecognised option `-%c'\00", align 1
@.str.84 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.85 = private unnamed_addr constant [37 x i8] c"more than one %s file specified: %s\0A\00", align 1
@.str.86 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.87 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.89 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.91 = private unnamed_addr constant [79 x i8] c"Usage: %s [-@ response_file] [options...] [--] filename\0A       %s -v (or --v)\0A\00", align 1
@.str.92 = private unnamed_addr constant [902 x i8] c"\0AOptions (values in brackets indicate defaults):\0A\0A    -h            show this text and exit (also --help)\0A    -v (or --v)   print the NASM version number and exit\0A    -@ file       response file; one command line option per line\0A\0A    -o outfile    write output to outfile\0A    --keep-all    output files will not be removed even if an error happens\0A\0A    -Xformat      specifiy error reporting format (gnu or vc)\0A    -s            redirect error messages to stdout\0A    -Zfile        redirect error messages to file\0A\0A    -M            generate Makefile dependencies on stdout\0A    -MG           d:o, missing files assumed generated\0A    -MF file      set Makefile dependency file\0A    -MD file      assemble and generate dependencies\0A    -MT file      dependency target name\0A    -MQ file      dependency target name (quoted)\0A    -MP           emit phony targets\0A\0A    -f format     select output file format\0A\00", align 1
@.str.93 = private unnamed_addr constant [160 x i8] c"\0A    -g            generate debugging information\0A    -F format     select a debugging format (output format dependent)\0A    -gformat      same as -g -F format\0A\00", align 1
@.str.94 = private unnamed_addr constant [2063 x i8] c"\0A    -l listfile   write listing to a list file\0A    -Lflags...    add optional information to the list file\0A       -Lb        show builtin macro packages (standard and %use)\0A       -Ld        show byte and repeat counts in decimal, not hex\0A       -Le        show the preprocessed output\0A       -Lf        ignore .nolist (force output)\0A       -Lm        show multi-line macro calls with expanded parmeters\0A       -Lp        output a list file every pass, in case of errors\0A       -Ls        show all single-line macro definitions\0A       -Lw        flush the output after every line\0A       -L+        enable all listing options (very verbose!)\0A\0A    -Oflags...    optimize opcodes, immediates and branch offsets\0A       -O0        no optimization\0A       -O1        minimal optimization\0A       -Ox        multipass optimization (default)\0A       -Ov        display the number of passes executed at the end\0A    -t            assemble in limited SciTech TASM compatible mode\0A\0A    -E (or -e)    preprocess only (writes output to stdout by default)\0A    -a            don't preprocess (assemble only)\0A    -Ipath        add a pathname to the include file path\0A    -Pfile        pre-include a file (also --include)\0A    -Dmacro[=str] pre-define a macro\0A    -Umacro       undefine a macro\0A   --pragma str   pre-executes a specific %%pragma\0A   --before str   add line (usually a preprocessor statement) before the input\0A   --no-line      ignore %line directives in input\0A\0A   --prefix str   prepend the given string to the names of all extern,\0A                  common and global symbols (also --gprefix)\0A   --suffix str   append the given string to the names of all extern,\0A                  common and global symbols (also --gprefix)\0A   --lprefix str  prepend the given string to local symbols\0A   --lpostfix str append the given string to local symbols\0A\0A    -w+x          enable warning x (also -Wx)\0A    -w-x          disable warning x (also -Wno-x)\0A    -w[+-]error   promote all warnings to errors (also -Werror)\0A    -w[+-]error=x promote warning x to errors (also -Werror=x)\0A\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"       %-20s %s\0A\00", align 1
@warning_name = external local_unnamed_addr constant [36 x i8*], align 16
@warning_help = external local_unnamed_addr constant [36 x i8*], align 16
@.str.96 = private unnamed_addr constant [50 x i8] c"       %-20.*s all warnings prefixed with \22%.*s\22\0A\00", align 1
@.str.97 = private unnamed_addr constant [19 x i8] c"       %-20s %s%s\0A\00", align 1
@.str.98 = private unnamed_addr constant [9 x i8] c" [error]\00", align 1
@.str.99 = private unnamed_addr constant [6 x i8] c" [on]\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c" [off]\00", align 1
@.str.101 = private unnamed_addr constant [42 x i8] c"\0A   --limit-X val  set execution limit X\0A\00", align 1
@.str.102 = private unnamed_addr constant [18 x i8] c"       %-20s %s [\00", align 1
@.str.103 = private unnamed_addr constant [6 x i8] c"%ld]\0A\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"unlimited]\0A\00", align 1
@.str.105 = private unnamed_addr constant [19 x i8] c"NASM version %s%s\0A\00", align 1
@nasm_version = external constant [0 x i8], align 1
@nasm_compile_options = external constant [0 x i8], align 1
@.str.106 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str.107 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.109 = private unnamed_addr constant [15 x i8] c"abort-on-panic\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"prefix\00", align 1
@.str.111 = private unnamed_addr constant [8 x i8] c"postfix\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"gprefix\00", align 1
@.str.113 = private unnamed_addr constant [9 x i8] c"gpostfix\00", align 1
@.str.114 = private unnamed_addr constant [8 x i8] c"lprefix\00", align 1
@.str.115 = private unnamed_addr constant [9 x i8] c"lpostfix\00", align 1
@.str.116 = private unnamed_addr constant [8 x i8] c"include\00", align 1
@.str.117 = private unnamed_addr constant [7 x i8] c"before\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"limit-\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"keep-all\00", align 1
@.str.120 = private unnamed_addr constant [8 x i8] c"no-line\00", align 1
@.str.121 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@global_offset_changed = external local_unnamed_addr global i64, align 8
@warn_list = internal global %struct.strlist* null, align 8
@globalbits = external global i32, align 4
@active_list_options = external local_unnamed_addr global i64, align 8
@lfmt = external local_unnamed_addr global %struct.lfmt*, align 8
@forwref = internal unnamed_addr global %struct.forwrefinfo* null, align 8
@globallineno = internal unnamed_addr global i64 0, align 8
@.str.124 = private unnamed_addr constant [44 x i8] c"overall line count exceeds the maximum %ld\0A\00", align 1
@.str.125 = private unnamed_addr constant [15 x i8] c"!errhold_stack\00", align 1
@.str.126 = private unnamed_addr constant [89 x i8] c"unable to find valid values for all labels after %ld passes; stalled for %ld, giving up.\00", align 1
@.str.127 = private unnamed_addr constant [46 x i8] c"Possible causes: recursive EQUs, macro abuse.\00", align 1
@.str.128 = private unnamed_addr constant [59 x i8] c"phase error during stabilization pass, hoping for the best\00", align 1
@.str.129 = private unnamed_addr constant [40 x i8] c"phase error during code generation pass\00", align 1
@.str.130 = private unnamed_addr constant [34 x i8] c"assembly required 1+%ld+2 passes\0A\00", align 1
@.str.131 = private unnamed_addr constant [23 x i8] c"instruction->times > 0\00", align 1
@_src_error = external local_unnamed_addr global %struct.src_location_stack*, align 8
@.str.132 = private unnamed_addr constant [5 x i8] c";;; \00", align 1
@.str.133 = private unnamed_addr constant [8 x i8] c"debug: \00", align 1
@.str.134 = private unnamed_addr constant [7 x i8] c"info: \00", align 1
@.str.135 = private unnamed_addr constant [10 x i8] c"warning: \00", align 1
@.str.136 = private unnamed_addr constant [8 x i8] c"error: \00", align 1
@.str.137 = private unnamed_addr constant [8 x i8] c"fatal: \00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"critical: \00", align 1
@.str.139 = private unnamed_addr constant [8 x i8] c"panic: \00", align 1
@.str.140 = private unnamed_addr constant [49 x i8] c"(severity & (ERR_MASK|WARN_MASK)) != ERR_WARNING\00", align 1
@.str.141 = private unnamed_addr constant [21 x i8] c"index < WARN_IDX_ALL\00", align 1
@.str.142 = private unnamed_addr constant [11 x i8] c" [-w+%s%s]\00", align 1
@.str.143 = private unnamed_addr constant [7 x i8] c"error=\00", align 1
@.str.144 = private unnamed_addr constant [6 x i8] c" here\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c" in an unknown location\00", align 1
@.str.146 = private unnamed_addr constant [15 x i8] c"%s%s%s%s%s%s%s\00", align 1
@.str.147 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.148 = private unnamed_addr constant [16 x i8] c"%s%s%s%s%s%s%s\0A\00", align 1
@.str.149 = private unnamed_addr constant [16 x i8] c"%s%s at %s:%d%s\00", align 1
@.str.150 = private unnamed_addr constant [18 x i8] c"%s%s in file %s%s\00", align 1
@.str.151 = private unnamed_addr constant [30 x i8] c"%s%s in an unknown location%s\00", align 1
@.str.152 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"Type %s -h for help.\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @nasm_set_limit(i8*, i8*) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #17
  store i8 -86, i8* %3, align 1
  %4 = icmp eq i8* %0, null
  %5 = select i1 %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %0
  %6 = icmp eq i8* %1, null
  %7 = select i1 %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %1
  %8 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0)) #18
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i64 0, i64 0)) #18
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %35

13:                                               ; preds = %50, %47, %44, %41, %38, %35, %10, %2
  %14 = phi i64 [ 0, %2 ], [ 1, %10 ], [ 2, %35 ], [ 3, %38 ], [ 4, %41 ], [ 5, %44 ], [ 6, %47 ], [ 7, %50 ]
  %15 = tail call i32 @strcasecmp(i8* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)) #18
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %13
  %18 = call i64 @readnum(i8* %7, i8* nonnull %3) #17
  %19 = load i8, i8* %3, align 1, !range !2
  %20 = icmp ne i8 %19, 0
  %21 = icmp slt i64 %18, 0
  %22 = or i1 %21, %20
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = load i32, i32* @_pass_type, align 4
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 2228291, i32 1507331
  call void (i32, i8*, ...) @nasm_error(i32 %26, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %7) #17
  br label %33

27:                                               ; preds = %17
  %28 = icmp slt i64 %18, 4611686018427387903
  %29 = select i1 %28, i64 %18, i64 4611686018427387903
  br label %30

30:                                               ; preds = %27, %13
  %31 = phi i64 [ 4611686018427387903, %13 ], [ %29, %27 ]
  %32 = getelementptr inbounds [8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 %14
  store i64 %31, i64* %32, align 8
  br label %33

33:                                               ; preds = %30, %23, %53
  %34 = phi i32 [ 2, %53 ], [ 2, %23 ], [ 1, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #17
  ret i32 %34

35:                                               ; preds = %10
  %36 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25, i64 0, i64 0)) #18
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %13, label %38

38:                                               ; preds = %35
  %39 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0)) #18
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %13, label %41

41:                                               ; preds = %38
  %42 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0)) #18
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %13, label %44

44:                                               ; preds = %41
  %45 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0)) #18
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %13, label %47

47:                                               ; preds = %44
  %48 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i64 0, i64 0)) #18
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %13, label %50

50:                                               ; preds = %47
  %51 = tail call i32 @strcasecmp(i8* %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0)) #18
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %13, label %53

53:                                               ; preds = %50
  %54 = load i32, i32* @_pass_type, align 4
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, i32 2228291, i32 1703939
  tail call void (i32, i8*, ...) @nasm_error(i32 %56, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i8* %5) #17
  br label %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

declare void @nasm_error(i32, i8*, ...) local_unnamed_addr #3

declare i64 @readnum(i8*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @switch_segment(i32) local_unnamed_addr #0 {
  store i32 %0, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %2 = icmp eq i32 %0, -1
  br i1 %2, label %3, label %5

3:                                                ; preds = %1
  %4 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %9

5:                                                ; preds = %1
  %6 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  %7 = sext i32 %0 to i64
  %8 = tail call i64 @raa_read(%struct.RAA* %6, i64 %7) #17
  br label %9

9:                                                ; preds = %5, %3
  %10 = phi i64 [ %4, %3 ], [ %8, %5 ]
  %11 = phi i8 [ 1, %3 ], [ 0, %5 ]
  store i64 %10, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  store i8 %11, i8* @in_absolute, align 1
  ret i64 %10
}

declare i64 @raa_read(%struct.RAA*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.out_data, align 8
  %4 = alloca %struct.insn, align 8
  %5 = alloca i64, align 8
  %6 = alloca [128 x i8], align 16
  %7 = alloca %struct.strlist*, align 8
  %8 = load i64, i64* bitcast (%struct._IO_FILE** @stderr to i64*), align 8
  store i64 %8, i64* bitcast (%struct._IO_FILE** @error_file to i64*), align 8
  %9 = load i8*, i8** %1, align 8
  store i8* %9, i8** @_progname, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = load i8, i8* %9, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %11, %2
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8** @_progname, align 8
  br label %15

15:                                               ; preds = %11, %14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.compile_time* @official_compile_time to i8*), i8 0, i64 136, i1 false) #17
  store i32 0, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 0), align 4
  store i64 -1, i64* bitcast (i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 1) to i64*), align 4
  %16 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %17 = and i32 %16, -131072
  %18 = or i32 %17, 65536
  store i32 %18, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  store i32 0, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cmd_cpu, i64 0, i32 0, i64 0), align 4
  store i64 -1, i64* bitcast (i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cmd_cpu, i64 0, i32 0, i64 1) to i64*), align 4
  %19 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cmd_cpu, i64 0, i32 0, i64 3), align 4
  %20 = and i32 %19, -131072
  %21 = or i32 %20, 65536
  store i32 %21, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cmd_cpu, i64 0, i32 0, i64 3), align 4
  store <2 x i64> <i64 4611686018427387903, i64 1000>, <2 x i64>* bitcast ([8 x i64]* @nasm_limit to <2 x i64>*), align 16
  store <2 x i64> <i64 10000, i64 10000000>, <2 x i64>* bitcast (i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 2) to <2 x i64>*), align 16
  store <2 x i64> <i64 100000, i64 1000000>, <2 x i64>* bitcast (i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 4) to <2 x i64>*), align 16
  store <2 x i64> <i64 8192, i64 2000000000>, <2 x i64>* bitcast (i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 6) to <2 x i64>*), align 16
  %22 = tail call i64 @nasm_get_stack_size_limit() #17
  %23 = lshr i64 %22, 10
  %24 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 6), align 16
  %25 = icmp slt i64 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %15
  store i64 %23, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 6), align 16
  br label %27

27:                                               ; preds = %15, %26
  %28 = tail call noalias %struct.strlist* @strlist_alloc(i1 zeroext true) #17
  store %struct.strlist* %28, %struct.strlist** @include_path, align 8
  store i32 0, i32* @_pass_type, align 4
  store i64 0, i64* @_passn, align 8
  store i1 false, i1* @terminate_after_phase, align 1
  tail call void @nasm_ctype_init() #17
  tail call void @src_init() #17
  %29 = tail call i32 @init_labels() #17
  store %struct.RAA* null, %struct.RAA** @offsets, align 8
  %30 = tail call %struct.SAA* @saa_init(i64 8) #17
  store %struct.SAA* %30, %struct.SAA** @forwrefs, align 8
  store %struct.preproc_ops* @nasmpp, %struct.preproc_ops** @preproc, align 8
  store i32 1, i32* @operating_mode, align 4
  tail call fastcc void @parse_cmdline(i32 %0, i8** %1, i32 1)
  %31 = load i1, i1* @terminate_after_phase, align 1
  br i1 %31, label %836, label %32

32:                                               ; preds = %27
  %33 = load i1, i1* @using_debug_info, align 1
  br i1 %33, label %35, label %34

34:                                               ; preds = %32
  store %struct.dfmt* @null_debug_form, %struct.dfmt** @dfmt, align 8
  br label %51

35:                                               ; preds = %32
  %36 = load i8*, i8** @debug_format, align 8
  %37 = icmp eq i8* %36, null
  %38 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  br i1 %37, label %39, label %43

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %38, i64 0, i32 6
  %41 = bitcast %struct.dfmt** %40 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* bitcast (%struct.dfmt** @dfmt to i64*), align 8
  br label %51

43:                                               ; preds = %35
  %44 = tail call %struct.dfmt* @dfmt_find(%struct.ofmt* %38, i8* nonnull %36) #17
  store %struct.dfmt* %44, %struct.dfmt** @dfmt, align 8
  %45 = icmp eq %struct.dfmt* %44, null
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = load i8*, i8** @debug_format, align 8
  %48 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %49 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %48, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  tail call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.11, i64 0, i64 0), i8* %47, i8* %50) #19
  unreachable

51:                                               ; preds = %43, %39, %34
  %52 = load %struct.strlist*, %struct.strlist** @include_path, align 8
  %53 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %54 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %53, i64 0, i32 0
  %55 = load void ()*, void ()** %54, align 8
  tail call void %55() #17
  %56 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %56) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 -86, i64 128, i1 false) #17
  %57 = load i8, i8* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 1), align 8, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %76, label %59

59:                                               ; preds = %51
  %60 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 5)) #17
  %61 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %62 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %61, i64 0, i32 6
  %63 = load void (i8*)*, void (i8*)** %62, align 8
  call void %63(i8* nonnull %56) #17
  %64 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 5)) #17
  %65 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %66 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %65, i64 0, i32 6
  %67 = load void (i8*)*, void (i8*)** %66, align 8
  call void %67(i8* nonnull %56) #17
  %68 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 5)) #17
  %69 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %70 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %69, i64 0, i32 6
  %71 = load void (i8*)*, void (i8*)** %70, align 8
  call void %71(i8* nonnull %56) #17
  %72 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.40, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 5)) #17
  %73 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %74 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %73, i64 0, i32 6
  %75 = load void (i8*)*, void (i8*)** %74, align 8
  call void %75(i8* nonnull %56) #17
  br label %76

76:                                               ; preds = %59, %51
  %77 = load i8, i8* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 2), align 1, !range !2
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %96, label %79

79:                                               ; preds = %76
  %80 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 6)) #17
  %81 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %82 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %81, i64 0, i32 6
  %83 = load void (i8*)*, void (i8*)** %82, align 8
  call void %83(i8* nonnull %56) #17
  %84 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 6)) #17
  %85 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %86 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %85, i64 0, i32 6
  %87 = load void (i8*)*, void (i8*)** %86, align 8
  call void %87(i8* nonnull %56) #17
  %88 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.43, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 6)) #17
  %89 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %90 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %89, i64 0, i32 6
  %91 = load void (i8*)*, void (i8*)** %90, align 8
  call void %91(i8* nonnull %56) #17
  %92 = call i64 @strftime(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.44, i64 0, i64 0), %struct.tm* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 6)) #17
  %93 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %94 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %93, i64 0, i32 6
  %95 = load void (i8*)*, void (i8*)** %94, align 8
  call void %95(i8* nonnull %56) #17
  br label %96

96:                                               ; preds = %79, %76
  %97 = load i8, i8* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 3), align 2, !range !2
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %96
  %100 = load i64, i64* getelementptr inbounds (%struct.compile_time, %struct.compile_time* @official_compile_time, i64 0, i32 4), align 8
  %101 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i64 %100) #17
  %102 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %103 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %102, i64 0, i32 6
  %104 = load void (i8*)*, void (i8*)** %103, align 8
  call void %104(i8* nonnull %56) #17
  br label %105

105:                                              ; preds = %99, %96
  %106 = load %struct.ofmt_alias*, %struct.ofmt_alias** @ofmt_alias, align 8
  %107 = icmp eq %struct.ofmt_alias* %106, null
  %108 = getelementptr inbounds %struct.ofmt_alias, %struct.ofmt_alias* %106, i64 0, i32 0
  %109 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %110 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %109, i64 0, i32 1
  %111 = select i1 %107, i8** %110, i8** %108
  %112 = load i8*, i8** %111, align 8
  %113 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.46, i64 0, i64 0), i8* %112) #17
  %114 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %115 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %114, i64 0, i32 6
  %116 = load void (i8*)*, void (i8*)** %115, align 8
  call void %116(i8* nonnull %56) #17
  %117 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %118 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %117, i64 0, i32 7
  %119 = load i8*, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %125, label %121

121:                                              ; preds = %105
  %122 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %123 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %122, i64 0, i32 5
  %124 = load void (i8*)*, void (i8*)** %123, align 8
  call void %124(i8* nonnull %119) #17
  br label %125

125:                                              ; preds = %121, %105
  %126 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %127 = icmp eq %struct.dfmt* %126, @null_debug_form
  br i1 %127, label %135, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %126, i64 0, i32 1
  %130 = load i8*, i8** %129, align 8
  %131 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %56, i64 128, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.47, i64 0, i64 0), i8* %130) #17
  %132 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %133 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %132, i64 0, i32 6
  %134 = load void (i8*)*, void (i8*)** %133, align 8
  call void %134(i8* nonnull %56) #17
  br label %135

135:                                              ; preds = %125, %128
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %56) #17
  %136 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %137 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %136, i64 0, i32 10
  %138 = load void (%struct.strlist*)*, void (%struct.strlist*)** %137, align 8
  call void %138(%struct.strlist* %52) #17
  call fastcc void @parse_cmdline(i32 %0, i8** %1, i32 2)
  %139 = load i1, i1* @terminate_after_phase, align 1
  br i1 %139, label %836, label %140

140:                                              ; preds = %135
  call void @init_warnings() #17
  %141 = load i8*, i8** @depend_file, align 8
  %142 = icmp eq i8* %141, null
  br i1 %142, label %143, label %155

143:                                              ; preds = %140
  %144 = load i32, i32* @operating_mode, align 4
  %145 = and i32 %144, -5
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %155, label %147

147:                                              ; preds = %143
  %148 = load i8*, i8** @outname, align 8
  %149 = icmp eq i8* %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %147
  %151 = call noalias i8* @nasm_strcat(i8* nonnull %148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0)) #17
  store i8* %151, i8** @depend_file, align 8
  br label %155

152:                                              ; preds = %147
  %153 = load i8*, i8** @inname, align 8
  %154 = call i8* @filename_set_extension(i8* %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0)) #17
  store i8* %154, i8** @depend_file, align 8
  br label %155

155:                                              ; preds = %143, %140, %150, %152
  %156 = load i8*, i8** @outname, align 8
  %157 = icmp eq i8* %156, null
  br i1 %157, label %158, label %172

158:                                              ; preds = %155
  %159 = load i32, i32* @operating_mode, align 4
  %160 = and i32 %159, 2
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %172

162:                                              ; preds = %158
  %163 = load i8*, i8** @inname, align 8
  %164 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %165 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %164, i64 0, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = call i8* @filename_set_extension(i8* %163, i8* %166) #17
  store i8* %167, i8** @outname, align 8
  %168 = load i8*, i8** @inname, align 8
  %169 = call i32 @strcmp(i8* %167, i8* %168) #18
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %162
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0), i8** @outname, align 8
  call void (i32, i8*, ...) @nasm_warn(i32 2228224, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0)) #17
  br label %172

172:                                              ; preds = %162, %158, %155, %171
  %173 = load i32, i32* @operating_mode, align 4
  %174 = and i32 %173, 4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = call noalias %struct.strlist* @strlist_alloc(i1 zeroext true) #17
  br label %178

178:                                              ; preds = %172, %176
  %179 = phi %struct.strlist* [ %177, %176 ], [ null, %172 ]
  store %struct.strlist* %179, %struct.strlist** @depend_list, align 8
  %180 = load i8*, i8** @depend_target, align 8
  %181 = icmp eq i8* %180, null
  br i1 %181, label %182, label %186

182:                                              ; preds = %178
  %183 = load i8* (i8*)*, i8* (i8*)** @quote_for_make, align 8
  %184 = load i8*, i8** @outname, align 8
  %185 = call i8* %183(i8* %184) #17, !callees !3
  store i8* %185, i8** @depend_target, align 8
  br label %186

186:                                              ; preds = %178, %182
  %187 = load i32, i32* @operating_mode, align 4
  %188 = and i32 %187, 3
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %218

190:                                              ; preds = %186
  %191 = load i1, i1* @depend_missing_ok, align 1
  br i1 %191, label %192, label %196

192:                                              ; preds = %190
  %193 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %194 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %193, i64 0, i32 10
  %195 = load void (%struct.strlist*)*, void (%struct.strlist*)** %194, align 8
  call void %195(%struct.strlist* null) #17
  br label %196

196:                                              ; preds = %192, %190
  %197 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %198 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %197, i64 0, i32 1
  %199 = load void (i8*, i32, %struct.strlist*)*, void (i8*, i32, %struct.strlist*)** %198, align 8
  %200 = load i8*, i8** @inname, align 8
  %201 = load %struct.strlist*, %struct.strlist** @depend_list, align 8
  call void %199(i8* %200, i32 1, %struct.strlist* %201) #17
  store %struct._IO_FILE* null, %struct._IO_FILE** @ofile, align 8
  %202 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %203 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %202, i64 0, i32 2
  %204 = load i8* ()*, i8* ()** %203, align 8
  %205 = call i8* %204() #17
  %206 = icmp eq i8* %205, null
  br i1 %206, label %214, label %207

207:                                              ; preds = %196, %207
  %208 = phi i8* [ %212, %207 ], [ %205, %196 ]
  call void @nasm_free(i8* nonnull %208) #17
  %209 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %210 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %209, i64 0, i32 2
  %211 = load i8* ()*, i8* ()** %210, align 8
  %212 = call i8* %211() #17
  %213 = icmp eq i8* %212, null
  br i1 %213, label %214, label %207

214:                                              ; preds = %207, %196
  %215 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %216 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %215, i64 0, i32 3
  %217 = load void ()*, void ()** %216, align 8
  call void %217() #17
  call void @reset_warnings() #17
  br label %369

218:                                              ; preds = %186
  %219 = and i32 %187, 2
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %369, label %221

221:                                              ; preds = %218
  %222 = call noalias i8* @nasm_strdup(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i64 0, i64 0)) #17
  %223 = load i8*, i8** @outname, align 8
  %224 = icmp eq i8* %223, null
  br i1 %224, label %230, label %225

225:                                              ; preds = %221
  %226 = call %struct._IO_FILE* @nasm_open_write(i8* nonnull %223, i32 1) #17
  store %struct._IO_FILE* %226, %struct._IO_FILE** @ofile, align 8
  %227 = icmp eq %struct._IO_FILE* %226, null
  br i1 %227, label %228, label %232

228:                                              ; preds = %225
  %229 = load i8*, i8** @outname, align 8
  call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0), i8* %229) #19
  unreachable

230:                                              ; preds = %221
  store %struct._IO_FILE* null, %struct._IO_FILE** @ofile, align 8
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  br label %232

232:                                              ; preds = %225, %230
  %233 = phi %struct._IO_FILE* [ %231, %230 ], [ %226, %225 ]
  store i32 0, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 2), align 4
  store i32 1, i32* @_pass_type, align 4
  %234 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %235 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %234, i64 0, i32 1
  %236 = load void (i8*, i32, %struct.strlist*)*, void (i8*, i32, %struct.strlist*)** %235, align 8
  %237 = load i8*, i8** @inname, align 8
  %238 = load %struct.strlist*, %struct.strlist** @depend_list, align 8
  call void %236(i8* %237, i32 2, %struct.strlist* %238) #17
  %239 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %240 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %239, i64 0, i32 2
  %241 = load i8* ()*, i8* ()** %240, align 8
  %242 = call i8* %241() #17
  %243 = icmp eq i8* %242, null
  br i1 %243, label %350, label %244

244:                                              ; preds = %232
  %245 = bitcast i64* %5 to i8*
  br label %246

246:                                              ; preds = %244, %340
  %247 = phi i8* [ %242, %244 ], [ %348, %340 ]
  %248 = phi i32 [ 0, %244 ], [ %341, %340 ]
  %249 = phi i32 [ 0, %244 ], [ %344, %340 ]
  %250 = phi i8* [ %222, %244 ], [ %342, %340 ]
  %251 = phi i8* [ null, %244 ], [ %343, %340 ]
  %252 = load %struct.src_location_stack*, %struct.src_location_stack** @_src_bottom, align 8
  %253 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %252, i64 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  %255 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %252, i64 0, i32 0, i32 1
  %256 = load i32, i32* %255, align 8
  %257 = icmp eq i8* %251, %254
  br i1 %257, label %303, label %258

258:                                              ; preds = %246
  %259 = icmp ne i8* %254, null
  %260 = zext i1 %259 to i32
  call void @nasm_free(i8* %250) #17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %245) #17
  store i64 -6148914691236517206, i64* %5, align 8
  %261 = icmp eq i8* %254, null
  br i1 %261, label %265, label %262

262:                                              ; preds = %258
  %263 = load i8, i8* %254, align 1
  %264 = icmp eq i8 %263, 0
  br i1 %264, label %265, label %267

265:                                              ; preds = %262, %258
  %266 = call noalias i8* @nasm_strdup(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i64 0, i64 0)) #17
  br label %301

267:                                              ; preds = %262
  %268 = icmp ult i8 %263, 33
  br i1 %268, label %298, label %269

269:                                              ; preds = %267
  %270 = zext i8 %263 to i64
  %271 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %270
  %272 = load i16, i16* %271, align 2
  %273 = and i16 %272, 4096
  %274 = icmp eq i16 %273, 0
  br i1 %274, label %275, label %298

275:                                              ; preds = %269, %281
  %276 = phi i8 [ %285, %281 ], [ %263, %269 ]
  %277 = phi i32 [ %283, %281 ], [ 32, %269 ]
  %278 = phi i8* [ %284, %281 ], [ %254, %269 ]
  %279 = zext i8 %276 to i32
  %280 = icmp ugt i32 %277, %279
  br i1 %280, label %298, label %281

281:                                              ; preds = %275
  %282 = icmp eq i8 %276, 32
  %283 = select i1 %282, i32 33, i32 32
  %284 = getelementptr inbounds i8, i8* %278, i64 1
  %285 = load i8, i8* %284, align 1
  %286 = icmp eq i8 %285, 0
  br i1 %286, label %287, label %275

287:                                              ; preds = %281
  %288 = load i8, i8* %278, align 1
  %289 = icmp ult i8 %288, 33
  br i1 %289, label %298, label %290

290:                                              ; preds = %287
  %291 = zext i8 %288 to i64
  %292 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %291
  %293 = load i16, i16* %292, align 2
  %294 = and i16 %293, 4096
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %296, label %298

296:                                              ; preds = %290
  %297 = call noalias i8* @nasm_strdup(i8* nonnull %254) #17
  br label %301

298:                                              ; preds = %275, %290, %287, %269, %267
  %299 = call i64 @strlen(i8* nonnull %254) #18
  store i64 %299, i64* %5, align 8
  %300 = call i8* @nasm_quote(i8* nonnull %254, i64* nonnull %5) #17
  br label %301

301:                                              ; preds = %298, %296, %265
  %302 = phi i8* [ %300, %298 ], [ %297, %296 ], [ %266, %265 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %245) #17
  br label %322

303:                                              ; preds = %246
  %304 = icmp eq i32 %248, 0
  br i1 %304, label %314, label %305

305:                                              ; preds = %303
  %306 = add nsw i32 %248, %249
  %307 = icmp eq i32 %306, %256
  br i1 %307, label %308, label %310

308:                                              ; preds = %305
  %309 = call i32 @fputc(i32 10, %struct._IO_FILE* %233)
  br label %318

310:                                              ; preds = %305
  %311 = sub nsw i32 %249, %248
  %312 = icmp eq i32 %311, %256
  %313 = select i1 %312, i32 0, i32 %248
  br label %318

314:                                              ; preds = %303
  %315 = add nsw i32 %249, 1
  %316 = icmp eq i32 %315, %256
  %317 = zext i1 %316 to i32
  br label %318

318:                                              ; preds = %314, %310, %308
  %319 = phi i32 [ %256, %308 ], [ %249, %310 ], [ %249, %314 ]
  %320 = phi i32 [ %248, %308 ], [ %313, %310 ], [ %317, %314 ]
  %321 = icmp eq i32 %319, -1
  br i1 %321, label %322, label %328

322:                                              ; preds = %301, %318
  %323 = phi i32 [ %260, %301 ], [ %320, %318 ]
  %324 = phi i8* [ %302, %301 ], [ %250, %318 ]
  %325 = phi i8* [ %254, %301 ], [ %251, %318 ]
  %326 = load i8, i8* %247, align 1
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %340, label %328

328:                                              ; preds = %322, %318
  %329 = phi i32 [ %323, %322 ], [ %320, %318 ]
  %330 = phi i32 [ -1, %322 ], [ %319, %318 ]
  %331 = phi i8* [ %324, %322 ], [ %250, %318 ]
  %332 = phi i8* [ %325, %322 ], [ %251, %318 ]
  %333 = icmp eq i32 %330, %256
  br i1 %333, label %336, label %334

334:                                              ; preds = %328
  %335 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %233, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i32 %256, i32 %329, i8* %331)
  br label %336

336:                                              ; preds = %328, %334
  %337 = add nsw i32 %329, %256
  %338 = call i32 @fputs(i8* nonnull %247, %struct._IO_FILE* %233)
  %339 = call i32 @fputc(i32 10, %struct._IO_FILE* %233)
  br label %340

340:                                              ; preds = %322, %336
  %341 = phi i32 [ %329, %336 ], [ %323, %322 ]
  %342 = phi i8* [ %331, %336 ], [ %324, %322 ]
  %343 = phi i8* [ %332, %336 ], [ %325, %322 ]
  %344 = phi i32 [ %337, %336 ], [ -1, %322 ]
  %345 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %346 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %345, i64 0, i32 2
  %347 = load i8* ()*, i8* ()** %346, align 8
  %348 = call i8* %347() #17
  %349 = icmp eq i8* %348, null
  br i1 %349, label %350, label %246

350:                                              ; preds = %340, %232
  %351 = phi i8* [ %222, %232 ], [ %342, %340 ]
  call void @nasm_free(i8* %351) #17
  %352 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %353 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %352, i64 0, i32 3
  %354 = load void ()*, void ()** %353, align 8
  call void %354() #17
  call void @reset_warnings() #17
  %355 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %356 = icmp eq %struct._IO_FILE* %355, null
  br i1 %356, label %368, label %357

357:                                              ; preds = %350
  %358 = call i32 @fclose(%struct._IO_FILE* nonnull %355)
  %359 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %360 = icmp eq %struct._IO_FILE* %359, null
  br i1 %360, label %368, label %361

361:                                              ; preds = %357
  %362 = load i1, i1* @terminate_after_phase, align 1
  br i1 %362, label %363, label %368

363:                                              ; preds = %361
  %364 = load i1, i1* @keep_all, align 1
  br i1 %364, label %368, label %365

365:                                              ; preds = %363
  %366 = load i8*, i8** @outname, align 8
  %367 = call i32 @remove(i8* %366) #17
  br label %368

368:                                              ; preds = %350, %357, %365, %363, %361
  store %struct._IO_FILE* null, %struct._IO_FILE** @ofile, align 8
  br label %369

369:                                              ; preds = %218, %368, %214
  %370 = load i32, i32* @operating_mode, align 4
  %371 = and i32 %370, 1
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %754, label %373

373:                                              ; preds = %369
  %374 = load i8*, i8** @outname, align 8
  %375 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %376 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %375, i64 0, i32 3
  %377 = load i32, i32* %376, align 8
  %378 = and i32 %377, 1
  %379 = call %struct._IO_FILE* @nasm_open_write(i8* %374, i32 %378) #17
  store %struct._IO_FILE* %379, %struct._IO_FILE** @ofile, align 8
  %380 = icmp eq %struct._IO_FILE* %379, null
  br i1 %380, label %381, label %383

381:                                              ; preds = %373
  %382 = load i8*, i8** @outname, align 8
  call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0), i8* %382) #19
  unreachable

383:                                              ; preds = %373
  %384 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %385 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %384, i64 0, i32 8
  %386 = load void ()*, void ()** %385, align 8
  call void %386() #17
  %387 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %388 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %387, i64 0, i32 2
  %389 = load void ()*, void ()** %388, align 8
  call void %389() #17
  %390 = load i8*, i8** @inname, align 8
  %391 = load %struct.strlist*, %struct.strlist** @depend_list, align 8
  %392 = bitcast %struct.insn* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %392) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %392, i8 -86, i64 432, i1 false) #17
  %393 = load i8*, i8** @listname, align 8
  %394 = icmp eq i8* %393, null
  br i1 %394, label %399, label %395

395:                                              ; preds = %383
  %396 = load i1, i1* @keep_all, align 1
  br i1 %396, label %399, label %397

397:                                              ; preds = %395
  %398 = call i32 @remove(i8* nonnull %393) #17
  br label %399

399:                                              ; preds = %397, %395, %383
  %400 = load i1, i1* @terminate_after_phase, align 1
  br i1 %400, label %716, label %401

401:                                              ; preds = %399
  %402 = getelementptr inbounds %struct.insn, %struct.insn* %4, i64 0, i32 10
  %403 = getelementptr inbounds %struct.insn, %struct.insn* %4, i64 0, i32 4
  %404 = getelementptr inbounds %struct.insn, %struct.insn* %4, i64 0, i32 9
  %405 = bitcast %struct.out_data* %3 to i8*
  %406 = getelementptr inbounds %struct.out_data, %struct.out_data* %3, i64 0, i32 0
  %407 = getelementptr inbounds %struct.out_data, %struct.out_data* %3, i64 0, i32 1
  %408 = bitcast i32* %407 to i8*
  %409 = getelementptr inbounds %struct.out_data, %struct.out_data* %3, i64 0, i32 7
  br label %410

410:                                              ; preds = %712, %401
  %411 = phi i64 [ 0, %401 ], [ %714, %712 ]
  %412 = phi i64 [ 9223372036854775807, %401 ], [ %713, %712 ]
  %413 = load i32, i32* @_pass_type, align 4
  %414 = icmp ugt i32 %413, 4
  br i1 %414, label %716, label %415

415:                                              ; preds = %410
  %416 = load i64, i64* @_passn, align 8
  %417 = add nsw i64 %416, 1
  store i64 %417, i64* @_passn, align 8
  switch i32 %413, label %421 [
    i32 0, label %423
    i32 3, label %418
  ]

418:                                              ; preds = %415
  %419 = load i64, i64* @global_offset_changed, align 8
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %421, label %425

421:                                              ; preds = %418, %415
  %422 = add nuw nsw i32 %413, 1
  br label %423

423:                                              ; preds = %415, %421
  %424 = phi i32 [ %422, %421 ], [ 2, %415 ]
  store i32 %424, i32* @_pass_type, align 4
  br label %425

425:                                              ; preds = %423, %418
  %426 = phi i32 [ 3, %418 ], [ %424, %423 ]
  store i64 0, i64* @global_offset_changed, align 8
  %427 = load %struct.strlist*, %struct.strlist** @warn_list, align 8
  %428 = icmp eq %struct.strlist* %427, null
  br i1 %428, label %438, label %429

429:                                              ; preds = %425
  %430 = getelementptr inbounds %struct.strlist, %struct.strlist* %427, i64 0, i32 3
  %431 = load i64, i64* %430, align 8
  %432 = icmp ne i64 %431, 0
  %433 = icmp ugt i32 %426, 4
  %434 = or i1 %433, %432
  br i1 %434, label %435, label %446

435:                                              ; preds = %429
  call void @strlist_free(%struct.strlist** nonnull @warn_list) #17
  %436 = load i32, i32* @_pass_type, align 4
  %437 = load %struct.strlist*, %struct.strlist** @warn_list, align 8
  br label %438

438:                                              ; preds = %435, %425
  %439 = phi %struct.strlist* [ null, %425 ], [ %437, %435 ]
  %440 = phi i32 [ %426, %425 ], [ %436, %435 ]
  %441 = icmp ugt i32 %440, 4
  %442 = icmp ne %struct.strlist* %439, null
  %443 = or i1 %442, %441
  br i1 %443, label %446, label %444

444:                                              ; preds = %438
  %445 = call noalias %struct.strlist* @strlist_alloc(i1 zeroext false) #17
  store %struct.strlist* %445, %struct.strlist** @warn_list, align 8
  br label %446

446:                                              ; preds = %444, %438, %429
  store i32 16, i32* @globalbits, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.iflag_t* @cpu to i8*), i8* align 4 bitcast (%struct.iflag_t* @cmd_cpu to i8*), i64 16, i1 false) #17
  %447 = load i8*, i8** @listname, align 8
  %448 = icmp eq i8* %447, null
  br i1 %448, label %472, label %449

449:                                              ; preds = %446
  %450 = load i32, i32* @_pass_type, align 4
  %451 = icmp ugt i32 %450, 4
  %452 = load i64, i64* @list_options, align 8
  %453 = trunc i64 %452 to i16
  %454 = icmp slt i16 %453, 0
  %455 = or i1 %451, %454
  br i1 %455, label %456, label %460

456:                                              ; preds = %449
  store i64 %452, i64* @active_list_options, align 8
  %457 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %458 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %457, i64 0, i32 0
  %459 = load void (i8*)*, void (i8*)** %458, align 8
  call void %459(i8* nonnull %447) #17
  br label %472

460:                                              ; preds = %449
  %461 = load i64, i64* @active_list_options, align 8
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %472, label %463

463:                                              ; preds = %460
  %464 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %465 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %464, i64 0, i32 1
  %466 = load void ()*, void ()** %465, align 8
  call void %466() #17
  %467 = load i1, i1* @keep_all, align 1
  br i1 %467, label %471, label %468

468:                                              ; preds = %463
  %469 = load i8*, i8** @listname, align 8
  %470 = call i32 @remove(i8* %469) #17
  br label %471

471:                                              ; preds = %468, %463
  store i64 0, i64* @active_list_options, align 8
  br label %472

472:                                              ; preds = %471, %460, %456, %446
  store i8 0, i8* @in_absolute, align 1
  %473 = load i32, i32* @_pass_type, align 4
  %474 = icmp ult i32 %473, 3
  br i1 %474, label %475, label %476

475:                                              ; preds = %472
  store i32 -1, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  store i64 0, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  br label %483

476:                                              ; preds = %472
  %477 = load %struct.SAA*, %struct.SAA** @forwrefs, align 8
  call void @saa_rewind(%struct.SAA* %477) #17
  %478 = load %struct.SAA*, %struct.SAA** @forwrefs, align 8
  %479 = call i8* @saa_rstruct(%struct.SAA* %478) #17
  store i8* %479, i8** bitcast (%struct.forwrefinfo** @forwref to i8**), align 8
  %480 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  call void @raa_free(%struct.RAA* %480) #17
  store %struct.RAA* null, %struct.RAA** @offsets, align 8
  %481 = load i32, i32* @_pass_type, align 4
  store i32 -1, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  store i64 0, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %482 = icmp ult i32 %481, 3
  br i1 %482, label %483, label %484

483:                                              ; preds = %476, %475
  store i32 1, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 2), align 4
  br label %484

484:                                              ; preds = %483, %476
  %485 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %486 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %485, i64 0, i32 9
  %487 = load void ()*, void ()** %486, align 8
  call void %487() #17
  %488 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %489 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %488, i64 0, i32 13
  %490 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %489, align 8
  %491 = call i32 %490(i8* null, i32* nonnull @globalbits) #17
  store i32 %491, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %492 = icmp eq i32 %491, -1
  br i1 %492, label %493, label %495

493:                                              ; preds = %484
  %494 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %499

495:                                              ; preds = %484
  %496 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  %497 = sext i32 %491 to i64
  %498 = call i64 @raa_read(%struct.RAA* %496, i64 %497) #17
  br label %499

499:                                              ; preds = %495, %493
  %500 = phi i64 [ %494, %493 ], [ %498, %495 ]
  %501 = phi i8 [ 1, %493 ], [ 0, %495 ]
  store i64 %500, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  store i8 %501, i8* @in_absolute, align 1
  %502 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %503 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %502, i64 0, i32 1
  %504 = load void (i8*, i32, %struct.strlist*)*, void (i8*, i32, %struct.strlist*)** %503, align 8
  %505 = load i32, i32* @_pass_type, align 4
  %506 = icmp ugt i32 %505, 4
  %507 = select i1 %506, %struct.strlist* %391, %struct.strlist* null
  call void %504(i8* %390, i32 0, %struct.strlist* %507) #17
  store i64 0, i64* @globallineno, align 8
  %508 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %509 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %508, i64 0, i32 2
  %510 = load i8* ()*, i8* ()** %509, align 8
  %511 = call i8* %510() #17
  %512 = icmp eq i8* %511, null
  br i1 %512, label %686, label %513

513:                                              ; preds = %499, %680
  %514 = phi i8* [ %684, %680 ], [ %511, %499 ]
  %515 = load i64, i64* @globallineno, align 8
  %516 = add nsw i64 %515, 1
  store i64 %516, i64* @globallineno, align 8
  %517 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 7), align 8
  %518 = icmp slt i64 %515, %517
  br i1 %518, label %520, label %519

519:                                              ; preds = %513
  call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.124, i64 0, i64 0), i64 %517) #19
  unreachable

520:                                              ; preds = %513
  %521 = call zeroext i1 @process_directives(i8* nonnull %514) #17
  br i1 %521, label %680, label %522

522:                                              ; preds = %520
  %523 = call %struct.insn* @parse_line(i8* nonnull %514, %struct.insn* nonnull %4) #17
  store i8 0, i8* %402, align 8
  %524 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %582, label %526

526:                                              ; preds = %522
  %527 = load %struct.forwrefinfo*, %struct.forwrefinfo** @forwref, align 8
  %528 = icmp eq %struct.forwrefinfo* %527, null
  br i1 %528, label %582, label %529

529:                                              ; preds = %526
  %530 = getelementptr inbounds %struct.forwrefinfo, %struct.forwrefinfo* %527, i64 0, i32 0
  %531 = load i32, i32* %530, align 4
  %532 = sext i32 %531 to i64
  %533 = load i64, i64* @globallineno, align 8
  %534 = icmp eq i64 %533, %532
  br i1 %534, label %535, label %582

535:                                              ; preds = %529
  store i8 1, i8* %402, align 8
  br label %536

536:                                              ; preds = %547, %535
  %537 = phi %struct.forwrefinfo* [ %548, %547 ], [ %527, %535 ]
  %538 = getelementptr inbounds %struct.forwrefinfo, %struct.forwrefinfo* %537, i64 0, i32 1
  %539 = load i32, i32* %538, align 4
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds %struct.insn, %struct.insn* %4, i64 0, i32 6, i64 %540, i32 11
  %542 = load i32, i32* %541, align 8
  %543 = or i32 %542, 1
  store i32 %543, i32* %541, align 8
  %544 = load %struct.SAA*, %struct.SAA** @forwrefs, align 8
  %545 = call i8* @saa_rstruct(%struct.SAA* %544) #17
  store i8* %545, i8** bitcast (%struct.forwrefinfo** @forwref to i8**), align 8
  %546 = icmp eq i8* %545, null
  br i1 %546, label %554, label %547

547:                                              ; preds = %536
  %548 = bitcast i8* %545 to %struct.forwrefinfo*
  %549 = bitcast i8* %545 to i32*
  %550 = load i32, i32* %549, align 4
  %551 = sext i32 %550 to i64
  %552 = load i64, i64* @globallineno, align 8
  %553 = icmp eq i64 %552, %551
  br i1 %553, label %536, label %554

554:                                              ; preds = %547, %536
  %555 = load i32, i32* @_pass_type, align 4
  %556 = icmp ult i32 %555, 3
  br i1 %556, label %557, label %582

557:                                              ; preds = %554
  %558 = load i32, i32* %403, align 4
  %559 = icmp sgt i32 %558, 0
  br i1 %559, label %560, label %582

560:                                              ; preds = %557, %577
  %561 = phi i32 [ %578, %577 ], [ %558, %557 ]
  %562 = phi i64 [ %579, %577 ], [ 0, %557 ]
  %563 = getelementptr inbounds %struct.insn, %struct.insn* %4, i64 0, i32 6, i64 %562, i32 11
  %564 = load i32, i32* %563, align 8
  %565 = and i32 %564, 1
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %577, label %567

567:                                              ; preds = %560
  %568 = load %struct.SAA*, %struct.SAA** @forwrefs, align 8
  %569 = call i8* @saa_wstruct(%struct.SAA* %568) #17
  %570 = load i64, i64* @globallineno, align 8
  %571 = trunc i64 %570 to i32
  %572 = bitcast i8* %569 to i32*
  store i32 %571, i32* %572, align 4
  %573 = getelementptr inbounds i8, i8* %569, i64 4
  %574 = bitcast i8* %573 to i32*
  %575 = trunc i64 %562 to i32
  store i32 %575, i32* %574, align 4
  %576 = load i32, i32* %403, align 4
  br label %577

577:                                              ; preds = %567, %560
  %578 = phi i32 [ %561, %560 ], [ %576, %567 ]
  %579 = add nuw nsw i64 %562, 1
  %580 = sext i32 %578 to i64
  %581 = icmp slt i64 %579, %580
  br i1 %581, label %560, label %582

582:                                              ; preds = %577, %557, %554, %529, %526, %522
  %583 = load i32, i32* %404, align 4
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %679, label %585

585:                                              ; preds = %582
  %586 = icmp slt i32 %583, 1
  br i1 %586, label %587, label %588, !prof !4

587:                                              ; preds = %585
  call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1588, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.131, i64 0, i64 0)) #19
  unreachable

588:                                              ; preds = %585
  %589 = load i32, i32* @_pass_type, align 4
  %590 = icmp ugt i32 %589, 4
  br i1 %590, label %626, label %591

591:                                              ; preds = %588
  %592 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  br label %593

593:                                              ; preds = %613, %591
  %594 = phi i64 [ %615, %613 ], [ %592, %591 ]
  %595 = phi i32 [ %614, %613 ], [ 1, %591 ]
  %596 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %597 = load i32, i32* @globalbits, align 4
  %598 = call i64 @insn_size(i32 %596, i64 %594, i32 %597, %struct.insn* nonnull %4) #17
  switch i64 %598, label %599 [
    i64 -1, label %610
    i64 0, label %610
  ], !prof !5

599:                                              ; preds = %593
  %600 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %601 = add nsw i64 %600, %598
  store i64 %601, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %602 = load i8, i8* @in_absolute, align 1, !range !2
  %603 = icmp eq i8 %602, 0
  br i1 %603, label %605, label %604

604:                                              ; preds = %599
  store i64 %601, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %610

605:                                              ; preds = %599
  %606 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  %607 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %608 = sext i32 %607 to i64
  %609 = call %struct.RAA* @raa_write(%struct.RAA* %606, i64 %608, i64 %601) #17
  store %struct.RAA* %609, %struct.RAA** @offsets, align 8
  br label %610

610:                                              ; preds = %605, %604, %593, %593
  %611 = load i32, i32* %404, align 4
  %612 = icmp slt i32 %595, %611
  br i1 %612, label %613, label %616

613:                                              ; preds = %610
  %614 = add nuw nsw i32 %595, 1
  %615 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  br label %593

616:                                              ; preds = %610
  %617 = load i64, i64* @active_list_options, align 8
  %618 = trunc i64 %617 to i16
  %619 = icmp slt i16 %618, 0
  br i1 %619, label %620, label %679

620:                                              ; preds = %616
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %405) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %408, i8 0, i64 88, i1 false) #17
  store i64 %592, i64* %406, align 8
  %621 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %622 = sub nsw i64 %621, %592
  store i64 %622, i64* %409, align 8
  %623 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %624 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %623, i64 0, i32 2
  %625 = load void (%struct.out_data*)*, void (%struct.out_data*)** %624, align 8
  call void %625(%struct.out_data* nonnull %3) #17
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %405) #17
  br label %679

626:                                              ; preds = %588
  %627 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %628 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %629 = load i32, i32* @globalbits, align 4
  %630 = call i64 @assemble(i32 %627, i64 %628, i32 %629, %struct.insn* nonnull %4) #17
  %631 = icmp eq i64 %630, 0
  br i1 %631, label %643, label %632, !prof !4

632:                                              ; preds = %626
  %633 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %634 = add nsw i64 %633, %630
  store i64 %634, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %635 = load i8, i8* @in_absolute, align 1, !range !2
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %638, label %637

637:                                              ; preds = %632
  store i64 %634, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %643

638:                                              ; preds = %632
  %639 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  %640 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %641 = sext i32 %640 to i64
  %642 = call %struct.RAA* @raa_write(%struct.RAA* %639, i64 %641, i64 %634) #17
  store %struct.RAA* %642, %struct.RAA** @offsets, align 8
  br label %643

643:                                              ; preds = %638, %637, %626
  %644 = load i32, i32* %404, align 4
  %645 = icmp sgt i32 %644, 1
  br i1 %645, label %646, label %679

646:                                              ; preds = %643
  %647 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %648 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %647, i64 0, i32 4
  %649 = load void (i32, i64)*, void (i32, i64)** %648, align 8
  %650 = sext i32 %644 to i64
  call void %649(i32 4, i64 %650) #17
  %651 = load i32, i32* %404, align 4
  %652 = icmp slt i32 %651, 2
  br i1 %652, label %675, label %653

653:                                              ; preds = %646, %671
  %654 = phi i32 [ %672, %671 ], [ 2, %646 ]
  %655 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %656 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %657 = load i32, i32* @globalbits, align 4
  %658 = call i64 @assemble(i32 %655, i64 %656, i32 %657, %struct.insn* nonnull %4) #17
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %671, label %660, !prof !4

660:                                              ; preds = %653
  %661 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %662 = add nsw i64 %661, %658
  store i64 %662, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  %663 = load i8, i8* @in_absolute, align 1, !range !2
  %664 = icmp eq i8 %663, 0
  br i1 %664, label %666, label %665

665:                                              ; preds = %660
  store i64 %662, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %671

666:                                              ; preds = %660
  %667 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  %668 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %669 = sext i32 %668 to i64
  %670 = call %struct.RAA* @raa_write(%struct.RAA* %667, i64 %669, i64 %662) #17
  store %struct.RAA* %670, %struct.RAA** @offsets, align 8
  br label %671

671:                                              ; preds = %666, %665, %653
  %672 = add nuw nsw i32 %654, 1
  %673 = load i32, i32* %404, align 4
  %674 = icmp slt i32 %654, %673
  br i1 %674, label %653, label %675

675:                                              ; preds = %671, %646
  %676 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %677 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %676, i64 0, i32 5
  %678 = load void (i32)*, void (i32)** %677, align 8
  call void %678(i32 4) #17
  br label %679

679:                                              ; preds = %675, %643, %620, %616, %582
  call void @cleanup_insn(%struct.insn* nonnull %4) #17
  br label %680

680:                                              ; preds = %679, %520
  call void @nasm_free(i8* nonnull %514) #17
  %681 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %682 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %681, i64 0, i32 2
  %683 = load i8* ()*, i8* ()** %682, align 8
  %684 = call i8* %683() #17
  %685 = icmp eq i8* %684, null
  br i1 %685, label %686, label %513

686:                                              ; preds = %680, %499
  %687 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %688 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %687, i64 0, i32 3
  %689 = load void ()*, void ()** %688, align 8
  call void %689() #17
  %690 = load %struct.nasm_errhold*, %struct.nasm_errhold** @errhold_stack, align 8
  %691 = icmp eq %struct.nasm_errhold* %690, null
  br i1 %691, label %693, label %692, !prof !6

692:                                              ; preds = %686
  call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1748, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.125, i64 0, i64 0)) #19
  unreachable

693:                                              ; preds = %686
  %694 = load i64, i64* @global_offset_changed, align 8
  %695 = icmp eq i64 %694, 0
  br i1 %695, label %712, label %696

696:                                              ; preds = %693
  %697 = load i32, i32* @_pass_type, align 4
  switch i32 %697, label %712 [
    i32 3, label %698
    i32 4, label %710
    i32 5, label %711
  ]

698:                                              ; preds = %696
  %699 = icmp ult i64 %694, %412
  %700 = add nsw i64 %411, 1
  %701 = select i1 %699, i64 %694, i64 %412
  %702 = select i1 %699, i64 0, i64 %700
  %703 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 1), align 8
  %704 = icmp sle i64 %702, %703
  %705 = load i64, i64* @_passn, align 8
  %706 = load i64, i64* getelementptr inbounds ([8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 0), align 16
  %707 = icmp slt i64 %705, %706
  %708 = and i1 %704, %707
  br i1 %708, label %712, label %709

709:                                              ; preds = %698
  call void (i32, i8*, ...) @nasm_nonfatalf(i32 8, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.126, i64 0, i64 0), i64 %705, i64 %702) #17
  call void (i32, i8*, ...) @nasm_nonfatalf(i32 8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.127, i64 0, i64 0)) #17
  br label %712

710:                                              ; preds = %696
  call void (i32, i8*, ...) @nasm_warn(i32 1441800, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.128, i64 0, i64 0)) #17
  br label %712

711:                                              ; preds = %696
  call void (i32, i8*, ...) @nasm_nonfatalf(i32 8, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.129, i64 0, i64 0)) #17
  br label %712

712:                                              ; preds = %711, %710, %709, %698, %696, %693
  %713 = phi i64 [ %412, %696 ], [ %412, %711 ], [ %412, %710 ], [ %701, %709 ], [ %412, %693 ], [ %701, %698 ]
  %714 = phi i64 [ %411, %696 ], [ %411, %711 ], [ %411, %710 ], [ %702, %709 ], [ %411, %693 ], [ %702, %698 ]
  call void @reset_warnings() #17
  %715 = load i1, i1* @terminate_after_phase, align 1
  br i1 %715, label %716, label %410

716:                                              ; preds = %712, %410, %399
  %717 = load i1, i1* @opt_verbose_info, align 1
  %718 = load i32, i32* @_pass_type, align 4
  %719 = icmp ugt i32 %718, 4
  %720 = and i1 %717, %719
  br i1 %720, label %721, label %724

721:                                              ; preds = %716
  %722 = load i64, i64* @_passn, align 8
  %723 = add nsw i64 %722, -3
  call void (i8*, ...) @nasm_info(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.130, i64 0, i64 0), i64 %723) #17
  br label %724

724:                                              ; preds = %716, %721
  %725 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %726 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %725, i64 0, i32 1
  %727 = load void ()*, void ()** %726, align 8
  call void %727() #17
  call void @strlist_free(%struct.strlist** nonnull @warn_list) #17
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %392) #17
  %728 = load i1, i1* @terminate_after_phase, align 1
  br i1 %728, label %740, label %729

729:                                              ; preds = %724
  %730 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %731 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %730, i64 0, i32 18
  %732 = load void ()*, void ()** %731, align 8
  call void %732() #17
  call void @cleanup_labels() #17
  %733 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %734 = call i32 @fflush(%struct._IO_FILE* %733)
  %735 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %736 = call i32 @ferror(%struct._IO_FILE* %735) #17
  %737 = icmp eq i32 %736, 0
  br i1 %737, label %742, label %738

738:                                              ; preds = %729
  %739 = load i8*, i8** @outname, align 8
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.17, i64 0, i64 0), i8* %739) #17
  br label %740

740:                                              ; preds = %724, %738
  %741 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  br label %742

742:                                              ; preds = %740, %729
  %743 = phi %struct._IO_FILE* [ %741, %740 ], [ %735, %729 ]
  %744 = icmp eq %struct._IO_FILE* %743, null
  br i1 %744, label %754, label %745

745:                                              ; preds = %742
  %746 = call i32 @fclose(%struct._IO_FILE* nonnull %743)
  %747 = load i1, i1* @terminate_after_phase, align 1
  br i1 %747, label %748, label %753

748:                                              ; preds = %745
  %749 = load i1, i1* @keep_all, align 1
  br i1 %749, label %753, label %750

750:                                              ; preds = %748
  %751 = load i8*, i8** @outname, align 8
  %752 = call i32 @remove(i8* %751) #17
  br label %753

753:                                              ; preds = %750, %748, %745
  store %struct._IO_FILE* null, %struct._IO_FILE** @ofile, align 8
  br label %754

754:                                              ; preds = %742, %369, %753
  %755 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %756 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %755, i64 0, i32 4
  %757 = load void ()*, void ()** %756, align 8
  call void %757() #17
  %758 = load %struct.strlist*, %struct.strlist** @depend_list, align 8
  %759 = icmp eq %struct.strlist* %758, null
  br i1 %759, label %831, label %760

760:                                              ; preds = %754
  %761 = load i1, i1* @terminate_after_phase, align 1
  br i1 %761, label %831, label %762

762:                                              ; preds = %760
  %763 = bitcast %struct.strlist** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %763)
  store %struct.strlist* %758, %struct.strlist** %7, align 8
  %764 = load i8* (i8*)*, i8* (i8*)** @quote_for_make, align 8
  %765 = icmp eq i8* (i8*)* %764, @quote_for_wmake
  %766 = select i1 %765, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i64 0, i64 0)
  %767 = select i1 %765, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0)
  %768 = load i8*, i8** @depend_file, align 8
  %769 = icmp eq i8* %768, null
  br i1 %769, label %778, label %770

770:                                              ; preds = %762
  %771 = call i32 @strcmp(i8* nonnull %768, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #18
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %778, label %773

773:                                              ; preds = %770
  %774 = call %struct._IO_FILE* @nasm_open_write(i8* nonnull %768, i32 1) #17
  %775 = icmp eq %struct._IO_FILE* %774, null
  br i1 %775, label %776, label %780

776:                                              ; preds = %773
  %777 = load i8*, i8** @depend_file, align 8
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.53, i64 0, i64 0), i8* %777) #17
  br label %830

778:                                              ; preds = %770, %762
  %779 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  br label %780

780:                                              ; preds = %778, %773
  %781 = phi %struct._IO_FILE* [ %774, %773 ], [ %779, %778 ]
  %782 = load i8*, i8** @depend_target, align 8
  %783 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %781, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i64 0, i64 0), i8* %782) #17
  %784 = getelementptr inbounds %struct.strlist, %struct.strlist* %758, i64 0, i32 1
  %785 = load %struct.strlist_entry*, %struct.strlist_entry** %784, align 8
  %786 = icmp eq %struct.strlist_entry* %785, null
  br i1 %786, label %809, label %787

787:                                              ; preds = %780, %801
  %788 = phi %struct.strlist_entry* [ %807, %801 ], [ %785, %780 ]
  %789 = phi i32 [ %805, %801 ], [ %783, %780 ]
  %790 = load i8* (i8*)*, i8* (i8*)** @quote_for_make, align 8
  %791 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %788, i64 0, i32 4, i64 0
  %792 = call i8* %790(i8* %791) #17, !callees !3
  %793 = call i64 @strlen(i8* %792) #18
  %794 = trunc i64 %793 to i32
  %795 = add nsw i32 %789, %794
  %796 = icmp sgt i32 %795, 62
  %797 = icmp sgt i32 %789, 1
  %798 = and i1 %797, %796
  br i1 %798, label %799, label %801

799:                                              ; preds = %787
  %800 = call i64 @fwrite(i8* %766, i64 4, i64 1, %struct._IO_FILE* %781) #17
  br label %801

801:                                              ; preds = %799, %787
  %802 = phi i32 [ 1, %799 ], [ %789, %787 ]
  %803 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %781, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i64 0, i64 0), i8* %792) #17
  %804 = add nsw i32 %794, 1
  %805 = add nsw i32 %804, %802
  call void @nasm_free(i8* %792) #17
  %806 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %788, i64 0, i32 0
  %807 = load %struct.strlist_entry*, %struct.strlist_entry** %806, align 8
  %808 = icmp eq %struct.strlist_entry* %807, null
  br i1 %808, label %809, label %787

809:                                              ; preds = %801, %780
  %810 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %781) #17
  %811 = load %struct.strlist_entry*, %struct.strlist_entry** %784, align 8
  %812 = icmp eq %struct.strlist_entry* %811, null
  br i1 %812, label %825, label %813

813:                                              ; preds = %809, %821
  %814 = phi %struct.strlist_entry* [ %823, %821 ], [ %811, %809 ]
  %815 = load i1, i1* @depend_emit_phony, align 1
  br i1 %815, label %816, label %821

816:                                              ; preds = %813
  %817 = load i8* (i8*)*, i8* (i8*)** @quote_for_make, align 8
  %818 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %814, i64 0, i32 4, i64 0
  %819 = call i8* %817(i8* %818) #17, !callees !3
  %820 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %781, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.57, i64 0, i64 0), i8* %819, i8* %767) #17
  call void @nasm_free(i8* %819) #17
  br label %821

821:                                              ; preds = %816, %813
  %822 = getelementptr inbounds %struct.strlist_entry, %struct.strlist_entry* %814, i64 0, i32 0
  %823 = load %struct.strlist_entry*, %struct.strlist_entry** %822, align 8
  %824 = icmp eq %struct.strlist_entry* %823, null
  br i1 %824, label %825, label %813

825:                                              ; preds = %821, %809
  call void @strlist_free(%struct.strlist** nonnull %7) #17
  %826 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %827 = icmp eq %struct._IO_FILE* %781, %826
  br i1 %827, label %830, label %828

828:                                              ; preds = %825
  %829 = call i32 @fclose(%struct._IO_FILE* %781) #17
  br label %830

830:                                              ; preds = %776, %825, %828
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %763)
  br label %831

831:                                              ; preds = %760, %830, %754
  %832 = load %struct.RAA*, %struct.RAA** @offsets, align 8
  call void @raa_free(%struct.RAA* %832) #17
  %833 = load %struct.SAA*, %struct.SAA** @forwrefs, align 8
  call void @saa_free(%struct.SAA* %833) #17
  call void @eval_cleanup() #17
  call void @stdscan_cleanup() #17
  call void @src_free() #17
  call void @strlist_free(%struct.strlist** nonnull @include_path) #17
  %834 = load i1, i1* @terminate_after_phase, align 1
  %835 = zext i1 %834 to i32
  br label %836

836:                                              ; preds = %135, %27, %831
  %837 = phi i32 [ %835, %831 ], [ 1, %27 ], [ 1, %135 ]
  ret i32 %837
}

declare noalias %struct.strlist* @strlist_alloc(i1 zeroext) local_unnamed_addr #3

declare void @nasm_ctype_init() local_unnamed_addr #3

declare void @src_init() local_unnamed_addr #3

declare i32 @init_labels() local_unnamed_addr #3

declare %struct.SAA* @saa_init(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @parse_cmdline(i32, i8** nocapture readonly, i32) unnamed_addr #0 {
  %4 = alloca [2048 x i8], align 16
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 getelementptr inbounds ([35 x i8], [35 x i8]* @warning_state, i64 0, i64 0), i8* align 16 getelementptr inbounds ([35 x i8], [35 x i8]* @warning_default, i64 0, i64 0), i64 35, i1 false)
  %5 = tail call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i64 0, i64 0)) #17
  %6 = icmp eq i8* %5, null
  br i1 %6, label %55, label %7

7:                                                ; preds = %3
  %8 = tail call noalias i8* @nasm_strdup(i8* nonnull %5) #17
  %9 = load i8, i8* %8, align 1
  switch i8 %9, label %10 [
    i8 0, label %14
    i8 45, label %14
  ]

10:                                               ; preds = %7
  %11 = getelementptr inbounds i8, i8* %8, i64 1
  %12 = sext i8 %9 to i32
  %13 = load i8, i8* %11, align 1
  br label %14

14:                                               ; preds = %10, %7, %7
  %15 = phi i8 [ %13, %10 ], [ %9, %7 ], [ %9, %7 ]
  %16 = phi i8* [ %11, %10 ], [ %8, %7 ], [ %8, %7 ]
  %17 = phi i32 [ %12, %10 ], [ 32, %7 ], [ 32, %7 ]
  %18 = icmp eq i8 %15, 0
  br i1 %18, label %54, label %19

19:                                               ; preds = %14, %44
  %20 = phi i8 [ %48, %44 ], [ %15, %14 ]
  %21 = phi i8* [ %47, %44 ], [ null, %14 ]
  %22 = phi i8* [ %45, %44 ], [ %16, %14 ]
  %23 = icmp eq i8 %20, 0
  %24 = sext i8 %20 to i32
  %25 = icmp eq i32 %17, %24
  %26 = or i1 %23, %25
  br i1 %26, label %35, label %27

27:                                               ; preds = %19, %27
  %28 = phi i8* [ %29, %27 ], [ %22, %19 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 0
  %32 = sext i8 %30 to i32
  %33 = icmp eq i32 %17, %32
  %34 = or i1 %31, %33
  br i1 %34, label %35, label %27

35:                                               ; preds = %27, %19
  %36 = phi i8* [ %22, %19 ], [ %29, %27 ]
  %37 = phi i1 [ %25, %19 ], [ %33, %27 ]
  br i1 %37, label %38, label %44

38:                                               ; preds = %35, %38
  %39 = phi i8* [ %40, %38 ], [ %36, %35 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 0, i8* %39, align 1
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %17, %42
  br i1 %43, label %38, label %44

44:                                               ; preds = %38, %35
  %45 = phi i8* [ %36, %35 ], [ %40, %38 ]
  %46 = tail call fastcc zeroext i1 @process_arg(i8* %21, i8* %22, i32 %2) #17
  %47 = select i1 %46, i8* null, i8* %22
  %48 = load i8, i8* %45, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %19

50:                                               ; preds = %44
  %51 = icmp eq i8* %47, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %50
  %53 = tail call fastcc zeroext i1 @process_arg(i8* nonnull %47, i8* null, i32 %2) #17
  br label %54

54:                                               ; preds = %14, %50, %52
  tail call void @nasm_free(i8* %8) #17
  br label %55

55:                                               ; preds = %3, %54
  %56 = add nsw i32 %0, -1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %281, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 0
  %60 = getelementptr inbounds [2048 x i8], [2048 x i8]* %4, i64 0, i64 1
  br label %61

61:                                               ; preds = %58, %273
  %62 = phi i32 [ %56, %58 ], [ %279, %273 ]
  %63 = phi i32 [ %0, %58 ], [ %278, %273 ]
  %64 = phi i8** [ %1, %58 ], [ %277, %273 ]
  %65 = getelementptr inbounds i8*, i8** %64, i64 1
  %66 = load i8*, i8** %65, align 8
  %67 = load i8, i8* %66, align 1
  %68 = icmp eq i8 %67, 64
  br i1 %68, label %69, label %129

69:                                               ; preds = %61
  %70 = getelementptr inbounds i8, i8* %66, i64 1
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %59) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %59, i8 -86, i64 2048, i1 false) #17
  %71 = call %struct._IO_FILE* @nasm_open_read(i8* %70, i32 1) #17
  %72 = icmp eq %struct._IO_FILE* %71, null
  br i1 %72, label %76, label %73

73:                                               ; preds = %69
  %74 = call i8* @fgets(i8* nonnull %59, i32 2048, %struct._IO_FILE* nonnull %71) #17
  %75 = icmp eq i8* %74, null
  br i1 %75, label %125, label %77

76:                                               ; preds = %69
  call void @perror(i8* %70) #20
  call void @exit(i32 -1) #21
  unreachable

77:                                               ; preds = %73, %122
  %78 = load i8, i8* %59, align 16
  switch i8 %78, label %79 [
    i8 0, label %82
    i8 45, label %82
  ]

79:                                               ; preds = %77
  %80 = sext i8 %78 to i32
  %81 = load i8, i8* %60, align 1
  br label %82

82:                                               ; preds = %79, %77, %77
  %83 = phi i8 [ %81, %79 ], [ %78, %77 ], [ %78, %77 ]
  %84 = phi i8* [ %60, %79 ], [ %59, %77 ], [ %59, %77 ]
  %85 = phi i32 [ %80, %79 ], [ 32, %77 ], [ 32, %77 ]
  %86 = icmp eq i8 %83, 0
  br i1 %86, label %122, label %87

87:                                               ; preds = %82, %112
  %88 = phi i8 [ %116, %112 ], [ %83, %82 ]
  %89 = phi i8* [ %115, %112 ], [ null, %82 ]
  %90 = phi i8* [ %113, %112 ], [ %84, %82 ]
  %91 = icmp eq i8 %88, 0
  %92 = sext i8 %88 to i32
  %93 = icmp eq i32 %85, %92
  %94 = or i1 %91, %93
  br i1 %94, label %103, label %95

95:                                               ; preds = %87, %95
  %96 = phi i8* [ %97, %95 ], [ %90, %87 ]
  %97 = getelementptr inbounds i8, i8* %96, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 0
  %100 = sext i8 %98 to i32
  %101 = icmp eq i32 %85, %100
  %102 = or i1 %99, %101
  br i1 %102, label %103, label %95

103:                                              ; preds = %95, %87
  %104 = phi i8* [ %90, %87 ], [ %97, %95 ]
  %105 = phi i1 [ %93, %87 ], [ %101, %95 ]
  br i1 %105, label %106, label %112

106:                                              ; preds = %103, %106
  %107 = phi i8* [ %108, %106 ], [ %104, %103 ]
  %108 = getelementptr inbounds i8, i8* %107, i64 1
  store i8 0, i8* %107, align 1
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = icmp eq i32 %85, %110
  br i1 %111, label %106, label %112

112:                                              ; preds = %106, %103
  %113 = phi i8* [ %104, %103 ], [ %108, %106 ]
  %114 = call fastcc zeroext i1 @process_arg(i8* %89, i8* %90, i32 %2) #17
  %115 = select i1 %114, i8* null, i8* %90
  %116 = load i8, i8* %113, align 1
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %87

118:                                              ; preds = %112
  %119 = icmp eq i8* %115, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = call fastcc zeroext i1 @process_arg(i8* nonnull %115, i8* null, i32 %2) #17
  br label %122

122:                                              ; preds = %120, %118, %82
  %123 = call i8* @fgets(i8* nonnull %59, i32 2048, %struct._IO_FILE* nonnull %71) #17
  %124 = icmp eq i8* %123, null
  br i1 %124, label %125, label %77

125:                                              ; preds = %122, %73
  %126 = call i32 @fclose(%struct._IO_FILE* nonnull %71) #17
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %59) #17
  %127 = add nsw i32 %63, -2
  %128 = getelementptr inbounds i8*, i8** %64, i64 2
  br label %129

129:                                              ; preds = %125, %61
  %130 = phi i8** [ %128, %125 ], [ %65, %61 ]
  %131 = phi i32 [ %127, %125 ], [ %62, %61 ]
  %132 = load i1, i1* @stopoptions, align 1
  %133 = load i8*, i8** %130, align 8
  br i1 %132, label %264, label %134

134:                                              ; preds = %129
  %135 = load i8, i8* %133, align 1
  %136 = icmp eq i8 %135, 45
  br i1 %136, label %137, label %264

137:                                              ; preds = %134
  %138 = getelementptr inbounds i8, i8* %133, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = icmp eq i8 %139, 64
  br i1 %140, label %141, label %264

141:                                              ; preds = %137
  %142 = icmp sgt i32 %131, 1
  br i1 %142, label %143, label %146

143:                                              ; preds = %141
  %144 = getelementptr inbounds i8*, i8** %130, i64 1
  %145 = load i8*, i8** %144, align 8
  br label %146

146:                                              ; preds = %141, %143
  %147 = phi i8* [ %145, %143 ], [ null, %141 ]
  %148 = getelementptr inbounds i8, i8* %133, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %151, label %157

151:                                              ; preds = %146
  %152 = icmp eq i8* %147, null
  br i1 %152, label %156, label %153

153:                                              ; preds = %151
  %154 = load i8, i8* %147, align 1
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %160

156:                                              ; preds = %151, %153
  call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.63, i64 0, i64 0), i32 64) #17
  br label %273

157:                                              ; preds = %146
  %158 = call i8* @nasm_skip_spaces(i8* %148) #17
  %159 = icmp eq i8* %158, null
  br i1 %159, label %273, label %160

160:                                              ; preds = %153, %157
  %161 = phi i8* [ %158, %157 ], [ %147, %153 ]
  %162 = phi i8 [ 0, %157 ], [ 1, %153 ]
  %163 = call %struct._IO_FILE* @nasm_open_read(i8* nonnull %161, i32 1) #17
  %164 = icmp eq %struct._IO_FILE* %163, null
  br i1 %164, label %263, label %165

165:                                              ; preds = %160
  %166 = call noalias i8* @nasm_malloc(i64 128) #22
  %167 = call noalias i8* @nasm_malloc(i64 128) #22
  store i8 0, i8* %167, align 1
  %168 = call i8* @fgets(i8* %166, i32 128, %struct._IO_FILE* nonnull %163) #17
  %169 = icmp eq i8* %168, null
  br i1 %169, label %215, label %170

170:                                              ; preds = %165, %254
  %171 = phi i8* [ %224, %254 ], [ %166, %165 ]
  %172 = phi i32 [ %257, %254 ], [ 128, %165 ]
  %173 = phi i32 [ %223, %254 ], [ 128, %165 ]
  %174 = phi i8* [ %256, %254 ], [ %167, %165 ]
  %175 = ptrtoint i8* %171 to i64
  br label %176

176:                                              ; preds = %202, %170
  %177 = phi i64 [ %207, %202 ], [ %175, %170 ]
  %178 = phi i8* [ %206, %202 ], [ %171, %170 ]
  %179 = phi i32 [ %205, %202 ], [ %173, %170 ]
  %180 = phi i8* [ %204, %202 ], [ %171, %170 ]
  %181 = call i64 @strlen(i8* %180) #18
  %182 = getelementptr inbounds i8, i8* %180, i64 %181
  %183 = icmp ugt i8* %182, %178
  br i1 %183, label %184, label %188

184:                                              ; preds = %176
  %185 = getelementptr inbounds i8, i8* %182, i64 -1
  %186 = load i8, i8* %185, align 1
  %187 = icmp eq i8 %186, 10
  br i1 %187, label %222, label %188

188:                                              ; preds = %184, %176
  %189 = ptrtoint i8* %182 to i64
  %190 = sub i64 %189, %177
  %191 = add nsw i32 %179, -10
  %192 = sext i32 %191 to i64
  %193 = icmp sgt i64 %190, %192
  br i1 %193, label %194, label %202

194:                                              ; preds = %188
  %195 = add nsw i32 %179, 128
  %196 = sext i32 %195 to i64
  %197 = call i8* @nasm_realloc(i8* %178, i64 %196) #23
  %198 = shl i64 %190, 32
  %199 = ashr exact i64 %198, 32
  %200 = getelementptr inbounds i8, i8* %197, i64 %199
  %201 = ptrtoint i8* %200 to i64
  br label %202

202:                                              ; preds = %194, %188
  %203 = phi i64 [ %201, %194 ], [ %189, %188 ]
  %204 = phi i8* [ %200, %194 ], [ %182, %188 ]
  %205 = phi i32 [ %195, %194 ], [ %179, %188 ]
  %206 = phi i8* [ %197, %194 ], [ %178, %188 ]
  %207 = ptrtoint i8* %206 to i64
  %208 = sub i64 %207, %203
  %209 = trunc i64 %208 to i32
  %210 = add i32 %205, %209
  %211 = call i8* @fgets(i8* %204, i32 %210, %struct._IO_FILE* nonnull %163) #17
  %212 = icmp eq i8* %211, null
  br i1 %212, label %213, label %176

213:                                              ; preds = %202
  %214 = icmp eq i8* %204, %206
  br i1 %214, label %215, label %222

215:                                              ; preds = %254, %213, %165
  %216 = phi i8* [ %167, %165 ], [ %174, %213 ], [ %256, %254 ]
  %217 = phi i8* [ %166, %165 ], [ %204, %213 ], [ %224, %254 ]
  %218 = load i8, i8* %216, align 1
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %261, label %220

220:                                              ; preds = %215
  %221 = call fastcc zeroext i1 @process_arg(i8* %216, i8* null, i32 %2) #17
  br label %261

222:                                              ; preds = %184, %213
  %223 = phi i32 [ %205, %213 ], [ %179, %184 ]
  %224 = phi i8* [ %206, %213 ], [ %178, %184 ]
  %225 = call i64 @strcspn(i8* %224, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64, i64 0, i64 0)) #18
  %226 = getelementptr inbounds i8, i8* %224, i64 %225
  store i8 0, i8* %226, align 1
  %227 = icmp sgt i64 %225, 0
  br i1 %227, label %228, label %239

228:                                              ; preds = %222, %237
  %229 = phi i8* [ %230, %237 ], [ %226, %222 ]
  %230 = getelementptr inbounds i8, i8* %229, i64 -1
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i64
  %233 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = and i16 %234, 2
  %236 = icmp eq i16 %235, 0
  br i1 %236, label %239, label %237

237:                                              ; preds = %228
  store i8 0, i8* %230, align 1
  %238 = icmp ugt i8* %230, %224
  br i1 %238, label %228, label %239

239:                                              ; preds = %237, %228, %222
  %240 = call i8* @nasm_skip_spaces(i8* %224) #17
  %241 = call fastcc zeroext i1 @process_arg(i8* %174, i8* %240, i32 %2) #17
  br i1 %241, label %242, label %243

242:                                              ; preds = %239
  store i8 0, i8* %240, align 1
  br label %243

243:                                              ; preds = %242, %239
  %244 = call i64 @strlen(i8* %240) #18
  %245 = trunc i64 %244 to i32
  %246 = add nsw i32 %172, -10
  %247 = icmp slt i32 %246, %245
  br i1 %247, label %250, label %248

248:                                              ; preds = %243
  %249 = sext i32 %172 to i64
  br label %254

250:                                              ; preds = %243
  %251 = add nsw i32 %172, 128
  %252 = sext i32 %251 to i64
  %253 = call i8* @nasm_realloc(i8* %174, i64 %252) #23
  br label %254

254:                                              ; preds = %250, %248
  %255 = phi i64 [ %249, %248 ], [ %252, %250 ]
  %256 = phi i8* [ %174, %248 ], [ %253, %250 ]
  %257 = phi i32 [ %172, %248 ], [ %251, %250 ]
  %258 = call i8* @strncpy(i8* %256, i8* %240, i64 %255) #17
  %259 = call i8* @fgets(i8* %224, i32 %223, %struct._IO_FILE* nonnull %163) #17
  %260 = icmp eq i8* %259, null
  br i1 %260, label %215, label %170

261:                                              ; preds = %215, %220
  call void @nasm_free(i8* %217) #17
  call void @nasm_free(i8* %216) #17
  %262 = call i32 @fclose(%struct._IO_FILE* nonnull %163)
  br label %273

263:                                              ; preds = %160
  call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.59, i64 0, i64 0), i8* nonnull %161) #17
  br label %273

264:                                              ; preds = %129, %137, %134
  %265 = icmp sgt i32 %131, 1
  br i1 %265, label %266, label %269

266:                                              ; preds = %264
  %267 = getelementptr inbounds i8*, i8** %130, i64 1
  %268 = load i8*, i8** %267, align 8
  br label %269

269:                                              ; preds = %264, %266
  %270 = phi i8* [ %268, %266 ], [ null, %264 ]
  %271 = call fastcc zeroext i1 @process_arg(i8* %133, i8* %270, i32 %2)
  %272 = zext i1 %271 to i8
  br label %273

273:                                              ; preds = %156, %157, %263, %261, %269
  %274 = phi i8 [ %272, %269 ], [ 0, %157 ], [ %162, %263 ], [ %162, %261 ], [ 0, %156 ]
  %275 = zext i8 %274 to i32
  %276 = zext i8 %274 to i64
  %277 = getelementptr inbounds i8*, i8** %130, i64 %276
  %278 = sub nsw i32 %131, %275
  %279 = add nsw i32 %278, -1
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %61

281:                                              ; preds = %273, %55
  %282 = icmp eq i32 %2, 2
  br i1 %282, label %283, label %319

283:                                              ; preds = %281
  %284 = load i8*, i8** @inname, align 8
  %285 = icmp eq i8* %284, null
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.60, i64 0, i64 0)) #19
  unreachable

287:                                              ; preds = %283
  %288 = load i8*, i8** @errname, align 8
  %289 = icmp eq i8* %288, null
  br i1 %289, label %293, label %290

290:                                              ; preds = %287
  %291 = call i32 @strcmp(i8* nonnull %284, i8* nonnull %288) #18
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %311, label %293

293:                                              ; preds = %290, %287
  %294 = load i8*, i8** @outname, align 8
  %295 = icmp eq i8* %294, null
  br i1 %295, label %299, label %296

296:                                              ; preds = %293
  %297 = call i32 @strcmp(i8* nonnull %284, i8* nonnull %294) #18
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %311, label %299

299:                                              ; preds = %296, %293
  %300 = load i8*, i8** @listname, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %305, label %302

302:                                              ; preds = %299
  %303 = call i32 @strcmp(i8* nonnull %284, i8* nonnull %300) #18
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %311, label %305

305:                                              ; preds = %302, %299
  %306 = load i8*, i8** @depend_file, align 8
  %307 = icmp eq i8* %306, null
  br i1 %307, label %312, label %308

308:                                              ; preds = %305
  %309 = call i32 @strcmp(i8* nonnull %284, i8* nonnull %306) #18
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %312

311:                                              ; preds = %290, %296, %302, %308
  call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.61, i64 0, i64 0)) #19
  unreachable

312:                                              ; preds = %308, %305
  br i1 %289, label %319, label %313

313:                                              ; preds = %312
  %314 = call %struct._IO_FILE* @nasm_open_write(i8* nonnull %288, i32 1) #17
  store %struct._IO_FILE* %314, %struct._IO_FILE** @error_file, align 8
  %315 = icmp eq %struct._IO_FILE* %314, null
  br i1 %315, label %316, label %319

316:                                              ; preds = %313
  %317 = load i64, i64* bitcast (%struct._IO_FILE** @stderr to i64*), align 8
  store i64 %317, i64* bitcast (%struct._IO_FILE** @error_file to i64*), align 8
  %318 = load i8*, i8** @errname, align 8
  call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.62, i64 0, i64 0), i8* %318) #19
  unreachable

319:                                              ; preds = %312, %313, %281
  ret void
}

declare %struct.dfmt* @dfmt_find(%struct.ofmt*, i8*) local_unnamed_addr #3

; Function Attrs: cold noreturn
declare void @nasm_fatalf(i32, i8*, ...) local_unnamed_addr #4

declare void @init_warnings() local_unnamed_addr #3

declare noalias i8* @nasm_strcat(i8*, i8*) local_unnamed_addr #3

declare i8* @filename_set_extension(i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #3

declare void @nasm_free(i8*) local_unnamed_addr #3

declare void @reset_warnings() local_unnamed_addr #3

declare %struct._IO_FILE* @nasm_open_write(i8*, i32) local_unnamed_addr #3

; Function Attrs: cold noreturn
declare void @nasm_fatal(i8*, ...) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @remove(i8* nocapture readonly) local_unnamed_addr #5

declare void @cleanup_labels() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #2

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #3

declare void @raa_free(%struct.RAA*) local_unnamed_addr #3

declare void @saa_free(%struct.SAA*) local_unnamed_addr #3

declare void @eval_cleanup() local_unnamed_addr #3

declare void @stdscan_cleanup() local_unnamed_addr #3

declare void @src_free() local_unnamed_addr #3

declare void @strlist_free(%struct.strlist**) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define hidden void @nasm_verror_critical(i32, i8* nocapture readonly, %struct.__va_list_tag*) local_unnamed_addr #6 {
  %4 = and i32 %0, 7
  %5 = load i1, i1* @nasm_verror_critical.been_here, align 1
  br i1 %5, label %6, label %7, !prof !4

6:                                                ; preds = %3
  tail call void @abort() #21
  unreachable

7:                                                ; preds = %3
  store i1 true, i1* @nasm_verror_critical.been_here, align 1
  %8 = tail call fastcc { i8*, i32 } @error_where(i32 %0)
  %9 = extractvalue { i8*, i32 } %8, 0
  %10 = extractvalue { i8*, i32 } %8, 1
  %11 = icmp eq i8* %9, null
  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* %9
  %13 = zext i32 %0 to i64
  %14 = getelementptr inbounds [8 x i8*], [8 x i8*]* @error_pfx_table, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %17 = tail call i32 @fputs(i8* %15, %struct._IO_FILE* %16)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %19 = tail call i32 @fputs(i8* %12, %struct._IO_FILE* %18)
  %20 = icmp eq i32 %10, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %7
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %23 = load %struct.error_format*, %struct.error_format** @errfmt, align 8
  %24 = getelementptr inbounds %struct.error_format, %struct.error_format* %23, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.error_format, %struct.error_format* %23, i64 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0), i8* %25, i32 %10, i8* %27)
  br label %29

29:                                               ; preds = %7, %21
  %30 = load %struct.error_format*, %struct.error_format** @errfmt, align 8
  %31 = getelementptr inbounds %struct.error_format, %struct.error_format* %30, i64 0, i32 2
  %32 = load i8*, i8** %31, align 8
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %34 = tail call i32 @fputs(i8* %32, %struct._IO_FILE* %33)
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %36 = tail call i32 @vfprintf(%struct._IO_FILE* %35, i8* %1, %struct.__va_list_tag* %2)
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %38 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %37)
  tail call fastcc void @die_hard(i32 %4, i32 %0) #24
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc { i8*, i32 } @error_where(i32) unnamed_addr #8 {
  %2 = and i32 %0, 16
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %24

4:                                                ; preds = %1
  %5 = load %struct.src_location_stack*, %struct.src_location_stack** @_src_error, align 8
  %6 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %5, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %5, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i8* %7, null
  br i1 %10, label %11, label %24

11:                                               ; preds = %4
  %12 = load i8*, i8** @inname, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = load i8, i8* %12, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %14, %11
  %18 = load i8*, i8** @outname, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %17
  %21 = load i8, i8* %18, align 1
  %22 = icmp eq i8 %21, 0
  %23 = select i1 %22, i8* null, i8* %18
  br label %24

24:                                               ; preds = %20, %17, %14, %1, %4
  %25 = phi i8* [ %7, %4 ], [ null, %1 ], [ null, %17 ], [ %23, %20 ], [ %12, %14 ]
  %26 = phi i32 [ %9, %4 ], [ 0, %1 ], [ 0, %17 ], [ 0, %20 ], [ 0, %14 ]
  %27 = insertvalue { i8*, i32 } undef, i8* %25, 0
  %28 = insertvalue { i8*, i32 } %27, i32 %26, 1
  ret { i8*, i32 } %28
}

; Function Attrs: nofree nounwind
declare i32 @vfprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, %struct.__va_list_tag*) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind optsize ssp uwtable
define internal fastcc void @die_hard(i32, i32) unnamed_addr #6 {
  %3 = tail call i32 @fflush(%struct._IO_FILE* null)
  %4 = icmp eq i32 %0, 7
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = load i1, i1* @abort_on_panic, align 1
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  tail call void @abort() #21
  unreachable

8:                                                ; preds = %5, %2
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @ofile, align 8
  %10 = icmp eq %struct._IO_FILE* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @fclose(%struct._IO_FILE* nonnull %9)
  %13 = load i1, i1* @keep_all, align 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = load i8*, i8** @outname, align 8
  %16 = tail call i32 @remove(i8* %15) #17
  br label %17

17:                                               ; preds = %14, %11
  store %struct._IO_FILE* null, %struct._IO_FILE** @ofile, align 8
  br label %18

18:                                               ; preds = %8, %17
  %19 = and i32 %1, 64
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %23 = load i8*, i8** @_progname, align 8
  %24 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i64 0, i64 0), i8* %23) #17
  br label %25

25:                                               ; preds = %18, %21
  %26 = add i32 %0, -4
  tail call void @exit(i32 %26) #21
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.nasm_errhold* @nasm_error_hold_push() local_unnamed_addr #0 {
  %1 = tail call noalias i8* @nasm_zalloc(i64 24) #22
  %2 = bitcast i8* %1 to %struct.nasm_errhold*
  %3 = load i64, i64* bitcast (%struct.nasm_errhold** @errhold_stack to i64*), align 8
  %4 = bitcast i8* %1 to i64*
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 8
  %6 = getelementptr inbounds i8, i8* %1, i64 16
  %7 = bitcast i8* %6 to i8**
  store i8* %5, i8** %7, align 8
  store i8* %1, i8** bitcast (%struct.nasm_errhold** @errhold_stack to i8**), align 8
  ret %struct.nasm_errhold* %2
}

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_zalloc(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden void @nasm_error_hold_pop(%struct.nasm_errhold*, i1 zeroext) local_unnamed_addr #0 {
  %3 = icmp eq %struct.nasm_errhold* %0, null
  br i1 %3, label %43, label %4

4:                                                ; preds = %2
  %5 = load %struct.nasm_errhold*, %struct.nasm_errhold** @errhold_stack, align 8
  %6 = icmp eq %struct.nasm_errhold* %5, %0
  br i1 %6, label %8, label %7, !prof !6

7:                                                ; preds = %4
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 2045, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)) #19
  unreachable

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %0, i64 0, i32 1
  %10 = load %struct.nasm_errtext*, %struct.nasm_errtext** %9, align 8
  %11 = icmp eq %struct.nasm_errtext* %10, null
  br i1 %11, label %39, label %12

12:                                               ; preds = %8
  br i1 %1, label %13, label %31

13:                                               ; preds = %12
  %14 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %0, i64 0, i32 0
  %15 = load %struct.nasm_errhold*, %struct.nasm_errhold** %14, align 8
  %16 = icmp eq %struct.nasm_errhold* %15, null
  br i1 %16, label %26, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %15, i64 0, i32 2
  %19 = load %struct.nasm_errtext**, %struct.nasm_errtext*** %18, align 8
  store %struct.nasm_errtext* %10, %struct.nasm_errtext** %19, align 8
  %20 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %0, i64 0, i32 2
  %21 = bitcast %struct.nasm_errtext*** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = load %struct.nasm_errhold*, %struct.nasm_errhold** %14, align 8
  %24 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %23, i64 0, i32 2
  %25 = bitcast %struct.nasm_errtext*** %24 to i64*
  store i64 %22, i64* %25, align 8
  br label %39

26:                                               ; preds = %13, %26
  %27 = phi %struct.nasm_errtext* [ %29, %26 ], [ %10, %13 ]
  %28 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %27, i64 0, i32 0
  %29 = load %struct.nasm_errtext*, %struct.nasm_errtext** %28, align 8
  tail call fastcc void @nasm_issue_error(%struct.nasm_errtext* nonnull %27)
  %30 = icmp eq %struct.nasm_errtext* %29, null
  br i1 %30, label %39, label %26

31:                                               ; preds = %12, %31
  %32 = phi %struct.nasm_errtext* [ %34, %31 ], [ %10, %12 ]
  %33 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %32, i64 0, i32 0
  %34 = load %struct.nasm_errtext*, %struct.nasm_errtext** %33, align 8
  %35 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %32, i64 0, i32 1
  %36 = load i8*, i8** %35, align 8
  tail call void @nasm_free(i8* %36) #17
  %37 = bitcast %struct.nasm_errtext* %32 to i8*
  tail call void @nasm_free(i8* nonnull %37) #17
  %38 = icmp eq %struct.nasm_errtext* %34, null
  br i1 %38, label %39, label %31

39:                                               ; preds = %31, %26, %8, %17
  %40 = bitcast %struct.nasm_errhold* %0 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* bitcast (%struct.nasm_errhold** @errhold_stack to i64*), align 8
  %42 = bitcast %struct.nasm_errhold* %0 to i8*
  tail call void @nasm_free(i8* nonnull %42) #17
  br label %43

43:                                               ; preds = %2, %39
  ret void
}

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @nasm_issue_error(%struct.nasm_errtext*) unnamed_addr #0 {
  %2 = alloca [64 x i8], align 16
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 64, i1 false)
  %5 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 64, i1 false)
  %6 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 2, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 2, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %7, 512
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %1
  %17 = zext i32 %9 to i64
  %18 = getelementptr inbounds [8 x i8*], [8 x i8*]* @error_pfx_table, i64 0, i64 %17
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %1, %16
  %21 = phi i8* [ %19, %16 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), %1 ]
  store i8 0, i8* %4, align 16
  %22 = and i32 %7, 2087
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %24, label %44

24:                                               ; preds = %20
  %25 = icmp ugt i32 %9, 3
  %26 = select i1 %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.143, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0)
  %27 = and i32 %7, 7
  %28 = icmp ugt i32 %27, 4
  br i1 %28, label %39, label %29

29:                                               ; preds = %24
  %30 = and i32 %7, -65529
  %31 = icmp eq i32 %30, 3
  br i1 %31, label %32, label %33, !prof !4

32:                                               ; preds = %29
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1823, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.140, i64 0, i64 0)) #19
  unreachable

33:                                               ; preds = %29
  %34 = icmp ugt i32 %7, 2293759
  br i1 %34, label %35, label %36, !prof !4

35:                                               ; preds = %33
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1826, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.141, i64 0, i64 0)) #19
  unreachable

36:                                               ; preds = %33
  %37 = lshr i32 %7, 16
  %38 = zext i32 %37 to i64
  br label %39

39:                                               ; preds = %24, %36
  %40 = phi i64 [ %38, %36 ], [ 0, %24 ]
  %41 = getelementptr inbounds [36 x i8*], [36 x i8*]* @warning_name, i64 0, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %4, i64 64, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i64 0, i64 0), i8* %26, i8* %42) #17
  br label %44

44:                                               ; preds = %39, %20
  store i8 0, i8* %5, align 16
  %45 = icmp ne i32 %13, 0
  br i1 %45, label %46, label %53

46:                                               ; preds = %44
  %47 = load %struct.error_format*, %struct.error_format** @errfmt, align 8
  %48 = getelementptr inbounds %struct.error_format, %struct.error_format* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %struct.error_format, %struct.error_format* %47, i64 0, i32 1
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %5, i64 64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0), i8* %49, i32 %13, i8* %51) #17
  br label %53

53:                                               ; preds = %46, %44
  %54 = and i32 %7, 7
  %55 = icmp ugt i32 %54, 4
  br i1 %55, label %66, label %56

56:                                               ; preds = %53
  %57 = icmp eq i32 %54, 0
  br i1 %57, label %103, label %58

58:                                               ; preds = %56
  %59 = and i32 %7, 256
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %58
  %62 = load i32, i32* @_pass_type, align 4
  %63 = icmp ult i32 %62, 5
  %64 = icmp ne i32 %62, 1
  %65 = and i1 %63, %64
  br i1 %65, label %103, label %66

66:                                               ; preds = %58, %53, %61
  %67 = icmp ne i8* %11, null
  %68 = select i1 %67, i8* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)
  %69 = and i32 %7, 32
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.144, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.145, i64 0, i64 0)
  %72 = select i1 %70, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %71
  %73 = load %struct.strlist*, %struct.strlist** @warn_list, align 8
  %74 = icmp ne %struct.strlist* %73, null
  %75 = icmp ult i32 %9, 4
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %90

77:                                               ; preds = %66
  %78 = load i32, i32* @_pass_type, align 4
  %79 = icmp ult i32 %78, 3
  %80 = trunc i32 %7 to i8
  %81 = icmp slt i8 %80, 0
  %82 = and i1 %81, %79
  br i1 %82, label %95, label %83

83:                                               ; preds = %77
  %84 = load %struct.error_format*, %struct.error_format** @errfmt, align 8
  %85 = getelementptr inbounds %struct.error_format, %struct.error_format* %84, i64 0, i32 2
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %88 = load i8*, i8** %87, align 8
  %89 = call %struct.strlist_entry* (%struct.strlist*, i8*, ...) @strlist_printf(%struct.strlist* nonnull %73, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.146, i64 0, i64 0), i8* %68, i8* nonnull %5, i8* %86, i8* %21, i8* %88, i8* %72, i8* nonnull %4) #17
  br label %103

90:                                               ; preds = %66
  %91 = icmp ugt i32 %9, 3
  %92 = and i1 %91, %74
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  tail call void @strlist_write(%struct.strlist* nonnull %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.147, i64 0, i64 0), %struct._IO_FILE* %94) #17
  tail call void @strlist_free(%struct.strlist** nonnull @warn_list) #17
  br label %95

95:                                               ; preds = %77, %93, %90
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @error_file, align 8
  %97 = load %struct.error_format*, %struct.error_format** @errfmt, align 8
  %98 = getelementptr inbounds %struct.error_format, %struct.error_format* %97, i64 0, i32 2
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %101 = load i8*, i8** %100, align 8
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i64 0, i64 0), i8* %68, i8* nonnull %5, i8* %99, i8* %21, i8* %101, i8* %72, i8* nonnull %4)
  br label %103

103:                                              ; preds = %56, %83, %95, %61
  %104 = and i32 %7, 2048
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %148

106:                                              ; preds = %103
  %107 = and i32 %7, 32
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %125, label %109

109:                                              ; preds = %106
  br i1 %45, label %110, label %116

110:                                              ; preds = %109
  %111 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %112 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %111, i64 0, i32 6
  %113 = load void (i32, i8*, ...)*, void (i32, i8*, ...)** %112, align 8
  %114 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %115 = load i8*, i8** %114, align 8
  call void (i32, i8*, ...) %113(i32 %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.149, i64 0, i64 0), i8* %21, i8* %115, i8* %11, i32 %13, i8* nonnull %4) #17
  br label %131

116:                                              ; preds = %109
  %117 = icmp eq i8* %11, null
  %118 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %119 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %118, i64 0, i32 6
  %120 = load void (i32, i8*, ...)*, void (i32, i8*, ...)** %119, align 8
  %121 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %122 = load i8*, i8** %121, align 8
  br i1 %117, label %124, label %123

123:                                              ; preds = %116
  call void (i32, i8*, ...) %120(i32 %7, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.150, i64 0, i64 0), i8* %21, i8* %122, i8* nonnull %11, i8* nonnull %4) #17
  br label %131

124:                                              ; preds = %116
  call void (i32, i8*, ...) %120(i32 %7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.151, i64 0, i64 0), i8* %21, i8* %122, i8* nonnull %4) #17
  br label %131

125:                                              ; preds = %106
  %126 = load %struct.lfmt*, %struct.lfmt** @lfmt, align 8
  %127 = getelementptr inbounds %struct.lfmt, %struct.lfmt* %126, i64 0, i32 6
  %128 = load void (i32, i8*, ...)*, void (i32, i8*, ...)** %127, align 8
  %129 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %130 = load i8*, i8** %129, align 8
  call void (i32, i8*, ...) %128(i32 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.152, i64 0, i64 0), i8* %21, i8* %130, i8* nonnull %4) #17
  br label %131

131:                                              ; preds = %110, %124, %123, %125
  br i1 %55, label %142, label %132

132:                                              ; preds = %131
  %133 = icmp eq i32 %54, 0
  br i1 %133, label %148, label %134

134:                                              ; preds = %132
  %135 = and i32 %7, 256
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %142, label %137

137:                                              ; preds = %134
  %138 = load i32, i32* @_pass_type, align 4
  %139 = icmp ult i32 %138, 5
  %140 = icmp ne i32 %138, 1
  %141 = and i1 %139, %140
  br i1 %141, label %148, label %142

142:                                              ; preds = %134, %131, %137
  %143 = icmp ugt i32 %9, 4
  br i1 %143, label %144, label %145

144:                                              ; preds = %142
  call fastcc void @die_hard(i32 %9, i32 %7) #24
  unreachable

145:                                              ; preds = %142
  %146 = icmp eq i32 %9, 4
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  store i1 true, i1* @terminate_after_phase, align 1
  br label %148

148:                                              ; preds = %132, %103, %147, %145, %137
  %149 = getelementptr inbounds %struct.nasm_errtext, %struct.nasm_errtext* %0, i64 0, i32 1
  %150 = load i8*, i8** %149, align 8
  call void @nasm_free(i8* %150) #17
  %151 = bitcast %struct.nasm_errtext* %0 to i8*
  call void @nasm_free(i8* %151) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #17
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @nasm_verror(i32, i8*, %struct.__va_list_tag*) local_unnamed_addr #0 {
  %4 = and i32 %0, 7
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %6, label %21

6:                                                ; preds = %3
  %7 = and i32 %0, -65529
  %8 = icmp eq i32 %7, 3
  br i1 %8, label %9, label %10, !prof !4

9:                                                ; preds = %6
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1823, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.140, i64 0, i64 0)) #19
  unreachable

10:                                               ; preds = %6
  %11 = icmp ugt i32 %0, 2293759
  br i1 %11, label %12, label %13, !prof !4

12:                                               ; preds = %10
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1826, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.141, i64 0, i64 0)) #19
  unreachable

13:                                               ; preds = %10
  %14 = lshr i32 %0, 16
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [35 x i8], [35 x i8]* @warning_state, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 3
  %19 = icmp eq i8 %18, 3
  %20 = select i1 %19, i32 4, i32 3
  br label %26

21:                                               ; preds = %3
  %22 = icmp ugt i32 %4, 5
  br i1 %22, label %23, label %24

23:                                               ; preds = %21
  tail call void @nasm_verror_critical(i32 %0, i8* %1, %struct.__va_list_tag* %2) #24
  unreachable

24:                                               ; preds = %21
  %25 = icmp eq i32 %4, 5
  br i1 %25, label %56, label %26

26:                                               ; preds = %13, %24
  %27 = phi i32 [ %20, %13 ], [ %4, %24 ]
  %28 = and i32 %0, 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = load i1, i1* @terminate_after_phase, align 1
  br i1 %31, label %127, label %32

32:                                               ; preds = %30, %26
  %33 = and i32 %0, -65529
  %34 = icmp eq i32 %33, 3
  br i1 %34, label %35, label %36, !prof !4

35:                                               ; preds = %32
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1823, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.140, i64 0, i64 0)) #19
  unreachable

36:                                               ; preds = %32
  %37 = icmp ugt i32 %0, 2293759
  br i1 %37, label %38, label %39, !prof !4

38:                                               ; preds = %36
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1826, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.141, i64 0, i64 0)) #19
  unreachable

39:                                               ; preds = %36
  %40 = lshr i32 %0, 16
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds [35 x i8], [35 x i8]* @warning_state, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = and i8 %43, 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %127, label %46

46:                                               ; preds = %39
  %47 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %48 = icmp ne %struct.preproc_ops* %47, null
  %49 = and i32 %0, 2048
  %50 = icmp eq i32 %49, 0
  %51 = and i1 %50, %48
  br i1 %51, label %52, label %56

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %47, i64 0, i32 12
  %54 = load i1 (i32)*, i1 (i32)** %53, align 8
  %55 = tail call zeroext i1 %54(i32 %0) #17
  br i1 %55, label %127, label %56

56:                                               ; preds = %46, %24, %52
  %57 = phi i32 [ %27, %52 ], [ %27, %46 ], [ 5, %24 ]
  %58 = phi i1 [ false, %52 ], [ false, %46 ], [ true, %24 ]
  %59 = tail call noalias i8* @nasm_zalloc(i64 40) #22
  %60 = getelementptr inbounds i8, i8* %59, i64 32
  %61 = bitcast i8* %60 to i32*
  store i32 %0, i32* %61, align 8
  %62 = getelementptr inbounds i8, i8* %59, i64 36
  %63 = bitcast i8* %62 to i32*
  store i32 %57, i32* %63, align 4
  %64 = tail call noalias i8* @nasm_vasprintf(i8* %1, %struct.__va_list_tag* %2) #17
  %65 = getelementptr inbounds i8, i8* %59, i64 8
  %66 = bitcast i8* %65 to i8**
  store i8* %64, i8** %66, align 8
  %67 = and i32 %0, 16
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %89

69:                                               ; preds = %56
  %70 = load %struct.src_location_stack*, %struct.src_location_stack** @_src_error, align 8
  %71 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %70, i64 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %struct.src_location_stack, %struct.src_location_stack* %70, i64 0, i32 0, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i8* %72, null
  br i1 %75, label %76, label %89

76:                                               ; preds = %69
  %77 = load i8*, i8** @inname, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %76
  %80 = load i8, i8* %77, align 1
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %82, label %89

82:                                               ; preds = %79, %76
  %83 = load i8*, i8** @outname, align 8
  %84 = icmp eq i8* %83, null
  br i1 %84, label %89, label %85

85:                                               ; preds = %82
  %86 = load i8, i8* %83, align 1
  %87 = icmp eq i8 %86, 0
  %88 = select i1 %87, i8* null, i8* %83
  br label %89

89:                                               ; preds = %56, %69, %79, %82, %85
  %90 = phi i8* [ %72, %69 ], [ null, %56 ], [ null, %82 ], [ %88, %85 ], [ %77, %79 ]
  %91 = phi i32 [ %74, %69 ], [ 0, %56 ], [ 0, %82 ], [ 0, %85 ], [ 0, %79 ]
  %92 = getelementptr inbounds i8, i8* %59, i64 16
  %93 = bitcast i8* %92 to i8**
  store i8* %90, i8** %93, align 8
  %94 = getelementptr inbounds i8, i8* %59, i64 24
  %95 = bitcast i8* %94 to i32*
  store i32 %91, i32* %95, align 8
  %96 = load %struct.nasm_errhold*, %struct.nasm_errhold** @errhold_stack, align 8
  %97 = icmp ne %struct.nasm_errhold* %96, null
  %98 = icmp ult i32 %57, 5
  %99 = and i1 %98, %97
  br i1 %99, label %100, label %105

100:                                              ; preds = %89
  %101 = getelementptr inbounds %struct.nasm_errhold, %struct.nasm_errhold* %96, i64 0, i32 2
  %102 = bitcast %struct.nasm_errtext*** %101 to i8***
  %103 = load i8**, i8*** %102, align 8
  store i8* %59, i8** %103, align 8
  %104 = bitcast %struct.nasm_errtext*** %101 to i8**
  store i8* %59, i8** %104, align 8
  br label %107

105:                                              ; preds = %89
  %106 = bitcast i8* %59 to %struct.nasm_errtext*
  tail call fastcc void @nasm_issue_error(%struct.nasm_errtext* %106)
  br label %107

107:                                              ; preds = %105, %100
  br i1 %58, label %118, label %108

108:                                              ; preds = %107
  %109 = icmp eq i32 %4, 0
  br i1 %109, label %127, label %110

110:                                              ; preds = %108
  %111 = and i32 %0, 256
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %118, label %113

113:                                              ; preds = %110
  %114 = load i32, i32* @_pass_type, align 4
  %115 = icmp ult i32 %114, 5
  %116 = icmp ne i32 %114, 1
  %117 = and i1 %115, %116
  br i1 %117, label %127, label %118

118:                                              ; preds = %110, %107, %113
  %119 = and i32 %0, 2080
  %120 = icmp eq i32 %119, 0
  %121 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %122 = icmp ne %struct.preproc_ops* %121, null
  %123 = and i1 %120, %122
  br i1 %123, label %124, label %127

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %121, i64 0, i32 11
  %126 = load void (i32)*, void (i32)** %125, align 8
  tail call void %126(i32 %0) #17
  br label %127

127:                                              ; preds = %108, %39, %30, %124, %118, %113, %52
  ret void
}

declare noalias i8* @nasm_vasprintf(i8*, %struct.__va_list_tag*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @nasm_get_stack_size_limit() local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) local_unnamed_addr #10

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @quote_for_pmake(i8* readonly) #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %119, label %3

3:                                                ; preds = %1
  %4 = load i8, i8* %0, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %28, label %6

6:                                                ; preds = %3, %22
  %7 = phi i8 [ %26, %22 ], [ %4, %3 ]
  %8 = phi i64 [ %24, %22 ], [ 0, %3 ]
  %9 = phi i64 [ %23, %22 ], [ 1, %3 ]
  %10 = phi i8* [ %25, %22 ], [ %0, %3 ]
  %11 = sext i8 %7 to i32
  switch i32 %11, label %20 [
    i32 32, label %12
    i32 9, label %12
    i32 36, label %15
    i32 35, label %15
    i32 92, label %17
  ]

12:                                               ; preds = %6, %6
  %13 = add i64 %9, 2
  %14 = add i64 %13, %8
  br label %22

15:                                               ; preds = %6, %6
  %16 = add i64 %9, 2
  br label %22

17:                                               ; preds = %6
  %18 = add i64 %8, 1
  %19 = add i64 %9, 1
  br label %22

20:                                               ; preds = %6
  %21 = add i64 %9, 1
  br label %22

22:                                               ; preds = %12, %15, %17, %20
  %23 = phi i64 [ %21, %20 ], [ %19, %17 ], [ %16, %15 ], [ %14, %12 ]
  %24 = phi i64 [ 0, %20 ], [ %18, %17 ], [ 0, %15 ], [ 0, %12 ]
  %25 = getelementptr inbounds i8, i8* %10, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %6

28:                                               ; preds = %22, %3
  %29 = phi i64 [ 1, %3 ], [ %23, %22 ]
  %30 = phi i64 [ 0, %3 ], [ %24, %22 ]
  %31 = add i64 %30, %29
  %32 = tail call noalias i8* @nasm_malloc(i64 %31) #22
  %33 = load i8, i8* %0, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %117, label %54

35:                                               ; preds = %105
  %36 = icmp eq i64 %107, 0
  br i1 %36, label %117, label %37

37:                                               ; preds = %35
  call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 92, i64 %107, i1 false)
  %38 = add i64 %107, -1
  %39 = and i64 %107, 7
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %37, %41
  %42 = phi i64 [ %45, %41 ], [ %107, %37 ]
  %43 = phi i8* [ %46, %41 ], [ %106, %37 ]
  %44 = phi i64 [ %47, %41 ], [ %39, %37 ]
  %45 = add i64 %42, -1
  %46 = getelementptr inbounds i8, i8* %43, i64 1
  %47 = add i64 %44, -1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %41, !llvm.loop !7

49:                                               ; preds = %41, %37
  %50 = phi i8* [ undef, %37 ], [ %46, %41 ]
  %51 = phi i64 [ %107, %37 ], [ %45, %41 ]
  %52 = phi i8* [ %106, %37 ], [ %46, %41 ]
  %53 = icmp ult i64 %38, 7
  br i1 %53, label %117, label %111

54:                                               ; preds = %28, %105
  %55 = phi i8 [ %109, %105 ], [ %33, %28 ]
  %56 = phi i64 [ %107, %105 ], [ 0, %28 ]
  %57 = phi i8* [ %106, %105 ], [ %32, %28 ]
  %58 = phi i8* [ %108, %105 ], [ %0, %28 ]
  %59 = sext i8 %55 to i32
  switch i32 %59, label %103 [
    i32 32, label %60
    i32 9, label %60
    i32 36, label %92
    i32 35, label %96
    i32 92, label %100
  ]

60:                                               ; preds = %54, %54
  %61 = add nuw i64 %56, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %57, i8 92, i64 %61, i1 false)
  %62 = add i64 %56, 1
  %63 = and i64 %62, 7
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %73, label %65

65:                                               ; preds = %60, %65
  %66 = phi i8* [ %70, %65 ], [ %57, %60 ]
  %67 = phi i64 [ %69, %65 ], [ %56, %60 ]
  %68 = phi i64 [ %71, %65 ], [ %63, %60 ]
  %69 = add i64 %67, -1
  %70 = getelementptr inbounds i8, i8* %66, i64 1
  %71 = add i64 %68, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %65, !llvm.loop !9

73:                                               ; preds = %65, %60
  %74 = phi i8* [ undef, %60 ], [ %66, %65 ]
  %75 = phi i8* [ undef, %60 ], [ %70, %65 ]
  %76 = phi i8* [ %57, %60 ], [ %70, %65 ]
  %77 = phi i64 [ %56, %60 ], [ %69, %65 ]
  %78 = icmp ult i64 %56, 7
  br i1 %78, label %87, label %79

79:                                               ; preds = %73, %79
  %80 = phi i8* [ %84, %79 ], [ %76, %73 ]
  %81 = phi i64 [ %82, %79 ], [ %77, %73 ]
  %82 = add i64 %81, -8
  %83 = icmp eq i64 %81, 7
  %84 = getelementptr inbounds i8, i8* %80, i64 8
  br i1 %83, label %85, label %79

85:                                               ; preds = %79
  %86 = getelementptr inbounds i8, i8* %80, i64 7
  br label %87

87:                                               ; preds = %73, %85
  %88 = phi i8* [ %74, %73 ], [ %86, %85 ]
  %89 = phi i8* [ %75, %73 ], [ %84, %85 ]
  %90 = load i8, i8* %58, align 1
  %91 = getelementptr inbounds i8, i8* %88, i64 2
  store i8 %90, i8* %89, align 1
  br label %105

92:                                               ; preds = %54
  %93 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %55, i8* %57, align 1
  %94 = load i8, i8* %58, align 1
  %95 = getelementptr inbounds i8, i8* %57, i64 2
  store i8 %94, i8* %93, align 1
  br label %105

96:                                               ; preds = %54
  %97 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 92, i8* %57, align 1
  %98 = load i8, i8* %58, align 1
  %99 = getelementptr inbounds i8, i8* %57, i64 2
  store i8 %98, i8* %97, align 1
  br label %105

100:                                              ; preds = %54
  %101 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %55, i8* %57, align 1
  %102 = add i64 %56, 1
  br label %105

103:                                              ; preds = %54
  %104 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %55, i8* %57, align 1
  br label %105

105:                                              ; preds = %87, %92, %96, %100, %103
  %106 = phi i8* [ %104, %103 ], [ %101, %100 ], [ %99, %96 ], [ %95, %92 ], [ %91, %87 ]
  %107 = phi i64 [ 0, %103 ], [ %102, %100 ], [ 0, %96 ], [ 0, %92 ], [ -1, %87 ]
  %108 = getelementptr inbounds i8, i8* %58, i64 1
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %35, label %54

111:                                              ; preds = %49, %111
  %112 = phi i64 [ %114, %111 ], [ %51, %49 ]
  %113 = phi i8* [ %115, %111 ], [ %52, %49 ]
  %114 = add i64 %112, -8
  %115 = getelementptr inbounds i8, i8* %113, i64 8
  %116 = icmp eq i64 %114, 0
  br i1 %116, label %117, label %111

117:                                              ; preds = %49, %111, %28, %35
  %118 = phi i8* [ %106, %35 ], [ %32, %28 ], [ %50, %49 ], [ %115, %111 ]
  store i8 0, i8* %118, align 1
  br label %119

119:                                              ; preds = %1, %117
  %120 = phi i8* [ %32, %117 ], [ null, %1 ]
  ret i8* %120
}

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #9

declare noalias i8* @nasm_strdup(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

declare i8* @nasm_quote(i8*, i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @quote_for_wmake(i8* readonly) #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %58, label %3

3:                                                ; preds = %1
  %4 = load i8, i8* %0, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %3, %15
  %7 = phi i8 [ %20, %15 ], [ %4, %3 ]
  %8 = phi i64 [ %18, %15 ], [ 1, %3 ]
  %9 = phi i8 [ %17, %15 ], [ 0, %3 ]
  %10 = phi i8* [ %19, %15 ], [ %0, %3 ]
  %11 = sext i8 %7 to i32
  switch i32 %11, label %14 [
    i32 32, label %15
    i32 9, label %15
    i32 38, label %15
    i32 34, label %12
    i32 36, label %13
    i32 35, label %13
  ]

12:                                               ; preds = %6
  br label %15

13:                                               ; preds = %6, %6
  br label %15

14:                                               ; preds = %6
  br label %15

15:                                               ; preds = %6, %6, %6, %12, %13, %14
  %16 = phi i64 [ 2, %12 ], [ 2, %13 ], [ 1, %14 ], [ 1, %6 ], [ 1, %6 ], [ 1, %6 ]
  %17 = phi i8 [ 1, %12 ], [ %9, %13 ], [ %9, %14 ], [ 1, %6 ], [ 1, %6 ], [ 1, %6 ]
  %18 = add i64 %8, %16
  %19 = getelementptr inbounds i8, i8* %10, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %6

22:                                               ; preds = %15, %3
  %23 = phi i8 [ 0, %3 ], [ %17, %15 ]
  %24 = phi i64 [ 1, %3 ], [ %18, %15 ]
  %25 = and i8 %23, 1
  %26 = icmp ne i8 %25, 0
  %27 = add i64 %24, 2
  %28 = select i1 %26, i64 %27, i64 %24
  %29 = tail call noalias i8* @nasm_malloc(i64 %28) #22
  br i1 %26, label %30, label %32

30:                                               ; preds = %22
  %31 = getelementptr inbounds i8, i8* %29, i64 1
  store i8 34, i8* %29, align 1
  br label %32

32:                                               ; preds = %30, %22
  %33 = phi i8* [ %31, %30 ], [ %29, %22 ]
  %34 = load i8, i8* %0, align 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %52, label %36

36:                                               ; preds = %32, %45
  %37 = phi i8 [ %50, %45 ], [ %34, %32 ]
  %38 = phi i8* [ %48, %45 ], [ %33, %32 ]
  %39 = phi i8* [ %49, %45 ], [ %0, %32 ]
  %40 = sext i8 %37 to i32
  switch i32 %40, label %45 [
    i32 36, label %42
    i32 35, label %42
    i32 34, label %41
  ]

41:                                               ; preds = %36
  br label %42

42:                                               ; preds = %36, %36, %41
  %43 = phi i8 [ %37, %41 ], [ 36, %36 ], [ 36, %36 ]
  %44 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %43, i8* %38, align 1
  br label %45

45:                                               ; preds = %42, %36
  %46 = phi i64 [ 1, %36 ], [ 2, %42 ]
  %47 = phi i8* [ %38, %36 ], [ %44, %42 ]
  %48 = getelementptr inbounds i8, i8* %38, i64 %46
  store i8 %37, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %39, i64 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %36

52:                                               ; preds = %45, %32
  %53 = phi i8* [ %33, %32 ], [ %48, %45 ]
  br i1 %26, label %54, label %56

54:                                               ; preds = %52
  %55 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 34, i8* %53, align 1
  br label %56

56:                                               ; preds = %54, %52
  %57 = phi i8* [ %55, %54 ], [ %53, %52 ]
  store i8 0, i8* %57, align 1
  br label %58

58:                                               ; preds = %1, %56
  %59 = phi i8* [ %29, %56 ], [ null, %1 ]
  ret i8* %59
}

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #2

declare %struct._IO_FILE* @nasm_open_read(i8*, i32) local_unnamed_addr #3

declare void @nasm_nonfatalf(i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @process_arg(i8*, i8*, i32) unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %6 = icmp eq i8* %0, null
  br i1 %6, label %370, label %7

7:                                                ; preds = %3
  %8 = load i8, i8* %0, align 1
  switch i8 %8, label %359 [
    i8 0, label %370
    i8 45, label %9
  ]

9:                                                ; preds = %7
  %10 = load i1, i1* @stopoptions, align 1
  br i1 %10, label %359, label %11

11:                                               ; preds = %9
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = tail call i8* @memchr(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.65, i64 0, i64 0), i32 %14, i64 19)
  %16 = icmp eq i8* %15, null
  br i1 %16, label %35, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds i8, i8* %0, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = icmp eq i8* %1, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = load i8, i8* %1, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %23
  store i8* %1, i8** %4, align 8
  %27 = ptrtoint i8* %1 to i64
  br label %35

28:                                               ; preds = %21, %23
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.63, i64 0, i64 0), i32 %14) #17
  store i8* null, i8** %4, align 8
  br label %370

29:                                               ; preds = %17
  %30 = tail call i8* @nasm_skip_spaces(i8* %18) #17
  store i8* %30, i8** %4, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %370, label %32

32:                                               ; preds = %29
  %33 = ptrtoint i8* %30 to i64
  %34 = load i8, i8* %12, align 1
  br label %35

35:                                               ; preds = %32, %26, %11
  %36 = phi i64 [ -6148914691236517206, %11 ], [ %33, %32 ], [ %27, %26 ]
  %37 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %11 ], [ %30, %32 ], [ %1, %26 ]
  %38 = phi i8 [ %13, %11 ], [ %34, %32 ], [ %13, %26 ]
  %39 = phi i8 [ 0, %11 ], [ 0, %32 ], [ 1, %26 ]
  %40 = sext i8 %38 to i32
  switch i32 %40, label %358 [
    i32 115, label %41
    i32 111, label %45
    i32 102, label %53
    i32 79, label %59
    i32 112, label %89
    i32 80, label %89
    i32 100, label %95
    i32 68, label %95
    i32 117, label %101
    i32 85, label %101
    i32 105, label %107
    i32 73, label %107
    i32 108, label %112
    i32 76, label %120
    i32 90, label %154
    i32 70, label %162
    i32 88, label %165
    i32 103, label %185
    i32 104, label %193
    i32 121, label %195
    i32 116, label %197
    i32 118, label %200
    i32 101, label %201
    i32 69, label %201
    i32 97, label %204
    i32 119, label %207
    i32 87, label %207
    i32 77, label %211
    i32 45, label %252
  ]

41:                                               ; preds = %35
  %42 = icmp eq i32 %2, 1
  br i1 %42, label %43, label %367

43:                                               ; preds = %41
  %44 = load i64, i64* bitcast (%struct._IO_FILE** @stdout to i64*), align 8
  store i64 %44, i64* bitcast (%struct._IO_FILE** @error_file to i64*), align 8
  br label %367

45:                                               ; preds = %35
  %46 = icmp eq i32 %2, 2
  br i1 %46, label %47, label %367

47:                                               ; preds = %45
  %48 = load i8*, i8** @outname, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0), i8* %37) #19
  unreachable

51:                                               ; preds = %47
  %52 = tail call noalias i8* @nasm_strdup(i8* %37) #17
  store i8* %52, i8** @outname, align 8
  br label %367

53:                                               ; preds = %35
  %54 = icmp eq i32 %2, 1
  br i1 %54, label %55, label %367

55:                                               ; preds = %53
  %56 = tail call %struct.ofmt* @ofmt_find(i8* %37, %struct.ofmt_alias** nonnull @ofmt_alias) #17
  store %struct.ofmt* %56, %struct.ofmt** @ofmt, align 8
  %57 = icmp eq %struct.ofmt* %56, null
  br i1 %57, label %58, label %367

58:                                               ; preds = %55
  tail call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.67, i64 0, i64 0), i8* %37) #19
  unreachable

59:                                               ; preds = %35
  %60 = icmp eq i32 %2, 1
  br i1 %60, label %61, label %367

61:                                               ; preds = %59
  %62 = load i8, i8* %37, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i32 1073741823, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  br label %367

65:                                               ; preds = %61, %81
  %66 = phi i8 [ %83, %81 ], [ %62, %61 ]
  %67 = phi i8* [ %82, %81 ], [ %37, %61 ]
  %68 = sext i8 %66 to i32
  switch i32 %68, label %80 [
    i32 48, label %69
    i32 49, label %69
    i32 50, label %69
    i32 51, label %69
    i32 52, label %69
    i32 53, label %69
    i32 54, label %69
    i32 55, label %69
    i32 56, label %69
    i32 57, label %69
    i32 118, label %76
    i32 43, label %76
    i32 120, label %78
  ]

69:                                               ; preds = %65, %65, %65, %65, %65, %65, %65, %65, %65, %65
  %70 = call i64 @strtoul(i8* %67, i8** nonnull %4, i32 10) #17
  %71 = trunc i64 %70 to i32
  %72 = icmp slt i32 %71, 2
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = add nsw i32 %71, -1
  store i32 %74, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  br label %81

75:                                               ; preds = %69
  store i32 %71, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  br label %81

76:                                               ; preds = %65, %65
  %77 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %77, i8** %4, align 8
  store i1 true, i1* @opt_verbose_info, align 1
  br label %81

78:                                               ; preds = %65
  %79 = getelementptr inbounds i8, i8* %67, i64 1
  store i8* %79, i8** %4, align 8
  store i32 1073741823, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  br label %81

80:                                               ; preds = %65
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.68, i64 0, i64 0), i32 %68) #19
  unreachable

81:                                               ; preds = %73, %75, %78, %76
  %82 = load i8*, i8** %4, align 8
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %65

85:                                               ; preds = %81
  %86 = load i32, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  %87 = icmp sgt i32 %86, 1073741823
  br i1 %87, label %88, label %367

88:                                               ; preds = %85
  store i32 1073741823, i32* getelementptr inbounds (%struct.optimization, %struct.optimization* @optimizing, i64 0, i32 0), align 4
  br label %367

89:                                               ; preds = %35, %35
  %90 = icmp eq i32 %2, 2
  br i1 %90, label %91, label %367

91:                                               ; preds = %89
  %92 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %93 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %92, i64 0, i32 8
  %94 = load void (i8*)*, void (i8*)** %93, align 8
  tail call void %94(i8* %37) #17
  br label %367

95:                                               ; preds = %35, %35
  %96 = icmp eq i32 %2, 2
  br i1 %96, label %97, label %367

97:                                               ; preds = %95
  %98 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %99 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %98, i64 0, i32 6
  %100 = load void (i8*)*, void (i8*)** %99, align 8
  tail call void %100(i8* %37) #17
  br label %367

101:                                              ; preds = %35, %35
  %102 = icmp eq i32 %2, 2
  br i1 %102, label %103, label %367

103:                                              ; preds = %101
  %104 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %105 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %104, i64 0, i32 7
  %106 = load void (i8*)*, void (i8*)** %105, align 8
  tail call void %106(i8* %37) #17
  br label %367

107:                                              ; preds = %35, %35
  %108 = icmp eq i32 %2, 1
  br i1 %108, label %109, label %367

109:                                              ; preds = %107
  %110 = load %struct.strlist*, %struct.strlist** @include_path, align 8
  %111 = tail call %struct.strlist_entry* @strlist_add(%struct.strlist* %110, i8* %37) #17
  br label %367

112:                                              ; preds = %35
  %113 = icmp eq i32 %2, 2
  br i1 %113, label %114, label %367

114:                                              ; preds = %112
  %115 = load i8*, i8** @listname, align 8
  %116 = icmp eq i8* %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %114
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i64 0, i64 0), i8* %37) #19
  unreachable

118:                                              ; preds = %114
  %119 = tail call noalias i8* @nasm_strdup(i8* %37) #17
  store i8* %119, i8** @listname, align 8
  br label %367

120:                                              ; preds = %35
  %121 = icmp eq i32 %2, 2
  br i1 %121, label %122, label %367

122:                                              ; preds = %120
  %123 = load i8, i8* %37, align 1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %367, label %125

125:                                              ; preds = %122, %148
  %126 = phi i8* [ %127, %148 ], [ %37, %122 ]
  %127 = getelementptr inbounds i8, i8* %126, i64 1
  store i8* %127, i8** %4, align 8
  %128 = load i8, i8* %126, align 1
  %129 = icmp ugt i8 %128, 96
  br i1 %129, label %130, label %132

130:                                              ; preds = %125
  %131 = icmp ugt i8 %128, 122
  br i1 %131, label %148, label %143

132:                                              ; preds = %125
  %133 = icmp ugt i8 %128, 64
  br i1 %133, label %134, label %136

134:                                              ; preds = %132
  %135 = icmp ugt i8 %128, 90
  br i1 %135, label %148, label %143

136:                                              ; preds = %132
  %137 = icmp ugt i8 %128, 47
  br i1 %137, label %138, label %140

138:                                              ; preds = %136
  %139 = icmp ugt i8 %128, 57
  br i1 %139, label %148, label %143

140:                                              ; preds = %136
  %141 = icmp eq i8 %128, 43
  %142 = sext i1 %141 to i64
  br label %148

143:                                              ; preds = %138, %134, %130
  %144 = phi i8 [ -97, %130 ], [ -39, %134 ], [ 4, %138 ]
  %145 = add nsw i8 %128, %144
  %146 = zext i8 %145 to i64
  %147 = shl i64 1, %146
  br label %148

148:                                              ; preds = %130, %134, %138, %140, %143
  %149 = phi i64 [ %147, %143 ], [ 0, %130 ], [ 0, %134 ], [ 0, %138 ], [ %142, %140 ]
  %150 = load i64, i64* @list_options, align 8
  %151 = or i64 %150, %149
  store i64 %151, i64* @list_options, align 8
  %152 = load i8, i8* %127, align 1
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %367, label %125

154:                                              ; preds = %35
  %155 = icmp eq i32 %2, 1
  br i1 %155, label %156, label %367

156:                                              ; preds = %154
  %157 = load i8*, i8** @errname, align 8
  %158 = icmp eq i8* %157, null
  br i1 %158, label %160, label %159

159:                                              ; preds = %156
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i8* %37) #19
  unreachable

160:                                              ; preds = %156
  %161 = tail call noalias i8* @nasm_strdup(i8* %37) #17
  store i8* %161, i8** @errname, align 8
  br label %367

162:                                              ; preds = %35
  %163 = icmp eq i32 %2, 1
  br i1 %163, label %164, label %367

164:                                              ; preds = %162
  store i1 true, i1* @using_debug_info, align 1
  store i64 %36, i64* bitcast (i8** @debug_format to i64*), align 8
  br label %367

165:                                              ; preds = %35
  %166 = icmp eq i32 %2, 1
  br i1 %166, label %167, label %367

167:                                              ; preds = %165
  %168 = tail call i32 @strcasecmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i64 0, i64 0), i8* %37) #18
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %176, label %170

170:                                              ; preds = %167
  %171 = tail call i32 @strcasecmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72, i64 0, i64 0), i8* %37) #18
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %176, label %173

173:                                              ; preds = %170
  %174 = tail call i32 @strcasecmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i64 0, i64 0), i8* %37) #18
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %173, %170, %167
  store %struct.error_format* @errfmt_msvc, %struct.error_format** @errfmt, align 8
  br label %367

177:                                              ; preds = %173
  %178 = tail call i32 @strcasecmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i8* %37) #18
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %183, label %180

180:                                              ; preds = %177
  %181 = tail call i32 @strcasecmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.75, i64 0, i64 0), i8* %37) #18
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %180, %177
  store %struct.error_format* @errfmt_gnu, %struct.error_format** @errfmt, align 8
  br label %367

184:                                              ; preds = %180
  tail call void (i32, i8*, ...) @nasm_fatalf(i32 64, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.76, i64 0, i64 0), i8* %37) #19
  unreachable

185:                                              ; preds = %35
  %186 = icmp eq i32 %2, 1
  br i1 %186, label %187, label %367

187:                                              ; preds = %185
  store i1 true, i1* @using_debug_info, align 1
  %188 = getelementptr inbounds i8, i8* %0, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %367, label %191

191:                                              ; preds = %187
  %192 = tail call i8* @nasm_skip_spaces(i8* %188) #17
  store i8* %192, i8** @debug_format, align 8
  br label %367

193:                                              ; preds = %35
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  tail call fastcc void @help(%struct._IO_FILE* %194)
  tail call void @exit(i32 0) #21
  unreachable

195:                                              ; preds = %35
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  tail call void @dfmt_list(%struct._IO_FILE* %196) #17
  tail call void @exit(i32 0) #21
  unreachable

197:                                              ; preds = %35
  %198 = icmp eq i32 %2, 2
  br i1 %198, label %199, label %367

199:                                              ; preds = %197
  store i8 1, i8* @tasm_compatible_mode, align 1
  br label %367

200:                                              ; preds = %35
  tail call fastcc void @show_version()
  unreachable

201:                                              ; preds = %35, %35
  %202 = icmp eq i32 %2, 1
  br i1 %202, label %203, label %367

203:                                              ; preds = %201
  store i32 2, i32* @operating_mode, align 4
  br label %367

204:                                              ; preds = %35
  %205 = icmp eq i32 %2, 1
  br i1 %205, label %206, label %367

206:                                              ; preds = %204
  store %struct.preproc_ops* @preproc_nop, %struct.preproc_ops** @preproc, align 8
  br label %367

207:                                              ; preds = %35, %35
  %208 = icmp eq i32 %2, 2
  br i1 %208, label %209, label %367

209:                                              ; preds = %207
  %210 = tail call zeroext i1 @set_warning_status(i8* %37) #17
  br label %367

211:                                              ; preds = %35
  %212 = icmp eq i32 %2, 1
  %213 = getelementptr inbounds i8, i8* %0, i64 2
  %214 = load i8, i8* %213, align 1
  %215 = sext i8 %214 to i32
  br i1 %212, label %216, label %218

216:                                              ; preds = %211
  switch i32 %215, label %240 [
    i32 87, label %217
    i32 68, label %242
    i32 70, label %242
    i32 84, label %242
    i32 81, label %242
  ]

217:                                              ; preds = %216
  store i8* (i8*)* @quote_for_wmake, i8* (i8*)** @quote_for_make, align 8
  br label %240

218:                                              ; preds = %211
  switch i32 %215, label %239 [
    i32 0, label %219
    i32 71, label %220
    i32 80, label %221
    i32 68, label %222
    i32 70, label %234
    i32 84, label %235
    i32 81, label %236
    i32 87, label %240
  ]

219:                                              ; preds = %218
  store i32 4, i32* @operating_mode, align 4
  br label %240

220:                                              ; preds = %218
  store i32 4, i32* @operating_mode, align 4
  store i1 true, i1* @depend_missing_ok, align 1
  br label %240

221:                                              ; preds = %218
  store i1 true, i1* @depend_emit_phony, align 1
  br label %240

222:                                              ; preds = %218
  %223 = load i32, i32* @operating_mode, align 4
  %224 = or i32 %223, 4
  store i32 %224, i32* @operating_mode, align 4
  %225 = icmp eq i8* %1, null
  br i1 %225, label %240, label %226

226:                                              ; preds = %222
  %227 = load i8, i8* %1, align 1
  %228 = icmp eq i8 %227, 45
  br i1 %228, label %229, label %233

229:                                              ; preds = %226
  %230 = getelementptr inbounds i8, i8* %1, i64 1
  %231 = load i8, i8* %230, align 1
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %233, label %240

233:                                              ; preds = %229, %226
  store i8* %1, i8** @depend_file, align 8
  br label %246

234:                                              ; preds = %218
  store i8* %1, i8** @depend_file, align 8
  br label %242

235:                                              ; preds = %218
  store i8* %1, i8** @depend_target, align 8
  br label %242

236:                                              ; preds = %218
  %237 = load i8* (i8*)*, i8* (i8*)** @quote_for_make, align 8
  %238 = tail call i8* %237(i8* %1) #17, !callees !3
  store i8* %238, i8** @depend_target, align 8
  br label %242

239:                                              ; preds = %218
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.77, i64 0, i64 0), i32 %215) #17
  br label %240

240:                                              ; preds = %222, %219, %220, %221, %218, %239, %229, %217, %216
  %241 = icmp eq i8 %39, 0
  br i1 %241, label %367, label %242

242:                                              ; preds = %216, %216, %216, %216, %234, %235, %236, %240
  %243 = icmp eq i8* %1, null
  br i1 %243, label %249, label %244

244:                                              ; preds = %242
  %245 = load i8, i8* %1, align 1
  br label %246

246:                                              ; preds = %244, %233
  %247 = phi i8 [ %245, %244 ], [ %227, %233 ]
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %249, label %367

249:                                              ; preds = %246, %242
  %250 = load i8, i8* %213, align 1
  %251 = sext i8 %250 to i32
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.78, i64 0, i64 0), i32 %251) #17
  br label %367

252:                                              ; preds = %35
  %253 = getelementptr inbounds i8, i8* %0, i64 2
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %252
  store i1 true, i1* @stopoptions, align 1
  br label %367

257:                                              ; preds = %252
  %258 = tail call i64 @strlen(i8* %253) #18
  br label %259

259:                                              ; preds = %257, %275
  %260 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.106, i64 0, i64 0), %257 ], [ %278, %275 ]
  %261 = phi %struct.textargs* [ getelementptr inbounds ([18 x %struct.textargs], [18 x %struct.textargs]* @textopts, i64 0, i64 0), %257 ], [ %276, %275 ]
  %262 = tail call i64 @strlen(i8* nonnull %260) #18
  %263 = icmp ugt i64 %262, %258
  br i1 %263, label %275, label %264

264:                                              ; preds = %259
  %265 = tail call i32 @nasm_memicmp(i8* %253, i8* nonnull %260, i64 %262) #18
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %275

267:                                              ; preds = %264
  %268 = add i64 %262, -1
  %269 = getelementptr inbounds i8, i8* %260, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = icmp eq i8 %270, 45
  br i1 %271, label %281, label %272

272:                                              ; preds = %267
  %273 = getelementptr inbounds i8, i8* %253, i64 %262
  %274 = load i8, i8* %273, align 1
  switch i8 %274, label %275 [
    i8 0, label %281
    i8 61, label %281
  ]

275:                                              ; preds = %272, %264, %259
  %276 = getelementptr inbounds %struct.textargs, %struct.textargs* %261, i64 1
  %277 = getelementptr inbounds %struct.textargs, %struct.textargs* %276, i64 0, i32 0
  %278 = load i8*, i8** %277, align 8
  %279 = icmp eq i8* %278, null
  br i1 %279, label %280, label %259

280:                                              ; preds = %275
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.79, i64 0, i64 0), i8* %253) #17
  br label %281

281:                                              ; preds = %267, %272, %272, %280
  %282 = phi %struct.textargs* [ %276, %280 ], [ %261, %272 ], [ %261, %272 ], [ %261, %267 ]
  %283 = getelementptr inbounds %struct.textargs, %struct.textargs* %282, i64 0, i32 1
  %284 = load i32, i32* %283, align 8
  %285 = getelementptr inbounds i8, i8* %253, i64 %262
  %286 = tail call i8* @strchr(i8* %285, i32 61) #18
  store i8* %286, i8** %4, align 8
  %287 = icmp ne i8* %286, null
  br i1 %287, label %288, label %290

288:                                              ; preds = %281
  %289 = getelementptr inbounds i8, i8* %286, i64 1
  store i8* %289, i8** %4, align 8
  store i8 0, i8* %286, align 1
  br label %290

290:                                              ; preds = %288, %281
  %291 = getelementptr inbounds %struct.textargs, %struct.textargs* %282, i64 0, i32 2
  %292 = load i32, i32* %291, align 4
  switch i32 %292, label %303 [
    i32 1, label %293
    i32 0, label %299
  ]

293:                                              ; preds = %290
  %294 = load i8*, i8** %4, align 8
  %295 = icmp eq i8* %294, null
  br i1 %295, label %296, label %303

296:                                              ; preds = %293
  store i8* %1, i8** %4, align 8
  %297 = icmp eq i8* %1, null
  br i1 %297, label %298, label %303

298:                                              ; preds = %296
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.80, i64 0, i64 0), i8* %253) #17
  br label %355

299:                                              ; preds = %290
  %300 = load i8*, i8** %4, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %299
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.81, i64 0, i64 0), i8* %253) #17
  br label %355

303:                                              ; preds = %293, %296, %299, %290
  %304 = phi i8 [ %39, %290 ], [ %39, %299 ], [ 1, %296 ], [ %39, %293 ]
  switch i32 %284, label %354 [
    i32 0, label %355
    i32 1, label %305
    i32 3, label %306
    i32 4, label %307
    i32 5, label %313
    i32 6, label %319
    i32 7, label %326
    i32 8, label %333
    i32 9, label %338
    i32 10, label %339
    i32 11, label %340
    i32 2, label %352
  ]

305:                                              ; preds = %303
  tail call fastcc void @show_version()
  unreachable

306:                                              ; preds = %303
  store i1 true, i1* @abort_on_panic, align 1
  br label %355

307:                                              ; preds = %303
  %308 = icmp eq i32 %2, 2
  br i1 %308, label %309, label %355

309:                                              ; preds = %307
  %310 = getelementptr inbounds %struct.textargs, %struct.textargs* %282, i64 0, i32 3
  %311 = load i32, i32* %310, align 8
  %312 = load i8*, i8** %4, align 8
  tail call void @set_label_mangle(i32 %311, i8* %312) #17
  br label %355

313:                                              ; preds = %303
  %314 = icmp eq i32 %2, 2
  br i1 %314, label %315, label %355

315:                                              ; preds = %313
  %316 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %317 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %316, i64 0, i32 8
  %318 = load void (i8*)*, void (i8*)** %317, align 8
  tail call void %318(i8* %1) #17
  br label %355

319:                                              ; preds = %303
  %320 = icmp eq i32 %2, 2
  br i1 %320, label %321, label %355

321:                                              ; preds = %319
  %322 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %323 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %322, i64 0, i32 9
  %324 = load void (i8*, i8*)*, void (i8*, i8*)** %323, align 8
  %325 = load i8*, i8** %4, align 8
  tail call void %324(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0), i8* %325) #17
  br label %355

326:                                              ; preds = %303
  %327 = icmp eq i32 %2, 2
  br i1 %327, label %328, label %355

328:                                              ; preds = %326
  %329 = load %struct.preproc_ops*, %struct.preproc_ops** @preproc, align 8
  %330 = getelementptr inbounds %struct.preproc_ops, %struct.preproc_ops* %329, i64 0, i32 9
  %331 = load void (i8*, i8*)*, void (i8*, i8*)** %330, align 8
  %332 = load i8*, i8** %4, align 8
  tail call void %331(i8* null, i8* %332) #17
  br label %355

333:                                              ; preds = %303
  %334 = icmp eq i32 %2, 1
  br i1 %334, label %335, label %355

335:                                              ; preds = %333
  %336 = load i8*, i8** %4, align 8
  %337 = tail call i32 @nasm_set_limit(i8* %285, i8* %336)
  br label %355

338:                                              ; preds = %303
  store i1 true, i1* @keep_all, align 1
  br label %355

339:                                              ; preds = %303
  store i8 1, i8* @pp_noline, align 1
  br label %355

340:                                              ; preds = %303
  %341 = load i8*, i8** %4, align 8
  %342 = icmp eq i8* %341, null
  br i1 %342, label %345, label %343

343:                                              ; preds = %340
  %344 = tail call i64 @strtoul(i8* nocapture nonnull %341, i8** null, i32 10) #17
  br label %349

345:                                              ; preds = %340
  %346 = load i32, i32* @debug_nasm, align 4
  %347 = add i32 %346, 1
  %348 = zext i32 %347 to i64
  br label %349

349:                                              ; preds = %345, %343
  %350 = phi i64 [ %344, %343 ], [ %348, %345 ]
  %351 = trunc i64 %350 to i32
  store i32 %351, i32* @debug_nasm, align 4
  br label %355

352:                                              ; preds = %303
  %353 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  tail call fastcc void @help(%struct._IO_FILE* %353)
  tail call void @exit(i32 0) #21
  unreachable

354:                                              ; preds = %303
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 1344) #19
  unreachable

355:                                              ; preds = %298, %302, %333, %335, %326, %328, %319, %321, %313, %315, %307, %309, %349, %303, %339, %338, %306
  %356 = phi i8 [ %304, %333 ], [ %304, %335 ], [ %304, %326 ], [ %304, %328 ], [ %304, %319 ], [ %304, %321 ], [ %304, %313 ], [ %304, %315 ], [ %304, %307 ], [ %304, %309 ], [ %304, %349 ], [ %304, %303 ], [ %304, %339 ], [ %304, %338 ], [ %304, %306 ], [ 1, %298 ], [ %39, %302 ]
  br i1 %287, label %357, label %367

357:                                              ; preds = %355
  store i8 61, i8* %286, align 1
  br label %367

358:                                              ; preds = %35
  tail call void (i32, i8*, ...) @nasm_nonfatalf(i32 64, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.83, i64 0, i64 0), i32 %40) #17
  br label %367

359:                                              ; preds = %7, %9
  %360 = icmp eq i32 %2, 2
  br i1 %360, label %361, label %367

361:                                              ; preds = %359
  %362 = load i8*, i8** @inname, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %361
  tail call void (i8*, ...) @nasm_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i64 0, i64 0), i8* nonnull %0) #19
  unreachable

365:                                              ; preds = %361
  %366 = tail call noalias i8* @nasm_strdup(i8* nonnull %0) #17
  store i8* %366, i8** @inname, align 8
  br label %367

367:                                              ; preds = %148, %122, %256, %357, %355, %64, %88, %85, %55, %187, %246, %240, %359, %365, %249, %358, %43, %41, %51, %45, %53, %59, %91, %89, %97, %95, %103, %101, %109, %107, %118, %112, %120, %160, %154, %164, %162, %176, %183, %165, %191, %185, %199, %197, %203, %201, %206, %204, %209, %207
  %368 = phi i8 [ 0, %365 ], [ 0, %359 ], [ %39, %358 ], [ %39, %256 ], [ %356, %357 ], [ %356, %355 ], [ 0, %240 ], [ 1, %249 ], [ 1, %246 ], [ %39, %209 ], [ %39, %207 ], [ %39, %206 ], [ %39, %204 ], [ %39, %203 ], [ %39, %201 ], [ %39, %199 ], [ %39, %197 ], [ %39, %187 ], [ %39, %191 ], [ %39, %185 ], [ %39, %176 ], [ %39, %183 ], [ %39, %165 ], [ %39, %164 ], [ %39, %162 ], [ %39, %160 ], [ %39, %154 ], [ %39, %120 ], [ %39, %118 ], [ %39, %112 ], [ %39, %109 ], [ %39, %107 ], [ %39, %103 ], [ %39, %101 ], [ %39, %97 ], [ %39, %95 ], [ %39, %91 ], [ %39, %89 ], [ %39, %64 ], [ %39, %88 ], [ %39, %85 ], [ %39, %59 ], [ %39, %55 ], [ %39, %53 ], [ %39, %51 ], [ %39, %45 ], [ %39, %43 ], [ %39, %41 ], [ %39, %122 ], [ %39, %148 ]
  %369 = icmp ne i8 %368, 0
  br label %370

370:                                              ; preds = %29, %28, %7, %3, %367
  %371 = phi i1 [ %369, %367 ], [ false, %7 ], [ false, %3 ], [ false, %28 ], [ false, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #17
  ret i1 %371
}

; Function Attrs: nofree nounwind
declare void @perror(i8* nocapture readonly) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i8* @fgets(i8*, i32, %struct._IO_FILE* nocapture) local_unnamed_addr #5

declare i8* @nasm_skip_spaces(i8*) local_unnamed_addr #3

; Function Attrs: allocsize(1)
declare i8* @nasm_realloc(i8*, i64) local_unnamed_addr #12

; Function Attrs: nofree nounwind readonly
declare i64 @strcspn(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #2

declare %struct.ofmt* @ofmt_find(i8*, %struct.ofmt_alias**) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #5

declare %struct.strlist_entry* @strlist_add(%struct.strlist*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @help(%struct._IO_FILE*) unnamed_addr #0 {
  %2 = load i8*, i8** @_progname, align 8
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.91, i64 0, i64 0), i8* %2, i8* %2)
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([902 x i8], [902 x i8]* @.str.92, i64 0, i64 0), i64 901, i64 1, %struct._IO_FILE* %0)
  %5 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  tail call void @ofmt_list(%struct.ofmt* %5, %struct._IO_FILE* %0) #17
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([160 x i8], [160 x i8]* @.str.93, i64 0, i64 0), i64 159, i64 1, %struct._IO_FILE* %0)
  tail call void @dfmt_list(%struct._IO_FILE* %0) #17
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([2063 x i8], [2063 x i8]* @.str.94, i64 0, i64 0), i64 2062, i64 1, %struct._IO_FILE* %0)
  %8 = load i8*, i8** getelementptr inbounds ([36 x i8*], [36 x i8*]* @warning_name, i64 0, i64 35), align 8
  %9 = load i8*, i8** getelementptr inbounds ([36 x i8*], [36 x i8*]* @warning_help, i64 0, i64 35), align 8
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i64 0, i64 0), i8* %8, i8* %9)
  %11 = load i8*, i8** getelementptr inbounds ([36 x i8*], [36 x i8*]* @warning_name, i64 0, i64 1), align 8
  br label %12

12:                                               ; preds = %67, %1
  %13 = phi i8* [ %11, %1 ], [ %20, %67 ]
  %14 = phi i64 [ 1, %1 ], [ %18, %67 ]
  %15 = add nsw i64 %14, -1
  %16 = getelementptr inbounds [36 x i8*], [36 x i8*]* @warning_name, i64 0, i64 %15
  %17 = load i8*, i8** %16, align 8
  %18 = add nuw nsw i64 %14, 1
  %19 = getelementptr inbounds [36 x i8*], [36 x i8*]* @warning_name, i64 0, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %17, null
  br i1 %21, label %55, label %22

22:                                               ; preds = %12
  %23 = tail call i64 @strlen(i8* nonnull %17) #18
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds i8, i8* %13, i64 1
  %26 = tail call i8* @strchr(i8* %25, i32 45) #18
  %27 = icmp eq i8* %26, null
  br i1 %27, label %55, label %28

28:                                               ; preds = %22
  %29 = ptrtoint i8* %13 to i64
  br label %30

30:                                               ; preds = %28, %51
  %31 = phi i8* [ %26, %28 ], [ %53, %51 ]
  %32 = ptrtoint i8* %31 to i64
  %33 = sub i64 %32, %29
  %34 = trunc i64 %33 to i32
  %35 = add nsw i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = tail call i32 @strncmp(i8* %20, i8* %13, i64 %36) #18
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %55

39:                                               ; preds = %30
  %40 = icmp slt i32 %34, %24
  br i1 %40, label %41, label %49

41:                                               ; preds = %39
  %42 = shl i64 %33, 32
  %43 = ashr exact i64 %42, 32
  %44 = tail call i32 @strncmp(i8* nonnull %17, i8* %13, i64 %43) #18
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = getelementptr inbounds i8, i8* %17, i64 %43
  %48 = load i8, i8* %47, align 1
  switch i8 %48, label %49 [
    i8 45, label %51
    i8 0, label %51
  ]

49:                                               ; preds = %46, %41, %39
  %50 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.96, i64 0, i64 0), i32 %34, i8* %13, i32 %35, i8* %13)
  br label %51

51:                                               ; preds = %49, %46, %46
  %52 = getelementptr inbounds i8, i8* %31, i64 1
  %53 = tail call i8* @strchr(i8* %52, i32 45) #18
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %30

55:                                               ; preds = %51, %30, %22, %12
  %56 = getelementptr inbounds [36 x i8*], [36 x i8*]* @warning_help, i64 0, i64 %14
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds [35 x i8], [35 x i8]* @warning_default, i64 0, i64 %14
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %55
  %64 = and i32 %60, 1
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %65, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i64 0, i64 0)
  br label %67

67:                                               ; preds = %55, %63
  %68 = phi i8* [ %66, %63 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.98, i64 0, i64 0), %55 ]
  %69 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.97, i64 0, i64 0), i8* %13, i8* %57, i8* %68)
  %70 = icmp eq i64 %18, 35
  br i1 %70, label %71, label %12

71:                                               ; preds = %67
  %72 = tail call i64 @fwrite(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.101, i64 0, i64 0), i64 41, i64 1, %struct._IO_FILE* %0)
  br label %73

73:                                               ; preds = %87, %71
  %74 = phi i64 [ 0, %71 ], [ %88, %87 ]
  %75 = getelementptr inbounds [8 x %struct.limit_info], [8 x %struct.limit_info]* @limit_info, i64 0, i64 %74, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = getelementptr inbounds [8 x %struct.limit_info], [8 x %struct.limit_info]* @limit_info, i64 0, i64 %74, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.102, i64 0, i64 0), i8* %76, i8* %78)
  %80 = getelementptr inbounds [8 x i64], [8 x i64]* @nasm_limit, i64 0, i64 %74
  %81 = load i64, i64* %80, align 8
  %82 = icmp slt i64 %81, 4611686018427387903
  br i1 %82, label %83, label %85

83:                                               ; preds = %73
  %84 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i64 0, i64 0), i64 %81)
  br label %87

85:                                               ; preds = %73
  %86 = tail call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %0)
  br label %87

87:                                               ; preds = %83, %85
  %88 = add nuw nsw i64 %74, 1
  %89 = icmp eq i64 %88, 8
  br i1 %89, label %90, label %73

90:                                               ; preds = %87
  ret void
}

declare void @dfmt_list(%struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind ssp uwtable
define internal fastcc void @show_version() unnamed_addr #13 {
  %1 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.105, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @nasm_version, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @nasm_compile_options, i64 0, i64 0))
  tail call void @exit(i32 0) #21
  unreachable
}

declare zeroext i1 @set_warning_status(i8*) local_unnamed_addr #3

; Function Attrs: nounwind readonly
declare i32 @nasm_memicmp(i8*, i8*, i64) local_unnamed_addr #14

declare void @set_label_mangle(i32, i8*) local_unnamed_addr #3

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #4

declare void @ofmt_list(%struct.ofmt*, %struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #5

declare void @saa_rewind(%struct.SAA*) local_unnamed_addr #3

declare i8* @saa_rstruct(%struct.SAA*) local_unnamed_addr #3

declare zeroext i1 @process_directives(i8*) local_unnamed_addr #3

declare %struct.insn* @parse_line(i8*, %struct.insn*) local_unnamed_addr #3

declare void @cleanup_insn(%struct.insn*) local_unnamed_addr #3

declare void @nasm_info(i8*, ...) local_unnamed_addr #3

declare i8* @saa_wstruct(%struct.SAA*) local_unnamed_addr #3

declare i64 @insn_size(i32, i64, i32, %struct.insn*) local_unnamed_addr #3

declare i64 @assemble(i32, i64, i32, %struct.insn*) local_unnamed_addr #3

declare %struct.RAA* @raa_write(%struct.RAA*, i64, i64) local_unnamed_addr #3

declare %struct.strlist_entry* @strlist_printf(%struct.strlist*, i8*, ...) local_unnamed_addr #3

declare void @strlist_write(%struct.strlist*, i8*, %struct._IO_FILE*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #15

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #16

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nofree nounwind }
attributes #16 = { nofree nounwind readonly }
attributes #17 = { nounwind }
attributes #18 = { nounwind readonly }
attributes #19 = { cold noreturn nounwind }
attributes #20 = { cold nounwind }
attributes #21 = { noreturn nounwind }
attributes #22 = { nounwind allocsize(0) }
attributes #23 = { nounwind allocsize(1) }
attributes #24 = { cold noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i8* (i8*)* @quote_for_pmake, i8* (i8*)* @quote_for_wmake}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!"branch_weights", i32 2000, i32 2001, i32 1}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !8}
