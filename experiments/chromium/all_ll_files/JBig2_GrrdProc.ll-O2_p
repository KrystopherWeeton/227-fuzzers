; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_GrrdProc.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_GrrdProc.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CJBig2_GRRDProc = type <{ i8, i8, [2 x i8], i32, i32, i32, i32, [4 x i8], %"class.fxcrt::UnownedPtr", [4 x i8], [4 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.CJBig2_Image* }
%class.CJBig2_Image = type <{ %"class.fxcrt::MaybeOwned", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr", %"class.fxcrt::UnownedPtr.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.fxcrt::UnownedPtr.1" = type { i8* }
%class.CJBig2_ArithDecoder = type { i8, i8, i8, i32, i32, i32, %"class.fxcrt::UnownedPtr.6" }
%"class.fxcrt::UnownedPtr.6" = type { %class.CJBig2_BitStream* }
%class.CJBig2_BitStream = type <{ %"class.pdfium::span", i32, i32, i32, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.7", i64 }
%"class.fxcrt::UnownedPtr.7" = type { i8* }
%class.JBig2ArithCtx = type { i8, i32 }

@_ZN15CJBig2_GRRDProcC1Ev = hidden unnamed_addr alias void (%class.CJBig2_GRRDProc*), void (%class.CJBig2_GRRDProc*)* @_ZN15CJBig2_GRRDProcC2Ev
@_ZN15CJBig2_GRRDProcD1Ev = hidden unnamed_addr alias void (%class.CJBig2_GRRDProc*), void (%class.CJBig2_GRRDProc*)* @_ZN15CJBig2_GRRDProcD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN15CJBig2_GRRDProcC2Ev(%class.CJBig2_GRRDProc* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  store %class.CJBig2_Image* null, %class.CJBig2_Image** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN15CJBig2_GRRDProcD2Ev(%class.CJBig2_GRRDProc* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc6DecodeEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc*, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = tail call zeroext i1 @_ZN12CJBig2_Image16IsValidImageSizeEii(i32 %5, i32 %7) #7
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = tail call i8* @_Znwm(i64 32) #8
  %11 = bitcast i8* %10 to %class.CJBig2_Image*
  %12 = load i32, i32* %4, align 4
  %13 = load i32, i32* %6, align 4
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %11, i32 %12, i32 %13) #7
  br label %64

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %49

18:                                               ; preds = %14
  %19 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 0
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, -1
  br i1 %21, label %22, label %47

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -1
  br i1 %25, label %26, label %47

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 2
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, -1
  br i1 %29, label %30, label %47

30:                                               ; preds = %26
  %31 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 3
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, -1
  br i1 %33, label %34, label %47

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %47

38:                                               ; preds = %34
  %39 = load i32, i32* %4, align 4
  %40 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %41 = load %class.CJBig2_Image*, %class.CJBig2_Image** %40, align 8
  %42 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %41, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %39, %43
  br i1 %44, label %45, label %47

45:                                               ; preds = %38
  %46 = tail call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc18DecodeTemplate0OptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* %0, %class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %2)
  br label %64

47:                                               ; preds = %38, %34, %30, %26, %22, %18
  %48 = tail call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc20DecodeTemplate0UnoptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* %0, %class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %2)
  br label %64

49:                                               ; preds = %14
  %50 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %62

53:                                               ; preds = %49
  %54 = load i32, i32* %4, align 4
  %55 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %56 = load %class.CJBig2_Image*, %class.CJBig2_Image** %55, align 8
  %57 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %56, i64 0, i32 1
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %54, %58
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = tail call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc18DecodeTemplate1OptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* %0, %class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %2)
  br label %64

62:                                               ; preds = %53, %49
  %63 = tail call %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc20DecodeTemplate1UnoptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* %0, %class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %2)
  br label %64

64:                                               ; preds = %62, %60, %47, %45, %9
  %65 = phi %class.CJBig2_Image* [ %61, %60 ], [ %63, %62 ], [ %46, %45 ], [ %48, %47 ], [ %11, %9 ]
  ret %class.CJBig2_Image* %65
}

declare zeroext i1 @_ZN12CJBig2_Image16IsValidImageSizeEii(i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc18DecodeTemplate0OptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* nocapture, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %5 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %6 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %432, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = tail call i8* @_Znwm(i64 32) #8
  %15 = bitcast i8* %14 to %class.CJBig2_Image*
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %15, i32 %11, i32 %13) #7
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %431, label %21

21:                                               ; preds = %9
  %22 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %23 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 0, i32 1, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  %38 = load i32, i32* %37, align 8
  %39 = sub i32 1, %36
  %40 = icmp sge i32 %38, %39
  %41 = icmp slt i32 %38, %36
  %42 = and i1 %40, %41
  br i1 %42, label %44, label %43

43:                                               ; preds = %21
  store i32 0, i32* %37, align 8
  br label %44

44:                                               ; preds = %21, %43
  %45 = phi i32 [ %38, %21 ], [ 0, %43 ]
  %46 = sub nsw i32 0, %45
  %47 = sext i32 %46 to i64
  %48 = mul nsw i64 %47, %32
  %49 = icmp sgt i32 %13, 0
  br i1 %49, label %50, label %432

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 1
  %52 = getelementptr inbounds %class.CJBig2_ArithDecoder, %class.CJBig2_ArithDecoder* %1, i64 0, i32 0
  %53 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 16
  %54 = add nsw i32 %36, -1
  %55 = sub nsw i64 %48, %32
  %56 = add nsw i64 %48, %32
  %57 = icmp sgt i32 %11, 0
  %58 = sub nsw i64 1, %28
  %59 = add nsw i64 %48, 1
  %60 = sub nsw i64 %59, %32
  %61 = add nsw i64 %59, %32
  %62 = add i32 %36, 1
  br label %63

63:                                               ; preds = %422, %50
  %64 = phi i32 [ 0, %50 ], [ %429, %422 ]
  %65 = phi i8* [ %24, %50 ], [ %428, %422 ]
  %66 = phi i8* [ %19, %50 ], [ %423, %422 ]
  %67 = phi i32 [ 0, %50 ], [ %77, %422 ]
  %68 = load i8, i8* %51, align 1, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %76, label %70

70:                                               ; preds = %63
  %71 = load i8, i8* %52, align 8, !range !2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %431

73:                                               ; preds = %70
  %74 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %53) #7
  %75 = xor i32 %74, %67
  br label %76

76:                                               ; preds = %63, %73
  %77 = phi i32 [ %75, %73 ], [ %67, %63 ]
  %78 = icmp ne i32 %64, 0
  br i1 %78, label %79, label %84

79:                                               ; preds = %76
  %80 = getelementptr inbounds i8, i8* %66, i64 %29
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, 4
  br label %84

84:                                               ; preds = %76, %79
  %85 = phi i32 [ %83, %79 ], [ 0, %76 ]
  %86 = load i32, i32* %37, align 8
  %87 = sub nsw i32 %64, %86
  %88 = icmp sgt i32 %87, 0
  %89 = icmp sle i32 %87, %36
  %90 = and i1 %88, %89
  %91 = icmp sgt i32 %87, -1
  %92 = icmp slt i32 %87, %36
  %93 = and i1 %91, %92
  %94 = icmp sgt i32 %87, -2
  %95 = icmp slt i32 %87, %54
  %96 = and i1 %94, %95
  br i1 %90, label %97, label %101

97:                                               ; preds = %84
  %98 = getelementptr inbounds i8, i8* %65, i64 %55
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  br label %101

101:                                              ; preds = %84, %97
  %102 = phi i32 [ %100, %97 ], [ 0, %84 ]
  br i1 %93, label %103, label %107

103:                                              ; preds = %101
  %104 = getelementptr inbounds i8, i8* %65, i64 %48
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  br label %107

107:                                              ; preds = %101, %103
  %108 = phi i32 [ %106, %103 ], [ 0, %101 ]
  br i1 %96, label %109, label %113

109:                                              ; preds = %107
  %110 = getelementptr inbounds i8, i8* %65, i64 %56
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  br label %113

113:                                              ; preds = %107, %109
  %114 = phi i32 [ %112, %109 ], [ 0, %107 ]
  %115 = icmp eq i32 %77, 0
  %116 = and i32 %85, 7168
  %117 = and i32 %102, 192
  %118 = or i32 %117, %116
  %119 = lshr i32 %108, 3
  %120 = and i32 %119, 24
  %121 = or i32 %118, %120
  %122 = lshr i32 %114, 6
  %123 = or i32 %121, %122
  br i1 %115, label %128, label %124

124:                                              ; preds = %113
  br i1 %57, label %125, label %422

125:                                              ; preds = %124
  %126 = add nsw i32 %64, -1
  %127 = add nuw nsw i32 %64, 1
  br label %256

128:                                              ; preds = %113
  br i1 %57, label %129, label %422

129:                                              ; preds = %128, %216
  %130 = phi i64 [ %222, %216 ], [ 0, %128 ]
  %131 = phi i32 [ %217, %216 ], [ %123, %128 ]
  %132 = phi i32 [ %214, %216 ], [ %114, %128 ]
  %133 = phi i32 [ %213, %216 ], [ %108, %128 ]
  %134 = phi i32 [ %212, %216 ], [ %102, %128 ]
  %135 = phi i32 [ %157, %216 ], [ %85, %128 ]
  %136 = trunc i64 %130 to i32
  %137 = sub nsw i32 %11, %136
  %138 = icmp slt i32 %137, 8
  %139 = select i1 %138, i32 %137, i32 8
  br i1 %78, label %140, label %156

140:                                              ; preds = %129
  %141 = shl i32 %135, 8
  %142 = trunc i64 %130 to i32
  %143 = add i32 %142, 8
  %144 = icmp slt i32 %143, %11
  br i1 %144, label %145, label %153

145:                                              ; preds = %140
  %146 = lshr exact i64 %130, 3
  %147 = and i64 %146, 536870911
  %148 = add nsw i64 %58, %147
  %149 = getelementptr inbounds i8, i8* %66, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 4
  br label %153

153:                                              ; preds = %140, %145
  %154 = phi i32 [ %152, %145 ], [ 0, %140 ]
  %155 = or i32 %154, %141
  br label %156

156:                                              ; preds = %153, %129
  %157 = phi i32 [ %155, %153 ], [ %135, %129 ]
  %158 = load i32, i32* %37, align 8
  %159 = add i32 %62, %158
  %160 = icmp sgt i32 %64, %159
  br i1 %160, label %211, label %161

161:                                              ; preds = %156
  br i1 %90, label %162, label %177

162:                                              ; preds = %161
  %163 = shl i32 %134, 8
  %164 = trunc i64 %130 to i32
  %165 = add i32 %164, 8
  %166 = icmp slt i32 %165, %34
  br i1 %166, label %167, label %174

167:                                              ; preds = %162
  %168 = lshr exact i64 %130, 3
  %169 = and i64 %168, 536870911
  %170 = add i64 %60, %169
  %171 = getelementptr inbounds i8, i8* %65, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  br label %174

174:                                              ; preds = %162, %167
  %175 = phi i32 [ %173, %167 ], [ 0, %162 ]
  %176 = or i32 %175, %163
  br label %177

177:                                              ; preds = %174, %161
  %178 = phi i32 [ %176, %174 ], [ %134, %161 ]
  br i1 %93, label %179, label %194

179:                                              ; preds = %177
  %180 = shl i32 %133, 8
  %181 = trunc i64 %130 to i32
  %182 = add i32 %181, 8
  %183 = icmp slt i32 %182, %34
  br i1 %183, label %184, label %191

184:                                              ; preds = %179
  %185 = lshr exact i64 %130, 3
  %186 = and i64 %185, 536870911
  %187 = add i64 %59, %186
  %188 = getelementptr inbounds i8, i8* %65, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  br label %191

191:                                              ; preds = %179, %184
  %192 = phi i32 [ %190, %184 ], [ 0, %179 ]
  %193 = or i32 %192, %180
  br label %194

194:                                              ; preds = %191, %177
  %195 = phi i32 [ %193, %191 ], [ %133, %177 ]
  br i1 %96, label %196, label %211

196:                                              ; preds = %194
  %197 = shl i32 %132, 8
  %198 = trunc i64 %130 to i32
  %199 = add i32 %198, 8
  %200 = icmp slt i32 %199, %34
  br i1 %200, label %201, label %208

201:                                              ; preds = %196
  %202 = lshr exact i64 %130, 3
  %203 = and i64 %202, 536870911
  %204 = add i64 %61, %203
  %205 = getelementptr inbounds i8, i8* %65, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  br label %208

208:                                              ; preds = %196, %201
  %209 = phi i32 [ %207, %201 ], [ 0, %196 ]
  %210 = or i32 %209, %197
  br label %211

211:                                              ; preds = %194, %156, %208
  %212 = phi i32 [ %178, %208 ], [ 0, %156 ], [ %178, %194 ]
  %213 = phi i32 [ %195, %208 ], [ 0, %156 ], [ %195, %194 ]
  %214 = phi i32 [ %210, %208 ], [ 0, %156 ], [ 0, %194 ]
  %215 = icmp sgt i32 %137, 0
  br i1 %215, label %225, label %216

216:                                              ; preds = %225, %211
  %217 = phi i32 [ %131, %211 ], [ %253, %225 ]
  %218 = phi i8 [ 0, %211 ], [ %235, %225 ]
  %219 = lshr exact i64 %130, 3
  %220 = and i64 %219, 536870911
  %221 = getelementptr inbounds i8, i8* %66, i64 %220
  store i8 %218, i8* %221, align 1
  %222 = add nuw i64 %130, 8
  %223 = trunc i64 %222 to i32
  %224 = icmp sgt i32 %11, %223
  br i1 %224, label %129, label %422

225:                                              ; preds = %211, %225
  %226 = phi i32 [ %254, %225 ], [ 0, %211 ]
  %227 = phi i8 [ %235, %225 ], [ 0, %211 ]
  %228 = phi i32 [ %253, %225 ], [ %131, %211 ]
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %229
  %231 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %230) #7
  %232 = sub nsw i32 7, %226
  %233 = shl i32 %231, %232
  %234 = trunc i32 %233 to i8
  %235 = or i8 %227, %234
  %236 = shl i32 %228, 1
  %237 = and i32 %236, 6582
  %238 = shl i32 %231, 9
  %239 = lshr i32 %157, %232
  %240 = and i32 %239, 1024
  %241 = lshr i32 %212, %232
  %242 = and i32 %241, 64
  %243 = sub nsw i32 10, %226
  %244 = lshr i32 %213, %243
  %245 = and i32 %244, 8
  %246 = sub nsw i32 13, %226
  %247 = lshr i32 %214, %246
  %248 = and i32 %247, 1
  %249 = or i32 %240, %237
  %250 = or i32 %249, %242
  %251 = or i32 %250, %245
  %252 = or i32 %251, %248
  %253 = or i32 %252, %238
  %254 = add nuw nsw i32 %226, 1
  %255 = icmp slt i32 %254, %139
  br i1 %255, label %225, label %216

256:                                              ; preds = %125, %413
  %257 = phi i64 [ 0, %125 ], [ %419, %413 ]
  %258 = phi i32 [ %123, %125 ], [ %414, %413 ]
  %259 = phi i32 [ %114, %125 ], [ %335, %413 ]
  %260 = phi i32 [ %108, %125 ], [ %318, %413 ]
  %261 = phi i32 [ %102, %125 ], [ %301, %413 ]
  %262 = phi i32 [ %85, %125 ], [ %284, %413 ]
  %263 = trunc i64 %257 to i32
  %264 = sub nsw i32 %11, %263
  %265 = icmp slt i32 %264, 8
  %266 = select i1 %265, i32 %264, i32 8
  br i1 %78, label %267, label %283

267:                                              ; preds = %256
  %268 = shl i32 %262, 8
  %269 = trunc i64 %257 to i32
  %270 = add i32 %269, 8
  %271 = icmp slt i32 %270, %11
  br i1 %271, label %272, label %280

272:                                              ; preds = %267
  %273 = lshr exact i64 %257, 3
  %274 = and i64 %273, 536870911
  %275 = add nsw i64 %58, %274
  %276 = getelementptr inbounds i8, i8* %66, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = shl nuw nsw i32 %278, 4
  br label %280

280:                                              ; preds = %267, %272
  %281 = phi i32 [ %279, %272 ], [ 0, %267 ]
  %282 = or i32 %281, %268
  br label %283

283:                                              ; preds = %280, %256
  %284 = phi i32 [ %282, %280 ], [ %262, %256 ]
  br i1 %90, label %285, label %300

285:                                              ; preds = %283
  %286 = shl i32 %261, 8
  %287 = trunc i64 %257 to i32
  %288 = add i32 %287, 8
  %289 = icmp slt i32 %288, %34
  br i1 %289, label %290, label %297

290:                                              ; preds = %285
  %291 = lshr exact i64 %257, 3
  %292 = and i64 %291, 536870911
  %293 = add i64 %60, %292
  %294 = getelementptr inbounds i8, i8* %65, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  br label %297

297:                                              ; preds = %285, %290
  %298 = phi i32 [ %296, %290 ], [ 0, %285 ]
  %299 = or i32 %298, %286
  br label %300

300:                                              ; preds = %297, %283
  %301 = phi i32 [ %299, %297 ], [ %261, %283 ]
  br i1 %93, label %302, label %317

302:                                              ; preds = %300
  %303 = shl i32 %260, 8
  %304 = trunc i64 %257 to i32
  %305 = add i32 %304, 8
  %306 = icmp slt i32 %305, %34
  br i1 %306, label %307, label %314

307:                                              ; preds = %302
  %308 = lshr exact i64 %257, 3
  %309 = and i64 %308, 536870911
  %310 = add i64 %59, %309
  %311 = getelementptr inbounds i8, i8* %65, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = zext i8 %312 to i32
  br label %314

314:                                              ; preds = %302, %307
  %315 = phi i32 [ %313, %307 ], [ 0, %302 ]
  %316 = or i32 %315, %303
  br label %317

317:                                              ; preds = %314, %300
  %318 = phi i32 [ %316, %314 ], [ %260, %300 ]
  br i1 %96, label %319, label %334

319:                                              ; preds = %317
  %320 = shl i32 %259, 8
  %321 = trunc i64 %257 to i32
  %322 = add i32 %321, 8
  %323 = icmp slt i32 %322, %34
  br i1 %323, label %324, label %331

324:                                              ; preds = %319
  %325 = lshr exact i64 %257, 3
  %326 = and i64 %325, 536870911
  %327 = add i64 %61, %326
  %328 = getelementptr inbounds i8, i8* %65, i64 %327
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  br label %331

331:                                              ; preds = %319, %324
  %332 = phi i32 [ %330, %324 ], [ 0, %319 ]
  %333 = or i32 %332, %320
  br label %334

334:                                              ; preds = %317, %331
  %335 = phi i32 [ %333, %331 ], [ 0, %317 ]
  %336 = icmp sgt i32 %264, 0
  br i1 %336, label %337, label %413

337:                                              ; preds = %334, %387
  %338 = phi i32 [ %411, %387 ], [ 0, %334 ]
  %339 = phi i8 [ %392, %387 ], [ 0, %334 ]
  %340 = phi i32 [ %410, %387 ], [ %258, %334 ]
  %341 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %342 = add nuw nsw i32 %338, %263
  %343 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %341, i32 %342, i32 %64) #7
  %344 = load i8, i8* %51, align 1, !range !2
  %345 = icmp eq i8 %344, 0
  br i1 %345, label %380, label %346

346:                                              ; preds = %337
  %347 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %348 = add nsw i32 %342, -1
  %349 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %347, i32 %348, i32 %126) #7
  %350 = icmp eq i32 %343, %349
  br i1 %350, label %351, label %380

351:                                              ; preds = %346
  %352 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %353 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %352, i32 %342, i32 %126) #7
  %354 = icmp eq i32 %343, %353
  br i1 %354, label %355, label %380

355:                                              ; preds = %351
  %356 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %357 = add nuw nsw i32 %342, 1
  %358 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %356, i32 %357, i32 %126) #7
  %359 = icmp eq i32 %343, %358
  br i1 %359, label %360, label %380

360:                                              ; preds = %355
  %361 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %362 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %361, i32 %348, i32 %64) #7
  %363 = icmp eq i32 %343, %362
  br i1 %363, label %364, label %380

364:                                              ; preds = %360
  %365 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %366 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %365, i32 %357, i32 %64) #7
  %367 = icmp eq i32 %343, %366
  br i1 %367, label %368, label %380

368:                                              ; preds = %364
  %369 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %370 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %369, i32 %348, i32 %127) #7
  %371 = icmp eq i32 %343, %370
  br i1 %371, label %372, label %380

372:                                              ; preds = %368
  %373 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %374 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %373, i32 %342, i32 %127) #7
  %375 = icmp eq i32 %343, %374
  br i1 %375, label %376, label %380

376:                                              ; preds = %372
  %377 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %378 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %377, i32 %357, i32 %127) #7
  %379 = icmp eq i32 %343, %378
  br i1 %379, label %387, label %380

380:                                              ; preds = %337, %376, %372, %368, %364, %360, %355, %351, %346
  %381 = load i8, i8* %52, align 8, !range !2
  %382 = icmp eq i8 %381, 0
  br i1 %382, label %383, label %431

383:                                              ; preds = %380
  %384 = zext i32 %340 to i64
  %385 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %384
  %386 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %385) #7
  br label %387

387:                                              ; preds = %376, %383
  %388 = phi i32 [ %343, %376 ], [ %386, %383 ]
  %389 = sub nsw i32 7, %338
  %390 = shl i32 %388, %389
  %391 = trunc i32 %390 to i8
  %392 = or i8 %339, %391
  %393 = shl i32 %340, 1
  %394 = and i32 %393, 6582
  %395 = shl i32 %388, 9
  %396 = lshr i32 %284, %389
  %397 = and i32 %396, 1024
  %398 = lshr i32 %301, %389
  %399 = and i32 %398, 64
  %400 = sub nsw i32 10, %338
  %401 = lshr i32 %318, %400
  %402 = and i32 %401, 8
  %403 = sub nsw i32 13, %338
  %404 = lshr i32 %335, %403
  %405 = and i32 %404, 1
  %406 = or i32 %397, %394
  %407 = or i32 %406, %399
  %408 = or i32 %407, %402
  %409 = or i32 %408, %405
  %410 = or i32 %409, %395
  %411 = add nuw nsw i32 %338, 1
  %412 = icmp slt i32 %411, %266
  br i1 %412, label %337, label %413

413:                                              ; preds = %387, %334
  %414 = phi i32 [ %258, %334 ], [ %410, %387 ]
  %415 = phi i8 [ 0, %334 ], [ %392, %387 ]
  %416 = lshr exact i64 %257, 3
  %417 = and i64 %416, 536870911
  %418 = getelementptr inbounds i8, i8* %66, i64 %417
  store i8 %415, i8* %418, align 1
  %419 = add nuw i64 %257, 8
  %420 = trunc i64 %419 to i32
  %421 = icmp sgt i32 %11, %420
  br i1 %421, label %256, label %422

422:                                              ; preds = %413, %216, %124, %128
  %423 = getelementptr inbounds i8, i8* %66, i64 %28
  %424 = load i32, i32* %37, align 8
  %425 = add nsw i32 %424, %36
  %426 = icmp slt i32 %64, %425
  %427 = getelementptr inbounds i8, i8* %65, i64 %32
  %428 = select i1 %426, i8* %427, i8* %65
  %429 = add nuw nsw i32 %64, 1
  %430 = icmp eq i32 %429, %13
  br i1 %430, label %432, label %63

431:                                              ; preds = %70, %380, %9
  tail call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %15) #7
  tail call void @_ZdlPv(i8* nonnull %14) #8
  br label %432

432:                                              ; preds = %422, %44, %431, %3
  %433 = phi i64 [ 0, %3 ], [ 0, %431 ], [ %16, %44 ], [ %16, %422 ]
  %434 = inttoptr i64 %433 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %434
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc20DecodeTemplate0UnoptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* readonly, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 3
  %5 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 4
  %6 = tail call i8* @_Znwm(i64 32) #8
  %7 = bitcast i8* %6 to %class.CJBig2_Image*
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %5, align 4
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %7, i32 %8, i32 %9) #7
  %10 = ptrtoint i8* %6 to i64
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %320, label %15

15:                                               ; preds = %3
  tail call void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image* nonnull %7, i1 zeroext false) #7
  %16 = load i32, i32* %5, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %321, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 1
  %20 = getelementptr inbounds %class.CJBig2_ArithDecoder, %class.CJBig2_ArithDecoder* %1, i64 0, i32 0
  %21 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 16
  %22 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %23 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %24 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  %25 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 2
  %26 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 3
  %27 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 0
  %28 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 1
  br label %29

29:                                               ; preds = %18, %317
  %30 = phi i32 [ 0, %18 ], [ %89, %317 ]
  %31 = phi i32 [ 0, %18 ], [ %41, %317 ]
  %32 = load i8, i8* %19, align 1, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = load i8, i8* %20, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %320

37:                                               ; preds = %34
  %38 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %21) #7
  %39 = xor i32 %38, %31
  br label %40

40:                                               ; preds = %29, %37
  %41 = phi i32 [ %39, %37 ], [ %31, %29 ]
  %42 = add i32 %30, -1
  %43 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 1, i32 %42) #7
  %44 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 0, i32 %42) #7
  %45 = shl i32 %44, 1
  %46 = or i32 %45, %43
  %47 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %48 = load i32, i32* %23, align 4
  %49 = sub i32 1, %48
  %50 = load i32, i32* %24, align 8
  %51 = xor i32 %50, -1
  %52 = add i32 %30, %51
  %53 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %47, i32 %49, i32 %52) #7
  %54 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %55 = load i32, i32* %23, align 4
  %56 = sub nsw i32 0, %55
  %57 = load i32, i32* %24, align 8
  %58 = xor i32 %57, -1
  %59 = add i32 %30, %58
  %60 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %54, i32 %56, i32 %59) #7
  %61 = shl i32 %60, 1
  %62 = or i32 %61, %53
  %63 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %64 = load i32, i32* %23, align 4
  %65 = sub i32 1, %64
  %66 = load i32, i32* %24, align 8
  %67 = sub i32 %30, %66
  %68 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %63, i32 %65, i32 %67) #7
  %69 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %70 = load i32, i32* %23, align 4
  %71 = sub nsw i32 0, %70
  %72 = load i32, i32* %24, align 8
  %73 = sub i32 %30, %72
  %74 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %69, i32 %71, i32 %73) #7
  %75 = shl i32 %74, 1
  %76 = or i32 %75, %68
  %77 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %78 = load i32, i32* %23, align 4
  %79 = xor i32 %78, -1
  %80 = load i32, i32* %24, align 8
  %81 = sub i32 %30, %80
  %82 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %77, i32 %79, i32 %81) #7
  %83 = shl i32 %82, 2
  %84 = or i32 %76, %83
  %85 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %86 = load i32, i32* %23, align 4
  %87 = sub i32 1, %86
  %88 = load i32, i32* %24, align 8
  %89 = add nuw i32 %30, 1
  %90 = sub i32 %89, %88
  %91 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %85, i32 %87, i32 %90) #7
  %92 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %93 = load i32, i32* %23, align 4
  %94 = sub nsw i32 0, %93
  %95 = load i32, i32* %24, align 8
  %96 = sub i32 %89, %95
  %97 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %92, i32 %94, i32 %96) #7
  %98 = shl i32 %97, 1
  %99 = or i32 %98, %91
  %100 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %101 = load i32, i32* %23, align 4
  %102 = xor i32 %101, -1
  %103 = load i32, i32* %24, align 8
  %104 = sub i32 %89, %103
  %105 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %100, i32 %102, i32 %104) #7
  %106 = shl i32 %105, 2
  %107 = or i32 %99, %106
  %108 = icmp eq i32 %41, 0
  %109 = load i32, i32* %4, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %108, label %112, label %111

111:                                              ; preds = %40
  br i1 %110, label %194, label %317

112:                                              ; preds = %40
  br i1 %110, label %113, label %317

113:                                              ; preds = %112, %141
  %114 = phi i32 [ %191, %141 ], [ 0, %112 ]
  %115 = phi i32 [ %161, %141 ], [ %46, %112 ]
  %116 = phi i32 [ %162, %141 ], [ 0, %112 ]
  %117 = phi i32 [ %172, %141 ], [ %62, %112 ]
  %118 = phi i32 [ %181, %141 ], [ %84, %112 ]
  %119 = phi i32 [ %190, %141 ], [ %107, %112 ]
  %120 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %121 = load i32, i32* %23, align 4
  %122 = sub i32 %114, %121
  %123 = load i8, i8* %25, align 2
  %124 = sext i8 %123 to i32
  %125 = add i32 %122, %124
  %126 = load i32, i32* %24, align 8
  %127 = sub i32 %30, %126
  %128 = load i8, i8* %26, align 1
  %129 = sext i8 %128 to i32
  %130 = add i32 %127, %129
  %131 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %120, i32 %125, i32 %130) #7
  %132 = load i8, i8* %27, align 8
  %133 = sext i8 %132 to i32
  %134 = add i32 %114, %133
  %135 = load i8, i8* %28, align 1
  %136 = sext i8 %135 to i32
  %137 = add i32 %30, %136
  %138 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %134, i32 %137) #7
  %139 = load i8, i8* %20, align 8, !range !2
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %141, label %320

141:                                              ; preds = %113
  %142 = shl i32 %118, 3
  %143 = or i32 %142, %119
  %144 = shl i32 %117, 6
  %145 = or i32 %143, %144
  %146 = shl i32 %131, 8
  %147 = shl nuw nsw i32 %116, 9
  %148 = shl i32 %115, 10
  %149 = shl i32 %138, 12
  %150 = or i32 %145, %147
  %151 = or i32 %150, %148
  %152 = or i32 %151, %146
  %153 = or i32 %152, %149
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %154
  %156 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %155) #7
  tail call void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* nonnull %7, i32 %114, i32 %30, i32 %156) #7
  %157 = shl i32 %115, 1
  %158 = add i32 %114, 2
  %159 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %158, i32 %42) #7
  %160 = or i32 %159, %157
  %161 = and i32 %160, 3
  %162 = and i32 %156, 1
  %163 = shl i32 %117, 1
  %164 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %165 = load i32, i32* %23, align 4
  %166 = sub i32 %158, %165
  %167 = load i32, i32* %24, align 8
  %168 = xor i32 %167, -1
  %169 = add i32 %30, %168
  %170 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %164, i32 %166, i32 %169) #7
  %171 = or i32 %170, %163
  %172 = and i32 %171, 3
  %173 = shl i32 %118, 1
  %174 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %175 = load i32, i32* %23, align 4
  %176 = sub i32 %158, %175
  %177 = load i32, i32* %24, align 8
  %178 = sub i32 %30, %177
  %179 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %174, i32 %176, i32 %178) #7
  %180 = or i32 %179, %173
  %181 = and i32 %180, 7
  %182 = shl i32 %119, 1
  %183 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %184 = load i32, i32* %23, align 4
  %185 = sub i32 %158, %184
  %186 = load i32, i32* %24, align 8
  %187 = sub i32 %89, %186
  %188 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %183, i32 %185, i32 %187) #7
  %189 = or i32 %188, %182
  %190 = and i32 %189, 7
  %191 = add nuw i32 %114, 1
  %192 = load i32, i32* %4, align 4
  %193 = icmp ult i32 %191, %192
  br i1 %193, label %113, label %317

194:                                              ; preds = %111, %278
  %195 = phi i32 [ %279, %278 ], [ 0, %111 ]
  %196 = phi i32 [ %285, %278 ], [ %46, %111 ]
  %197 = phi i32 [ %286, %278 ], [ 0, %111 ]
  %198 = phi i32 [ %296, %278 ], [ %62, %111 ]
  %199 = phi i32 [ %305, %278 ], [ %84, %111 ]
  %200 = phi i32 [ %314, %278 ], [ %107, %111 ]
  %201 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %202 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %201, i32 %195, i32 %30) #7
  %203 = load i8, i8* %19, align 1, !range !2
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %239, label %205

205:                                              ; preds = %194
  %206 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %207 = add i32 %195, -1
  %208 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %206, i32 %207, i32 %42) #7
  %209 = icmp eq i32 %202, %208
  br i1 %209, label %210, label %239

210:                                              ; preds = %205
  %211 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %212 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %211, i32 %195, i32 %42) #7
  %213 = icmp eq i32 %202, %212
  br i1 %213, label %214, label %239

214:                                              ; preds = %210
  %215 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %216 = add nuw i32 %195, 1
  %217 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %215, i32 %216, i32 %42) #7
  %218 = icmp eq i32 %202, %217
  br i1 %218, label %219, label %239

219:                                              ; preds = %214
  %220 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %221 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %220, i32 %207, i32 %30) #7
  %222 = icmp eq i32 %202, %221
  br i1 %222, label %223, label %239

223:                                              ; preds = %219
  %224 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %225 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %224, i32 %216, i32 %30) #7
  %226 = icmp eq i32 %202, %225
  br i1 %226, label %227, label %239

227:                                              ; preds = %223
  %228 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %229 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %228, i32 %207, i32 %89) #7
  %230 = icmp eq i32 %202, %229
  br i1 %230, label %231, label %239

231:                                              ; preds = %227
  %232 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %233 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %232, i32 %195, i32 %89) #7
  %234 = icmp eq i32 %202, %233
  br i1 %234, label %235, label %239

235:                                              ; preds = %231
  %236 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %237 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %236, i32 %216, i32 %89) #7
  %238 = icmp eq i32 %202, %237
  br i1 %238, label %278, label %239

239:                                              ; preds = %194, %235, %231, %227, %223, %219, %214, %210, %205
  %240 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %241 = load i32, i32* %23, align 4
  %242 = sub i32 %195, %241
  %243 = load i8, i8* %25, align 2
  %244 = sext i8 %243 to i32
  %245 = add i32 %242, %244
  %246 = load i32, i32* %24, align 8
  %247 = sub i32 %30, %246
  %248 = load i8, i8* %26, align 1
  %249 = sext i8 %248 to i32
  %250 = add i32 %247, %249
  %251 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %240, i32 %245, i32 %250) #7
  %252 = load i8, i8* %27, align 8
  %253 = sext i8 %252 to i32
  %254 = add i32 %195, %253
  %255 = load i8, i8* %28, align 1
  %256 = sext i8 %255 to i32
  %257 = add i32 %30, %256
  %258 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %254, i32 %257) #7
  %259 = load i8, i8* %20, align 8, !range !2
  %260 = icmp eq i8 %259, 0
  br i1 %260, label %261, label %320

261:                                              ; preds = %239
  %262 = shl i32 %199, 3
  %263 = or i32 %262, %200
  %264 = shl i32 %198, 6
  %265 = or i32 %263, %264
  %266 = shl i32 %251, 8
  %267 = shl nuw nsw i32 %197, 9
  %268 = shl i32 %196, 10
  %269 = shl i32 %258, 12
  %270 = or i32 %265, %267
  %271 = or i32 %270, %268
  %272 = or i32 %271, %266
  %273 = or i32 %272, %269
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %274
  %276 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %275) #7
  %277 = add nuw i32 %195, 1
  br label %278

278:                                              ; preds = %235, %261
  %279 = phi i32 [ %216, %235 ], [ %277, %261 ]
  %280 = phi i32 [ %202, %235 ], [ %276, %261 ]
  tail call void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* nonnull %7, i32 %195, i32 %30, i32 %280) #7
  %281 = shl i32 %196, 1
  %282 = add i32 %195, 2
  %283 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %282, i32 %42) #7
  %284 = or i32 %283, %281
  %285 = and i32 %284, 3
  %286 = and i32 %280, 1
  %287 = shl i32 %198, 1
  %288 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %289 = load i32, i32* %23, align 4
  %290 = sub i32 %282, %289
  %291 = load i32, i32* %24, align 8
  %292 = xor i32 %291, -1
  %293 = add i32 %30, %292
  %294 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %288, i32 %290, i32 %293) #7
  %295 = or i32 %294, %287
  %296 = and i32 %295, 3
  %297 = shl i32 %199, 1
  %298 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %299 = load i32, i32* %23, align 4
  %300 = sub i32 %282, %299
  %301 = load i32, i32* %24, align 8
  %302 = sub i32 %30, %301
  %303 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %298, i32 %300, i32 %302) #7
  %304 = or i32 %303, %297
  %305 = and i32 %304, 7
  %306 = shl i32 %200, 1
  %307 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %308 = load i32, i32* %23, align 4
  %309 = sub i32 %282, %308
  %310 = load i32, i32* %24, align 8
  %311 = sub i32 %89, %310
  %312 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %307, i32 %309, i32 %311) #7
  %313 = or i32 %312, %306
  %314 = and i32 %313, 7
  %315 = load i32, i32* %4, align 4
  %316 = icmp ult i32 %279, %315
  br i1 %316, label %194, label %317

317:                                              ; preds = %278, %141, %111, %112
  %318 = load i32, i32* %5, align 8
  %319 = icmp ult i32 %89, %318
  br i1 %319, label %29, label %321

320:                                              ; preds = %34, %239, %113, %3
  tail call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %7) #7
  tail call void @_ZdlPv(i8* nonnull %6) #8
  br label %321

321:                                              ; preds = %317, %15, %320
  %322 = phi i64 [ 0, %320 ], [ %10, %15 ], [ %10, %317 ]
  %323 = inttoptr i64 %322 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %323
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc18DecodeTemplate1OptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* nocapture, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %5 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %6 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %5, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %428, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = tail call i8* @_Znwm(i64 32) #8
  %15 = bitcast i8* %14 to %class.CJBig2_Image*
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %15, i32 %11, i32 %13) #7
  %16 = ptrtoint i8* %14 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i8**
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %427, label %21

21:                                               ; preds = %9
  %22 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %23 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 0, i32 1, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %class.CJBig2_Image, %class.CJBig2_Image* %22, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  %38 = load i32, i32* %37, align 8
  %39 = sub i32 1, %36
  %40 = icmp sge i32 %38, %39
  %41 = icmp slt i32 %38, %36
  %42 = and i1 %40, %41
  br i1 %42, label %44, label %43

43:                                               ; preds = %21
  store i32 0, i32* %37, align 8
  br label %44

44:                                               ; preds = %21, %43
  %45 = phi i32 [ %38, %21 ], [ 0, %43 ]
  %46 = sub nsw i32 0, %45
  %47 = sext i32 %46 to i64
  %48 = mul nsw i64 %47, %32
  %49 = icmp sgt i32 %13, 0
  br i1 %49, label %50, label %428

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 1
  %52 = getelementptr inbounds %class.CJBig2_ArithDecoder, %class.CJBig2_ArithDecoder* %1, i64 0, i32 0
  %53 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 8
  %54 = add nsw i32 %36, -1
  %55 = sub nsw i64 %48, %32
  %56 = add nsw i64 %48, %32
  %57 = icmp sgt i32 %11, 0
  %58 = sub nsw i64 1, %28
  %59 = add nsw i64 %48, 1
  %60 = sub nsw i64 %59, %32
  %61 = add nsw i64 %59, %32
  br label %62

62:                                               ; preds = %418, %50
  %63 = phi i32 [ 0, %50 ], [ %425, %418 ]
  %64 = phi i8* [ %24, %50 ], [ %424, %418 ]
  %65 = phi i8* [ %19, %50 ], [ %419, %418 ]
  %66 = phi i32 [ 0, %50 ], [ %76, %418 ]
  %67 = load i8, i8* %51, align 1, !range !2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %62
  %70 = load i8, i8* %52, align 8, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %427

72:                                               ; preds = %69
  %73 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %53) #7
  %74 = xor i32 %73, %66
  br label %75

75:                                               ; preds = %62, %72
  %76 = phi i32 [ %74, %72 ], [ %66, %62 ]
  %77 = icmp ne i32 %63, 0
  br i1 %77, label %78, label %83

78:                                               ; preds = %75
  %79 = getelementptr inbounds i8, i8* %65, i64 %29
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 1
  br label %83

83:                                               ; preds = %75, %78
  %84 = phi i32 [ %82, %78 ], [ 0, %75 ]
  %85 = load i32, i32* %37, align 8
  %86 = sub nsw i32 %63, %85
  %87 = icmp sgt i32 %86, 0
  %88 = icmp sle i32 %86, %36
  %89 = and i1 %87, %88
  %90 = icmp sgt i32 %86, -1
  %91 = icmp slt i32 %86, %36
  %92 = and i1 %90, %91
  %93 = icmp sgt i32 %86, -2
  %94 = icmp slt i32 %86, %54
  %95 = and i1 %93, %94
  br i1 %89, label %96, label %100

96:                                               ; preds = %83
  %97 = getelementptr inbounds i8, i8* %64, i64 %55
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  br label %100

100:                                              ; preds = %83, %96
  %101 = phi i32 [ %99, %96 ], [ 0, %83 ]
  br i1 %92, label %102, label %106

102:                                              ; preds = %100
  %103 = getelementptr inbounds i8, i8* %64, i64 %48
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  br label %106

106:                                              ; preds = %100, %102
  %107 = phi i32 [ %105, %102 ], [ 0, %100 ]
  br i1 %95, label %108, label %112

108:                                              ; preds = %106
  %109 = getelementptr inbounds i8, i8* %64, i64 %56
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  br label %112

112:                                              ; preds = %106, %108
  %113 = phi i32 [ %111, %108 ], [ 0, %106 ]
  %114 = icmp eq i32 %76, 0
  %115 = and i32 %84, 896
  %116 = lshr i32 %101, 2
  %117 = and i32 %116, 32
  %118 = or i32 %117, %115
  %119 = lshr i32 %107, 4
  %120 = and i32 %119, 12
  %121 = or i32 %118, %120
  %122 = lshr i32 %113, 6
  %123 = or i32 %121, %122
  br i1 %114, label %128, label %124

124:                                              ; preds = %112
  br i1 %57, label %125, label %418

125:                                              ; preds = %124
  %126 = add nsw i32 %63, -1
  %127 = add nuw nsw i32 %63, 1
  br label %251

128:                                              ; preds = %112
  br i1 %57, label %129, label %418

129:                                              ; preds = %128, %210
  %130 = phi i64 [ %216, %210 ], [ 0, %128 ]
  %131 = phi i32 [ %211, %210 ], [ %123, %128 ]
  %132 = phi i32 [ %208, %210 ], [ %113, %128 ]
  %133 = phi i32 [ %191, %210 ], [ %107, %128 ]
  %134 = phi i32 [ %174, %210 ], [ %101, %128 ]
  %135 = phi i32 [ %157, %210 ], [ %84, %128 ]
  %136 = trunc i64 %130 to i32
  %137 = sub nsw i32 %11, %136
  %138 = icmp slt i32 %137, 8
  %139 = select i1 %138, i32 %137, i32 8
  br i1 %77, label %140, label %156

140:                                              ; preds = %129
  %141 = shl i32 %135, 8
  %142 = trunc i64 %130 to i32
  %143 = add i32 %142, 8
  %144 = icmp slt i32 %143, %11
  br i1 %144, label %145, label %153

145:                                              ; preds = %140
  %146 = lshr exact i64 %130, 3
  %147 = and i64 %146, 536870911
  %148 = add nsw i64 %58, %147
  %149 = getelementptr inbounds i8, i8* %65, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 1
  br label %153

153:                                              ; preds = %140, %145
  %154 = phi i32 [ %152, %145 ], [ 0, %140 ]
  %155 = or i32 %154, %141
  br label %156

156:                                              ; preds = %153, %129
  %157 = phi i32 [ %155, %153 ], [ %135, %129 ]
  br i1 %89, label %158, label %173

158:                                              ; preds = %156
  %159 = shl i32 %134, 8
  %160 = trunc i64 %130 to i32
  %161 = add i32 %160, 8
  %162 = icmp slt i32 %161, %34
  br i1 %162, label %163, label %170

163:                                              ; preds = %158
  %164 = lshr exact i64 %130, 3
  %165 = and i64 %164, 536870911
  %166 = add i64 %60, %165
  %167 = getelementptr inbounds i8, i8* %64, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  br label %170

170:                                              ; preds = %158, %163
  %171 = phi i32 [ %169, %163 ], [ 0, %158 ]
  %172 = or i32 %171, %159
  br label %173

173:                                              ; preds = %170, %156
  %174 = phi i32 [ %172, %170 ], [ %134, %156 ]
  br i1 %92, label %175, label %190

175:                                              ; preds = %173
  %176 = shl i32 %133, 8
  %177 = trunc i64 %130 to i32
  %178 = add i32 %177, 8
  %179 = icmp slt i32 %178, %34
  br i1 %179, label %180, label %187

180:                                              ; preds = %175
  %181 = lshr exact i64 %130, 3
  %182 = and i64 %181, 536870911
  %183 = add i64 %59, %182
  %184 = getelementptr inbounds i8, i8* %64, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  br label %187

187:                                              ; preds = %175, %180
  %188 = phi i32 [ %186, %180 ], [ 0, %175 ]
  %189 = or i32 %188, %176
  br label %190

190:                                              ; preds = %187, %173
  %191 = phi i32 [ %189, %187 ], [ %133, %173 ]
  br i1 %95, label %192, label %207

192:                                              ; preds = %190
  %193 = shl i32 %132, 8
  %194 = trunc i64 %130 to i32
  %195 = add i32 %194, 8
  %196 = icmp slt i32 %195, %34
  br i1 %196, label %197, label %204

197:                                              ; preds = %192
  %198 = lshr exact i64 %130, 3
  %199 = and i64 %198, 536870911
  %200 = add i64 %61, %199
  %201 = getelementptr inbounds i8, i8* %64, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  br label %204

204:                                              ; preds = %192, %197
  %205 = phi i32 [ %203, %197 ], [ 0, %192 ]
  %206 = or i32 %205, %193
  br label %207

207:                                              ; preds = %190, %204
  %208 = phi i32 [ %206, %204 ], [ 0, %190 ]
  %209 = icmp sgt i32 %137, 0
  br i1 %209, label %219, label %210

210:                                              ; preds = %219, %207
  %211 = phi i32 [ %131, %207 ], [ %248, %219 ]
  %212 = phi i8 [ 0, %207 ], [ %229, %219 ]
  %213 = lshr exact i64 %130, 3
  %214 = and i64 %213, 536870911
  %215 = getelementptr inbounds i8, i8* %65, i64 %214
  store i8 %212, i8* %215, align 1
  %216 = add nuw i64 %130, 8
  %217 = trunc i64 %216 to i32
  %218 = icmp sgt i32 %11, %217
  br i1 %218, label %129, label %418

219:                                              ; preds = %207, %219
  %220 = phi i32 [ %249, %219 ], [ 0, %207 ]
  %221 = phi i8 [ %229, %219 ], [ 0, %207 ]
  %222 = phi i32 [ %248, %219 ], [ %131, %207 ]
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %223
  %225 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %224) #7
  %226 = sub nsw i32 7, %220
  %227 = shl i32 %225, %226
  %228 = trunc i32 %227 to i8
  %229 = or i8 %221, %228
  %230 = shl i32 %222, 1
  %231 = and i32 %230, 794
  %232 = shl i32 %225, 6
  %233 = lshr i32 %157, %226
  %234 = and i32 %233, 128
  %235 = sub nsw i32 9, %220
  %236 = lshr i32 %174, %235
  %237 = and i32 %236, 32
  %238 = sub nsw i32 11, %220
  %239 = lshr i32 %191, %238
  %240 = and i32 %239, 4
  %241 = sub nsw i32 13, %220
  %242 = lshr i32 %208, %241
  %243 = and i32 %242, 1
  %244 = or i32 %234, %231
  %245 = or i32 %244, %237
  %246 = or i32 %245, %240
  %247 = or i32 %246, %243
  %248 = or i32 %247, %232
  %249 = add nuw nsw i32 %220, 1
  %250 = icmp slt i32 %249, %139
  br i1 %250, label %219, label %210

251:                                              ; preds = %125, %409
  %252 = phi i64 [ 0, %125 ], [ %415, %409 ]
  %253 = phi i32 [ %123, %125 ], [ %410, %409 ]
  %254 = phi i32 [ %113, %125 ], [ %330, %409 ]
  %255 = phi i32 [ %107, %125 ], [ %313, %409 ]
  %256 = phi i32 [ %101, %125 ], [ %296, %409 ]
  %257 = phi i32 [ %84, %125 ], [ %279, %409 ]
  %258 = trunc i64 %252 to i32
  %259 = sub nsw i32 %11, %258
  %260 = icmp slt i32 %259, 8
  %261 = select i1 %260, i32 %259, i32 8
  br i1 %77, label %262, label %278

262:                                              ; preds = %251
  %263 = shl i32 %257, 8
  %264 = trunc i64 %252 to i32
  %265 = add i32 %264, 8
  %266 = icmp slt i32 %265, %11
  br i1 %266, label %267, label %275

267:                                              ; preds = %262
  %268 = lshr exact i64 %252, 3
  %269 = and i64 %268, 536870911
  %270 = add nsw i64 %58, %269
  %271 = getelementptr inbounds i8, i8* %65, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  %274 = shl nuw nsw i32 %273, 1
  br label %275

275:                                              ; preds = %262, %267
  %276 = phi i32 [ %274, %267 ], [ 0, %262 ]
  %277 = or i32 %276, %263
  br label %278

278:                                              ; preds = %275, %251
  %279 = phi i32 [ %277, %275 ], [ %257, %251 ]
  br i1 %89, label %280, label %295

280:                                              ; preds = %278
  %281 = shl i32 %256, 8
  %282 = trunc i64 %252 to i32
  %283 = add i32 %282, 8
  %284 = icmp slt i32 %283, %34
  br i1 %284, label %285, label %292

285:                                              ; preds = %280
  %286 = lshr exact i64 %252, 3
  %287 = and i64 %286, 536870911
  %288 = add i64 %60, %287
  %289 = getelementptr inbounds i8, i8* %64, i64 %288
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i32
  br label %292

292:                                              ; preds = %280, %285
  %293 = phi i32 [ %291, %285 ], [ 0, %280 ]
  %294 = or i32 %293, %281
  br label %295

295:                                              ; preds = %292, %278
  %296 = phi i32 [ %294, %292 ], [ %256, %278 ]
  br i1 %92, label %297, label %312

297:                                              ; preds = %295
  %298 = shl i32 %255, 8
  %299 = trunc i64 %252 to i32
  %300 = add i32 %299, 8
  %301 = icmp slt i32 %300, %34
  br i1 %301, label %302, label %309

302:                                              ; preds = %297
  %303 = lshr exact i64 %252, 3
  %304 = and i64 %303, 536870911
  %305 = add i64 %59, %304
  %306 = getelementptr inbounds i8, i8* %64, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i32
  br label %309

309:                                              ; preds = %297, %302
  %310 = phi i32 [ %308, %302 ], [ 0, %297 ]
  %311 = or i32 %310, %298
  br label %312

312:                                              ; preds = %309, %295
  %313 = phi i32 [ %311, %309 ], [ %255, %295 ]
  br i1 %95, label %314, label %329

314:                                              ; preds = %312
  %315 = shl i32 %254, 8
  %316 = trunc i64 %252 to i32
  %317 = add i32 %316, 8
  %318 = icmp slt i32 %317, %34
  br i1 %318, label %319, label %326

319:                                              ; preds = %314
  %320 = lshr exact i64 %252, 3
  %321 = and i64 %320, 536870911
  %322 = add i64 %61, %321
  %323 = getelementptr inbounds i8, i8* %64, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  br label %326

326:                                              ; preds = %314, %319
  %327 = phi i32 [ %325, %319 ], [ 0, %314 ]
  %328 = or i32 %327, %315
  br label %329

329:                                              ; preds = %312, %326
  %330 = phi i32 [ %328, %326 ], [ 0, %312 ]
  %331 = icmp sgt i32 %259, 0
  br i1 %331, label %332, label %409

332:                                              ; preds = %329, %382
  %333 = phi i32 [ %407, %382 ], [ 0, %329 ]
  %334 = phi i8 [ %387, %382 ], [ 0, %329 ]
  %335 = phi i32 [ %406, %382 ], [ %253, %329 ]
  %336 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %337 = add nuw nsw i32 %333, %258
  %338 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %336, i32 %337, i32 %63) #7
  %339 = load i8, i8* %51, align 1, !range !2
  %340 = icmp eq i8 %339, 0
  br i1 %340, label %375, label %341

341:                                              ; preds = %332
  %342 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %343 = add nsw i32 %337, -1
  %344 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %342, i32 %343, i32 %126) #7
  %345 = icmp eq i32 %338, %344
  br i1 %345, label %346, label %375

346:                                              ; preds = %341
  %347 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %348 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %347, i32 %337, i32 %126) #7
  %349 = icmp eq i32 %338, %348
  br i1 %349, label %350, label %375

350:                                              ; preds = %346
  %351 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %352 = add nuw nsw i32 %337, 1
  %353 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %351, i32 %352, i32 %126) #7
  %354 = icmp eq i32 %338, %353
  br i1 %354, label %355, label %375

355:                                              ; preds = %350
  %356 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %357 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %356, i32 %343, i32 %63) #7
  %358 = icmp eq i32 %338, %357
  br i1 %358, label %359, label %375

359:                                              ; preds = %355
  %360 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %361 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %360, i32 %352, i32 %63) #7
  %362 = icmp eq i32 %338, %361
  br i1 %362, label %363, label %375

363:                                              ; preds = %359
  %364 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %365 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %364, i32 %343, i32 %127) #7
  %366 = icmp eq i32 %338, %365
  br i1 %366, label %367, label %375

367:                                              ; preds = %363
  %368 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %369 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %368, i32 %337, i32 %127) #7
  %370 = icmp eq i32 %338, %369
  br i1 %370, label %371, label %375

371:                                              ; preds = %367
  %372 = load %class.CJBig2_Image*, %class.CJBig2_Image** %4, align 8
  %373 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %372, i32 %352, i32 %127) #7
  %374 = icmp eq i32 %338, %373
  br i1 %374, label %382, label %375

375:                                              ; preds = %332, %371, %367, %363, %359, %355, %350, %346, %341
  %376 = load i8, i8* %52, align 8, !range !2
  %377 = icmp eq i8 %376, 0
  br i1 %377, label %378, label %427

378:                                              ; preds = %375
  %379 = zext i32 %335 to i64
  %380 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %379
  %381 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %380) #7
  br label %382

382:                                              ; preds = %371, %378
  %383 = phi i32 [ %338, %371 ], [ %381, %378 ]
  %384 = sub nsw i32 7, %333
  %385 = shl i32 %383, %384
  %386 = trunc i32 %385 to i8
  %387 = or i8 %334, %386
  %388 = shl i32 %335, 1
  %389 = and i32 %388, 794
  %390 = shl i32 %383, 6
  %391 = lshr i32 %279, %384
  %392 = and i32 %391, 128
  %393 = sub nsw i32 9, %333
  %394 = lshr i32 %296, %393
  %395 = and i32 %394, 32
  %396 = sub nsw i32 11, %333
  %397 = lshr i32 %313, %396
  %398 = and i32 %397, 4
  %399 = sub nsw i32 13, %333
  %400 = lshr i32 %330, %399
  %401 = and i32 %400, 1
  %402 = or i32 %392, %389
  %403 = or i32 %402, %395
  %404 = or i32 %403, %398
  %405 = or i32 %404, %401
  %406 = or i32 %405, %390
  %407 = add nuw nsw i32 %333, 1
  %408 = icmp slt i32 %407, %261
  br i1 %408, label %332, label %409

409:                                              ; preds = %382, %329
  %410 = phi i32 [ %253, %329 ], [ %406, %382 ]
  %411 = phi i8 [ 0, %329 ], [ %387, %382 ]
  %412 = lshr exact i64 %252, 3
  %413 = and i64 %412, 536870911
  %414 = getelementptr inbounds i8, i8* %65, i64 %413
  store i8 %411, i8* %414, align 1
  %415 = add nuw i64 %252, 8
  %416 = trunc i64 %415 to i32
  %417 = icmp sgt i32 %11, %416
  br i1 %417, label %251, label %418

418:                                              ; preds = %409, %210, %124, %128
  %419 = getelementptr inbounds i8, i8* %65, i64 %28
  %420 = load i32, i32* %37, align 8
  %421 = add nsw i32 %420, %36
  %422 = icmp slt i32 %63, %421
  %423 = getelementptr inbounds i8, i8* %64, i64 %32
  %424 = select i1 %422, i8* %423, i8* %64
  %425 = add nuw nsw i32 %63, 1
  %426 = icmp eq i32 %425, %13
  br i1 %426, label %428, label %62

427:                                              ; preds = %69, %375, %9
  tail call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %15) #7
  tail call void @_ZdlPv(i8* nonnull %14) #8
  br label %428

428:                                              ; preds = %418, %44, %427, %3
  %429 = phi i64 [ 0, %3 ], [ 0, %427 ], [ %16, %44 ], [ %16, %418 ]
  %430 = inttoptr i64 %429 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %430
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CJBig2_Image* @_ZN15CJBig2_GRRDProc20DecodeTemplate1UnoptEP19CJBig2_ArithDecoderP13JBig2ArithCtx(%class.CJBig2_GRRDProc* readonly, %class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 3
  %5 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 4
  %6 = tail call i8* @_Znwm(i64 32) #8
  %7 = bitcast i8* %6 to %class.CJBig2_Image*
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %5, align 4
  tail call void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image* nonnull %7, i32 %8, i32 %9) #7
  %10 = ptrtoint i8* %6 to i64
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %252, label %15

15:                                               ; preds = %3
  tail call void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image* nonnull %7, i1 zeroext false) #7
  %16 = load i32, i32* %5, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %253, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 1
  %20 = getelementptr inbounds %class.CJBig2_ArithDecoder, %class.CJBig2_ArithDecoder* %1, i64 0, i32 0
  %21 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 8
  %22 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %23 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %24 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  br label %25

25:                                               ; preds = %18, %249
  %26 = phi i32 [ 0, %18 ], [ %80, %249 ]
  %27 = phi i32 [ 0, %18 ], [ %37, %249 ]
  %28 = load i8, i8* %19, align 1, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = load i8, i8* %20, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %252

33:                                               ; preds = %30
  %34 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %21) #7
  %35 = xor i32 %34, %27
  br label %36

36:                                               ; preds = %25, %33
  %37 = phi i32 [ %35, %33 ], [ %27, %25 ]
  %38 = icmp eq i32 %37, 0
  %39 = add i32 %26, -1
  %40 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 1, i32 %39) #7
  %41 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 0, i32 %39) #7
  %42 = shl i32 %41, 1
  %43 = or i32 %42, %40
  %44 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 -1, i32 %39) #7
  %45 = shl i32 %44, 2
  %46 = or i32 %43, %45
  %47 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %48 = load i32, i32* %23, align 4
  %49 = sub nsw i32 0, %48
  %50 = load i32, i32* %24, align 8
  %51 = xor i32 %50, -1
  %52 = add i32 %26, %51
  %53 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %47, i32 %49, i32 %52) #7
  %54 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %55 = load i32, i32* %23, align 4
  %56 = sub i32 1, %55
  %57 = load i32, i32* %24, align 8
  %58 = sub i32 %26, %57
  %59 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %54, i32 %56, i32 %58) #7
  %60 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %61 = load i32, i32* %23, align 4
  %62 = sub nsw i32 0, %61
  %63 = load i32, i32* %24, align 8
  %64 = sub i32 %26, %63
  %65 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %60, i32 %62, i32 %64) #7
  %66 = shl i32 %65, 1
  %67 = or i32 %66, %59
  %68 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %69 = load i32, i32* %23, align 4
  %70 = xor i32 %69, -1
  %71 = load i32, i32* %24, align 8
  %72 = sub i32 %26, %71
  %73 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %68, i32 %70, i32 %72) #7
  %74 = shl i32 %73, 2
  %75 = or i32 %67, %74
  %76 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %77 = load i32, i32* %23, align 4
  %78 = sub i32 1, %77
  %79 = load i32, i32* %24, align 8
  %80 = add nuw i32 %26, 1
  %81 = sub i32 %80, %79
  %82 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %76, i32 %78, i32 %81) #7
  %83 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %84 = load i32, i32* %23, align 4
  %85 = sub nsw i32 0, %84
  %86 = load i32, i32* %24, align 8
  %87 = sub i32 %80, %86
  %88 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %83, i32 %85, i32 %87) #7
  %89 = shl i32 %88, 1
  %90 = or i32 %89, %82
  %91 = load i32, i32* %4, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %38, label %94, label %93

93:                                               ; preds = %36
  br i1 %92, label %151, label %249

94:                                               ; preds = %36
  br i1 %92, label %95, label %249

95:                                               ; preds = %94, %104
  %96 = phi i32 [ %124, %104 ], [ 0, %94 ]
  %97 = phi i32 [ %148, %104 ], [ %90, %94 ]
  %98 = phi i32 [ %139, %104 ], [ %75, %94 ]
  %99 = phi i32 [ %130, %104 ], [ %53, %94 ]
  %100 = phi i32 [ %121, %104 ], [ 0, %94 ]
  %101 = phi i32 [ %120, %104 ], [ %46, %94 ]
  %102 = load i8, i8* %20, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %252

104:                                              ; preds = %95
  %105 = shl i32 %98, 2
  %106 = shl i32 %99, 5
  %107 = shl nuw nsw i32 %100, 6
  %108 = shl i32 %101, 7
  %109 = or i32 %107, %108
  %110 = or i32 %109, %106
  %111 = or i32 %110, %105
  %112 = or i32 %111, %97
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %113
  %115 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %114) #7
  tail call void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* nonnull %7, i32 %96, i32 %26, i32 %115) #7
  %116 = shl i32 %101, 1
  %117 = add i32 %96, 2
  %118 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %117, i32 %39) #7
  %119 = or i32 %118, %116
  %120 = and i32 %119, 7
  %121 = and i32 %115, 1
  %122 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %123 = load i32, i32* %23, align 4
  %124 = add nuw i32 %96, 1
  %125 = sub i32 %124, %123
  %126 = load i32, i32* %24, align 8
  %127 = xor i32 %126, -1
  %128 = add i32 %26, %127
  %129 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %122, i32 %125, i32 %128) #7
  %130 = and i32 %129, 1
  %131 = shl i32 %98, 1
  %132 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %133 = load i32, i32* %23, align 4
  %134 = sub i32 %117, %133
  %135 = load i32, i32* %24, align 8
  %136 = sub i32 %26, %135
  %137 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %132, i32 %134, i32 %136) #7
  %138 = or i32 %137, %131
  %139 = and i32 %138, 7
  %140 = shl i32 %97, 1
  %141 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %142 = load i32, i32* %23, align 4
  %143 = sub i32 %117, %142
  %144 = load i32, i32* %24, align 8
  %145 = sub i32 %80, %144
  %146 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %141, i32 %143, i32 %145) #7
  %147 = or i32 %146, %140
  %148 = and i32 %147, 3
  %149 = load i32, i32* %4, align 4
  %150 = icmp ult i32 %124, %149
  br i1 %150, label %95, label %249

151:                                              ; preds = %93, %212
  %152 = phi i32 [ %213, %212 ], [ 0, %93 ]
  %153 = phi i32 [ %246, %212 ], [ %90, %93 ]
  %154 = phi i32 [ %237, %212 ], [ %75, %93 ]
  %155 = phi i32 [ %228, %212 ], [ %53, %93 ]
  %156 = phi i32 [ %220, %212 ], [ 0, %93 ]
  %157 = phi i32 [ %219, %212 ], [ %46, %93 ]
  %158 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %159 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %158, i32 %152, i32 %26) #7
  %160 = load i8, i8* %19, align 1, !range !2
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %196, label %162

162:                                              ; preds = %151
  %163 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %164 = add i32 %152, -1
  %165 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %163, i32 %164, i32 %39) #7
  %166 = icmp eq i32 %159, %165
  br i1 %166, label %167, label %196

167:                                              ; preds = %162
  %168 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %169 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %168, i32 %152, i32 %39) #7
  %170 = icmp eq i32 %159, %169
  br i1 %170, label %171, label %196

171:                                              ; preds = %167
  %172 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %173 = add nuw i32 %152, 1
  %174 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %172, i32 %173, i32 %39) #7
  %175 = icmp eq i32 %159, %174
  br i1 %175, label %176, label %196

176:                                              ; preds = %171
  %177 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %178 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %177, i32 %164, i32 %26) #7
  %179 = icmp eq i32 %159, %178
  br i1 %179, label %180, label %196

180:                                              ; preds = %176
  %181 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %182 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %181, i32 %173, i32 %26) #7
  %183 = icmp eq i32 %159, %182
  br i1 %183, label %184, label %196

184:                                              ; preds = %180
  %185 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %186 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %185, i32 %164, i32 %80) #7
  %187 = icmp eq i32 %159, %186
  br i1 %187, label %188, label %196

188:                                              ; preds = %184
  %189 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %190 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %189, i32 %152, i32 %80) #7
  %191 = icmp eq i32 %159, %190
  br i1 %191, label %192, label %196

192:                                              ; preds = %188
  %193 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %194 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %193, i32 %173, i32 %80) #7
  %195 = icmp eq i32 %159, %194
  br i1 %195, label %212, label %196

196:                                              ; preds = %151, %192, %188, %184, %180, %176, %171, %167, %162
  %197 = load i8, i8* %20, align 8, !range !2
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %199, label %252

199:                                              ; preds = %196
  %200 = shl i32 %154, 2
  %201 = shl i32 %155, 5
  %202 = shl nuw nsw i32 %156, 6
  %203 = shl i32 %157, 7
  %204 = or i32 %202, %203
  %205 = or i32 %204, %201
  %206 = or i32 %205, %200
  %207 = or i32 %206, %153
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %2, i64 %208
  %210 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %209) #7
  %211 = add nuw i32 %152, 1
  br label %212

212:                                              ; preds = %192, %199
  %213 = phi i32 [ %173, %192 ], [ %211, %199 ]
  %214 = phi i32 [ %159, %192 ], [ %210, %199 ]
  tail call void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* nonnull %7, i32 %152, i32 %26, i32 %214) #7
  %215 = shl i32 %157, 1
  %216 = add i32 %152, 2
  %217 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* nonnull %7, i32 %216, i32 %39) #7
  %218 = or i32 %217, %215
  %219 = and i32 %218, 7
  %220 = and i32 %214, 1
  %221 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %222 = load i32, i32* %23, align 4
  %223 = sub i32 %213, %222
  %224 = load i32, i32* %24, align 8
  %225 = xor i32 %224, -1
  %226 = add i32 %26, %225
  %227 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %221, i32 %223, i32 %226) #7
  %228 = and i32 %227, 1
  %229 = shl i32 %154, 1
  %230 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %231 = load i32, i32* %23, align 4
  %232 = sub i32 %216, %231
  %233 = load i32, i32* %24, align 8
  %234 = sub i32 %26, %233
  %235 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %230, i32 %232, i32 %234) #7
  %236 = or i32 %235, %229
  %237 = and i32 %236, 7
  %238 = shl i32 %153, 1
  %239 = load %class.CJBig2_Image*, %class.CJBig2_Image** %22, align 8
  %240 = load i32, i32* %23, align 4
  %241 = sub i32 %216, %240
  %242 = load i32, i32* %24, align 8
  %243 = sub i32 %80, %242
  %244 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %239, i32 %241, i32 %243) #7
  %245 = or i32 %244, %238
  %246 = and i32 %245, 3
  %247 = load i32, i32* %4, align 4
  %248 = icmp ult i32 %213, %247
  br i1 %248, label %151, label %249

249:                                              ; preds = %212, %104, %93, %94
  %250 = load i32, i32* %5, align 8
  %251 = icmp ult i32 %80, %250
  br i1 %251, label %25, label %253

252:                                              ; preds = %30, %196, %95, %3
  tail call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %7) #7
  tail call void @_ZdlPv(i8* nonnull %6) #8
  br label %253

253:                                              ; preds = %249, %15, %252
  %254 = phi i64 [ 0, %252 ], [ %10, %15 ], [ %10, %249 ]
  %255 = inttoptr i64 %254 to %class.CJBig2_Image*
  ret %class.CJBig2_Image* %255
}

declare void @_ZN12CJBig2_Image4FillEb(%class.CJBig2_Image*, i1 zeroext) local_unnamed_addr #3

declare i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #3

declare i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK15CJBig2_GRRDProc36DecodeTemplate0UnoptCalculateContextERK12CJBig2_ImagePKjjj(%class.CJBig2_GRRDProc* nocapture readonly, %class.CJBig2_Image* dereferenceable(32), i32* nocapture readonly, i32, i32) local_unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds i32, i32* %2, i64 4
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %2, i64 3
  %9 = load i32, i32* %8, align 4
  %10 = shl i32 %9, 3
  %11 = or i32 %10, %7
  %12 = getelementptr inbounds i32, i32* %2, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = shl i32 %13, 6
  %15 = or i32 %11, %14
  %16 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %17 = load %class.CJBig2_Image*, %class.CJBig2_Image** %16, align 8
  %18 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = sub i32 %3, %19
  %21 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 2
  %22 = load i8, i8* %21, align 2
  %23 = sext i8 %22 to i32
  %24 = add i32 %20, %23
  %25 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = sub i32 %4, %26
  %28 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 3
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add i32 %27, %30
  %32 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %17, i32 %24, i32 %31) #7
  %33 = shl i32 %32, 8
  %34 = or i32 %15, %33
  %35 = getelementptr inbounds i32, i32* %2, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = shl i32 %36, 9
  %38 = or i32 %34, %37
  %39 = load i32, i32* %2, align 4
  %40 = shl i32 %39, 10
  %41 = or i32 %38, %40
  %42 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 0
  %43 = load i8, i8* %42, align 8
  %44 = sext i8 %43 to i32
  %45 = add i32 %44, %3
  %46 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 9, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = add i32 %48, %4
  %50 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %1, i32 %45, i32 %49) #7
  %51 = shl i32 %50, 12
  %52 = or i32 %41, %51
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CJBig2_GRRDProc28DecodeTemplate0UnoptSetPixelEP12CJBig2_ImagePjjji(%class.CJBig2_GRRDProc* nocapture readonly, %class.CJBig2_Image*, i32* nocapture, i32, i32, i32) local_unnamed_addr #2 align 2 {
  tail call void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image* %1, i32 %3, i32 %4, i32 %5) #7
  %7 = load i32, i32* %2, align 4
  %8 = shl i32 %7, 1
  %9 = add i32 %3, 2
  %10 = add i32 %4, -1
  %11 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %1, i32 %9, i32 %10) #7
  %12 = or i32 %8, %11
  %13 = and i32 %12, 3
  store i32 %13, i32* %2, align 4
  %14 = getelementptr inbounds i32, i32* %2, i64 1
  %15 = and i32 %5, 1
  store i32 %15, i32* %14, align 4
  %16 = getelementptr inbounds i32, i32* %2, i64 2
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 %17, 1
  %19 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 8, i32 0
  %20 = load %class.CJBig2_Image*, %class.CJBig2_Image** %19, align 8
  %21 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 5
  %22 = load i32, i32* %21, align 4
  %23 = sub i32 %9, %22
  %24 = getelementptr inbounds %class.CJBig2_GRRDProc, %class.CJBig2_GRRDProc* %0, i64 0, i32 6
  %25 = load i32, i32* %24, align 8
  %26 = xor i32 %25, -1
  %27 = add i32 %26, %4
  %28 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %20, i32 %23, i32 %27) #7
  %29 = or i32 %28, %18
  %30 = and i32 %29, 3
  store i32 %30, i32* %16, align 4
  %31 = getelementptr inbounds i32, i32* %2, i64 3
  %32 = load i32, i32* %31, align 4
  %33 = shl i32 %32, 1
  %34 = load %class.CJBig2_Image*, %class.CJBig2_Image** %19, align 8
  %35 = load i32, i32* %21, align 4
  %36 = sub i32 %9, %35
  %37 = load i32, i32* %24, align 8
  %38 = sub i32 %4, %37
  %39 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %34, i32 %36, i32 %38) #7
  %40 = or i32 %39, %33
  %41 = and i32 %40, 7
  store i32 %41, i32* %31, align 4
  %42 = getelementptr inbounds i32, i32* %2, i64 4
  %43 = load i32, i32* %42, align 4
  %44 = shl i32 %43, 1
  %45 = load %class.CJBig2_Image*, %class.CJBig2_Image** %19, align 8
  %46 = load i32, i32* %21, align 4
  %47 = sub i32 %9, %46
  %48 = load i32, i32* %24, align 8
  %49 = add i32 %4, 1
  %50 = sub i32 %49, %48
  %51 = tail call i32 @_ZNK12CJBig2_Image8GetPixelEii(%class.CJBig2_Image* %45, i32 %47, i32 %50) #7
  %52 = or i32 %51, %44
  %53 = and i32 %52, 7
  store i32 %53, i32* %42, align 4
  ret void
}

declare void @_ZN12CJBig2_Image8SetPixelEiii(%class.CJBig2_Image*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN12CJBig2_ImageC1Eii(%class.CJBig2_Image*, i32, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
