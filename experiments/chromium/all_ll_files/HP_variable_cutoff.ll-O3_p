; ModuleID = '../../third_party/opus/src/silk/HP_variable_cutoff.c'
source_filename = "../../third_party/opus/src/silk/HP_variable_cutoff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_encoder_state_FLP = type { %struct.silk_encoder_state, %struct.silk_shape_state_FLP, [720 x float], float }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }
%struct.silk_shape_state_FLP = type { i8, float, float }

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_HP_variable_cutoff(%struct.silk_encoder_state_FLP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 10
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 2
  br i1 %4, label %5, label %100

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 19
  %7 = load i32, i32* %6, align 8
  %8 = mul i32 %7, 65536000
  %9 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 11
  %10 = load i32, i32* %9, align 8
  %11 = sdiv i32 %8, %10
  %12 = tail call i32 @silk_lin2log(i32 %11) #2
  %13 = add nsw i32 %12, -2048
  %14 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 49, i64 0
  %15 = load i32, i32* %14, align 8
  %16 = shl i32 %15, 2
  %17 = sub i32 0, %16
  %18 = sext i32 %17 to i64
  %19 = zext i32 %15 to i64
  %20 = shl i64 %19, 48
  %21 = ashr exact i64 %20, 48
  %22 = mul nsw i64 %21, %18
  %23 = ashr i64 %22, 16
  %24 = tail call i32 @silk_lin2log(i32 3932160) #2
  %25 = sub i32 %12, %24
  %26 = zext i32 %25 to i64
  %27 = shl i64 %26, 48
  %28 = ashr exact i64 %27, 48
  %29 = mul nsw i64 %23, %28
  %30 = lshr i64 %29, 16
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = ashr i32 %33, 8
  %35 = sub i32 %13, %34
  %36 = add i32 %35, %31
  %37 = icmp slt i32 %36, 0
  %38 = mul nsw i32 %36, 3
  %39 = select i1 %37, i32 %38, i32 %36
  %40 = icmp sgt i32 %39, 51
  br i1 %40, label %46, label %41

41:                                               ; preds = %5
  %42 = icmp sgt i32 %39, -51
  %43 = select i1 %42, i32 %39, i32 -51
  %44 = shl i32 %43, 16
  %45 = ashr exact i32 %44, 16
  br label %46

46:                                               ; preds = %41, %5
  %47 = phi i32 [ 51, %5 ], [ %45, %41 ]
  %48 = getelementptr inbounds %struct.silk_encoder_state_FLP, %struct.silk_encoder_state_FLP* %0, i64 0, i32 0, i32 7
  %49 = load i32, i32* %48, align 4
  %50 = shl i32 %49, 16
  %51 = ashr exact i32 %50, 16
  %52 = mul nsw i32 %51, %47
  %53 = sext i32 %52 to i64
  %54 = mul nsw i64 %53, 6554
  %55 = ashr i64 %54, 16
  %56 = trunc i64 %55 to i32
  %57 = add i32 %33, %56
  store i32 %57, i32* %32, align 8
  %58 = tail call i32 @silk_lin2log(i32 60) #2
  %59 = shl i32 %58, 8
  %60 = tail call i32 @silk_lin2log(i32 100) #2
  %61 = shl i32 %60, 8
  %62 = icmp sgt i32 %59, %61
  %63 = load i32, i32* %32, align 8
  br i1 %62, label %64, label %81

64:                                               ; preds = %46
  %65 = tail call i32 @silk_lin2log(i32 60) #2
  %66 = shl i32 %65, 8
  %67 = icmp sgt i32 %63, %66
  br i1 %67, label %68, label %71

68:                                               ; preds = %64
  %69 = tail call i32 @silk_lin2log(i32 60) #2
  %70 = shl i32 %69, 8
  br label %98

71:                                               ; preds = %64
  %72 = load i32, i32* %32, align 8
  %73 = tail call i32 @silk_lin2log(i32 100) #2
  %74 = shl i32 %73, 8
  %75 = icmp slt i32 %72, %74
  br i1 %75, label %76, label %79

76:                                               ; preds = %71
  %77 = tail call i32 @silk_lin2log(i32 100) #2
  %78 = shl i32 %77, 8
  br label %98

79:                                               ; preds = %71
  %80 = load i32, i32* %32, align 8
  br label %98

81:                                               ; preds = %46
  %82 = tail call i32 @silk_lin2log(i32 100) #2
  %83 = shl i32 %82, 8
  %84 = icmp sgt i32 %63, %83
  br i1 %84, label %85, label %88

85:                                               ; preds = %81
  %86 = tail call i32 @silk_lin2log(i32 100) #2
  %87 = shl i32 %86, 8
  br label %98

88:                                               ; preds = %81
  %89 = load i32, i32* %32, align 8
  %90 = tail call i32 @silk_lin2log(i32 60) #2
  %91 = shl i32 %90, 8
  %92 = icmp slt i32 %89, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = tail call i32 @silk_lin2log(i32 60) #2
  %95 = shl i32 %94, 8
  br label %98

96:                                               ; preds = %88
  %97 = load i32, i32* %32, align 8
  br label %98

98:                                               ; preds = %85, %96, %93, %68, %79, %76
  %99 = phi i32 [ %70, %68 ], [ %78, %76 ], [ %80, %79 ], [ %87, %85 ], [ %95, %93 ], [ %97, %96 ]
  store i32 %99, i32* %32, align 8
  br label %100

100:                                              ; preds = %98, %1
  ret void
}

declare i32 @silk_lin2log(i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
