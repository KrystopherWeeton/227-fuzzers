; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsWinding.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsWinding.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkPoint = type { float, float }
%struct.SkOpRayHit = type { %struct.SkOpRayHit*, %class.SkOpSpan*, %struct.SkPoint, double, %struct.SkDVector, i8 }
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type opaque
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%class.SkLineParameters = type { double, double, double }
%struct.SkDVector = type { double, double }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [1024 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %struct.SkOpRayHit**, i64 }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDConic = type { %struct.SkDQuad, float }

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_ZN8SkDPoint12RoughlyEqualERK7SkPointS2_ = comdat any

$_ZN8SkTArrayIP10SkOpRayHitLb0EE12checkReallocEiNS2_11ReallocTypeE = comdat any

$_Z12SkTIntroSortIP10SkOpRayHitFbPKS0_S3_EEviPT_iRKT0_ = comdat any

$_Z11SkTHeapSortIP10SkOpRayHitFbPKS0_S3_EEvPT_mRKT0_ = comdat any

@_ZL14CurveIntercept = internal unnamed_addr constant [10 x i32 (%struct.SkPoint*, float, float, double*)*] [i32 (%struct.SkPoint*, float, float, double*)* null, i32 (%struct.SkPoint*, float, float, double*)* null, i32 (%struct.SkPoint*, float, float, double*)* @_ZL16line_intercept_hPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL16line_intercept_vPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL16quad_intercept_hPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL16quad_intercept_vPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL17conic_intercept_hPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL17conic_intercept_vPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL17cubic_intercept_hPK7SkPointffPd, i32 (%struct.SkPoint*, float, float, double*)* @_ZL17cubic_intercept_vPK7SkPointffPd], align 16
@__const._ZN8SkOpSpan11sortableTopEP11SkOpContour.hitBase = private unnamed_addr constant { %struct.SkOpRayHit*, %class.SkOpSpan*, %struct.SkPoint, double, %struct.SkDVector, i8, [7 x i8] } { %struct.SkOpRayHit* inttoptr (i64 -6148914691236517206 to %struct.SkOpRayHit*), %class.SkOpSpan* inttoptr (i64 -6148914691236517206 to %class.SkOpSpan*), %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, double 0xFFFFFFFFFFFFFFFF, %struct.SkDVector { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }, align 8
@_ZL13CurvePointAtT = internal unnamed_addr constant [5 x <2 x float> (%struct.SkPoint*, float, double)*] [<2 x float> (%struct.SkPoint*, float, double)* null, <2 x float> (%struct.SkPoint*, float, double)* @_ZL13fline_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL13fquad_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL14fconic_xy_at_tPK7SkPointfd, <2 x float> (%struct.SkPoint*, float, double)* @_ZL14fcubic_xy_at_tPK7SkPointfd], align 16
@_ZL14CurveDSlopeAtT = internal unnamed_addr constant [5 x { double, double } (%struct.SkPoint*, float, double)*] [{ double, double } (%struct.SkPoint*, float, double)* null, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dline_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL15dquad_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dconic_dxdy_at_tPK7SkPointfd, { double, double } (%struct.SkPoint*, float, double)* @_ZL16dcubic_dxdy_at_tPK7SkPointfd], align 16
@__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic = private unnamed_addr constant { %struct.SkDQuad, float, [4 x i8] } { %struct.SkDQuad { [3 x %struct.SkDPoint] [%struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, %struct.SkDPoint { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }] }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpContour8rayCheckERK10SkOpRayHit10SkOpRayDirPPS0_P12SkArenaAlloc(%class.SkOpContour*, %struct.SkOpRayHit* dereferenceable(56), i32, %struct.SkOpRayHit** nocapture, %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2, i32 0
  %7 = and i32 %2, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds float, float* %6, i64 %8
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %0, i64 0, i32 4, i32 0, i32 0
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds float, float* %11, i64 %12
  %14 = load float, float* %13, align 4
  %15 = and i32 %2, 2
  %16 = icmp eq i32 %15, 0
  %17 = fpext float %10 to double
  %18 = fpext float %14 to double
  %19 = fsub double %17, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #9
  %21 = fcmp uge double %20, 0x3E80000000000000
  %22 = fcmp uge float %10, %14
  %23 = xor i1 %16, %22
  %24 = and i1 %23, %21
  br i1 %24, label %32, label %25

25:                                               ; preds = %5
  %26 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %0, i64 0, i32 1
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi %class.SkOpSegment* [ %26, %25 ], [ %30, %27 ]
  tail call void @_ZN11SkOpSegment8rayCheckERK10SkOpRayHit10SkOpRayDirPPS0_P12SkArenaAlloc(%class.SkOpSegment* %28, %struct.SkOpRayHit* dereferenceable(56) %1, i32 %2, %struct.SkOpRayHit** %3, %class.SkArenaAlloc* %4)
  %29 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %28, i64 0, i32 3
  %30 = load %class.SkOpSegment*, %class.SkOpSegment** %29, align 8
  %31 = icmp eq %class.SkOpSegment* %30, null
  br i1 %31, label %32, label %27

32:                                               ; preds = %27, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkOpSegment8rayCheckERK10SkOpRayHit10SkOpRayDirPPS0_P12SkArenaAlloc(%class.SkOpSegment*, %struct.SkOpRayHit* dereferenceable(56), i32, %struct.SkOpRayHit** nocapture, %class.SkArenaAlloc*) local_unnamed_addr #2 align 2 {
  %6 = alloca [3 x double], align 16
  %7 = alloca %struct.SkDVector, align 8
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2
  %11 = and i32 %2, 1
  %12 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 6, i32 0, i32 0
  %13 = xor i32 %11, 1
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds float, float* %12, i64 %14
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %10, i64 0, i32 0
  %19 = getelementptr inbounds float, float* %18, i64 %14
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  %22 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 6, i32 0, i32 2
  %23 = getelementptr inbounds float, float* %22, i64 %14
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = fcmp ugt float %16, %24
  br i1 %26, label %33, label %27

27:                                               ; preds = %5
  %28 = fsub double %17, %21
  %29 = fcmp olt double %28, 0x3E80000000000000
  %30 = fsub double %21, %25
  %31 = fcmp olt double %30, 0x3E80000000000000
  %32 = and i1 %29, %31
  br i1 %32, label %39, label %250

33:                                               ; preds = %5
  %34 = fsub double %21, %17
  %35 = fcmp olt double %34, 0x3E80000000000000
  %36 = fsub double %25, %21
  %37 = fcmp olt double %36, 0x3E80000000000000
  %38 = and i1 %35, %37
  br i1 %38, label %39, label %250

39:                                               ; preds = %33, %27
  %40 = zext i32 %11 to i64
  %41 = getelementptr inbounds float, float* %18, i64 %40
  %42 = load float, float* %41, align 4
  %43 = sext i32 %2 to i64
  %44 = getelementptr inbounds float, float* %12, i64 %43
  %45 = load float, float* %44, align 4
  %46 = and i32 %2, 2
  %47 = icmp eq i32 %46, 0
  %48 = fpext float %42 to double
  %49 = fpext float %45 to double
  %50 = fsub double %48, %49
  %51 = tail call double @llvm.fabs.f64(double %50) #9
  %52 = fcmp uge double %51, 0x3E80000000000000
  %53 = fcmp uge float %42, %45
  %54 = xor i1 %47, %53
  %55 = and i1 %54, %52
  br i1 %55, label %250, label %56

56:                                               ; preds = %39
  %57 = bitcast [3 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #9
  %58 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 0
  %59 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 10
  %60 = bitcast [3 x double]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %60, i8 -1, i64 24, i1 false)
  %61 = load i32, i32* %59, align 4
  %62 = shl nsw i32 %61, 1
  %63 = or i32 %62, %11
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [10 x i32 (%struct.SkPoint*, float, float, double*)*], [10 x i32 (%struct.SkPoint*, float, float, double*)*]* @_ZL14CurveIntercept, i64 0, i64 %64
  %66 = load i32 (%struct.SkPoint*, float, float, double*)*, i32 (%struct.SkPoint*, float, float, double*)** %65, align 8
  %67 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 5
  %68 = load %struct.SkPoint*, %struct.SkPoint** %67, align 8
  %69 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 7
  %70 = load float, float* %69, align 8
  %71 = call i32 %66(%struct.SkPoint* %68, float %70, float %20, double* nonnull %58) #9
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %97

73:                                               ; preds = %56
  %74 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 1
  %75 = bitcast %class.SkOpSpan** %74 to %class.SkOpSpanBase**
  %76 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 3
  %77 = bitcast %struct.SkDVector* %7 to i8*
  %78 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %7, i64 0, i32 0
  %79 = getelementptr inbounds %struct.SkDVector, %struct.SkDVector* %7, i64 0, i32 1
  %80 = bitcast <2 x float>* %8 to i8*
  %81 = getelementptr inbounds <2 x float>, <2 x float>* %8, i64 0, i64 0
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %9, i64 0, i32 1
  %83 = getelementptr inbounds <2 x float>, <2 x float>* %8, i64 0, i64 %40
  %84 = getelementptr inbounds double, double* %78, i64 %14
  %85 = getelementptr inbounds double, double* %78, i64 %40
  %86 = bitcast <2 x float>* %8 to i64*
  %87 = bitcast %struct.SkPoint** %67 to i64**
  %88 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  %89 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %4, i64 0, i32 1
  %90 = bitcast i8** %89 to i64*
  %91 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %4, i64 0, i32 2
  %92 = bitcast i8** %91 to i64*
  %93 = bitcast %struct.SkOpRayHit** %3 to i64*
  %94 = bitcast %struct.SkOpRayHit** %3 to i8**
  %95 = zext i32 %71 to i64
  %96 = bitcast %struct.SkDVector* %7 to i8*
  br label %98

97:                                               ; preds = %247, %56
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #9
  br label %250

98:                                               ; preds = %247, %73
  %99 = phi i64 [ 0, %73 ], [ %248, %247 ]
  %100 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, i64 %99
  %101 = load double, double* %100, align 8
  %102 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %75, align 8
  %103 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %102, i64 0, i32 1
  %104 = load %class.SkOpSegment*, %class.SkOpSegment** %103, align 8
  %105 = icmp eq %class.SkOpSegment* %104, %0
  br i1 %105, label %106, label %111

106:                                              ; preds = %98
  %107 = load double, double* %76, align 8
  %108 = fsub double %107, %101
  %109 = call double @llvm.fabs.f64(double %108) #9
  %110 = fcmp olt double %109, 0x3E80000000000000
  br i1 %110, label %247, label %111

111:                                              ; preds = %106, %98
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %77) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #9
  store float 0xFFFFFFFFE0000000, float* %81, align 8
  store float 0xFFFFFFFFE0000000, float* %82, align 4
  %112 = call double @llvm.fabs.f64(double %101) #9
  %113 = fcmp olt double %112, 0x3E80000000000000
  br i1 %113, label %114, label %117

114:                                              ; preds = %111
  %115 = load i64*, i64** %87, align 8
  %116 = load i64, i64* %115, align 4
  store i64 %116, i64* %86, align 8
  br label %186

117:                                              ; preds = %111
  %118 = fadd double %101, -1.000000e+00
  %119 = call double @llvm.fabs.f64(double %118) #9
  %120 = fcmp olt double %119, 0x3E80000000000000
  br i1 %120, label %121, label %131

121:                                              ; preds = %117
  %122 = load %struct.SkPoint*, %struct.SkPoint** %67, align 8
  %123 = load i32, i32* %59, align 4
  %124 = add nsw i32 %123, 1
  %125 = ashr i32 %124, 2
  %126 = sub nsw i32 %123, %125
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %122, i64 %127
  %129 = bitcast %struct.SkPoint* %128 to i64*
  %130 = load i64, i64* %129, align 4
  store i64 %130, i64* %86, align 8
  br label %186

131:                                              ; preds = %117
  %132 = load i32, i32* %59, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %133
  %135 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %134, align 8
  %136 = load %struct.SkPoint*, %struct.SkPoint** %67, align 8
  %137 = load float, float* %69, align 8
  %138 = call <2 x float> %135(%struct.SkPoint* %136, float %137, double %101) #9
  store <2 x float> %138, <2 x float>* %8, align 8
  %139 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %9, %struct.SkPoint* dereferenceable(8) %10)
  br i1 %139, label %140, label %145

140:                                              ; preds = %131
  %141 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %75, align 8
  %142 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %141, i64 0, i32 1
  %143 = load %class.SkOpSegment*, %class.SkOpSegment** %142, align 8
  %144 = icmp eq %class.SkOpSegment* %143, %0
  br i1 %144, label %246, label %186

145:                                              ; preds = %131
  %146 = load float, float* %83, align 4
  %147 = fpext float %146 to double
  %148 = fsub double %48, %147
  %149 = call double @llvm.fabs.f64(double %148) #9
  %150 = fcmp uge double %149, 0x3E80000000000000
  %151 = fcmp uge float %42, %146
  %152 = xor i1 %47, %151
  %153 = and i1 %152, %150
  br i1 %153, label %246, label %154

154:                                              ; preds = %145
  %155 = load i32, i32* %59, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDSlopeAtT, i64 0, i64 %156
  %158 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %157, align 8
  %159 = load %struct.SkPoint*, %struct.SkPoint** %67, align 8
  %160 = load float, float* %69, align 8
  %161 = call { double, double } %158(%struct.SkPoint* %159, float %160, double %101) #9
  %162 = extractvalue { double, double } %161, 0
  %163 = extractvalue { double, double } %161, 1
  store double %162, double* %78, align 8
  store double %163, double* %79, align 8
  %164 = load i32, i32* %59, align 4
  %165 = icmp eq i32 %164, 4
  br i1 %165, label %166, label %178

166:                                              ; preds = %154
  %167 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %75, align 8
  %168 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %167, i64 0, i32 1
  %169 = load %class.SkOpSegment*, %class.SkOpSegment** %168, align 8
  %170 = icmp eq %class.SkOpSegment* %169, %0
  br i1 %170, label %171, label %178

171:                                              ; preds = %166
  %172 = load double, double* %76, align 8
  %173 = fsub double %172, %101
  %174 = call double @llvm.fabs.f64(double %173) #9
  %175 = fcmp olt double %174, 0x3EE0000000000000
  br i1 %175, label %176, label %178

176:                                              ; preds = %171
  %177 = call zeroext i1 @_ZN8SkDPoint12RoughlyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %9, %struct.SkPoint* dereferenceable(8) %10)
  br i1 %177, label %246, label %178

178:                                              ; preds = %154, %166, %171, %176
  %179 = load double, double* %84, align 8
  %180 = fmul double %179, 1.000000e+04
  %181 = call double @llvm.fabs.f64(double %180)
  %182 = load double, double* %85, align 8
  %183 = call double @llvm.fabs.f64(double %182)
  %184 = fcmp ogt double %181, %183
  %185 = zext i1 %184 to i8
  br label %186

186:                                              ; preds = %178, %121, %140, %114
  %187 = phi i8 [ 0, %114 ], [ 0, %121 ], [ 0, %140 ], [ %185, %178 ]
  br label %188

188:                                              ; preds = %201, %186
  %189 = phi %class.SkOpSpan* [ %88, %186 ], [ %202, %201 ]
  %190 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %189, i64 0, i32 4
  %191 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %190, align 8
  %192 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %191, i64 0, i32 0, i32 0
  %193 = load double, double* %192, align 8
  %194 = fsub double %101, %193
  %195 = call double @llvm.fabs.f64(double %194) #9
  %196 = fcmp olt double %195, 0x3E80000000000000
  br i1 %196, label %214, label %197

197:                                              ; preds = %188
  %198 = fcmp ogt double %193, %101
  br i1 %198, label %204, label %199

199:                                              ; preds = %197
  %200 = fcmp oeq double %193, 1.000000e+00
  br i1 %200, label %214, label %201

201:                                              ; preds = %199
  %202 = bitcast %class.SkOpSpanBase* %191 to %class.SkOpSpan*
  %203 = icmp eq %class.SkOpSpanBase* %191, null
  br i1 %203, label %214, label %188

204:                                              ; preds = %197
  %205 = icmp eq %class.SkOpSpan* %189, null
  br i1 %205, label %214, label %206

206:                                              ; preds = %204
  %207 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %189, i64 0, i32 7
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %214

210:                                              ; preds = %206
  %211 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %189, i64 0, i32 8
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %246, label %214

214:                                              ; preds = %199, %201, %188, %204, %210, %206
  %215 = phi %class.SkOpSpan* [ %189, %206 ], [ %189, %210 ], [ null, %204 ], [ null, %188 ], [ null, %201 ], [ null, %199 ]
  %216 = phi i8 [ %187, %206 ], [ %187, %210 ], [ 0, %204 ], [ 0, %188 ], [ 0, %201 ], [ 0, %199 ]
  %217 = load i64, i64* %90, align 8
  %218 = sub i64 0, %217
  %219 = and i64 %218, 7
  %220 = or i64 %219, 56
  %221 = load i64, i64* %92, align 8
  %222 = sub i64 %221, %217
  %223 = icmp ugt i64 %220, %222
  br i1 %223, label %224, label %228

224:                                              ; preds = %214
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %4, i32 56, i32 8) #9
  %225 = load i64, i64* %90, align 8
  %226 = sub i64 0, %225
  %227 = and i64 %226, 7
  br label %228

228:                                              ; preds = %214, %224
  %229 = phi i64 [ %225, %224 ], [ %217, %214 ]
  %230 = phi i64 [ %227, %224 ], [ %219, %214 ]
  %231 = inttoptr i64 %229 to i8*
  %232 = getelementptr inbounds i8, i8* %231, i64 %230
  %233 = getelementptr inbounds i8, i8* %232, i64 56
  store i8* %233, i8** %89, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %232, i8 0, i64 56, i1 false) #9
  %234 = load i64, i64* %93, align 8
  %235 = bitcast i8* %232 to i64*
  store i64 %234, i64* %235, align 8
  %236 = getelementptr inbounds i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to i64*
  %238 = load i64, i64* %86, align 8
  store i64 %238, i64* %237, align 8
  %239 = getelementptr inbounds i8, i8* %232, i64 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* nonnull align 8 %77, i64 16, i1 false)
  %240 = getelementptr inbounds i8, i8* %232, i64 8
  %241 = bitcast i8* %240 to %class.SkOpSpan**
  store %class.SkOpSpan* %215, %class.SkOpSpan** %241, align 8
  %242 = getelementptr inbounds i8, i8* %232, i64 24
  %243 = bitcast i8* %242 to double*
  store double %101, double* %243, align 8
  %244 = and i8 %216, 1
  %245 = getelementptr inbounds i8, i8* %232, i64 48
  store i8 %244, i8* %245, align 8
  store i8* %232, i8** %94, align 8
  br label %246

246:                                              ; preds = %176, %145, %228, %210, %140
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %77) #9
  br label %247

247:                                              ; preds = %106, %246
  %248 = add nuw nsw i64 %99, 1
  %249 = icmp eq i64 %248, %95
  br i1 %249, label %97, label %98

250:                                              ; preds = %33, %27, %97, %39
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #9
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #9
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #9
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #9
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #9
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #9
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint12RoughlyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %6) #9
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %10, float %12) #9
  br i1 %13, label %14, label %58

14:                                               ; preds = %8, %2
  %15 = load float, float* %3, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = load float, float* %5, align 4
  %21 = fpext float %20 to double
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = fsub double %16, %21
  %26 = fsub double %19, %24
  %27 = fmul double %25, %25
  %28 = fmul double %26, %26
  %29 = fadd double %27, %28
  %30 = tail call double @sqrt(double %29) #9
  %31 = load float, float* %5, align 4
  %32 = load float, float* %3, align 4
  %33 = fcmp olt float %31, %32
  %34 = load float, float* %17, align 4
  %35 = select i1 %33, float %31, float %32
  %36 = fcmp olt float %34, %35
  %37 = load float, float* %22, align 4
  %38 = select i1 %36, float %34, float %35
  %39 = fcmp olt float %37, %38
  %40 = select i1 %39, float %37, float %38
  %41 = fcmp olt float %32, %31
  %42 = load float, float* %5, align 4
  %43 = load float, float* %3, align 4
  %44 = select i1 %41, float %42, float %43
  %45 = fcmp olt float %44, %34
  %46 = load float, float* %17, align 4
  %47 = select i1 %45, float %46, float %44
  %48 = fcmp olt float %47, %37
  %49 = load float, float* %22, align 4
  %50 = select i1 %48, float %49, float %47
  %51 = fsub float -0.000000e+00, %40
  %52 = fcmp olt float %50, %51
  %53 = select i1 %52, float %51, float %50
  %54 = fpext float %53 to double
  %55 = fadd double %30, %54
  %56 = fptrunc double %55 to float
  %57 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %53, float %56) #9
  br label %58

58:                                               ; preds = %8, %14
  %59 = phi i1 [ %57, %14 ], [ false, %8 ]
  ret i1 %59
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden %class.SkOpSpan* @_ZN11SkOpSegment14windingSpanAtTEd(%class.SkOpSegment* readonly, double) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  br label %4

4:                                                ; preds = %17, %2
  %5 = phi %class.SkOpSpan* [ %3, %2 ], [ %18, %17 ]
  %6 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 4
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %8 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = fsub double %1, %9
  %11 = tail call double @llvm.fabs.f64(double %10) #9
  %12 = fcmp olt double %11, 0x3E80000000000000
  br i1 %12, label %20, label %13

13:                                               ; preds = %4
  %14 = fcmp ogt double %9, %1
  br i1 %14, label %20, label %15

15:                                               ; preds = %13
  %16 = fcmp oeq double %9, 1.000000e+00
  br i1 %16, label %20, label %17

17:                                               ; preds = %15
  %18 = bitcast %class.SkOpSpanBase* %7 to %class.SkOpSpan*
  %19 = icmp eq %class.SkOpSpanBase* %7, null
  br i1 %19, label %20, label %4

20:                                               ; preds = %15, %17, %13, %4
  %21 = phi %class.SkOpSpan* [ null, %4 ], [ %5, %13 ], [ null, %17 ], [ null, %15 ]
  ret %class.SkOpSpan* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkOpSpan11sortableTopEP11SkOpContour(%class.SkOpSpan*, %class.SkOpContour*) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkSTArenaAlloc, align 8
  %4 = alloca %struct.SkOpRayHit, align 8
  %5 = alloca %struct.SkOpRayHit*, align 8
  %6 = alloca %class.SkSTArray, align 8
  %7 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %3, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1056, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 1056, i1 false)
  %8 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %3, i64 0, i32 0, i32 0, i64 1024
  %9 = bitcast i8* %8 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %9, i8* nonnull %7, i64 1024, i64 1024) #9
  %10 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %0, i64 0, i32 9
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %10, align 8
  %13 = and i32 %11, 1
  %14 = ashr i32 %11, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %33, label %16

16:                                               ; preds = %2, %16
  %17 = phi i32 [ %22, %16 ], [ %14, %2 ]
  %18 = phi i32 [ %21, %16 ], [ 0, %2 ]
  %19 = phi double [ %20, %16 ], [ 5.000000e-01, %2 ]
  %20 = fmul double %19, 5.000000e-01
  %21 = add nuw nsw i32 %18, 1
  %22 = ashr i32 %17, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %16

24:                                               ; preds = %16
  %25 = add nsw i32 %14, -1
  %26 = shl i32 -2, %18
  %27 = xor i32 %26, -1
  %28 = and i32 %25, %27
  %29 = fmul double %20, 2.000000e+00
  %30 = sitofp i32 %28 to double
  %31 = fmul double %29, %30
  %32 = fadd double %20, %31
  br label %33

33:                                               ; preds = %2, %24
  %34 = phi double [ %32, %24 ], [ 5.000000e-01, %2 ]
  %35 = bitcast %struct.SkOpRayHit* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %35) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 8 bitcast ({ %struct.SkOpRayHit*, %class.SkOpSpan*, %struct.SkPoint, double, %struct.SkDVector, i8, [7 x i8] }* @__const._ZN8SkOpSpan11sortableTopEP11SkOpContour.hitBase to i8*), i64 56, i1 false)
  %36 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 0
  store %struct.SkOpRayHit* null, %struct.SkOpRayHit** %36, align 8
  %37 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 1
  store %class.SkOpSpan* %0, %class.SkOpSpan** %37, align 8
  %38 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %0, i64 0, i32 0, i32 0, i32 0
  %39 = load double, double* %38, align 8
  %40 = fsub double 1.000000e+00, %34
  %41 = fmul double %40, %39
  %42 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %0, i64 0, i32 4
  %43 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %42, align 8
  %44 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %43, i64 0, i32 0, i32 0
  %45 = load double, double* %44, align 8
  %46 = fmul double %34, %45
  %47 = fadd double %41, %46
  %48 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 3
  store double %47, double* %48, align 8
  %49 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %0, i64 0, i32 0, i32 1
  %50 = load %class.SkOpSegment*, %class.SkOpSegment** %49, align 8
  %51 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %50, i64 0, i32 10
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [5 x { double, double } (%struct.SkPoint*, float, double)*], [5 x { double, double } (%struct.SkPoint*, float, double)*]* @_ZL14CurveDSlopeAtT, i64 0, i64 %53
  %55 = load { double, double } (%struct.SkPoint*, float, double)*, { double, double } (%struct.SkPoint*, float, double)** %54, align 8
  %56 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %50, i64 0, i32 5
  %57 = load %struct.SkPoint*, %struct.SkPoint** %56, align 8
  %58 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %50, i64 0, i32 7
  %59 = load float, float* %58, align 8
  %60 = call { double, double } %55(%struct.SkPoint* %57, float %59, double %47) #9
  %61 = extractvalue { double, double } %60, 0
  %62 = extractvalue { double, double } %60, 1
  %63 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 4, i32 0
  store double %61, double* %63, align 8
  %64 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 4, i32 1
  store double %62, double* %64, align 8
  %65 = load double, double* %48, align 8
  %66 = load i32, i32* %51, align 4
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [5 x <2 x float> (%struct.SkPoint*, float, double)*], [5 x <2 x float> (%struct.SkPoint*, float, double)*]* @_ZL13CurvePointAtT, i64 0, i64 %67
  %69 = load <2 x float> (%struct.SkPoint*, float, double)*, <2 x float> (%struct.SkPoint*, float, double)** %68, align 8
  %70 = load %struct.SkPoint*, %struct.SkPoint** %56, align 8
  %71 = load float, float* %58, align 8
  %72 = call <2 x float> %69(%struct.SkPoint* %70, float %71, double %65) #9
  %73 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 2
  %74 = bitcast %struct.SkPoint* %73 to <2 x float>*
  store <2 x float> %72, <2 x float>* %74, align 8
  %75 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 5
  store i8 1, i8* %75, align 8
  %76 = bitcast double* %63 to <2 x double>*
  %77 = load <2 x double>, <2 x double>* %76, align 8
  %78 = extractelement <2 x double> %77, i32 0
  %79 = fcmp oeq double %78, 0.000000e+00
  %80 = extractelement <2 x double> %77, i32 1
  %81 = fcmp oeq double %80, 0.000000e+00
  %82 = and i1 %81, %79
  br i1 %82, label %329, label %83

83:                                               ; preds = %33
  %84 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %77)
  %85 = extractelement <2 x double> %84, i32 0
  %86 = extractelement <2 x double> %84, i32 1
  %87 = fcmp uge double %85, %86
  %88 = zext i1 %87 to i32
  %89 = bitcast %struct.SkOpRayHit** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #9
  store %struct.SkOpRayHit* %4, %struct.SkOpRayHit** %5, align 8
  %90 = add nuw nsw i32 %13, %88
  %91 = load %class.SkOpSpan*, %class.SkOpSpan** %37, align 8
  %92 = icmp eq %class.SkOpSpan* %91, null
  br i1 %92, label %106, label %93

93:                                               ; preds = %83
  %94 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %91, i64 0, i32 0, i32 1
  %95 = load %class.SkOpSegment*, %class.SkOpSegment** %94, align 8
  %96 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %95, i64 0, i32 10
  %97 = load i32, i32* %96, align 4
  %98 = icmp sgt i32 %97, 1
  br i1 %98, label %99, label %106

99:                                               ; preds = %93
  %100 = and i32 %90, 1
  %101 = xor i32 %100, 1
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %63, i64 %102
  %104 = load double, double* %103, align 8
  %105 = fcmp une double %104, 0.000000e+00
  br i1 %105, label %106, label %327

106:                                              ; preds = %83, %99, %93
  %107 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %4, i64 0, i32 2, i32 0
  %108 = and i32 %90, 1
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %107, i64 %109
  %111 = zext i32 %90 to i64
  %112 = and i32 %90, 2
  %113 = icmp eq i32 %112, 0
  br label %114

114:                                              ; preds = %139, %106
  %115 = phi %class.SkOpContour* [ %1, %106 ], [ %141, %139 ]
  %116 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %115, i64 0, i32 6
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %139, label %119

119:                                              ; preds = %114
  %120 = load float, float* %110, align 4
  %121 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %115, i64 0, i32 4, i32 0, i32 0
  %122 = getelementptr inbounds float, float* %121, i64 %111
  %123 = load float, float* %122, align 4
  %124 = fpext float %120 to double
  %125 = fpext float %123 to double
  %126 = fsub double %124, %125
  %127 = call double @llvm.fabs.f64(double %126) #9
  %128 = fcmp uge double %127, 0x3E80000000000000
  %129 = fcmp uge float %120, %123
  %130 = xor i1 %113, %129
  %131 = and i1 %130, %128
  br i1 %131, label %139, label %132

132:                                              ; preds = %119
  %133 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %115, i64 0, i32 1
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi %class.SkOpSegment* [ %133, %132 ], [ %137, %134 ]
  call void @_ZN11SkOpSegment8rayCheckERK10SkOpRayHit10SkOpRayDirPPS0_P12SkArenaAlloc(%class.SkOpSegment* %135, %struct.SkOpRayHit* nonnull dereferenceable(56) %4, i32 %90, %struct.SkOpRayHit** nonnull %5, %class.SkArenaAlloc* %9) #9
  %136 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %135, i64 0, i32 3
  %137 = load %class.SkOpSegment*, %class.SkOpSegment** %136, align 8
  %138 = icmp eq %class.SkOpSegment* %137, null
  br i1 %138, label %139, label %134

139:                                              ; preds = %134, %119, %114
  %140 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %115, i64 0, i32 3
  %141 = load %class.SkOpContour*, %class.SkOpContour** %140, align 8
  %142 = icmp eq %class.SkOpContour* %141, null
  br i1 %142, label %143, label %114

143:                                              ; preds = %139
  %144 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %144) #9
  %145 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 8
  %146 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %6, i64 0, i32 0, i32 0, i64 16
  %147 = bitcast i8* %146 to i64*
  %148 = bitcast i8* %145 to i8**
  %149 = bitcast %class.SkSTArray* %6 to i64*
  store i64 -6148914691236517206, i64* %149, align 8
  store i8* %144, i8** %148, align 8
  store i64 8589934592, i64* %147, align 8
  %150 = bitcast %struct.SkOpRayHit** %5 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %156

153:                                              ; preds = %143
  %154 = bitcast %class.SkSTArray* %6 to %struct.SkOpRayHit**
  %155 = bitcast i8* %145 to %struct.SkOpRayHit***
  br label %178

156:                                              ; preds = %143
  %157 = bitcast i8* %145 to %class.SkTArray*
  %158 = bitcast i8* %145 to %struct.SkOpRayHit***
  br label %159

159:                                              ; preds = %156, %159
  %160 = phi i64 [ %151, %156 ], [ %172, %159 ]
  call void @_ZN8SkTArrayIP10SkOpRayHitLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray* %157, i32 1, i32 1) #9
  %161 = load %struct.SkOpRayHit**, %struct.SkOpRayHit*** %158, align 8
  %162 = load i64, i64* %147, align 8
  %163 = lshr i64 %162, 1
  %164 = and i64 %163, 2147483647
  %165 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %161, i64 %164
  %166 = add i64 %162, 2
  %167 = and i64 %166, 4294967294
  %168 = and i64 %162, -4294967295
  %169 = or i64 %167, %168
  store i64 %169, i64* %147, align 8
  %170 = bitcast %struct.SkOpRayHit** %165 to i64*
  store i64 %160, i64* %170, align 8
  %171 = inttoptr i64 %160 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %159

174:                                              ; preds = %159
  %175 = load i64, i64* %147, align 8
  %176 = load %struct.SkOpRayHit**, %struct.SkOpRayHit*** %158, align 8
  %177 = lshr i64 %175, 1
  br label %178

178:                                              ; preds = %153, %174
  %179 = phi %struct.SkOpRayHit*** [ %155, %153 ], [ %158, %174 ]
  %180 = phi %struct.SkOpRayHit** [ %154, %153 ], [ %176, %174 ]
  %181 = phi i64 [ 4294967296, %153 ], [ %177, %174 ]
  %182 = trunc i64 %181 to i32
  %183 = and i32 %182, 2147483647
  %184 = icmp eq %struct.SkOpRayHit** %180, null
  %185 = and i64 %181, 2147483647
  %186 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %180, i64 %185
  %187 = select i1 %184, %struct.SkOpRayHit** null, %struct.SkOpRayHit** %186
  %188 = ptrtoint %struct.SkOpRayHit** %187 to i64
  %189 = ptrtoint %struct.SkOpRayHit** %180 to i64
  %190 = sub i64 %188, %189
  %191 = lshr exact i64 %190, 3
  %192 = trunc i64 %191 to i32
  %193 = icmp slt i32 %192, 2
  br i1 %193, label %203, label %194

194:                                              ; preds = %178
  %195 = icmp eq i32 %108, 0
  %196 = select i1 %113, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* @_ZL13hit_compare_xPK10SkOpRayHitS1_, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* @_ZL21reverse_hit_compare_xPK10SkOpRayHitS1_
  %197 = select i1 %113, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* @_ZL13hit_compare_yPK10SkOpRayHitS1_, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* @_ZL21reverse_hit_compare_yPK10SkOpRayHitS1_
  %198 = select i1 %195, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* %196, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* %197
  %199 = add nsw i32 %192, -2
  %200 = call i32 @llvm.ctlz.i32(i32 %199, i1 false) #9, !range !2
  %201 = shl nuw nsw i32 %200, 1
  %202 = sub nsw i32 64, %201
  call void @_Z12SkTIntroSortIP10SkOpRayHitFbPKS0_S3_EEviPT_iRKT0_(i32 %202, %struct.SkOpRayHit** %180, i32 %192, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* nonnull %198) #9
  br label %203

203:                                              ; preds = %178, %194
  %204 = icmp eq i32 %183, 0
  br i1 %204, label %319, label %205

205:                                              ; preds = %203
  %206 = xor i32 %108, 1
  %207 = zext i32 %206 to i64
  %208 = add nuw nsw i32 %90, 1
  %209 = and i32 %208, 2
  %210 = icmp ne i32 %209, 0
  %211 = add nsw i32 %183, -1
  %212 = bitcast %class.SkOpSpan* %0 to %class.SkOpSpanBase*
  %213 = sext i32 %211 to i64
  %214 = zext i32 %183 to i64
  br label %215

215:                                              ; preds = %313, %205
  %216 = phi i64 [ 0, %205 ], [ %317, %313 ]
  %217 = phi %struct.SkPoint* [ null, %205 ], [ %316, %313 ]
  %218 = phi i32 [ 0, %205 ], [ %315, %313 ]
  %219 = phi i32 [ 0, %205 ], [ %314, %313 ]
  %220 = load %struct.SkOpRayHit**, %struct.SkOpRayHit*** %179, align 8
  %221 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %220, i64 %216
  %222 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %221, align 8
  %223 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 5
  %224 = load i8, i8* %223, align 8, !range !3
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %319, label %226

226:                                              ; preds = %215
  %227 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 4, i32 0
  %228 = getelementptr inbounds double, double* %227, i64 %207
  %229 = load double, double* %228, align 8
  %230 = fcmp ule double %229, 0.000000e+00
  %231 = xor i1 %210, %230
  %232 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 1
  %233 = load %class.SkOpSpan*, %class.SkOpSpan** %232, align 8
  %234 = icmp eq %class.SkOpSpan* %233, null
  br i1 %234, label %319, label %235

235:                                              ; preds = %226
  %236 = bitcast %class.SkOpSpan* %233 to %class.SkOpSpanBase*
  %237 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 0, i32 1
  %238 = load %class.SkOpSegment*, %class.SkOpSegment** %237, align 8
  %239 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 7
  %240 = load i32, i32* %239, align 8
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %246

242:                                              ; preds = %235
  %243 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 8
  %244 = load i32, i32* %243, align 4
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %313, label %246

246:                                              ; preds = %242, %235
  %247 = icmp eq %struct.SkPoint* %217, null
  br i1 %247, label %251, label %248

248:                                              ; preds = %246
  %249 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 2
  %250 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %217, %struct.SkPoint* dereferenceable(8) %249)
  br i1 %250, label %319, label %251

251:                                              ; preds = %246, %248
  %252 = icmp slt i64 %216, %213
  br i1 %252, label %253, label %261

253:                                              ; preds = %251
  %254 = add nuw nsw i64 %216, 1
  %255 = load %struct.SkOpRayHit**, %struct.SkOpRayHit*** %179, align 8
  %256 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %255, i64 %254
  %257 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %256, align 8
  %258 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %257, i64 0, i32 2
  %259 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 2
  %260 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %258, %struct.SkPoint* dereferenceable(8) %259)
  br i1 %260, label %319, label %261

261:                                              ; preds = %253, %251
  %262 = call zeroext i1 @_ZNK11SkOpSegment7operandEv(%class.SkOpSegment* %238) #9
  %263 = select i1 %262, i32 %218, i32 %219
  %264 = select i1 %262, i32 %219, i32 %218
  %265 = load i32, i32* %239, align 8
  %266 = sub nsw i32 0, %265
  %267 = select i1 %231, i32 %266, i32 %265
  %268 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 8
  %269 = load i32, i32* %268, align 4
  %270 = sub nsw i32 0, %269
  %271 = select i1 %231, i32 %270, i32 %269
  %272 = add nsw i32 %267, %263
  %273 = add nsw i32 %271, %264
  %274 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 5
  %275 = load i32, i32* %274, align 8
  %276 = call zeroext i1 @_ZN11SkOpSegment15UseInnerWindingEii(i32 %263, i32 %272) #9
  %277 = select i1 %276, i32 %272, i32 %263
  %278 = icmp eq i32 %275, -2147483647
  br i1 %278, label %279, label %280

279:                                              ; preds = %261
  call void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan* nonnull %233, i32 %277) #9
  br label %280

280:                                              ; preds = %261, %279
  %281 = phi i1 [ true, %279 ], [ false, %261 ]
  %282 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 6
  %283 = load i32, i32* %282, align 4
  %284 = call zeroext i1 @_ZN11SkOpSegment15UseInnerWindingEii(i32 %264, i32 %273) #9
  %285 = select i1 %284, i32 %273, i32 %264
  %286 = icmp eq i32 %283, -2147483647
  br i1 %286, label %287, label %288

287:                                              ; preds = %280
  call void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan* nonnull %233, i32 %285) #9
  br label %288

288:                                              ; preds = %280, %287
  br i1 %281, label %289, label %305

289:                                              ; preds = %288
  %290 = call %class.SkOpGlobalState* @_ZNK12SkOpSpanBase11globalStateEv(%class.SkOpSpanBase* %212) #9
  %291 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %290, i64 0, i32 6
  %292 = load i8, i8* %291, align 2
  %293 = icmp eq i8 %292, 3
  br i1 %293, label %294, label %299

294:                                              ; preds = %289
  %295 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %238, i64 0, i32 2
  %296 = load %class.SkOpContour*, %class.SkOpContour** %295, align 8
  %297 = zext i1 %231 to i32
  %298 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %296, i64 0, i32 5
  store i32 %297, i32* %298, align 8
  br label %305

299:                                              ; preds = %289
  %300 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %233, i64 0, i32 4
  %301 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %300, align 8
  %302 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment* %238, %class.SkOpSpanBase* nonnull %236, %class.SkOpSpanBase* %301, i32 %277, i32 %285, %class.SkOpSpanBase** null) #9
  %303 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %300, align 8
  %304 = call zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment* %238, %class.SkOpSpanBase* %303, %class.SkOpSpanBase* nonnull %236, i32 %277, i32 %285, %class.SkOpSpanBase** null) #9
  br label %305

305:                                              ; preds = %294, %299, %288
  %306 = select i1 %262, i32 %273, i32 %272
  %307 = select i1 %262, i32 %272, i32 %273
  %308 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %222, i64 0, i32 2
  %309 = call %class.SkOpGlobalState* @_ZNK12SkOpSpanBase11globalStateEv(%class.SkOpSpanBase* %212) #9
  %310 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %309, i64 0, i32 3
  %311 = load i32, i32* %310, align 8
  %312 = add nsw i32 %311, 1
  store i32 %312, i32* %310, align 8
  br label %313

313:                                              ; preds = %242, %305
  %314 = phi i32 [ %219, %242 ], [ %306, %305 ]
  %315 = phi i32 [ %218, %242 ], [ %307, %305 ]
  %316 = phi %struct.SkPoint* [ %217, %242 ], [ %308, %305 ]
  %317 = add nuw nsw i64 %216, 1
  %318 = icmp eq i64 %317, %214
  br i1 %318, label %319, label %215

319:                                              ; preds = %215, %226, %248, %253, %313, %203
  %320 = phi i1 [ true, %203 ], [ false, %253 ], [ false, %248 ], [ false, %226 ], [ false, %215 ], [ true, %313 ]
  %321 = load i64, i64* %147, align 8
  %322 = and i64 %321, 1
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %326, label %324

324:                                              ; preds = %319
  %325 = load i8*, i8** %148, align 8
  call void @_Z7sk_freePv(i8* %325) #9
  br label %326

326:                                              ; preds = %319, %324
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %144) #9
  br label %327

327:                                              ; preds = %99, %326
  %328 = phi i1 [ %320, %326 ], [ false, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #9
  br label %329

329:                                              ; preds = %33, %327
  %330 = phi i1 [ %328, %327 ], [ false, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %35) #9
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %9) #9
  call void @llvm.lifetime.end.p0i8(i64 1056, i8* nonnull %7) #9
  ret i1 %330
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZL13hit_compare_yPK10SkOpRayHitS1_(%struct.SkOpRayHit* nocapture readonly, %struct.SkOpRayHit* nocapture readonly) #5 {
  %3 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %0, i64 0, i32 2, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2, i32 1
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZL21reverse_hit_compare_yPK10SkOpRayHitS1_(%struct.SkOpRayHit* nocapture readonly, %struct.SkOpRayHit* nocapture readonly) #5 {
  %3 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %0, i64 0, i32 2, i32 1
  %6 = load float, float* %5, align 4
  %7 = fcmp olt float %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZL13hit_compare_xPK10SkOpRayHitS1_(%struct.SkOpRayHit* nocapture readonly, %struct.SkOpRayHit* nocapture readonly) #5 {
  %3 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %0, i64 0, i32 2, i32 0
  %4 = load float, float* %3, align 8
  %5 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2, i32 0
  %6 = load float, float* %5, align 8
  %7 = fcmp olt float %4, %6
  ret i1 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZL21reverse_hit_compare_xPK10SkOpRayHitS1_(%struct.SkOpRayHit* nocapture readonly, %struct.SkOpRayHit* nocapture readonly) #5 {
  %3 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %1, i64 0, i32 2, i32 0
  %4 = load float, float* %3, align 8
  %5 = getelementptr inbounds %struct.SkOpRayHit, %struct.SkOpRayHit* %0, i64 0, i32 2, i32 0
  %6 = load float, float* %5, align 8
  %7 = fcmp olt float %4, %6
  ret i1 %7
}

declare zeroext i1 @_ZNK11SkOpSegment7operandEv(%class.SkOpSegment*) local_unnamed_addr #6

declare zeroext i1 @_ZN11SkOpSegment15UseInnerWindingEii(i32, i32) local_unnamed_addr #6

declare void @_ZN8SkOpSpan10setWindSumEi(%class.SkOpSpan*, i32) local_unnamed_addr #6

declare void @_ZN8SkOpSpan9setOppSumEi(%class.SkOpSpan*, i32) local_unnamed_addr #6

declare %class.SkOpGlobalState* @_ZNK12SkOpSpanBase11globalStateEv(%class.SkOpSpanBase*) local_unnamed_addr #6

declare zeroext i1 @_ZN11SkOpSegment19markAndChaseWindingEP12SkOpSpanBaseS1_iiPS1_(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i32, %class.SkOpSpanBase**) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSpan* @_ZN11SkOpSegment15findSortableTopEP11SkOpContour(%class.SkOpSegment*, %class.SkOpContour*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %0, i64 0, i32 0
  br label %4

4:                                                ; preds = %21, %2
  %5 = phi %class.SkOpSpan* [ %3, %2 ], [ %22, %21 ]
  %6 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 4
  %7 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %6, align 8
  %8 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 10
  %9 = load i8, i8* %8, align 4, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %5, i64 0, i32 5
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, -2147483647
  br i1 %14, label %15, label %24

15:                                               ; preds = %11
  %16 = tail call zeroext i1 @_ZN8SkOpSpan11sortableTopEP11SkOpContour(%class.SkOpSpan* %5, %class.SkOpContour* %1)
  br i1 %16, label %24, label %17

17:                                               ; preds = %4, %15
  %18 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %7, i64 0, i32 0, i32 0
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 1.000000e+00
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  %22 = bitcast %class.SkOpSpanBase* %7 to %class.SkOpSpan*
  %23 = icmp eq %class.SkOpSpanBase* %7, null
  br i1 %23, label %24, label %4

24:                                               ; preds = %17, %21, %15, %11
  %25 = phi %class.SkOpSpan* [ %5, %11 ], [ %5, %15 ], [ null, %21 ], [ null, %17 ]
  ret %class.SkOpSpan* %25
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSpan* @_ZN11SkOpContour15findSortableTopEPS_(%class.SkOpContour*, %class.SkOpContour*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %0, i64 0, i32 6
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %0, i64 0, i32 1
  br label %8

8:                                                ; preds = %40, %6
  %9 = phi i8 [ 1, %6 ], [ %41, %40 ]
  %10 = phi %class.SkOpSegment* [ %7, %6 ], [ %43, %40 ]
  %11 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 9
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 8
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %40, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 0
  br label %18

18:                                               ; preds = %35, %16
  %19 = phi %class.SkOpSpan* [ %17, %16 ], [ %36, %35 ]
  %20 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %19, i64 0, i32 4
  %21 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %20, align 8
  %22 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %19, i64 0, i32 10
  %23 = load i8, i8* %22, align 4, !range !3
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %18
  %26 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %19, i64 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, -2147483647
  br i1 %28, label %29, label %38

29:                                               ; preds = %25
  %30 = tail call zeroext i1 @_ZN8SkOpSpan11sortableTopEP11SkOpContour(%class.SkOpSpan* %19, %class.SkOpContour* %1) #9
  br i1 %30, label %38, label %31

31:                                               ; preds = %29, %18
  %32 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %21, i64 0, i32 0, i32 0
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 1.000000e+00
  br i1 %34, label %40, label %35

35:                                               ; preds = %31
  %36 = bitcast %class.SkOpSpanBase* %21 to %class.SkOpSpan*
  %37 = icmp eq %class.SkOpSpanBase* %21, null
  br i1 %37, label %40, label %18

38:                                               ; preds = %25, %29
  %39 = icmp eq %class.SkOpSpan* %19, null
  br i1 %39, label %40, label %50

40:                                               ; preds = %31, %35, %38, %8
  %41 = phi i8 [ %9, %8 ], [ 0, %38 ], [ 0, %35 ], [ 0, %31 ]
  %42 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %10, i64 0, i32 3
  %43 = load %class.SkOpSegment*, %class.SkOpSegment** %42, align 8
  %44 = icmp eq %class.SkOpSegment* %43, null
  br i1 %44, label %45, label %8

45:                                               ; preds = %40
  %46 = and i8 %41, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %2, %45
  %49 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %0, i64 0, i32 8
  store i8 1, i8* %49, align 4
  br label %50

50:                                               ; preds = %38, %48, %45
  %51 = phi %class.SkOpSpan* [ null, %45 ], [ null, %48 ], [ %19, %38 ]
  ret %class.SkOpSpan* %51
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSpan* @_Z15FindSortableTopP15SkOpContourHead(%class.SkOpContourHead*) local_unnamed_addr #0 {
  %2 = bitcast %class.SkOpContourHead* %0 to %class.SkOpContour*
  br label %3

3:                                                ; preds = %61, %1
  %4 = phi i32 [ 0, %1 ], [ %62, %61 ]
  br label %5

5:                                                ; preds = %57, %3
  %6 = phi %class.SkOpContour* [ %2, %3 ], [ %59, %57 ]
  %7 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %6, i64 0, i32 8
  %8 = load i8, i8* %7, align 4, !range !3
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %57

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %6, i64 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %56, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %6, i64 0, i32 1
  br label %16

16:                                               ; preds = %48, %14
  %17 = phi i8 [ 1, %14 ], [ %49, %48 ]
  %18 = phi %class.SkOpSegment* [ %15, %14 ], [ %51, %48 ]
  %19 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %18, i64 0, i32 9
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %18, i64 0, i32 8
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %48, label %24

24:                                               ; preds = %16
  %25 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %18, i64 0, i32 0
  br label %26

26:                                               ; preds = %43, %24
  %27 = phi %class.SkOpSpan* [ %25, %24 ], [ %44, %43 ]
  %28 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %27, i64 0, i32 4
  %29 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %28, align 8
  %30 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %27, i64 0, i32 10
  %31 = load i8, i8* %30, align 4, !range !3
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %26
  %34 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %27, i64 0, i32 5
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, -2147483647
  br i1 %36, label %37, label %46

37:                                               ; preds = %33
  %38 = tail call zeroext i1 @_ZN8SkOpSpan11sortableTopEP11SkOpContour(%class.SkOpSpan* %27, %class.SkOpContour* %2) #9
  br i1 %38, label %46, label %39

39:                                               ; preds = %37, %26
  %40 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %29, i64 0, i32 0, i32 0
  %41 = load double, double* %40, align 8
  %42 = fcmp oeq double %41, 1.000000e+00
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = bitcast %class.SkOpSpanBase* %29 to %class.SkOpSpan*
  %45 = icmp eq %class.SkOpSpanBase* %29, null
  br i1 %45, label %48, label %26

46:                                               ; preds = %37, %33
  %47 = icmp eq %class.SkOpSpan* %27, null
  br i1 %47, label %48, label %64

48:                                               ; preds = %43, %39, %46, %16
  %49 = phi i8 [ %17, %16 ], [ 0, %46 ], [ 0, %39 ], [ 0, %43 ]
  %50 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %18, i64 0, i32 3
  %51 = load %class.SkOpSegment*, %class.SkOpSegment** %50, align 8
  %52 = icmp eq %class.SkOpSegment* %51, null
  br i1 %52, label %53, label %16

53:                                               ; preds = %48
  %54 = and i8 %49, 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %53, %10
  store i8 1, i8* %7, align 4
  br label %57

57:                                               ; preds = %5, %56, %53
  %58 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %6, i64 0, i32 3
  %59 = load %class.SkOpContour*, %class.SkOpContour** %58, align 8
  %60 = icmp eq %class.SkOpContour* %59, null
  br i1 %60, label %61, label %5

61:                                               ; preds = %57
  %62 = add nuw nsw i32 %4, 1
  %63 = icmp eq i32 %62, 10
  br i1 %63, label %64, label %3

64:                                               ; preds = %61, %46
  %65 = phi %class.SkOpSpan* [ %27, %46 ], [ null, %61 ]
  ret %class.SkOpSpan* %65
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16line_intercept_hPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double* nocapture) #0 {
  %5 = alloca %struct.SkDLine, align 16
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %9 = load float, float* %8, align 4
  %10 = fcmp oeq float %7, %9
  br i1 %10, label %33, label %11

11:                                               ; preds = %4
  %12 = bitcast %struct.SkDLine* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #9
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %5, i64 0, i32 0, i64 1, i32 0
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = insertelement <2 x float> undef, float %15, i32 0
  %17 = insertelement <2 x float> %16, float %7, i32 1
  %18 = fpext <2 x float> %17 to <2 x double>
  %19 = bitcast %struct.SkDLine* %5 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 16
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %21 = load float, float* %20, align 4
  %22 = insertelement <2 x float> undef, float %21, i32 0
  %23 = insertelement <2 x float> %22, float %9, i32 1
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = bitcast double* %13 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 16
  %26 = fpext float %2 to double
  %27 = call double @_ZN15SkIntersections19HorizontalInterceptERK7SkDLined(%struct.SkDLine* nonnull dereferenceable(32) %5, double %26) #9
  store double %27, double* %3, align 8
  %28 = fsub double 0.000000e+00, %27
  %29 = fsub double 1.000000e+00, %27
  %30 = fmul double %28, %29
  %31 = fcmp ole double %30, 0.000000e+00
  %32 = zext i1 %31 to i32
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #9
  br label %33

33:                                               ; preds = %4, %11
  %34 = phi i32 [ %32, %11 ], [ 0, %4 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16line_intercept_vPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double* nocapture) #0 {
  %5 = alloca %struct.SkDLine, align 16
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp oeq float %7, %9
  br i1 %10, label %33, label %11

11:                                               ; preds = %4
  %12 = bitcast %struct.SkDLine* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #9
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %5, i64 0, i32 0, i64 1, i32 0
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = insertelement <2 x float> undef, float %7, i32 0
  %17 = insertelement <2 x float> %16, float %15, i32 1
  %18 = fpext <2 x float> %17 to <2 x double>
  %19 = bitcast %struct.SkDLine* %5 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 16
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %21 = load float, float* %20, align 4
  %22 = insertelement <2 x float> undef, float %9, i32 0
  %23 = insertelement <2 x float> %22, float %21, i32 1
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = bitcast double* %13 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 16
  %26 = fpext float %2 to double
  %27 = call double @_ZN15SkIntersections17VerticalInterceptERK7SkDLined(%struct.SkDLine* nonnull dereferenceable(32) %5, double %26) #9
  store double %27, double* %3, align 8
  %28 = fsub double 0.000000e+00, %27
  %29 = fsub double 1.000000e+00, %27
  %30 = fmul double %28, %29
  %31 = fcmp ole double %30, 0.000000e+00
  %32 = zext i1 %31 to i32
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #9
  br label %33

33:                                               ; preds = %4, %11
  %34 = phi i32 [ %32, %11 ], [ 0, %4 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16quad_intercept_hPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDQuad, align 16
  %6 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 0
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 0
  %9 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = bitcast %struct.SkDQuad* %5 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 16
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fpext <2 x float> %15 to <2 x double>
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %8 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = call i32 @_ZN15SkIntersections19HorizontalInterceptERK7SkDQuadfPd(%struct.SkDQuad* nonnull dereferenceable(48) %5, float %2, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #9
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16quad_intercept_vPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDQuad, align 16
  %6 = bitcast %struct.SkDQuad* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #9
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 1, i32 0
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %5, i64 0, i32 0, i64 2, i32 0
  %9 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = bitcast %struct.SkDQuad* %5 to <2 x double>*
  store <2 x double> %11, <2 x double>* %12, align 16
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = fpext <2 x float> %15 to <2 x double>
  %17 = bitcast double* %7 to <2 x double>*
  store <2 x double> %16, <2 x double>* %17, align 16
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %8 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = call i32 @_ZN15SkIntersections17VerticalInterceptERK7SkDQuadfPd(%struct.SkDQuad* nonnull dereferenceable(48) %5, float %2, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #9
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL17conic_intercept_hPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDConic, align 16
  %6 = bitcast %struct.SkDConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDConic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 1
  store float %1, float* %23, align 16
  %24 = call i32 @_ZN15SkIntersections19HorizontalInterceptERK8SkDConicfPd(%struct.SkDConic* nonnull dereferenceable(56) %5, float %2, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL17conic_intercept_vPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDConic, align 16
  %6 = bitcast %struct.SkDConic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %6) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDConic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %5, i64 0, i32 1
  store float %1, float* %23, align 16
  %24 = call i32 @_ZN15SkIntersections17VerticalInterceptERK8SkDConicfPd(%struct.SkDConic* nonnull dereferenceable(56) %5, float %2, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %6) #9
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL17cubic_intercept_hPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDCubic, align 16
  %6 = bitcast %struct.SkDCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #9
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDCubic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 3, i32 0
  %25 = bitcast float* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = bitcast double* %24 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 16
  %29 = fpext float %2 to double
  %30 = call i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic* nonnull %5, double %29, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #9
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL17cubic_intercept_vPK7SkPointffPd(%struct.SkPoint* nocapture readonly, float, float, double*) #0 {
  %5 = alloca %struct.SkDCubic, align 16
  %6 = bitcast %struct.SkDCubic* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #9
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDCubic* %5 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %11 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %12 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 2, i32 0
  %19 = bitcast float* %17 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast double* %18 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %5, i64 0, i32 0, i64 3, i32 0
  %25 = bitcast float* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = bitcast double* %24 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 16
  %29 = fpext float %2 to double
  %30 = call i32 @_ZNK8SkDCubic17verticalIntersectEdPd(%struct.SkDCubic* nonnull %5, double %29, double* %3) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #9
  ret i32 %30
}

declare double @_ZN15SkIntersections19HorizontalInterceptERK7SkDLined(%struct.SkDLine* dereferenceable(32), double) local_unnamed_addr #6

declare double @_ZN15SkIntersections17VerticalInterceptERK7SkDLined(%struct.SkDLine* dereferenceable(32), double) local_unnamed_addr #6

declare i32 @_ZN15SkIntersections19HorizontalInterceptERK7SkDQuadfPd(%struct.SkDQuad* dereferenceable(48), float, double*) local_unnamed_addr #6

declare i32 @_ZN15SkIntersections17VerticalInterceptERK7SkDQuadfPd(%struct.SkDQuad* dereferenceable(48), float, double*) local_unnamed_addr #6

declare i32 @_ZN15SkIntersections19HorizontalInterceptERK8SkDConicfPd(%struct.SkDConic* dereferenceable(56), float, double*) local_unnamed_addr #6

declare i32 @_ZN15SkIntersections17VerticalInterceptERK8SkDConicfPd(%struct.SkDConic* dereferenceable(56), float, double*) local_unnamed_addr #6

declare i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic*, double, double*) local_unnamed_addr #6

declare i32 @_ZNK8SkDCubic17verticalIntersectEdPd(%struct.SkDCubic*, double, double*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL13fline_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #2 {
  %4 = alloca %struct.SkDLine, align 16
  %5 = bitcast %struct.SkDLine* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %4, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = bitcast %struct.SkDLine* %4 to <2 x double>*
  store <2 x double> %9, <2 x double>* %10, align 16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %6 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #9
  %17 = extractvalue { double, double } %16, 0
  %18 = extractvalue { double, double } %16, 1
  %19 = fptrunc double %17 to float
  %20 = insertelement <2 x float> undef, float %19, i32 0
  %21 = fptrunc double %18 to float
  %22 = insertelement <2 x float> %20, float %21, i32 1
  ret <2 x float> %22
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL13fquad_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #2 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #9
  %23 = extractvalue { double, double } %22, 0
  %24 = extractvalue { double, double } %22, 1
  %25 = fptrunc double %23 to float
  %26 = insertelement <2 x float> undef, float %25, i32 0
  %27 = fptrunc double %24 to float
  %28 = insertelement <2 x float> %26, float %27, i32 1
  ret <2 x float> %28
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL14fconic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #2 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false) #9
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #9
  %24 = extractvalue { double, double } %23, 0
  %25 = extractvalue { double, double } %23, 1
  %26 = fptrunc double %24 to float
  %27 = insertelement <2 x float> undef, float %26, i32 0
  %28 = fptrunc double %25 to float
  %29 = insertelement <2 x float> %27, float %28, i32 1
  ret <2 x float> %29
}

; Function Attrs: nounwind ssp uwtable
define internal <2 x float> @_ZL14fcubic_xy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #2 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #9
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #9
  %29 = extractvalue { double, double } %28, 0
  %30 = extractvalue { double, double } %28, 1
  %31 = fptrunc double %29 to float
  %32 = insertelement <2 x float> undef, float %31, i32 0
  %33 = fptrunc double %30 to float
  %34 = insertelement <2 x float> %32, float %33, i32 1
  ret <2 x float> %34
}

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #6

declare { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #6

declare { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic*, double) local_unnamed_addr #6

declare { double, double } @_ZNK8SkDCubic5ptAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #6

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #6

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #7

; Function Attrs: nounwind readonly ssp uwtable
define internal { double, double } @_ZL15dline_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #4 {
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = fpext <2 x float> %5 to <2 x double>
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = fsub <2 x double> %10, %6
  %12 = extractelement <2 x double> %11, i32 0
  %13 = insertvalue { double, double } undef, double %12, 0
  %14 = extractelement <2 x double> %11, i32 1
  %15 = insertvalue { double, double } %13, double %14, 1
  ret { double, double } %15
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL15dquad_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDQuad, align 16
  %5 = bitcast %struct.SkDQuad* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %4, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %4 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = call { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #9
  ret { double, double } %22
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dconic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDConic, align 16
  %5 = bitcast %struct.SkDConic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 8 bitcast ({ %struct.SkDQuad, float, [4 x i8] }* @__const._ZL16dconic_dxdy_at_tPK7SkPointfd.conic to i8*), i64 56, i1 false)
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDConic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %4, i64 0, i32 1
  store float %1, float* %22, align 16
  %23 = call { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #9
  ret { double, double } %23
}

; Function Attrs: nounwind ssp uwtable
define internal { double, double } @_ZL16dcubic_dxdy_at_tPK7SkPointfd(%struct.SkPoint* nocapture readonly, float, double) #0 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #9
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %8, <2 x double>* %9, align 16
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %11 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = bitcast double* %11 to <2 x double>*
  store <2 x double> %14, <2 x double>* %15, align 16
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %17 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %16 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %17 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %25 to <2 x double>
  %27 = bitcast double* %23 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 16
  %28 = call { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic* nonnull %4, double %2) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #9
  ret { double, double } %28
}

declare { double, double } @_ZNK7SkDQuad7dxdyAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #6

declare { double, double } @_ZNK8SkDConic7dxdyAtTEd(%struct.SkDConic*, double) local_unnamed_addr #6

declare { double, double } @_ZNK8SkDCubic7dxdyAtTEd(%struct.SkDCubic*, double) local_unnamed_addr #6

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #8

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #6

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #6

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIP10SkOpRayHitLb0EE12checkReallocEiNS2_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.SkOpRayHit**, %struct.SkOpRayHit*** %49, align 8
  %55 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %54, i64 %51
  %56 = bitcast %struct.SkOpRayHit** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8* %53 to i64*
  store i64 %57, i64* %58, align 8
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #9
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIP10SkOpRayHitFbPKS0_S3_EEviPT_iRKT0_(i32, %struct.SkOpRayHit**, i32, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)*) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %41

6:                                                ; preds = %80, %4
  %7 = phi i32 [ %2, %4 ], [ %93, %80 ]
  %8 = phi %struct.SkOpRayHit** [ %1, %4 ], [ %92, %80 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %95, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %8, i64 1
  br label %15

15:                                               ; preds = %38, %13
  %16 = phi %struct.SkOpRayHit** [ %39, %38 ], [ %14, %13 ]
  %17 = phi %struct.SkOpRayHit** [ %16, %38 ], [ %8, %13 ]
  %18 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %16, align 8
  %19 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %17, align 8
  %20 = tail call zeroext i1 %3(%struct.SkOpRayHit* %18, %struct.SkOpRayHit* %19) #9
  br i1 %20, label %21, label %38

21:                                               ; preds = %15
  %22 = bitcast %struct.SkOpRayHit** %16 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = inttoptr i64 %23 to %struct.SkOpRayHit*
  br label %25

25:                                               ; preds = %32, %21
  %26 = phi %struct.SkOpRayHit** [ %16, %21 ], [ %27, %32 ]
  %27 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %26, i64 -1
  %28 = bitcast %struct.SkOpRayHit** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %struct.SkOpRayHit** %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = icmp ugt %struct.SkOpRayHit** %27, %8
  br i1 %31, label %32, label %36

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %26, i64 -2
  %34 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %33, align 8
  %35 = tail call zeroext i1 %3(%struct.SkOpRayHit* %24, %struct.SkOpRayHit* %34) #9
  br i1 %35, label %25, label %36

36:                                               ; preds = %32, %25
  %37 = bitcast %struct.SkOpRayHit** %27 to i64*
  store i64 %23, i64* %37, align 8
  br label %38

38:                                               ; preds = %36, %15
  %39 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %16, i64 1
  %40 = icmp ugt %struct.SkOpRayHit** %39, %11
  br i1 %40, label %95, label %15

41:                                               ; preds = %4, %80
  %42 = phi i32 [ %49, %80 ], [ %0, %4 ]
  %43 = phi %struct.SkOpRayHit** [ %92, %80 ], [ %1, %4 ]
  %44 = phi i32 [ %93, %80 ], [ %2, %4 ]
  %45 = icmp eq i32 %42, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = sext i32 %44 to i64
  tail call void @_Z11SkTHeapSortIP10SkOpRayHitFbPKS0_S3_EEvPT_mRKT0_(%struct.SkOpRayHit** %43, i64 %47, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* %3)
  br label %95

48:                                               ; preds = %41
  %49 = add nsw i32 %42, -1
  %50 = add nsw i32 %44, -1
  %51 = ashr i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %43, i64 %52
  %54 = sext i32 %44 to i64
  %55 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %43, i64 -1
  %56 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %55, i64 %54
  %57 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %53, align 8
  %58 = bitcast %struct.SkOpRayHit** %53 to i64*
  %59 = ptrtoint %struct.SkOpRayHit* %57 to i64
  %60 = bitcast %struct.SkOpRayHit** %56 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %58, align 8
  store i64 %59, i64* %60, align 8
  %62 = icmp ugt %struct.SkOpRayHit** %56, %43
  br i1 %62, label %63, label %80

63:                                               ; preds = %48, %74
  %64 = phi %struct.SkOpRayHit** [ %75, %74 ], [ %43, %48 ]
  %65 = phi %struct.SkOpRayHit** [ %76, %74 ], [ %43, %48 ]
  %66 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %65, align 8
  %67 = tail call zeroext i1 %3(%struct.SkOpRayHit* %66, %struct.SkOpRayHit* %57) #9
  br i1 %67, label %68, label %74

68:                                               ; preds = %63
  %69 = bitcast %struct.SkOpRayHit** %65 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %struct.SkOpRayHit** %64 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %69, align 8
  store i64 %70, i64* %71, align 8
  %73 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %64, i64 1
  br label %74

74:                                               ; preds = %68, %63
  %75 = phi %struct.SkOpRayHit** [ %73, %68 ], [ %64, %63 ]
  %76 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %65, i64 1
  %77 = icmp ult %struct.SkOpRayHit** %76, %56
  br i1 %77, label %63, label %78

78:                                               ; preds = %74
  %79 = load i64, i64* %60, align 8
  br label %80

80:                                               ; preds = %48, %78
  %81 = phi i64 [ %59, %48 ], [ %79, %78 ]
  %82 = phi %struct.SkOpRayHit** [ %43, %48 ], [ %75, %78 ]
  %83 = bitcast %struct.SkOpRayHit** %82 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %81, i64* %83, align 8
  store i64 %84, i64* %60, align 8
  %85 = ptrtoint %struct.SkOpRayHit** %82 to i64
  %86 = ptrtoint %struct.SkOpRayHit** %43 to i64
  %87 = sub i64 %85, %86
  %88 = lshr exact i64 %87, 3
  %89 = trunc i64 %88 to i32
  tail call void @_Z12SkTIntroSortIP10SkOpRayHitFbPKS0_S3_EEviPT_iRKT0_(i32 %49, %struct.SkOpRayHit** %43, i32 %89, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)* %3)
  %90 = add nsw i32 %89, 1
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %43, i64 %91
  %93 = sub nsw i32 %44, %90
  %94 = icmp slt i32 %93, 33
  br i1 %94, label %6, label %41

95:                                               ; preds = %38, %6, %46
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIP10SkOpRayHitFbPKS0_S3_EEvPT_mRKT0_(%struct.SkOpRayHit**, i64, i1 (%struct.SkOpRayHit*, %struct.SkOpRayHit*)*) local_unnamed_addr #0 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %47, %3
  %7 = add i64 %1, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %51, label %9

9:                                                ; preds = %6
  %10 = bitcast %struct.SkOpRayHit** %0 to i64*
  br label %52

11:                                               ; preds = %3, %47
  %12 = phi i64 [ %13, %47 ], [ %4, %3 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %13
  %15 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %14, align 8
  %16 = shl i64 %12, 1
  %17 = icmp ugt i64 %16, %1
  br i1 %17, label %47, label %18

18:                                               ; preds = %11, %39
  %19 = phi i64 [ %45, %39 ], [ %16, %11 ]
  %20 = phi i64 [ %32, %39 ], [ %12, %11 ]
  %21 = icmp ult i64 %19, %1
  br i1 %21, label %22, label %31

22:                                               ; preds = %18
  %23 = add i64 %19, -1
  %24 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %23
  %25 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %24, align 8
  %26 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %19
  %27 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %26, align 8
  %28 = tail call zeroext i1 %2(%struct.SkOpRayHit* %25, %struct.SkOpRayHit* %27) #9
  %29 = zext i1 %28 to i64
  %30 = or i64 %19, %29
  br label %31

31:                                               ; preds = %22, %18
  %32 = phi i64 [ %19, %18 ], [ %30, %22 ]
  %33 = add i64 %32, -1
  %34 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %33
  %35 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %34, align 8
  %36 = tail call zeroext i1 %2(%struct.SkOpRayHit* %15, %struct.SkOpRayHit* %35) #9
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = add i64 %20, -1
  br label %47

39:                                               ; preds = %31
  %40 = bitcast %struct.SkOpRayHit** %34 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %20, -1
  %43 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %42
  %44 = bitcast %struct.SkOpRayHit** %43 to i64*
  store i64 %41, i64* %44, align 8
  %45 = shl i64 %32, 1
  %46 = icmp ugt i64 %45, %1
  br i1 %46, label %47, label %18

47:                                               ; preds = %39, %11, %37
  %48 = phi i64 [ %13, %11 ], [ %38, %37 ], [ %33, %39 ]
  %49 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %48
  store %struct.SkOpRayHit* %15, %struct.SkOpRayHit** %49, align 8
  %50 = icmp eq i64 %13, 0
  br i1 %50, label %6, label %11

51:                                               ; preds = %52, %102, %6
  ret void

52:                                               ; preds = %9, %102
  %53 = phi i64 [ %7, %9 ], [ %106, %102 ]
  %54 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %53
  %55 = load i64, i64* %10, align 8
  %56 = bitcast %struct.SkOpRayHit** %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %10, align 8
  store i64 %55, i64* %56, align 8
  %58 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, align 8
  %59 = icmp eq i64 %53, 1
  br i1 %59, label %51, label %63

60:                                               ; preds = %76
  %61 = lshr i64 %77, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %102, label %87

63:                                               ; preds = %52, %76
  %64 = phi i64 [ %85, %76 ], [ 2, %52 ]
  %65 = phi i64 [ %77, %76 ], [ 1, %52 ]
  %66 = icmp ult i64 %64, %53
  br i1 %66, label %67, label %76

67:                                               ; preds = %63
  %68 = add i64 %64, -1
  %69 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %68
  %70 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %69, align 8
  %71 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %64
  %72 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %71, align 8
  %73 = tail call zeroext i1 %2(%struct.SkOpRayHit* %70, %struct.SkOpRayHit* %72) #9
  %74 = zext i1 %73 to i64
  %75 = or i64 %64, %74
  br label %76

76:                                               ; preds = %67, %63
  %77 = phi i64 [ %64, %63 ], [ %75, %67 ]
  %78 = add i64 %77, -1
  %79 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %78
  %80 = bitcast %struct.SkOpRayHit** %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %65, -1
  %83 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %82
  %84 = bitcast %struct.SkOpRayHit** %83 to i64*
  store i64 %81, i64* %84, align 8
  %85 = shl i64 %77, 1
  %86 = icmp ugt i64 %85, %53
  br i1 %86, label %60, label %63

87:                                               ; preds = %60, %94
  %88 = phi i64 [ %100, %94 ], [ %61, %60 ]
  %89 = phi i64 [ %88, %94 ], [ %77, %60 ]
  %90 = add nsw i64 %88, -1
  %91 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %90
  %92 = load %struct.SkOpRayHit*, %struct.SkOpRayHit** %91, align 8
  %93 = tail call zeroext i1 %2(%struct.SkOpRayHit* %92, %struct.SkOpRayHit* %58) #9
  br i1 %93, label %94, label %102

94:                                               ; preds = %87
  %95 = bitcast %struct.SkOpRayHit** %91 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %89, -1
  %98 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %97
  %99 = bitcast %struct.SkOpRayHit** %98 to i64*
  store i64 %96, i64* %99, align 8
  %100 = lshr i64 %88, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %87

102:                                              ; preds = %87, %94, %60
  %103 = phi i64 [ %77, %60 ], [ %89, %87 ], [ %88, %94 ]
  %104 = add i64 %103, -1
  %105 = getelementptr inbounds %struct.SkOpRayHit*, %struct.SkOpRayHit** %0, i64 %104
  store %struct.SkOpRayHit* %58, %struct.SkOpRayHit** %105, align 8
  %106 = add i64 %53, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %51, label %52
}

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i8 0, i8 2}
