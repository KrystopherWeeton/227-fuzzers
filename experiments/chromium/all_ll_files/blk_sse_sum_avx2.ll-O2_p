; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/blk_sse_sum_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/blk_sse_sum_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_get_blk_sse_sum_avx2(i16*, i32, i32, i32, i32*, i64*) local_unnamed_addr #0 {
  store i32 0, i32* %4, align 4
  store i64 0, i64* %5, align 8
  %7 = and i32 %3, 3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %392

9:                                                ; preds = %6
  switch i32 %2, label %391 [
    i32 4, label %10
    i32 8, label %88
    i32 16, label %152
    i32 32, label %152
    i32 64, label %247
  ]

10:                                               ; preds = %9
  %11 = ashr i32 %3, 2
  %12 = icmp sgt i32 %3, 3
  br i1 %12, label %13, label %53

13:                                               ; preds = %10
  %14 = sext i32 %1 to i64
  %15 = shl nsw i32 %1, 1
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 3
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %1, 2
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %13
  %22 = phi i32 [ 0, %13 ], [ %51, %21 ]
  %23 = phi i16* [ %0, %13 ], [ %50, %21 ]
  %24 = phi <8 x i32> [ zeroinitializer, %13 ], [ %49, %21 ]
  %25 = phi <8 x i32> [ zeroinitializer, %13 ], [ %48, %21 ]
  %26 = bitcast i16* %23 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <4 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i16, i16* %23, i64 %14
  %30 = bitcast i16* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <4 x i64> %28, i64 %31, i32 1
  %33 = getelementptr inbounds i16, i16* %23, i64 %16
  %34 = bitcast i16* %33 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = getelementptr inbounds i16, i16* %23, i64 %18
  %38 = bitcast i16* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> %36, i64 %39, i32 1
  %41 = bitcast <4 x i64> %32 to <8 x i32>
  %42 = bitcast <2 x i64> %40 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = shufflevector <8 x i32> %41, <8 x i32> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %45 = bitcast <8 x i32> %44 to <16 x i16>
  %46 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %45, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %47 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %45, <16 x i16> %45) #4
  %48 = add <8 x i32> %46, %25
  %49 = add <8 x i32> %47, %24
  %50 = getelementptr inbounds i16, i16* %23, i64 %20
  %51 = add nuw nsw i32 %22, 1
  %52 = icmp slt i32 %51, %11
  br i1 %52, label %21, label %53

53:                                               ; preds = %21, %10
  %54 = phi <8 x i32> [ zeroinitializer, %10 ], [ %48, %21 ]
  %55 = phi <8 x i32> [ zeroinitializer, %10 ], [ %49, %21 ]
  %56 = shufflevector <8 x i32> %55, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %57 = bitcast <8 x i32> %56 to <4 x i64>
  %58 = shufflevector <8 x i32> %55, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %59 = bitcast <8 x i32> %58 to <4 x i64>
  %60 = add <4 x i64> %59, %57
  %61 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %62 = add <8 x i32> %61, %54
  %63 = bitcast <8 x i32> %62 to <32 x i8>
  %64 = shufflevector <32 x i8> %63, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %65 = bitcast <32 x i8> %64 to <8 x i32>
  %66 = add <8 x i32> %62, %65
  %67 = bitcast <8 x i32> %66 to <32 x i8>
  %68 = shufflevector <32 x i8> %67, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = bitcast <32 x i8> %68 to <8 x i32>
  %70 = add <8 x i32> %66, %69
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %60 to <8 x i32>
  %73 = shufflevector <8 x i32> %72, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %74 = bitcast <8 x i32> %73 to <4 x i64>
  %75 = add <4 x i64> %60, %74
  %76 = bitcast <4 x i64> %75 to <32 x i8>
  %77 = shufflevector <32 x i8> %76, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <32 x i8> %77 to <4 x i64>
  %79 = add <4 x i64> %75, %78
  %80 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %81 = bitcast <2 x i64> %80 to <4 x i32>
  %82 = extractelement <4 x i32> %81, i32 0
  %83 = load i32, i32* %4, align 4
  %84 = add nsw i32 %82, %83
  store i32 %84, i32* %4, align 4
  %85 = extractelement <4 x i64> %79, i32 0
  %86 = load i64, i64* %5, align 8
  %87 = add nsw i64 %85, %86
  store i64 %87, i64* %5, align 8
  br label %393

88:                                               ; preds = %9
  %89 = ashr i32 %3, 1
  %90 = icmp sgt i32 %3, 1
  br i1 %90, label %91, label %117

91:                                               ; preds = %88
  %92 = sext i32 %1 to i64
  %93 = shl nsw i32 %1, 1
  %94 = sext i32 %93 to i64
  br label %95

95:                                               ; preds = %95, %91
  %96 = phi i32 [ 0, %91 ], [ %115, %95 ]
  %97 = phi i16* [ %0, %91 ], [ %114, %95 ]
  %98 = phi <8 x i32> [ zeroinitializer, %91 ], [ %113, %95 ]
  %99 = phi <8 x i32> [ zeroinitializer, %91 ], [ %112, %95 ]
  %100 = bitcast i16* %97 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %97, i64 %92
  %103 = bitcast i16* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 1
  %105 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = bitcast <4 x i64> %105 to <8 x i32>
  %107 = shufflevector <4 x i32> %104, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = shufflevector <8 x i32> %106, <8 x i32> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %109 = bitcast <8 x i32> %108 to <16 x i16>
  %110 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %109, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %111 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %109, <16 x i16> %109) #4
  %112 = add <8 x i32> %110, %99
  %113 = add <8 x i32> %111, %98
  %114 = getelementptr inbounds i16, i16* %97, i64 %94
  %115 = add nuw nsw i32 %96, 1
  %116 = icmp slt i32 %115, %89
  br i1 %116, label %95, label %117

117:                                              ; preds = %95, %88
  %118 = phi <8 x i32> [ zeroinitializer, %88 ], [ %112, %95 ]
  %119 = phi <8 x i32> [ zeroinitializer, %88 ], [ %113, %95 ]
  %120 = shufflevector <8 x i32> %119, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = shufflevector <8 x i32> %119, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %123 = bitcast <8 x i32> %122 to <4 x i64>
  %124 = add <4 x i64> %123, %121
  %125 = shufflevector <8 x i32> %118, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %126 = add <8 x i32> %125, %118
  %127 = bitcast <8 x i32> %126 to <32 x i8>
  %128 = shufflevector <32 x i8> %127, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %129 = bitcast <32 x i8> %128 to <8 x i32>
  %130 = add <8 x i32> %126, %129
  %131 = bitcast <8 x i32> %130 to <32 x i8>
  %132 = shufflevector <32 x i8> %131, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <32 x i8> %132 to <8 x i32>
  %134 = add <8 x i32> %130, %133
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = bitcast <4 x i64> %124 to <8 x i32>
  %137 = shufflevector <8 x i32> %136, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %138 = bitcast <8 x i32> %137 to <4 x i64>
  %139 = add <4 x i64> %124, %138
  %140 = bitcast <4 x i64> %139 to <32 x i8>
  %141 = shufflevector <32 x i8> %140, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <32 x i8> %141 to <4 x i64>
  %143 = add <4 x i64> %139, %142
  %144 = shufflevector <4 x i64> %135, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %145 = bitcast <2 x i64> %144 to <4 x i32>
  %146 = extractelement <4 x i32> %145, i32 0
  %147 = load i32, i32* %4, align 4
  %148 = add nsw i32 %146, %147
  store i32 %148, i32* %4, align 4
  %149 = extractelement <4 x i64> %143, i32 0
  %150 = load i64, i64* %5, align 8
  %151 = add nsw i64 %149, %150
  store i64 %151, i64* %5, align 8
  br label %393

152:                                              ; preds = %9, %9
  %153 = lshr i32 %2, 4
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %212, label %155

155:                                              ; preds = %152
  %156 = icmp sgt i32 %3, 0
  %157 = sext i32 %1 to i64
  %158 = zext i32 %153 to i64
  %159 = and i32 %3, 1
  %160 = icmp eq i32 %3, 1
  %161 = sub i32 %3, %159
  %162 = icmp eq i32 %159, 0
  br label %163

163:                                              ; preds = %184, %155
  %164 = phi i64 [ 0, %155 ], [ %187, %184 ]
  %165 = phi <8 x i32> [ zeroinitializer, %155 ], [ %186, %184 ]
  %166 = phi <8 x i32> [ zeroinitializer, %155 ], [ %185, %184 ]
  br i1 %156, label %167, label %184

167:                                              ; preds = %163
  %168 = shl i64 %164, 4
  %169 = getelementptr inbounds i16, i16* %0, i64 %168
  br i1 %160, label %170, label %189

170:                                              ; preds = %189, %167
  %171 = phi <8 x i32> [ undef, %167 ], [ %207, %189 ]
  %172 = phi <8 x i32> [ undef, %167 ], [ %208, %189 ]
  %173 = phi i16* [ %169, %167 ], [ %209, %189 ]
  %174 = phi <8 x i32> [ %165, %167 ], [ %208, %189 ]
  %175 = phi <8 x i32> [ %166, %167 ], [ %207, %189 ]
  br i1 %162, label %184, label %176

176:                                              ; preds = %170
  %177 = bitcast i16* %173 to i8*
  %178 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %177) #4
  %179 = bitcast <32 x i8> %178 to <16 x i16>
  %180 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %179, <16 x i16> %179) #4
  %181 = add <8 x i32> %180, %174
  %182 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %179, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %183 = add <8 x i32> %182, %175
  br label %184

184:                                              ; preds = %176, %170, %163
  %185 = phi <8 x i32> [ %166, %163 ], [ %171, %170 ], [ %183, %176 ]
  %186 = phi <8 x i32> [ %165, %163 ], [ %172, %170 ], [ %181, %176 ]
  %187 = add nuw nsw i64 %164, 1
  %188 = icmp eq i64 %187, %158
  br i1 %188, label %212, label %163

189:                                              ; preds = %167, %189
  %190 = phi i16* [ %209, %189 ], [ %169, %167 ]
  %191 = phi <8 x i32> [ %208, %189 ], [ %165, %167 ]
  %192 = phi <8 x i32> [ %207, %189 ], [ %166, %167 ]
  %193 = phi i32 [ %210, %189 ], [ %161, %167 ]
  %194 = bitcast i16* %190 to i8*
  %195 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %194) #4
  %196 = bitcast <32 x i8> %195 to <16 x i16>
  %197 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %196, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %198 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %196, <16 x i16> %196) #4
  %199 = add <8 x i32> %197, %192
  %200 = add <8 x i32> %198, %191
  %201 = getelementptr inbounds i16, i16* %190, i64 %157
  %202 = bitcast i16* %201 to i8*
  %203 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %202) #4
  %204 = bitcast <32 x i8> %203 to <16 x i16>
  %205 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %204, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %206 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %204, <16 x i16> %204) #4
  %207 = add <8 x i32> %205, %199
  %208 = add <8 x i32> %206, %200
  %209 = getelementptr inbounds i16, i16* %201, i64 %157
  %210 = add i32 %193, -2
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %170, label %189

212:                                              ; preds = %184, %152
  %213 = phi <8 x i32> [ zeroinitializer, %152 ], [ %185, %184 ]
  %214 = phi <8 x i32> [ zeroinitializer, %152 ], [ %186, %184 ]
  %215 = shufflevector <8 x i32> %214, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %216 = bitcast <8 x i32> %215 to <4 x i64>
  %217 = shufflevector <8 x i32> %214, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %218 = bitcast <8 x i32> %217 to <4 x i64>
  %219 = add <4 x i64> %218, %216
  %220 = shufflevector <8 x i32> %213, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %221 = add <8 x i32> %220, %213
  %222 = bitcast <8 x i32> %221 to <32 x i8>
  %223 = shufflevector <32 x i8> %222, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %224 = bitcast <32 x i8> %223 to <8 x i32>
  %225 = add <8 x i32> %221, %224
  %226 = bitcast <8 x i32> %225 to <32 x i8>
  %227 = shufflevector <32 x i8> %226, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %228 = bitcast <32 x i8> %227 to <8 x i32>
  %229 = add <8 x i32> %225, %228
  %230 = bitcast <8 x i32> %229 to <4 x i64>
  %231 = bitcast <4 x i64> %219 to <8 x i32>
  %232 = shufflevector <8 x i32> %231, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %233 = bitcast <8 x i32> %232 to <4 x i64>
  %234 = add <4 x i64> %219, %233
  %235 = bitcast <4 x i64> %234 to <32 x i8>
  %236 = shufflevector <32 x i8> %235, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %237 = bitcast <32 x i8> %236 to <4 x i64>
  %238 = add <4 x i64> %234, %237
  %239 = shufflevector <4 x i64> %230, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %240 = bitcast <2 x i64> %239 to <4 x i32>
  %241 = extractelement <4 x i32> %240, i32 0
  %242 = load i32, i32* %4, align 4
  %243 = add nsw i32 %241, %242
  store i32 %243, i32* %4, align 4
  %244 = extractelement <4 x i64> %238, i32 0
  %245 = load i64, i64* %5, align 8
  %246 = add nsw i64 %244, %245
  store i64 %246, i64* %5, align 8
  br label %393

247:                                              ; preds = %9
  %248 = icmp slt i32 %3, 33
  br i1 %248, label %249, label %339

249:                                              ; preds = %247
  %250 = icmp sgt i32 %3, 0
  %251 = sext i32 %1 to i64
  %252 = and i32 %3, 1
  %253 = icmp eq i32 %3, 1
  %254 = sub i32 %3, %252
  %255 = icmp eq i32 %252, 0
  br label %256

256:                                              ; preds = %278, %249
  %257 = phi i64 [ 0, %249 ], [ %281, %278 ]
  %258 = phi <8 x i32> [ zeroinitializer, %249 ], [ %280, %278 ]
  %259 = phi <8 x i32> [ zeroinitializer, %249 ], [ %279, %278 ]
  br i1 %250, label %260, label %278

260:                                              ; preds = %256
  %261 = shl i64 %257, 4
  %262 = and i64 %261, 4294967280
  %263 = getelementptr inbounds i16, i16* %0, i64 %262
  br i1 %253, label %264, label %283

264:                                              ; preds = %283, %260
  %265 = phi <8 x i32> [ undef, %260 ], [ %301, %283 ]
  %266 = phi <8 x i32> [ undef, %260 ], [ %302, %283 ]
  %267 = phi i16* [ %263, %260 ], [ %303, %283 ]
  %268 = phi <8 x i32> [ %258, %260 ], [ %302, %283 ]
  %269 = phi <8 x i32> [ %259, %260 ], [ %301, %283 ]
  br i1 %255, label %278, label %270

270:                                              ; preds = %264
  %271 = bitcast i16* %267 to i8*
  %272 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %271) #4
  %273 = bitcast <32 x i8> %272 to <16 x i16>
  %274 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %273, <16 x i16> %273) #4
  %275 = add <8 x i32> %274, %268
  %276 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %273, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %277 = add <8 x i32> %276, %269
  br label %278

278:                                              ; preds = %270, %264, %256
  %279 = phi <8 x i32> [ %259, %256 ], [ %265, %264 ], [ %277, %270 ]
  %280 = phi <8 x i32> [ %258, %256 ], [ %266, %264 ], [ %275, %270 ]
  %281 = add nuw nsw i64 %257, 1
  %282 = icmp eq i64 %281, 4
  br i1 %282, label %306, label %256

283:                                              ; preds = %260, %283
  %284 = phi i16* [ %303, %283 ], [ %263, %260 ]
  %285 = phi <8 x i32> [ %302, %283 ], [ %258, %260 ]
  %286 = phi <8 x i32> [ %301, %283 ], [ %259, %260 ]
  %287 = phi i32 [ %304, %283 ], [ %254, %260 ]
  %288 = bitcast i16* %284 to i8*
  %289 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %288) #4
  %290 = bitcast <32 x i8> %289 to <16 x i16>
  %291 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %290, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %292 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %290, <16 x i16> %290) #4
  %293 = add <8 x i32> %291, %286
  %294 = add <8 x i32> %292, %285
  %295 = getelementptr inbounds i16, i16* %284, i64 %251
  %296 = bitcast i16* %295 to i8*
  %297 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %296) #4
  %298 = bitcast <32 x i8> %297 to <16 x i16>
  %299 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %298, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %300 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %298, <16 x i16> %298) #4
  %301 = add <8 x i32> %299, %293
  %302 = add <8 x i32> %300, %294
  %303 = getelementptr inbounds i16, i16* %295, i64 %251
  %304 = add i32 %287, -2
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %264, label %283

306:                                              ; preds = %278
  %307 = shufflevector <8 x i32> %280, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %308 = bitcast <8 x i32> %307 to <4 x i64>
  %309 = shufflevector <8 x i32> %280, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %310 = bitcast <8 x i32> %309 to <4 x i64>
  %311 = add <4 x i64> %310, %308
  %312 = shufflevector <8 x i32> %279, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %313 = add <8 x i32> %312, %279
  %314 = bitcast <8 x i32> %313 to <32 x i8>
  %315 = shufflevector <32 x i8> %314, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %316 = bitcast <32 x i8> %315 to <8 x i32>
  %317 = add <8 x i32> %313, %316
  %318 = bitcast <8 x i32> %317 to <32 x i8>
  %319 = shufflevector <32 x i8> %318, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %320 = bitcast <32 x i8> %319 to <8 x i32>
  %321 = add <8 x i32> %317, %320
  %322 = bitcast <8 x i32> %321 to <4 x i64>
  %323 = bitcast <4 x i64> %311 to <8 x i32>
  %324 = shufflevector <8 x i32> %323, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %325 = bitcast <8 x i32> %324 to <4 x i64>
  %326 = add <4 x i64> %311, %325
  %327 = bitcast <4 x i64> %326 to <32 x i8>
  %328 = shufflevector <32 x i8> %327, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %329 = bitcast <32 x i8> %328 to <4 x i64>
  %330 = add <4 x i64> %326, %329
  %331 = shufflevector <4 x i64> %322, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %332 = bitcast <2 x i64> %331 to <4 x i32>
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = load i32, i32* %4, align 4
  %335 = add nsw i32 %334, %333
  store i32 %335, i32* %4, align 4
  %336 = extractelement <4 x i64> %330, i32 0
  %337 = load i64, i64* %5, align 8
  %338 = add nsw i64 %337, %336
  store i64 %338, i64* %5, align 8
  br label %393

339:                                              ; preds = %247
  %340 = sext i32 %1 to i64
  br label %343

341:                                              ; preds = %343
  %342 = getelementptr inbounds i16, i16* %0, i64 16
  br label %500

343:                                              ; preds = %343, %339
  %344 = phi i32 [ 0, %339 ], [ %364, %343 ]
  %345 = phi i16* [ %0, %339 ], [ %363, %343 ]
  %346 = phi <8 x i32> [ zeroinitializer, %339 ], [ %362, %343 ]
  %347 = phi <8 x i32> [ zeroinitializer, %339 ], [ %361, %343 ]
  %348 = bitcast i16* %345 to i8*
  %349 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %348) #4
  %350 = bitcast <32 x i8> %349 to <16 x i16>
  %351 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %350, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %352 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %350, <16 x i16> %350) #4
  %353 = add <8 x i32> %351, %347
  %354 = add <8 x i32> %352, %346
  %355 = getelementptr inbounds i16, i16* %345, i64 %340
  %356 = bitcast i16* %355 to i8*
  %357 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %356) #4
  %358 = bitcast <32 x i8> %357 to <16 x i16>
  %359 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %358, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %360 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %358, <16 x i16> %358) #4
  %361 = add <8 x i32> %359, %353
  %362 = add <8 x i32> %360, %354
  %363 = getelementptr inbounds i16, i16* %355, i64 %340
  %364 = add nuw nsw i32 %344, 2
  %365 = icmp eq i32 %364, 32
  br i1 %365, label %341, label %343

366:                                              ; preds = %368
  %367 = getelementptr inbounds i16, i16* %608, i64 16
  br label %394

368:                                              ; preds = %368, %573
  %369 = phi i32 [ 0, %573 ], [ %389, %368 ]
  %370 = phi i16* [ %608, %573 ], [ %388, %368 ]
  %371 = phi <8 x i32> [ zeroinitializer, %573 ], [ %387, %368 ]
  %372 = phi <8 x i32> [ zeroinitializer, %573 ], [ %386, %368 ]
  %373 = bitcast i16* %370 to i8*
  %374 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %373) #4
  %375 = bitcast <32 x i8> %374 to <16 x i16>
  %376 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %375, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %377 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %375, <16 x i16> %375) #4
  %378 = add <8 x i32> %376, %372
  %379 = add <8 x i32> %377, %371
  %380 = getelementptr inbounds i16, i16* %370, i64 %340
  %381 = bitcast i16* %380 to i8*
  %382 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %381) #4
  %383 = bitcast <32 x i8> %382 to <16 x i16>
  %384 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %383, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %385 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %383, <16 x i16> %383) #4
  %386 = add <8 x i32> %384, %378
  %387 = add <8 x i32> %385, %379
  %388 = getelementptr inbounds i16, i16* %380, i64 %340
  %389 = add nuw nsw i32 %369, 2
  %390 = icmp eq i32 %389, 32
  br i1 %390, label %366, label %368

391:                                              ; preds = %9
  tail call void @aom_get_blk_sse_sum_c(i16* %0, i32 %1, i32 %2, i32 %3, i32* %4, i64* %5) #4
  br label %393

392:                                              ; preds = %6
  tail call void @aom_get_blk_sse_sum_c(i16* %0, i32 %1, i32 %2, i32 %3, i32* %4, i64* %5) #4
  br label %393

393:                                              ; preds = %53, %117, %212, %391, %467, %306, %392
  ret void

394:                                              ; preds = %394, %366
  %395 = phi i32 [ 0, %366 ], [ %415, %394 ]
  %396 = phi i16* [ %367, %366 ], [ %414, %394 ]
  %397 = phi <8 x i32> [ %387, %366 ], [ %413, %394 ]
  %398 = phi <8 x i32> [ %386, %366 ], [ %412, %394 ]
  %399 = bitcast i16* %396 to i8*
  %400 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %399) #4
  %401 = bitcast <32 x i8> %400 to <16 x i16>
  %402 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %401, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %403 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %401, <16 x i16> %401) #4
  %404 = add <8 x i32> %402, %398
  %405 = add <8 x i32> %403, %397
  %406 = getelementptr inbounds i16, i16* %396, i64 %340
  %407 = bitcast i16* %406 to i8*
  %408 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %407) #4
  %409 = bitcast <32 x i8> %408 to <16 x i16>
  %410 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %409, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %411 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %409, <16 x i16> %409) #4
  %412 = add <8 x i32> %410, %404
  %413 = add <8 x i32> %411, %405
  %414 = getelementptr inbounds i16, i16* %406, i64 %340
  %415 = add nuw nsw i32 %395, 2
  %416 = icmp eq i32 %415, 32
  br i1 %416, label %417, label %394

417:                                              ; preds = %394
  %418 = getelementptr inbounds i16, i16* %608, i64 32
  br label %419

419:                                              ; preds = %419, %417
  %420 = phi i32 [ 0, %417 ], [ %440, %419 ]
  %421 = phi i16* [ %418, %417 ], [ %439, %419 ]
  %422 = phi <8 x i32> [ %413, %417 ], [ %438, %419 ]
  %423 = phi <8 x i32> [ %412, %417 ], [ %437, %419 ]
  %424 = bitcast i16* %421 to i8*
  %425 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %424) #4
  %426 = bitcast <32 x i8> %425 to <16 x i16>
  %427 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %426, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %428 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %426, <16 x i16> %426) #4
  %429 = add <8 x i32> %427, %423
  %430 = add <8 x i32> %428, %422
  %431 = getelementptr inbounds i16, i16* %421, i64 %340
  %432 = bitcast i16* %431 to i8*
  %433 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %432) #4
  %434 = bitcast <32 x i8> %433 to <16 x i16>
  %435 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %434, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %436 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %434, <16 x i16> %434) #4
  %437 = add <8 x i32> %435, %429
  %438 = add <8 x i32> %436, %430
  %439 = getelementptr inbounds i16, i16* %431, i64 %340
  %440 = add nuw nsw i32 %420, 2
  %441 = icmp eq i32 %440, 32
  br i1 %441, label %442, label %419

442:                                              ; preds = %419
  %443 = getelementptr inbounds i16, i16* %608, i64 48
  br label %444

444:                                              ; preds = %444, %442
  %445 = phi i32 [ 0, %442 ], [ %465, %444 ]
  %446 = phi i16* [ %443, %442 ], [ %464, %444 ]
  %447 = phi <8 x i32> [ %438, %442 ], [ %463, %444 ]
  %448 = phi <8 x i32> [ %437, %442 ], [ %462, %444 ]
  %449 = bitcast i16* %446 to i8*
  %450 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %449) #4
  %451 = bitcast <32 x i8> %450 to <16 x i16>
  %452 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %451, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %453 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %451, <16 x i16> %451) #4
  %454 = add <8 x i32> %452, %448
  %455 = add <8 x i32> %453, %447
  %456 = getelementptr inbounds i16, i16* %446, i64 %340
  %457 = bitcast i16* %456 to i8*
  %458 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %457) #4
  %459 = bitcast <32 x i8> %458 to <16 x i16>
  %460 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %459, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %461 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %459, <16 x i16> %459) #4
  %462 = add <8 x i32> %460, %454
  %463 = add <8 x i32> %461, %455
  %464 = getelementptr inbounds i16, i16* %456, i64 %340
  %465 = add nuw nsw i32 %445, 2
  %466 = icmp eq i32 %465, 32
  br i1 %466, label %467, label %444

467:                                              ; preds = %444
  %468 = shufflevector <8 x i32> %463, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %469 = bitcast <8 x i32> %468 to <4 x i64>
  %470 = shufflevector <8 x i32> %463, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %471 = bitcast <8 x i32> %470 to <4 x i64>
  %472 = add <4 x i64> %471, %469
  %473 = shufflevector <8 x i32> %462, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %474 = add <8 x i32> %473, %462
  %475 = bitcast <8 x i32> %474 to <32 x i8>
  %476 = shufflevector <32 x i8> %475, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %477 = bitcast <32 x i8> %476 to <8 x i32>
  %478 = add <8 x i32> %474, %477
  %479 = bitcast <8 x i32> %478 to <32 x i8>
  %480 = shufflevector <32 x i8> %479, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %481 = bitcast <32 x i8> %480 to <8 x i32>
  %482 = add <8 x i32> %478, %481
  %483 = bitcast <8 x i32> %482 to <4 x i64>
  %484 = bitcast <4 x i64> %472 to <8 x i32>
  %485 = shufflevector <8 x i32> %484, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %486 = bitcast <8 x i32> %485 to <4 x i64>
  %487 = add <4 x i64> %472, %486
  %488 = bitcast <4 x i64> %487 to <32 x i8>
  %489 = shufflevector <32 x i8> %488, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %490 = bitcast <32 x i8> %489 to <4 x i64>
  %491 = add <4 x i64> %487, %490
  %492 = shufflevector <4 x i64> %483, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %493 = bitcast <2 x i64> %492 to <4 x i32>
  %494 = extractelement <4 x i32> %493, i32 0
  %495 = load i32, i32* %4, align 4
  %496 = add nsw i32 %495, %494
  store i32 %496, i32* %4, align 4
  %497 = extractelement <4 x i64> %491, i32 0
  %498 = load i64, i64* %5, align 8
  %499 = add nsw i64 %498, %497
  store i64 %499, i64* %5, align 8
  br label %393

500:                                              ; preds = %500, %341
  %501 = phi i32 [ 0, %341 ], [ %521, %500 ]
  %502 = phi i16* [ %342, %341 ], [ %520, %500 ]
  %503 = phi <8 x i32> [ %362, %341 ], [ %519, %500 ]
  %504 = phi <8 x i32> [ %361, %341 ], [ %518, %500 ]
  %505 = bitcast i16* %502 to i8*
  %506 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %505) #4
  %507 = bitcast <32 x i8> %506 to <16 x i16>
  %508 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %507, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %509 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %507, <16 x i16> %507) #4
  %510 = add <8 x i32> %508, %504
  %511 = add <8 x i32> %509, %503
  %512 = getelementptr inbounds i16, i16* %502, i64 %340
  %513 = bitcast i16* %512 to i8*
  %514 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %513) #4
  %515 = bitcast <32 x i8> %514 to <16 x i16>
  %516 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %515, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %517 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %515, <16 x i16> %515) #4
  %518 = add <8 x i32> %516, %510
  %519 = add <8 x i32> %517, %511
  %520 = getelementptr inbounds i16, i16* %512, i64 %340
  %521 = add nuw nsw i32 %501, 2
  %522 = icmp eq i32 %521, 32
  br i1 %522, label %523, label %500

523:                                              ; preds = %500
  %524 = getelementptr inbounds i16, i16* %0, i64 32
  br label %525

525:                                              ; preds = %525, %523
  %526 = phi i32 [ 0, %523 ], [ %546, %525 ]
  %527 = phi i16* [ %524, %523 ], [ %545, %525 ]
  %528 = phi <8 x i32> [ %519, %523 ], [ %544, %525 ]
  %529 = phi <8 x i32> [ %518, %523 ], [ %543, %525 ]
  %530 = bitcast i16* %527 to i8*
  %531 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %530) #4
  %532 = bitcast <32 x i8> %531 to <16 x i16>
  %533 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %532, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %534 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %532, <16 x i16> %532) #4
  %535 = add <8 x i32> %533, %529
  %536 = add <8 x i32> %534, %528
  %537 = getelementptr inbounds i16, i16* %527, i64 %340
  %538 = bitcast i16* %537 to i8*
  %539 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %538) #4
  %540 = bitcast <32 x i8> %539 to <16 x i16>
  %541 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %540, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %542 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %540, <16 x i16> %540) #4
  %543 = add <8 x i32> %541, %535
  %544 = add <8 x i32> %542, %536
  %545 = getelementptr inbounds i16, i16* %537, i64 %340
  %546 = add nuw nsw i32 %526, 2
  %547 = icmp eq i32 %546, 32
  br i1 %547, label %548, label %525

548:                                              ; preds = %525
  %549 = getelementptr inbounds i16, i16* %0, i64 48
  br label %550

550:                                              ; preds = %550, %548
  %551 = phi i32 [ 0, %548 ], [ %571, %550 ]
  %552 = phi i16* [ %549, %548 ], [ %570, %550 ]
  %553 = phi <8 x i32> [ %544, %548 ], [ %569, %550 ]
  %554 = phi <8 x i32> [ %543, %548 ], [ %568, %550 ]
  %555 = bitcast i16* %552 to i8*
  %556 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %555) #4
  %557 = bitcast <32 x i8> %556 to <16 x i16>
  %558 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %557, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %559 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %557, <16 x i16> %557) #4
  %560 = add <8 x i32> %558, %554
  %561 = add <8 x i32> %559, %553
  %562 = getelementptr inbounds i16, i16* %552, i64 %340
  %563 = bitcast i16* %562 to i8*
  %564 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %563) #4
  %565 = bitcast <32 x i8> %564 to <16 x i16>
  %566 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %565, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %567 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %565, <16 x i16> %565) #4
  %568 = add <8 x i32> %566, %560
  %569 = add <8 x i32> %567, %561
  %570 = getelementptr inbounds i16, i16* %562, i64 %340
  %571 = add nuw nsw i32 %551, 2
  %572 = icmp eq i32 %571, 32
  br i1 %572, label %573, label %550

573:                                              ; preds = %550
  %574 = shufflevector <8 x i32> %569, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %575 = bitcast <8 x i32> %574 to <4 x i64>
  %576 = shufflevector <8 x i32> %569, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %577 = bitcast <8 x i32> %576 to <4 x i64>
  %578 = add <4 x i64> %577, %575
  %579 = shufflevector <8 x i32> %568, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %580 = add <8 x i32> %579, %568
  %581 = bitcast <8 x i32> %580 to <32 x i8>
  %582 = shufflevector <32 x i8> %581, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %583 = bitcast <32 x i8> %582 to <8 x i32>
  %584 = add <8 x i32> %580, %583
  %585 = bitcast <8 x i32> %584 to <32 x i8>
  %586 = shufflevector <32 x i8> %585, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %587 = bitcast <32 x i8> %586 to <8 x i32>
  %588 = add <8 x i32> %584, %587
  %589 = bitcast <8 x i32> %588 to <4 x i64>
  %590 = bitcast <4 x i64> %578 to <8 x i32>
  %591 = shufflevector <8 x i32> %590, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %592 = bitcast <8 x i32> %591 to <4 x i64>
  %593 = add <4 x i64> %578, %592
  %594 = bitcast <4 x i64> %593 to <32 x i8>
  %595 = shufflevector <32 x i8> %594, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %596 = bitcast <32 x i8> %595 to <4 x i64>
  %597 = add <4 x i64> %593, %596
  %598 = shufflevector <4 x i64> %589, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %599 = bitcast <2 x i64> %598 to <4 x i32>
  %600 = extractelement <4 x i32> %599, i32 0
  %601 = load i32, i32* %4, align 4
  %602 = add nsw i32 %601, %600
  store i32 %602, i32* %4, align 4
  %603 = extractelement <4 x i64> %597, i32 0
  %604 = load i64, i64* %5, align 8
  %605 = add nsw i64 %604, %603
  store i64 %605, i64* %5, align 8
  %606 = shl nsw i32 %1, 5
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %0, i64 %607
  br label %368
}

declare void @aom_get_blk_sse_sum_c(i16*, i32, i32, i32, i32*, i64*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readonly
declare <32 x i8> @llvm.x86.avx.ldu.dq.256(i8*) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
