; ModuleID = '../../v8/src/numbers/conversions.cc'
source_filename = "../../v8/src/numbers/conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1159" }
%"class.std::__1::__compressed_pair.1159" = type { %"struct.std::__1::__compressed_pair_elem.1160" }
%"struct.std::__1::__compressed_pair_elem.1160" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::StringToBigIntHelper" = type <{ %"class.v8::internal::StringToIntHelper", %"class.v8::internal::Handle.1129", i32, [4 x i8] }>
%"class.v8::internal::StringToIntHelper" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Handle.1128", i8*, i32, i32, i32, i32, i8, i8, i8, i32 }
%"class.v8::internal::Handle.1128" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1129" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::StringToBigIntHelper.1130" = type <{ %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::Handle.1129", i32, [4 x i8] }>
%"class.v8::internal::StringToIntHelper.1131" = type { i32 (...)**, %"class.v8::internal::LocalIsolate"*, %"class.v8::internal::Handle.1128", i8*, i32, i32, i32, i32, i8, i8, i8, i32 }
%"class.v8::internal::NumberParseIntHelper" = type { %"class.v8::internal::StringToIntHelper", double }
%"class.v8::internal::SimpleStringBuilder" = type <{ %"class.v8::internal::Vector", i32, [4 x i8] }>
%"class.v8::Platform" = type { i32 (...)** }
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.v8::internal::String::FlatContent" = type { %union.anon.1138, i32, i32, %"class.v8::internal::CombinationAssertScope"* }
%union.anon.1138 = type { i8* }
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::SharedStringAccessGuardIfNeeded" = type { %"class.v8::base::Optional.1150" }
%"class.v8::base::Optional.1150" = type { %"class.v8::base::internal::OptionalBase.1151" }
%"class.v8::base::internal::OptionalBase.1151" = type { %"struct.v8::base::internal::OptionalStorage.1152" }
%"struct.v8::base::internal::OptionalStorage.1152" = type { %"struct.v8::base::internal::OptionalStorageBase.1153" }
%"struct.v8::base::internal::OptionalStorageBase.1153" = type { i8, %union.anon.1154 }
%union.anon.1154 = type { %"class.v8::base::SharedMutexGuard" }
%"class.v8::base::SharedMutexGuard" = type { %"class.v8::base::SharedMutex"* }

$_ZN2v88internal13BigIntLiteralINS0_7IsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE9GetResultEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEED2Ev = comdat any

$_ZN2v88internal13BigIntLiteralINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE9GetResultEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEED2Ev = comdat any

$_ZN2v88internal22InternalStringToDoubleIPKhS3_EEdT_T0_id = comdat any

$_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id = comdat any

$_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE = comdat any

$_ZN2v88internal20NumberParseIntHelperD0Ev = comdat any

$_ZN2v88internal20NumberParseIntHelper14AllocateResultEv = comdat any

$_ZN2v88internal20NumberParseIntHelper17ResultMultiplyAddEjj = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE16CheckTerminationEv = comdat any

$_ZN2v88internal20NumberParseIntHelper18HandleSpecialCasesEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18HandleSpecialCasesEv = comdat any

$_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKhEEdT_ = comdat any

$_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKtEEdT_ = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi1EPKhS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi2EPKhS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi3EPKhS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi4EPKhS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi5EPKhS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi1EPKtS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi2EPKtS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi3EPKtS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi4EPKtS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi5EPKtS3_EEdT0_T1_bb = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE8ParseIntEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKhEEvT_i = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKtEEvT_i = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKhEEbT_ = comdat any

$_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKtEEbT_ = comdat any

$_ZN2v88internal25InternalStringToIntDoubleILi3EPcS2_EEdT0_T1_bb = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEED0Ev = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE14AllocateResultEv = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE17ResultMultiplyAddEjj = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEED0Ev = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE14AllocateResultEv = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE17ResultMultiplyAddEjj = comdat any

$_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE16CheckTerminationEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18HandleSpecialCasesEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE8ParseIntEv = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKhEEvT_i = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKtEEvT_i = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKhEEbT_ = comdat any

$_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKtEEbT_ = comdat any

$_ZTVN2v88internal20NumberParseIntHelperE = comdat any

$_ZTVN2v88internal20StringToBigIntHelperINS0_7IsolateEEE = comdat any

$_ZTVN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEEE = comdat any

@.str = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"-Infinity\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Infinity\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"0.\00", align 1
@_ZZN2v88internal20DoubleToRadixCStringEdiE5chars = internal unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 16
@.str.5 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"'.' == buffer[fraction_cursor]\00", align 1
@_ZTVN2v88internal20NumberParseIntHelperE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::StringToIntHelper"*)* @_ZN2v88internal17StringToIntHelperINS0_7IsolateEED2Ev to i8*), i8* bitcast (void (%"class.v8::internal::NumberParseIntHelper"*)* @_ZN2v88internal20NumberParseIntHelperD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::NumberParseIntHelper"*)* @_ZN2v88internal20NumberParseIntHelper14AllocateResultEv to i8*), i8* bitcast (void (%"class.v8::internal::NumberParseIntHelper"*, i32, i32)* @_ZN2v88internal20NumberParseIntHelper17ResultMultiplyAddEjj to i8*), i8* bitcast (i1 (%"class.v8::internal::StringToIntHelper"*)* @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE16CheckTerminationEv to i8*), i8* bitcast (void (%"class.v8::internal::NumberParseIntHelper"*)* @_ZN2v88internal20NumberParseIntHelper18HandleSpecialCasesEv to i8*)] }, comdat, align 8
@.str.7 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internalL17kOneByteCharFlagsE = internal unnamed_addr constant [256 x i8] calign 16
@_ZTVN2v88internal20StringToBigIntHelperINS0_7IsolateEEE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::StringToIntHelper"*)* @_ZN2v88internal17StringToIntHelperINS0_7IsolateEED2Ev to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper"*)* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEED0Ev to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper"*)* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE14AllocateResultEv to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper"*, i32, i32)* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE17ResultMultiplyAddEjj to i8*), i8* bitcast (i1 (%"class.v8::internal::StringToBigIntHelper"*)* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE16CheckTerminationEv to i8*), i8* bitcast (void (%"class.v8::internal::StringToIntHelper"*)* @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18HandleSpecialCasesEv to i8*)] }, comdat, align 8
@_ZTVN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEEE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::StringToIntHelper.1131"*)* @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEED2Ev to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper.1130"*)* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEED0Ev to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper.1130"*)* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE14AllocateResultEv to i8*), i8* bitcast (void (%"class.v8::internal::StringToBigIntHelper.1130"*, i32, i32)* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE17ResultMultiplyAddEjj to i8*), i8* bitcast (i1 (%"class.v8::internal::StringToBigIntHelper.1130"*)* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE16CheckTerminationEv to i8*), i8* bitcast (void (%"class.v8::internal::StringToIntHelper.1131"*)* @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18HandleSpecialCasesEv to i8*)] }, comdat, align 8
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"NewArray\00", align 1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal13BigIntLiteralINS0_7IsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::Isolate"*, i8*) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.v8::internal::StringToBigIntHelper", align 8
  %4 = bitcast %"class.v8::internal::StringToBigIntHelper"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %4) #12
  %5 = tail call i64 @strlen(i8* %1) #13
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 1
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* null, i64** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 3
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 4
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 5
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 6
  store i32 %6, i32* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 7
  store i32 2, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 8
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 9
  %17 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 10
  store i8 1, i8* %17, align 2
  %18 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 11
  store i32 0, i32* %18, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2v88internal20StringToBigIntHelperINS0_7IsolateEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %19 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 2
  store i32 1, i32* %20, align 8
  store i8 1, i8* %16, align 1
  %21 = call i64* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE9GetResultEv(%"class.v8::internal::StringToBigIntHelper"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %4) #12
  ret i64* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE9GetResultEv(%"class.v8::internal::StringToBigIntHelper"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE8ParseIntEv(%"class.v8::internal::StringToIntHelper"* %2)
  %3 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = getelementptr %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 7
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 10
  br i1 %13, label %14, label %36

14:                                               ; preds = %10, %6, %1
  %15 = getelementptr %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 11
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %35 [
    i32 3, label %17
    i32 2, label %36
    i32 1, label %36
    i32 4, label %20
    i32 5, label %27
  ]

17:                                               ; preds = %14
  br i1 %5, label %18, label %19

18:                                               ; preds = %17
  store i32 4, i32* %15, align 4
  br label %20

19:                                               ; preds = %17
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %21, align 8
  %23 = icmp eq i32 %4, 1
  %24 = zext i1 %23 to i8
  %25 = tail call i64* @_ZN2v88internal6BigInt4ZeroINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %22, i8 zeroext %24) #12
  %26 = ptrtoint i64* %25 to i64
  br label %36

27:                                               ; preds = %14
  %28 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 1, i32 0, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  %33 = tail call i64* @_ZN2v88internal6BigInt8FinalizeINS0_7IsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb(i64* %29, i1 zeroext %32) #12
  %34 = ptrtoint i64* %33 to i64
  br label %36

35:                                               ; preds = %14
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

36:                                               ; preds = %14, %14, %10, %27, %20
  %37 = phi i64 [ %34, %27 ], [ %26, %20 ], [ 0, %10 ], [ 0, %14 ], [ 0, %14 ]
  %38 = inttoptr i64 %37 to i64*
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEED2Ev(%"class.v8::internal::StringToIntHelper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal13BigIntLiteralINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_6BigIntEEEPT_PKc(%"class.v8::internal::LocalIsolate"*, i8*) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.v8::internal::StringToBigIntHelper.1130", align 8
  %4 = bitcast %"class.v8::internal::StringToBigIntHelper.1130"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %4) #12
  %5 = tail call i64 @strlen(i8* %1) #13
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 1
  store %"class.v8::internal::LocalIsolate"* %0, %"class.v8::internal::LocalIsolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* null, i64** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 3
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 4
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 5
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 6
  store i32 %6, i32* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 7
  store i32 2, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 8
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 9
  %17 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 10
  store i8 1, i8* %17, align 2
  %18 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 0, i32 11
  store i32 0, i32* %18, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %19 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %3, i64 0, i32 2
  store i32 1, i32* %20, align 8
  store i8 1, i8* %16, align 1
  %21 = call i64* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE9GetResultEv(%"class.v8::internal::StringToBigIntHelper.1130"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %4) #12
  ret i64* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE9GetResultEv(%"class.v8::internal::StringToBigIntHelper.1130"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0
  tail call void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE8ParseIntEv(%"class.v8::internal::StringToIntHelper.1131"* %2)
  %3 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = getelementptr %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 7
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 10
  br i1 %13, label %14, label %36

14:                                               ; preds = %10, %6, %1
  %15 = getelementptr %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 11
  %16 = load i32, i32* %15, align 4
  switch i32 %16, label %35 [
    i32 3, label %17
    i32 2, label %36
    i32 1, label %36
    i32 4, label %20
    i32 5, label %27
  ]

17:                                               ; preds = %14
  br i1 %5, label %18, label %19

18:                                               ; preds = %17
  store i32 4, i32* %15, align 4
  br label %20

19:                                               ; preds = %17
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::LocalIsolate"*, %"class.v8::internal::LocalIsolate"** %21, align 8
  %23 = icmp eq i32 %4, 1
  %24 = zext i1 %23 to i8
  %25 = tail call i64* @_ZN2v88internal6BigInt4ZeroINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"* %22, i8 zeroext %24) #12
  %26 = ptrtoint i64* %25 to i64
  br label %36

27:                                               ; preds = %14
  %28 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 1, i32 0, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  %33 = tail call i64* @_ZN2v88internal6BigInt8FinalizeINS0_7IsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb(i64* %29, i1 zeroext %32) #12
  %34 = ptrtoint i64* %33 to i64
  br label %36

35:                                               ; preds = %14
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

36:                                               ; preds = %14, %14, %10, %27, %20
  %37 = phi i64 [ %34, %27 ], [ %26, %20 ], [ 0, %10 ], [ 0, %14 ], [ 0, %14 ]
  %38 = inttoptr i64 %37 to i64*
  ret i64* %38
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEED2Ev(%"class.v8::internal::StringToIntHelper.1131"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal14StringToDoubleEPKcid(i8*, i32, double) local_unnamed_addr #0 {
  %4 = tail call i64 @strlen(i8* %0) #13
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = tail call double @_ZN2v88internal22InternalStringToDoubleIPKhS3_EEdT_T0_id(i8* %0, i8* %5, i32 %1, double %2) #12
  ret double %6
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal14StringToDoubleENS0_6VectorIKhEEid(i8*, i64, i32, double) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %0, i64 %1
  %6 = tail call double @_ZN2v88internal22InternalStringToDoubleIPKhS3_EEdT_T0_id(i8* %0, i8* %5, i32 %2, double %3)
  ret double %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal22InternalStringToDoubleIPKhS3_EEdT_T0_id(i8*, i8*, i32, double) local_unnamed_addr #0 comdat {
  %5 = alloca [782 x i8], align 16
  %6 = icmp eq i8* %0, %1
  br i1 %6, label %373, label %7

7:                                                ; preds = %4, %15
  %8 = phi i8* [ %16, %15 ], [ %0, %4 ]
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds i8, i8* %8, i64 1
  %17 = icmp eq i8* %16, %1
  br i1 %17, label %373, label %7

18:                                               ; preds = %7
  %19 = and i32 %2, 16
  %20 = icmp ne i32 %19, 0
  %21 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %21) #12
  switch i8 %9, label %32 [
    i8 43, label %22
    i8 45, label %25
  ]

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %8, i64 1
  %24 = icmp eq i8* %23, %1
  br i1 %24, label %371, label %28

25:                                               ; preds = %18
  %26 = getelementptr inbounds i8, i8* %8, i64 1
  %27 = icmp eq i8* %26, %1
  br i1 %27, label %371, label %28

28:                                               ; preds = %22, %25
  %29 = phi i8* [ %23, %22 ], [ %26, %25 ]
  %30 = phi i32 [ 2, %22 ], [ 1, %25 ]
  %31 = load i8, i8* %29, align 1
  br label %32

32:                                               ; preds = %28, %18
  %33 = phi i8 [ %31, %28 ], [ %9, %18 ]
  %34 = phi i8* [ %29, %28 ], [ %8, %18 ]
  %35 = phi i32 [ %30, %28 ], [ 0, %18 ]
  switch i8 %33, label %139 [
    i8 73, label %36
    i8 48, label %56
  ]

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %34, i64 1
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %371, label %39

39:                                               ; preds = %36
  %40 = load i8, i8* %37, align 1
  %41 = icmp eq i8 %40, 110
  br i1 %41, label %375, label %371

42:                                               ; preds = %411, %50
  %43 = phi i8* [ %51, %50 ], [ %412, %411 ]
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = and i8 %47, 8
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %371, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds i8, i8* %43, i64 1
  %52 = icmp eq i8* %51, %1
  br i1 %52, label %53, label %42

53:                                               ; preds = %50, %411
  %54 = icmp eq i32 %35, 1
  %55 = select i1 %54, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %371

56:                                               ; preds = %32
  %57 = getelementptr inbounds i8, i8* %34, i64 1
  %58 = icmp eq i8* %57, %1
  br i1 %58, label %59, label %62

59:                                               ; preds = %56
  %60 = icmp eq i32 %35, 1
  %61 = select i1 %60, double -0.000000e+00, double 0.000000e+00
  br label %371

62:                                               ; preds = %56
  %63 = and i32 %2, 1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %90, label %65

65:                                               ; preds = %62
  %66 = load i8, i8* %57, align 1
  switch i8 %66, label %90 [
    i8 120, label %67
    i8 88, label %67
  ]

67:                                               ; preds = %65, %65
  %68 = getelementptr inbounds i8, i8* %34, i64 2
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %371, label %70

70:                                               ; preds = %67
  %71 = load i8, i8* %68, align 1
  %72 = zext i8 %71 to i32
  %73 = add nsw i32 %72, -48
  %74 = icmp ult i32 %73, 10
  %75 = icmp ult i8 %71, 64
  %76 = and i1 %75, %74
  %77 = add i8 %71, -97
  %78 = icmp ult i8 %77, 6
  %79 = or i1 %78, %76
  br i1 %79, label %84, label %80

80:                                               ; preds = %70
  %81 = icmp ugt i8 %71, 64
  br i1 %81, label %82, label %371

82:                                               ; preds = %80
  %83 = icmp ugt i8 %71, 70
  br label %84

84:                                               ; preds = %70, %82
  %85 = phi i1 [ %83, %82 ], [ false, %70 ]
  %86 = icmp ne i32 %35, 0
  %87 = or i1 %86, %85
  br i1 %87, label %371, label %88

88:                                               ; preds = %84
  %89 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKhS3_EEdT0_T1_bb(i8* %68, i8* %1, i1 zeroext false, i1 zeroext %20)
  br label %371

90:                                               ; preds = %65, %62
  %91 = and i32 %2, 2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %109, label %93

93:                                               ; preds = %90
  %94 = load i8, i8* %57, align 1
  switch i8 %94, label %109 [
    i8 111, label %95
    i8 79, label %95
  ]

95:                                               ; preds = %93, %93
  %96 = getelementptr inbounds i8, i8* %34, i64 2
  %97 = icmp eq i8* %96, %1
  br i1 %97, label %371, label %98

98:                                               ; preds = %95
  %99 = load i8, i8* %96, align 1
  %100 = zext i8 %99 to i32
  %101 = add nsw i32 %100, -48
  %102 = icmp ult i32 %101, 10
  %103 = icmp ult i8 %99, 56
  %104 = and i1 %103, %102
  %105 = icmp eq i32 %35, 0
  %106 = and i1 %105, %104
  br i1 %106, label %107, label %371

107:                                              ; preds = %98
  %108 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKhS3_EEdT0_T1_bb(i8* %96, i8* %1, i1 zeroext false, i1 zeroext %20)
  br label %371

109:                                              ; preds = %93, %90
  %110 = and i32 %2, 8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %113, %109
  br label %126

113:                                              ; preds = %109
  %114 = load i8, i8* %57, align 1
  switch i8 %114, label %112 [
    i8 98, label %115
    i8 66, label %115
  ]

115:                                              ; preds = %113, %113
  %116 = getelementptr inbounds i8, i8* %34, i64 2
  %117 = icmp eq i8* %116, %1
  br i1 %117, label %371, label %118

118:                                              ; preds = %115
  %119 = load i8, i8* %116, align 1
  %120 = or i8 %119, 1
  %121 = icmp ne i8 %120, 49
  %122 = icmp ne i32 %35, 0
  %123 = or i1 %122, %121
  br i1 %123, label %371, label %124

124:                                              ; preds = %118
  %125 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKhS3_EEdT0_T1_bb(i8* %116, i8* %1, i1 zeroext false, i1 zeroext %20)
  br label %371

126:                                              ; preds = %112, %130
  %127 = phi i8* [ %131, %130 ], [ %57, %112 ]
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 48
  br i1 %129, label %130, label %136

130:                                              ; preds = %126
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %131, %1
  br i1 %132, label %133, label %126

133:                                              ; preds = %130
  %134 = icmp eq i32 %35, 1
  %135 = select i1 %134, double -0.000000e+00, double 0.000000e+00
  br label %371

136:                                              ; preds = %126
  %137 = and i32 %2, 4
  %138 = icmp ne i32 %137, 0
  br label %139

139:                                              ; preds = %32, %136
  %140 = phi i8 [ %128, %136 ], [ %33, %32 ]
  %141 = phi i1 [ true, %136 ], [ false, %32 ]
  %142 = phi i8* [ %127, %136 ], [ %34, %32 ]
  %143 = phi i1 [ %138, %136 ], [ false, %32 ]
  %144 = zext i1 %143 to i8
  %145 = add i8 %140, -48
  %146 = icmp ult i8 %145, 10
  br i1 %146, label %147, label %185

147:                                              ; preds = %139, %181
  %148 = phi i32 [ %171, %181 ], [ 0, %139 ]
  %149 = phi i8 [ %178, %181 ], [ %144, %139 ]
  %150 = phi i8 [ %170, %181 ], [ 0, %139 ]
  %151 = phi i32 [ %169, %181 ], [ 0, %139 ]
  %152 = phi i32 [ %168, %181 ], [ 0, %139 ]
  %153 = phi i8* [ %179, %181 ], [ %142, %139 ]
  %154 = phi i8 [ %182, %181 ], [ %140, %139 ]
  %155 = icmp slt i32 %152, 772
  br i1 %155, label %156, label %161

156:                                              ; preds = %147
  %157 = add nsw i32 %148, 1
  %158 = sext i32 %148 to i64
  %159 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %158
  store i8 %154, i8* %159, align 1
  %160 = add nsw i32 %152, 1
  br label %167

161:                                              ; preds = %147
  %162 = add nsw i32 %151, 1
  %163 = and i8 %150, 1
  %164 = icmp ne i8 %154, 48
  %165 = zext i1 %164 to i8
  %166 = or i8 %163, %165
  br label %167

167:                                              ; preds = %161, %156
  %168 = phi i32 [ %160, %156 ], [ %152, %161 ]
  %169 = phi i32 [ %151, %156 ], [ %162, %161 ]
  %170 = phi i8 [ %150, %156 ], [ %166, %161 ]
  %171 = phi i32 [ %157, %156 ], [ %148, %161 ]
  %172 = icmp eq i8 %149, 0
  br i1 %172, label %176, label %173

173:                                              ; preds = %167
  %174 = load i8, i8* %153, align 1
  %175 = icmp ult i8 %174, 56
  br label %176

176:                                              ; preds = %167, %173
  %177 = phi i1 [ false, %167 ], [ %175, %173 ]
  %178 = zext i1 %177 to i8
  %179 = getelementptr inbounds i8, i8* %153, i64 1
  %180 = icmp eq i8* %179, %1
  br i1 %180, label %336, label %181

181:                                              ; preds = %176
  %182 = load i8, i8* %179, align 1
  %183 = add i8 %182, -48
  %184 = icmp ult i8 %183, 10
  br i1 %184, label %147, label %185

185:                                              ; preds = %181, %139
  %186 = phi i8 [ %140, %139 ], [ %182, %181 ]
  %187 = phi i8* [ %142, %139 ], [ %179, %181 ]
  %188 = phi i32 [ 0, %139 ], [ %168, %181 ]
  %189 = phi i32 [ 0, %139 ], [ %169, %181 ]
  %190 = phi i8 [ 0, %139 ], [ %170, %181 ]
  %191 = phi i8 [ %144, %139 ], [ %178, %181 ]
  %192 = phi i32 [ 0, %139 ], [ %171, %181 ]
  %193 = icmp eq i32 %188, 0
  %194 = select i1 %193, i8 0, i8 %191
  %195 = icmp eq i8 %186, 46
  br i1 %195, label %196, label %254

196:                                              ; preds = %185
  %197 = icmp ne i8 %194, 0
  %198 = xor i1 %197, true
  %199 = or i1 %20, %198
  br i1 %199, label %200, label %371

200:                                              ; preds = %196
  br i1 %197, label %345, label %201

201:                                              ; preds = %200
  %202 = getelementptr inbounds i8, i8* %187, i64 1
  %203 = icmp eq i8* %202, %1
  br i1 %203, label %204, label %206

204:                                              ; preds = %201
  br i1 %193, label %205, label %336

205:                                              ; preds = %204
  br i1 %141, label %331, label %371

206:                                              ; preds = %201
  br i1 %193, label %207, label %222

207:                                              ; preds = %206
  %208 = load i8, i8* %202, align 1
  %209 = icmp eq i8 %208, 48
  br i1 %209, label %210, label %222

210:                                              ; preds = %207, %218
  %211 = phi i32 [ %219, %218 ], [ 0, %207 ]
  %212 = phi i8* [ %213, %218 ], [ %202, %207 ]
  %213 = getelementptr inbounds i8, i8* %212, i64 1
  %214 = icmp eq i8* %213, %1
  br i1 %214, label %215, label %218

215:                                              ; preds = %210
  %216 = icmp eq i32 %35, 1
  %217 = select i1 %216, double -0.000000e+00, double 0.000000e+00
  br label %371

218:                                              ; preds = %210
  %219 = add nsw i32 %211, -1
  %220 = load i8, i8* %213, align 1
  %221 = icmp eq i8 %220, 48
  br i1 %221, label %210, label %222

222:                                              ; preds = %218, %207, %206
  %223 = phi i8* [ %202, %207 ], [ %202, %206 ], [ %213, %218 ]
  %224 = phi i32 [ 0, %207 ], [ 0, %206 ], [ %219, %218 ]
  br label %225

225:                                              ; preds = %222, %247
  %226 = phi i8* [ %252, %247 ], [ %223, %222 ]
  %227 = phi i32 [ %248, %247 ], [ %188, %222 ]
  %228 = phi i8 [ %249, %247 ], [ %190, %222 ]
  %229 = phi i32 [ %250, %247 ], [ %224, %222 ]
  %230 = phi i32 [ %251, %247 ], [ %192, %222 ]
  %231 = load i8, i8* %226, align 1
  %232 = add i8 %231, -48
  %233 = icmp ult i8 %232, 10
  br i1 %233, label %234, label %254

234:                                              ; preds = %225
  %235 = icmp slt i32 %227, 772
  br i1 %235, label %236, label %242

236:                                              ; preds = %234
  %237 = add nsw i32 %230, 1
  %238 = sext i32 %230 to i64
  %239 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %238
  store i8 %231, i8* %239, align 1
  %240 = add nsw i32 %227, 1
  %241 = add nsw i32 %229, -1
  br label %247

242:                                              ; preds = %234
  %243 = and i8 %228, 1
  %244 = icmp ne i8 %231, 48
  %245 = zext i1 %244 to i8
  %246 = or i8 %243, %245
  br label %247

247:                                              ; preds = %242, %236
  %248 = phi i32 [ %240, %236 ], [ %227, %242 ]
  %249 = phi i8 [ %228, %236 ], [ %246, %242 ]
  %250 = phi i32 [ %241, %236 ], [ %229, %242 ]
  %251 = phi i32 [ %237, %236 ], [ %230, %242 ]
  %252 = getelementptr inbounds i8, i8* %226, i64 1
  %253 = icmp eq i8* %252, %1
  br i1 %253, label %331, label %225

254:                                              ; preds = %225, %185
  %255 = phi i8 [ %186, %185 ], [ %231, %225 ]
  %256 = phi i8* [ %187, %185 ], [ %226, %225 ]
  %257 = phi i32 [ %188, %185 ], [ %227, %225 ]
  %258 = phi i8 [ %190, %185 ], [ %228, %225 ]
  %259 = phi i32 [ 0, %185 ], [ %229, %225 ]
  %260 = phi i32 [ %192, %185 ], [ %230, %225 ]
  %261 = xor i1 %141, true
  %262 = or i32 %259, %257
  %263 = icmp eq i32 %262, 0
  %264 = and i1 %263, %261
  br i1 %264, label %371, label %265

265:                                              ; preds = %254
  switch i8 %255, label %315 [
    i8 101, label %266
    i8 69, label %266
  ]

266:                                              ; preds = %265, %265
  %267 = icmp eq i8 %194, 0
  br i1 %267, label %268, label %371

268:                                              ; preds = %266
  %269 = getelementptr inbounds i8, i8* %256, i64 1
  %270 = icmp eq i8* %269, %1
  br i1 %270, label %271, label %272

271:                                              ; preds = %268
  br i1 %20, label %331, label %371

272:                                              ; preds = %268
  %273 = load i8, i8* %269, align 1
  switch i8 %273, label %278 [
    i8 43, label %274
    i8 45, label %274
  ]

274:                                              ; preds = %272, %272
  %275 = getelementptr inbounds i8, i8* %256, i64 2
  %276 = icmp eq i8* %275, %1
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  br i1 %20, label %331, label %371

278:                                              ; preds = %272, %274
  %279 = phi i8* [ %269, %272 ], [ %275, %274 ]
  %280 = phi i8 [ 43, %272 ], [ %273, %274 ]
  %281 = icmp eq i8* %279, %1
  br i1 %281, label %286, label %282

282:                                              ; preds = %278
  %283 = load i8, i8* %279, align 1
  %284 = add i8 %283, -48
  %285 = icmp ugt i8 %284, 9
  br i1 %285, label %286, label %287

286:                                              ; preds = %282, %278
  br i1 %20, label %331, label %371

287:                                              ; preds = %282, %305
  %288 = phi i8 [ %306, %305 ], [ %283, %282 ]
  %289 = phi i8* [ %303, %305 ], [ %279, %282 ]
  %290 = phi i32 [ %302, %305 ], [ 0, %282 ]
  %291 = zext i8 %288 to i32
  %292 = add nsw i32 %291, -48
  %293 = icmp sgt i32 %290, 107374181
  br i1 %293, label %294, label %298

294:                                              ; preds = %287
  %295 = icmp eq i32 %290, 107374182
  %296 = icmp slt i32 %292, 4
  %297 = and i1 %295, %296
  br i1 %297, label %298, label %301

298:                                              ; preds = %294, %287
  %299 = mul nsw i32 %290, 10
  %300 = add nsw i32 %292, %299
  br label %301

301:                                              ; preds = %294, %298
  %302 = phi i32 [ %300, %298 ], [ 1073741823, %294 ]
  %303 = getelementptr inbounds i8, i8* %289, i64 1
  %304 = icmp eq i8* %303, %1
  br i1 %304, label %309, label %305

305:                                              ; preds = %301
  %306 = load i8, i8* %303, align 1
  %307 = add i8 %306, -48
  %308 = icmp ult i8 %307, 10
  br i1 %308, label %287, label %309

309:                                              ; preds = %305, %301
  %310 = phi i8* [ %303, %305 ], [ %1, %301 ]
  %311 = icmp eq i8 %280, 45
  %312 = sub nsw i32 0, %302
  %313 = select i1 %311, i32 %312, i32 %302
  %314 = add nsw i32 %313, %259
  br label %315

315:                                              ; preds = %309, %265
  %316 = phi i8* [ %256, %265 ], [ %310, %309 ]
  %317 = phi i32 [ %259, %265 ], [ %314, %309 ]
  %318 = icmp eq i8* %316, %1
  %319 = or i1 %20, %318
  br i1 %319, label %336, label %320

320:                                              ; preds = %315, %328
  %321 = phi i8* [ %329, %328 ], [ %316, %315 ]
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %323
  %325 = load i8, i8* %324, align 1
  %326 = and i8 %325, 8
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %371, label %328

328:                                              ; preds = %320
  %329 = getelementptr inbounds i8, i8* %321, i64 1
  %330 = icmp eq i8* %329, %1
  br i1 %330, label %336, label %320

331:                                              ; preds = %247, %205, %271, %277, %286
  %332 = phi i8 [ %258, %286 ], [ %258, %277 ], [ %258, %271 ], [ %190, %205 ], [ %249, %247 ]
  %333 = phi i32 [ %259, %286 ], [ %259, %277 ], [ %259, %271 ], [ 0, %205 ], [ %250, %247 ]
  %334 = phi i32 [ %260, %286 ], [ %260, %277 ], [ %260, %271 ], [ %192, %205 ], [ %251, %247 ]
  %335 = add nsw i32 %333, %189
  br label %351

336:                                              ; preds = %176, %328, %315, %204
  %337 = phi i32 [ %189, %204 ], [ %189, %315 ], [ %189, %328 ], [ %169, %176 ]
  %338 = phi i8 [ %190, %204 ], [ %258, %315 ], [ %258, %328 ], [ %170, %176 ]
  %339 = phi i8 [ %191, %204 ], [ %194, %315 ], [ %194, %328 ], [ %178, %176 ]
  %340 = phi i32 [ 0, %204 ], [ %317, %315 ], [ %317, %328 ], [ 0, %176 ]
  %341 = phi i32 [ %192, %204 ], [ %260, %315 ], [ %260, %328 ], [ %171, %176 ]
  %342 = add nsw i32 %340, %337
  %343 = and i8 %339, 1
  %344 = icmp eq i8 %343, 0
  br i1 %344, label %351, label %345

345:                                              ; preds = %200, %336
  %346 = phi i32 [ %341, %336 ], [ %192, %200 ]
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %347
  %349 = icmp eq i32 %35, 1
  %350 = call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPcS2_EEdT0_T1_bb(i8* nonnull %21, i8* %348, i1 zeroext %349, i1 zeroext %20)
  br label %371

351:                                              ; preds = %331, %336
  %352 = phi i32 [ %335, %331 ], [ %342, %336 ]
  %353 = phi i32 [ %334, %331 ], [ %341, %336 ]
  %354 = phi i8 [ %332, %331 ], [ %338, %336 ]
  %355 = and i8 %354, 1
  %356 = icmp eq i8 %355, 0
  br i1 %356, label %362, label %357

357:                                              ; preds = %351
  %358 = add nsw i32 %353, 1
  %359 = sext i32 %353 to i64
  %360 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %359
  store i8 49, i8* %360, align 1
  %361 = add nsw i32 %352, -1
  br label %362

362:                                              ; preds = %351, %357
  %363 = phi i32 [ %361, %357 ], [ %352, %351 ]
  %364 = phi i32 [ %358, %357 ], [ %353, %351 ]
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %365
  store i8 0, i8* %366, align 1
  %367 = call double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8* nonnull %21, i64 %365, i32 %363) #12
  %368 = icmp eq i32 %35, 1
  %369 = fsub double -0.000000e+00, %367
  %370 = select i1 %368, double %369, double %367
  br label %371

371:                                              ; preds = %36, %39, %375, %378, %381, %384, %387, %390, %393, %396, %399, %402, %405, %408, %42, %320, %286, %277, %98, %80, %271, %266, %254, %205, %196, %115, %118, %95, %67, %84, %25, %22, %59, %88, %107, %124, %133, %362, %345, %215, %53
  %372 = phi double [ %55, %53 ], [ %61, %59 ], [ %89, %88 ], [ %108, %107 ], [ %125, %124 ], [ %135, %133 ], [ %350, %345 ], [ %370, %362 ], [ %217, %215 ], [ 0x7FF8000000000000, %22 ], [ 0x7FF8000000000000, %25 ], [ 0x7FF8000000000000, %84 ], [ 0x7FF8000000000000, %67 ], [ 0x7FF8000000000000, %95 ], [ 0x7FF8000000000000, %118 ], [ 0x7FF8000000000000, %115 ], [ 0x7FF8000000000000, %196 ], [ 0x7FF8000000000000, %205 ], [ 0x7FF8000000000000, %254 ], [ 0x7FF8000000000000, %266 ], [ 0x7FF8000000000000, %271 ], [ 0x7FF8000000000000, %80 ], [ 0x7FF8000000000000, %98 ], [ 0x7FF8000000000000, %277 ], [ 0x7FF8000000000000, %286 ], [ 0x7FF8000000000000, %320 ], [ 0x7FF8000000000000, %42 ], [ 0x7FF8000000000000, %408 ], [ 0x7FF8000000000000, %405 ], [ 0x7FF8000000000000, %402 ], [ 0x7FF8000000000000, %399 ], [ 0x7FF8000000000000, %396 ], [ 0x7FF8000000000000, %393 ], [ 0x7FF8000000000000, %390 ], [ 0x7FF8000000000000, %387 ], [ 0x7FF8000000000000, %384 ], [ 0x7FF8000000000000, %381 ], [ 0x7FF8000000000000, %378 ], [ 0x7FF8000000000000, %375 ], [ 0x7FF8000000000000, %39 ], [ 0x7FF8000000000000, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %21) #12
  br label %373

373:                                              ; preds = %15, %4, %371
  %374 = phi double [ %372, %371 ], [ %3, %4 ], [ %3, %15 ]
  ret double %374

375:                                              ; preds = %39
  %376 = getelementptr inbounds i8, i8* %34, i64 2
  %377 = icmp eq i8* %376, %1
  br i1 %377, label %371, label %378

378:                                              ; preds = %375
  %379 = load i8, i8* %376, align 1
  %380 = icmp eq i8 %379, 102
  br i1 %380, label %381, label %371

381:                                              ; preds = %378
  %382 = getelementptr inbounds i8, i8* %34, i64 3
  %383 = icmp eq i8* %382, %1
  br i1 %383, label %371, label %384

384:                                              ; preds = %381
  %385 = load i8, i8* %382, align 1
  %386 = icmp eq i8 %385, 105
  br i1 %386, label %387, label %371

387:                                              ; preds = %384
  %388 = getelementptr inbounds i8, i8* %34, i64 4
  %389 = icmp eq i8* %388, %1
  br i1 %389, label %371, label %390

390:                                              ; preds = %387
  %391 = load i8, i8* %388, align 1
  %392 = icmp eq i8 %391, 110
  br i1 %392, label %393, label %371

393:                                              ; preds = %390
  %394 = getelementptr inbounds i8, i8* %34, i64 5
  %395 = icmp eq i8* %394, %1
  br i1 %395, label %371, label %396

396:                                              ; preds = %393
  %397 = load i8, i8* %394, align 1
  %398 = icmp eq i8 %397, 105
  br i1 %398, label %399, label %371

399:                                              ; preds = %396
  %400 = getelementptr inbounds i8, i8* %34, i64 6
  %401 = icmp eq i8* %400, %1
  br i1 %401, label %371, label %402

402:                                              ; preds = %399
  %403 = load i8, i8* %400, align 1
  %404 = icmp eq i8 %403, 116
  br i1 %404, label %405, label %371

405:                                              ; preds = %402
  %406 = getelementptr inbounds i8, i8* %34, i64 7
  %407 = icmp eq i8* %406, %1
  br i1 %407, label %371, label %408

408:                                              ; preds = %405
  %409 = load i8, i8* %406, align 1
  %410 = icmp eq i8 %409, 121
  br i1 %410, label %411, label %371

411:                                              ; preds = %408
  %412 = getelementptr inbounds i8, i8* %34, i64 8
  %413 = icmp eq i8* %412, %1
  %414 = or i1 %20, %413
  br i1 %414, label %53, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal14StringToDoubleENS0_6VectorIKtEEid(i16*, i64, i32, double) local_unnamed_addr #0 {
  %5 = shl i64 %1, 32
  %6 = ashr exact i64 %5, 32
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = tail call double @_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id(i16* %0, i16* %7, i32 %2, double %3)
  ret double %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id(i16*, i16*, i32, double) local_unnamed_addr #0 comdat {
  %5 = alloca [782 x i8], align 16
  %6 = icmp eq i16* %0, %1
  br i1 %6, label %404, label %7

7:                                                ; preds = %4, %25
  %8 = phi i16* [ %26, %25 ], [ %0, %4 ]
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp ult i16 %9, 256
  br i1 %11, label %19, label %12

12:                                               ; preds = %7
  %13 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %10) #12
  %14 = and i32 %10, 65534
  %15 = icmp eq i32 %14, 8232
  %16 = or i1 %15, %13
  br i1 %16, label %25, label %17

17:                                               ; preds = %12
  %18 = load i16, i16* %8, align 2
  br label %28

19:                                               ; preds = %7
  %20 = zext i16 %9 to i64
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = and i8 %22, 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %12, %19
  %26 = getelementptr inbounds i16, i16* %8, i64 1
  %27 = icmp eq i16* %26, %1
  br i1 %27, label %404, label %7

28:                                               ; preds = %19, %17
  %29 = phi i16 [ %18, %17 ], [ %9, %19 ]
  %30 = and i32 %2, 16
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 782, i8* nonnull %32) #12
  switch i16 %29, label %43 [
    i16 43, label %33
    i16 45, label %36
  ]

33:                                               ; preds = %28
  %34 = getelementptr inbounds i16, i16* %8, i64 1
  %35 = icmp eq i16* %34, %1
  br i1 %35, label %402, label %39

36:                                               ; preds = %28
  %37 = getelementptr inbounds i16, i16* %8, i64 1
  %38 = icmp eq i16* %37, %1
  br i1 %38, label %402, label %39

39:                                               ; preds = %33, %36
  %40 = phi i16* [ %34, %33 ], [ %37, %36 ]
  %41 = phi i32 [ 2, %33 ], [ 1, %36 ]
  %42 = load i16, i16* %40, align 2
  br label %43

43:                                               ; preds = %39, %28
  %44 = phi i16 [ %42, %39 ], [ %29, %28 ]
  %45 = phi i16* [ %40, %39 ], [ %8, %28 ]
  %46 = phi i32 [ %41, %39 ], [ 0, %28 ]
  switch i16 %44, label %158 [
    i16 73, label %47
    i16 48, label %75
  ]

47:                                               ; preds = %43
  %48 = getelementptr inbounds i16, i16* %45, i64 1
  %49 = icmp eq i16* %48, %1
  br i1 %49, label %402, label %50

50:                                               ; preds = %47
  %51 = load i16, i16* %48, align 2
  %52 = icmp eq i16 %51, 110
  br i1 %52, label %406, label %402

53:                                               ; preds = %442, %69
  %54 = phi i16* [ %70, %69 ], [ %443, %442 ]
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp ult i16 %55, 256
  br i1 %57, label %63, label %58

58:                                               ; preds = %53
  %59 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %56) #12
  %60 = and i32 %56, 65534
  %61 = icmp eq i32 %60, 8232
  %62 = or i1 %61, %59
  br i1 %62, label %69, label %402

63:                                               ; preds = %53
  %64 = zext i16 %55 to i64
  %65 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = and i8 %66, 8
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %402, label %69

69:                                               ; preds = %58, %63
  %70 = getelementptr inbounds i16, i16* %54, i64 1
  %71 = icmp eq i16* %70, %1
  br i1 %71, label %72, label %53

72:                                               ; preds = %69, %442
  %73 = icmp eq i32 %46, 1
  %74 = select i1 %73, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %402

75:                                               ; preds = %43
  %76 = getelementptr inbounds i16, i16* %45, i64 1
  %77 = icmp eq i16* %76, %1
  br i1 %77, label %78, label %81

78:                                               ; preds = %75
  %79 = icmp eq i32 %46, 1
  %80 = select i1 %79, double -0.000000e+00, double 0.000000e+00
  br label %402

81:                                               ; preds = %75
  %82 = and i32 %2, 1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %109, label %84

84:                                               ; preds = %81
  %85 = load i16, i16* %76, align 2
  switch i16 %85, label %109 [
    i16 120, label %86
    i16 88, label %86
  ]

86:                                               ; preds = %84, %84
  %87 = getelementptr inbounds i16, i16* %45, i64 2
  %88 = icmp eq i16* %87, %1
  br i1 %88, label %402, label %89

89:                                               ; preds = %86
  %90 = load i16, i16* %87, align 2
  %91 = zext i16 %90 to i32
  %92 = add nsw i32 %91, -48
  %93 = icmp ult i32 %92, 10
  %94 = icmp ult i16 %90, 64
  %95 = and i1 %94, %93
  %96 = add i16 %90, -97
  %97 = icmp ult i16 %96, 6
  %98 = or i1 %97, %95
  br i1 %98, label %103, label %99

99:                                               ; preds = %89
  %100 = icmp ugt i16 %90, 64
  br i1 %100, label %101, label %402

101:                                              ; preds = %99
  %102 = icmp ugt i16 %90, 70
  br label %103

103:                                              ; preds = %89, %101
  %104 = phi i1 [ %102, %101 ], [ false, %89 ]
  %105 = icmp ne i32 %46, 0
  %106 = or i1 %105, %104
  br i1 %106, label %402, label %107

107:                                              ; preds = %103
  %108 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKtS3_EEdT0_T1_bb(i16* %87, i16* %1, i1 zeroext false, i1 zeroext %31)
  br label %402

109:                                              ; preds = %84, %81
  %110 = and i32 %2, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %128, label %112

112:                                              ; preds = %109
  %113 = load i16, i16* %76, align 2
  switch i16 %113, label %128 [
    i16 111, label %114
    i16 79, label %114
  ]

114:                                              ; preds = %112, %112
  %115 = getelementptr inbounds i16, i16* %45, i64 2
  %116 = icmp eq i16* %115, %1
  br i1 %116, label %402, label %117

117:                                              ; preds = %114
  %118 = load i16, i16* %115, align 2
  %119 = zext i16 %118 to i32
  %120 = add nsw i32 %119, -48
  %121 = icmp ult i32 %120, 10
  %122 = icmp ult i16 %118, 56
  %123 = and i1 %122, %121
  %124 = icmp eq i32 %46, 0
  %125 = and i1 %124, %123
  br i1 %125, label %126, label %402

126:                                              ; preds = %117
  %127 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKtS3_EEdT0_T1_bb(i16* %115, i16* %1, i1 zeroext false, i1 zeroext %31)
  br label %402

128:                                              ; preds = %112, %109
  %129 = and i32 %2, 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %132, %128
  br label %145

132:                                              ; preds = %128
  %133 = load i16, i16* %76, align 2
  switch i16 %133, label %131 [
    i16 98, label %134
    i16 66, label %134
  ]

134:                                              ; preds = %132, %132
  %135 = getelementptr inbounds i16, i16* %45, i64 2
  %136 = icmp eq i16* %135, %1
  br i1 %136, label %402, label %137

137:                                              ; preds = %134
  %138 = load i16, i16* %135, align 2
  %139 = or i16 %138, 1
  %140 = icmp ne i16 %139, 49
  %141 = icmp ne i32 %46, 0
  %142 = or i1 %141, %140
  br i1 %142, label %402, label %143

143:                                              ; preds = %137
  %144 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKtS3_EEdT0_T1_bb(i16* %135, i16* %1, i1 zeroext false, i1 zeroext %31)
  br label %402

145:                                              ; preds = %131, %149
  %146 = phi i16* [ %150, %149 ], [ %76, %131 ]
  %147 = load i16, i16* %146, align 2
  %148 = icmp eq i16 %147, 48
  br i1 %148, label %149, label %155

149:                                              ; preds = %145
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = icmp eq i16* %150, %1
  br i1 %151, label %152, label %145

152:                                              ; preds = %149
  %153 = icmp eq i32 %46, 1
  %154 = select i1 %153, double -0.000000e+00, double 0.000000e+00
  br label %402

155:                                              ; preds = %145
  %156 = and i32 %2, 4
  %157 = icmp ne i32 %156, 0
  br label %158

158:                                              ; preds = %43, %155
  %159 = phi i16 [ %147, %155 ], [ %44, %43 ]
  %160 = phi i1 [ true, %155 ], [ false, %43 ]
  %161 = phi i16* [ %146, %155 ], [ %45, %43 ]
  %162 = phi i1 [ %157, %155 ], [ false, %43 ]
  %163 = zext i1 %162 to i8
  %164 = add i16 %159, -48
  %165 = icmp ult i16 %164, 10
  br i1 %165, label %166, label %205

166:                                              ; preds = %158, %201
  %167 = phi i32 [ %191, %201 ], [ 0, %158 ]
  %168 = phi i8 [ %198, %201 ], [ %163, %158 ]
  %169 = phi i8 [ %190, %201 ], [ 0, %158 ]
  %170 = phi i32 [ %189, %201 ], [ 0, %158 ]
  %171 = phi i32 [ %188, %201 ], [ 0, %158 ]
  %172 = phi i16* [ %199, %201 ], [ %161, %158 ]
  %173 = phi i16 [ %202, %201 ], [ %159, %158 ]
  %174 = icmp slt i32 %171, 772
  br i1 %174, label %175, label %181

175:                                              ; preds = %166
  %176 = trunc i16 %173 to i8
  %177 = add nsw i32 %167, 1
  %178 = sext i32 %167 to i64
  %179 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %178
  store i8 %176, i8* %179, align 1
  %180 = add nsw i32 %171, 1
  br label %187

181:                                              ; preds = %166
  %182 = add nsw i32 %170, 1
  %183 = and i8 %169, 1
  %184 = icmp ne i16 %173, 48
  %185 = zext i1 %184 to i8
  %186 = or i8 %183, %185
  br label %187

187:                                              ; preds = %181, %175
  %188 = phi i32 [ %180, %175 ], [ %171, %181 ]
  %189 = phi i32 [ %170, %175 ], [ %182, %181 ]
  %190 = phi i8 [ %169, %175 ], [ %186, %181 ]
  %191 = phi i32 [ %177, %175 ], [ %167, %181 ]
  %192 = icmp eq i8 %168, 0
  br i1 %192, label %196, label %193

193:                                              ; preds = %187
  %194 = load i16, i16* %172, align 2
  %195 = icmp ult i16 %194, 56
  br label %196

196:                                              ; preds = %187, %193
  %197 = phi i1 [ false, %187 ], [ %195, %193 ]
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds i16, i16* %172, i64 1
  %200 = icmp eq i16* %199, %1
  br i1 %200, label %367, label %201

201:                                              ; preds = %196
  %202 = load i16, i16* %199, align 2
  %203 = add i16 %202, -48
  %204 = icmp ult i16 %203, 10
  br i1 %204, label %166, label %205

205:                                              ; preds = %201, %158
  %206 = phi i16 [ %159, %158 ], [ %202, %201 ]
  %207 = phi i16* [ %161, %158 ], [ %199, %201 ]
  %208 = phi i32 [ 0, %158 ], [ %188, %201 ]
  %209 = phi i32 [ 0, %158 ], [ %189, %201 ]
  %210 = phi i8 [ 0, %158 ], [ %190, %201 ]
  %211 = phi i8 [ %163, %158 ], [ %198, %201 ]
  %212 = phi i32 [ 0, %158 ], [ %191, %201 ]
  %213 = icmp eq i32 %208, 0
  %214 = select i1 %213, i8 0, i8 %211
  %215 = icmp eq i16 %206, 46
  br i1 %215, label %216, label %275

216:                                              ; preds = %205
  %217 = icmp ne i8 %214, 0
  %218 = xor i1 %217, true
  %219 = or i1 %31, %218
  br i1 %219, label %220, label %402

220:                                              ; preds = %216
  br i1 %217, label %376, label %221

221:                                              ; preds = %220
  %222 = getelementptr inbounds i16, i16* %207, i64 1
  %223 = icmp eq i16* %222, %1
  br i1 %223, label %224, label %226

224:                                              ; preds = %221
  br i1 %213, label %225, label %367

225:                                              ; preds = %224
  br i1 %160, label %362, label %402

226:                                              ; preds = %221
  br i1 %213, label %227, label %242

227:                                              ; preds = %226
  %228 = load i16, i16* %222, align 2
  %229 = icmp eq i16 %228, 48
  br i1 %229, label %230, label %242

230:                                              ; preds = %227, %238
  %231 = phi i32 [ %239, %238 ], [ 0, %227 ]
  %232 = phi i16* [ %233, %238 ], [ %222, %227 ]
  %233 = getelementptr inbounds i16, i16* %232, i64 1
  %234 = icmp eq i16* %233, %1
  br i1 %234, label %235, label %238

235:                                              ; preds = %230
  %236 = icmp eq i32 %46, 1
  %237 = select i1 %236, double -0.000000e+00, double 0.000000e+00
  br label %402

238:                                              ; preds = %230
  %239 = add nsw i32 %231, -1
  %240 = load i16, i16* %233, align 2
  %241 = icmp eq i16 %240, 48
  br i1 %241, label %230, label %242

242:                                              ; preds = %238, %227, %226
  %243 = phi i16* [ %222, %227 ], [ %222, %226 ], [ %233, %238 ]
  %244 = phi i32 [ 0, %227 ], [ 0, %226 ], [ %239, %238 ]
  br label %245

245:                                              ; preds = %242, %268
  %246 = phi i16* [ %273, %268 ], [ %243, %242 ]
  %247 = phi i32 [ %269, %268 ], [ %208, %242 ]
  %248 = phi i8 [ %270, %268 ], [ %210, %242 ]
  %249 = phi i32 [ %271, %268 ], [ %244, %242 ]
  %250 = phi i32 [ %272, %268 ], [ %212, %242 ]
  %251 = load i16, i16* %246, align 2
  %252 = add i16 %251, -48
  %253 = icmp ult i16 %252, 10
  br i1 %253, label %254, label %275

254:                                              ; preds = %245
  %255 = icmp slt i32 %247, 772
  br i1 %255, label %256, label %263

256:                                              ; preds = %254
  %257 = trunc i16 %251 to i8
  %258 = add nsw i32 %250, 1
  %259 = sext i32 %250 to i64
  %260 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %259
  store i8 %257, i8* %260, align 1
  %261 = add nsw i32 %247, 1
  %262 = add nsw i32 %249, -1
  br label %268

263:                                              ; preds = %254
  %264 = and i8 %248, 1
  %265 = icmp ne i16 %251, 48
  %266 = zext i1 %265 to i8
  %267 = or i8 %264, %266
  br label %268

268:                                              ; preds = %263, %256
  %269 = phi i32 [ %261, %256 ], [ %247, %263 ]
  %270 = phi i8 [ %248, %256 ], [ %267, %263 ]
  %271 = phi i32 [ %262, %256 ], [ %249, %263 ]
  %272 = phi i32 [ %258, %256 ], [ %250, %263 ]
  %273 = getelementptr inbounds i16, i16* %246, i64 1
  %274 = icmp eq i16* %273, %1
  br i1 %274, label %362, label %245

275:                                              ; preds = %245, %205
  %276 = phi i16 [ %206, %205 ], [ %251, %245 ]
  %277 = phi i16* [ %207, %205 ], [ %246, %245 ]
  %278 = phi i32 [ %208, %205 ], [ %247, %245 ]
  %279 = phi i8 [ %210, %205 ], [ %248, %245 ]
  %280 = phi i32 [ 0, %205 ], [ %249, %245 ]
  %281 = phi i32 [ %212, %205 ], [ %250, %245 ]
  %282 = xor i1 %160, true
  %283 = or i32 %280, %278
  %284 = icmp eq i32 %283, 0
  %285 = and i1 %284, %282
  br i1 %285, label %402, label %286

286:                                              ; preds = %275
  switch i16 %276, label %338 [
    i16 101, label %287
    i16 69, label %287
  ]

287:                                              ; preds = %286, %286
  %288 = icmp eq i8 %214, 0
  br i1 %288, label %289, label %402

289:                                              ; preds = %287
  %290 = getelementptr inbounds i16, i16* %277, i64 1
  %291 = icmp eq i16* %290, %1
  br i1 %291, label %292, label %293

292:                                              ; preds = %289
  br i1 %31, label %362, label %402

293:                                              ; preds = %289
  %294 = load i16, i16* %290, align 2
  switch i16 %294, label %300 [
    i16 43, label %295
    i16 45, label %295
  ]

295:                                              ; preds = %293, %293
  %296 = zext i16 %294 to i32
  %297 = getelementptr inbounds i16, i16* %277, i64 2
  %298 = icmp eq i16* %297, %1
  br i1 %298, label %299, label %300

299:                                              ; preds = %295
  br i1 %31, label %362, label %402

300:                                              ; preds = %293, %295
  %301 = phi i16* [ %290, %293 ], [ %297, %295 ]
  %302 = phi i32 [ 43, %293 ], [ %296, %295 ]
  %303 = icmp eq i16* %301, %1
  br i1 %303, label %308, label %304

304:                                              ; preds = %300
  %305 = load i16, i16* %301, align 2
  %306 = add i16 %305, -48
  %307 = icmp ugt i16 %306, 9
  br i1 %307, label %308, label %309

308:                                              ; preds = %304, %300
  br i1 %31, label %362, label %402

309:                                              ; preds = %304, %327
  %310 = phi i16 [ %328, %327 ], [ %305, %304 ]
  %311 = phi i16* [ %325, %327 ], [ %301, %304 ]
  %312 = phi i32 [ %324, %327 ], [ 0, %304 ]
  %313 = zext i16 %310 to i32
  %314 = add nsw i32 %313, -48
  %315 = icmp sgt i32 %312, 107374181
  br i1 %315, label %316, label %320

316:                                              ; preds = %309
  %317 = icmp eq i32 %312, 107374182
  %318 = icmp slt i32 %314, 4
  %319 = and i1 %317, %318
  br i1 %319, label %320, label %323

320:                                              ; preds = %316, %309
  %321 = mul nsw i32 %312, 10
  %322 = add nsw i32 %314, %321
  br label %323

323:                                              ; preds = %316, %320
  %324 = phi i32 [ %322, %320 ], [ 1073741823, %316 ]
  %325 = getelementptr inbounds i16, i16* %311, i64 1
  %326 = icmp eq i16* %325, %1
  br i1 %326, label %331, label %327

327:                                              ; preds = %323
  %328 = load i16, i16* %325, align 2
  %329 = add i16 %328, -48
  %330 = icmp ult i16 %329, 10
  br i1 %330, label %309, label %331

331:                                              ; preds = %327, %323
  %332 = phi i16* [ %325, %327 ], [ %1, %323 ]
  %333 = and i32 %302, 255
  %334 = icmp eq i32 %333, 45
  %335 = sub nsw i32 0, %324
  %336 = select i1 %334, i32 %335, i32 %324
  %337 = add nsw i32 %336, %280
  br label %338

338:                                              ; preds = %331, %286
  %339 = phi i16* [ %277, %286 ], [ %332, %331 ]
  %340 = phi i32 [ %280, %286 ], [ %337, %331 ]
  %341 = icmp eq i16* %339, %1
  %342 = or i1 %31, %341
  br i1 %342, label %367, label %343

343:                                              ; preds = %338, %359
  %344 = phi i16* [ %360, %359 ], [ %339, %338 ]
  %345 = load i16, i16* %344, align 2
  %346 = zext i16 %345 to i32
  %347 = icmp ult i16 %345, 256
  br i1 %347, label %353, label %348

348:                                              ; preds = %343
  %349 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %346) #12
  %350 = and i32 %346, 65534
  %351 = icmp eq i32 %350, 8232
  %352 = or i1 %351, %349
  br i1 %352, label %359, label %402

353:                                              ; preds = %343
  %354 = zext i16 %345 to i64
  %355 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %354
  %356 = load i8, i8* %355, align 1
  %357 = and i8 %356, 8
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %402, label %359

359:                                              ; preds = %348, %353
  %360 = getelementptr inbounds i16, i16* %344, i64 1
  %361 = icmp eq i16* %360, %1
  br i1 %361, label %367, label %343

362:                                              ; preds = %268, %225, %292, %299, %308
  %363 = phi i8 [ %279, %308 ], [ %279, %299 ], [ %279, %292 ], [ %210, %225 ], [ %270, %268 ]
  %364 = phi i32 [ %280, %308 ], [ %280, %299 ], [ %280, %292 ], [ 0, %225 ], [ %271, %268 ]
  %365 = phi i32 [ %281, %308 ], [ %281, %299 ], [ %281, %292 ], [ %212, %225 ], [ %272, %268 ]
  %366 = add nsw i32 %364, %209
  br label %382

367:                                              ; preds = %196, %359, %338, %224
  %368 = phi i32 [ %209, %224 ], [ %209, %338 ], [ %209, %359 ], [ %189, %196 ]
  %369 = phi i8 [ %210, %224 ], [ %279, %338 ], [ %279, %359 ], [ %190, %196 ]
  %370 = phi i8 [ %211, %224 ], [ %214, %338 ], [ %214, %359 ], [ %198, %196 ]
  %371 = phi i32 [ 0, %224 ], [ %340, %338 ], [ %340, %359 ], [ 0, %196 ]
  %372 = phi i32 [ %212, %224 ], [ %281, %338 ], [ %281, %359 ], [ %191, %196 ]
  %373 = add nsw i32 %371, %368
  %374 = and i8 %370, 1
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %382, label %376

376:                                              ; preds = %220, %367
  %377 = phi i32 [ %372, %367 ], [ %212, %220 ]
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %378
  %380 = icmp eq i32 %46, 1
  %381 = call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPcS2_EEdT0_T1_bb(i8* nonnull %32, i8* %379, i1 zeroext %380, i1 zeroext %31)
  br label %402

382:                                              ; preds = %362, %367
  %383 = phi i32 [ %366, %362 ], [ %373, %367 ]
  %384 = phi i32 [ %365, %362 ], [ %372, %367 ]
  %385 = phi i8 [ %363, %362 ], [ %369, %367 ]
  %386 = and i8 %385, 1
  %387 = icmp eq i8 %386, 0
  br i1 %387, label %393, label %388

388:                                              ; preds = %382
  %389 = add nsw i32 %384, 1
  %390 = sext i32 %384 to i64
  %391 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %390
  store i8 49, i8* %391, align 1
  %392 = add nsw i32 %383, -1
  br label %393

393:                                              ; preds = %382, %388
  %394 = phi i32 [ %392, %388 ], [ %383, %382 ]
  %395 = phi i32 [ %389, %388 ], [ %384, %382 ]
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds [782 x i8], [782 x i8]* %5, i64 0, i64 %396
  store i8 0, i8* %397, align 1
  %398 = call double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8* nonnull %32, i64 %396, i32 %394) #12
  %399 = icmp eq i32 %46, 1
  %400 = fsub double -0.000000e+00, %398
  %401 = select i1 %399, double %400, double %398
  br label %402

402:                                              ; preds = %47, %50, %406, %409, %412, %415, %418, %421, %424, %427, %430, %433, %436, %439, %58, %63, %348, %353, %308, %299, %117, %99, %292, %287, %275, %225, %216, %134, %137, %114, %86, %103, %36, %33, %78, %107, %126, %143, %152, %393, %376, %235, %72
  %403 = phi double [ %74, %72 ], [ %80, %78 ], [ %108, %107 ], [ %127, %126 ], [ %144, %143 ], [ %154, %152 ], [ %381, %376 ], [ %401, %393 ], [ %237, %235 ], [ 0x7FF8000000000000, %33 ], [ 0x7FF8000000000000, %36 ], [ 0x7FF8000000000000, %103 ], [ 0x7FF8000000000000, %86 ], [ 0x7FF8000000000000, %114 ], [ 0x7FF8000000000000, %137 ], [ 0x7FF8000000000000, %134 ], [ 0x7FF8000000000000, %216 ], [ 0x7FF8000000000000, %225 ], [ 0x7FF8000000000000, %275 ], [ 0x7FF8000000000000, %287 ], [ 0x7FF8000000000000, %292 ], [ 0x7FF8000000000000, %99 ], [ 0x7FF8000000000000, %117 ], [ 0x7FF8000000000000, %299 ], [ 0x7FF8000000000000, %308 ], [ 0x7FF8000000000000, %353 ], [ 0x7FF8000000000000, %348 ], [ 0x7FF8000000000000, %63 ], [ 0x7FF8000000000000, %58 ], [ 0x7FF8000000000000, %439 ], [ 0x7FF8000000000000, %436 ], [ 0x7FF8000000000000, %433 ], [ 0x7FF8000000000000, %430 ], [ 0x7FF8000000000000, %427 ], [ 0x7FF8000000000000, %424 ], [ 0x7FF8000000000000, %421 ], [ 0x7FF8000000000000, %418 ], [ 0x7FF8000000000000, %415 ], [ 0x7FF8000000000000, %412 ], [ 0x7FF8000000000000, %409 ], [ 0x7FF8000000000000, %406 ], [ 0x7FF8000000000000, %50 ], [ 0x7FF8000000000000, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 782, i8* nonnull %32) #12
  br label %404

404:                                              ; preds = %25, %4, %402
  %405 = phi double [ %403, %402 ], [ %3, %4 ], [ %3, %25 ]
  ret double %405

406:                                              ; preds = %50
  %407 = getelementptr inbounds i16, i16* %45, i64 2
  %408 = icmp eq i16* %407, %1
  br i1 %408, label %402, label %409

409:                                              ; preds = %406
  %410 = load i16, i16* %407, align 2
  %411 = icmp eq i16 %410, 102
  br i1 %411, label %412, label %402

412:                                              ; preds = %409
  %413 = getelementptr inbounds i16, i16* %45, i64 3
  %414 = icmp eq i16* %413, %1
  br i1 %414, label %402, label %415

415:                                              ; preds = %412
  %416 = load i16, i16* %413, align 2
  %417 = icmp eq i16 %416, 105
  br i1 %417, label %418, label %402

418:                                              ; preds = %415
  %419 = getelementptr inbounds i16, i16* %45, i64 4
  %420 = icmp eq i16* %419, %1
  br i1 %420, label %402, label %421

421:                                              ; preds = %418
  %422 = load i16, i16* %419, align 2
  %423 = icmp eq i16 %422, 110
  br i1 %423, label %424, label %402

424:                                              ; preds = %421
  %425 = getelementptr inbounds i16, i16* %45, i64 5
  %426 = icmp eq i16* %425, %1
  br i1 %426, label %402, label %427

427:                                              ; preds = %424
  %428 = load i16, i16* %425, align 2
  %429 = icmp eq i16 %428, 105
  br i1 %429, label %430, label %402

430:                                              ; preds = %427
  %431 = getelementptr inbounds i16, i16* %45, i64 6
  %432 = icmp eq i16* %431, %1
  br i1 %432, label %402, label %433

433:                                              ; preds = %430
  %434 = load i16, i16* %431, align 2
  %435 = icmp eq i16 %434, 116
  br i1 %435, label %436, label %402

436:                                              ; preds = %433
  %437 = getelementptr inbounds i16, i16* %45, i64 7
  %438 = icmp eq i16* %437, %1
  br i1 %438, label %402, label %439

439:                                              ; preds = %436
  %440 = load i16, i16* %437, align 2
  %441 = icmp eq i16 %440, 121
  br i1 %441, label %442, label %402

442:                                              ; preds = %439
  %443 = getelementptr inbounds i16, i16* %45, i64 8
  %444 = icmp eq i16* %443, %1
  %445 = or i1 %31, %444
  br i1 %445, label %72, label %53
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal11StringToIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEEi(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::NumberParseIntHelper", align 8
  %5 = bitcast %"class.v8::internal::NumberParseIntHelper"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 1
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* %1, i64** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 3
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 4
  store i32 %2, i32* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 5
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 6
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 7
  store i32 2, i32* %13, align 4
  %14 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 8
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 10
  store i8 1, i8* %16, align 2
  %17 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0, i32 11
  store i32 0, i32* %17, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2v88internal20NumberParseIntHelperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %18 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 1
  store double 0.000000e+00, double* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %4, i64 0, i32 0
  call void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE8ParseIntEv(%"class.v8::internal::StringToIntHelper"* nonnull %19) #12
  %20 = load i32, i32* %17, align 4
  switch i32 %20, label %31 [
    i32 2, label %32
    i32 3, label %32
    i32 4, label %21
    i32 5, label %25
  ]

21:                                               ; preds = %3
  %22 = load i32, i32* %13, align 4
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, double -0.000000e+00, double 0.000000e+00
  br label %32

25:                                               ; preds = %3
  %26 = load i32, i32* %13, align 4
  %27 = icmp eq i32 %26, 0
  %28 = load double, double* %18, align 8
  %29 = fsub double -0.000000e+00, %28
  %30 = select i1 %27, double %29, double %28
  br label %32

31:                                               ; preds = %3
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

32:                                               ; preds = %3, %3, %21, %25
  %33 = phi double [ %30, %25 ], [ %24, %21 ], [ 0x7FF8000000000000, %3 ], [ 0x7FF8000000000000, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #12
  ret double %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE16CheckTerminationEv(%"class.v8::internal::StringToBigIntHelper"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %2, align 8
  %4 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #12
  %5 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 0, i32 6, i32 1, i32 3
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp ult i64 %4, %6
  br i1 %7, label %8, label %18

8:                                                ; preds = %1
  %9 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %2, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %9, i64 0, i32 0, i32 6
  %11 = tail call i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"* %10) #12
  %12 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %2, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %12, i64 0, i32 0, i32 7, i32 0, i64 32
  %14 = load i64, i64* %13, align 8
  %15 = trunc i64 %11 to i32
  %16 = trunc i64 %14 to i32
  %17 = icmp eq i32 %15, %16
  br label %18

18:                                               ; preds = %8, %1
  %19 = phi i1 [ false, %1 ], [ %17, %8 ]
  ret i1 %19
}

declare i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal14StringToBigIntEPNS0_7IsolateENS0_6HandleINS0_6StringEEE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 {
  %3 = alloca %"class.v8::internal::StringToBigIntHelper", align 8
  %4 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %5 = bitcast %"class.v8::internal::StringToBigIntHelper"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 1
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* %4, i64** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 3
  %10 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 7
  %11 = bitcast i8** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 20, i1 false) #12
  store i32 2, i32* %10, align 4
  %12 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 8
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 9
  %14 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 10
  %15 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 0, i32 11
  store i32 0, i32* %15, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN2v88internal20StringToBigIntHelperINS0_7IsolateEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %16 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 1, i32 0, i32 0
  store i64* null, i64** %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %3, i64 0, i32 2
  store i32 0, i32* %17, align 8
  store i8 1, i8* %13, align 1
  store i8 0, i8* %14, align 2
  %18 = call i64* @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE9GetResultEv(%"class.v8::internal::StringToBigIntHelper"* nonnull %3)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %5) #12
  ret i64* %18
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #4 comdat align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 7
  %12 = inttoptr i64 %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = icmp ult i16 %13, 64
  br i1 %14, label %15, label %72

15:                                               ; preds = %3
  %16 = load atomic i32, i32* %7 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = and i16 %21, 7
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %72

24:                                               ; preds = %15
  %25 = load atomic i32, i32* %7 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %5, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = and i16 %30, 7
  %32 = icmp eq i16 %31, 1
  br i1 %32, label %33, label %43

33:                                               ; preds = %24
  %34 = add i64 %4, 15
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %5, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %70

43:                                               ; preds = %24, %33
  %44 = load i64, i64* %1, align 8
  %45 = and i64 %44, -4294967296
  %46 = add i64 %44, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %52 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %51, align 8
  %53 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %43
  %55 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %52, i64 %50) #12
  %56 = load i64, i64* %55, align 8
  br label %72

57:                                               ; preds = %43
  %58 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %61 = load i64*, i64** %60, align 8
  %62 = icmp eq i64* %59, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  %64 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64* [ %64, %63 ], [ %59, %57 ]
  %67 = ptrtoint i64* %66 to i64
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  store i64* %69, i64** %58, align 8
  store i64 %50, i64* %66, align 8
  br label %72

70:                                               ; preds = %33
  %71 = tail call i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext %2) #12
  br label %118

72:                                               ; preds = %65, %54, %3, %15
  %73 = phi i64 [ %4, %15 ], [ %4, %3 ], [ %50, %65 ], [ %56, %54 ]
  %74 = phi i64* [ %1, %15 ], [ %1, %3 ], [ %66, %65 ], [ %55, %54 ]
  %75 = and i64 %73, -4294967296
  %76 = add i64 %73, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %75, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = icmp ult i16 %83, 64
  br i1 %84, label %85, label %118

85:                                               ; preds = %72
  %86 = load atomic i32, i32* %77 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %75, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 7
  %93 = icmp eq i16 %92, 5
  br i1 %93, label %94, label %118

94:                                               ; preds = %85
  %95 = add i64 %73, 11
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %75, %98
  %100 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %101 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %100, align 8
  %102 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %94
  %104 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %101, i64 %99) #12
  br label %118

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %107 = load i64*, i64** %106, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %109 = load i64*, i64** %108, align 8
  %110 = icmp eq i64* %107, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %105
  %112 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %113

113:                                              ; preds = %111, %105
  %114 = phi i64* [ %112, %111 ], [ %107, %105 ]
  %115 = ptrtoint i64* %114 to i64
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  store i64* %117, i64** %106, align 8
  store i64 %99, i64* %114, align 8
  br label %118

118:                                              ; preds = %72, %85, %103, %113, %70
  %119 = phi i64* [ %71, %70 ], [ %74, %85 ], [ %104, %103 ], [ %114, %113 ], [ %74, %72 ]
  ret i64* %119
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal15DoubleToCStringEdNS0_6VectorIcEE(double, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::SimpleStringBuilder", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [18 x i8], align 16
  %8 = alloca i32, align 4
  %9 = fcmp oeq double %0, 0.000000e+00
  br i1 %9, label %142, label %10

10:                                               ; preds = %3
  %11 = fcmp uno double %0, 0.000000e+00
  br i1 %11, label %142, label %12

12:                                               ; preds = %10
  %13 = tail call double @llvm.fabs.f64(double %0) #15
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = fcmp olt double %0, 0.000000e+00
  %17 = select i1 %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0)
  br label %142

18:                                               ; preds = %12
  %19 = fcmp ult double %0, 0xC1E0000000000000
  %20 = fcmp ugt double %0, 0x41DFFFFFFFC00000
  %21 = or i1 %20, %19
  %22 = bitcast double %0 to i64
  %23 = icmp eq i64 %22, -9223372036854775808
  %24 = or i1 %21, %23
  br i1 %24, label %60, label %25

25:                                               ; preds = %18
  %26 = fptosi double %0 to i32
  %27 = sitofp i32 %26 to double
  %28 = fcmp oeq double %27, %0
  br i1 %28, label %29, label %60

29:                                               ; preds = %25
  %30 = icmp sgt i32 %26, -1
  %31 = sub nsw i32 0, %26
  %32 = select i1 %30, i32 %31, i32 %26
  %33 = shl i64 %2, 32
  %34 = add i64 %33, -4294967296
  %35 = ashr exact i64 %34, 32
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  store i8 0, i8* %36, align 1
  br label %37

37:                                               ; preds = %37, %29
  %38 = phi i64 [ %43, %37 ], [ %35, %29 ]
  %39 = phi i32 [ %45, %37 ], [ %32, %29 ]
  %40 = srem i32 %39, 10
  %41 = trunc i32 %40 to i8
  %42 = sub nsw i8 48, %41
  %43 = add i64 %38, -1
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  store i8 %42, i8* %44, align 1
  %45 = sdiv i32 %39, 10
  %46 = add i32 %39, 9
  %47 = icmp ugt i32 %46, 18
  br i1 %47, label %37, label %48

48:                                               ; preds = %37
  br i1 %30, label %49, label %52

49:                                               ; preds = %48
  %50 = shl i64 %43, 32
  %51 = ashr exact i64 %50, 32
  br label %57

52:                                               ; preds = %48
  %53 = shl i64 %38, 32
  %54 = add i64 %53, -8589934592
  %55 = ashr exact i64 %54, 32
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  store i8 45, i8* %56, align 1
  br label %57

57:                                               ; preds = %49, %52
  %58 = phi i64 [ %51, %49 ], [ %55, %52 ]
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  br label %142

60:                                               ; preds = %18, %25
  %61 = bitcast %"class.v8::internal::SimpleStringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #12
  %62 = shl i64 %2, 32
  %63 = ashr exact i64 %62, 32
  %64 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %4, i64 0, i32 0, i32 0
  store i8* %1, i8** %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %4, i64 0, i32 0, i32 1
  store i64 %63, i64* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %4, i64 0, i32 1
  store i32 0, i32* %66, align 8
  %67 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #12
  %68 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #12
  %69 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %69) #12
  %70 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #12
  call void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double %0, i32 0, i32 0, i8* nonnull %69, i64 18, i32* nonnull %6, i32* nonnull %8, i32* nonnull %5) #12
  %71 = load i32, i32* %6, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %60
  store i32 1, i32* %66, align 8
  store i8 45, i8* %1, align 1
  br label %74

74:                                               ; preds = %60, %73
  %75 = phi i32 [ 0, %60 ], [ 1, %73 ]
  %76 = load i32, i32* %8, align 4
  %77 = load i32, i32* %5, align 4
  %78 = icmp sle i32 %76, %77
  %79 = icmp slt i32 %77, 22
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %85

81:                                               ; preds = %74
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* nonnull %69) #12
  %82 = load i32, i32* %5, align 4
  %83 = load i32, i32* %8, align 4
  %84 = sub nsw i32 %82, %83
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8 signext 48, i32 %84) #12
  br label %135

85:                                               ; preds = %74
  %86 = add i32 %77, -1
  %87 = icmp ult i32 %86, 21
  br i1 %87, label %88, label %97

88:                                               ; preds = %85
  call void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* nonnull %69, i32 %77) #12
  %89 = load i32, i32* %66, align 8
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %66, align 8
  %91 = sext i32 %89 to i64
  %92 = load i8*, i8** %64, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 %91
  store i8 46, i8* %93, align 1
  %94 = load i32, i32* %5, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i64 0, i64 %95
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* %96) #12
  br label %135

97:                                               ; preds = %85
  %98 = add i32 %77, 5
  %99 = icmp ult i32 %98, 6
  br i1 %99, label %100, label %103

100:                                              ; preds = %97
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)) #12
  %101 = load i32, i32* %5, align 4
  %102 = sub nsw i32 0, %101
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8 signext 48, i32 %102) #12
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* nonnull %69) #12
  br label %135

103:                                              ; preds = %97
  %104 = load i8, i8* %69, align 16
  %105 = add nuw nsw i32 %75, 1
  store i32 %105, i32* %66, align 8
  %106 = zext i32 %75 to i64
  %107 = getelementptr inbounds i8, i8* %1, i64 %106
  store i8 %104, i8* %107, align 1
  %108 = icmp eq i32 %76, 1
  br i1 %108, label %116, label %109

109:                                              ; preds = %103
  %110 = or i32 %75, 2
  store i32 %110, i32* %66, align 8
  %111 = zext i32 %105 to i64
  %112 = getelementptr inbounds i8, i8* %1, i64 %111
  store i8 46, i8* %112, align 1
  %113 = getelementptr inbounds [18 x i8], [18 x i8]* %7, i64 0, i64 1
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i8* %113) #12
  %114 = load i32, i32* %66, align 8
  %115 = load i8*, i8** %64, align 8
  br label %116

116:                                              ; preds = %103, %109
  %117 = phi i8* [ %1, %103 ], [ %115, %109 ]
  %118 = phi i32 [ %105, %103 ], [ %114, %109 ]
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %66, align 8
  %120 = sext i32 %118 to i64
  %121 = getelementptr inbounds i8, i8* %117, i64 %120
  store i8 101, i8* %121, align 1
  %122 = load i32, i32* %5, align 4
  %123 = icmp sgt i32 %122, -1
  %124 = select i1 %123, i8 43, i8 45
  %125 = load i32, i32* %66, align 8
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %66, align 8
  %127 = sext i32 %125 to i64
  %128 = load i8*, i8** %64, align 8
  %129 = getelementptr inbounds i8, i8* %128, i64 %127
  store i8 %124, i8* %129, align 1
  %130 = load i32, i32* %5, align 4
  %131 = add nsw i32 %130, -1
  %132 = icmp slt i32 %130, 1
  %133 = sub i32 1, %130
  %134 = select i1 %132, i32 %133, i32 %131
  call void @_ZN2v88internal19SimpleStringBuilder17AddDecimalIntegerEi(%"class.v8::internal::SimpleStringBuilder"* nonnull %4, i32 %134) #12
  br label %135

135:                                              ; preds = %88, %116, %100, %81
  %136 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #12
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %69) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #12
  %137 = load i32, i32* %66, align 8
  %138 = icmp slt i32 %137, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %135
  %140 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %4) #12
  br label %141

141:                                              ; preds = %135, %139
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #12
  br label %142

142:                                              ; preds = %10, %3, %141, %57, %15
  %143 = phi i8* [ %59, %57 ], [ %136, %141 ], [ %17, %15 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), %3 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), %10 ]
  ret i8* %143
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i8* @_ZN2v88internal12IntToCStringEiNS0_6VectorIcEE(i32, i8*, i64) local_unnamed_addr #5 {
  %4 = icmp sgt i32 %0, -1
  %5 = sub nsw i32 0, %0
  %6 = select i1 %4, i32 %5, i32 %0
  %7 = shl i64 %2, 32
  %8 = add i64 %7, -4294967296
  %9 = ashr exact i64 %8, 32
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  store i8 0, i8* %10, align 1
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %17, %11 ], [ %9, %3 ]
  %13 = phi i32 [ %19, %11 ], [ %6, %3 ]
  %14 = srem i32 %13, 10
  %15 = trunc i32 %14 to i8
  %16 = sub nsw i8 48, %15
  %17 = add i64 %12, -1
  %18 = getelementptr inbounds i8, i8* %1, i64 %17
  store i8 %16, i8* %18, align 1
  %19 = sdiv i32 %13, 10
  %20 = add i32 %13, 9
  %21 = icmp ugt i32 %20, 18
  br i1 %21, label %11, label %22

22:                                               ; preds = %11
  br i1 %4, label %23, label %26

23:                                               ; preds = %22
  %24 = shl i64 %17, 32
  %25 = ashr exact i64 %24, 32
  br label %31

26:                                               ; preds = %22
  %27 = shl i64 %12, 32
  %28 = add i64 %27, -8589934592
  %29 = ashr exact i64 %28, 32
  %30 = getelementptr inbounds i8, i8* %1, i64 %29
  store i8 45, i8* %30, align 1
  br label %31

31:                                               ; preds = %23, %26
  %32 = phi i64 [ %25, %23 ], [ %29, %26 ]
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  ret i8* %33
}

declare void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double, i32, i32, i8*, i64, i32*, i32*, i32*) local_unnamed_addr #3

declare void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"*, i8*) local_unnamed_addr #3

declare void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"*, i8 signext, i32) local_unnamed_addr #3

declare void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"*, i8*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal19SimpleStringBuilder17AddDecimalIntegerEi(%"class.v8::internal::SimpleStringBuilder"*, i32) local_unnamed_addr #3

declare i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal20DoubleToFixedCStringEdi(double, i32) local_unnamed_addr #0 {
  %3 = alloca [100 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [122 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %"class.v8::internal::SimpleStringBuilder", align 8
  %9 = alloca %"class.v8::internal::SimpleStringBuilder", align 8
  %10 = fcmp olt double %0, 0.000000e+00
  %11 = fsub double -0.000000e+00, %0
  %12 = select i1 %10, double %11, double %0
  %13 = fcmp ult double %12, 1.000000e+21
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %15) #12
  %16 = call i8* @_ZN2v88internal15DoubleToCStringEdNS0_6VectorIcEE(double %0, i8* nonnull %15, i64 100)
  %17 = call i8* @_ZN2v88internal6StrDupEPKc(i8* %16) #12
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %15) #12
  br label %83

18:                                               ; preds = %2
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #12
  %20 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #12
  %21 = getelementptr inbounds [122 x i8], [122 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 122, i8* nonnull %21) #12
  %22 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #12
  call void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double %0, i32 1, i32 %1, i8* nonnull %21, i64 122, i32* nonnull %5, i32* nonnull %7, i32* nonnull %4) #12
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %18
  %26 = sub i32 1, %23
  store i32 1, i32* %4, align 4
  br label %27

27:                                               ; preds = %25, %18
  %28 = phi i32 [ 1, %25 ], [ %23, %18 ]
  %29 = phi i32 [ %26, %25 ], [ 0, %18 ]
  %30 = load i32, i32* %7, align 4
  %31 = add i32 %30, %29
  %32 = add nsw i32 %28, %1
  %33 = icmp sgt i32 %32, %31
  %34 = sub i32 %32, %31
  %35 = select i1 %33, i32 %34, i32 0
  %36 = bitcast %"class.v8::internal::SimpleStringBuilder"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #12
  %37 = add i32 %31, 1
  %38 = add i32 %37, %35
  call void @_ZN2v88internal19SimpleStringBuilderC1Ei(%"class.v8::internal::SimpleStringBuilder"* nonnull %8, i32 %38) #12
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %8, i8 signext 48, i32 %29) #12
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %8, i8* nonnull %21) #12
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %8, i8 signext 48, i32 %35) #12
  %39 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %8) #12
  %40 = load i32, i32* %4, align 4
  %41 = bitcast %"class.v8::internal::SimpleStringBuilder"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #12
  %42 = add i32 %1, 3
  %43 = add i32 %42, %40
  call void @_ZN2v88internal19SimpleStringBuilderC1Ei(%"class.v8::internal::SimpleStringBuilder"* nonnull %9, i32 %43) #12
  br i1 %10, label %44, label %52

44:                                               ; preds = %27
  %45 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %9, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %45, align 8
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %9, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %48
  store i8 45, i8* %51, align 1
  br label %52

52:                                               ; preds = %44, %27
  %53 = load i32, i32* %4, align 4
  call void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"* nonnull %9, i8* %39, i32 %53) #12
  %54 = icmp sgt i32 %1, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %9, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %56, align 8
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %9, i64 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %59
  store i8 46, i8* %62, align 1
  %63 = load i32, i32* %4, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %39, i64 %64
  call void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"* nonnull %9, i8* %65, i32 %1) #12
  br label %66

66:                                               ; preds = %55, %52
  %67 = icmp eq i8* %39, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %66
  call void @_ZdaPv(i8* nonnull %39) #16
  br label %69

69:                                               ; preds = %66, %68
  %70 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %9) #12
  %71 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %9, i64 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %69
  %75 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %9) #12
  br label %76

76:                                               ; preds = %69, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #12
  %77 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %8, i64 0, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %76
  %81 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %8) #12
  br label %82

82:                                               ; preds = %76, %80
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 122, i8* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #12
  br label %83

83:                                               ; preds = %82, %14
  %84 = phi i8* [ %17, %14 ], [ %70, %82 ]
  ret i8* %84
}

declare i8* @_ZN2v88internal6StrDupEPKc(i8*) local_unnamed_addr #3

declare void @_ZN2v88internal19SimpleStringBuilderC1Ei(%"class.v8::internal::SimpleStringBuilder"*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal26DoubleToExponentialCStringEdi(double, i32) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [102 x i8], align 16
  %6 = alloca i32, align 4
  %7 = fcmp olt double %0, 0.000000e+00
  %8 = fsub double -0.000000e+00, %0
  %9 = select i1 %7, double %8, double %0
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #12
  %11 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  %12 = getelementptr inbounds [102 x i8], [102 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 102, i8* nonnull %12) #12
  %13 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #12
  %14 = icmp eq i32 %1, -1
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  call void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double %9, i32 0, i32 0, i8* nonnull %12, i64 102, i32* nonnull %4, i32* nonnull %6, i32* nonnull %3) #12
  %16 = load i32, i32* %6, align 4
  br label %19

17:                                               ; preds = %2
  %18 = add nuw nsw i32 %1, 1
  call void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double %9, i32 2, i32 %18, i8* nonnull %12, i64 102, i32* nonnull %4, i32* nonnull %6, i32* nonnull %3) #12
  br label %19

19:                                               ; preds = %17, %15
  %20 = phi i32 [ %18, %17 ], [ %16, %15 ]
  %21 = load i32, i32* %3, align 4
  %22 = add nsw i32 %21, -1
  %23 = call fastcc i8* @_ZN2v88internalL31CreateExponentialRepresentationEPcibi(i8* nonnull %12, i32 %22, i1 zeroext %7, i32 %20)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 102, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #12
  ret i8* %23
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @_ZN2v88internalL31CreateExponentialRepresentationEPcibi(i8*, i32, i1 zeroext, i32) unnamed_addr #0 {
  %5 = alloca %"class.v8::internal::SimpleStringBuilder", align 8
  %6 = icmp slt i32 %1, 0
  %7 = sub nsw i32 0, %1
  %8 = select i1 %6, i8 45, i8 43
  %9 = select i1 %6, i32 %7, i32 %1
  %10 = bitcast %"class.v8::internal::SimpleStringBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #12
  %11 = add i32 %3, 8
  call void @_ZN2v88internal19SimpleStringBuilderC1Ei(%"class.v8::internal::SimpleStringBuilder"* nonnull %5, i32 %11) #12
  br i1 %2, label %12, label %20

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %5, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = sext i32 %14 to i64
  %17 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %5, i64 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %16
  store i8 45, i8* %19, align 1
  br label %20

20:                                               ; preds = %12, %4
  %21 = load i8, i8* %0, align 1
  %22 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %5, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %22, align 8
  %25 = sext i32 %23 to i64
  %26 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %5, i64 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 %25
  store i8 %21, i8* %28, align 1
  %29 = icmp eq i32 %3, 1
  br i1 %29, label %40, label %30

30:                                               ; preds = %20
  %31 = load i32, i32* %22, align 8
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %22, align 8
  %33 = sext i32 %31 to i64
  %34 = load i8*, i8** %26, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  store i8 46, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %0, i64 1
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %5, i8* %36) #12
  %37 = call i64 @strlen(i8* %0) #13
  %38 = trunc i64 %37 to i32
  %39 = sub nsw i32 %3, %38
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %5, i8 signext 48, i32 %39) #12
  br label %40

40:                                               ; preds = %20, %30
  %41 = load i32, i32* %22, align 8
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %22, align 8
  %43 = sext i32 %41 to i64
  %44 = load i8*, i8** %26, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 101, i8* %45, align 1
  %46 = load i32, i32* %22, align 8
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %22, align 8
  %48 = sext i32 %46 to i64
  %49 = load i8*, i8** %26, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 %48
  store i8 %8, i8* %50, align 1
  call void @_ZN2v88internal19SimpleStringBuilder17AddDecimalIntegerEi(%"class.v8::internal::SimpleStringBuilder"* nonnull %5, i32 %9) #12
  %51 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %5) #12
  %52 = load i32, i32* %22, align 8
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %40
  %55 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %5) #12
  br label %56

56:                                               ; preds = %40, %54
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #12
  ret i8* %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN2v88internal24DoubleToPrecisionCStringEdi(double, i32) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [101 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %"class.v8::internal::SimpleStringBuilder", align 8
  %8 = fcmp olt double %0, 0.000000e+00
  %9 = fsub double -0.000000e+00, %0
  %10 = select i1 %8, double %9, double %0
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  %12 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #12
  %13 = getelementptr inbounds [101 x i8], [101 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 101, i8* nonnull %13) #12
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #12
  call void @_ZN2v88internal13DoubleToAsciiEdNS0_8DtoaModeEiNS0_6VectorIcEEPiS4_S4_(double %10, i32 2, i32 %1, i8* nonnull %13, i64 101, i32* nonnull %4, i32* nonnull %6, i32* nonnull %3) #12
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, -5
  %17 = icmp sgt i32 %15, %1
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = add nsw i32 %15, -1
  %21 = call fastcc i8* @_ZN2v88internalL31CreateExponentialRepresentationEPcibi(i8* nonnull %13, i32 %20, i1 zeroext %8, i32 %1)
  br label %91

22:                                               ; preds = %2
  %23 = icmp slt i32 %15, 1
  %24 = add i32 %1, 3
  %25 = sub i32 %24, %15
  %26 = add nsw i32 %1, 2
  %27 = select i1 %23, i32 %25, i32 %26
  %28 = bitcast %"class.v8::internal::SimpleStringBuilder"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #12
  %29 = add i32 %27, 1
  call void @_ZN2v88internal19SimpleStringBuilderC1Ei(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i32 %29) #12
  br i1 %8, label %30, label %38

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %7, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %31, align 8
  %34 = sext i32 %32 to i64
  %35 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %7, i64 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %34
  store i8 45, i8* %37, align 1
  br label %38

38:                                               ; preds = %30, %22
  %39 = load i32, i32* %3, align 4
  %40 = icmp slt i32 %39, 1
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)) #12
  %42 = load i32, i32* %3, align 4
  %43 = sub nsw i32 0, %42
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8 signext 48, i32 %43) #12
  call void @_ZN2v88internal19SimpleStringBuilder9AddStringEPKc(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8* nonnull %13) #12
  %44 = load i32, i32* %6, align 4
  %45 = sub nsw i32 %1, %44
  br label %81

46:                                               ; preds = %38
  %47 = load i32, i32* %6, align 4
  %48 = icmp slt i32 %39, %47
  %49 = select i1 %48, i32 %39, i32 %47
  call void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8* nonnull %13, i32 %49) #12
  %50 = load i32, i32* %3, align 4
  %51 = load i32, i32* %6, align 4
  %52 = sub nsw i32 %50, %51
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8 signext 48, i32 %52) #12
  %53 = load i32, i32* %3, align 4
  %54 = icmp slt i32 %53, %1
  br i1 %54, label %55, label %83

55:                                               ; preds = %46
  %56 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %7, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %56, align 8
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %7, i64 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %59
  store i8 46, i8* %62, align 1
  %63 = select i1 %8, i32 2, i32 1
  %64 = load i32, i32* %6, align 4
  %65 = load i32, i32* %3, align 4
  %66 = icmp sgt i32 %64, %65
  br i1 %66, label %67, label %77

67:                                               ; preds = %55
  %68 = sext i32 %65 to i64
  %69 = getelementptr inbounds [101 x i8], [101 x i8]* %5, i64 0, i64 %68
  %70 = call i64 @strlen(i8* %69) #13
  %71 = trunc i64 %70 to i32
  %72 = load i32, i32* %56, align 8
  %73 = sub i32 %63, %72
  %74 = add i32 %73, %1
  %75 = icmp slt i32 %74, %71
  %76 = select i1 %75, i32 %74, i32 %71
  call void @_ZN2v88internal19SimpleStringBuilder12AddSubstringEPKci(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8* %69, i32 %76) #12
  br label %77

77:                                               ; preds = %67, %55
  %78 = load i32, i32* %56, align 8
  %79 = add i32 %63, %1
  %80 = sub i32 %79, %78
  br label %81

81:                                               ; preds = %41, %77
  %82 = phi i32 [ %80, %77 ], [ %45, %41 ]
  call void @_ZN2v88internal19SimpleStringBuilder10AddPaddingEci(%"class.v8::internal::SimpleStringBuilder"* nonnull %7, i8 signext 48, i32 %82) #12
  br label %83

83:                                               ; preds = %81, %46
  %84 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %7) #12
  %85 = getelementptr inbounds %"class.v8::internal::SimpleStringBuilder", %"class.v8::internal::SimpleStringBuilder"* %7, i64 0, i32 1
  %86 = load i32, i32* %85, align 8
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %83
  %89 = call i8* @_ZN2v88internal19SimpleStringBuilder8FinalizeEv(%"class.v8::internal::SimpleStringBuilder"* nonnull %7) #12
  br label %90

90:                                               ; preds = %83, %88
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #12
  br label %91

91:                                               ; preds = %90, %19
  %92 = phi i8* [ %21, %19 ], [ %84, %90 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 101, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  ret i8* %92
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias i8* @_ZN2v88internal20DoubleToRadixCStringEdi(double, i32) local_unnamed_addr #0 {
  %3 = alloca [2200 x i8], align 16
  %4 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2200, i8* nonnull %4) #12
  %5 = fcmp olt double %0, 0.000000e+00
  %6 = fsub double -0.000000e+00, %0
  %7 = select i1 %5, double %6, double %0
  %8 = tail call double @llvm.floor.f64(double %7)
  %9 = fsub double %7, %8
  %10 = bitcast double %7 to i64
  %11 = icmp eq i64 %10, 9218868437227405312
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = lshr i64 %10, 32
  %14 = trunc i64 %13 to i32
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = and i64 %10, 4503599627370495
  %18 = and i64 %10, 9218868437227405312
  %19 = icmp eq i64 %18, 0
  %20 = or i64 %17, 4503599627370496
  %21 = select i1 %19, i64 %17, i64 %20
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %16
  %24 = add i64 %10, -1
  %25 = bitcast i64 %24 to double
  br label %29

26:                                               ; preds = %12
  %27 = add i64 %10, 1
  %28 = bitcast i64 %27 to double
  br label %29

29:                                               ; preds = %26, %23, %16, %2
  %30 = phi double [ %25, %23 ], [ %28, %26 ], [ 0.000000e+00, %16 ], [ 0x7FF0000000000000, %2 ]
  %31 = fsub double %30, %7
  %32 = fmul double %31, 5.000000e-01
  %33 = fcmp ogt double %32, 4.940660e-324
  %34 = select i1 %33, double %32, double 4.940660e-324
  %35 = fcmp ult double %9, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = sitofp i32 %1 to double
  br label %95

38:                                               ; preds = %29
  %39 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 1100
  store i8 46, i8* %39, align 4
  %40 = sitofp i32 %1 to double
  br label %41

41:                                               ; preds = %91, %38
  %42 = phi i64 [ %51, %91 ], [ 1101, %38 ]
  %43 = phi double [ %46, %91 ], [ %34, %38 ]
  %44 = phi double [ %54, %91 ], [ %9, %38 ]
  %45 = fmul double %44, %40
  %46 = fmul double %43, %40
  %47 = fptosi double %45 to i32
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZN2v88internal20DoubleToRadixCStringEdiE5chars, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = add nuw i64 %42, 1
  %52 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %42
  store i8 %50, i8* %52, align 1
  %53 = sitofp i32 %47 to double
  %54 = fsub double %45, %53
  %55 = fcmp ogt double %54, 5.000000e-01
  br i1 %55, label %61, label %56

56:                                               ; preds = %41
  %57 = fcmp une double %54, 5.000000e-01
  %58 = and i32 %47, 1
  %59 = icmp eq i32 %58, 0
  %60 = or i1 %59, %57
  br i1 %60, label %91, label %61

61:                                               ; preds = %56, %41
  %62 = fadd double %46, %54
  %63 = fcmp ogt double %62, 1.000000e+00
  br i1 %63, label %64, label %91

64:                                               ; preds = %61
  %65 = shl i64 %51, 32
  %66 = ashr exact i64 %65, 32
  br label %67

67:                                               ; preds = %64, %78
  %68 = phi i64 [ %66, %64 ], [ %69, %78 ]
  %69 = add nsw i64 %68, -1
  %70 = icmp eq i64 %69, 1100
  %71 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %69
  %72 = load i8, i8* %71, align 1
  br i1 %70, label %73, label %78

73:                                               ; preds = %67
  %74 = icmp eq i8 %72, 46
  br i1 %74, label %76, label %75, !prof !2

75:                                               ; preds = %73
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0)) #14
  unreachable

76:                                               ; preds = %73
  %77 = fadd double %8, 1.000000e+00
  br label %95

78:                                               ; preds = %67
  %79 = sext i8 %72 to i32
  %80 = icmp sgt i8 %72, 57
  %81 = select i1 %80, i32 -87, i32 -48
  %82 = add nsw i32 %79, 1
  %83 = add nsw i32 %82, %81
  %84 = icmp slt i32 %83, %1
  br i1 %84, label %85, label %67

85:                                               ; preds = %78
  %86 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %69
  %87 = trunc i64 %68 to i32
  %88 = sext i32 %83 to i64
  %89 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZN2v88internal20DoubleToRadixCStringEdiE5chars, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  store i8 %90, i8* %86, align 1
  br label %95

91:                                               ; preds = %61, %56
  %92 = fcmp ult double %54, %46
  br i1 %92, label %93, label %41

93:                                               ; preds = %91
  %94 = trunc i64 %51 to i32
  br label %95

95:                                               ; preds = %36, %93, %85, %76
  %96 = phi double [ %37, %36 ], [ %40, %93 ], [ %40, %85 ], [ %40, %76 ]
  %97 = phi double [ %8, %36 ], [ %8, %93 ], [ %8, %85 ], [ %77, %76 ]
  %98 = phi i32 [ 1100, %36 ], [ %94, %93 ], [ %87, %85 ], [ 1100, %76 ]
  %99 = fdiv double %97, %96
  %100 = bitcast double %99 to i64
  %101 = and i64 %100, 9218868437227405312
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %110, label %103

103:                                              ; preds = %95, %115
  %104 = phi i64 [ %119, %115 ], [ %100, %95 ]
  %105 = phi double [ %118, %115 ], [ %99, %95 ]
  %106 = phi double [ %105, %115 ], [ %97, %95 ]
  %107 = phi i64 [ %116, %115 ], [ 1100, %95 ]
  %108 = and i64 %104, 9205357638345293824
  %109 = icmp ugt i64 %108, 4841369599423283200
  br i1 %109, label %115, label %110

110:                                              ; preds = %103, %115, %95
  %111 = phi i64 [ 1100, %95 ], [ %107, %103 ], [ %116, %115 ]
  %112 = phi double [ %97, %95 ], [ %106, %103 ], [ %105, %115 ]
  %113 = shl i64 %111, 32
  %114 = ashr exact i64 %113, 32
  br label %122

115:                                              ; preds = %103
  %116 = add i64 %107, -1
  %117 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %116
  store i8 48, i8* %117, align 1
  %118 = fdiv double %105, %96
  %119 = bitcast double %118 to i64
  %120 = and i64 %119, 9218868437227405312
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %110, label %103

122:                                              ; preds = %110, %122
  %123 = phi i64 [ %114, %110 ], [ %130, %122 ]
  %124 = phi double [ %112, %110 ], [ %133, %122 ]
  %125 = tail call double @fmod(double %124, double %96) #12
  %126 = fptosi double %125 to i32
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [37 x i8], [37 x i8]* @_ZZN2v88internal20DoubleToRadixCStringEdiE5chars, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = add i64 %123, -1
  %131 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %130
  store i8 %129, i8* %131, align 1
  %132 = fsub double %124, %125
  %133 = fdiv double %132, %96
  %134 = fcmp ogt double %133, 0.000000e+00
  br i1 %134, label %122, label %135

135:                                              ; preds = %122
  %136 = trunc i64 %130 to i32
  br i1 %5, label %137, label %142

137:                                              ; preds = %135
  %138 = trunc i64 %123 to i32
  %139 = add nsw i32 %138, -2
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %140
  store i8 45, i8* %141, align 1
  br label %142

142:                                              ; preds = %137, %135
  %143 = phi i32 [ %139, %137 ], [ %136, %135 ]
  %144 = add nsw i32 %98, 1
  %145 = sext i32 %98 to i64
  %146 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %145
  store i8 0, i8* %146, align 1
  %147 = sub i32 %144, %143
  %148 = sext i32 %147 to i64
  %149 = tail call noalias i8* @_ZnamRKSt9nothrow_t(i64 %148, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #16
  %150 = icmp eq i8* %149, null
  br i1 %150, label %151, label %160

151:                                              ; preds = %142
  %152 = tail call %"class.v8::Platform"* @_ZN2v88internal2V818GetCurrentPlatformEv() #12
  %153 = bitcast %"class.v8::Platform"* %152 to void (%"class.v8::Platform"*)***
  %154 = load void (%"class.v8::Platform"*)**, void (%"class.v8::Platform"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.v8::Platform"*)*, void (%"class.v8::Platform"*)** %154, i64 3
  %156 = load void (%"class.v8::Platform"*)*, void (%"class.v8::Platform"*)** %155, align 8
  tail call void %156(%"class.v8::Platform"* %152) #12
  %157 = tail call noalias i8* @_ZnamRKSt9nothrow_t(i64 %148, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #16
  %158 = icmp eq i8* %157, null
  br i1 %158, label %159, label %160

159:                                              ; preds = %151
  tail call void @_ZN2v88internal23FatalProcessOutOfMemoryEPNS0_7IsolateEPKc(%"class.v8::internal::Isolate"* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0)) #14
  unreachable

160:                                              ; preds = %142, %151
  %161 = phi i8* [ %157, %151 ], [ %149, %142 ]
  %162 = sext i32 %143 to i64
  %163 = getelementptr inbounds [2200 x i8], [2200 x i8]* %3, i64 0, i64 %162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %161, i8* align 1 %163, i64 %148, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 2200, i8* nonnull %4) #12
  ret i8* %161
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2v88internal14StringToDoubleEPNS0_7IsolateENS0_6HandleINS0_6StringEEEid(%"class.v8::internal::Isolate"*, i64*, i32, double) local_unnamed_addr #0 {
  %5 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %6 = alloca %"class.v8::internal::String::FlatContent", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %8 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext 0)
  %9 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #12
  %10 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #12
  %11 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  %12 = load i64, i64* %8, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %6, %"class.v8::internal::String"* nonnull %14, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  %15 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %26

18:                                               ; preds = %4
  %19 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  %25 = call double @_ZN2v88internal22InternalStringToDoubleIPKhS3_EEdT_T0_id(i8* %20, i8* %24, i32 %2, double %3) #12
  br label %34

26:                                               ; preds = %4
  %27 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i16**
  %28 = load i16*, i16** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %28, i64 %31
  %33 = call double @_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id(i16* %28, i16* %32, i32 %2, double %3) #12
  br label %34

34:                                               ; preds = %26, %18
  %35 = phi double [ %25, %18 ], [ %33, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #12
  ret double %35
}

declare void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* sret, %"class.v8::internal::String"*, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZN2v88internal17TryStringToDoubleEPNS0_12LocalIsolateENS0_6HandleINS0_6StringEEEi(%"class.v8::internal::LocalIsolate"* readonly, i64*, i32) local_unnamed_addr #0 {
  %4 = alloca %"class.v8::internal::SharedStringAccessGuardIfNeeded", align 8
  %5 = load i64, i64* %1, align 8
  %6 = add i64 %5, 7
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, %2
  br i1 %9, label %46, label %10

10:                                               ; preds = %3
  %11 = sext i32 %2 to i64
  %12 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %11, i64 2) #12
  %13 = extractvalue { i64, i1 } %12, 1
  %14 = extractvalue { i64, i1 } %12, 0
  %15 = select i1 %13, i64 -1, i64 %14
  %16 = tail call i8* @_Znam(i64 %15) #16
  %17 = bitcast i8* %16 to i16*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %16, i8 0, i64 %15, i1 false) #12
  %18 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #12
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %union.anon.1154* %19 to i8*
  store i8 0, i8* %20, align 8
  %21 = icmp eq %"class.v8::internal::LocalIsolate"* %0, null
  br i1 %21, label %32, label %22

22:                                               ; preds = %10
  %23 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %0, i64 0, i32 1, i32 1
  %24 = load i8, i8* %23, align 8, !range !3
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %0, i64 0, i32 2
  %28 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %28, i64 0, i32 17
  %30 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.v8::base::SharedMutex"* %29, %"class.v8::base::SharedMutex"** %30, align 8
  tail call void @_ZN2v84base11SharedMutex10LockSharedEv(%"class.v8::base::SharedMutex"* %29) #12
  store i8 1, i8* %18, align 8
  %31 = load i64, i64* %1, align 8
  br label %32

32:                                               ; preds = %10, %22, %26
  %33 = phi i64 [ %5, %10 ], [ %5, %22 ], [ %31, %26 ]
  call void @_ZN2v88internal6String11WriteToFlatItEEvS1_PT_iiRKNS0_31SharedStringAccessGuardIfNeededE(i64 %33, i16* nonnull %17, i32 0, i32 %8, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* nonnull dereferenceable(16) %4) #12
  %34 = sext i32 %8 to i64
  %35 = getelementptr inbounds i16, i16* %17, i64 %34
  %36 = call double @_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id(i16* nonnull %17, i16* %35, i32 11, double 0.000000e+00) #12
  %37 = bitcast double %36 to i64
  %38 = and i64 %37, -256
  %39 = load i8, i8* %18, align 8, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.v8::internal::SharedStringAccessGuardIfNeeded", %"class.v8::internal::SharedStringAccessGuardIfNeeded"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %43 = load %"class.v8::base::SharedMutex"*, %"class.v8::base::SharedMutex"** %42, align 8
  call void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"* %43) #12
  br label %44

44:                                               ; preds = %32, %41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #12
  call void @_ZdaPv(i8* nonnull %16) #16
  %45 = and i64 %37, 255
  br label %46

46:                                               ; preds = %3, %44
  %47 = phi i8 [ 1, %44 ], [ 0, %3 ]
  %48 = phi i64 [ %45, %44 ], [ 0, %3 ]
  %49 = phi i64 [ %38, %44 ], [ 0, %3 ]
  %50 = insertvalue { i8, i64 } undef, i8 %47, 0
  %51 = or i64 %49, %48
  %52 = insertvalue { i8, i64 } %50, i64 %51, 1
  ret { i8, i64 } %52
}

declare void @_ZN2v88internal6String11WriteToFlatItEEvS1_PT_iiRKNS0_31SharedStringAccessGuardIfNeededE(i64, i16*, i32, i32, %"class.v8::internal::SharedStringAccessGuardIfNeeded"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal14IsSpecialIndexENS0_6StringE(i64) local_unnamed_addr #0 {
  %2 = alloca [24 x i16], align 16
  %3 = alloca [25 x i8], align 16
  %4 = add i64 %0, 7
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  %8 = icmp sgt i32 %6, 24
  %9 = or i1 %7, %8
  br i1 %9, label %164, label %10

10:                                               ; preds = %1
  %11 = bitcast [24 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #12
  %12 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 0
  call void @_ZN2v88internal6String11WriteToFlatItEEvS1_PT_ii(i64 %0, i16* nonnull %12, i32 0, i32 %6) #12
  %13 = load i16, i16* %12, align 16
  %14 = zext i16 %13 to i32
  %15 = add nsw i32 %14, -48
  %16 = icmp ult i32 %15, 10
  br i1 %16, label %47, label %17

17:                                               ; preds = %10
  %18 = icmp eq i16 %13, 45
  br i1 %18, label %19, label %31

19:                                               ; preds = %17
  %20 = icmp eq i32 %6, 1
  br i1 %20, label %162, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = add nsw i32 %24, -48
  %26 = icmp ult i32 %25, 10
  br i1 %26, label %47, label %27

27:                                               ; preds = %21
  %28 = icmp eq i16 %23, 73
  %29 = icmp eq i32 %6, 9
  %30 = and i1 %29, %28
  br i1 %30, label %47, label %162

31:                                               ; preds = %17
  %32 = icmp eq i16 %13, 73
  %33 = icmp eq i32 %6, 8
  %34 = and i1 %33, %32
  br i1 %34, label %47, label %35

35:                                               ; preds = %31
  %36 = icmp eq i16 %13, 78
  %37 = icmp eq i32 %6, 3
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %162

39:                                               ; preds = %35
  %40 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 1
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %41, 97
  %43 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 2
  %44 = load i16, i16* %43, align 4
  %45 = icmp eq i16 %44, 78
  %46 = and i1 %42, %45
  br label %162

47:                                               ; preds = %21, %27, %31, %10
  %48 = phi i16 [ %13, %10 ], [ 73, %31 ], [ 73, %27 ], [ %23, %21 ]
  %49 = phi i32 [ 0, %10 ], [ 0, %31 ], [ 1, %27 ], [ 1, %21 ]
  %50 = sub nsw i32 %6, %49
  %51 = icmp slt i32 %50, 16
  br i1 %51, label %52, label %138

52:                                               ; preds = %47
  %53 = icmp sgt i32 %6, %49
  br i1 %53, label %54, label %133

54:                                               ; preds = %52
  %55 = zext i32 %49 to i64
  %56 = zext i32 %6 to i64
  %57 = sub nsw i64 %56, %55
  %58 = icmp ult i64 %57, 8
  br i1 %58, label %117, label %59

59:                                               ; preds = %54
  %60 = and i64 %57, -8
  %61 = or i64 %60, %55
  %62 = add nsw i64 %60, -8
  %63 = lshr exact i64 %62, 3
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %62, 0
  br i1 %66, label %93, label %67

67:                                               ; preds = %59
  %68 = sub nuw nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %90, %69 ]
  %71 = phi <8 x i1> [ <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, %67 ], [ %89, %69 ]
  %72 = phi i64 [ %68, %67 ], [ %91, %69 ]
  %73 = or i64 %70, %55
  %74 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %73
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = add nsw <8 x i32> %77, <i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48>
  %79 = icmp ult <8 x i32> %78, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %80 = and <8 x i1> %71, %79
  %81 = or i64 %70, %55
  %82 = or i64 %81, 8
  %83 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %82
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2
  %86 = zext <8 x i16> %85 to <8 x i32>
  %87 = add nsw <8 x i32> %86, <i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48>
  %88 = icmp ult <8 x i32> %87, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %89 = and <8 x i1> %80, %88
  %90 = add i64 %70, 16
  %91 = add i64 %72, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %69, !llvm.loop !4

93:                                               ; preds = %69, %59
  %94 = phi <8 x i1> [ undef, %59 ], [ %89, %69 ]
  %95 = phi i64 [ 0, %59 ], [ %90, %69 ]
  %96 = phi <8 x i1> [ <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, %59 ], [ %89, %69 ]
  %97 = icmp eq i64 %65, 0
  br i1 %97, label %107, label %98

98:                                               ; preds = %93
  %99 = or i64 %95, %55
  %100 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %99
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2
  %103 = zext <8 x i16> %102 to <8 x i32>
  %104 = add nsw <8 x i32> %103, <i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48>
  %105 = icmp ult <8 x i32> %104, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %106 = and <8 x i1> %96, %105
  br label %107

107:                                              ; preds = %93, %98
  %108 = phi <8 x i1> [ %94, %93 ], [ %106, %98 ]
  %109 = shufflevector <8 x i1> %108, <8 x i1> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = and <8 x i1> %108, %109
  %111 = shufflevector <8 x i1> %110, <8 x i1> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = and <8 x i1> %110, %111
  %113 = shufflevector <8 x i1> %112, <8 x i1> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = and <8 x i1> %112, %113
  %115 = extractelement <8 x i1> %114, i32 0
  %116 = icmp eq i64 %57, %60
  br i1 %116, label %131, label %117

117:                                              ; preds = %107, %54
  %118 = phi i64 [ %55, %54 ], [ %61, %107 ]
  %119 = phi i1 [ true, %54 ], [ %115, %107 ]
  br label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %129, %120 ], [ %118, %117 ]
  %122 = phi i1 [ %128, %120 ], [ %119, %117 ]
  %123 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %121
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = add nsw i32 %125, -48
  %127 = icmp ult i32 %126, 10
  %128 = and i1 %122, %127
  %129 = add nuw nsw i64 %121, 1
  %130 = icmp eq i64 %129, %56
  br i1 %130, label %131, label %120, !llvm.loop !6

131:                                              ; preds = %120, %107
  %132 = phi i1 [ %115, %107 ], [ %128, %120 ]
  br i1 %132, label %133, label %138

133:                                              ; preds = %52, %131
  %134 = icmp eq i16 %48, 48
  br i1 %134, label %135, label %162

135:                                              ; preds = %133
  %136 = add nsw i32 %6, -1
  %137 = icmp eq i32 %49, %136
  br label %162

138:                                              ; preds = %131, %47
  %139 = sext i32 %6 to i64
  %140 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %139
  %141 = call double @_ZN2v88internal22InternalStringToDoubleIPKtS3_EEdT_T0_id(i16* nonnull %12, i16* %140, i32 0, double 0.000000e+00) #12
  %142 = fcmp uno double %141, 0.000000e+00
  br i1 %142, label %162, label %143

143:                                              ; preds = %138
  %144 = getelementptr inbounds [25 x i8], [25 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 25, i8* nonnull %144) #12
  %145 = call i8* @_ZN2v88internal15DoubleToCStringEdNS0_6VectorIcEE(double %141, i8* nonnull %144, i64 25)
  %146 = icmp sgt i32 %6, 0
  br i1 %146, label %147, label %160

147:                                              ; preds = %143
  %148 = zext i32 %6 to i64
  br label %151

149:                                              ; preds = %151
  %150 = icmp eq i64 %159, %148
  br i1 %150, label %160, label %151

151:                                              ; preds = %149, %147
  %152 = phi i64 [ 0, %147 ], [ %159, %149 ]
  %153 = getelementptr inbounds i8, i8* %145, i64 %152
  %154 = load i8, i8* %153, align 1
  %155 = getelementptr inbounds [24 x i16], [24 x i16]* %2, i64 0, i64 %152
  %156 = load i16, i16* %155, align 2
  %157 = sext i8 %154 to i16
  %158 = icmp eq i16 %156, %157
  %159 = add nuw nsw i64 %152, 1
  br i1 %158, label %149, label %160

160:                                              ; preds = %151, %149, %143
  %161 = phi i1 [ true, %143 ], [ true, %149 ], [ false, %151 ]
  call void @llvm.lifetime.end.p0i8(i64 25, i8* nonnull %144) #12
  br label %162

162:                                              ; preds = %133, %135, %160, %138, %35, %27, %19, %39
  %163 = phi i1 [ %46, %39 ], [ false, %19 ], [ false, %27 ], [ false, %35 ], [ %161, %160 ], [ false, %138 ], [ true, %133 ], [ %137, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #12
  br label %164

164:                                              ; preds = %1, %162
  %165 = phi i1 [ %163, %162 ], [ false, %1 ]
  ret i1 %165
}

declare void @_ZN2v88internal6String11WriteToFlatItEEvS1_PT_ii(i64, i16*, i32, i32) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20NumberParseIntHelperD0Ev(%"class.v8::internal::NumberParseIntHelper"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.v8::internal::NumberParseIntHelper"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20NumberParseIntHelper14AllocateResultEv(%"class.v8::internal::NumberParseIntHelper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20NumberParseIntHelper17ResultMultiplyAddEjj(%"class.v8::internal::NumberParseIntHelper"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = uitofp i32 %1 to double
  %7 = fmul double %5, %6
  %8 = uitofp i32 %2 to double
  %9 = fadd double %7, %8
  store double %9, double* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE16CheckTerminationEv(%"class.v8::internal::StringToIntHelper"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20NumberParseIntHelper18HandleSpecialCasesEv(%"class.v8::internal::NumberParseIntHelper"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %3 = alloca %"class.v8::internal::String::FlatContent", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %6 = alloca %"class.v8::internal::String::FlatContent", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %8 = alloca [311 x i8], align 16
  %9 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  %12 = tail call i32 @llvm.ctpop.i32(i32 %10) #12, !range !8
  %13 = icmp ult i32 %12, 2
  %14 = and i1 %11, %13
  %15 = icmp eq i32 %10, 10
  %16 = or i1 %15, %14
  br i1 %16, label %17, label %133

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %52

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = load i64, i64* %23, align 8
  br label %25

25:                                               ; preds = %38, %21
  %26 = phi i64 [ %24, %21 ], [ %43, %38 ]
  %27 = and i64 %26, -4294967296
  %28 = add i64 %26, -1
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %27, %31
  %33 = add i64 %32, 7
  %34 = inttoptr i64 %33 to i16*
  %35 = load atomic i16, i16* %34 monotonic, align 2
  %36 = and i16 %35, 9
  %37 = zext i16 %36 to i32
  switch i32 %37, label %38 [
    i32 8, label %44
    i32 0, label %87
  ]

38:                                               ; preds = %25
  %39 = add i64 %26, 11
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = or i64 %27, %42
  br label %25

44:                                               ; preds = %25
  %45 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %45) #12
  %46 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #12
  %47 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  %48 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %24, i64* %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %3, %"class.v8::internal::String"* nonnull %49, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %2) #12
  %50 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %45) #12
  br label %52

52:                                               ; preds = %17, %44
  %53 = phi i8* [ %51, %44 ], [ %19, %17 ]
  br i1 %14, label %54, label %56

54:                                               ; preds = %52
  %55 = call double @_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKhEEdT_(%"class.v8::internal::NumberParseIntHelper"* %0, i8* %53)
  br label %129

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 5
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %53, i64 %59
  %61 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 6
  %62 = load i32, i32* %61, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %53, i64 %63
  %65 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 311, i8* nonnull %65) #12
  br label %66

66:                                               ; preds = %78, %56
  %67 = phi i32 [ 0, %56 ], [ %79, %78 ]
  %68 = phi i8* [ %60, %56 ], [ %80, %78 ]
  %69 = load i8, i8* %68, align 1
  %70 = add i8 %69, -48
  %71 = icmp ult i8 %70, 10
  br i1 %71, label %72, label %82

72:                                               ; preds = %66
  %73 = icmp slt i32 %67, 310
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = add nsw i32 %67, 1
  %76 = sext i32 %67 to i64
  %77 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 %76
  store i8 %69, i8* %77, align 1
  br label %78

78:                                               ; preds = %74, %72
  %79 = phi i32 [ %75, %74 ], [ %67, %72 ]
  %80 = getelementptr inbounds i8, i8* %68, i64 1
  %81 = icmp eq i8* %80, %64
  br i1 %81, label %82, label %66

82:                                               ; preds = %66, %78
  %83 = phi i32 [ %79, %78 ], [ %67, %66 ]
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 %84
  store i8 0, i8* %85, align 1
  %86 = call double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8* nonnull %65, i64 %84, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 311, i8* nonnull %65) #12
  br label %129

87:                                               ; preds = %25
  %88 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %88) #12
  %89 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %89) #12
  %90 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #12
  %91 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %24, i64* %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %6, %"class.v8::internal::String"* nonnull %92, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %5) #12
  %93 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i16**
  %94 = load i16*, i16** %93, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %89) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %88) #12
  br i1 %14, label %95, label %97

95:                                               ; preds = %87
  %96 = call double @_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKtEEdT_(%"class.v8::internal::NumberParseIntHelper"* %0, i16* %94)
  br label %129

97:                                               ; preds = %87
  %98 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 5
  %99 = load i32, i32* %98, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i16, i16* %94, i64 %100
  %102 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 6
  %103 = load i32, i32* %102, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i16, i16* %94, i64 %104
  %106 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 311, i8* nonnull %106) #12
  br label %107

107:                                              ; preds = %120, %97
  %108 = phi i32 [ 0, %97 ], [ %121, %120 ]
  %109 = phi i16* [ %101, %97 ], [ %122, %120 ]
  %110 = load i16, i16* %109, align 2
  %111 = add i16 %110, -48
  %112 = icmp ult i16 %111, 10
  br i1 %112, label %113, label %124

113:                                              ; preds = %107
  %114 = icmp slt i32 %108, 310
  br i1 %114, label %115, label %120

115:                                              ; preds = %113
  %116 = trunc i16 %110 to i8
  %117 = add nsw i32 %108, 1
  %118 = sext i32 %108 to i64
  %119 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 %118
  store i8 %116, i8* %119, align 1
  br label %120

120:                                              ; preds = %115, %113
  %121 = phi i32 [ %117, %115 ], [ %108, %113 ]
  %122 = getelementptr inbounds i16, i16* %109, i64 1
  %123 = icmp eq i16* %122, %105
  br i1 %123, label %124, label %107

124:                                              ; preds = %107, %120
  %125 = phi i32 [ %121, %120 ], [ %108, %107 ]
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [311 x i8], [311 x i8]* %8, i64 0, i64 %126
  store i8 0, i8* %127, align 1
  %128 = call double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8* nonnull %106, i64 %126, i32 0) #12
  call void @llvm.lifetime.end.p0i8(i64 311, i8* nonnull %106) #12
  br label %129

129:                                              ; preds = %95, %124, %54, %82
  %130 = phi double [ %55, %54 ], [ %86, %82 ], [ %96, %95 ], [ %128, %124 ]
  %131 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 1
  store double %130, double* %131, align 8
  %132 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 11
  store i32 5, i32* %132, align 4
  br label %133

133:                                              ; preds = %1, %129
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18HandleSpecialCasesEv(%"class.v8::internal::StringToIntHelper"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKhEEdT_(%"class.v8::internal::NumberParseIntHelper"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %23 [
    i32 2, label %13
    i32 4, label %15
    i32 8, label %17
    i32 16, label %19
    i32 32, label %21
  ]

13:                                               ; preds = %2
  %14 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKhS3_EEdT0_T1_bb(i8* %6, i8* %10, i1 zeroext false, i1 zeroext true)
  br label %24

15:                                               ; preds = %2
  %16 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi2EPKhS3_EEdT0_T1_bb(i8* %6, i8* %10, i1 zeroext false, i1 zeroext true)
  br label %24

17:                                               ; preds = %2
  %18 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKhS3_EEdT0_T1_bb(i8* %6, i8* %10, i1 zeroext false, i1 zeroext true)
  br label %24

19:                                               ; preds = %2
  %20 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKhS3_EEdT0_T1_bb(i8* %6, i8* %10, i1 zeroext false, i1 zeroext true)
  br label %24

21:                                               ; preds = %2
  %22 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi5EPKhS3_EEdT0_T1_bb(i8* %6, i8* %10, i1 zeroext false, i1 zeroext true)
  br label %24

23:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

24:                                               ; preds = %21, %19, %17, %15, %13
  %25 = phi double [ %22, %21 ], [ %20, %19 ], [ %18, %17 ], [ %16, %15 ], [ %14, %13 ]
  ret double %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal20NumberParseIntHelper20HandlePowerOfTwoCaseIPKtEEdT_(%"class.v8::internal::NumberParseIntHelper"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i16, i16* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16, i16* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::NumberParseIntHelper", %"class.v8::internal::NumberParseIntHelper"* %0, i64 0, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %23 [
    i32 2, label %13
    i32 4, label %15
    i32 8, label %17
    i32 16, label %19
    i32 32, label %21
  ]

13:                                               ; preds = %2
  %14 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKtS3_EEdT0_T1_bb(i16* %6, i16* %10, i1 zeroext false, i1 zeroext true)
  br label %24

15:                                               ; preds = %2
  %16 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi2EPKtS3_EEdT0_T1_bb(i16* %6, i16* %10, i1 zeroext false, i1 zeroext true)
  br label %24

17:                                               ; preds = %2
  %18 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKtS3_EEdT0_T1_bb(i16* %6, i16* %10, i1 zeroext false, i1 zeroext true)
  br label %24

19:                                               ; preds = %2
  %20 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKtS3_EEdT0_T1_bb(i16* %6, i16* %10, i1 zeroext false, i1 zeroext true)
  br label %24

21:                                               ; preds = %2
  %22 = tail call double @_ZN2v88internal25InternalStringToIntDoubleILi5EPKtS3_EEdT0_T1_bb(i16* %6, i16* %10, i1 zeroext false, i1 zeroext true)
  br label %24

23:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)) #14
  unreachable

24:                                               ; preds = %21, %19, %17, %15, %13
  %25 = phi double [ %22, %21 ], [ %20, %19 ], [ %18, %17 ], [ %16, %15 ], [ %14, %13 ]
  ret double %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKhS3_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i8* [ %0, %4 ], [ %13, %12 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i8 %7, -2
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %17, label %31

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %6, i64 1
  %14 = icmp eq i8* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %146

17:                                               ; preds = %9, %119
  %18 = phi i64 [ %24, %119 ], [ 0, %9 ]
  %19 = phi i8* [ %117, %119 ], [ %6, %9 ]
  %20 = phi i8 [ %120, %119 ], [ %7, %9 ]
  %21 = sext i8 %20 to i64
  %22 = shl nsw i64 %18, 1
  %23 = add i64 %22, -48
  %24 = add i64 %23, %21
  %25 = ashr i64 %24, 53
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %116, label %28

28:                                               ; preds = %17
  %29 = trunc i64 %25 to i32
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %54, label %60

31:                                               ; preds = %119, %9
  %32 = phi i8 [ %7, %9 ], [ %120, %119 ]
  %33 = phi i8* [ %6, %9 ], [ %117, %119 ]
  %34 = phi i64 [ 0, %9 ], [ %24, %119 ]
  %35 = icmp eq i8* %33, %1
  %36 = or i1 %35, %3
  br i1 %36, label %132, label %37

37:                                               ; preds = %31
  %38 = zext i8 %32 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = and i8 %40, 8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %146, label %43

43:                                               ; preds = %37, %47
  %44 = phi i8* [ %45, %47 ], [ %33, %37 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = icmp eq i8* %45, %1
  br i1 %46, label %132, label %47

47:                                               ; preds = %43
  %48 = load i8, i8* %45, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, 8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %146, label %43

54:                                               ; preds = %28, %54
  %55 = phi i32 [ %57, %54 ], [ 1, %28 ]
  %56 = phi i32 [ %58, %54 ], [ %29, %28 ]
  %57 = add nuw nsw i32 %55, 1
  %58 = lshr i32 %56, 1
  %59 = icmp ugt i32 %56, 3
  br i1 %59, label %54, label %60

60:                                               ; preds = %54, %28
  %61 = phi i32 [ 1, %28 ], [ %57, %54 ]
  %62 = shl nsw i32 -1, %61
  %63 = xor i32 %62, -1
  %64 = trunc i64 %24 to i32
  %65 = and i32 %63, %64
  %66 = zext i32 %61 to i64
  %67 = ashr i64 %24, %66
  %68 = getelementptr inbounds i8, i8* %19, i64 1
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %100, label %70

70:                                               ; preds = %60, %80
  %71 = phi i8* [ %86, %80 ], [ %68, %60 ]
  %72 = phi i8 [ %84, %80 ], [ 1, %60 ]
  %73 = phi i32 [ %85, %80 ], [ %61, %60 ]
  %74 = load i8, i8* %71, align 1
  %75 = zext i8 %74 to i32
  %76 = add nsw i32 %75, -48
  %77 = icmp ult i32 %76, 10
  %78 = icmp ult i8 %74, 50
  %79 = and i1 %78, %77
  br i1 %79, label %80, label %88

80:                                               ; preds = %70
  %81 = icmp ne i8 %72, 0
  %82 = icmp eq i8 %74, 48
  %83 = and i1 %81, %82
  %84 = zext i1 %83 to i8
  %85 = add nuw nsw i32 %73, 1
  %86 = getelementptr inbounds i8, i8* %71, i64 1
  %87 = icmp eq i8* %86, %1
  br i1 %87, label %100, label %70

88:                                               ; preds = %70
  br i1 %3, label %100, label %89

89:                                               ; preds = %88, %97
  %90 = phi i8* [ %98, %97 ], [ %71, %88 ]
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = and i8 %94, 8
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %146, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds i8, i8* %90, i64 1
  %99 = icmp eq i8* %98, %1
  br i1 %99, label %100, label %89

100:                                              ; preds = %80, %97, %60, %88
  %101 = phi i8 [ %72, %88 ], [ 1, %60 ], [ %72, %97 ], [ %84, %80 ]
  %102 = phi i32 [ %73, %88 ], [ %61, %60 ], [ %73, %97 ], [ %85, %80 ]
  %103 = add nsw i32 %61, -1
  %104 = shl i32 1, %103
  %105 = icmp sgt i32 %65, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  %107 = add nsw i64 %67, 1
  br label %123

108:                                              ; preds = %100
  %109 = icmp eq i32 %65, %104
  br i1 %109, label %110, label %123

110:                                              ; preds = %108
  %111 = and i64 %67, 1
  %112 = xor i8 %101, 1
  %113 = zext i8 %112 to i64
  %114 = or i64 %111, %113
  %115 = add nsw i64 %114, %67
  br label %123

116:                                              ; preds = %17
  %117 = getelementptr inbounds i8, i8* %19, i64 1
  %118 = icmp eq i8* %117, %1
  br i1 %118, label %132, label %119

119:                                              ; preds = %116
  %120 = load i8, i8* %117, align 1
  %121 = and i8 %120, -2
  %122 = icmp eq i8 %121, 48
  br i1 %122, label %17, label %31

123:                                              ; preds = %106, %108, %110
  %124 = phi i64 [ %107, %106 ], [ %67, %108 ], [ %115, %110 ]
  %125 = and i64 %124, 9007199254740992
  %126 = lshr exact i64 %125, 53
  %127 = trunc i64 %126 to i32
  %128 = add nuw nsw i32 %102, %127
  %129 = lshr exact i64 %125, 53
  %130 = ashr i64 %124, %129
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %132, label %141

132:                                              ; preds = %116, %43, %31, %123
  %133 = phi i64 [ %130, %123 ], [ %34, %31 ], [ %34, %43 ], [ %24, %116 ]
  br i1 %2, label %134, label %138

134:                                              ; preds = %132
  %135 = icmp eq i64 %133, 0
  br i1 %135, label %146, label %136

136:                                              ; preds = %134
  %137 = sub nsw i64 0, %133
  br label %138

138:                                              ; preds = %136, %132
  %139 = phi i64 [ %137, %136 ], [ %133, %132 ]
  %140 = sitofp i64 %139 to double
  br label %146

141:                                              ; preds = %123
  %142 = sub nsw i64 0, %130
  %143 = select i1 %2, i64 %142, i64 %130
  %144 = sitofp i64 %143 to double
  %145 = tail call double @ldexp(double %144, i32 %128) #12
  br label %146

146:                                              ; preds = %89, %47, %37, %138, %141, %134, %15
  %147 = phi double [ %16, %15 ], [ %140, %138 ], [ %145, %141 ], [ -0.000000e+00, %134 ], [ 0x7FF8000000000000, %37 ], [ 0x7FF8000000000000, %47 ], [ 0x7FF8000000000000, %89 ]
  ret double %147
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi2EPKhS3_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i8* [ %0, %4 ], [ %13, %12 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i8 %7, -4
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %17, label %31

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %6, i64 1
  %14 = icmp eq i8* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %146

17:                                               ; preds = %9, %119
  %18 = phi i64 [ %24, %119 ], [ 0, %9 ]
  %19 = phi i8* [ %117, %119 ], [ %6, %9 ]
  %20 = phi i8 [ %120, %119 ], [ %7, %9 ]
  %21 = sext i8 %20 to i64
  %22 = shl nsw i64 %18, 2
  %23 = add i64 %22, -48
  %24 = add i64 %23, %21
  %25 = ashr i64 %24, 53
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %116, label %28

28:                                               ; preds = %17
  %29 = trunc i64 %25 to i32
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %54, label %60

31:                                               ; preds = %119, %9
  %32 = phi i8 [ %7, %9 ], [ %120, %119 ]
  %33 = phi i8* [ %6, %9 ], [ %117, %119 ]
  %34 = phi i64 [ 0, %9 ], [ %24, %119 ]
  %35 = icmp eq i8* %33, %1
  %36 = or i1 %35, %3
  br i1 %36, label %132, label %37

37:                                               ; preds = %31
  %38 = zext i8 %32 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = and i8 %40, 8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %146, label %43

43:                                               ; preds = %37, %47
  %44 = phi i8* [ %45, %47 ], [ %33, %37 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = icmp eq i8* %45, %1
  br i1 %46, label %132, label %47

47:                                               ; preds = %43
  %48 = load i8, i8* %45, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, 8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %146, label %43

54:                                               ; preds = %28, %54
  %55 = phi i32 [ %57, %54 ], [ 1, %28 ]
  %56 = phi i32 [ %58, %54 ], [ %29, %28 ]
  %57 = add nuw nsw i32 %55, 1
  %58 = lshr i32 %56, 1
  %59 = icmp ugt i32 %56, 3
  br i1 %59, label %54, label %60

60:                                               ; preds = %54, %28
  %61 = phi i32 [ 1, %28 ], [ %57, %54 ]
  %62 = shl nsw i32 -1, %61
  %63 = xor i32 %62, -1
  %64 = trunc i64 %24 to i32
  %65 = and i32 %63, %64
  %66 = zext i32 %61 to i64
  %67 = ashr i64 %24, %66
  %68 = getelementptr inbounds i8, i8* %19, i64 1
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %100, label %70

70:                                               ; preds = %60, %80
  %71 = phi i8* [ %86, %80 ], [ %68, %60 ]
  %72 = phi i8 [ %84, %80 ], [ 1, %60 ]
  %73 = phi i32 [ %85, %80 ], [ %61, %60 ]
  %74 = load i8, i8* %71, align 1
  %75 = zext i8 %74 to i32
  %76 = add nsw i32 %75, -48
  %77 = icmp ult i32 %76, 10
  %78 = icmp ult i8 %74, 52
  %79 = and i1 %78, %77
  br i1 %79, label %80, label %88

80:                                               ; preds = %70
  %81 = icmp ne i8 %72, 0
  %82 = icmp eq i8 %74, 48
  %83 = and i1 %81, %82
  %84 = zext i1 %83 to i8
  %85 = add nuw nsw i32 %73, 2
  %86 = getelementptr inbounds i8, i8* %71, i64 1
  %87 = icmp eq i8* %86, %1
  br i1 %87, label %100, label %70

88:                                               ; preds = %70
  br i1 %3, label %100, label %89

89:                                               ; preds = %88, %97
  %90 = phi i8* [ %98, %97 ], [ %71, %88 ]
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = and i8 %94, 8
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %146, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds i8, i8* %90, i64 1
  %99 = icmp eq i8* %98, %1
  br i1 %99, label %100, label %89

100:                                              ; preds = %80, %97, %60, %88
  %101 = phi i8 [ %72, %88 ], [ 1, %60 ], [ %72, %97 ], [ %84, %80 ]
  %102 = phi i32 [ %73, %88 ], [ %61, %60 ], [ %73, %97 ], [ %85, %80 ]
  %103 = add nsw i32 %61, -1
  %104 = shl i32 1, %103
  %105 = icmp sgt i32 %65, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  %107 = add nsw i64 %67, 1
  br label %123

108:                                              ; preds = %100
  %109 = icmp eq i32 %65, %104
  br i1 %109, label %110, label %123

110:                                              ; preds = %108
  %111 = and i64 %67, 1
  %112 = xor i8 %101, 1
  %113 = zext i8 %112 to i64
  %114 = or i64 %111, %113
  %115 = add nsw i64 %114, %67
  br label %123

116:                                              ; preds = %17
  %117 = getelementptr inbounds i8, i8* %19, i64 1
  %118 = icmp eq i8* %117, %1
  br i1 %118, label %132, label %119

119:                                              ; preds = %116
  %120 = load i8, i8* %117, align 1
  %121 = and i8 %120, -4
  %122 = icmp eq i8 %121, 48
  br i1 %122, label %17, label %31

123:                                              ; preds = %106, %108, %110
  %124 = phi i64 [ %107, %106 ], [ %67, %108 ], [ %115, %110 ]
  %125 = and i64 %124, 9007199254740992
  %126 = lshr exact i64 %125, 53
  %127 = trunc i64 %126 to i32
  %128 = add nuw nsw i32 %102, %127
  %129 = lshr exact i64 %125, 53
  %130 = ashr i64 %124, %129
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %132, label %141

132:                                              ; preds = %116, %43, %31, %123
  %133 = phi i64 [ %130, %123 ], [ %34, %31 ], [ %34, %43 ], [ %24, %116 ]
  br i1 %2, label %134, label %138

134:                                              ; preds = %132
  %135 = icmp eq i64 %133, 0
  br i1 %135, label %146, label %136

136:                                              ; preds = %134
  %137 = sub nsw i64 0, %133
  br label %138

138:                                              ; preds = %136, %132
  %139 = phi i64 [ %137, %136 ], [ %133, %132 ]
  %140 = sitofp i64 %139 to double
  br label %146

141:                                              ; preds = %123
  %142 = sub nsw i64 0, %130
  %143 = select i1 %2, i64 %142, i64 %130
  %144 = sitofp i64 %143 to double
  %145 = tail call double @ldexp(double %144, i32 %128) #12
  br label %146

146:                                              ; preds = %89, %47, %37, %138, %141, %134, %15
  %147 = phi double [ %16, %15 ], [ %140, %138 ], [ %145, %141 ], [ -0.000000e+00, %134 ], [ 0x7FF8000000000000, %37 ], [ 0x7FF8000000000000, %47 ], [ 0x7FF8000000000000, %89 ]
  ret double %147
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKhS3_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i8* [ %0, %4 ], [ %13, %12 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i8 %7, -8
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %17, label %31

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %6, i64 1
  %14 = icmp eq i8* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %146

17:                                               ; preds = %9, %119
  %18 = phi i64 [ %24, %119 ], [ 0, %9 ]
  %19 = phi i8* [ %117, %119 ], [ %6, %9 ]
  %20 = phi i8 [ %120, %119 ], [ %7, %9 ]
  %21 = sext i8 %20 to i64
  %22 = shl nsw i64 %18, 3
  %23 = add i64 %22, -48
  %24 = add i64 %23, %21
  %25 = ashr i64 %24, 53
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %116, label %28

28:                                               ; preds = %17
  %29 = trunc i64 %25 to i32
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %54, label %60

31:                                               ; preds = %119, %9
  %32 = phi i8 [ %7, %9 ], [ %120, %119 ]
  %33 = phi i8* [ %6, %9 ], [ %117, %119 ]
  %34 = phi i64 [ 0, %9 ], [ %24, %119 ]
  %35 = icmp eq i8* %33, %1
  %36 = or i1 %35, %3
  br i1 %36, label %132, label %37

37:                                               ; preds = %31
  %38 = zext i8 %32 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = and i8 %40, 8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %146, label %43

43:                                               ; preds = %37, %47
  %44 = phi i8* [ %45, %47 ], [ %33, %37 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = icmp eq i8* %45, %1
  br i1 %46, label %132, label %47

47:                                               ; preds = %43
  %48 = load i8, i8* %45, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, 8
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %146, label %43

54:                                               ; preds = %28, %54
  %55 = phi i32 [ %57, %54 ], [ 1, %28 ]
  %56 = phi i32 [ %58, %54 ], [ %29, %28 ]
  %57 = add nuw nsw i32 %55, 1
  %58 = lshr i32 %56, 1
  %59 = icmp ugt i32 %56, 3
  br i1 %59, label %54, label %60

60:                                               ; preds = %54, %28
  %61 = phi i32 [ 1, %28 ], [ %57, %54 ]
  %62 = shl nsw i32 -1, %61
  %63 = xor i32 %62, -1
  %64 = trunc i64 %24 to i32
  %65 = and i32 %63, %64
  %66 = zext i32 %61 to i64
  %67 = ashr i64 %24, %66
  %68 = getelementptr inbounds i8, i8* %19, i64 1
  %69 = icmp eq i8* %68, %1
  br i1 %69, label %100, label %70

70:                                               ; preds = %60, %80
  %71 = phi i8* [ %86, %80 ], [ %68, %60 ]
  %72 = phi i8 [ %84, %80 ], [ 1, %60 ]
  %73 = phi i32 [ %85, %80 ], [ %61, %60 ]
  %74 = load i8, i8* %71, align 1
  %75 = zext i8 %74 to i32
  %76 = add nsw i32 %75, -48
  %77 = icmp ult i32 %76, 10
  %78 = icmp ult i8 %74, 56
  %79 = and i1 %78, %77
  br i1 %79, label %80, label %88

80:                                               ; preds = %70
  %81 = icmp ne i8 %72, 0
  %82 = icmp eq i8 %74, 48
  %83 = and i1 %81, %82
  %84 = zext i1 %83 to i8
  %85 = add nuw nsw i32 %73, 3
  %86 = getelementptr inbounds i8, i8* %71, i64 1
  %87 = icmp eq i8* %86, %1
  br i1 %87, label %100, label %70

88:                                               ; preds = %70
  br i1 %3, label %100, label %89

89:                                               ; preds = %88, %97
  %90 = phi i8* [ %98, %97 ], [ %71, %88 ]
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = and i8 %94, 8
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %146, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds i8, i8* %90, i64 1
  %99 = icmp eq i8* %98, %1
  br i1 %99, label %100, label %89

100:                                              ; preds = %80, %97, %60, %88
  %101 = phi i8 [ %72, %88 ], [ 1, %60 ], [ %72, %97 ], [ %84, %80 ]
  %102 = phi i32 [ %73, %88 ], [ %61, %60 ], [ %73, %97 ], [ %85, %80 ]
  %103 = add nsw i32 %61, -1
  %104 = shl i32 1, %103
  %105 = icmp sgt i32 %65, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  %107 = add nsw i64 %67, 1
  br label %123

108:                                              ; preds = %100
  %109 = icmp eq i32 %65, %104
  br i1 %109, label %110, label %123

110:                                              ; preds = %108
  %111 = and i64 %67, 1
  %112 = xor i8 %101, 1
  %113 = zext i8 %112 to i64
  %114 = or i64 %111, %113
  %115 = add nsw i64 %114, %67
  br label %123

116:                                              ; preds = %17
  %117 = getelementptr inbounds i8, i8* %19, i64 1
  %118 = icmp eq i8* %117, %1
  br i1 %118, label %132, label %119

119:                                              ; preds = %116
  %120 = load i8, i8* %117, align 1
  %121 = and i8 %120, -8
  %122 = icmp eq i8 %121, 48
  br i1 %122, label %17, label %31

123:                                              ; preds = %106, %108, %110
  %124 = phi i64 [ %107, %106 ], [ %67, %108 ], [ %115, %110 ]
  %125 = and i64 %124, 9007199254740992
  %126 = lshr exact i64 %125, 53
  %127 = trunc i64 %126 to i32
  %128 = add nuw nsw i32 %102, %127
  %129 = lshr exact i64 %125, 53
  %130 = ashr i64 %124, %129
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %132, label %141

132:                                              ; preds = %116, %43, %31, %123
  %133 = phi i64 [ %130, %123 ], [ %34, %31 ], [ %34, %43 ], [ %24, %116 ]
  br i1 %2, label %134, label %138

134:                                              ; preds = %132
  %135 = icmp eq i64 %133, 0
  br i1 %135, label %146, label %136

136:                                              ; preds = %134
  %137 = sub nsw i64 0, %133
  br label %138

138:                                              ; preds = %136, %132
  %139 = phi i64 [ %137, %136 ], [ %133, %132 ]
  %140 = sitofp i64 %139 to double
  br label %146

141:                                              ; preds = %123
  %142 = sub nsw i64 0, %130
  %143 = select i1 %2, i64 %142, i64 %130
  %144 = sitofp i64 %143 to double
  %145 = tail call double @ldexp(double %144, i32 %128) #12
  br label %146

146:                                              ; preds = %89, %47, %37, %138, %141, %134, %15
  %147 = phi double [ %16, %15 ], [ %140, %138 ], [ %145, %141 ], [ -0.000000e+00, %134 ], [ 0x7FF8000000000000, %37 ], [ 0x7FF8000000000000, %47 ], [ 0x7FF8000000000000, %89 ]
  ret double %147
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKhS3_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %9, %4
  %6 = phi i8* [ %0, %4 ], [ %10, %9 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %6, i64 1
  %11 = icmp eq i8* %10, %1
  br i1 %11, label %12, label %5

12:                                               ; preds = %9
  %13 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %149

14:                                               ; preds = %5, %124
  %15 = phi i8 [ %125, %124 ], [ %7, %5 ]
  %16 = phi i8* [ %122, %124 ], [ %6, %5 ]
  %17 = phi i64 [ %51, %124 ], [ 0, %5 ]
  %18 = add i8 %15, -48
  %19 = icmp ult i8 %18, 10
  br i1 %19, label %46, label %20

20:                                               ; preds = %14
  %21 = add i8 %15, -97
  %22 = icmp ult i8 %21, 6
  br i1 %22, label %46, label %23

23:                                               ; preds = %20
  %24 = add i8 %15, -65
  %25 = icmp ult i8 %24, 6
  br i1 %25, label %46, label %26

26:                                               ; preds = %23
  %27 = icmp eq i8* %16, %1
  %28 = or i1 %27, %3
  br i1 %28, label %135, label %29

29:                                               ; preds = %26
  %30 = zext i8 %15 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = and i8 %32, 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %149, label %35

35:                                               ; preds = %29, %39
  %36 = phi i8* [ %37, %39 ], [ %16, %29 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %135, label %39

39:                                               ; preds = %35
  %40 = load i8, i8* %37, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = and i8 %43, 8
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %149, label %35

46:                                               ; preds = %23, %20, %14
  %47 = phi i64 [ -48, %14 ], [ -87, %20 ], [ -55, %23 ]
  %48 = sext i8 %15 to i64
  %49 = add nsw i64 %47, %48
  %50 = shl nsw i64 %17, 4
  %51 = add nsw i64 %49, %50
  %52 = ashr i64 %51, 53
  %53 = trunc i64 %52 to i32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %121, label %55

55:                                               ; preds = %46
  %56 = trunc i64 %52 to i32
  %57 = icmp sgt i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %55, %58
  %59 = phi i32 [ %61, %58 ], [ 1, %55 ]
  %60 = phi i32 [ %62, %58 ], [ %56, %55 ]
  %61 = add nuw nsw i32 %59, 1
  %62 = lshr i32 %60, 1
  %63 = icmp ugt i32 %60, 3
  br i1 %63, label %58, label %64

64:                                               ; preds = %58, %55
  %65 = phi i32 [ 1, %55 ], [ %61, %58 ]
  %66 = shl nsw i32 -1, %65
  %67 = xor i32 %66, -1
  %68 = trunc i64 %51 to i32
  %69 = and i32 %67, %68
  %70 = zext i32 %65 to i64
  %71 = ashr i64 %51, %70
  %72 = getelementptr inbounds i8, i8* %16, i64 1
  %73 = icmp eq i8* %72, %1
  br i1 %73, label %105, label %74

74:                                               ; preds = %64, %85
  %75 = phi i8* [ %91, %85 ], [ %72, %64 ]
  %76 = phi i8 [ %89, %85 ], [ 1, %64 ]
  %77 = phi i32 [ %90, %85 ], [ %65, %64 ]
  %78 = load i8, i8* %75, align 1
  %79 = zext i8 %78 to i32
  %80 = add nsw i32 %79, -48
  %81 = icmp ult i32 %80, 10
  %82 = icmp ult i8 %78, 64
  %83 = and i1 %82, %81
  br i1 %83, label %85, label %84

84:                                               ; preds = %74
  switch i8 %78, label %93 [
    i8 102, label %85
    i8 101, label %85
    i8 100, label %85
    i8 99, label %85
    i8 98, label %85
    i8 97, label %85
    i8 70, label %85
    i8 69, label %85
    i8 68, label %85
    i8 67, label %85
    i8 66, label %85
    i8 65, label %85
  ]

85:                                               ; preds = %84, %84, %84, %84, %84, %84, %84, %84, %84, %84, %84, %84, %74
  %86 = icmp ne i8 %76, 0
  %87 = icmp eq i8 %78, 48
  %88 = and i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = add nuw nsw i32 %77, 4
  %91 = getelementptr inbounds i8, i8* %75, i64 1
  %92 = icmp eq i8* %91, %1
  br i1 %92, label %105, label %74

93:                                               ; preds = %84
  br i1 %3, label %105, label %94

94:                                               ; preds = %93, %102
  %95 = phi i8* [ %103, %102 ], [ %75, %93 ]
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = and i8 %99, 8
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %149, label %102

102:                                              ; preds = %94
  %103 = getelementptr inbounds i8, i8* %95, i64 1
  %104 = icmp eq i8* %103, %1
  br i1 %104, label %105, label %94

105:                                              ; preds = %85, %102, %64, %93
  %106 = phi i8 [ %76, %93 ], [ 1, %64 ], [ %76, %102 ], [ %89, %85 ]
  %107 = phi i32 [ %77, %93 ], [ %65, %64 ], [ %77, %102 ], [ %90, %85 ]
  %108 = add nsw i32 %65, -1
  %109 = shl i32 1, %108
  %110 = icmp sgt i32 %69, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %105
  %112 = add nsw i64 %71, 1
  br label %126

113:                                              ; preds = %105
  %114 = icmp eq i32 %69, %109
  br i1 %114, label %115, label %126

115:                                              ; preds = %113
  %116 = and i64 %71, 1
  %117 = xor i8 %106, 1
  %118 = zext i8 %117 to i64
  %119 = or i64 %116, %118
  %120 = add nsw i64 %119, %71
  br label %126

121:                                              ; preds = %46
  %122 = getelementptr inbounds i8, i8* %16, i64 1
  %123 = icmp eq i8* %122, %1
  br i1 %123, label %135, label %124

124:                                              ; preds = %121
  %125 = load i8, i8* %122, align 1
  br label %14

126:                                              ; preds = %111, %113, %115
  %127 = phi i64 [ %112, %111 ], [ %71, %113 ], [ %120, %115 ]
  %128 = and i64 %127, 9007199254740992
  %129 = lshr exact i64 %128, 53
  %130 = trunc i64 %129 to i32
  %131 = add nuw nsw i32 %107, %130
  %132 = lshr exact i64 %128, 53
  %133 = ashr i64 %127, %132
  %134 = icmp eq i32 %131, 0
  br i1 %134, label %135, label %144

135:                                              ; preds = %121, %35, %26, %126
  %136 = phi i64 [ %133, %126 ], [ %17, %26 ], [ %17, %35 ], [ %51, %121 ]
  br i1 %2, label %137, label %141

137:                                              ; preds = %135
  %138 = icmp eq i64 %136, 0
  br i1 %138, label %149, label %139

139:                                              ; preds = %137
  %140 = sub nsw i64 0, %136
  br label %141

141:                                              ; preds = %139, %135
  %142 = phi i64 [ %140, %139 ], [ %136, %135 ]
  %143 = sitofp i64 %142 to double
  br label %149

144:                                              ; preds = %126
  %145 = sub nsw i64 0, %133
  %146 = select i1 %2, i64 %145, i64 %133
  %147 = sitofp i64 %146 to double
  %148 = tail call double @ldexp(double %147, i32 %131) #12
  br label %149

149:                                              ; preds = %39, %94, %29, %141, %144, %137, %12
  %150 = phi double [ %13, %12 ], [ %143, %141 ], [ %148, %144 ], [ -0.000000e+00, %137 ], [ 0x7FF8000000000000, %29 ], [ 0x7FF8000000000000, %94 ], [ 0x7FF8000000000000, %39 ]
  ret double %150
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi5EPKhS3_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %9, %4
  %6 = phi i8* [ %0, %4 ], [ %10, %9 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %6, i64 1
  %11 = icmp eq i8* %10, %1
  br i1 %11, label %12, label %5

12:                                               ; preds = %9
  %13 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %152

14:                                               ; preds = %5, %127
  %15 = phi i8 [ %128, %127 ], [ %7, %5 ]
  %16 = phi i8* [ %125, %127 ], [ %6, %5 ]
  %17 = phi i64 [ %51, %127 ], [ 0, %5 ]
  %18 = add i8 %15, -48
  %19 = icmp ult i8 %18, 10
  br i1 %19, label %46, label %20

20:                                               ; preds = %14
  %21 = add i8 %15, -97
  %22 = icmp ult i8 %21, 22
  br i1 %22, label %46, label %23

23:                                               ; preds = %20
  %24 = add i8 %15, -65
  %25 = icmp ult i8 %24, 22
  br i1 %25, label %46, label %26

26:                                               ; preds = %23
  %27 = icmp eq i8* %16, %1
  %28 = or i1 %27, %3
  br i1 %28, label %138, label %29

29:                                               ; preds = %26
  %30 = zext i8 %15 to i64
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = and i8 %32, 8
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %152, label %35

35:                                               ; preds = %29, %39
  %36 = phi i8* [ %37, %39 ], [ %16, %29 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  %38 = icmp eq i8* %37, %1
  br i1 %38, label %138, label %39

39:                                               ; preds = %35
  %40 = load i8, i8* %37, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = and i8 %43, 8
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %152, label %35

46:                                               ; preds = %23, %20, %14
  %47 = phi i64 [ -48, %14 ], [ -87, %20 ], [ -55, %23 ]
  %48 = sext i8 %15 to i64
  %49 = add nsw i64 %47, %48
  %50 = shl nsw i64 %17, 5
  %51 = add nsw i64 %49, %50
  %52 = ashr i64 %51, 53
  %53 = trunc i64 %52 to i32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %124, label %55

55:                                               ; preds = %46
  %56 = trunc i64 %52 to i32
  %57 = icmp sgt i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %55, %58
  %59 = phi i32 [ %61, %58 ], [ 1, %55 ]
  %60 = phi i32 [ %62, %58 ], [ %56, %55 ]
  %61 = add nuw nsw i32 %59, 1
  %62 = lshr i32 %60, 1
  %63 = icmp ugt i32 %60, 3
  br i1 %63, label %58, label %64

64:                                               ; preds = %58, %55
  %65 = phi i32 [ 1, %55 ], [ %61, %58 ]
  %66 = shl nsw i32 -1, %65
  %67 = xor i32 %66, -1
  %68 = trunc i64 %51 to i32
  %69 = and i32 %67, %68
  %70 = zext i32 %65 to i64
  %71 = ashr i64 %51, %70
  %72 = getelementptr inbounds i8, i8* %16, i64 1
  %73 = icmp eq i8* %72, %1
  br i1 %73, label %108, label %74

74:                                               ; preds = %64, %88
  %75 = phi i8* [ %94, %88 ], [ %72, %64 ]
  %76 = phi i8 [ %92, %88 ], [ 1, %64 ]
  %77 = phi i32 [ %93, %88 ], [ %65, %64 ]
  %78 = load i8, i8* %75, align 1
  %79 = zext i8 %78 to i32
  %80 = add nsw i32 %79, -48
  %81 = icmp ult i32 %80, 10
  %82 = icmp ult i8 %78, 80
  %83 = and i1 %82, %81
  %84 = and i8 %78, -33
  %85 = add i8 %84, -65
  %86 = icmp ult i8 %85, 22
  %87 = or i1 %86, %83
  br i1 %87, label %88, label %96

88:                                               ; preds = %74
  %89 = icmp ne i8 %76, 0
  %90 = icmp eq i8 %78, 48
  %91 = and i1 %89, %90
  %92 = zext i1 %91 to i8
  %93 = add nuw nsw i32 %77, 5
  %94 = getelementptr inbounds i8, i8* %75, i64 1
  %95 = icmp eq i8* %94, %1
  br i1 %95, label %108, label %74

96:                                               ; preds = %74
  br i1 %3, label %108, label %97

97:                                               ; preds = %96, %105
  %98 = phi i8* [ %106, %105 ], [ %75, %96 ]
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = and i8 %102, 8
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %152, label %105

105:                                              ; preds = %97
  %106 = getelementptr inbounds i8, i8* %98, i64 1
  %107 = icmp eq i8* %106, %1
  br i1 %107, label %108, label %97

108:                                              ; preds = %88, %105, %64, %96
  %109 = phi i8 [ %76, %96 ], [ 1, %64 ], [ %76, %105 ], [ %92, %88 ]
  %110 = phi i32 [ %77, %96 ], [ %65, %64 ], [ %77, %105 ], [ %93, %88 ]
  %111 = add nsw i32 %65, -1
  %112 = shl i32 1, %111
  %113 = icmp sgt i32 %69, %112
  br i1 %113, label %114, label %116

114:                                              ; preds = %108
  %115 = add nsw i64 %71, 1
  br label %129

116:                                              ; preds = %108
  %117 = icmp eq i32 %69, %112
  br i1 %117, label %118, label %129

118:                                              ; preds = %116
  %119 = and i64 %71, 1
  %120 = xor i8 %109, 1
  %121 = zext i8 %120 to i64
  %122 = or i64 %119, %121
  %123 = add nsw i64 %122, %71
  br label %129

124:                                              ; preds = %46
  %125 = getelementptr inbounds i8, i8* %16, i64 1
  %126 = icmp eq i8* %125, %1
  br i1 %126, label %138, label %127

127:                                              ; preds = %124
  %128 = load i8, i8* %125, align 1
  br label %14

129:                                              ; preds = %114, %116, %118
  %130 = phi i64 [ %115, %114 ], [ %71, %116 ], [ %123, %118 ]
  %131 = and i64 %130, 9007199254740992
  %132 = lshr exact i64 %131, 53
  %133 = trunc i64 %132 to i32
  %134 = add nuw nsw i32 %110, %133
  %135 = lshr exact i64 %131, 53
  %136 = ashr i64 %130, %135
  %137 = icmp eq i32 %134, 0
  br i1 %137, label %138, label %147

138:                                              ; preds = %124, %35, %26, %129
  %139 = phi i64 [ %136, %129 ], [ %17, %26 ], [ %17, %35 ], [ %51, %124 ]
  br i1 %2, label %140, label %144

140:                                              ; preds = %138
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %152, label %142

142:                                              ; preds = %140
  %143 = sub nsw i64 0, %139
  br label %144

144:                                              ; preds = %142, %138
  %145 = phi i64 [ %143, %142 ], [ %139, %138 ]
  %146 = sitofp i64 %145 to double
  br label %152

147:                                              ; preds = %129
  %148 = sub nsw i64 0, %136
  %149 = select i1 %2, i64 %148, i64 %136
  %150 = sitofp i64 %149 to double
  %151 = tail call double @ldexp(double %150, i32 %134) #12
  br label %152

152:                                              ; preds = %39, %97, %29, %144, %147, %140, %12
  %153 = phi double [ %13, %12 ], [ %146, %144 ], [ %151, %147 ], [ -0.000000e+00, %140 ], [ 0x7FF8000000000000, %29 ], [ 0x7FF8000000000000, %97 ], [ 0x7FF8000000000000, %39 ]
  ret double %153
}

; Function Attrs: nofree nounwind
declare double @ldexp(double, i32) local_unnamed_addr #9

declare zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32) local_unnamed_addr #3

declare double @_ZN2v88internal6StrtodENS0_6VectorIKcEEi(i8*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi1EPKtS3_EEdT0_T1_bb(i16*, i16*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i16* [ %0, %4 ], [ %13, %12 ]
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i16 %7, -2
  %11 = icmp eq i16 %10, 48
  br i1 %11, label %17, label %34

12:                                               ; preds = %5
  %13 = getelementptr inbounds i16, i16* %6, i64 1
  %14 = icmp eq i16* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %161

17:                                               ; preds = %9, %134
  %18 = phi i64 [ %27, %134 ], [ 0, %9 ]
  %19 = phi i16* [ %132, %134 ], [ %6, %9 ]
  %20 = phi i16 [ %135, %134 ], [ %7, %9 ]
  %21 = zext i16 %20 to i32
  %22 = shl i32 %21, 24
  %23 = ashr exact i32 %22, 24
  %24 = add nsw i32 %23, -48
  %25 = shl nsw i64 %18, 1
  %26 = sext i32 %24 to i64
  %27 = add nsw i64 %25, %26
  %28 = ashr i64 %27, 53
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %131, label %31

31:                                               ; preds = %17
  %32 = trunc i64 %28 to i32
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %61, label %67

34:                                               ; preds = %134, %9
  %35 = phi i16 [ %7, %9 ], [ %135, %134 ]
  %36 = phi i16* [ %6, %9 ], [ %132, %134 ]
  %37 = phi i64 [ 0, %9 ], [ %27, %134 ]
  %38 = icmp eq i16* %36, %1
  %39 = or i1 %38, %3
  br i1 %39, label %147, label %40

40:                                               ; preds = %34, %59
  %41 = phi i16 [ %60, %59 ], [ %35, %34 ]
  %42 = phi i16* [ %57, %59 ], [ %36, %34 ]
  %43 = zext i16 %41 to i32
  %44 = icmp ult i16 %41, 256
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %43) #12
  %47 = and i32 %43, 65534
  %48 = icmp eq i32 %47, 8232
  %49 = or i1 %48, %46
  br i1 %49, label %56, label %161

50:                                               ; preds = %40
  %51 = zext i16 %41 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = and i8 %53, 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %161, label %56

56:                                               ; preds = %45, %50
  %57 = getelementptr inbounds i16, i16* %42, i64 1
  %58 = icmp eq i16* %57, %1
  br i1 %58, label %147, label %59

59:                                               ; preds = %56
  %60 = load i16, i16* %57, align 2
  br label %40

61:                                               ; preds = %31, %61
  %62 = phi i32 [ %64, %61 ], [ 1, %31 ]
  %63 = phi i32 [ %65, %61 ], [ %32, %31 ]
  %64 = add nuw nsw i32 %62, 1
  %65 = lshr i32 %63, 1
  %66 = icmp ugt i32 %63, 3
  br i1 %66, label %61, label %67

67:                                               ; preds = %61, %31
  %68 = phi i32 [ 1, %31 ], [ %64, %61 ]
  %69 = shl nsw i32 -1, %68
  %70 = xor i32 %69, -1
  %71 = trunc i64 %27 to i32
  %72 = and i32 %70, %71
  %73 = zext i32 %68 to i64
  %74 = ashr i64 %27, %73
  %75 = getelementptr inbounds i16, i16* %19, i64 1
  %76 = icmp eq i16* %75, %1
  br i1 %76, label %115, label %77

77:                                               ; preds = %67, %87
  %78 = phi i16* [ %93, %87 ], [ %75, %67 ]
  %79 = phi i8 [ %91, %87 ], [ 1, %67 ]
  %80 = phi i32 [ %92, %87 ], [ %68, %67 ]
  %81 = load i16, i16* %78, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %82, -48
  %84 = icmp ult i32 %83, 10
  %85 = icmp ult i16 %81, 50
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %95

87:                                               ; preds = %77
  %88 = icmp ne i8 %79, 0
  %89 = icmp eq i16 %81, 48
  %90 = and i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = add nuw nsw i32 %80, 1
  %93 = getelementptr inbounds i16, i16* %78, i64 1
  %94 = icmp eq i16* %93, %1
  br i1 %94, label %115, label %77

95:                                               ; preds = %77
  br i1 %3, label %115, label %96

96:                                               ; preds = %95, %112
  %97 = phi i16* [ %113, %112 ], [ %78, %95 ]
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp ult i16 %98, 256
  br i1 %100, label %106, label %101

101:                                              ; preds = %96
  %102 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %99) #12
  %103 = and i32 %99, 65534
  %104 = icmp eq i32 %103, 8232
  %105 = or i1 %104, %102
  br i1 %105, label %112, label %161

106:                                              ; preds = %96
  %107 = zext i16 %98 to i64
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = and i8 %109, 8
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %161, label %112

112:                                              ; preds = %101, %106
  %113 = getelementptr inbounds i16, i16* %97, i64 1
  %114 = icmp eq i16* %113, %1
  br i1 %114, label %115, label %96

115:                                              ; preds = %87, %112, %67, %95
  %116 = phi i8 [ %79, %95 ], [ 1, %67 ], [ %79, %112 ], [ %91, %87 ]
  %117 = phi i32 [ %80, %95 ], [ %68, %67 ], [ %80, %112 ], [ %92, %87 ]
  %118 = add nsw i32 %68, -1
  %119 = shl i32 1, %118
  %120 = icmp sgt i32 %72, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %115
  %122 = add nsw i64 %74, 1
  br label %138

123:                                              ; preds = %115
  %124 = icmp eq i32 %72, %119
  br i1 %124, label %125, label %138

125:                                              ; preds = %123
  %126 = and i64 %74, 1
  %127 = xor i8 %116, 1
  %128 = zext i8 %127 to i64
  %129 = or i64 %126, %128
  %130 = add nsw i64 %129, %74
  br label %138

131:                                              ; preds = %17
  %132 = getelementptr inbounds i16, i16* %19, i64 1
  %133 = icmp eq i16* %132, %1
  br i1 %133, label %147, label %134

134:                                              ; preds = %131
  %135 = load i16, i16* %132, align 2
  %136 = and i16 %135, -2
  %137 = icmp eq i16 %136, 48
  br i1 %137, label %17, label %34

138:                                              ; preds = %121, %123, %125
  %139 = phi i64 [ %122, %121 ], [ %74, %123 ], [ %130, %125 ]
  %140 = and i64 %139, 9007199254740992
  %141 = lshr exact i64 %140, 53
  %142 = trunc i64 %141 to i32
  %143 = add nuw nsw i32 %117, %142
  %144 = lshr exact i64 %140, 53
  %145 = ashr i64 %139, %144
  %146 = icmp eq i32 %143, 0
  br i1 %146, label %147, label %156

147:                                              ; preds = %131, %56, %34, %138
  %148 = phi i64 [ %145, %138 ], [ %37, %34 ], [ %37, %56 ], [ %27, %131 ]
  br i1 %2, label %149, label %153

149:                                              ; preds = %147
  %150 = icmp eq i64 %148, 0
  br i1 %150, label %161, label %151

151:                                              ; preds = %149
  %152 = sub nsw i64 0, %148
  br label %153

153:                                              ; preds = %151, %147
  %154 = phi i64 [ %152, %151 ], [ %148, %147 ]
  %155 = sitofp i64 %154 to double
  br label %161

156:                                              ; preds = %138
  %157 = sub nsw i64 0, %145
  %158 = select i1 %2, i64 %157, i64 %145
  %159 = sitofp i64 %158 to double
  %160 = tail call double @ldexp(double %159, i32 %143) #12
  br label %161

161:                                              ; preds = %101, %106, %45, %50, %153, %156, %149, %15
  %162 = phi double [ %16, %15 ], [ %155, %153 ], [ %160, %156 ], [ -0.000000e+00, %149 ], [ 0x7FF8000000000000, %50 ], [ 0x7FF8000000000000, %45 ], [ 0x7FF8000000000000, %106 ], [ 0x7FF8000000000000, %101 ]
  ret double %162
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi2EPKtS3_EEdT0_T1_bb(i16*, i16*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i16* [ %0, %4 ], [ %13, %12 ]
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i16 %7, -4
  %11 = icmp eq i16 %10, 48
  br i1 %11, label %17, label %34

12:                                               ; preds = %5
  %13 = getelementptr inbounds i16, i16* %6, i64 1
  %14 = icmp eq i16* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %161

17:                                               ; preds = %9, %134
  %18 = phi i64 [ %27, %134 ], [ 0, %9 ]
  %19 = phi i16* [ %132, %134 ], [ %6, %9 ]
  %20 = phi i16 [ %135, %134 ], [ %7, %9 ]
  %21 = zext i16 %20 to i32
  %22 = shl i32 %21, 24
  %23 = ashr exact i32 %22, 24
  %24 = add nsw i32 %23, -48
  %25 = shl nsw i64 %18, 2
  %26 = sext i32 %24 to i64
  %27 = add nsw i64 %25, %26
  %28 = ashr i64 %27, 53
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %131, label %31

31:                                               ; preds = %17
  %32 = trunc i64 %28 to i32
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %61, label %67

34:                                               ; preds = %134, %9
  %35 = phi i16 [ %7, %9 ], [ %135, %134 ]
  %36 = phi i16* [ %6, %9 ], [ %132, %134 ]
  %37 = phi i64 [ 0, %9 ], [ %27, %134 ]
  %38 = icmp eq i16* %36, %1
  %39 = or i1 %38, %3
  br i1 %39, label %147, label %40

40:                                               ; preds = %34, %59
  %41 = phi i16 [ %60, %59 ], [ %35, %34 ]
  %42 = phi i16* [ %57, %59 ], [ %36, %34 ]
  %43 = zext i16 %41 to i32
  %44 = icmp ult i16 %41, 256
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %43) #12
  %47 = and i32 %43, 65534
  %48 = icmp eq i32 %47, 8232
  %49 = or i1 %48, %46
  br i1 %49, label %56, label %161

50:                                               ; preds = %40
  %51 = zext i16 %41 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = and i8 %53, 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %161, label %56

56:                                               ; preds = %45, %50
  %57 = getelementptr inbounds i16, i16* %42, i64 1
  %58 = icmp eq i16* %57, %1
  br i1 %58, label %147, label %59

59:                                               ; preds = %56
  %60 = load i16, i16* %57, align 2
  br label %40

61:                                               ; preds = %31, %61
  %62 = phi i32 [ %64, %61 ], [ 1, %31 ]
  %63 = phi i32 [ %65, %61 ], [ %32, %31 ]
  %64 = add nuw nsw i32 %62, 1
  %65 = lshr i32 %63, 1
  %66 = icmp ugt i32 %63, 3
  br i1 %66, label %61, label %67

67:                                               ; preds = %61, %31
  %68 = phi i32 [ 1, %31 ], [ %64, %61 ]
  %69 = shl nsw i32 -1, %68
  %70 = xor i32 %69, -1
  %71 = trunc i64 %27 to i32
  %72 = and i32 %70, %71
  %73 = zext i32 %68 to i64
  %74 = ashr i64 %27, %73
  %75 = getelementptr inbounds i16, i16* %19, i64 1
  %76 = icmp eq i16* %75, %1
  br i1 %76, label %115, label %77

77:                                               ; preds = %67, %87
  %78 = phi i16* [ %93, %87 ], [ %75, %67 ]
  %79 = phi i8 [ %91, %87 ], [ 1, %67 ]
  %80 = phi i32 [ %92, %87 ], [ %68, %67 ]
  %81 = load i16, i16* %78, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %82, -48
  %84 = icmp ult i32 %83, 10
  %85 = icmp ult i16 %81, 52
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %95

87:                                               ; preds = %77
  %88 = icmp ne i8 %79, 0
  %89 = icmp eq i16 %81, 48
  %90 = and i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = add nuw nsw i32 %80, 2
  %93 = getelementptr inbounds i16, i16* %78, i64 1
  %94 = icmp eq i16* %93, %1
  br i1 %94, label %115, label %77

95:                                               ; preds = %77
  br i1 %3, label %115, label %96

96:                                               ; preds = %95, %112
  %97 = phi i16* [ %113, %112 ], [ %78, %95 ]
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp ult i16 %98, 256
  br i1 %100, label %106, label %101

101:                                              ; preds = %96
  %102 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %99) #12
  %103 = and i32 %99, 65534
  %104 = icmp eq i32 %103, 8232
  %105 = or i1 %104, %102
  br i1 %105, label %112, label %161

106:                                              ; preds = %96
  %107 = zext i16 %98 to i64
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = and i8 %109, 8
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %161, label %112

112:                                              ; preds = %101, %106
  %113 = getelementptr inbounds i16, i16* %97, i64 1
  %114 = icmp eq i16* %113, %1
  br i1 %114, label %115, label %96

115:                                              ; preds = %87, %112, %67, %95
  %116 = phi i8 [ %79, %95 ], [ 1, %67 ], [ %79, %112 ], [ %91, %87 ]
  %117 = phi i32 [ %80, %95 ], [ %68, %67 ], [ %80, %112 ], [ %92, %87 ]
  %118 = add nsw i32 %68, -1
  %119 = shl i32 1, %118
  %120 = icmp sgt i32 %72, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %115
  %122 = add nsw i64 %74, 1
  br label %138

123:                                              ; preds = %115
  %124 = icmp eq i32 %72, %119
  br i1 %124, label %125, label %138

125:                                              ; preds = %123
  %126 = and i64 %74, 1
  %127 = xor i8 %116, 1
  %128 = zext i8 %127 to i64
  %129 = or i64 %126, %128
  %130 = add nsw i64 %129, %74
  br label %138

131:                                              ; preds = %17
  %132 = getelementptr inbounds i16, i16* %19, i64 1
  %133 = icmp eq i16* %132, %1
  br i1 %133, label %147, label %134

134:                                              ; preds = %131
  %135 = load i16, i16* %132, align 2
  %136 = and i16 %135, -4
  %137 = icmp eq i16 %136, 48
  br i1 %137, label %17, label %34

138:                                              ; preds = %121, %123, %125
  %139 = phi i64 [ %122, %121 ], [ %74, %123 ], [ %130, %125 ]
  %140 = and i64 %139, 9007199254740992
  %141 = lshr exact i64 %140, 53
  %142 = trunc i64 %141 to i32
  %143 = add nuw nsw i32 %117, %142
  %144 = lshr exact i64 %140, 53
  %145 = ashr i64 %139, %144
  %146 = icmp eq i32 %143, 0
  br i1 %146, label %147, label %156

147:                                              ; preds = %131, %56, %34, %138
  %148 = phi i64 [ %145, %138 ], [ %37, %34 ], [ %37, %56 ], [ %27, %131 ]
  br i1 %2, label %149, label %153

149:                                              ; preds = %147
  %150 = icmp eq i64 %148, 0
  br i1 %150, label %161, label %151

151:                                              ; preds = %149
  %152 = sub nsw i64 0, %148
  br label %153

153:                                              ; preds = %151, %147
  %154 = phi i64 [ %152, %151 ], [ %148, %147 ]
  %155 = sitofp i64 %154 to double
  br label %161

156:                                              ; preds = %138
  %157 = sub nsw i64 0, %145
  %158 = select i1 %2, i64 %157, i64 %145
  %159 = sitofp i64 %158 to double
  %160 = tail call double @ldexp(double %159, i32 %143) #12
  br label %161

161:                                              ; preds = %101, %106, %45, %50, %153, %156, %149, %15
  %162 = phi double [ %16, %15 ], [ %155, %153 ], [ %160, %156 ], [ -0.000000e+00, %149 ], [ 0x7FF8000000000000, %50 ], [ 0x7FF8000000000000, %45 ], [ 0x7FF8000000000000, %106 ], [ 0x7FF8000000000000, %101 ]
  ret double %162
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi3EPKtS3_EEdT0_T1_bb(i16*, i16*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i16* [ %0, %4 ], [ %13, %12 ]
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i16 %7, -8
  %11 = icmp eq i16 %10, 48
  br i1 %11, label %17, label %34

12:                                               ; preds = %5
  %13 = getelementptr inbounds i16, i16* %6, i64 1
  %14 = icmp eq i16* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %161

17:                                               ; preds = %9, %134
  %18 = phi i64 [ %27, %134 ], [ 0, %9 ]
  %19 = phi i16* [ %132, %134 ], [ %6, %9 ]
  %20 = phi i16 [ %135, %134 ], [ %7, %9 ]
  %21 = zext i16 %20 to i32
  %22 = shl i32 %21, 24
  %23 = ashr exact i32 %22, 24
  %24 = add nsw i32 %23, -48
  %25 = shl nsw i64 %18, 3
  %26 = sext i32 %24 to i64
  %27 = add nsw i64 %25, %26
  %28 = ashr i64 %27, 53
  %29 = trunc i64 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %131, label %31

31:                                               ; preds = %17
  %32 = trunc i64 %28 to i32
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %61, label %67

34:                                               ; preds = %134, %9
  %35 = phi i16 [ %7, %9 ], [ %135, %134 ]
  %36 = phi i16* [ %6, %9 ], [ %132, %134 ]
  %37 = phi i64 [ 0, %9 ], [ %27, %134 ]
  %38 = icmp eq i16* %36, %1
  %39 = or i1 %38, %3
  br i1 %39, label %147, label %40

40:                                               ; preds = %34, %59
  %41 = phi i16 [ %60, %59 ], [ %35, %34 ]
  %42 = phi i16* [ %57, %59 ], [ %36, %34 ]
  %43 = zext i16 %41 to i32
  %44 = icmp ult i16 %41, 256
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %43) #12
  %47 = and i32 %43, 65534
  %48 = icmp eq i32 %47, 8232
  %49 = or i1 %48, %46
  br i1 %49, label %56, label %161

50:                                               ; preds = %40
  %51 = zext i16 %41 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = and i8 %53, 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %161, label %56

56:                                               ; preds = %45, %50
  %57 = getelementptr inbounds i16, i16* %42, i64 1
  %58 = icmp eq i16* %57, %1
  br i1 %58, label %147, label %59

59:                                               ; preds = %56
  %60 = load i16, i16* %57, align 2
  br label %40

61:                                               ; preds = %31, %61
  %62 = phi i32 [ %64, %61 ], [ 1, %31 ]
  %63 = phi i32 [ %65, %61 ], [ %32, %31 ]
  %64 = add nuw nsw i32 %62, 1
  %65 = lshr i32 %63, 1
  %66 = icmp ugt i32 %63, 3
  br i1 %66, label %61, label %67

67:                                               ; preds = %61, %31
  %68 = phi i32 [ 1, %31 ], [ %64, %61 ]
  %69 = shl nsw i32 -1, %68
  %70 = xor i32 %69, -1
  %71 = trunc i64 %27 to i32
  %72 = and i32 %70, %71
  %73 = zext i32 %68 to i64
  %74 = ashr i64 %27, %73
  %75 = getelementptr inbounds i16, i16* %19, i64 1
  %76 = icmp eq i16* %75, %1
  br i1 %76, label %115, label %77

77:                                               ; preds = %67, %87
  %78 = phi i16* [ %93, %87 ], [ %75, %67 ]
  %79 = phi i8 [ %91, %87 ], [ 1, %67 ]
  %80 = phi i32 [ %92, %87 ], [ %68, %67 ]
  %81 = load i16, i16* %78, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %82, -48
  %84 = icmp ult i32 %83, 10
  %85 = icmp ult i16 %81, 56
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %95

87:                                               ; preds = %77
  %88 = icmp ne i8 %79, 0
  %89 = icmp eq i16 %81, 48
  %90 = and i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = add nuw nsw i32 %80, 3
  %93 = getelementptr inbounds i16, i16* %78, i64 1
  %94 = icmp eq i16* %93, %1
  br i1 %94, label %115, label %77

95:                                               ; preds = %77
  br i1 %3, label %115, label %96

96:                                               ; preds = %95, %112
  %97 = phi i16* [ %113, %112 ], [ %78, %95 ]
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp ult i16 %98, 256
  br i1 %100, label %106, label %101

101:                                              ; preds = %96
  %102 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %99) #12
  %103 = and i32 %99, 65534
  %104 = icmp eq i32 %103, 8232
  %105 = or i1 %104, %102
  br i1 %105, label %112, label %161

106:                                              ; preds = %96
  %107 = zext i16 %98 to i64
  %108 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = and i8 %109, 8
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %161, label %112

112:                                              ; preds = %101, %106
  %113 = getelementptr inbounds i16, i16* %97, i64 1
  %114 = icmp eq i16* %113, %1
  br i1 %114, label %115, label %96

115:                                              ; preds = %87, %112, %67, %95
  %116 = phi i8 [ %79, %95 ], [ 1, %67 ], [ %79, %112 ], [ %91, %87 ]
  %117 = phi i32 [ %80, %95 ], [ %68, %67 ], [ %80, %112 ], [ %92, %87 ]
  %118 = add nsw i32 %68, -1
  %119 = shl i32 1, %118
  %120 = icmp sgt i32 %72, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %115
  %122 = add nsw i64 %74, 1
  br label %138

123:                                              ; preds = %115
  %124 = icmp eq i32 %72, %119
  br i1 %124, label %125, label %138

125:                                              ; preds = %123
  %126 = and i64 %74, 1
  %127 = xor i8 %116, 1
  %128 = zext i8 %127 to i64
  %129 = or i64 %126, %128
  %130 = add nsw i64 %129, %74
  br label %138

131:                                              ; preds = %17
  %132 = getelementptr inbounds i16, i16* %19, i64 1
  %133 = icmp eq i16* %132, %1
  br i1 %133, label %147, label %134

134:                                              ; preds = %131
  %135 = load i16, i16* %132, align 2
  %136 = and i16 %135, -8
  %137 = icmp eq i16 %136, 48
  br i1 %137, label %17, label %34

138:                                              ; preds = %121, %123, %125
  %139 = phi i64 [ %122, %121 ], [ %74, %123 ], [ %130, %125 ]
  %140 = and i64 %139, 9007199254740992
  %141 = lshr exact i64 %140, 53
  %142 = trunc i64 %141 to i32
  %143 = add nuw nsw i32 %117, %142
  %144 = lshr exact i64 %140, 53
  %145 = ashr i64 %139, %144
  %146 = icmp eq i32 %143, 0
  br i1 %146, label %147, label %156

147:                                              ; preds = %131, %56, %34, %138
  %148 = phi i64 [ %145, %138 ], [ %37, %34 ], [ %37, %56 ], [ %27, %131 ]
  br i1 %2, label %149, label %153

149:                                              ; preds = %147
  %150 = icmp eq i64 %148, 0
  br i1 %150, label %161, label %151

151:                                              ; preds = %149
  %152 = sub nsw i64 0, %148
  br label %153

153:                                              ; preds = %151, %147
  %154 = phi i64 [ %152, %151 ], [ %148, %147 ]
  %155 = sitofp i64 %154 to double
  br label %161

156:                                              ; preds = %138
  %157 = sub nsw i64 0, %145
  %158 = select i1 %2, i64 %157, i64 %145
  %159 = sitofp i64 %158 to double
  %160 = tail call double @ldexp(double %159, i32 %143) #12
  br label %161

161:                                              ; preds = %101, %106, %45, %50, %153, %156, %149, %15
  %162 = phi double [ %16, %15 ], [ %155, %153 ], [ %160, %156 ], [ -0.000000e+00, %149 ], [ 0x7FF8000000000000, %50 ], [ 0x7FF8000000000000, %45 ], [ 0x7FF8000000000000, %106 ], [ 0x7FF8000000000000, %101 ]
  ret double %162
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi4EPKtS3_EEdT0_T1_bb(i16*, i16*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %9, %4
  %6 = phi i16* [ %0, %4 ], [ %10, %9 ]
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 48
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds i16, i16* %6, i64 1
  %11 = icmp eq i16* %10, %1
  br i1 %11, label %12, label %5

12:                                               ; preds = %9
  %13 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %164

14:                                               ; preds = %5, %139
  %15 = phi i16 [ %140, %139 ], [ %7, %5 ]
  %16 = phi i16* [ %137, %139 ], [ %6, %5 ]
  %17 = phi i64 [ %58, %139 ], [ 0, %5 ]
  %18 = add i16 %15, -48
  %19 = icmp ult i16 %18, 10
  br i1 %19, label %50, label %20

20:                                               ; preds = %14
  %21 = add i16 %15, -97
  %22 = icmp ult i16 %21, 6
  br i1 %22, label %50, label %23

23:                                               ; preds = %20
  %24 = add i16 %15, -65
  %25 = icmp ult i16 %24, 6
  br i1 %25, label %50, label %26

26:                                               ; preds = %23
  %27 = icmp eq i16* %16, %1
  %28 = or i1 %27, %3
  br i1 %28, label %150, label %29

29:                                               ; preds = %26, %48
  %30 = phi i16 [ %49, %48 ], [ %15, %26 ]
  %31 = phi i16* [ %46, %48 ], [ %16, %26 ]
  %32 = zext i16 %30 to i32
  %33 = icmp ult i16 %30, 256
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %32) #12
  %36 = and i32 %32, 65534
  %37 = icmp eq i32 %36, 8232
  %38 = or i1 %37, %35
  br i1 %38, label %45, label %164

39:                                               ; preds = %29
  %40 = zext i16 %30 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, 8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %164, label %45

45:                                               ; preds = %34, %39
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = icmp eq i16* %46, %1
  br i1 %47, label %150, label %48

48:                                               ; preds = %45
  %49 = load i16, i16* %46, align 2
  br label %29

50:                                               ; preds = %23, %20, %14
  %51 = phi i32 [ -48, %14 ], [ -87, %20 ], [ -55, %23 ]
  %52 = zext i16 %15 to i32
  %53 = shl i32 %52, 24
  %54 = ashr exact i32 %53, 24
  %55 = add nsw i32 %54, %51
  %56 = shl nsw i64 %17, 4
  %57 = sext i32 %55 to i64
  %58 = add nsw i64 %56, %57
  %59 = ashr i64 %58, 53
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %136, label %62

62:                                               ; preds = %50
  %63 = trunc i64 %59 to i32
  %64 = icmp sgt i32 %63, 1
  br i1 %64, label %65, label %71

65:                                               ; preds = %62, %65
  %66 = phi i32 [ %68, %65 ], [ 1, %62 ]
  %67 = phi i32 [ %69, %65 ], [ %63, %62 ]
  %68 = add nuw nsw i32 %66, 1
  %69 = lshr i32 %67, 1
  %70 = icmp ugt i32 %67, 3
  br i1 %70, label %65, label %71

71:                                               ; preds = %65, %62
  %72 = phi i32 [ 1, %62 ], [ %68, %65 ]
  %73 = shl nsw i32 -1, %72
  %74 = xor i32 %73, -1
  %75 = trunc i64 %58 to i32
  %76 = and i32 %74, %75
  %77 = zext i32 %72 to i64
  %78 = ashr i64 %58, %77
  %79 = getelementptr inbounds i16, i16* %16, i64 1
  %80 = icmp eq i16* %79, %1
  br i1 %80, label %120, label %81

81:                                               ; preds = %71, %92
  %82 = phi i16* [ %98, %92 ], [ %79, %71 ]
  %83 = phi i8 [ %96, %92 ], [ 1, %71 ]
  %84 = phi i32 [ %97, %92 ], [ %72, %71 ]
  %85 = load i16, i16* %82, align 2
  %86 = zext i16 %85 to i32
  %87 = add nsw i32 %86, -48
  %88 = icmp ult i32 %87, 10
  %89 = icmp ult i16 %85, 64
  %90 = and i1 %89, %88
  br i1 %90, label %92, label %91

91:                                               ; preds = %81
  switch i16 %85, label %100 [
    i16 102, label %92
    i16 101, label %92
    i16 100, label %92
    i16 99, label %92
    i16 98, label %92
    i16 97, label %92
    i16 70, label %92
    i16 69, label %92
    i16 68, label %92
    i16 67, label %92
    i16 66, label %92
    i16 65, label %92
  ]

92:                                               ; preds = %91, %91, %91, %91, %91, %91, %91, %91, %91, %91, %91, %91, %81
  %93 = icmp ne i8 %83, 0
  %94 = icmp eq i16 %85, 48
  %95 = and i1 %93, %94
  %96 = zext i1 %95 to i8
  %97 = add nuw nsw i32 %84, 4
  %98 = getelementptr inbounds i16, i16* %82, i64 1
  %99 = icmp eq i16* %98, %1
  br i1 %99, label %120, label %81

100:                                              ; preds = %91
  br i1 %3, label %120, label %101

101:                                              ; preds = %100, %117
  %102 = phi i16* [ %118, %117 ], [ %82, %100 ]
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = icmp ult i16 %103, 256
  br i1 %105, label %111, label %106

106:                                              ; preds = %101
  %107 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %104) #12
  %108 = and i32 %104, 65534
  %109 = icmp eq i32 %108, 8232
  %110 = or i1 %109, %107
  br i1 %110, label %117, label %164

111:                                              ; preds = %101
  %112 = zext i16 %103 to i64
  %113 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = and i8 %114, 8
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %164, label %117

117:                                              ; preds = %106, %111
  %118 = getelementptr inbounds i16, i16* %102, i64 1
  %119 = icmp eq i16* %118, %1
  br i1 %119, label %120, label %101

120:                                              ; preds = %92, %117, %71, %100
  %121 = phi i8 [ %83, %100 ], [ 1, %71 ], [ %83, %117 ], [ %96, %92 ]
  %122 = phi i32 [ %84, %100 ], [ %72, %71 ], [ %84, %117 ], [ %97, %92 ]
  %123 = add nsw i32 %72, -1
  %124 = shl i32 1, %123
  %125 = icmp sgt i32 %76, %124
  br i1 %125, label %126, label %128

126:                                              ; preds = %120
  %127 = add nsw i64 %78, 1
  br label %141

128:                                              ; preds = %120
  %129 = icmp eq i32 %76, %124
  br i1 %129, label %130, label %141

130:                                              ; preds = %128
  %131 = and i64 %78, 1
  %132 = xor i8 %121, 1
  %133 = zext i8 %132 to i64
  %134 = or i64 %131, %133
  %135 = add nsw i64 %134, %78
  br label %141

136:                                              ; preds = %50
  %137 = getelementptr inbounds i16, i16* %16, i64 1
  %138 = icmp eq i16* %137, %1
  br i1 %138, label %150, label %139

139:                                              ; preds = %136
  %140 = load i16, i16* %137, align 2
  br label %14

141:                                              ; preds = %126, %128, %130
  %142 = phi i64 [ %127, %126 ], [ %78, %128 ], [ %135, %130 ]
  %143 = and i64 %142, 9007199254740992
  %144 = lshr exact i64 %143, 53
  %145 = trunc i64 %144 to i32
  %146 = add nuw nsw i32 %122, %145
  %147 = lshr exact i64 %143, 53
  %148 = ashr i64 %142, %147
  %149 = icmp eq i32 %146, 0
  br i1 %149, label %150, label %159

150:                                              ; preds = %136, %45, %26, %141
  %151 = phi i64 [ %148, %141 ], [ %17, %26 ], [ %17, %45 ], [ %58, %136 ]
  br i1 %2, label %152, label %156

152:                                              ; preds = %150
  %153 = icmp eq i64 %151, 0
  br i1 %153, label %164, label %154

154:                                              ; preds = %152
  %155 = sub nsw i64 0, %151
  br label %156

156:                                              ; preds = %154, %150
  %157 = phi i64 [ %155, %154 ], [ %151, %150 ]
  %158 = sitofp i64 %157 to double
  br label %164

159:                                              ; preds = %141
  %160 = sub nsw i64 0, %148
  %161 = select i1 %2, i64 %160, i64 %148
  %162 = sitofp i64 %161 to double
  %163 = tail call double @ldexp(double %162, i32 %146) #12
  br label %164

164:                                              ; preds = %34, %39, %106, %111, %156, %159, %152, %12
  %165 = phi double [ %13, %12 ], [ %158, %156 ], [ %163, %159 ], [ -0.000000e+00, %152 ], [ 0x7FF8000000000000, %111 ], [ 0x7FF8000000000000, %106 ], [ 0x7FF8000000000000, %39 ], [ 0x7FF8000000000000, %34 ]
  ret double %165
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi5EPKtS3_EEdT0_T1_bb(i16*, i16*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %9, %4
  %6 = phi i16* [ %0, %4 ], [ %10, %9 ]
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 48
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds i16, i16* %6, i64 1
  %11 = icmp eq i16* %10, %1
  br i1 %11, label %12, label %5

12:                                               ; preds = %9
  %13 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %167

14:                                               ; preds = %5, %142
  %15 = phi i16 [ %143, %142 ], [ %7, %5 ]
  %16 = phi i16* [ %140, %142 ], [ %6, %5 ]
  %17 = phi i64 [ %58, %142 ], [ 0, %5 ]
  %18 = add i16 %15, -48
  %19 = icmp ult i16 %18, 10
  br i1 %19, label %50, label %20

20:                                               ; preds = %14
  %21 = add i16 %15, -97
  %22 = icmp ult i16 %21, 22
  br i1 %22, label %50, label %23

23:                                               ; preds = %20
  %24 = add i16 %15, -65
  %25 = icmp ult i16 %24, 22
  br i1 %25, label %50, label %26

26:                                               ; preds = %23
  %27 = icmp eq i16* %16, %1
  %28 = or i1 %27, %3
  br i1 %28, label %153, label %29

29:                                               ; preds = %26, %48
  %30 = phi i16 [ %49, %48 ], [ %15, %26 ]
  %31 = phi i16* [ %46, %48 ], [ %16, %26 ]
  %32 = zext i16 %30 to i32
  %33 = icmp ult i16 %30, 256
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %32) #12
  %36 = and i32 %32, 65534
  %37 = icmp eq i32 %36, 8232
  %38 = or i1 %37, %35
  br i1 %38, label %45, label %167

39:                                               ; preds = %29
  %40 = zext i16 %30 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, 8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %167, label %45

45:                                               ; preds = %34, %39
  %46 = getelementptr inbounds i16, i16* %31, i64 1
  %47 = icmp eq i16* %46, %1
  br i1 %47, label %153, label %48

48:                                               ; preds = %45
  %49 = load i16, i16* %46, align 2
  br label %29

50:                                               ; preds = %23, %20, %14
  %51 = phi i32 [ -48, %14 ], [ -87, %20 ], [ -55, %23 ]
  %52 = zext i16 %15 to i32
  %53 = shl i32 %52, 24
  %54 = ashr exact i32 %53, 24
  %55 = add nsw i32 %54, %51
  %56 = shl nsw i64 %17, 5
  %57 = sext i32 %55 to i64
  %58 = add nsw i64 %56, %57
  %59 = ashr i64 %58, 53
  %60 = trunc i64 %59 to i32
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %139, label %62

62:                                               ; preds = %50
  %63 = trunc i64 %59 to i32
  %64 = icmp sgt i32 %63, 1
  br i1 %64, label %65, label %71

65:                                               ; preds = %62, %65
  %66 = phi i32 [ %68, %65 ], [ 1, %62 ]
  %67 = phi i32 [ %69, %65 ], [ %63, %62 ]
  %68 = add nuw nsw i32 %66, 1
  %69 = lshr i32 %67, 1
  %70 = icmp ugt i32 %67, 3
  br i1 %70, label %65, label %71

71:                                               ; preds = %65, %62
  %72 = phi i32 [ 1, %62 ], [ %68, %65 ]
  %73 = shl nsw i32 -1, %72
  %74 = xor i32 %73, -1
  %75 = trunc i64 %58 to i32
  %76 = and i32 %74, %75
  %77 = zext i32 %72 to i64
  %78 = ashr i64 %58, %77
  %79 = getelementptr inbounds i16, i16* %16, i64 1
  %80 = icmp eq i16* %79, %1
  br i1 %80, label %123, label %81

81:                                               ; preds = %71, %95
  %82 = phi i16* [ %101, %95 ], [ %79, %71 ]
  %83 = phi i8 [ %99, %95 ], [ 1, %71 ]
  %84 = phi i32 [ %100, %95 ], [ %72, %71 ]
  %85 = load i16, i16* %82, align 2
  %86 = zext i16 %85 to i32
  %87 = add nsw i32 %86, -48
  %88 = icmp ult i32 %87, 10
  %89 = icmp ult i16 %85, 80
  %90 = and i1 %89, %88
  %91 = and i16 %85, -33
  %92 = add i16 %91, -65
  %93 = icmp ult i16 %92, 22
  %94 = or i1 %93, %90
  br i1 %94, label %95, label %103

95:                                               ; preds = %81
  %96 = icmp ne i8 %83, 0
  %97 = icmp eq i16 %85, 48
  %98 = and i1 %96, %97
  %99 = zext i1 %98 to i8
  %100 = add nuw nsw i32 %84, 5
  %101 = getelementptr inbounds i16, i16* %82, i64 1
  %102 = icmp eq i16* %101, %1
  br i1 %102, label %123, label %81

103:                                              ; preds = %81
  br i1 %3, label %123, label %104

104:                                              ; preds = %103, %120
  %105 = phi i16* [ %121, %120 ], [ %82, %103 ]
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = icmp ult i16 %106, 256
  br i1 %108, label %114, label %109

109:                                              ; preds = %104
  %110 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %107) #12
  %111 = and i32 %107, 65534
  %112 = icmp eq i32 %111, 8232
  %113 = or i1 %112, %110
  br i1 %113, label %120, label %167

114:                                              ; preds = %104
  %115 = zext i16 %106 to i64
  %116 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = and i8 %117, 8
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %167, label %120

120:                                              ; preds = %109, %114
  %121 = getelementptr inbounds i16, i16* %105, i64 1
  %122 = icmp eq i16* %121, %1
  br i1 %122, label %123, label %104

123:                                              ; preds = %95, %120, %71, %103
  %124 = phi i8 [ %83, %103 ], [ 1, %71 ], [ %83, %120 ], [ %99, %95 ]
  %125 = phi i32 [ %84, %103 ], [ %72, %71 ], [ %84, %120 ], [ %100, %95 ]
  %126 = add nsw i32 %72, -1
  %127 = shl i32 1, %126
  %128 = icmp sgt i32 %76, %127
  br i1 %128, label %129, label %131

129:                                              ; preds = %123
  %130 = add nsw i64 %78, 1
  br label %144

131:                                              ; preds = %123
  %132 = icmp eq i32 %76, %127
  br i1 %132, label %133, label %144

133:                                              ; preds = %131
  %134 = and i64 %78, 1
  %135 = xor i8 %124, 1
  %136 = zext i8 %135 to i64
  %137 = or i64 %134, %136
  %138 = add nsw i64 %137, %78
  br label %144

139:                                              ; preds = %50
  %140 = getelementptr inbounds i16, i16* %16, i64 1
  %141 = icmp eq i16* %140, %1
  br i1 %141, label %153, label %142

142:                                              ; preds = %139
  %143 = load i16, i16* %140, align 2
  br label %14

144:                                              ; preds = %129, %131, %133
  %145 = phi i64 [ %130, %129 ], [ %78, %131 ], [ %138, %133 ]
  %146 = and i64 %145, 9007199254740992
  %147 = lshr exact i64 %146, 53
  %148 = trunc i64 %147 to i32
  %149 = add nuw nsw i32 %125, %148
  %150 = lshr exact i64 %146, 53
  %151 = ashr i64 %145, %150
  %152 = icmp eq i32 %149, 0
  br i1 %152, label %153, label %162

153:                                              ; preds = %139, %45, %26, %144
  %154 = phi i64 [ %151, %144 ], [ %17, %26 ], [ %17, %45 ], [ %58, %139 ]
  br i1 %2, label %155, label %159

155:                                              ; preds = %153
  %156 = icmp eq i64 %154, 0
  br i1 %156, label %167, label %157

157:                                              ; preds = %155
  %158 = sub nsw i64 0, %154
  br label %159

159:                                              ; preds = %157, %153
  %160 = phi i64 [ %158, %157 ], [ %154, %153 ]
  %161 = sitofp i64 %160 to double
  br label %167

162:                                              ; preds = %144
  %163 = sub nsw i64 0, %151
  %164 = select i1 %2, i64 %163, i64 %151
  %165 = sitofp i64 %164 to double
  %166 = tail call double @ldexp(double %165, i32 %149) #12
  br label %167

167:                                              ; preds = %34, %39, %109, %114, %159, %162, %155, %12
  %168 = phi double [ %13, %12 ], [ %161, %159 ], [ %166, %162 ], [ -0.000000e+00, %155 ], [ 0x7FF8000000000000, %114 ], [ 0x7FF8000000000000, %109 ], [ 0x7FF8000000000000, %39 ], [ 0x7FF8000000000000, %34 ]
  ret double %168
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE8ParseIntEv(%"class.v8::internal::StringToIntHelper"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %3 = alloca %"class.v8::internal::String::FlatContent", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %6 = alloca %"class.v8::internal::String::FlatContent", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %8 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %9 = alloca %"class.v8::internal::String::FlatContent", align 8
  %10 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %11 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %12 = alloca %"class.v8::internal::String::FlatContent", align 8
  %13 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %14 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %40

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = load i64, i64* %19, align 8
  br label %21

21:                                               ; preds = %34, %17
  %22 = phi i64 [ %20, %17 ], [ %39, %34 ]
  %23 = and i64 %22, -4294967296
  %24 = add i64 %22, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = and i16 %31, 9
  %33 = zext i16 %32 to i32
  switch i32 %33, label %34 [
    i32 8, label %43
    i32 0, label %56
  ]

34:                                               ; preds = %21
  %35 = add i64 %22, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %23, %38
  br label %21

40:                                               ; preds = %1
  %41 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  br label %53

43:                                               ; preds = %21
  %44 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %44) #12
  %45 = bitcast %"class.v8::internal::String::FlatContent"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #12
  %46 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %20, i64* %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %12, %"class.v8::internal::String"* nonnull %48, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %11) #12
  %49 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %12, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %12, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %44) #12
  br label %53

53:                                               ; preds = %40, %43
  %54 = phi i32 [ %52, %43 ], [ %42, %40 ]
  %55 = phi i8* [ %50, %43 ], [ %15, %40 ]
  call void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKhEEvT_i(%"class.v8::internal::StringToIntHelper"* %0, i8* %55, i32 %54)
  br label %66

56:                                               ; preds = %21
  %57 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %57) #12
  %58 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #12
  %59 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #12
  %60 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %20, i64* %60, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %6, %"class.v8::internal::String"* nonnull %61, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %5) #12
  %62 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i16**
  %63 = load i16*, i16** %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 1
  %65 = load i32, i32* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %57) #12
  call void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKtEEvT_i(%"class.v8::internal::StringToIntHelper"* %0, i16* %63, i32 %65)
  br label %66

66:                                               ; preds = %56, %53
  %67 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %134

70:                                               ; preds = %66
  %71 = bitcast %"class.v8::internal::StringToIntHelper"* %0 to void (%"class.v8::internal::StringToIntHelper"*)***
  %72 = load void (%"class.v8::internal::StringToIntHelper"*)**, void (%"class.v8::internal::StringToIntHelper"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper"*)*, void (%"class.v8::internal::StringToIntHelper"*)** %72, i64 2
  %74 = load void (%"class.v8::internal::StringToIntHelper"*)*, void (%"class.v8::internal::StringToIntHelper"*)** %73, align 8
  call void %74(%"class.v8::internal::StringToIntHelper"* %0) #12
  %75 = load void (%"class.v8::internal::StringToIntHelper"*)**, void (%"class.v8::internal::StringToIntHelper"*)*** %71, align 8
  %76 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper"*)*, void (%"class.v8::internal::StringToIntHelper"*)** %75, i64 5
  %77 = load void (%"class.v8::internal::StringToIntHelper"*)*, void (%"class.v8::internal::StringToIntHelper"*)** %76, align 8
  call void %77(%"class.v8::internal::StringToIntHelper"* %0) #12
  %78 = load i32, i32* %67, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %134

80:                                               ; preds = %70
  %81 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 2, i32 0, i32 0
  %82 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %8, i64 0, i32 0
  %83 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i8*
  %84 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10 to i8*
  %85 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10, i64 0, i32 0
  %87 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i16**
  %88 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %2, i64 0, i32 0
  %89 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i8*
  %90 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4 to i8*
  %91 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0
  %93 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %94 = bitcast %"class.v8::internal::StringToIntHelper"* %0 to i1 (%"class.v8::internal::StringToIntHelper"*)***
  br label %95

95:                                               ; preds = %80, %128
  %96 = load i8*, i8** %14, align 8
  %97 = icmp eq i8* %96, null
  br i1 %97, label %98, label %122

98:                                               ; preds = %95
  %99 = load i64*, i64** %81, align 8
  %100 = load i64, i64* %99, align 8
  br label %101

101:                                              ; preds = %114, %98
  %102 = phi i64 [ %100, %98 ], [ %119, %114 ]
  %103 = and i64 %102, -4294967296
  %104 = add i64 %102, -1
  %105 = inttoptr i64 %104 to i32*
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = zext i32 %106 to i64
  %108 = or i64 %103, %107
  %109 = add i64 %108, 7
  %110 = inttoptr i64 %109 to i16*
  %111 = load atomic i16, i16* %110 monotonic, align 2
  %112 = and i16 %111, 9
  %113 = zext i16 %112 to i32
  switch i32 %113, label %114 [
    i32 8, label %120
    i32 0, label %125
  ]

114:                                              ; preds = %101
  %115 = add i64 %102, 11
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %103, %118
  br label %101

120:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %88) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %89) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #12
  store i64 %100, i64* %91, align 8
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %3, %"class.v8::internal::String"* nonnull %92, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %2) #12
  %121 = load i8*, i8** %93, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %89) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %88) #12
  br label %122

122:                                              ; preds = %95, %120
  %123 = phi i8* [ %121, %120 ], [ %96, %95 ]
  %124 = call zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKhEEbT_(%"class.v8::internal::StringToIntHelper"* %0, i8* %123)
  br i1 %124, label %134, label %128

125:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %82) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #12
  store i64 %100, i64* %85, align 8
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %9, %"class.v8::internal::String"* nonnull %86, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %8) #12
  %126 = load i16*, i16** %87, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %82) #12
  %127 = call zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKtEEbT_(%"class.v8::internal::StringToIntHelper"* %0, i16* %126)
  br i1 %127, label %134, label %128

128:                                              ; preds = %125, %122
  %129 = load i1 (%"class.v8::internal::StringToIntHelper"*)**, i1 (%"class.v8::internal::StringToIntHelper"*)*** %94, align 8
  %130 = getelementptr inbounds i1 (%"class.v8::internal::StringToIntHelper"*)*, i1 (%"class.v8::internal::StringToIntHelper"*)** %129, i64 4
  %131 = load i1 (%"class.v8::internal::StringToIntHelper"*)*, i1 (%"class.v8::internal::StringToIntHelper"*)** %130, align 8
  %132 = call zeroext i1 %131(%"class.v8::internal::StringToIntHelper"* %0) #12
  br i1 %132, label %133, label %95

133:                                              ; preds = %128
  store i32 1, i32* %67, align 4
  br label %134

134:                                              ; preds = %125, %122, %70, %66, %133
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKhEEvT_i(%"class.v8::internal::StringToIntHelper"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 6
  store i32 %2, i32* %5, align 8
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %27, label %9

9:                                                ; preds = %3
  %10 = load i8, i8* %1, align 1
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %31, label %23

16:                                               ; preds = %23
  %17 = load i8, i8* %25, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %9, %16
  %24 = phi i8* [ %25, %16 ], [ %1, %9 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %27, label %16

27:                                               ; preds = %23, %3
  %28 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 3, i32* %28, align 4
  br label %155

29:                                               ; preds = %16
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %29, %9
  %32 = phi i64 [ %4, %9 ], [ %30, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33, align 1
  switch i8 %34, label %50 [
    i8 43, label %35
    i8 45, label %40
  ]

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = icmp eq i8* %36, %7
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %39, align 4
  br label %155

40:                                               ; preds = %31
  %41 = getelementptr inbounds i8, i8* %33, i64 1
  %42 = icmp eq i8* %41, %7
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %44, align 4
  br label %155

45:                                               ; preds = %40, %35
  %46 = phi i8* [ %36, %35 ], [ %41, %40 ]
  %47 = phi i32 [ 1, %35 ], [ 0, %40 ]
  %48 = ptrtoint i8* %46 to i64
  %49 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 7
  store i32 %47, i32* %49, align 4
  br label %50

50:                                               ; preds = %45, %31
  %51 = phi i64 [ %32, %31 ], [ %48, %45 ]
  %52 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  switch i32 %53, label %111 [
    i32 0, label %54
    i32 16, label %91
  ]

54:                                               ; preds = %50
  store i32 10, i32* %52, align 8
  %55 = inttoptr i64 %51 to i8*
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 48
  br i1 %57, label %58, label %111

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %55, i64 1
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp eq i8* %59, %7
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %63, align 4
  br label %155

64:                                               ; preds = %58
  %65 = load i8, i8* %59, align 1
  switch i8 %65, label %72 [
    i8 120, label %66
    i8 88, label %66
  ]

66:                                               ; preds = %64, %64
  store i32 16, i32* %52, align 8
  %67 = getelementptr inbounds i8, i8* %55, i64 2
  %68 = ptrtoint i8* %67 to i64
  %69 = icmp eq i8* %67, %7
  br i1 %69, label %70, label %111

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %71, align 4
  br label %155

72:                                               ; preds = %64
  %73 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 9
  %74 = load i8, i8* %73, align 1, !range !3
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %72
  switch i8 %65, label %89 [
    i8 111, label %77
    i8 79, label %77
    i8 98, label %83
    i8 66, label %83
  ]

77:                                               ; preds = %76, %76
  store i32 8, i32* %52, align 8
  %78 = getelementptr inbounds i8, i8* %55, i64 2
  %79 = ptrtoint i8* %78 to i64
  %80 = icmp eq i8* %78, %7
  br i1 %80, label %81, label %111

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %82, align 4
  br label %155

83:                                               ; preds = %76, %76
  store i32 2, i32* %52, align 8
  %84 = getelementptr inbounds i8, i8* %55, i64 2
  %85 = ptrtoint i8* %84 to i64
  %86 = icmp eq i8* %84, %7
  br i1 %86, label %87, label %111

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %88, align 4
  br label %155

89:                                               ; preds = %76, %72
  %90 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  store i8 1, i8* %90, align 8
  br label %111

91:                                               ; preds = %50
  %92 = inttoptr i64 %51 to i8*
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %93, 48
  br i1 %94, label %95, label %111

95:                                               ; preds = %91
  %96 = getelementptr inbounds i8, i8* %92, i64 1
  %97 = ptrtoint i8* %96 to i64
  %98 = icmp eq i8* %96, %7
  br i1 %98, label %99, label %101

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %100, align 4
  br label %155

101:                                              ; preds = %95
  %102 = load i8, i8* %96, align 1
  switch i8 %102, label %109 [
    i8 120, label %103
    i8 88, label %103
  ]

103:                                              ; preds = %101, %101
  %104 = getelementptr inbounds i8, i8* %92, i64 2
  %105 = ptrtoint i8* %104 to i64
  %106 = icmp eq i8* %104, %7
  br i1 %106, label %107, label %111

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %108, align 4
  br label %155

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  store i8 1, i8* %110, align 8
  br label %111

111:                                              ; preds = %50, %109, %103, %91, %54, %77, %83, %89, %66
  %112 = phi i32 [ %53, %50 ], [ 16, %109 ], [ 16, %103 ], [ 16, %91 ], [ 10, %89 ], [ 2, %83 ], [ 8, %77 ], [ 16, %66 ], [ 10, %54 ]
  %113 = phi i64 [ %51, %50 ], [ %97, %109 ], [ %105, %103 ], [ %51, %91 ], [ %60, %89 ], [ %85, %83 ], [ %79, %77 ], [ %68, %66 ], [ %51, %54 ]
  %114 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  br label %115

115:                                              ; preds = %120, %111
  %116 = phi i64 [ %113, %111 ], [ %122, %120 ]
  %117 = inttoptr i64 %116 to i8*
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 48
  br i1 %119, label %120, label %126

120:                                              ; preds = %115
  store i8 1, i8* %114, align 8
  %121 = getelementptr inbounds i8, i8* %117, i64 1
  %122 = ptrtoint i8* %121 to i64
  %123 = icmp eq i8* %121, %7
  br i1 %123, label %124, label %115

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %125, align 4
  br label %155

126:                                              ; preds = %115
  %127 = zext i8 %118 to i32
  %128 = load i8, i8* %114, align 8, !range !3
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %151

130:                                              ; preds = %126
  %131 = add nsw i32 %127, -48
  %132 = icmp ult i32 %131, 10
  %133 = add nsw i32 %112, 48
  %134 = icmp sgt i32 %133, %127
  %135 = and i1 %132, %134
  br i1 %135, label %151, label %136

136:                                              ; preds = %130
  %137 = icmp sgt i32 %112, 10
  %138 = icmp ugt i8 %118, 96
  %139 = and i1 %138, %137
  %140 = add nsw i32 %112, 87
  %141 = icmp sgt i32 %140, %127
  %142 = and i1 %139, %141
  br i1 %142, label %151, label %143

143:                                              ; preds = %136
  %144 = icmp ugt i8 %118, 64
  %145 = and i1 %144, %137
  %146 = add nuw nsw i32 %112, 55
  %147 = icmp sgt i32 %146, %127
  %148 = and i1 %145, %147
  br i1 %148, label %151, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %150, align 4
  br label %155

151:                                              ; preds = %143, %136, %130, %126
  %152 = sub i64 %116, %4
  %153 = trunc i64 %152 to i32
  %154 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 5
  store i32 %153, i32* %154, align 4
  br label %155

155:                                              ; preds = %151, %149, %124, %107, %99, %87, %81, %70, %62, %43, %38, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE19DetectRadixInternalIPKtEEvT_i(%"class.v8::internal::StringToIntHelper"*, i16*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i16* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 6
  store i32 %2, i32* %5, align 8
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i16, i16* %1, i64 %6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %33, label %9

9:                                                ; preds = %3, %28
  %10 = phi i64 [ %31, %28 ], [ %4, %3 ]
  %11 = phi i16* [ %30, %28 ], [ %1, %3 ]
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = icmp ult i16 %12, 256
  br i1 %14, label %22, label %15

15:                                               ; preds = %9
  %16 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %13) #12
  %17 = and i32 %13, 65534
  %18 = icmp eq i32 %17, 8232
  %19 = or i1 %18, %16
  br i1 %19, label %20, label %35

20:                                               ; preds = %15
  %21 = inttoptr i64 %10 to i16*
  br label %28

22:                                               ; preds = %9
  %23 = zext i16 %12 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %22, %20
  %29 = phi i16* [ %21, %20 ], [ %11, %22 ]
  %30 = getelementptr inbounds i16, i16* %29, i64 1
  %31 = ptrtoint i16* %30 to i64
  %32 = icmp eq i16* %30, %7
  br i1 %32, label %33, label %9

33:                                               ; preds = %28, %3
  %34 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 3, i32* %34, align 4
  br label %159

35:                                               ; preds = %22, %15
  %36 = inttoptr i64 %10 to i16*
  %37 = load i16, i16* %36, align 2
  switch i16 %37, label %53 [
    i16 43, label %38
    i16 45, label %43
  ]

38:                                               ; preds = %35
  %39 = getelementptr inbounds i16, i16* %36, i64 1
  %40 = icmp eq i16* %39, %7
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %42, align 4
  br label %159

43:                                               ; preds = %35
  %44 = getelementptr inbounds i16, i16* %36, i64 1
  %45 = icmp eq i16* %44, %7
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %47, align 4
  br label %159

48:                                               ; preds = %43, %38
  %49 = phi i16* [ %39, %38 ], [ %44, %43 ]
  %50 = phi i32 [ 1, %38 ], [ 0, %43 ]
  %51 = ptrtoint i16* %49 to i64
  %52 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 7
  store i32 %50, i32* %52, align 4
  br label %53

53:                                               ; preds = %48, %35
  %54 = phi i64 [ %10, %35 ], [ %51, %48 ]
  %55 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  switch i32 %56, label %114 [
    i32 0, label %57
    i32 16, label %94
  ]

57:                                               ; preds = %53
  store i32 10, i32* %55, align 8
  %58 = inttoptr i64 %54 to i16*
  %59 = load i16, i16* %58, align 2
  %60 = icmp eq i16 %59, 48
  br i1 %60, label %61, label %114

61:                                               ; preds = %57
  %62 = getelementptr inbounds i16, i16* %58, i64 1
  %63 = ptrtoint i16* %62 to i64
  %64 = icmp eq i16* %62, %7
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %66, align 4
  br label %159

67:                                               ; preds = %61
  %68 = load i16, i16* %62, align 2
  switch i16 %68, label %75 [
    i16 120, label %69
    i16 88, label %69
  ]

69:                                               ; preds = %67, %67
  store i32 16, i32* %55, align 8
  %70 = getelementptr inbounds i16, i16* %58, i64 2
  %71 = ptrtoint i16* %70 to i64
  %72 = icmp eq i16* %70, %7
  br i1 %72, label %73, label %114

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %74, align 4
  br label %159

75:                                               ; preds = %67
  %76 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 9
  %77 = load i8, i8* %76, align 1, !range !3
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  switch i16 %68, label %92 [
    i16 111, label %80
    i16 79, label %80
    i16 98, label %86
    i16 66, label %86
  ]

80:                                               ; preds = %79, %79
  store i32 8, i32* %55, align 8
  %81 = getelementptr inbounds i16, i16* %58, i64 2
  %82 = ptrtoint i16* %81 to i64
  %83 = icmp eq i16* %81, %7
  br i1 %83, label %84, label %114

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %85, align 4
  br label %159

86:                                               ; preds = %79, %79
  store i32 2, i32* %55, align 8
  %87 = getelementptr inbounds i16, i16* %58, i64 2
  %88 = ptrtoint i16* %87 to i64
  %89 = icmp eq i16* %87, %7
  br i1 %89, label %90, label %114

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %91, align 4
  br label %159

92:                                               ; preds = %79, %75
  %93 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  store i8 1, i8* %93, align 8
  br label %114

94:                                               ; preds = %53
  %95 = inttoptr i64 %54 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = icmp eq i16 %96, 48
  br i1 %97, label %98, label %114

98:                                               ; preds = %94
  %99 = getelementptr inbounds i16, i16* %95, i64 1
  %100 = ptrtoint i16* %99 to i64
  %101 = icmp eq i16* %99, %7
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %103, align 4
  br label %159

104:                                              ; preds = %98
  %105 = load i16, i16* %99, align 2
  switch i16 %105, label %112 [
    i16 120, label %106
    i16 88, label %106
  ]

106:                                              ; preds = %104, %104
  %107 = getelementptr inbounds i16, i16* %95, i64 2
  %108 = ptrtoint i16* %107 to i64
  %109 = icmp eq i16* %107, %7
  br i1 %109, label %110, label %114

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %111, align 4
  br label %159

112:                                              ; preds = %104
  %113 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  store i8 1, i8* %113, align 8
  br label %114

114:                                              ; preds = %53, %112, %106, %94, %57, %80, %86, %92, %69
  %115 = phi i32 [ %56, %53 ], [ 16, %112 ], [ 16, %106 ], [ 16, %94 ], [ 10, %92 ], [ 2, %86 ], [ 8, %80 ], [ 16, %69 ], [ 10, %57 ]
  %116 = phi i64 [ %54, %53 ], [ %100, %112 ], [ %108, %106 ], [ %54, %94 ], [ %63, %92 ], [ %88, %86 ], [ %82, %80 ], [ %71, %69 ], [ %54, %57 ]
  %117 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 8
  br label %118

118:                                              ; preds = %123, %114
  %119 = phi i64 [ %116, %114 ], [ %125, %123 ]
  %120 = inttoptr i64 %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = icmp eq i16 %121, 48
  br i1 %122, label %123, label %129

123:                                              ; preds = %118
  store i8 1, i8* %117, align 8
  %124 = getelementptr inbounds i16, i16* %120, i64 1
  %125 = ptrtoint i16* %124 to i64
  %126 = icmp eq i16* %124, %7
  br i1 %126, label %127, label %118

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 4, i32* %128, align 4
  br label %159

129:                                              ; preds = %118
  %130 = zext i16 %121 to i32
  %131 = load i8, i8* %117, align 8, !range !3
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %154

133:                                              ; preds = %129
  %134 = add nsw i32 %130, -48
  %135 = icmp ult i32 %134, 10
  %136 = add nsw i32 %115, 48
  %137 = icmp sgt i32 %136, %130
  %138 = and i1 %135, %137
  br i1 %138, label %154, label %139

139:                                              ; preds = %133
  %140 = icmp sgt i32 %115, 10
  %141 = icmp ugt i16 %121, 96
  %142 = and i1 %141, %140
  %143 = add nsw i32 %115, 87
  %144 = icmp sgt i32 %143, %130
  %145 = and i1 %142, %144
  br i1 %145, label %154, label %146

146:                                              ; preds = %139
  %147 = icmp ugt i16 %121, 64
  %148 = and i1 %147, %140
  %149 = add nuw nsw i32 %115, 55
  %150 = icmp sgt i32 %149, %130
  %151 = and i1 %148, %150
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  %153 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %153, align 4
  br label %159

154:                                              ; preds = %146, %139, %133, %129
  %155 = sub i64 %119, %4
  %156 = lshr exact i64 %155, 1
  %157 = trunc i64 %156 to i32
  %158 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 5
  store i32 %157, i32* %158, align 4
  br label %159

159:                                              ; preds = %154, %152, %127, %110, %102, %90, %84, %73, %65, %46, %41, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKhEEbT_(%"class.v8::internal::StringToIntHelper"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %12, 10
  %14 = add i32 %12, 48
  %15 = select i1 %13, i32 %14, i32 58
  %16 = add nsw i32 %12, 87
  %17 = add nsw i32 %12, 55
  %18 = bitcast %"class.v8::internal::StringToIntHelper"* %0 to void (%"class.v8::internal::StringToIntHelper"*, i32, i32)***
  %19 = sub nsw i64 %9, %5
  br label %20

20:                                               ; preds = %84, %2
  %21 = phi i64 [ 0, %2 ], [ %53, %84 ]
  %22 = phi i8 [ 0, %2 ], [ %56, %84 ]
  br label %23

23:                                               ; preds = %46, %20
  %24 = phi i64 [ %21, %20 ], [ %50, %46 ]
  %25 = phi i32 [ 0, %20 ], [ %49, %46 ]
  %26 = phi i32 [ 1, %20 ], [ %44, %46 ]
  %27 = getelementptr inbounds i8, i8* %6, i64 %24
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp ugt i8 %28, 47
  %31 = icmp sgt i32 %15, %29
  %32 = and i1 %30, %31
  br i1 %32, label %41, label %33

33:                                               ; preds = %23
  %34 = icmp ugt i8 %28, 96
  %35 = icmp sgt i32 %16, %29
  %36 = and i1 %34, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = icmp ugt i8 %28, 64
  %39 = icmp sgt i32 %17, %29
  %40 = and i1 %38, %39
  br i1 %40, label %41, label %52

41:                                               ; preds = %37, %33, %23
  %42 = phi i32 [ -48, %23 ], [ -87, %33 ], [ -55, %37 ]
  %43 = load i32, i32* %11, align 8
  %44 = mul i32 %43, %26
  %45 = icmp ugt i32 %44, 119304647
  br i1 %45, label %52, label %46

46:                                               ; preds = %41
  %47 = add nsw i32 %42, %29
  %48 = mul i32 %43, %25
  %49 = add i32 %48, %47
  %50 = add i64 %24, 1
  %51 = icmp eq i64 %50, %19
  br i1 %51, label %52, label %23

52:                                               ; preds = %46, %37, %41
  %53 = phi i64 [ %24, %37 ], [ %24, %41 ], [ %19, %46 ]
  %54 = phi i32 [ %25, %37 ], [ %25, %41 ], [ %49, %46 ]
  %55 = phi i32 [ %26, %37 ], [ %26, %41 ], [ %44, %46 ]
  %56 = phi i8 [ 1, %37 ], [ %22, %41 ], [ 1, %46 ]
  %57 = load void (%"class.v8::internal::StringToIntHelper"*, i32, i32)**, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*** %18, align 8
  %58 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)** %57, i64 3
  %59 = load void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)** %58, align 8
  tail call void %59(%"class.v8::internal::StringToIntHelper"* %0, i32 %55, i32 %54) #12
  %60 = and i8 %56, 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %84, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds i8, i8* %6, i64 %53
  %64 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 10
  %65 = load i8, i8* %64, align 2, !range !3
  %66 = icmp ne i8 %65, 0
  %67 = icmp eq i8* %63, %10
  %68 = or i1 %67, %66
  br i1 %68, label %82, label %69

69:                                               ; preds = %62, %77
  %70 = phi i8* [ %78, %77 ], [ %63, %62 ]
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = and i8 %74, 8
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %69
  %78 = getelementptr inbounds i8, i8* %70, i64 1
  %79 = icmp eq i8* %78, %10
  br i1 %79, label %82, label %69

80:                                               ; preds = %69
  %81 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %81, align 4
  br label %92

82:                                               ; preds = %77, %62
  %83 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 5, i32* %83, align 4
  br label %92

84:                                               ; preds = %52
  %85 = icmp slt i64 %53, 10240
  br i1 %85, label %20, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds i8, i8* %6, i64 %53
  %88 = ptrtoint i8* %87 to i64
  %89 = ptrtoint i8* %1 to i64
  %90 = sub i64 %88, %89
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %3, align 4
  br label %92

92:                                               ; preds = %80, %82, %86
  %93 = phi i1 [ false, %86 ], [ true, %82 ], [ true, %80 ]
  ret i1 %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_7IsolateEE18ParseChunkInternalIPKtEEbT_(%"class.v8::internal::StringToIntHelper"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i16, i16* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16, i16* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %12, 10
  %14 = add i32 %12, 48
  %15 = select i1 %13, i32 %14, i32 58
  %16 = add nsw i32 %12, 87
  %17 = add nsw i32 %12, 55
  %18 = bitcast %"class.v8::internal::StringToIntHelper"* %0 to void (%"class.v8::internal::StringToIntHelper"*, i32, i32)***
  %19 = shl nsw i64 %9, 1
  %20 = add nsw i64 %19, -2
  br label %21

21:                                               ; preds = %99, %2
  %22 = phi i64 [ 0, %2 ], [ %60, %99 ]
  %23 = phi i8 [ 0, %2 ], [ %63, %99 ]
  %24 = add nsw i64 %22, 1
  %25 = add i64 %22, %5
  %26 = shl i64 %25, 1
  %27 = sub i64 %20, %26
  %28 = lshr exact i64 %27, 1
  %29 = add i64 %24, %28
  br label %30

30:                                               ; preds = %53, %21
  %31 = phi i64 [ %22, %21 ], [ %57, %53 ]
  %32 = phi i32 [ 0, %21 ], [ %56, %53 ]
  %33 = phi i32 [ 1, %21 ], [ %51, %53 ]
  %34 = getelementptr inbounds i16, i16* %6, i64 %31
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp ugt i16 %35, 47
  %38 = icmp sgt i32 %15, %36
  %39 = and i1 %37, %38
  br i1 %39, label %48, label %40

40:                                               ; preds = %30
  %41 = icmp ugt i16 %35, 96
  %42 = icmp sgt i32 %16, %36
  %43 = and i1 %41, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = icmp ugt i16 %35, 64
  %46 = icmp sgt i32 %17, %36
  %47 = and i1 %45, %46
  br i1 %47, label %48, label %59

48:                                               ; preds = %44, %40, %30
  %49 = phi i32 [ -48, %30 ], [ -87, %40 ], [ -55, %44 ]
  %50 = load i32, i32* %11, align 8
  %51 = mul i32 %50, %33
  %52 = icmp ugt i32 %51, 119304647
  br i1 %52, label %59, label %53

53:                                               ; preds = %48
  %54 = add nsw i32 %49, %36
  %55 = mul i32 %50, %32
  %56 = add i32 %55, %54
  %57 = add i64 %31, 1
  %58 = icmp eq i64 %57, %29
  br i1 %58, label %59, label %30

59:                                               ; preds = %53, %44, %48
  %60 = phi i64 [ %31, %44 ], [ %31, %48 ], [ %29, %53 ]
  %61 = phi i32 [ %32, %44 ], [ %32, %48 ], [ %56, %53 ]
  %62 = phi i32 [ %33, %44 ], [ %33, %48 ], [ %51, %53 ]
  %63 = phi i8 [ 1, %44 ], [ %23, %48 ], [ 1, %53 ]
  %64 = load void (%"class.v8::internal::StringToIntHelper"*, i32, i32)**, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*** %18, align 8
  %65 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)** %64, i64 3
  %66 = load void (%"class.v8::internal::StringToIntHelper"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper"*, i32, i32)** %65, align 8
  tail call void %66(%"class.v8::internal::StringToIntHelper"* %0, i32 %62, i32 %61) #12
  %67 = and i8 %63, 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %99, label %69

69:                                               ; preds = %59
  %70 = getelementptr inbounds i16, i16* %6, i64 %60
  %71 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 10
  %72 = load i8, i8* %71, align 2, !range !3
  %73 = icmp ne i8 %72, 0
  %74 = icmp eq i16* %70, %10
  %75 = or i1 %74, %73
  br i1 %75, label %97, label %76

76:                                               ; preds = %69, %92
  %77 = phi i16* [ %93, %92 ], [ %70, %69 ]
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp ult i16 %78, 256
  br i1 %80, label %86, label %81

81:                                               ; preds = %76
  %82 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %79) #12
  %83 = and i32 %79, 65534
  %84 = icmp eq i32 %83, 8232
  %85 = or i1 %84, %82
  br i1 %85, label %92, label %95

86:                                               ; preds = %76
  %87 = zext i16 %78 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = and i8 %89, 8
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %81, %86
  %93 = getelementptr inbounds i16, i16* %77, i64 1
  %94 = icmp eq i16* %93, %10
  br i1 %94, label %97, label %76

95:                                               ; preds = %86, %81
  %96 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 2, i32* %96, align 4
  br label %108

97:                                               ; preds = %92, %69
  %98 = getelementptr inbounds %"class.v8::internal::StringToIntHelper", %"class.v8::internal::StringToIntHelper"* %0, i64 0, i32 11
  store i32 5, i32* %98, align 4
  br label %108

99:                                               ; preds = %59
  %100 = icmp slt i64 %60, 10240
  br i1 %100, label %21, label %101

101:                                              ; preds = %99
  %102 = getelementptr inbounds i16, i16* %6, i64 %60
  %103 = ptrtoint i16* %102 to i64
  %104 = ptrtoint i16* %1 to i64
  %105 = sub i64 %103, %104
  %106 = lshr exact i64 %105, 1
  %107 = trunc i64 %106 to i32
  store i32 %107, i32* %3, align 4
  br label %108

108:                                              ; preds = %95, %97, %101
  %109 = phi i1 [ false, %101 ], [ true, %97 ], [ true, %95 ]
  ret i1 %109
}

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @fmod(double, double) local_unnamed_addr #9

declare void @_ZN2v84base11SharedMutex12UnlockSharedEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #3

declare void @_ZN2v84base11SharedMutex10LockSharedEv(%"class.v8::base::SharedMutex"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZN2v88internal25InternalStringToIntDoubleILi3EPcS2_EEdT0_T1_bb(i8*, i8*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 comdat {
  br label %5

5:                                                ; preds = %12, %4
  %6 = phi i8* [ %0, %4 ], [ %13, %12 ]
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 48
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = and i8 %7, -8
  %11 = icmp eq i8 %10, 48
  br i1 %11, label %17, label %31

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %6, i64 1
  %14 = icmp eq i8* %13, %1
  br i1 %14, label %15, label %5

15:                                               ; preds = %12
  %16 = select i1 %2, double -0.000000e+00, double 0.000000e+00
  br label %158

17:                                               ; preds = %9, %131
  %18 = phi i64 [ %24, %131 ], [ 0, %9 ]
  %19 = phi i8* [ %129, %131 ], [ %6, %9 ]
  %20 = phi i8 [ %132, %131 ], [ %7, %9 ]
  %21 = sext i8 %20 to i64
  %22 = shl nsw i64 %18, 3
  %23 = add i64 %22, -48
  %24 = add i64 %23, %21
  %25 = ashr i64 %24, 53
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %128, label %28

28:                                               ; preds = %17
  %29 = trunc i64 %25 to i32
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %58, label %64

31:                                               ; preds = %131, %9
  %32 = phi i8 [ %7, %9 ], [ %132, %131 ]
  %33 = phi i8* [ %6, %9 ], [ %129, %131 ]
  %34 = phi i64 [ 0, %9 ], [ %24, %131 ]
  %35 = icmp eq i8* %33, %1
  %36 = or i1 %35, %3
  br i1 %36, label %144, label %37

37:                                               ; preds = %31, %56
  %38 = phi i8 [ %57, %56 ], [ %32, %31 ]
  %39 = phi i8* [ %54, %56 ], [ %33, %31 ]
  %40 = sext i8 %38 to i32
  %41 = icmp sgt i8 %38, -1
  br i1 %41, label %47, label %42

42:                                               ; preds = %37
  %43 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %40) #12
  %44 = and i32 %40, -2
  %45 = icmp eq i32 %44, 8232
  %46 = or i1 %45, %43
  br i1 %46, label %53, label %158

47:                                               ; preds = %37
  %48 = zext i32 %40 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = and i8 %50, 8
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %158, label %53

53:                                               ; preds = %42, %47
  %54 = getelementptr inbounds i8, i8* %39, i64 1
  %55 = icmp eq i8* %54, %1
  br i1 %55, label %144, label %56

56:                                               ; preds = %53
  %57 = load i8, i8* %54, align 1
  br label %37

58:                                               ; preds = %28, %58
  %59 = phi i32 [ %61, %58 ], [ 1, %28 ]
  %60 = phi i32 [ %62, %58 ], [ %29, %28 ]
  %61 = add nuw nsw i32 %59, 1
  %62 = lshr i32 %60, 1
  %63 = icmp ugt i32 %60, 3
  br i1 %63, label %58, label %64

64:                                               ; preds = %58, %28
  %65 = phi i32 [ 1, %28 ], [ %61, %58 ]
  %66 = shl nsw i32 -1, %65
  %67 = xor i32 %66, -1
  %68 = trunc i64 %24 to i32
  %69 = and i32 %67, %68
  %70 = zext i32 %65 to i64
  %71 = ashr i64 %24, %70
  %72 = getelementptr inbounds i8, i8* %19, i64 1
  %73 = icmp eq i8* %72, %1
  br i1 %73, label %112, label %74

74:                                               ; preds = %64, %84
  %75 = phi i8* [ %90, %84 ], [ %72, %64 ]
  %76 = phi i8 [ %88, %84 ], [ 1, %64 ]
  %77 = phi i32 [ %89, %84 ], [ %65, %64 ]
  %78 = load i8, i8* %75, align 1
  %79 = sext i8 %78 to i32
  %80 = add nsw i32 %79, -48
  %81 = icmp ult i32 %80, 10
  %82 = icmp slt i8 %78, 56
  %83 = and i1 %82, %81
  br i1 %83, label %84, label %92

84:                                               ; preds = %74
  %85 = icmp ne i8 %76, 0
  %86 = icmp eq i8 %78, 48
  %87 = and i1 %85, %86
  %88 = zext i1 %87 to i8
  %89 = add nuw nsw i32 %77, 3
  %90 = getelementptr inbounds i8, i8* %75, i64 1
  %91 = icmp eq i8* %90, %1
  br i1 %91, label %112, label %74

92:                                               ; preds = %74
  br i1 %3, label %112, label %93

93:                                               ; preds = %92, %109
  %94 = phi i8* [ %110, %109 ], [ %75, %92 ]
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = icmp sgt i8 %95, -1
  br i1 %97, label %103, label %98

98:                                               ; preds = %93
  %99 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %96) #12
  %100 = and i32 %96, -2
  %101 = icmp eq i32 %100, 8232
  %102 = or i1 %101, %99
  br i1 %102, label %109, label %158

103:                                              ; preds = %93
  %104 = zext i32 %96 to i64
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = and i8 %106, 8
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %158, label %109

109:                                              ; preds = %98, %103
  %110 = getelementptr inbounds i8, i8* %94, i64 1
  %111 = icmp eq i8* %110, %1
  br i1 %111, label %112, label %93

112:                                              ; preds = %84, %109, %64, %92
  %113 = phi i8 [ %76, %92 ], [ 1, %64 ], [ %76, %109 ], [ %88, %84 ]
  %114 = phi i32 [ %77, %92 ], [ %65, %64 ], [ %77, %109 ], [ %89, %84 ]
  %115 = add nsw i32 %65, -1
  %116 = shl i32 1, %115
  %117 = icmp sgt i32 %69, %116
  br i1 %117, label %118, label %120

118:                                              ; preds = %112
  %119 = add nsw i64 %71, 1
  br label %135

120:                                              ; preds = %112
  %121 = icmp eq i32 %69, %116
  br i1 %121, label %122, label %135

122:                                              ; preds = %120
  %123 = and i64 %71, 1
  %124 = xor i8 %113, 1
  %125 = zext i8 %124 to i64
  %126 = or i64 %123, %125
  %127 = add nsw i64 %126, %71
  br label %135

128:                                              ; preds = %17
  %129 = getelementptr inbounds i8, i8* %19, i64 1
  %130 = icmp eq i8* %129, %1
  br i1 %130, label %144, label %131

131:                                              ; preds = %128
  %132 = load i8, i8* %129, align 1
  %133 = and i8 %132, -8
  %134 = icmp eq i8 %133, 48
  br i1 %134, label %17, label %31

135:                                              ; preds = %118, %120, %122
  %136 = phi i64 [ %119, %118 ], [ %71, %120 ], [ %127, %122 ]
  %137 = and i64 %136, 9007199254740992
  %138 = lshr exact i64 %137, 53
  %139 = trunc i64 %138 to i32
  %140 = add nuw nsw i32 %114, %139
  %141 = lshr exact i64 %137, 53
  %142 = ashr i64 %136, %141
  %143 = icmp eq i32 %140, 0
  br i1 %143, label %144, label %153

144:                                              ; preds = %128, %53, %31, %135
  %145 = phi i64 [ %142, %135 ], [ %34, %31 ], [ %34, %53 ], [ %24, %128 ]
  br i1 %2, label %146, label %150

146:                                              ; preds = %144
  %147 = icmp eq i64 %145, 0
  br i1 %147, label %158, label %148

148:                                              ; preds = %146
  %149 = sub nsw i64 0, %145
  br label %150

150:                                              ; preds = %148, %144
  %151 = phi i64 [ %149, %148 ], [ %145, %144 ]
  %152 = sitofp i64 %151 to double
  br label %158

153:                                              ; preds = %135
  %154 = sub nsw i64 0, %142
  %155 = select i1 %2, i64 %154, i64 %142
  %156 = sitofp i64 %155 to double
  %157 = tail call double @ldexp(double %156, i32 %140) #12
  br label %158

158:                                              ; preds = %98, %103, %42, %47, %150, %153, %146, %15
  %159 = phi double [ %16, %15 ], [ %152, %150 ], [ %157, %153 ], [ -0.000000e+00, %146 ], [ 0x7FF8000000000000, %47 ], [ 0x7FF8000000000000, %42 ], [ 0x7FF8000000000000, %103 ], [ 0x7FF8000000000000, %98 ]
  ret double %159
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEED0Ev(%"class.v8::internal::StringToBigIntHelper"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StringToBigIntHelper"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE14AllocateResultEv(%"class.v8::internal::StringToBigIntHelper"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 6
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = sub nsw i32 %3, %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  %14 = zext i1 %13 to i8
  %15 = tail call i64* @_ZN2v88internal6BigInt11AllocateForINS0_7IsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %8, i32 %10, i32 %6, i32 1, i8 zeroext %14) #12
  %16 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 1
  %17 = icmp eq i64* %15, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %1
  %19 = ptrtoint i64* %15 to i64
  %20 = bitcast %"class.v8::internal::Handle.1129"* %16 to i64*
  store i64 %19, i64* %20, align 8
  br label %24

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %16, i64 0, i32 0, i32 0
  store i64* null, i64** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 0, i32 11
  store i32 1, i32* %23, align 4
  br label %24

24:                                               ; preds = %18, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_7IsolateEE17ResultMultiplyAddEjj(%"class.v8::internal::StringToBigIntHelper"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper", %"class.v8::internal::StringToBigIntHelper"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = zext i32 %1 to i64
  %8 = zext i32 %2 to i64
  tail call void @_ZN2v88internal6BigInt18InplaceMultiplyAddENS0_22FreshlyAllocatedBigIntEmm(i64 %6, i64 %7, i64 %8) #12
  ret void
}

declare i64* @_ZN2v88internal6BigInt11AllocateForINS0_7IsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i32, i32, i32, i8 zeroext) local_unnamed_addr #3

declare void @_ZN2v88internal6BigInt18InplaceMultiplyAddENS0_22FreshlyAllocatedBigIntEmm(i64, i64, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal6BigInt4ZeroINS0_7IsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal6BigInt8FinalizeINS0_7IsolateEEENS0_6HandleIS1_EENS4_INS0_22FreshlyAllocatedBigIntEEEb(i64*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEED0Ev(%"class.v8::internal::StringToBigIntHelper.1130"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StringToBigIntHelper.1130"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE14AllocateResultEv(%"class.v8::internal::StringToBigIntHelper.1130"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 6
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = sub nsw i32 %3, %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.v8::internal::LocalIsolate"*, %"class.v8::internal::LocalIsolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  %14 = zext i1 %13 to i8
  %15 = tail call i64* @_ZN2v88internal6BigInt11AllocateForINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"* %8, i32 %10, i32 %6, i32 1, i8 zeroext %14) #12
  %16 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 1
  %17 = icmp eq i64* %15, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %1
  %19 = ptrtoint i64* %15 to i64
  %20 = bitcast %"class.v8::internal::Handle.1129"* %16 to i64*
  store i64 %19, i64* %20, align 8
  br label %24

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"class.v8::internal::Handle.1129", %"class.v8::internal::Handle.1129"* %16, i64 0, i32 0, i32 0
  store i64* null, i64** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 0, i32 11
  store i32 1, i32* %23, align 4
  br label %24

24:                                               ; preds = %18, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE17ResultMultiplyAddEjj(%"class.v8::internal::StringToBigIntHelper.1130"*, i32, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::StringToBigIntHelper.1130", %"class.v8::internal::StringToBigIntHelper.1130"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = load i64, i64* %5, align 8
  %7 = zext i32 %1 to i64
  %8 = zext i32 %2 to i64
  tail call void @_ZN2v88internal6BigInt18InplaceMultiplyAddENS0_22FreshlyAllocatedBigIntEmm(i64 %6, i64 %7, i64 %8) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal20StringToBigIntHelperINS0_12LocalIsolateEE16CheckTerminationEv(%"class.v8::internal::StringToBigIntHelper.1130"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18HandleSpecialCasesEv(%"class.v8::internal::StringToIntHelper.1131"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare i64* @_ZN2v88internal6BigInt11AllocateForINS0_12LocalIsolateEEENS0_11MaybeHandleINS0_22FreshlyAllocatedBigIntEEEPT_iiNS0_11ShouldThrowENS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"*, i32, i32, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE8ParseIntEv(%"class.v8::internal::StringToIntHelper.1131"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %3 = alloca %"class.v8::internal::String::FlatContent", align 8
  %4 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %5 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %6 = alloca %"class.v8::internal::String::FlatContent", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %8 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %9 = alloca %"class.v8::internal::String::FlatContent", align 8
  %10 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %11 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %12 = alloca %"class.v8::internal::String::FlatContent", align 8
  %13 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %14 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 3
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %40

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = load i64, i64* %19, align 8
  br label %21

21:                                               ; preds = %34, %17
  %22 = phi i64 [ %20, %17 ], [ %39, %34 ]
  %23 = and i64 %22, -4294967296
  %24 = add i64 %22, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = zext i32 %26 to i64
  %28 = or i64 %23, %27
  %29 = add i64 %28, 7
  %30 = inttoptr i64 %29 to i16*
  %31 = load atomic i16, i16* %30 monotonic, align 2
  %32 = and i16 %31, 9
  %33 = zext i16 %32 to i32
  switch i32 %33, label %34 [
    i32 8, label %43
    i32 0, label %56
  ]

34:                                               ; preds = %21
  %35 = add i64 %22, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %23, %38
  br label %21

40:                                               ; preds = %1
  %41 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  br label %53

43:                                               ; preds = %21
  %44 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %44) #12
  %45 = bitcast %"class.v8::internal::String::FlatContent"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #12
  %46 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %20, i64* %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %13, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %12, %"class.v8::internal::String"* nonnull %48, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %11) #12
  %49 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %12, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %12, i64 0, i32 1
  %52 = load i32, i32* %51, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %44) #12
  br label %53

53:                                               ; preds = %40, %43
  %54 = phi i32 [ %52, %43 ], [ %42, %40 ]
  %55 = phi i8* [ %50, %43 ], [ %15, %40 ]
  call void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKhEEvT_i(%"class.v8::internal::StringToIntHelper.1131"* %0, i8* %55, i32 %54)
  br label %66

56:                                               ; preds = %21
  %57 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %57) #12
  %58 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #12
  %59 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #12
  %60 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %20, i64* %60, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %7, i64 0, i32 0
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %6, %"class.v8::internal::String"* nonnull %61, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %5) #12
  %62 = bitcast %"class.v8::internal::String::FlatContent"* %6 to i16**
  %63 = load i16*, i16** %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %6, i64 0, i32 1
  %65 = load i32, i32* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %57) #12
  call void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKtEEvT_i(%"class.v8::internal::StringToIntHelper.1131"* %0, i16* %63, i32 %65)
  br label %66

66:                                               ; preds = %56, %53
  %67 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %134

70:                                               ; preds = %66
  %71 = bitcast %"class.v8::internal::StringToIntHelper.1131"* %0 to void (%"class.v8::internal::StringToIntHelper.1131"*)***
  %72 = load void (%"class.v8::internal::StringToIntHelper.1131"*)**, void (%"class.v8::internal::StringToIntHelper.1131"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper.1131"*)*, void (%"class.v8::internal::StringToIntHelper.1131"*)** %72, i64 2
  %74 = load void (%"class.v8::internal::StringToIntHelper.1131"*)*, void (%"class.v8::internal::StringToIntHelper.1131"*)** %73, align 8
  call void %74(%"class.v8::internal::StringToIntHelper.1131"* %0) #12
  %75 = load void (%"class.v8::internal::StringToIntHelper.1131"*)**, void (%"class.v8::internal::StringToIntHelper.1131"*)*** %71, align 8
  %76 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper.1131"*)*, void (%"class.v8::internal::StringToIntHelper.1131"*)** %75, i64 5
  %77 = load void (%"class.v8::internal::StringToIntHelper.1131"*)*, void (%"class.v8::internal::StringToIntHelper.1131"*)** %76, align 8
  call void %77(%"class.v8::internal::StringToIntHelper.1131"* %0) #12
  %78 = load i32, i32* %67, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %134

80:                                               ; preds = %70
  %81 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 2, i32 0, i32 0
  %82 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %8, i64 0, i32 0
  %83 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i8*
  %84 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10 to i8*
  %85 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %10, i64 0, i32 0
  %87 = bitcast %"class.v8::internal::String::FlatContent"* %9 to i16**
  %88 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %2, i64 0, i32 0
  %89 = bitcast %"class.v8::internal::String::FlatContent"* %3 to i8*
  %90 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4 to i8*
  %91 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %4, i64 0, i32 0
  %93 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %3, i64 0, i32 0, i32 0
  %94 = bitcast %"class.v8::internal::StringToIntHelper.1131"* %0 to i1 (%"class.v8::internal::StringToIntHelper.1131"*)***
  br label %95

95:                                               ; preds = %80, %128
  %96 = load i8*, i8** %14, align 8
  %97 = icmp eq i8* %96, null
  br i1 %97, label %98, label %122

98:                                               ; preds = %95
  %99 = load i64*, i64** %81, align 8
  %100 = load i64, i64* %99, align 8
  br label %101

101:                                              ; preds = %114, %98
  %102 = phi i64 [ %100, %98 ], [ %119, %114 ]
  %103 = and i64 %102, -4294967296
  %104 = add i64 %102, -1
  %105 = inttoptr i64 %104 to i32*
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = zext i32 %106 to i64
  %108 = or i64 %103, %107
  %109 = add i64 %108, 7
  %110 = inttoptr i64 %109 to i16*
  %111 = load atomic i16, i16* %110 monotonic, align 2
  %112 = and i16 %111, 9
  %113 = zext i16 %112 to i32
  switch i32 %113, label %114 [
    i32 8, label %120
    i32 0, label %125
  ]

114:                                              ; preds = %101
  %115 = add i64 %102, 11
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %103, %118
  br label %101

120:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %88) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %89) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #12
  store i64 %100, i64* %91, align 8
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %3, %"class.v8::internal::String"* nonnull %92, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %2) #12
  %121 = load i8*, i8** %93, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %89) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %88) #12
  br label %122

122:                                              ; preds = %95, %120
  %123 = phi i8* [ %121, %120 ], [ %96, %95 ]
  %124 = call zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKhEEbT_(%"class.v8::internal::StringToIntHelper.1131"* %0, i8* %123)
  br i1 %124, label %134, label %128

125:                                              ; preds = %101
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %82) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #12
  store i64 %100, i64* %85, align 8
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %9, %"class.v8::internal::String"* nonnull %86, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %8) #12
  %126 = load i16*, i16** %87, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %82) #12
  %127 = call zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKtEEbT_(%"class.v8::internal::StringToIntHelper.1131"* %0, i16* %126)
  br i1 %127, label %134, label %128

128:                                              ; preds = %125, %122
  %129 = load i1 (%"class.v8::internal::StringToIntHelper.1131"*)**, i1 (%"class.v8::internal::StringToIntHelper.1131"*)*** %94, align 8
  %130 = getelementptr inbounds i1 (%"class.v8::internal::StringToIntHelper.1131"*)*, i1 (%"class.v8::internal::StringToIntHelper.1131"*)** %129, i64 4
  %131 = load i1 (%"class.v8::internal::StringToIntHelper.1131"*)*, i1 (%"class.v8::internal::StringToIntHelper.1131"*)** %130, align 8
  %132 = call zeroext i1 %131(%"class.v8::internal::StringToIntHelper.1131"* %0) #12
  br i1 %132, label %133, label %95

133:                                              ; preds = %128
  store i32 1, i32* %67, align 4
  br label %134

134:                                              ; preds = %125, %122, %70, %66, %133
  ret void
}

declare i64* @_ZN2v88internal6BigInt4ZeroINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_NS0_14AllocationTypeE(%"class.v8::internal::LocalIsolate"*, i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKhEEvT_i(%"class.v8::internal::StringToIntHelper.1131"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 6
  store i32 %2, i32* %5, align 8
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %27, label %9

9:                                                ; preds = %3
  %10 = load i8, i8* %1, align 1
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %31, label %23

16:                                               ; preds = %23
  %17 = load i8, i8* %25, align 1
  %18 = zext i8 %17 to i64
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = and i8 %20, 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %9, %16
  %24 = phi i8* [ %25, %16 ], [ %1, %9 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 1
  %26 = icmp eq i8* %25, %7
  br i1 %26, label %27, label %16

27:                                               ; preds = %23, %3
  %28 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 3, i32* %28, align 4
  br label %155

29:                                               ; preds = %16
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %29, %9
  %32 = phi i64 [ %4, %9 ], [ %30, %29 ]
  %33 = inttoptr i64 %32 to i8*
  %34 = load i8, i8* %33, align 1
  switch i8 %34, label %50 [
    i8 43, label %35
    i8 45, label %40
  ]

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = icmp eq i8* %36, %7
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %39, align 4
  br label %155

40:                                               ; preds = %31
  %41 = getelementptr inbounds i8, i8* %33, i64 1
  %42 = icmp eq i8* %41, %7
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %44, align 4
  br label %155

45:                                               ; preds = %40, %35
  %46 = phi i8* [ %36, %35 ], [ %41, %40 ]
  %47 = phi i32 [ 1, %35 ], [ 0, %40 ]
  %48 = ptrtoint i8* %46 to i64
  %49 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 7
  store i32 %47, i32* %49, align 4
  br label %50

50:                                               ; preds = %45, %31
  %51 = phi i64 [ %32, %31 ], [ %48, %45 ]
  %52 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  switch i32 %53, label %111 [
    i32 0, label %54
    i32 16, label %91
  ]

54:                                               ; preds = %50
  store i32 10, i32* %52, align 8
  %55 = inttoptr i64 %51 to i8*
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 48
  br i1 %57, label %58, label %111

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %55, i64 1
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp eq i8* %59, %7
  br i1 %61, label %62, label %64

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %63, align 4
  br label %155

64:                                               ; preds = %58
  %65 = load i8, i8* %59, align 1
  switch i8 %65, label %72 [
    i8 120, label %66
    i8 88, label %66
  ]

66:                                               ; preds = %64, %64
  store i32 16, i32* %52, align 8
  %67 = getelementptr inbounds i8, i8* %55, i64 2
  %68 = ptrtoint i8* %67 to i64
  %69 = icmp eq i8* %67, %7
  br i1 %69, label %70, label %111

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %71, align 4
  br label %155

72:                                               ; preds = %64
  %73 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 9
  %74 = load i8, i8* %73, align 1, !range !3
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %89, label %76

76:                                               ; preds = %72
  switch i8 %65, label %89 [
    i8 111, label %77
    i8 79, label %77
    i8 98, label %83
    i8 66, label %83
  ]

77:                                               ; preds = %76, %76
  store i32 8, i32* %52, align 8
  %78 = getelementptr inbounds i8, i8* %55, i64 2
  %79 = ptrtoint i8* %78 to i64
  %80 = icmp eq i8* %78, %7
  br i1 %80, label %81, label %111

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %82, align 4
  br label %155

83:                                               ; preds = %76, %76
  store i32 2, i32* %52, align 8
  %84 = getelementptr inbounds i8, i8* %55, i64 2
  %85 = ptrtoint i8* %84 to i64
  %86 = icmp eq i8* %84, %7
  br i1 %86, label %87, label %111

87:                                               ; preds = %83
  %88 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %88, align 4
  br label %155

89:                                               ; preds = %76, %72
  %90 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  store i8 1, i8* %90, align 8
  br label %111

91:                                               ; preds = %50
  %92 = inttoptr i64 %51 to i8*
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %93, 48
  br i1 %94, label %95, label %111

95:                                               ; preds = %91
  %96 = getelementptr inbounds i8, i8* %92, i64 1
  %97 = ptrtoint i8* %96 to i64
  %98 = icmp eq i8* %96, %7
  br i1 %98, label %99, label %101

99:                                               ; preds = %95
  %100 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %100, align 4
  br label %155

101:                                              ; preds = %95
  %102 = load i8, i8* %96, align 1
  switch i8 %102, label %109 [
    i8 120, label %103
    i8 88, label %103
  ]

103:                                              ; preds = %101, %101
  %104 = getelementptr inbounds i8, i8* %92, i64 2
  %105 = ptrtoint i8* %104 to i64
  %106 = icmp eq i8* %104, %7
  br i1 %106, label %107, label %111

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %108, align 4
  br label %155

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  store i8 1, i8* %110, align 8
  br label %111

111:                                              ; preds = %50, %109, %103, %91, %54, %77, %83, %89, %66
  %112 = phi i32 [ %53, %50 ], [ 16, %109 ], [ 16, %103 ], [ 16, %91 ], [ 10, %89 ], [ 2, %83 ], [ 8, %77 ], [ 16, %66 ], [ 10, %54 ]
  %113 = phi i64 [ %51, %50 ], [ %97, %109 ], [ %105, %103 ], [ %51, %91 ], [ %60, %89 ], [ %85, %83 ], [ %79, %77 ], [ %68, %66 ], [ %51, %54 ]
  %114 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  br label %115

115:                                              ; preds = %120, %111
  %116 = phi i64 [ %113, %111 ], [ %122, %120 ]
  %117 = inttoptr i64 %116 to i8*
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 48
  br i1 %119, label %120, label %126

120:                                              ; preds = %115
  store i8 1, i8* %114, align 8
  %121 = getelementptr inbounds i8, i8* %117, i64 1
  %122 = ptrtoint i8* %121 to i64
  %123 = icmp eq i8* %121, %7
  br i1 %123, label %124, label %115

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %125, align 4
  br label %155

126:                                              ; preds = %115
  %127 = zext i8 %118 to i32
  %128 = load i8, i8* %114, align 8, !range !3
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %151

130:                                              ; preds = %126
  %131 = add nsw i32 %127, -48
  %132 = icmp ult i32 %131, 10
  %133 = add nsw i32 %112, 48
  %134 = icmp sgt i32 %133, %127
  %135 = and i1 %132, %134
  br i1 %135, label %151, label %136

136:                                              ; preds = %130
  %137 = icmp sgt i32 %112, 10
  %138 = icmp ugt i8 %118, 96
  %139 = and i1 %138, %137
  %140 = add nsw i32 %112, 87
  %141 = icmp sgt i32 %140, %127
  %142 = and i1 %139, %141
  br i1 %142, label %151, label %143

143:                                              ; preds = %136
  %144 = icmp ugt i8 %118, 64
  %145 = and i1 %144, %137
  %146 = add nuw nsw i32 %112, 55
  %147 = icmp sgt i32 %146, %127
  %148 = and i1 %145, %147
  br i1 %148, label %151, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %150, align 4
  br label %155

151:                                              ; preds = %143, %136, %130, %126
  %152 = sub i64 %116, %4
  %153 = trunc i64 %152 to i32
  %154 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 5
  store i32 %153, i32* %154, align 4
  br label %155

155:                                              ; preds = %151, %149, %124, %107, %99, %87, %81, %70, %62, %43, %38, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE19DetectRadixInternalIPKtEEvT_i(%"class.v8::internal::StringToIntHelper.1131"*, i16*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i16* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 6
  store i32 %2, i32* %5, align 8
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds i16, i16* %1, i64 %6
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %33, label %9

9:                                                ; preds = %3, %28
  %10 = phi i64 [ %31, %28 ], [ %4, %3 ]
  %11 = phi i16* [ %30, %28 ], [ %1, %3 ]
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = icmp ult i16 %12, 256
  br i1 %14, label %22, label %15

15:                                               ; preds = %9
  %16 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %13) #12
  %17 = and i32 %13, 65534
  %18 = icmp eq i32 %17, 8232
  %19 = or i1 %18, %16
  br i1 %19, label %20, label %35

20:                                               ; preds = %15
  %21 = inttoptr i64 %10 to i16*
  br label %28

22:                                               ; preds = %9
  %23 = zext i16 %12 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 8
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %22, %20
  %29 = phi i16* [ %21, %20 ], [ %11, %22 ]
  %30 = getelementptr inbounds i16, i16* %29, i64 1
  %31 = ptrtoint i16* %30 to i64
  %32 = icmp eq i16* %30, %7
  br i1 %32, label %33, label %9

33:                                               ; preds = %28, %3
  %34 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 3, i32* %34, align 4
  br label %159

35:                                               ; preds = %22, %15
  %36 = inttoptr i64 %10 to i16*
  %37 = load i16, i16* %36, align 2
  switch i16 %37, label %53 [
    i16 43, label %38
    i16 45, label %43
  ]

38:                                               ; preds = %35
  %39 = getelementptr inbounds i16, i16* %36, i64 1
  %40 = icmp eq i16* %39, %7
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %42, align 4
  br label %159

43:                                               ; preds = %35
  %44 = getelementptr inbounds i16, i16* %36, i64 1
  %45 = icmp eq i16* %44, %7
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %47, align 4
  br label %159

48:                                               ; preds = %43, %38
  %49 = phi i16* [ %39, %38 ], [ %44, %43 ]
  %50 = phi i32 [ 1, %38 ], [ 0, %43 ]
  %51 = ptrtoint i16* %49 to i64
  %52 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 7
  store i32 %50, i32* %52, align 4
  br label %53

53:                                               ; preds = %48, %35
  %54 = phi i64 [ %10, %35 ], [ %51, %48 ]
  %55 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  switch i32 %56, label %114 [
    i32 0, label %57
    i32 16, label %94
  ]

57:                                               ; preds = %53
  store i32 10, i32* %55, align 8
  %58 = inttoptr i64 %54 to i16*
  %59 = load i16, i16* %58, align 2
  %60 = icmp eq i16 %59, 48
  br i1 %60, label %61, label %114

61:                                               ; preds = %57
  %62 = getelementptr inbounds i16, i16* %58, i64 1
  %63 = ptrtoint i16* %62 to i64
  %64 = icmp eq i16* %62, %7
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %66, align 4
  br label %159

67:                                               ; preds = %61
  %68 = load i16, i16* %62, align 2
  switch i16 %68, label %75 [
    i16 120, label %69
    i16 88, label %69
  ]

69:                                               ; preds = %67, %67
  store i32 16, i32* %55, align 8
  %70 = getelementptr inbounds i16, i16* %58, i64 2
  %71 = ptrtoint i16* %70 to i64
  %72 = icmp eq i16* %70, %7
  br i1 %72, label %73, label %114

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %74, align 4
  br label %159

75:                                               ; preds = %67
  %76 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 9
  %77 = load i8, i8* %76, align 1, !range !3
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  switch i16 %68, label %92 [
    i16 111, label %80
    i16 79, label %80
    i16 98, label %86
    i16 66, label %86
  ]

80:                                               ; preds = %79, %79
  store i32 8, i32* %55, align 8
  %81 = getelementptr inbounds i16, i16* %58, i64 2
  %82 = ptrtoint i16* %81 to i64
  %83 = icmp eq i16* %81, %7
  br i1 %83, label %84, label %114

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %85, align 4
  br label %159

86:                                               ; preds = %79, %79
  store i32 2, i32* %55, align 8
  %87 = getelementptr inbounds i16, i16* %58, i64 2
  %88 = ptrtoint i16* %87 to i64
  %89 = icmp eq i16* %87, %7
  br i1 %89, label %90, label %114

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %91, align 4
  br label %159

92:                                               ; preds = %79, %75
  %93 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  store i8 1, i8* %93, align 8
  br label %114

94:                                               ; preds = %53
  %95 = inttoptr i64 %54 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = icmp eq i16 %96, 48
  br i1 %97, label %98, label %114

98:                                               ; preds = %94
  %99 = getelementptr inbounds i16, i16* %95, i64 1
  %100 = ptrtoint i16* %99 to i64
  %101 = icmp eq i16* %99, %7
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %103, align 4
  br label %159

104:                                              ; preds = %98
  %105 = load i16, i16* %99, align 2
  switch i16 %105, label %112 [
    i16 120, label %106
    i16 88, label %106
  ]

106:                                              ; preds = %104, %104
  %107 = getelementptr inbounds i16, i16* %95, i64 2
  %108 = ptrtoint i16* %107 to i64
  %109 = icmp eq i16* %107, %7
  br i1 %109, label %110, label %114

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %111, align 4
  br label %159

112:                                              ; preds = %104
  %113 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  store i8 1, i8* %113, align 8
  br label %114

114:                                              ; preds = %53, %112, %106, %94, %57, %80, %86, %92, %69
  %115 = phi i32 [ %56, %53 ], [ 16, %112 ], [ 16, %106 ], [ 16, %94 ], [ 10, %92 ], [ 2, %86 ], [ 8, %80 ], [ 16, %69 ], [ 10, %57 ]
  %116 = phi i64 [ %54, %53 ], [ %100, %112 ], [ %108, %106 ], [ %54, %94 ], [ %63, %92 ], [ %88, %86 ], [ %82, %80 ], [ %71, %69 ], [ %54, %57 ]
  %117 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 8
  br label %118

118:                                              ; preds = %123, %114
  %119 = phi i64 [ %116, %114 ], [ %125, %123 ]
  %120 = inttoptr i64 %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = icmp eq i16 %121, 48
  br i1 %122, label %123, label %129

123:                                              ; preds = %118
  store i8 1, i8* %117, align 8
  %124 = getelementptr inbounds i16, i16* %120, i64 1
  %125 = ptrtoint i16* %124 to i64
  %126 = icmp eq i16* %124, %7
  br i1 %126, label %127, label %118

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 4, i32* %128, align 4
  br label %159

129:                                              ; preds = %118
  %130 = zext i16 %121 to i32
  %131 = load i8, i8* %117, align 8, !range !3
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %133, label %154

133:                                              ; preds = %129
  %134 = add nsw i32 %130, -48
  %135 = icmp ult i32 %134, 10
  %136 = add nsw i32 %115, 48
  %137 = icmp sgt i32 %136, %130
  %138 = and i1 %135, %137
  br i1 %138, label %154, label %139

139:                                              ; preds = %133
  %140 = icmp sgt i32 %115, 10
  %141 = icmp ugt i16 %121, 96
  %142 = and i1 %141, %140
  %143 = add nsw i32 %115, 87
  %144 = icmp sgt i32 %143, %130
  %145 = and i1 %142, %144
  br i1 %145, label %154, label %146

146:                                              ; preds = %139
  %147 = icmp ugt i16 %121, 64
  %148 = and i1 %147, %140
  %149 = add nuw nsw i32 %115, 55
  %150 = icmp sgt i32 %149, %130
  %151 = and i1 %148, %150
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  %153 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %153, align 4
  br label %159

154:                                              ; preds = %146, %139, %133, %129
  %155 = sub i64 %119, %4
  %156 = lshr exact i64 %155, 1
  %157 = trunc i64 %156 to i32
  %158 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 5
  store i32 %157, i32* %158, align 4
  br label %159

159:                                              ; preds = %154, %152, %127, %110, %102, %90, %84, %73, %65, %46, %41, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKhEEbT_(%"class.v8::internal::StringToIntHelper.1131"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %12, 10
  %14 = add i32 %12, 48
  %15 = select i1 %13, i32 %14, i32 58
  %16 = add nsw i32 %12, 87
  %17 = add nsw i32 %12, 55
  %18 = bitcast %"class.v8::internal::StringToIntHelper.1131"* %0 to void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)***
  %19 = sub nsw i64 %9, %5
  br label %20

20:                                               ; preds = %84, %2
  %21 = phi i64 [ 0, %2 ], [ %53, %84 ]
  %22 = phi i8 [ 0, %2 ], [ %56, %84 ]
  br label %23

23:                                               ; preds = %46, %20
  %24 = phi i64 [ %21, %20 ], [ %50, %46 ]
  %25 = phi i32 [ 0, %20 ], [ %49, %46 ]
  %26 = phi i32 [ 1, %20 ], [ %44, %46 ]
  %27 = getelementptr inbounds i8, i8* %6, i64 %24
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp ugt i8 %28, 47
  %31 = icmp sgt i32 %15, %29
  %32 = and i1 %30, %31
  br i1 %32, label %41, label %33

33:                                               ; preds = %23
  %34 = icmp ugt i8 %28, 96
  %35 = icmp sgt i32 %16, %29
  %36 = and i1 %34, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = icmp ugt i8 %28, 64
  %39 = icmp sgt i32 %17, %29
  %40 = and i1 %38, %39
  br i1 %40, label %41, label %52

41:                                               ; preds = %37, %33, %23
  %42 = phi i32 [ -48, %23 ], [ -87, %33 ], [ -55, %37 ]
  %43 = load i32, i32* %11, align 8
  %44 = mul i32 %43, %26
  %45 = icmp ugt i32 %44, 119304647
  br i1 %45, label %52, label %46

46:                                               ; preds = %41
  %47 = add nsw i32 %42, %29
  %48 = mul i32 %43, %25
  %49 = add i32 %48, %47
  %50 = add i64 %24, 1
  %51 = icmp eq i64 %50, %19
  br i1 %51, label %52, label %23

52:                                               ; preds = %46, %37, %41
  %53 = phi i64 [ %24, %37 ], [ %24, %41 ], [ %19, %46 ]
  %54 = phi i32 [ %25, %37 ], [ %25, %41 ], [ %49, %46 ]
  %55 = phi i32 [ %26, %37 ], [ %26, %41 ], [ %44, %46 ]
  %56 = phi i8 [ 1, %37 ], [ %22, %41 ], [ 1, %46 ]
  %57 = load void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)**, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*** %18, align 8
  %58 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)** %57, i64 3
  %59 = load void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)** %58, align 8
  tail call void %59(%"class.v8::internal::StringToIntHelper.1131"* %0, i32 %55, i32 %54) #12
  %60 = and i8 %56, 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %84, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds i8, i8* %6, i64 %53
  %64 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 10
  %65 = load i8, i8* %64, align 2, !range !3
  %66 = icmp ne i8 %65, 0
  %67 = icmp eq i8* %63, %10
  %68 = or i1 %67, %66
  br i1 %68, label %82, label %69

69:                                               ; preds = %62, %77
  %70 = phi i8* [ %78, %77 ], [ %63, %62 ]
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = and i8 %74, 8
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %69
  %78 = getelementptr inbounds i8, i8* %70, i64 1
  %79 = icmp eq i8* %78, %10
  br i1 %79, label %82, label %69

80:                                               ; preds = %69
  %81 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %81, align 4
  br label %92

82:                                               ; preds = %77, %62
  %83 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 5, i32* %83, align 4
  br label %92

84:                                               ; preds = %52
  %85 = icmp slt i64 %53, 10240
  br i1 %85, label %20, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds i8, i8* %6, i64 %53
  %88 = ptrtoint i8* %87 to i64
  %89 = ptrtoint i8* %1 to i64
  %90 = sub i64 %88, %89
  %91 = trunc i64 %90 to i32
  store i32 %91, i32* %3, align 4
  br label %92

92:                                               ; preds = %80, %82, %86
  %93 = phi i1 [ false, %86 ], [ true, %82 ], [ true, %80 ]
  ret i1 %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2v88internal17StringToIntHelperINS0_12LocalIsolateEE18ParseChunkInternalIPKtEEbT_(%"class.v8::internal::StringToIntHelper.1131"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i16, i16* %1, i64 %5
  %7 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i16, i16* %1, i64 %9
  %11 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %12, 10
  %14 = add i32 %12, 48
  %15 = select i1 %13, i32 %14, i32 58
  %16 = add nsw i32 %12, 87
  %17 = add nsw i32 %12, 55
  %18 = bitcast %"class.v8::internal::StringToIntHelper.1131"* %0 to void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)***
  %19 = shl nsw i64 %9, 1
  %20 = add nsw i64 %19, -2
  br label %21

21:                                               ; preds = %99, %2
  %22 = phi i64 [ 0, %2 ], [ %60, %99 ]
  %23 = phi i8 [ 0, %2 ], [ %63, %99 ]
  %24 = add nsw i64 %22, 1
  %25 = add i64 %22, %5
  %26 = shl i64 %25, 1
  %27 = sub i64 %20, %26
  %28 = lshr exact i64 %27, 1
  %29 = add i64 %24, %28
  br label %30

30:                                               ; preds = %53, %21
  %31 = phi i64 [ %22, %21 ], [ %57, %53 ]
  %32 = phi i32 [ 0, %21 ], [ %56, %53 ]
  %33 = phi i32 [ 1, %21 ], [ %51, %53 ]
  %34 = getelementptr inbounds i16, i16* %6, i64 %31
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = icmp ugt i16 %35, 47
  %38 = icmp sgt i32 %15, %36
  %39 = and i1 %37, %38
  br i1 %39, label %48, label %40

40:                                               ; preds = %30
  %41 = icmp ugt i16 %35, 96
  %42 = icmp sgt i32 %16, %36
  %43 = and i1 %41, %42
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = icmp ugt i16 %35, 64
  %46 = icmp sgt i32 %17, %36
  %47 = and i1 %45, %46
  br i1 %47, label %48, label %59

48:                                               ; preds = %44, %40, %30
  %49 = phi i32 [ -48, %30 ], [ -87, %40 ], [ -55, %44 ]
  %50 = load i32, i32* %11, align 8
  %51 = mul i32 %50, %33
  %52 = icmp ugt i32 %51, 119304647
  br i1 %52, label %59, label %53

53:                                               ; preds = %48
  %54 = add nsw i32 %49, %36
  %55 = mul i32 %50, %32
  %56 = add i32 %55, %54
  %57 = add i64 %31, 1
  %58 = icmp eq i64 %57, %29
  br i1 %58, label %59, label %30

59:                                               ; preds = %53, %44, %48
  %60 = phi i64 [ %31, %44 ], [ %31, %48 ], [ %29, %53 ]
  %61 = phi i32 [ %32, %44 ], [ %32, %48 ], [ %56, %53 ]
  %62 = phi i32 [ %33, %44 ], [ %33, %48 ], [ %51, %53 ]
  %63 = phi i8 [ 1, %44 ], [ %23, %48 ], [ 1, %53 ]
  %64 = load void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)**, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*** %18, align 8
  %65 = getelementptr inbounds void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)** %64, i64 3
  %66 = load void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)*, void (%"class.v8::internal::StringToIntHelper.1131"*, i32, i32)** %65, align 8
  tail call void %66(%"class.v8::internal::StringToIntHelper.1131"* %0, i32 %62, i32 %61) #12
  %67 = and i8 %63, 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %99, label %69

69:                                               ; preds = %59
  %70 = getelementptr inbounds i16, i16* %6, i64 %60
  %71 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 10
  %72 = load i8, i8* %71, align 2, !range !3
  %73 = icmp ne i8 %72, 0
  %74 = icmp eq i16* %70, %10
  %75 = or i1 %74, %73
  br i1 %75, label %97, label %76

76:                                               ; preds = %69, %92
  %77 = phi i16* [ %93, %92 ], [ %70, %69 ]
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp ult i16 %78, 256
  br i1 %80, label %86, label %81

81:                                               ; preds = %76
  %82 = tail call zeroext i1 @_ZN2v88internal16IsWhiteSpaceSlowEj(i32 %79) #12
  %83 = and i32 %79, 65534
  %84 = icmp eq i32 %83, 8232
  %85 = or i1 %84, %82
  br i1 %85, label %92, label %95

86:                                               ; preds = %76
  %87 = zext i16 %78 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = and i8 %89, 8
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %81, %86
  %93 = getelementptr inbounds i16, i16* %77, i64 1
  %94 = icmp eq i16* %93, %10
  br i1 %94, label %97, label %76

95:                                               ; preds = %86, %81
  %96 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 2, i32* %96, align 4
  br label %108

97:                                               ; preds = %92, %69
  %98 = getelementptr inbounds %"class.v8::internal::StringToIntHelper.1131", %"class.v8::internal::StringToIntHelper.1131"* %0, i64 0, i32 11
  store i32 5, i32* %98, align 4
  br label %108

99:                                               ; preds = %59
  %100 = icmp slt i64 %60, 10240
  br i1 %100, label %21, label %101

101:                                              ; preds = %99
  %102 = getelementptr inbounds i16, i16* %6, i64 %60
  %103 = ptrtoint i16* %102 to i64
  %104 = ptrtoint i16* %1 to i64
  %105 = sub i64 %103, %104
  %106 = lshr exact i64 %105, 1
  %107 = trunc i64 %106 to i32
  store i32 %107, i32* %3, align 4
  br label %108

108:                                              ; preds = %95, %97, %101
  %109 = phi i1 [ false, %101 ], [ true, %97 ], [ true, %95 ]
  ret i1 %109
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnamRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #10

declare %"class.v8::Platform"* @_ZN2v88internal2V818GetCurrentPlatformEv() local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN2v88internal23FatalProcessOutOfMemoryEPNS0_7IsolateEPKc(%"class.v8::internal::Isolate"*, i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind readnone }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = !{i32 0, i32 33}
