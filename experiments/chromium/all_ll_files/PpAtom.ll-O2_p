; ModuleID = '../../third_party/vulkan-deps/glslang/src/glslang/MachineIndependent/preprocessor/PpAtom.cpp'
source_filename = "../../third_party/vulkan-deps/glslang/src/glslang/MachineIndependent/preprocessor/PpAtom.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon.26 = type { i32, i8* }
%"class.glslang::TStringAtomMap" = type { %"class.glslang::TUnorderedMap", %"class.glslang::TVector", i32, %"class.std::__1::basic_string" }
%"class.glslang::TUnorderedMap" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.13", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.glslang::pool_allocator" }
%"class.glslang::pool_allocator" = type { %"class.glslang::TPoolAllocator"* }
%"class.glslang::TPoolAllocator" = type { i64, i64, i64, i64, i64, %"struct.glslang::TPoolAllocator::tHeader"*, %"struct.glslang::TPoolAllocator::tHeader"*, %"class.std::__1::vector", i32, i64 }
%"struct.glslang::TPoolAllocator::tHeader" = type { %"struct.glslang::TPoolAllocator::tHeader"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.glslang::TPoolAllocator::tAllocState"*, %"struct.glslang::TPoolAllocator::tAllocState"*, %"class.std::__1::__compressed_pair.4" }
%"struct.glslang::TPoolAllocator::tAllocState" = type { i64, %"struct.glslang::TPoolAllocator::tHeader"* }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.glslang::TPoolAllocator::tAllocState"* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8", %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.glslang::pool_allocator.10" }
%"class.glslang::pool_allocator.10" = type { %"class.glslang::TPoolAllocator"* }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { float }
%"class.glslang::TVector" = type { %"class.std::__1::vector.16" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.std::__1::basic_string"**, %"class.std::__1::basic_string"**, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23", %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::basic_string"** }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.glslang::pool_allocator.25" }
%"class.glslang::pool_allocator.25" = type { %"class.glslang::TPoolAllocator"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.glslang::pool_allocator.21" }
%"class.glslang::pool_allocator.21" = type { %"class.glslang::TPoolAllocator"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.std::__1::pair.27" = type <{ %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN7glslang14TStringAtomMap12addAtomFixedEPKci = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE25__emplace_unique_key_argsIS8_JNS_4pairIS8_iEEEEENSL_INS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE8__rehashEm = comdat any

$_ZNSt3__16vectorIPKNS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEENS5_IS9_EEE8__appendEmRKS9_ = comdat any

@.str = private unnamed_addr constant [12 x i8] c"<bad token>\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"~!%^&*()-+=|,.<>/?;:[]{}#\5C\00", align 1
@_ZN12_GLOBAL__N_16tokensE = internal unnamed_addr constant [42 x %struct.anon.26] [%struct.anon.26 { i32 129, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0) }, %struct.anon.26 { i32 130, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0) }, %struct.anon.26 { i32 131, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0) }, %struct.anon.26 { i32 132, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0) }, %struct.anon.26 { i32 133, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0) }, %struct.anon.26 { i32 134, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0) }, %struct.anon.26 { i32 135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0) }, %struct.anon.26 { i32 141, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0) }, %struct.anon.26 { i32 142, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0) }, %struct.anon.26 { i32 143, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0) }, %struct.anon.26 { i32 136, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0) }, %struct.anon.26 { i32 137, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0) }, %struct.anon.26 { i32 138, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0) }, %struct.anon.26 { i32 139, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0) }, %struct.anon.26 { i32 140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0) }, %struct.anon.26 { i32 144, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0) }, %struct.anon.26 { i32 145, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0) }, %struct.anon.26 { i32 146, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0) }, %struct.anon.26 { i32 147, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0) }, %struct.anon.26 { i32 148, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0) }, %struct.anon.26 { i32 149, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0) }, %struct.anon.26 { i32 150, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0) }, %struct.anon.26 { i32 163, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0) }, %struct.anon.26 { i32 164, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0) }, %struct.anon.26 { i32 165, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0) }, %struct.anon.26 { i32 169, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0) }, %struct.anon.26 { i32 168, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0) }, %struct.anon.26 { i32 170, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0) }, %struct.anon.26 { i32 166, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0) }, %struct.anon.26 { i32 167, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0) }, %struct.anon.26 { i32 171, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0) }, %struct.anon.26 { i32 172, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0) }, %struct.anon.26 { i32 173, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i32 0, i32 0) }, %struct.anon.26 { i32 174, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0) }, %struct.anon.26 { i32 175, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0) }, %struct.anon.26 { i32 176, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i32 0, i32 0) }, %struct.anon.26 { i32 177, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0) }, %struct.anon.26 { i32 178, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i32 0, i32 0) }, %struct.anon.26 { i32 179, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i32 0, i32 0) }, %struct.anon.26 { i32 180, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i32 0, i32 0) }, %struct.anon.26 { i32 181, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.42, i32 0, i32 0) }, %struct.anon.26 { i32 182, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0) }], align 16
@.str.2 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"/=\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%=\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"^^\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"&=\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"|=\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"^=\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"++\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"define\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"undef\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"elif\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"else\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"endif\00", align 1
@.str.30 = private unnamed_addr constant [6 x i8] c"ifdef\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"ifndef\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"line\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"pragma\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"core\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"compatibility\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"es\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"extension\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"__LINE__\00", align 1
@.str.41 = private unnamed_addr constant [9 x i8] c"__FILE__\00", align 1
@.str.42 = private unnamed_addr constant [12 x i8] c"__VERSION__\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"include\00", align 1

@_ZN7glslang14TStringAtomMapC1Ev = hidden unnamed_addr alias void (%"class.glslang::TStringAtomMap"*), void (%"class.glslang::TStringAtomMap"*)* @_ZN7glslang14TStringAtomMapC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7glslang14TStringAtomMapC2Ev(%"class.glslang::TStringAtomMap"*) unnamed_addr #0 align 2 {
  %2 = alloca [2 x i8], align 1
  %3 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.glslang::TStringAtomMap"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #7
  %5 = tail call dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() #7
  store %"class.glslang::TPoolAllocator"* %5, %"class.glslang::TPoolAllocator"** %3, align 8
  %6 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %6, align 8
  %7 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %8 = tail call dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() #7
  store %"class.glslang::TPoolAllocator"* %8, %"class.glslang::TPoolAllocator"** %7, align 8
  %9 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 3
  %11 = bitcast %"class.std::__1::__compressed_pair.13"* %10 to i32*
  store i32 1065353216, i32* %11, align 4
  %12 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %14 = bitcast %"class.glslang::TVector"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #7
  %15 = tail call dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() #7
  store %"class.glslang::TPoolAllocator"* %15, %"class.glslang::TPoolAllocator"** %13, align 8
  %16 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 3
  %17 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %18 = tail call dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() #7
  store %"class.glslang::TPoolAllocator"* %18, %"class.glslang::TPoolAllocator"** %17, align 8
  %19 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #7
  %20 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  store i8 11, i8* %21, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i64 11, i1 false) #7
  %22 = getelementptr inbounds i8, i8* %19, i64 11
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %23) #7
  store i8 -86, i8* %23, align 1
  %24 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i64 1
  store i8 0, i8* %24, align 1
  br label %25

25:                                               ; preds = %1, %25
  %26 = phi i8 [ 126, %1 ], [ %30, %25 ]
  %27 = phi i8* [ getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), %1 ], [ %29, %25 ]
  store i8 %26, i8* %23, align 1
  %28 = sext i8 %26 to i32
  call void @_ZN7glslang14TStringAtomMap12addAtomFixedEPKci(%"class.glslang::TStringAtomMap"* %0, i8* nonnull %23, i32 %28)
  %29 = getelementptr inbounds i8, i8* %27, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8* %29, getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 26)
  br i1 %31, label %34, label %25

32:                                               ; preds = %34
  %33 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 2
  store i32 183, i32* %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %23) #7
  ret void

34:                                               ; preds = %25, %34
  %35 = phi i64 [ %40, %34 ], [ 0, %25 ]
  %36 = getelementptr inbounds [42 x %struct.anon.26], [42 x %struct.anon.26]* @_ZN12_GLOBAL__N_16tokensE, i64 0, i64 %35, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds [42 x %struct.anon.26], [42 x %struct.anon.26]* @_ZN12_GLOBAL__N_16tokensE, i64 0, i64 %35, i32 0
  %39 = load i32, i32* %38, align 16
  call void @_ZN7glslang14TStringAtomMap12addAtomFixedEPKci(%"class.glslang::TStringAtomMap"* %0, i8* %37, i32 %39)
  %40 = add nuw nsw i64 %35, 1
  %41 = icmp eq i64 %40, 42
  br i1 %41, label %32, label %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7glslang14TStringAtomMap12addAtomFixedEPKci(%"class.glslang::TStringAtomMap"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair.27", align 8
  %5 = alloca %"class.std::__1::basic_string"*, align 8
  %6 = bitcast %"struct.std::__1::pair.27"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = tail call dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() #7
  store %"class.glslang::TPoolAllocator"* %8, %"class.glslang::TPoolAllocator"** %7, align 8
  %9 = tail call i64 @strlen(i8* %1) #7
  %10 = icmp ugt i64 %9, -17
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = bitcast %"struct.std::__1::pair.27"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %12) #8
  unreachable

13:                                               ; preds = %3
  %14 = icmp ult i64 %9, 23
  br i1 %14, label %23, label %15

15:                                               ; preds = %13
  %16 = add nuw i64 %9, 16
  %17 = and i64 %16, -16
  %18 = tail call i8* @_ZN7glslang14TPoolAllocator8allocateEm(%"class.glslang::TPoolAllocator"* %8, i64 %17) #7
  %19 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8
  %20 = or i64 %17, -9223372036854775808
  %21 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %9, i64* %22, align 8
  br label %28

23:                                               ; preds = %13
  %24 = trunc i64 %9 to i8
  %25 = bitcast %"struct.std::__1::pair.27"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  store i8 %24, i8* %26, align 1
  %27 = icmp eq i64 %9, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %23, %15
  %29 = phi i8* [ %18, %15 ], [ %6, %23 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %1, i64 %9, i1 false) #7
  br label %30

30:                                               ; preds = %23, %28
  %31 = phi i8* [ %6, %23 ], [ %29, %28 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %9
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 1
  store i32 %2, i32* %33, align 8
  %34 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %4, i64 0, i32 0
  %36 = call { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE25__emplace_unique_key_argsIS8_JNS_4pairIS8_iEEEEENSL_INS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"* %34, %"class.std::__1::basic_string"* nonnull dereferenceable(32) %35, %"struct.std::__1::pair.27"* nonnull dereferenceable(40) %4) #7
  %37 = extractvalue { %"struct.std::__1::__hash_node_base"*, i8 } %36, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #7
  %38 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 1, i32 0
  %39 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %40 = bitcast %"class.std::__1::basic_string"*** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::vector.16"* %38 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = ashr exact i64 %44, 3
  %46 = sext i32 %2 to i64
  %47 = add nsw i64 %46, 1
  %48 = icmp ult i64 %45, %47
  %49 = inttoptr i64 %43 to %"class.std::__1::basic_string"**
  br i1 %48, label %50, label %66

50:                                               ; preds = %30
  %51 = add nsw i32 %2, 100
  %52 = sext i32 %51 to i64
  %53 = bitcast %"class.std::__1::basic_string"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #7
  %54 = getelementptr inbounds %"class.glslang::TStringAtomMap", %"class.glslang::TStringAtomMap"* %0, i64 0, i32 3
  store %"class.std::__1::basic_string"* %54, %"class.std::__1::basic_string"** %5, align 8
  %55 = icmp ult i64 %45, %52
  br i1 %55, label %56, label %60

56:                                               ; preds = %50
  %57 = sub nsw i64 %52, %45
  call void @_ZNSt3__16vectorIPKNS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEENS5_IS9_EEE8__appendEmRKS9_(%"class.std::__1::vector.16"* %38, i64 %57, %"class.std::__1::basic_string"** nonnull dereferenceable(8) %5) #7
  %58 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %38, i64 0, i32 0, i32 0
  %59 = load %"class.std::__1::basic_string"**, %"class.std::__1::basic_string"*** %58, align 8
  br label %64

60:                                               ; preds = %50
  %61 = icmp ugt i64 %45, %52
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %49, i64 %52
  store %"class.std::__1::basic_string"** %63, %"class.std::__1::basic_string"*** %39, align 8
  br label %64

64:                                               ; preds = %56, %60, %62
  %65 = phi %"class.std::__1::basic_string"** [ %59, %56 ], [ %49, %60 ], [ %49, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #7
  br label %66

66:                                               ; preds = %64, %30
  %67 = phi %"class.std::__1::basic_string"** [ %65, %64 ], [ %49, %30 ]
  %68 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %37, i64 2
  %69 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %67, i64 %46
  %70 = bitcast %"class.std::__1::basic_string"** %69 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* %68, %"struct.std::__1::__hash_node_base"** %70, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(96) %"class.glslang::TPoolAllocator"* @_ZN7glslang22GetThreadPoolAllocatorEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE25__emplace_unique_key_argsIS8_JNS_4pairIS8_iEEEEENSL_INS_15__hash_iteratorIPNS_11__hash_nodeIS9_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table"*, %"class.std::__1::basic_string"* dereferenceable(32), %"struct.std::__1::pair.27"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = zext i8 %6 to i64
  %13 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %14 = select i1 %7, i64 %9, i64 %12
  %15 = select i1 %7, i8* %11, i8* %13
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %73, label %17

17:                                               ; preds = %3
  %18 = add i64 %14, -1
  %19 = and i64 %14, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = sub i64 %14, %19
  br label %43

23:                                               ; preds = %43, %17
  %24 = phi i32 [ undef, %17 ], [ %69, %43 ]
  %25 = phi i64 [ 0, %17 ], [ %70, %43 ]
  %26 = phi i32 [ -2128831035, %17 ], [ %69, %43 ]
  %27 = icmp eq i64 %19, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %23, %28
  %29 = phi i64 [ %37, %28 ], [ %25, %23 ]
  %30 = phi i32 [ %36, %28 ], [ %26, %23 ]
  %31 = phi i64 [ %38, %28 ], [ %19, %23 ]
  %32 = getelementptr inbounds i8, i8* %15, i64 %29
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = xor i32 %30, %34
  %36 = mul i32 %35, 16777619
  %37 = add nuw i64 %29, 1
  %38 = add i64 %31, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %28, !llvm.loop !2

40:                                               ; preds = %28, %23
  %41 = phi i32 [ %24, %23 ], [ %36, %28 ]
  %42 = zext i32 %41 to i64
  br label %73

43:                                               ; preds = %43, %21
  %44 = phi i64 [ 0, %21 ], [ %70, %43 ]
  %45 = phi i32 [ -2128831035, %21 ], [ %69, %43 ]
  %46 = phi i64 [ %22, %21 ], [ %71, %43 ]
  %47 = getelementptr inbounds i8, i8* %15, i64 %44
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = xor i32 %45, %49
  %51 = mul i32 %50, 16777619
  %52 = or i64 %44, 1
  %53 = getelementptr inbounds i8, i8* %15, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i32
  %56 = xor i32 %51, %55
  %57 = mul i32 %56, 16777619
  %58 = or i64 %44, 2
  %59 = getelementptr inbounds i8, i8* %15, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = xor i32 %57, %61
  %63 = mul i32 %62, 16777619
  %64 = or i64 %44, 3
  %65 = getelementptr inbounds i8, i8* %15, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = xor i32 %63, %67
  %69 = mul i32 %68, 16777619
  %70 = add nuw i64 %44, 4
  %71 = add i64 %46, -4
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %23, label %43

73:                                               ; preds = %3, %40
  %74 = phi i64 [ 2166136261, %3 ], [ %42, %40 ]
  %75 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %160, label %78

78:                                               ; preds = %73
  %79 = tail call i64 @llvm.ctpop.i64(i64 %76) #7, !range !4
  %80 = icmp ugt i64 %79, 1
  br i1 %80, label %84, label %81

81:                                               ; preds = %78
  %82 = add i64 %76, 4294967295
  %83 = and i64 %82, %74
  br label %88

84:                                               ; preds = %78
  %85 = icmp ult i64 %74, %76
  br i1 %85, label %88, label %86

86:                                               ; preds = %84
  %87 = urem i64 %74, %76
  br label %88

88:                                               ; preds = %81, %84, %86
  %89 = phi i64 [ %83, %81 ], [ %87, %86 ], [ %74, %84 ]
  %90 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %91 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %90, align 8
  %92 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %91, i64 %89
  %93 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %92, align 8
  %94 = icmp eq %"struct.std::__1::__hash_node_base"* %93, null
  br i1 %94, label %160, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %93, i64 0, i32 0
  %97 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %96, align 8
  %98 = icmp eq %"struct.std::__1::__hash_node_base"* %97, null
  br i1 %98, label %160, label %99

99:                                               ; preds = %95
  %100 = add i64 %76, -1
  br label %101

101:                                              ; preds = %99, %144
  %102 = phi %"struct.std::__1::__hash_node_base"* [ %97, %99 ], [ %146, %144 ]
  %103 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %102, i64 1
  %104 = bitcast %"struct.std::__1::__hash_node_base"* %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, %74
  br i1 %106, label %117, label %107

107:                                              ; preds = %101
  br i1 %80, label %110, label %108

108:                                              ; preds = %107
  %109 = and i64 %105, %100
  br label %114

110:                                              ; preds = %107
  %111 = icmp ult i64 %105, %76
  br i1 %111, label %114, label %112

112:                                              ; preds = %110
  %113 = urem i64 %105, %76
  br label %114

114:                                              ; preds = %108, %110, %112
  %115 = phi i64 [ %109, %108 ], [ %113, %112 ], [ %105, %110 ]
  %116 = icmp eq i64 %115, %89
  br i1 %116, label %117, label %160

117:                                              ; preds = %101, %114
  %118 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %102, i64 2
  %119 = bitcast %"struct.std::__1::__hash_node_base"* %118 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %120 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %119, i64 0, i32 1, i32 0
  %121 = load i8, i8* %120, align 1
  %122 = icmp slt i8 %121, 0
  %123 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %102, i64 3
  %124 = bitcast %"struct.std::__1::__hash_node_base"* %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = zext i8 %121 to i64
  %127 = select i1 %122, i64 %125, i64 %126
  %128 = icmp eq i64 %127, %14
  br i1 %128, label %129, label %144

129:                                              ; preds = %117
  %130 = bitcast %"struct.std::__1::__hash_node_base"* %118 to i8**
  %131 = load i8*, i8** %130, align 8
  %132 = bitcast %"struct.std::__1::__hash_node_base"* %118 to i8*
  %133 = select i1 %122, i8* %131, i8* %132
  br i1 %122, label %140, label %134

134:                                              ; preds = %129
  br i1 %16, label %259, label %135

135:                                              ; preds = %134
  %136 = ptrtoint i8* %131 to i64
  %137 = trunc i64 %136 to i8
  %138 = load i8, i8* %15, align 1
  %139 = icmp eq i8 %138, %137
  br i1 %139, label %148, label %144

140:                                              ; preds = %129
  br i1 %16, label %259, label %141

141:                                              ; preds = %140
  %142 = tail call i32 @bcmp(i8* %133, i8* %15, i64 %14) #7
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %259, label %144

144:                                              ; preds = %155, %135, %117, %141
  %145 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %102, i64 0, i32 0
  %146 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %145, align 8
  %147 = icmp eq %"struct.std::__1::__hash_node_base"* %146, null
  br i1 %147, label %160, label %101

148:                                              ; preds = %135, %155
  %149 = phi i64 [ %152, %155 ], [ %126, %135 ]
  %150 = phi i8* [ %153, %155 ], [ %132, %135 ]
  %151 = phi i8* [ %156, %155 ], [ %15, %135 ]
  %152 = add i64 %149, -1
  %153 = getelementptr inbounds i8, i8* %150, i64 1
  %154 = icmp eq i64 %152, 0
  br i1 %154, label %259, label %155

155:                                              ; preds = %148
  %156 = getelementptr inbounds i8, i8* %151, i64 1
  %157 = load i8, i8* %153, align 1
  %158 = load i8, i8* %156, align 1
  %159 = icmp eq i8 %157, %158
  br i1 %159, label %148, label %144

160:                                              ; preds = %114, %144, %95, %88, %73
  %161 = phi i64 [ %89, %88 ], [ -6148914691236517206, %73 ], [ %89, %95 ], [ %89, %144 ], [ %89, %114 ]
  %162 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %163 = load %"class.glslang::TPoolAllocator"*, %"class.glslang::TPoolAllocator"** %162, align 8, !noalias !5
  %164 = tail call i8* @_ZN7glslang14TPoolAllocator8allocateEm(%"class.glslang::TPoolAllocator"* %163, i64 56) #7, !noalias !5
  %165 = getelementptr inbounds i8, i8* %164, i64 16
  %166 = bitcast %"struct.std::__1::pair.27"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %165, i8* align 8 %166, i64 24, i1 false) #7, !noalias !5
  %167 = getelementptr inbounds i8, i8* %164, i64 40
  %168 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %2, i64 0, i32 0, i32 0, i32 1
  %169 = bitcast %"struct.std::__1::__compressed_pair_elem.20"* %168 to i64*
  %170 = load i64, i64* %169, align 8, !noalias !5
  %171 = bitcast i8* %167 to i64*
  store i64 %170, i64* %171, align 8, !noalias !5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %166, i8 0, i64 24, i1 false) #7, !noalias !5
  %172 = getelementptr inbounds i8, i8* %164, i64 48
  %173 = bitcast i8* %172 to i32*
  %174 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %2, i64 0, i32 1
  %175 = load i32, i32* %174, align 4, !noalias !5
  store i32 %175, i32* %173, align 8, !noalias !5
  %176 = getelementptr inbounds i8, i8* %164, i64 8
  %177 = bitcast i8* %176 to i64*
  store i64 %74, i64* %177, align 8, !noalias !5
  %178 = bitcast i8* %164 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %178, align 8, !noalias !5
  %179 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = add i64 %180, 1
  %182 = uitofp i64 %181 to float
  %183 = uitofp i64 %76 to float
  %184 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %185 = load float, float* %184, align 4
  %186 = fmul float %185, %183
  %187 = fcmp olt float %186, %182
  %188 = or i1 %77, %187
  br i1 %188, label %189, label %212

189:                                              ; preds = %160
  %190 = shl i64 %76, 1
  %191 = icmp ult i64 %76, 3
  %192 = tail call i64 @llvm.ctpop.i64(i64 %76) #7, !range !4
  %193 = icmp ugt i64 %192, 1
  %194 = or i1 %191, %193
  %195 = zext i1 %194 to i64
  %196 = or i64 %190, %195
  %197 = fdiv float %182, %185
  %198 = tail call float @llvm.ceil.f32(float %197) #7
  %199 = fptoui float %198 to i64
  %200 = icmp ult i64 %196, %199
  %201 = select i1 %200, i64 %199, i64 %196
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE6rehashEm(%"class.std::__1::__hash_table"* %0, i64 %201)
  %202 = load i64, i64* %75, align 8
  %203 = tail call i64 @llvm.ctpop.i64(i64 %202) #7, !range !4
  %204 = icmp ugt i64 %203, 1
  br i1 %204, label %208, label %205

205:                                              ; preds = %189
  %206 = add i64 %202, 4294967295
  %207 = and i64 %206, %74
  br label %212

208:                                              ; preds = %189
  %209 = icmp ult i64 %74, %202
  br i1 %209, label %212, label %210

210:                                              ; preds = %208
  %211 = urem i64 %74, %202
  br label %212

212:                                              ; preds = %210, %208, %205, %160
  %213 = phi i64 [ %76, %160 ], [ %202, %205 ], [ %202, %208 ], [ %202, %210 ]
  %214 = phi i64 [ %161, %160 ], [ %207, %205 ], [ %74, %208 ], [ %211, %210 ]
  %215 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %216 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %215, align 8
  %217 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %216, i64 %214
  %218 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %217, align 8
  %219 = icmp eq %"struct.std::__1::__hash_node_base"* %218, null
  br i1 %219, label %220, label %248

220:                                              ; preds = %212
  %221 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %222 = bitcast %"struct.std::__1::__hash_node_base"* %221 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast i8* %164 to i64*
  store i64 %223, i64* %224, align 8
  %225 = bitcast %"struct.std::__1::__hash_node_base"* %221 to i8**
  store i8* %164, i8** %225, align 8
  %226 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %215, align 8
  %227 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %226, i64 %214
  store %"struct.std::__1::__hash_node_base"* %221, %"struct.std::__1::__hash_node_base"** %227, align 8
  %228 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %178, align 8
  %229 = icmp eq %"struct.std::__1::__hash_node_base"* %228, null
  br i1 %229, label %255, label %230

230:                                              ; preds = %220
  %231 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %228, i64 1
  %232 = bitcast %"struct.std::__1::__hash_node_base"* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = tail call i64 @llvm.ctpop.i64(i64 %213) #7, !range !4
  %235 = icmp ugt i64 %234, 1
  br i1 %235, label %239, label %236

236:                                              ; preds = %230
  %237 = add i64 %213, -1
  %238 = and i64 %233, %237
  br label %243

239:                                              ; preds = %230
  %240 = icmp ult i64 %233, %213
  br i1 %240, label %243, label %241

241:                                              ; preds = %239
  %242 = urem i64 %233, %213
  br label %243

243:                                              ; preds = %236, %239, %241
  %244 = phi i64 [ %238, %236 ], [ %242, %241 ], [ %233, %239 ]
  %245 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %215, align 8
  %246 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %245, i64 %244
  %247 = bitcast %"struct.std::__1::__hash_node_base"** %246 to i8**
  br label %253

248:                                              ; preds = %212
  %249 = bitcast %"struct.std::__1::__hash_node_base"* %218 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast i8* %164 to i64*
  store i64 %250, i64* %251, align 8
  %252 = bitcast %"struct.std::__1::__hash_node_base"* %218 to i8**
  br label %253

253:                                              ; preds = %248, %243
  %254 = phi i8** [ %247, %243 ], [ %252, %248 ]
  store i8* %164, i8** %254, align 8
  br label %255

255:                                              ; preds = %253, %220
  %256 = bitcast i8* %164 to %"struct.std::__1::__hash_node_base"*
  %257 = load i64, i64* %179, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* %179, align 8
  br label %259

259:                                              ; preds = %134, %140, %141, %148, %255
  %260 = phi i8 [ 1, %255 ], [ 0, %148 ], [ 0, %141 ], [ 0, %140 ], [ 0, %134 ]
  %261 = phi %"struct.std::__1::__hash_node_base"* [ %256, %255 ], [ %102, %148 ], [ %102, %141 ], [ %102, %140 ], [ %102, %134 ]
  %262 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } undef, %"struct.std::__1::__hash_node_base"* %261, 0
  %263 = insertvalue { %"struct.std::__1::__hash_node_base"*, i8 } %262, i8 %260, 1
  ret { %"struct.std::__1::__hash_node_base"*, i8 } %263
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE6rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !4
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #7
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #7, !range !4
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #7
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #7, !range !4
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #7
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE8__rehashEm(%"class.std::__1::__hash_table"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i8* @_ZN7glslang14TPoolAllocator8allocateEm(%"class.glslang::TPoolAllocator"*, i64) local_unnamed_addr #2

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE8__rehashEm(%"class.std::__1::__hash_table"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %183, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %6 = load %"class.glslang::TPoolAllocator"*, %"class.glslang::TPoolAllocator"** %5, align 8
  %7 = shl i64 %1, 3
  %8 = tail call i8* @_ZN7glslang14TPoolAllocator8allocateEm(%"class.glslang::TPoolAllocator"* %6, i64 %7) #7
  %9 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = bitcast %"class.std::__1::__hash_table"* %0 to i8**
  store i8* %8, i8** %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %11, align 8
  %12 = bitcast i8* %8 to %"struct.std::__1::__hash_node_base"**
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %12, align 8
  %13 = icmp eq i64 %1, 1
  br i1 %13, label %32, label %14

14:                                               ; preds = %4
  %15 = add i64 %1, -1
  %16 = add i64 %1, -2
  %17 = and i64 %15, 3
  %18 = icmp ult i64 %16, 3
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = sub i64 %15, %17
  br label %37

21:                                               ; preds = %37, %14
  %22 = phi i64 [ 1, %14 ], [ %51, %37 ]
  %23 = icmp eq i64 %17, 0
  br i1 %23, label %32, label %24

24:                                               ; preds = %21, %24
  %25 = phi i64 [ %29, %24 ], [ %22, %21 ]
  %26 = phi i64 [ %30, %24 ], [ %17, %21 ]
  %27 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %28 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %27, i64 %25
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %28, align 8
  %29 = add nuw i64 %25, 1
  %30 = add i64 %26, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %24, !llvm.loop !8

32:                                               ; preds = %21, %24, %4
  %33 = getelementptr inbounds %"class.std::__1::__hash_table", %"class.std::__1::__hash_table"* %0, i64 0, i32 1, i32 0, i32 0
  %34 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %33, i64 0, i32 0
  %35 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %34, align 8
  %36 = icmp eq %"struct.std::__1::__hash_node_base"* %35, null
  br i1 %36, label %185, label %54

37:                                               ; preds = %37, %19
  %38 = phi i64 [ 1, %19 ], [ %51, %37 ]
  %39 = phi i64 [ %20, %19 ], [ %52, %37 ]
  %40 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %41 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %40, i64 %38
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %41, align 8
  %42 = add nuw nsw i64 %38, 1
  %43 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %43, i64 %42
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %44, align 8
  %45 = add nuw nsw i64 %38, 2
  %46 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %47 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %46, i64 %45
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %47, align 8
  %48 = add nuw i64 %38, 3
  %49 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %49, i64 %48
  store %"struct.std::__1::__hash_node_base"* null, %"struct.std::__1::__hash_node_base"** %50, align 8
  %51 = add nuw i64 %38, 4
  %52 = add i64 %39, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %21, label %37

54:                                               ; preds = %32
  %55 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %35, i64 1
  %56 = bitcast %"struct.std::__1::__hash_node_base"* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = tail call i64 @llvm.ctpop.i64(i64 %1) #7, !range !4
  %59 = icmp ugt i64 %58, 1
  br i1 %59, label %63, label %60

60:                                               ; preds = %54
  %61 = add i64 %1, -1
  %62 = and i64 %57, %61
  br label %67

63:                                               ; preds = %54
  %64 = icmp ult i64 %57, %1
  br i1 %64, label %67, label %65

65:                                               ; preds = %63
  %66 = urem i64 %57, %1
  br label %67

67:                                               ; preds = %60, %63, %65
  %68 = phi i64 [ %62, %60 ], [ %66, %65 ], [ %57, %63 ]
  %69 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %70 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %69, i64 %68
  store %"struct.std::__1::__hash_node_base"* %33, %"struct.std::__1::__hash_node_base"** %70, align 8
  %71 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %35, i64 0, i32 0
  %72 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %71, align 8
  %73 = icmp eq %"struct.std::__1::__hash_node_base"* %72, null
  br i1 %73, label %185, label %74

74:                                               ; preds = %67
  %75 = add i64 %1, -1
  br label %76

76:                                               ; preds = %74, %177
  %77 = phi %"struct.std::__1::__hash_node_base"* [ %72, %74 ], [ %181, %177 ]
  %78 = phi i64 [ %68, %74 ], [ %179, %177 ]
  %79 = phi %"struct.std::__1::__hash_node_base"* [ %35, %74 ], [ %178, %177 ]
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %77, i64 1
  %81 = bitcast %"struct.std::__1::__hash_node_base"* %80 to i64*
  %82 = load i64, i64* %81, align 8
  br i1 %59, label %85, label %83

83:                                               ; preds = %76
  %84 = and i64 %82, %75
  br label %89

85:                                               ; preds = %76
  %86 = icmp ult i64 %82, %1
  br i1 %86, label %89, label %87

87:                                               ; preds = %85
  %88 = urem i64 %82, %1
  br label %89

89:                                               ; preds = %83, %85, %87
  %90 = phi i64 [ %84, %83 ], [ %88, %87 ], [ %82, %85 ]
  %91 = icmp eq i64 %90, %78
  br i1 %91, label %177, label %92

92:                                               ; preds = %89
  %93 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %94 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %93, i64 %90
  %95 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %94, align 8
  %96 = icmp eq %"struct.std::__1::__hash_node_base"* %95, null
  br i1 %96, label %115, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %77, i64 0, i32 0
  %99 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %98, align 8
  %100 = icmp eq %"struct.std::__1::__hash_node_base"* %99, null
  br i1 %100, label %163, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %77, i64 2
  %103 = bitcast %"struct.std::__1::__hash_node_base"* %102 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %104 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %103, i64 0, i32 1, i32 0
  %105 = load i8, i8* %104, align 1
  %106 = icmp slt i8 %105, 0
  %107 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %77, i64 3
  %108 = bitcast %"struct.std::__1::__hash_node_base"* %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = zext i8 %105 to i64
  %111 = select i1 %106, i64 %109, i64 %110
  %112 = bitcast %"struct.std::__1::__hash_node_base"* %102 to i8**
  %113 = bitcast %"struct.std::__1::__hash_node_base"* %102 to i8*
  %114 = icmp eq i64 %111, 0
  br label %116

115:                                              ; preds = %92
  store %"struct.std::__1::__hash_node_base"* %79, %"struct.std::__1::__hash_node_base"** %94, align 8
  br label %177

116:                                              ; preds = %101, %159
  %117 = phi %"struct.std::__1::__hash_node_base"* [ %99, %101 ], [ %161, %159 ]
  %118 = phi %"struct.std::__1::__hash_node_base"* [ %77, %101 ], [ %117, %159 ]
  %119 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %117, i64 2
  %120 = bitcast %"struct.std::__1::__hash_node_base"* %119 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"*
  %121 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::__short"* %120, i64 0, i32 1, i32 0
  %122 = load i8, i8* %121, align 1
  %123 = icmp slt i8 %122, 0
  %124 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %117, i64 3
  %125 = bitcast %"struct.std::__1::__hash_node_base"* %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = zext i8 %122 to i64
  %128 = select i1 %123, i64 %126, i64 %127
  %129 = icmp eq i64 %111, %128
  br i1 %129, label %130, label %163

130:                                              ; preds = %116
  %131 = load i8*, i8** %112, align 8
  %132 = select i1 %106, i8* %131, i8* %113
  %133 = bitcast %"struct.std::__1::__hash_node_base"* %119 to i8**
  %134 = load i8*, i8** %133, align 8
  %135 = bitcast %"struct.std::__1::__hash_node_base"* %119 to i8*
  %136 = select i1 %123, i8* %134, i8* %135
  br i1 %106, label %143, label %137

137:                                              ; preds = %130
  br i1 %114, label %159, label %138

138:                                              ; preds = %137
  %139 = ptrtoint i8* %131 to i64
  %140 = trunc i64 %139 to i8
  %141 = load i8, i8* %136, align 1
  %142 = icmp eq i8 %141, %140
  br i1 %142, label %144, label %163

143:                                              ; preds = %130
  br i1 %114, label %159, label %156

144:                                              ; preds = %138, %151
  %145 = phi i64 [ %148, %151 ], [ %110, %138 ]
  %146 = phi i8* [ %149, %151 ], [ %113, %138 ]
  %147 = phi i8* [ %152, %151 ], [ %136, %138 ]
  %148 = add i64 %145, -1
  %149 = getelementptr inbounds i8, i8* %146, i64 1
  %150 = icmp eq i64 %148, 0
  br i1 %150, label %159, label %151

151:                                              ; preds = %144
  %152 = getelementptr inbounds i8, i8* %147, i64 1
  %153 = load i8, i8* %149, align 1
  %154 = load i8, i8* %152, align 1
  %155 = icmp eq i8 %153, %154
  br i1 %155, label %144, label %163

156:                                              ; preds = %143
  %157 = tail call i32 @bcmp(i8* %132, i8* %136, i64 %111) #7
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %163

159:                                              ; preds = %144, %137, %143, %156
  %160 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %117, i64 0, i32 0
  %161 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %160, align 8
  %162 = icmp eq %"struct.std::__1::__hash_node_base"* %161, null
  br i1 %162, label %163, label %116

163:                                              ; preds = %156, %159, %116, %138, %151, %97
  %164 = phi %"struct.std::__1::__hash_node_base"* [ %77, %97 ], [ %118, %151 ], [ %118, %156 ], [ %117, %159 ], [ %118, %116 ], [ %118, %138 ]
  %165 = bitcast %"struct.std::__1::__hash_node_base"* %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"struct.std::__1::__hash_node_base"* %79 to i64*
  store i64 %166, i64* %167, align 8
  %168 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %169 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %168, i64 %90
  %170 = bitcast %"struct.std::__1::__hash_node_base"** %169 to i64**
  %171 = load i64*, i64** %170, align 8
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %165, align 8
  %173 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %9, align 8
  %174 = getelementptr inbounds %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %173, i64 %90
  %175 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %174, align 8
  %176 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %175, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base"* %77, %"struct.std::__1::__hash_node_base"** %176, align 8
  br label %177

177:                                              ; preds = %89, %163, %115
  %178 = phi %"struct.std::__1::__hash_node_base"* [ %77, %115 ], [ %79, %163 ], [ %77, %89 ]
  %179 = phi i64 [ %90, %115 ], [ %78, %163 ], [ %78, %89 ]
  %180 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %178, i64 0, i32 0
  %181 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %180, align 8
  %182 = icmp eq %"struct.std::__1::__hash_node_base"* %181, null
  br i1 %182, label %185, label %76

183:                                              ; preds = %2
  %184 = bitcast %"class.std::__1::__hash_table"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %184, i8 0, i64 16, i1 false)
  br label %185

185:                                              ; preds = %177, %67, %32, %183
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPKNS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEENS5_IS9_EEE8__appendEmRKS9_(%"class.std::__1::vector.16"*, i64, %"class.std::__1::basic_string"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::basic_string"** %2 to i8*
  %5 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::basic_string"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %9 = bitcast %"class.std::__1::basic_string"*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp ult i64 %12, %1
  br i1 %13, label %139, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %10 to %"class.std::__1::basic_string"**
  %16 = inttoptr i64 %10 to i8*
  %17 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %1
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %14
  %20 = bitcast %"class.std::__1::basic_string"** %2 to i64*
  %21 = shl nsw i64 %1, 3
  %22 = add i64 %21, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 4
  br i1 %25, label %26, label %48

26:                                               ; preds = %106, %48, %19
  %27 = phi %"class.std::__1::basic_string"** [ %15, %48 ], [ %15, %19 ], [ %60, %106 ]
  %28 = ptrtoint %"class.std::__1::basic_string"** %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %29
  %31 = ptrtoint %"class.std::__1::basic_string"** %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 3
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %26, %37
  %38 = phi %"class.std::__1::basic_string"** [ %42, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %43, %37 ], [ %35, %26 ]
  %40 = load i64, i64* %20, align 8
  %41 = bitcast %"class.std::__1::basic_string"** %38 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %38, i64 1
  %43 = add i64 %39, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %37, !llvm.loop !9

45:                                               ; preds = %37, %26
  %46 = phi %"class.std::__1::basic_string"** [ %27, %26 ], [ %42, %37 ]
  %47 = icmp ult i64 %32, 56
  br i1 %47, label %108, label %110

48:                                               ; preds = %19
  %49 = shl nsw i64 %1, 3
  %50 = add i64 %49, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %52
  %54 = getelementptr i8, i8* %4, i64 1
  %55 = icmp ugt i8* %54, %16
  %56 = icmp ugt %"class.std::__1::basic_string"** %53, %2
  %57 = and i1 %55, %56
  br i1 %57, label %26, label %58

58:                                               ; preds = %48
  %59 = and i64 %24, 4611686018427387900
  %60 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %59
  %61 = add nsw i64 %59, -4
  %62 = lshr exact i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i64, i64* %20, align 8, !alias.scope !10
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = shufflevector <2 x i64> %69, <2 x i64> undef, <2 x i32> zeroinitializer
  %71 = insertelement <2 x i64> undef, i64 %68, i32 0
  %72 = shufflevector <2 x i64> %71, <2 x i64> undef, <2 x i32> zeroinitializer
  %73 = load i64, i64* %20, align 8, !alias.scope !10
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = shufflevector <2 x i64> %74, <2 x i64> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x i64> undef, i64 %73, i32 0
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %79
  %82 = bitcast %"class.std::__1::basic_string"** %81 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %82, align 8, !alias.scope !13, !noalias !10
  %83 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %81, i64 2
  %84 = bitcast %"class.std::__1::basic_string"** %83 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %84, align 8, !alias.scope !13, !noalias !10
  %85 = or i64 %79, 4
  %86 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %85
  %87 = bitcast %"class.std::__1::basic_string"** %86 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %87, align 8, !alias.scope !13, !noalias !10
  %88 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %86, i64 2
  %89 = bitcast %"class.std::__1::basic_string"** %88 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %89, align 8, !alias.scope !13, !noalias !10
  %90 = add i64 %79, 8
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !15

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, i64 %94
  %98 = load i64, i64* %20, align 8, !alias.scope !10
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = shufflevector <2 x i64> %99, <2 x i64> undef, <2 x i32> zeroinitializer
  %101 = insertelement <2 x i64> undef, i64 %98, i32 0
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %103 = bitcast %"class.std::__1::basic_string"** %97 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %103, align 8, !alias.scope !13, !noalias !10
  %104 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %97, i64 2
  %105 = bitcast %"class.std::__1::basic_string"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !13, !noalias !10
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %24, %59
  br i1 %107, label %108, label %26

108:                                              ; preds = %45, %110, %106
  %109 = ptrtoint %"class.std::__1::basic_string"** %17 to i64
  br label %137

110:                                              ; preds = %45, %110
  %111 = phi %"class.std::__1::basic_string"** [ %135, %110 ], [ %46, %45 ]
  %112 = load i64, i64* %20, align 8
  %113 = bitcast %"class.std::__1::basic_string"** %111 to i64*
  store i64 %112, i64* %113, align 8
  %114 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 1
  %115 = load i64, i64* %20, align 8
  %116 = bitcast %"class.std::__1::basic_string"** %114 to i64*
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 2
  %118 = load i64, i64* %20, align 8
  %119 = bitcast %"class.std::__1::basic_string"** %117 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 3
  %121 = load i64, i64* %20, align 8
  %122 = bitcast %"class.std::__1::basic_string"** %120 to i64*
  store i64 %121, i64* %122, align 8
  %123 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 4
  %124 = load i64, i64* %20, align 8
  %125 = bitcast %"class.std::__1::basic_string"** %123 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 5
  %127 = load i64, i64* %20, align 8
  %128 = bitcast %"class.std::__1::basic_string"** %126 to i64*
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 6
  %130 = load i64, i64* %20, align 8
  %131 = bitcast %"class.std::__1::basic_string"** %129 to i64*
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 7
  %133 = load i64, i64* %20, align 8
  %134 = bitcast %"class.std::__1::basic_string"** %132 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %111, i64 8
  %136 = icmp eq %"class.std::__1::basic_string"** %135, %17
  br i1 %136, label %108, label %110, !llvm.loop !17

137:                                              ; preds = %14, %108
  %138 = phi i64 [ %109, %108 ], [ %10, %14 ]
  store i64 %138, i64* %9, align 8
  ret void

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %10, %141
  %143 = ashr exact i64 %142, 3
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 2305843009213693951
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #8
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %7, %141
  %150 = ashr exact i64 %149, 3
  %151 = icmp ult i64 %150, 1152921504606846975
  br i1 %151, label %152, label %157

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 2
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %164, label %157

157:                                              ; preds = %148, %152
  %158 = phi i64 [ %155, %152 ], [ 2305843009213693951, %148 ]
  %159 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %160 = load %"class.glslang::TPoolAllocator"*, %"class.glslang::TPoolAllocator"** %159, align 8
  %161 = shl i64 %158, 3
  %162 = tail call i8* @_ZN7glslang14TPoolAllocator8allocateEm(%"class.glslang::TPoolAllocator"* %160, i64 %161) #7
  %163 = bitcast i8* %162 to %"class.std::__1::basic_string"**
  br label %164

164:                                              ; preds = %157, %152
  %165 = phi i64 [ %158, %157 ], [ 0, %152 ]
  %166 = phi %"class.std::__1::basic_string"** [ %163, %157 ], [ null, %152 ]
  %167 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %166, i64 %143
  %168 = ptrtoint %"class.std::__1::basic_string"** %167 to i64
  %169 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %166, i64 %165
  %170 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %167, i64 %1
  %171 = bitcast %"class.std::__1::basic_string"** %2 to i64*
  %172 = shl nsw i64 %1, 3
  %173 = add i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = and i64 %175, 7
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %190, label %178

178:                                              ; preds = %164, %178
  %179 = phi %"class.std::__1::basic_string"** [ %184, %178 ], [ %167, %164 ]
  %180 = phi i64 [ %185, %178 ], [ %168, %164 ]
  %181 = phi i64 [ %186, %178 ], [ %176, %164 ]
  %182 = load i64, i64* %171, align 8
  %183 = inttoptr i64 %180 to i64*
  store i64 %182, i64* %183, align 8
  %184 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %179, i64 1
  %185 = ptrtoint %"class.std::__1::basic_string"** %184 to i64
  %186 = add i64 %181, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %178, !llvm.loop !18

188:                                              ; preds = %178
  %189 = ptrtoint %"class.std::__1::basic_string"** %184 to i64
  br label %190

190:                                              ; preds = %164, %188
  %191 = phi %"class.std::__1::basic_string"** [ %167, %164 ], [ %184, %188 ]
  %192 = phi i64 [ %168, %164 ], [ %189, %188 ]
  %193 = icmp ult i64 %173, 56
  br i1 %193, label %223, label %194

194:                                              ; preds = %190, %194
  %195 = phi %"class.std::__1::basic_string"** [ %220, %194 ], [ %191, %190 ]
  %196 = phi i64 [ %221, %194 ], [ %192, %190 ]
  %197 = load i64, i64* %171, align 8
  %198 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %198, align 8
  %199 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 1
  %200 = load i64, i64* %171, align 8
  %201 = bitcast %"class.std::__1::basic_string"** %199 to i64*
  store i64 %200, i64* %201, align 8
  %202 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 2
  %203 = load i64, i64* %171, align 8
  %204 = bitcast %"class.std::__1::basic_string"** %202 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 3
  %206 = load i64, i64* %171, align 8
  %207 = bitcast %"class.std::__1::basic_string"** %205 to i64*
  store i64 %206, i64* %207, align 8
  %208 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 4
  %209 = load i64, i64* %171, align 8
  %210 = bitcast %"class.std::__1::basic_string"** %208 to i64*
  store i64 %209, i64* %210, align 8
  %211 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 5
  %212 = load i64, i64* %171, align 8
  %213 = bitcast %"class.std::__1::basic_string"** %211 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 6
  %215 = load i64, i64* %171, align 8
  %216 = bitcast %"class.std::__1::basic_string"** %214 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 7
  %218 = load i64, i64* %171, align 8
  %219 = bitcast %"class.std::__1::basic_string"** %217 to i64*
  store i64 %218, i64* %219, align 8
  %220 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %195, i64 8
  %221 = ptrtoint %"class.std::__1::basic_string"** %220 to i64
  %222 = icmp eq %"class.std::__1::basic_string"** %170, %220
  br i1 %222, label %223, label %194

223:                                              ; preds = %194, %190
  %224 = ptrtoint %"class.std::__1::basic_string"** %169 to i64
  %225 = ptrtoint %"class.std::__1::basic_string"** %170 to i64
  %226 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %227 = load %"class.std::__1::basic_string"**, %"class.std::__1::basic_string"*** %226, align 8
  %228 = ptrtoint %"class.std::__1::basic_string"** %227 to i64
  %229 = load %"class.std::__1::basic_string"**, %"class.std::__1::basic_string"*** %8, align 8
  %230 = icmp eq %"class.std::__1::basic_string"** %229, %227
  br i1 %230, label %403, label %231

231:                                              ; preds = %223
  %232 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 -1
  %233 = ptrtoint %"class.std::__1::basic_string"** %232 to i64
  %234 = sub i64 %233, %228
  %235 = lshr i64 %234, 3
  %236 = add nuw nsw i64 %235, 1
  %237 = icmp ult i64 %236, 4
  br i1 %237, label %330, label %238

238:                                              ; preds = %231
  %239 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 -1
  %240 = ptrtoint %"class.std::__1::basic_string"** %239 to i64
  %241 = sub i64 %240, %228
  %242 = lshr i64 %241, 3
  %243 = xor i64 %242, -1
  %244 = add nsw i64 %143, %243
  %245 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %166, i64 %244
  %246 = xor i64 %242, -1
  %247 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 %246
  %248 = icmp ult %"class.std::__1::basic_string"** %245, %229
  %249 = icmp ult %"class.std::__1::basic_string"** %247, %167
  %250 = and i1 %248, %249
  br i1 %250, label %330, label %251

251:                                              ; preds = %238
  %252 = and i64 %236, 4611686018427387900
  %253 = sub nsw i64 0, %252
  %254 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %167, i64 %253
  %255 = sub nsw i64 0, %252
  %256 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 %255
  %257 = add nsw i64 %252, -4
  %258 = lshr exact i64 %257, 2
  %259 = add nuw nsw i64 %258, 1
  %260 = and i64 %259, 1
  %261 = icmp eq i64 %257, 0
  br i1 %261, label %308, label %262

262:                                              ; preds = %251
  %263 = sub nuw nsw i64 %259, %260
  %264 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %167, i64 -1
  %265 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 -1
  %266 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %167, i64 -1
  %267 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 -1
  br label %268

268:                                              ; preds = %268, %262
  %269 = phi i64 [ 0, %262 ], [ %303, %268 ]
  %270 = phi i64 [ %263, %262 ], [ %304, %268 ]
  %271 = sub i64 0, %269
  %272 = sub i64 0, %269
  %273 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %264, i64 %271
  %274 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %265, i64 %272
  %275 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %274, i64 -1
  %276 = bitcast %"class.std::__1::basic_string"** %275 to <2 x i64>*
  %277 = load <2 x i64>, <2 x i64>* %276, align 8, !alias.scope !19
  %278 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %274, i64 -2
  %279 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %278, i64 -1
  %280 = bitcast %"class.std::__1::basic_string"** %279 to <2 x i64>*
  %281 = load <2 x i64>, <2 x i64>* %280, align 8, !alias.scope !19
  %282 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %273, i64 -1
  %283 = bitcast %"class.std::__1::basic_string"** %282 to <2 x i64>*
  store <2 x i64> %277, <2 x i64>* %283, align 8, !alias.scope !22, !noalias !19
  %284 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %273, i64 -2
  %285 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %284, i64 -1
  %286 = bitcast %"class.std::__1::basic_string"** %285 to <2 x i64>*
  store <2 x i64> %281, <2 x i64>* %286, align 8, !alias.scope !22, !noalias !19
  %287 = sub nuw nsw i64 -4, %269
  %288 = sub nuw nsw i64 -4, %269
  %289 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %266, i64 %287
  %290 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %267, i64 %288
  %291 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %290, i64 -1
  %292 = bitcast %"class.std::__1::basic_string"** %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 8, !alias.scope !19
  %294 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %290, i64 -2
  %295 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %294, i64 -1
  %296 = bitcast %"class.std::__1::basic_string"** %295 to <2 x i64>*
  %297 = load <2 x i64>, <2 x i64>* %296, align 8, !alias.scope !19
  %298 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %289, i64 -1
  %299 = bitcast %"class.std::__1::basic_string"** %298 to <2 x i64>*
  store <2 x i64> %293, <2 x i64>* %299, align 8, !alias.scope !22, !noalias !19
  %300 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %289, i64 -2
  %301 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %300, i64 -1
  %302 = bitcast %"class.std::__1::basic_string"** %301 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %302, align 8, !alias.scope !22, !noalias !19
  %303 = add i64 %269, 8
  %304 = add i64 %270, -2
  %305 = icmp eq i64 %304, 0
  br i1 %305, label %306, label %268, !llvm.loop !24

306:                                              ; preds = %268
  %307 = sub nuw nsw i64 -8, %269
  br label %308

308:                                              ; preds = %306, %251
  %309 = phi i64 [ 0, %251 ], [ %307, %306 ]
  %310 = icmp eq i64 %260, 0
  br i1 %310, label %328, label %311

311:                                              ; preds = %308
  %312 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %167, i64 -1
  %313 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %229, i64 -1
  %314 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %312, i64 %309
  %315 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %313, i64 %309
  %316 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %315, i64 -1
  %317 = bitcast %"class.std::__1::basic_string"** %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 8, !alias.scope !19
  %319 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %315, i64 -2
  %320 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %319, i64 -1
  %321 = bitcast %"class.std::__1::basic_string"** %320 to <2 x i64>*
  %322 = load <2 x i64>, <2 x i64>* %321, align 8, !alias.scope !19
  %323 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %314, i64 -1
  %324 = bitcast %"class.std::__1::basic_string"** %323 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %324, align 8, !alias.scope !22, !noalias !19
  %325 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %314, i64 -2
  %326 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %325, i64 -1
  %327 = bitcast %"class.std::__1::basic_string"** %326 to <2 x i64>*
  store <2 x i64> %322, <2 x i64>* %327, align 8, !alias.scope !22, !noalias !19
  br label %328

328:                                              ; preds = %308, %311
  %329 = icmp eq i64 %236, %252
  br i1 %329, label %400, label %330

330:                                              ; preds = %328, %238, %231
  %331 = phi %"class.std::__1::basic_string"** [ %167, %238 ], [ %167, %231 ], [ %254, %328 ]
  %332 = phi %"class.std::__1::basic_string"** [ %229, %238 ], [ %229, %231 ], [ %256, %328 ]
  %333 = getelementptr %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %332, i64 -1
  %334 = ptrtoint %"class.std::__1::basic_string"** %333 to i64
  %335 = sub i64 %334, %228
  %336 = lshr i64 %335, 3
  %337 = add nuw nsw i64 %336, 1
  %338 = and i64 %337, 7
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %351, label %340

340:                                              ; preds = %330, %340
  %341 = phi %"class.std::__1::basic_string"** [ %344, %340 ], [ %331, %330 ]
  %342 = phi %"class.std::__1::basic_string"** [ %345, %340 ], [ %332, %330 ]
  %343 = phi i64 [ %349, %340 ], [ %338, %330 ]
  %344 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %341, i64 -1
  %345 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %342, i64 -1
  %346 = bitcast %"class.std::__1::basic_string"** %345 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = bitcast %"class.std::__1::basic_string"** %344 to i64*
  store i64 %347, i64* %348, align 8
  %349 = add i64 %343, -1
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %340, !llvm.loop !25

351:                                              ; preds = %340, %330
  %352 = phi %"class.std::__1::basic_string"** [ undef, %330 ], [ %344, %340 ]
  %353 = phi %"class.std::__1::basic_string"** [ %331, %330 ], [ %344, %340 ]
  %354 = phi %"class.std::__1::basic_string"** [ %332, %330 ], [ %345, %340 ]
  %355 = icmp ult i64 %335, 56
  br i1 %355, label %400, label %356

356:                                              ; preds = %351, %356
  %357 = phi %"class.std::__1::basic_string"** [ %394, %356 ], [ %353, %351 ]
  %358 = phi %"class.std::__1::basic_string"** [ %395, %356 ], [ %354, %351 ]
  %359 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -1
  %360 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -1
  %361 = bitcast %"class.std::__1::basic_string"** %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = bitcast %"class.std::__1::basic_string"** %359 to i64*
  store i64 %362, i64* %363, align 8
  %364 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -2
  %365 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -2
  %366 = bitcast %"class.std::__1::basic_string"** %365 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = bitcast %"class.std::__1::basic_string"** %364 to i64*
  store i64 %367, i64* %368, align 8
  %369 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -3
  %370 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -3
  %371 = bitcast %"class.std::__1::basic_string"** %370 to i64*
  %372 = load i64, i64* %371, align 8
  %373 = bitcast %"class.std::__1::basic_string"** %369 to i64*
  store i64 %372, i64* %373, align 8
  %374 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -4
  %375 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -4
  %376 = bitcast %"class.std::__1::basic_string"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.std::__1::basic_string"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -5
  %380 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -5
  %381 = bitcast %"class.std::__1::basic_string"** %380 to i64*
  %382 = load i64, i64* %381, align 8
  %383 = bitcast %"class.std::__1::basic_string"** %379 to i64*
  store i64 %382, i64* %383, align 8
  %384 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -6
  %385 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -6
  %386 = bitcast %"class.std::__1::basic_string"** %385 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = bitcast %"class.std::__1::basic_string"** %384 to i64*
  store i64 %387, i64* %388, align 8
  %389 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -7
  %390 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -7
  %391 = bitcast %"class.std::__1::basic_string"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.std::__1::basic_string"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %357, i64 -8
  %395 = getelementptr inbounds %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %358, i64 -8
  %396 = bitcast %"class.std::__1::basic_string"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.std::__1::basic_string"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = icmp eq %"class.std::__1::basic_string"** %395, %227
  br i1 %399, label %400, label %356, !llvm.loop !26

400:                                              ; preds = %351, %356, %328
  %401 = phi %"class.std::__1::basic_string"** [ %254, %328 ], [ %352, %351 ], [ %394, %356 ]
  %402 = ptrtoint %"class.std::__1::basic_string"** %401 to i64
  br label %403

403:                                              ; preds = %223, %400
  %404 = phi i64 [ %402, %400 ], [ %168, %223 ]
  store i64 %404, i64* %140, align 8
  store i64 %225, i64* %9, align 8
  store i64 %224, i64* %6, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #3

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i64 0, i64 65}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE21__construct_node_hashINS_4pairIS8_iEEJEEENS_10unique_ptrINS_11__hash_nodeIS9_PvEENS_22__hash_node_destructorINS6_ISQ_EEEEEEmOT_DpOT0_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEEN7glslang14pool_allocatorIcEEEEiEENS_22__unordered_map_hasherIS8_S9_NS_4hashIS8_EENS_8equal_toIS8_EELb1EEENS_21__unordered_map_equalIS8_S9_SE_SC_Lb1EEENS6_IS9_EEE21__construct_node_hashINS_4pairIS8_iEEJEEENS_10unique_ptrINS_11__hash_nodeIS9_PvEENS_22__hash_node_destructorINS6_ISQ_EEEEEEmOT_DpOT0_"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !3}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !16}
