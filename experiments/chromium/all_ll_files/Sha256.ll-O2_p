; ModuleID = '../../third_party/lzma_sdk/Sha256.c'
source_filename = "../../third_party/lzma_sdk/Sha256.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CSha256 = type { [8 x i32], i64, [64 x i8] }

@K = internal unnamed_addr constant [64 x i32] [i32 1116352408, i32 1899447441, i32 -1245643825, i32 -373957723, i32 961987163, i32 1508970993, i32 -1841331548, i32 -1424204075, i32 -670586216, i32 310598401, i32 607225278, i32 1426881987, i32 1925078388, i32 -2132889090, i32 -1680079193, i32 -1046744716, i32 -459576895, i32 -272742522, i32 264347078, i32 604807628, i32 770255983, i32 1249150122, i32 1555081692, i32 1996064986, i32 -1740746414, i32 -1473132947, i32 -1341970488, i32 -1084653625, i32 -958395405, i32 -710438585, i32 113926993, i32 338241895, i32 666307205, i32 773529912, i32 1294757372, i32 1396182291, i32 1695183700, i32 1986661051, i32 -2117940946, i32 -1838011259, i32 -1564481375, i32 -1474664885, i32 -1035236496, i32 -949202525, i32 -778901479, i32 -694614492, i32 -200395387, i32 275423344, i32 430227734, i32 506948616, i32 659060556, i32 883997877, i32 958139571, i32 1322822218, i32 1537002063, i32 1747873779, i32 1955562222, i32 2024104815, i32 -2067236844, i32 -1933114872, i32 -1866530822, i32 -1538233109, i32 -1090935817, i32 -965641998], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @Sha256_Init(%struct.CSha256* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.CSha256* %0 to <4 x i32>*
  store <4 x i32> <i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534>, <4 x i32>* %2, align 8
  %3 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 4
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225>, <4 x i32>* %4, align 8
  %5 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 1
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @Sha256_Update(%struct.CSha256* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %40, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 63
  %10 = add i64 %7, %2
  store i64 %10, i64* %6, align 8
  %11 = sub nuw nsw i32 64, %9
  %12 = zext i32 %11 to i64
  %13 = icmp ugt i64 %12, %2
  br i1 %13, label %14, label %17

14:                                               ; preds = %5
  %15 = zext i32 %9 to i64
  %16 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 %15
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %1, i64 %2, i1 false)
  br label %40

17:                                               ; preds = %5
  %18 = sub i64 %2, %12
  %19 = zext i32 %9 to i64
  %20 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %1, i64 %12, i1 false)
  %21 = getelementptr inbounds i8, i8* %1, i64 %12
  tail call fastcc void @Sha256_WriteByteBlock(%struct.CSha256* %0)
  %22 = icmp ult i64 %18, 64
  br i1 %22, label %34, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 0
  %25 = sub i64 %2, %12
  br label %26

26:                                               ; preds = %23, %26
  %27 = phi i64 [ %18, %23 ], [ %29, %26 ]
  %28 = phi i8* [ %21, %23 ], [ %30, %26 ]
  %29 = add i64 %27, -64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 1 %28, i64 64, i1 false)
  %30 = getelementptr inbounds i8, i8* %28, i64 64
  tail call fastcc void @Sha256_WriteByteBlock(%struct.CSha256* %0)
  %31 = icmp ult i64 %29, 64
  br i1 %31, label %32, label %26

32:                                               ; preds = %26
  %33 = and i64 %25, 63
  br label %34

34:                                               ; preds = %32, %17
  %35 = phi i8* [ %21, %17 ], [ %30, %32 ]
  %36 = phi i64 [ %18, %17 ], [ %33, %32 ]
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 1 %35, i64 %36, i1 false)
  br label %40

40:                                               ; preds = %14, %34, %3, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @Sha256_WriteByteBlock(%struct.CSha256* nocapture) unnamed_addr #1 {
  %2 = alloca [16 x i32], align 16
  %3 = bitcast [16 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 64, i1 false)
  br label %4

4:                                                ; preds = %1, %4
  %5 = phi i64 [ 0, %1 ], [ %86, %4 ]
  %6 = shl i64 %5, 2
  %7 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl nuw i32 %9, 24
  %11 = getelementptr inbounds i8, i8* %7, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 16
  %15 = or i32 %14, %10
  %16 = getelementptr inbounds i8, i8* %7, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = shl nuw nsw i32 %18, 8
  %20 = or i32 %15, %19
  %21 = getelementptr inbounds i8, i8* %7, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = or i32 %20, %23
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %5
  store i32 %24, i32* %25, align 16
  %26 = getelementptr inbounds i8, i8* %7, i64 4
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = shl nuw i32 %28, 24
  %30 = getelementptr inbounds i8, i8* %7, i64 5
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = shl nuw nsw i32 %32, 16
  %34 = or i32 %33, %29
  %35 = getelementptr inbounds i8, i8* %7, i64 6
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 8
  %39 = or i32 %34, %38
  %40 = getelementptr inbounds i8, i8* %7, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %39, %42
  %44 = or i64 %5, 1
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %44
  store i32 %43, i32* %45, align 4
  %46 = getelementptr inbounds i8, i8* %7, i64 8
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw i32 %48, 24
  %50 = getelementptr inbounds i8, i8* %7, i64 9
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 16
  %54 = or i32 %53, %49
  %55 = getelementptr inbounds i8, i8* %7, i64 10
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = shl nuw nsw i32 %57, 8
  %59 = or i32 %54, %58
  %60 = getelementptr inbounds i8, i8* %7, i64 11
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %59, %62
  %64 = or i64 %5, 2
  %65 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %64
  store i32 %63, i32* %65, align 8
  %66 = getelementptr inbounds i8, i8* %7, i64 12
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = shl nuw i32 %68, 24
  %70 = getelementptr inbounds i8, i8* %7, i64 13
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = shl nuw nsw i32 %72, 16
  %74 = or i32 %73, %69
  %75 = getelementptr inbounds i8, i8* %7, i64 14
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 8
  %79 = or i32 %74, %78
  %80 = getelementptr inbounds i8, i8* %7, i64 15
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = or i32 %79, %82
  %84 = or i64 %5, 3
  %85 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 %84
  store i32 %83, i32* %85, align 4
  %86 = add nuw nsw i64 %5, 4
  %87 = icmp ult i64 %86, 16
  br i1 %87, label %4, label %88

88:                                               ; preds = %4
  %89 = bitcast %struct.CSha256* %0 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4
  %91 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 0
  %95 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 14
  %96 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 9
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 1
  %98 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 15
  %99 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 10
  %100 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 2
  %101 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 11
  %102 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 3
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 12
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 4
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 13
  %106 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 5
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 6
  %108 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 7
  %109 = getelementptr inbounds [16 x i32], [16 x i32]* %2, i64 0, i64 8
  %110 = extractelement <4 x i32> %90, i32 0
  %111 = extractelement <4 x i32> %90, i32 1
  %112 = extractelement <4 x i32> %90, i32 2
  %113 = extractelement <4 x i32> %90, i32 3
  %114 = extractelement <4 x i32> %93, i32 0
  %115 = extractelement <4 x i32> %93, i32 1
  %116 = extractelement <4 x i32> %93, i32 2
  %117 = extractelement <4 x i32> %93, i32 3
  br label %118

118:                                              ; preds = %88, %1184
  %119 = phi i64 [ 0, %88 ], [ %1208, %1184 ]
  %120 = phi i32 [ %117, %88 ], [ %990, %1184 ]
  %121 = phi i32 [ %116, %88 ], [ %1057, %1184 ]
  %122 = phi i32 [ %115, %88 ], [ %1124, %1184 ]
  %123 = phi i32 [ %114, %88 ], [ %1190, %1184 ]
  %124 = phi i32 [ %113, %88 ], [ %1007, %1184 ]
  %125 = phi i32 [ %112, %88 ], [ %1074, %1184 ]
  %126 = phi i32 [ %111, %88 ], [ %1141, %1184 ]
  %127 = phi i32 [ %110, %88 ], [ %1207, %1184 ]
  %128 = lshr i32 %123, 6
  %129 = shl i32 %123, 26
  %130 = or i32 %128, %129
  %131 = lshr i32 %123, 11
  %132 = shl i32 %123, 21
  %133 = or i32 %131, %132
  %134 = xor i32 %130, %133
  %135 = lshr i32 %123, 25
  %136 = shl i32 %123, 7
  %137 = or i32 %135, %136
  %138 = xor i32 %134, %137
  %139 = xor i32 %121, %122
  %140 = and i32 %139, %123
  %141 = xor i32 %140, %121
  %142 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %119
  %143 = load i32, i32* %142, align 16
  %144 = icmp ne i64 %119, 0
  br i1 %144, label %145, label %171

145:                                              ; preds = %118
  %146 = load i32, i32* %95, align 8
  %147 = lshr i32 %146, 17
  %148 = shl i32 %146, 15
  %149 = or i32 %147, %148
  %150 = lshr i32 %146, 19
  %151 = shl i32 %146, 13
  %152 = or i32 %150, %151
  %153 = lshr i32 %146, 10
  %154 = xor i32 %152, %153
  %155 = xor i32 %154, %149
  %156 = load i32, i32* %96, align 4
  %157 = load i32, i32* %97, align 4
  %158 = lshr i32 %157, 7
  %159 = shl i32 %157, 25
  %160 = or i32 %158, %159
  %161 = lshr i32 %157, 18
  %162 = shl i32 %157, 14
  %163 = or i32 %161, %162
  %164 = lshr i32 %157, 3
  %165 = xor i32 %163, %164
  %166 = xor i32 %165, %160
  %167 = load i32, i32* %94, align 16
  %168 = add i32 %167, %156
  %169 = add i32 %168, %155
  %170 = add i32 %169, %166
  store i32 %170, i32* %94, align 16
  br label %173

171:                                              ; preds = %118
  %172 = load i32, i32* %94, align 16
  br label %173

173:                                              ; preds = %171, %145
  %174 = phi i32 [ %170, %145 ], [ %172, %171 ]
  %175 = add i32 %138, %120
  %176 = add i32 %175, %141
  %177 = add i32 %176, %143
  %178 = add i32 %177, %174
  %179 = add i32 %178, %124
  %180 = lshr i32 %127, 2
  %181 = shl i32 %127, 30
  %182 = or i32 %180, %181
  %183 = lshr i32 %127, 13
  %184 = shl i32 %127, 19
  %185 = or i32 %183, %184
  %186 = xor i32 %182, %185
  %187 = lshr i32 %127, 22
  %188 = shl i32 %127, 10
  %189 = or i32 %187, %188
  %190 = xor i32 %186, %189
  %191 = and i32 %126, %127
  %192 = or i32 %126, %127
  %193 = and i32 %125, %192
  %194 = or i32 %193, %191
  %195 = add i32 %190, %194
  %196 = add i32 %195, %178
  %197 = lshr i32 %179, 6
  %198 = shl i32 %179, 26
  %199 = or i32 %197, %198
  %200 = lshr i32 %179, 11
  %201 = shl i32 %179, 21
  %202 = or i32 %200, %201
  %203 = xor i32 %199, %202
  %204 = lshr i32 %179, 25
  %205 = shl i32 %179, 7
  %206 = or i32 %204, %205
  %207 = xor i32 %203, %206
  %208 = xor i32 %122, %123
  %209 = and i32 %179, %208
  %210 = xor i32 %209, %122
  %211 = or i64 %119, 1
  %212 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %211
  %213 = load i32, i32* %212, align 4
  br i1 %144, label %214, label %240

214:                                              ; preds = %173
  %215 = load i32, i32* %98, align 4
  %216 = lshr i32 %215, 17
  %217 = shl i32 %215, 15
  %218 = or i32 %216, %217
  %219 = lshr i32 %215, 19
  %220 = shl i32 %215, 13
  %221 = or i32 %219, %220
  %222 = lshr i32 %215, 10
  %223 = xor i32 %221, %222
  %224 = xor i32 %223, %218
  %225 = load i32, i32* %99, align 8
  %226 = load i32, i32* %100, align 8
  %227 = lshr i32 %226, 7
  %228 = shl i32 %226, 25
  %229 = or i32 %227, %228
  %230 = lshr i32 %226, 18
  %231 = shl i32 %226, 14
  %232 = or i32 %230, %231
  %233 = lshr i32 %226, 3
  %234 = xor i32 %232, %233
  %235 = xor i32 %234, %229
  %236 = load i32, i32* %97, align 4
  %237 = add i32 %236, %225
  %238 = add i32 %237, %224
  %239 = add i32 %238, %235
  store i32 %239, i32* %97, align 4
  br label %242

240:                                              ; preds = %173
  %241 = load i32, i32* %97, align 4
  br label %242

242:                                              ; preds = %240, %214
  %243 = phi i32 [ %239, %214 ], [ %241, %240 ]
  %244 = add i32 %213, %121
  %245 = add i32 %244, %210
  %246 = add i32 %245, %207
  %247 = add i32 %246, %243
  %248 = add i32 %247, %125
  %249 = lshr i32 %196, 2
  %250 = shl i32 %196, 30
  %251 = or i32 %249, %250
  %252 = lshr i32 %196, 13
  %253 = shl i32 %196, 19
  %254 = or i32 %252, %253
  %255 = xor i32 %251, %254
  %256 = lshr i32 %196, 22
  %257 = shl i32 %196, 10
  %258 = or i32 %256, %257
  %259 = xor i32 %255, %258
  %260 = and i32 %196, %127
  %261 = or i32 %196, %127
  %262 = and i32 %261, %126
  %263 = or i32 %262, %260
  %264 = add i32 %259, %263
  %265 = add i32 %264, %247
  %266 = lshr i32 %248, 6
  %267 = shl i32 %248, 26
  %268 = or i32 %266, %267
  %269 = lshr i32 %248, 11
  %270 = shl i32 %248, 21
  %271 = or i32 %269, %270
  %272 = xor i32 %268, %271
  %273 = lshr i32 %248, 25
  %274 = shl i32 %248, 7
  %275 = or i32 %273, %274
  %276 = xor i32 %272, %275
  %277 = xor i32 %179, %123
  %278 = and i32 %248, %277
  %279 = xor i32 %278, %123
  %280 = or i64 %119, 2
  %281 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %280
  %282 = load i32, i32* %281, align 8
  br i1 %144, label %283, label %308

283:                                              ; preds = %242
  %284 = lshr i32 %174, 17
  %285 = shl i32 %174, 15
  %286 = or i32 %284, %285
  %287 = lshr i32 %174, 19
  %288 = shl i32 %174, 13
  %289 = or i32 %287, %288
  %290 = lshr i32 %174, 10
  %291 = xor i32 %289, %290
  %292 = xor i32 %291, %286
  %293 = load i32, i32* %101, align 4
  %294 = load i32, i32* %102, align 4
  %295 = lshr i32 %294, 7
  %296 = shl i32 %294, 25
  %297 = or i32 %295, %296
  %298 = lshr i32 %294, 18
  %299 = shl i32 %294, 14
  %300 = or i32 %298, %299
  %301 = lshr i32 %294, 3
  %302 = xor i32 %300, %301
  %303 = xor i32 %302, %297
  %304 = load i32, i32* %100, align 8
  %305 = add i32 %304, %293
  %306 = add i32 %305, %292
  %307 = add i32 %306, %303
  store i32 %307, i32* %100, align 8
  br label %310

308:                                              ; preds = %242
  %309 = load i32, i32* %100, align 8
  br label %310

310:                                              ; preds = %308, %283
  %311 = phi i32 [ %307, %283 ], [ %309, %308 ]
  %312 = add i32 %282, %122
  %313 = add i32 %312, %279
  %314 = add i32 %313, %276
  %315 = add i32 %314, %311
  %316 = add i32 %315, %126
  %317 = lshr i32 %265, 2
  %318 = shl i32 %265, 30
  %319 = or i32 %317, %318
  %320 = lshr i32 %265, 13
  %321 = shl i32 %265, 19
  %322 = or i32 %320, %321
  %323 = xor i32 %319, %322
  %324 = lshr i32 %265, 22
  %325 = shl i32 %265, 10
  %326 = or i32 %324, %325
  %327 = xor i32 %323, %326
  %328 = and i32 %265, %196
  %329 = or i32 %265, %196
  %330 = and i32 %329, %127
  %331 = or i32 %330, %328
  %332 = add i32 %327, %331
  %333 = add i32 %332, %315
  %334 = lshr i32 %316, 6
  %335 = shl i32 %316, 26
  %336 = or i32 %334, %335
  %337 = lshr i32 %316, 11
  %338 = shl i32 %316, 21
  %339 = or i32 %337, %338
  %340 = xor i32 %336, %339
  %341 = lshr i32 %316, 25
  %342 = shl i32 %316, 7
  %343 = or i32 %341, %342
  %344 = xor i32 %340, %343
  %345 = xor i32 %248, %179
  %346 = and i32 %316, %345
  %347 = xor i32 %346, %179
  %348 = or i64 %119, 3
  %349 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %348
  %350 = load i32, i32* %349, align 4
  br i1 %144, label %351, label %376

351:                                              ; preds = %310
  %352 = lshr i32 %243, 17
  %353 = shl i32 %243, 15
  %354 = or i32 %352, %353
  %355 = lshr i32 %243, 19
  %356 = shl i32 %243, 13
  %357 = or i32 %355, %356
  %358 = lshr i32 %243, 10
  %359 = xor i32 %357, %358
  %360 = xor i32 %359, %354
  %361 = load i32, i32* %103, align 16
  %362 = load i32, i32* %104, align 16
  %363 = lshr i32 %362, 7
  %364 = shl i32 %362, 25
  %365 = or i32 %363, %364
  %366 = lshr i32 %362, 18
  %367 = shl i32 %362, 14
  %368 = or i32 %366, %367
  %369 = lshr i32 %362, 3
  %370 = xor i32 %368, %369
  %371 = xor i32 %370, %365
  %372 = load i32, i32* %102, align 4
  %373 = add i32 %372, %361
  %374 = add i32 %373, %360
  %375 = add i32 %374, %371
  store i32 %375, i32* %102, align 4
  br label %378

376:                                              ; preds = %310
  %377 = load i32, i32* %102, align 4
  br label %378

378:                                              ; preds = %376, %351
  %379 = phi i32 [ %375, %351 ], [ %377, %376 ]
  %380 = add i32 %350, %123
  %381 = add i32 %380, %347
  %382 = add i32 %381, %344
  %383 = add i32 %382, %379
  %384 = add i32 %383, %127
  %385 = lshr i32 %333, 2
  %386 = shl i32 %333, 30
  %387 = or i32 %385, %386
  %388 = lshr i32 %333, 13
  %389 = shl i32 %333, 19
  %390 = or i32 %388, %389
  %391 = xor i32 %387, %390
  %392 = lshr i32 %333, 22
  %393 = shl i32 %333, 10
  %394 = or i32 %392, %393
  %395 = xor i32 %391, %394
  %396 = and i32 %333, %265
  %397 = or i32 %333, %265
  %398 = and i32 %397, %196
  %399 = or i32 %398, %396
  %400 = add i32 %395, %399
  %401 = add i32 %400, %383
  %402 = lshr i32 %384, 6
  %403 = shl i32 %384, 26
  %404 = or i32 %402, %403
  %405 = lshr i32 %384, 11
  %406 = shl i32 %384, 21
  %407 = or i32 %405, %406
  %408 = xor i32 %404, %407
  %409 = lshr i32 %384, 25
  %410 = shl i32 %384, 7
  %411 = or i32 %409, %410
  %412 = xor i32 %408, %411
  %413 = xor i32 %316, %248
  %414 = and i32 %384, %413
  %415 = xor i32 %414, %248
  %416 = or i64 %119, 4
  %417 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %416
  %418 = load i32, i32* %417, align 16
  br i1 %144, label %419, label %444

419:                                              ; preds = %378
  %420 = lshr i32 %311, 17
  %421 = shl i32 %311, 15
  %422 = or i32 %420, %421
  %423 = lshr i32 %311, 19
  %424 = shl i32 %311, 13
  %425 = or i32 %423, %424
  %426 = lshr i32 %311, 10
  %427 = xor i32 %425, %426
  %428 = xor i32 %427, %422
  %429 = load i32, i32* %105, align 4
  %430 = load i32, i32* %106, align 4
  %431 = lshr i32 %430, 7
  %432 = shl i32 %430, 25
  %433 = or i32 %431, %432
  %434 = lshr i32 %430, 18
  %435 = shl i32 %430, 14
  %436 = or i32 %434, %435
  %437 = lshr i32 %430, 3
  %438 = xor i32 %436, %437
  %439 = xor i32 %438, %433
  %440 = load i32, i32* %104, align 16
  %441 = add i32 %440, %429
  %442 = add i32 %441, %428
  %443 = add i32 %442, %439
  store i32 %443, i32* %104, align 16
  br label %446

444:                                              ; preds = %378
  %445 = load i32, i32* %104, align 16
  br label %446

446:                                              ; preds = %444, %419
  %447 = phi i32 [ %443, %419 ], [ %445, %444 ]
  %448 = add i32 %418, %179
  %449 = add i32 %448, %415
  %450 = add i32 %449, %412
  %451 = add i32 %450, %447
  %452 = add i32 %451, %196
  %453 = lshr i32 %401, 2
  %454 = shl i32 %401, 30
  %455 = or i32 %453, %454
  %456 = lshr i32 %401, 13
  %457 = shl i32 %401, 19
  %458 = or i32 %456, %457
  %459 = xor i32 %455, %458
  %460 = lshr i32 %401, 22
  %461 = shl i32 %401, 10
  %462 = or i32 %460, %461
  %463 = xor i32 %459, %462
  %464 = and i32 %401, %333
  %465 = or i32 %401, %333
  %466 = and i32 %465, %265
  %467 = or i32 %466, %464
  %468 = add i32 %463, %467
  %469 = add i32 %468, %451
  %470 = lshr i32 %452, 6
  %471 = shl i32 %452, 26
  %472 = or i32 %470, %471
  %473 = lshr i32 %452, 11
  %474 = shl i32 %452, 21
  %475 = or i32 %473, %474
  %476 = xor i32 %472, %475
  %477 = lshr i32 %452, 25
  %478 = shl i32 %452, 7
  %479 = or i32 %477, %478
  %480 = xor i32 %476, %479
  %481 = xor i32 %384, %316
  %482 = and i32 %452, %481
  %483 = xor i32 %482, %316
  %484 = or i64 %119, 5
  %485 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %484
  %486 = load i32, i32* %485, align 4
  br i1 %144, label %487, label %512

487:                                              ; preds = %446
  %488 = lshr i32 %379, 17
  %489 = shl i32 %379, 15
  %490 = or i32 %488, %489
  %491 = lshr i32 %379, 19
  %492 = shl i32 %379, 13
  %493 = or i32 %491, %492
  %494 = lshr i32 %379, 10
  %495 = xor i32 %493, %494
  %496 = xor i32 %495, %490
  %497 = load i32, i32* %95, align 8
  %498 = load i32, i32* %107, align 8
  %499 = lshr i32 %498, 7
  %500 = shl i32 %498, 25
  %501 = or i32 %499, %500
  %502 = lshr i32 %498, 18
  %503 = shl i32 %498, 14
  %504 = or i32 %502, %503
  %505 = lshr i32 %498, 3
  %506 = xor i32 %504, %505
  %507 = xor i32 %506, %501
  %508 = load i32, i32* %106, align 4
  %509 = add i32 %508, %497
  %510 = add i32 %509, %496
  %511 = add i32 %510, %507
  store i32 %511, i32* %106, align 4
  br label %514

512:                                              ; preds = %446
  %513 = load i32, i32* %106, align 4
  br label %514

514:                                              ; preds = %512, %487
  %515 = phi i32 [ %511, %487 ], [ %513, %512 ]
  %516 = add i32 %486, %248
  %517 = add i32 %516, %483
  %518 = add i32 %517, %480
  %519 = add i32 %518, %515
  %520 = add i32 %519, %265
  %521 = lshr i32 %469, 2
  %522 = shl i32 %469, 30
  %523 = or i32 %521, %522
  %524 = lshr i32 %469, 13
  %525 = shl i32 %469, 19
  %526 = or i32 %524, %525
  %527 = xor i32 %523, %526
  %528 = lshr i32 %469, 22
  %529 = shl i32 %469, 10
  %530 = or i32 %528, %529
  %531 = xor i32 %527, %530
  %532 = and i32 %469, %401
  %533 = or i32 %469, %401
  %534 = and i32 %533, %333
  %535 = or i32 %534, %532
  %536 = add i32 %531, %535
  %537 = add i32 %536, %519
  %538 = lshr i32 %520, 6
  %539 = shl i32 %520, 26
  %540 = or i32 %538, %539
  %541 = lshr i32 %520, 11
  %542 = shl i32 %520, 21
  %543 = or i32 %541, %542
  %544 = xor i32 %540, %543
  %545 = lshr i32 %520, 25
  %546 = shl i32 %520, 7
  %547 = or i32 %545, %546
  %548 = xor i32 %544, %547
  %549 = xor i32 %452, %384
  %550 = and i32 %520, %549
  %551 = xor i32 %550, %384
  %552 = or i64 %119, 6
  %553 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %552
  %554 = load i32, i32* %553, align 8
  br i1 %144, label %555, label %580

555:                                              ; preds = %514
  %556 = lshr i32 %447, 17
  %557 = shl i32 %447, 15
  %558 = or i32 %556, %557
  %559 = lshr i32 %447, 19
  %560 = shl i32 %447, 13
  %561 = or i32 %559, %560
  %562 = lshr i32 %447, 10
  %563 = xor i32 %561, %562
  %564 = xor i32 %563, %558
  %565 = load i32, i32* %98, align 4
  %566 = load i32, i32* %108, align 4
  %567 = lshr i32 %566, 7
  %568 = shl i32 %566, 25
  %569 = or i32 %567, %568
  %570 = lshr i32 %566, 18
  %571 = shl i32 %566, 14
  %572 = or i32 %570, %571
  %573 = lshr i32 %566, 3
  %574 = xor i32 %572, %573
  %575 = xor i32 %574, %569
  %576 = load i32, i32* %107, align 8
  %577 = add i32 %576, %565
  %578 = add i32 %577, %564
  %579 = add i32 %578, %575
  store i32 %579, i32* %107, align 8
  br label %582

580:                                              ; preds = %514
  %581 = load i32, i32* %107, align 8
  br label %582

582:                                              ; preds = %580, %555
  %583 = phi i32 [ %579, %555 ], [ %581, %580 ]
  %584 = add i32 %554, %316
  %585 = add i32 %584, %551
  %586 = add i32 %585, %548
  %587 = add i32 %586, %583
  %588 = add i32 %587, %333
  %589 = lshr i32 %537, 2
  %590 = shl i32 %537, 30
  %591 = or i32 %589, %590
  %592 = lshr i32 %537, 13
  %593 = shl i32 %537, 19
  %594 = or i32 %592, %593
  %595 = xor i32 %591, %594
  %596 = lshr i32 %537, 22
  %597 = shl i32 %537, 10
  %598 = or i32 %596, %597
  %599 = xor i32 %595, %598
  %600 = and i32 %537, %469
  %601 = or i32 %537, %469
  %602 = and i32 %601, %401
  %603 = or i32 %602, %600
  %604 = add i32 %599, %603
  %605 = add i32 %604, %587
  %606 = lshr i32 %588, 6
  %607 = shl i32 %588, 26
  %608 = or i32 %606, %607
  %609 = lshr i32 %588, 11
  %610 = shl i32 %588, 21
  %611 = or i32 %609, %610
  %612 = xor i32 %608, %611
  %613 = lshr i32 %588, 25
  %614 = shl i32 %588, 7
  %615 = or i32 %613, %614
  %616 = xor i32 %612, %615
  %617 = xor i32 %520, %452
  %618 = and i32 %588, %617
  %619 = xor i32 %618, %452
  %620 = or i64 %119, 7
  %621 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %620
  %622 = load i32, i32* %621, align 4
  br i1 %144, label %623, label %647

623:                                              ; preds = %582
  %624 = lshr i32 %515, 17
  %625 = shl i32 %515, 15
  %626 = or i32 %624, %625
  %627 = lshr i32 %515, 19
  %628 = shl i32 %515, 13
  %629 = or i32 %627, %628
  %630 = lshr i32 %515, 10
  %631 = xor i32 %629, %630
  %632 = xor i32 %631, %626
  %633 = load i32, i32* %109, align 16
  %634 = lshr i32 %633, 7
  %635 = shl i32 %633, 25
  %636 = or i32 %634, %635
  %637 = lshr i32 %633, 18
  %638 = shl i32 %633, 14
  %639 = or i32 %637, %638
  %640 = lshr i32 %633, 3
  %641 = xor i32 %639, %640
  %642 = xor i32 %641, %636
  %643 = load i32, i32* %108, align 4
  %644 = add i32 %643, %174
  %645 = add i32 %644, %632
  %646 = add i32 %645, %642
  store i32 %646, i32* %108, align 4
  br label %649

647:                                              ; preds = %582
  %648 = load i32, i32* %108, align 4
  br label %649

649:                                              ; preds = %647, %623
  %650 = phi i32 [ %646, %623 ], [ %648, %647 ]
  %651 = add i32 %622, %384
  %652 = add i32 %651, %619
  %653 = add i32 %652, %616
  %654 = add i32 %653, %650
  %655 = add i32 %654, %401
  %656 = lshr i32 %605, 2
  %657 = shl i32 %605, 30
  %658 = or i32 %656, %657
  %659 = lshr i32 %605, 13
  %660 = shl i32 %605, 19
  %661 = or i32 %659, %660
  %662 = xor i32 %658, %661
  %663 = lshr i32 %605, 22
  %664 = shl i32 %605, 10
  %665 = or i32 %663, %664
  %666 = xor i32 %662, %665
  %667 = and i32 %605, %537
  %668 = or i32 %605, %537
  %669 = and i32 %668, %469
  %670 = or i32 %669, %667
  %671 = add i32 %666, %670
  %672 = add i32 %671, %654
  %673 = lshr i32 %655, 6
  %674 = shl i32 %655, 26
  %675 = or i32 %673, %674
  %676 = lshr i32 %655, 11
  %677 = shl i32 %655, 21
  %678 = or i32 %676, %677
  %679 = xor i32 %675, %678
  %680 = lshr i32 %655, 25
  %681 = shl i32 %655, 7
  %682 = or i32 %680, %681
  %683 = xor i32 %679, %682
  %684 = xor i32 %588, %520
  %685 = and i32 %655, %684
  %686 = xor i32 %685, %520
  %687 = or i64 %119, 8
  %688 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %687
  %689 = load i32, i32* %688, align 16
  br i1 %144, label %690, label %714

690:                                              ; preds = %649
  %691 = lshr i32 %583, 17
  %692 = shl i32 %583, 15
  %693 = or i32 %691, %692
  %694 = lshr i32 %583, 19
  %695 = shl i32 %583, 13
  %696 = or i32 %694, %695
  %697 = lshr i32 %583, 10
  %698 = xor i32 %696, %697
  %699 = xor i32 %698, %693
  %700 = load i32, i32* %96, align 4
  %701 = lshr i32 %700, 7
  %702 = shl i32 %700, 25
  %703 = or i32 %701, %702
  %704 = lshr i32 %700, 18
  %705 = shl i32 %700, 14
  %706 = or i32 %704, %705
  %707 = lshr i32 %700, 3
  %708 = xor i32 %706, %707
  %709 = xor i32 %708, %703
  %710 = load i32, i32* %109, align 16
  %711 = add i32 %710, %243
  %712 = add i32 %711, %699
  %713 = add i32 %712, %709
  store i32 %713, i32* %109, align 16
  br label %716

714:                                              ; preds = %649
  %715 = load i32, i32* %109, align 16
  br label %716

716:                                              ; preds = %714, %690
  %717 = phi i32 [ %713, %690 ], [ %715, %714 ]
  %718 = add i32 %689, %452
  %719 = add i32 %718, %686
  %720 = add i32 %719, %683
  %721 = add i32 %720, %717
  %722 = add i32 %721, %469
  %723 = lshr i32 %672, 2
  %724 = shl i32 %672, 30
  %725 = or i32 %723, %724
  %726 = lshr i32 %672, 13
  %727 = shl i32 %672, 19
  %728 = or i32 %726, %727
  %729 = xor i32 %725, %728
  %730 = lshr i32 %672, 22
  %731 = shl i32 %672, 10
  %732 = or i32 %730, %731
  %733 = xor i32 %729, %732
  %734 = and i32 %672, %605
  %735 = or i32 %672, %605
  %736 = and i32 %735, %537
  %737 = or i32 %736, %734
  %738 = add i32 %733, %737
  %739 = add i32 %738, %721
  %740 = lshr i32 %722, 6
  %741 = shl i32 %722, 26
  %742 = or i32 %740, %741
  %743 = lshr i32 %722, 11
  %744 = shl i32 %722, 21
  %745 = or i32 %743, %744
  %746 = xor i32 %742, %745
  %747 = lshr i32 %722, 25
  %748 = shl i32 %722, 7
  %749 = or i32 %747, %748
  %750 = xor i32 %746, %749
  %751 = xor i32 %655, %588
  %752 = and i32 %722, %751
  %753 = xor i32 %752, %588
  %754 = or i64 %119, 9
  %755 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %754
  %756 = load i32, i32* %755, align 4
  br i1 %144, label %757, label %781

757:                                              ; preds = %716
  %758 = lshr i32 %650, 17
  %759 = shl i32 %650, 15
  %760 = or i32 %758, %759
  %761 = lshr i32 %650, 19
  %762 = shl i32 %650, 13
  %763 = or i32 %761, %762
  %764 = lshr i32 %650, 10
  %765 = xor i32 %763, %764
  %766 = xor i32 %765, %760
  %767 = load i32, i32* %99, align 8
  %768 = lshr i32 %767, 7
  %769 = shl i32 %767, 25
  %770 = or i32 %768, %769
  %771 = lshr i32 %767, 18
  %772 = shl i32 %767, 14
  %773 = or i32 %771, %772
  %774 = lshr i32 %767, 3
  %775 = xor i32 %773, %774
  %776 = xor i32 %775, %770
  %777 = load i32, i32* %96, align 4
  %778 = add i32 %777, %311
  %779 = add i32 %778, %766
  %780 = add i32 %779, %776
  store i32 %780, i32* %96, align 4
  br label %783

781:                                              ; preds = %716
  %782 = load i32, i32* %96, align 4
  br label %783

783:                                              ; preds = %781, %757
  %784 = phi i32 [ %780, %757 ], [ %782, %781 ]
  %785 = add i32 %756, %520
  %786 = add i32 %785, %753
  %787 = add i32 %786, %750
  %788 = add i32 %787, %784
  %789 = add i32 %788, %537
  %790 = lshr i32 %739, 2
  %791 = shl i32 %739, 30
  %792 = or i32 %790, %791
  %793 = lshr i32 %739, 13
  %794 = shl i32 %739, 19
  %795 = or i32 %793, %794
  %796 = xor i32 %792, %795
  %797 = lshr i32 %739, 22
  %798 = shl i32 %739, 10
  %799 = or i32 %797, %798
  %800 = xor i32 %796, %799
  %801 = and i32 %739, %672
  %802 = or i32 %739, %672
  %803 = and i32 %802, %605
  %804 = or i32 %803, %801
  %805 = add i32 %800, %804
  %806 = add i32 %805, %788
  %807 = lshr i32 %789, 6
  %808 = shl i32 %789, 26
  %809 = or i32 %807, %808
  %810 = lshr i32 %789, 11
  %811 = shl i32 %789, 21
  %812 = or i32 %810, %811
  %813 = xor i32 %809, %812
  %814 = lshr i32 %789, 25
  %815 = shl i32 %789, 7
  %816 = or i32 %814, %815
  %817 = xor i32 %813, %816
  %818 = xor i32 %722, %655
  %819 = and i32 %789, %818
  %820 = xor i32 %819, %655
  %821 = or i64 %119, 10
  %822 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %821
  %823 = load i32, i32* %822, align 8
  br i1 %144, label %824, label %848

824:                                              ; preds = %783
  %825 = lshr i32 %717, 17
  %826 = shl i32 %717, 15
  %827 = or i32 %825, %826
  %828 = lshr i32 %717, 19
  %829 = shl i32 %717, 13
  %830 = or i32 %828, %829
  %831 = lshr i32 %717, 10
  %832 = xor i32 %830, %831
  %833 = xor i32 %832, %827
  %834 = load i32, i32* %101, align 4
  %835 = lshr i32 %834, 7
  %836 = shl i32 %834, 25
  %837 = or i32 %835, %836
  %838 = lshr i32 %834, 18
  %839 = shl i32 %834, 14
  %840 = or i32 %838, %839
  %841 = lshr i32 %834, 3
  %842 = xor i32 %840, %841
  %843 = xor i32 %842, %837
  %844 = load i32, i32* %99, align 8
  %845 = add i32 %844, %379
  %846 = add i32 %845, %833
  %847 = add i32 %846, %843
  store i32 %847, i32* %99, align 8
  br label %850

848:                                              ; preds = %783
  %849 = load i32, i32* %99, align 8
  br label %850

850:                                              ; preds = %848, %824
  %851 = phi i32 [ %847, %824 ], [ %849, %848 ]
  %852 = add i32 %823, %588
  %853 = add i32 %852, %820
  %854 = add i32 %853, %817
  %855 = add i32 %854, %851
  %856 = add i32 %855, %605
  %857 = lshr i32 %806, 2
  %858 = shl i32 %806, 30
  %859 = or i32 %857, %858
  %860 = lshr i32 %806, 13
  %861 = shl i32 %806, 19
  %862 = or i32 %860, %861
  %863 = xor i32 %859, %862
  %864 = lshr i32 %806, 22
  %865 = shl i32 %806, 10
  %866 = or i32 %864, %865
  %867 = xor i32 %863, %866
  %868 = and i32 %806, %739
  %869 = or i32 %806, %739
  %870 = and i32 %869, %672
  %871 = or i32 %870, %868
  %872 = add i32 %867, %871
  %873 = add i32 %872, %855
  %874 = lshr i32 %856, 6
  %875 = shl i32 %856, 26
  %876 = or i32 %874, %875
  %877 = lshr i32 %856, 11
  %878 = shl i32 %856, 21
  %879 = or i32 %877, %878
  %880 = xor i32 %876, %879
  %881 = lshr i32 %856, 25
  %882 = shl i32 %856, 7
  %883 = or i32 %881, %882
  %884 = xor i32 %880, %883
  %885 = xor i32 %789, %722
  %886 = and i32 %856, %885
  %887 = xor i32 %886, %722
  %888 = or i64 %119, 11
  %889 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %888
  %890 = load i32, i32* %889, align 4
  br i1 %144, label %891, label %915

891:                                              ; preds = %850
  %892 = lshr i32 %784, 17
  %893 = shl i32 %784, 15
  %894 = or i32 %892, %893
  %895 = lshr i32 %784, 19
  %896 = shl i32 %784, 13
  %897 = or i32 %895, %896
  %898 = lshr i32 %784, 10
  %899 = xor i32 %897, %898
  %900 = xor i32 %899, %894
  %901 = load i32, i32* %103, align 16
  %902 = lshr i32 %901, 7
  %903 = shl i32 %901, 25
  %904 = or i32 %902, %903
  %905 = lshr i32 %901, 18
  %906 = shl i32 %901, 14
  %907 = or i32 %905, %906
  %908 = lshr i32 %901, 3
  %909 = xor i32 %907, %908
  %910 = xor i32 %909, %904
  %911 = load i32, i32* %101, align 4
  %912 = add i32 %911, %447
  %913 = add i32 %912, %900
  %914 = add i32 %913, %910
  store i32 %914, i32* %101, align 4
  br label %917

915:                                              ; preds = %850
  %916 = load i32, i32* %101, align 4
  br label %917

917:                                              ; preds = %915, %891
  %918 = phi i32 [ %914, %891 ], [ %916, %915 ]
  %919 = add i32 %890, %655
  %920 = add i32 %919, %887
  %921 = add i32 %920, %884
  %922 = add i32 %921, %918
  %923 = add i32 %922, %672
  %924 = lshr i32 %873, 2
  %925 = shl i32 %873, 30
  %926 = or i32 %924, %925
  %927 = lshr i32 %873, 13
  %928 = shl i32 %873, 19
  %929 = or i32 %927, %928
  %930 = xor i32 %926, %929
  %931 = lshr i32 %873, 22
  %932 = shl i32 %873, 10
  %933 = or i32 %931, %932
  %934 = xor i32 %930, %933
  %935 = and i32 %873, %806
  %936 = or i32 %873, %806
  %937 = and i32 %936, %739
  %938 = or i32 %937, %935
  %939 = add i32 %934, %938
  %940 = add i32 %939, %922
  %941 = lshr i32 %923, 6
  %942 = shl i32 %923, 26
  %943 = or i32 %941, %942
  %944 = lshr i32 %923, 11
  %945 = shl i32 %923, 21
  %946 = or i32 %944, %945
  %947 = xor i32 %943, %946
  %948 = lshr i32 %923, 25
  %949 = shl i32 %923, 7
  %950 = or i32 %948, %949
  %951 = xor i32 %947, %950
  %952 = xor i32 %856, %789
  %953 = and i32 %923, %952
  %954 = xor i32 %953, %789
  %955 = or i64 %119, 12
  %956 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %955
  %957 = load i32, i32* %956, align 16
  br i1 %144, label %958, label %982

958:                                              ; preds = %917
  %959 = lshr i32 %851, 17
  %960 = shl i32 %851, 15
  %961 = or i32 %959, %960
  %962 = lshr i32 %851, 19
  %963 = shl i32 %851, 13
  %964 = or i32 %962, %963
  %965 = lshr i32 %851, 10
  %966 = xor i32 %964, %965
  %967 = xor i32 %966, %961
  %968 = load i32, i32* %105, align 4
  %969 = lshr i32 %968, 7
  %970 = shl i32 %968, 25
  %971 = or i32 %969, %970
  %972 = lshr i32 %968, 18
  %973 = shl i32 %968, 14
  %974 = or i32 %972, %973
  %975 = lshr i32 %968, 3
  %976 = xor i32 %974, %975
  %977 = xor i32 %976, %971
  %978 = load i32, i32* %103, align 16
  %979 = add i32 %978, %515
  %980 = add i32 %979, %967
  %981 = add i32 %980, %977
  store i32 %981, i32* %103, align 16
  br label %984

982:                                              ; preds = %917
  %983 = load i32, i32* %103, align 16
  br label %984

984:                                              ; preds = %982, %958
  %985 = phi i32 [ %981, %958 ], [ %983, %982 ]
  %986 = add i32 %957, %722
  %987 = add i32 %986, %954
  %988 = add i32 %987, %951
  %989 = add i32 %988, %985
  %990 = add i32 %989, %739
  %991 = lshr i32 %940, 2
  %992 = shl i32 %940, 30
  %993 = or i32 %991, %992
  %994 = lshr i32 %940, 13
  %995 = shl i32 %940, 19
  %996 = or i32 %994, %995
  %997 = xor i32 %993, %996
  %998 = lshr i32 %940, 22
  %999 = shl i32 %940, 10
  %1000 = or i32 %998, %999
  %1001 = xor i32 %997, %1000
  %1002 = and i32 %940, %873
  %1003 = or i32 %940, %873
  %1004 = and i32 %1003, %806
  %1005 = or i32 %1004, %1002
  %1006 = add i32 %1001, %1005
  %1007 = add i32 %1006, %989
  %1008 = lshr i32 %990, 6
  %1009 = shl i32 %990, 26
  %1010 = or i32 %1008, %1009
  %1011 = lshr i32 %990, 11
  %1012 = shl i32 %990, 21
  %1013 = or i32 %1011, %1012
  %1014 = xor i32 %1010, %1013
  %1015 = lshr i32 %990, 25
  %1016 = shl i32 %990, 7
  %1017 = or i32 %1015, %1016
  %1018 = xor i32 %1014, %1017
  %1019 = xor i32 %923, %856
  %1020 = and i32 %990, %1019
  %1021 = xor i32 %1020, %856
  %1022 = or i64 %119, 13
  %1023 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %1022
  %1024 = load i32, i32* %1023, align 4
  br i1 %144, label %1025, label %1049

1025:                                             ; preds = %984
  %1026 = lshr i32 %918, 17
  %1027 = shl i32 %918, 15
  %1028 = or i32 %1026, %1027
  %1029 = lshr i32 %918, 19
  %1030 = shl i32 %918, 13
  %1031 = or i32 %1029, %1030
  %1032 = lshr i32 %918, 10
  %1033 = xor i32 %1031, %1032
  %1034 = xor i32 %1033, %1028
  %1035 = load i32, i32* %95, align 8
  %1036 = lshr i32 %1035, 7
  %1037 = shl i32 %1035, 25
  %1038 = or i32 %1036, %1037
  %1039 = lshr i32 %1035, 18
  %1040 = shl i32 %1035, 14
  %1041 = or i32 %1039, %1040
  %1042 = lshr i32 %1035, 3
  %1043 = xor i32 %1041, %1042
  %1044 = xor i32 %1043, %1038
  %1045 = load i32, i32* %105, align 4
  %1046 = add i32 %1045, %583
  %1047 = add i32 %1046, %1034
  %1048 = add i32 %1047, %1044
  store i32 %1048, i32* %105, align 4
  br label %1051

1049:                                             ; preds = %984
  %1050 = load i32, i32* %105, align 4
  br label %1051

1051:                                             ; preds = %1049, %1025
  %1052 = phi i32 [ %1048, %1025 ], [ %1050, %1049 ]
  %1053 = add i32 %1024, %789
  %1054 = add i32 %1053, %1021
  %1055 = add i32 %1054, %1018
  %1056 = add i32 %1055, %1052
  %1057 = add i32 %1056, %806
  %1058 = lshr i32 %1007, 2
  %1059 = shl i32 %1007, 30
  %1060 = or i32 %1058, %1059
  %1061 = lshr i32 %1007, 13
  %1062 = shl i32 %1007, 19
  %1063 = or i32 %1061, %1062
  %1064 = xor i32 %1060, %1063
  %1065 = lshr i32 %1007, 22
  %1066 = shl i32 %1007, 10
  %1067 = or i32 %1065, %1066
  %1068 = xor i32 %1064, %1067
  %1069 = and i32 %1007, %940
  %1070 = or i32 %1007, %940
  %1071 = and i32 %1070, %873
  %1072 = or i32 %1071, %1069
  %1073 = add i32 %1068, %1072
  %1074 = add i32 %1073, %1056
  %1075 = lshr i32 %1057, 6
  %1076 = shl i32 %1057, 26
  %1077 = or i32 %1075, %1076
  %1078 = lshr i32 %1057, 11
  %1079 = shl i32 %1057, 21
  %1080 = or i32 %1078, %1079
  %1081 = xor i32 %1077, %1080
  %1082 = lshr i32 %1057, 25
  %1083 = shl i32 %1057, 7
  %1084 = or i32 %1082, %1083
  %1085 = xor i32 %1081, %1084
  %1086 = xor i32 %990, %923
  %1087 = and i32 %1057, %1086
  %1088 = xor i32 %1087, %923
  %1089 = or i64 %119, 14
  %1090 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %1089
  %1091 = load i32, i32* %1090, align 8
  br i1 %144, label %1092, label %1116

1092:                                             ; preds = %1051
  %1093 = lshr i32 %985, 17
  %1094 = shl i32 %985, 15
  %1095 = or i32 %1093, %1094
  %1096 = lshr i32 %985, 19
  %1097 = shl i32 %985, 13
  %1098 = or i32 %1096, %1097
  %1099 = lshr i32 %985, 10
  %1100 = xor i32 %1098, %1099
  %1101 = xor i32 %1100, %1095
  %1102 = load i32, i32* %98, align 4
  %1103 = lshr i32 %1102, 7
  %1104 = shl i32 %1102, 25
  %1105 = or i32 %1103, %1104
  %1106 = lshr i32 %1102, 18
  %1107 = shl i32 %1102, 14
  %1108 = or i32 %1106, %1107
  %1109 = lshr i32 %1102, 3
  %1110 = xor i32 %1108, %1109
  %1111 = xor i32 %1110, %1105
  %1112 = load i32, i32* %95, align 8
  %1113 = add i32 %1112, %650
  %1114 = add i32 %1113, %1101
  %1115 = add i32 %1114, %1111
  store i32 %1115, i32* %95, align 8
  br label %1118

1116:                                             ; preds = %1051
  %1117 = load i32, i32* %95, align 8
  br label %1118

1118:                                             ; preds = %1116, %1092
  %1119 = phi i32 [ %1115, %1092 ], [ %1117, %1116 ]
  %1120 = add i32 %1091, %856
  %1121 = add i32 %1120, %1088
  %1122 = add i32 %1121, %1085
  %1123 = add i32 %1122, %1119
  %1124 = add i32 %1123, %873
  %1125 = lshr i32 %1074, 2
  %1126 = shl i32 %1074, 30
  %1127 = or i32 %1125, %1126
  %1128 = lshr i32 %1074, 13
  %1129 = shl i32 %1074, 19
  %1130 = or i32 %1128, %1129
  %1131 = xor i32 %1127, %1130
  %1132 = lshr i32 %1074, 22
  %1133 = shl i32 %1074, 10
  %1134 = or i32 %1132, %1133
  %1135 = xor i32 %1131, %1134
  %1136 = and i32 %1074, %1007
  %1137 = or i32 %1074, %1007
  %1138 = and i32 %1137, %940
  %1139 = or i32 %1138, %1136
  %1140 = add i32 %1135, %1139
  %1141 = add i32 %1140, %1123
  %1142 = lshr i32 %1124, 6
  %1143 = shl i32 %1124, 26
  %1144 = or i32 %1142, %1143
  %1145 = lshr i32 %1124, 11
  %1146 = shl i32 %1124, 21
  %1147 = or i32 %1145, %1146
  %1148 = xor i32 %1144, %1147
  %1149 = lshr i32 %1124, 25
  %1150 = shl i32 %1124, 7
  %1151 = or i32 %1149, %1150
  %1152 = xor i32 %1148, %1151
  %1153 = xor i32 %1057, %990
  %1154 = and i32 %1124, %1153
  %1155 = xor i32 %1154, %990
  %1156 = or i64 %119, 15
  %1157 = getelementptr inbounds [64 x i32], [64 x i32]* @K, i64 0, i64 %1156
  %1158 = load i32, i32* %1157, align 4
  br i1 %144, label %1159, label %1182

1159:                                             ; preds = %1118
  %1160 = lshr i32 %1052, 17
  %1161 = shl i32 %1052, 15
  %1162 = or i32 %1160, %1161
  %1163 = lshr i32 %1052, 19
  %1164 = shl i32 %1052, 13
  %1165 = or i32 %1163, %1164
  %1166 = lshr i32 %1052, 10
  %1167 = xor i32 %1165, %1166
  %1168 = xor i32 %1167, %1162
  %1169 = lshr i32 %174, 7
  %1170 = shl i32 %174, 25
  %1171 = or i32 %1169, %1170
  %1172 = lshr i32 %174, 18
  %1173 = shl i32 %174, 14
  %1174 = or i32 %1172, %1173
  %1175 = lshr i32 %174, 3
  %1176 = xor i32 %1174, %1175
  %1177 = xor i32 %1176, %1171
  %1178 = load i32, i32* %98, align 4
  %1179 = add i32 %1178, %717
  %1180 = add i32 %1179, %1168
  %1181 = add i32 %1180, %1177
  store i32 %1181, i32* %98, align 4
  br label %1184

1182:                                             ; preds = %1118
  %1183 = load i32, i32* %98, align 4
  br label %1184

1184:                                             ; preds = %1182, %1159
  %1185 = phi i32 [ %1181, %1159 ], [ %1183, %1182 ]
  %1186 = add i32 %1158, %923
  %1187 = add i32 %1186, %1155
  %1188 = add i32 %1187, %1152
  %1189 = add i32 %1188, %1185
  %1190 = add i32 %1189, %940
  %1191 = lshr i32 %1141, 2
  %1192 = shl i32 %1141, 30
  %1193 = or i32 %1191, %1192
  %1194 = lshr i32 %1141, 13
  %1195 = shl i32 %1141, 19
  %1196 = or i32 %1194, %1195
  %1197 = xor i32 %1193, %1196
  %1198 = lshr i32 %1141, 22
  %1199 = shl i32 %1141, 10
  %1200 = or i32 %1198, %1199
  %1201 = xor i32 %1197, %1200
  %1202 = and i32 %1141, %1074
  %1203 = or i32 %1141, %1074
  %1204 = and i32 %1203, %1007
  %1205 = or i32 %1204, %1202
  %1206 = add i32 %1201, %1205
  %1207 = add i32 %1206, %1189
  %1208 = add nuw nsw i64 %119, 16
  %1209 = icmp ult i64 %1208, 64
  br i1 %1209, label %118, label %1210

1210:                                             ; preds = %1184
  %1211 = insertelement <4 x i32> undef, i32 %1207, i32 0
  %1212 = insertelement <4 x i32> %1211, i32 %1141, i32 1
  %1213 = insertelement <4 x i32> %1212, i32 %1074, i32 2
  %1214 = insertelement <4 x i32> %1213, i32 %1007, i32 3
  %1215 = add <4 x i32> %1214, %90
  %1216 = bitcast %struct.CSha256* %0 to <4 x i32>*
  store <4 x i32> %1215, <4 x i32>* %1216, align 4
  %1217 = insertelement <4 x i32> undef, i32 %1190, i32 0
  %1218 = insertelement <4 x i32> %1217, i32 %1124, i32 1
  %1219 = insertelement <4 x i32> %1218, i32 %1057, i32 2
  %1220 = insertelement <4 x i32> %1219, i32 %990, i32 3
  %1221 = add <4 x i32> %1220, %93
  %1222 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %1221, <4 x i32>* %1222, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @Sha256_Final(%struct.CSha256*, i8* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 63
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 %7
  store i8 -128, i8* %8, align 1
  %9 = add nuw nsw i32 %6, 1
  %10 = icmp eq i32 %9, 56
  br i1 %10, label %24, label %11

11:                                               ; preds = %2, %16
  %12 = phi i32 [ %19, %16 ], [ %9, %2 ]
  %13 = and i32 %12, 63
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call fastcc void @Sha256_WriteByteBlock(%struct.CSha256* %0)
  br label %16

16:                                               ; preds = %15, %11
  %17 = zext i32 %13 to i64
  %18 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 %17
  store i8 0, i8* %18, align 1
  %19 = add nuw nsw i32 %13, 1
  %20 = icmp eq i32 %19, 56
  br i1 %20, label %21, label %11

21:                                               ; preds = %16
  %22 = load i64, i64* %3, align 8
  %23 = trunc i64 %22 to i32
  br label %24

24:                                               ; preds = %21, %2
  %25 = phi i32 [ %23, %21 ], [ %5, %2 ]
  %26 = phi i64 [ %22, %21 ], [ %4, %2 ]
  %27 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 56
  %28 = lshr i64 %26, 29
  %29 = lshr i64 %26, 53
  %30 = trunc i64 %29 to i8
  store i8 %30, i8* %27, align 1
  %31 = lshr i64 %26, 45
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 57
  store i8 %32, i8* %33, align 1
  %34 = lshr i64 %26, 37
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 58
  store i8 %35, i8* %36, align 1
  %37 = trunc i64 %28 to i8
  %38 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 59
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 60
  %40 = lshr i32 %25, 21
  %41 = trunc i32 %40 to i8
  store i8 %41, i8* %39, align 1
  %42 = lshr i32 %25, 13
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 61
  store i8 %43, i8* %44, align 1
  %45 = lshr i32 %25, 5
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 62
  store i8 %46, i8* %47, align 1
  %48 = trunc i64 %26 to i8
  %49 = shl i8 %48, 3
  %50 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 2, i64 63
  store i8 %49, i8* %50, align 1
  tail call fastcc void @Sha256_WriteByteBlock(%struct.CSha256* %0)
  %51 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 1
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %52, 24
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %1, align 1
  %57 = lshr i32 %52, 16
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %58, i8* %59, align 1
  %60 = lshr i32 %52, 8
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %61, i8* %62, align 1
  %63 = trunc i32 %52 to i8
  %64 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %1, i64 4
  %66 = lshr i32 %54, 24
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %65, align 1
  %68 = lshr i32 %54, 16
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %69, i8* %70, align 1
  %71 = lshr i32 %54, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %72, i8* %73, align 1
  %74 = trunc i32 %54 to i8
  %75 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %1, i64 8
  %77 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 2
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 3
  %80 = load i32, i32* %79, align 4
  %81 = lshr i32 %78, 24
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %76, align 1
  %83 = lshr i32 %78, 16
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %84, i8* %85, align 1
  %86 = lshr i32 %78, 8
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 %87, i8* %88, align 1
  %89 = trunc i32 %78 to i8
  %90 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %89, i8* %90, align 1
  %91 = getelementptr inbounds i8, i8* %1, i64 12
  %92 = lshr i32 %80, 24
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %91, align 1
  %94 = lshr i32 %80, 16
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 %95, i8* %96, align 1
  %97 = lshr i32 %80, 8
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 %98, i8* %99, align 1
  %100 = trunc i32 %80 to i8
  %101 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %1, i64 16
  %103 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 4
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 5
  %106 = load i32, i32* %105, align 4
  %107 = lshr i32 %104, 24
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %102, align 1
  %109 = lshr i32 %104, 16
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds i8, i8* %1, i64 17
  store i8 %110, i8* %111, align 1
  %112 = lshr i32 %104, 8
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %1, i64 18
  store i8 %113, i8* %114, align 1
  %115 = trunc i32 %104 to i8
  %116 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 %115, i8* %116, align 1
  %117 = getelementptr inbounds i8, i8* %1, i64 20
  %118 = lshr i32 %106, 24
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %117, align 1
  %120 = lshr i32 %106, 16
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %1, i64 21
  store i8 %121, i8* %122, align 1
  %123 = lshr i32 %106, 8
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %1, i64 22
  store i8 %124, i8* %125, align 1
  %126 = trunc i32 %106 to i8
  %127 = getelementptr inbounds i8, i8* %1, i64 23
  store i8 %126, i8* %127, align 1
  %128 = getelementptr inbounds i8, i8* %1, i64 24
  %129 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 6
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.CSha256, %struct.CSha256* %0, i64 0, i32 0, i64 7
  %132 = load i32, i32* %131, align 4
  %133 = lshr i32 %130, 24
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %128, align 1
  %135 = lshr i32 %130, 16
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds i8, i8* %1, i64 25
  store i8 %136, i8* %137, align 1
  %138 = lshr i32 %130, 8
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds i8, i8* %1, i64 26
  store i8 %139, i8* %140, align 1
  %141 = trunc i32 %130 to i8
  %142 = getelementptr inbounds i8, i8* %1, i64 27
  store i8 %141, i8* %142, align 1
  %143 = getelementptr inbounds i8, i8* %1, i64 28
  %144 = lshr i32 %132, 24
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %143, align 1
  %146 = lshr i32 %132, 16
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %1, i64 29
  store i8 %147, i8* %148, align 1
  %149 = lshr i32 %132, 8
  %150 = trunc i32 %149 to i8
  %151 = getelementptr inbounds i8, i8* %1, i64 30
  store i8 %150, i8* %151, align 1
  %152 = trunc i32 %132 to i8
  %153 = getelementptr inbounds i8, i8* %1, i64 31
  store i8 %152, i8* %153, align 1
  %154 = bitcast %struct.CSha256* %0 to <4 x i32>*
  store <4 x i32> <i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534>, <4 x i32>* %154, align 8
  %155 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> <i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225>, <4 x i32>* %155, align 8
  store i64 0, i64* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
