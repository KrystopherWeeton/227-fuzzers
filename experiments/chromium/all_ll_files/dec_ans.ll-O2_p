; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_ans.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_ans.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector", %"class.std::__1::vector.11", %"class.std::__1::vector.18", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.6" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.3" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i32*, i32*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i32* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { i16*, i16*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i8*, i8*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem" }

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl10LZ77ParamsD0Ev = comdat any

$_ZNK3jxl10LZ77Params4NameEv = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi = comdat any

$_ZNSt3__16vectorIN3jxl19HuffmanDecodingDataENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_ans.cc\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"max_alphabet_size <= 1 << PREFIX_MAX_BITS\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"max_alphabet_size <= ANS_MAX_ALPHABET_SIZE\00", align 1
@_ZTVN3jxl10LZ77ParamsE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::LZ77Params"*)* @_ZN3jxl10LZ77ParamsD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::LZ77Params"*)* @_ZNK3jxl10LZ77Params4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::LZ77Params"*, %"class.jxl::Visitor"*)* @_ZN3jxl10LZ77Params11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZZN3jxl12_GLOBAL__N_113ReadHistogramEiPNSt3__16vectorIiNS1_9allocatorIiEEEEPNS_9BitReaderEE4huff = internal unnamed_addr constant [128 x [2 x i8]] [[2 x i8] c"\03\0A", [2 x i8] c"\07\0C", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\05\00", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\06\0B", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\05\00", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\07\0D", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\05\00", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\06\0B", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02", [2 x i8] c"\03\0A", [2 x i8] c"\05\00", [2 x i8] c"\03\07", [2 x i8] c"\04\03", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\05", [2 x i8] c"\03\0A", [2 x i8] c"\04\04", [2 x i8] c"\03\07", [2 x i8] c"\04\01", [2 x i8] c"\03\06", [2 x i8] c"\03\08", [2 x i8] c"\03\09", [2 x i8] c"\04\02"], align 16
@.str.23 = private unnamed_addr constant [11 x i8] c"LZ77Params\00", align 1

@_ZN3jxl10LZ77ParamsC1Ev = hidden unnamed_addr alias void (%"struct.jxl::LZ77Params"*), void (%"struct.jxl::LZ77Params"*)* @_ZN3jxl10LZ77ParamsC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl14DecodeANSCodesEmmPNS_9BitReaderEPNS_7ANSCodeE(i64, i64, %"class.jxl::BitReader"*, %"struct.jxl::ANSCode"*) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca %"class.std::__1::vector.18", align 16
  %7 = alloca %"class.std::__1::vector.18", align 8
  %8 = alloca i32, align 4
  %9 = alloca %"class.std::__1::vector.25", align 8
  %10 = alloca %"class.std::__1::vector.18", align 16
  %11 = alloca %"class.std::__1::vector.18", align 8
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 3
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #10
  store i32 -1, i32* %8, align 4
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 3, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector.18"* %12 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 2
  %21 = icmp ult i64 %20, %0
  %22 = inttoptr i64 %18 to i32*
  br i1 %21, label %23, label %25

23:                                               ; preds = %4
  %24 = sub i64 %0, %20
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.18"* %12, i64 %24, i32* nonnull dereferenceable(4) %8) #10
  br label %29

25:                                               ; preds = %4
  %26 = icmp ugt i64 %20, %0
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds i32, i32* %22, i64 %0
  store i32* %28, i32** %14, align 8
  br label %29

29:                                               ; preds = %23, %25, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #10
  %30 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 4
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %343, label %33

33:                                               ; preds = %29
  %34 = icmp ult i64 %1, 32769
  br i1 %34, label %38, label %35

35:                                               ; preds = %33
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 203, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0)) #10
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 1
  %40 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 1, i32 0, i32 1
  %41 = bitcast %"struct.jxl::HuffmanDecodingData"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector"* %39 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = sdiv exact i64 %45, 24
  %47 = icmp ult i64 %46, %0
  %48 = inttoptr i64 %44 to %"struct.jxl::HuffmanDecodingData"*
  %49 = inttoptr i64 %42 to %"struct.jxl::HuffmanDecodingData"*
  br i1 %47, label %50, label %52

50:                                               ; preds = %38
  %51 = sub i64 %0, %46
  call void @_ZNSt3__16vectorIN3jxl19HuffmanDecodingDataENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %39, i64 %51) #10
  br label %71

52:                                               ; preds = %38
  %53 = icmp ugt i64 %46, %0
  br i1 %53, label %54, label %71

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %48, i64 %0
  %56 = icmp eq %"struct.jxl::HuffmanDecodingData"* %55, %49
  br i1 %56, label %70, label %57

57:                                               ; preds = %54, %68
  %58 = phi %"struct.jxl::HuffmanDecodingData"* [ %59, %68 ], [ %49, %54 ]
  %59 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %58, i64 -1
  %60 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %60, align 8
  %62 = icmp eq %"struct.jxl::HuffmanCode"* %61, null
  br i1 %62, label %68, label %63

63:                                               ; preds = %57
  %64 = ptrtoint %"struct.jxl::HuffmanCode"* %61 to i64
  %65 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %58, i64 -1, i32 0, i32 0, i32 1
  %66 = bitcast %"struct.jxl::HuffmanCode"** %65 to i64*
  store i64 %64, i64* %66, align 8
  %67 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %61, i64 0, i32 0
  call void @_ZdlPv(i8* %67) #12
  br label %68

68:                                               ; preds = %63, %57
  %69 = icmp eq %"struct.jxl::HuffmanDecodingData"* %59, %55
  br i1 %69, label %70, label %57

70:                                               ; preds = %68, %54
  store %"struct.jxl::HuffmanDecodingData"* %55, %"struct.jxl::HuffmanDecodingData"** %40, align 8
  br label %71

71:                                               ; preds = %50, %52, %70
  %72 = bitcast %"class.std::__1::vector.25"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #10
  %73 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %9, i64 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %9, i64 0, i32 0, i32 1
  %75 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 24, i1 false) #10
  %76 = icmp eq i64 %0, 0
  br i1 %76, label %331, label %77

77:                                               ; preds = %71
  %78 = icmp slt i64 %0, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %77
  %80 = bitcast %"class.std::__1::vector.25"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %80) #11
  unreachable

81:                                               ; preds = %77
  %82 = shl i64 %0, 1
  %83 = call i8* @_Znwm(i64 %82) #12
  %84 = bitcast i8* %83 to i16*
  %85 = bitcast %"class.std::__1::vector.25"* %9 to i8**
  store i8* %83, i8** %85, align 8
  %86 = getelementptr inbounds i16, i16* %84, i64 %0
  store i16* %86, i16** %75, align 8
  %87 = bitcast i16** %74 to i64*
  %88 = ptrtoint i8* %83 to i64
  %89 = add nsw i64 %0, -1
  %90 = getelementptr i16, i16* %84, i64 %89
  %91 = ptrtoint i16* %90 to i64
  %92 = sub i64 2, %88
  %93 = add i64 %92, %91
  %94 = and i64 %93, -2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %83, i8 0, i64 %94, i1 false) #10
  %95 = ptrtoint i16* %86 to i64
  store i64 %95, i64* %87, align 8
  %96 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %97 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %98 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %99 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  br label %112

100:                                              ; preds = %189
  %101 = icmp eq i64 %200, %0
  br i1 %101, label %102, label %112

102:                                              ; preds = %100
  br i1 %76, label %331, label %103

103:                                              ; preds = %102
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %39, i64 0, i32 0, i32 0
  %105 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 2, i32 0, i32 0
  %106 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 1
  %107 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 5
  %108 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 2
  %109 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 4
  %110 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 7
  %111 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %104, align 8
  br label %208

112:                                              ; preds = %100, %81
  %113 = phi i64 [ 0, %81 ], [ %200, %100 ]
  %114 = load i8*, i8** %96, align 8
  %115 = load i8*, i8** %97, align 8
  %116 = icmp ugt i8* %114, %115
  br i1 %116, label %117, label %120, !prof !3

117:                                              ; preds = %112
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %118 = load i64, i64* %99, align 8
  %119 = load i64, i64* %98, align 8
  br label %131

120:                                              ; preds = %112
  %121 = bitcast i8* %114 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = load i64, i64* %98, align 8
  %124 = shl i64 %122, %123
  %125 = load i64, i64* %99, align 8
  %126 = or i64 %125, %124
  store i64 %126, i64* %99, align 8
  %127 = sub i64 63, %123
  %128 = lshr i64 %127, 3
  %129 = getelementptr inbounds i8, i8* %114, i64 %128
  store i8* %129, i8** %96, align 8
  %130 = or i64 %123, 56
  store i64 %130, i64* %98, align 8
  br label %131

131:                                              ; preds = %120, %117
  %132 = phi i64 [ %119, %117 ], [ %130, %120 ]
  %133 = phi i64 [ %118, %117 ], [ %126, %120 ]
  %134 = and i64 %133, 1
  %135 = add i64 %132, -1
  store i64 %135, i64* %98, align 8
  %136 = lshr i64 %133, 1
  store i64 %136, i64* %99, align 8
  %137 = icmp eq i64 %134, 0
  br i1 %137, label %189, label %138

138:                                              ; preds = %131
  %139 = load i8*, i8** %96, align 8
  %140 = load i8*, i8** %97, align 8
  %141 = icmp ugt i8* %139, %140
  br i1 %141, label %142, label %145, !prof !3

142:                                              ; preds = %138
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %143 = load i64, i64* %99, align 8
  %144 = load i64, i64* %98, align 8
  br label %154

145:                                              ; preds = %138
  %146 = bitcast i8* %139 to i64*
  %147 = load i64, i64* %146, align 1
  %148 = shl i64 %147, %135
  %149 = or i64 %148, %136
  store i64 %149, i64* %99, align 8
  %150 = sub i64 64, %132
  %151 = lshr i64 %150, 3
  %152 = getelementptr inbounds i8, i8* %139, i64 %151
  store i8* %152, i8** %96, align 8
  %153 = or i64 %135, 56
  store i64 %153, i64* %98, align 8
  br label %154

154:                                              ; preds = %145, %142
  %155 = phi i64 [ %144, %142 ], [ %153, %145 ]
  %156 = phi i64 [ %143, %142 ], [ %149, %145 ]
  %157 = and i64 %156, 15
  %158 = add i64 %155, -4
  store i64 %158, i64* %98, align 8
  %159 = lshr i64 %156, 4
  store i64 %159, i64* %99, align 8
  %160 = trunc i64 %157 to i32
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %189, label %162

162:                                              ; preds = %154
  %163 = load i8*, i8** %96, align 8
  %164 = load i8*, i8** %97, align 8
  %165 = icmp ugt i8* %163, %164
  br i1 %165, label %166, label %169, !prof !3

166:                                              ; preds = %162
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %167 = load i64, i64* %99, align 8
  %168 = load i64, i64* %98, align 8
  br label %178

169:                                              ; preds = %162
  %170 = bitcast i8* %163 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = shl i64 %171, %158
  %173 = or i64 %172, %159
  store i64 %173, i64* %99, align 8
  %174 = sub i64 67, %155
  %175 = lshr i64 %174, 3
  %176 = getelementptr inbounds i8, i8* %163, i64 %175
  store i8* %176, i8** %96, align 8
  %177 = or i64 %158, 56
  store i64 %177, i64* %98, align 8
  br label %178

178:                                              ; preds = %169, %166
  %179 = phi i64 [ %168, %166 ], [ %177, %169 ]
  %180 = phi i64 [ %167, %166 ], [ %173, %169 ]
  %181 = shl nsw i64 -1, %157
  %182 = xor i64 %181, 4294967295
  %183 = and i64 %180, %182
  %184 = sub i64 %179, %157
  store i64 %184, i64* %98, align 8
  %185 = lshr i64 %180, %157
  store i64 %185, i64* %99, align 8
  %186 = trunc i64 %183 to i32
  %187 = shl i32 1, %160
  %188 = add nuw nsw i32 %187, %186
  br label %189

189:                                              ; preds = %131, %154, %178
  %190 = phi i32 [ %188, %178 ], [ 1, %154 ], [ 0, %131 ]
  %191 = trunc i32 %190 to i16
  %192 = add i16 %191, 1
  %193 = load i16*, i16** %73, align 8
  %194 = getelementptr inbounds i16, i16* %193, i64 %113
  store i16 %192, i16* %194, align 2
  %195 = load i16*, i16** %73, align 8
  %196 = getelementptr inbounds i16, i16* %195, i64 %113
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i64
  %199 = icmp ugt i64 %198, %1
  %200 = add nuw i64 %113, 1
  br i1 %199, label %201, label %100

201:                                              ; preds = %189
  %202 = icmp eq i16* %195, null
  br i1 %202, label %207, label %203

203:                                              ; preds = %201
  %204 = ptrtoint i16* %195 to i64
  %205 = bitcast i16** %74 to i64*
  store i64 %204, i64* %205, align 8
  %206 = bitcast i16* %195 to i8*
  call void @_ZdlPv(i8* %206) #12
  br label %207

207:                                              ; preds = %201, %203
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #10
  br label %1079

208:                                              ; preds = %269, %103
  %209 = phi %"struct.jxl::HuffmanDecodingData"* [ %111, %103 ], [ %260, %269 ]
  %210 = phi i16* [ %195, %103 ], [ %270, %269 ]
  %211 = phi i64 [ 0, %103 ], [ %267, %269 ]
  %212 = getelementptr inbounds i16, i16* %210, i64 %211
  %213 = load i16, i16* %212, align 2
  %214 = icmp ugt i16 %213, 1
  %215 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %209, i64 %211
  br i1 %214, label %216, label %242

216:                                              ; preds = %208
  %217 = zext i16 %213 to i64
  %218 = call zeroext i1 @_ZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %215, i64 %217, %"class.jxl::BitReader"* %2) #10
  br i1 %218, label %259, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %221 = bitcast i8** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 4
  %224 = bitcast i8** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = sub i64 %222, %225
  %227 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 5
  %228 = load i64, i64* %227, align 8
  %229 = add i64 %226, %228
  %230 = shl i64 %229, 3
  %231 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %230, %232
  %234 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 7
  store i64 %233, i64* %234, align 8
  %235 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %236 = load i8*, i8** %235, align 8
  %237 = getelementptr inbounds i8, i8* %236, i64 8
  %238 = ptrtoint i8* %237 to i64
  %239 = sub i64 %238, %225
  %240 = shl i64 %239, 3
  %241 = icmp ugt i64 %233, %240
  br i1 %241, label %331, label %333

242:                                              ; preds = %208
  %243 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %209, i64 %211, i32 0, i32 0, i32 1
  %244 = bitcast %"struct.jxl::HuffmanCode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"struct.jxl::HuffmanDecodingData"* %215 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = sub i64 %245, %247
  %249 = ashr exact i64 %248, 2
  %250 = icmp ult i64 %249, 256
  %251 = inttoptr i64 %247 to %"struct.jxl::HuffmanCode"*
  br i1 %250, label %252, label %255

252:                                              ; preds = %242
  %253 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %215, i64 0, i32 0
  %254 = sub nuw nsw i64 256, %249
  call void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.1"* %253, i64 %254) #10
  br label %259

255:                                              ; preds = %242
  %256 = icmp eq i64 %248, 1024
  br i1 %256, label %259, label %257

257:                                              ; preds = %255
  %258 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %251, i64 256
  store %"struct.jxl::HuffmanCode"* %258, %"struct.jxl::HuffmanCode"** %243, align 8
  br label %259

259:                                              ; preds = %255, %257, %252, %216
  %260 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %104, align 8
  %261 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %260, i64 %211, i32 0, i32 0, i32 0
  %262 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %261, align 8
  %263 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %260, i64 %211, i32 0, i32 0, i32 1
  %264 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %263, align 8
  %265 = icmp eq %"struct.jxl::HuffmanCode"* %262, %264
  br i1 %265, label %266, label %271

266:                                              ; preds = %328, %259
  %267 = add nuw i64 %211, 1
  %268 = icmp eq i64 %267, %0
  br i1 %268, label %331, label %269

269:                                              ; preds = %266
  %270 = load i16*, i16** %73, align 8
  br label %208

271:                                              ; preds = %259, %328
  %272 = phi %"struct.jxl::HuffmanCode"* [ %329, %328 ], [ %262, %259 ]
  %273 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %272, i64 0, i32 0
  %274 = load i8, i8* %273, align 2
  %275 = icmp ult i8 %274, 9
  br i1 %275, label %276, label %328

276:                                              ; preds = %271
  %277 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %272, i64 0, i32 1
  %278 = load i16, i16* %277, align 2
  %279 = zext i16 %278 to i64
  %280 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %105, align 8
  %281 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %280, i64 %211
  %282 = load i8, i8* %106, align 8, !range !2
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %294, label %284

284:                                              ; preds = %276
  %285 = load i64, i64* %107, align 8
  %286 = icmp eq i64 %285, %211
  br i1 %286, label %294, label %287

287:                                              ; preds = %284
  %288 = load i32, i32* %108, align 4
  %289 = zext i32 %288 to i64
  %290 = icmp ult i64 %279, %289
  %291 = select i1 %290, %"struct.jxl::HybridUintConfig"* %281, %"struct.jxl::HybridUintConfig"* %109
  %292 = select i1 %290, i64 0, i64 %289
  %293 = sub nsw i64 %279, %292
  br label %294

294:                                              ; preds = %287, %284, %276
  %295 = phi %"struct.jxl::HybridUintConfig"* [ %281, %284 ], [ %281, %276 ], [ %291, %287 ]
  %296 = phi i64 [ %279, %284 ], [ %279, %276 ], [ %293, %287 ]
  %297 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %295, i64 0, i32 1
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %295, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  %302 = zext i32 %301 to i64
  %303 = icmp ult i64 %296, %299
  br i1 %303, label %304, label %308

304:                                              ; preds = %294
  %305 = load i64, i64* %110, align 8
  %306 = icmp ult i64 %305, %302
  %307 = select i1 %306, i64 %302, i64 %305
  br label %326

308:                                              ; preds = %294
  %309 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %295, i64 0, i32 3
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %295, i64 0, i32 2
  %312 = load i32, i32* %311, align 4
  %313 = zext i32 %310 to i64
  %314 = zext i32 %312 to i64
  %315 = add nuw nsw i64 %314, %313
  %316 = sub nsw i64 %302, %315
  %317 = sub nsw i64 %296, %299
  %318 = lshr i64 %317, %315
  %319 = add i64 %316, %318
  %320 = and i64 %319, 4294967295
  %321 = add nuw nsw i64 %315, 1
  %322 = add nuw nsw i64 %321, %320
  %323 = load i64, i64* %110, align 8
  %324 = icmp ult i64 %323, %322
  %325 = select i1 %324, i64 %322, i64 %323
  br label %326

326:                                              ; preds = %304, %308
  %327 = phi i64 [ %325, %308 ], [ %307, %304 ]
  store i64 %327, i64* %110, align 8
  br label %328

328:                                              ; preds = %326, %271
  %329 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %272, i64 1
  %330 = icmp eq %"struct.jxl::HuffmanCode"* %329, %264
  br i1 %330, label %266, label %271

331:                                              ; preds = %266, %71, %102, %219
  %332 = phi i1 [ false, %219 ], [ true, %102 ], [ true, %71 ], [ true, %266 ]
  br label %333

333:                                              ; preds = %219, %331
  %334 = phi i32 [ -1, %331 ], [ 1, %219 ]
  %335 = phi i1 [ %332, %331 ], [ false, %219 ]
  %336 = load i16*, i16** %73, align 8
  %337 = icmp eq i16* %336, null
  br i1 %337, label %342, label %338

338:                                              ; preds = %333
  %339 = bitcast i16* %336 to i8*
  %340 = ptrtoint i16* %336 to i64
  %341 = bitcast i16** %74 to i64*
  store i64 %340, i64* %341, align 8
  call void @_ZdlPv(i8* %339) #12
  br label %342

342:                                              ; preds = %333, %338
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #10
  br i1 %335, label %1078, label %1079

343:                                              ; preds = %29
  %344 = icmp ult i64 %1, 257
  br i1 %344, label %348, label %345

345:                                              ; preds = %343
  %346 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0), i32 234, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0)) #10
  %347 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

348:                                              ; preds = %343
  %349 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 5
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = shl i32 1, %351
  %353 = sext i32 %352 to i64
  %354 = shl i64 %0, 3
  %355 = mul i64 %354, %353
  %356 = call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #10
  %357 = call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 %355, i64 %356) #10
  %358 = ptrtoint i8* %357 to i64
  %359 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %360 = load i8*, i8** %359, align 8
  %361 = bitcast %"struct.jxl::ANSCode"* %3 to i64*
  store i64 %358, i64* %361, align 8
  %362 = icmp eq i8* %360, null
  br i1 %362, label %363, label %365

363:                                              ; preds = %348
  %364 = bitcast i8* %357 to %"struct.jxl::AliasTable::Entry"*
  br label %368

365:                                              ; preds = %348
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %360) #10
  %366 = bitcast %"struct.jxl::ANSCode"* %3 to %"struct.jxl::AliasTable::Entry"**
  %367 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %366, align 8
  br label %368

368:                                              ; preds = %363, %365
  %369 = phi %"struct.jxl::AliasTable::Entry"* [ %367, %365 ], [ %364, %363 ]
  %370 = icmp eq i64 %0, 0
  br i1 %370, label %1078, label %371

371:                                              ; preds = %368
  %372 = bitcast %"class.std::__1::vector.18"* %10 to i8*
  %373 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %10, i64 0, i32 0, i32 0
  %374 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %10, i64 0, i32 0, i32 1
  %375 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %376 = bitcast i64* %5 to [2 x i32]*
  %377 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %378 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %379 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %380 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %381 = bitcast i64* %5 to i8*
  %382 = bitcast i32** %374 to i64*
  %383 = bitcast %"class.std::__1::vector.18"* %10 to i64*
  %384 = bitcast i64* %5 to i32*
  %385 = getelementptr inbounds [2 x i32], [2 x i32]* %376, i64 0, i64 1
  %386 = bitcast %"class.std::__1::vector.18"* %6 to i8*
  %387 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %388 = bitcast i32** %387 to i64*
  %389 = bitcast i32** %375 to i64*
  %390 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  %391 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 0
  %392 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 1
  %393 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %394 = bitcast %"class.std::__1::vector.18"* %7 to i8**
  %395 = bitcast i32** %392 to i64*
  %396 = bitcast %"class.std::__1::vector.18"* %7 to i64*
  %397 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 2, i32 0, i32 0
  %398 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 1
  %399 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 5
  %400 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 2
  %401 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 6, i32 4
  %402 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %3, i64 0, i32 7
  %403 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %12, i64 0, i32 0, i32 0
  %404 = bitcast %"class.std::__1::vector.18"* %11 to i8*
  %405 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 1
  %406 = bitcast i32** %405 to i8**
  %407 = bitcast %"class.std::__1::vector.18"* %11 to i8**
  %408 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %409 = bitcast i32** %405 to i64*
  %410 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %11, i64 0, i32 0, i32 0
  %411 = bitcast %"class.std::__1::vector.18"* %6 to <2 x i64>*
  %412 = bitcast %"class.std::__1::vector.18"* %10 to <2 x i64>*
  br label %415

413:                                              ; preds = %1075
  %414 = icmp eq i64 %1077, %0
  br i1 %414, label %1078, label %415

415:                                              ; preds = %413, %371
  %416 = phi i64 [ 0, %371 ], [ %1077, %413 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %372) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %372, i8 0, i64 24, i1 false) #10
  %417 = load i8*, i8** %377, align 8
  %418 = load i8*, i8** %378, align 8
  %419 = icmp ugt i8* %417, %418
  br i1 %419, label %420, label %423, !prof !3

420:                                              ; preds = %415
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %421 = load i64, i64* %380, align 8
  %422 = load i64, i64* %379, align 8
  br label %434

423:                                              ; preds = %415
  %424 = bitcast i8* %417 to i64*
  %425 = load i64, i64* %424, align 1
  %426 = load i64, i64* %379, align 8
  %427 = shl i64 %425, %426
  %428 = load i64, i64* %380, align 8
  %429 = or i64 %428, %427
  store i64 %429, i64* %380, align 8
  %430 = sub i64 63, %426
  %431 = lshr i64 %430, 3
  %432 = getelementptr inbounds i8, i8* %417, i64 %431
  store i8* %432, i8** %377, align 8
  %433 = or i64 %426, 56
  store i64 %433, i64* %379, align 8
  br label %434

434:                                              ; preds = %423, %420
  %435 = phi i64 [ %422, %420 ], [ %433, %423 ]
  %436 = phi i64 [ %421, %420 ], [ %429, %423 ]
  %437 = add i64 %435, -1
  store i64 %437, i64* %379, align 8
  %438 = lshr i64 %436, 1
  store i64 %438, i64* %380, align 8
  %439 = and i64 %436, 1
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %538, label %441

441:                                              ; preds = %434
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %381) #10
  store i64 0, i64* %5, align 8
  %442 = load i8*, i8** %377, align 8
  %443 = load i8*, i8** %378, align 8
  %444 = icmp ugt i8* %442, %443
  br i1 %444, label %445, label %448, !prof !3

445:                                              ; preds = %441
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %446 = load i64, i64* %380, align 8
  %447 = load i64, i64* %379, align 8
  br label %457

448:                                              ; preds = %441
  %449 = bitcast i8* %442 to i64*
  %450 = load i64, i64* %449, align 1
  %451 = shl i64 %450, %437
  %452 = or i64 %451, %438
  store i64 %452, i64* %380, align 8
  %453 = sub i64 64, %435
  %454 = lshr i64 %453, 3
  %455 = getelementptr inbounds i8, i8* %442, i64 %454
  store i8* %455, i8** %377, align 8
  %456 = or i64 %437, 56
  store i64 %456, i64* %379, align 8
  br label %457

457:                                              ; preds = %448, %445
  %458 = phi i64 [ %447, %445 ], [ %456, %448 ]
  %459 = phi i64 [ %446, %445 ], [ %452, %448 ]
  %460 = add i64 %458, -1
  store i64 %460, i64* %379, align 8
  %461 = lshr i64 %459, 1
  store i64 %461, i64* %380, align 8
  %462 = trunc i64 %459 to i32
  %463 = and i32 %462, 1
  %464 = add nuw nsw i32 %463, 1
  %465 = zext i32 %464 to i64
  br label %466

466:                                              ; preds = %466, %457
  %467 = phi i64 [ %473, %466 ], [ 0, %457 ]
  %468 = phi i32 [ %472, %466 ], [ 0, %457 ]
  %469 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117DecodeVarLenUint8EPNS_9BitReaderE(%"class.jxl::BitReader"* %2) #10
  %470 = getelementptr inbounds [2 x i32], [2 x i32]* %376, i64 0, i64 %467
  store i32 %469, i32* %470, align 4
  %471 = icmp sgt i32 %469, %468
  %472 = select i1 %471, i32 %469, i32 %468
  %473 = add nuw nsw i64 %467, 1
  %474 = icmp eq i64 %473, %465
  br i1 %474, label %475, label %466

475:                                              ; preds = %466
  %476 = add nsw i32 %472, 1
  %477 = sext i32 %476 to i64
  %478 = load i64, i64* %382, align 8
  %479 = load i64, i64* %383, align 16
  %480 = sub i64 %478, %479
  %481 = ashr exact i64 %480, 2
  %482 = icmp ult i64 %481, %477
  %483 = inttoptr i64 %479 to i32*
  br i1 %482, label %484, label %486

484:                                              ; preds = %475
  %485 = sub nsw i64 %477, %481
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.18"* nonnull %10, i64 %485) #10
  br label %490

486:                                              ; preds = %475
  %487 = icmp ugt i64 %481, %477
  br i1 %487, label %488, label %490

488:                                              ; preds = %486
  %489 = getelementptr inbounds i32, i32* %483, i64 %477
  store i32* %489, i32** %374, align 8
  br label %490

490:                                              ; preds = %488, %486, %484
  %491 = icmp eq i32 %463, 0
  %492 = load i32, i32* %384, align 8
  br i1 %491, label %493, label %497

493:                                              ; preds = %490
  %494 = sext i32 %492 to i64
  %495 = load i32*, i32** %373, align 16
  %496 = getelementptr inbounds i32, i32* %495, i64 %494
  br label %535

497:                                              ; preds = %490
  %498 = load i32, i32* %385, align 4
  %499 = icmp eq i32 %492, %498
  br i1 %499, label %500, label %501

500:                                              ; preds = %497
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %381) #10
  br label %1065

501:                                              ; preds = %497
  %502 = load i8*, i8** %377, align 8
  %503 = load i8*, i8** %378, align 8
  %504 = icmp ugt i8* %502, %503
  br i1 %504, label %505, label %508, !prof !3

505:                                              ; preds = %501
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %506 = load i64, i64* %380, align 8
  %507 = load i64, i64* %379, align 8
  br label %519

508:                                              ; preds = %501
  %509 = bitcast i8* %502 to i64*
  %510 = load i64, i64* %509, align 1
  %511 = load i64, i64* %379, align 8
  %512 = shl i64 %510, %511
  %513 = load i64, i64* %380, align 8
  %514 = or i64 %513, %512
  store i64 %514, i64* %380, align 8
  %515 = sub i64 63, %511
  %516 = lshr i64 %515, 3
  %517 = getelementptr inbounds i8, i8* %502, i64 %516
  store i8* %517, i8** %377, align 8
  %518 = or i64 %511, 56
  store i64 %518, i64* %379, align 8
  br label %519

519:                                              ; preds = %508, %505
  %520 = phi i64 [ %507, %505 ], [ %518, %508 ]
  %521 = phi i64 [ %506, %505 ], [ %514, %508 ]
  %522 = add i64 %520, -12
  store i64 %522, i64* %379, align 8
  %523 = lshr i64 %521, 12
  store i64 %523, i64* %380, align 8
  %524 = trunc i64 %521 to i32
  %525 = and i32 %524, 4095
  %526 = sext i32 %492 to i64
  %527 = load i32*, i32** %373, align 16
  %528 = getelementptr inbounds i32, i32* %527, i64 %526
  store i32 %525, i32* %528, align 4
  %529 = load i32*, i32** %373, align 16
  %530 = getelementptr inbounds i32, i32* %529, i64 %526
  %531 = load i32, i32* %530, align 4
  %532 = sub nsw i32 4096, %531
  %533 = sext i32 %498 to i64
  %534 = getelementptr inbounds i32, i32* %529, i64 %533
  br label %535

535:                                              ; preds = %519, %493
  %536 = phi i32* [ %534, %519 ], [ %496, %493 ]
  %537 = phi i32 [ %532, %519 ], [ 4096, %493 ]
  store i32 %537, i32* %536, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %381) #10
  br label %914

538:                                              ; preds = %434
  %539 = load i8*, i8** %377, align 8
  %540 = load i8*, i8** %378, align 8
  %541 = icmp ugt i8* %539, %540
  br i1 %541, label %542, label %545, !prof !3

542:                                              ; preds = %538
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %543 = load i64, i64* %380, align 8
  %544 = load i64, i64* %379, align 8
  br label %554

545:                                              ; preds = %538
  %546 = bitcast i8* %539 to i64*
  %547 = load i64, i64* %546, align 1
  %548 = shl i64 %547, %437
  %549 = or i64 %548, %438
  store i64 %549, i64* %380, align 8
  %550 = sub i64 64, %435
  %551 = lshr i64 %550, 3
  %552 = getelementptr inbounds i8, i8* %539, i64 %551
  store i8* %552, i8** %377, align 8
  %553 = or i64 %437, 56
  store i64 %553, i64* %379, align 8
  br label %554

554:                                              ; preds = %545, %542
  %555 = phi i64 [ %544, %542 ], [ %553, %545 ]
  %556 = phi i64 [ %543, %542 ], [ %549, %545 ]
  %557 = add i64 %555, -1
  store i64 %557, i64* %379, align 8
  %558 = lshr i64 %556, 1
  store i64 %558, i64* %380, align 8
  %559 = and i64 %556, 1
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %565

561:                                              ; preds = %554
  %562 = load i8*, i8** %377, align 8
  %563 = load i8*, i8** %378, align 8
  %564 = icmp ugt i8* %562, %563
  br i1 %564, label %578, label %581, !prof !3

565:                                              ; preds = %554
  %566 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117DecodeVarLenUint8EPNS_9BitReaderE(%"class.jxl::BitReader"* %2) #10
  %567 = add nsw i32 %566, 1
  %568 = icmp eq i32 %567, 0
  br i1 %568, label %1065, label %569

569:                                              ; preds = %565
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %386) #10
  call void @_ZN3jxl19CreateFlatHistogramEii(%"class.std::__1::vector.18"* nonnull sret %6, i32 %567, i32 4096) #10
  %570 = load i32*, i32** %373, align 16
  %571 = icmp eq i32* %570, null
  br i1 %571, label %575, label %572

572:                                              ; preds = %569
  %573 = ptrtoint i32* %570 to i64
  store i64 %573, i64* %382, align 8
  %574 = bitcast i32* %570 to i8*
  call void @_ZdlPv(i8* %574) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %372, i8 0, i64 24, i1 false) #10
  br label %575

575:                                              ; preds = %572, %569
  %576 = load <2 x i64>, <2 x i64>* %411, align 16
  store <2 x i64> %576, <2 x i64>* %412, align 16
  %577 = load i64, i64* %388, align 16
  store i64 %577, i64* %389, align 16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %386) #10
  br label %914

578:                                              ; preds = %561
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %579 = load i64, i64* %380, align 8
  %580 = load i64, i64* %379, align 8
  br label %590

581:                                              ; preds = %561
  %582 = bitcast i8* %562 to i64*
  %583 = load i64, i64* %582, align 1
  %584 = shl i64 %583, %557
  %585 = or i64 %584, %558
  store i64 %585, i64* %380, align 8
  %586 = sub i64 64, %555
  %587 = lshr i64 %586, 3
  %588 = getelementptr inbounds i8, i8* %562, i64 %587
  store i8* %588, i8** %377, align 8
  %589 = or i64 %557, 56
  store i64 %589, i64* %379, align 8
  br label %590

590:                                              ; preds = %581, %578
  %591 = phi i64 [ %580, %578 ], [ %589, %581 ]
  %592 = phi i64 [ %579, %578 ], [ %585, %581 ]
  %593 = and i64 %592, 1
  %594 = add i64 %591, -1
  store i64 %594, i64* %379, align 8
  %595 = lshr i64 %592, 1
  store i64 %595, i64* %380, align 8
  %596 = icmp eq i64 %593, 0
  br i1 %596, label %601, label %597

597:                                              ; preds = %590
  %598 = load i8*, i8** %377, align 8
  %599 = load i8*, i8** %378, align 8
  %600 = icmp ugt i8* %598, %599
  br i1 %600, label %880, label %871, !prof !3

601:                                              ; preds = %906, %883, %590
  %602 = phi i64 [ %595, %590 ], [ %888, %883 ], [ %911, %906 ]
  %603 = phi i64 [ %594, %590 ], [ %887, %883 ], [ %910, %906 ]
  %604 = phi i32 [ 0, %590 ], [ 1, %883 ], [ %913, %906 ]
  %605 = zext i32 %604 to i64
  %606 = load i8*, i8** %377, align 8
  %607 = load i8*, i8** %378, align 8
  %608 = icmp ugt i8* %606, %607
  br i1 %608, label %609, label %612, !prof !3

609:                                              ; preds = %601
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %610 = load i64, i64* %380, align 8
  %611 = load i64, i64* %379, align 8
  br label %621

612:                                              ; preds = %601
  %613 = bitcast i8* %606 to i64*
  %614 = load i64, i64* %613, align 1
  %615 = shl i64 %614, %603
  %616 = or i64 %615, %602
  store i64 %616, i64* %380, align 8
  %617 = sub i64 63, %603
  %618 = lshr i64 %617, 3
  %619 = getelementptr inbounds i8, i8* %606, i64 %618
  store i8* %619, i8** %377, align 8
  %620 = or i64 %603, 56
  store i64 %620, i64* %379, align 8
  br label %621

621:                                              ; preds = %612, %609
  %622 = phi i64 [ %611, %609 ], [ %620, %612 ]
  %623 = phi i64 [ %610, %609 ], [ %616, %612 ]
  %624 = shl nsw i64 -1, %605
  %625 = xor i64 %624, 4294967295
  %626 = and i64 %623, %625
  %627 = sub i64 %622, %605
  store i64 %627, i64* %379, align 8
  %628 = lshr i64 %623, %605
  store i64 %628, i64* %380, align 8
  %629 = shl i32 1, %604
  %630 = trunc i64 %626 to i32
  %631 = or i32 %629, %630
  %632 = add i32 %631, -1
  %633 = icmp ugt i32 %632, 13
  br i1 %633, label %1065, label %634

634:                                              ; preds = %621
  %635 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117DecodeVarLenUint8EPNS_9BitReaderE(%"class.jxl::BitReader"* %2) #10
  %636 = add nsw i32 %635, 3
  %637 = sext i32 %636 to i64
  %638 = load i64, i64* %382, align 8
  %639 = load i64, i64* %383, align 16
  %640 = sub i64 %638, %639
  %641 = ashr exact i64 %640, 2
  %642 = icmp ult i64 %641, %637
  %643 = inttoptr i64 %639 to i32*
  br i1 %642, label %644, label %648

644:                                              ; preds = %634
  %645 = sub nsw i64 %637, %641
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.18"* nonnull %10, i64 %645) #10
  %646 = load i64, i64* %382, align 8
  %647 = load i64, i64* %383, align 16
  br label %653

648:                                              ; preds = %634
  %649 = icmp ugt i64 %641, %637
  br i1 %649, label %650, label %653

650:                                              ; preds = %648
  %651 = getelementptr inbounds i32, i32* %643, i64 %637
  store i32* %651, i32** %374, align 8
  %652 = ptrtoint i32* %651 to i64
  br label %653

653:                                              ; preds = %650, %648, %644
  %654 = phi i64 [ %647, %644 ], [ %639, %648 ], [ %639, %650 ]
  %655 = phi i64 [ %646, %644 ], [ %638, %648 ], [ %652, %650 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %390) #10
  %656 = sub i64 %655, %654
  %657 = ashr exact i64 %656, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %390, i8 0, i64 24, i1 false) #10
  %658 = icmp eq i64 %656, 0
  br i1 %658, label %659, label %660

659:                                              ; preds = %653
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %390) #10
  br label %1065

660:                                              ; preds = %653
  %661 = icmp ugt i64 %657, 4611686018427387903
  br i1 %661, label %662, label %664

662:                                              ; preds = %660
  %663 = bitcast %"class.std::__1::vector.18"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %663) #11
  unreachable

664:                                              ; preds = %660
  %665 = call i8* @_Znwm(i64 %656) #12
  %666 = bitcast i8* %665 to i32*
  store i8* %665, i8** %394, align 8
  %667 = getelementptr inbounds i32, i32* %666, i64 %657
  store i32* %667, i32** %393, align 8
  %668 = ptrtoint i8* %665 to i64
  %669 = add nsw i64 %657, -1
  %670 = getelementptr i32, i32* %666, i64 %669
  %671 = ptrtoint i32* %670 to i64
  %672 = sub i64 4, %668
  %673 = add i64 %672, %671
  %674 = and i64 %673, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %665, i8 0, i64 %674, i1 false) #10
  %675 = ptrtoint i32* %667 to i64
  store i64 %675, i64* %395, align 8
  %676 = call i8* @_Znwm(i64 %656) #12
  %677 = bitcast i8* %676 to i32*
  %678 = and i64 %656, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %676, i8 0, i64 %678, i1 false) #10
  %679 = icmp eq i32* %667, %666
  br i1 %679, label %862, label %683

680:                                              ; preds = %735
  %681 = ptrtoint i32* %718 to i64
  %682 = icmp slt i32 %737, 0
  br i1 %682, label %862, label %744

683:                                              ; preds = %664, %735
  %684 = phi i32* [ %718, %735 ], [ %666, %664 ]
  %685 = phi i64 [ %739, %735 ], [ 0, %664 ]
  %686 = phi i32 [ %737, %735 ], [ -1, %664 ]
  %687 = phi i32 [ %736, %735 ], [ -1, %664 ]
  %688 = load i8*, i8** %377, align 8
  %689 = load i8*, i8** %378, align 8
  %690 = icmp ugt i8* %688, %689
  br i1 %690, label %691, label %694, !prof !3

691:                                              ; preds = %683
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %692 = load i64, i64* %380, align 8
  %693 = load i64, i64* %379, align 8
  br label %705

694:                                              ; preds = %683
  %695 = bitcast i8* %688 to i64*
  %696 = load i64, i64* %695, align 1
  %697 = load i64, i64* %379, align 8
  %698 = shl i64 %696, %697
  %699 = load i64, i64* %380, align 8
  %700 = or i64 %699, %698
  store i64 %700, i64* %380, align 8
  %701 = sub i64 63, %697
  %702 = lshr i64 %701, 3
  %703 = getelementptr inbounds i8, i8* %688, i64 %702
  store i8* %703, i8** %377, align 8
  %704 = or i64 %697, 56
  store i64 %704, i64* %379, align 8
  br label %705

705:                                              ; preds = %694, %691
  %706 = phi i64 [ %693, %691 ], [ %704, %694 ]
  %707 = phi i64 [ %692, %691 ], [ %700, %694 ]
  %708 = and i64 %707, 127
  %709 = getelementptr inbounds [128 x [2 x i8]], [128 x [2 x i8]]* @_ZZN3jxl12_GLOBAL__N_113ReadHistogramEiPNSt3__16vectorIiNS1_9allocatorIiEEEEPNS_9BitReaderEE4huff, i64 0, i64 %708, i64 0
  %710 = load i8, i8* %709, align 2
  %711 = zext i8 %710 to i64
  %712 = sub i64 %706, %711
  store i64 %712, i64* %379, align 8
  %713 = lshr i64 %707, %711
  store i64 %713, i64* %380, align 8
  %714 = getelementptr inbounds [128 x [2 x i8]], [128 x [2 x i8]]* @_ZZN3jxl12_GLOBAL__N_113ReadHistogramEiPNSt3__16vectorIiNS1_9allocatorIiEEEEPNS_9BitReaderEE4huff, i64 0, i64 %708, i64 1
  %715 = load i8, i8* %714, align 1
  %716 = zext i8 %715 to i32
  %717 = getelementptr inbounds i32, i32* %684, i64 %685
  store i32 %716, i32* %717, align 4
  %718 = load i32*, i32** %391, align 8
  %719 = getelementptr inbounds i32, i32* %718, i64 %685
  %720 = load i32, i32* %719, align 4
  %721 = icmp eq i32 %720, 13
  %722 = ptrtoint i32* %718 to i64
  br i1 %721, label %723, label %730

723:                                              ; preds = %705
  %724 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_117DecodeVarLenUint8EPNS_9BitReaderE(%"class.jxl::BitReader"* %2) #10
  %725 = add nsw i32 %724, 5
  %726 = getelementptr inbounds i32, i32* %677, i64 %685
  store i32 %725, i32* %726, align 4
  %727 = add nsw i32 %724, 3
  %728 = sext i32 %727 to i64
  %729 = add i64 %685, %728
  br label %735

730:                                              ; preds = %705
  %731 = icmp sgt i32 %720, %687
  %732 = trunc i64 %685 to i32
  %733 = select i1 %731, i32 %720, i32 %687
  %734 = select i1 %731, i32 %732, i32 %686
  br label %735

735:                                              ; preds = %730, %723
  %736 = phi i32 [ %687, %723 ], [ %733, %730 ]
  %737 = phi i32 [ %686, %723 ], [ %734, %730 ]
  %738 = phi i64 [ %729, %723 ], [ %685, %730 ]
  %739 = add i64 %738, 1
  %740 = load i64, i64* %395, align 8
  %741 = sub i64 %740, %722
  %742 = ashr exact i64 %741, 2
  %743 = icmp ult i64 %739, %742
  br i1 %743, label %683, label %680

744:                                              ; preds = %680
  %745 = sext i32 %737 to i64
  %746 = add nuw nsw i64 %745, 1
  %747 = icmp ult i64 %746, %742
  br i1 %747, label %748, label %754

748:                                              ; preds = %744
  %749 = add nuw nsw i32 %737, 1
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds i32, i32* %718, i64 %750
  %752 = load i32, i32* %751, align 4
  %753 = icmp eq i32 %752, 4097
  br i1 %753, label %862, label %754

754:                                              ; preds = %748, %744
  %755 = icmp eq i64 %740, %681
  br i1 %755, label %756, label %766

756:                                              ; preds = %852, %754
  %757 = phi i32 [ 0, %754 ], [ %855, %852 ]
  %758 = sub nsw i32 4096, %757
  %759 = load i32*, i32** %373, align 16
  %760 = getelementptr inbounds i32, i32* %759, i64 %745
  store i32 %758, i32* %760, align 4
  %761 = load i32*, i32** %373, align 16
  %762 = getelementptr inbounds i32, i32* %761, i64 %745
  %763 = load i32, i32* %762, align 4
  %764 = icmp slt i32 %763, 1
  %765 = zext i1 %764 to i32
  br label %862

766:                                              ; preds = %754, %852
  %767 = phi i64 [ %853, %852 ], [ %681, %754 ]
  %768 = phi i64 [ %854, %852 ], [ %740, %754 ]
  %769 = phi i32* [ %861, %852 ], [ %718, %754 ]
  %770 = phi i64 [ %857, %852 ], [ 0, %754 ]
  %771 = phi i32 [ %856, %852 ], [ 0, %754 ]
  %772 = phi i32 [ %786, %852 ], [ 0, %754 ]
  %773 = phi i32 [ %855, %852 ], [ 0, %754 ]
  %774 = getelementptr inbounds i32, i32* %677, i64 %770
  %775 = load i32, i32* %774, align 4
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %785, label %777

777:                                              ; preds = %766
  %778 = add nsw i32 %775, -1
  %779 = icmp eq i64 %770, 0
  br i1 %779, label %785, label %780

780:                                              ; preds = %777
  %781 = add i64 %770, -1
  %782 = load i32*, i32** %373, align 16
  %783 = getelementptr inbounds i32, i32* %782, i64 %781
  %784 = load i32, i32* %783, align 4
  br label %785

785:                                              ; preds = %780, %777, %766
  %786 = phi i32 [ %772, %766 ], [ %784, %780 ], [ 0, %777 ]
  %787 = phi i32 [ %771, %766 ], [ %778, %780 ], [ %778, %777 ]
  %788 = icmp sgt i32 %787, 0
  br i1 %788, label %789, label %793

789:                                              ; preds = %785
  %790 = load i32*, i32** %373, align 16
  %791 = getelementptr inbounds i32, i32* %790, i64 %770
  store i32 %786, i32* %791, align 4
  %792 = add nsw i32 %787, -1
  br label %844

793:                                              ; preds = %785
  %794 = getelementptr inbounds i32, i32* %769, i64 %770
  %795 = load i32, i32* %794, align 4
  %796 = icmp eq i64 %770, %745
  br i1 %796, label %852, label %797

797:                                              ; preds = %793
  switch i32 %795, label %801 [
    i32 0, label %852
    i32 1, label %798
  ]

798:                                              ; preds = %797
  %799 = load i32*, i32** %373, align 16
  %800 = getelementptr inbounds i32, i32* %799, i64 %770
  store i32 1, i32* %800, align 4
  br label %844

801:                                              ; preds = %797
  %802 = add nsw i32 %795, -1
  %803 = sub i32 13, %795
  %804 = lshr i32 %803, 1
  %805 = sub nsw i32 %632, %804
  %806 = icmp slt i32 %805, %802
  %807 = select i1 %806, i32 %805, i32 %802
  %808 = icmp sgt i32 %807, 0
  %809 = select i1 %808, i32 %807, i32 0
  %810 = shl i32 1, %802
  %811 = zext i32 %809 to i64
  %812 = load i8*, i8** %377, align 8
  %813 = load i8*, i8** %378, align 8
  %814 = icmp ugt i8* %812, %813
  br i1 %814, label %815, label %818, !prof !3

815:                                              ; preds = %801
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %816 = load i64, i64* %380, align 8
  %817 = load i64, i64* %379, align 8
  br label %829

818:                                              ; preds = %801
  %819 = bitcast i8* %812 to i64*
  %820 = load i64, i64* %819, align 1
  %821 = load i64, i64* %379, align 8
  %822 = shl i64 %820, %821
  %823 = load i64, i64* %380, align 8
  %824 = or i64 %823, %822
  store i64 %824, i64* %380, align 8
  %825 = sub i64 63, %821
  %826 = lshr i64 %825, 3
  %827 = getelementptr inbounds i8, i8* %812, i64 %826
  store i8* %827, i8** %377, align 8
  %828 = or i64 %821, 56
  store i64 %828, i64* %379, align 8
  br label %829

829:                                              ; preds = %818, %815
  %830 = phi i64 [ %817, %815 ], [ %828, %818 ]
  %831 = phi i64 [ %816, %815 ], [ %824, %818 ]
  %832 = shl nsw i64 -1, %811
  %833 = xor i64 %832, -1
  %834 = and i64 %831, %833
  %835 = sub i64 %830, %811
  store i64 %835, i64* %379, align 8
  %836 = lshr i64 %831, %811
  store i64 %836, i64* %380, align 8
  %837 = sub nsw i32 %802, %809
  %838 = zext i32 %837 to i64
  %839 = shl i64 %834, %838
  %840 = trunc i64 %839 to i32
  %841 = add i32 %810, %840
  %842 = load i32*, i32** %373, align 16
  %843 = getelementptr inbounds i32, i32* %842, i64 %770
  store i32 %841, i32* %843, align 4
  br label %844

844:                                              ; preds = %829, %798, %789
  %845 = phi i32 [ %792, %789 ], [ %787, %798 ], [ %787, %829 ]
  %846 = load i32*, i32** %373, align 16
  %847 = getelementptr inbounds i32, i32* %846, i64 %770
  %848 = load i32, i32* %847, align 4
  %849 = add nsw i32 %848, %773
  %850 = load i64, i64* %395, align 8
  %851 = load i64, i64* %396, align 8
  br label %852

852:                                              ; preds = %844, %797, %793
  %853 = phi i64 [ %851, %844 ], [ %767, %793 ], [ %767, %797 ]
  %854 = phi i64 [ %850, %844 ], [ %768, %793 ], [ %768, %797 ]
  %855 = phi i32 [ %849, %844 ], [ %773, %793 ], [ %773, %797 ]
  %856 = phi i32 [ %845, %844 ], [ %787, %793 ], [ %787, %797 ]
  %857 = add nuw i64 %770, 1
  %858 = sub i64 %854, %853
  %859 = ashr exact i64 %858, 2
  %860 = icmp ult i64 %857, %859
  %861 = inttoptr i64 %853 to i32*
  br i1 %860, label %766, label %756

862:                                              ; preds = %664, %756, %748, %680
  %863 = phi i32 [ 1, %664 ], [ %765, %756 ], [ 1, %748 ], [ 1, %680 ]
  call void @_ZdlPv(i8* nonnull %676) #12
  %864 = load i32*, i32** %391, align 8
  %865 = icmp eq i32* %864, null
  br i1 %865, label %869, label %866

866:                                              ; preds = %862
  %867 = bitcast i32* %864 to i8*
  %868 = ptrtoint i32* %864 to i64
  store i64 %868, i64* %395, align 8
  call void @_ZdlPv(i8* %867) #12
  br label %869

869:                                              ; preds = %866, %862
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %390) #10
  %870 = icmp eq i32 %863, 0
  br i1 %870, label %914, label %1065

871:                                              ; preds = %597
  %872 = bitcast i8* %598 to i64*
  %873 = load i64, i64* %872, align 1
  %874 = shl i64 %873, %594
  %875 = or i64 %874, %595
  store i64 %875, i64* %380, align 8
  %876 = sub i64 64, %591
  %877 = lshr i64 %876, 3
  %878 = getelementptr inbounds i8, i8* %598, i64 %877
  store i8* %878, i8** %377, align 8
  %879 = or i64 %594, 56
  store i64 %879, i64* %379, align 8
  br label %883

880:                                              ; preds = %597
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %881 = load i64, i64* %380, align 8
  %882 = load i64, i64* %379, align 8
  br label %883

883:                                              ; preds = %880, %871
  %884 = phi i64 [ %882, %880 ], [ %879, %871 ]
  %885 = phi i64 [ %881, %880 ], [ %875, %871 ]
  %886 = and i64 %885, 1
  %887 = add i64 %884, -1
  store i64 %887, i64* %379, align 8
  %888 = lshr i64 %885, 1
  store i64 %888, i64* %380, align 8
  %889 = icmp eq i64 %886, 0
  br i1 %889, label %601, label %890

890:                                              ; preds = %883
  %891 = load i8*, i8** %377, align 8
  %892 = load i8*, i8** %378, align 8
  %893 = icmp ugt i8* %891, %892
  br i1 %893, label %903, label %894, !prof !3

894:                                              ; preds = %890
  %895 = bitcast i8* %891 to i64*
  %896 = load i64, i64* %895, align 1
  %897 = shl i64 %896, %887
  %898 = or i64 %897, %888
  store i64 %898, i64* %380, align 8
  %899 = sub i64 64, %884
  %900 = lshr i64 %899, 3
  %901 = getelementptr inbounds i8, i8* %891, i64 %900
  store i8* %901, i8** %377, align 8
  %902 = or i64 %887, 56
  store i64 %902, i64* %379, align 8
  br label %906

903:                                              ; preds = %890
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %904 = load i64, i64* %380, align 8
  %905 = load i64, i64* %379, align 8
  br label %906

906:                                              ; preds = %903, %894
  %907 = phi i64 [ %905, %903 ], [ %902, %894 ]
  %908 = phi i64 [ %904, %903 ], [ %898, %894 ]
  %909 = and i64 %908, 1
  %910 = add i64 %907, -1
  store i64 %910, i64* %379, align 8
  %911 = lshr i64 %908, 1
  store i64 %911, i64* %380, align 8
  %912 = icmp eq i64 %909, 0
  %913 = select i1 %912, i32 2, i32 3
  br label %601

914:                                              ; preds = %535, %869, %575
  %915 = load i64, i64* %382, align 8
  %916 = load i64, i64* %383, align 16
  %917 = sub i64 %915, %916
  %918 = ashr exact i64 %917, 2
  %919 = icmp ugt i64 %918, %1
  %920 = inttoptr i64 %916 to i32*
  %921 = inttoptr i64 %915 to i32*
  br i1 %919, label %1068, label %922

922:                                              ; preds = %914
  %923 = icmp eq i32* %920, %921
  br i1 %923, label %944, label %924

924:                                              ; preds = %922
  %925 = getelementptr inbounds i32, i32* %921, i64 -1
  %926 = load i32, i32* %925, align 4
  %927 = icmp eq i32 %926, 0
  br i1 %927, label %932, label %939

928:                                              ; preds = %932
  %929 = getelementptr inbounds i32, i32* %933, i64 -1
  %930 = load i32, i32* %929, align 4
  %931 = icmp eq i32 %930, 0
  br i1 %931, label %932, label %937

932:                                              ; preds = %924, %928
  %933 = phi i32* [ %929, %928 ], [ %925, %924 ]
  store i32* %933, i32** %374, align 8
  %934 = icmp eq i32* %933, %920
  br i1 %934, label %935, label %928

935:                                              ; preds = %932
  %936 = ptrtoint i32* %933 to i64
  br label %939

937:                                              ; preds = %928
  %938 = ptrtoint i32* %933 to i64
  br label %939

939:                                              ; preds = %924, %937, %935
  %940 = phi i64 [ %936, %935 ], [ %938, %937 ], [ %915, %924 ]
  %941 = phi i1 [ true, %935 ], [ false, %937 ], [ false, %924 ]
  %942 = sub i64 %940, %916
  %943 = ashr exact i64 %942, 2
  br label %944

944:                                              ; preds = %939, %922
  %945 = phi i64 [ %943, %939 ], [ %918, %922 ]
  %946 = phi i64 [ %942, %939 ], [ %917, %922 ]
  %947 = phi i64 [ %940, %939 ], [ %915, %922 ]
  %948 = phi i1 [ %941, %939 ], [ true, %922 ]
  %949 = icmp eq i64 %946, 0
  br i1 %949, label %953, label %950

950:                                              ; preds = %944
  %951 = sub i64 %947, %916
  %952 = ashr exact i64 %951, 2
  br label %961

953:                                              ; preds = %1015, %944
  %954 = phi i64 [ %945, %944 ], [ %952, %1015 ]
  %955 = trunc i64 %954 to i32
  %956 = add i32 %955, -1
  %957 = select i1 %948, i32 0, i32 %956
  %958 = icmp sgt i32 %957, 0
  br i1 %958, label %959, label %1026

959:                                              ; preds = %953
  %960 = zext i32 %957 to i64
  br label %1020

961:                                              ; preds = %950, %1015
  %962 = phi i64 [ %1016, %1015 ], [ 0, %950 ]
  %963 = getelementptr inbounds i32, i32* %920, i64 %962
  %964 = load i32, i32* %963, align 4
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %1015, label %966

966:                                              ; preds = %961
  %967 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %397, align 8
  %968 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %967, i64 %416
  %969 = load i8, i8* %398, align 8, !range !2
  %970 = icmp eq i8 %969, 0
  br i1 %970, label %981, label %971

971:                                              ; preds = %966
  %972 = load i64, i64* %399, align 8
  %973 = icmp eq i64 %972, %416
  br i1 %973, label %981, label %974

974:                                              ; preds = %971
  %975 = load i32, i32* %400, align 4
  %976 = zext i32 %975 to i64
  %977 = icmp ult i64 %962, %976
  %978 = select i1 %977, %"struct.jxl::HybridUintConfig"* %968, %"struct.jxl::HybridUintConfig"* %401
  %979 = select i1 %977, i64 0, i64 %976
  %980 = sub i64 %962, %979
  br label %981

981:                                              ; preds = %974, %971, %966
  %982 = phi %"struct.jxl::HybridUintConfig"* [ %968, %971 ], [ %968, %966 ], [ %978, %974 ]
  %983 = phi i64 [ %962, %971 ], [ %962, %966 ], [ %980, %974 ]
  %984 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %982, i64 0, i32 1
  %985 = load i32, i32* %984, align 4
  %986 = zext i32 %985 to i64
  %987 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %982, i64 0, i32 0
  %988 = load i32, i32* %987, align 4
  %989 = zext i32 %988 to i64
  %990 = icmp ult i64 %983, %986
  br i1 %990, label %991, label %995

991:                                              ; preds = %981
  %992 = load i64, i64* %402, align 8
  %993 = icmp ult i64 %992, %989
  %994 = select i1 %993, i64 %989, i64 %992
  br label %1013

995:                                              ; preds = %981
  %996 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %982, i64 0, i32 3
  %997 = load i32, i32* %996, align 4
  %998 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %982, i64 0, i32 2
  %999 = load i32, i32* %998, align 4
  %1000 = zext i32 %997 to i64
  %1001 = zext i32 %999 to i64
  %1002 = add nuw nsw i64 %1001, %1000
  %1003 = sub nsw i64 %989, %1002
  %1004 = sub i64 %983, %986
  %1005 = lshr i64 %1004, %1002
  %1006 = add i64 %1003, %1005
  %1007 = and i64 %1006, 4294967295
  %1008 = add nuw nsw i64 %1002, 1
  %1009 = add nuw nsw i64 %1008, %1007
  %1010 = load i64, i64* %402, align 8
  %1011 = icmp ult i64 %1010, %1009
  %1012 = select i1 %1011, i64 %1009, i64 %1010
  br label %1013

1013:                                             ; preds = %991, %995
  %1014 = phi i64 [ %1012, %995 ], [ %994, %991 ]
  store i64 %1014, i64* %402, align 8
  br label %1015

1015:                                             ; preds = %1013, %961
  %1016 = add nuw i64 %962, 1
  %1017 = icmp ult i64 %1016, %952
  br i1 %1017, label %961, label %953

1018:                                             ; preds = %1020
  %1019 = icmp eq i64 %1025, %960
  br i1 %1019, label %1026, label %1020

1020:                                             ; preds = %1018, %959
  %1021 = phi i64 [ 0, %959 ], [ %1025, %1018 ]
  %1022 = getelementptr inbounds i32, i32* %920, i64 %1021
  %1023 = load i32, i32* %1022, align 4
  %1024 = icmp eq i32 %1023, 0
  %1025 = add nuw nsw i64 %1021, 1
  br i1 %1024, label %1018, label %1026

1026:                                             ; preds = %1020, %1018, %953
  %1027 = phi i32 [ %957, %953 ], [ -1, %1020 ], [ %957, %1018 ]
  %1028 = load i32*, i32** %403, align 8
  %1029 = getelementptr inbounds i32, i32* %1028, i64 %416
  store i32 %1027, i32* %1029, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %404, i8 0, i64 24, i1 false) #10
  %1030 = load i64, i64* %382, align 8
  %1031 = load i64, i64* %383, align 16
  %1032 = sub i64 %1030, %1031
  %1033 = ashr exact i64 %1032, 2
  %1034 = icmp eq i64 %1032, 0
  br i1 %1034, label %1052, label %1035

1035:                                             ; preds = %1026
  %1036 = icmp ugt i64 %1033, 4611686018427387903
  br i1 %1036, label %1037, label %1039

1037:                                             ; preds = %1035
  %1038 = bitcast %"class.std::__1::vector.18"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1038) #11
  unreachable

1039:                                             ; preds = %1035
  %1040 = call i8* @_Znwm(i64 %1032) #12
  %1041 = bitcast i8* %1040 to i32*
  store i8* %1040, i8** %406, align 8
  store i8* %1040, i8** %407, align 8
  %1042 = getelementptr inbounds i32, i32* %1041, i64 %1033
  store i32* %1042, i32** %408, align 8
  %1043 = ptrtoint i8* %1040 to i64
  %1044 = icmp sgt i64 %1032, 0
  br i1 %1044, label %1045, label %1050

1045:                                             ; preds = %1039
  %1046 = lshr exact i64 %1032, 2
  %1047 = inttoptr i64 %1031 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1040, i8* align 4 %1047, i64 %1032, i1 false) #10
  %1048 = getelementptr inbounds i32, i32* %1041, i64 %1046
  %1049 = ptrtoint i32* %1048 to i64
  br label %1050

1050:                                             ; preds = %1045, %1039
  %1051 = phi i64 [ %1049, %1045 ], [ %1043, %1039 ]
  store i64 %1051, i64* %409, align 8
  br label %1052

1052:                                             ; preds = %1026, %1050
  %1053 = load i8, i8* %349, align 1
  %1054 = zext i8 %1053 to i64
  %1055 = zext i8 %1053 to i32
  %1056 = shl i32 1, %1055
  %1057 = sext i32 %1056 to i64
  %1058 = mul i64 %416, %1057
  %1059 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %369, i64 %1058
  call void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector.18"* nonnull %11, i32 4096, i64 %1054, %"struct.jxl::AliasTable::Entry"* %1059) #10
  %1060 = load i32*, i32** %410, align 8
  %1061 = icmp eq i32* %1060, null
  br i1 %1061, label %1065, label %1062

1062:                                             ; preds = %1052
  %1063 = ptrtoint i32* %1060 to i64
  store i64 %1063, i64* %409, align 8
  %1064 = bitcast i32* %1060 to i8*
  call void @_ZdlPv(i8* %1064) #12
  br label %1065

1065:                                             ; preds = %659, %500, %869, %621, %565, %1052, %1062
  %1066 = phi i32 [ 0, %1062 ], [ 0, %1052 ], [ 1, %565 ], [ 1, %621 ], [ 1, %869 ], [ 1, %500 ], [ 1, %659 ]
  %1067 = load i32*, i32** %373, align 16
  br label %1068

1068:                                             ; preds = %1065, %914
  %1069 = phi i32* [ %1067, %1065 ], [ %920, %914 ]
  %1070 = phi i32 [ %1066, %1065 ], [ 1, %914 ]
  %1071 = icmp eq i32* %1069, null
  br i1 %1071, label %1075, label %1072

1072:                                             ; preds = %1068
  %1073 = ptrtoint i32* %1069 to i64
  store i64 %1073, i64* %382, align 8
  %1074 = bitcast i32* %1069 to i8*
  call void @_ZdlPv(i8* %1074) #12
  br label %1075

1075:                                             ; preds = %1068, %1072
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %372) #10
  %1076 = icmp eq i32 %1070, 0
  %1077 = add nuw i64 %416, 1
  br i1 %1076, label %413, label %1079

1078:                                             ; preds = %413, %368, %342
  br label %1079

1079:                                             ; preds = %1075, %207, %342, %1078
  %1080 = phi i32 [ 0, %1078 ], [ 1, %207 ], [ %334, %342 ], [ 1, %1075 ]
  ret i32 %1080
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl19HuffmanDecodingData17ReadFromBitStreamEmPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, i64, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl7ANSCode16UpdateMaxNumBitsEmm(%"struct.jxl::ANSCode"* nocapture, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %5, i64 %1
  %7 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 6, i32 1
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %22, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 6, i32 5
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, %1
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 6, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = icmp ugt i64 %17, %2
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = sub i64 %2, %17
  %21 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 6, i32 4
  br label %22

22:                                               ; preds = %14, %10, %3, %19
  %23 = phi %"struct.jxl::HybridUintConfig"* [ %21, %19 ], [ %6, %14 ], [ %6, %10 ], [ %6, %3 ]
  %24 = phi i64 [ %20, %19 ], [ %2, %14 ], [ %2, %10 ], [ %2, %3 ]
  %25 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %23, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %23, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %24, %27
  br i1 %31, label %32, label %37

32:                                               ; preds = %22
  %33 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 7
  %34 = load i64, i64* %33, align 8
  %35 = icmp ult i64 %34, %30
  %36 = select i1 %35, i64 %30, i64 %34
  br label %56

37:                                               ; preds = %22
  %38 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %23, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %23, i64 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %39 to i64
  %43 = zext i32 %41 to i64
  %44 = add nuw nsw i64 %43, %42
  %45 = sub nsw i64 %30, %44
  %46 = sub i64 %24, %27
  %47 = lshr i64 %46, %44
  %48 = add i64 %45, %47
  %49 = and i64 %48, 4294967295
  %50 = add nuw nsw i64 %44, 1
  %51 = add nuw nsw i64 %50, %49
  %52 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %0, i64 0, i32 7
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %53, %51
  %55 = select i1 %54, i64 %51, i64 %53
  br label %56

56:                                               ; preds = %37, %32
  %57 = phi i64* [ %52, %37 ], [ %33, %32 ]
  %58 = phi i64 [ %55, %37 ], [ %36, %32 ]
  store i64 %58, i64* %57, align 8
  ret void
}

declare void @_ZN3jxl14InitAliasTableENSt3__16vectorIiNS0_9allocatorIiEEEEjmPNS_10AliasTable5EntryE(%"class.std::__1::vector.18"*, i32, i64, %"struct.jxl::AliasTable::Entry"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16DecodeUintConfigEmPNS_16HybridUintConfigEPNS_9BitReaderE(i64, %"struct.jxl::HybridUintConfig"* nocapture, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %12, !prof !3

9:                                                ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %10 = load i8*, i8** %4, align 8
  %11 = load i8*, i8** %6, align 8
  br label %25

12:                                               ; preds = %3
  %13 = bitcast i8* %5 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %14, %16
  %18 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %19, %17
  store i64 %20, i64* %18, align 8
  %21 = sub i64 63, %16
  %22 = lshr i64 %21, 3
  %23 = getelementptr inbounds i8, i8* %5, i64 %22
  store i8* %23, i8** %4, align 8
  %24 = or i64 %16, 56
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %9, %12
  %26 = phi i8* [ %11, %9 ], [ %7, %12 ]
  %27 = phi i8* [ %10, %9 ], [ %23, %12 ]
  %28 = add i64 %0, 1
  %29 = tail call i64 @llvm.ctlz.i64(i64 %28, i1 true) #10, !range !4
  %30 = xor i64 %29, 63
  %31 = tail call i64 @llvm.ctpop.i64(i64 %28) #10, !range !4
  %32 = icmp ugt i64 %31, 1
  %33 = zext i1 %32 to i64
  %34 = add nuw nsw i64 %30, %33
  %35 = icmp ugt i8* %27, %26
  br i1 %35, label %36, label %41, !prof !3

36:                                               ; preds = %25
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %37 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  br label %54

41:                                               ; preds = %25
  %42 = bitcast i8* %27 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = shl i64 %43, %45
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = or i64 %48, %46
  store i64 %49, i64* %47, align 8
  %50 = sub i64 63, %45
  %51 = lshr i64 %50, 3
  %52 = getelementptr inbounds i8, i8* %27, i64 %51
  store i8* %52, i8** %4, align 8
  %53 = or i64 %45, 56
  store i64 %53, i64* %44, align 8
  br label %54

54:                                               ; preds = %36, %41
  %55 = phi i64 [ %40, %36 ], [ %53, %41 ]
  %56 = phi i64 [ %38, %36 ], [ %49, %41 ]
  %57 = shl nsw i64 -1, %34
  %58 = xor i64 %57, -1
  %59 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %60 = and i64 %56, %58
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = sub i64 %55, %34
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %56, %34
  store i64 %63, i64* %59, align 8
  %64 = icmp eq i64 %60, %0
  br i1 %64, label %129, label %65

65:                                               ; preds = %54
  %66 = add i64 %60, 1
  %67 = tail call i64 @llvm.ctlz.i64(i64 %66, i1 true) #10, !range !4
  %68 = xor i64 %67, 63
  %69 = tail call i64 @llvm.ctpop.i64(i64 %66) #10, !range !4
  %70 = icmp ugt i64 %69, 1
  %71 = zext i1 %70 to i64
  %72 = add nuw nsw i64 %68, %71
  %73 = load i8*, i8** %4, align 8
  %74 = load i8*, i8** %6, align 8
  %75 = icmp ugt i8* %73, %74
  br i1 %75, label %76, label %79, !prof !3

76:                                               ; preds = %65
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %77 = load i64, i64* %59, align 8
  %78 = load i64, i64* %61, align 8
  br label %88

79:                                               ; preds = %65
  %80 = bitcast i8* %73 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = shl i64 %81, %62
  %83 = or i64 %82, %63
  store i64 %83, i64* %59, align 8
  %84 = sub i64 63, %62
  %85 = lshr i64 %84, 3
  %86 = getelementptr inbounds i8, i8* %73, i64 %85
  store i8* %86, i8** %4, align 8
  %87 = or i64 %62, 56
  store i64 %87, i64* %61, align 8
  br label %88

88:                                               ; preds = %76, %79
  %89 = phi i64 [ %78, %76 ], [ %87, %79 ]
  %90 = phi i64 [ %77, %76 ], [ %83, %79 ]
  %91 = shl nsw i64 -1, %72
  %92 = xor i64 %91, -1
  %93 = and i64 %90, %92
  %94 = sub i64 %89, %72
  store i64 %94, i64* %61, align 8
  %95 = lshr i64 %90, %72
  store i64 %95, i64* %59, align 8
  %96 = icmp ult i64 %60, %93
  br i1 %96, label %143, label %97

97:                                               ; preds = %88
  %98 = sub i64 %60, %93
  %99 = add i64 %98, 1
  %100 = tail call i64 @llvm.ctlz.i64(i64 %99, i1 true) #10, !range !4
  %101 = xor i64 %100, 63
  %102 = tail call i64 @llvm.ctpop.i64(i64 %99) #10, !range !4
  %103 = icmp ugt i64 %102, 1
  %104 = zext i1 %103 to i64
  %105 = add nuw nsw i64 %101, %104
  %106 = load i8*, i8** %4, align 8
  %107 = load i8*, i8** %6, align 8
  %108 = icmp ugt i8* %106, %107
  br i1 %108, label %109, label %112, !prof !3

109:                                              ; preds = %97
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %110 = load i64, i64* %59, align 8
  %111 = load i64, i64* %61, align 8
  br label %121

112:                                              ; preds = %97
  %113 = bitcast i8* %106 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = shl i64 %114, %94
  %116 = or i64 %115, %95
  store i64 %116, i64* %59, align 8
  %117 = sub i64 63, %94
  %118 = lshr i64 %117, 3
  %119 = getelementptr inbounds i8, i8* %106, i64 %118
  store i8* %119, i8** %4, align 8
  %120 = or i64 %94, 56
  store i64 %120, i64* %61, align 8
  br label %121

121:                                              ; preds = %112, %109
  %122 = phi i64 [ %111, %109 ], [ %120, %112 ]
  %123 = phi i64 [ %110, %109 ], [ %116, %112 ]
  %124 = shl nsw i64 -1, %105
  %125 = xor i64 %124, -1
  %126 = and i64 %123, %125
  %127 = sub i64 %122, %105
  store i64 %127, i64* %61, align 8
  %128 = lshr i64 %123, %105
  store i64 %128, i64* %59, align 8
  br label %129

129:                                              ; preds = %121, %54
  %130 = phi i64 [ 0, %54 ], [ %126, %121 ]
  %131 = phi i64 [ 0, %54 ], [ %93, %121 ]
  %132 = add i64 %131, %130
  %133 = icmp ugt i64 %132, %60
  br i1 %133, label %143, label %134

134:                                              ; preds = %129
  %135 = trunc i64 %60 to i32
  %136 = trunc i64 %131 to i32
  %137 = trunc i64 %130 to i32
  %138 = shl i32 1, %135
  %139 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1, i64 0, i32 0
  store i32 %135, i32* %139, align 4
  %140 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1, i64 0, i32 1
  store i32 %138, i32* %140, align 4
  %141 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1, i64 0, i32 2
  store i32 %136, i32* %141, align 4
  %142 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %1, i64 0, i32 3
  store i32 %137, i32* %142, align 4
  br label %143

143:                                              ; preds = %129, %88, %134
  %144 = phi i32 [ 0, %134 ], [ 1, %88 ], [ 1, %129 ]
  ret i32 %144
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17DecodeUintConfigsEmPNSt3__16vectorINS_16HybridUintConfigENS0_9allocatorIS2_EEEEPNS_9BitReaderE(i64, %"class.std::__1::vector.11"* nocapture readonly, %"class.jxl::BitReader"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::HybridUintConfig"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.11"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %24, label %16

10:                                               ; preds = %16
  %11 = load i64, i64* %5, align 8
  %12 = load i64, i64* %7, align 8
  %13 = sub i64 %11, %12
  %14 = ashr exact i64 %13, 4
  %15 = icmp ult i64 %23, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %3, %10
  %17 = phi i64 [ %12, %10 ], [ %8, %3 ]
  %18 = phi i64 [ %23, %10 ], [ 0, %3 ]
  %19 = inttoptr i64 %17 to %"struct.jxl::HybridUintConfig"*
  %20 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %19, i64 %18
  %21 = tail call i32 @_ZN3jxl16DecodeUintConfigEmPNS_16HybridUintConfigEPNS_9BitReaderE(i64 %0, %"struct.jxl::HybridUintConfig"* %20, %"class.jxl::BitReader"* %2)
  %22 = icmp eq i32 %21, 0
  %23 = add nuw i64 %18, 1
  br i1 %22, label %10, label %24

24:                                               ; preds = %16, %10, %3
  %25 = phi i32 [ 0, %3 ], [ 0, %10 ], [ %21, %16 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl10LZ77ParamsC2Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl10LZ77ParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 4, i32 0
  %5 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 0, i32 0>, <4 x i32>* %5, align 4
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #10
  ret void
}

declare void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10LZ77Params11VisitFieldsEPNS_7VisitorE(%"struct.jxl::LZ77Params"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %33

10:                                               ; preds = %2
  %11 = load i8, i8* %3, align 8, !range !2
  %12 = icmp ne i8 %11, 0
  %13 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %14 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %14, i64 8
  %16 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, i1 zeroext %12) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 2
  %21 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %22 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %21, align 8, !noalias !5
  %23 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %22, i64 4
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %23, align 8, !noalias !5
  %25 = tail call i32 %24(%"class.jxl::Visitor"* %1, i64 -9223369835684036384, i64 1161788657664, i32 224, i32* %20) #10
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"struct.jxl::LZ77Params", %"struct.jxl::LZ77Params"* %0, i64 0, i32 3
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %21, align 8, !noalias !8
  %30 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %29, i64 4
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %30, align 8, !noalias !8
  %32 = tail call i32 %31(%"class.jxl::Visitor"* %1, i64 -9223372017527422973, i64 1267015352481, i32 3, i32* %28) #10
  ret i32 %32

33:                                               ; preds = %10, %19, %2
  %34 = phi i32 [ %25, %19 ], [ %8, %2 ], [ 0, %10 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.32"*, i1 zeroext) local_unnamed_addr #0 {
  %6 = alloca i64, align 8
  %7 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 6, i32 0
  %8 = tail call i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"* %0, %"class.jxl::Fields"* %7) #10
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %166

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 6, i32 1
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 6, i32 4
  %16 = tail call i32 @_ZN3jxl16DecodeUintConfigEmPNS_16HybridUintConfigEPNS_9BitReaderE(i64 8, %"struct.jxl::HybridUintConfig"* %15, %"class.jxl::BitReader"* %0)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %166

18:                                               ; preds = %14
  %19 = add i64 %1, 1
  %20 = load i8, i8* %11, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  %22 = xor i1 %4, true
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %166

24:                                               ; preds = %10, %18
  %25 = phi i64 [ %19, %18 ], [ %1, %10 ]
  %26 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #10
  store i64 1, i64* %6, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %3, i64 0, i32 0, i32 1
  %28 = bitcast i8** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.32"* %3 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = icmp ugt i64 %25, %32
  %34 = inttoptr i64 %31 to i8*
  br i1 %33, label %35, label %37

35:                                               ; preds = %24
  %36 = sub i64 %25, %32
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.32"* %3, i64 %36) #10
  br label %41

37:                                               ; preds = %24
  %38 = icmp ult i64 %25, %32
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = getelementptr inbounds i8, i8* %34, i64 %25
  store i8* %40, i8** %27, align 8
  br label %41

41:                                               ; preds = %35, %37, %39
  %42 = icmp ugt i64 %25, 1
  br i1 %42, label %43, label %45

43:                                               ; preds = %41
  %44 = call zeroext i1 @_ZN3jxl16DecodeContextMapEPNSt3__16vectorIhNS0_9allocatorIhEEEEPmPNS_9BitReaderE(%"class.std::__1::vector.32"* %3, i64* nonnull %6, %"class.jxl::BitReader"* %0) #10
  br i1 %44, label %45, label %164

45:                                               ; preds = %43, %41
  %46 = load i8*, i8** %27, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 -1
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 6, i32 5
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %54 = load i8*, i8** %53, align 8
  %55 = icmp ugt i8* %52, %54
  br i1 %55, label %56, label %61, !prof !3

56:                                               ; preds = %45
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %57 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %60 = load i64, i64* %59, align 8
  br label %74

61:                                               ; preds = %45
  %62 = bitcast i8* %52 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = shl i64 %63, %65
  %67 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = or i64 %68, %66
  store i64 %69, i64* %67, align 8
  %70 = sub i64 63, %65
  %71 = lshr i64 %70, 3
  %72 = getelementptr inbounds i8, i8* %52, i64 %71
  store i8* %72, i8** %51, align 8
  %73 = or i64 %65, 56
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %56, %61
  %75 = phi i64 [ %60, %56 ], [ %73, %61 ]
  %76 = phi i64 [ %58, %56 ], [ %69, %61 ]
  %77 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %78 = and i64 %76, 1
  %79 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %80 = add i64 %75, -1
  store i64 %80, i64* %79, align 8
  %81 = lshr i64 %76, 1
  store i64 %81, i64* %77, align 8
  %82 = icmp eq i64 %78, 0
  %83 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 4
  %84 = trunc i64 %78 to i8
  store i8 %84, i8* %83, align 8
  br i1 %82, label %85, label %111

85:                                               ; preds = %74
  %86 = load i8*, i8** %51, align 8
  %87 = load i8*, i8** %53, align 8
  %88 = icmp ugt i8* %86, %87
  br i1 %88, label %89, label %92, !prof !3

89:                                               ; preds = %85
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %90 = load i64, i64* %77, align 8
  %91 = load i64, i64* %79, align 8
  br label %103

92:                                               ; preds = %85
  %93 = bitcast i8* %86 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = load i64, i64* %79, align 8
  %96 = shl i64 %94, %95
  %97 = load i64, i64* %77, align 8
  %98 = or i64 %97, %96
  store i64 %98, i64* %77, align 8
  %99 = sub i64 63, %95
  %100 = lshr i64 %99, 3
  %101 = getelementptr inbounds i8, i8* %86, i64 %100
  store i8* %101, i8** %51, align 8
  %102 = or i64 %95, 56
  store i64 %102, i64* %79, align 8
  br label %103

103:                                              ; preds = %89, %92
  %104 = phi i64 [ %91, %89 ], [ %102, %92 ]
  %105 = phi i64 [ %90, %89 ], [ %98, %92 ]
  %106 = add i64 %104, -2
  store i64 %106, i64* %79, align 8
  %107 = lshr i64 %105, 2
  store i64 %107, i64* %77, align 8
  %108 = trunc i64 %105 to i8
  %109 = and i8 %108, 3
  %110 = add nuw nsw i8 %109, 5
  br label %111

111:                                              ; preds = %74, %103
  %112 = phi i8 [ %110, %103 ], [ 15, %74 ]
  %113 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 5
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 2
  %115 = load i64, i64* %6, align 8
  %116 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 2, i32 0, i32 1
  %117 = bitcast %"struct.jxl::HybridUintConfig"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.std::__1::vector.11"* %114 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = sub i64 %118, %120
  %122 = ashr exact i64 %121, 4
  %123 = icmp ugt i64 %115, %122
  %124 = inttoptr i64 %120 to %"struct.jxl::HybridUintConfig"*
  br i1 %123, label %125, label %131

125:                                              ; preds = %111
  %126 = sub i64 %115, %122
  call void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.11"* %114, i64 %126) #10
  %127 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 5
  %128 = load i8, i8* %127, align 1
  %129 = load i64, i64* %117, align 8
  %130 = load i64, i64* %119, align 8
  br label %136

131:                                              ; preds = %111
  %132 = icmp ult i64 %115, %122
  br i1 %132, label %133, label %136

133:                                              ; preds = %131
  %134 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %124, i64 %115
  store %"struct.jxl::HybridUintConfig"* %134, %"struct.jxl::HybridUintConfig"** %116, align 8
  %135 = ptrtoint %"struct.jxl::HybridUintConfig"* %134 to i64
  br label %136

136:                                              ; preds = %125, %131, %133
  %137 = phi i64 [ %130, %125 ], [ %120, %131 ], [ %120, %133 ]
  %138 = phi i64 [ %129, %125 ], [ %118, %131 ], [ %135, %133 ]
  %139 = phi i8 [ %128, %125 ], [ %112, %131 ], [ %112, %133 ]
  %140 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %2, i64 0, i32 5
  %141 = zext i8 %139 to i64
  %142 = icmp eq i64 %138, %137
  br i1 %142, label %157, label %149

143:                                              ; preds = %149
  %144 = load i64, i64* %117, align 8
  %145 = load i64, i64* %119, align 8
  %146 = sub i64 %144, %145
  %147 = ashr exact i64 %146, 4
  %148 = icmp ult i64 %156, %147
  br i1 %148, label %149, label %157

149:                                              ; preds = %136, %143
  %150 = phi i64 [ %145, %143 ], [ %137, %136 ]
  %151 = phi i64 [ %156, %143 ], [ 0, %136 ]
  %152 = inttoptr i64 %150 to %"struct.jxl::HybridUintConfig"*
  %153 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %152, i64 %151
  %154 = call i32 @_ZN3jxl16DecodeUintConfigEmPNS_16HybridUintConfigEPNS_9BitReaderE(i64 %141, %"struct.jxl::HybridUintConfig"* %153, %"class.jxl::BitReader"* %0) #10
  %155 = icmp eq i32 %154, 0
  %156 = add nuw i64 %151, 1
  br i1 %155, label %143, label %164

157:                                              ; preds = %143, %136
  %158 = load i8, i8* %140, align 1
  %159 = zext i8 %158 to i32
  %160 = shl i32 1, %159
  %161 = sext i32 %160 to i64
  %162 = load i64, i64* %6, align 8
  %163 = call i32 @_ZN3jxl14DecodeANSCodesEmmPNS_9BitReaderEPNS_7ANSCodeE(i64 %162, i64 %161, %"class.jxl::BitReader"* %0, %"struct.jxl::ANSCode"* %2)
  br label %164

164:                                              ; preds = %149, %157, %43
  %165 = phi i32 [ 1, %43 ], [ %163, %157 ], [ %154, %149 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #10
  br label %166

166:                                              ; preds = %18, %14, %5, %164
  %167 = phi i32 [ %165, %164 ], [ %8, %5 ], [ %16, %14 ], [ 1, %18 ]
  ret i32 %167
}

declare i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl16DecodeContextMapEPNSt3__16vectorIhNS0_9allocatorIhEEEEPmPNS_9BitReaderE(%"class.std::__1::vector.32"*, i64*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10LZ77ParamsD0Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::LZ77Params"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl10LZ77Params4NameEv(%"struct.jxl::LZ77Params"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0)
}

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_117DecodeVarLenUint8EPNS_9BitReaderE(%"class.jxl::BitReader"*) unnamed_addr #4 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ugt i8* %3, %5
  br i1 %6, label %7, label %12, !prof !3

7:                                                ; preds = %1
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %25

12:                                               ; preds = %1
  %13 = bitcast i8* %3 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = shl i64 %14, %16
  %18 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %19, %17
  store i64 %20, i64* %18, align 8
  %21 = sub i64 63, %16
  %22 = lshr i64 %21, 3
  %23 = getelementptr inbounds i8, i8* %3, i64 %22
  store i8* %23, i8** %2, align 8
  %24 = or i64 %16, 56
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %7, %12
  %26 = phi i64 [ %11, %7 ], [ %24, %12 ]
  %27 = phi i64 [ %9, %7 ], [ %20, %12 ]
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %29 = and i64 %27, 1
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %31 = add i64 %26, -1
  store i64 %31, i64* %30, align 8
  %32 = lshr i64 %27, 1
  store i64 %32, i64* %28, align 8
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %85, label %34

34:                                               ; preds = %25
  %35 = load i8*, i8** %2, align 8
  %36 = load i8*, i8** %4, align 8
  %37 = icmp ugt i8* %35, %36
  br i1 %37, label %38, label %41, !prof !3

38:                                               ; preds = %34
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %39 = load i64, i64* %28, align 8
  %40 = load i64, i64* %30, align 8
  br label %50

41:                                               ; preds = %34
  %42 = bitcast i8* %35 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = shl i64 %43, %31
  %45 = or i64 %44, %32
  store i64 %45, i64* %28, align 8
  %46 = sub i64 64, %26
  %47 = lshr i64 %46, 3
  %48 = getelementptr inbounds i8, i8* %35, i64 %47
  store i8* %48, i8** %2, align 8
  %49 = or i64 %31, 56
  store i64 %49, i64* %30, align 8
  br label %50

50:                                               ; preds = %38, %41
  %51 = phi i64 [ %40, %38 ], [ %49, %41 ]
  %52 = phi i64 [ %39, %38 ], [ %45, %41 ]
  %53 = and i64 %52, 7
  %54 = add i64 %51, -3
  store i64 %54, i64* %30, align 8
  %55 = lshr i64 %52, 3
  store i64 %55, i64* %28, align 8
  %56 = trunc i64 %53 to i32
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %85, label %58

58:                                               ; preds = %50
  %59 = load i8*, i8** %2, align 8
  %60 = load i8*, i8** %4, align 8
  %61 = icmp ugt i8* %59, %60
  br i1 %61, label %62, label %65, !prof !3

62:                                               ; preds = %58
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %63 = load i64, i64* %28, align 8
  %64 = load i64, i64* %30, align 8
  br label %74

65:                                               ; preds = %58
  %66 = bitcast i8* %59 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = shl i64 %67, %54
  %69 = or i64 %68, %55
  store i64 %69, i64* %28, align 8
  %70 = sub i64 66, %51
  %71 = lshr i64 %70, 3
  %72 = getelementptr inbounds i8, i8* %59, i64 %71
  store i8* %72, i8** %2, align 8
  %73 = or i64 %54, 56
  store i64 %73, i64* %30, align 8
  br label %74

74:                                               ; preds = %62, %65
  %75 = phi i64 [ %64, %62 ], [ %73, %65 ]
  %76 = phi i64 [ %63, %62 ], [ %69, %65 ]
  %77 = shl nsw i64 -1, %53
  %78 = xor i64 %77, 4294967295
  %79 = and i64 %76, %78
  %80 = sub i64 %75, %53
  store i64 %80, i64* %30, align 8
  %81 = lshr i64 %76, %53
  store i64 %81, i64* %28, align 8
  %82 = trunc i64 %79 to i32
  %83 = shl i32 1, %56
  %84 = add nuw nsw i32 %83, %82
  br label %85

85:                                               ; preds = %25, %74, %50
  %86 = phi i32 [ %84, %74 ], [ 1, %50 ], [ 0, %25 ]
  ret i32 %86
}

declare void @_ZN3jxl19CreateFlatHistogramEii(%"class.std::__1::vector.18"* sret, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.18"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.18"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.18"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEmRKi(%"class.std::__1::vector.18"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !11

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !13
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !13
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !16, !noalias !13
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !16, !noalias !13
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !16, !noalias !13
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !16, !noalias !13
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !18

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !13
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !16, !noalias !13
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !16, !noalias !13
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !20

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.18"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.18"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #11
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #11
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #12
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !21
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !21
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !24, !noalias !21
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !24, !noalias !21
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !24, !noalias !21
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !24, !noalias !21
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !26

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !21
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !24, !noalias !21
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !24, !noalias !21
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !27

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !28

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #10
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #12
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl19HuffmanDecodingDataENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::HuffmanDecodingData"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::HuffmanDecodingData"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::HuffmanDecodingData"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %13, i64 %18, i32 0, i32 0, i32 0
  %20 = bitcast %"struct.jxl::HuffmanCode"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #10
  %27 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #12
  %52 = bitcast i8* %51 to %"struct.jxl::HuffmanDecodingData"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::HuffmanDecodingData"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %55, i64 %34
  %57 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"struct.jxl::HuffmanDecodingData"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %61, i64 1
  %65 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %64 to i64
  %66 = icmp eq %"struct.jxl::HuffmanDecodingData"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %58 to i64
  %69 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %70, align 8
  %72 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %6, align 8
  %73 = icmp eq %"struct.jxl::HuffmanDecodingData"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::HuffmanDecodingData"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"struct.jxl::HuffmanDecodingData"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %78, i64 -1
  %81 = bitcast %"struct.jxl::HuffmanDecodingData"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"struct.jxl::HuffmanDecodingData"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"struct.jxl::HuffmanDecodingData"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %78, i64 -1, i32 0, i32 0, i32 1
  %86 = bitcast %"struct.jxl::HuffmanCode"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %77, i64 -1, i32 0, i32 0, i32 1
  %89 = bitcast %"struct.jxl::HuffmanCode"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %78, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.jxl::HuffmanCode"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %77, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::HuffmanCode"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"struct.jxl::HuffmanDecodingData"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"struct.jxl::HuffmanDecodingData"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"struct.jxl::HuffmanDecodingData"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"struct.jxl::HuffmanDecodingData"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"struct.jxl::HuffmanDecodingData"*
  %106 = icmp eq %"struct.jxl::HuffmanDecodingData"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"struct.jxl::HuffmanDecodingData"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %109, i64 0, i32 0, i32 0, i32 0
  %111 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %110, align 8
  %112 = icmp eq %"struct.jxl::HuffmanCode"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::HuffmanCode"* %111 to i64
  %115 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %108, i64 -1, i32 0, i32 0, i32 1
  %116 = bitcast %"struct.jxl::HuffmanCode"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %111, i64 0, i32 0
  tail call void @_ZdlPv(i8* %117) #12
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"struct.jxl::HuffmanDecodingData"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #12
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl11HuffmanCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::HuffmanCode"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::HuffmanCode"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::HuffmanCode"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %26, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 %1
  %17 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 0, i32 0
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %13, i64 %18, i32 0
  %20 = sub i64 0, %8
  %21 = getelementptr i8, i8* %19, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = add i64 %22, 4
  %24 = and i64 %23, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %24, i1 false) #10
  %25 = ptrtoint %"struct.jxl::HuffmanCode"* %16 to i64
  br label %26

26:                                               ; preds = %12, %15
  %27 = phi i64 [ %25, %15 ], [ %8, %12 ]
  store i64 %27, i64* %7, align 8
  br label %83

28:                                               ; preds = %2
  %29 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %8, %30
  %32 = ashr exact i64 %31, 2
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 4611686018427387903
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #11
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %5, %30
  %39 = ashr exact i64 %38, 2
  %40 = icmp ult i64 %39, 2305843009213693951
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = ashr exact i64 %38, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %41
  %47 = icmp ugt i64 %44, 4611686018427387903
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #11
  unreachable

49:                                               ; preds = %37, %46
  %50 = phi i64 [ %44, %46 ], [ 4611686018427387903, %37 ]
  %51 = shl i64 %50, 2
  %52 = tail call i8* @_Znwm(i64 %51) #12
  %53 = bitcast i8* %52 to %"struct.jxl::HuffmanCode"*
  br label %54

54:                                               ; preds = %41, %49
  %55 = phi i64 [ %50, %49 ], [ 0, %41 ]
  %56 = phi %"struct.jxl::HuffmanCode"* [ %53, %49 ], [ null, %41 ]
  %57 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %56, i64 %32
  %58 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 0, i32 0
  %59 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %56, i64 %55
  %60 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 %1
  %61 = shl nsw i64 %1, 2
  call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %61, i1 false)
  %62 = ptrtoint %"struct.jxl::HuffmanCode"* %59 to i64
  %63 = ptrtoint %"struct.jxl::HuffmanCode"* %60 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %64, align 8
  %66 = load i64, i64* %7, align 8
  %67 = ptrtoint %"struct.jxl::HuffmanCode"* %65 to i64
  %68 = sub i64 %66, %67
  %69 = ashr exact i64 %68, 2
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %57, i64 %70
  %72 = ptrtoint %"struct.jxl::HuffmanCode"* %71 to i64
  %73 = icmp sgt i64 %68, 0
  br i1 %73, label %74, label %78

74:                                               ; preds = %54
  %75 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %71, i64 0, i32 0
  %76 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %65, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %75, i8* align 2 %76, i64 %68, i1 false) #10
  %77 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %64, align 8
  br label %78

78:                                               ; preds = %54, %74
  %79 = phi %"struct.jxl::HuffmanCode"* [ %65, %54 ], [ %77, %74 ]
  store i64 %72, i64* %29, align 8
  store i64 %63, i64* %7, align 8
  store i64 %62, i64* %4, align 8
  %80 = icmp eq %"struct.jxl::HuffmanCode"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %79, i64 0, i32 0
  tail call void @_ZdlPv(i8* %82) #12
  br label %83

83:                                               ; preds = %81, %78, %26
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.32"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #10
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #12
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16HybridUintConfigENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.11"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::HybridUintConfig"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::HybridUintConfig"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %56, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::HybridUintConfig"*
  %14 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %54, label %16

16:                                               ; preds = %12
  %17 = shl nsw i64 %1, 4
  %18 = add i64 %17, -16
  %19 = lshr exact i64 %18, 4
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 7
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %16, %23
  %24 = phi %"struct.jxl::HybridUintConfig"* [ %27, %23 ], [ %13, %16 ]
  %25 = phi i64 [ %28, %23 ], [ %21, %16 ]
  %26 = bitcast %"struct.jxl::HybridUintConfig"* %24 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %26, align 4
  %27 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %24, i64 1
  %28 = add i64 %25, -1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %23, !llvm.loop !29

30:                                               ; preds = %23, %16
  %31 = phi %"struct.jxl::HybridUintConfig"* [ %13, %16 ], [ %27, %23 ]
  %32 = icmp ult i64 %18, 112
  br i1 %32, label %33, label %35

33:                                               ; preds = %35, %30
  %34 = ptrtoint %"struct.jxl::HybridUintConfig"* %14 to i64
  br label %54

35:                                               ; preds = %30, %35
  %36 = phi %"struct.jxl::HybridUintConfig"* [ %52, %35 ], [ %31, %30 ]
  %37 = bitcast %"struct.jxl::HybridUintConfig"* %36 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %37, align 4
  %38 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 1
  %39 = bitcast %"struct.jxl::HybridUintConfig"* %38 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %39, align 4
  %40 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 2
  %41 = bitcast %"struct.jxl::HybridUintConfig"* %40 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %41, align 4
  %42 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 3
  %43 = bitcast %"struct.jxl::HybridUintConfig"* %42 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %43, align 4
  %44 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 4
  %45 = bitcast %"struct.jxl::HybridUintConfig"* %44 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 5
  %47 = bitcast %"struct.jxl::HybridUintConfig"* %46 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %47, align 4
  %48 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 6
  %49 = bitcast %"struct.jxl::HybridUintConfig"* %48 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %49, align 4
  %50 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 7
  %51 = bitcast %"struct.jxl::HybridUintConfig"* %50 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %51, align 4
  %52 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %36, i64 8
  %53 = icmp eq %"struct.jxl::HybridUintConfig"* %52, %14
  br i1 %53, label %33, label %35

54:                                               ; preds = %12, %33
  %55 = phi i64 [ %34, %33 ], [ %8, %12 ]
  store i64 %55, i64* %7, align 8
  br label %145

56:                                               ; preds = %2
  %57 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %8, %58
  %60 = ashr exact i64 %59, 4
  %61 = add i64 %60, %1
  %62 = icmp ugt i64 %61, 1152921504606846975
  br i1 %62, label %63, label %65

63:                                               ; preds = %56
  %64 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %64) #11
  unreachable

65:                                               ; preds = %56
  %66 = sub i64 %5, %58
  %67 = ashr exact i64 %66, 4
  %68 = icmp ult i64 %67, 576460752303423487
  br i1 %68, label %69, label %77

69:                                               ; preds = %65
  %70 = ashr exact i64 %66, 3
  %71 = icmp ult i64 %70, %61
  %72 = select i1 %71, i64 %61, i64 %70
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %82, label %74

74:                                               ; preds = %69
  %75 = icmp ugt i64 %72, 1152921504606846975
  br i1 %75, label %76, label %77

76:                                               ; preds = %74
  tail call void @abort() #11
  unreachable

77:                                               ; preds = %65, %74
  %78 = phi i64 [ %72, %74 ], [ 1152921504606846975, %65 ]
  %79 = shl i64 %78, 4
  %80 = tail call i8* @_Znwm(i64 %79) #12
  %81 = bitcast i8* %80 to %"struct.jxl::HybridUintConfig"*
  br label %82

82:                                               ; preds = %69, %77
  %83 = phi i64 [ %78, %77 ], [ 0, %69 ]
  %84 = phi %"struct.jxl::HybridUintConfig"* [ %81, %77 ], [ null, %69 ]
  %85 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %84, i64 %60
  %86 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %84, i64 %83
  %87 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %85, i64 %1
  %88 = shl nsw i64 %1, 4
  %89 = add i64 %88, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 7
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %101, label %94

94:                                               ; preds = %82, %94
  %95 = phi %"struct.jxl::HybridUintConfig"* [ %98, %94 ], [ %85, %82 ]
  %96 = phi i64 [ %99, %94 ], [ %92, %82 ]
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %95 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %97, align 4
  %98 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %95, i64 1
  %99 = add i64 %96, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %94, !llvm.loop !30

101:                                              ; preds = %94, %82
  %102 = phi %"struct.jxl::HybridUintConfig"* [ %85, %82 ], [ %98, %94 ]
  %103 = icmp ult i64 %89, 112
  br i1 %103, label %123, label %104

104:                                              ; preds = %101, %104
  %105 = phi %"struct.jxl::HybridUintConfig"* [ %121, %104 ], [ %102, %101 ]
  %106 = bitcast %"struct.jxl::HybridUintConfig"* %105 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %106, align 4
  %107 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 1
  %108 = bitcast %"struct.jxl::HybridUintConfig"* %107 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %108, align 4
  %109 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 2
  %110 = bitcast %"struct.jxl::HybridUintConfig"* %109 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 3
  %112 = bitcast %"struct.jxl::HybridUintConfig"* %111 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %112, align 4
  %113 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 4
  %114 = bitcast %"struct.jxl::HybridUintConfig"* %113 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %114, align 4
  %115 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 5
  %116 = bitcast %"struct.jxl::HybridUintConfig"* %115 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %116, align 4
  %117 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 6
  %118 = bitcast %"struct.jxl::HybridUintConfig"* %117 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %118, align 4
  %119 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 7
  %120 = bitcast %"struct.jxl::HybridUintConfig"* %119 to <4 x i32>*
  store <4 x i32> <i32 4, i32 16, i32 2, i32 0>, <4 x i32>* %120, align 4
  %121 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %105, i64 8
  %122 = icmp eq %"struct.jxl::HybridUintConfig"* %87, %121
  br i1 %122, label %123, label %104

123:                                              ; preds = %104, %101
  %124 = ptrtoint %"struct.jxl::HybridUintConfig"* %86 to i64
  %125 = ptrtoint %"struct.jxl::HybridUintConfig"* %87 to i64
  %126 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %127 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %126, align 8
  %128 = load i64, i64* %7, align 8
  %129 = ptrtoint %"struct.jxl::HybridUintConfig"* %127 to i64
  %130 = sub i64 %128, %129
  %131 = ashr exact i64 %130, 4
  %132 = sub nsw i64 0, %131
  %133 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %85, i64 %132
  %134 = ptrtoint %"struct.jxl::HybridUintConfig"* %133 to i64
  %135 = icmp sgt i64 %130, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %123
  %137 = bitcast %"struct.jxl::HybridUintConfig"* %133 to i8*
  %138 = bitcast %"struct.jxl::HybridUintConfig"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %137, i8* align 4 %138, i64 %130, i1 false) #10
  %139 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %126, align 8
  br label %140

140:                                              ; preds = %123, %136
  %141 = phi %"struct.jxl::HybridUintConfig"* [ %127, %123 ], [ %139, %136 ]
  store i64 %134, i64* %57, align 8
  store i64 %125, i64* %7, align 8
  store i64 %124, i64* %4, align 8
  %142 = icmp eq %"struct.jxl::HybridUintConfig"* %141, null
  br i1 %142, label %145, label %143

143:                                              ; preds = %140
  %144 = bitcast %"struct.jxl::HybridUintConfig"* %141 to i8*
  tail call void @_ZdlPv(i8* %144) #12
  br label %145

145:                                              ; preds = %143, %140, %54
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i64 0, i64 65}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!10 = distinct !{!10, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !19}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !19}
!27 = distinct !{!27, !12}
!28 = distinct !{!28, !19}
!29 = distinct !{!29, !12}
!30 = distinct !{!30, !12}
