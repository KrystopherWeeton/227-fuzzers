; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/vp8_cx_iface.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/vp8_cx_iface.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_codec_iface = type { i8*, i32, i64, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)*, i32 (%struct.vpx_codec_alg_priv*)*, %struct.vpx_codec_ctrl_fn_map*, %struct.vpx_codec_dec_iface, %struct.vpx_codec_enc_iface }
%struct.vpx_codec_ctx = type { i8*, %struct.vpx_codec_iface*, i32, i8*, i64, %union.anon, %struct.vpx_codec_priv* }
%union.anon = type { %struct.vpx_codec_dec_cfg* }
%struct.vpx_codec_dec_cfg = type { i32, i32, i32 }
%struct.vpx_codec_priv = type { i8*, i64, %struct.anon, %struct.anon.1 }
%struct.anon = type { %struct.vpx_codec_priv_cb_pair, %struct.vpx_codec_priv_cb_pair }
%struct.vpx_codec_priv_cb_pair = type { %union.anon.0, i8* }
%union.anon.0 = type { void (i8*, %struct.vpx_image*)* }
%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }
%struct.anon.1 = type { %struct.vpx_fixed_buf, i32, i32, %struct.vpx_codec_cx_pkt, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.2 }
%union.anon.2 = type { %struct.anon.3, [40 x i8] }
%struct.anon.3 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.vpx_codec_priv_enc_mr_cfg = type { i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_codec_alg_priv = type { %struct.vpx_codec_priv, %struct.vpx_codec_enc_cfg, %struct.vp8_extracfg, %struct.vpx_rational64, i64, i8, %struct.VP8_CONFIG, %struct.VP8_COMP*, i8*, i32, %struct.vpx_image, i32, %struct.vp8_postproc_cfg, %union.anon.5, i32, i64 }
%struct.vpx_codec_enc_cfg = type { i32, i32, i32, i32, i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32], [5 x i32], i32, [5 x i32], [5 x i32], i32, [16 x i32], [12 x i32], i32 }
%struct.vp8_extracfg = type { %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_rational64 = type { i64, i32 }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon.4] }
%struct.anon.4 = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.vp8_postproc_cfg = type { i32, i32, i32 }
%union.anon.5 = type { %struct.anon.6 }
%struct.anon.6 = type { %struct.vpx_codec_pkt_list, [64 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_ctrl_fn_map = type { i32, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.vpx_codec_dec_iface = type { i32 (i8*, i32, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_stream_info*)*, i32 (%struct.vpx_codec_alg_priv*, i8*, i32, i8*, i64)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i8*)* }
%struct.vpx_codec_stream_info = type { i32, i32, i32, i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.vpx_codec_enc_iface = type { i32, %struct.vpx_codec_enc_cfg_map*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)*, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)*, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)*, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)*, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)*, i32 (%struct.vpx_codec_enc_cfg*, i8**)* }
%struct.vpx_codec_enc_cfg_map = type { i32, %struct.vpx_codec_enc_cfg }
%struct.LOWER_RES_FRAME_INFO = type { i32, i32, i32, double, [4 x i32], i32, i32, i32, %struct.LOWER_RES_MB_INFO* }
%struct.LOWER_RES_MB_INFO = type { i32, i32, %union.int_mv, i32 }
%struct.vp8_ppflags_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_ref_frame = type { i32, %struct.vpx_image }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.vpx_active_map = type { i8*, i32, i32 }
%struct.vpx_scaling_mode = type { i32, i32 }

@vpx_codec_vp8_cx_algo = hidden constant %struct.vpx_codec_iface { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i32 0, i32 0), i32 5, i64 196610, i32 (%struct.vpx_codec_ctx*, %struct.vpx_codec_priv_enc_mr_cfg*)* @vp8e_init, i32 (%struct.vpx_codec_alg_priv*)* @vp8e_destroy, %struct.vpx_codec_ctrl_fn_map* getelementptr inbounds ([25 x %struct.vpx_codec_ctrl_fn_map], [25 x %struct.vpx_codec_ctrl_fn_map]* @vp8e_ctf_maps, i32 0, i32 0), %struct.vpx_codec_dec_iface zeroinitializer, %struct.vpx_codec_enc_iface { i32 1, %struct.vpx_codec_enc_cfg_map* getelementptr inbounds ([1 x %struct.vpx_codec_enc_cfg_map], [1 x %struct.vpx_codec_enc_cfg_map]* @vp8e_usage_cfg_map, i32 0, i32 0), i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_image*, i64, i64, i64, i64)* @vp8e_encode, %struct.vpx_codec_cx_pkt* (%struct.vpx_codec_alg_priv*, i8**)* @vp8e_get_cxdata, i32 (%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg*)* @vp8e_set_config, %struct.vpx_fixed_buf* (%struct.vpx_codec_alg_priv*)* null, %struct.vpx_image* (%struct.vpx_codec_alg_priv*)* @vp8e_get_preview, i32 (%struct.vpx_codec_enc_cfg*, i8**)* @vp8e_mr_alloc_mem } }, align 8
@.str = private unnamed_addr constant [47 x i8] c"WebM Project VP8 Encoder v1.9.0-147-g61edec1ef\00", align 1
@vp8e_ctf_maps = internal constant [25 x %struct.vpx_codec_ctrl_fn_map] [%struct.vpx_codec_ctrl_fn_map { i32 1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_reference }, %struct.vpx_codec_ctrl_fn_map { i32 2, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_get_reference }, %struct.vpx_codec_ctrl_fn_map { i32 3, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_previewpp }, %struct.vpx_codec_ctrl_fn_map { i32 27, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_frame_flags }, %struct.vpx_codec_ctrl_fn_map { i32 30, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_temporal_layer_id }, %struct.vpx_codec_ctrl_fn_map { i32 8, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_roi_map }, %struct.vpx_codec_ctrl_fn_map { i32 9, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_activemap }, %struct.vpx_codec_ctrl_fn_map { i32 11, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @vp8e_set_scalemode }, %struct.vpx_codec_ctrl_fn_map { i32 13, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_cpu_used }, %struct.vpx_codec_ctrl_fn_map { i32 15, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_noise_sensitivity }, %struct.vpx_codec_ctrl_fn_map { i32 14, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_enable_auto_alt_ref }, %struct.vpx_codec_ctrl_fn_map { i32 16, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_sharpness }, %struct.vpx_codec_ctrl_fn_map { i32 17, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_static_thresh }, %struct.vpx_codec_ctrl_fn_map { i32 18, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_token_partitions }, %struct.vpx_codec_ctrl_fn_map { i32 19, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @get_quantizer }, %struct.vpx_codec_ctrl_fn_map { i32 20, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @get_quantizer64 }, %struct.vpx_codec_ctrl_fn_map { i32 21, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_arnr_max_frames }, %struct.vpx_codec_ctrl_fn_map { i32 22, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_arnr_strength }, %struct.vpx_codec_ctrl_fn_map { i32 23, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_arnr_type }, %struct.vpx_codec_ctrl_fn_map { i32 24, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_tuning }, %struct.vpx_codec_ctrl_fn_map { i32 25, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_cq_level }, %struct.vpx_codec_ctrl_fn_map { i32 26, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_rc_max_intra_bitrate_pct }, %struct.vpx_codec_ctrl_fn_map { i32 31, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @set_screen_content_mode }, %struct.vpx_codec_ctrl_fn_map { i32 58, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* @ctrl_set_rc_gf_cbr_boost_pct }, %struct.vpx_codec_ctrl_fn_map { i32 -1, i32 (%struct.vpx_codec_alg_priv*, %struct.__va_list_tag*)* null }], align 16
@vp8e_usage_cfg_map = internal constant [1 x %struct.vpx_codec_enc_cfg_map] [%struct.vpx_codec_enc_cfg_map { i32 0, %struct.vpx_codec_enc_cfg { i32 0, i32 0, i32 0, i32 320, i32 240, i32 8, i32 8, %struct.vpx_rational { i32 1, i32 30 }, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 60, i32 30, i32 0, %struct.vpx_fixed_buf zeroinitializer, %struct.vpx_fixed_buf zeroinitializer, i32 256, i32 4, i32 63, i32 100, i32 100, i32 6000, i32 4000, i32 5000, i32 50, i32 0, i32 400, i32 0, i32 1, i32 0, i32 128, i32 1, [5 x i32] zeroinitializer, [5 x i32] zeroinitializer, i32 1, [5 x i32] zeroinitializer, [5 x i32] zeroinitializer, i32 0, [16 x i32] zeroinitializer, [12 x i32] zeroinitializer, i32 0 } }], align 16
@default_extracfg = internal unnamed_addr constant %struct.vp8_extracfg { %struct.vpx_codec_pkt_list* null, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 0, i32 10, i32 0, i32 0, i32 0 }, align 8
@once.lock = internal global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"g_w out of range [1..16383]\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"g_h out of range [1..16383]\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"g_timebase.den out of range [1..1000000000]\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"g_timebase.num out of range [1..1000000000]\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"g_profile out of range [..3]\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"rc_max_quantizer out of range [..63]\00", align 1
@.str.7 = private unnamed_addr constant [56 x i8] c"rc_min_quantizer out of range [..cfg->rc_max_quantizer]\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"g_threads out of range [..64]\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"g_lag_in_frames out of range [..0]\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c"rc_end_usage out of range [VPX_VBR..VPX_Q]\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"rc_undershoot_pct out of range [..1000]\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"rc_overshoot_pct out of range [..1000]\00", align 1
@.str.13 = private unnamed_addr constant [43 x i8] c"rc_2pass_vbr_bias_pct out of range [..100]\00", align 1
@.str.14 = private unnamed_addr constant [52 x i8] c"kf_mode out of range [VPX_KF_DISABLED..VPX_KF_AUTO]\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"rc_resize_allowed out of range [..0]\00", align 1
@.str.16 = private unnamed_addr constant [41 x i8] c"rc_dropframe_thresh out of range [..100]\00", align 1
@.str.17 = private unnamed_addr constant [41 x i8] c"rc_resize_up_thresh out of range [..100]\00", align 1
@.str.18 = private unnamed_addr constant [43 x i8] c"rc_resize_down_thresh out of range [..100]\00", align 1
@.str.19 = private unnamed_addr constant [55 x i8] c"g_pass out of range [VPX_RC_ONE_PASS..VPX_RC_ONE_PASS]\00", align 1
@.str.20 = private unnamed_addr constant [70 x i8] c"kf_min_dist not supported in auto mode, use 0 or kf_max_dist instead.\00", align 1
@.str.21 = private unnamed_addr constant [37 x i8] c"enable_auto_alt_ref expected boolean\00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c"cpu_used out of range [-16..16]\00", align 1
@.str.23 = private unnamed_addr constant [37 x i8] c"noise_sensitivity out of range [..6]\00", align 1
@.str.24 = private unnamed_addr constant [81 x i8] c"token_partitions out of range [VP8_ONE_TOKENPARTITION..VP8_EIGHT_TOKENPARTITION]\00", align 1
@.str.25 = private unnamed_addr constant [29 x i8] c"Sharpness out of range [..7]\00", align 1
@.str.26 = private unnamed_addr constant [37 x i8] c"arnr_max_frames out of range [0..15]\00", align 1
@.str.27 = private unnamed_addr constant [33 x i8] c"arnr_strength out of range [..6]\00", align 1
@.str.28 = private unnamed_addr constant [30 x i8] c"arnr_type out of range [1..3]\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"cq_level out of range [0..63]\00", align 1
@.str.30 = private unnamed_addr constant [39 x i8] c"screen_content_mode out of range [..2]\00", align 1
@.str.31 = private unnamed_addr constant [69 x i8] c"cq_level out of range [cfg->rc_min_quantizer..cfg->rc_max_quantizer]\00", align 1
@.str.32 = private unnamed_addr constant [37 x i8] c"ts_number_layers out of range [1..5]\00", align 1
@.str.33 = private unnamed_addr constant [35 x i8] c"ts_periodicity out of range [..16]\00", align 1
@.str.34 = private unnamed_addr constant [54 x i8] c"ts_target_bitrate entries are not strictly increasing\00", align 1
@.str.35 = private unnamed_addr constant [65 x i8] c"ts_rate_decimator[cfg->ts_number_layers - 1] out of range [1..1]\00", align 1
@.str.36 = private unnamed_addr constant [46 x i8] c"ts_rate_decimator factors are not powers of 2\00", align 1
@.str.37 = private unnamed_addr constant [58 x i8] c"ts_layer_id[i] out of range [..cfg->ts_number_layers - 1]\00", align 1
@.str.38 = private unnamed_addr constant [19 x i8] c"Conflicting flags.\00", align 1
@.str.39 = private unnamed_addr constant [68 x i8] c"Invalid image format. Only YV12, I420 and NV12 images are supported\00", align 1
@.str.40 = private unnamed_addr constant [54 x i8] c"Image size must match encoder init configuration size\00", align 1
@.str.41 = private unnamed_addr constant [51 x i8] c"Cannot change width or height after initialization\00", align 1
@.str.42 = private unnamed_addr constant [65 x i8] c"Cannot increase width or height larger than their initial values\00", align 1
@.str.43 = private unnamed_addr constant [30 x i8] c"Cannot increase lag_in_frames\00", align 1
@switch.table.set_vp8e_config = private unnamed_addr constant [3 x i32] [i32 2, i32 3, i32 5], align 4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.vpx_codec_iface* @vpx_codec_vp8_cx() local_unnamed_addr #0 {
  ret %struct.vpx_codec_iface* @vpx_codec_vp8_cx_algo
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_init(%struct.vpx_codec_ctx* nocapture, %struct.vpx_codec_priv_enc_mr_cfg* readonly) #1 {
  tail call void @vp8_rtcd() #8
  tail call void @vpx_dsp_rtcd() #8
  tail call void @vpx_scale_rtcd() #8
  %3 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 6
  %4 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %3, align 8
  %5 = icmp eq %struct.vpx_codec_priv* %4, null
  br i1 %5, label %6, label %97

6:                                                ; preds = %2
  %7 = tail call i8* @vpx_calloc(i64 1, i64 10216) #8
  %8 = bitcast i8* %7 to %struct.vpx_codec_alg_priv*
  %9 = icmp eq i8* %7, null
  br i1 %9, label %97, label %10

10:                                               ; preds = %6
  %11 = bitcast %struct.vpx_codec_priv** %3 to i8**
  store i8* %7, i8** %11, align 8
  %12 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %struct.vpx_codec_ctx, %struct.vpx_codec_ctx* %0, i64 0, i32 5
  %17 = bitcast %union.anon* %16 to %struct.vpx_codec_enc_cfg**
  %18 = load %struct.vpx_codec_enc_cfg*, %struct.vpx_codec_enc_cfg** %17, align 8
  %19 = icmp eq %struct.vpx_codec_enc_cfg* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds i8, i8* %7, i64 216
  %22 = bitcast %struct.vpx_codec_enc_cfg* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* nonnull align 8 %22, i64 384, i1 false)
  %23 = bitcast %union.anon* %16 to i8**
  store i8* %21, i8** %23, align 8
  br label %24

24:                                               ; preds = %10, %20
  %25 = getelementptr inbounds i8, i8* %7, i64 600
  %26 = bitcast i8* %25 to %struct.vp8_extracfg*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 bitcast (%struct.vp8_extracfg* @default_extracfg to i8*), i64 64, i1 false)
  %27 = getelementptr inbounds i8, i8* %7, i64 1352
  %28 = bitcast i8* %25 to i8**
  store i8* %27, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %7, i64 216
  %30 = bitcast i8* %29 to %struct.vpx_codec_enc_cfg*
  %31 = getelementptr inbounds i8, i8* %7, i64 228
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %7, i64 232
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 8
  %37 = mul i32 %33, 3
  %38 = mul i32 %37, %36
  %39 = and i32 %38, -2
  %40 = getelementptr inbounds i8, i8* %7, i64 1192
  %41 = bitcast i8* %40 to i32*
  %42 = icmp ugt i32 %39, 32768
  %43 = select i1 %42, i32 %39, i32 32768
  store i32 %43, i32* %41, align 8
  %44 = zext i32 %43 to i64
  %45 = tail call noalias i8* @malloc(i64 %44) #8
  %46 = getelementptr inbounds i8, i8* %7, i64 1184
  %47 = bitcast i8* %46 to i8**
  store i8* %45, i8** %47, align 8
  %48 = icmp eq i8* %45, null
  br i1 %48, label %97, label %49

49:                                               ; preds = %24
  %50 = icmp eq %struct.vpx_codec_priv_enc_mr_cfg* %1, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %1, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  br label %54

54:                                               ; preds = %49, %51
  %55 = phi i32 [ %53, %51 ], [ 1, %49 ]
  %56 = load %struct.vpx_codec_priv*, %struct.vpx_codec_priv** %3, align 8
  %57 = getelementptr inbounds %struct.vpx_codec_priv, %struct.vpx_codec_priv* %56, i64 0, i32 3, i32 4
  store i32 %55, i32* %57, align 8
  %58 = tail call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @vp8_initialize_enc) #8
  %59 = tail call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* nonnull %8, %struct.vpx_codec_enc_cfg* %30, %struct.vp8_extracfg* %26, i32 0)
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %97

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %7, i64 688
  store i8 0, i8* %62, align 8
  %63 = getelementptr inbounds i8, i8* %7, i64 244
  %64 = getelementptr inbounds i8, i8* %7, i64 248
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds i8, i8* %7, i64 664
  %68 = getelementptr inbounds i8, i8* %7, i64 672
  %69 = bitcast i8* %68 to i32*
  store i32 %66, i32* %69, align 8
  %70 = bitcast i8* %63 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = bitcast i8* %67 to i64*
  %74 = mul nsw i64 %72, 10000000
  store i64 %74, i64* %73, align 8
  %75 = icmp eq i32 %66, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %61, %76
  %77 = phi i32 [ %81, %76 ], [ %66, %61 ]
  %78 = phi i64 [ %79, %76 ], [ %74, %61 ]
  %79 = sext i32 %77 to i64
  %80 = srem i64 %78, %79
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %76

83:                                               ; preds = %76, %61
  %84 = phi i64 [ %74, %61 ], [ %79, %76 ]
  %85 = trunc i64 %84 to i32
  %86 = shl i64 %84, 32
  %87 = ashr exact i64 %86, 32
  %88 = sdiv i64 %74, %87
  store i64 %88, i64* %73, align 8
  %89 = sdiv i32 %66, %85
  store i32 %89, i32* %69, align 8
  %90 = getelementptr inbounds i8, i8* %7, i64 696
  %91 = bitcast i8* %90 to %struct.VP8_CONFIG*
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %91, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %30, %struct.vp8_extracfg* byval(%struct.vp8_extracfg) align 8 %26, %struct.vpx_codec_priv_enc_mr_cfg* %1)
  %92 = tail call %struct.VP8_COMP* @vp8_create_compressor(%struct.VP8_CONFIG* %91) #8
  %93 = getelementptr inbounds i8, i8* %7, i64 1176
  %94 = bitcast i8* %93 to %struct.VP8_COMP**
  store %struct.VP8_COMP* %92, %struct.VP8_COMP** %94, align 8
  %95 = icmp eq %struct.VP8_COMP* %92, null
  %96 = select i1 %95, i32 2, i32 0
  br label %97

97:                                               ; preds = %54, %83, %2, %6, %24
  %98 = phi i32 [ 2, %24 ], [ 2, %6 ], [ 0, %2 ], [ %96, %83 ], [ %59, %54 ]
  ret i32 %98
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_destroy(%struct.vpx_codec_alg_priv*) #1 {
  %2 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 57
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 58
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %3, -1
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 60
  %12 = bitcast i8** %11 to %struct.LOWER_RES_FRAME_INFO**
  %13 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %12, align 8
  %14 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %13, i64 0, i32 8
  %15 = bitcast %struct.LOWER_RES_MB_INFO** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @free(i8* %16) #8
  %17 = load i8*, i8** %11, align 8
  tail call void @free(i8* %17) #8
  br label %18

18:                                               ; preds = %1, %10, %5
  %19 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %20 = load i8*, i8** %19, align 8
  tail call void @free(i8* %20) #8
  %21 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  tail call void @vp8_remove_compressor(%struct.VP8_COMP** %21) #8
  %22 = bitcast %struct.vpx_codec_alg_priv* %0 to i8*
  tail call void @vpx_free(i8* %22) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_encode(%struct.vpx_codec_alg_priv*, %struct.vpx_image* readonly, i64, i64, i64, i64) #1 {
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.yv12_buffer_config, align 16
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.vpx_codec_cx_pkt, align 8
  %16 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  store volatile i32 -1431655766, i32* %7, align 4
  store volatile i32 0, i32* %7, align 4
  %17 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17)
  store volatile i64 -6148914691236517206, i64* %8, align 8
  store volatile i64 %4, i64* %8, align 8
  %18 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  store volatile i64 -6148914691236517206, i64* %9, align 8
  store volatile i64 %2, i64* %9, align 8
  %19 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 20
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %46

23:                                               ; preds = %6
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %25 = load %struct.VP8_COMP*, %struct.VP8_COMP** %24, align 8
  %26 = icmp eq %struct.VP8_COMP* %25, null
  br i1 %26, label %380, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %25, i64 0, i32 21, i32 57
  %29 = load i32, i32* %28, align 4
  %30 = icmp ugt i32 %29, 1
  br i1 %30, label %31, label %44

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %25, i64 0, i32 21, i32 60
  %33 = bitcast i8** %32 to %struct.LOWER_RES_FRAME_INFO**
  %34 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %33, align 8
  %35 = icmp eq %struct.LOWER_RES_FRAME_INFO* %34, null
  br i1 %35, label %380, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %34, i64 0, i32 6
  store i32 1, i32* %37, align 4
  %38 = load %struct.VP8_COMP*, %struct.VP8_COMP** %24, align 8
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %38, i64 0, i32 21, i32 58
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %34, i64 0, i32 7
  store i32 1, i32* %43, align 8
  br label %44

44:                                               ; preds = %42, %36, %27
  %45 = load volatile i32, i32* %7, align 4
  br label %380

46:                                               ; preds = %6
  %47 = icmp ne %struct.vpx_image* %1, null
  br i1 %47, label %48, label %68

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  switch i32 %50, label %63 [
    i32 769, label %51
    i32 258, label %51
    i32 265, label %51
  ]

51:                                               ; preds = %48, %48, %48
  %52 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %63

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 7
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %66, label %63

63:                                               ; preds = %51, %57, %48
  %64 = phi i8* [ getelementptr inbounds ([68 x i8], [68 x i8]* @.str.39, i64 0, i64 0), %48 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.40, i64 0, i64 0), %57 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @.str.40, i64 0, i64 0), %51 ]
  %65 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %64, i8** %65, align 8
  br label %66

66:                                               ; preds = %63, %57
  %67 = phi i32 [ 0, %57 ], [ 8, %63 ]
  store volatile i32 %67, i32* %7, align 4
  br label %68

68:                                               ; preds = %66, %46
  %69 = load volatile i32, i32* %7, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %73 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %19, %struct.vp8_extracfg* %72, i32 1)
  store volatile i32 %73, i32* %7, align 4
  br label %74

74:                                               ; preds = %68, %71
  %75 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 5
  %76 = load i8, i8* %75, align 8
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  %80 = load i64, i64* %79, align 8
  br label %84

81:                                               ; preds = %74
  %82 = load volatile i64, i64* %9, align 8
  %83 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  store i64 %82, i64* %83, align 8
  store i8 1, i8* %75, align 8
  br label %84

84:                                               ; preds = %78, %81
  %85 = phi i64 [ %80, %78 ], [ %82, %81 ]
  %86 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 4
  %87 = load volatile i64, i64* %9, align 8
  %88 = sub nsw i64 %87, %85
  store volatile i64 %88, i64* %9, align 8
  %89 = icmp eq i64 %5, 1
  br i1 %89, label %97, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 9
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 2
  %94 = select i1 %93, i32 4, i32 0
  %95 = icmp eq i32 %92, 1
  %96 = select i1 %95, i32 3, i32 %94
  br label %97

97:                                               ; preds = %90, %84
  %98 = phi i32 [ 0, %84 ], [ %96, %90 ]
  %99 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6, i32 11
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, %98
  br i1 %101, label %106, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  store i32 %98, i32* %99, align 8
  %104 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %105 = load %struct.VP8_COMP*, %struct.VP8_COMP** %104, align 8
  call void @vp8_change_config(%struct.VP8_COMP* %105, %struct.VP8_CONFIG* %103) #8
  br label %106

106:                                              ; preds = %97, %102
  %107 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13
  %108 = getelementptr inbounds %union.anon.5, %union.anon.5* %107, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %108, align 8
  %109 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  store i32 64, i32* %109, align 4
  %110 = load volatile i64, i64* %8, align 8
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  %113 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 15
  %114 = load i64, i64* %113, align 8
  store volatile i64 %114, i64* %8, align 8
  br label %115

115:                                              ; preds = %106, %112
  %116 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 15
  store i64 0, i64* %116, align 8
  %117 = load volatile i32, i32* %7, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %115
  %120 = load volatile i64, i64* %8, align 8
  %121 = call fastcc i32 @set_reference_and_update(%struct.vpx_codec_alg_priv* %0, i64 %120)
  store volatile i32 %121, i32* %7, align 4
  br label %122

122:                                              ; preds = %115, %119
  %123 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 32
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %140

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 33
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 34
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %128, %130
  br i1 %131, label %132, label %140

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 14
  %134 = load i32, i32* %133, align 8
  %135 = add i32 %134, 1
  store i32 %135, i32* %133, align 8
  %136 = icmp ugt i32 %135, %128
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = load volatile i64, i64* %8, align 8
  %139 = or i64 %138, 1
  store volatile i64 %139, i64* %8, align 8
  store i32 1, i32* %133, align 8
  br label %140

140:                                              ; preds = %132, %137, %126, %122
  %141 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %142 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %142, i64 0, i32 19, i32 0, i32 4, i64 0
  %144 = call i32 @_setjmp(%struct.__jmp_buf_tag* %143) #9
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %149, label %146

146:                                              ; preds = %140
  %147 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %148 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %147, i64 0, i32 19, i32 0, i32 3
  store i32 0, i32* %148, align 8
  call void @vpx_clear_system_state() #8
  br label %380

149:                                              ; preds = %140
  %150 = load volatile i32, i32* %7, align 4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %378

152:                                              ; preds = %149
  %153 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %154 = icmp eq %struct.VP8_COMP* %153, null
  br i1 %154, label %378, label %155

155:                                              ; preds = %152
  %156 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #8
  store i32 -1431655766, i32* %10, align 4
  %157 = bitcast %struct.yv12_buffer_config* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %157) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %157, i8 -86, i64 160, i1 false)
  %158 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %158) #8
  store i64 -6148914691236517206, i64* %12, align 8
  %159 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %159) #8
  store i64 -6148914691236517206, i64* %13, align 8
  %160 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #8
  store i64 -6148914691236517206, i64* %14, align 8
  %161 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 1
  %162 = load i64, i64* %161, align 8
  %163 = and i64 %162, 65536
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %168, label %165

165:                                              ; preds = %155
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %153, i64 0, i32 187
  store i32 1, i32* %166, align 32
  %167 = load i64, i64* %161, align 8
  br label %168

168:                                              ; preds = %155, %165
  %169 = phi i64 [ %162, %155 ], [ %167, %165 ]
  %170 = and i64 %169, 131072
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %175, label %172

172:                                              ; preds = %168
  %173 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %173, i64 0, i32 192
  store i32 1, i32* %174, align 4
  br label %175

175:                                              ; preds = %168, %172
  %176 = load volatile i64, i64* %8, align 8
  %177 = trunc i64 %176 to i32
  %178 = and i32 %177, 1
  store i32 %178, i32* %10, align 4
  %179 = load volatile i64, i64* %9, align 8
  %180 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 3, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = mul nsw i64 %181, %179
  %183 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 3, i32 1
  %184 = load i32, i32* %183, align 8
  %185 = sext i32 %184 to i64
  %186 = sdiv i64 %182, %185
  store i64 %186, i64* %12, align 8
  %187 = load volatile i64, i64* %9, align 8
  %188 = add nsw i64 %187, %3
  %189 = mul nsw i64 %188, %181
  %190 = sdiv i64 %189, %185
  store i64 %190, i64* %13, align 8
  br i1 %47, label %191, label %243

191:                                              ; preds = %175
  %192 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 6
  %193 = bitcast i32* %192 to <2 x i32>*
  %194 = load <2 x i32>, <2 x i32>* %193, align 8
  %195 = shufflevector <2 x i32> %194, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %196 = add <2 x i32> %194, <i32 1, i32 1>
  %197 = lshr <2 x i32> %196, <i32 1, i32 1>
  %198 = shufflevector <2 x i32> %197, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %199 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 12
  %200 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 13
  %201 = bitcast [4 x i8*]* %199 to <2 x i64>*
  %202 = load <2 x i64>, <2 x i64>* %201, align 8
  %203 = bitcast i8** %200 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %203, align 8
  %204 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 12, i64 2
  %205 = bitcast i8** %204 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 15
  %208 = bitcast i8** %207 to i64*
  store i64 %206, i64* %208, align 8
  %209 = bitcast %struct.yv12_buffer_config* %11 to <4 x i32>*
  store <4 x i32> %195, <4 x i32>* %209, align 16
  %210 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 5
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %211, align 4
  %212 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 13, i64 0
  %213 = load i32, i32* %212, align 8
  %214 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 4
  store i32 %213, i32* %214, align 16
  %215 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 13, i64 1
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 9
  store i32 %216, i32* %217, align 4
  %218 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %1, i64 0, i32 3
  %219 = load i32, i32* %218, align 4
  %220 = sub i32 %213, %219
  %221 = lshr i32 %220, 1
  %222 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %11, i64 0, i32 19
  store i32 %221, i32* %222, align 8
  store volatile i32 0, i32* %7, align 4
  %223 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %224 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %225 = load i32, i32* %224, align 8
  %226 = or i32 %225, %178
  %227 = call i32 @vp8_receive_raw_frame(%struct.VP8_COMP* %223, i32 %226, %struct.yv12_buffer_config* nonnull %11, i64 %186, i64 %190) #8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %242, label %229

229:                                              ; preds = %191
  %230 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %231 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %230, i64 0, i32 19, i32 0, i32 0
  %232 = load i32, i32* %231, align 8
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %241, label %234

234:                                              ; preds = %229
  %235 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %230, i64 0, i32 19, i32 0, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = icmp eq i32 %236, 0
  %238 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %230, i64 0, i32 19, i32 0, i32 2, i64 0
  %239 = select i1 %237, i8* null, i8* %238
  %240 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* %239, i8** %240, align 8
  br label %241

241:                                              ; preds = %229, %234
  store volatile i32 %232, i32* %7, align 4
  br label %242

242:                                              ; preds = %191, %241
  store i32 0, i32* %224, align 8
  br label %243

243:                                              ; preds = %242, %175
  %244 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 8
  %245 = load i8*, i8** %244, align 8
  %246 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 9
  %247 = load i32, i32* %246, align 8
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %245, i64 %248
  store i32 0, i32* %10, align 4
  %250 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %251 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %250, i64 0, i32 19, i32 0, i32 3
  store i32 1, i32* %251, align 8
  %252 = load i32, i32* %246, align 8
  %253 = lshr i32 %252, 1
  %254 = icmp ult i32 %247, %253
  br i1 %254, label %377, label %255

255:                                              ; preds = %243
  %256 = xor i1 %47, true
  %257 = zext i1 %256 to i32
  %258 = bitcast %struct.vpx_codec_cx_pkt* %15 to i8*
  %259 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 0
  %260 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 2
  %261 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 3
  %262 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 4
  %263 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 6, i64 0
  %264 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 7, i64 0
  %265 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 8, i64 0
  %266 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 0
  %267 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 1
  %268 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 5
  %269 = getelementptr inbounds %union.anon.5, %union.anon.5* %107, i64 0, i32 0, i32 0
  br label %270

270:                                              ; preds = %255, %369
  %271 = phi i8* [ %245, %255 ], [ %371, %369 ]
  %272 = phi i64 [ %248, %255 ], [ %370, %369 ]
  %273 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %274 = call i32 @vp8_get_compressed_data(%struct.VP8_COMP* %273, i32* nonnull %10, i64* nonnull %14, i8* %271, i8* %249, i64* nonnull %12, i64* nonnull %13, i32 %257) #8
  switch i32 %274, label %275 [
    i32 7, label %376
    i32 -1, label %377
  ]

275:                                              ; preds = %270
  %276 = load i64, i64* %14, align 8
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %369, label %278

278:                                              ; preds = %275
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %258) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %258, i8 -86, i64 136, i1 false)
  %279 = load %struct.VP8_COMP*, %struct.VP8_COMP** %141, align 8
  %280 = load i64, i64* %180, align 8
  %281 = sdiv i64 %280, 2
  %282 = icmp sgt i64 %280, 1
  %283 = zext i1 %282 to i64
  %284 = sub nsw i64 %281, %283
  %285 = load i64, i64* %13, align 8
  %286 = load i64, i64* %12, align 8
  %287 = sub nsw i64 %285, %286
  store i32 0, i32* %259, align 8
  %288 = load i32, i32* %183, align 8
  %289 = sext i32 %288 to i64
  %290 = mul nsw i64 %286, %289
  %291 = add nsw i64 %290, %284
  %292 = sdiv i64 %291, %280
  %293 = load i64, i64* %86, align 8
  %294 = add nsw i64 %293, %292
  store i64 %294, i64* %260, align 8
  %295 = mul nsw i64 %287, %289
  %296 = add nsw i64 %295, %284
  %297 = sdiv i64 %296, %280
  store i64 %297, i64* %261, align 8
  %298 = load i32, i32* %10, align 4
  %299 = shl i32 %298, 16
  store i32 %299, i32* %262, align 8
  %300 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 19, i32 5
  %301 = load i32, i32* %300, align 16
  store i32 %301, i32* %263, align 8
  %302 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 19, i32 6
  %303 = load i32, i32* %302, align 4
  store i32 %303, i32* %264, align 4
  store i8 1, i8* %265, align 8
  %304 = and i32 %298, 1
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %308, label %306

306:                                              ; preds = %278
  %307 = or i32 %299, 1
  store i32 %307, i32* %262, align 8
  br label %308

308:                                              ; preds = %278, %306
  %309 = phi i32 [ %299, %278 ], [ %307, %306 ]
  %310 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 19, i32 24
  %311 = load i32, i32* %310, align 8
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %322

313:                                              ; preds = %308
  %314 = or i32 %309, 4
  store i32 %314, i32* %262, align 8
  %315 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 75
  %316 = load i64, i64* %315, align 8
  %317 = mul nsw i64 %316, %289
  %318 = add nsw i64 %317, %284
  %319 = sdiv i64 %318, %280
  %320 = add i64 %293, 1
  %321 = add i64 %320, %319
  store i64 %321, i64* %260, align 8
  store i64 0, i64* %261, align 8
  br label %322

322:                                              ; preds = %308, %313
  %323 = phi i32 [ %309, %308 ], [ %314, %313 ]
  %324 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 197
  %325 = load i32, i32* %324, align 4
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %329, label %327

327:                                              ; preds = %322
  %328 = or i32 %323, 2
  store i32 %328, i32* %262, align 8
  br label %329

329:                                              ; preds = %322, %327
  %330 = phi i32 [ %323, %322 ], [ %328, %327 ]
  %331 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 192
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %361, label %334

334:                                              ; preds = %329
  %335 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 19, i32 62
  %336 = load i32, i32* %335, align 4
  %337 = shl i32 1, %336
  %338 = or i32 %330, 8
  store i32 %338, i32* %262, align 8
  %339 = icmp eq i32 %336, 31
  br i1 %339, label %366, label %340

340:                                              ; preds = %334
  %341 = zext i32 %337 to i64
  %342 = sext i32 %337 to i64
  br label %343

343:                                              ; preds = %340, %357
  %344 = phi i64 [ 0, %340 ], [ %359, %357 ]
  %345 = phi i8* [ %271, %340 ], [ %350, %357 ]
  %346 = phi i64 [ %272, %340 ], [ %351, %357 ]
  store i8* %345, i8** %266, align 8
  %347 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %279, i64 0, i32 170, i64 %344
  %348 = load i32, i32* %347, align 4
  %349 = zext i32 %348 to i64
  %350 = getelementptr inbounds i8, i8* %345, i64 %349
  %351 = sub i64 %346, %349
  store i64 %349, i64* %267, align 8
  %352 = trunc i64 %344 to i32
  store i32 %352, i32* %268, align 4
  %353 = icmp eq i64 %344, %341
  br i1 %353, label %354, label %357

354:                                              ; preds = %343
  %355 = load i32, i32* %262, align 8
  %356 = and i32 %355, -9
  store i32 %356, i32* %262, align 8
  br label %357

357:                                              ; preds = %354, %343
  %358 = call i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list* %269, %struct.vpx_codec_cx_pkt* nonnull %15) #8
  %359 = add nuw nsw i64 %344, 1
  %360 = icmp slt i64 %344, %342
  br i1 %360, label %343, label %366

361:                                              ; preds = %329
  store i8* %271, i8** %266, align 8
  store i64 %276, i64* %267, align 8
  store i32 -1, i32* %268, align 4
  %362 = call i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list* %269, %struct.vpx_codec_cx_pkt* nonnull %15) #8
  %363 = load i64, i64* %14, align 8
  %364 = getelementptr inbounds i8, i8* %271, i64 %363
  %365 = sub i64 %272, %363
  br label %366

366:                                              ; preds = %357, %334, %361
  %367 = phi i64 [ %365, %361 ], [ %272, %334 ], [ %351, %357 ]
  %368 = phi i8* [ %364, %361 ], [ %271, %334 ], [ %350, %357 ]
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %258) #8
  br label %369

369:                                              ; preds = %275, %366
  %370 = phi i64 [ %367, %366 ], [ %272, %275 ]
  %371 = phi i8* [ %368, %366 ], [ %271, %275 ]
  %372 = load i32, i32* %246, align 8
  %373 = lshr i32 %372, 1
  %374 = zext i32 %373 to i64
  %375 = icmp ult i64 %370, %374
  br i1 %375, label %377, label %270

376:                                              ; preds = %270
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %159) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %158) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %157) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #8
  br label %380

377:                                              ; preds = %270, %369, %243
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %159) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %158) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %157) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #8
  br label %378

378:                                              ; preds = %377, %152, %149
  %379 = load volatile i32, i32* %7, align 4
  br label %380

380:                                              ; preds = %31, %376, %23, %378, %146, %44
  %381 = phi i32 [ 7, %146 ], [ %379, %378 ], [ 7, %376 ], [ %45, %44 ], [ 1, %23 ], [ 1, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  ret i32 %381
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.vpx_codec_cx_pkt* @vp8e_get_cxdata(%struct.vpx_codec_alg_priv*, i8**) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 13, i32 0, i32 0
  %4 = tail call %struct.vpx_codec_cx_pkt* @vpx_codec_pkt_list_get(%struct.vpx_codec_pkt_list* %3, i8** %1) #8
  ret %struct.vpx_codec_cx_pkt* %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_config(%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg* readonly) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %4, %7
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %17 = load i32, i32* %16, align 4
  br label %46

18:                                               ; preds = %9, %2
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %20 = load i32, i32* %19, align 4
  %21 = icmp ugt i32 %20, 1
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41, i64 0, i64 0), i8** %27, align 8
  br label %63

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %30 = load %struct.VP8_COMP*, %struct.VP8_COMP** %29, align 8
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %30, i64 0, i32 198
  %32 = load i32, i32* %31, align 32
  %33 = icmp ne i32 %32, 0
  %34 = icmp sgt i32 %4, %32
  %35 = and i1 %33, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %30, i64 0, i32 199
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = icmp sgt i32 %42, %38
  br i1 %43, label %44, label %46

44:                                               ; preds = %28, %40
  %45 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.42, i64 0, i64 0), i8** %45, align 8
  br label %63

46:                                               ; preds = %15, %36, %40
  %47 = phi i32 [ %17, %15 ], [ %20, %36 ], [ %20, %40 ]
  %48 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 10
  %49 = load i32, i32* %48, align 4
  %50 = icmp ugt i32 %47, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.43, i64 0, i64 0), i8** %52, align 8
  br label %63

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %55 = tail call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %1, %struct.vp8_extracfg* %54, i32 0)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = bitcast %struct.vpx_codec_enc_cfg* %5 to i8*
  %59 = bitcast %struct.vpx_codec_enc_cfg* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 384, i1 false)
  %60 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %60, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %1, %struct.vp8_extracfg* byval(%struct.vp8_extracfg) align 8 %54, %struct.vpx_codec_priv_enc_mr_cfg* null)
  %61 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %62 = load %struct.VP8_COMP*, %struct.VP8_COMP** %61, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %62, %struct.VP8_CONFIG* %60) #8
  br label %63

63:                                               ; preds = %57, %53, %51, %44, %26
  %64 = phi i32 [ 8, %26 ], [ 8, %44 ], [ 8, %51 ], [ %55, %53 ], [ 0, %57 ]
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.vpx_image* @vp8e_get_preview(%struct.vpx_codec_alg_priv*) #1 {
  %2 = alloca %struct.yv12_buffer_config, align 8
  %3 = alloca %struct.vp8_ppflags_t, align 4
  %4 = bitcast %struct.yv12_buffer_config* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 160, i1 false)
  %5 = bitcast %struct.vp8_ppflags_t* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %5, i8 0, i64 28, i1 false)
  %6 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %3, i64 0, i32 0
  %11 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %3, i64 0, i32 2
  %12 = getelementptr inbounds %struct.vp8_ppflags_t, %struct.vp8_ppflags_t* %3, i64 0, i32 1
  store i32 %7, i32* %10, align 4
  %13 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12, i32 1
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %12, align 4
  %15 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12, i32 2
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %11, align 4
  br label %17

17:                                               ; preds = %1, %9
  %18 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %19 = load %struct.VP8_COMP*, %struct.VP8_COMP** %18, align 8
  %20 = call i32 @vp8_get_preview_raw_frame(%struct.VP8_COMP* %19, %struct.yv12_buffer_config* nonnull %2, %struct.vp8_ppflags_t* nonnull %3) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %53

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 14
  store i32 12, i32* %24, align 8
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 12
  %27 = bitcast i8** %25 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = bitcast [4 x i8*]* %26 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %29, align 8
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 12, i64 2
  %34 = bitcast i8** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %23, i64 0, i32 0
  store i32 258, i32* %35, align 8
  %36 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 10
  store i32 1, i32* %36, align 8
  %37 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 11
  store i32 1, i32* %37, align 4
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 6
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 7
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 13, i64 0
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 13, i64 1
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 13, i64 2
  store i32 %48, i32* %50, align 8
  %51 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 3
  store i32 %39, i32* %51, align 4
  %52 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 10, i32 4
  store i32 %42, i32* %52, align 8
  br label %53

53:                                               ; preds = %17, %22
  %54 = phi %struct.vpx_image* [ %23, %22 ], [ null, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %4) #8
  ret %struct.vpx_image* %54
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_mr_alloc_mem(%struct.vpx_codec_enc_cfg* nocapture readonly, i8** nocapture) #1 {
  %3 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %0, i64 0, i32 3
  %4 = bitcast i32* %3 to <2 x i32>*
  %5 = load <2 x i32>, <2 x i32>* %4, align 4
  %6 = tail call noalias i8* @calloc(i64 1, i64 64) #8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %2
  %9 = add <2 x i32> %5, <i32 15, i32 15>
  %10 = lshr <2 x i32> %9, <i32 4, i32 4>
  %11 = extractelement <2 x i32> %10, i32 0
  %12 = extractelement <2 x i32> %10, i32 1
  %13 = mul nsw i32 %12, %11
  %14 = zext i32 %13 to i64
  %15 = tail call noalias i8* @calloc(i64 %14, i64 16) #8
  %16 = getelementptr inbounds i8, i8* %6, i64 56
  %17 = bitcast i8* %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = icmp eq i8* %15, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %8
  tail call void @free(i8* nonnull %6) #8
  br label %21

20:                                               ; preds = %8
  store i8* %6, i8** %1, align 8
  br label %21

21:                                               ; preds = %19, %20, %2
  %22 = phi i32 [ 2, %2 ], [ 0, %20 ], [ 2, %19 ]
  ret i32 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @vp8_rtcd() local_unnamed_addr #3

declare void @vpx_dsp_rtcd() local_unnamed_addr #3

declare void @vpx_scale_rtcd() local_unnamed_addr #3

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @vp8_initialize_enc() #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @validate_config(%struct.vpx_codec_alg_priv*, %struct.vpx_codec_enc_cfg* readonly, %struct.vp8_extracfg* nocapture readonly, i32) unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, -1
  %8 = icmp ult i32 %7, 16383
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8** %10, align 8
  br label %277

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = icmp ult i32 %14, 16383
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8** %17, align 8
  br label %277

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, -1
  %22 = icmp ult i32 %21, 1000000000
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8** %24, align 8
  br label %277

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, -1
  %29 = icmp ult i32 %28, 1000000000
  br i1 %29, label %32, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8** %31, align 8
  br label %277

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = icmp ult i32 %34, 4
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8** %37, align 8
  br label %277

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 22
  %40 = load i32, i32* %39, align 8
  %41 = icmp ult i32 %40, 64
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8** %43, align 8
  br label %277

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 21
  %46 = load i32, i32* %45, align 4
  %47 = icmp ugt i32 %46, %40
  br i1 %47, label %48, label %50

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.7, i64 0, i64 0), i8** %49, align 8
  br label %277

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp ult i32 %52, 65
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i8** %55, align 8
  br label %277

56:                                               ; preds = %50
  %57 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0), i8** %61, align 8
  br label %277

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 17
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 %64, 4
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0), i8** %67, align 8
  br label %277

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 23
  %70 = load i32, i32* %69, align 4
  %71 = icmp ult i32 %70, 1001
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0), i8** %73, align 8
  br label %277

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 24
  %76 = load i32, i32* %75, align 8
  %77 = icmp ult i32 %76, 1001
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0), i8** %79, align 8
  br label %277

80:                                               ; preds = %74
  %81 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 28
  %82 = load i32, i32* %81, align 8
  %83 = icmp ult i32 %82, 101
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.13, i64 0, i64 0), i8** %85, align 8
  br label %277

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 32
  %88 = load i32, i32* %87, align 8
  %89 = icmp ult i32 %88, 2
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14, i64 0, i64 0), i8** %91, align 8
  br label %277

92:                                               ; preds = %86
  %93 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 3, i32 4
  %94 = load i32, i32* %93, align 8
  %95 = icmp ugt i32 %94, 1
  br i1 %95, label %96, label %102

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 12
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %102, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0), i8** %101, align 8
  br label %277

102:                                              ; preds = %92, %96
  %103 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 11
  %104 = load i32, i32* %103, align 8
  %105 = icmp ult i32 %104, 101
  br i1 %105, label %108, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.16, i64 0, i64 0), i8** %107, align 8
  br label %277

108:                                              ; preds = %102
  %109 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 15
  %110 = load i32, i32* %109, align 8
  %111 = icmp ult i32 %110, 101
  br i1 %111, label %114, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.17, i64 0, i64 0), i8** %113, align 8
  br label %277

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 16
  %116 = load i32, i32* %115, align 4
  %117 = icmp ult i32 %116, 101
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.18, i64 0, i64 0), i8** %119, align 8
  br label %277

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i8** %125, align 8
  br label %277

126:                                              ; preds = %120
  %127 = icmp eq i32 %88, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 33
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %130, %132
  %134 = icmp eq i32 %130, 0
  %135 = or i1 %134, %133
  br i1 %135, label %138, label %136

136:                                              ; preds = %128
  %137 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i8** %137, align 8
  br label %277

138:                                              ; preds = %128, %126
  %139 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 2
  %140 = load i32, i32* %139, align 4
  %141 = icmp ne i32 %140, 0
  %142 = zext i1 %141 to i32
  %143 = icmp eq i32 %140, %142
  br i1 %143, label %146, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21, i64 0, i64 0), i8** %145, align 8
  br label %277

146:                                              ; preds = %138
  %147 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 1
  %148 = load i32, i32* %147, align 8
  %149 = add i32 %148, 16
  %150 = icmp ult i32 %149, 33
  br i1 %150, label %153, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0), i8** %152, align 8
  br label %277

153:                                              ; preds = %146
  %154 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 3
  %155 = load i32, i32* %154, align 8
  %156 = icmp ult i32 %155, 7
  br i1 %156, label %159, label %157

157:                                              ; preds = %153
  %158 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.23, i64 0, i64 0), i8** %158, align 8
  br label %277

159:                                              ; preds = %153
  %160 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 6
  %161 = load i32, i32* %160, align 4
  %162 = icmp ult i32 %161, 4
  br i1 %162, label %165, label %163

163:                                              ; preds = %159
  %164 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.24, i64 0, i64 0), i8** %164, align 8
  br label %277

165:                                              ; preds = %159
  %166 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 4
  %167 = load i32, i32* %166, align 4
  %168 = icmp ult i32 %167, 8
  br i1 %168, label %171, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i64 0, i64 0), i8** %170, align 8
  br label %277

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 7
  %173 = load i32, i32* %172, align 8
  %174 = icmp ult i32 %173, 16
  br i1 %174, label %177, label %175

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.26, i64 0, i64 0), i8** %176, align 8
  br label %277

177:                                              ; preds = %171
  %178 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 8
  %179 = load i32, i32* %178, align 4
  %180 = icmp ult i32 %179, 7
  br i1 %180, label %183, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.27, i64 0, i64 0), i8** %182, align 8
  br label %277

183:                                              ; preds = %177
  %184 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 9
  %185 = load i32, i32* %184, align 8
  %186 = add i32 %185, -1
  %187 = icmp ult i32 %186, 3
  br i1 %187, label %190, label %188

188:                                              ; preds = %183
  %189 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.28, i64 0, i64 0), i8** %189, align 8
  br label %277

190:                                              ; preds = %183
  %191 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 11
  %192 = load i32, i32* %191, align 8
  %193 = icmp ult i32 %192, 64
  br i1 %193, label %196, label %194

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0), i8** %195, align 8
  br label %277

196:                                              ; preds = %190
  %197 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 14
  %198 = load i32, i32* %197, align 4
  %199 = icmp ult i32 %198, 3
  br i1 %199, label %202, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.30, i64 0, i64 0), i8** %201, align 8
  br label %277

202:                                              ; preds = %196
  %203 = icmp ne i32 %3, 0
  %204 = and i32 %64, -2
  %205 = icmp eq i32 %204, 2
  %206 = and i1 %203, %205
  br i1 %206, label %207, label %213

207:                                              ; preds = %202
  %208 = icmp ult i32 %192, %46
  %209 = icmp ugt i32 %192, %40
  %210 = or i1 %208, %209
  br i1 %210, label %211, label %213

211:                                              ; preds = %207
  %212 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.31, i64 0, i64 0), i8** %212, align 8
  br label %277

213:                                              ; preds = %207, %202
  %214 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 38
  %215 = load i32, i32* %214, align 8
  %216 = add i32 %215, -1
  %217 = icmp ult i32 %216, 5
  br i1 %217, label %220, label %218

218:                                              ; preds = %213
  %219 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i64 0, i64 0), i8** %219, align 8
  br label %277

220:                                              ; preds = %213
  %221 = icmp ugt i32 %215, 1
  br i1 %221, label %222, label %277

222:                                              ; preds = %220
  %223 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 41
  %224 = load i32, i32* %223, align 4
  %225 = icmp ult i32 %224, 17
  br i1 %225, label %226, label %231

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 20
  %228 = zext i32 %215 to i64
  %229 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 39, i64 0
  %230 = load i32, i32* %229, align 4
  br label %233

231:                                              ; preds = %222
  %232 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.33, i64 0, i64 0), i8** %232, align 8
  br label %277

233:                                              ; preds = %244, %226
  %234 = phi i32 [ %230, %226 ], [ %237, %244 ]
  %235 = phi i64 [ 1, %226 ], [ %245, %244 ]
  %236 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 39, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = icmp ugt i32 %237, %234
  br i1 %238, label %244, label %239

239:                                              ; preds = %233
  %240 = load i32, i32* %227, align 8
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %244, label %242

242:                                              ; preds = %239
  %243 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.34, i64 0, i64 0), i8** %243, align 8
  br label %277

244:                                              ; preds = %239, %233
  %245 = add nuw nsw i64 %235, 1
  %246 = icmp eq i64 %245, %228
  br i1 %246, label %247, label %233

247:                                              ; preds = %244
  %248 = zext i32 %216 to i64
  %249 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %254, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.35, i64 0, i64 0), i8** %253, align 8
  br label %277

254:                                              ; preds = %247
  %255 = add i32 %215, -2
  br label %256

256:                                              ; preds = %259, %254
  %257 = phi i32 [ %255, %254 ], [ %260, %259 ]
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %271, label %259

259:                                              ; preds = %256
  %260 = add i32 %257, -1
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %257 to i64
  %265 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = shl i32 %266, 1
  %268 = icmp eq i32 %263, %267
  br i1 %268, label %256, label %269

269:                                              ; preds = %259
  %270 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.36, i64 0, i64 0), i8** %270, align 8
  br label %277

271:                                              ; preds = %256
  %272 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 42, i64 0
  %273 = load i32, i32* %272, align 4
  %274 = icmp ugt i32 %273, %216
  br i1 %274, label %275, label %277

275:                                              ; preds = %271
  %276 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.37, i64 0, i64 0), i8** %276, align 8
  br label %277

277:                                              ; preds = %220, %271, %231, %252, %275, %269, %242, %218, %211, %200, %194, %188, %181, %175, %169, %163, %157, %151, %144, %136, %124, %118, %112, %106, %100, %90, %84, %78, %72, %66, %60, %54, %48, %42, %36, %30, %23, %16, %9
  %278 = phi i32 [ 8, %136 ], [ 8, %144 ], [ 8, %218 ], [ 8, %211 ], [ 8, %200 ], [ 8, %194 ], [ 8, %188 ], [ 8, %181 ], [ 8, %175 ], [ 8, %169 ], [ 8, %163 ], [ 8, %157 ], [ 8, %151 ], [ 8, %124 ], [ 8, %118 ], [ 8, %112 ], [ 8, %106 ], [ 8, %100 ], [ 8, %90 ], [ 8, %84 ], [ 8, %78 ], [ 8, %72 ], [ 8, %66 ], [ 8, %60 ], [ 8, %54 ], [ 8, %48 ], [ 8, %42 ], [ 8, %36 ], [ 8, %30 ], [ 8, %23 ], [ 8, %16 ], [ 8, %9 ], [ 8, %242 ], [ 8, %269 ], [ 8, %275 ], [ 8, %252 ], [ 8, %231 ], [ 0, %271 ], [ 0, %220 ]
  ret i32 %278
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @set_vp8e_config(%struct.VP8_CONFIG*, %struct.vpx_codec_enc_cfg* readonly byval(%struct.vpx_codec_enc_cfg) align 8, %struct.vp8_extracfg* nocapture readonly byval(%struct.vp8_extracfg) align 8, %struct.vpx_codec_priv_enc_mr_cfg* readonly) unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 42
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 0
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 1
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 2
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 3
  %18 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 7
  %19 = bitcast %struct.vpx_rational* %18 to i64*
  %20 = bitcast %struct.vpx_rational* %17 to i64*
  %21 = load i64, i64* %19, align 4
  store i64 %21, i64* %20, align 4
  %22 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 8
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 45
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 9
  %26 = load i32, i32* %25, align 8
  %27 = icmp ult i32 %26, 3
  br i1 %27, label %28, label %37

28:                                               ; preds = %4
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.set_vp8e_config, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 11
  store i32 %31, i32* %32, align 8
  %33 = load i32, i32* %25, align 8
  %34 = icmp ult i32 %33, 2
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 14
  store i32 0, i32* %36, align 4
  br label %44

37:                                               ; preds = %4, %28
  %38 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 10
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %39, 0
  %41 = zext i1 %40 to i32
  %42 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 14
  store i32 %41, i32* %42, align 4
  %43 = load i32, i32* %38, align 4
  br label %44

44:                                               ; preds = %37, %35
  %45 = phi i32 [ %43, %37 ], [ 0, %35 ]
  %46 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 15
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 11
  %48 = load i32, i32* %47, align 8
  %49 = icmp ne i32 %48, 0
  %50 = zext i1 %49 to i32
  %51 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 32
  store i32 %50, i32* %51, align 4
  %52 = load i32, i32* %47, align 8
  %53 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 33
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 12
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 29
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 15
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 31
  store i32 %58, i32* %59, align 8
  %60 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 16
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 30
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 17
  %64 = load i32, i32* %63, align 8
  %65 = icmp ult i32 %64, 4
  br i1 %65, label %66, label %68

66:                                               ; preds = %44
  %67 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 16
  store i32 %64, i32* %67, align 4
  br label %68

68:                                               ; preds = %44, %66
  %69 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 20
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 4
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 12
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 8
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 13
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 9
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 21
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 27
  store i32 %79, i32* %80, align 8
  %81 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 22
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 26
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 11
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 28
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 25
  store i32 -1, i32* %87, align 8
  %88 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 23
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 17
  store i32 %89, i32* %90, align 8
  %91 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 24
  %92 = load i32, i32* %91, align 8
  %93 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 18
  store i32 %92, i32* %93, align 4
  %94 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 25
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 24
  store i64 %96, i64* %97, align 8
  %98 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 26
  %99 = load i32, i32* %98, align 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 22
  store i64 %100, i64* %101, align 8
  %102 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 27
  %103 = load i32, i32* %102, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 23
  store i64 %104, i64* %105, align 8
  %106 = load i32, i32* %94, align 4
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 21
  store i64 %107, i64* %108, align 8
  %109 = load i32, i32* %98, align 8
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 19
  store i64 %110, i64* %111, align 8
  %112 = load i32, i32* %102, align 4
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 20
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 28
  %116 = load i32, i32* %115, align 8
  %117 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 34
  store i32 %116, i32* %117, align 4
  %118 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 29
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 35
  store i32 %119, i32* %120, align 8
  %121 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 30
  %122 = load i32, i32* %121, align 8
  %123 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 36
  store i32 %122, i32* %123, align 4
  %124 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 32
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %125, 1
  br i1 %126, label %127, label %134

127:                                              ; preds = %68
  %128 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 33
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %131 = load i32, i32* %130, align 8
  %132 = icmp ne i32 %129, %131
  %133 = zext i1 %132 to i32
  br label %134

134:                                              ; preds = %127, %68
  %135 = phi i32 [ 0, %68 ], [ %133, %127 ]
  %136 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 12
  store i32 %135, i32* %136, align 4
  %137 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 34
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 13
  store i32 %138, i32* %139, align 8
  %140 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 38
  %141 = load i32, i32* %140, align 8
  %142 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 52
  store i32 %141, i32* %142, align 4
  %143 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 41
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 55
  store i32 %144, i32* %145, align 8
  %146 = icmp ugt i32 %141, 1
  br i1 %146, label %147, label %160

147:                                              ; preds = %134
  %148 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 53, i64 0
  %149 = bitcast i32* %148 to i8*
  %150 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 39, i64 0
  %151 = bitcast i32* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 4 %151, i64 20, i1 false)
  %152 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 54, i64 0
  %153 = bitcast i32* %152 to i8*
  %154 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 40, i64 0
  %155 = bitcast i32* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %153, i8* align 8 %155, i64 20, i1 false)
  %156 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 56, i64 0
  %157 = bitcast i32* %156 to i8*
  %158 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 42, i64 0
  %159 = bitcast i32* %158 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %157, i8* align 8 %159, i64 64, i1 false)
  br label %160

160:                                              ; preds = %147, %134
  %161 = icmp eq %struct.vpx_codec_priv_enc_mr_cfg* %3, null
  br i1 %161, label %180, label %162

162:                                              ; preds = %160
  %163 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %3, i64 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 57
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %3, i64 0, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 58
  store i32 %167, i32* %168, align 8
  %169 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %3, i64 0, i32 2, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 59, i32 0
  store i32 %170, i32* %171, align 4
  %172 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %3, i64 0, i32 2, i32 1
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 59, i32 1
  store i32 %173, i32* %174, align 4
  %175 = getelementptr inbounds %struct.vpx_codec_priv_enc_mr_cfg, %struct.vpx_codec_priv_enc_mr_cfg* %3, i64 0, i32 3
  %176 = bitcast i8** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 60
  %179 = bitcast i8** %178 to i64*
  store i64 %177, i64* %179, align 8
  br label %180

180:                                              ; preds = %160, %162
  %181 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 1
  %182 = load i32, i32* %181, align 8
  %183 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 7
  store i32 %182, i32* %183, align 8
  %184 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 5
  %185 = load i32, i32* %184, align 8
  %186 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 44
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 2
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 37
  store i32 %188, i32* %189, align 8
  %190 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 3
  %191 = load i32, i32* %190, align 8
  %192 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 5
  store i32 %191, i32* %192, align 8
  %193 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 4
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 6
  store i32 %194, i32* %195, align 4
  %196 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 43
  store i32 %197, i32* %198, align 8
  %199 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 49
  %200 = getelementptr inbounds %struct.vpx_codec_enc_cfg, %struct.vpx_codec_enc_cfg* %1, i64 0, i32 18
  %201 = bitcast %struct.vpx_fixed_buf* %199 to i8*
  %202 = bitcast %struct.vpx_fixed_buf* %200 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 16, i1 false)
  %203 = bitcast %struct.vp8_extracfg* %2 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 50
  %206 = bitcast %struct.vpx_codec_pkt_list** %205 to i64*
  store i64 %204, i64* %206, align 8
  %207 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 7
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 46
  store i32 %208, i32* %209, align 4
  %210 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 8
  %211 = load i32, i32* %210, align 4
  %212 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 47
  store i32 %211, i32* %212, align 8
  %213 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 9
  %214 = load i32, i32* %213, align 8
  %215 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 48
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 10
  %217 = load i32, i32* %216, align 4
  %218 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 51
  store i32 %217, i32* %218, align 8
  %219 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %2, i64 0, i32 14
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 10
  store i32 %220, i32* %221, align 4
  ret void
}

declare %struct.VP8_COMP* @vp8_create_compressor(%struct.VP8_CONFIG*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

declare void @vp8_remove_compressor(%struct.VP8_COMP**) local_unnamed_addr #3

declare void @vpx_free(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 16
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %62, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #8
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 8
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 128, i1 false)
  %26 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 6
  %27 = bitcast i32* %26 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %30 = add <2 x i32> %28, <i32 1, i32 1>
  %31 = lshr <2 x i32> %30, <i32 1, i32 1>
  %32 = shufflevector <2 x i32> %31, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %35 = bitcast [4 x i8*]* %33 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  %38 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12, i64 2
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %42 = bitcast i8** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = bitcast %struct.yv12_buffer_config* %3 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %43, align 16
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  store i32 %47, i32* %48, align 16
  %49 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 9
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %47, %53
  %55 = lshr i32 %54, 1
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %58 = load %struct.VP8_COMP*, %struct.VP8_COMP** %57, align 8
  %59 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = call i32 @vp8_set_reference(%struct.VP8_COMP* %58, i32 %60, %struct.yv12_buffer_config* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #8
  br label %62

62:                                               ; preds = %17, %22
  %63 = phi i32 [ 0, %22 ], [ 8, %17 ]
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_get_reference(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.yv12_buffer_config, align 16
  %4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 41
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %5 to i64
  %11 = getelementptr i8, i8* %9, i64 %10
  %12 = add nuw nsw i32 %5, 8
  store i32 %12, i32* %4, align 8
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr i8, i8* %15, i64 8
  store i8* %16, i8** %14, align 8
  br label %17

17:                                               ; preds = %13, %7
  %18 = phi i8* [ %11, %7 ], [ %15, %13 ]
  %19 = bitcast i8* %18 to %struct.vpx_ref_frame**
  %20 = load %struct.vpx_ref_frame*, %struct.vpx_ref_frame** %19, align 8
  %21 = icmp eq %struct.vpx_ref_frame* %20, null
  br i1 %21, label %62, label %22

22:                                               ; preds = %17
  %23 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %23) #8
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 8
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 128, i1 false)
  %26 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 6
  %27 = bitcast i32* %26 to <2 x i32>*
  %28 = load <2 x i32>, <2 x i32>* %27, align 8
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %30 = add <2 x i32> %28, <i32 1, i32 1>
  %31 = lshr <2 x i32> %30, <i32 1, i32 1>
  %32 = shufflevector <2 x i32> %31, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 13
  %35 = bitcast [4 x i8*]* %33 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = bitcast i8** %34 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  %38 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 12, i64 2
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 15
  %42 = bitcast i8** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = bitcast %struct.yv12_buffer_config* %3 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %43, align 16
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %32, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 0
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  store i32 %47, i32* %48, align 16
  %49 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 13, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 9
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 1, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %47, %53
  %55 = lshr i32 %54, 1
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 19
  store i32 %55, i32* %56, align 8
  %57 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %58 = load %struct.VP8_COMP*, %struct.VP8_COMP** %57, align 8
  %59 = getelementptr inbounds %struct.vpx_ref_frame, %struct.vpx_ref_frame* %20, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = call i32 @vp8_get_reference(%struct.VP8_COMP* %58, i32 %60, %struct.yv12_buffer_config* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %23) #8
  br label %62

62:                                               ; preds = %17, %22
  %63 = phi i32 [ 0, %22 ], [ 8, %17 ]
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_previewpp(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vp8_postproc_cfg**
  %19 = load %struct.vp8_postproc_cfg*, %struct.vp8_postproc_cfg** %18, align 8
  %20 = icmp eq %struct.vp8_postproc_cfg* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 12
  %23 = bitcast %struct.vp8_postproc_cfg* %22 to i8*
  %24 = bitcast %struct.vp8_postproc_cfg* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %24, i64 12, i1 false)
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_frame_flags(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 15
  store i64 %20, i64* %21, align 8
  %22 = tail call fastcc i32 @set_reference_and_update(%struct.vpx_codec_alg_priv* %0, i64 %20)
  ret i32 %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @vp8e_set_temporal_layer_id(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #5 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1, i32 38
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %19, %23
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %27 = load %struct.VP8_COMP*, %struct.VP8_COMP** %26, align 8
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %27, i64 0, i32 147
  store i32 %19, i32* %28, align 4
  br label %29

29:                                               ; preds = %16, %21, %25
  %30 = phi i32 [ 0, %25 ], [ 8, %21 ], [ 8, %16 ]
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_roi_map(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_roi_map**
  %19 = load %struct.vpx_roi_map*, %struct.vpx_roi_map** %18, align 8
  %20 = icmp eq %struct.vpx_roi_map* %19, null
  br i1 %20, label %36, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP8_COMP*, %struct.VP8_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 4, i64 0
  %31 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 5, i64 0
  %32 = getelementptr inbounds %struct.vpx_roi_map, %struct.vpx_roi_map* %19, i64 0, i32 8, i64 0
  %33 = tail call i32 @vp8_set_roimap(%struct.VP8_COMP* %23, i8* %25, i32 %27, i32 %29, i32* %30, i32* %31, i32* %32) #8
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32 0, i32 8
  br label %36

36:                                               ; preds = %16, %21
  %37 = phi i32 [ %35, %21 ], [ 8, %16 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_activemap(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_active_map**
  %19 = load %struct.vpx_active_map*, %struct.vpx_active_map** %18, align 8
  %20 = icmp eq %struct.vpx_active_map* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP8_COMP*, %struct.VP8_COMP** %22, align 8
  %24 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_active_map, %struct.vpx_active_map* %19, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 @vp8_set_active_map(%struct.VP8_COMP* %23, i8* %25, i32 %27, i32 %29) #8
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i32 0, i32 8
  br label %33

33:                                               ; preds = %16, %21
  %34 = phi i32 [ %32, %21 ], [ 8, %16 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp8e_set_scalemode(%struct.vpx_codec_alg_priv* nocapture, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to %struct.vpx_scaling_mode**
  %19 = load %struct.vpx_scaling_mode*, %struct.vpx_scaling_mode** %18, align 8
  %20 = icmp eq %struct.vpx_scaling_mode* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_scaling_mode, %struct.vpx_scaling_mode* %19, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vpx_scaling_mode, %struct.vpx_scaling_mode* %19, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %27 = load %struct.VP8_COMP*, %struct.VP8_COMP** %26, align 8
  %28 = tail call i32 @vp8_set_internal_size(%struct.VP8_COMP* %27, i32 %23, i32 %25) #8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 11
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 1
  store i32 %33, i32* %31, align 8
  br label %34

34:                                               ; preds = %16, %30, %21
  %35 = phi i32 [ 0, %30 ], [ 8, %21 ], [ 8, %16 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_cpu_used(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 1
  %25 = icmp slt i32 %23, 16
  %26 = select i1 %25, i32 %23, i32 16
  %27 = icmp sgt i32 %26, -16
  %28 = select i1 %27, i32 %26, i32 -16
  store i32 %28, i32* %24, align 8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %30 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %29, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %33, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %29, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %34 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %35 = load %struct.VP8_COMP*, %struct.VP8_COMP** %34, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %35, %struct.VP8_CONFIG* %33) #8
  br label %36

36:                                               ; preds = %20, %32
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_noise_sensitivity(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 3
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_enable_auto_alt_ref(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_sharpness(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 4
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_static_thresh(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 5
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_token_partitions(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 6
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @get_quantizer(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP8_COMP*, %struct.VP8_COMP** %22, align 8
  %24 = tail call i32 @vp8_get_quantizer(%struct.VP8_COMP* %23) #8
  store i32 %24, i32* %19, align 4
  br label %25

25:                                               ; preds = %16, %21
  %26 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @get_quantizer64(%struct.vpx_codec_alg_priv* nocapture readonly, %struct.__va_list_tag* nocapture) #1 {
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 41
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = sext i32 %4 to i64
  %10 = getelementptr i8, i8* %8, i64 %9
  %11 = add nuw nsw i32 %4, 8
  store i32 %11, i32* %3, align 8
  br label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr i8, i8* %14, i64 8
  store i8* %15, i8** %13, align 8
  br label %16

16:                                               ; preds = %12, %6
  %17 = phi i8* [ %10, %6 ], [ %14, %12 ]
  %18 = bitcast i8* %17 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %23 = load %struct.VP8_COMP*, %struct.VP8_COMP** %22, align 8
  %24 = tail call i32 @vp8_get_quantizer(%struct.VP8_COMP* %23) #8
  %25 = tail call i32 @vp8_reverse_trans(i32 %24) #8
  store i32 %25, i32* %19, align 4
  br label %26

26:                                               ; preds = %16, %21
  %27 = phi i32 [ 0, %21 ], [ 8, %16 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_arnr_max_frames(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 7
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_arnr_strength(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 8
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_arnr_type(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 9
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_tuning(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 10
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_cq_level(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 11
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_rc_max_intra_bitrate_pct(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 12
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @set_screen_content_mode(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 14
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ctrl_set_rc_gf_cbr_boost_pct(%struct.vpx_codec_alg_priv*, %struct.__va_list_tag* nocapture) #1 {
  %3 = alloca %struct.vp8_extracfg, align 8
  %4 = bitcast %struct.vp8_extracfg* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 2
  %6 = bitcast %struct.vp8_extracfg* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %6, i64 64, i1 false)
  %7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 41
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = add nuw nsw i32 %8, 8
  store i32 %15, i32* %7, align 8
  br label %20

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %17, align 8
  br label %20

20:                                               ; preds = %10, %16
  %21 = phi i8* [ %14, %10 ], [ %18, %16 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.vp8_extracfg, %struct.vp8_extracfg* %3, i64 0, i32 13
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 1
  %26 = call fastcc i32 @validate_config(%struct.vpx_codec_alg_priv* %0, %struct.vpx_codec_enc_cfg* %25, %struct.vp8_extracfg* nonnull %3, i32 0) #8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %32

28:                                               ; preds = %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 8 %4, i64 64, i1 false) #8
  %29 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 6
  tail call fastcc void @set_vp8e_config(%struct.VP8_CONFIG* %29, %struct.vpx_codec_enc_cfg* byval(%struct.vpx_codec_enc_cfg) align 8 %25, %struct.vp8_extracfg* nonnull byval(%struct.vp8_extracfg) align 8 %3, %struct.vpx_codec_priv_enc_mr_cfg* null) #8
  %30 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %31 = load %struct.VP8_COMP*, %struct.VP8_COMP** %30, align 8
  tail call void @vp8_change_config(%struct.VP8_COMP* %31, %struct.VP8_CONFIG* %29) #8
  br label %32

32:                                               ; preds = %20, %28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #8
  ret i32 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @vp8_set_reference(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #3

declare i32 @vp8_get_reference(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @set_reference_and_update(%struct.vpx_codec_alg_priv* nocapture, i64) unnamed_addr #1 {
  %3 = and i64 %1, 4194304
  %4 = icmp ne i64 %3, 0
  %5 = xor i1 %4, true
  %6 = and i64 %1, 524288
  %7 = icmp eq i64 %6, 0
  %8 = or i1 %7, %5
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = and i64 %1, 8388608
  %11 = icmp ne i64 %10, 0
  %12 = xor i1 %11, true
  %13 = and i64 %1, 16777216
  %14 = icmp eq i64 %13, 0
  %15 = or i1 %14, %12
  br i1 %15, label %18, label %16

16:                                               ; preds = %9, %2
  %17 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.38, i64 0, i64 0), i8** %17, align 8
  br label %57

18:                                               ; preds = %9
  %19 = and i64 %1, 2293760
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %18
  %22 = and i64 %1, 65536
  %23 = icmp eq i64 %22, 0
  %24 = select i1 %23, i32 7, i32 6
  %25 = and i64 %1, 131072
  %26 = icmp eq i64 %25, 0
  %27 = and i32 %24, 5
  %28 = select i1 %26, i32 %24, i32 %27
  %29 = and i64 %1, 2097152
  %30 = icmp eq i64 %29, 0
  %31 = and i32 %28, 3
  %32 = select i1 %30, i32 %28, i32 %31
  %33 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %34 = load %struct.VP8_COMP*, %struct.VP8_COMP** %33, align 8
  %35 = tail call i32 @vp8_use_as_reference(%struct.VP8_COMP* %34, i32 %32) #8
  br label %36

36:                                               ; preds = %18, %21
  %37 = and i64 %1, 30146560
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %50, label %39

39:                                               ; preds = %36
  %40 = and i64 %1, 262144
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i32 7, i32 6
  %43 = and i32 %42, 5
  %44 = select i1 %4, i32 %43, i32 %42
  %45 = and i32 %44, 3
  %46 = select i1 %11, i32 %45, i32 %44
  %47 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %48 = load %struct.VP8_COMP*, %struct.VP8_COMP** %47, align 8
  %49 = tail call i32 @vp8_update_reference(%struct.VP8_COMP* %48, i32 %46) #8
  br label %50

50:                                               ; preds = %36, %39
  %51 = and i64 %1, 1048576
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.vpx_codec_alg_priv, %struct.vpx_codec_alg_priv* %0, i64 0, i32 7
  %55 = load %struct.VP8_COMP*, %struct.VP8_COMP** %54, align 8
  %56 = tail call i32 @vp8_update_entropy(%struct.VP8_COMP* %55, i32 0) #8
  br label %57

57:                                               ; preds = %53, %50, %16
  %58 = phi i32 [ 8, %16 ], [ 0, %50 ], [ 0, %53 ]
  ret i32 %58
}

declare i32 @vp8_use_as_reference(%struct.VP8_COMP*, i32) local_unnamed_addr #3

declare i32 @vp8_update_reference(%struct.VP8_COMP*, i32) local_unnamed_addr #3

declare i32 @vp8_update_entropy(%struct.VP8_COMP*, i32) local_unnamed_addr #3

declare i32 @vp8_set_roimap(%struct.VP8_COMP*, i8*, i32, i32, i32*, i32*, i32*) local_unnamed_addr #3

declare i32 @vp8_set_active_map(%struct.VP8_COMP*, i8*, i32, i32) local_unnamed_addr #3

declare i32 @vp8_set_internal_size(%struct.VP8_COMP*, i32, i32) local_unnamed_addr #3

declare void @vp8_change_config(%struct.VP8_COMP*, %struct.VP8_CONFIG*) local_unnamed_addr #3

declare i32 @vp8_get_quantizer(%struct.VP8_COMP*) local_unnamed_addr #3

declare i32 @vp8_reverse_trans(i32) local_unnamed_addr #3

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #7

declare void @vpx_clear_system_state() local_unnamed_addr #3

declare i32 @vp8_receive_raw_frame(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*, i64, i64) local_unnamed_addr #3

declare i32 @vp8_get_compressed_data(%struct.VP8_COMP*, i32*, i64*, i8*, i8*, i64*, i64*, i32) local_unnamed_addr #3

declare i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list*, %struct.vpx_codec_cx_pkt*) local_unnamed_addr #3

declare %struct.vpx_codec_cx_pkt* @vpx_codec_pkt_list_get(%struct.vpx_codec_pkt_list*, i8**) local_unnamed_addr #3

declare i32 @vp8_get_preview_raw_frame(%struct.VP8_COMP*, %struct.yv12_buffer_config*, %struct.vp8_ppflags_t*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #4

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
