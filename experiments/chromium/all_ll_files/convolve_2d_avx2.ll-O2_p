; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/convolve_2d_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/convolve_2d_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_2d_sr_avx2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %12 = alloca [1120 x i16], align 32
  %13 = alloca [1120 x i16], align 32
  %14 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = icmp ugt i16 %15, 8
  br i1 %16, label %17, label %418

17:                                               ; preds = %11
  %18 = bitcast [1120 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2240, i8* nonnull %18) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %18, i8 -86, i64 2240, i1 false)
  %19 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 14, %20
  %22 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %23 = load i32, i32* %22, align 8
  %24 = sub i32 %21, %23
  %25 = sub nsw i32 22, %20
  %26 = shl i32 1, %20
  %27 = ashr i32 %26, 1
  %28 = add nsw i32 %27, 16384
  %29 = insertelement <8 x i32> undef, i32 %28, i32 0
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <8 x i32> zeroinitializer
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %20, i32 0
  %32 = shl i32 1, %25
  %33 = shl i32 1, %23
  %34 = ashr i32 %33, 1
  %35 = add nsw i32 %34, %32
  %36 = insertelement <8 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %23, i32 0
  %39 = shl i32 1, %24
  %40 = ashr i32 %39, 1
  %41 = sub nsw i32 %25, %23
  %42 = shl i32 1, %41
  %43 = sub i32 %40, %42
  %44 = ashr i32 %42, 1
  %45 = sub i32 %43, %44
  %46 = insertelement <8 x i32> undef, i32 %45, i32 0
  %47 = shufflevector <8 x i32> %46, <8 x i32> undef, <8 x i32> zeroinitializer
  %48 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %24, i32 0
  %49 = and i32 %8, 15
  %50 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %51 = load i16*, i16** %50, align 8
  %52 = zext i16 %15 to i32
  %53 = mul nuw nsw i32 %49, %52
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %51, i64 %54
  %56 = bitcast i16* %55 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 1
  %58 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = getelementptr inbounds i16, i16* %55, i64 8
  %61 = bitcast i16* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> zeroinitializer
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = and i32 %9, 15
  %67 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %68 = load i16*, i16** %67, align 8
  %69 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %70 = load i16, i16* %69, align 8
  %71 = zext i16 %70 to i32
  %72 = mul nuw nsw i32 %66, %71
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %68, i64 %73
  %75 = bitcast i16* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 1
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %78 = bitcast <4 x i64> %77 to <8 x i32>
  %79 = getelementptr inbounds i16, i16* %74, i64 8
  %80 = bitcast i16* %79 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> zeroinitializer
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = add i32 %5, 11
  %86 = mul nsw i32 %1, 5
  %87 = sext i32 %86 to i64
  %88 = sub nsw i64 0, %87
  %89 = getelementptr inbounds i8, i8* %0, i64 %88
  %90 = getelementptr inbounds i8, i8* %89, i64 -5
  %91 = icmp sgt i32 %4, 0
  br i1 %91, label %92, label %997

92:                                               ; preds = %17
  %93 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %94 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %95 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %96 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %97 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %98 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %99 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %100 = shufflevector <8 x i32> %84, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %101 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %102 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %103 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %104 = shufflevector <8 x i32> %78, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %105 = icmp slt i32 %4, 5
  %106 = icmp sgt i32 %85, 0
  %107 = bitcast <8 x i32> %98 to <16 x i16>
  %108 = bitcast <8 x i32> %97 to <16 x i16>
  %109 = bitcast <8 x i32> %96 to <16 x i16>
  %110 = bitcast <8 x i32> %95 to <16 x i16>
  %111 = bitcast <8 x i32> %94 to <16 x i16>
  %112 = bitcast <8 x i32> %93 to <16 x i16>
  %113 = icmp sgt i32 %4, 2
  %114 = bitcast [1120 x i16]* %12 to <16 x i16>*
  %115 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 8
  %116 = bitcast i16* %115 to <16 x i16>*
  %117 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 16
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 24
  %120 = bitcast i16* %119 to <16 x i16>*
  %121 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 32
  %122 = bitcast i16* %121 to <16 x i16>*
  %123 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 40
  %124 = bitcast i16* %123 to <16 x i16>*
  %125 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 48
  %126 = bitcast i16* %125 to <16 x i16>*
  %127 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 56
  %128 = bitcast i16* %127 to <16 x i16>*
  %129 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 64
  %130 = bitcast i16* %129 to <16 x i16>*
  %131 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 72
  %132 = bitcast i16* %131 to <16 x i16>*
  %133 = icmp sgt i32 %5, 0
  %134 = bitcast <8 x i32> %104 to <16 x i16>
  %135 = bitcast <8 x i32> %103 to <16 x i16>
  %136 = bitcast <8 x i32> %102 to <16 x i16>
  %137 = bitcast <8 x i32> %101 to <16 x i16>
  %138 = bitcast <8 x i32> %100 to <16 x i16>
  %139 = bitcast <8 x i32> %99 to <16 x i16>
  %140 = icmp eq i32 %4, 4
  %141 = sext i32 %1 to i64
  %142 = sext i32 %85 to i64
  %143 = sext i32 %3 to i64
  %144 = sext i32 %5 to i64
  %145 = sext i32 %4 to i64
  %146 = zext i32 %85 to i64
  br label %147

147:                                              ; preds = %92, %415
  %148 = phi i64 [ 0, %92 ], [ %416, %415 ]
  br i1 %105, label %150, label %149

149:                                              ; preds = %147
  br i1 %106, label %246, label %305

150:                                              ; preds = %147
  br i1 %106, label %151, label %305

151:                                              ; preds = %150, %243
  %152 = phi i64 [ %244, %243 ], [ 0, %150 ]
  %153 = mul nsw i64 %152, %141
  %154 = add nsw i64 %153, %148
  %155 = getelementptr inbounds i8, i8* %90, i64 %154
  %156 = bitcast i8* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 1
  %158 = trunc i64 %154 to i32
  %159 = add i32 %158, %1
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %90, i64 %160
  %162 = bitcast i8* %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 1
  %164 = shufflevector <2 x i64> %157, <2 x i64> %163, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %165 = bitcast <4 x i64> %164 to <32 x i8>
  %166 = shufflevector <32 x i8> %165, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %167 = shufflevector <32 x i8> %165, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %168 = bitcast <32 x i8> %166 to <16 x i16>
  %169 = shufflevector <16 x i16> %168, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11>
  %170 = shufflevector <16 x i16> %168, <16 x i16> undef, <16 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %171 = bitcast <32 x i8> %167 to <16 x i16>
  %172 = shufflevector <16 x i16> %171, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11>
  %173 = shufflevector <16 x i16> %171, <16 x i16> undef, <16 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %174 = bitcast <16 x i16> %170 to <32 x i8>
  %175 = bitcast <16 x i16> %169 to <32 x i8>
  %176 = shufflevector <32 x i8> %175, <32 x i8> %174, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %177 = shufflevector <32 x i8> %175, <32 x i8> %174, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %178 = bitcast <16 x i16> %172 to <32 x i8>
  %179 = shufflevector <32 x i8> %174, <32 x i8> %178, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %180 = shufflevector <32 x i8> %174, <32 x i8> %178, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %181 = bitcast <16 x i16> %173 to <32 x i8>
  %182 = shufflevector <32 x i8> %178, <32 x i8> %181, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %183 = shufflevector <32 x i8> %178, <32 x i8> %181, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %184 = bitcast <32 x i8> %176 to <16 x i16>
  %185 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %184, <16 x i16> %107) #3
  %186 = bitcast <32 x i8> %177 to <16 x i16>
  %187 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %186, <16 x i16> %108) #3
  %188 = bitcast <32 x i8> %179 to <16 x i16>
  %189 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %188, <16 x i16> %109) #3
  %190 = bitcast <32 x i8> %180 to <16 x i16>
  %191 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %190, <16 x i16> %110) #3
  %192 = bitcast <32 x i8> %182 to <16 x i16>
  %193 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %192, <16 x i16> %111) #3
  %194 = bitcast <32 x i8> %183 to <16 x i16>
  %195 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %194, <16 x i16> %112) #3
  %196 = add <8 x i32> %185, %30
  %197 = add <8 x i32> %196, %187
  %198 = add <8 x i32> %197, %189
  %199 = add <8 x i32> %198, %191
  %200 = add <8 x i32> %199, %193
  %201 = add <8 x i32> %200, %195
  %202 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %201, <4 x i32> %31) #3
  %203 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %202, <8 x i32> %202) #3
  %204 = bitcast <16 x i16> %203 to <4 x i64>
  br i1 %113, label %205, label %217

205:                                              ; preds = %151
  %206 = trunc i64 %152 to i32
  %207 = shl nsw i32 %206, 3
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %208
  %210 = extractelement <4 x i64> %204, i32 0
  %211 = bitcast i16* %209 to i64*
  store i64 %210, i64* %211, align 32
  %212 = or i32 %207, 8
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %213
  %215 = extractelement <4 x i64> %204, i32 2
  %216 = bitcast i16* %214 to i64*
  store i64 %215, i64* %216, align 16
  br label %243

217:                                              ; preds = %151
  %218 = shufflevector <4 x i64> %204, <4 x i64> undef, <2 x i32> <i32 2, i32 undef>
  %219 = shufflevector <4 x i64> %204, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %220 = bitcast <2 x i64> %219 to <4 x i32>
  %221 = extractelement <4 x i32> %220, i32 0
  %222 = trunc i32 %221 to i16
  %223 = trunc i64 %152 to i32
  %224 = shl nsw i32 %223, 3
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %225
  store i16 %222, i16* %226, align 32
  %227 = lshr i32 %221, 16
  %228 = trunc i32 %227 to i16
  %229 = or i32 %224, 1
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %230
  store i16 %228, i16* %231, align 2
  %232 = bitcast <2 x i64> %218 to <4 x i32>
  %233 = extractelement <4 x i32> %232, i32 0
  %234 = trunc i32 %233 to i16
  %235 = or i32 %224, 8
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %236
  store i16 %234, i16* %237, align 16
  %238 = lshr i32 %233, 16
  %239 = trunc i32 %238 to i16
  %240 = or i32 %224, 9
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %241
  store i16 %239, i16* %242, align 2
  br label %243

243:                                              ; preds = %217, %205
  %244 = add nuw nsw i64 %152, 2
  %245 = icmp slt i64 %244, %142
  br i1 %245, label %151, label %305

246:                                              ; preds = %149, %246
  %247 = phi i64 [ %303, %246 ], [ 0, %149 ]
  %248 = mul nsw i64 %247, %141
  %249 = add nsw i64 %248, %148
  %250 = getelementptr inbounds i8, i8* %90, i64 %249
  %251 = bitcast i8* %250 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 1
  %253 = add nsw i64 %249, 4
  %254 = getelementptr inbounds i8, i8* %90, i64 %253
  %255 = bitcast i8* %254 to <2 x i64>*
  %256 = load <2 x i64>, <2 x i64>* %255, align 1
  %257 = shufflevector <2 x i64> %252, <2 x i64> %256, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %258 = bitcast <4 x i64> %257 to <32 x i8>
  %259 = shufflevector <32 x i8> %258, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %260 = shufflevector <32 x i8> %258, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %261 = bitcast <32 x i8> %259 to <16 x i16>
  %262 = shufflevector <16 x i16> %261, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11>
  %263 = shufflevector <16 x i16> %261, <16 x i16> undef, <16 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %264 = bitcast <32 x i8> %260 to <16 x i16>
  %265 = shufflevector <16 x i16> %264, <16 x i16> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11>
  %266 = shufflevector <16 x i16> %264, <16 x i16> undef, <16 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15>
  %267 = bitcast <16 x i16> %263 to <32 x i8>
  %268 = bitcast <16 x i16> %262 to <32 x i8>
  %269 = shufflevector <32 x i8> %268, <32 x i8> %267, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %270 = shufflevector <32 x i8> %268, <32 x i8> %267, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %271 = bitcast <16 x i16> %265 to <32 x i8>
  %272 = shufflevector <32 x i8> %267, <32 x i8> %271, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %273 = shufflevector <32 x i8> %267, <32 x i8> %271, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %274 = bitcast <16 x i16> %266 to <32 x i8>
  %275 = shufflevector <32 x i8> %271, <32 x i8> %274, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49>
  %276 = shufflevector <32 x i8> %271, <32 x i8> %274, <32 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57>
  %277 = bitcast <32 x i8> %269 to <16 x i16>
  %278 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %277, <16 x i16> %107) #3
  %279 = bitcast <32 x i8> %270 to <16 x i16>
  %280 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %279, <16 x i16> %108) #3
  %281 = bitcast <32 x i8> %272 to <16 x i16>
  %282 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %281, <16 x i16> %109) #3
  %283 = bitcast <32 x i8> %273 to <16 x i16>
  %284 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %283, <16 x i16> %110) #3
  %285 = bitcast <32 x i8> %275 to <16 x i16>
  %286 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %285, <16 x i16> %111) #3
  %287 = bitcast <32 x i8> %276 to <16 x i16>
  %288 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %287, <16 x i16> %112) #3
  %289 = add <8 x i32> %278, %30
  %290 = add <8 x i32> %289, %280
  %291 = add <8 x i32> %290, %282
  %292 = add <8 x i32> %291, %284
  %293 = add <8 x i32> %292, %286
  %294 = add <8 x i32> %293, %288
  %295 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %294, <4 x i32> %31) #3
  %296 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %295, <8 x i32> undef) #3
  %297 = bitcast <16 x i16> %296 to <4 x i64>
  %298 = shl i64 %247, 3
  %299 = and i64 %298, 4294967288
  %300 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %299
  %301 = bitcast i16* %300 to <2 x i64>*
  %302 = shufflevector <4 x i64> %297, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %302, <2 x i64>* %301, align 16
  %303 = add nuw nsw i64 %247, 1
  %304 = icmp eq i64 %303, %146
  br i1 %304, label %305, label %246

305:                                              ; preds = %246, %243, %149, %150
  %306 = load <16 x i16>, <16 x i16>* %114, align 32
  %307 = load <16 x i16>, <16 x i16>* %116, align 16
  %308 = load <16 x i16>, <16 x i16>* %118, align 32
  %309 = load <16 x i16>, <16 x i16>* %120, align 16
  %310 = load <16 x i16>, <16 x i16>* %122, align 32
  %311 = load <16 x i16>, <16 x i16>* %124, align 16
  %312 = load <16 x i16>, <16 x i16>* %126, align 32
  %313 = load <16 x i16>, <16 x i16>* %128, align 16
  %314 = load <16 x i16>, <16 x i16>* %130, align 32
  %315 = load <16 x i16>, <16 x i16>* %132, align 16
  br i1 %133, label %316, label %415

316:                                              ; preds = %305
  %317 = shufflevector <16 x i16> %314, <16 x i16> %315, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %318 = shufflevector <16 x i16> %312, <16 x i16> %313, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %319 = shufflevector <16 x i16> %310, <16 x i16> %311, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %320 = shufflevector <16 x i16> %308, <16 x i16> %309, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %321 = shufflevector <16 x i16> %306, <16 x i16> %307, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %322 = shufflevector <16 x i16> %314, <16 x i16> %315, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %323 = shufflevector <16 x i16> %312, <16 x i16> %313, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %324 = shufflevector <16 x i16> %310, <16 x i16> %311, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %325 = shufflevector <16 x i16> %308, <16 x i16> %309, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %326 = shufflevector <16 x i16> %306, <16 x i16> %307, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %327 = sub nsw i64 %145, %148
  %328 = icmp sgt i64 %327, 4
  br label %329

329:                                              ; preds = %316, %412
  %330 = phi i64 [ 0, %316 ], [ %413, %412 ]
  %331 = phi <16 x i16> [ %326, %316 ], [ %332, %412 ]
  %332 = phi <16 x i16> [ %325, %316 ], [ %333, %412 ]
  %333 = phi <16 x i16> [ %324, %316 ], [ %334, %412 ]
  %334 = phi <16 x i16> [ %323, %316 ], [ %335, %412 ]
  %335 = phi <16 x i16> [ %322, %316 ], [ %350, %412 ]
  %336 = phi <16 x i16> [ %321, %316 ], [ %337, %412 ]
  %337 = phi <16 x i16> [ %320, %316 ], [ %338, %412 ]
  %338 = phi <16 x i16> [ %319, %316 ], [ %339, %412 ]
  %339 = phi <16 x i16> [ %318, %316 ], [ %340, %412 ]
  %340 = phi <16 x i16> [ %317, %316 ], [ %351, %412 ]
  %341 = shl i64 %330, 3
  %342 = and i64 %341, 4294967280
  %343 = getelementptr inbounds [1120 x i16], [1120 x i16]* %12, i64 0, i64 %342
  %344 = getelementptr inbounds i16, i16* %343, i64 80
  %345 = bitcast i16* %344 to <16 x i16>*
  %346 = load <16 x i16>, <16 x i16>* %345, align 32
  %347 = getelementptr inbounds i16, i16* %343, i64 88
  %348 = bitcast i16* %347 to <16 x i16>*
  %349 = load <16 x i16>, <16 x i16>* %348, align 16
  %350 = shufflevector <16 x i16> %346, <16 x i16> %349, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %351 = shufflevector <16 x i16> %346, <16 x i16> %349, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %352 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %331, <16 x i16> %134) #3
  %353 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %332, <16 x i16> %135) #3
  %354 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %333, <16 x i16> %136) #3
  %355 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %334, <16 x i16> %137) #3
  %356 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %335, <16 x i16> %138) #3
  %357 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %350, <16 x i16> %139) #3
  %358 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %336, <16 x i16> %134) #3
  %359 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %337, <16 x i16> %135) #3
  %360 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %338, <16 x i16> %136) #3
  %361 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %339, <16 x i16> %137) #3
  %362 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %340, <16 x i16> %138) #3
  %363 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %351, <16 x i16> %139) #3
  %364 = add <8 x i32> %352, %37
  %365 = add <8 x i32> %364, %353
  %366 = add <8 x i32> %365, %354
  %367 = add <8 x i32> %366, %355
  %368 = add <8 x i32> %367, %356
  %369 = add <8 x i32> %368, %357
  %370 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %369, <4 x i32> %38) #3
  %371 = add <8 x i32> %358, %37
  %372 = add <8 x i32> %371, %359
  %373 = add <8 x i32> %372, %360
  %374 = add <8 x i32> %373, %361
  %375 = add <8 x i32> %374, %362
  %376 = add <8 x i32> %375, %363
  %377 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %376, <4 x i32> %38) #3
  %378 = add <8 x i32> %370, %47
  %379 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %378, <4 x i32> %48) #3
  %380 = add <8 x i32> %377, %47
  %381 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %380, <4 x i32> %48) #3
  %382 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %379, <8 x i32> %381) #3
  %383 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %382, <16 x i16> %382) #3
  %384 = bitcast <32 x i8> %383 to <4 x i64>
  %385 = shufflevector <4 x i64> %384, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %386 = mul nsw i64 %330, %143
  %387 = add nsw i64 %386, %148
  %388 = getelementptr inbounds i8, i8* %2, i64 %387
  %389 = add nsw i64 %387, %143
  %390 = getelementptr inbounds i8, i8* %2, i64 %389
  br i1 %328, label %391, label %396

391:                                              ; preds = %329
  %392 = extractelement <4 x i64> %384, i32 0
  %393 = bitcast i8* %388 to i64*
  store i64 %392, i64* %393, align 1
  %394 = extractelement <4 x i64> %384, i32 2
  %395 = bitcast i8* %390 to i64*
  store i64 %394, i64* %395, align 1
  br label %412

396:                                              ; preds = %329
  %397 = shufflevector <4 x i64> %384, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %398 = bitcast <2 x i64> %397 to <4 x i32>
  %399 = extractelement <4 x i32> %398, i32 0
  br i1 %140, label %400, label %405

400:                                              ; preds = %396
  %401 = bitcast i8* %388 to i32*
  store i32 %399, i32* %401, align 1
  %402 = bitcast <2 x i64> %385 to <4 x i32>
  %403 = extractelement <4 x i32> %402, i32 0
  %404 = bitcast i8* %390 to i32*
  store i32 %403, i32* %404, align 1
  br label %412

405:                                              ; preds = %396
  %406 = trunc i32 %399 to i16
  %407 = bitcast i8* %388 to i16*
  store i16 %406, i16* %407, align 2
  %408 = bitcast <2 x i64> %385 to <4 x i32>
  %409 = extractelement <4 x i32> %408, i32 0
  %410 = trunc i32 %409 to i16
  %411 = bitcast i8* %390 to i16*
  store i16 %410, i16* %411, align 2
  br label %412

412:                                              ; preds = %400, %405, %391
  %413 = add nuw nsw i64 %330, 2
  %414 = icmp slt i64 %413, %144
  br i1 %414, label %329, label %415

415:                                              ; preds = %412, %305
  %416 = add nuw nsw i64 %148, 8
  %417 = icmp slt i64 %416, %145
  br i1 %417, label %147, label %997

418:                                              ; preds = %11
  %419 = bitcast [1120 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2240, i8* nonnull %419) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %419, i8 -86, i64 2240, i1 false)
  %420 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %421 = load i32, i32* %420, align 4
  %422 = sub nsw i32 14, %421
  %423 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %424 = load i32, i32* %423, align 8
  %425 = sub i32 %422, %424
  %426 = sub nsw i32 22, %421
  %427 = add nsw i32 %421, -1
  %428 = shl i32 1, %427
  %429 = lshr i32 %428, 1
  %430 = trunc i32 %429 to i16
  %431 = add i16 %430, 8192
  %432 = insertelement <16 x i16> undef, i16 %431, i32 0
  %433 = shufflevector <16 x i16> %432, <16 x i16> undef, <16 x i32> zeroinitializer
  %434 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %427, i32 0
  %435 = shl i32 1, %426
  %436 = shl i32 1, %424
  %437 = ashr i32 %436, 1
  %438 = add nsw i32 %437, %435
  %439 = insertelement <8 x i32> undef, i32 %438, i32 0
  %440 = shufflevector <8 x i32> %439, <8 x i32> undef, <8 x i32> zeroinitializer
  %441 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %424, i32 0
  %442 = shl i32 1, %425
  %443 = ashr i32 %442, 1
  %444 = sub nsw i32 %426, %424
  %445 = shl i32 1, %444
  %446 = sub i32 %443, %445
  %447 = ashr i32 %445, 1
  %448 = sub i32 %446, %447
  %449 = insertelement <8 x i32> undef, i32 %448, i32 0
  %450 = shufflevector <8 x i32> %449, <8 x i32> undef, <8 x i32> zeroinitializer
  %451 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %425, i32 0
  %452 = and i32 %8, 15
  %453 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %454 = load i16*, i16** %453, align 8
  %455 = zext i16 %15 to i32
  %456 = mul nuw nsw i32 %452, %455
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds i16, i16* %454, i64 %457
  %459 = bitcast i16* %458 to <2 x i64>*
  %460 = load <2 x i64>, <2 x i64>* %459, align 1
  %461 = shufflevector <2 x i64> %460, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %462 = bitcast <4 x i64> %461 to <16 x i16>
  %463 = ashr <16 x i16> %462, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %464 = bitcast <16 x i16> %463 to <32 x i8>
  %465 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %466 = and i32 %9, 15
  %467 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %468 = load i16*, i16** %467, align 8
  %469 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %470 = load i16, i16* %469, align 8
  %471 = zext i16 %470 to i32
  %472 = mul nuw nsw i32 %466, %471
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %468, i64 %473
  %475 = bitcast i16* %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 1
  %477 = shufflevector <2 x i64> %476, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %478 = bitcast <4 x i64> %477 to <8 x i32>
  %479 = shufflevector <8 x i32> %478, <8 x i32> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7>
  %480 = bitcast <2 x i64> %460 to <8 x i16>
  %481 = extractelement <8 x i16> %480, i32 0
  %482 = getelementptr inbounds i16, i16* %458, i64 1
  %483 = load i16, i16* %482, align 2
  %484 = getelementptr inbounds i16, i16* %458, i64 6
  %485 = load i16, i16* %484, align 2
  %486 = getelementptr inbounds i16, i16* %458, i64 7
  %487 = load i16, i16* %486, align 2
  %488 = or i16 %487, %481
  %489 = or i16 %488, %483
  %490 = or i16 %489, %485
  %491 = icmp eq i16 %490, 0
  %492 = icmp eq i16 %488, 0
  %493 = select i1 %492, i32 6, i32 8
  %494 = select i1 %491, i32 4, i32 %493
  %495 = bitcast <2 x i64> %476 to <8 x i16>
  %496 = extractelement <8 x i16> %495, i32 0
  %497 = getelementptr inbounds i16, i16* %474, i64 1
  %498 = load i16, i16* %497, align 2
  %499 = getelementptr inbounds i16, i16* %474, i64 6
  %500 = load i16, i16* %499, align 2
  %501 = getelementptr inbounds i16, i16* %474, i64 7
  %502 = load i16, i16* %501, align 2
  %503 = or i16 %502, %496
  %504 = or i16 %503, %498
  %505 = or i16 %504, %500
  %506 = icmp eq i16 %505, 0
  %507 = icmp eq i16 %503, 0
  %508 = select i1 %507, i32 6, i32 8
  %509 = select i1 %506, i32 4, i32 %508
  %510 = icmp eq i32 %494, 6
  br i1 %510, label %511, label %515

511:                                              ; preds = %418
  %512 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 2, i32 4, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20, i32 18, i32 20>
  %513 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 6, i32 8, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24, i32 22, i32 24>
  %514 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 10, i32 12, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28, i32 26, i32 28>
  br label %519

515:                                              ; preds = %418
  %516 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %517 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %518 = shufflevector <32 x i8> %464, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  br label %519

519:                                              ; preds = %515, %511
  %520 = phi <32 x i8> [ %514, %511 ], [ %518, %515 ]
  %521 = phi <32 x i8> [ %513, %511 ], [ %517, %515 ]
  %522 = phi <32 x i8> [ %512, %511 ], [ %516, %515 ]
  %523 = icmp eq i32 %509, 6
  br i1 %523, label %524, label %529

524:                                              ; preds = %519
  %525 = bitcast i16* %497 to <2 x i64>*
  %526 = load <2 x i64>, <2 x i64>* %525, align 1
  %527 = shufflevector <2 x i64> %526, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %528 = bitcast <4 x i64> %527 to <8 x i32>
  br label %529

529:                                              ; preds = %519, %524
  %530 = phi <8 x i32> [ %528, %524 ], [ %478, %519 ]
  %531 = lshr exact i32 %509, 1
  %532 = add nsw i32 %531, -1
  %533 = lshr exact i32 %494, 1
  %534 = mul nsw i32 %532, %1
  %535 = sext i32 %534 to i64
  %536 = sub nsw i64 0, %535
  %537 = getelementptr inbounds i8, i8* %0, i64 %536
  %538 = sub nsw i32 1, %533
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %537, i64 %539
  %541 = icmp sgt i32 %4, 0
  br i1 %541, label %542, label %997

542:                                              ; preds = %529
  %543 = shufflevector <8 x i32> %530, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %544 = shufflevector <8 x i32> %530, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %545 = shufflevector <8 x i32> %530, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4>
  %546 = add nsw i32 %509, %5
  %547 = add nsw i32 %546, -3
  %548 = icmp sgt i32 %547, 0
  %549 = bitcast <4 x i32> %434 to <8 x i16>
  %550 = bitcast [1120 x i16]* %13 to <4 x i64>*
  %551 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 8
  %552 = bitcast i16* %551 to <4 x i64>*
  %553 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 16
  %554 = bitcast i16* %553 to <4 x i64>*
  %555 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 24
  %556 = bitcast i16* %555 to <4 x i64>*
  %557 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 32
  %558 = bitcast i16* %557 to <16 x i16>*
  %559 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 40
  %560 = bitcast i16* %559 to <16 x i16>*
  %561 = icmp sgt i32 %5, 0
  %562 = bitcast <8 x i32> %545 to <16 x i16>
  %563 = bitcast <8 x i32> %544 to <16 x i16>
  %564 = bitcast <8 x i32> %543 to <16 x i16>
  %565 = bitcast <8 x i32> %479 to <16 x i16>
  %566 = icmp eq i32 %4, 4
  %567 = sext i32 %547 to i64
  %568 = sext i32 %3 to i64
  %569 = sext i32 %5 to i64
  %570 = sext i32 %4 to i64
  br label %571

571:                                              ; preds = %542, %994
  %572 = phi i64 [ 0, %542 ], [ %995, %994 ]
  %573 = getelementptr inbounds i8, i8* %540, i64 %572
  %574 = bitcast i8* %573 to <2 x i64>*
  %575 = load <2 x i64>, <2 x i64>* %574, align 1
  br i1 %491, label %576, label %621

576:                                              ; preds = %571
  br i1 %548, label %577, label %611

577:                                              ; preds = %576
  %578 = trunc i64 %572 to i32
  br label %579

579:                                              ; preds = %577, %579
  %580 = phi i64 [ 0, %577 ], [ %602, %579 ]
  %581 = phi <2 x i64> [ %575, %577 ], [ %610, %579 ]
  %582 = phi i32 [ %578, %577 ], [ %606, %579 ]
  %583 = phi i32 [ 0, %577 ], [ %603, %579 ]
  %584 = add nsw i32 %582, %1
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, i8* %540, i64 %585
  %587 = bitcast i8* %586 to <2 x i64>*
  %588 = load <2 x i64>, <2 x i64>* %587, align 1
  %589 = shufflevector <2 x i64> %581, <2 x i64> %588, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %590 = bitcast <4 x i64> %589 to <32 x i8>
  %591 = shufflevector <32 x i8> %590, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %592 = shufflevector <32 x i8> %590, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %593 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %591, <32 x i8> %521) #3
  %594 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %592, <32 x i8> %520) #3
  %595 = add <16 x i16> %593, %433
  %596 = add <16 x i16> %595, %594
  %597 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %596, <8 x i16> %549) #3
  %598 = shl i64 %580, 3
  %599 = and i64 %598, 4294967280
  %600 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %599
  %601 = bitcast i16* %600 to <16 x i16>*
  store <16 x i16> %597, <16 x i16>* %601, align 32
  %602 = add nuw nsw i64 %580, 2
  %603 = add nuw nsw i32 %583, 2
  %604 = icmp slt i64 %602, %567
  %605 = mul nsw i32 %603, %1
  %606 = add nsw i32 %605, %578
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i8, i8* %540, i64 %607
  %609 = bitcast i8* %608 to <2 x i64>*
  %610 = load <2 x i64>, <2 x i64>* %609, align 1
  br i1 %604, label %579, label %611

611:                                              ; preds = %579, %576
  %612 = phi i64 [ 0, %576 ], [ %602, %579 ]
  %613 = phi <2 x i64> [ %575, %576 ], [ %610, %579 ]
  %614 = shufflevector <2 x i64> %613, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %615 = bitcast <4 x i64> %614 to <32 x i8>
  %616 = shufflevector <32 x i8> %615, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %617 = shufflevector <32 x i8> %615, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %618 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %616, <32 x i8> %521) #3
  %619 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %617, <32 x i8> %520) #3
  %620 = add <16 x i16> %618, %433
  br label %730

621:                                              ; preds = %571
  br i1 %510, label %625, label %622

622:                                              ; preds = %621
  br i1 %548, label %623, label %714

623:                                              ; preds = %622
  %624 = trunc i64 %572 to i32
  br label %676

625:                                              ; preds = %621
  br i1 %548, label %626, label %663

626:                                              ; preds = %625
  %627 = trunc i64 %572 to i32
  br label %628

628:                                              ; preds = %626, %628
  %629 = phi i64 [ 0, %626 ], [ %654, %628 ]
  %630 = phi <2 x i64> [ %575, %626 ], [ %662, %628 ]
  %631 = phi i32 [ %627, %626 ], [ %658, %628 ]
  %632 = phi i32 [ 0, %626 ], [ %655, %628 ]
  %633 = add nsw i32 %631, %1
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds i8, i8* %540, i64 %634
  %636 = bitcast i8* %635 to <2 x i64>*
  %637 = load <2 x i64>, <2 x i64>* %636, align 1
  %638 = shufflevector <2 x i64> %630, <2 x i64> %637, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %639 = bitcast <4 x i64> %638 to <32 x i8>
  %640 = shufflevector <32 x i8> %639, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %641 = shufflevector <32 x i8> %639, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %642 = shufflevector <32 x i8> %639, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %643 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %640, <32 x i8> %522) #3
  %644 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %641, <32 x i8> %521) #3
  %645 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %642, <32 x i8> %520) #3
  %646 = add <16 x i16> %643, %433
  %647 = add <16 x i16> %646, %644
  %648 = add <16 x i16> %647, %645
  %649 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %648, <8 x i16> %549) #3
  %650 = shl i64 %629, 3
  %651 = and i64 %650, 4294967280
  %652 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %651
  %653 = bitcast i16* %652 to <16 x i16>*
  store <16 x i16> %649, <16 x i16>* %653, align 32
  %654 = add nuw nsw i64 %629, 2
  %655 = add nuw nsw i32 %632, 2
  %656 = icmp slt i64 %654, %567
  %657 = mul nsw i32 %655, %1
  %658 = add nsw i32 %657, %627
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i8, i8* %540, i64 %659
  %661 = bitcast i8* %660 to <2 x i64>*
  %662 = load <2 x i64>, <2 x i64>* %661, align 1
  br i1 %656, label %628, label %663

663:                                              ; preds = %628, %625
  %664 = phi i64 [ 0, %625 ], [ %654, %628 ]
  %665 = phi <2 x i64> [ %575, %625 ], [ %662, %628 ]
  %666 = shufflevector <2 x i64> %665, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %667 = bitcast <4 x i64> %666 to <32 x i8>
  %668 = shufflevector <32 x i8> %667, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %669 = shufflevector <32 x i8> %667, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %670 = shufflevector <32 x i8> %667, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %671 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %668, <32 x i8> %522) #3
  %672 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %669, <32 x i8> %521) #3
  %673 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %670, <32 x i8> %520) #3
  %674 = add <16 x i16> %671, %433
  %675 = add <16 x i16> %674, %672
  br label %730

676:                                              ; preds = %623, %676
  %677 = phi i64 [ 0, %623 ], [ %705, %676 ]
  %678 = phi <2 x i64> [ %575, %623 ], [ %713, %676 ]
  %679 = phi i32 [ %624, %623 ], [ %709, %676 ]
  %680 = phi i32 [ 0, %623 ], [ %706, %676 ]
  %681 = add nsw i32 %679, %1
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds i8, i8* %540, i64 %682
  %684 = bitcast i8* %683 to <2 x i64>*
  %685 = load <2 x i64>, <2 x i64>* %684, align 1
  %686 = shufflevector <2 x i64> %678, <2 x i64> %685, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %687 = bitcast <4 x i64> %686 to <32 x i8>
  %688 = shufflevector <32 x i8> %687, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %689 = shufflevector <32 x i8> %687, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %690 = shufflevector <32 x i8> %687, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %691 = shufflevector <32 x i8> %687, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %692 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %688, <32 x i8> %522) #3
  %693 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %689, <32 x i8> %521) #3
  %694 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %690, <32 x i8> %520) #3
  %695 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %691, <32 x i8> %465) #3
  %696 = add <16 x i16> %692, %433
  %697 = add <16 x i16> %696, %693
  %698 = add <16 x i16> %697, %694
  %699 = add <16 x i16> %698, %695
  %700 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %699, <8 x i16> %549) #3
  %701 = shl i64 %677, 3
  %702 = and i64 %701, 4294967280
  %703 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %702
  %704 = bitcast i16* %703 to <16 x i16>*
  store <16 x i16> %700, <16 x i16>* %704, align 32
  %705 = add nuw nsw i64 %677, 2
  %706 = add nuw nsw i32 %680, 2
  %707 = icmp slt i64 %705, %567
  %708 = mul nsw i32 %706, %1
  %709 = add nsw i32 %708, %624
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i8, i8* %540, i64 %710
  %712 = bitcast i8* %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 1
  br i1 %707, label %676, label %714

714:                                              ; preds = %676, %622
  %715 = phi i64 [ 0, %622 ], [ %705, %676 ]
  %716 = phi <2 x i64> [ %575, %622 ], [ %713, %676 ]
  %717 = shufflevector <2 x i64> %716, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %718 = bitcast <4 x i64> %717 to <32 x i8>
  %719 = shufflevector <32 x i8> %718, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %720 = shufflevector <32 x i8> %718, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %721 = shufflevector <32 x i8> %718, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %722 = shufflevector <32 x i8> %718, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %723 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %719, <32 x i8> %522) #3
  %724 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %720, <32 x i8> %521) #3
  %725 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %721, <32 x i8> %520) #3
  %726 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %722, <32 x i8> %465) #3
  %727 = add <16 x i16> %723, %433
  %728 = add <16 x i16> %727, %724
  %729 = add <16 x i16> %728, %725
  br label %730

730:                                              ; preds = %663, %714, %611
  %731 = phi <16 x i16> [ %673, %663 ], [ %726, %714 ], [ %619, %611 ]
  %732 = phi <16 x i16> [ %675, %663 ], [ %729, %714 ], [ %620, %611 ]
  %733 = phi i64 [ %664, %663 ], [ %715, %714 ], [ %612, %611 ]
  %734 = add <16 x i16> %732, %731
  %735 = tail call <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16> %734, <8 x i16> %549) #3
  %736 = shl i64 %733, 3
  %737 = and i64 %736, 4294967288
  %738 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %737
  %739 = bitcast i16* %738 to <16 x i16>*
  store <16 x i16> %735, <16 x i16>* %739, align 32
  %740 = load <4 x i64>, <4 x i64>* %550, align 32
  %741 = load <4 x i64>, <4 x i64>* %552, align 16
  %742 = load <4 x i64>, <4 x i64>* %554, align 32
  %743 = load <4 x i64>, <4 x i64>* %556, align 16
  br i1 %506, label %744, label %821

744:                                              ; preds = %730
  %745 = bitcast <4 x i64> %740 to <16 x i16>
  %746 = bitcast <4 x i64> %741 to <16 x i16>
  %747 = bitcast <4 x i64> %742 to <16 x i16>
  %748 = bitcast <4 x i64> %743 to <16 x i16>
  br i1 %561, label %749, label %994

749:                                              ; preds = %744
  %750 = shufflevector <16 x i16> %747, <16 x i16> %748, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %751 = shufflevector <16 x i16> %745, <16 x i16> %746, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %752 = shufflevector <16 x i16> %747, <16 x i16> %748, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %753 = shufflevector <16 x i16> %745, <16 x i16> %746, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %754 = trunc i64 %572 to i32
  %755 = sub nsw i32 %4, %754
  %756 = icmp sgt i32 %755, 4
  br label %757

757:                                              ; preds = %749, %818
  %758 = phi i64 [ 0, %749 ], [ %819, %818 ]
  %759 = phi <16 x i16> [ %753, %749 ], [ %760, %818 ]
  %760 = phi <16 x i16> [ %752, %749 ], [ %772, %818 ]
  %761 = phi <16 x i16> [ %751, %749 ], [ %762, %818 ]
  %762 = phi <16 x i16> [ %750, %749 ], [ %773, %818 ]
  %763 = shl i64 %758, 3
  %764 = and i64 %763, 4294967280
  %765 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %764
  %766 = getelementptr inbounds i16, i16* %765, i64 32
  %767 = bitcast i16* %766 to <16 x i16>*
  %768 = load <16 x i16>, <16 x i16>* %767, align 32
  %769 = getelementptr inbounds i16, i16* %765, i64 40
  %770 = bitcast i16* %769 to <16 x i16>*
  %771 = load <16 x i16>, <16 x i16>* %770, align 16
  %772 = shufflevector <16 x i16> %768, <16 x i16> %771, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %773 = shufflevector <16 x i16> %768, <16 x i16> %771, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %774 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %759, <16 x i16> %563) #3
  %775 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %760, <16 x i16> %564) #3
  %776 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %761, <16 x i16> %563) #3
  %777 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %762, <16 x i16> %564) #3
  %778 = add <8 x i32> %774, %440
  %779 = add <8 x i32> %778, %775
  %780 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %779, <4 x i32> %441) #3
  %781 = add <8 x i32> %776, %440
  %782 = add <8 x i32> %781, %777
  %783 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %782, <4 x i32> %441) #3
  %784 = add <8 x i32> %780, %450
  %785 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %784, <4 x i32> %451) #3
  %786 = add <8 x i32> %783, %450
  %787 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %786, <4 x i32> %451) #3
  %788 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %785, <8 x i32> %787) #3
  %789 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %788, <16 x i16> %788) #3
  %790 = bitcast <32 x i8> %789 to <4 x i64>
  %791 = shufflevector <4 x i64> %790, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %792 = mul nsw i64 %758, %568
  %793 = add nsw i64 %792, %572
  %794 = getelementptr inbounds i8, i8* %2, i64 %793
  %795 = add nsw i64 %793, %568
  %796 = getelementptr inbounds i8, i8* %2, i64 %795
  br i1 %756, label %797, label %802

797:                                              ; preds = %757
  %798 = extractelement <4 x i64> %790, i32 0
  %799 = bitcast i8* %794 to i64*
  store i64 %798, i64* %799, align 1
  %800 = extractelement <4 x i64> %790, i32 2
  %801 = bitcast i8* %796 to i64*
  store i64 %800, i64* %801, align 1
  br label %818

802:                                              ; preds = %757
  %803 = shufflevector <4 x i64> %790, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %804 = bitcast <2 x i64> %803 to <4 x i32>
  %805 = extractelement <4 x i32> %804, i32 0
  br i1 %566, label %806, label %811

806:                                              ; preds = %802
  %807 = bitcast i8* %794 to i32*
  store i32 %805, i32* %807, align 1
  %808 = bitcast <2 x i64> %791 to <4 x i32>
  %809 = extractelement <4 x i32> %808, i32 0
  %810 = bitcast i8* %796 to i32*
  store i32 %809, i32* %810, align 1
  br label %818

811:                                              ; preds = %802
  %812 = trunc i32 %805 to i16
  %813 = bitcast i8* %794 to i16*
  store i16 %812, i16* %813, align 2
  %814 = bitcast <2 x i64> %791 to <4 x i32>
  %815 = extractelement <4 x i32> %814, i32 0
  %816 = trunc i32 %815 to i16
  %817 = bitcast i8* %796 to i16*
  store i16 %816, i16* %817, align 2
  br label %818

818:                                              ; preds = %806, %811, %797
  %819 = add nuw nsw i64 %758, 2
  %820 = icmp slt i64 %819, %569
  br i1 %820, label %757, label %994

821:                                              ; preds = %730
  br i1 %523, label %822, label %903

822:                                              ; preds = %821
  %823 = bitcast <4 x i64> %740 to <16 x i16>
  %824 = bitcast <4 x i64> %741 to <16 x i16>
  %825 = bitcast <4 x i64> %742 to <16 x i16>
  %826 = bitcast <4 x i64> %743 to <16 x i16>
  br i1 %561, label %827, label %994

827:                                              ; preds = %822
  %828 = shufflevector <16 x i16> %825, <16 x i16> %826, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %829 = shufflevector <16 x i16> %823, <16 x i16> %824, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %830 = shufflevector <16 x i16> %825, <16 x i16> %826, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %831 = shufflevector <16 x i16> %823, <16 x i16> %824, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %832 = trunc i64 %572 to i32
  %833 = sub nsw i32 %4, %832
  %834 = icmp sgt i32 %833, 4
  br label %835

835:                                              ; preds = %827, %900
  %836 = phi i64 [ 0, %827 ], [ %901, %900 ]
  %837 = phi <16 x i16> [ %831, %827 ], [ %838, %900 ]
  %838 = phi <16 x i16> [ %830, %827 ], [ %850, %900 ]
  %839 = phi <16 x i16> [ %829, %827 ], [ %840, %900 ]
  %840 = phi <16 x i16> [ %828, %827 ], [ %851, %900 ]
  %841 = shl i64 %836, 3
  %842 = and i64 %841, 4294967280
  %843 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %842
  %844 = getelementptr inbounds i16, i16* %843, i64 32
  %845 = bitcast i16* %844 to <16 x i16>*
  %846 = load <16 x i16>, <16 x i16>* %845, align 32
  %847 = getelementptr inbounds i16, i16* %843, i64 40
  %848 = bitcast i16* %847 to <16 x i16>*
  %849 = load <16 x i16>, <16 x i16>* %848, align 16
  %850 = shufflevector <16 x i16> %846, <16 x i16> %849, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %851 = shufflevector <16 x i16> %846, <16 x i16> %849, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %852 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %837, <16 x i16> %562) #3
  %853 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %838, <16 x i16> %563) #3
  %854 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %850, <16 x i16> %564) #3
  %855 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %839, <16 x i16> %562) #3
  %856 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %840, <16 x i16> %563) #3
  %857 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %851, <16 x i16> %564) #3
  %858 = add <8 x i32> %852, %440
  %859 = add <8 x i32> %858, %853
  %860 = add <8 x i32> %859, %854
  %861 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %860, <4 x i32> %441) #3
  %862 = add <8 x i32> %855, %440
  %863 = add <8 x i32> %862, %856
  %864 = add <8 x i32> %863, %857
  %865 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %864, <4 x i32> %441) #3
  %866 = add <8 x i32> %861, %450
  %867 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %866, <4 x i32> %451) #3
  %868 = add <8 x i32> %865, %450
  %869 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %868, <4 x i32> %451) #3
  %870 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %867, <8 x i32> %869) #3
  %871 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %870, <16 x i16> %870) #3
  %872 = bitcast <32 x i8> %871 to <4 x i64>
  %873 = shufflevector <4 x i64> %872, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %874 = mul nsw i64 %836, %568
  %875 = add nsw i64 %874, %572
  %876 = getelementptr inbounds i8, i8* %2, i64 %875
  %877 = add nsw i64 %875, %568
  %878 = getelementptr inbounds i8, i8* %2, i64 %877
  br i1 %834, label %879, label %884

879:                                              ; preds = %835
  %880 = extractelement <4 x i64> %872, i32 0
  %881 = bitcast i8* %876 to i64*
  store i64 %880, i64* %881, align 1
  %882 = extractelement <4 x i64> %872, i32 2
  %883 = bitcast i8* %878 to i64*
  store i64 %882, i64* %883, align 1
  br label %900

884:                                              ; preds = %835
  %885 = shufflevector <4 x i64> %872, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %886 = bitcast <2 x i64> %885 to <4 x i32>
  %887 = extractelement <4 x i32> %886, i32 0
  br i1 %566, label %888, label %893

888:                                              ; preds = %884
  %889 = bitcast i8* %876 to i32*
  store i32 %887, i32* %889, align 1
  %890 = bitcast <2 x i64> %873 to <4 x i32>
  %891 = extractelement <4 x i32> %890, i32 0
  %892 = bitcast i8* %878 to i32*
  store i32 %891, i32* %892, align 1
  br label %900

893:                                              ; preds = %884
  %894 = trunc i32 %887 to i16
  %895 = bitcast i8* %876 to i16*
  store i16 %894, i16* %895, align 2
  %896 = bitcast <2 x i64> %873 to <4 x i32>
  %897 = extractelement <4 x i32> %896, i32 0
  %898 = trunc i32 %897 to i16
  %899 = bitcast i8* %878 to i16*
  store i16 %898, i16* %899, align 2
  br label %900

900:                                              ; preds = %888, %893, %879
  %901 = add nuw nsw i64 %836, 2
  %902 = icmp slt i64 %901, %569
  br i1 %902, label %835, label %994

903:                                              ; preds = %821
  %904 = load <16 x i16>, <16 x i16>* %558, align 32
  %905 = load <16 x i16>, <16 x i16>* %560, align 16
  %906 = bitcast <4 x i64> %740 to <16 x i16>
  %907 = bitcast <4 x i64> %741 to <16 x i16>
  %908 = bitcast <4 x i64> %742 to <16 x i16>
  %909 = bitcast <4 x i64> %743 to <16 x i16>
  br i1 %561, label %910, label %994

910:                                              ; preds = %903
  %911 = shufflevector <16 x i16> %904, <16 x i16> %905, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %912 = shufflevector <16 x i16> %908, <16 x i16> %909, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %913 = shufflevector <16 x i16> %906, <16 x i16> %907, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %914 = shufflevector <16 x i16> %904, <16 x i16> %905, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %915 = shufflevector <16 x i16> %908, <16 x i16> %909, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %916 = shufflevector <16 x i16> %906, <16 x i16> %907, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %917 = trunc i64 %572 to i32
  %918 = sub nsw i32 %4, %917
  %919 = icmp sgt i32 %918, 4
  br label %920

920:                                              ; preds = %910, %991
  %921 = phi i64 [ 0, %910 ], [ %992, %991 ]
  %922 = phi <16 x i16> [ %916, %910 ], [ %923, %991 ]
  %923 = phi <16 x i16> [ %915, %910 ], [ %924, %991 ]
  %924 = phi <16 x i16> [ %914, %910 ], [ %937, %991 ]
  %925 = phi <16 x i16> [ %913, %910 ], [ %926, %991 ]
  %926 = phi <16 x i16> [ %912, %910 ], [ %927, %991 ]
  %927 = phi <16 x i16> [ %911, %910 ], [ %938, %991 ]
  %928 = shl i64 %921, 3
  %929 = and i64 %928, 4294967280
  %930 = getelementptr inbounds [1120 x i16], [1120 x i16]* %13, i64 0, i64 %929
  %931 = getelementptr inbounds i16, i16* %930, i64 48
  %932 = bitcast i16* %931 to <16 x i16>*
  %933 = load <16 x i16>, <16 x i16>* %932, align 32
  %934 = getelementptr inbounds i16, i16* %930, i64 56
  %935 = bitcast i16* %934 to <16 x i16>*
  %936 = load <16 x i16>, <16 x i16>* %935, align 16
  %937 = shufflevector <16 x i16> %933, <16 x i16> %936, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %938 = shufflevector <16 x i16> %933, <16 x i16> %936, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %939 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %922, <16 x i16> %562) #3
  %940 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %923, <16 x i16> %563) #3
  %941 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %924, <16 x i16> %564) #3
  %942 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %937, <16 x i16> %565) #3
  %943 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %925, <16 x i16> %562) #3
  %944 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %926, <16 x i16> %563) #3
  %945 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %927, <16 x i16> %564) #3
  %946 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %938, <16 x i16> %565) #3
  %947 = add <8 x i32> %939, %440
  %948 = add <8 x i32> %947, %940
  %949 = add <8 x i32> %948, %941
  %950 = add <8 x i32> %949, %942
  %951 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %950, <4 x i32> %441) #3
  %952 = add <8 x i32> %943, %440
  %953 = add <8 x i32> %952, %944
  %954 = add <8 x i32> %953, %945
  %955 = add <8 x i32> %954, %946
  %956 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %955, <4 x i32> %441) #3
  %957 = add <8 x i32> %951, %450
  %958 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %957, <4 x i32> %451) #3
  %959 = add <8 x i32> %956, %450
  %960 = tail call <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32> %959, <4 x i32> %451) #3
  %961 = tail call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %958, <8 x i32> %960) #3
  %962 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %961, <16 x i16> %961) #3
  %963 = bitcast <32 x i8> %962 to <4 x i64>
  %964 = shufflevector <4 x i64> %963, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %965 = mul nsw i64 %921, %568
  %966 = add nsw i64 %965, %572
  %967 = getelementptr inbounds i8, i8* %2, i64 %966
  %968 = add nsw i64 %966, %568
  %969 = getelementptr inbounds i8, i8* %2, i64 %968
  br i1 %919, label %970, label %975

970:                                              ; preds = %920
  %971 = extractelement <4 x i64> %963, i32 0
  %972 = bitcast i8* %967 to i64*
  store i64 %971, i64* %972, align 1
  %973 = extractelement <4 x i64> %963, i32 2
  %974 = bitcast i8* %969 to i64*
  store i64 %973, i64* %974, align 1
  br label %991

975:                                              ; preds = %920
  %976 = shufflevector <4 x i64> %963, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %977 = bitcast <2 x i64> %976 to <4 x i32>
  %978 = extractelement <4 x i32> %977, i32 0
  br i1 %566, label %979, label %984

979:                                              ; preds = %975
  %980 = bitcast i8* %967 to i32*
  store i32 %978, i32* %980, align 1
  %981 = bitcast <2 x i64> %964 to <4 x i32>
  %982 = extractelement <4 x i32> %981, i32 0
  %983 = bitcast i8* %969 to i32*
  store i32 %982, i32* %983, align 1
  br label %991

984:                                              ; preds = %975
  %985 = trunc i32 %978 to i16
  %986 = bitcast i8* %967 to i16*
  store i16 %985, i16* %986, align 2
  %987 = bitcast <2 x i64> %964 to <4 x i32>
  %988 = extractelement <4 x i32> %987, i32 0
  %989 = trunc i32 %988 to i16
  %990 = bitcast i8* %969 to i16*
  store i16 %989, i16* %990, align 2
  br label %991

991:                                              ; preds = %979, %984, %970
  %992 = add nuw nsw i64 %921, 2
  %993 = icmp slt i64 %992, %569
  br i1 %993, label %920, label %994

994:                                              ; preds = %991, %900, %818, %903, %822, %744
  %995 = add nuw nsw i64 %572, 8
  %996 = icmp slt i64 %995, %570
  br i1 %996, label %571, label %997

997:                                              ; preds = %994, %415, %529, %17
  %998 = phi i8* [ %18, %17 ], [ %419, %529 ], [ %18, %415 ], [ %419, %994 ]
  call void @llvm.lifetime.end.p0i8(i64 2240, i8* nonnull %998) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psra.d(<8 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #2

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.psra.w(<16 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
