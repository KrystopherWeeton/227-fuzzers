; ModuleID = '../../third_party/ffmpeg/libavformat/format.c'
source_filename = "../../third_party/ffmpeg/libavformat/format.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, {}*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, {}*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, {}*, {}*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVRational = type { i32, i32 }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque

@.str = private unnamed_addr constant [8 x i8] c"segment\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"ssegment\00", align 1
@av_probe_input_format3.zerobuffer = internal constant [32 x i8] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [4 x i8] c"ID3\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"image2\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Probing %s score:%d size:%d\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"Probing %s score:%d increased to %d due to MIME type\0A\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"Specified probe size value %u cannot be < %u\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"mime_type\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"Format %s detected only with low score of %d, misdetection possible!\0A\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"Format %s probed with size=%d and score=%d\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_match_ext(i8*, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i8* %0, null
  br i1 %3, label %10, label %4

4:                                                ; preds = %2
  %5 = tail call i8* @strrchr(i8* nonnull %0, i32 46) #4
  %6 = icmp eq i8* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %5, i64 1
  %9 = tail call i32 @av_match_name(i8* %8, i8* %1) #5
  br label %10

10:                                               ; preds = %4, %2, %7
  %11 = phi i32 [ %9, %7 ], [ 0, %2 ], [ 0, %4 ]
  ret i32 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #2

declare i32 @av_match_name(i8*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVOutputFormat* @av_guess_format(i8*, i8*, i8* readonly) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  store i8* null, i8** %4, align 8
  %6 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %4) #5
  %7 = icmp eq %struct.AVOutputFormat* %6, null
  br i1 %7, label %57, label %8

8:                                                ; preds = %3
  %9 = icmp ne i8* %0, null
  %10 = icmp ne i8* %2, null
  %11 = icmp eq i8* %1, null
  br label %12

12:                                               ; preds = %8, %50
  %13 = phi %struct.AVOutputFormat* [ %6, %8 ], [ %55, %50 ]
  %14 = phi i32 [ 0, %8 ], [ %54, %50 ]
  %15 = phi %struct.AVOutputFormat* [ null, %8 ], [ %53, %50 ]
  %16 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %13, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ne i8* %17, null
  %19 = and i1 %9, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %12
  %21 = call i32 @av_match_name(i8* nonnull %0, i8* nonnull %17) #5
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 0, i32 100
  br label %24

24:                                               ; preds = %20, %12
  %25 = phi i32 [ 0, %12 ], [ %23, %20 ]
  %26 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %13, i64 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  %29 = and i1 %10, %28
  br i1 %29, label %30, label %35

30:                                               ; preds = %24
  %31 = call i32 @strcmp(i8* nonnull %27, i8* nonnull %2) #4
  %32 = icmp eq i32 %31, 0
  %33 = or i32 %25, 10
  %34 = select i1 %32, i32 %33, i32 %25
  br label %35

35:                                               ; preds = %30, %24
  %36 = phi i32 [ %25, %24 ], [ %34, %30 ]
  br i1 %11, label %50, label %37

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %13, i64 0, i32 3
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %50, label %41

41:                                               ; preds = %37
  %42 = call i8* @strrchr(i8* nonnull %1, i32 46) #4
  %43 = icmp eq i8* %42, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %42, i64 1
  %46 = call i32 @av_match_name(i8* %45, i8* nonnull %39) #5
  %47 = icmp eq i32 %46, 0
  %48 = add nsw i32 %36, 5
  br i1 %47, label %49, label %50

49:                                               ; preds = %41, %44
  br label %50

50:                                               ; preds = %49, %44, %37, %35
  %51 = phi i32 [ %36, %37 ], [ %36, %35 ], [ %36, %49 ], [ %48, %44 ]
  %52 = icmp sgt i32 %51, %14
  %53 = select i1 %52, %struct.AVOutputFormat* %13, %struct.AVOutputFormat* %15
  %54 = select i1 %52, i32 %51, i32 %14
  %55 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %4) #5
  %56 = icmp eq %struct.AVOutputFormat* %55, null
  br i1 %56, label %57, label %12

57:                                               ; preds = %50, %3
  %58 = phi %struct.AVOutputFormat* [ null, %3 ], [ %53, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  ret %struct.AVOutputFormat* %58
}

declare %struct.AVOutputFormat* @av_muxer_iterate(i8**) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_guess_codec(%struct.AVOutputFormat* nocapture readonly, i8* nocapture readnone, i8*, i8* nocapture readnone, i32) local_unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = tail call i32 @av_match_name(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* %8) #5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %5
  %12 = load i8*, i8** %7, align 8
  %13 = tail call i32 @av_match_name(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* %12) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %48, label %15

15:                                               ; preds = %11, %5
  %16 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  store i8* null, i8** %6, align 8
  %17 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %6) #5
  %18 = icmp eq %struct.AVOutputFormat* %17, null
  br i1 %18, label %44, label %19

19:                                               ; preds = %15
  %20 = icmp eq i8* %2, null
  br label %21

21:                                               ; preds = %37, %19
  %22 = phi %struct.AVOutputFormat* [ %17, %19 ], [ %42, %37 ]
  %23 = phi i32 [ 0, %19 ], [ %41, %37 ]
  %24 = phi %struct.AVOutputFormat* [ null, %19 ], [ %40, %37 ]
  br i1 %20, label %37, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %22, i64 0, i32 3
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = call i8* @strrchr(i8* nonnull %2, i32 46) #4
  %31 = icmp eq i8* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds i8, i8* %30, i64 1
  %34 = call i32 @av_match_name(i8* %33, i8* nonnull %27) #5
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32, %29
  br label %37

37:                                               ; preds = %36, %32, %25, %21
  %38 = phi i32 [ 0, %25 ], [ 0, %21 ], [ 0, %36 ], [ 5, %32 ]
  %39 = icmp ugt i32 %38, %23
  %40 = select i1 %39, %struct.AVOutputFormat* %22, %struct.AVOutputFormat* %24
  %41 = select i1 %39, i32 %38, i32 %23
  %42 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** nonnull %6) #5
  %43 = icmp eq %struct.AVOutputFormat* %42, null
  br i1 %43, label %44, label %21

44:                                               ; preds = %37, %15
  %45 = phi %struct.AVOutputFormat* [ null, %15 ], [ %40, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  %46 = icmp eq %struct.AVOutputFormat* %45, null
  %47 = select i1 %46, %struct.AVOutputFormat* %0, %struct.AVOutputFormat* %45
  br label %48

48:                                               ; preds = %11, %44
  %49 = phi %struct.AVOutputFormat* [ %47, %44 ], [ %0, %11 ]
  switch i32 %4, label %62 [
    i32 0, label %50
    i32 1, label %53
    i32 3, label %56
    i32 2, label %59
  ]

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %49, i64 0, i32 5
  %52 = load i32, i32* %51, align 4
  br label %62

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %49, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  br label %62

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %49, i64 0, i32 6
  %58 = load i32, i32* %57, align 8
  br label %62

59:                                               ; preds = %48
  %60 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %49, i64 0, i32 23
  %61 = load i32, i32* %60, align 8
  br label %62

62:                                               ; preds = %48, %59, %56, %53, %50
  %63 = phi i32 [ %52, %50 ], [ %55, %53 ], [ %58, %56 ], [ %61, %59 ], [ 0, %48 ]
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVInputFormat* @av_find_input_format(i8*) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #5
  store i8* null, i8** %2, align 8
  br label %4

4:                                                ; preds = %7, %1
  %5 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** nonnull %2) #5
  %6 = icmp eq %struct.AVInputFormat* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %5, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = call i32 @av_match_name(i8* %0, i8* %9) #5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %4, label %12

12:                                               ; preds = %4, %7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #5
  ret %struct.AVInputFormat* %5
}

declare %struct.AVInputFormat* @av_demuxer_iterate(i8**) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVInputFormat* @av_probe_input_format3(%struct.AVProbeData* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca %struct.AVProbeData, align 8
  %5 = alloca i8*, align 8
  %6 = bitcast %struct.AVProbeData* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #5
  %7 = bitcast %struct.AVProbeData* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 32, i1 false)
  %8 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  store i8* null, i8** %5, align 8
  %9 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %4, i64 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @av_probe_input_format3.zerobuffer, i64 0, i64 0), i8** %9, align 8
  br label %13

13:                                               ; preds = %3, %12
  %14 = phi i8* [ %10, %3 ], [ getelementptr inbounds ([32 x i8], [32 x i8]* @av_probe_input_format3.zerobuffer, i64 0, i64 0), %12 ]
  %15 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %4, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp sgt i32 %16, 10
  br i1 %17, label %18, label %37

18:                                               ; preds = %13
  %19 = tail call i32 @ff_id3v2_match(i8* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)) #5
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %37, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @ff_id3v2_tag_len(i8* %14) #5
  %23 = add nsw i32 %22, 16
  %24 = icmp sgt i32 %16, %23
  br i1 %24, label %25, label %34

25:                                               ; preds = %21
  %26 = sext i32 %16 to i64
  %27 = sext i32 %22 to i64
  %28 = shl nsw i64 %27, 1
  %29 = add nsw i64 %28, 16
  %30 = icmp sgt i64 %29, %26
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds i8, i8* %14, i64 %27
  store i8* %32, i8** %9, align 8
  %33 = sub nsw i32 %16, %22
  store i32 %33, i32* %15, align 8
  br label %37

34:                                               ; preds = %21
  %35 = icmp sgt i32 %22, 1048575
  %36 = select i1 %35, i32 3, i32 2
  br label %37

37:                                               ; preds = %25, %34, %18, %13
  %38 = phi i32 [ 0, %18 ], [ 0, %13 ], [ %31, %25 ], [ %36, %34 ]
  %39 = icmp eq i32 %1, 0
  %40 = zext i1 %39 to i32
  %41 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %4, i64 0, i32 0
  %42 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %4, i64 0, i32 3
  br label %43

43:                                               ; preds = %123, %37
  %44 = phi %struct.AVInputFormat* [ %128, %123 ], [ null, %37 ]
  %45 = phi i32 [ %129, %123 ], [ 0, %37 ]
  br label %46

46:                                               ; preds = %43, %55
  %47 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** nonnull %5) #5
  %48 = icmp eq %struct.AVInputFormat* %47, null
  br i1 %48, label %130, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = and i32 %51, 1
  %53 = xor i32 %52, 1
  %54 = icmp eq i32 %53, %40
  br i1 %54, label %55, label %60

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @strcmp(i8* %57, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)) #4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %46

60:                                               ; preds = %55, %49
  %61 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 10
  %62 = load i32 (%struct.AVProbeData*)*, i32 (%struct.AVProbeData*)** %61, align 8
  %63 = icmp eq i32 (%struct.AVProbeData*)* %62, null
  br i1 %63, label %95, label %64

64:                                               ; preds = %60
  %65 = call i32 %62(%struct.AVProbeData* nonnull %4) #5
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = load i32, i32* %15, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 56, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %69, i32 %65, i32 %70) #5
  br label %71

71:                                               ; preds = %64, %67
  %72 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 3
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %111, label %75

75:                                               ; preds = %71
  %76 = load i8*, i8** %41, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %111, label %78

78:                                               ; preds = %75
  %79 = call i8* @strrchr(i8* nonnull %76, i32 46) #4
  %80 = icmp eq i8* %79, null
  br i1 %80, label %111, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i8, i8* %79, i64 1
  %83 = call i32 @av_match_name(i8* %82, i8* nonnull %73) #5
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %111, label %85

85:                                               ; preds = %81
  switch i32 %38, label %110 [
    i32 0, label %86
    i32 2, label %89
    i32 1, label %89
    i32 3, label %92
  ]

86:                                               ; preds = %85
  %87 = icmp sgt i32 %65, 1
  %88 = select i1 %87, i32 %65, i32 1
  br label %111

89:                                               ; preds = %85, %85
  %90 = icmp sgt i32 %65, 24
  %91 = select i1 %90, i32 %65, i32 24
  br label %111

92:                                               ; preds = %85
  %93 = icmp sgt i32 %65, 50
  %94 = select i1 %93, i32 %65, i32 50
  br label %111

95:                                               ; preds = %60
  %96 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 3
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %111, label %99

99:                                               ; preds = %95
  %100 = load i8*, i8** %41, align 8
  %101 = icmp eq i8* %100, null
  br i1 %101, label %109, label %102

102:                                              ; preds = %99
  %103 = call i8* @strrchr(i8* nonnull %100, i32 46) #4
  %104 = icmp eq i8* %103, null
  br i1 %104, label %109, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds i8, i8* %103, i64 1
  %107 = call i32 @av_match_name(i8* %106, i8* nonnull %97) #5
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %102, %99, %105
  br label %111

110:                                              ; preds = %85
  unreachable

111:                                              ; preds = %78, %75, %109, %105, %81, %71, %95, %92, %89, %86
  %112 = phi i32 [ %94, %92 ], [ %91, %89 ], [ %88, %86 ], [ %65, %81 ], [ %65, %71 ], [ 0, %95 ], [ 0, %109 ], [ 50, %105 ], [ %65, %75 ], [ %65, %78 ]
  %113 = load i8*, i8** %42, align 8
  %114 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 6
  %115 = load i8*, i8** %114, align 8
  %116 = call i32 @av_match_name(i8* %113, i8* %115) #5
  %117 = icmp ne i32 %116, 0
  %118 = icmp slt i32 %112, 75
  %119 = and i1 %118, %117
  br i1 %119, label %120, label %123

120:                                              ; preds = %111
  %121 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %47, i64 0, i32 0
  %122 = load i8*, i8** %121, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0), i8* %122, i32 %112, i32 75) #5
  br label %123

123:                                              ; preds = %120, %111
  %124 = phi i32 [ 75, %120 ], [ %112, %111 ]
  %125 = icmp sgt i32 %124, %45
  %126 = icmp eq i32 %124, %45
  %127 = select i1 %126, %struct.AVInputFormat* null, %struct.AVInputFormat* %44
  %128 = select i1 %125, %struct.AVInputFormat* %47, %struct.AVInputFormat* %127
  %129 = select i1 %125, i32 %124, i32 %45
  br label %43

130:                                              ; preds = %46
  %131 = icmp eq i32 %38, 2
  %132 = icmp slt i32 %45, 24
  %133 = select i1 %132, i32 %45, i32 24
  %134 = select i1 %131, i32 %133, i32 %45
  store i32 %134, i32* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #5
  ret %struct.AVInputFormat* %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @ff_id3v2_match(i8*, i8*) local_unnamed_addr #3

declare i32 @ff_id3v2_tag_len(i8*) local_unnamed_addr #3

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVInputFormat* @av_probe_input_format2(%struct.AVProbeData* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  store i32 -1431655766, i32* %4, align 4
  %6 = call %struct.AVInputFormat* @av_probe_input_format3(%struct.AVProbeData* %0, i32 %1, i32* nonnull %4)
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %2, align 4
  %9 = icmp sgt i32 %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i32 %7, i32* %2, align 4
  br label %11

11:                                               ; preds = %3, %10
  %12 = phi %struct.AVInputFormat* [ %6, %10 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  ret %struct.AVInputFormat* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.AVInputFormat* @av_probe_input_format(%struct.AVProbeData* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  store i32 -1431655766, i32* %3, align 4
  %5 = call %struct.AVInputFormat* @av_probe_input_format3(%struct.AVProbeData* %0, i32 %1, i32* nonnull %3) #5
  %6 = load i32, i32* %3, align 4
  %7 = icmp sgt i32 %6, 0
  %8 = select i1 %7, %struct.AVInputFormat* %5, %struct.AVInputFormat* null
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret %struct.AVInputFormat* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_probe_input_buffer2(%struct.AVIOContext*, %struct.AVInputFormat** nocapture, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.AVProbeData, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = bitcast %struct.AVProbeData* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #5
  %12 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 1
  %13 = bitcast i8** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false)
  %14 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 0
  %15 = icmp eq i8* %2, null
  %16 = select i1 %15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %2
  store i8* %16, i8** %14, align 8
  %17 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  store i8* null, i8** %9, align 8
  %18 = icmp eq i32 %5, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %6
  %20 = icmp ult i32 %5, 2048
  br i1 %20, label %21, label %22

21:                                               ; preds = %19
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i32 %5, i32 2048) #5
  br label %119

22:                                               ; preds = %6, %19
  %23 = phi i32 [ %5, %19 ], [ 1048576, %6 ]
  %24 = icmp ugt i32 %23, %4
  br i1 %24, label %25, label %119

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %0, i64 0, i32 0
  %27 = load %struct.AVClass*, %struct.AVClass** %26, align 8
  %28 = icmp eq %struct.AVClass* %27, null
  br i1 %28, label %41, label %29

29:                                               ; preds = %25
  %30 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #5
  store i8* null, i8** %10, align 8
  %31 = bitcast %struct.AVIOContext* %0 to i8*
  %32 = call i32 @av_opt_get(i8* %31, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i32 1, i8** nonnull %10) #5
  %33 = load i8*, i8** %10, align 8
  %34 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 3
  store i8* %33, i8** %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %29
  %37 = call i8* @strchr(i8* nonnull %33, i32 59) #4
  %38 = icmp eq i8* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %36
  store i8 0, i8* %37, align 1
  br label %40

40:                                               ; preds = %29, %36, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #5
  br label %41

41:                                               ; preds = %40, %25
  %42 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 2
  %43 = zext i32 %4 to i64
  %44 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 1
  %45 = bitcast i32* %7 to i8*
  %46 = load %struct.AVInputFormat*, %struct.AVInputFormat** %1, align 8
  %47 = icmp eq %struct.AVInputFormat* %46, null
  br i1 %47, label %51, label %101

48:                                               ; preds = %92
  %49 = load %struct.AVInputFormat*, %struct.AVInputFormat** %1, align 8
  %50 = icmp eq %struct.AVInputFormat* %49, null
  br i1 %50, label %51, label %101

51:                                               ; preds = %41, %48
  %52 = phi i32 [ %99, %48 ], [ 2048, %41 ]
  %53 = phi i32 [ %72, %48 ], [ 0, %41 ]
  %54 = icmp ult i32 %52, %23
  %55 = select i1 %54, i32 25, i32 0
  %56 = add nsw i32 %52, 32
  %57 = sext i32 %56 to i64
  %58 = call i32 @av_reallocp(i8* nonnull %17, i64 %57) #5
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %108, label %60

60:                                               ; preds = %51
  %61 = load i8*, i8** %9, align 8
  %62 = sext i32 %53 to i64
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  %64 = sub nsw i32 %52, %53
  %65 = call i32 @avio_read(%struct.AVIOContext* %0, i8* %63, i32 %64) #5
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %60
  %68 = icmp eq i32 %65, -541478725
  br i1 %68, label %69, label %108

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %55, %60 ], [ 0, %67 ]
  %71 = phi i32 [ %65, %60 ], [ 0, %67 ]
  %72 = add nsw i32 %71, %53
  %73 = icmp ult i32 %72, %4
  br i1 %73, label %92, label %74

74:                                               ; preds = %69
  %75 = sub i32 %72, %4
  store i32 %75, i32* %42, align 8
  %76 = load i8*, i8** %9, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 %43
  store i8* %77, i8** %44, align 8
  %78 = sext i32 %75 to i64
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #5
  store i32 -1431655766, i32* %7, align 4
  %80 = call %struct.AVInputFormat* @av_probe_input_format3(%struct.AVProbeData* nonnull %8, i32 1, i32* nonnull %7) #5
  %81 = load i32, i32* %7, align 4
  %82 = icmp sgt i32 %81, %70
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #5
  br i1 %82, label %84, label %83

83:                                               ; preds = %74
  store %struct.AVInputFormat* null, %struct.AVInputFormat** %1, align 8
  br label %92

84:                                               ; preds = %74
  store %struct.AVInputFormat* %80, %struct.AVInputFormat** %1, align 8
  %85 = icmp eq %struct.AVInputFormat* %80, null
  br i1 %85, label %92, label %86

86:                                               ; preds = %84
  %87 = icmp slt i32 %81, 26
  %88 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %80, i64 0, i32 0
  %89 = load i8*, i8** %88, align 8
  br i1 %87, label %90, label %91

90:                                               ; preds = %86
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 24, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i8* %89, i32 %81) #5
  br label %92

91:                                               ; preds = %86
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 48, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i8* %89, i32 %52, i32 %81) #5
  br label %92

92:                                               ; preds = %83, %84, %91, %90, %69
  %93 = phi i32 [ %70, %69 ], [ %81, %84 ], [ %81, %90 ], [ %81, %91 ], [ %70, %83 ]
  %94 = shl i32 %52, 1
  %95 = add nsw i32 %52, 1
  %96 = icmp ugt i32 %23, %95
  %97 = select i1 %96, i32 %23, i32 %95
  %98 = icmp ugt i32 %94, %97
  %99 = select i1 %98, i32 %97, i32 %94
  %100 = icmp ugt i32 %99, %23
  br i1 %100, label %101, label %48

101:                                              ; preds = %92, %48, %41
  %102 = phi i32 [ 0, %41 ], [ %93, %48 ], [ %93, %92 ]
  %103 = phi i32 [ 0, %41 ], [ %71, %48 ], [ %71, %92 ]
  %104 = phi i32 [ 0, %41 ], [ %72, %48 ], [ %72, %92 ]
  %105 = load %struct.AVInputFormat*, %struct.AVInputFormat** %1, align 8
  %106 = icmp eq %struct.AVInputFormat* %105, null
  %107 = select i1 %106, i32 -1094995529, i32 %103
  br label %108

108:                                              ; preds = %67, %51, %101
  %109 = phi i32 [ %104, %101 ], [ %53, %51 ], [ %53, %67 ]
  %110 = phi i32 [ %102, %101 ], [ %55, %51 ], [ %55, %67 ]
  %111 = phi i32 [ %107, %101 ], [ %65, %67 ], [ %58, %51 ]
  %112 = call i32 @ffio_rewind_with_probe_data(%struct.AVIOContext* %0, i8** nonnull %9, i32 %109) #5
  %113 = icmp sgt i32 %111, -1
  %114 = select i1 %113, i32 %112, i32 %111
  %115 = getelementptr inbounds %struct.AVProbeData, %struct.AVProbeData* %8, i64 0, i32 3
  %116 = bitcast i8** %115 to i8*
  call void @av_freep(i8* %116) #5
  %117 = icmp slt i32 %114, 0
  %118 = select i1 %117, i32 %114, i32 %110
  br label %119

119:                                              ; preds = %22, %108, %21
  %120 = phi i32 [ -22, %21 ], [ %118, %108 ], [ -22, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #5
  ret i32 %120
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av_opt_get(i8*, i8*, i32, i8**) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #2

declare i32 @av_reallocp(i8*, i64) local_unnamed_addr #3

declare i32 @avio_read(%struct.AVIOContext*, i8*, i32) local_unnamed_addr #3

declare i32 @ffio_rewind_with_probe_data(%struct.AVIOContext*, i8**, i32) local_unnamed_addr #3

declare void @av_freep(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_probe_input_buffer(%struct.AVIOContext*, %struct.AVInputFormat** nocapture, i8*, i8*, i32, i32) local_unnamed_addr #0 {
  %7 = tail call i32 @av_probe_input_buffer2(%struct.AVIOContext* %0, %struct.AVInputFormat** %1, i8* %2, i8* %3, i32 %4, i32 %5)
  %8 = icmp slt i32 %7, 0
  %9 = select i1 %8, i32 %7, i32 0
  ret i32 %9
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
