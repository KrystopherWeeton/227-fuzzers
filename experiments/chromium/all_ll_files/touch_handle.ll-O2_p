; ModuleID = '../../ui/touch_selection/touch_handle.cc'
source_filename = "../../ui/touch_selection/touch_handle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::TouchHandle" = type { %"class.ui::TouchSelectionDraggable", %"class.std::__1::unique_ptr", %"class.ui::TouchHandleClient"*, %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::RectF", i32, i32, %"class.gfx::PointF", %"class.gfx::Vector2dF", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.gfx::PointF", float, i8, i8, i8, i8, i8, i8, i8, i8, float }
%"class.ui::TouchSelectionDraggable" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::TouchHandleDrawable"* }
%"class.ui::TouchHandleDrawable" = type { i32 (...)** }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::Vector2dF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.gfx::PointF" = type { float, float }
%"class.ui::TouchHandleClient" = type { %"class.ui::TouchSelectionDraggableClient" }
%"class.ui::TouchSelectionDraggableClient" = type { i32 (...)** }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.ui::MotionEvent" = type { i32 (...)** }
%"class.base::TimeDelta" = type { i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.2", [4 x i8] }>
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }

$_ZNK4base9TimeDeltadvES0_ = comdat any

@_ZTVN2ui11TouchHandleE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::TouchHandle"*)* @_ZN2ui11TouchHandleD2Ev to i8*), i8* bitcast (void (%"class.ui::TouchHandle"*)* @_ZN2ui11TouchHandleD0Ev to i8*), i8* bitcast (i1 (%"class.ui::TouchHandle"*, %"class.ui::MotionEvent"*)* @_ZN2ui11TouchHandle20WillHandleTouchEventERKNS_11MotionEventE to i8*), i8* bitcast (i1 (%"class.ui::TouchHandle"*)* @_ZNK2ui11TouchHandle8IsActiveEv to i8*)] }, align 8
@.str = private unnamed_addr constant [58 x i8] c"Event.TouchSelectionHandle.BottomHandleClippingPercentage\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Event.TouchSelectionHandle.BestVerticalClippingPercentage\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"Event.TouchSelectionHandle.ShouldFlipHandleVertically\00", align 1
@.str.3 = private unnamed_addr constant [57 x i8] c"Event.TouchSelectionHandle.FlippingImprovementPercentage\00", align 1
@.str.4 = private unnamed_addr constant [56 x i8] c"Event.TouchSelectionHandle.LeftHandleClippingPercentage\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"Event.TouchSelectionHandle.RightHandleClippingPercentage\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_1.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_2.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_3.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_4.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN2ui11TouchHandleC1EPNS_17TouchHandleClientENS_22TouchHandleOrientationERKN3gfx5RectFE = hidden unnamed_addr alias void (%"class.ui::TouchHandle"*, %"class.ui::TouchHandleClient"*, i32, %"class.gfx::RectF"*), void (%"class.ui::TouchHandle"*, %"class.ui::TouchHandleClient"*, i32, %"class.gfx::RectF"*)* @_ZN2ui11TouchHandleC2EPNS_17TouchHandleClientENS_22TouchHandleOrientationERKN3gfx5RectFE
@_ZN2ui11TouchHandleD1Ev = hidden unnamed_addr alias void (%"class.ui::TouchHandle"*), void (%"class.ui::TouchHandle"*)* @_ZN2ui11TouchHandleD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandleC2EPNS_17TouchHandleClientENS_22TouchHandleOrientationERKN3gfx5RectFE(%"class.ui::TouchHandle"*, %"class.ui::TouchHandleClient"*, i32, %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui11TouchHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = bitcast %"class.ui::TouchHandleClient"* %1 to %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)***
  %7 = load %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)**, %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)*, %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)** %7, i64 8
  %9 = load %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)*, %"class.ui::TouchHandleDrawable"* (%"class.ui::TouchHandleClient"*)** %8, align 8
  %10 = tail call %"class.ui::TouchHandleDrawable"* %9(%"class.ui::TouchHandleClient"* %1) #10
  %11 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.ui::TouchHandleDrawable"* %10, %"class.ui::TouchHandleDrawable"** %11, align 8
  %12 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  store %"class.ui::TouchHandleClient"* %1, %"class.ui::TouchHandleClient"** %12, align 8
  %13 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5
  %15 = bitcast %"class.gfx::RectF"* %14 to i8*
  %16 = bitcast %"class.gfx::RectF"* %3 to i8*
  %17 = bitcast %"class.gfx::PointF"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 4 %16, i64 16, i1 false)
  %18 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  store i32 %2, i32* %18, align 8
  %19 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 7
  store i32 3, i32* %19, align 4
  %20 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 8, i32 0
  %21 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %22 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 15
  %23 = bitcast float* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 45, i1 false)
  store i8 1, i8* %22, align 1
  %24 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %25 = bitcast %"class.ui::TouchHandleDrawable"* %10 to void (%"class.ui::TouchHandleDrawable"*, i1)***
  call void @llvm.memset.p0i8.i64(i8* align 2 %24, i8 0, i64 6, i1 false)
  %26 = load void (%"class.ui::TouchHandleDrawable"*, i1)**, void (%"class.ui::TouchHandleDrawable"*, i1)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, i1)*, void (%"class.ui::TouchHandleDrawable"*, i1)** %26, i64 2
  %28 = load void (%"class.ui::TouchHandleDrawable"*, i1)*, void (%"class.ui::TouchHandleDrawable"*, i1)** %27, align 8
  tail call void %28(%"class.ui::TouchHandleDrawable"* %10, i1 zeroext true) #10
  %29 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %11, align 8
  %30 = load i32, i32* %18, align 8
  %31 = bitcast %"class.ui::TouchHandleDrawable"* %29 to void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)***
  %32 = load void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)**, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)** %32, i64 3
  %34 = load void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)** %33, align 8
  tail call void %34(%"class.ui::TouchHandleDrawable"* %29, i32 %30, i1 zeroext false, i1 zeroext false) #10
  %35 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %11, align 8
  %36 = bitcast %"class.ui::TouchHandleDrawable"* %35 to void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)***
  %37 = load void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)**, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)** %37, i64 4
  %39 = load void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)** %38, align 8
  tail call void %39(%"class.ui::TouchHandleDrawable"* %35, %"class.gfx::PointF"* dereferenceable(8) %13) #10
  %40 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %11, align 8
  %41 = load float, float* %21, align 8
  %42 = bitcast %"class.ui::TouchHandleDrawable"* %40 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %43 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %43, i64 5
  %45 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %44, align 8
  tail call void %45(%"class.ui::TouchHandleDrawable"* %40, float %41) #10
  %46 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %11, align 8
  %47 = bitcast %"class.ui::TouchHandleDrawable"* %46 to float (%"class.ui::TouchHandleDrawable"*)***
  %48 = load float (%"class.ui::TouchHandleDrawable"*)**, float (%"class.ui::TouchHandleDrawable"*)*** %47, align 8
  %49 = getelementptr inbounds float (%"class.ui::TouchHandleDrawable"*)*, float (%"class.ui::TouchHandleDrawable"*)** %48, i64 7
  %50 = load float (%"class.ui::TouchHandleDrawable"*)*, float (%"class.ui::TouchHandleDrawable"*)** %49, align 8
  %51 = tail call float %50(%"class.ui::TouchHandleDrawable"* %46) #10
  %52 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  store float %51, float* %52, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandleD2Ev(%"class.ui::TouchHandle"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui11TouchHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %3, align 8
  store %"class.ui::TouchHandleDrawable"* null, %"class.ui::TouchHandleDrawable"** %3, align 8
  %5 = icmp eq %"class.ui::TouchHandleDrawable"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.ui::TouchHandleDrawable"* %4 to void (%"class.ui::TouchHandleDrawable"*)***
  %8 = load void (%"class.ui::TouchHandleDrawable"*)**, void (%"class.ui::TouchHandleDrawable"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*)*, void (%"class.ui::TouchHandleDrawable"*)** %8, i64 1
  %10 = load void (%"class.ui::TouchHandleDrawable"*)*, void (%"class.ui::TouchHandleDrawable"*)** %9, align 8
  tail call void %10(%"class.ui::TouchHandleDrawable"* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandleD0Ev(%"class.ui::TouchHandle"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui11TouchHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %3, align 8
  store %"class.ui::TouchHandleDrawable"* null, %"class.ui::TouchHandleDrawable"** %3, align 8
  %5 = icmp eq %"class.ui::TouchHandleDrawable"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.ui::TouchHandleDrawable"* %4 to void (%"class.ui::TouchHandleDrawable"*)***
  %8 = load void (%"class.ui::TouchHandleDrawable"*)**, void (%"class.ui::TouchHandleDrawable"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*)*, void (%"class.ui::TouchHandleDrawable"*)** %8, i64 1
  %10 = load void (%"class.ui::TouchHandleDrawable"*)*, void (%"class.ui::TouchHandleDrawable"*)** %9, align 8
  tail call void %10(%"class.ui::TouchHandleDrawable"* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.ui::TouchHandle"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle10SetEnabledEb(%"class.ui::TouchHandle"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 15
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = zext i8 %5 to i32
  %7 = zext i1 %1 to i32
  %8 = icmp eq i32 %6, %7
  br i1 %8, label %57, label %9

9:                                                ; preds = %2
  br i1 %1, label %50, label %10

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %12 = load i8, i8* %11, align 2, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  store i8 0, i8* %11, align 2
  %15 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %18, align 4
  br i1 %17, label %19, label %32

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %22 = load float, float* %21, align 8
  %23 = fcmp oeq float %22, 0.000000e+00
  br i1 %23, label %32, label %24

24:                                               ; preds = %19
  %25 = bitcast float* %21 to i32*
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %27 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %26, align 8
  %28 = bitcast %"class.ui::TouchHandleDrawable"* %27 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %29 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %29, i64 5
  %31 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %30, align 8
  tail call void %31(%"class.ui::TouchHandleDrawable"* %27, float 0.000000e+00) #10
  br label %32

32:                                               ; preds = %14, %10, %19, %24
  tail call void @_ZN2ui11TouchHandle7EndDragEv(%"class.ui::TouchHandle"* %0)
  %33 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %33, align 4
  %34 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %34, align 8
  %35 = load i8, i8* %11, align 2, !range !2
  %36 = icmp eq i8 %35, 0
  %37 = select i1 %36, i32 0, i32 1065353216
  %38 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %39 = load float, float* %38, align 8
  %40 = bitcast i32 %37 to float
  %41 = fcmp oeq float %39, %40
  br i1 %41, label %50, label %42

42:                                               ; preds = %32
  %43 = bitcast float* %38 to i32*
  store i32 %37, i32* %43, align 8
  %44 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %45 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %44, align 8
  %46 = bitcast %"class.ui::TouchHandleDrawable"* %45 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %47 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %47, i64 5
  %49 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %48, align 8
  tail call void %49(%"class.ui::TouchHandleDrawable"* %45, float %40) #10
  br label %50

50:                                               ; preds = %42, %32, %9
  store i8 %3, i8* %4, align 1
  %51 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %52 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %51, align 8
  %53 = bitcast %"class.ui::TouchHandleDrawable"* %52 to void (%"class.ui::TouchHandleDrawable"*, i1)***
  %54 = load void (%"class.ui::TouchHandleDrawable"*, i1)**, void (%"class.ui::TouchHandleDrawable"*, i1)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, i1)*, void (%"class.ui::TouchHandleDrawable"*, i1)** %54, i64 2
  %56 = load void (%"class.ui::TouchHandleDrawable"*, i1)*, void (%"class.ui::TouchHandleDrawable"*, i1)** %55, align 8
  tail call void %56(%"class.ui::TouchHandleDrawable"* %52, i1 zeroext %1) #10
  br label %57

57:                                               ; preds = %2, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle10SetVisibleEbNS0_14AnimationStyleE(%"class.ui::TouchHandle"* nocapture, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = zext i8 %5 to i32
  %7 = zext i1 %1 to i32
  %8 = icmp eq i32 %6, %7
  br i1 %8, label %39, label %9

9:                                                ; preds = %3
  %10 = zext i1 %1 to i8
  store i8 %10, i8* %4, align 2
  br i1 %1, label %11, label %13

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %12, align 1
  br label %13

13:                                               ; preds = %11, %9
  %14 = icmp ne i32 %2, 0
  %15 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %13
  %19 = zext i1 %14 to i8
  %20 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 %19, i8* %20, align 4
  br label %39

21:                                               ; preds = %13
  br i1 %14, label %22, label %23

22:                                               ; preds = %21
  tail call void @_ZN2ui11TouchHandle9BeginFadeEv(%"class.ui::TouchHandle"* %0)
  br label %39

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %24, align 4
  %25 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %25, align 8
  %26 = select i1 %1, i32 1065353216, i32 0
  %27 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %28 = load float, float* %27, align 8
  %29 = bitcast i32 %26 to float
  %30 = fcmp oeq float %28, %29
  br i1 %30, label %39, label %31

31:                                               ; preds = %23
  %32 = bitcast float* %27 to i32*
  store i32 %26, i32* %32, align 8
  %33 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %34 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %33, align 8
  %35 = bitcast %"class.ui::TouchHandleDrawable"* %34 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %36 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %36, i64 5
  %38 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %37, align 8
  tail call void %38(%"class.ui::TouchHandleDrawable"* %34, float %29) #10
  br label %39

39:                                               ; preds = %31, %23, %18, %22, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle7EndDragEv(%"class.ui::TouchHandle"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %53, label %5

5:                                                ; preds = %1
  store i8 0, i8* %2, align 1
  %6 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 18
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %8 = bitcast %"class.ui::TouchHandleClient"** %7 to %"class.ui::TouchSelectionDraggableClient"**
  %9 = load %"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggableClient"** %8, align 8
  %10 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0
  %11 = bitcast %"class.ui::TouchSelectionDraggableClient"* %9 to void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)***
  %12 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)**, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)** %12, i64 4
  %14 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*)** %13, align 8
  tail call void %14(%"class.ui::TouchSelectionDraggableClient"* %9, %"class.ui::TouchSelectionDraggable"* dereferenceable(8) %10) #10
  %15 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 3
  br i1 %17, label %30, label %18

18:                                               ; preds = %5
  store i32 3, i32* %15, align 4
  %19 = load i8, i8* %2, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %18
  store i32 %16, i32* %15, align 4
  br label %28

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, %16
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  store i32 %16, i32* %23, align 8
  %27 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %27, align 1
  br label %28

28:                                               ; preds = %21, %22, %26
  %29 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %29, align 1
  tail call void @_ZN2ui11TouchHandle18UpdateHandleLayoutEv(%"class.ui::TouchHandle"* %0)
  br label %30

30:                                               ; preds = %5, %28
  %31 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  %32 = load i8, i8* %31, align 4, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %30
  tail call void @_ZN2ui11TouchHandle9BeginFadeEv(%"class.ui::TouchHandle"* %0)
  br label %53

35:                                               ; preds = %30
  store i8 0, i8* %31, align 4
  %36 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %36, align 8
  %37 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %38 = load i8, i8* %37, align 2, !range !2
  %39 = icmp eq i8 %38, 0
  %40 = select i1 %39, i32 0, i32 1065353216
  %41 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %42 = load float, float* %41, align 8
  %43 = bitcast i32 %40 to float
  %44 = fcmp oeq float %42, %43
  br i1 %44, label %53, label %45

45:                                               ; preds = %35
  %46 = bitcast float* %41 to i32*
  store i32 %40, i32* %46, align 8
  %47 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %48 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %47, align 8
  %49 = bitcast %"class.ui::TouchHandleDrawable"* %48 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %50 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %50, i64 5
  %52 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %51, align 8
  tail call void %52(%"class.ui::TouchHandleDrawable"* %48, float %43) #10
  br label %53

53:                                               ; preds = %45, %35, %1, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle7EndFadeEv(%"class.ui::TouchHandle"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, i32 0, i32 1065353216
  %8 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %9 = load float, float* %8, align 8
  %10 = bitcast i32 %7 to float
  %11 = fcmp oeq float %9, %10
  br i1 %11, label %20, label %12

12:                                               ; preds = %1
  %13 = bitcast float* %8 to i32*
  store i32 %7, i32* %13, align 8
  %14 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %14, align 8
  %16 = bitcast %"class.ui::TouchHandleDrawable"* %15 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %17 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %17, i64 5
  %19 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %18, align 8
  tail call void %19(%"class.ui::TouchHandleDrawable"* %15, float %10) #10
  br label %20

20:                                               ; preds = %1, %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2ui11TouchHandle23SetUpdateLayoutRequiredEv(%"class.ui::TouchHandle"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %2, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle9BeginFadeEv(%"class.ui::TouchHandle"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, float 0.000000e+00, float 1.000000e+00
  %8 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %9 = load float, float* %8, align 8
  %10 = fcmp oeq float %7, %9
  br i1 %10, label %11, label %24

11:                                               ; preds = %1
  store i8 0, i8* %3, align 4
  %12 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %12, align 8
  %13 = select i1 %6, i32 0, i32 1065353216
  %14 = bitcast i32 %13 to float
  %15 = fcmp oeq float %9, %14
  br i1 %15, label %67, label %16

16:                                               ; preds = %11
  %17 = bitcast float* %8 to i32*
  store i32 %13, i32* %17, align 8
  %18 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %19 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %18, align 8
  %20 = bitcast %"class.ui::TouchHandleDrawable"* %19 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %21 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %21, i64 5
  %23 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %22, align 8
  tail call void %23(%"class.ui::TouchHandleDrawable"* %19, float %14) #10
  br label %67

24:                                               ; preds = %1
  %25 = tail call i64 @_ZN4base9TimeTicks3NowEv() #10
  %26 = load float, float* %8, align 8
  %27 = fsub float %7, %26
  %28 = tail call float @llvm.fabs.f32(float %27) #10
  %29 = fmul float %28, 2.000000e+05
  %30 = fcmp oge float %29, 0xC3E0000000000000
  %31 = fcmp ole float %29, 0x43DFFFFFE0000000
  %32 = and i1 %31, %30
  %33 = fptosi float %29 to i64
  br i1 %32, label %34, label %44

34:                                               ; preds = %24
  %35 = add i64 %33, -9223372036854775807
  %36 = icmp ult i64 %35, 2
  br i1 %36, label %44, label %37

37:                                               ; preds = %34
  %38 = icmp slt i64 %33, 0
  %39 = select i1 %38, i64 -9223372036854775808, i64 9223372036854775807
  %40 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %25, i64 %33) #10
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  %43 = select i1 %41, i64 %39, i64 %42, !prof !3
  br label %53

44:                                               ; preds = %24, %34
  %45 = phi i64 [ %33, %34 ], [ 9223372036854775807, %24 ]
  %46 = add i64 %25, -9223372036854775807
  %47 = icmp ugt i64 %46, 1
  %48 = icmp eq i64 %25, %45
  %49 = or i1 %47, %48
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0)) #10
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #10
  br label %53

53:                                               ; preds = %37, %44, %50
  %54 = phi i64 [ %43, %37 ], [ %45, %44 ], [ %45, %50 ]
  %55 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 %54, i64* %55, align 8
  %56 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %57 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 12
  %58 = bitcast %"class.gfx::PointF"* %56 to i64*
  %59 = bitcast %"class.gfx::PointF"* %57 to i64*
  %60 = load i64, i64* %58, align 4
  store i64 %60, i64* %59, align 8
  %61 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %62 = load %"class.ui::TouchHandleClient"*, %"class.ui::TouchHandleClient"** %61, align 8
  %63 = bitcast %"class.ui::TouchHandleClient"* %62 to void (%"class.ui::TouchHandleClient"*)***
  %64 = load void (%"class.ui::TouchHandleClient"*)**, void (%"class.ui::TouchHandleClient"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.ui::TouchHandleClient"*)*, void (%"class.ui::TouchHandleClient"*)** %64, i64 7
  %66 = load void (%"class.ui::TouchHandleClient"*)*, void (%"class.ui::TouchHandleClient"*)** %65, align 8
  call void %66(%"class.ui::TouchHandleClient"* %62) #10
  br label %67

67:                                               ; preds = %16, %11, %53
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle8SetFocusERKN3gfx6PointFES4_(%"class.ui::TouchHandle"* nocapture, %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %4, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %6, %8
  br i1 %9, label %10, label %28

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 4, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fcmp oeq float %12, %14
  br i1 %15, label %16, label %28

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3, i32 0
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %2, i64 0, i32 0
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %18, %20
  br i1 %21, label %22, label %28

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %2, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fcmp oeq float %24, %26
  br i1 %27, label %37, label %28

28:                                               ; preds = %16, %3, %22, %10
  %29 = bitcast %"class.gfx::PointF"* %1 to i64*
  %30 = bitcast %"class.gfx::PointF"* %4 to i64*
  %31 = load i64, i64* %29, align 4
  store i64 %31, i64* %30, align 8
  %32 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %33 = bitcast %"class.gfx::PointF"* %2 to i64*
  %34 = bitcast %"class.gfx::PointF"* %32 to i64*
  %35 = load i64, i64* %33, align 4
  store i64 %35, i64* %34, align 8
  %36 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %36, align 1
  br label %37

37:                                               ; preds = %22, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle15SetViewportRectERKN3gfx5RectFE(%"class.ui::TouchHandle"* nocapture, %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %3, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %5, %7
  br i1 %8, label %9, label %27

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fcmp oeq float %11, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 1, i32 0
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %17, %19
  br i1 %20, label %21, label %27

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 1, i32 1
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %25 = load float, float* %24, align 4
  %26 = fcmp oeq float %23, %25
  br i1 %26, label %31, label %27

27:                                               ; preds = %2, %15, %9, %21
  %28 = bitcast %"class.gfx::RectF"* %3 to i8*
  %29 = bitcast %"class.gfx::RectF"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 4 %29, i64 16, i1 false)
  %30 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %30, align 1
  br label %31

31:                                               ; preds = %21, %27
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle14SetOrientationENS_22TouchHandleOrientationE(%"class.ui::TouchHandle"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 7
  store i32 %1, i32* %7, align 4
  br label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  store i32 %1, i32* %9, align 8
  %13 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  store i8 1, i8* %13, align 1
  br label %14

14:                                               ; preds = %8, %12, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui11TouchHandle20WillHandleTouchEventERKNS_11MotionEventE(%"class.ui::TouchHandle"*, %"class.ui::MotionEvent"* dereferenceable(8)) unnamed_addr #5 align 2 {
  %3 = alloca i64, align 8
  %4 = alloca <2 x float>, align 8
  %5 = alloca <2 x float>, align 8
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = alloca <2 x float>, align 8
  %8 = bitcast <2 x float>* %7 to %"class.gfx::Vector2dF"*
  %9 = alloca <2 x float>, align 8
  %10 = bitcast <2 x float>* %9 to %"class.gfx::PointF"*
  %11 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 15
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %209, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = bitcast %"class.ui::MotionEvent"* %1 to i32 (%"class.ui::MotionEvent"*)***
  br i1 %17, label %19, label %25

19:                                               ; preds = %14
  %20 = load i32 (%"class.ui::MotionEvent"*)**, i32 (%"class.ui::MotionEvent"*)*** %18, align 8
  %21 = getelementptr inbounds i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %20, i64 3
  %22 = load i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %21, align 8
  %23 = tail call i32 %22(%"class.ui::MotionEvent"* %1) #10
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %209

25:                                               ; preds = %14, %19
  %26 = load i32 (%"class.ui::MotionEvent"*)**, i32 (%"class.ui::MotionEvent"*)*** %18, align 8
  %27 = getelementptr inbounds i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %26, i64 3
  %28 = load i32 (%"class.ui::MotionEvent"*)*, i32 (%"class.ui::MotionEvent"*)** %27, align 8
  %29 = tail call i32 %28(%"class.ui::MotionEvent"* %1) #10
  switch i32 %29, label %209 [
    i32 1, label %30
    i32 3, label %140
    i32 2, label %180
    i32 4, label %208
  ]

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %32 = load i8, i8* %31, align 2, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %209, label %34

34:                                               ; preds = %30
  %35 = bitcast %"class.ui::MotionEvent"* %1 to float (%"class.ui::MotionEvent"*, i64)***
  %36 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %35, align 8
  %37 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %36, i64 7
  %38 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %37, align 8
  %39 = tail call float %38(%"class.ui::MotionEvent"* %1, i64 0) #10
  %40 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %35, align 8
  %41 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %40, i64 8
  %42 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %41, align 8
  %43 = tail call float %42(%"class.ui::MotionEvent"* %1, i64 0) #10
  %44 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %35, align 8
  %45 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %44, i64 11
  %46 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %45, align 8
  %47 = tail call float %46(%"class.ui::MotionEvent"* %1, i64 0) #10
  %48 = fcmp olt float %47, 1.000000e+00
  %49 = select i1 %48, float 1.000000e+00, float %47
  %50 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %50) #10
  %51 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %52 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -1, i64 16, i1 false)
  %53 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %51, align 8
  %54 = bitcast %"class.ui::TouchHandleDrawable"* %53 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %55 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %54, align 8
  %56 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %55, i64 6
  %57 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %56, align 8
  %58 = tail call { <2 x float>, <2 x float> } %57(%"class.ui::TouchHandleDrawable"* %53) #10
  %59 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %60 = extractvalue { <2 x float>, <2 x float> } %58, 0
  store <2 x float> %60, <2 x float>* %59, align 8
  %61 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %62 = extractvalue { <2 x float>, <2 x float> } %58, 1
  store <2 x float> %62, <2 x float>* %61, align 8
  %63 = extractelement <2 x float> %60, i32 1
  %64 = fcmp olt float %43, %63
  br i1 %64, label %94, label %65

65:                                               ; preds = %34
  %66 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %67 = fcmp ogt float %49, 3.600000e+01
  %68 = select i1 %67, float 3.600000e+01, float %49
  %69 = fmul float %68, 5.000000e-01
  %70 = bitcast i64* %3 to %"class.gfx::PointF"*
  %71 = bitcast <2 x float>* %4 to %"class.gfx::PointF"*
  %72 = bitcast <2 x float>* %5 to %"class.gfx::Vector2dF"*
  %73 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  %74 = bitcast i64* %3 to float*
  store float %39, float* %74, align 8
  %75 = getelementptr inbounds i8, i8* %73, i64 4
  %76 = bitcast i8* %75 to float*
  store float %43, float* %76, align 4
  %77 = bitcast { <2 x float>, <2 x float> }* %6 to %"class.gfx::PointF"*
  call void @_ZN3gfx6PointF8SetToMaxERKS0_(%"class.gfx::PointF"* nonnull %70, %"class.gfx::PointF"* nonnull dereferenceable(8) %77) #10
  %78 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #10
  %79 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %80 = load <2 x float>, <2 x float>* %79, align 8
  %81 = bitcast float* %66 to <2 x float>*
  %82 = load <2 x float>, <2 x float>* %81, align 8
  %83 = fadd <2 x float> %80, %82
  store <2 x float> %83, <2 x float>* %4, align 8
  call void @_ZN3gfx6PointF8SetToMinERKS0_(%"class.gfx::PointF"* nonnull %70, %"class.gfx::PointF"* nonnull dereferenceable(8) %71) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #10
  %84 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #10
  %85 = bitcast i64* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 8
  %87 = insertelement <2 x float> undef, float %39, i32 0
  %88 = insertelement <2 x float> %87, float %43, i32 1
  %89 = fsub <2 x float> %88, %86
  store <2 x float> %89, <2 x float>* %5, align 8
  %90 = call double @_ZNK3gfx9Vector2dF13LengthSquaredEv(%"class.gfx::Vector2dF"* nonnull %72) #10
  %91 = fmul float %69, %69
  %92 = fpext float %91 to double
  %93 = fcmp olt double %90, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #10
  br i1 %93, label %95, label %94

94:                                               ; preds = %65, %34
  call void @_ZN2ui11TouchHandle7EndDragEv(%"class.ui::TouchHandle"* %0)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #10
  br label %209

95:                                               ; preds = %65
  %96 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 8, i32 0
  store float %39, float* %96, align 8
  %97 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 8, i32 1
  store float %43, float* %97, align 4
  %98 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %99 = bitcast %"class.gfx::PointF"* %98 to <2 x float>*
  %100 = load <2 x float>, <2 x float>* %99, align 4
  %101 = fsub <2 x float> %100, %88
  %102 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 9
  %103 = bitcast %"class.gfx::Vector2dF"* %102 to <2 x float>*
  store <2 x float> %101, <2 x float>* %103, align 8
  %104 = bitcast %"class.ui::MotionEvent"* %1 to i64 (%"class.ui::MotionEvent"*)***
  %105 = load i64 (%"class.ui::MotionEvent"*)**, i64 (%"class.ui::MotionEvent"*)*** %104, align 8
  %106 = getelementptr inbounds i64 (%"class.ui::MotionEvent"*)*, i64 (%"class.ui::MotionEvent"*)** %105, i64 22
  %107 = load i64 (%"class.ui::MotionEvent"*)*, i64 (%"class.ui::MotionEvent"*)** %106, align 8
  %108 = call i64 %107(%"class.ui::MotionEvent"* %1) #10
  %109 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 10, i32 0, i32 0
  store i64 %108, i64* %109, align 8
  %110 = load i8, i8* %15, align 1, !range !2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %112, label %139

112:                                              ; preds = %95
  %113 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %113, align 4
  %114 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %114, align 8
  %115 = load i8, i8* %31, align 2, !range !2
  %116 = icmp eq i8 %115, 0
  %117 = select i1 %116, i32 0, i32 1065353216
  %118 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %119 = load float, float* %118, align 8
  %120 = bitcast i32 %117 to float
  %121 = fcmp oeq float %119, %120
  br i1 %121, label %129, label %122

122:                                              ; preds = %112
  %123 = bitcast float* %118 to i32*
  store i32 %117, i32* %123, align 8
  %124 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %51, align 8
  %125 = bitcast %"class.ui::TouchHandleDrawable"* %124 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %126 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %125, align 8
  %127 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %126, i64 5
  %128 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %127, align 8
  call void %128(%"class.ui::TouchHandleDrawable"* %124, float %120) #10
  br label %129

129:                                              ; preds = %122, %112
  store i8 1, i8* %15, align 1
  %130 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 18
  store i8 1, i8* %130, align 8
  %131 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %132 = bitcast %"class.ui::TouchHandleClient"** %131 to %"class.ui::TouchSelectionDraggableClient"**
  %133 = load %"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggableClient"** %132, align 8
  %134 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0
  %135 = bitcast %"class.ui::TouchSelectionDraggableClient"* %133 to void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)***
  %136 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)**, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %136, i64 2
  %138 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %137, align 8
  call void %138(%"class.ui::TouchSelectionDraggableClient"* %133, %"class.ui::TouchSelectionDraggable"* dereferenceable(8) %134, %"class.gfx::PointF"* dereferenceable(8) %98) #10
  br label %139

139:                                              ; preds = %95, %129
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #10
  br label %209

140:                                              ; preds = %25
  %141 = bitcast %"class.ui::MotionEvent"* %1 to float (%"class.ui::MotionEvent"*, i64)***
  %142 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %141, align 8
  %143 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %142, i64 7
  %144 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %143, align 8
  %145 = tail call float %144(%"class.ui::MotionEvent"* %1, i64 0) #10
  %146 = load float (%"class.ui::MotionEvent"*, i64)**, float (%"class.ui::MotionEvent"*, i64)*** %141, align 8
  %147 = getelementptr inbounds float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %146, i64 8
  %148 = load float (%"class.ui::MotionEvent"*, i64)*, float (%"class.ui::MotionEvent"*, i64)** %147, align 8
  %149 = tail call float %148(%"class.ui::MotionEvent"* %1, i64 0) #10
  %150 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %151 = bitcast %"class.ui::TouchHandleClient"** %150 to %"class.ui::TouchSelectionDraggableClient"**
  %152 = load %"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggableClient"** %151, align 8
  %153 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %153) #10
  %154 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 8, i32 0
  %155 = bitcast float* %154 to <2 x float>*
  %156 = load <2 x float>, <2 x float>* %155, align 4
  %157 = insertelement <2 x float> undef, float %145, i32 0
  %158 = insertelement <2 x float> %157, float %149, i32 1
  %159 = fsub <2 x float> %156, %158
  store <2 x float> %159, <2 x float>* %7, align 8
  %160 = bitcast %"class.ui::TouchSelectionDraggableClient"* %152 to i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)***
  %161 = load i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)**, i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)*** %160, align 8
  %162 = getelementptr inbounds i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)*, i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)** %161, i64 5
  %163 = load i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)*, i1 (%"class.ui::TouchSelectionDraggableClient"*, %"class.gfx::Vector2dF"*)** %162, align 8
  %164 = call zeroext i1 %163(%"class.ui::TouchSelectionDraggableClient"* %152, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %8) #10
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 18
  %167 = load i8, i8* %166, align 8, !range !2
  %168 = and i8 %167, %165
  store i8 %168, i8* %166, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %153) #10
  %169 = load %"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggableClient"** %151, align 8
  %170 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0
  %171 = bitcast <2 x float>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171) #10
  %172 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 9, i32 0
  %173 = bitcast float* %172 to <2 x float>*
  %174 = load <2 x float>, <2 x float>* %173, align 4
  %175 = fadd <2 x float> %158, %174
  store <2 x float> %175, <2 x float>* %9, align 8
  %176 = bitcast %"class.ui::TouchSelectionDraggableClient"* %169 to void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)***
  %177 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)**, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*** %176, align 8
  %178 = getelementptr inbounds void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %177, i64 3
  %179 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %178, align 8
  call void %179(%"class.ui::TouchSelectionDraggableClient"* %169, %"class.ui::TouchSelectionDraggable"* dereferenceable(8) %170, %"class.gfx::PointF"* nonnull dereferenceable(8) %10) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171) #10
  br label %209

180:                                              ; preds = %25
  %181 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 18
  %182 = load i8, i8* %181, align 8, !range !2
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %207, label %184

184:                                              ; preds = %180
  %185 = bitcast %"class.ui::MotionEvent"* %1 to i64 (%"class.ui::MotionEvent"*)***
  %186 = load i64 (%"class.ui::MotionEvent"*)**, i64 (%"class.ui::MotionEvent"*)*** %185, align 8
  %187 = getelementptr inbounds i64 (%"class.ui::MotionEvent"*)*, i64 (%"class.ui::MotionEvent"*)** %186, i64 22
  %188 = load i64 (%"class.ui::MotionEvent"*)*, i64 (%"class.ui::MotionEvent"*)** %187, align 8
  %189 = tail call i64 %188(%"class.ui::MotionEvent"* %1) #10
  %190 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 10, i32 0, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = sub nsw i64 %189, %191
  %193 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %194 = load %"class.ui::TouchHandleClient"*, %"class.ui::TouchHandleClient"** %193, align 8
  %195 = bitcast %"class.ui::TouchHandleClient"* %194 to i64 (%"class.ui::TouchHandleClient"*)***
  %196 = load i64 (%"class.ui::TouchHandleClient"*)**, i64 (%"class.ui::TouchHandleClient"*)*** %195, align 8
  %197 = getelementptr inbounds i64 (%"class.ui::TouchHandleClient"*)*, i64 (%"class.ui::TouchHandleClient"*)** %196, i64 9
  %198 = load i64 (%"class.ui::TouchHandleClient"*)*, i64 (%"class.ui::TouchHandleClient"*)** %197, align 8
  %199 = tail call i64 %198(%"class.ui::TouchHandleClient"* %194) #10
  %200 = icmp slt i64 %192, %199
  br i1 %200, label %201, label %207

201:                                              ; preds = %184
  %202 = load %"class.ui::TouchHandleClient"*, %"class.ui::TouchHandleClient"** %193, align 8
  %203 = bitcast %"class.ui::TouchHandleClient"* %202 to void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)***
  %204 = load void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)**, void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)*** %203, align 8
  %205 = getelementptr inbounds void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)*, void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)** %204, i64 6
  %206 = load void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)*, void (%"class.ui::TouchHandleClient"*, %"class.ui::TouchHandle"*)** %205, align 8
  tail call void %206(%"class.ui::TouchHandleClient"* %202, %"class.ui::TouchHandle"* dereferenceable(120) %0) #10
  br label %207

207:                                              ; preds = %180, %201, %184
  tail call void @_ZN2ui11TouchHandle7EndDragEv(%"class.ui::TouchHandle"* %0)
  br label %209

208:                                              ; preds = %25
  tail call void @_ZN2ui11TouchHandle7EndDragEv(%"class.ui::TouchHandle"* %0)
  br label %209

209:                                              ; preds = %140, %207, %208, %25, %139, %94, %30, %19, %2
  %210 = phi i1 [ false, %2 ], [ false, %19 ], [ false, %30 ], [ false, %94 ], [ true, %139 ], [ true, %25 ], [ true, %208 ], [ true, %207 ], [ true, %140 ]
  ret i1 %210
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle9BeginDragEv(%"class.ui::TouchHandle"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %35

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i32 0, i32 1065353216
  %12 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %13 = load float, float* %12, align 8
  %14 = bitcast i32 %11 to float
  %15 = fcmp oeq float %13, %14
  br i1 %15, label %24, label %16

16:                                               ; preds = %5
  %17 = bitcast float* %12 to i32*
  store i32 %11, i32* %17, align 8
  %18 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %19 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %18, align 8
  %20 = bitcast %"class.ui::TouchHandleDrawable"* %19 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %21 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %21, i64 5
  %23 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %22, align 8
  tail call void %23(%"class.ui::TouchHandleDrawable"* %19, float %14) #10
  br label %24

24:                                               ; preds = %5, %16
  store i8 1, i8* %2, align 1
  %25 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 18
  store i8 1, i8* %25, align 8
  %26 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %27 = bitcast %"class.ui::TouchHandleClient"** %26 to %"class.ui::TouchSelectionDraggableClient"**
  %28 = load %"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggableClient"** %27, align 8
  %29 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %31 = bitcast %"class.ui::TouchSelectionDraggableClient"* %28 to void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)***
  %32 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)**, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %32, i64 2
  %34 = load void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchSelectionDraggableClient"*, %"class.ui::TouchSelectionDraggable"*, %"class.gfx::PointF"*)** %33, align 8
  tail call void %34(%"class.ui::TouchSelectionDraggableClient"* %28, %"class.ui::TouchSelectionDraggable"* dereferenceable(8) %29, %"class.gfx::PointF"* dereferenceable(8) %30) #10
  br label %35

35:                                               ; preds = %1, %24
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2ui11TouchHandle8IsActiveEv(%"class.ui::TouchHandle"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui11TouchHandle7AnimateEN4base9TimeTicksE(%"class.ui::TouchHandle"* nocapture, i64) local_unnamed_addr #5 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = alloca <2 x float>, align 8
  %8 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 11, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %80, label %11

11:                                               ; preds = %2
  %12 = bitcast <2 x float>* %7 to %"class.gfx::Vector2dF"*
  %13 = bitcast %"class.base::TimeDelta"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = sub nsw i64 %9, %1
  %15 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 %14, i64* %15, align 8
  %16 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %6, i64 200000)
  %17 = fsub double 1.000000e+00, %16
  %18 = fptrunc double %17 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  %19 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3, i32 0
  %21 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 12, i32 0
  %22 = bitcast float* %20 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = bitcast float* %21 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fsub <2 x float> %23, %25
  store <2 x float> %26, <2 x float>* %7, align 8
  %27 = call double @_ZNK3gfx9Vector2dF13LengthSquaredEv(%"class.gfx::Vector2dF"* nonnull %12) #10
  %28 = fdiv double %27, 4.000000e+02
  %29 = fptrunc double %28 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  %30 = fcmp olt float %18, %29
  %31 = select i1 %30, float %29, float %18
  %32 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %33 = load i8, i8* %32, align 2, !range !2
  %34 = icmp eq i8 %33, 0
  %35 = fsub float 1.000000e+00, %31
  %36 = select i1 %34, float %35, float %31
  %37 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37)
  %38 = bitcast i32* %3 to float*
  store float %36, float* %38, align 4
  %39 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39)
  store float 0.000000e+00, float* %4, align 4
  %40 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40)
  store float 1.000000e+00, float* %5, align 4
  %41 = fcmp olt float %36, 0.000000e+00
  %42 = select i1 %41, float* %4, float* %38
  %43 = load float, float* %42, align 4
  %44 = fcmp ogt float %43, 1.000000e+00
  %45 = select i1 %44, float* %5, float* %42
  %46 = bitcast float* %45 to i32*
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39)
  %48 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %49 = load float, float* %48, align 8
  %50 = bitcast i32 %47 to float
  %51 = fcmp oeq float %49, %50
  br i1 %51, label %60, label %52

52:                                               ; preds = %11
  %53 = bitcast float* %48 to i32*
  store i32 %47, i32* %53, align 8
  %54 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %55 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %54, align 8
  %56 = bitcast %"class.ui::TouchHandleDrawable"* %55 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %57 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %57, i64 5
  %59 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %58, align 8
  call void %59(%"class.ui::TouchHandleDrawable"* %55, float %50) #10
  br label %60

60:                                               ; preds = %11, %52
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37)
  %61 = fcmp ult float %31, 1.000000e+00
  br i1 %61, label %78, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 14
  store i8 0, i8* %63, align 4
  store i64 0, i64* %8, align 8
  %64 = load i8, i8* %32, align 2, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = select i1 %65, i32 0, i32 1065353216
  %67 = load float, float* %48, align 8
  %68 = bitcast i32 %66 to float
  %69 = fcmp oeq float %67, %68
  br i1 %69, label %78, label %70

70:                                               ; preds = %62
  %71 = bitcast float* %48 to i32*
  store i32 %66, i32* %71, align 8
  %72 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %73 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %72, align 8
  %74 = bitcast %"class.ui::TouchHandleDrawable"* %73 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %75 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %75, i64 5
  %77 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %76, align 8
  call void %77(%"class.ui::TouchHandleDrawable"* %73, float %68) #10
  br label %78

78:                                               ; preds = %70, %62, %60
  %79 = fcmp olt float %31, 1.000000e+00
  br label %80

80:                                               ; preds = %2, %78
  %81 = phi i1 [ %79, %78 ], [ false, %2 ]
  ret i1 %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0)) #10
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

declare double @_ZNK3gfx9Vector2dF13LengthSquaredEv(%"class.gfx::Vector2dF"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle8SetAlphaEf(%"class.ui::TouchHandle"* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = bitcast i32* %3 to float*
  store float %1, float* %6, align 4
  %7 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7)
  store float 0.000000e+00, float* %4, align 4
  %8 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8)
  store float 1.000000e+00, float* %5, align 4
  %9 = fcmp olt float %1, 0.000000e+00
  %10 = select i1 %9, float* %4, float* %6
  %11 = load float, float* %10, align 4
  %12 = fcmp ogt float %11, 1.000000e+00
  %13 = select i1 %12, float* %5, float* %10
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7)
  %16 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %17 = load float, float* %16, align 8
  %18 = bitcast i32 %15 to float
  %19 = fcmp oeq float %17, %18
  br i1 %19, label %28, label %20

20:                                               ; preds = %2
  %21 = bitcast float* %16 to i32*
  store i32 %15, i32* %21, align 8
  %22 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %23 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %22, align 8
  %24 = bitcast %"class.ui::TouchHandleDrawable"* %23 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %25 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %25, i64 5
  %27 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %26, align 8
  tail call void %27(%"class.ui::TouchHandleDrawable"* %23, float %18) #10
  br label %28

28:                                               ; preds = %2, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK2ui11TouchHandle16GetVisibleBoundsEv(%"class.ui::TouchHandle"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %3 = load i8, i8* %2, align 2, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 15
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %10, align 8
  %12 = bitcast %"class.ui::TouchHandleDrawable"* %11 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %13 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %12, align 8
  %14 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %13, i64 6
  %15 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %14, align 8
  %16 = tail call { <2 x float>, <2 x float> } %15(%"class.ui::TouchHandleDrawable"* %11) #10
  %17 = extractvalue { <2 x float>, <2 x float> } %16, 0
  %18 = extractvalue { <2 x float>, <2 x float> } %16, 1
  br label %19

19:                                               ; preds = %1, %5, %9
  %20 = phi <2 x float> [ %18, %9 ], [ zeroinitializer, %5 ], [ zeroinitializer, %1 ]
  %21 = phi <2 x float> [ %17, %9 ], [ zeroinitializer, %5 ], [ zeroinitializer, %1 ]
  %22 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %21, 0
  %23 = insertvalue { <2 x float>, <2 x float> } %22, <2 x float> %20, 1
  ret { <2 x float>, <2 x float> } %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle18UpdateHandleLayoutEv(%"class.ui::TouchHandle"*) local_unnamed_addr #5 align 2 {
  %2 = alloca <2 x float>, align 8
  %3 = bitcast <2 x float>* %2 to %"class.gfx::PointF"*
  %4 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 16
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %260, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 19
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %260, label %11

11:                                               ; preds = %7
  store i8 0, i8* %8, align 1
  %12 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 17
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %179

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %17 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %16, align 8
  %18 = bitcast %"class.ui::TouchHandleDrawable"* %17 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %19 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %18, align 8
  %20 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %19, i64 6
  %21 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %20, align 8
  %22 = tail call { <2 x float>, <2 x float> } %21(%"class.ui::TouchHandleDrawable"* %17) #10
  %23 = extractvalue { <2 x float>, <2 x float> } %22, 1
  %24 = extractelement <2 x float> %23, i32 0
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = fsub double 1.000000e+00, %28
  %30 = fmul double %29, %25
  %31 = fptrunc double %30 to float
  %32 = extractelement <2 x float> %23, i32 1
  %33 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %34 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3, i32 1
  %35 = load float, float* %34, align 4
  %36 = fadd float %35, %32
  %37 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5
  %38 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = fadd float %36, %39
  %41 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 4, i32 1
  %42 = load float, float* %41, align 4
  %43 = fsub float %42, %32
  %44 = fadd float %39, %43
  %45 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 1, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %39, %46
  %48 = fsub float %40, %47
  %49 = fcmp olt float %48, 0.000000e+00
  %50 = select i1 %49, float 0.000000e+00, float %48
  %51 = fsub float %39, %44
  %52 = fcmp olt float %51, 0.000000e+00
  %53 = select i1 %52, float 0.000000e+00, float %51
  %54 = fcmp olt float %53, %50
  %55 = zext i1 %54 to i8
  %56 = select i1 %54, float %53, float %50
  %57 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %58 = inttoptr i64 %57 to %"class.base::HistogramBase"*
  %59 = icmp eq i64 %57, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %15
  %61 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 1, i32 101, i32 102, i32 1) #10
  %62 = ptrtoint %"class.base::HistogramBase"* %61 to i64
  store atomic i64 %62, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %63

63:                                               ; preds = %15, %60
  %64 = phi %"class.base::HistogramBase"* [ %58, %15 ], [ %61, %60 ]
  %65 = fdiv float %50, %32
  %66 = fmul float %65, 1.000000e+02
  %67 = fptosi float %66 to i32
  %68 = bitcast %"class.base::HistogramBase"* %64 to void (%"class.base::HistogramBase"*, i32)***
  %69 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %69, i64 6
  %71 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %70, align 8
  tail call void %71(%"class.base::HistogramBase"* %64, i32 %67) #10
  %72 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %73 = inttoptr i64 %72 to %"class.base::HistogramBase"*
  %74 = icmp eq i64 %72, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %63
  %76 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 101, i32 102, i32 1) #10
  %77 = ptrtoint %"class.base::HistogramBase"* %76 to i64
  store atomic i64 %77, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %78

78:                                               ; preds = %63, %75
  %79 = phi %"class.base::HistogramBase"* [ %73, %63 ], [ %76, %75 ]
  %80 = fdiv float %56, %32
  %81 = fmul float %80, 1.000000e+02
  %82 = fptosi float %81 to i32
  %83 = bitcast %"class.base::HistogramBase"* %79 to void (%"class.base::HistogramBase"*, i32)***
  %84 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %83, align 8
  %85 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %84, i64 6
  %86 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %85, align 8
  tail call void %86(%"class.base::HistogramBase"* %79, i32 %82) #10
  %87 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_1.0.0.0.0.0 acquire, align 8
  %88 = inttoptr i64 %87 to %"class.base::HistogramBase"*
  %89 = icmp eq i64 %87, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %78
  %91 = tail call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 1) #10
  %92 = ptrtoint %"class.base::HistogramBase"* %91 to i64
  store atomic i64 %92, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_1.0.0.0.0.0 release, align 8
  br label %93

93:                                               ; preds = %78, %90
  %94 = phi %"class.base::HistogramBase"* [ %88, %78 ], [ %91, %90 ]
  tail call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %94, i1 zeroext %54) #10
  %95 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_2.0.0.0.0.0 acquire, align 8
  %96 = inttoptr i64 %95 to %"class.base::HistogramBase"*
  %97 = icmp eq i64 %95, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %93
  %99 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0), i32 1, i32 101, i32 102, i32 1) #10
  %100 = ptrtoint %"class.base::HistogramBase"* %99 to i64
  store atomic i64 %100, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_2.0.0.0.0.0 release, align 8
  br label %101

101:                                              ; preds = %93, %98
  %102 = phi %"class.base::HistogramBase"* [ %96, %93 ], [ %99, %98 ]
  %103 = fsub float %50, %56
  %104 = fdiv float %103, %32
  %105 = fmul float %104, 1.000000e+02
  %106 = fptosi float %105 to i32
  %107 = bitcast %"class.base::HistogramBase"* %102 to void (%"class.base::HistogramBase"*, i32)***
  %108 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %107, align 8
  %109 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %108, i64 6
  %110 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %109, align 8
  tail call void %110(%"class.base::HistogramBase"* %102, i32 %106) #10
  %111 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  %112 = load i32, i32* %111, align 8
  switch i32 %112, label %166 [
    i32 0, label %113
    i32 2, label %138
  ]

113:                                              ; preds = %101
  %114 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %37, i64 0, i32 0, i32 0
  %115 = load float, float* %114, align 4
  %116 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %33, i64 0, i32 0
  %117 = load float, float* %116, align 4
  %118 = fsub float %117, %31
  %119 = fsub float %115, %118
  %120 = fcmp olt float %119, 0.000000e+00
  %121 = select i1 %120, float 0.000000e+00, float %119
  %122 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_3.0.0.0.0.0 acquire, align 8
  %123 = inttoptr i64 %122 to %"class.base::HistogramBase"*
  %124 = icmp eq i64 %122, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %113
  %126 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.4, i64 0, i64 0), i32 1, i32 101, i32 102, i32 1) #10
  %127 = ptrtoint %"class.base::HistogramBase"* %126 to i64
  store atomic i64 %127, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_3.0.0.0.0.0 release, align 8
  br label %128

128:                                              ; preds = %113, %125
  %129 = phi %"class.base::HistogramBase"* [ %123, %113 ], [ %126, %125 ]
  %130 = fdiv float %121, %32
  %131 = fmul float %130, 1.000000e+02
  %132 = fptosi float %131 to i32
  %133 = bitcast %"class.base::HistogramBase"* %129 to void (%"class.base::HistogramBase"*, i32)***
  %134 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %133, align 8
  %135 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %134, i64 6
  %136 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %135, align 8
  tail call void %136(%"class.base::HistogramBase"* %129, i32 %132) #10
  %137 = fcmp ogt float %121, 0.000000e+00
  br label %166

138:                                              ; preds = %101
  %139 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %33, i64 0, i32 0
  %140 = load float, float* %139, align 4
  %141 = fadd float %140, %31
  %142 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %37, i64 0, i32 0, i32 0
  %143 = load float, float* %142, align 4
  %144 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 5, i32 1, i32 0
  %145 = load float, float* %144, align 4
  %146 = fadd float %143, %145
  %147 = fsub float %141, %146
  %148 = fcmp olt float %147, 0.000000e+00
  %149 = select i1 %148, float 0.000000e+00, float %147
  %150 = load atomic i64, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_4.0.0.0.0.0 acquire, align 8
  %151 = inttoptr i64 %150 to %"class.base::HistogramBase"*
  %152 = icmp eq i64 %150, 0
  br i1 %152, label %153, label %156

153:                                              ; preds = %138
  %154 = tail call %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 1, i32 101, i32 102, i32 1) #10
  %155 = ptrtoint %"class.base::HistogramBase"* %154 to i64
  store atomic i64 %155, i64* @_ZZN2ui11TouchHandle18UpdateHandleLayoutEvE24atomic_histogram_pointer_4.0.0.0.0.0 release, align 8
  br label %156

156:                                              ; preds = %138, %153
  %157 = phi %"class.base::HistogramBase"* [ %151, %138 ], [ %154, %153 ]
  %158 = fdiv float %149, %32
  %159 = fmul float %158, 1.000000e+02
  %160 = fptosi float %159 to i32
  %161 = bitcast %"class.base::HistogramBase"* %157 to void (%"class.base::HistogramBase"*, i32)***
  %162 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %161, align 8
  %163 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %162, i64 6
  %164 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %163, align 8
  tail call void %164(%"class.base::HistogramBase"* %157, i32 %160) #10
  %165 = fcmp ogt float %149, 0.000000e+00
  br label %166

166:                                              ; preds = %156, %101, %128
  %167 = phi i1 [ %137, %128 ], [ false, %101 ], [ %165, %156 ]
  %168 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 2
  %169 = load %"class.ui::TouchHandleClient"*, %"class.ui::TouchHandleClient"** %168, align 8
  %170 = bitcast %"class.ui::TouchHandleClient"* %169 to i1 (%"class.ui::TouchHandleClient"*)***
  %171 = load i1 (%"class.ui::TouchHandleClient"*)**, i1 (%"class.ui::TouchHandleClient"*)*** %170, align 8
  %172 = getelementptr inbounds i1 (%"class.ui::TouchHandleClient"*)*, i1 (%"class.ui::TouchHandleClient"*)** %171, i64 10
  %173 = load i1 (%"class.ui::TouchHandleClient"*)*, i1 (%"class.ui::TouchHandleClient"*)** %172, align 8
  %174 = tail call zeroext i1 %173(%"class.ui::TouchHandleClient"* %169) #10
  br i1 %174, label %175, label %179

175:                                              ; preds = %166
  %176 = zext i1 %167 to i8
  %177 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 21
  store i8 %176, i8* %177, align 1
  %178 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 20
  store i8 %55, i8* %178, align 2
  br label %179

179:                                              ; preds = %166, %175, %11
  %180 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %181 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %180, align 8
  %182 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  %183 = load i32, i32* %182, align 8
  %184 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 20
  %185 = load i8, i8* %184, align 2, !range !2
  %186 = icmp ne i8 %185, 0
  %187 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 21
  %188 = load i8, i8* %187, align 1, !range !2
  %189 = icmp ne i8 %188, 0
  %190 = bitcast %"class.ui::TouchHandleDrawable"* %181 to void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)***
  %191 = load void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)**, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*** %190, align 8
  %192 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)** %191, i64 3
  %193 = load void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)*, void (%"class.ui::TouchHandleDrawable"*, i32, i1, i1)** %192, align 8
  tail call void %193(%"class.ui::TouchHandleDrawable"* %181, i32 %183, i1 zeroext %186, i1 zeroext %189) #10
  %194 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %180, align 8
  %195 = bitcast <2 x float>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %195) #10
  %196 = load i8, i8* %184, align 2, !range !2
  %197 = icmp eq i8 %196, 0
  %198 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 4
  %199 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %200 = select i1 %197, %"class.gfx::PointF"* %199, %"class.gfx::PointF"* %198
  %201 = bitcast %"class.gfx::PointF"* %200 to <2 x float>*
  %202 = load <2 x float>, <2 x float>* %201, align 8
  %203 = bitcast %"class.ui::TouchHandleDrawable"* %194 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %204 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %203, align 8
  %205 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %204, i64 6
  %206 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %205, align 8
  %207 = tail call { <2 x float>, <2 x float> } %206(%"class.ui::TouchHandleDrawable"* %194) #10
  %208 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %180, align 8
  %209 = bitcast %"class.ui::TouchHandleDrawable"* %208 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %210 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %209, align 8
  %211 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %210, i64 6
  %212 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %211, align 8
  %213 = tail call { <2 x float>, <2 x float> } %212(%"class.ui::TouchHandleDrawable"* %208) #10
  %214 = extractvalue { <2 x float>, <2 x float> } %213, 1
  %215 = extractelement <2 x float> %214, i32 0
  %216 = load i8, i8* %184, align 2, !range !2
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %223, label %218

218:                                              ; preds = %179
  %219 = extractvalue { <2 x float>, <2 x float> } %207, 1
  %220 = extractelement <2 x float> %219, i32 1
  %221 = fptosi float %220 to i32
  %222 = sitofp i32 %221 to float
  br label %223

223:                                              ; preds = %218, %179
  %224 = phi float [ %222, %218 ], [ 0.000000e+00, %179 ]
  %225 = load i32, i32* %182, align 8
  switch i32 %225, label %247 [
    i32 0, label %226
    i32 2, label %235
    i32 1, label %244
  ]

226:                                              ; preds = %223
  %227 = load i8, i8* %187, align 1, !range !2
  %228 = icmp eq i8 %227, 0
  %229 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  %230 = load float, float* %229, align 4
  %231 = fsub float 1.000000e+00, %230
  %232 = select i1 %228, float %231, float %230
  %233 = fmul float %215, %232
  %234 = fptosi float %233 to i32
  br label %247

235:                                              ; preds = %223
  %236 = load i8, i8* %187, align 1, !range !2
  %237 = icmp eq i8 %236, 0
  %238 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  %239 = load float, float* %238, align 4
  %240 = fsub float 1.000000e+00, %239
  %241 = select i1 %237, float %239, float %240
  %242 = fmul float %215, %241
  %243 = fptosi float %242 to i32
  br label %247

244:                                              ; preds = %223
  %245 = fmul float %215, 5.000000e-01
  %246 = fptosi float %245 to i32
  br label %247

247:                                              ; preds = %223, %226, %235, %244
  %248 = phi i32 [ 0, %223 ], [ %246, %244 ], [ %243, %235 ], [ %234, %226 ]
  %249 = sitofp i32 %248 to float
  %250 = extractelement <2 x float> %202, i32 0
  %251 = fsub float %250, %249
  %252 = insertelement <2 x float> undef, float %251, i32 0
  %253 = extractelement <2 x float> %202, i32 1
  %254 = fsub float %253, %224
  %255 = insertelement <2 x float> %252, float %254, i32 1
  store <2 x float> %255, <2 x float>* %2, align 8
  %256 = bitcast %"class.ui::TouchHandleDrawable"* %194 to void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)***
  %257 = load void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)**, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*** %256, align 8
  %258 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)** %257, i64 4
  %259 = load void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)*, void (%"class.ui::TouchHandleDrawable"*, %"class.gfx::PointF"*)** %258, align 8
  call void %259(%"class.ui::TouchHandleDrawable"* %194, %"class.gfx::PointF"* nonnull dereferenceable(8) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #10
  br label %260

260:                                              ; preds = %7, %1, %247
  ret void
}

declare %"class.base::HistogramBase"* @_ZN4base15LinearHistogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #7

declare %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8*, i32) local_unnamed_addr #7

declare void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"*, i1 zeroext) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZNK2ui11TouchHandle19ComputeHandleOriginEv(%"class.ui::TouchHandle"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 20
  %3 = load i8, i8* %2, align 2, !range !2
  %4 = icmp eq i8 %3, 0
  %5 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 3
  %7 = select i1 %4, %"class.gfx::PointF"* %6, %"class.gfx::PointF"* %5
  %8 = bitcast %"class.gfx::PointF"* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 8
  %10 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %10, align 8
  %12 = bitcast %"class.ui::TouchHandleDrawable"* %11 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %13 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %12, align 8
  %14 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %13, i64 6
  %15 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %14, align 8
  %16 = tail call { <2 x float>, <2 x float> } %15(%"class.ui::TouchHandleDrawable"* %11) #10
  %17 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %10, align 8
  %18 = bitcast %"class.ui::TouchHandleDrawable"* %17 to { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)***
  %19 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)**, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*** %18, align 8
  %20 = getelementptr inbounds { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %19, i64 6
  %21 = load { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)*, { <2 x float>, <2 x float> } (%"class.ui::TouchHandleDrawable"*)** %20, align 8
  %22 = tail call { <2 x float>, <2 x float> } %21(%"class.ui::TouchHandleDrawable"* %17) #10
  %23 = extractvalue { <2 x float>, <2 x float> } %22, 1
  %24 = extractelement <2 x float> %23, i32 0
  %25 = load i8, i8* %2, align 2, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %1
  %28 = extractvalue { <2 x float>, <2 x float> } %16, 1
  %29 = extractelement <2 x float> %28, i32 1
  %30 = fptosi float %29 to i32
  %31 = sitofp i32 %30 to float
  br label %32

32:                                               ; preds = %1, %27
  %33 = phi float [ %31, %27 ], [ 0.000000e+00, %1 ]
  %34 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 6
  %35 = load i32, i32* %34, align 8
  switch i32 %35, label %59 [
    i32 0, label %36
    i32 2, label %46
    i32 1, label %56
  ]

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 21
  %38 = load i8, i8* %37, align 1, !range !2
  %39 = icmp eq i8 %38, 0
  %40 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  %41 = load float, float* %40, align 4
  %42 = fsub float 1.000000e+00, %41
  %43 = select i1 %39, float %42, float %41
  %44 = fmul float %24, %43
  %45 = fptosi float %44 to i32
  br label %59

46:                                               ; preds = %32
  %47 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 21
  %48 = load i8, i8* %47, align 1, !range !2
  %49 = icmp eq i8 %48, 0
  %50 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 22
  %51 = load float, float* %50, align 4
  %52 = fsub float 1.000000e+00, %51
  %53 = select i1 %49, float %51, float %52
  %54 = fmul float %24, %53
  %55 = fptosi float %54 to i32
  br label %59

56:                                               ; preds = %32
  %57 = fmul float %24, 5.000000e-01
  %58 = fptosi float %57 to i32
  br label %59

59:                                               ; preds = %32, %56, %46, %36
  %60 = phi i32 [ 0, %32 ], [ %58, %56 ], [ %55, %46 ], [ %45, %36 ]
  %61 = sitofp i32 %60 to float
  %62 = extractelement <2 x float> %9, i32 0
  %63 = fsub float %62, %61
  %64 = insertelement <2 x float> undef, float %63, i32 0
  %65 = extractelement <2 x float> %9, i32 1
  %66 = fsub float %65, %33
  %67 = insertelement <2 x float> %64, float %66, i32 1
  ret <2 x float> %67
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui11TouchHandle14SetTransparentEv(%"class.ui::TouchHandle"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 13
  %3 = load float, float* %2, align 8
  %4 = fcmp oeq float %3, 0.000000e+00
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = bitcast float* %2 to i32*
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.ui::TouchHandle", %"class.ui::TouchHandle"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.ui::TouchHandleDrawable"*, %"class.ui::TouchHandleDrawable"** %7, align 8
  %9 = bitcast %"class.ui::TouchHandleDrawable"* %8 to void (%"class.ui::TouchHandleDrawable"*, float)***
  %10 = load void (%"class.ui::TouchHandleDrawable"*, float)**, void (%"class.ui::TouchHandleDrawable"*, float)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %10, i64 5
  %12 = load void (%"class.ui::TouchHandleDrawable"*, float)*, void (%"class.ui::TouchHandleDrawable"*, float)** %11, align 8
  tail call void %12(%"class.ui::TouchHandleDrawable"* %8, float 0.000000e+00) #10
  br label %13

13:                                               ; preds = %1, %5
  ret void
}

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #7

declare void @_ZN3gfx6PointF8SetToMaxERKS0_(%"class.gfx::PointF"*, %"class.gfx::PointF"* dereferenceable(8)) local_unnamed_addr #7

declare void @_ZN3gfx6PointF8SetToMinERKS0_(%"class.gfx::PointF"*, %"class.gfx::PointF"* dereferenceable(8)) local_unnamed_addr #7

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
