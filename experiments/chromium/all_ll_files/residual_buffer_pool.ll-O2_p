; ModuleID = '../../third_party/libgav1/src/src/residual_buffer_pool.cc'
source_filename = "../../third_party/libgav1/src/src/residual_buffer_pool.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"class.libgav1::ResidualBufferStack" = type { %"class.libgav1::ResidualBuffer"*, i64 }
%"class.libgav1::ResidualBuffer" = type { %"class.std::__1::unique_ptr", %"class.libgav1::Queue", %"class.libgav1::Queue.5", %"class.libgav1::ResidualBuffer"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Queue" = type { %"class.std::__1::unique_ptr.1", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.libgav1::TransformParameters"* }
%"struct.libgav1::TransformParameters" = type { i8, i32 }
%"class.libgav1::Queue.5" = type { %"class.std::__1::unique_ptr.6", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.libgav1::PartitionTreeNode"* }
%"struct.libgav1::PartitionTreeNode" = type <{ i32, i32, i8, [3 x i8] }>
%"class.libgav1::ResidualBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::ResidualBufferStack", i64, i32, [4 x i8] }>
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }

$_ZN7libgav114ResidualBuffer6CreateEmi = comdat any

@_ZN7libgav112_GLOBAL__N_113kMaxQueueSizeE = internal unnamed_addr constant [2 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 768, i32 512], [2 x i32] [i32 512, i32 384]], [2 x [2 x i32]] [[2 x i32] [i32 3072, i32 2048], [2 x i32] [i32 2048, i32 1536]]], align 16
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN7libgav119ResidualBufferStackD1Ev = hidden unnamed_addr alias void (%"class.libgav1::ResidualBufferStack"*), void (%"class.libgav1::ResidualBufferStack"*)* @_ZN7libgav119ResidualBufferStackD2Ev
@_ZN7libgav118ResidualBufferPoolC1Ebiim = hidden unnamed_addr alias void (%"class.libgav1::ResidualBufferPool"*, i1, i32, i32, i64), void (%"class.libgav1::ResidualBufferPool"*, i1, i32, i32, i64)* @_ZN7libgav118ResidualBufferPoolC2Ebiim

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav119ResidualBufferStackD2Ev(%"class.libgav1::ResidualBufferStack"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 0
  %3 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %2, align 8
  %4 = icmp eq %"class.libgav1::ResidualBuffer"* %3, null
  br i1 %4, label %32, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.libgav1::ResidualBufferStack"* %0 to i64*
  br label %7

7:                                                ; preds = %5, %28
  %8 = phi %"class.libgav1::ResidualBuffer"* [ %3, %5 ], [ %30, %28 ]
  %9 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %8, i64 0, i32 3
  %10 = bitcast %"class.libgav1::ResidualBuffer"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %6, align 8
  %12 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %13 = load %"struct.libgav1::PartitionTreeNode"*, %"struct.libgav1::PartitionTreeNode"** %12, align 8
  store %"struct.libgav1::PartitionTreeNode"* null, %"struct.libgav1::PartitionTreeNode"** %12, align 8
  %14 = icmp eq %"struct.libgav1::PartitionTreeNode"* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %7
  %16 = bitcast %"struct.libgav1::PartitionTreeNode"* %13 to i8*
  tail call void @_ZdaPv(i8* %16) #10
  br label %17

17:                                               ; preds = %15, %7
  %18 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %8, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %19 = load %"struct.libgav1::TransformParameters"*, %"struct.libgav1::TransformParameters"** %18, align 8
  store %"struct.libgav1::TransformParameters"* null, %"struct.libgav1::TransformParameters"** %18, align 8
  %20 = icmp eq %"struct.libgav1::TransformParameters"* %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"struct.libgav1::TransformParameters", %"struct.libgav1::TransformParameters"* %19, i64 0, i32 0
  tail call void @_ZdaPv(i8* %22) #10
  br label %23

23:                                               ; preds = %21, %17
  %24 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  store i8* null, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %23
  tail call void @free(i8* nonnull %25) #11
  br label %28

28:                                               ; preds = %23, %27
  %29 = bitcast %"class.libgav1::ResidualBuffer"* %8 to i8*
  tail call void @_ZdlPv(i8* nonnull %29) #11
  %30 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %2, align 8
  %31 = icmp eq %"class.libgav1::ResidualBuffer"* %30, null
  br i1 %31, label %32, label %7

32:                                               ; preds = %28, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav119ResidualBufferStack4PushENSt3__110unique_ptrINS_14ResidualBufferENS1_14default_deleteIS3_EEEE(%"class.libgav1::ResidualBufferStack"* nocapture, %"class.libgav1::ResidualBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 0
  %4 = bitcast %"class.libgav1::ResidualBufferStack"* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 3
  %7 = bitcast %"class.libgav1::ResidualBuffer"** %6 to i64*
  store i64 %5, i64* %7, align 8
  store %"class.libgav1::ResidualBuffer"* %1, %"class.libgav1::ResidualBuffer"** %3, align 8
  %8 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 1
  store i64 %10, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.libgav1::ResidualBuffer"* @_ZN7libgav119ResidualBufferStack3PopEv(%"class.libgav1::ResidualBufferStack"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 0
  %3 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %2, align 8
  %4 = icmp eq %"class.libgav1::ResidualBuffer"* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %3, i64 0, i32 3
  %7 = bitcast %"class.libgav1::ResidualBuffer"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.libgav1::ResidualBufferStack"* %0 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.libgav1::ResidualBuffer"* null, %"class.libgav1::ResidualBuffer"** %6, align 8
  %10 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, -1
  store i64 %12, i64* %10, align 8
  br label %13

13:                                               ; preds = %5, %1
  ret %"class.libgav1::ResidualBuffer"* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7libgav119ResidualBufferStack4SwapEPS0_(%"class.libgav1::ResidualBufferStack"* nocapture, %"class.libgav1::ResidualBufferStack"* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.libgav1::ResidualBufferStack"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.libgav1::ResidualBufferStack"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %3, align 8
  store i64 %4, i64* %5, align 8
  %7 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %1, i64 0, i32 1
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %8, align 8
  store i64 %10, i64* %7, align 8
  store i64 %9, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav118ResidualBufferPoolC2Ebiim(%"class.libgav1::ResidualBufferPool"* nocapture, i1 zeroext, i32, i32, i64) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 2
  %7 = lshr i32 4, %2
  %8 = ashr i32 %7, %3
  %9 = add nuw nsw i32 %8, 2
  %10 = select i1 %1, i32 16384, i32 4096
  %11 = mul nsw i32 %9, %10
  %12 = ashr exact i32 %11, 1
  %13 = or i32 %12, 128
  %14 = sext i32 %13 to i64
  %15 = mul i64 %14, %4
  %16 = bitcast %"class.libgav1::ResidualBufferPool"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 56, i1 false)
  store i64 %15, i64* %6, align 8
  %17 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 3
  %18 = zext i1 %1 to i64
  %19 = sext i32 %2 to i64
  %20 = sext i32 %3 to i64
  %21 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @_ZN7libgav112_GLOBAL__N_113kMaxQueueSizeE, i64 0, i64 %18, i64 %19, i64 %20
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav118ResidualBufferPool5ResetEbiim(%"class.libgav1::ResidualBufferPool"*, i1 zeroext, i32, i32, i64) local_unnamed_addr #0 align 2 {
  %6 = lshr i32 4, %2
  %7 = ashr i32 %6, %3
  %8 = add nuw nsw i32 %7, 2
  %9 = select i1 %1, i32 16384, i32 4096
  %10 = mul nsw i32 %8, %9
  %11 = ashr exact i32 %10, 1
  %12 = or i32 %11, 128
  %13 = sext i32 %12 to i64
  %14 = mul i64 %13, %4
  %15 = zext i1 %1 to i64
  %16 = sext i32 %2 to i64
  %17 = sext i32 %3 to i64
  %18 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* @_ZN7libgav112_GLOBAL__N_113kMaxQueueSizeE, i64 0, i64 %15, i64 %16, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %14, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %19, %25
  br i1 %26, label %58, label %27

27:                                               ; preds = %23, %5
  store i64 %14, i64* %20, align 8
  %28 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 3
  store i32 %19, i32* %28, align 8
  %29 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %29) #11
  %30 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %30, i64 0, i32 0
  %32 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %31, align 8
  %33 = bitcast %"class.libgav1::ResidualBufferStack"* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false)
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %29) #11
  %34 = icmp eq %"class.libgav1::ResidualBuffer"* %32, null
  br i1 %34, label %58, label %35

35:                                               ; preds = %27, %55
  %36 = phi %"class.libgav1::ResidualBuffer"* [ %38, %55 ], [ %32, %27 ]
  %37 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %36, i64 0, i32 3
  %38 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %37, align 8
  %39 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %40 = load %"struct.libgav1::PartitionTreeNode"*, %"struct.libgav1::PartitionTreeNode"** %39, align 8
  store %"struct.libgav1::PartitionTreeNode"* null, %"struct.libgav1::PartitionTreeNode"** %39, align 8
  %41 = icmp eq %"struct.libgav1::PartitionTreeNode"* %40, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %35
  %43 = bitcast %"struct.libgav1::PartitionTreeNode"* %40 to i8*
  tail call void @_ZdaPv(i8* %43) #10
  br label %44

44:                                               ; preds = %42, %35
  %45 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %36, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %46 = load %"struct.libgav1::TransformParameters"*, %"struct.libgav1::TransformParameters"** %45, align 8
  store %"struct.libgav1::TransformParameters"* null, %"struct.libgav1::TransformParameters"** %45, align 8
  %47 = icmp eq %"struct.libgav1::TransformParameters"* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"struct.libgav1::TransformParameters", %"struct.libgav1::TransformParameters"* %46, i64 0, i32 0
  tail call void @_ZdaPv(i8* %49) #10
  br label %50

50:                                               ; preds = %48, %44
  %51 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %36, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  store i8* null, i8** %51, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  tail call void @free(i8* nonnull %52) #11
  br label %55

55:                                               ; preds = %54, %50
  %56 = bitcast %"class.libgav1::ResidualBuffer"* %36 to i8*
  tail call void @_ZdlPv(i8* nonnull %56) #11
  %57 = icmp eq %"class.libgav1::ResidualBuffer"* %38, null
  br i1 %57, label %58, label %35

58:                                               ; preds = %55, %27, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.libgav1::ResidualBuffer"* @_ZN7libgav118ResidualBufferPool3GetEv(%"class.libgav1::ResidualBufferPool"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %2) #11
  %3 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %3, i64 0, i32 0
  %5 = load %"class.libgav1::ResidualBuffer"*, %"class.libgav1::ResidualBuffer"** %4, align 8
  %6 = icmp eq %"class.libgav1::ResidualBuffer"* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %5, i64 0, i32 3
  %9 = bitcast %"class.libgav1::ResidualBuffer"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.libgav1::ResidualBufferStack"* %3 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.libgav1::ResidualBuffer"* null, %"class.libgav1::ResidualBuffer"** %8, align 8
  %12 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, -1
  store i64 %14, i64* %12, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #11
  br label %21

15:                                               ; preds = %1
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #11
  %16 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = tail call %"class.libgav1::ResidualBuffer"* @_ZN7libgav114ResidualBuffer6CreateEmi(i64 %17, i32 %19)
  br label %21

21:                                               ; preds = %7, %15
  %22 = phi %"class.libgav1::ResidualBuffer"* [ %20, %15 ], [ %5, %7 ]
  ret %"class.libgav1::ResidualBuffer"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.libgav1::ResidualBuffer"* @_ZN7libgav114ResidualBuffer6CreateEmi(i64, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i8*, align 8
  %4 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 96, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %103, label %6

6:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 96, i1 false) #11
  %7 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  store i8* null, i8** %3, align 8
  %8 = call i32 @posix_memalign(i8** nonnull %3, i64 32, i64 %0) #11
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast i8** %3 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast i8* %4 to i8**
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  %14 = bitcast i8* %4 to i64*
  store i64 %12, i64* %14, align 8
  %15 = inttoptr i64 %12 to i8*
  br label %24

16:                                               ; preds = %6
  %17 = tail call i32* @__errno_location() #12
  store i32 %8, i32* %17, align 4
  %18 = bitcast i8* %4 to i8**
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  %20 = bitcast i8* %4 to i64*
  store i64 0, i64* %20, align 8
  %21 = icmp eq i8* %19, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %16
  call void @free(i8* nonnull %19) #11
  %23 = load i8*, i8** %18, align 8
  br label %24

24:                                               ; preds = %10, %22, %16
  %25 = phi i8** [ %18, %22 ], [ %18, %16 ], [ %13, %10 ]
  %26 = phi i8* [ %23, %22 ], [ null, %16 ], [ %15, %10 ]
  %27 = icmp eq i8* %26, null
  br i1 %27, label %84, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %4, i64 8
  %30 = sext i32 %1 to i64
  %31 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %30, i64 8) #11
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  %34 = select i1 %32, i64 -1, i64 %33
  %35 = call noalias i8* @_ZnamRKSt9nothrow_t(i64 %34, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #10
  %36 = bitcast i8* %35 to %"struct.libgav1::TransformParameters"*
  %37 = bitcast i8* %29 to %"struct.libgav1::TransformParameters"**
  %38 = load %"struct.libgav1::TransformParameters"*, %"struct.libgav1::TransformParameters"** %37, align 8
  %39 = bitcast i8* %29 to i8**
  store i8* %35, i8** %39, align 8
  %40 = icmp eq %"struct.libgav1::TransformParameters"* %38, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %28
  %42 = getelementptr inbounds %"struct.libgav1::TransformParameters", %"struct.libgav1::TransformParameters"* %38, i64 0, i32 0
  call void @_ZdaPv(i8* %42) #10
  %43 = load %"struct.libgav1::TransformParameters"*, %"struct.libgav1::TransformParameters"** %37, align 8
  br label %44

44:                                               ; preds = %41, %28
  %45 = phi %"struct.libgav1::TransformParameters"* [ %36, %28 ], [ %43, %41 ]
  %46 = icmp eq %"struct.libgav1::TransformParameters"* %45, null
  br i1 %46, label %84, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds i8, i8* %4, i64 16
  %49 = bitcast i8* %48 to i64*
  store i64 %30, i64* %49, align 8
  %50 = getelementptr inbounds i8, i8* %4, i64 48
  %51 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %30, i64 12) #11
  %52 = extractvalue { i64, i1 } %51, 1
  %53 = extractvalue { i64, i1 } %51, 0
  %54 = select i1 %52, i64 -1, i64 %53
  %55 = call noalias i8* @_ZnamRKSt9nothrow_t(i64 %54, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #10
  %56 = icmp eq i8* %55, null
  br i1 %56, label %69, label %57

57:                                               ; preds = %47
  %58 = bitcast i8* %55 to %"struct.libgav1::PartitionTreeNode"*
  %59 = icmp eq i32 %1, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %"struct.libgav1::PartitionTreeNode", %"struct.libgav1::PartitionTreeNode"* %58, i64 %30
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi %"struct.libgav1::PartitionTreeNode"* [ %58, %60 ], [ %67, %62 ]
  %64 = getelementptr inbounds %"struct.libgav1::PartitionTreeNode", %"struct.libgav1::PartitionTreeNode"* %63, i64 0, i32 0
  store i32 -1, i32* %64, align 4
  %65 = getelementptr inbounds %"struct.libgav1::PartitionTreeNode", %"struct.libgav1::PartitionTreeNode"* %63, i64 0, i32 1
  store i32 -1, i32* %65, align 4
  %66 = getelementptr inbounds %"struct.libgav1::PartitionTreeNode", %"struct.libgav1::PartitionTreeNode"* %63, i64 0, i32 2
  store i8 23, i8* %66, align 4
  %67 = getelementptr inbounds %"struct.libgav1::PartitionTreeNode", %"struct.libgav1::PartitionTreeNode"* %63, i64 1
  %68 = icmp eq %"struct.libgav1::PartitionTreeNode"* %67, %61
  br i1 %68, label %69, label %62

69:                                               ; preds = %62, %57, %47
  %70 = phi %"struct.libgav1::PartitionTreeNode"* [ null, %47 ], [ %58, %57 ], [ %58, %62 ]
  %71 = bitcast i8* %50 to %"struct.libgav1::PartitionTreeNode"**
  %72 = load %"struct.libgav1::PartitionTreeNode"*, %"struct.libgav1::PartitionTreeNode"** %71, align 8
  store %"struct.libgav1::PartitionTreeNode"* %70, %"struct.libgav1::PartitionTreeNode"** %71, align 8
  %73 = icmp eq %"struct.libgav1::PartitionTreeNode"* %72, null
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = bitcast %"struct.libgav1::PartitionTreeNode"* %72 to i8*
  call void @_ZdaPv(i8* %75) #10
  %76 = load %"struct.libgav1::PartitionTreeNode"*, %"struct.libgav1::PartitionTreeNode"** %71, align 8
  br label %77

77:                                               ; preds = %74, %69
  %78 = phi %"struct.libgav1::PartitionTreeNode"* [ %70, %69 ], [ %76, %74 ]
  %79 = icmp eq %"struct.libgav1::PartitionTreeNode"* %78, null
  br i1 %79, label %84, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %4, i64 56
  %82 = bitcast i8* %81 to i64*
  store i64 %30, i64* %82, align 8
  %83 = bitcast i8* %4 to %"class.libgav1::ResidualBuffer"*
  br label %103

84:                                               ; preds = %24, %44, %77
  %85 = getelementptr inbounds i8, i8* %4, i64 48
  %86 = bitcast i8* %85 to %"struct.libgav1::PartitionTreeNode"**
  %87 = load %"struct.libgav1::PartitionTreeNode"*, %"struct.libgav1::PartitionTreeNode"** %86, align 8
  store %"struct.libgav1::PartitionTreeNode"* null, %"struct.libgav1::PartitionTreeNode"** %86, align 8
  %88 = icmp eq %"struct.libgav1::PartitionTreeNode"* %87, null
  br i1 %88, label %91, label %89

89:                                               ; preds = %84
  %90 = bitcast %"struct.libgav1::PartitionTreeNode"* %87 to i8*
  call void @_ZdaPv(i8* %90) #10
  br label %91

91:                                               ; preds = %89, %84
  %92 = getelementptr inbounds i8, i8* %4, i64 8
  %93 = bitcast i8* %92 to %"struct.libgav1::TransformParameters"**
  %94 = load %"struct.libgav1::TransformParameters"*, %"struct.libgav1::TransformParameters"** %93, align 8
  store %"struct.libgav1::TransformParameters"* null, %"struct.libgav1::TransformParameters"** %93, align 8
  %95 = icmp eq %"struct.libgav1::TransformParameters"* %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"struct.libgav1::TransformParameters", %"struct.libgav1::TransformParameters"* %94, i64 0, i32 0
  call void @_ZdaPv(i8* %97) #10
  br label %98

98:                                               ; preds = %96, %91
  %99 = load i8*, i8** %25, align 8
  store i8* null, i8** %25, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %102, label %101

101:                                              ; preds = %98
  call void @free(i8* nonnull %99) #11
  br label %102

102:                                              ; preds = %98, %101
  call void @_ZdlPv(i8* nonnull %4) #11
  br label %103

103:                                              ; preds = %2, %80, %102
  %104 = phi %"class.libgav1::ResidualBuffer"* [ null, %102 ], [ %83, %80 ], [ null, %2 ]
  ret %"class.libgav1::ResidualBuffer"* %104
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav118ResidualBufferPool7ReleaseENSt3__110unique_ptrINS_14ResidualBufferENS1_14default_deleteIS3_EEEE(%"class.libgav1::ResidualBufferPool"*, %"class.libgav1::ResidualBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 1, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 1, i32 2
  %8 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = load i64, i64* %7, align 8
  %11 = add i64 %4, -1
  %12 = and i64 %4, 3
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %6, %14
  %15 = phi i64 [ %20, %14 ], [ %10, %6 ]
  %16 = phi i64 [ %21, %14 ], [ %4, %6 ]
  %17 = phi i64 [ %22, %14 ], [ %12, %6 ]
  %18 = add i64 %15, 1
  %19 = icmp eq i64 %18, %9
  %20 = select i1 %19, i64 0, i64 %18
  %21 = add i64 %16, -1
  %22 = add i64 %17, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %14, !llvm.loop !2

24:                                               ; preds = %14, %6
  %25 = phi i64 [ undef, %6 ], [ %20, %14 ]
  %26 = phi i64 [ %10, %6 ], [ %20, %14 ]
  %27 = phi i64 [ %4, %6 ], [ %21, %14 ]
  %28 = icmp ult i64 %11, 3
  br i1 %28, label %46, label %29

29:                                               ; preds = %24, %29
  %30 = phi i64 [ %43, %29 ], [ %26, %24 ]
  %31 = phi i64 [ %44, %29 ], [ %27, %24 ]
  %32 = add i64 %30, 1
  %33 = icmp eq i64 %32, %9
  %34 = add i64 %30, 2
  %35 = select i1 %33, i64 1, i64 %34
  %36 = icmp eq i64 %35, %9
  %37 = add i64 %35, 1
  %38 = select i1 %36, i64 1, i64 %37
  %39 = icmp eq i64 %38, %9
  %40 = add i64 %38, 1
  %41 = select i1 %39, i64 1, i64 %40
  %42 = icmp eq i64 %41, %9
  %43 = select i1 %42, i64 0, i64 %41
  %44 = add i64 %31, -4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %29

46:                                               ; preds = %29, %24
  %47 = phi i64 [ %25, %24 ], [ %43, %29 ]
  store i64 %47, i64* %7, align 8
  store i64 0, i64* %3, align 8
  br label %48

48:                                               ; preds = %2, %46
  %49 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 2, i32 4
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %94, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 2, i32 2
  %54 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 2, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = load i64, i64* %53, align 8
  %57 = add i64 %50, -1
  %58 = and i64 %50, 3
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %52, %60
  %61 = phi i64 [ %66, %60 ], [ %56, %52 ]
  %62 = phi i64 [ %67, %60 ], [ %50, %52 ]
  %63 = phi i64 [ %68, %60 ], [ %58, %52 ]
  %64 = add i64 %61, 1
  %65 = icmp eq i64 %64, %55
  %66 = select i1 %65, i64 0, i64 %64
  %67 = add i64 %62, -1
  %68 = add i64 %63, -1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %60, !llvm.loop !4

70:                                               ; preds = %60, %52
  %71 = phi i64 [ undef, %52 ], [ %66, %60 ]
  %72 = phi i64 [ %56, %52 ], [ %66, %60 ]
  %73 = phi i64 [ %50, %52 ], [ %67, %60 ]
  %74 = icmp ult i64 %57, 3
  br i1 %74, label %92, label %75

75:                                               ; preds = %70, %75
  %76 = phi i64 [ %89, %75 ], [ %72, %70 ]
  %77 = phi i64 [ %90, %75 ], [ %73, %70 ]
  %78 = add i64 %76, 1
  %79 = icmp eq i64 %78, %55
  %80 = add i64 %76, 2
  %81 = select i1 %79, i64 1, i64 %80
  %82 = icmp eq i64 %81, %55
  %83 = add i64 %81, 1
  %84 = select i1 %82, i64 1, i64 %83
  %85 = icmp eq i64 %84, %55
  %86 = add i64 %84, 1
  %87 = select i1 %85, i64 1, i64 %86
  %88 = icmp eq i64 %87, %55
  %89 = select i1 %88, i64 0, i64 %87
  %90 = add i64 %77, -4
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %75

92:                                               ; preds = %75, %70
  %93 = phi i64 [ %71, %70 ], [ %89, %75 ]
  store i64 %93, i64* %53, align 8
  store i64 0, i64* %49, align 8
  br label %94

94:                                               ; preds = %92, %48
  %95 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %95) #11
  %96 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1
  %97 = getelementptr inbounds %"class.libgav1::ResidualBufferStack", %"class.libgav1::ResidualBufferStack"* %96, i64 0, i32 0
  %98 = bitcast %"class.libgav1::ResidualBufferStack"* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"class.libgav1::ResidualBuffer", %"class.libgav1::ResidualBuffer"* %1, i64 0, i32 3
  %101 = bitcast %"class.libgav1::ResidualBuffer"** %100 to i64*
  store i64 %99, i64* %101, align 8
  store %"class.libgav1::ResidualBuffer"* %1, %"class.libgav1::ResidualBuffer"** %97, align 8
  %102 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %102, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %95) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7libgav118ResidualBufferPool4SizeEv(%"class.libgav1::ResidualBufferPool"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %2) #11
  %3 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %0, i64 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #11
  ret i64 %4
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @posix_memalign(i8**, i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #8

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnamRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #5

declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
