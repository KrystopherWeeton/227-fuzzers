; ModuleID = '../../components/viz/common/frame_sinks/copy_output_result.cc'
source_filename = "../../components/viz/common/frame_sinks/copy_output_result.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::CopyOutputResult" = type { i32 (...)**, i8, %"class.gfx::Rect", i8, %class.SkBitmap }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.16 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type <{ %class.SkRefCnt.base, i32, i32, [4 x i8], i8*, i64, %"struct.std::__1::atomic.1", [4 x i8], %"class.SkIDChangeListener::List", %"struct.std::__1::atomic.11", i8, [6 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.6" }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.11", [3 x i8] }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.15, i32, i32 }
%class.sk_sp.15 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.16 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.viz::CopyOutputSkBitmapResult" = type { %"class.viz::CopyOutputResult" }
%"class.viz::CopyOutputTextureResult" = type { %"class.viz::CopyOutputResult", %"struct.viz::CopyOutputResult::TextureResult", %"class.base::OnceCallback" }
%"struct.viz::CopyOutputResult::TextureResult" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", %"class.gfx::ColorSpace", [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType", i64 }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.viz::CopyOutputResult::ScopedSkBitmap" = type { %"class.viz::CopyOutputResult"* }

@_ZTVN3viz16CopyOutputResultE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD2Ev to i8*), i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD0Ev to i8*), i8* bitcast (%"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult16GetTextureResultEv to i8*), i8* bitcast (void (%"class.base::OnceCallback"*, %"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResult20TakeTextureOwnershipEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32, i8*, i32, i8*, i32)* @_ZNK3viz16CopyOutputResult14ReadI420PlanesEPhiS1_iS1_i to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32)* @_ZNK3viz16CopyOutputResult13ReadRGBAPlaneEPhi to i8*), i8* bitcast (void (%"class.gfx::ColorSpace"*, %"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult17GetRGBAColorSpaceEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult12LockSkBitmapEv to i8*), i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult14UnlockSkBitmapEv to i8*), i8* bitcast (%class.SkBitmap* (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult10AsSkBitmapEv to i8*)] }, align 8
@_ZTVN3viz24CopyOutputSkBitmapResultE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD2Ev to i8*), i8* bitcast (void (%"class.viz::CopyOutputSkBitmapResult"*)* @_ZN3viz24CopyOutputSkBitmapResultD0Ev to i8*), i8* bitcast (%"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult16GetTextureResultEv to i8*), i8* bitcast (void (%"class.base::OnceCallback"*, %"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResult20TakeTextureOwnershipEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32, i8*, i32, i8*, i32)* @_ZNK3viz16CopyOutputResult14ReadI420PlanesEPhiS1_iS1_i to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32)* @_ZNK3viz16CopyOutputResult13ReadRGBAPlaneEPhi to i8*), i8* bitcast (void (%"class.gfx::ColorSpace"*, %"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult17GetRGBAColorSpaceEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult12LockSkBitmapEv to i8*), i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult14UnlockSkBitmapEv to i8*), i8* bitcast (%class.SkBitmap* (%"class.viz::CopyOutputSkBitmapResult"*)* @_ZNK3viz24CopyOutputSkBitmapResult10AsSkBitmapEv to i8*)] }, align 8
@_ZTVN3viz23CopyOutputTextureResultE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::CopyOutputTextureResult"*)* @_ZN3viz23CopyOutputTextureResultD2Ev to i8*), i8* bitcast (void (%"class.viz::CopyOutputTextureResult"*)* @_ZN3viz23CopyOutputTextureResultD0Ev to i8*), i8* bitcast (%"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputTextureResult"*)* @_ZNK3viz23CopyOutputTextureResult16GetTextureResultEv to i8*), i8* bitcast (void (%"class.base::OnceCallback"*, %"class.viz::CopyOutputTextureResult"*)* @_ZN3viz23CopyOutputTextureResult20TakeTextureOwnershipEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32, i8*, i32, i8*, i32)* @_ZNK3viz16CopyOutputResult14ReadI420PlanesEPhiS1_iS1_i to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*, i8*, i32)* @_ZNK3viz16CopyOutputResult13ReadRGBAPlaneEPhi to i8*), i8* bitcast (void (%"class.gfx::ColorSpace"*, %"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult17GetRGBAColorSpaceEv to i8*), i8* bitcast (i1 (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult12LockSkBitmapEv to i8*), i8* bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult14UnlockSkBitmapEv to i8*), i8* bitcast (%class.SkBitmap* (%"class.viz::CopyOutputResult"*)* @_ZNK3viz16CopyOutputResult10AsSkBitmapEv to i8*)] }, align 8

@_ZN3viz16CopyOutputResultC1ENS0_6FormatERKN3gfx4RectEb = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult"*, i8, %"class.gfx::Rect"*, i1), void (%"class.viz::CopyOutputResult"*, i8, %"class.gfx::Rect"*, i1)* @_ZN3viz16CopyOutputResultC2ENS0_6FormatERKN3gfx4RectEb
@_ZN3viz16CopyOutputResultD1Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult"*), void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD2Ev
@_ZN3viz24CopyOutputSkBitmapResultC1ERKN3gfx4RectE8SkBitmap = hidden unnamed_addr alias void (%"class.viz::CopyOutputSkBitmapResult"*, %"class.gfx::Rect"*, %class.SkBitmap*), void (%"class.viz::CopyOutputSkBitmapResult"*, %"class.gfx::Rect"*, %class.SkBitmap*)* @_ZN3viz24CopyOutputSkBitmapResultC2ERKN3gfx4RectE8SkBitmap
@_ZN3viz24CopyOutputSkBitmapResultC1ENS_16CopyOutputResult6FormatERKN3gfx4RectE8SkBitmap = hidden unnamed_addr alias void (%"class.viz::CopyOutputSkBitmapResult"*, i8, %"class.gfx::Rect"*, %class.SkBitmap*), void (%"class.viz::CopyOutputSkBitmapResult"*, i8, %"class.gfx::Rect"*, %class.SkBitmap*)* @_ZN3viz24CopyOutputSkBitmapResultC2ENS_16CopyOutputResult6FormatERKN3gfx4RectE8SkBitmap
@_ZN3viz24CopyOutputSkBitmapResultD2Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputSkBitmapResult"*), bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD2Ev to void (%"class.viz::CopyOutputSkBitmapResult"*)*)
@_ZN3viz24CopyOutputSkBitmapResultD1Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputSkBitmapResult"*), bitcast (void (%"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResultD2Ev to void (%"class.viz::CopyOutputSkBitmapResult"*)*)
@_ZN3viz23CopyOutputTextureResultC1ERKN3gfx4RectERKN3gpu7MailboxERKNS5_9SyncTokenERKNS1_10ColorSpaceEN4base12OnceCallbackIFvSB_bEEE = hidden unnamed_addr alias void (%"class.viz::CopyOutputTextureResult"*, %"class.gfx::Rect"*, %"struct.gpu::Mailbox"*, %"struct.gpu::SyncToken"*, %"class.gfx::ColorSpace"*, %"class.base::OnceCallback"*), void (%"class.viz::CopyOutputTextureResult"*, %"class.gfx::Rect"*, %"struct.gpu::Mailbox"*, %"struct.gpu::SyncToken"*, %"class.gfx::ColorSpace"*, %"class.base::OnceCallback"*)* @_ZN3viz23CopyOutputTextureResultC2ERKN3gfx4RectERKN3gpu7MailboxERKNS5_9SyncTokenERKNS1_10ColorSpaceEN4base12OnceCallbackIFvSB_bEEE
@_ZN3viz23CopyOutputTextureResultD1Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputTextureResult"*), void (%"class.viz::CopyOutputTextureResult"*)* @_ZN3viz23CopyOutputTextureResultD2Ev
@_ZN3viz16CopyOutputResult14ScopedSkBitmapC1Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*), void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*)* @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2Ev
@_ZN3viz16CopyOutputResult14ScopedSkBitmapC1EPKS0_ = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*, %"class.viz::CopyOutputResult"*), void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*, %"class.viz::CopyOutputResult"*)* @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2EPKS0_
@_ZN3viz16CopyOutputResult14ScopedSkBitmapC1EOS1_ = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*, %"class.viz::CopyOutputResult::ScopedSkBitmap"*), void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*, %"class.viz::CopyOutputResult::ScopedSkBitmap"*)* @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2EOS1_
@_ZN3viz16CopyOutputResult14ScopedSkBitmapD1Ev = hidden unnamed_addr alias void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*), void (%"class.viz::CopyOutputResult::ScopedSkBitmap"*)* @_ZN3viz16CopyOutputResult14ScopedSkBitmapD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResultC2ENS0_6FormatERKN3gfx4RectEb(%"class.viz::CopyOutputResult"*, i8 zeroext, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 1
  store i8 %1, i8* %7, align 8
  %8 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 2
  %9 = bitcast %"class.gfx::Rect"* %8 to i8*
  %10 = bitcast %"class.gfx::Rect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 16, i1 false)
  %11 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 3
  store i8 %5, i8* %11, align 4
  %12 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 4
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %12) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResultD2Ev(%"class.viz::CopyOutputResult"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 4
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %3) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResultD0Ev(%"class.viz::CopyOutputResult"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 4
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %3) #7
  %4 = bitcast %"class.viz::CopyOutputResult"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz16CopyOutputResult7IsEmptyEv(%"class.viz::CopyOutputResult"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 2, i32 1, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 2, i32 1, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 1
  %11 = load i8, i8* %10, align 8
  switch i8 %11, label %22 [
    i8 0, label %23
    i8 2, label %23
    i8 1, label %12
  ]

12:                                               ; preds = %9
  %13 = bitcast %"class.viz::CopyOutputResult"* %0 to %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)***
  %14 = load %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)**, %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)*** %13, align 8
  %15 = getelementptr inbounds %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)*, %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)** %14, i64 2
  %16 = load %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)*, %"struct.viz::CopyOutputResult::TextureResult"* (%"class.viz::CopyOutputResult"*)** %15, align 8
  %17 = tail call %"struct.viz::CopyOutputResult::TextureResult"* %16(%"class.viz::CopyOutputResult"* %0) #7
  %18 = icmp eq %"struct.viz::CopyOutputResult::TextureResult"* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"struct.viz::CopyOutputResult::TextureResult", %"struct.viz::CopyOutputResult::TextureResult"* %17, i64 0, i32 0
  %21 = tail call zeroext i1 @_ZNK3gpu7Mailbox6IsZeroEv(%"struct.gpu::Mailbox"* %20) #7
  br label %23

22:                                               ; preds = %9
  br label %23

23:                                               ; preds = %1, %19, %12, %9, %9, %5, %22
  %24 = phi i1 [ true, %22 ], [ true, %5 ], [ false, %9 ], [ false, %9 ], [ %21, %19 ], [ true, %12 ], [ true, %1 ]
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK3gpu7Mailbox6IsZeroEv(%"struct.gpu::Mailbox"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK3viz16CopyOutputResult12LockSkBitmapEv(%"class.viz::CopyOutputResult"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK3viz16CopyOutputResult14UnlockSkBitmapEv(%"class.viz::CopyOutputResult"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(56) %class.SkBitmap* @_ZNK3viz16CopyOutputResult10AsSkBitmapEv(%"class.viz::CopyOutputResult"* readnone) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 4
  ret %class.SkBitmap* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv(%"class.viz::CopyOutputResult::ScopedSkBitmap"* noalias nocapture sret, %"class.viz::CopyOutputResult"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %3, align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.viz::CopyOutputResult"* %1 to i1 (%"class.viz::CopyOutputResult"*)***
  %9 = load i1 (%"class.viz::CopyOutputResult"*)**, i1 (%"class.viz::CopyOutputResult"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %9, i64 7
  %11 = load i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.viz::CopyOutputResult"* %1) #7
  br i1 %12, label %13, label %14

13:                                               ; preds = %7, %2
  store %"class.viz::CopyOutputResult"* %1, %"class.viz::CopyOutputResult"** %3, align 8
  br label %14

14:                                               ; preds = %7, %13
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"struct.viz::CopyOutputResult::TextureResult"* @_ZNK3viz16CopyOutputResult16GetTextureResultEv(%"class.viz::CopyOutputResult"* nocapture readnone) unnamed_addr #5 align 2 {
  ret %"struct.viz::CopyOutputResult::TextureResult"* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz16CopyOutputResult20TakeTextureOwnershipEv(%"class.base::OnceCallback"* noalias nocapture sret, %"class.viz::CopyOutputResult"* nocapture readnone) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %0, i64 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz16CopyOutputResult14ReadI420PlanesEPhiS1_iS1_i(%"class.viz::CopyOutputResult"*, i8*, i32, i8*, i32, i8*, i32) unnamed_addr #0 align 2 {
  %8 = alloca %class.SkBitmap, align 8
  %9 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 4, !range !2, !noalias !3
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %20, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.viz::CopyOutputResult"* %0 to i1 (%"class.viz::CopyOutputResult"*)***
  %14 = load i1 (%"class.viz::CopyOutputResult"*)**, i1 (%"class.viz::CopyOutputResult"*)*** %13, align 8, !noalias !3
  %15 = getelementptr inbounds i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %14, i64 7
  %16 = load i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %15, align 8, !noalias !3
  %17 = tail call zeroext i1 %16(%"class.viz::CopyOutputResult"* %0) #7, !noalias !3
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = bitcast %class.SkBitmap* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %19) #7
  br label %29

20:                                               ; preds = %7, %12
  %21 = bitcast %class.SkBitmap* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %21) #7
  %22 = icmp eq %"class.viz::CopyOutputResult"* %0, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %20
  %24 = bitcast %"class.viz::CopyOutputResult"* %0 to %class.SkBitmap* (%"class.viz::CopyOutputResult"*)***
  %25 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)**, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*** %24, align 8
  %26 = getelementptr inbounds %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %25, i64 9
  %27 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %26, align 8
  %28 = tail call dereferenceable(56) %class.SkBitmap* %27(%"class.viz::CopyOutputResult"* nonnull %0) #7
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %8, %class.SkBitmap* dereferenceable(56) %28) #7
  br label %31

29:                                               ; preds = %18, %20
  %30 = phi i8* [ %19, %18 ], [ %21, %20 ]
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %8) #7
  br label %31

31:                                               ; preds = %23, %29
  %32 = phi i1 [ false, %23 ], [ true, %29 ]
  %33 = phi i8* [ %21, %23 ], [ %30, %29 ]
  %34 = phi %"class.viz::CopyOutputResult"* [ %0, %23 ], [ null, %29 ]
  %35 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %61, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 2, i32 0, i32 1
  %40 = load i32, i32* %39, align 8
  switch i32 %40, label %61 [
    i32 6, label %41
    i32 4, label %51
  ]

41:                                               ; preds = %38
  %42 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = trunc i64 %43 to i32
  %45 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 2, i32 1, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 2, i32 1, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = call i32 @ARGBToI420(i8* nonnull %36, i32 %44, i8* %1, i32 %2, i8* %3, i32 %4, i8* %5, i32 %6, i32 %46, i32 %48) #7
  %50 = icmp eq i32 %49, 0
  br label %61

51:                                               ; preds = %38
  %52 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 2, i32 1, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %8, i64 0, i32 1, i32 2, i32 1, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = call i32 @ABGRToI420(i8* nonnull %36, i32 %54, i8* %1, i32 %2, i8* %3, i32 %4, i8* %5, i32 %6, i32 %56, i32 %58) #7
  %60 = icmp eq i32 %59, 0
  br label %61

61:                                               ; preds = %31, %38, %41, %51
  %62 = phi i1 [ false, %31 ], [ %50, %41 ], [ %60, %51 ], [ false, %38 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %33) #7
  br i1 %32, label %72, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %34, i64 0, i32 3
  %65 = load i8, i8* %64, align 4, !range !2
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67

67:                                               ; preds = %63
  %68 = bitcast %"class.viz::CopyOutputResult"* %34 to void (%"class.viz::CopyOutputResult"*)***
  %69 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %69, i64 8
  %71 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %70, align 8
  call void %71(%"class.viz::CopyOutputResult"* nonnull %34) #7
  br label %72

72:                                               ; preds = %61, %63, %67
  ret i1 %62
}

declare i32 @ARGBToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

declare i32 @ABGRToI420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz16CopyOutputResult13ReadRGBAPlaneEPhi(%"class.viz::CopyOutputResult"*, i8*, i32) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBitmap, align 8
  %5 = alloca %struct.SkImageInfo, align 8
  %6 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %0, i64 0, i32 3
  %7 = load i8, i8* %6, align 4, !range !2, !noalias !6
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %17, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.viz::CopyOutputResult"* %0 to i1 (%"class.viz::CopyOutputResult"*)***
  %11 = load i1 (%"class.viz::CopyOutputResult"*)**, i1 (%"class.viz::CopyOutputResult"*)*** %10, align 8, !noalias !6
  %12 = getelementptr inbounds i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %11, i64 7
  %13 = load i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %12, align 8, !noalias !6
  %14 = tail call zeroext i1 %13(%"class.viz::CopyOutputResult"* %0) #7, !noalias !6
  br i1 %14, label %17, label %15

15:                                               ; preds = %9
  %16 = bitcast %class.SkBitmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %16) #7
  br label %26

17:                                               ; preds = %3, %9
  %18 = bitcast %class.SkBitmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %18) #7
  %19 = icmp eq %"class.viz::CopyOutputResult"* %0, null
  br i1 %19, label %26, label %20

20:                                               ; preds = %17
  %21 = bitcast %"class.viz::CopyOutputResult"* %0 to %class.SkBitmap* (%"class.viz::CopyOutputResult"*)***
  %22 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)**, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*** %21, align 8
  %23 = getelementptr inbounds %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %22, i64 9
  %24 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %23, align 8
  %25 = tail call dereferenceable(56) %class.SkBitmap* %24(%"class.viz::CopyOutputResult"* nonnull %0) #7
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %4, %class.SkBitmap* dereferenceable(56) %25) #7
  br label %28

26:                                               ; preds = %15, %17
  %27 = phi i8* [ %16, %15 ], [ %18, %17 ]
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %4) #7
  br label %28

28:                                               ; preds = %20, %26
  %29 = phi i1 [ false, %20 ], [ true, %26 ]
  %30 = phi i8* [ %18, %20 ], [ %27, %26 ]
  %31 = phi %"class.viz::CopyOutputResult"* [ %0, %20 ], [ null, %26 ]
  %32 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %4, i64 0, i32 1, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %71, label %35

35:                                               ; preds = %28
  %36 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #7
  %37 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %4, i64 0, i32 1, i32 2, i32 1, i32 0
  %40 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 24, i1 false)
  %41 = load i32, i32* %39, align 8
  %42 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %4, i64 0, i32 1, i32 2, i32 1, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %4, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %45 = load %class.SkColorSpace*, %class.SkColorSpace** %44, align 8, !noalias !9
  %46 = icmp eq %class.SkColorSpace* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 1 monotonic, !noalias !9
  br label %50

50:                                               ; preds = %47, %35
  %51 = ptrtoint %class.SkColorSpace* %45 to i64
  %52 = zext i32 %43 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %41 to i64
  %55 = or i64 %53, %54
  %56 = bitcast %struct.SkImageInfo* %5 to i64*
  store i64 %51, i64* %56, align 8, !alias.scope !16
  %57 = bitcast i32* %38 to i64*
  store i64 8589934598, i64* %57, align 8, !alias.scope !16
  %58 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 1
  %59 = bitcast %struct.SkISize* %58 to i64*
  store i64 %55, i64* %59, align 8, !alias.scope !16
  %60 = sext i32 %2 to i64
  %61 = call zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap* nonnull %4, %struct.SkImageInfo* nonnull dereferenceable(24) %5, i8* %1, i64 %60, i32 0, i32 0) #7
  %62 = load %class.SkColorSpace*, %class.SkColorSpace** %37, align 8
  %63 = icmp eq %class.SkColorSpace* %62, null
  br i1 %63, label %70, label %64

64:                                               ; preds = %50
  %65 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 -1 acq_rel
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  %69 = bitcast %class.SkColorSpace* %62 to i8*
  call void @_ZdlPv(i8* %69) #8
  br label %70

70:                                               ; preds = %50, %64, %68
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #7
  br label %71

71:                                               ; preds = %28, %70
  %72 = phi i1 [ true, %70 ], [ false, %28 ]
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %30) #7
  br i1 %29, label %82, label %73

73:                                               ; preds = %71
  %74 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %31, i64 0, i32 3
  %75 = load i8, i8* %74, align 4, !range !2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = bitcast %"class.viz::CopyOutputResult"* %31 to void (%"class.viz::CopyOutputResult"*)***
  %79 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %78, align 8
  %80 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %79, i64 8
  %81 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %80, align 8
  call void %81(%"class.viz::CopyOutputResult"* nonnull %31) #7
  br label %82

82:                                               ; preds = %71, %73, %77
  ret i1 %72
}

declare zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz16CopyOutputResult17GetRGBAColorSpaceEv(%"class.gfx::ColorSpace"* noalias sret, %"class.viz::CopyOutputResult"*) unnamed_addr #0 align 2 {
  %3 = alloca %class.SkBitmap, align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2, !noalias !21
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.viz::CopyOutputResult"* %1 to i1 (%"class.viz::CopyOutputResult"*)***
  %9 = load i1 (%"class.viz::CopyOutputResult"*)**, i1 (%"class.viz::CopyOutputResult"*)*** %8, align 8, !noalias !21
  %10 = getelementptr inbounds i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %9, i64 7
  %11 = load i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %10, align 8, !noalias !21
  %12 = tail call zeroext i1 %11(%"class.viz::CopyOutputResult"* %1) #7, !noalias !21
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = bitcast %class.SkBitmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %14) #7
  br label %24

15:                                               ; preds = %2, %7
  %16 = bitcast %class.SkBitmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %16) #7
  %17 = icmp eq %"class.viz::CopyOutputResult"* %1, null
  br i1 %17, label %24, label %18

18:                                               ; preds = %15
  %19 = bitcast %"class.viz::CopyOutputResult"* %1 to %class.SkBitmap* (%"class.viz::CopyOutputResult"*)***
  %20 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)**, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*** %19, align 8
  %21 = getelementptr inbounds %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %20, i64 9
  %22 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %21, align 8
  %23 = tail call dereferenceable(56) %class.SkBitmap* %22(%"class.viz::CopyOutputResult"* nonnull %1) #7
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* nonnull %3, %class.SkBitmap* dereferenceable(56) %23) #7
  br label %26

24:                                               ; preds = %13, %15
  %25 = phi i8* [ %14, %13 ], [ %16, %15 ]
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %3) #7
  br label %26

26:                                               ; preds = %18, %24
  %27 = phi i1 [ false, %18 ], [ true, %24 ]
  %28 = phi i8* [ %16, %18 ], [ %25, %24 ]
  %29 = phi %"class.viz::CopyOutputResult"* [ %1, %18 ], [ null, %24 ]
  %30 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %0, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 68, i1 false) #7
  br label %38

35:                                               ; preds = %26
  %36 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %37 = load %class.SkColorSpace*, %class.SkColorSpace** %36, align 8
  call void @_ZN3gfx10ColorSpaceC1ERK12SkColorSpace(%"class.gfx::ColorSpace"* %0, %class.SkColorSpace* dereferenceable(144) %37) #7
  br label %38

38:                                               ; preds = %35, %33
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #7
  br i1 %27, label %48, label %39

39:                                               ; preds = %38
  %40 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %29, i64 0, i32 3
  %41 = load i8, i8* %40, align 4, !range !2
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = bitcast %"class.viz::CopyOutputResult"* %29 to void (%"class.viz::CopyOutputResult"*)***
  %45 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %45, i64 8
  %47 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %46, align 8
  call void %47(%"class.viz::CopyOutputResult"* nonnull %29) #7
  br label %48

48:                                               ; preds = %38, %39, %43
  ret void
}

declare void @_ZN3gfx10ColorSpaceC1ERK12SkColorSpace(%"class.gfx::ColorSpace"*, %class.SkColorSpace* dereferenceable(144)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24CopyOutputSkBitmapResultC2ERKN3gfx4RectE8SkBitmap(%"class.viz::CopyOutputSkBitmapResult"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %class.SkBitmap*) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBitmap, align 8
  call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* nonnull %4, %class.SkBitmap* dereferenceable(56) %2) #7
  %5 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 2
  %8 = bitcast %"class.gfx::Rect"* %7 to i8*
  %9 = bitcast %"class.gfx::Rect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false) #7
  %10 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %11) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz24CopyOutputSkBitmapResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap* %11, %class.SkBitmap* nonnull dereferenceable(56) %4) #7
  br label %21

21:                                               ; preds = %3, %15, %19
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %4) #7
  ret void
}

declare void @_ZN8SkBitmapC1EOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24CopyOutputSkBitmapResultC2ENS_16CopyOutputResult6FormatERKN3gfx4RectE8SkBitmap(%"class.viz::CopyOutputSkBitmapResult"*, i8 zeroext, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %class.SkBitmap*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 1
  store i8 %1, i8* %6, align 8
  %7 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 2
  %8 = bitcast %"class.gfx::Rect"* %7 to i8*
  %9 = bitcast %"class.gfx::Rect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false) #7
  %10 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %11) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz24CopyOutputSkBitmapResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %12 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %2, i64 0, i32 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = tail call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap* %11, %class.SkBitmap* dereferenceable(56) %3) #7
  br label %21

21:                                               ; preds = %4, %19, %15
  ret void
}

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSEOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(56) %class.SkBitmap* @_ZNK3viz24CopyOutputSkBitmapResult10AsSkBitmapEv(%"class.viz::CopyOutputSkBitmapResult"*) unnamed_addr #0 align 2 {
  %2 = alloca %struct.SkImageInfo, align 8
  %3 = alloca %class.SkBitmap, align 8
  %4 = alloca %class.SkPixmap, align 8
  %5 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4
  %6 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %85, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 2, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %85, label %13

13:                                               ; preds = %9
  %14 = bitcast %struct.SkImageInfo* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #7
  %15 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 2, i32 0, i32 0, i32 0
  %18 = bitcast %struct.SkImageInfo* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  %19 = load %class.SkColorSpace*, %class.SkColorSpace** %17, align 8, !noalias !24
  %20 = icmp eq %class.SkColorSpace* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = atomicrmw add i32* %22, i32 1 monotonic, !noalias !24
  br label %24

24:                                               ; preds = %21, %13
  %25 = ptrtoint %class.SkColorSpace* %19 to i64
  %26 = zext i32 %11 to i64
  %27 = shl nuw i64 %26, 32
  %28 = zext i32 %7 to i64
  %29 = or i64 %27, %28
  %30 = bitcast %struct.SkImageInfo* %2 to i64*
  store i64 %25, i64* %30, align 8, !alias.scope !31
  %31 = bitcast i32* %16 to i64*
  store i64 8589934598, i64* %31, align 8, !alias.scope !31
  %32 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 1
  %33 = bitcast %struct.SkISize* %32 to i64*
  store i64 %29, i64* %33, align 8, !alias.scope !31
  %34 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 2, i32 1, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, %7
  br i1 %36, label %37, label %56

37:                                               ; preds = %24
  %38 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 2, i32 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, %11
  br i1 %40, label %41, label %56

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 2, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 6
  br i1 %44, label %45, label %56

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 2, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %56

49:                                               ; preds = %45
  %50 = load %class.SkColorSpace*, %class.SkColorSpace** %17, align 8
  %51 = tail call zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace* %50, %class.SkColorSpace* %19) #7
  br i1 %51, label %52, label %56

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4, i32 1, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq i8* %54, null
  br i1 %55, label %56, label %75

56:                                               ; preds = %52, %24, %41, %45, %37, %49
  %57 = bitcast %class.SkBitmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %57) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %3) #7
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* nonnull %3, %struct.SkImageInfo* nonnull dereferenceable(24) %2) #7
  call void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap* nonnull %3, i32 -16777216) #7
  %58 = bitcast %class.SkPixmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %58) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 0, i64 40, i1 false) #7
  %59 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %5, %class.SkPixmap* nonnull %4) #7
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = call zeroext i1 @_ZN8SkBitmap11writePixelsERK8SkPixmapii(%class.SkBitmap* nonnull %3, %class.SkPixmap* nonnull dereferenceable(40) %4, i32 0, i32 0) #7
  br label %62

62:                                               ; preds = %60, %56
  %63 = call dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap* %5, %class.SkBitmap* nonnull dereferenceable(56) %3) #7
  %64 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %65 = load %class.SkColorSpace*, %class.SkColorSpace** %64, align 8
  %66 = icmp eq %class.SkColorSpace* %65, null
  br i1 %66, label %73, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 -1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %73

71:                                               ; preds = %67
  %72 = bitcast %class.SkColorSpace* %65 to i8*
  call void @_ZdlPv(i8* %72) #8
  br label %73

73:                                               ; preds = %62, %67, %71
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %58) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %57) #7
  %74 = load %class.SkColorSpace*, %class.SkColorSpace** %15, align 8
  br label %75

75:                                               ; preds = %52, %73
  %76 = phi %class.SkColorSpace* [ %19, %52 ], [ %74, %73 ]
  %77 = icmp eq %class.SkColorSpace* %76, null
  br i1 %77, label %84, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 -1 acq_rel
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = bitcast %class.SkColorSpace* %76 to i8*
  call void @_ZdlPv(i8* %83) #8
  br label %84

84:                                               ; preds = %75, %78, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  br label %85

85:                                               ; preds = %1, %9, %84
  ret %class.SkBitmap* %5
}

declare void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK8SkBitmap10eraseColorEj(%class.SkBitmap*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #2

declare dereferenceable(56) %class.SkBitmap* @_ZN8SkBitmapaSERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24CopyOutputSkBitmapResultD0Ev(%"class.viz::CopyOutputSkBitmapResult"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::CopyOutputSkBitmapResult", %"class.viz::CopyOutputSkBitmapResult"* %0, i64 0, i32 0, i32 4
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %3) #7
  %4 = bitcast %"class.viz::CopyOutputSkBitmapResult"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz23CopyOutputTextureResultC2ERKN3gfx4RectERKN3gpu7MailboxERKNS5_9SyncTokenERKNS1_10ColorSpaceEN4base12OnceCallbackIFvSB_bEEE(%"class.viz::CopyOutputTextureResult"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"struct.gpu::Mailbox"* nocapture readonly dereferenceable(16), %"struct.gpu::SyncToken"* dereferenceable(24), %"class.gfx::ColorSpace"* nocapture readonly dereferenceable(68), %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 1
  store i8 1, i8* %8, align 8
  %9 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 2
  %10 = bitcast %"class.gfx::Rect"* %9 to i8*
  %11 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 16, i1 false) #7
  %12 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 4
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %13) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz23CopyOutputTextureResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %14 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  %15 = getelementptr inbounds %"struct.gpu::Mailbox", %"struct.gpu::Mailbox"* %2, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 1 %15, i64 16, i1 false) #7
  %16 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 1, i32 1
  tail call void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"* %16, %"struct.gpu::SyncToken"* dereferenceable(24) %3) #7
  %17 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 1, i32 2, i32 0
  %18 = getelementptr inbounds %"class.gfx::ColorSpace", %"class.gfx::ColorSpace"* %4, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 4 %18, i64 68, i1 false) #7
  %19 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 2
  %20 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.base::OnceCallback"* %19 to i64*
  store i64 %22, i64* %23, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz23CopyOutputTextureResultD2Ev(%"class.viz::CopyOutputTextureResult"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = alloca %"struct.gpu::SyncToken", align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz23CopyOutputTextureResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"struct.gpu::SyncToken", %"struct.gpu::SyncToken"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  call void @_ZN3gpu9SyncTokenC1Ev(%"struct.gpu::SyncToken"* nonnull %3) #7
  %12 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #7
  %13 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %14, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %17 = inttoptr i64 %14 to %"class.base::internal::BindStateBase"*
  %18 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %17, i64 0, i32 1
  %19 = bitcast void ()** %18 to void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)**
  %20 = load void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)*, void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)** %19, align 8
  call void %20(%"class.base::internal::BindStateBase"* %17, %"struct.gpu::SyncToken"* nonnull dereferenceable(24) %3, i1 zeroext false) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %21

21:                                               ; preds = %1, %10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %6) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %22 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 4
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %22) #7
  ret void
}

declare void @_ZN3gpu9SyncTokenC1Ev(%"struct.gpu::SyncToken"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz23CopyOutputTextureResultD0Ev(%"class.viz::CopyOutputTextureResult"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::OnceCallback", align 8
  %3 = alloca %"struct.gpu::SyncToken", align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz23CopyOutputTextureResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = icmp eq %"class.base::internal::BindStateBase"* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"struct.gpu::SyncToken", %"struct.gpu::SyncToken"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  call void @_ZN3gpu9SyncTokenC1Ev(%"struct.gpu::SyncToken"* nonnull %3) #7
  %12 = bitcast %"class.base::OnceCallback"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #7
  %13 = bitcast %"class.base::OnceCallback"* %5 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.base::OnceCallback"* %2 to i64*
  store i64 %14, i64* %15, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %7, align 8
  %16 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0
  %17 = inttoptr i64 %14 to %"class.base::internal::BindStateBase"*
  %18 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %17, i64 0, i32 1
  %19 = bitcast void ()** %18 to void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)**
  %20 = load void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)*, void (%"class.base::internal::BindStateBase"*, %"struct.gpu::SyncToken"*, i1)** %19, align 8
  call void %20(%"class.base::internal::BindStateBase"* %17, %"struct.gpu::SyncToken"* nonnull dereferenceable(24) %3, i1 zeroext false) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %21

21:                                               ; preds = %1, %10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %6) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN3viz16CopyOutputResultE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %22 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 0, i32 4
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %22) #7
  %23 = bitcast %"class.viz::CopyOutputTextureResult"* %0 to i8*
  call void @_ZdlPv(i8* %23) #8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"struct.viz::CopyOutputResult::TextureResult"* @_ZNK3viz23CopyOutputTextureResult16GetTextureResultEv(%"class.viz::CopyOutputTextureResult"* readnone) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %0, i64 0, i32 1
  ret %"struct.viz::CopyOutputResult::TextureResult"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz23CopyOutputTextureResult20TakeTextureOwnershipEv(%"class.base::OnceCallback"* noalias nocapture sret, %"class.viz::CopyOutputTextureResult"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.gpu::Mailbox", align 1
  %4 = alloca %"struct.gpu::SyncToken", align 8
  %5 = getelementptr inbounds %"struct.gpu::Mailbox", %"struct.gpu::Mailbox"* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #7
  call void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"* nonnull %3) #7
  %6 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %1, i64 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* nonnull align 1 %5, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #7
  %7 = getelementptr inbounds %"struct.gpu::SyncToken", %"struct.gpu::SyncToken"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  call void @_ZN3gpu9SyncTokenC1Ev(%"struct.gpu::SyncToken"* nonnull %4) #7
  %8 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %1, i64 0, i32 1, i32 1, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* nonnull align 8 %7, i64 24, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  %9 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %1, i64 0, i32 1, i32 2, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 68, i1 false)
  %10 = getelementptr inbounds %"class.viz::CopyOutputTextureResult", %"class.viz::CopyOutputTextureResult"* %1, i64 0, i32 2
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = bitcast %"class.base::OnceCallback"* %10 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.base::OnceCallback"* %0 to i64*
  store i64 %13, i64* %14, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %11, align 8
  ret void
}

declare void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"*) unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2Ev(%"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2EPKS0_(%"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture, %"class.viz::CopyOutputResult"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %3, align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %1, i64 0, i32 3
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.viz::CopyOutputResult"* %1 to i1 (%"class.viz::CopyOutputResult"*)***
  %9 = load i1 (%"class.viz::CopyOutputResult"*)**, i1 (%"class.viz::CopyOutputResult"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %9, i64 7
  %11 = load i1 (%"class.viz::CopyOutputResult"*)*, i1 (%"class.viz::CopyOutputResult"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.viz::CopyOutputResult"* %1) #7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2, %7
  store %"class.viz::CopyOutputResult"* %1, %"class.viz::CopyOutputResult"** %3, align 8
  br label %14

14:                                               ; preds = %13, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResult14ScopedSkBitmapC2EOS1_(%"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture, %"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %3, align 8
  %4 = bitcast %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0 to i64*
  %5 = bitcast %"class.viz::CopyOutputResult::ScopedSkBitmap"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %4, align 8
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.viz::CopyOutputResult::ScopedSkBitmap"* @_ZN3viz16CopyOutputResult14ScopedSkBitmapaSEOS1_(%"class.viz::CopyOutputResult::ScopedSkBitmap"* returned, %"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  %4 = load %"class.viz::CopyOutputResult"*, %"class.viz::CopyOutputResult"** %3, align 8
  %5 = icmp eq %"class.viz::CopyOutputResult"* %4, null
  %6 = ptrtoint %"class.viz::CopyOutputResult"* %4 to i64
  br i1 %5, label %16, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %4, i64 0, i32 3
  %9 = load i8, i8* %8, align 4, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %7
  %12 = bitcast %"class.viz::CopyOutputResult"* %4 to void (%"class.viz::CopyOutputResult"*)***
  %13 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %13, i64 8
  %15 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %14, align 8
  tail call void %15(%"class.viz::CopyOutputResult"* nonnull %4) #7
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %3, align 8
  br label %16

16:                                               ; preds = %2, %7, %11
  %17 = phi i64 [ %6, %2 ], [ %6, %7 ], [ 0, %11 ]
  %18 = bitcast %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0 to i64*
  %19 = bitcast %"class.viz::CopyOutputResult::ScopedSkBitmap"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %18, align 8
  store i64 %17, i64* %19, align 8
  ret %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResult14ScopedSkBitmapD2Ev(%"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  %3 = load %"class.viz::CopyOutputResult"*, %"class.viz::CopyOutputResult"** %2, align 8
  %4 = icmp eq %"class.viz::CopyOutputResult"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %3, i64 0, i32 3
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.viz::CopyOutputResult"* %3 to void (%"class.viz::CopyOutputResult"*)***
  %11 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %11, i64 8
  %13 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %12, align 8
  tail call void %13(%"class.viz::CopyOutputResult"* nonnull %3) #7
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %2, align 8
  br label %14

14:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz16CopyOutputResult14ScopedSkBitmap5resetEv(%"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %0, i64 0, i32 0
  %3 = load %"class.viz::CopyOutputResult"*, %"class.viz::CopyOutputResult"** %2, align 8
  %4 = icmp eq %"class.viz::CopyOutputResult"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %3, i64 0, i32 3
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.viz::CopyOutputResult"* %3 to void (%"class.viz::CopyOutputResult"*)***
  %11 = load void (%"class.viz::CopyOutputResult"*)**, void (%"class.viz::CopyOutputResult"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %11, i64 8
  %13 = load void (%"class.viz::CopyOutputResult"*)*, void (%"class.viz::CopyOutputResult"*)** %12, align 8
  tail call void %13(%"class.viz::CopyOutputResult"* nonnull %3) #7
  store %"class.viz::CopyOutputResult"* null, %"class.viz::CopyOutputResult"** %2, align 8
  br label %14

14:                                               ; preds = %5, %1, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz16CopyOutputResult14ScopedSkBitmap18GetOutScopedBitmapEv(%class.SkBitmap* noalias sret, %"class.viz::CopyOutputResult::ScopedSkBitmap"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkBitmap, align 8
  %4 = getelementptr inbounds %"class.viz::CopyOutputResult::ScopedSkBitmap", %"class.viz::CopyOutputResult::ScopedSkBitmap"* %1, i64 0, i32 0
  %5 = load %"class.viz::CopyOutputResult"*, %"class.viz::CopyOutputResult"** %4, align 8
  %6 = icmp eq %"class.viz::CopyOutputResult"* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* %0) #7
  br label %29

8:                                                ; preds = %2
  %9 = bitcast %"class.viz::CopyOutputResult"* %5 to %class.SkBitmap* (%"class.viz::CopyOutputResult"*)***
  %10 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)**, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*** %9, align 8
  %11 = getelementptr inbounds %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %10, i64 9
  %12 = load %class.SkBitmap* (%"class.viz::CopyOutputResult"*)*, %class.SkBitmap* (%"class.viz::CopyOutputResult"*)** %11, align 8
  %13 = tail call dereferenceable(56) %class.SkBitmap* %12(%"class.viz::CopyOutputResult"* nonnull %5) #7
  %14 = load %"class.viz::CopyOutputResult"*, %"class.viz::CopyOutputResult"** %4, align 8
  %15 = getelementptr inbounds %"class.viz::CopyOutputResult", %"class.viz::CopyOutputResult"* %14, i64 0, i32 3
  %16 = load i8, i8* %15, align 4, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %8
  tail call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %0, %class.SkBitmap* dereferenceable(56) %13) #7
  br label %29

19:                                               ; preds = %8
  %20 = bitcast %class.SkBitmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %3) #7
  %21 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %13, i64 0, i32 1, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %13, i64 0, i32 1, i32 2
  call void @_ZN8SkBitmap11allocPixelsERK11SkImageInfo(%class.SkBitmap* nonnull %3, %struct.SkImageInfo* dereferenceable(24) %25) #7
  %26 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %3, i64 0, i32 1
  %27 = call zeroext i1 @_ZNK8SkBitmap10readPixelsERK8SkPixmapii(%class.SkBitmap* %13, %class.SkPixmap* dereferenceable(40) %26, i32 0, i32 0) #7
  br label %28

28:                                               ; preds = %19, %24
  call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %0, %class.SkBitmap* nonnull dereferenceable(56) %3) #7
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #7
  br label %29

29:                                               ; preds = %18, %28, %7
  ret void
}

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap10readPixelsERK8SkPixmapii(%class.SkBitmap*, %class.SkPixmap* dereferenceable(40), i32, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkColorSpace6EqualsEPKS_S1_(%class.SkColorSpace*, %class.SkColorSpace*) local_unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap11writePixelsERK8SkPixmapii(%class.SkBitmap*, %class.SkPixmap* dereferenceable(40), i32, i32) local_unnamed_addr #2

declare void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"*, %"struct.gpu::SyncToken"* dereferenceable(24)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv: argument 0"}
!5 = distinct !{!5, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv: argument 0"}
!8 = distinct !{!8, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv"}
!9 = !{!10, !12, !14}
!10 = distinct !{!10, !11, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!11 = distinct !{!11, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!12 = distinct !{!12, !13, !"_ZNK11SkImageInfo13refColorSpaceEv: argument 0"}
!13 = distinct !{!13, !"_ZNK11SkImageInfo13refColorSpaceEv"}
!14 = distinct !{!14, !15, !"_ZNK8SkBitmap13refColorSpaceEv: argument 0"}
!15 = distinct !{!15, !"_ZNK8SkBitmap13refColorSpaceEv"}
!16 = !{!17, !19}
!17 = distinct !{!17, !18, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!18 = distinct !{!18, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!19 = distinct !{!19, !20, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!20 = distinct !{!20, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv: argument 0"}
!23 = distinct !{!23, !"_ZNK3viz16CopyOutputResult20ScopedAccessSkBitmapEv"}
!24 = !{!25, !27, !29}
!25 = distinct !{!25, !26, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!26 = distinct !{!26, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!27 = distinct !{!27, !28, !"_ZNK11SkImageInfo13refColorSpaceEv: argument 0"}
!28 = distinct !{!28, !"_ZNK11SkImageInfo13refColorSpaceEv"}
!29 = distinct !{!29, !30, !"_ZNK8SkBitmap13refColorSpaceEv: argument 0"}
!30 = distinct !{!30, !"_ZNK8SkBitmap13refColorSpaceEv"}
!31 = !{!32, !34}
!32 = distinct !{!32, !33, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!33 = distinct !{!33, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!34 = distinct !{!34, !35, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE: argument 0"}
!35 = distinct !{!35, !"_ZN11SkImageInfo13MakeN32PremulEii5sk_spI12SkColorSpaceE"}
