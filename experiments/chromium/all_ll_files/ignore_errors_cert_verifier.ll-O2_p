; ModuleID = '../../services/network/ignore_errors_cert_verifier.cc'
source_filename = "../../services/network/ignore_errors_cert_verifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.network::IgnoreErrorsCertVerifier" = type { %"class.net::CertVerifier", %"class.std::__1::unique_ptr", %"class.base::internal::flat_tree" }
%"class.net::CertVerifier" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::CertVerifier"* }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.20" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"*, %"class.std::__1::__compressed_pair.22" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.net::SHA256HashValue"* }
%"class.base::CommandLine" = type { %"class.std::__1::vector", %"class.std::__1::map", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.net::CertVerifier::RequestParams" = type { %class.scoped_refptr, %"class.std::__1::basic_string", i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%class.scoped_refptr = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr.31", %"class.std::__1::vector.35" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.std::__1::unique_ptr.31"*, %"class.std::__1::unique_ptr.31"*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::unique_ptr.31"* }
%"class.net::CertVerifyResult" = type <{ %"class.base::SupportsUserData.base", [7 x i8], %class.scoped_refptr, i32, i8, i8, i8, i8, i8, [7 x i8], %"class.std::__1::vector.52", i8, i8, [2 x i8], %"struct.net::OCSPVerifyResult", [4 x i8], %"class.std::__1::vector.60", i32, [4 x i8] }>
%"class.base::SupportsUserData.base" = type <{ i32 (...)**, %"class.std::__1::map.42", %"class.base::SequenceCheckerDoNothing" }>
%"class.std::__1::map.42" = type { %"class.std::__1::__tree.43" }
%"class.std::__1::__tree.43" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.44", %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.55" }
%"class.net::HashValue" = type { i32, %union.anon.54 }
%union.anon.54 = type { %"struct.net::SHA256HashValue" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.net::HashValue"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.64" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.62, i32, [4 x i8] }>
%class.scoped_refptr.62 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.63", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.63" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.70 }
%class.scoped_refptr.70 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.71", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.71" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.69" = type opaque
%"class.net::NetLogWithSource" = type opaque
%"class.std::__1::back_insert_iterator" = type { %"class.std::__1::vector.52"* }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"struct.net::CertVerifier::Config" = type { i8, i8, i8, i8, %class.scoped_refptr.73, %"class.std::__1::vector.74", %"class.std::__1::vector.74" }
%class.scoped_refptr.73 = type { %"class.net::CRLSet"* }
%"class.net::CRLSet" = type opaque
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %class.scoped_refptr* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__split_buffer" = type { %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.23", %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.std::__1::allocator.25"* }
%"class.std::__1::allocator.25" = type { i8 }

$_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIN3net15SHA256HashValueERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_ = comdat any

$_ZNSt3__120back_insert_iteratorINS_6vectorIN3net9HashValueENS_9allocatorIS3_EEEEEaSEOS3_ = comdat any

@_ZN7network8switches32kIgnoreCertificateErrorsSPKIListE = external constant [0 x i8], align 1
@.str = private unnamed_addr constant [2 x i8] c",\00", align 1
@_ZTVN7network24IgnoreErrorsCertVerifierE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.network::IgnoreErrorsCertVerifier"*)* @_ZN7network24IgnoreErrorsCertVerifierD2Ev to i8*), i8* bitcast (void (%"class.network::IgnoreErrorsCertVerifier"*)* @_ZN7network24IgnoreErrorsCertVerifierD0Ev to i8*), i8* bitcast (i32 (%"class.network::IgnoreErrorsCertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)* @_ZN7network24IgnoreErrorsCertVerifier6VerifyERKN3net12CertVerifier13RequestParamsEPNS1_16CertVerifyResultEN4base12OnceCallbackIFviEEEPNSt3__110unique_ptrINS2_7RequestENSC_14default_deleteISE_EEEERKNS1_16NetLogWithSourceE to i8*), i8* bitcast (void (%"class.network::IgnoreErrorsCertVerifier"*, %"struct.net::CertVerifier::Config"*)* @_ZN7network24IgnoreErrorsCertVerifier9SetConfigERKN3net12CertVerifier6ConfigE to i8*)] }, align 8

@_ZN7network24IgnoreErrorsCertVerifierC1ENSt3__110unique_ptrIN3net12CertVerifierENS1_14default_deleteIS4_EEEEN4base8internal9flat_treeINS3_15SHA256HashValueENS8_8identityENS1_4lessIvEENS1_6vectorISB_NS1_9allocatorISB_EEEEEE = hidden unnamed_addr alias void (%"class.network::IgnoreErrorsCertVerifier"*, %"class.net::CertVerifier"*, %"class.base::internal::flat_tree"*), void (%"class.network::IgnoreErrorsCertVerifier"*, %"class.net::CertVerifier"*, %"class.base::internal::flat_tree"*)* @_ZN7network24IgnoreErrorsCertVerifierC2ENSt3__110unique_ptrIN3net12CertVerifierENS1_14default_deleteIS4_EEEEN4base8internal9flat_treeINS3_15SHA256HashValueENS8_8identityENS1_4lessIvEENS1_6vectorISB_NS1_9allocatorISB_EEEEEE
@_ZN7network24IgnoreErrorsCertVerifierD1Ev = hidden unnamed_addr alias void (%"class.network::IgnoreErrorsCertVerifier"*), void (%"class.network::IgnoreErrorsCertVerifier"*)* @_ZN7network24IgnoreErrorsCertVerifierD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::CertVerifier"* @_ZN7network24IgnoreErrorsCertVerifier21MaybeWrapCertVerifierERKN4base11CommandLineEPKcNSt3__110unique_ptrIN3net12CertVerifierENS7_14default_deleteISA_EEEE(%"class.base::CommandLine"* dereferenceable(56), i8*, %"class.net::CertVerifier"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.base::internal::flat_tree", align 16
  %7 = ptrtoint %"class.net::CertVerifier"* %2 to i64
  %8 = icmp eq i8* %1, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %0, i8* nonnull %1) #10
  br i1 %10, label %11, label %75

11:                                               ; preds = %3, %9
  %12 = tail call zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches32kIgnoreCertificateErrorsSPKIListE, i64 0, i64 0)) #10
  br i1 %12, label %13, label %75

13:                                               ; preds = %11
  %14 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %18 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #10
  %19 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches32kIgnoreCertificateErrorsSPKIListE, i64 0, i64 0)) #10
  call void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %5, %"class.base::CommandLine"* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7network8switches32kIgnoreCertificateErrorsSPKIListE, i64 0, i64 0), i64 %19) #10
  %20 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = select i1 %23, i8* %25, i8* %17
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = zext i8 %22 to i64
  %30 = select i1 %23, i64 %28, i64 %29
  call void @_ZN4base11SplitStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* nonnull sret %4, i8* %26, i64 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i64 1, i32 1, i32 0) #10
  %31 = load i8, i8* %21, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %13
  %34 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %34) #11
  br label %35

35:                                               ; preds = %33, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #10
  %36 = bitcast %"class.base::internal::flat_tree"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #10
  call void @_ZN7network17CreateSPKIHashSetERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(%"class.base::internal::flat_tree"* nonnull sret %6, %"class.std::__1::vector"* nonnull dereferenceable(24) %4) #10
  %37 = call i8* @_Znwm(i64 40) #11
  %38 = bitcast %"class.base::internal::flat_tree"* %6 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 16
  %40 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %41 = bitcast %"struct.net::SHA256HashValue"** %40 to i64*
  %42 = load i64, i64* %41, align 16
  %43 = bitcast i8* %37 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7network24IgnoreErrorsCertVerifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %43, align 8
  %44 = getelementptr inbounds i8, i8* %37, i64 8
  %45 = bitcast i8* %44 to i64*
  store i64 %7, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %37, i64 16
  %47 = bitcast i8* %46 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %47, align 8
  %48 = getelementptr inbounds i8, i8* %37, i64 32
  %49 = bitcast i8* %48 to i64*
  store i64 %42, i64* %49, align 8
  %50 = ptrtoint i8* %37 to i64
  %51 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  %52 = icmp eq %"class.std::__1::basic_string"* %51, null
  br i1 %52, label %74, label %53

53:                                               ; preds = %35
  %54 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  %55 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %16, align 8
  %56 = icmp eq %"class.std::__1::basic_string"* %55, %51
  br i1 %56, label %72, label %57

57:                                               ; preds = %53, %67
  %58 = phi %"class.std::__1::basic_string"* [ %59, %67 ], [ %55, %53 ]
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %58, i64 -1
  %60 = bitcast %"class.std::__1::basic_string"* %59 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @_ZdlPv(i8* %66) #11
  br label %67

67:                                               ; preds = %64, %57
  %68 = icmp eq %"class.std::__1::basic_string"* %59, %51
  br i1 %68, label %69, label %57

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %4 to i8**
  %71 = load i8*, i8** %70, align 8
  br label %72

72:                                               ; preds = %69, %53
  %73 = phi i8* [ %71, %69 ], [ %54, %53 ]
  store %"class.std::__1::basic_string"* %51, %"class.std::__1::basic_string"** %16, align 8
  call void @_ZdlPv(i8* %73) #11
  br label %74

74:                                               ; preds = %35, %72
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  br label %75

75:                                               ; preds = %74, %11, %9
  %76 = phi i64 [ %50, %74 ], [ %7, %11 ], [ %7, %9 ]
  %77 = inttoptr i64 %76 to %"class.net::CertVerifier"*
  ret %"class.net::CertVerifier"* %77
}

declare zeroext i1 @_ZNK4base11CommandLine9HasSwitchEPKc(%"class.base::CommandLine"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base11SplitStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector"* sret, i8*, i64, i8*, i64, i32, i32) local_unnamed_addr #1

declare void @_ZNK4base11CommandLine19GetSwitchValueASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, %"class.base::CommandLine"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7network17CreateSPKIHashSetERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEE(%"class.base::internal::flat_tree"* sret, %"class.std::__1::vector"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network24IgnoreErrorsCertVerifierC2ENSt3__110unique_ptrIN3net12CertVerifierENS1_14default_deleteIS4_EEEEN4base8internal9flat_treeINS3_15SHA256HashValueENS8_8identityENS1_4lessIvEENS1_6vectorISB_NS1_9allocatorISB_EEEEEE(%"class.network::IgnoreErrorsCertVerifier"* nocapture, %"class.net::CertVerifier"*, %"class.base::internal::flat_tree"* nocapture) unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.net::CertVerifier"* %1 to i64
  %5 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7network24IgnoreErrorsCertVerifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %4, i64* %7, align 8
  %8 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2
  %9 = bitcast %"class.base::internal::flat_tree"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #10
  %10 = bitcast %"class.base::internal::flat_tree"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.base::internal::flat_tree"* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %2, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast %"struct.net::SHA256HashValue"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %17 = bitcast %"struct.net::SHA256HashValue"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.net::SHA256HashValue"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"struct.net::SHA256HashValue"** %21 to i64*
  store i64 %20, i64* %22, align 8
  %23 = bitcast %"class.base::internal::flat_tree"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network24IgnoreErrorsCertVerifierD2Ev(%"class.network::IgnoreErrorsCertVerifier"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7network24IgnoreErrorsCertVerifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %3, align 8
  %5 = icmp eq %"struct.net::SHA256HashValue"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.net::SHA256HashValue"* %4 to i64
  %8 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %4, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.net::CertVerifier"*, %"class.net::CertVerifier"** %12, align 8
  store %"class.net::CertVerifier"* null, %"class.net::CertVerifier"** %12, align 8
  %14 = icmp eq %"class.net::CertVerifier"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.net::CertVerifier"* %13 to void (%"class.net::CertVerifier"*)***
  %17 = load void (%"class.net::CertVerifier"*)**, void (%"class.net::CertVerifier"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::CertVerifier"*)*, void (%"class.net::CertVerifier"*)** %17, i64 1
  %19 = load void (%"class.net::CertVerifier"*)*, void (%"class.net::CertVerifier"*)** %18, align 8
  tail call void %19(%"class.net::CertVerifier"* nonnull %13) #10
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network24IgnoreErrorsCertVerifierD0Ev(%"class.network::IgnoreErrorsCertVerifier"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7network24IgnoreErrorsCertVerifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %3, align 8
  %5 = icmp eq %"struct.net::SHA256HashValue"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.net::SHA256HashValue"* %4 to i64
  %8 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %4, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.net::CertVerifier"*, %"class.net::CertVerifier"** %12, align 8
  store %"class.net::CertVerifier"* null, %"class.net::CertVerifier"** %12, align 8
  %14 = icmp eq %"class.net::CertVerifier"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.net::CertVerifier"* %13 to void (%"class.net::CertVerifier"*)***
  %17 = load void (%"class.net::CertVerifier"*)**, void (%"class.net::CertVerifier"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.net::CertVerifier"*)*, void (%"class.net::CertVerifier"*)** %17, i64 1
  %19 = load void (%"class.net::CertVerifier"*)*, void (%"class.net::CertVerifier"*)** %18, align 8
  tail call void %19(%"class.net::CertVerifier"* nonnull %13) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.network::IgnoreErrorsCertVerifier"* %0 to i8*
  tail call void @_ZdlPv(i8* %21) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7network24IgnoreErrorsCertVerifier6VerifyERKN3net12CertVerifier13RequestParamsEPNS1_16CertVerifyResultEN4base12OnceCallbackIFviEEEPNSt3__110unique_ptrINS2_7RequestENSC_14default_deleteISE_EEEERKNS1_16NetLogWithSourceE(%"class.network::IgnoreErrorsCertVerifier"* nocapture readonly, %"class.net::CertVerifier::RequestParams"* dereferenceable(112), %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"* nocapture, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*) unnamed_addr #0 align 2 {
  %7 = alloca %"class.std::__1::back_insert_iterator", align 8
  %8 = alloca %"class.net::HashValue", align 4
  %9 = alloca %"class.base::internal::flat_tree", align 8
  %10 = alloca %"class.base::BasicStringPiece", align 8
  %11 = alloca %"struct.net::SHA256HashValue", align 1
  %12 = alloca %"class.base::OnceCallback", align 8
  %13 = bitcast %"class.base::internal::flat_tree"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %9, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %9, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #10
  %16 = bitcast %"class.base::BasicStringPiece"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %10, i64 0, i32 0
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %10, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 16, i1 false) #10
  %19 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %11, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.net::CertVerifier::RequestParams", %"class.net::CertVerifier::RequestParams"* %1, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %19, i8 -86, i64 32, i1 false)
  %21 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %20, align 8
  %22 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %21, i64 0, i32 6, i32 0, i32 0, i32 0
  %23 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %22, align 8
  %24 = tail call { i8*, i64 } @_ZN3net9x509_util25CryptoBufferAsStringPieceEPK16crypto_buffer_st(%struct.crypto_buffer_st* %23) #10
  %25 = extractvalue { i8*, i64 } %24, 0
  %26 = extractvalue { i8*, i64 } %24, 1
  %27 = call zeroext i1 @_ZN3net4asn122ExtractSPKIFromDERCertEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPS6_(i8* %25, i64 %26, %"class.base::BasicStringPiece"* nonnull %10) #10
  br i1 %27, label %28, label %64

28:                                               ; preds = %6
  %29 = load i8*, i8** %17, align 8
  %30 = load i64, i64* %18, align 8
  call void @_ZN6crypto16SHA256HashStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPvm(i8* %29, i64 %30, i8* nonnull %19, i64 32) #10
  %31 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %14, align 8
  %32 = bitcast %"struct.net::SHA256HashValue"** %15 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = ptrtoint %"struct.net::SHA256HashValue"* %31 to i64
  %35 = sub i64 %33, %34
  %36 = icmp eq i64 %35, 0
  %37 = inttoptr i64 %33 to %"struct.net::SHA256HashValue"*
  br i1 %36, label %54, label %38

38:                                               ; preds = %28
  %39 = ashr exact i64 %35, 5
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi %"struct.net::SHA256HashValue"* [ %31, %38 ], [ %52, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %51, %40 ]
  %43 = lshr i64 %42, 1
  %44 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %41, i64 %43
  %45 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %44, i64 0, i32 0, i64 0
  %46 = call i32 @memcmp(i8* %45, i8* nonnull %19, i64 32) #12
  %47 = icmp slt i32 %46, 0
  %48 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %44, i64 1
  %49 = xor i64 %43, -1
  %50 = add i64 %42, %49
  %51 = select i1 %47, i64 %50, i64 %43
  %52 = select i1 %47, %"struct.net::SHA256HashValue"* %48, %"struct.net::SHA256HashValue"* %41
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %54, label %40

54:                                               ; preds = %40, %28
  %55 = phi %"struct.net::SHA256HashValue"* [ %31, %28 ], [ %52, %40 ]
  %56 = icmp eq %"struct.net::SHA256HashValue"* %55, %37
  br i1 %56, label %61, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %55, i64 0, i32 0, i64 0
  %59 = call i32 @memcmp(i8* nonnull %19, i8* %58, i64 32) #12
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %57, %54
  %62 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %9, i64 0, i32 0
  %63 = call %"struct.net::SHA256HashValue"* @_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_(%"class.std::__1::vector.20"* nonnull %62, %"struct.net::SHA256HashValue"* %55, %"struct.net::SHA256HashValue"* nonnull dereferenceable(32) %11) #10
  br label %64

64:                                               ; preds = %61, %57, %6
  %65 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %20, align 8
  %66 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %65, i64 0, i32 7, i32 0, i32 0
  %67 = load %"class.std::__1::unique_ptr.31"*, %"class.std::__1::unique_ptr.31"** %66, align 8
  %68 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %65, i64 0, i32 7, i32 0, i32 1
  %69 = load %"class.std::__1::unique_ptr.31"*, %"class.std::__1::unique_ptr.31"** %68, align 8
  %70 = icmp eq %"class.std::__1::unique_ptr.31"* %67, %69
  br i1 %70, label %74, label %71

71:                                               ; preds = %64
  %72 = bitcast %"struct.net::SHA256HashValue"** %15 to i64*
  %73 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %9, i64 0, i32 0
  br label %84

74:                                               ; preds = %126, %64
  %75 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %76 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %75, align 8
  %77 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %78 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %77, align 8
  %79 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %14, align 8
  %80 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %15, align 8
  %81 = icmp ne %"struct.net::SHA256HashValue"* %76, %78
  %82 = icmp ne %"struct.net::SHA256HashValue"* %79, %80
  %83 = and i1 %81, %82
  br i1 %83, label %129, label %196

84:                                               ; preds = %71, %126
  %85 = phi %"class.std::__1::unique_ptr.31"* [ %67, %71 ], [ %127, %126 ]
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.31"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = load %struct.crypto_buffer_st*, %struct.crypto_buffer_st** %86, align 8
  %88 = call { i8*, i64 } @_ZN3net9x509_util25CryptoBufferAsStringPieceEPK16crypto_buffer_st(%struct.crypto_buffer_st* %87) #10
  %89 = extractvalue { i8*, i64 } %88, 0
  %90 = extractvalue { i8*, i64 } %88, 1
  %91 = call zeroext i1 @_ZN3net4asn122ExtractSPKIFromDERCertEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPS6_(i8* %89, i64 %90, %"class.base::BasicStringPiece"* nonnull %10) #10
  br i1 %91, label %92, label %126

92:                                               ; preds = %84
  %93 = load i8*, i8** %17, align 8
  %94 = load i64, i64* %18, align 8
  call void @_ZN6crypto16SHA256HashStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPvm(i8* %93, i64 %94, i8* nonnull %19, i64 32) #10
  %95 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %14, align 8
  %96 = load i64, i64* %72, align 8
  %97 = ptrtoint %"struct.net::SHA256HashValue"* %95 to i64
  %98 = sub i64 %96, %97
  %99 = icmp eq i64 %98, 0
  %100 = inttoptr i64 %96 to %"struct.net::SHA256HashValue"*
  br i1 %99, label %117, label %101

101:                                              ; preds = %92
  %102 = ashr exact i64 %98, 5
  br label %103

103:                                              ; preds = %103, %101
  %104 = phi %"struct.net::SHA256HashValue"* [ %95, %101 ], [ %115, %103 ]
  %105 = phi i64 [ %102, %101 ], [ %114, %103 ]
  %106 = lshr i64 %105, 1
  %107 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %104, i64 %106
  %108 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %107, i64 0, i32 0, i64 0
  %109 = call i32 @memcmp(i8* %108, i8* nonnull %19, i64 32) #12
  %110 = icmp slt i32 %109, 0
  %111 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %107, i64 1
  %112 = xor i64 %106, -1
  %113 = add i64 %105, %112
  %114 = select i1 %110, i64 %113, i64 %106
  %115 = select i1 %110, %"struct.net::SHA256HashValue"* %111, %"struct.net::SHA256HashValue"* %104
  %116 = icmp eq i64 %114, 0
  br i1 %116, label %117, label %103

117:                                              ; preds = %103, %92
  %118 = phi %"struct.net::SHA256HashValue"* [ %95, %92 ], [ %115, %103 ]
  %119 = icmp eq %"struct.net::SHA256HashValue"* %118, %100
  br i1 %119, label %124, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %118, i64 0, i32 0, i64 0
  %122 = call i32 @memcmp(i8* nonnull %19, i8* %121, i64 32) #12
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %120, %117
  %125 = call %"struct.net::SHA256HashValue"* @_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_(%"class.std::__1::vector.20"* nonnull %73, %"struct.net::SHA256HashValue"* %118, %"struct.net::SHA256HashValue"* nonnull dereferenceable(32) %11) #10
  br label %126

126:                                              ; preds = %124, %120, %84
  %127 = getelementptr inbounds %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.31"* %85, i64 1
  %128 = icmp eq %"class.std::__1::unique_ptr.31"* %127, %69
  br i1 %128, label %74, label %84

129:                                              ; preds = %74, %143
  %130 = phi %"struct.net::SHA256HashValue"* [ %145, %143 ], [ %79, %74 ]
  %131 = phi %"struct.net::SHA256HashValue"* [ %144, %143 ], [ %76, %74 ]
  %132 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %131, i64 0, i32 0, i64 0
  %133 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %130, i64 0, i32 0, i64 0
  %134 = call i32 @memcmp(i8* %132, i8* %133, i64 32) #12
  %135 = icmp slt i32 %134, 0
  br i1 %135, label %136, label %138

136:                                              ; preds = %129
  %137 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %131, i64 1
  br label %143

138:                                              ; preds = %129
  %139 = call i32 @memcmp(i8* %133, i8* %132, i64 32) #12
  %140 = icmp slt i32 %139, 0
  br i1 %140, label %141, label %149

141:                                              ; preds = %138
  %142 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %130, i64 1
  br label %143

143:                                              ; preds = %141, %136
  %144 = phi %"struct.net::SHA256HashValue"* [ %137, %136 ], [ %131, %141 ]
  %145 = phi %"struct.net::SHA256HashValue"* [ %130, %136 ], [ %142, %141 ]
  %146 = icmp ne %"struct.net::SHA256HashValue"* %144, %78
  %147 = icmp ne %"struct.net::SHA256HashValue"* %145, %80
  %148 = and i1 %146, %147
  br i1 %148, label %129, label %196

149:                                              ; preds = %138
  call void @_ZN3net16CertVerifyResult5ResetEv(%"class.net::CertVerifyResult"* %2) #10
  %150 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %20, align 8
  %151 = icmp eq %"class.net::X509Certificate"* %150, null
  br i1 %151, label %155, label %152

152:                                              ; preds = %149
  %153 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %150, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = atomicrmw add i32* %153, i32 1 monotonic
  br label %155

155:                                              ; preds = %149, %152
  %156 = getelementptr inbounds %"class.net::CertVerifyResult", %"class.net::CertVerifyResult"* %2, i64 0, i32 2
  %157 = ptrtoint %"class.net::X509Certificate"* %150 to i64
  %158 = bitcast %class.scoped_refptr* %156 to i64*
  %159 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %156, i64 0, i32 0
  %160 = load %"class.net::X509Certificate"*, %"class.net::X509Certificate"** %159, align 8
  store i64 %157, i64* %158, align 8
  %161 = icmp eq %"class.net::X509Certificate"* %160, null
  br i1 %161, label %168, label %162

162:                                              ; preds = %155
  %163 = getelementptr inbounds %"class.net::X509Certificate", %"class.net::X509Certificate"* %160, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = atomicrmw sub i32* %163, i32 1 acq_rel
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %168

166:                                              ; preds = %162
  call void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"* nonnull %160) #10
  %167 = bitcast %"class.net::X509Certificate"* %160 to i8*
  call void @_ZdlPv(i8* %167) #11
  br label %168

168:                                              ; preds = %155, %162, %166
  %169 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %14, align 8
  %170 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %15, align 8
  %171 = getelementptr inbounds %"class.net::CertVerifyResult", %"class.net::CertVerifyResult"* %2, i64 0, i32 10
  %172 = bitcast %"class.std::__1::back_insert_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %172)
  %173 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %7, i64 0, i32 0
  store %"class.std::__1::vector.52"* %171, %"class.std::__1::vector.52"** %173, align 8
  %174 = icmp eq %"struct.net::SHA256HashValue"* %169, %170
  br i1 %174, label %182, label %175

175:                                              ; preds = %168
  %176 = bitcast %"class.net::HashValue"* %8 to i8*
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi %"struct.net::SHA256HashValue"* [ %169, %175 ], [ %180, %177 ]
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %176) #10
  call void @_ZN3net9HashValueC1ERKNS_15SHA256HashValueE(%"class.net::HashValue"* nonnull %8, %"struct.net::SHA256HashValue"* dereferenceable(32) %178) #10
  %179 = call dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN3net9HashValueENS_9allocatorIS3_EEEEEaSEOS3_(%"class.std::__1::back_insert_iterator"* nonnull %7, %"class.net::HashValue"* nonnull dereferenceable(36) %8) #10
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %176) #10
  %180 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 1
  %181 = icmp eq %"struct.net::SHA256HashValue"* %180, %170
  br i1 %181, label %182, label %177

182:                                              ; preds = %177, %168
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %172)
  %183 = getelementptr inbounds %"class.net::CertVerifier::RequestParams", %"class.net::CertVerifier::RequestParams"* %1, i64 0, i32 3
  %184 = bitcast %"class.std::__1::basic_string"* %183 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %185 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %184, i64 0, i32 1, i32 0
  %186 = load i8, i8* %185, align 1
  %187 = icmp slt i8 %186, 0
  %188 = getelementptr inbounds %"class.net::CertVerifier::RequestParams", %"class.net::CertVerifier::RequestParams"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %189 = load i64, i64* %188, align 8
  %190 = zext i8 %186 to i64
  %191 = select i1 %187, i64 %189, i64 %190
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %209, label %193

193:                                              ; preds = %182
  %194 = getelementptr inbounds %"class.net::CertVerifyResult", %"class.net::CertVerifyResult"* %2, i64 0, i32 14, i32 0
  store i32 2, i32* %194, align 4
  %195 = getelementptr inbounds %"class.net::CertVerifyResult", %"class.net::CertVerifyResult"* %2, i64 0, i32 14, i32 1
  store i32 0, i32* %195, align 4
  br label %209

196:                                              ; preds = %143, %74
  %197 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %198 = load %"class.net::CertVerifier"*, %"class.net::CertVerifier"** %197, align 8
  %199 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0, i32 0, i32 0
  %200 = bitcast %"class.base::OnceCallback"* %3 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.base::OnceCallback"* %12 to i64*
  store i64 %201, i64* %202, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %199, align 8
  %203 = bitcast %"class.net::CertVerifier"* %198 to i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)***
  %204 = load i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)**, i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)*** %203, align 8
  %205 = getelementptr inbounds i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)*, i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)** %204, i64 2
  %206 = load i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)*, i32 (%"class.net::CertVerifier"*, %"class.net::CertVerifier::RequestParams"*, %"class.net::CertVerifyResult"*, %"class.base::OnceCallback"*, %"class.std::__1::unique_ptr.69"*, %"class.net::NetLogWithSource"*)** %205, align 8
  %207 = call i32 %206(%"class.net::CertVerifier"* %198, %"class.net::CertVerifier::RequestParams"* dereferenceable(112) %1, %"class.net::CertVerifyResult"* %2, %"class.base::OnceCallback"* nonnull %12, %"class.std::__1::unique_ptr.69"* %4, %"class.net::NetLogWithSource"* %5) #10
  %208 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %12, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %208) #10
  br label %209

209:                                              ; preds = %182, %193, %196
  %210 = phi i32 [ %207, %196 ], [ 0, %193 ], [ 0, %182 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  %211 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %14, align 8
  %212 = icmp eq %"struct.net::SHA256HashValue"* %211, null
  br i1 %212, label %217, label %213

213:                                              ; preds = %209
  %214 = ptrtoint %"struct.net::SHA256HashValue"* %211 to i64
  %215 = bitcast %"struct.net::SHA256HashValue"** %15 to i64*
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %211, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %216) #11
  br label %217

217:                                              ; preds = %209, %213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #10
  ret i32 %210
}

declare zeroext i1 @_ZN3net4asn122ExtractSPKIFromDERCertEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPS6_(i8*, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #1

declare { i8*, i64 } @_ZN3net9x509_util25CryptoBufferAsStringPieceEPK16crypto_buffer_st(%struct.crypto_buffer_st*) local_unnamed_addr #1

declare void @_ZN6crypto16SHA256HashStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPvm(i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3net16CertVerifyResult5ResetEv(%"class.net::CertVerifyResult"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network24IgnoreErrorsCertVerifier9SetConfigERKN3net12CertVerifier6ConfigE(%"class.network::IgnoreErrorsCertVerifier"* nocapture readonly, %"struct.net::CertVerifier::Config"* dereferenceable(64)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.net::CertVerifier"*, %"class.net::CertVerifier"** %3, align 8
  %5 = bitcast %"class.net::CertVerifier"* %4 to void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)***
  %6 = load void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)**, void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)*, void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)** %6, i64 3
  %8 = load void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)*, void (%"class.net::CertVerifier"*, %"struct.net::CertVerifier::Config"*)** %7, align 8
  tail call void %8(%"class.net::CertVerifier"* %4, %"struct.net::CertVerifier::Config"* dereferenceable(64) %1) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7network24IgnoreErrorsCertVerifier22SetAllowlistForTestingERKN4base8internal9flat_treeIN3net15SHA256HashValueENS1_8identityENSt3__14lessIvEENS7_6vectorIS5_NS7_9allocatorIS5_EEEEEE(%"class.network::IgnoreErrorsCertVerifier"*, %"class.base::internal::flat_tree"* readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.network::IgnoreErrorsCertVerifier", %"class.network::IgnoreErrorsCertVerifier"* %0, i64 0, i32 2
  %4 = icmp eq %"class.base::internal::flat_tree"* %3, %1
  br i1 %4, label %11, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %9, align 8
  tail call void @_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.20"* %6, %"struct.net::SHA256HashValue"* %8, %"struct.net::SHA256HashValue"* %10) #10
  br label %11

11:                                               ; preds = %2, %5
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.20"*, %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.net::SHA256HashValue"* %2 to i64
  %5 = ptrtoint %"struct.net::SHA256HashValue"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 5
  %8 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.20"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 5
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.net::SHA256HashValue"*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.net::SHA256HashValue"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 5
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 %22
  %25 = select i1 %23, %"struct.net::SHA256HashValue"* %24, %"struct.net::SHA256HashValue"* %2
  %26 = ptrtoint %"struct.net::SHA256HashValue"* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 5
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %16, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 5
  %40 = inttoptr i64 %35 to i8*
  %41 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %25, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to %"struct.net::SHA256HashValue"*
  %43 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %42, i64 %39
  %44 = ptrtoint %"struct.net::SHA256HashValue"* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %16, i64 %28
  store %"struct.net::SHA256HashValue"* %48, %"struct.net::SHA256HashValue"** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %"struct.net::SHA256HashValue"** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %16, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %54) #11
  %55 = bitcast %"class.std::__1::vector.20"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 576460752303423487
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #13
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 5
  %63 = icmp ult i64 %62, 288230376151711743
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 4
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 576460752303423487
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #13
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 576460752303423487, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 5
  %74 = tail call i8* @_Znwm(i64 %73) #11
  %75 = bitcast i8* %74 to %"struct.net::SHA256HashValue"*
  %76 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 1
  %77 = bitcast %"struct.net::SHA256HashValue"** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.20"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %75, i64 %72
  store %"struct.net::SHA256HashValue"* %79, %"struct.net::SHA256HashValue"** %8, align 8
  %80 = bitcast %"struct.net::SHA256HashValue"** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 5
  %85 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %74, i8* align 1 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %75, i64 %84
  %87 = ptrtoint %"struct.net::SHA256HashValue"* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.net::SHA256HashValue"* @_ZNSt3__16vectorIN3net15SHA256HashValueENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_(%"class.std::__1::vector.20"*, %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.net::SHA256HashValue"* %1 to i64
  %5 = alloca [32 x i8], align 8
  %6 = alloca %"struct.std::__1::__split_buffer", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 1
  %9 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %10, align 8
  %12 = icmp ult %"struct.net::SHA256HashValue"* %9, %11
  %13 = ptrtoint %"struct.net::SHA256HashValue"* %9 to i64
  %14 = ptrtoint %"struct.net::SHA256HashValue"* %11 to i64
  br i1 %12, label %15, label %83

15:                                               ; preds = %3
  %16 = icmp eq %"struct.net::SHA256HashValue"* %9, %1
  br i1 %16, label %17, label %23

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  %19 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %2, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %19, i64 32, i1 false) #10
  %20 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 1
  %21 = ptrtoint %"struct.net::SHA256HashValue"* %20 to i64
  %22 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  store i64 %21, i64* %22, align 8
  br label %225

23:                                               ; preds = %15
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24)
  %25 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %2, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 1 %25, i64 32, i1 false)
  %26 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 1
  %27 = ptrtoint %"struct.net::SHA256HashValue"* %26 to i64
  %28 = sub i64 %13, %27
  %29 = ashr exact i64 %28, 5
  %30 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 %29
  %31 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  %32 = icmp ult %"struct.net::SHA256HashValue"* %30, %9
  br i1 %32, label %33, label %60

33:                                               ; preds = %23
  %34 = sub nsw i64 0, %29
  %35 = xor i64 %4, -1
  %36 = getelementptr %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %9, i64 %34, i32 0, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 5
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %33, %42
  %43 = phi %"struct.net::SHA256HashValue"* [ %49, %42 ], [ %9, %33 ]
  %44 = phi %"struct.net::SHA256HashValue"* [ %48, %42 ], [ %30, %33 ]
  %45 = phi i64 [ %50, %42 ], [ %40, %33 ]
  %46 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %43, i64 0, i32 0, i64 0
  %47 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %44, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 32, i1 false) #10
  %48 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %44, i64 1
  %49 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %43, i64 1
  %50 = add i64 %45, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %42, !llvm.loop !2

52:                                               ; preds = %42, %33
  %53 = phi %"struct.net::SHA256HashValue"* [ %9, %33 ], [ %49, %42 ]
  %54 = phi %"struct.net::SHA256HashValue"* [ %30, %33 ], [ %48, %42 ]
  %55 = phi %"struct.net::SHA256HashValue"* [ undef, %33 ], [ %49, %42 ]
  %56 = icmp ult i8* %36, inttoptr (i64 96 to i8*)
  br i1 %56, label %57, label %67

57:                                               ; preds = %67, %52
  %58 = phi %"struct.net::SHA256HashValue"* [ %55, %52 ], [ %79, %67 ]
  %59 = ptrtoint %"struct.net::SHA256HashValue"* %58 to i64
  br label %60

60:                                               ; preds = %57, %23
  %61 = phi i64 [ %59, %57 ], [ %13, %23 ]
  store i64 %61, i64* %31, align 8
  %62 = icmp eq i64 %28, 0
  br i1 %62, label %81, label %63

63:                                               ; preds = %60
  %64 = sub nsw i64 0, %29
  %65 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %9, i64 %64, i32 0, i64 0
  %66 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %66, i64 %28, i1 false) #10
  br label %81

67:                                               ; preds = %52, %67
  %68 = phi %"struct.net::SHA256HashValue"* [ %79, %67 ], [ %53, %52 ]
  %69 = phi %"struct.net::SHA256HashValue"* [ %78, %67 ], [ %54, %52 ]
  %70 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 0, i32 0, i64 0
  %71 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %69, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 32, i1 false) #10
  %72 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 1, i32 0, i64 0
  %73 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %69, i64 1, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %73, i64 32, i1 false) #10
  %74 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 2, i32 0, i64 0
  %75 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %69, i64 2, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 32, i1 false) #10
  %76 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 3, i32 0, i64 0
  %77 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %69, i64 3, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 32, i1 false) #10
  %78 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %69, i64 4
  %79 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 4
  %80 = icmp ult %"struct.net::SHA256HashValue"* %78, %9
  br i1 %80, label %67, label %57

81:                                               ; preds = %60, %63
  %82 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* nonnull align 8 %24, i64 32, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24)
  br label %225

83:                                               ; preds = %3
  %84 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 2
  %85 = bitcast %"struct.std::__1::__split_buffer"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %85) #10
  %86 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %6, i64 0, i32 0
  %87 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %6, i64 0, i32 1
  %88 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %6, i64 0, i32 2
  %89 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %6, i64 0, i32 3, i32 0, i32 0
  %90 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %6, i64 0, i32 3, i32 1, i32 0
  %91 = bitcast %"struct.net::SHA256HashValue"** %8 to i64*
  %92 = bitcast %"class.std::__1::vector.20"* %0 to i64*
  %93 = bitcast %"struct.std::__1::__split_buffer"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 40, i1 false)
  %94 = load i64, i64* %92, align 8
  %95 = sub i64 %13, %94
  %96 = ashr exact i64 %95, 5
  %97 = add nsw i64 %96, 1
  %98 = icmp ugt i64 %97, 576460752303423487
  br i1 %98, label %99, label %101

99:                                               ; preds = %83
  %100 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %100) #13
  unreachable

101:                                              ; preds = %83
  %102 = bitcast %"struct.net::SHA256HashValue"** %10 to i64*
  %103 = sub i64 %14, %94
  %104 = ashr exact i64 %103, 5
  %105 = icmp ult i64 %104, 288230376151711743
  br i1 %105, label %110, label %106

106:                                              ; preds = %101
  %107 = sub i64 %4, %94
  %108 = ashr exact i64 %107, 5
  store %"struct.net::SHA256HashValue"* null, %"struct.net::SHA256HashValue"** %89, align 8
  %109 = bitcast %"class.std::__1::allocator.25"** %90 to %"class.std::__1::__compressed_pair.22"**
  store %"class.std::__1::__compressed_pair.22"* %84, %"class.std::__1::__compressed_pair.22"** %109, align 8
  br label %121

110:                                              ; preds = %101
  %111 = ashr exact i64 %103, 4
  %112 = icmp ult i64 %111, %97
  %113 = select i1 %112, i64 %97, i64 %111
  %114 = sub i64 %4, %94
  %115 = ashr exact i64 %114, 5
  store %"struct.net::SHA256HashValue"* null, %"struct.net::SHA256HashValue"** %89, align 8
  %116 = bitcast %"class.std::__1::allocator.25"** %90 to %"class.std::__1::__compressed_pair.22"**
  store %"class.std::__1::__compressed_pair.22"* %84, %"class.std::__1::__compressed_pair.22"** %116, align 8
  %117 = icmp eq i64 %113, 0
  br i1 %117, label %127, label %118

118:                                              ; preds = %110
  %119 = icmp ugt i64 %113, 576460752303423487
  br i1 %119, label %120, label %121

120:                                              ; preds = %118
  tail call void @abort() #13
  unreachable

121:                                              ; preds = %106, %118
  %122 = phi i64 [ 576460752303423487, %106 ], [ %113, %118 ]
  %123 = phi i64 [ %108, %106 ], [ %115, %118 ]
  %124 = shl i64 %122, 5
  %125 = tail call i8* @_Znwm(i64 %124) #11
  %126 = bitcast i8* %125 to %"struct.net::SHA256HashValue"*
  br label %127

127:                                              ; preds = %110, %121
  %128 = phi i64 [ %123, %121 ], [ %115, %110 ]
  %129 = phi i64 [ %122, %121 ], [ 0, %110 ]
  %130 = phi %"struct.net::SHA256HashValue"* [ %126, %121 ], [ null, %110 ]
  store %"struct.net::SHA256HashValue"* %130, %"struct.net::SHA256HashValue"** %86, align 8
  %131 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %130, i64 %128
  store %"struct.net::SHA256HashValue"* %131, %"struct.net::SHA256HashValue"** %88, align 8
  store %"struct.net::SHA256HashValue"* %131, %"struct.net::SHA256HashValue"** %87, align 8
  %132 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %130, i64 %129
  store %"struct.net::SHA256HashValue"* %132, %"struct.net::SHA256HashValue"** %89, align 8
  call void @_ZNSt3__114__split_bufferIN3net15SHA256HashValueERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_(%"struct.std::__1::__split_buffer"* nonnull %6, %"struct.net::SHA256HashValue"* dereferenceable(32) %2)
  %133 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %87, align 8
  %134 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %7, align 8
  %135 = ptrtoint %"struct.net::SHA256HashValue"* %134 to i64
  %136 = sub i64 %4, %135
  %137 = ashr exact i64 %136, 5
  %138 = sub nsw i64 0, %137
  %139 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %133, i64 %138
  store %"struct.net::SHA256HashValue"* %139, %"struct.net::SHA256HashValue"** %87, align 8
  %140 = icmp sgt i64 %136, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %127
  %142 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %139, i64 0, i32 0, i64 0
  %143 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %134, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %143, i64 %136, i1 false) #10
  br label %144

144:                                              ; preds = %141, %127
  %145 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %8, align 8
  %146 = icmp eq %"struct.net::SHA256HashValue"* %145, %1
  br i1 %146, label %147, label %151

147:                                              ; preds = %144
  %148 = ptrtoint %"struct.net::SHA256HashValue"* %145 to i64
  %149 = bitcast %"struct.net::SHA256HashValue"** %88 to i64*
  %150 = load i64, i64* %149, align 8
  br label %199

151:                                              ; preds = %144
  %152 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %88, align 8
  %153 = sub i64 0, %4
  %154 = getelementptr %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %145, i64 -1, i32 0, i64 %153
  %155 = ptrtoint i8* %154 to i64
  %156 = lshr i64 %155, 5
  %157 = add nuw nsw i64 %156, 1
  %158 = and i64 %157, 3
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %171, label %160

160:                                              ; preds = %151, %160
  %161 = phi %"struct.net::SHA256HashValue"* [ %168, %160 ], [ %152, %151 ]
  %162 = phi %"struct.net::SHA256HashValue"* [ %166, %160 ], [ %1, %151 ]
  %163 = phi i64 [ %169, %160 ], [ %158, %151 ]
  %164 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %161, i64 0, i32 0, i64 0
  %165 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %162, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %165, i64 32, i1 false) #10
  %166 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %162, i64 1
  %167 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %88, align 8
  %168 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %167, i64 1
  store %"struct.net::SHA256HashValue"* %168, %"struct.net::SHA256HashValue"** %88, align 8
  %169 = add i64 %163, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %160, !llvm.loop !4

171:                                              ; preds = %160, %151
  %172 = phi %"struct.net::SHA256HashValue"* [ undef, %151 ], [ %168, %160 ]
  %173 = phi %"struct.net::SHA256HashValue"* [ %152, %151 ], [ %168, %160 ]
  %174 = phi %"struct.net::SHA256HashValue"* [ %1, %151 ], [ %166, %160 ]
  %175 = icmp ult i8* %154, inttoptr (i64 96 to i8*)
  br i1 %175, label %194, label %176

176:                                              ; preds = %171, %176
  %177 = phi %"struct.net::SHA256HashValue"* [ %192, %176 ], [ %173, %171 ]
  %178 = phi %"struct.net::SHA256HashValue"* [ %191, %176 ], [ %174, %171 ]
  %179 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %177, i64 0, i32 0, i64 0
  %180 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %180, i64 32, i1 false) #10
  %181 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %88, align 8
  %182 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %181, i64 1
  store %"struct.net::SHA256HashValue"* %182, %"struct.net::SHA256HashValue"** %88, align 8
  %183 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %182, i64 0, i32 0, i64 0
  %184 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 1, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %183, i8* align 1 %184, i64 32, i1 false) #10
  %185 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %181, i64 2
  store %"struct.net::SHA256HashValue"* %185, %"struct.net::SHA256HashValue"** %88, align 8
  %186 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %185, i64 0, i32 0, i64 0
  %187 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 2, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %187, i64 32, i1 false) #10
  %188 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %181, i64 3
  store %"struct.net::SHA256HashValue"* %188, %"struct.net::SHA256HashValue"** %88, align 8
  %189 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %188, i64 0, i32 0, i64 0
  %190 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 3, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %189, i8* align 1 %190, i64 32, i1 false) #10
  %191 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %178, i64 4
  %192 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %181, i64 4
  store %"struct.net::SHA256HashValue"* %192, %"struct.net::SHA256HashValue"** %88, align 8
  %193 = icmp eq %"struct.net::SHA256HashValue"* %191, %145
  br i1 %193, label %194, label %176

194:                                              ; preds = %176, %171
  %195 = phi %"struct.net::SHA256HashValue"* [ %172, %171 ], [ %192, %176 ]
  %196 = ptrtoint %"struct.net::SHA256HashValue"* %195 to i64
  %197 = load i64, i64* %91, align 8
  %198 = bitcast %"struct.net::SHA256HashValue"** %88 to i64*
  br label %199

199:                                              ; preds = %147, %194
  %200 = phi i64* [ %149, %147 ], [ %198, %194 ]
  %201 = phi i64 [ %150, %147 ], [ %196, %194 ]
  %202 = phi i64 [ %148, %147 ], [ %197, %194 ]
  %203 = load i64, i64* %92, align 8
  %204 = bitcast %"struct.net::SHA256HashValue"** %87 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %92, align 8
  store i64 %203, i64* %204, align 8
  store i64 %201, i64* %91, align 8
  store i64 %202, i64* %200, align 8
  %206 = load i64, i64* %102, align 8
  %207 = bitcast %"struct.net::SHA256HashValue"** %89 to i64*
  %208 = load i64, i64* %207, align 8
  store i64 %208, i64* %102, align 8
  store i64 %206, i64* %207, align 8
  %209 = bitcast %"struct.std::__1::__split_buffer"* %6 to i64*
  store i64 %203, i64* %209, align 8
  %210 = inttoptr i64 %203 to %"struct.net::SHA256HashValue"*
  %211 = inttoptr i64 %202 to %"struct.net::SHA256HashValue"*
  %212 = icmp eq %"struct.net::SHA256HashValue"* %211, %210
  br i1 %212, label %220, label %213

213:                                              ; preds = %199
  %214 = sub i64 0, %203
  %215 = getelementptr %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %211, i64 -1, i32 0, i64 %214
  %216 = ptrtoint i8* %215 to i64
  %217 = lshr i64 %216, 5
  %218 = xor i64 %217, -1
  %219 = getelementptr %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %211, i64 %218
  store %"struct.net::SHA256HashValue"* %219, %"struct.net::SHA256HashValue"** %88, align 8
  br label %220

220:                                              ; preds = %213, %199
  %221 = icmp eq i64 %203, 0
  br i1 %221, label %224, label %222

222:                                              ; preds = %220
  %223 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %210, i64 0, i32 0, i64 0
  call void @_ZdlPv(i8* %223) #11
  br label %224

224:                                              ; preds = %220, %222
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %85) #10
  br label %225

225:                                              ; preds = %17, %81, %224
  %226 = phi %"struct.net::SHA256HashValue"* [ %1, %17 ], [ %1, %81 ], [ %133, %224 ]
  ret %"struct.net::SHA256HashValue"* %226
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN3net15SHA256HashValueERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_(%"struct.std::__1::__split_buffer"*, %"struct.net::SHA256HashValue"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %5, align 8
  %7 = icmp eq %"struct.net::SHA256HashValue"* %4, %6
  %8 = ptrtoint %"struct.net::SHA256HashValue"* %6 to i64
  br i1 %7, label %9, label %107

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %11 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %13 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %12, align 8
  %14 = icmp ugt %"struct.net::SHA256HashValue"* %11, %13
  %15 = ptrtoint %"struct.net::SHA256HashValue"* %13 to i64
  br i1 %14, label %16, label %35

16:                                               ; preds = %9
  %17 = ptrtoint %"struct.net::SHA256HashValue"* %11 to i64
  %18 = sub i64 %17, %15
  %19 = ashr exact i64 %18, 5
  %20 = add nsw i64 %19, 1
  %21 = sdiv i64 %20, -2
  %22 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %11, i64 %21
  %23 = ptrtoint %"struct.net::SHA256HashValue"* %4 to i64
  %24 = sub i64 %23, %17
  %25 = ashr exact i64 %24, 5
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %22, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %11, i64 0, i32 0, i64 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %24, i1 false) #10
  %30 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %10, align 8
  br label %31

31:                                               ; preds = %16, %27
  %32 = phi %"struct.net::SHA256HashValue"* [ %11, %16 ], [ %30, %27 ]
  %33 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %22, i64 %25
  store %"struct.net::SHA256HashValue"* %33, %"struct.net::SHA256HashValue"** %3, align 8
  %34 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %32, i64 %21
  store %"struct.net::SHA256HashValue"* %34, %"struct.net::SHA256HashValue"** %10, align 8
  br label %107

35:                                               ; preds = %9
  %36 = bitcast %"struct.net::SHA256HashValue"** %5 to i64*
  %37 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %38 = sub i64 %8, %15
  %39 = ashr exact i64 %38, 4
  %40 = icmp eq i64 %38, 0
  %41 = select i1 %40, i64 1, i64 %39
  %42 = icmp ugt i64 %41, 576460752303423487
  br i1 %42, label %43, label %44

43:                                               ; preds = %35
  tail call void @abort() #13
  unreachable

44:                                               ; preds = %35
  %45 = lshr i64 %41, 2
  %46 = shl i64 %41, 5
  %47 = tail call i8* @_Znwm(i64 %46) #11
  %48 = bitcast i8* %47 to %"struct.net::SHA256HashValue"*
  %49 = ptrtoint i8* %47 to i64
  %50 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %48, i64 %45
  %51 = ptrtoint %"struct.net::SHA256HashValue"* %50 to i64
  %52 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %48, i64 %41
  %53 = ptrtoint %"struct.net::SHA256HashValue"* %52 to i64
  %54 = ptrtoint %"struct.net::SHA256HashValue"* %11 to i64
  %55 = ptrtoint %"struct.net::SHA256HashValue"* %4 to i64
  %56 = sub i64 %55, %54
  %57 = ashr exact i64 %56, 5
  %58 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %50, i64 %57
  %59 = icmp eq i64 %56, 0
  br i1 %59, label %97, label %60

60:                                               ; preds = %44
  %61 = add i64 %56, -32
  %62 = lshr i64 %61, 5
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 3
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %76, label %66

66:                                               ; preds = %60, %66
  %67 = phi %"struct.net::SHA256HashValue"* [ %72, %66 ], [ %50, %60 ]
  %68 = phi %"struct.net::SHA256HashValue"* [ %73, %66 ], [ %11, %60 ]
  %69 = phi i64 [ %74, %66 ], [ %64, %60 ]
  %70 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %67, i64 0, i32 0, i64 0
  %71 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 32, i1 false) #10
  %72 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %67, i64 1
  %73 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %68, i64 1
  %74 = add i64 %69, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %66, !llvm.loop !5

76:                                               ; preds = %66, %60
  %77 = phi %"struct.net::SHA256HashValue"* [ %50, %60 ], [ %72, %66 ]
  %78 = phi %"struct.net::SHA256HashValue"* [ %11, %60 ], [ %73, %66 ]
  %79 = icmp ult i64 %61, 96
  br i1 %79, label %94, label %80

80:                                               ; preds = %76, %80
  %81 = phi %"struct.net::SHA256HashValue"* [ %91, %80 ], [ %77, %76 ]
  %82 = phi %"struct.net::SHA256HashValue"* [ %92, %80 ], [ %78, %76 ]
  %83 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %81, i64 0, i32 0, i64 0
  %84 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %82, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* align 1 %84, i64 32, i1 false) #10
  %85 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %81, i64 1, i32 0, i64 0
  %86 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %82, i64 1, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 32, i1 false) #10
  %87 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %81, i64 2, i32 0, i64 0
  %88 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %82, i64 2, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %88, i64 32, i1 false) #10
  %89 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %81, i64 3, i32 0, i64 0
  %90 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %82, i64 3, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 32, i1 false) #10
  %91 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %81, i64 4
  %92 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %82, i64 4
  %93 = icmp eq %"struct.net::SHA256HashValue"* %58, %91
  br i1 %93, label %94, label %80

94:                                               ; preds = %80, %76
  %95 = ptrtoint %"struct.net::SHA256HashValue"* %58 to i64
  %96 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %12, align 8
  br label %97

97:                                               ; preds = %44, %94
  %98 = phi %"struct.net::SHA256HashValue"* [ %96, %94 ], [ %13, %44 ]
  %99 = phi i64 [ %95, %94 ], [ %51, %44 ]
  store i64 %49, i64* %37, align 8
  %100 = bitcast %"struct.net::SHA256HashValue"** %10 to i64*
  store i64 %51, i64* %100, align 8
  %101 = bitcast %"struct.net::SHA256HashValue"** %3 to i64*
  store i64 %99, i64* %101, align 8
  store i64 %53, i64* %36, align 8
  %102 = icmp eq %"struct.net::SHA256HashValue"* %98, null
  %103 = inttoptr i64 %99 to %"struct.net::SHA256HashValue"*
  br i1 %102, label %107, label %104

104:                                              ; preds = %97
  %105 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %98, i64 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %105) #11
  %106 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %3, align 8
  br label %107

107:                                              ; preds = %104, %97, %31, %2
  %108 = phi %"struct.net::SHA256HashValue"* [ %106, %104 ], [ %103, %97 ], [ %33, %31 ], [ %4, %2 ]
  %109 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %108, i64 0, i32 0, i64 0
  %110 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %1, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* align 1 %110, i64 32, i1 false) #10
  %111 = load %"struct.net::SHA256HashValue"*, %"struct.net::SHA256HashValue"** %3, align 8
  %112 = getelementptr inbounds %"struct.net::SHA256HashValue", %"struct.net::SHA256HashValue"* %111, i64 1
  store %"struct.net::SHA256HashValue"* %112, %"struct.net::SHA256HashValue"** %3, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net15X509CertificateD1Ev(%"class.net::X509Certificate"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.std::__1::back_insert_iterator"* @_ZNSt3__120back_insert_iteratorINS_6vectorIN3net9HashValueENS_9allocatorIS3_EEEEEaSEOS3_(%"class.std::__1::back_insert_iterator"*, %"class.net::HashValue"* dereferenceable(36)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::back_insert_iterator", %"class.std::__1::back_insert_iterator"* %0, i64 0, i32 0
  %4 = load %"class.std::__1::vector.52"*, %"class.std::__1::vector.52"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 1
  %6 = load %"class.net::HashValue"*, %"class.net::HashValue"** %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.net::HashValue"*, %"class.net::HashValue"** %7, align 8
  %9 = icmp ult %"class.net::HashValue"* %6, %8
  %10 = ptrtoint %"class.net::HashValue"* %8 to i64
  br i1 %9, label %11, label %17

11:                                               ; preds = %2
  %12 = bitcast %"class.net::HashValue"* %6 to i8*
  %13 = bitcast %"class.net::HashValue"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 36, i1 false) #10
  %14 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %6, i64 1
  %15 = ptrtoint %"class.net::HashValue"* %14 to i64
  %16 = bitcast %"class.net::HashValue"** %5 to i64*
  store i64 %15, i64* %16, align 8
  br label %71

17:                                               ; preds = %2
  %18 = ptrtoint %"class.net::HashValue"* %6 to i64
  %19 = bitcast %"class.net::HashValue"** %5 to i64*
  %20 = bitcast %"class.std::__1::vector.52"* %4 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = sdiv exact i64 %22, 36
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 512409557603043100
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector.52"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #13
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"class.net::HashValue"** %7 to i64*
  %30 = sub i64 %10, %21
  %31 = sdiv exact i64 %30, 36
  %32 = icmp ult i64 %31, 256204778801521550
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = shl nsw i64 %31, 1
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33, %28
  %39 = phi i64 [ %36, %33 ], [ 512409557603043100, %28 ]
  %40 = mul i64 %39, 36
  %41 = tail call i8* @_Znwm(i64 %40) #11
  %42 = bitcast i8* %41 to %"class.net::HashValue"*
  br label %43

43:                                               ; preds = %38, %33
  %44 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %45 = phi %"class.net::HashValue"* [ %42, %38 ], [ null, %33 ]
  %46 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %45, i64 %23
  %47 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %45, i64 %44
  %48 = ptrtoint %"class.net::HashValue"* %47 to i64
  %49 = bitcast %"class.net::HashValue"* %46 to i8*
  %50 = bitcast %"class.net::HashValue"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %50, i64 36, i1 false) #10
  %51 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %46, i64 1
  %52 = ptrtoint %"class.net::HashValue"* %51 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.52", %"class.std::__1::vector.52"* %4, i64 0, i32 0, i32 0
  %54 = load %"class.net::HashValue"*, %"class.net::HashValue"** %53, align 8
  %55 = load i64, i64* %19, align 8
  %56 = ptrtoint %"class.net::HashValue"* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sdiv exact i64 %57, -36
  %59 = getelementptr inbounds %"class.net::HashValue", %"class.net::HashValue"* %46, i64 %58
  %60 = ptrtoint %"class.net::HashValue"* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %43
  %63 = bitcast %"class.net::HashValue"* %59 to i8*
  %64 = bitcast %"class.net::HashValue"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %57, i1 false) #10
  %65 = load %"class.net::HashValue"*, %"class.net::HashValue"** %53, align 8
  br label %66

66:                                               ; preds = %62, %43
  %67 = phi %"class.net::HashValue"* [ %54, %43 ], [ %65, %62 ]
  store i64 %60, i64* %20, align 8
  store i64 %52, i64* %19, align 8
  store i64 %48, i64* %29, align 8
  %68 = icmp eq %"class.net::HashValue"* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = bitcast %"class.net::HashValue"* %67 to i8*
  tail call void @_ZdlPv(i8* %70) #11
  br label %71

71:                                               ; preds = %11, %66, %69
  ret %"class.std::__1::back_insert_iterator"* %0
}

declare void @_ZN3net9HashValueC1ERKNS_15SHA256HashValueE(%"class.net::HashValue"*, %"struct.net::SHA256HashValue"* dereferenceable(32)) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
