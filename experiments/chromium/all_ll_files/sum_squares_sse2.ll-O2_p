; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sum_squares_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/sum_squares_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @vpx_sum_squares_2d_i16_sse2(i16* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = icmp eq i32 %2, 4
  br i1 %4, label %22, label %5

5:                                                ; preds = %3
  %6 = sext i32 %1 to i64
  %7 = shl nsw i32 %1, 1
  %8 = sext i32 %7 to i64
  %9 = mul nsw i32 %1, 3
  %10 = sext i32 %9 to i64
  %11 = shl nsw i32 %1, 2
  %12 = sext i32 %11 to i64
  %13 = mul nsw i32 %1, 5
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, 6
  %16 = sext i32 %15 to i64
  %17 = mul nsw i32 %1, 7
  %18 = sext i32 %17 to i64
  %19 = shl nsw i32 %1, 3
  %20 = sext i32 %19 to i64
  %21 = sext i32 %2 to i64
  br label %62

22:                                               ; preds = %3
  %23 = bitcast i16* %0 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> undef, i64 %24, i32 0
  %26 = sext i32 %1 to i64
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  %28 = bitcast <2 x i64> %25 to <4 x float>
  %29 = bitcast i16* %27 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 1
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x float> %28, <4 x float> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = shl nsw i32 %1, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %0, i64 %34
  %36 = bitcast i16* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = mul nsw i32 %1, 3
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %0, i64 %40
  %42 = bitcast <2 x i64> %38 to <4 x float>
  %43 = bitcast i16* %41 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 1
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x float> %42, <4 x float> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x float> %32 to <8 x i16>
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #2
  %49 = bitcast <4 x float> %46 to <8 x i16>
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #2
  %51 = add <4 x i32> %50, %48
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %54 = bitcast <16 x i8> %53 to <4 x i32>
  %55 = add <4 x i32> %51, %54
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = lshr <2 x i64> %56, <i64 32, i64 32>
  %58 = bitcast <2 x i64> %57 to <4 x i32>
  %59 = add <4 x i32> %55, %58
  %60 = extractelement <4 x i32> %59, i32 0
  %61 = sext i32 %60 to i64
  br label %126

62:                                               ; preds = %5, %111
  %63 = phi <2 x i64> [ %116, %111 ], [ zeroinitializer, %5 ]
  %64 = phi i32 [ %118, %111 ], [ %2, %5 ]
  %65 = phi i16* [ %117, %111 ], [ %0, %5 ]
  br label %66

66:                                               ; preds = %66, %62
  %67 = phi i64 [ %109, %66 ], [ 0, %62 ]
  %68 = phi <4 x i32> [ %108, %66 ], [ zeroinitializer, %62 ]
  %69 = getelementptr inbounds i16, i16* %65, i64 %67
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 16
  %72 = getelementptr inbounds i16, i16* %69, i64 %6
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 16
  %75 = getelementptr inbounds i16, i16* %69, i64 %8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 16
  %78 = getelementptr inbounds i16, i16* %69, i64 %10
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 16
  %81 = getelementptr inbounds i16, i16* %69, i64 %12
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 16
  %84 = getelementptr inbounds i16, i16* %69, i64 %14
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 16
  %87 = getelementptr inbounds i16, i16* %69, i64 %16
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 16
  %90 = getelementptr inbounds i16, i16* %69, i64 %18
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 16
  %93 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %71, <8 x i16> %71) #2
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %74, <8 x i16> %74) #2
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %77) #2
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> %80) #2
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #2
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %86, <8 x i16> %86) #2
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %89, <8 x i16> %89) #2
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> %92) #2
  %101 = add <4 x i32> %93, %68
  %102 = add <4 x i32> %101, %94
  %103 = add <4 x i32> %102, %95
  %104 = add <4 x i32> %103, %96
  %105 = add <4 x i32> %104, %97
  %106 = add <4 x i32> %105, %98
  %107 = add <4 x i32> %106, %99
  %108 = add <4 x i32> %107, %100
  %109 = add nuw nsw i64 %67, 8
  %110 = icmp slt i64 %109, %21
  br i1 %110, label %66, label %111

111:                                              ; preds = %66
  %112 = bitcast <4 x i32> %108 to <2 x i64>
  %113 = and <2 x i64> %112, <i64 4294967295, i64 4294967295>
  %114 = add <2 x i64> %113, %63
  %115 = lshr <2 x i64> %112, <i64 32, i64 32>
  %116 = add <2 x i64> %114, %115
  %117 = getelementptr inbounds i16, i16* %65, i64 %20
  %118 = add nsw i32 %64, -8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %62

120:                                              ; preds = %111
  %121 = bitcast <2 x i64> %116 to <16 x i8>
  %122 = shufflevector <16 x i8> %121, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %123 = bitcast <16 x i8> %122 to <2 x i64>
  %124 = add <2 x i64> %116, %123
  %125 = extractelement <2 x i64> %124, i32 0
  br label %126

126:                                              ; preds = %120, %22
  %127 = phi i64 [ %61, %22 ], [ %125, %120 ]
  ret i64 %127
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
