; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/charconv_bigint.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/charconv_bigint.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::strings_internal::BigUnsigned" = type { i32, [4 x i32] }
%"class.absl::strings_internal::BigUnsigned.1" = type { i32, [84 x i32] }
%"struct.absl::strings_internal::ParsedFloat" = type { i64, i32, i32, i32, i8*, i8*, i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4absl16strings_internal11BigUnsignedILi4EEC5Ev = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EEC5Em = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EEC5ENS_11string_viewE = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE10ReadDigitsEPKcS4_i = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE8Digits10Ev = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE21MultiplyByTenToTheNthEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE17ReadFloatMantissaERKNS0_11ParsedFloatEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE9SetToZeroEv = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE9ShiftLeftEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEj = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEm = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEiPKj = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE22MultiplyByFiveToTheNthEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE12FiveToTheNthEi = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi4EE7GetWordEi = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi4EE8ToStringEv = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi4EE4sizeEv = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi4EE5wordsEv = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEij = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE12MultiplyStepEiPKjii = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EEC5Ev = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EEC5Em = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EEC5ENS_11string_viewE = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE10ReadDigitsEPKcS4_i = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE8Digits10Ev = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE21MultiplyByTenToTheNthEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE17ReadFloatMantissaERKNS0_11ParsedFloatEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE9SetToZeroEv = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE9ShiftLeftEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEj = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEm = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEiPKj = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE22MultiplyByFiveToTheNthEi = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE12FiveToTheNthEi = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi84EE7GetWordEi = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi84EE8ToStringEv = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi84EE4sizeEv = comdat any

$_ZNK4absl16strings_internal11BigUnsignedILi84EE5wordsEv = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEij = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE12MultiplyStepEiPKjii = comdat any

$_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim = comdat any

@_ZN4absl16strings_internal10kFiveToNthE = hidden local_unnamed_addr constant [14 x i32] [i32 1, i32 5, i32 25, i32 125, i32 625, i32 3125, i32 15625, i32 78125, i32 390625, i32 1953125, i32 9765625, i32 48828125, i32 244140625, i32 1220703125], align 16
@_ZN4absl16strings_internal9kTenToNthE = hidden local_unnamed_addr constant [10 x i32] [i32 1, i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000, i32 1000000000], align 16
@_ZN4absl16strings_internal12_GLOBAL__N_118kLargePowersOfFiveE = internal unnamed_addr constant [420 x i32] [i32 -99612771, i32 1734723475, i32 -1747323319, i32 1717838893, i32 697539348, i32 700649232, i32 -990377531, i32 2079584810, i32 1740484148, i32 -1389099753, i32 916265823, i32 282989971, i32 -1833803567, i32 -1627392057, i32 -2116153658, i32 -1363518122, i32 1090938020, i32 1329623930, i32 550732911, i32 114298739, i32 -15001811, i32 329373468, i32 -274696681, i32 2137533757, i32 -7565120, i32 1057042919, i32 1071430142, i32 -1854209673, i32 381945767, i32 46164893, i32 -1777372775, i32 90597356, i32 -528814120, i32 -2131576372, i32 -2106329629, i32 -342220470, i32 1085505541, i32 239565524, i32 662505702, i32 -97996514, i32 -738732156, i32 18645851, i32 -148645419, i32 847434739, i32 -536324143, i32 1768267045, i32 753997775, i32 618294535, i32 -1790110697, i32 1046318317, i32 2055976806, i32 -42444058, i32 1683240658, i32 1086819124, i32 -1810558441, i32 7530999, i32 725707425, i32 2022950311, i32 -478296364, i32 732769258, i32 -251886484, i32 1970646603, i32 1649965844, i32 -2085193164, i32 34671835, i32 -140955819, i32 14594082, i32 -1532871700, i32 -1963604531, i32 -1201969841, i32 -2121403509, i32 3041746, i32 890817469, i32 548454751, i32 947219503, i32 -77741091, i32 581774740, i32 -1087002286, i32 -1499915990, i32 -1704905946, i32 -1389716243, i32 -671839896, i32 -394396844, i32 -923771466, i32 1593210161, i32 834775881, i32 -503141217, i32 -1691789387, i32 -1589381421, i32 1228551, i32 -1953030679, i32 564896481, i32 1670660962, i32 1461134134, i32 -648789467, i32 -78429850, i32 147153902, i32 342101730, i32 618925361, i32 45114679, i32 59277076, i32 42329395, i32 -1220219098, i32 -1948014908, i32 644446644, i32 1734470882, i32 -640992796, i32 -427957479, i32 221898646, i32 496208, i32 638498533, i32 -199972970, i32 -300256111, i32 -611096341, i32 -183758757, i32 1494579024, i32 -1630340260, i32 -152736373, i32 -353465053, i32 254910325, i32 715207894, i32 -1406596887, i32 -733924712, i32 49293909, i32 -1734518150, i32 1893589380, i32 -1165999961, i32 52431233, i32 -1107054308, i32 1008478744, i32 -704370783, i32 200416, i32 -833196687, i32 -238769627, i32 1318308435, i32 -1490910256, i32 1427796970, i32 1023752418, i32 -1918619585, i32 1784208992, i32 241566241, i32 1238327718, i32 -1929015359, i32 -1177444020, i32 1269503357, i32 -933467854, i32 1368165278, i32 -1684883248, i32 227151393, i32 -1115333127, i32 -1276487263, i32 -1918725495, i32 1166333190, i32 928176143, i32 -1222284858, i32 80947, i32 420427085, i32 -2090246914, i32 -442183481, i32 -1240483864, i32 -295977788, i32 -1188952756, i32 -1152447099, i32 1211711528, i32 495540187, i32 226417428, i32 1322022279, i32 1348378114, i32 1283978091, i32 -1712952362, i32 1153035573, i32 1966094292, i32 -436314329, i32 658686467, i32 330493227, i32 -598581972, i32 -419568230, i32 2013245839, i32 331707692, i32 145247180, i32 -2053486272, i32 32694, i32 1335413561, i32 -1508975684, i32 -2085255378, i32 -1526616833, i32 -1664651400, i32 -1159902093, i32 1139378682, i32 -897921152, i32 772571727, i32 -1314959364, i32 154130460, i32 -454335397, i32 -1577089854, i32 -1973779526, i32 -1465779479, i32 498349577, i32 -1325476597, i32 232247997, i32 2105199832, i32 -1845861361, i32 937215685, i32 474054613, i32 -455843155, i32 -391892071, i32 320600485, i32 -1913303767, i32 911506881, i32 13205, i32 1540567285, i32 2010257767, i32 449085879, i32 1810036686, i32 2135397033, i32 -397661102, i32 -2074533336, i32 -1647642583, i32 -625718047, i32 1024209179, i32 1395534205, i32 1191504052, i32 -1663290690, i32 1105612189, i32 1998044833, i32 -1473986547, i32 150276903, i32 253332855, i32 1237057008, i32 39611497, i32 -723165997, i32 -259825621, i32 -1175388467, i32 -1064940822, i32 -1665563007, i32 -1426710295, i32 -1397301456, i32 1336606310, i32 -1963901893, i32 5333, i32 1747695937, i32 -1985351017, i32 -878224005, i32 1078073265, i32 -1260054039, i32 -1581509077, i32 -134901494, i32 -1737401611, i32 804601431, i32 -470871668, i32 1225540931, i32 -1130686668, i32 721403469, i32 1290652492, i32 -82515554, i32 904086034, i32 -320627676, i32 124205747, i32 -416213539, i32 -782419737, i32 155118907, i32 -119018811, i32 2024328320, i32 623016620, i32 1062798673, i32 1094558155, i32 -547079595, i32 -1419399868, i32 -687135785, i32 -965554826, i32 862251618, i32 2154, i32 586245085, i32 600770476, i32 -1104480574, i32 -200083722, i32 -1006676962, i32 1860892638, i32 -1536145440, i32 1082972818, i32 252635912, i32 1457437341, i32 -809062256, i32 -1950621948, i32 959696307, i32 -1636059523, i32 -1624674251, i32 949248580, i32 -300075077, i32 -561413772, i32 1676891549, i32 1885041403, i32 328017881, i32 -127911304, i32 1935600708, i32 -485914667, i32 -959217552, i32 -1661053810, i32 -1611656158, i32 2086029992, i32 -1848876870, i32 -876390819, i32 1968219403, i32 1762242221, i32 321080389, i32 870, i32 395659657, i32 981301001, i32 -1744556571, i32 -1459547069, i32 1172775874, i32 648019311, i32 1485122118, i32 -1432288214, i32 787382611, i32 -1296645218, i32 -1350280347, i32 -154966569, i32 -456131797, i32 -935270132, i32 -1410692421, i32 1549334738, i32 1545206330, i32 1181782282, i32 1145696796, i32 -274315853, i32 -868057620, i32 138165619, i32 1182577683, i32 1877019364, i32 1018166386, i32 -1618107042, i32 1583124135, i32 1225102523, i32 -259581173, i32 -578190996, i32 -1902961160, i32 -396566071, i32 -861892443, i32 1465885035, i32 1805586540, i32 351, i32 -299837435, i32 1471953927, i32 -840277426, i32 -739183315, i32 -1725647628, i32 -812218816, i32 1641290082, i32 -394283932, i32 -357609017, i32 1447856992, i32 -858111960, i32 1385441467, i32 825892776, i32 -1765994604, i32 2055400362, i32 -1382422551, i32 -228160300, i32 -1103911842, i32 -49432983, i32 -2014431585, i32 -739499795, i32 -1672643145, i32 -555945768, i32 2094189156, i32 -497392265, i32 1627406292, i32 -445688628, i32 280479560, i32 1079144030, i32 1929424519, i32 1547932257, i32 739243113, i32 -1083031790, i32 -1304978591, i32 -1084640011, i32 -920970177, i32 -268145369, i32 141, i32 1381801489, i32 -186586303, i32 -340620963, i32 1571099385, i32 2107320788, i32 1160728284, i32 194034743, i32 873953227, i32 1674733999, i32 497514793, i32 173807654, i32 2006522008, i32 1525538694, i32 -128735113, i32 1401696716, i32 -397895974, i32 -1214250741, i32 401559013, i32 -1523963170, i32 44029980, i32 -1736644863, i32 671022455, i32 -616118673, i32 1563433216, i32 1231657152, i32 -1150969671, i32 1592505863, i32 -448318134, i32 -548786306, i32 -261338795, i32 -1776013318, i32 393607975, i32 -1093904178, i32 -336419525, i32 1051383850, i32 -200198214, i32 1463709626, i32 -79141192, i32 1409294664, i32 57], align 16

@_ZN4absl16strings_internal11BigUnsignedILi4EEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned"*), void (%"class.absl::strings_internal::BigUnsigned"*)* @_ZN4absl16strings_internal11BigUnsignedILi4EEC2Ev
@_ZN4absl16strings_internal11BigUnsignedILi4EEC1Em = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned"*, i64), void (%"class.absl::strings_internal::BigUnsigned"*, i64)* @_ZN4absl16strings_internal11BigUnsignedILi4EEC2Em
@_ZN4absl16strings_internal11BigUnsignedILi4EEC1ENS_11string_viewE = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned"*, i8*, i64), void (%"class.absl::strings_internal::BigUnsigned"*, i8*, i64)* @_ZN4absl16strings_internal11BigUnsignedILi4EEC2ENS_11string_viewE
@_ZN4absl16strings_internal11BigUnsignedILi84EEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned.1"*), void (%"class.absl::strings_internal::BigUnsigned.1"*)* @_ZN4absl16strings_internal11BigUnsignedILi84EEC2Ev
@_ZN4absl16strings_internal11BigUnsignedILi84EEC1Em = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned.1"*, i64), void (%"class.absl::strings_internal::BigUnsigned.1"*, i64)* @_ZN4absl16strings_internal11BigUnsignedILi84EEC2Em
@_ZN4absl16strings_internal11BigUnsignedILi84EEC1ENS_11string_viewE = weak_odr hidden unnamed_addr alias void (%"class.absl::strings_internal::BigUnsigned.1"*, i8*, i64), void (%"class.absl::strings_internal::BigUnsigned.1"*, i8*, i64)* @_ZN4absl16strings_internal11BigUnsignedILi84EEC2ENS_11string_viewE

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EEC2Ev(%"class.absl::strings_internal::BigUnsigned"*) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi4EEC5Ev) align 2 {
  %2 = bitcast %"class.absl::strings_internal::BigUnsigned"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EEC2Em(%"class.absl::strings_internal::BigUnsigned"*, i64) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi4EEC5Em) align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %4 = lshr i64 %1, 32
  %5 = icmp eq i64 %4, 0
  %6 = icmp ne i64 %1, 0
  %7 = zext i1 %6 to i32
  %8 = select i1 %5, i32 %7, i32 2
  store i32 %8, i32* %3, align 4
  %9 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %10 = trunc i64 %1 to i32
  store i32 %10, i32* %9, align 4
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 1
  %12 = trunc i64 %4 to i32
  store i32 %12, i32* %11, align 4
  %13 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 2
  %14 = bitcast i32* %13 to i64*
  store i64 0, i64* %14, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EEC2ENS_11string_viewE(%"class.absl::strings_internal::BigUnsigned"*, i8*, i64) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi4EEC5ENS_11string_viewE) align 2 {
  %4 = getelementptr inbounds i8, i8* %1, i64 %2
  %5 = icmp eq i64 %2, 0
  %6 = bitcast %"class.absl::strings_internal::BigUnsigned"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 20, i1 false)
  br i1 %5, label %22, label %7

7:                                                ; preds = %3, %12
  %8 = phi i8* [ %13, %12 ], [ %1, %3 ]
  %9 = load i8, i8* %8, align 1
  %10 = add i8 %9, -48
  %11 = icmp ult i8 %10, 10
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, i8* %8, i64 1
  %14 = icmp eq i8* %13, %4
  br i1 %14, label %18, label %7

15:                                               ; preds = %7
  %16 = icmp ne i8* %8, %4
  %17 = or i1 %5, %16
  br i1 %17, label %22, label %18

18:                                               ; preds = %12, %15
  %19 = tail call i32 @_ZN4absl16strings_internal11BigUnsignedILi4EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned"* %0, i8* %1, i8* %4, i32 39)
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE21MultiplyByTenToTheNthEi(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %19)
  br label %22

22:                                               ; preds = %3, %15, %18, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi4EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned"*, i8*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = sext i32 %6 to i64
  %10 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %11 = bitcast i32* %10 to i8*
  %12 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %12, i1 false) #4
  br label %13

13:                                               ; preds = %4, %8
  store i32 0, i32* %5, align 4
  %14 = icmp ult i8* %1, %2
  br i1 %14, label %15, label %22

15:                                               ; preds = %13, %19
  %16 = phi i8* [ %20, %19 ], [ %1, %13 ]
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 48
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  %21 = icmp eq i8* %20, %2
  br i1 %21, label %290, label %15

22:                                               ; preds = %15, %13
  %23 = phi i8* [ %1, %13 ], [ %16, %15 ]
  %24 = icmp ult i8* %23, %2
  br i1 %24, label %25, label %63

25:                                               ; preds = %22, %32
  %26 = phi i8* [ %28, %32 ], [ %2, %22 ]
  %27 = phi i32 [ %33, %32 ], [ 0, %22 ]
  %28 = getelementptr inbounds i8, i8* %26, i64 -1
  %29 = load i8, i8* %28, align 1
  switch i8 %29, label %46 [
    i8 48, label %32
    i8 46, label %30
  ]

30:                                               ; preds = %25
  %31 = icmp ult i8* %23, %28
  br i1 %31, label %35, label %63

32:                                               ; preds = %25
  %33 = add nuw nsw i32 %27, 1
  %34 = icmp ult i8* %23, %28
  br i1 %34, label %25, label %48

35:                                               ; preds = %30, %42
  %36 = phi i8* [ %44, %42 ], [ %28, %30 ]
  %37 = phi i8* [ %36, %42 ], [ %26, %30 ]
  %38 = phi i32 [ %43, %42 ], [ 0, %30 ]
  %39 = getelementptr inbounds i8, i8* %37, i64 -2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 48
  br i1 %41, label %42, label %63

42:                                               ; preds = %35
  %43 = add nuw nsw i32 %38, 1
  %44 = getelementptr inbounds i8, i8* %36, i64 -1
  %45 = icmp ult i8* %23, %44
  br i1 %45, label %35, label %63

46:                                               ; preds = %25
  %47 = icmp eq i32 %27, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %32, %46
  %49 = phi i8* [ %26, %46 ], [ %28, %32 ]
  %50 = phi i32 [ %27, %46 ], [ %33, %32 ]
  %51 = icmp eq i8* %23, %49
  br i1 %51, label %59, label %52

52:                                               ; preds = %48, %56
  %53 = phi i8* [ %57, %56 ], [ %23, %48 ]
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 46
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 1
  %58 = icmp eq i8* %57, %49
  br i1 %58, label %59, label %52

59:                                               ; preds = %52, %56, %48
  %60 = phi i8* [ %23, %48 ], [ %53, %52 ], [ %49, %56 ]
  %61 = icmp eq i8* %60, %49
  %62 = select i1 %61, i32 %50, i32 0
  br label %63

63:                                               ; preds = %42, %35, %22, %30, %46, %59
  %64 = phi i32 [ %62, %59 ], [ 0, %46 ], [ 0, %30 ], [ 0, %22 ], [ %43, %42 ], [ %38, %35 ]
  %65 = phi i8* [ %49, %59 ], [ %26, %46 ], [ %28, %30 ], [ %2, %22 ], [ %44, %42 ], [ %36, %35 ]
  %66 = icmp ne i8* %23, %65
  %67 = icmp sgt i32 %3, 0
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %268

69:                                               ; preds = %63, %174
  %70 = phi i32 [ %175, %174 ], [ 0, %63 ]
  %71 = phi i8* [ %181, %174 ], [ %23, %63 ]
  %72 = phi i32 [ %180, %174 ], [ 0, %63 ]
  %73 = phi i32 [ %179, %174 ], [ 0, %63 ]
  %74 = phi i32 [ %178, %174 ], [ %64, %63 ]
  %75 = phi i8 [ %177, %174 ], [ 0, %63 ]
  %76 = phi i32 [ %176, %174 ], [ %3, %63 ]
  %77 = load i8, i8* %71, align 1
  %78 = icmp eq i8 %77, 46
  br i1 %78, label %174, label %79

79:                                               ; preds = %69
  %80 = and i8 %75, 1
  %81 = zext i8 %80 to i32
  %82 = sub i32 %74, %81
  %83 = sext i8 %77 to i32
  %84 = add nsw i32 %83, -48
  %85 = add nsw i32 %76, -1
  %86 = icmp ne i32 %85, 0
  %87 = getelementptr inbounds i8, i8* %71, i64 1
  %88 = icmp eq i8* %87, %65
  %89 = or i1 %86, %88
  br i1 %89, label %93, label %90

90:                                               ; preds = %79
  switch i32 %83, label %93 [
    i32 53, label %91
    i32 48, label %91
  ]

91:                                               ; preds = %90, %90
  %92 = add nsw i32 %83, -47
  br label %93

93:                                               ; preds = %79, %90, %91
  %94 = phi i32 [ %92, %91 ], [ %84, %90 ], [ %84, %79 ]
  %95 = mul i32 %73, 10
  %96 = add i32 %94, %95
  %97 = add nsw i32 %72, 1
  %98 = icmp eq i32 %97, 9
  br i1 %98, label %99, label %174

99:                                               ; preds = %93
  %100 = icmp sgt i32 %70, 0
  br i1 %100, label %101, label %153

101:                                              ; preds = %99
  %102 = zext i32 %70 to i64
  %103 = and i64 %102, 1
  %104 = icmp eq i32 %70, 1
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = sub nsw i64 %102, %103
  br label %125

107:                                              ; preds = %125, %101
  %108 = phi i64 [ undef, %101 ], [ %143, %125 ]
  %109 = phi i64 [ 0, %101 ], [ %144, %125 ]
  %110 = phi i64 [ 0, %101 ], [ %143, %125 ]
  %111 = icmp eq i64 %103, 0
  br i1 %111, label %120, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %109
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = mul nuw nsw i64 %115, 1000000000
  %117 = add nuw nsw i64 %116, %110
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %113, align 4
  %119 = lshr i64 %117, 32
  br label %120

120:                                              ; preds = %107, %112
  %121 = phi i64 [ %108, %107 ], [ %119, %112 ]
  %122 = icmp ne i64 %121, 0
  %123 = icmp slt i32 %70, 4
  %124 = and i1 %123, %122
  br i1 %124, label %147, label %153

125:                                              ; preds = %125, %105
  %126 = phi i64 [ 0, %105 ], [ %144, %125 ]
  %127 = phi i64 [ 0, %105 ], [ %143, %125 ]
  %128 = phi i64 [ %106, %105 ], [ %145, %125 ]
  %129 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %126
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = mul nuw nsw i64 %131, 1000000000
  %133 = add nuw nsw i64 %132, %127
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %129, align 4
  %135 = lshr i64 %133, 32
  %136 = or i64 %126, 1
  %137 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  %140 = mul nuw nsw i64 %139, 1000000000
  %141 = add nuw nsw i64 %140, %135
  %142 = trunc i64 %141 to i32
  store i32 %142, i32* %137, align 4
  %143 = lshr i64 %141, 32
  %144 = add nuw nsw i64 %126, 2
  %145 = add i64 %128, -2
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %107, label %125

147:                                              ; preds = %120
  %148 = trunc i64 %121 to i32
  %149 = sext i32 %70 to i64
  %150 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %149
  store i32 %148, i32* %150, align 4
  %151 = load i32, i32* %5, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %5, align 4
  br label %153

153:                                              ; preds = %99, %120, %147
  %154 = phi i32 [ %70, %99 ], [ %70, %120 ], [ %152, %147 ]
  %155 = icmp eq i32 %96, 0
  br i1 %155, label %174, label %156

156:                                              ; preds = %153, %156
  %157 = phi i32 [ %164, %156 ], [ %96, %153 ]
  %158 = phi i32 [ %165, %156 ], [ 0, %153 ]
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %161, %157
  store i32 %162, i32* %160, align 4
  %163 = icmp ugt i32 %157, %162
  %164 = zext i1 %163 to i32
  %165 = add nuw nsw i32 %158, %164
  %166 = icmp ult i32 %165, 4
  %167 = and i1 %163, %166
  br i1 %167, label %156, label %168

168:                                              ; preds = %156
  %169 = add nuw nsw i32 %165, 1
  %170 = icmp slt i32 %169, %154
  %171 = select i1 %170, i32 %154, i32 %169
  %172 = icmp slt i32 %171, 4
  %173 = select i1 %172, i32 %171, i32 4
  store i32 %173, i32* %5, align 4
  br label %174

174:                                              ; preds = %168, %153, %93, %69
  %175 = phi i32 [ %70, %69 ], [ %70, %93 ], [ %154, %153 ], [ %173, %168 ]
  %176 = phi i32 [ %76, %69 ], [ %85, %93 ], [ %85, %153 ], [ %85, %168 ]
  %177 = phi i8 [ 1, %69 ], [ %75, %93 ], [ %75, %153 ], [ %75, %168 ]
  %178 = phi i32 [ %74, %69 ], [ %82, %93 ], [ %82, %153 ], [ %82, %168 ]
  %179 = phi i32 [ %73, %69 ], [ %96, %93 ], [ 0, %153 ], [ 0, %168 ]
  %180 = phi i32 [ %72, %69 ], [ %97, %93 ], [ 0, %153 ], [ 0, %168 ]
  %181 = getelementptr inbounds i8, i8* %71, i64 1
  %182 = icmp ne i8* %181, %65
  %183 = icmp sgt i32 %176, 0
  %184 = and i1 %183, %182
  br i1 %184, label %69, label %185

185:                                              ; preds = %174
  %186 = icmp eq i32 %180, 0
  br i1 %186, label %268, label %187

187:                                              ; preds = %185
  %188 = icmp eq i32 %175, 0
  br i1 %188, label %247, label %189

189:                                              ; preds = %187
  %190 = sext i32 %180 to i64
  %191 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN4absl16strings_internal9kTenToNthE, i64 0, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  %194 = icmp sgt i32 %175, 0
  br i1 %194, label %195, label %247

195:                                              ; preds = %189
  %196 = zext i32 %175 to i64
  %197 = and i64 %196, 1
  %198 = icmp eq i32 %175, 1
  br i1 %198, label %201, label %199

199:                                              ; preds = %195
  %200 = sub nsw i64 %196, %197
  br label %219

201:                                              ; preds = %219, %195
  %202 = phi i64 [ undef, %195 ], [ %237, %219 ]
  %203 = phi i64 [ 0, %195 ], [ %238, %219 ]
  %204 = phi i64 [ 0, %195 ], [ %237, %219 ]
  %205 = icmp eq i64 %197, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %203
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  %210 = mul nuw i64 %209, %193
  %211 = add i64 %210, %204
  %212 = trunc i64 %211 to i32
  store i32 %212, i32* %207, align 4
  %213 = lshr i64 %211, 32
  br label %214

214:                                              ; preds = %201, %206
  %215 = phi i64 [ %202, %201 ], [ %213, %206 ]
  %216 = icmp ne i64 %215, 0
  %217 = icmp slt i32 %175, 4
  %218 = and i1 %217, %216
  br i1 %218, label %241, label %247

219:                                              ; preds = %219, %199
  %220 = phi i64 [ 0, %199 ], [ %238, %219 ]
  %221 = phi i64 [ 0, %199 ], [ %237, %219 ]
  %222 = phi i64 [ %200, %199 ], [ %239, %219 ]
  %223 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %220
  %224 = load i32, i32* %223, align 4
  %225 = zext i32 %224 to i64
  %226 = mul nuw i64 %225, %193
  %227 = add i64 %226, %221
  %228 = trunc i64 %227 to i32
  store i32 %228, i32* %223, align 4
  %229 = lshr i64 %227, 32
  %230 = or i64 %220, 1
  %231 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  %234 = mul nuw i64 %233, %193
  %235 = add i64 %234, %229
  %236 = trunc i64 %235 to i32
  store i32 %236, i32* %231, align 4
  %237 = lshr i64 %235, 32
  %238 = add nuw nsw i64 %220, 2
  %239 = add i64 %222, -2
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %201, label %219

241:                                              ; preds = %214
  %242 = trunc i64 %215 to i32
  %243 = sext i32 %175 to i64
  %244 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %243
  store i32 %242, i32* %244, align 4
  %245 = load i32, i32* %5, align 4
  %246 = add nsw i32 %245, 1
  store i32 %246, i32* %5, align 4
  br label %247

247:                                              ; preds = %187, %189, %214, %241
  %248 = phi i32 [ 0, %187 ], [ %175, %189 ], [ %175, %214 ], [ %246, %241 ]
  %249 = icmp eq i32 %179, 0
  br i1 %249, label %268, label %250

250:                                              ; preds = %247, %250
  %251 = phi i32 [ %258, %250 ], [ %179, %247 ]
  %252 = phi i32 [ %259, %250 ], [ 0, %247 ]
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = add i32 %255, %251
  store i32 %256, i32* %254, align 4
  %257 = icmp ugt i32 %251, %256
  %258 = zext i1 %257 to i32
  %259 = add nuw nsw i32 %252, %258
  %260 = icmp ult i32 %259, 4
  %261 = and i1 %257, %260
  br i1 %261, label %250, label %262

262:                                              ; preds = %250
  %263 = add nuw nsw i32 %259, 1
  %264 = icmp slt i32 %263, %248
  %265 = select i1 %264, i32 %248, i32 %263
  %266 = icmp slt i32 %265, 4
  %267 = select i1 %266, i32 %265, i32 4
  store i32 %267, i32* %5, align 4
  br label %268

268:                                              ; preds = %63, %262, %247, %185
  %269 = phi i8* [ %181, %262 ], [ %181, %247 ], [ %181, %185 ], [ %23, %63 ]
  %270 = phi i32 [ %178, %262 ], [ %178, %247 ], [ %178, %185 ], [ %64, %63 ]
  %271 = phi i8 [ %177, %262 ], [ %177, %247 ], [ %177, %185 ], [ 0, %63 ]
  %272 = icmp ult i8* %269, %65
  %273 = and i8 %271, 1
  %274 = icmp eq i8 %273, 0
  %275 = and i1 %274, %272
  br i1 %275, label %276, label %290

276:                                              ; preds = %268, %280
  %277 = phi i8* [ %281, %280 ], [ %269, %268 ]
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 46
  br i1 %279, label %283, label %280

280:                                              ; preds = %276
  %281 = getelementptr inbounds i8, i8* %277, i64 1
  %282 = icmp eq i8* %281, %65
  br i1 %282, label %283, label %276

283:                                              ; preds = %276, %280
  %284 = phi i8* [ %65, %280 ], [ %277, %276 ]
  %285 = ptrtoint i8* %284 to i64
  %286 = ptrtoint i8* %269 to i64
  %287 = sub i64 %285, %286
  %288 = trunc i64 %287 to i32
  %289 = add i32 %270, %288
  br label %290

290:                                              ; preds = %19, %283, %268
  %291 = phi i32 [ %289, %283 ], [ %270, %268 ], [ 0, %19 ]
  ret i32 %291
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi4EE8Digits10Ev() local_unnamed_addr #0 comdat align 2 {
  ret i32 38
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE21MultiplyByTenToTheNthEi(%"class.absl::strings_internal::BigUnsigned"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp sgt i32 %1, 9
  br i1 %3, label %4, label %134

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 12
  %6 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  br i1 %5, label %8, label %70

8:                                                ; preds = %4, %64
  %9 = phi i32 [ %65, %64 ], [ %7, %4 ]
  %10 = phi i32 [ %66, %64 ], [ %1, %4 ]
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %64

12:                                               ; preds = %8
  %13 = zext i32 %9 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i32 %9, 1
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = sub nsw i64 %13, %14
  br label %36

18:                                               ; preds = %36, %12
  %19 = phi i64 [ undef, %12 ], [ %54, %36 ]
  %20 = phi i64 [ 0, %12 ], [ %55, %36 ]
  %21 = phi i64 [ 0, %12 ], [ %54, %36 ]
  %22 = icmp eq i64 %14, 0
  br i1 %22, label %31, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %20
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = mul nuw nsw i64 %26, 1220703125
  %28 = add nuw i64 %27, %21
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %24, align 4
  %30 = lshr i64 %28, 32
  br label %31

31:                                               ; preds = %18, %23
  %32 = phi i64 [ %19, %18 ], [ %30, %23 ]
  %33 = icmp ne i64 %32, 0
  %34 = icmp slt i32 %9, 4
  %35 = and i1 %34, %33
  br i1 %35, label %58, label %64

36:                                               ; preds = %36, %16
  %37 = phi i64 [ 0, %16 ], [ %55, %36 ]
  %38 = phi i64 [ 0, %16 ], [ %54, %36 ]
  %39 = phi i64 [ %17, %16 ], [ %56, %36 ]
  %40 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = mul nuw nsw i64 %42, 1220703125
  %44 = add nuw i64 %43, %38
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %40, align 4
  %46 = lshr i64 %44, 32
  %47 = or i64 %37, 1
  %48 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = mul nuw nsw i64 %50, 1220703125
  %52 = add nuw i64 %51, %46
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %48, align 4
  %54 = lshr i64 %52, 32
  %55 = add nuw nsw i64 %37, 2
  %56 = add i64 %39, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %18, label %36

58:                                               ; preds = %31
  %59 = trunc i64 %32 to i32
  %60 = sext i32 %9 to i64
  %61 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %60
  store i32 %59, i32* %61, align 4
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %6, align 4
  br label %64

64:                                               ; preds = %58, %31, %8
  %65 = phi i32 [ %9, %8 ], [ %9, %31 ], [ %63, %58 ]
  %66 = add nsw i32 %10, -13
  %67 = icmp sgt i32 %66, 12
  br i1 %67, label %8, label %68

68:                                               ; preds = %64
  %69 = icmp sgt i32 %66, 0
  br i1 %69, label %70, label %133

70:                                               ; preds = %4, %68
  %71 = phi i32 [ %65, %68 ], [ %7, %4 ]
  %72 = phi i32 [ %66, %68 ], [ %1, %4 ]
  %73 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %74 = icmp eq i32 %71, 0
  br i1 %74, label %133, label %75

75:                                               ; preds = %70
  %76 = sext i32 %72 to i64
  %77 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp sgt i32 %71, 0
  br i1 %80, label %81, label %133

81:                                               ; preds = %75
  %82 = zext i32 %71 to i64
  %83 = and i64 %82, 1
  %84 = icmp eq i32 %71, 1
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  %86 = sub nsw i64 %82, %83
  br label %105

87:                                               ; preds = %105, %81
  %88 = phi i64 [ undef, %81 ], [ %123, %105 ]
  %89 = phi i64 [ 0, %81 ], [ %124, %105 ]
  %90 = phi i64 [ 0, %81 ], [ %123, %105 ]
  %91 = icmp eq i64 %83, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %89
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = mul nuw i64 %95, %79
  %97 = add i64 %96, %90
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %93, align 4
  %99 = lshr i64 %97, 32
  br label %100

100:                                              ; preds = %87, %92
  %101 = phi i64 [ %88, %87 ], [ %99, %92 ]
  %102 = icmp ne i64 %101, 0
  %103 = icmp slt i32 %71, 4
  %104 = and i1 %103, %102
  br i1 %104, label %127, label %133

105:                                              ; preds = %105, %85
  %106 = phi i64 [ 0, %85 ], [ %124, %105 ]
  %107 = phi i64 [ 0, %85 ], [ %123, %105 ]
  %108 = phi i64 [ %86, %85 ], [ %125, %105 ]
  %109 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %106
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = mul nuw i64 %111, %79
  %113 = add i64 %112, %107
  %114 = trunc i64 %113 to i32
  store i32 %114, i32* %109, align 4
  %115 = lshr i64 %113, 32
  %116 = or i64 %106, 1
  %117 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i64
  %120 = mul nuw i64 %119, %79
  %121 = add i64 %120, %115
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %117, align 4
  %123 = lshr i64 %121, 32
  %124 = add nuw nsw i64 %106, 2
  %125 = add i64 %108, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %87, label %105

127:                                              ; preds = %100
  %128 = trunc i64 %101 to i32
  %129 = sext i32 %71 to i64
  %130 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %129
  store i32 %128, i32* %130, align 4
  %131 = load i32, i32* %73, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %73, align 4
  br label %133

133:                                              ; preds = %68, %70, %75, %100, %127
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE9ShiftLeftEi(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %1)
  br label %198

134:                                              ; preds = %2
  %135 = icmp sgt i32 %1, 0
  br i1 %135, label %136, label %198

136:                                              ; preds = %134
  %137 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %198, label %140

140:                                              ; preds = %136
  %141 = sext i32 %1 to i64
  %142 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN4absl16strings_internal9kTenToNthE, i64 0, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = icmp sgt i32 %138, 0
  br i1 %145, label %146, label %198

146:                                              ; preds = %140
  %147 = zext i32 %138 to i64
  %148 = and i64 %147, 1
  %149 = icmp eq i32 %138, 1
  br i1 %149, label %152, label %150

150:                                              ; preds = %146
  %151 = sub nsw i64 %147, %148
  br label %170

152:                                              ; preds = %170, %146
  %153 = phi i64 [ undef, %146 ], [ %188, %170 ]
  %154 = phi i64 [ 0, %146 ], [ %189, %170 ]
  %155 = phi i64 [ 0, %146 ], [ %188, %170 ]
  %156 = icmp eq i64 %148, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %154
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = mul nuw i64 %160, %144
  %162 = add i64 %161, %155
  %163 = trunc i64 %162 to i32
  store i32 %163, i32* %158, align 4
  %164 = lshr i64 %162, 32
  br label %165

165:                                              ; preds = %152, %157
  %166 = phi i64 [ %153, %152 ], [ %164, %157 ]
  %167 = icmp ne i64 %166, 0
  %168 = icmp slt i32 %138, 4
  %169 = and i1 %168, %167
  br i1 %169, label %192, label %198

170:                                              ; preds = %170, %150
  %171 = phi i64 [ 0, %150 ], [ %189, %170 ]
  %172 = phi i64 [ 0, %150 ], [ %188, %170 ]
  %173 = phi i64 [ %151, %150 ], [ %190, %170 ]
  %174 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %171
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = mul nuw i64 %176, %144
  %178 = add i64 %177, %172
  %179 = trunc i64 %178 to i32
  store i32 %179, i32* %174, align 4
  %180 = lshr i64 %178, 32
  %181 = or i64 %171, 1
  %182 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  %185 = mul nuw i64 %184, %144
  %186 = add i64 %185, %180
  %187 = trunc i64 %186 to i32
  store i32 %187, i32* %182, align 4
  %188 = lshr i64 %186, 32
  %189 = add nuw nsw i64 %171, 2
  %190 = add i64 %173, -2
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %152, label %170

192:                                              ; preds = %165
  %193 = trunc i64 %166 to i32
  %194 = sext i32 %138 to i64
  %195 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %194
  store i32 %193, i32* %195, align 4
  %196 = load i32, i32* %137, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %137, align 4
  br label %198

198:                                              ; preds = %192, %165, %140, %136, %134, %133
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi4EE17ReadFloatMantissaERKNS0_11ParsedFloatEi(%"class.absl::strings_internal::BigUnsigned"*, %"struct.absl::strings_internal::ParsedFloat"* dereferenceable(48), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = sext i32 %5 to i64
  %9 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %10 = bitcast i32* %9 to i8*
  %11 = shl nuw nsw i64 %8, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 %11, i1 false) #4
  br label %12

12:                                               ; preds = %3, %7
  store i32 0, i32* %4, align 4
  %13 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %33

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  store i32 %19, i32* %20, align 4
  %21 = load i64, i64* %17, align 8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 1
  store i32 %23, i32* %24, align 4
  %25 = icmp eq i32 %23, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %16
  %27 = icmp eq i32 %19, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %26, %16
  %29 = phi i32 [ 2, %16 ], [ 1, %26 ]
  store i32 %29, i32* %4, align 4
  br label %30

30:                                               ; preds = %28, %26
  %31 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  br label %40

33:                                               ; preds = %12
  %34 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 5
  %35 = load i8*, i8** %34, align 8
  %36 = tail call i32 @_ZN4absl16strings_internal11BigUnsignedILi4EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned"* %0, i8* nonnull %14, i8* %35, i32 %2)
  %37 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, %36
  br label %40

40:                                               ; preds = %33, %30
  %41 = phi i32 [ %32, %30 ], [ %39, %33 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE9SetToZeroEv(%"class.absl::strings_internal::BigUnsigned"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = sext i32 %3 to i64
  %7 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %8 = bitcast i32* %7 to i8*
  %9 = shl nuw nsw i64 %6, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 %9, i1 false)
  br label %10

10:                                               ; preds = %5, %1
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE9ShiftLeftEi(%"class.absl::strings_internal::BigUnsigned"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.absl::strings_internal::BigUnsigned"* %0 to i8*
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %200

5:                                                ; preds = %2
  %6 = lshr i32 %1, 5
  %7 = icmp sgt i32 %1, 127
  %8 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  br i1 %7, label %10, label %18

10:                                               ; preds = %5
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = sext i32 %9 to i64
  %14 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %15 = bitcast i32* %14 to i8*
  %16 = shl nuw nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false) #4
  br label %17

17:                                               ; preds = %10, %12
  store i32 0, i32* %8, align 4
  br label %200

18:                                               ; preds = %5
  %19 = add nsw i32 %9, %6
  %20 = icmp slt i32 %19, 4
  %21 = select i1 %20, i32 %19, i32 4
  store i32 %21, i32* %8, align 4
  %22 = and i32 %1, 31
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %41

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %26
  %28 = sub nsw i32 0, %6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %27, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = ptrtoint i32* %25 to i64
  %33 = sub i64 %31, %32
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %193, label %35

35:                                               ; preds = %24
  %36 = ashr exact i64 %33, 2
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds i32, i32* %27, i64 %37
  %39 = bitcast i32* %38 to i8*
  %40 = bitcast i32* %25 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %33, i1 false) #4
  br label %193

41:                                               ; preds = %18
  %42 = icmp slt i32 %21, 3
  %43 = select i1 %42, i32 %19, i32 3
  %44 = icmp sgt i32 %43, %6
  br i1 %44, label %45, label %164

45:                                               ; preds = %41
  %46 = sub nuw nsw i32 32, %22
  %47 = sext i32 %43 to i64
  %48 = zext i32 %6 to i64
  %49 = sub nsw i64 %47, %48
  %50 = icmp ult i64 %49, 8
  br i1 %50, label %51, label %53

51:                                               ; preds = %160, %86, %53, %45
  %52 = phi i64 [ %47, %86 ], [ %47, %53 ], [ %47, %45 ], [ %113, %160 ]
  br label %172

53:                                               ; preds = %45
  %54 = xor i64 %48, -1
  %55 = add nsw i64 %54, %47
  %56 = shl nsw i64 %47, 2
  %57 = add nsw i64 %56, 4
  %58 = getelementptr i8, i8* %3, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %61 = extractvalue { i64, i1 } %60, 0
  %62 = extractvalue { i64, i1 } %60, 1
  %63 = icmp ugt i64 %61, %59
  %64 = or i1 %63, %62
  %65 = add nsw i64 %56, 4
  %66 = shl nuw nsw i32 %6, 2
  %67 = zext i32 %66 to i64
  %68 = sub nsw i64 %65, %67
  %69 = getelementptr i8, i8* %3, i64 %68
  %70 = ptrtoint i8* %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %72 = extractvalue { i64, i1 } %71, 0
  %73 = extractvalue { i64, i1 } %71, 1
  %74 = icmp ugt i64 %72, %70
  %75 = or i1 %74, %73
  %76 = or i1 %64, %75
  %77 = sub nsw i64 %56, %67
  %78 = getelementptr i8, i8* %3, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %81 = extractvalue { i64, i1 } %80, 0
  %82 = extractvalue { i64, i1 } %80, 1
  %83 = icmp ugt i64 %81, %79
  %84 = or i1 %83, %82
  %85 = or i1 %76, %84
  br i1 %85, label %51, label %86

86:                                               ; preds = %53
  %87 = shl nuw nsw i32 %6, 2
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %88, 8
  %90 = getelementptr i8, i8* %3, i64 %89
  %91 = shl nsw i64 %47, 2
  %92 = add nsw i64 %91, 8
  %93 = getelementptr i8, i8* %3, i64 %92
  %94 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 1
  %95 = bitcast i32* %94 to i8*
  %96 = add nsw i64 %91, 8
  %97 = sub nsw i64 %96, %88
  %98 = getelementptr i8, i8* %3, i64 %97
  %99 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %100 = bitcast i32* %99 to i8*
  %101 = add nsw i64 %91, 4
  %102 = sub nsw i64 %101, %88
  %103 = getelementptr i8, i8* %3, i64 %102
  %104 = icmp ult i8* %90, %98
  %105 = icmp ugt i8* %93, %95
  %106 = and i1 %104, %105
  %107 = icmp ult i8* %90, %103
  %108 = icmp ugt i8* %93, %100
  %109 = and i1 %107, %108
  %110 = or i1 %106, %109
  br i1 %110, label %51, label %111

111:                                              ; preds = %86
  %112 = and i64 %49, -8
  %113 = sub nsw i64 %47, %112
  %114 = insertelement <4 x i32> undef, i32 %22, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x i32> undef, i32 %22, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = insertelement <4 x i32> undef, i32 %46, i32 0
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> zeroinitializer
  %120 = insertelement <4 x i32> undef, i32 %46, i32 0
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %122

122:                                              ; preds = %122, %111
  %123 = phi i64 [ 0, %111 ], [ %158, %122 ]
  %124 = sub i64 %47, %123
  %125 = sub nsw i64 %124, %48
  %126 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %125
  %127 = getelementptr inbounds i32, i32* %126, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4, !alias.scope !2
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %131 = getelementptr inbounds i32, i32* %126, i64 -7
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !2
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %135 = shl <4 x i32> %130, %115
  %136 = shl <4 x i32> %134, %117
  %137 = add nsw i64 %125, -1
  %138 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %137
  %139 = getelementptr inbounds i32, i32* %138, i64 -3
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !5
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %143 = getelementptr inbounds i32, i32* %138, i64 -7
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !alias.scope !5
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %147 = lshr <4 x i32> %142, %119
  %148 = lshr <4 x i32> %146, %121
  %149 = or <4 x i32> %147, %135
  %150 = or <4 x i32> %148, %136
  %151 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %124
  %152 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %153 = getelementptr inbounds i32, i32* %151, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %154, align 4, !alias.scope !7, !noalias !9
  %155 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %156 = getelementptr inbounds i32, i32* %151, i64 -7
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4, !alias.scope !7, !noalias !9
  %158 = add i64 %123, 8
  %159 = icmp eq i64 %158, %112
  br i1 %159, label %160, label %122, !llvm.loop !10

160:                                              ; preds = %122
  %161 = icmp eq i64 %49, %112
  br i1 %161, label %162, label %51

162:                                              ; preds = %172, %160
  %163 = load i32, i32* %8, align 4
  br label %164

164:                                              ; preds = %162, %41
  %165 = phi i32 [ %163, %162 ], [ %21, %41 ]
  %166 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %167 = load i32, i32* %166, align 4
  %168 = shl i32 %167, %22
  %169 = zext i32 %6 to i64
  %170 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %169
  store i32 %168, i32* %170, align 4
  %171 = icmp slt i32 %165, 4
  br i1 %171, label %186, label %193

172:                                              ; preds = %51, %172
  %173 = phi i64 [ %184, %172 ], [ %52, %51 ]
  %174 = sub nsw i64 %173, %48
  %175 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = shl i32 %176, %22
  %178 = add nsw i64 %174, -1
  %179 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = lshr i32 %180, %46
  %182 = or i32 %181, %177
  %183 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %173
  store i32 %182, i32* %183, align 4
  %184 = add nsw i64 %173, -1
  %185 = icmp sgt i64 %184, %48
  br i1 %185, label %172, label %162, !llvm.loop !12

186:                                              ; preds = %164
  %187 = sext i32 %165 to i64
  %188 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %186
  %192 = add nsw i32 %165, 1
  store i32 %192, i32* %8, align 4
  br label %193

193:                                              ; preds = %35, %24, %186, %164, %191
  %194 = icmp eq i32 %6, 0
  br i1 %194, label %200, label %195

195:                                              ; preds = %193
  %196 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %197 = bitcast i32* %196 to i8*
  %198 = shl nuw nsw i32 %6, 2
  %199 = zext i32 %198 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %197, i8 0, i64 %199, i1 false)
  br label %200

200:                                              ; preds = %195, %193, %2, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEj(%"class.absl::strings_internal::BigUnsigned"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = icmp eq i32 %1, 1
  %7 = or i1 %6, %5
  br i1 %7, label %73, label %8

8:                                                ; preds = %2
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = sext i32 %4 to i64
  %14 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %15 = bitcast i32* %14 to i8*
  %16 = shl nuw nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false) #4
  br label %17

17:                                               ; preds = %10, %12
  store i32 0, i32* %3, align 4
  br label %73

18:                                               ; preds = %8
  %19 = zext i32 %1 to i64
  %20 = icmp sgt i32 %4, 0
  br i1 %20, label %21, label %73

21:                                               ; preds = %18
  %22 = zext i32 %4 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %4, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = sub nsw i64 %22, %23
  br label %45

27:                                               ; preds = %45, %21
  %28 = phi i64 [ undef, %21 ], [ %63, %45 ]
  %29 = phi i64 [ 0, %21 ], [ %64, %45 ]
  %30 = phi i64 [ 0, %21 ], [ %63, %45 ]
  %31 = icmp eq i64 %23, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %29
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  %36 = mul nuw i64 %35, %19
  %37 = add i64 %36, %30
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %33, align 4
  %39 = lshr i64 %37, 32
  br label %40

40:                                               ; preds = %27, %32
  %41 = phi i64 [ %28, %27 ], [ %39, %32 ]
  %42 = icmp ne i64 %41, 0
  %43 = icmp slt i32 %4, 4
  %44 = and i1 %43, %42
  br i1 %44, label %67, label %73

45:                                               ; preds = %45, %25
  %46 = phi i64 [ 0, %25 ], [ %64, %45 ]
  %47 = phi i64 [ 0, %25 ], [ %63, %45 ]
  %48 = phi i64 [ %26, %25 ], [ %65, %45 ]
  %49 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %46
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = mul nuw i64 %51, %19
  %53 = add i64 %52, %47
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %49, align 4
  %55 = lshr i64 %53, 32
  %56 = or i64 %46, 1
  %57 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = mul nuw i64 %59, %19
  %61 = add i64 %60, %55
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %57, align 4
  %63 = lshr i64 %61, 32
  %64 = add nuw nsw i64 %46, 2
  %65 = add i64 %48, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %27, label %45

67:                                               ; preds = %40
  %68 = trunc i64 %41 to i32
  %69 = sext i32 %4 to i64
  %70 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %69
  store i32 %68, i32* %70, align 4
  %71 = load i32, i32* %3, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %3, align 4
  br label %73

73:                                               ; preds = %18, %67, %40, %2, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEm(%"class.absl::strings_internal::BigUnsigned"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca [2 x i32], align 4
  %4 = bitcast [2 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = trunc i64 %1 to i32
  store i32 %7, i32* %5, align 4
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %6, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %82

13:                                               ; preds = %2
  %14 = icmp eq i32 %12, 0
  %15 = icmp eq i32 %7, 1
  %16 = or i1 %15, %14
  br i1 %16, label %138, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %7, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %17
  %20 = icmp sgt i32 %12, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = sext i32 %12 to i64
  %23 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %24 = bitcast i32* %23 to i8*
  %25 = shl nuw nsw i64 %22, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 %25, i1 false) #4
  br label %26

26:                                               ; preds = %21, %19
  store i32 0, i32* %11, align 4
  br label %138

27:                                               ; preds = %17
  %28 = and i64 %1, 4294967295
  %29 = icmp sgt i32 %12, 0
  br i1 %29, label %30, label %138

30:                                               ; preds = %27
  %31 = zext i32 %12 to i64
  %32 = and i64 %31, 1
  %33 = icmp eq i32 %12, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = sub nsw i64 %31, %32
  br label %54

36:                                               ; preds = %54, %30
  %37 = phi i64 [ undef, %30 ], [ %72, %54 ]
  %38 = phi i64 [ 0, %30 ], [ %73, %54 ]
  %39 = phi i64 [ 0, %30 ], [ %72, %54 ]
  %40 = icmp eq i64 %32, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %38
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = mul nuw i64 %28, %44
  %46 = add i64 %45, %39
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %42, align 4
  %48 = lshr i64 %46, 32
  br label %49

49:                                               ; preds = %36, %41
  %50 = phi i64 [ %37, %36 ], [ %48, %41 ]
  %51 = icmp ne i64 %50, 0
  %52 = icmp slt i32 %12, 4
  %53 = and i1 %52, %51
  br i1 %53, label %76, label %138

54:                                               ; preds = %54, %34
  %55 = phi i64 [ 0, %34 ], [ %73, %54 ]
  %56 = phi i64 [ 0, %34 ], [ %72, %54 ]
  %57 = phi i64 [ %35, %34 ], [ %74, %54 ]
  %58 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %55
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = mul nuw i64 %28, %60
  %62 = add i64 %61, %56
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %58, align 4
  %64 = lshr i64 %62, 32
  %65 = or i64 %55, 1
  %66 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = mul nuw i64 %28, %68
  %70 = add i64 %69, %64
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %66, align 4
  %72 = lshr i64 %70, 32
  %73 = add nuw nsw i64 %55, 2
  %74 = add i64 %57, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %36, label %54

76:                                               ; preds = %49
  %77 = trunc i64 %50 to i32
  %78 = sext i32 %12 to i64
  %79 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %78
  store i32 %77, i32* %79, align 4
  %80 = load i32, i32* %11, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %11, align 4
  br label %138

82:                                               ; preds = %2
  %83 = icmp slt i32 %12, 3
  %84 = select i1 %83, i32 %12, i32 3
  %85 = icmp sgt i32 %84, -1
  br i1 %85, label %86, label %138

86:                                               ; preds = %82
  %87 = add nsw i32 %12, -1
  %88 = sext i32 %84 to i64
  %89 = sext i32 %87 to i64
  br label %90

90:                                               ; preds = %135, %86
  %91 = phi i64 [ %88, %86 ], [ %136, %135 ]
  %92 = icmp slt i64 %91, %89
  %93 = trunc i64 %91 to i32
  %94 = select i1 %92, i32 %93, i32 %87
  %95 = sub i32 %93, %94
  %96 = icmp sgt i32 %94, -1
  %97 = icmp slt i32 %95, 2
  %98 = and i1 %96, %97
  br i1 %98, label %99, label %123

99:                                               ; preds = %90
  %100 = sext i32 %94 to i64
  %101 = sext i32 %95 to i64
  br label %102

102:                                              ; preds = %102, %99
  %103 = phi i64 [ %101, %99 ], [ %119, %102 ]
  %104 = phi i64 [ %100, %99 ], [ %118, %102 ]
  %105 = phi i64 [ 0, %99 ], [ %116, %102 ]
  %106 = phi i64 [ 0, %99 ], [ %117, %102 ]
  %107 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %104
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 %103
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = mul nuw i64 %112, %109
  %114 = add i64 %113, %106
  %115 = lshr i64 %114, 32
  %116 = add i64 %115, %105
  %117 = and i64 %114, 4294967295
  %118 = add nsw i64 %104, -1
  %119 = add nsw i64 %103, 1
  %120 = icmp sgt i64 %104, 0
  %121 = icmp slt i64 %119, 2
  %122 = and i1 %121, %120
  br i1 %122, label %102, label %123

123:                                              ; preds = %102, %90
  %124 = phi i64 [ 0, %90 ], [ %117, %102 ]
  %125 = phi i64 [ 0, %90 ], [ %116, %102 ]
  %126 = add i32 %93, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %126, i64 %125) #4
  %127 = trunc i64 %124 to i32
  %128 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %91
  store i32 %127, i32* %128, align 4
  %129 = icmp eq i64 %124, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %123
  %131 = load i32, i32* %11, align 4
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %91, %132
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  store i32 %126, i32* %11, align 4
  br label %135

135:                                              ; preds = %134, %130, %123
  %136 = add nsw i64 %91, -1
  %137 = icmp sgt i64 %91, 0
  br i1 %137, label %90, label %138

138:                                              ; preds = %135, %82, %76, %49, %27, %26, %13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE10MultiplyByEiPKj(%"class.absl::strings_internal::BigUnsigned"*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %1
  %7 = icmp slt i32 %6, 5
  %8 = select i1 %7, i32 %6, i32 5
  %9 = add i32 %8, -2
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = add nsw i32 %5, -1
  %13 = sext i32 %1 to i64
  %14 = sext i32 %9 to i64
  %15 = sext i32 %12 to i64
  br label %17

16:                                               ; preds = %63, %3
  ret void

17:                                               ; preds = %11, %63
  %18 = phi i64 [ %14, %11 ], [ %64, %63 ]
  %19 = icmp slt i64 %18, %15
  %20 = trunc i64 %18 to i32
  %21 = select i1 %19, i32 %20, i32 %12
  %22 = sub i32 %20, %21
  %23 = icmp sgt i32 %21, -1
  %24 = icmp slt i32 %22, %1
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %50

26:                                               ; preds = %17
  %27 = sext i32 %21 to i64
  %28 = sext i32 %22 to i64
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi i64 [ %28, %26 ], [ %46, %29 ]
  %31 = phi i64 [ %27, %26 ], [ %45, %29 ]
  %32 = phi i64 [ 0, %26 ], [ %43, %29 ]
  %33 = phi i64 [ 0, %26 ], [ %44, %29 ]
  %34 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %2, i64 %30
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = mul nuw i64 %39, %36
  %41 = add i64 %40, %33
  %42 = lshr i64 %41, 32
  %43 = add i64 %42, %32
  %44 = and i64 %41, 4294967295
  %45 = add nsw i64 %31, -1
  %46 = add nsw i64 %30, 1
  %47 = icmp sgt i64 %31, 0
  %48 = icmp slt i64 %46, %13
  %49 = and i1 %48, %47
  br i1 %49, label %29, label %50

50:                                               ; preds = %29, %17
  %51 = phi i64 [ 0, %17 ], [ %44, %29 ]
  %52 = phi i64 [ 0, %17 ], [ %43, %29 ]
  %53 = trunc i64 %18 to i32
  %54 = add i32 %53, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %54, i64 %52) #4
  %55 = trunc i64 %51 to i32
  %56 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %18
  store i32 %55, i32* %56, align 4
  %57 = icmp eq i64 %51, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %50
  %59 = load i32, i32* %4, align 4
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %18, %60
  br i1 %61, label %63, label %62

62:                                               ; preds = %58
  store i32 %54, i32* %4, align 4
  br label %63

63:                                               ; preds = %50, %58, %62
  %64 = add nsw i64 %18, -1
  %65 = icmp sgt i64 %18, 0
  br i1 %65, label %17, label %16
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE22MultiplyByFiveToTheNthEi(%"class.absl::strings_internal::BigUnsigned"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp sgt i32 %1, 12
  br i1 %3, label %4, label %67

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  br label %7

7:                                                ; preds = %4, %63
  %8 = phi i32 [ %6, %4 ], [ %64, %63 ]
  %9 = phi i32 [ %1, %4 ], [ %65, %63 ]
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %63

11:                                               ; preds = %7
  %12 = zext i32 %8 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %8, 1
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = sub nsw i64 %12, %13
  br label %35

17:                                               ; preds = %35, %11
  %18 = phi i64 [ undef, %11 ], [ %53, %35 ]
  %19 = phi i64 [ 0, %11 ], [ %54, %35 ]
  %20 = phi i64 [ 0, %11 ], [ %53, %35 ]
  %21 = icmp eq i64 %13, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %19
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = mul nuw nsw i64 %25, 1220703125
  %27 = add nuw i64 %26, %20
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %23, align 4
  %29 = lshr i64 %27, 32
  br label %30

30:                                               ; preds = %17, %22
  %31 = phi i64 [ %18, %17 ], [ %29, %22 ]
  %32 = icmp ne i64 %31, 0
  %33 = icmp slt i32 %8, 4
  %34 = and i1 %33, %32
  br i1 %34, label %57, label %63

35:                                               ; preds = %35, %15
  %36 = phi i64 [ 0, %15 ], [ %54, %35 ]
  %37 = phi i64 [ 0, %15 ], [ %53, %35 ]
  %38 = phi i64 [ %16, %15 ], [ %55, %35 ]
  %39 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %36
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = mul nuw nsw i64 %41, 1220703125
  %43 = add nuw i64 %42, %37
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %39, align 4
  %45 = lshr i64 %43, 32
  %46 = or i64 %36, 1
  %47 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = mul nuw nsw i64 %49, 1220703125
  %51 = add nuw i64 %50, %45
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %47, align 4
  %53 = lshr i64 %51, 32
  %54 = add nuw nsw i64 %36, 2
  %55 = add i64 %38, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %17, label %35

57:                                               ; preds = %30
  %58 = trunc i64 %31 to i32
  %59 = sext i32 %8 to i64
  %60 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %59
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %5, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %5, align 4
  br label %63

63:                                               ; preds = %7, %30, %57
  %64 = phi i32 [ %8, %7 ], [ %8, %30 ], [ %62, %57 ]
  %65 = add nsw i32 %9, -13
  %66 = icmp sgt i32 %65, 12
  br i1 %66, label %7, label %67

67:                                               ; preds = %63, %2
  %68 = phi i32 [ %1, %2 ], [ %65, %63 ]
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %132

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %132, label %74

74:                                               ; preds = %70
  %75 = sext i32 %68 to i64
  %76 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = icmp sgt i32 %72, 0
  br i1 %79, label %80, label %132

80:                                               ; preds = %74
  %81 = zext i32 %72 to i64
  %82 = and i64 %81, 1
  %83 = icmp eq i32 %72, 1
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = sub nsw i64 %81, %82
  br label %104

86:                                               ; preds = %104, %80
  %87 = phi i64 [ undef, %80 ], [ %122, %104 ]
  %88 = phi i64 [ 0, %80 ], [ %123, %104 ]
  %89 = phi i64 [ 0, %80 ], [ %122, %104 ]
  %90 = icmp eq i64 %82, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %88
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = mul nuw i64 %94, %78
  %96 = add i64 %95, %89
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %92, align 4
  %98 = lshr i64 %96, 32
  br label %99

99:                                               ; preds = %86, %91
  %100 = phi i64 [ %87, %86 ], [ %98, %91 ]
  %101 = icmp ne i64 %100, 0
  %102 = icmp slt i32 %72, 4
  %103 = and i1 %102, %101
  br i1 %103, label %126, label %132

104:                                              ; preds = %104, %84
  %105 = phi i64 [ 0, %84 ], [ %123, %104 ]
  %106 = phi i64 [ 0, %84 ], [ %122, %104 ]
  %107 = phi i64 [ %85, %84 ], [ %124, %104 ]
  %108 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %105
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = mul nuw i64 %110, %78
  %112 = add i64 %111, %106
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %108, align 4
  %114 = lshr i64 %112, 32
  %115 = or i64 %105, 1
  %116 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = mul nuw i64 %118, %78
  %120 = add i64 %119, %114
  %121 = trunc i64 %120 to i32
  store i32 %121, i32* %116, align 4
  %122 = lshr i64 %120, 32
  %123 = add nuw nsw i64 %105, 2
  %124 = add i64 %107, -2
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %86, label %104

126:                                              ; preds = %99
  %127 = trunc i64 %100 to i32
  %128 = sext i32 %72 to i64
  %129 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %128
  store i32 %127, i32* %129, align 4
  %130 = load i32, i32* %71, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %71, align 4
  br label %132

132:                                              ; preds = %126, %99, %74, %70, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE12FiveToTheNthEi(%"class.absl::strings_internal::BigUnsigned"* noalias sret, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 1
  %6 = getelementptr %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 2
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %7 = bitcast i32* %6 to i64*
  store i64 0, i64* %7, align 4
  %8 = icmp sgt i32 %1, 26
  br i1 %8, label %9, label %97

9:                                                ; preds = %2
  %10 = bitcast i32* %4 to i8*
  br label %11

11:                                               ; preds = %9, %92
  %12 = phi i8 [ 1, %9 ], [ %93, %92 ]
  %13 = phi i32 [ %1, %9 ], [ %95, %92 ]
  %14 = udiv i32 %13, 27
  %15 = icmp slt i32 %14, 20
  %16 = select i1 %15, i32 %14, i32 20
  %17 = and i8 %12, 1
  %18 = icmp eq i8 %17, 0
  %19 = shl nuw nsw i32 %16, 1
  br i1 %18, label %28, label %20

20:                                               ; preds = %11
  %21 = shl nuw nsw i32 %16, 3
  %22 = zext i32 %21 to i64
  %23 = add nsw i32 %16, -1
  %24 = mul nsw i32 %23, %16
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [420 x i32], [420 x i32]* @_ZN4absl16strings_internal12_GLOBAL__N_118kLargePowersOfFiveE, i64 0, i64 %25
  %27 = bitcast i32* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %27, i64 %22, i1 false) #4
  store i32 %19, i32* %3, align 4
  br label %92

28:                                               ; preds = %11
  %29 = add nsw i32 %16, -1
  %30 = mul nsw i32 %29, %16
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [420 x i32], [420 x i32]* @_ZN4absl16strings_internal12_GLOBAL__N_118kLargePowersOfFiveE, i64 0, i64 %31
  %33 = load i32, i32* %3, align 4
  %34 = add nsw i32 %33, %19
  %35 = icmp slt i32 %34, 5
  %36 = select i1 %35, i32 %34, i32 5
  %37 = add i32 %36, -2
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %92

39:                                               ; preds = %28
  %40 = add nsw i32 %33, -1
  %41 = zext i32 %19 to i64
  %42 = sext i32 %37 to i64
  %43 = sext i32 %40 to i64
  br label %44

44:                                               ; preds = %89, %39
  %45 = phi i64 [ %42, %39 ], [ %90, %89 ]
  %46 = icmp slt i64 %45, %43
  %47 = trunc i64 %45 to i32
  %48 = select i1 %46, i32 %47, i32 %40
  %49 = sub i32 %47, %48
  %50 = icmp sgt i32 %48, -1
  %51 = icmp slt i32 %49, %19
  %52 = and i1 %50, %51
  br i1 %52, label %53, label %77

53:                                               ; preds = %44
  %54 = sext i32 %48 to i64
  %55 = sext i32 %49 to i64
  br label %56

56:                                               ; preds = %56, %53
  %57 = phi i64 [ %55, %53 ], [ %73, %56 ]
  %58 = phi i64 [ %54, %53 ], [ %72, %56 ]
  %59 = phi i64 [ 0, %53 ], [ %70, %56 ]
  %60 = phi i64 [ 0, %53 ], [ %71, %56 ]
  %61 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %58
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %32, i64 %57
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = mul nuw i64 %66, %63
  %68 = add i64 %67, %60
  %69 = lshr i64 %68, 32
  %70 = add i64 %69, %59
  %71 = and i64 %68, 4294967295
  %72 = add nsw i64 %58, -1
  %73 = add nsw i64 %57, 1
  %74 = icmp sgt i64 %58, 0
  %75 = icmp slt i64 %73, %41
  %76 = and i1 %75, %74
  br i1 %76, label %56, label %77

77:                                               ; preds = %56, %44
  %78 = phi i64 [ 0, %44 ], [ %71, %56 ]
  %79 = phi i64 [ 0, %44 ], [ %70, %56 ]
  %80 = add i32 %47, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %80, i64 %79) #4
  %81 = trunc i64 %78 to i32
  %82 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %45
  store i32 %81, i32* %82, align 4
  %83 = icmp eq i64 %78, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %77
  %85 = load i32, i32* %3, align 4
  %86 = sext i32 %85 to i64
  %87 = icmp slt i64 %45, %86
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  store i32 %80, i32* %3, align 4
  br label %89

89:                                               ; preds = %88, %84, %77
  %90 = add nsw i64 %45, -1
  %91 = icmp sgt i64 %45, 0
  br i1 %91, label %44, label %92

92:                                               ; preds = %89, %28, %20
  %93 = phi i8 [ 0, %20 ], [ %12, %28 ], [ %12, %89 ]
  %94 = mul i32 %16, -27
  %95 = add i32 %94, %13
  %96 = icmp sgt i32 %95, 26
  br i1 %96, label %11, label %97

97:                                               ; preds = %92, %2
  %98 = phi i32 [ %1, %2 ], [ %95, %92 ]
  %99 = icmp sgt i32 %98, 12
  br i1 %99, label %100, label %162

100:                                              ; preds = %97
  %101 = load i32, i32* %3, align 4
  br label %102

102:                                              ; preds = %158, %100
  %103 = phi i32 [ %101, %100 ], [ %159, %158 ]
  %104 = phi i32 [ %98, %100 ], [ %160, %158 ]
  %105 = icmp sgt i32 %103, 0
  br i1 %105, label %106, label %158

106:                                              ; preds = %102
  %107 = zext i32 %103 to i64
  %108 = and i64 %107, 1
  %109 = icmp eq i32 %103, 1
  br i1 %109, label %112, label %110

110:                                              ; preds = %106
  %111 = sub nsw i64 %107, %108
  br label %130

112:                                              ; preds = %130, %106
  %113 = phi i64 [ undef, %106 ], [ %148, %130 ]
  %114 = phi i64 [ 0, %106 ], [ %149, %130 ]
  %115 = phi i64 [ 0, %106 ], [ %148, %130 ]
  %116 = icmp eq i64 %108, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %114
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = mul nuw nsw i64 %120, 1220703125
  %122 = add nuw i64 %121, %115
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %118, align 4
  %124 = lshr i64 %122, 32
  br label %125

125:                                              ; preds = %112, %117
  %126 = phi i64 [ %113, %112 ], [ %124, %117 ]
  %127 = icmp ne i64 %126, 0
  %128 = icmp slt i32 %103, 4
  %129 = and i1 %128, %127
  br i1 %129, label %152, label %158

130:                                              ; preds = %130, %110
  %131 = phi i64 [ 0, %110 ], [ %149, %130 ]
  %132 = phi i64 [ 0, %110 ], [ %148, %130 ]
  %133 = phi i64 [ %111, %110 ], [ %150, %130 ]
  %134 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %131
  %135 = load i32, i32* %134, align 4
  %136 = zext i32 %135 to i64
  %137 = mul nuw nsw i64 %136, 1220703125
  %138 = add nuw i64 %137, %132
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %134, align 4
  %140 = lshr i64 %138, 32
  %141 = or i64 %131, 1
  %142 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = mul nuw nsw i64 %144, 1220703125
  %146 = add nuw i64 %145, %140
  %147 = trunc i64 %146 to i32
  store i32 %147, i32* %142, align 4
  %148 = lshr i64 %146, 32
  %149 = add nuw nsw i64 %131, 2
  %150 = add i64 %133, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %112, label %130

152:                                              ; preds = %125
  %153 = trunc i64 %126 to i32
  %154 = sext i32 %103 to i64
  %155 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %154
  store i32 %153, i32* %155, align 4
  %156 = load i32, i32* %3, align 4
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %3, align 4
  br label %158

158:                                              ; preds = %152, %125, %102
  %159 = phi i32 [ %103, %102 ], [ %103, %125 ], [ %157, %152 ]
  %160 = add nsw i32 %104, -13
  %161 = icmp sgt i32 %160, 12
  br i1 %161, label %102, label %162

162:                                              ; preds = %158, %97
  %163 = phi i32 [ %98, %97 ], [ %160, %158 ]
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %226

165:                                              ; preds = %162
  %166 = load i32, i32* %3, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %226, label %168

168:                                              ; preds = %165
  %169 = sext i32 %163 to i64
  %170 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  %173 = icmp sgt i32 %166, 0
  br i1 %173, label %174, label %226

174:                                              ; preds = %168
  %175 = zext i32 %166 to i64
  %176 = and i64 %175, 1
  %177 = icmp eq i32 %166, 1
  br i1 %177, label %180, label %178

178:                                              ; preds = %174
  %179 = sub nsw i64 %175, %176
  br label %198

180:                                              ; preds = %198, %174
  %181 = phi i64 [ undef, %174 ], [ %216, %198 ]
  %182 = phi i64 [ 0, %174 ], [ %217, %198 ]
  %183 = phi i64 [ 0, %174 ], [ %216, %198 ]
  %184 = icmp eq i64 %176, 0
  br i1 %184, label %193, label %185

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %182
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i64
  %189 = mul nuw i64 %188, %172
  %190 = add i64 %189, %183
  %191 = trunc i64 %190 to i32
  store i32 %191, i32* %186, align 4
  %192 = lshr i64 %190, 32
  br label %193

193:                                              ; preds = %180, %185
  %194 = phi i64 [ %181, %180 ], [ %192, %185 ]
  %195 = icmp ne i64 %194, 0
  %196 = icmp slt i32 %166, 4
  %197 = and i1 %196, %195
  br i1 %197, label %220, label %226

198:                                              ; preds = %198, %178
  %199 = phi i64 [ 0, %178 ], [ %217, %198 ]
  %200 = phi i64 [ 0, %178 ], [ %216, %198 ]
  %201 = phi i64 [ %179, %178 ], [ %218, %198 ]
  %202 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %199
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  %205 = mul nuw i64 %204, %172
  %206 = add i64 %205, %200
  %207 = trunc i64 %206 to i32
  store i32 %207, i32* %202, align 4
  %208 = lshr i64 %206, 32
  %209 = or i64 %199, 1
  %210 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = zext i32 %211 to i64
  %213 = mul nuw i64 %212, %172
  %214 = add i64 %213, %208
  %215 = trunc i64 %214 to i32
  store i32 %215, i32* %210, align 4
  %216 = lshr i64 %214, 32
  %217 = add nuw nsw i64 %199, 2
  %218 = add i64 %201, -2
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %180, label %198

220:                                              ; preds = %193
  %221 = trunc i64 %194 to i32
  %222 = sext i32 %166 to i64
  %223 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %222
  store i32 %221, i32* %223, align 4
  %224 = load i32, i32* %3, align 4
  %225 = add nsw i32 %224, 1
  store i32 %225, i32* %3, align 4
  br label %226

226:                                              ; preds = %162, %165, %168, %193, %220
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4absl16strings_internal11BigUnsignedILi4EE7GetWordEi(%"class.absl::strings_internal::BigUnsigned"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp slt i32 %1, 0
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %9
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %2, %4, %8
  %13 = phi i32 [ %11, %8 ], [ 0, %4 ], [ 0, %2 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK4absl16strings_internal11BigUnsignedILi4EE8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.absl::strings_internal::BigUnsigned"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.absl::strings_internal::BigUnsigned", align 4
  %4 = bitcast %"class.absl::strings_internal::BigUnsigned"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4) #4
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %3, i64 0, i32 0
  %6 = bitcast %"class.absl::strings_internal::BigUnsigned"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 %6, i64 20, i1 false)
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #4
  %10 = load i32, i32* %5, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  br label %68

15:                                               ; preds = %2, %53
  %16 = phi i32 [ %54, %53 ], [ %10, %2 ]
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi i64 [ %17, %15 ], [ %21, %18 ]
  %20 = phi i64 [ 0, %15 ], [ %29, %18 ]
  %21 = add nsw i64 %19, -1
  %22 = shl nuw nsw i64 %20, 32
  %23 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %3, i64 0, i32 1, i64 %21
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %22, %25
  %27 = udiv i64 %26, 10
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %23, align 4
  %29 = urem i64 %26, 10
  %30 = icmp sgt i64 %21, 0
  br i1 %30, label %18, label %31

31:                                               ; preds = %18
  %32 = load i32, i32* %5, align 4
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %53

34:                                               ; preds = %31
  %35 = sext i32 %32 to i64
  %36 = add nsw i64 %35, -1
  %37 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %3, i64 0, i32 1, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %45, label %53

40:                                               ; preds = %45
  %41 = add nsw i64 %46, -1
  %42 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %3, i64 0, i32 1, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %34, %40
  %46 = phi i64 [ %41, %40 ], [ %36, %34 ]
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %5, align 4
  %48 = icmp sgt i64 %46, 0
  br i1 %48, label %40, label %49

49:                                               ; preds = %45
  %50 = trunc i64 %46 to i32
  br label %53

51:                                               ; preds = %40
  %52 = trunc i64 %46 to i32
  br label %53

53:                                               ; preds = %51, %34, %49, %31
  %54 = phi i32 [ %32, %31 ], [ %50, %49 ], [ %32, %34 ], [ %52, %51 ]
  %55 = trunc i64 %29 to i8
  %56 = or i8 %55, 48
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext %56) #4
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %15, label %58

58:                                               ; preds = %53
  %59 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = load i64, i64* %8, align 8
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %64 = icmp slt i8 %61, 0
  %65 = zext i8 %61 to i64
  %66 = select i1 %64, i64 %62, i64 %65
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %12, %58
  %69 = phi i8* [ %14, %12 ], [ %63, %58 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 48) #4
  %70 = load i64, i64* %8, align 8
  br label %71

71:                                               ; preds = %68, %58
  %72 = phi i8* [ %69, %68 ], [ %63, %58 ]
  %73 = phi i64 [ %70, %68 ], [ %62, %58 ]
  %74 = load i8, i8* %72, align 1
  %75 = icmp slt i8 %74, 0
  %76 = load i8*, i8** %7, align 8
  %77 = zext i8 %74 to i64
  %78 = select i1 %75, i8* %76, i8* %9
  %79 = select i1 %75, i64 %73, i64 %77
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %71
  %82 = getelementptr inbounds i8, i8* %78, i64 %79
  %83 = getelementptr inbounds i8, i8* %82, i64 -1
  %84 = icmp ugt i8* %83, %78
  br i1 %84, label %85, label %93

85:                                               ; preds = %81, %85
  %86 = phi i8* [ %91, %85 ], [ %83, %81 ]
  %87 = phi i8* [ %90, %85 ], [ %78, %81 ]
  %88 = load i8, i8* %87, align 1
  %89 = load i8, i8* %86, align 1
  store i8 %89, i8* %87, align 1
  store i8 %88, i8* %86, align 1
  %90 = getelementptr inbounds i8, i8* %87, i64 1
  %91 = getelementptr inbounds i8, i8* %86, i64 -1
  %92 = icmp ult i8* %90, %91
  br i1 %92, label %85, label %93

93:                                               ; preds = %85, %71, %81
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4absl16strings_internal11BigUnsignedILi4EE4sizeEv(%"class.absl::strings_internal::BigUnsigned"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4absl16strings_internal11BigUnsignedILi4EE5wordsEv(%"class.absl::strings_internal::BigUnsigned"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 0
  ret i32* %2
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEij(%"class.absl::strings_internal::BigUnsigned"*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %28, label %5

5:                                                ; preds = %3
  %6 = icmp slt i32 %1, 4
  br i1 %6, label %7, label %19

7:                                                ; preds = %5, %7
  %8 = phi i32 [ %15, %7 ], [ %2, %5 ]
  %9 = phi i32 [ %16, %7 ], [ %1, %5 ]
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %8
  store i32 %13, i32* %11, align 4
  %14 = icmp ugt i32 %8, %13
  %15 = zext i1 %14 to i32
  %16 = add nsw i32 %9, %15
  %17 = icmp slt i32 %16, 4
  %18 = and i1 %17, %14
  br i1 %18, label %7, label %19

19:                                               ; preds = %7, %5
  %20 = phi i32 [ %1, %5 ], [ %16, %7 ]
  %21 = add nsw i32 %20, 1
  %22 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %21, %23
  %25 = select i1 %24, i32 %23, i32 %21
  %26 = icmp slt i32 %25, 4
  %27 = select i1 %26, i32 %25, i32 4
  store i32 %27, i32* %22, align 4
  br label %28

28:                                               ; preds = %3, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE12MultiplyStepEiPKjii(%"class.absl::strings_internal::BigUnsigned"*, i32, i32*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = add nsw i32 %1, -1
  %7 = icmp sgt i32 %6, %4
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = sub i32 %4, %8
  %10 = icmp sgt i32 %8, -1
  %11 = icmp slt i32 %9, %3
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %38

13:                                               ; preds = %5
  %14 = sext i32 %8 to i64
  %15 = sext i32 %9 to i64
  %16 = sext i32 %3 to i64
  br label %17

17:                                               ; preds = %13, %17
  %18 = phi i64 [ %15, %13 ], [ %34, %17 ]
  %19 = phi i64 [ %14, %13 ], [ %33, %17 ]
  %20 = phi i64 [ 0, %13 ], [ %31, %17 ]
  %21 = phi i64 [ 0, %13 ], [ %32, %17 ]
  %22 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %19
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %2, i64 %18
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = mul nuw i64 %27, %24
  %29 = add i64 %28, %21
  %30 = lshr i64 %29, 32
  %31 = add i64 %30, %20
  %32 = and i64 %29, 4294967295
  %33 = add nsw i64 %19, -1
  %34 = add nsw i64 %18, 1
  %35 = icmp sgt i64 %19, 0
  %36 = icmp slt i64 %34, %16
  %37 = and i1 %36, %35
  br i1 %37, label %17, label %38

38:                                               ; preds = %17, %5
  %39 = phi i64 [ 0, %5 ], [ %32, %17 ]
  %40 = phi i64 [ 0, %5 ], [ %31, %17 ]
  %41 = add nsw i32 %4, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned"* %0, i32 %41, i64 %40)
  %42 = trunc i64 %39 to i32
  %43 = sext i32 %4 to i64
  %44 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %43
  store i32 %42, i32* %44, align 4
  %45 = icmp eq i64 %39, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, %4
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  store i32 %41, i32* %47, align 4
  br label %51

51:                                               ; preds = %46, %38, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi4EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned"*, i32, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ne i64 %2, 0
  %5 = icmp slt i32 %1, 4
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = lshr i64 %2, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %2 to i32
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %10
  store i32 %14, i32* %12, align 4
  %15 = icmp ult i32 %14, %10
  br i1 %15, label %16, label %41

16:                                               ; preds = %7
  %17 = add i32 %9, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %43

19:                                               ; preds = %16
  %20 = add nsw i32 %1, 2
  %21 = icmp slt i32 %20, 4
  br i1 %21, label %22, label %34

22:                                               ; preds = %19, %22
  %23 = phi i32 [ %30, %22 ], [ 1, %19 ]
  %24 = phi i32 [ %31, %22 ], [ %20, %19 ]
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %23
  store i32 %28, i32* %26, align 4
  %29 = icmp ugt i32 %23, %28
  %30 = zext i1 %29 to i32
  %31 = add nsw i32 %24, %30
  %32 = icmp slt i32 %31, 4
  %33 = and i1 %29, %32
  br i1 %33, label %22, label %34

34:                                               ; preds = %22, %19
  %35 = phi i32 [ %20, %19 ], [ %31, %22 ]
  %36 = add nsw i32 %35, 1
  %37 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %36, %38
  %40 = select i1 %39, i32 %38, i32 %36
  br label %73

41:                                               ; preds = %7
  %42 = icmp eq i32 %9, 0
  br i1 %42, label %67, label %43

43:                                               ; preds = %16, %41
  %44 = phi i32 [ %9, %41 ], [ %17, %16 ]
  %45 = add nsw i32 %1, 1
  %46 = icmp slt i32 %45, 4
  br i1 %46, label %47, label %61

47:                                               ; preds = %43, %47
  %48 = phi i32 [ %55, %47 ], [ %44, %43 ]
  %49 = phi i32 [ %56, %47 ], [ %45, %43 ]
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 1, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, %48
  store i32 %53, i32* %51, align 4
  %54 = icmp ugt i32 %48, %53
  %55 = zext i1 %54 to i32
  %56 = add nsw i32 %49, %55
  %57 = icmp slt i32 %56, 4
  %58 = and i1 %54, %57
  br i1 %58, label %47, label %59

59:                                               ; preds = %47
  %60 = add nsw i32 %56, 1
  br label %61

61:                                               ; preds = %59, %43
  %62 = phi i32 [ 5, %43 ], [ %60, %59 ]
  %63 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %62, %64
  %66 = select i1 %65, i32 %64, i32 %62
  br label %73

67:                                               ; preds = %41
  %68 = add nsw i32 %1, 1
  %69 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned", %"class.absl::strings_internal::BigUnsigned"* %0, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %68, %70
  %72 = select i1 %71, i32 %70, i32 %68
  br label %73

73:                                               ; preds = %34, %67, %61
  %74 = phi i32 [ %66, %61 ], [ %72, %67 ], [ %40, %34 ]
  %75 = phi i32* [ %63, %61 ], [ %69, %67 ], [ %37, %34 ]
  %76 = icmp slt i32 %74, 4
  %77 = select i1 %76, i32 %74, i32 4
  store i32 %77, i32* %75, align 4
  br label %78

78:                                               ; preds = %73, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EEC2Ev(%"class.absl::strings_internal::BigUnsigned.1"*) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi84EEC5Ev) align 2 {
  %2 = bitcast %"class.absl::strings_internal::BigUnsigned.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 340, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EEC2Em(%"class.absl::strings_internal::BigUnsigned.1"*, i64) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi84EEC5Em) align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %4 = lshr i64 %1, 32
  %5 = icmp eq i64 %4, 0
  %6 = icmp ne i64 %1, 0
  %7 = zext i1 %6 to i32
  %8 = select i1 %5, i32 %7, i32 2
  store i32 %8, i32* %3, align 4
  %9 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 2
  %10 = bitcast i32* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 328, i1 false)
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %12 = trunc i64 %1 to i32
  store i32 %12, i32* %11, align 4
  %13 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 1
  %14 = trunc i64 %4 to i32
  store i32 %14, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EEC2ENS_11string_viewE(%"class.absl::strings_internal::BigUnsigned.1"*, i8*, i64) unnamed_addr #0 comdat($_ZN4absl16strings_internal11BigUnsignedILi84EEC5ENS_11string_viewE) align 2 {
  %4 = getelementptr inbounds i8, i8* %1, i64 %2
  %5 = icmp eq i64 %2, 0
  %6 = bitcast %"class.absl::strings_internal::BigUnsigned.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 340, i1 false)
  br i1 %5, label %22, label %7

7:                                                ; preds = %3, %12
  %8 = phi i8* [ %13, %12 ], [ %1, %3 ]
  %9 = load i8, i8* %8, align 1
  %10 = add i8 %9, -48
  %11 = icmp ult i8 %10, 10
  br i1 %11, label %12, label %15

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, i8* %8, i64 1
  %14 = icmp eq i8* %13, %4
  br i1 %14, label %18, label %7

15:                                               ; preds = %7
  %16 = icmp ne i8* %8, %4
  %17 = or i1 %5, %16
  br i1 %17, label %22, label %18

18:                                               ; preds = %12, %15
  %19 = tail call i32 @_ZN4absl16strings_internal11BigUnsignedILi84EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned.1"* %0, i8* %1, i8* %4, i32 810)
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE21MultiplyByTenToTheNthEi(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %19)
  br label %22

22:                                               ; preds = %3, %15, %18, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi84EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned.1"*, i8*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = sext i32 %6 to i64
  %10 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %11 = bitcast i32* %10 to i8*
  %12 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %12, i1 false) #4
  br label %13

13:                                               ; preds = %4, %8
  store i32 0, i32* %5, align 4
  %14 = icmp ult i8* %1, %2
  br i1 %14, label %15, label %22

15:                                               ; preds = %13, %19
  %16 = phi i8* [ %20, %19 ], [ %1, %13 ]
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 48
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  %21 = icmp eq i8* %20, %2
  br i1 %21, label %290, label %15

22:                                               ; preds = %15, %13
  %23 = phi i8* [ %1, %13 ], [ %16, %15 ]
  %24 = icmp ult i8* %23, %2
  br i1 %24, label %25, label %63

25:                                               ; preds = %22, %32
  %26 = phi i8* [ %28, %32 ], [ %2, %22 ]
  %27 = phi i32 [ %33, %32 ], [ 0, %22 ]
  %28 = getelementptr inbounds i8, i8* %26, i64 -1
  %29 = load i8, i8* %28, align 1
  switch i8 %29, label %46 [
    i8 48, label %32
    i8 46, label %30
  ]

30:                                               ; preds = %25
  %31 = icmp ult i8* %23, %28
  br i1 %31, label %35, label %63

32:                                               ; preds = %25
  %33 = add nuw nsw i32 %27, 1
  %34 = icmp ult i8* %23, %28
  br i1 %34, label %25, label %48

35:                                               ; preds = %30, %42
  %36 = phi i8* [ %44, %42 ], [ %28, %30 ]
  %37 = phi i8* [ %36, %42 ], [ %26, %30 ]
  %38 = phi i32 [ %43, %42 ], [ 0, %30 ]
  %39 = getelementptr inbounds i8, i8* %37, i64 -2
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 48
  br i1 %41, label %42, label %63

42:                                               ; preds = %35
  %43 = add nuw nsw i32 %38, 1
  %44 = getelementptr inbounds i8, i8* %36, i64 -1
  %45 = icmp ult i8* %23, %44
  br i1 %45, label %35, label %63

46:                                               ; preds = %25
  %47 = icmp eq i32 %27, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %32, %46
  %49 = phi i8* [ %26, %46 ], [ %28, %32 ]
  %50 = phi i32 [ %27, %46 ], [ %33, %32 ]
  %51 = icmp eq i8* %23, %49
  br i1 %51, label %59, label %52

52:                                               ; preds = %48, %56
  %53 = phi i8* [ %57, %56 ], [ %23, %48 ]
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 46
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 1
  %58 = icmp eq i8* %57, %49
  br i1 %58, label %59, label %52

59:                                               ; preds = %52, %56, %48
  %60 = phi i8* [ %23, %48 ], [ %53, %52 ], [ %49, %56 ]
  %61 = icmp eq i8* %60, %49
  %62 = select i1 %61, i32 %50, i32 0
  br label %63

63:                                               ; preds = %42, %35, %22, %30, %46, %59
  %64 = phi i32 [ %62, %59 ], [ 0, %46 ], [ 0, %30 ], [ 0, %22 ], [ %43, %42 ], [ %38, %35 ]
  %65 = phi i8* [ %49, %59 ], [ %26, %46 ], [ %28, %30 ], [ %2, %22 ], [ %44, %42 ], [ %36, %35 ]
  %66 = icmp ne i8* %23, %65
  %67 = icmp sgt i32 %3, 0
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %268

69:                                               ; preds = %63, %174
  %70 = phi i32 [ %175, %174 ], [ 0, %63 ]
  %71 = phi i8* [ %181, %174 ], [ %23, %63 ]
  %72 = phi i32 [ %180, %174 ], [ 0, %63 ]
  %73 = phi i32 [ %179, %174 ], [ 0, %63 ]
  %74 = phi i32 [ %178, %174 ], [ %64, %63 ]
  %75 = phi i8 [ %177, %174 ], [ 0, %63 ]
  %76 = phi i32 [ %176, %174 ], [ %3, %63 ]
  %77 = load i8, i8* %71, align 1
  %78 = icmp eq i8 %77, 46
  br i1 %78, label %174, label %79

79:                                               ; preds = %69
  %80 = and i8 %75, 1
  %81 = zext i8 %80 to i32
  %82 = sub i32 %74, %81
  %83 = sext i8 %77 to i32
  %84 = add nsw i32 %83, -48
  %85 = add nsw i32 %76, -1
  %86 = icmp ne i32 %85, 0
  %87 = getelementptr inbounds i8, i8* %71, i64 1
  %88 = icmp eq i8* %87, %65
  %89 = or i1 %86, %88
  br i1 %89, label %93, label %90

90:                                               ; preds = %79
  switch i32 %83, label %93 [
    i32 53, label %91
    i32 48, label %91
  ]

91:                                               ; preds = %90, %90
  %92 = add nsw i32 %83, -47
  br label %93

93:                                               ; preds = %79, %90, %91
  %94 = phi i32 [ %92, %91 ], [ %84, %90 ], [ %84, %79 ]
  %95 = mul i32 %73, 10
  %96 = add i32 %94, %95
  %97 = add nsw i32 %72, 1
  %98 = icmp eq i32 %97, 9
  br i1 %98, label %99, label %174

99:                                               ; preds = %93
  %100 = icmp sgt i32 %70, 0
  br i1 %100, label %101, label %153

101:                                              ; preds = %99
  %102 = zext i32 %70 to i64
  %103 = and i64 %102, 1
  %104 = icmp eq i32 %70, 1
  br i1 %104, label %107, label %105

105:                                              ; preds = %101
  %106 = sub nsw i64 %102, %103
  br label %125

107:                                              ; preds = %125, %101
  %108 = phi i64 [ undef, %101 ], [ %143, %125 ]
  %109 = phi i64 [ 0, %101 ], [ %144, %125 ]
  %110 = phi i64 [ 0, %101 ], [ %143, %125 ]
  %111 = icmp eq i64 %103, 0
  br i1 %111, label %120, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %109
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i64
  %116 = mul nuw nsw i64 %115, 1000000000
  %117 = add nuw nsw i64 %116, %110
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %113, align 4
  %119 = lshr i64 %117, 32
  br label %120

120:                                              ; preds = %107, %112
  %121 = phi i64 [ %108, %107 ], [ %119, %112 ]
  %122 = icmp ne i64 %121, 0
  %123 = icmp slt i32 %70, 84
  %124 = and i1 %123, %122
  br i1 %124, label %147, label %153

125:                                              ; preds = %125, %105
  %126 = phi i64 [ 0, %105 ], [ %144, %125 ]
  %127 = phi i64 [ 0, %105 ], [ %143, %125 ]
  %128 = phi i64 [ %106, %105 ], [ %145, %125 ]
  %129 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %126
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = mul nuw nsw i64 %131, 1000000000
  %133 = add nuw nsw i64 %132, %127
  %134 = trunc i64 %133 to i32
  store i32 %134, i32* %129, align 4
  %135 = lshr i64 %133, 32
  %136 = or i64 %126, 1
  %137 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  %140 = mul nuw nsw i64 %139, 1000000000
  %141 = add nuw nsw i64 %140, %135
  %142 = trunc i64 %141 to i32
  store i32 %142, i32* %137, align 4
  %143 = lshr i64 %141, 32
  %144 = add nuw nsw i64 %126, 2
  %145 = add i64 %128, -2
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %107, label %125

147:                                              ; preds = %120
  %148 = trunc i64 %121 to i32
  %149 = sext i32 %70 to i64
  %150 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %149
  store i32 %148, i32* %150, align 4
  %151 = load i32, i32* %5, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %5, align 4
  br label %153

153:                                              ; preds = %99, %120, %147
  %154 = phi i32 [ %70, %99 ], [ %70, %120 ], [ %152, %147 ]
  %155 = icmp eq i32 %96, 0
  br i1 %155, label %174, label %156

156:                                              ; preds = %153, %156
  %157 = phi i32 [ %164, %156 ], [ %96, %153 ]
  %158 = phi i32 [ %165, %156 ], [ 0, %153 ]
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %161, %157
  store i32 %162, i32* %160, align 4
  %163 = icmp ugt i32 %157, %162
  %164 = zext i1 %163 to i32
  %165 = add nuw nsw i32 %158, %164
  %166 = icmp ult i32 %165, 84
  %167 = and i1 %163, %166
  br i1 %167, label %156, label %168

168:                                              ; preds = %156
  %169 = add nuw nsw i32 %165, 1
  %170 = icmp slt i32 %169, %154
  %171 = select i1 %170, i32 %154, i32 %169
  %172 = icmp slt i32 %171, 84
  %173 = select i1 %172, i32 %171, i32 84
  store i32 %173, i32* %5, align 4
  br label %174

174:                                              ; preds = %168, %153, %93, %69
  %175 = phi i32 [ %70, %69 ], [ %70, %93 ], [ %154, %153 ], [ %173, %168 ]
  %176 = phi i32 [ %76, %69 ], [ %85, %93 ], [ %85, %153 ], [ %85, %168 ]
  %177 = phi i8 [ 1, %69 ], [ %75, %93 ], [ %75, %153 ], [ %75, %168 ]
  %178 = phi i32 [ %74, %69 ], [ %82, %93 ], [ %82, %153 ], [ %82, %168 ]
  %179 = phi i32 [ %73, %69 ], [ %96, %93 ], [ 0, %153 ], [ 0, %168 ]
  %180 = phi i32 [ %72, %69 ], [ %97, %93 ], [ 0, %153 ], [ 0, %168 ]
  %181 = getelementptr inbounds i8, i8* %71, i64 1
  %182 = icmp ne i8* %181, %65
  %183 = icmp sgt i32 %176, 0
  %184 = and i1 %183, %182
  br i1 %184, label %69, label %185

185:                                              ; preds = %174
  %186 = icmp eq i32 %180, 0
  br i1 %186, label %268, label %187

187:                                              ; preds = %185
  %188 = icmp eq i32 %175, 0
  br i1 %188, label %247, label %189

189:                                              ; preds = %187
  %190 = sext i32 %180 to i64
  %191 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN4absl16strings_internal9kTenToNthE, i64 0, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = zext i32 %192 to i64
  %194 = icmp sgt i32 %175, 0
  br i1 %194, label %195, label %247

195:                                              ; preds = %189
  %196 = zext i32 %175 to i64
  %197 = and i64 %196, 1
  %198 = icmp eq i32 %175, 1
  br i1 %198, label %201, label %199

199:                                              ; preds = %195
  %200 = sub nsw i64 %196, %197
  br label %219

201:                                              ; preds = %219, %195
  %202 = phi i64 [ undef, %195 ], [ %237, %219 ]
  %203 = phi i64 [ 0, %195 ], [ %238, %219 ]
  %204 = phi i64 [ 0, %195 ], [ %237, %219 ]
  %205 = icmp eq i64 %197, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %203
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  %210 = mul nuw i64 %209, %193
  %211 = add i64 %210, %204
  %212 = trunc i64 %211 to i32
  store i32 %212, i32* %207, align 4
  %213 = lshr i64 %211, 32
  br label %214

214:                                              ; preds = %201, %206
  %215 = phi i64 [ %202, %201 ], [ %213, %206 ]
  %216 = icmp ne i64 %215, 0
  %217 = icmp slt i32 %175, 84
  %218 = and i1 %217, %216
  br i1 %218, label %241, label %247

219:                                              ; preds = %219, %199
  %220 = phi i64 [ 0, %199 ], [ %238, %219 ]
  %221 = phi i64 [ 0, %199 ], [ %237, %219 ]
  %222 = phi i64 [ %200, %199 ], [ %239, %219 ]
  %223 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %220
  %224 = load i32, i32* %223, align 4
  %225 = zext i32 %224 to i64
  %226 = mul nuw i64 %225, %193
  %227 = add i64 %226, %221
  %228 = trunc i64 %227 to i32
  store i32 %228, i32* %223, align 4
  %229 = lshr i64 %227, 32
  %230 = or i64 %220, 1
  %231 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  %234 = mul nuw i64 %233, %193
  %235 = add i64 %234, %229
  %236 = trunc i64 %235 to i32
  store i32 %236, i32* %231, align 4
  %237 = lshr i64 %235, 32
  %238 = add nuw nsw i64 %220, 2
  %239 = add i64 %222, -2
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %201, label %219

241:                                              ; preds = %214
  %242 = trunc i64 %215 to i32
  %243 = sext i32 %175 to i64
  %244 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %243
  store i32 %242, i32* %244, align 4
  %245 = load i32, i32* %5, align 4
  %246 = add nsw i32 %245, 1
  store i32 %246, i32* %5, align 4
  br label %247

247:                                              ; preds = %187, %189, %214, %241
  %248 = phi i32 [ 0, %187 ], [ %175, %189 ], [ %175, %214 ], [ %246, %241 ]
  %249 = icmp eq i32 %179, 0
  br i1 %249, label %268, label %250

250:                                              ; preds = %247, %250
  %251 = phi i32 [ %258, %250 ], [ %179, %247 ]
  %252 = phi i32 [ %259, %250 ], [ 0, %247 ]
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = add i32 %255, %251
  store i32 %256, i32* %254, align 4
  %257 = icmp ugt i32 %251, %256
  %258 = zext i1 %257 to i32
  %259 = add nuw nsw i32 %252, %258
  %260 = icmp ult i32 %259, 84
  %261 = and i1 %257, %260
  br i1 %261, label %250, label %262

262:                                              ; preds = %250
  %263 = add nuw nsw i32 %259, 1
  %264 = icmp slt i32 %263, %248
  %265 = select i1 %264, i32 %248, i32 %263
  %266 = icmp slt i32 %265, 84
  %267 = select i1 %266, i32 %265, i32 84
  store i32 %267, i32* %5, align 4
  br label %268

268:                                              ; preds = %63, %262, %247, %185
  %269 = phi i8* [ %181, %262 ], [ %181, %247 ], [ %181, %185 ], [ %23, %63 ]
  %270 = phi i32 [ %178, %262 ], [ %178, %247 ], [ %178, %185 ], [ %64, %63 ]
  %271 = phi i8 [ %177, %262 ], [ %177, %247 ], [ %177, %185 ], [ 0, %63 ]
  %272 = icmp ult i8* %269, %65
  %273 = and i8 %271, 1
  %274 = icmp eq i8 %273, 0
  %275 = and i1 %274, %272
  br i1 %275, label %276, label %290

276:                                              ; preds = %268, %280
  %277 = phi i8* [ %281, %280 ], [ %269, %268 ]
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 46
  br i1 %279, label %283, label %280

280:                                              ; preds = %276
  %281 = getelementptr inbounds i8, i8* %277, i64 1
  %282 = icmp eq i8* %281, %65
  br i1 %282, label %283, label %276

283:                                              ; preds = %276, %280
  %284 = phi i8* [ %65, %280 ], [ %277, %276 ]
  %285 = ptrtoint i8* %284 to i64
  %286 = ptrtoint i8* %269 to i64
  %287 = sub i64 %285, %286
  %288 = trunc i64 %287 to i32
  %289 = add i32 %270, %288
  br label %290

290:                                              ; preds = %19, %283, %268
  %291 = phi i32 [ %289, %283 ], [ %270, %268 ], [ 0, %19 ]
  ret i32 %291
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi84EE8Digits10Ev() local_unnamed_addr #0 comdat align 2 {
  ret i32 809
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE21MultiplyByTenToTheNthEi(%"class.absl::strings_internal::BigUnsigned.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp sgt i32 %1, 9
  br i1 %3, label %4, label %134

4:                                                ; preds = %2
  %5 = icmp sgt i32 %1, 12
  %6 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  br i1 %5, label %8, label %70

8:                                                ; preds = %4, %64
  %9 = phi i32 [ %65, %64 ], [ %7, %4 ]
  %10 = phi i32 [ %66, %64 ], [ %1, %4 ]
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %64

12:                                               ; preds = %8
  %13 = zext i32 %9 to i64
  %14 = and i64 %13, 1
  %15 = icmp eq i32 %9, 1
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = sub nsw i64 %13, %14
  br label %36

18:                                               ; preds = %36, %12
  %19 = phi i64 [ undef, %12 ], [ %54, %36 ]
  %20 = phi i64 [ 0, %12 ], [ %55, %36 ]
  %21 = phi i64 [ 0, %12 ], [ %54, %36 ]
  %22 = icmp eq i64 %14, 0
  br i1 %22, label %31, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %20
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = mul nuw nsw i64 %26, 1220703125
  %28 = add nuw i64 %27, %21
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %24, align 4
  %30 = lshr i64 %28, 32
  br label %31

31:                                               ; preds = %18, %23
  %32 = phi i64 [ %19, %18 ], [ %30, %23 ]
  %33 = icmp ne i64 %32, 0
  %34 = icmp slt i32 %9, 84
  %35 = and i1 %34, %33
  br i1 %35, label %58, label %64

36:                                               ; preds = %36, %16
  %37 = phi i64 [ 0, %16 ], [ %55, %36 ]
  %38 = phi i64 [ 0, %16 ], [ %54, %36 ]
  %39 = phi i64 [ %17, %16 ], [ %56, %36 ]
  %40 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = mul nuw nsw i64 %42, 1220703125
  %44 = add nuw i64 %43, %38
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %40, align 4
  %46 = lshr i64 %44, 32
  %47 = or i64 %37, 1
  %48 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = mul nuw nsw i64 %50, 1220703125
  %52 = add nuw i64 %51, %46
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %48, align 4
  %54 = lshr i64 %52, 32
  %55 = add nuw nsw i64 %37, 2
  %56 = add i64 %39, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %18, label %36

58:                                               ; preds = %31
  %59 = trunc i64 %32 to i32
  %60 = sext i32 %9 to i64
  %61 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %60
  store i32 %59, i32* %61, align 4
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %6, align 4
  br label %64

64:                                               ; preds = %58, %31, %8
  %65 = phi i32 [ %9, %8 ], [ %9, %31 ], [ %63, %58 ]
  %66 = add nsw i32 %10, -13
  %67 = icmp sgt i32 %66, 12
  br i1 %67, label %8, label %68

68:                                               ; preds = %64
  %69 = icmp sgt i32 %66, 0
  br i1 %69, label %70, label %133

70:                                               ; preds = %4, %68
  %71 = phi i32 [ %65, %68 ], [ %7, %4 ]
  %72 = phi i32 [ %66, %68 ], [ %1, %4 ]
  %73 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %74 = icmp eq i32 %71, 0
  br i1 %74, label %133, label %75

75:                                               ; preds = %70
  %76 = sext i32 %72 to i64
  %77 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = icmp sgt i32 %71, 0
  br i1 %80, label %81, label %133

81:                                               ; preds = %75
  %82 = zext i32 %71 to i64
  %83 = and i64 %82, 1
  %84 = icmp eq i32 %71, 1
  br i1 %84, label %87, label %85

85:                                               ; preds = %81
  %86 = sub nsw i64 %82, %83
  br label %105

87:                                               ; preds = %105, %81
  %88 = phi i64 [ undef, %81 ], [ %123, %105 ]
  %89 = phi i64 [ 0, %81 ], [ %124, %105 ]
  %90 = phi i64 [ 0, %81 ], [ %123, %105 ]
  %91 = icmp eq i64 %83, 0
  br i1 %91, label %100, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %89
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = mul nuw i64 %95, %79
  %97 = add i64 %96, %90
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %93, align 4
  %99 = lshr i64 %97, 32
  br label %100

100:                                              ; preds = %87, %92
  %101 = phi i64 [ %88, %87 ], [ %99, %92 ]
  %102 = icmp ne i64 %101, 0
  %103 = icmp slt i32 %71, 84
  %104 = and i1 %103, %102
  br i1 %104, label %127, label %133

105:                                              ; preds = %105, %85
  %106 = phi i64 [ 0, %85 ], [ %124, %105 ]
  %107 = phi i64 [ 0, %85 ], [ %123, %105 ]
  %108 = phi i64 [ %86, %85 ], [ %125, %105 ]
  %109 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %106
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = mul nuw i64 %111, %79
  %113 = add i64 %112, %107
  %114 = trunc i64 %113 to i32
  store i32 %114, i32* %109, align 4
  %115 = lshr i64 %113, 32
  %116 = or i64 %106, 1
  %117 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i64
  %120 = mul nuw i64 %119, %79
  %121 = add i64 %120, %115
  %122 = trunc i64 %121 to i32
  store i32 %122, i32* %117, align 4
  %123 = lshr i64 %121, 32
  %124 = add nuw nsw i64 %106, 2
  %125 = add i64 %108, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %87, label %105

127:                                              ; preds = %100
  %128 = trunc i64 %101 to i32
  %129 = sext i32 %71 to i64
  %130 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %129
  store i32 %128, i32* %130, align 4
  %131 = load i32, i32* %73, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %73, align 4
  br label %133

133:                                              ; preds = %68, %70, %75, %100, %127
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE9ShiftLeftEi(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %1)
  br label %198

134:                                              ; preds = %2
  %135 = icmp sgt i32 %1, 0
  br i1 %135, label %136, label %198

136:                                              ; preds = %134
  %137 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %198, label %140

140:                                              ; preds = %136
  %141 = sext i32 %1 to i64
  %142 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN4absl16strings_internal9kTenToNthE, i64 0, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = icmp sgt i32 %138, 0
  br i1 %145, label %146, label %198

146:                                              ; preds = %140
  %147 = zext i32 %138 to i64
  %148 = and i64 %147, 1
  %149 = icmp eq i32 %138, 1
  br i1 %149, label %152, label %150

150:                                              ; preds = %146
  %151 = sub nsw i64 %147, %148
  br label %170

152:                                              ; preds = %170, %146
  %153 = phi i64 [ undef, %146 ], [ %188, %170 ]
  %154 = phi i64 [ 0, %146 ], [ %189, %170 ]
  %155 = phi i64 [ 0, %146 ], [ %188, %170 ]
  %156 = icmp eq i64 %148, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %154
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = mul nuw i64 %160, %144
  %162 = add i64 %161, %155
  %163 = trunc i64 %162 to i32
  store i32 %163, i32* %158, align 4
  %164 = lshr i64 %162, 32
  br label %165

165:                                              ; preds = %152, %157
  %166 = phi i64 [ %153, %152 ], [ %164, %157 ]
  %167 = icmp ne i64 %166, 0
  %168 = icmp slt i32 %138, 84
  %169 = and i1 %168, %167
  br i1 %169, label %192, label %198

170:                                              ; preds = %170, %150
  %171 = phi i64 [ 0, %150 ], [ %189, %170 ]
  %172 = phi i64 [ 0, %150 ], [ %188, %170 ]
  %173 = phi i64 [ %151, %150 ], [ %190, %170 ]
  %174 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %171
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = mul nuw i64 %176, %144
  %178 = add i64 %177, %172
  %179 = trunc i64 %178 to i32
  store i32 %179, i32* %174, align 4
  %180 = lshr i64 %178, 32
  %181 = or i64 %171, 1
  %182 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  %185 = mul nuw i64 %184, %144
  %186 = add i64 %185, %180
  %187 = trunc i64 %186 to i32
  store i32 %187, i32* %182, align 4
  %188 = lshr i64 %186, 32
  %189 = add nuw nsw i64 %171, 2
  %190 = add i64 %173, -2
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %152, label %170

192:                                              ; preds = %165
  %193 = trunc i64 %166 to i32
  %194 = sext i32 %138 to i64
  %195 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %194
  store i32 %193, i32* %195, align 4
  %196 = load i32, i32* %137, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %137, align 4
  br label %198

198:                                              ; preds = %192, %165, %140, %136, %134, %133
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZN4absl16strings_internal11BigUnsignedILi84EE17ReadFloatMantissaERKNS0_11ParsedFloatEi(%"class.absl::strings_internal::BigUnsigned.1"*, %"struct.absl::strings_internal::ParsedFloat"* dereferenceable(48), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  %8 = sext i32 %5 to i64
  %9 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %10 = bitcast i32* %9 to i8*
  %11 = shl nuw nsw i64 %8, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 %11, i1 false) #4
  br label %12

12:                                               ; preds = %3, %7
  store i32 0, i32* %4, align 4
  %13 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %33

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  store i32 %19, i32* %20, align 4
  %21 = load i64, i64* %17, align 8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 1
  store i32 %23, i32* %24, align 4
  %25 = icmp eq i32 %23, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %16
  %27 = icmp eq i32 %19, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %26, %16
  %29 = phi i32 [ 2, %16 ], [ 1, %26 ]
  store i32 %29, i32* %4, align 4
  br label %30

30:                                               ; preds = %28, %26
  %31 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  br label %40

33:                                               ; preds = %12
  %34 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 5
  %35 = load i8*, i8** %34, align 8
  %36 = tail call i32 @_ZN4absl16strings_internal11BigUnsignedILi84EE10ReadDigitsEPKcS4_i(%"class.absl::strings_internal::BigUnsigned.1"* %0, i8* nonnull %14, i8* %35, i32 %2)
  %37 = getelementptr inbounds %"struct.absl::strings_internal::ParsedFloat", %"struct.absl::strings_internal::ParsedFloat"* %1, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, %36
  br label %40

40:                                               ; preds = %33, %30
  %41 = phi i32 [ %32, %30 ], [ %39, %33 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE9SetToZeroEv(%"class.absl::strings_internal::BigUnsigned.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = sext i32 %3 to i64
  %7 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %8 = bitcast i32* %7 to i8*
  %9 = shl nuw nsw i64 %6, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 %9, i1 false)
  br label %10

10:                                               ; preds = %5, %1
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE9ShiftLeftEi(%"class.absl::strings_internal::BigUnsigned.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.absl::strings_internal::BigUnsigned.1"* %0 to i8*
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %200

5:                                                ; preds = %2
  %6 = lshr i32 %1, 5
  %7 = icmp sgt i32 %1, 2687
  %8 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  br i1 %7, label %10, label %18

10:                                               ; preds = %5
  %11 = icmp sgt i32 %9, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = sext i32 %9 to i64
  %14 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %15 = bitcast i32* %14 to i8*
  %16 = shl nuw nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false) #4
  br label %17

17:                                               ; preds = %10, %12
  store i32 0, i32* %8, align 4
  br label %200

18:                                               ; preds = %5
  %19 = add nsw i32 %9, %6
  %20 = icmp slt i32 %19, 84
  %21 = select i1 %20, i32 %19, i32 84
  store i32 %21, i32* %8, align 4
  %22 = and i32 %1, 31
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %41

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %26 = sext i32 %21 to i64
  %27 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %26
  %28 = sub nsw i32 0, %6
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %27, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = ptrtoint i32* %25 to i64
  %33 = sub i64 %31, %32
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %193, label %35

35:                                               ; preds = %24
  %36 = ashr exact i64 %33, 2
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds i32, i32* %27, i64 %37
  %39 = bitcast i32* %38 to i8*
  %40 = bitcast i32* %25 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %33, i1 false) #4
  br label %193

41:                                               ; preds = %18
  %42 = icmp slt i32 %21, 83
  %43 = select i1 %42, i32 %19, i32 83
  %44 = icmp sgt i32 %43, %6
  br i1 %44, label %45, label %164

45:                                               ; preds = %41
  %46 = sub nuw nsw i32 32, %22
  %47 = sext i32 %43 to i64
  %48 = zext i32 %6 to i64
  %49 = sub nsw i64 %47, %48
  %50 = icmp ult i64 %49, 8
  br i1 %50, label %51, label %53

51:                                               ; preds = %160, %86, %53, %45
  %52 = phi i64 [ %47, %86 ], [ %47, %53 ], [ %47, %45 ], [ %113, %160 ]
  br label %172

53:                                               ; preds = %45
  %54 = xor i64 %48, -1
  %55 = add nsw i64 %54, %47
  %56 = shl nsw i64 %47, 2
  %57 = add nsw i64 %56, 4
  %58 = getelementptr i8, i8* %3, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %61 = extractvalue { i64, i1 } %60, 0
  %62 = extractvalue { i64, i1 } %60, 1
  %63 = icmp ugt i64 %61, %59
  %64 = or i1 %63, %62
  %65 = add nsw i64 %56, 4
  %66 = shl nuw nsw i32 %6, 2
  %67 = zext i32 %66 to i64
  %68 = sub nsw i64 %65, %67
  %69 = getelementptr i8, i8* %3, i64 %68
  %70 = ptrtoint i8* %69 to i64
  %71 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %72 = extractvalue { i64, i1 } %71, 0
  %73 = extractvalue { i64, i1 } %71, 1
  %74 = icmp ugt i64 %72, %70
  %75 = or i1 %74, %73
  %76 = or i1 %64, %75
  %77 = sub nsw i64 %56, %67
  %78 = getelementptr i8, i8* %3, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %55, i64 4)
  %81 = extractvalue { i64, i1 } %80, 0
  %82 = extractvalue { i64, i1 } %80, 1
  %83 = icmp ugt i64 %81, %79
  %84 = or i1 %83, %82
  %85 = or i1 %76, %84
  br i1 %85, label %51, label %86

86:                                               ; preds = %53
  %87 = shl nuw nsw i32 %6, 2
  %88 = zext i32 %87 to i64
  %89 = add nuw nsw i64 %88, 8
  %90 = getelementptr i8, i8* %3, i64 %89
  %91 = shl nsw i64 %47, 2
  %92 = add nsw i64 %91, 8
  %93 = getelementptr i8, i8* %3, i64 %92
  %94 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 1
  %95 = bitcast i32* %94 to i8*
  %96 = add nsw i64 %91, 8
  %97 = sub nsw i64 %96, %88
  %98 = getelementptr i8, i8* %3, i64 %97
  %99 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %100 = bitcast i32* %99 to i8*
  %101 = add nsw i64 %91, 4
  %102 = sub nsw i64 %101, %88
  %103 = getelementptr i8, i8* %3, i64 %102
  %104 = icmp ult i8* %90, %98
  %105 = icmp ugt i8* %93, %95
  %106 = and i1 %104, %105
  %107 = icmp ult i8* %90, %103
  %108 = icmp ugt i8* %93, %100
  %109 = and i1 %107, %108
  %110 = or i1 %106, %109
  br i1 %110, label %51, label %111

111:                                              ; preds = %86
  %112 = and i64 %49, -8
  %113 = sub nsw i64 %47, %112
  %114 = insertelement <4 x i32> undef, i32 %22, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x i32> undef, i32 %22, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = insertelement <4 x i32> undef, i32 %46, i32 0
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> zeroinitializer
  %120 = insertelement <4 x i32> undef, i32 %46, i32 0
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %122

122:                                              ; preds = %122, %111
  %123 = phi i64 [ 0, %111 ], [ %158, %122 ]
  %124 = sub i64 %47, %123
  %125 = sub nsw i64 %124, %48
  %126 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %125
  %127 = getelementptr inbounds i32, i32* %126, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4, !alias.scope !13
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %131 = getelementptr inbounds i32, i32* %126, i64 -7
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !13
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %135 = shl <4 x i32> %130, %115
  %136 = shl <4 x i32> %134, %117
  %137 = add nsw i64 %125, -1
  %138 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %137
  %139 = getelementptr inbounds i32, i32* %138, i64 -3
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !16
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %143 = getelementptr inbounds i32, i32* %138, i64 -7
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 4, !alias.scope !16
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %147 = lshr <4 x i32> %142, %119
  %148 = lshr <4 x i32> %146, %121
  %149 = or <4 x i32> %147, %135
  %150 = or <4 x i32> %148, %136
  %151 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %124
  %152 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %153 = getelementptr inbounds i32, i32* %151, i64 -3
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %154, align 4, !alias.scope !18, !noalias !20
  %155 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %156 = getelementptr inbounds i32, i32* %151, i64 -7
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4, !alias.scope !18, !noalias !20
  %158 = add i64 %123, 8
  %159 = icmp eq i64 %158, %112
  br i1 %159, label %160, label %122, !llvm.loop !21

160:                                              ; preds = %122
  %161 = icmp eq i64 %49, %112
  br i1 %161, label %162, label %51

162:                                              ; preds = %172, %160
  %163 = load i32, i32* %8, align 4
  br label %164

164:                                              ; preds = %162, %41
  %165 = phi i32 [ %163, %162 ], [ %21, %41 ]
  %166 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %167 = load i32, i32* %166, align 4
  %168 = shl i32 %167, %22
  %169 = zext i32 %6 to i64
  %170 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %169
  store i32 %168, i32* %170, align 4
  %171 = icmp slt i32 %165, 84
  br i1 %171, label %186, label %193

172:                                              ; preds = %51, %172
  %173 = phi i64 [ %184, %172 ], [ %52, %51 ]
  %174 = sub nsw i64 %173, %48
  %175 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = shl i32 %176, %22
  %178 = add nsw i64 %174, -1
  %179 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = lshr i32 %180, %46
  %182 = or i32 %181, %177
  %183 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %173
  store i32 %182, i32* %183, align 4
  %184 = add nsw i64 %173, -1
  %185 = icmp sgt i64 %184, %48
  br i1 %185, label %172, label %162, !llvm.loop !22

186:                                              ; preds = %164
  %187 = sext i32 %165 to i64
  %188 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %186
  %192 = add nsw i32 %165, 1
  store i32 %192, i32* %8, align 4
  br label %193

193:                                              ; preds = %35, %24, %186, %164, %191
  %194 = icmp eq i32 %6, 0
  br i1 %194, label %200, label %195

195:                                              ; preds = %193
  %196 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %197 = bitcast i32* %196 to i8*
  %198 = shl nuw nsw i32 %6, 2
  %199 = zext i32 %198 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %197, i8 0, i64 %199, i1 false)
  br label %200

200:                                              ; preds = %195, %193, %2, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEj(%"class.absl::strings_internal::BigUnsigned.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = icmp eq i32 %1, 1
  %7 = or i1 %6, %5
  br i1 %7, label %73, label %8

8:                                                ; preds = %2
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %8
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %10
  %13 = sext i32 %4 to i64
  %14 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %15 = bitcast i32* %14 to i8*
  %16 = shl nuw nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false) #4
  br label %17

17:                                               ; preds = %10, %12
  store i32 0, i32* %3, align 4
  br label %73

18:                                               ; preds = %8
  %19 = zext i32 %1 to i64
  %20 = icmp sgt i32 %4, 0
  br i1 %20, label %21, label %73

21:                                               ; preds = %18
  %22 = zext i32 %4 to i64
  %23 = and i64 %22, 1
  %24 = icmp eq i32 %4, 1
  br i1 %24, label %27, label %25

25:                                               ; preds = %21
  %26 = sub nsw i64 %22, %23
  br label %45

27:                                               ; preds = %45, %21
  %28 = phi i64 [ undef, %21 ], [ %63, %45 ]
  %29 = phi i64 [ 0, %21 ], [ %64, %45 ]
  %30 = phi i64 [ 0, %21 ], [ %63, %45 ]
  %31 = icmp eq i64 %23, 0
  br i1 %31, label %40, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %29
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  %36 = mul nuw i64 %35, %19
  %37 = add i64 %36, %30
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %33, align 4
  %39 = lshr i64 %37, 32
  br label %40

40:                                               ; preds = %27, %32
  %41 = phi i64 [ %28, %27 ], [ %39, %32 ]
  %42 = icmp ne i64 %41, 0
  %43 = icmp slt i32 %4, 84
  %44 = and i1 %43, %42
  br i1 %44, label %67, label %73

45:                                               ; preds = %45, %25
  %46 = phi i64 [ 0, %25 ], [ %64, %45 ]
  %47 = phi i64 [ 0, %25 ], [ %63, %45 ]
  %48 = phi i64 [ %26, %25 ], [ %65, %45 ]
  %49 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %46
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = mul nuw i64 %51, %19
  %53 = add i64 %52, %47
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %49, align 4
  %55 = lshr i64 %53, 32
  %56 = or i64 %46, 1
  %57 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = mul nuw i64 %59, %19
  %61 = add i64 %60, %55
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %57, align 4
  %63 = lshr i64 %61, 32
  %64 = add nuw nsw i64 %46, 2
  %65 = add i64 %48, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %27, label %45

67:                                               ; preds = %40
  %68 = trunc i64 %41 to i32
  %69 = sext i32 %4 to i64
  %70 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %69
  store i32 %68, i32* %70, align 4
  %71 = load i32, i32* %3, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %3, align 4
  br label %73

73:                                               ; preds = %18, %67, %40, %2, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEm(%"class.absl::strings_internal::BigUnsigned.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca [2 x i32], align 4
  %4 = bitcast [2 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %7 = trunc i64 %1 to i32
  store i32 %7, i32* %5, align 4
  %8 = lshr i64 %1, 32
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %6, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %82

13:                                               ; preds = %2
  %14 = icmp eq i32 %12, 0
  %15 = icmp eq i32 %7, 1
  %16 = or i1 %15, %14
  br i1 %16, label %138, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %7, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %17
  %20 = icmp sgt i32 %12, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %19
  %22 = sext i32 %12 to i64
  %23 = getelementptr %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  %24 = bitcast i32* %23 to i8*
  %25 = shl nuw nsw i64 %22, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 %25, i1 false) #4
  br label %26

26:                                               ; preds = %21, %19
  store i32 0, i32* %11, align 4
  br label %138

27:                                               ; preds = %17
  %28 = and i64 %1, 4294967295
  %29 = icmp sgt i32 %12, 0
  br i1 %29, label %30, label %138

30:                                               ; preds = %27
  %31 = zext i32 %12 to i64
  %32 = and i64 %31, 1
  %33 = icmp eq i32 %12, 1
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = sub nsw i64 %31, %32
  br label %54

36:                                               ; preds = %54, %30
  %37 = phi i64 [ undef, %30 ], [ %72, %54 ]
  %38 = phi i64 [ 0, %30 ], [ %73, %54 ]
  %39 = phi i64 [ 0, %30 ], [ %72, %54 ]
  %40 = icmp eq i64 %32, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %38
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = mul nuw i64 %28, %44
  %46 = add i64 %45, %39
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %42, align 4
  %48 = lshr i64 %46, 32
  br label %49

49:                                               ; preds = %36, %41
  %50 = phi i64 [ %37, %36 ], [ %48, %41 ]
  %51 = icmp ne i64 %50, 0
  %52 = icmp slt i32 %12, 84
  %53 = and i1 %52, %51
  br i1 %53, label %76, label %138

54:                                               ; preds = %54, %34
  %55 = phi i64 [ 0, %34 ], [ %73, %54 ]
  %56 = phi i64 [ 0, %34 ], [ %72, %54 ]
  %57 = phi i64 [ %35, %34 ], [ %74, %54 ]
  %58 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %55
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = mul nuw i64 %28, %60
  %62 = add i64 %61, %56
  %63 = trunc i64 %62 to i32
  store i32 %63, i32* %58, align 4
  %64 = lshr i64 %62, 32
  %65 = or i64 %55, 1
  %66 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = mul nuw i64 %28, %68
  %70 = add i64 %69, %64
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %66, align 4
  %72 = lshr i64 %70, 32
  %73 = add nuw nsw i64 %55, 2
  %74 = add i64 %57, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %36, label %54

76:                                               ; preds = %49
  %77 = trunc i64 %50 to i32
  %78 = sext i32 %12 to i64
  %79 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %78
  store i32 %77, i32* %79, align 4
  %80 = load i32, i32* %11, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %11, align 4
  br label %138

82:                                               ; preds = %2
  %83 = icmp slt i32 %12, 83
  %84 = select i1 %83, i32 %12, i32 83
  %85 = icmp sgt i32 %84, -1
  br i1 %85, label %86, label %138

86:                                               ; preds = %82
  %87 = add nsw i32 %12, -1
  %88 = sext i32 %84 to i64
  %89 = sext i32 %87 to i64
  br label %90

90:                                               ; preds = %135, %86
  %91 = phi i64 [ %88, %86 ], [ %136, %135 ]
  %92 = icmp slt i64 %91, %89
  %93 = trunc i64 %91 to i32
  %94 = select i1 %92, i32 %93, i32 %87
  %95 = sub i32 %93, %94
  %96 = icmp sgt i32 %94, -1
  %97 = icmp slt i32 %95, 2
  %98 = and i1 %96, %97
  br i1 %98, label %99, label %123

99:                                               ; preds = %90
  %100 = sext i32 %94 to i64
  %101 = sext i32 %95 to i64
  br label %102

102:                                              ; preds = %102, %99
  %103 = phi i64 [ %101, %99 ], [ %119, %102 ]
  %104 = phi i64 [ %100, %99 ], [ %118, %102 ]
  %105 = phi i64 [ 0, %99 ], [ %116, %102 ]
  %106 = phi i64 [ 0, %99 ], [ %117, %102 ]
  %107 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %104
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 %103
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = mul nuw i64 %112, %109
  %114 = add i64 %113, %106
  %115 = lshr i64 %114, 32
  %116 = add i64 %115, %105
  %117 = and i64 %114, 4294967295
  %118 = add nsw i64 %104, -1
  %119 = add nsw i64 %103, 1
  %120 = icmp sgt i64 %104, 0
  %121 = icmp slt i64 %119, 2
  %122 = and i1 %121, %120
  br i1 %122, label %102, label %123

123:                                              ; preds = %102, %90
  %124 = phi i64 [ 0, %90 ], [ %117, %102 ]
  %125 = phi i64 [ 0, %90 ], [ %116, %102 ]
  %126 = add i32 %93, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %126, i64 %125) #4
  %127 = trunc i64 %124 to i32
  %128 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %91
  store i32 %127, i32* %128, align 4
  %129 = icmp eq i64 %124, 0
  br i1 %129, label %135, label %130

130:                                              ; preds = %123
  %131 = load i32, i32* %11, align 4
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %91, %132
  br i1 %133, label %135, label %134

134:                                              ; preds = %130
  store i32 %126, i32* %11, align 4
  br label %135

135:                                              ; preds = %134, %130, %123
  %136 = add nsw i64 %91, -1
  %137 = icmp sgt i64 %91, 0
  br i1 %137, label %90, label %138

138:                                              ; preds = %135, %82, %76, %49, %27, %26, %13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE10MultiplyByEiPKj(%"class.absl::strings_internal::BigUnsigned.1"*, i32, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %1
  %7 = icmp slt i32 %6, 85
  %8 = select i1 %7, i32 %6, i32 85
  %9 = add i32 %8, -2
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = add nsw i32 %5, -1
  %13 = sext i32 %1 to i64
  %14 = sext i32 %9 to i64
  %15 = sext i32 %12 to i64
  br label %17

16:                                               ; preds = %63, %3
  ret void

17:                                               ; preds = %11, %63
  %18 = phi i64 [ %14, %11 ], [ %64, %63 ]
  %19 = icmp slt i64 %18, %15
  %20 = trunc i64 %18 to i32
  %21 = select i1 %19, i32 %20, i32 %12
  %22 = sub i32 %20, %21
  %23 = icmp sgt i32 %21, -1
  %24 = icmp slt i32 %22, %1
  %25 = and i1 %23, %24
  br i1 %25, label %26, label %50

26:                                               ; preds = %17
  %27 = sext i32 %21 to i64
  %28 = sext i32 %22 to i64
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi i64 [ %28, %26 ], [ %46, %29 ]
  %31 = phi i64 [ %27, %26 ], [ %45, %29 ]
  %32 = phi i64 [ 0, %26 ], [ %43, %29 ]
  %33 = phi i64 [ 0, %26 ], [ %44, %29 ]
  %34 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %2, i64 %30
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = mul nuw i64 %39, %36
  %41 = add i64 %40, %33
  %42 = lshr i64 %41, 32
  %43 = add i64 %42, %32
  %44 = and i64 %41, 4294967295
  %45 = add nsw i64 %31, -1
  %46 = add nsw i64 %30, 1
  %47 = icmp sgt i64 %31, 0
  %48 = icmp slt i64 %46, %13
  %49 = and i1 %48, %47
  br i1 %49, label %29, label %50

50:                                               ; preds = %29, %17
  %51 = phi i64 [ 0, %17 ], [ %44, %29 ]
  %52 = phi i64 [ 0, %17 ], [ %43, %29 ]
  %53 = trunc i64 %18 to i32
  %54 = add i32 %53, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %54, i64 %52) #4
  %55 = trunc i64 %51 to i32
  %56 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %18
  store i32 %55, i32* %56, align 4
  %57 = icmp eq i64 %51, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %50
  %59 = load i32, i32* %4, align 4
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %18, %60
  br i1 %61, label %63, label %62

62:                                               ; preds = %58
  store i32 %54, i32* %4, align 4
  br label %63

63:                                               ; preds = %50, %58, %62
  %64 = add nsw i64 %18, -1
  %65 = icmp sgt i64 %18, 0
  br i1 %65, label %17, label %16
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE22MultiplyByFiveToTheNthEi(%"class.absl::strings_internal::BigUnsigned.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp sgt i32 %1, 12
  br i1 %3, label %4, label %67

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  br label %7

7:                                                ; preds = %4, %63
  %8 = phi i32 [ %6, %4 ], [ %64, %63 ]
  %9 = phi i32 [ %1, %4 ], [ %65, %63 ]
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %63

11:                                               ; preds = %7
  %12 = zext i32 %8 to i64
  %13 = and i64 %12, 1
  %14 = icmp eq i32 %8, 1
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = sub nsw i64 %12, %13
  br label %35

17:                                               ; preds = %35, %11
  %18 = phi i64 [ undef, %11 ], [ %53, %35 ]
  %19 = phi i64 [ 0, %11 ], [ %54, %35 ]
  %20 = phi i64 [ 0, %11 ], [ %53, %35 ]
  %21 = icmp eq i64 %13, 0
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %19
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = mul nuw nsw i64 %25, 1220703125
  %27 = add nuw i64 %26, %20
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %23, align 4
  %29 = lshr i64 %27, 32
  br label %30

30:                                               ; preds = %17, %22
  %31 = phi i64 [ %18, %17 ], [ %29, %22 ]
  %32 = icmp ne i64 %31, 0
  %33 = icmp slt i32 %8, 84
  %34 = and i1 %33, %32
  br i1 %34, label %57, label %63

35:                                               ; preds = %35, %15
  %36 = phi i64 [ 0, %15 ], [ %54, %35 ]
  %37 = phi i64 [ 0, %15 ], [ %53, %35 ]
  %38 = phi i64 [ %16, %15 ], [ %55, %35 ]
  %39 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %36
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = mul nuw nsw i64 %41, 1220703125
  %43 = add nuw i64 %42, %37
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %39, align 4
  %45 = lshr i64 %43, 32
  %46 = or i64 %36, 1
  %47 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = mul nuw nsw i64 %49, 1220703125
  %51 = add nuw i64 %50, %45
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %47, align 4
  %53 = lshr i64 %51, 32
  %54 = add nuw nsw i64 %36, 2
  %55 = add i64 %38, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %17, label %35

57:                                               ; preds = %30
  %58 = trunc i64 %31 to i32
  %59 = sext i32 %8 to i64
  %60 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %59
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %5, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %5, align 4
  br label %63

63:                                               ; preds = %7, %30, %57
  %64 = phi i32 [ %8, %7 ], [ %8, %30 ], [ %62, %57 ]
  %65 = add nsw i32 %9, -13
  %66 = icmp sgt i32 %65, 12
  br i1 %66, label %7, label %67

67:                                               ; preds = %63, %2
  %68 = phi i32 [ %1, %2 ], [ %65, %63 ]
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %132

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %132, label %74

74:                                               ; preds = %70
  %75 = sext i32 %68 to i64
  %76 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = icmp sgt i32 %72, 0
  br i1 %79, label %80, label %132

80:                                               ; preds = %74
  %81 = zext i32 %72 to i64
  %82 = and i64 %81, 1
  %83 = icmp eq i32 %72, 1
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = sub nsw i64 %81, %82
  br label %104

86:                                               ; preds = %104, %80
  %87 = phi i64 [ undef, %80 ], [ %122, %104 ]
  %88 = phi i64 [ 0, %80 ], [ %123, %104 ]
  %89 = phi i64 [ 0, %80 ], [ %122, %104 ]
  %90 = icmp eq i64 %82, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %88
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = mul nuw i64 %94, %78
  %96 = add i64 %95, %89
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %92, align 4
  %98 = lshr i64 %96, 32
  br label %99

99:                                               ; preds = %86, %91
  %100 = phi i64 [ %87, %86 ], [ %98, %91 ]
  %101 = icmp ne i64 %100, 0
  %102 = icmp slt i32 %72, 84
  %103 = and i1 %102, %101
  br i1 %103, label %126, label %132

104:                                              ; preds = %104, %84
  %105 = phi i64 [ 0, %84 ], [ %123, %104 ]
  %106 = phi i64 [ 0, %84 ], [ %122, %104 ]
  %107 = phi i64 [ %85, %84 ], [ %124, %104 ]
  %108 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %105
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = mul nuw i64 %110, %78
  %112 = add i64 %111, %106
  %113 = trunc i64 %112 to i32
  store i32 %113, i32* %108, align 4
  %114 = lshr i64 %112, 32
  %115 = or i64 %105, 1
  %116 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = mul nuw i64 %118, %78
  %120 = add i64 %119, %114
  %121 = trunc i64 %120 to i32
  store i32 %121, i32* %116, align 4
  %122 = lshr i64 %120, 32
  %123 = add nuw nsw i64 %105, 2
  %124 = add i64 %107, -2
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %86, label %104

126:                                              ; preds = %99
  %127 = trunc i64 %100 to i32
  %128 = sext i32 %72 to i64
  %129 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %128
  store i32 %127, i32* %129, align 4
  %130 = load i32, i32* %71, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %71, align 4
  br label %132

132:                                              ; preds = %126, %99, %74, %70, %67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE12FiveToTheNthEi(%"class.absl::strings_internal::BigUnsigned.1"* noalias sret, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 2
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 328, i1 false) #4
  %6 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  store i32 1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 1
  store i32 0, i32* %7, align 4
  %8 = icmp sgt i32 %1, 26
  br i1 %8, label %9, label %97

9:                                                ; preds = %2
  %10 = bitcast i32* %6 to i8*
  br label %11

11:                                               ; preds = %9, %92
  %12 = phi i8 [ 1, %9 ], [ %93, %92 ]
  %13 = phi i32 [ %1, %9 ], [ %95, %92 ]
  %14 = udiv i32 %13, 27
  %15 = icmp slt i32 %14, 20
  %16 = select i1 %15, i32 %14, i32 20
  %17 = and i8 %12, 1
  %18 = icmp eq i8 %17, 0
  %19 = shl nuw nsw i32 %16, 1
  br i1 %18, label %28, label %20

20:                                               ; preds = %11
  %21 = shl nuw nsw i32 %16, 3
  %22 = zext i32 %21 to i64
  %23 = add nsw i32 %16, -1
  %24 = mul nsw i32 %23, %16
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [420 x i32], [420 x i32]* @_ZN4absl16strings_internal12_GLOBAL__N_118kLargePowersOfFiveE, i64 0, i64 %25
  %27 = bitcast i32* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %27, i64 %22, i1 false) #4
  store i32 %19, i32* %3, align 4
  br label %92

28:                                               ; preds = %11
  %29 = add nsw i32 %16, -1
  %30 = mul nsw i32 %29, %16
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [420 x i32], [420 x i32]* @_ZN4absl16strings_internal12_GLOBAL__N_118kLargePowersOfFiveE, i64 0, i64 %31
  %33 = load i32, i32* %3, align 4
  %34 = add nsw i32 %33, %19
  %35 = icmp slt i32 %34, 85
  %36 = select i1 %35, i32 %34, i32 85
  %37 = add i32 %36, -2
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %92

39:                                               ; preds = %28
  %40 = add nsw i32 %33, -1
  %41 = zext i32 %19 to i64
  %42 = sext i32 %37 to i64
  %43 = sext i32 %40 to i64
  br label %44

44:                                               ; preds = %89, %39
  %45 = phi i64 [ %42, %39 ], [ %90, %89 ]
  %46 = icmp slt i64 %45, %43
  %47 = trunc i64 %45 to i32
  %48 = select i1 %46, i32 %47, i32 %40
  %49 = sub i32 %47, %48
  %50 = icmp sgt i32 %48, -1
  %51 = icmp slt i32 %49, %19
  %52 = and i1 %50, %51
  br i1 %52, label %53, label %77

53:                                               ; preds = %44
  %54 = sext i32 %48 to i64
  %55 = sext i32 %49 to i64
  br label %56

56:                                               ; preds = %56, %53
  %57 = phi i64 [ %55, %53 ], [ %73, %56 ]
  %58 = phi i64 [ %54, %53 ], [ %72, %56 ]
  %59 = phi i64 [ 0, %53 ], [ %70, %56 ]
  %60 = phi i64 [ 0, %53 ], [ %71, %56 ]
  %61 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %58
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %32, i64 %57
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = mul nuw i64 %66, %63
  %68 = add i64 %67, %60
  %69 = lshr i64 %68, 32
  %70 = add i64 %69, %59
  %71 = and i64 %68, 4294967295
  %72 = add nsw i64 %58, -1
  %73 = add nsw i64 %57, 1
  %74 = icmp sgt i64 %58, 0
  %75 = icmp slt i64 %73, %41
  %76 = and i1 %75, %74
  br i1 %76, label %56, label %77

77:                                               ; preds = %56, %44
  %78 = phi i64 [ 0, %44 ], [ %71, %56 ]
  %79 = phi i64 [ 0, %44 ], [ %70, %56 ]
  %80 = add i32 %47, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %80, i64 %79) #4
  %81 = trunc i64 %78 to i32
  %82 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %45
  store i32 %81, i32* %82, align 4
  %83 = icmp eq i64 %78, 0
  br i1 %83, label %89, label %84

84:                                               ; preds = %77
  %85 = load i32, i32* %3, align 4
  %86 = sext i32 %85 to i64
  %87 = icmp slt i64 %45, %86
  br i1 %87, label %89, label %88

88:                                               ; preds = %84
  store i32 %80, i32* %3, align 4
  br label %89

89:                                               ; preds = %88, %84, %77
  %90 = add nsw i64 %45, -1
  %91 = icmp sgt i64 %45, 0
  br i1 %91, label %44, label %92

92:                                               ; preds = %89, %28, %20
  %93 = phi i8 [ 0, %20 ], [ %12, %28 ], [ %12, %89 ]
  %94 = mul i32 %16, -27
  %95 = add i32 %94, %13
  %96 = icmp sgt i32 %95, 26
  br i1 %96, label %11, label %97

97:                                               ; preds = %92, %2
  %98 = phi i32 [ %1, %2 ], [ %95, %92 ]
  %99 = icmp sgt i32 %98, 12
  br i1 %99, label %100, label %162

100:                                              ; preds = %97
  %101 = load i32, i32* %3, align 4
  br label %102

102:                                              ; preds = %158, %100
  %103 = phi i32 [ %101, %100 ], [ %159, %158 ]
  %104 = phi i32 [ %98, %100 ], [ %160, %158 ]
  %105 = icmp sgt i32 %103, 0
  br i1 %105, label %106, label %158

106:                                              ; preds = %102
  %107 = zext i32 %103 to i64
  %108 = and i64 %107, 1
  %109 = icmp eq i32 %103, 1
  br i1 %109, label %112, label %110

110:                                              ; preds = %106
  %111 = sub nsw i64 %107, %108
  br label %130

112:                                              ; preds = %130, %106
  %113 = phi i64 [ undef, %106 ], [ %148, %130 ]
  %114 = phi i64 [ 0, %106 ], [ %149, %130 ]
  %115 = phi i64 [ 0, %106 ], [ %148, %130 ]
  %116 = icmp eq i64 %108, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %114
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = mul nuw nsw i64 %120, 1220703125
  %122 = add nuw i64 %121, %115
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %118, align 4
  %124 = lshr i64 %122, 32
  br label %125

125:                                              ; preds = %112, %117
  %126 = phi i64 [ %113, %112 ], [ %124, %117 ]
  %127 = icmp ne i64 %126, 0
  %128 = icmp slt i32 %103, 84
  %129 = and i1 %128, %127
  br i1 %129, label %152, label %158

130:                                              ; preds = %130, %110
  %131 = phi i64 [ 0, %110 ], [ %149, %130 ]
  %132 = phi i64 [ 0, %110 ], [ %148, %130 ]
  %133 = phi i64 [ %111, %110 ], [ %150, %130 ]
  %134 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %131
  %135 = load i32, i32* %134, align 4
  %136 = zext i32 %135 to i64
  %137 = mul nuw nsw i64 %136, 1220703125
  %138 = add nuw i64 %137, %132
  %139 = trunc i64 %138 to i32
  store i32 %139, i32* %134, align 4
  %140 = lshr i64 %138, 32
  %141 = or i64 %131, 1
  %142 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = mul nuw nsw i64 %144, 1220703125
  %146 = add nuw i64 %145, %140
  %147 = trunc i64 %146 to i32
  store i32 %147, i32* %142, align 4
  %148 = lshr i64 %146, 32
  %149 = add nuw nsw i64 %131, 2
  %150 = add i64 %133, -2
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %112, label %130

152:                                              ; preds = %125
  %153 = trunc i64 %126 to i32
  %154 = sext i32 %103 to i64
  %155 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %154
  store i32 %153, i32* %155, align 4
  %156 = load i32, i32* %3, align 4
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %3, align 4
  br label %158

158:                                              ; preds = %152, %125, %102
  %159 = phi i32 [ %103, %102 ], [ %103, %125 ], [ %157, %152 ]
  %160 = add nsw i32 %104, -13
  %161 = icmp sgt i32 %160, 12
  br i1 %161, label %102, label %162

162:                                              ; preds = %158, %97
  %163 = phi i32 [ %98, %97 ], [ %160, %158 ]
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %226

165:                                              ; preds = %162
  %166 = load i32, i32* %3, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %226, label %168

168:                                              ; preds = %165
  %169 = sext i32 %163 to i64
  %170 = getelementptr inbounds [14 x i32], [14 x i32]* @_ZN4absl16strings_internal10kFiveToNthE, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i64
  %173 = icmp sgt i32 %166, 0
  br i1 %173, label %174, label %226

174:                                              ; preds = %168
  %175 = zext i32 %166 to i64
  %176 = and i64 %175, 1
  %177 = icmp eq i32 %166, 1
  br i1 %177, label %180, label %178

178:                                              ; preds = %174
  %179 = sub nsw i64 %175, %176
  br label %198

180:                                              ; preds = %198, %174
  %181 = phi i64 [ undef, %174 ], [ %216, %198 ]
  %182 = phi i64 [ 0, %174 ], [ %217, %198 ]
  %183 = phi i64 [ 0, %174 ], [ %216, %198 ]
  %184 = icmp eq i64 %176, 0
  br i1 %184, label %193, label %185

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %182
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i64
  %189 = mul nuw i64 %188, %172
  %190 = add i64 %189, %183
  %191 = trunc i64 %190 to i32
  store i32 %191, i32* %186, align 4
  %192 = lshr i64 %190, 32
  br label %193

193:                                              ; preds = %180, %185
  %194 = phi i64 [ %181, %180 ], [ %192, %185 ]
  %195 = icmp ne i64 %194, 0
  %196 = icmp slt i32 %166, 84
  %197 = and i1 %196, %195
  br i1 %197, label %220, label %226

198:                                              ; preds = %198, %178
  %199 = phi i64 [ 0, %178 ], [ %217, %198 ]
  %200 = phi i64 [ 0, %178 ], [ %216, %198 ]
  %201 = phi i64 [ %179, %178 ], [ %218, %198 ]
  %202 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %199
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  %205 = mul nuw i64 %204, %172
  %206 = add i64 %205, %200
  %207 = trunc i64 %206 to i32
  store i32 %207, i32* %202, align 4
  %208 = lshr i64 %206, 32
  %209 = or i64 %199, 1
  %210 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = zext i32 %211 to i64
  %213 = mul nuw i64 %212, %172
  %214 = add i64 %213, %208
  %215 = trunc i64 %214 to i32
  store i32 %215, i32* %210, align 4
  %216 = lshr i64 %214, 32
  %217 = add nuw nsw i64 %199, 2
  %218 = add i64 %201, -2
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %180, label %198

220:                                              ; preds = %193
  %221 = trunc i64 %194 to i32
  %222 = sext i32 %166 to i64
  %223 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %222
  store i32 %221, i32* %223, align 4
  %224 = load i32, i32* %3, align 4
  %225 = add nsw i32 %224, 1
  store i32 %225, i32* %3, align 4
  br label %226

226:                                              ; preds = %162, %165, %168, %193, %220
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4absl16strings_internal11BigUnsignedILi84EE7GetWordEi(%"class.absl::strings_internal::BigUnsigned.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp slt i32 %1, 0
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %9
  %11 = load i32, i32* %10, align 4
  br label %12

12:                                               ; preds = %2, %4, %8
  %13 = phi i32 [ %11, %8 ], [ 0, %4 ], [ 0, %2 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK4absl16strings_internal11BigUnsignedILi84EE8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.absl::strings_internal::BigUnsigned.1"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.absl::strings_internal::BigUnsigned.1", align 4
  %4 = bitcast %"class.absl::strings_internal::BigUnsigned.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 340, i8* nonnull %4) #4
  %5 = bitcast %"class.absl::strings_internal::BigUnsigned.1"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 %5, i64 340, i1 false)
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #4
  %9 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %3, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  br label %68

15:                                               ; preds = %2, %53
  %16 = phi i32 [ %54, %53 ], [ %10, %2 ]
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi i64 [ %17, %15 ], [ %21, %18 ]
  %20 = phi i64 [ 0, %15 ], [ %29, %18 ]
  %21 = add nsw i64 %19, -1
  %22 = shl nuw nsw i64 %20, 32
  %23 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %3, i64 0, i32 1, i64 %21
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = or i64 %22, %25
  %27 = udiv i64 %26, 10
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %23, align 4
  %29 = urem i64 %26, 10
  %30 = icmp sgt i64 %21, 0
  br i1 %30, label %18, label %31

31:                                               ; preds = %18
  %32 = load i32, i32* %9, align 4
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %53

34:                                               ; preds = %31
  %35 = sext i32 %32 to i64
  %36 = add nsw i64 %35, -1
  %37 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %3, i64 0, i32 1, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %45, label %53

40:                                               ; preds = %45
  %41 = add nsw i64 %46, -1
  %42 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %3, i64 0, i32 1, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %34, %40
  %46 = phi i64 [ %41, %40 ], [ %36, %34 ]
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %9, align 4
  %48 = icmp sgt i64 %46, 0
  br i1 %48, label %40, label %49

49:                                               ; preds = %45
  %50 = trunc i64 %46 to i32
  br label %53

51:                                               ; preds = %40
  %52 = trunc i64 %46 to i32
  br label %53

53:                                               ; preds = %51, %34, %49, %31
  %54 = phi i32 [ %32, %31 ], [ %50, %49 ], [ %32, %34 ], [ %52, %51 ]
  %55 = trunc i64 %29 to i8
  %56 = or i8 %55, 48
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext %56) #4
  %57 = icmp sgt i32 %54, 0
  br i1 %57, label %15, label %58

58:                                               ; preds = %53
  %59 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %60 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %61 = load i8, i8* %60, align 1
  %62 = load i64, i64* %7, align 8
  %63 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %59, i64 0, i32 1, i32 0
  %64 = icmp slt i8 %61, 0
  %65 = zext i8 %61 to i64
  %66 = select i1 %64, i64 %62, i64 %65
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %12, %58
  %69 = phi i8* [ %14, %12 ], [ %63, %58 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 48) #4
  %70 = load i64, i64* %7, align 8
  br label %71

71:                                               ; preds = %68, %58
  %72 = phi i8* [ %69, %68 ], [ %63, %58 ]
  %73 = phi i64 [ %70, %68 ], [ %62, %58 ]
  %74 = load i8, i8* %72, align 1
  %75 = icmp slt i8 %74, 0
  %76 = load i8*, i8** %6, align 8
  %77 = zext i8 %74 to i64
  %78 = select i1 %75, i8* %76, i8* %8
  %79 = select i1 %75, i64 %73, i64 %77
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %71
  %82 = getelementptr inbounds i8, i8* %78, i64 %79
  %83 = getelementptr inbounds i8, i8* %82, i64 -1
  %84 = icmp ugt i8* %83, %78
  br i1 %84, label %85, label %93

85:                                               ; preds = %81, %85
  %86 = phi i8* [ %91, %85 ], [ %83, %81 ]
  %87 = phi i8* [ %90, %85 ], [ %78, %81 ]
  %88 = load i8, i8* %87, align 1
  %89 = load i8, i8* %86, align 1
  store i8 %89, i8* %87, align 1
  store i8 %88, i8* %86, align 1
  %90 = getelementptr inbounds i8, i8* %87, i64 1
  %91 = getelementptr inbounds i8, i8* %86, i64 -1
  %92 = icmp ult i8* %90, %91
  br i1 %92, label %85, label %93

93:                                               ; preds = %85, %71, %81
  call void @llvm.lifetime.end.p0i8(i64 340, i8* nonnull %4) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4absl16strings_internal11BigUnsignedILi84EE4sizeEv(%"class.absl::strings_internal::BigUnsigned.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4absl16strings_internal11BigUnsignedILi84EE5wordsEv(%"class.absl::strings_internal::BigUnsigned.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 0
  ret i32* %2
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEij(%"class.absl::strings_internal::BigUnsigned.1"*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %28, label %5

5:                                                ; preds = %3
  %6 = icmp slt i32 %1, 84
  br i1 %6, label %7, label %19

7:                                                ; preds = %5, %7
  %8 = phi i32 [ %15, %7 ], [ %2, %5 ]
  %9 = phi i32 [ %16, %7 ], [ %1, %5 ]
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %8
  store i32 %13, i32* %11, align 4
  %14 = icmp ugt i32 %8, %13
  %15 = zext i1 %14 to i32
  %16 = add nsw i32 %9, %15
  %17 = icmp slt i32 %16, 84
  %18 = and i1 %17, %14
  br i1 %18, label %7, label %19

19:                                               ; preds = %7, %5
  %20 = phi i32 [ %1, %5 ], [ %16, %7 ]
  %21 = add nsw i32 %20, 1
  %22 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %21, %23
  %25 = select i1 %24, i32 %23, i32 %21
  %26 = icmp slt i32 %25, 84
  %27 = select i1 %26, i32 %25, i32 84
  store i32 %27, i32* %22, align 4
  br label %28

28:                                               ; preds = %3, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE12MultiplyStepEiPKjii(%"class.absl::strings_internal::BigUnsigned.1"*, i32, i32*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %6 = add nsw i32 %1, -1
  %7 = icmp sgt i32 %6, %4
  %8 = select i1 %7, i32 %4, i32 %6
  %9 = sub i32 %4, %8
  %10 = icmp sgt i32 %8, -1
  %11 = icmp slt i32 %9, %3
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %38

13:                                               ; preds = %5
  %14 = sext i32 %8 to i64
  %15 = sext i32 %9 to i64
  %16 = sext i32 %3 to i64
  br label %17

17:                                               ; preds = %13, %17
  %18 = phi i64 [ %15, %13 ], [ %34, %17 ]
  %19 = phi i64 [ %14, %13 ], [ %33, %17 ]
  %20 = phi i64 [ 0, %13 ], [ %31, %17 ]
  %21 = phi i64 [ 0, %13 ], [ %32, %17 ]
  %22 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %19
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %2, i64 %18
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = mul nuw i64 %27, %24
  %29 = add i64 %28, %21
  %30 = lshr i64 %29, 32
  %31 = add i64 %30, %20
  %32 = and i64 %29, 4294967295
  %33 = add nsw i64 %19, -1
  %34 = add nsw i64 %18, 1
  %35 = icmp sgt i64 %19, 0
  %36 = icmp slt i64 %34, %16
  %37 = and i1 %36, %35
  br i1 %37, label %17, label %38

38:                                               ; preds = %17, %5
  %39 = phi i64 [ 0, %5 ], [ %32, %17 ]
  %40 = phi i64 [ 0, %5 ], [ %31, %17 ]
  %41 = add nsw i32 %4, 1
  tail call void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned.1"* %0, i32 %41, i64 %40)
  %42 = trunc i64 %39 to i32
  %43 = sext i32 %4 to i64
  %44 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %43
  store i32 %42, i32* %44, align 4
  %45 = icmp eq i64 %39, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, %4
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  store i32 %41, i32* %47, align 4
  br label %51

51:                                               ; preds = %46, %38, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4absl16strings_internal11BigUnsignedILi84EE12AddWithCarryEim(%"class.absl::strings_internal::BigUnsigned.1"*, i32, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ne i64 %2, 0
  %5 = icmp slt i32 %1, 84
  %6 = and i1 %5, %4
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = lshr i64 %2, 32
  %9 = trunc i64 %8 to i32
  %10 = trunc i64 %2 to i32
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %10
  store i32 %14, i32* %12, align 4
  %15 = icmp ult i32 %14, %10
  br i1 %15, label %16, label %41

16:                                               ; preds = %7
  %17 = add i32 %9, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %43

19:                                               ; preds = %16
  %20 = add nsw i32 %1, 2
  %21 = icmp slt i32 %20, 84
  br i1 %21, label %22, label %34

22:                                               ; preds = %19, %22
  %23 = phi i32 [ %30, %22 ], [ 1, %19 ]
  %24 = phi i32 [ %31, %22 ], [ %20, %19 ]
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = add i32 %27, %23
  store i32 %28, i32* %26, align 4
  %29 = icmp ugt i32 %23, %28
  %30 = zext i1 %29 to i32
  %31 = add nsw i32 %24, %30
  %32 = icmp slt i32 %31, 84
  %33 = and i1 %29, %32
  br i1 %33, label %22, label %34

34:                                               ; preds = %22, %19
  %35 = phi i32 [ %20, %19 ], [ %31, %22 ]
  %36 = add nsw i32 %35, 1
  %37 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %36, %38
  %40 = select i1 %39, i32 %38, i32 %36
  br label %73

41:                                               ; preds = %7
  %42 = icmp eq i32 %9, 0
  br i1 %42, label %67, label %43

43:                                               ; preds = %16, %41
  %44 = phi i32 [ %9, %41 ], [ %17, %16 ]
  %45 = add nsw i32 %1, 1
  %46 = icmp slt i32 %45, 84
  br i1 %46, label %47, label %61

47:                                               ; preds = %43, %47
  %48 = phi i32 [ %55, %47 ], [ %44, %43 ]
  %49 = phi i32 [ %56, %47 ], [ %45, %43 ]
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 1, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, %48
  store i32 %53, i32* %51, align 4
  %54 = icmp ugt i32 %48, %53
  %55 = zext i1 %54 to i32
  %56 = add nsw i32 %49, %55
  %57 = icmp slt i32 %56, 84
  %58 = and i1 %54, %57
  br i1 %58, label %47, label %59

59:                                               ; preds = %47
  %60 = add nsw i32 %56, 1
  br label %61

61:                                               ; preds = %59, %43
  %62 = phi i32 [ 85, %43 ], [ %60, %59 ]
  %63 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %62, %64
  %66 = select i1 %65, i32 %64, i32 %62
  br label %73

67:                                               ; preds = %41
  %68 = add nsw i32 %1, 1
  %69 = getelementptr inbounds %"class.absl::strings_internal::BigUnsigned.1", %"class.absl::strings_internal::BigUnsigned.1"* %0, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %68, %70
  %72 = select i1 %71, i32 %70, i32 %68
  br label %73

73:                                               ; preds = %34, %67, %61
  %74 = phi i32 [ %66, %61 ], [ %72, %67 ], [ %40, %34 ]
  %75 = phi i32* [ %63, %61 ], [ %69, %67 ], [ %37, %34 ]
  %76 = icmp slt i32 %74, 84
  %77 = select i1 %76, i32 %74, i32 84
  store i32 %77, i32* %75, align 4
  br label %78

78:                                               ; preds = %73, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!14, !17}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
