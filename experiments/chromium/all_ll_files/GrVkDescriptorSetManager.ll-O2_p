; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkDescriptorSetManager.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkDescriptorSetManager.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrVkDescriptorSetManager = type { %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %class.SkTArray.421, %class.SkSTArray.422, %class.SkSTArray.425 }
%"struct.GrVkDescriptorSetManager::DescriptorPoolManager" = type { %struct.VkDescriptorSetLayout_T*, i32, i32, i32, i32, %class.GrVkDescriptorPool* }
%class.GrVkDescriptorPool = type { %class.GrVkManagedResource, i32, i32, %struct.VkDescriptorPool_T* }
%class.GrVkManagedResource = type { %class.GrManagedResource.base, %class.GrVkGpu* }
%class.GrManagedResource.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.VkDescriptorPool_T = type opaque
%class.SkTArray.421 = type { %class.GrVkDescriptorSet**, i64 }
%class.GrVkDescriptorSet = type <{ %class.GrVkRecycledResource, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, %class.GrResourceHandle, [4 x i8] }>
%class.GrVkRecycledResource = type { %class.GrRecycledResource.base, %class.GrVkGpu* }
%class.GrRecycledResource.base = type { %class.GrManagedResource.base }
%struct.VkDescriptorSet_T = type opaque
%class.GrResourceHandle = type { i32 }
%class.SkSTArray.422 = type { %class.SkAlignedSTStorage.423, %class.SkTArray.424 }
%class.SkAlignedSTStorage.423 = type { [16 x i8] }
%class.SkTArray.424 = type { i32*, i64 }
%class.SkSTArray.425 = type { %class.SkAlignedSTStorage.426, %class.SkTArray.427 }
%class.SkAlignedSTStorage.426 = type { [32 x i8] }
%class.SkTArray.427 = type { %class.GrVkSampler**, i64 }
%class.GrVkSampler = type <{ %class.GrVkManagedResource, %struct.VkSampler_T*, %class.GrVkSamplerYcbcrConversion*, %"struct.GrVkSampler::Key", i32, [4 x i8] }>
%struct.VkSampler_T = type opaque
%class.GrVkSamplerYcbcrConversion = type { %class.GrVkManagedResource, %struct.VkSamplerYcbcrConversion_T*, %"struct.GrVkSamplerYcbcrConversion::Key" }
%struct.VkSamplerYcbcrConversion_T = type opaque
%"struct.GrVkSamplerYcbcrConversion::Key" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.GrVkSampler::Key" = type { i8, [7 x i8], %"struct.GrVkSamplerYcbcrConversion::Key" }
%class.GrVkGpu = type { %class.GrGpu, %class.sk_sp.193, %class.sk_sp.337, %class.sk_sp.338, i8, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %class.GrVkResourceProvider, %class.GrStagingBufferManager, %class.GrVkMSAALoadManager, %class.GrVkCommandPool*, %class.GrVkPrimaryCommandBuffer*, %class.SkSTArray.405, %class.SkSTArray.405, %class.SkTArray.408, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, i8, i8, %"class.std::__1::unique_ptr.415" }
%class.GrGpu = type { %class.SkRefCnt.base, %"class.GrGpu::Stats", %class.sk_sp, %"class.std::__1::unique_ptr", i32, %class.GrDirectContext*, %class.SkSTArray, i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.GrGpu::Stats" = type { i8 }
%class.sk_sp = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.1, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.1 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Compiler"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.41", %"class.std::__1::shared_ptr.41", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.43", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.49" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.13", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.15" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.SkSL::Type::Field"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.40"* }
%"class.std::__1::vector.40" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.41" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.41", %"class.std::__1::vector.428", i8, %"class.std::__1::vector.436", %"class.std::__1::forward_list", %class.SkTHashMap.449, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.428" = type { %"class.std::__1::__vector_base.429" }
%"class.std::__1::__vector_base.429" = type { %"class.std::__1::unique_ptr.430"*, %"class.std::__1::unique_ptr.430"*, %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.std::__1::unique_ptr.430"* }
%"class.std::__1::vector.436" = type { %"class.std::__1::__vector_base.437" }
%"class.std::__1::__vector_base.437" = type { %"class.std::__1::unique_ptr.438"*, %"class.std::__1::unique_ptr.438"*, %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::unique_ptr.438" = type { %"class.std::__1::__compressed_pair.560" }
%"class.std::__1::__compressed_pair.560" = type { %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.440" }
%"struct.std::__1::__compressed_pair_elem.440" = type { %"class.std::__1::unique_ptr.438"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.449 = type { %class.SkTHashTable.450 }
%class.SkTHashTable.450 = type { i32, i32, %class.SkAutoTArray.451 }
%class.SkAutoTArray.451 = type { %"class.std::__1::unique_ptr.452" }
%"class.std::__1::unique_ptr.452" = type { %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.565" }
%"struct.std::__1::pair.565" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr.41", %"class.std::__1::shared_ptr.42" }
%"class.std::__1::shared_ptr.42" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.21", %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.37", [4 x i8] }>
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23", %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { i64*, i64*, %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { i64* }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.117", %class.sk_sp.123, %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.167", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.186" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.60", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.105" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.59 }
%class.sk_sp.59 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap, %class.SkTHashMap.70, %class.SkTArray.79, %class.SkTArray.81, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.63"*, i64 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.81, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.82 }
%class.sk_sp.82 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.64" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.70 = type { %class.SkTHashTable.71 }
%class.SkTHashTable.71 = type { i32, i32, %class.SkAutoTArray.72 }
%class.SkAutoTArray.72 = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.548" }
%"struct.std::__1::pair.548" = type { i32, %class.SkTArray.549* }
%class.SkTArray.549 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.79 = type { %"class.std::__1::unique_ptr.80"*, i64 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.549, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.81 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.95 }
%class.SkFibBlockSizes.95 = type { i32 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.123 = type { %class.GrGpu* }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.137, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.155, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.127, [4 x i8] }>
%union.anon.127 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.128, i8* }
%class.sk_sp.128 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.129 }
%class.SkTHashTable.129 = type { i32, i32, %class.SkAutoTArray.130 }
%class.SkAutoTArray.130 = type { %"class.std::__1::unique_ptr.131" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.137 = type { %class.SkTHashTable.138 }
%class.SkTHashTable.138 = type { i32, i32, %class.SkAutoTArray.139 }
%class.SkAutoTArray.139 = type { %"class.std::__1::unique_ptr.140" }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.146, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.146 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.147" }
%"struct.std::__1::atomic.147" = type { %"struct.std::__1::__atomic_base.148" }
%"struct.std::__1::__atomic_base.148" = type { %"struct.std::__1::__atomic_base.149" }
%"struct.std::__1::__atomic_base.149" = type { %"struct.std::__1::__cxx_atomic_impl.150" }
%"struct.std::__1::__cxx_atomic_impl.150" = type { %"struct.std::__1::__cxx_atomic_base_impl.151" }
%"struct.std::__1::__cxx_atomic_base_impl.151" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.152, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.152 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.153 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.153 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.154, void (i8*)*, i8* }
%class.SkNVRefCnt.154 = type { %"struct.std::__1::atomic" }
%class.SkTHashMap.155 = type { %class.SkTHashTable.156 }
%class.SkTHashTable.156 = type { i32, i32, %class.SkAutoTArray.157 }
%class.SkAutoTArray.157 = type { %"class.std::__1::unique_ptr.158" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp, %class.sk_sp.170, %class.sk_sp.170 }
%class.sk_sp.170 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.192 }
%class.SkAlignedSTStorage = type { [64 x i8] }
%class.SkTArray.192 = type { %"struct.GrGpu::SubmittedProc"*, i64 }
%"struct.GrGpu::SubmittedProc" = type { void (i8*, i1)*, i8* }
%class.sk_sp.193 = type { %struct.GrVkInterface* }
%struct.GrVkInterface = type { %class.SkRefCnt.base, %"struct.GrVkInterface::Functions" }
%"struct.GrVkInterface::Functions" = type { %"class.GrVkInterface::VkPtr", %"class.GrVkInterface::VkPtr.194", %"class.GrVkInterface::VkPtr.195", %"class.GrVkInterface::VkPtr.196", %"class.GrVkInterface::VkPtr.197", %"class.GrVkInterface::VkPtr.198", %"class.GrVkInterface::VkPtr.199", %"class.GrVkInterface::VkPtr.200", %"class.GrVkInterface::VkPtr.201", %"class.GrVkInterface::VkPtr.202", %"class.GrVkInterface::VkPtr.203", %"class.GrVkInterface::VkPtr.204", %"class.GrVkInterface::VkPtr.205", %"class.GrVkInterface::VkPtr.206", %"class.GrVkInterface::VkPtr.207", %"class.GrVkInterface::VkPtr.208", %"class.GrVkInterface::VkPtr.209", %"class.GrVkInterface::VkPtr.210", %"class.GrVkInterface::VkPtr.211", %"class.GrVkInterface::VkPtr.212", %"class.GrVkInterface::VkPtr.213", %"class.GrVkInterface::VkPtr.214", %"class.GrVkInterface::VkPtr.215", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.217", %"class.GrVkInterface::VkPtr.218", %"class.GrVkInterface::VkPtr.219", %"class.GrVkInterface::VkPtr.220", %"class.GrVkInterface::VkPtr.221", %"class.GrVkInterface::VkPtr.222", %"class.GrVkInterface::VkPtr.223", %"class.GrVkInterface::VkPtr.224", %"class.GrVkInterface::VkPtr.225", %"class.GrVkInterface::VkPtr.226", %"class.GrVkInterface::VkPtr.227", %"class.GrVkInterface::VkPtr.228", %"class.GrVkInterface::VkPtr.229", %"class.GrVkInterface::VkPtr.230", %"class.GrVkInterface::VkPtr.231", %"class.GrVkInterface::VkPtr.232", %"class.GrVkInterface::VkPtr.233", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.235", %"class.GrVkInterface::VkPtr.236", %"class.GrVkInterface::VkPtr.237", %"class.GrVkInterface::VkPtr.238", %"class.GrVkInterface::VkPtr.239", %"class.GrVkInterface::VkPtr.240", %"class.GrVkInterface::VkPtr.241", %"class.GrVkInterface::VkPtr.242", %"class.GrVkInterface::VkPtr.243", %"class.GrVkInterface::VkPtr.244", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.246", %"class.GrVkInterface::VkPtr.247", %"class.GrVkInterface::VkPtr.248", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.250", %"class.GrVkInterface::VkPtr.251", %"class.GrVkInterface::VkPtr.252", %"class.GrVkInterface::VkPtr.253", %"class.GrVkInterface::VkPtr.254", %"class.GrVkInterface::VkPtr.255", %"class.GrVkInterface::VkPtr.256", %"class.GrVkInterface::VkPtr.257", %"class.GrVkInterface::VkPtr.258", %"class.GrVkInterface::VkPtr.259", %"class.GrVkInterface::VkPtr.260", %"class.GrVkInterface::VkPtr.261", %"class.GrVkInterface::VkPtr.262", %"class.GrVkInterface::VkPtr.263", %"class.GrVkInterface::VkPtr.264", %"class.GrVkInterface::VkPtr.265", %"class.GrVkInterface::VkPtr.266", %"class.GrVkInterface::VkPtr.267", %"class.GrVkInterface::VkPtr.268", %"class.GrVkInterface::VkPtr.269", %"class.GrVkInterface::VkPtr.270", %"class.GrVkInterface::VkPtr.271", %"class.GrVkInterface::VkPtr.272", %"class.GrVkInterface::VkPtr.273", %"class.GrVkInterface::VkPtr.274", %"class.GrVkInterface::VkPtr.275", %"class.GrVkInterface::VkPtr.276", %"class.GrVkInterface::VkPtr.277", %"class.GrVkInterface::VkPtr.278", %"class.GrVkInterface::VkPtr.279", %"class.GrVkInterface::VkPtr.280", %"class.GrVkInterface::VkPtr.281", %"class.GrVkInterface::VkPtr.282", %"class.GrVkInterface::VkPtr.283", %"class.GrVkInterface::VkPtr.284", %"class.GrVkInterface::VkPtr.285", %"class.GrVkInterface::VkPtr.286", %"class.GrVkInterface::VkPtr.287", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.289", %"class.GrVkInterface::VkPtr.290", %"class.GrVkInterface::VkPtr.291", %"class.GrVkInterface::VkPtr.292", %"class.GrVkInterface::VkPtr.293", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.295", %"class.GrVkInterface::VkPtr.296", %"class.GrVkInterface::VkPtr.297", %"class.GrVkInterface::VkPtr.298", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.300", %"class.GrVkInterface::VkPtr.301", %"class.GrVkInterface::VkPtr.302", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.304", %"class.GrVkInterface::VkPtr.305", %"class.GrVkInterface::VkPtr.306", %"class.GrVkInterface::VkPtr.307", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.309", %"class.GrVkInterface::VkPtr.310", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.312", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.313", %"class.GrVkInterface::VkPtr.314", %"class.GrVkInterface::VkPtr.315", %"class.GrVkInterface::VkPtr.316", %"class.GrVkInterface::VkPtr.317", %"class.GrVkInterface::VkPtr.318", %"class.GrVkInterface::VkPtr.319", %"class.GrVkInterface::VkPtr.320", %"class.GrVkInterface::VkPtr.321", %"class.GrVkInterface::VkPtr.322", %"class.GrVkInterface::VkPtr.323", %"class.GrVkInterface::VkPtr.324", %"class.GrVkInterface::VkPtr.325", %"class.GrVkInterface::VkPtr.326", %"class.GrVkInterface::VkPtr.327", %"class.GrVkInterface::VkPtr.328", %"class.GrVkInterface::VkPtr.329", %"class.GrVkInterface::VkPtr.330", %"class.GrVkInterface::VkPtr.331", %"class.GrVkInterface::VkPtr.332", %"class.GrVkInterface::VkPtr.333", %"class.GrVkInterface::VkPtr.334", %"class.GrVkInterface::VkPtr.335", %"class.GrVkInterface::VkPtr.336" }
%"class.GrVkInterface::VkPtr" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstance_T = type opaque
%"class.GrVkInterface::VkPtr.194" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.195" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.GrVkInterface::VkPtr.196" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.197" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.198" = type { i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.199" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.GrVkInterface::VkPtr.200" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.201" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%"class.GrVkInterface::VkPtr.202" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%"class.GrVkInterface::VkPtr.203" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.204" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.GrVkInterface::VkPtr.205" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.GrVkInterface::VkPtr.206" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.GrVkInterface::VkPtr.207" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.GrVkInterface::VkPtr.208" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%"class.GrVkInterface::VkPtr.209" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%"class.GrVkInterface::VkPtr.210" = type { i32 (%struct.VkQueue_T*)* }
%"class.GrVkInterface::VkPtr.211" = type { i32 (%struct.VkDevice_T*)* }
%"class.GrVkInterface::VkPtr.212" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.GrVkInterface::VkPtr.213" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.214" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.GrVkInterface::VkPtr.215" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.GrVkInterface::VkPtr.216" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.GrVkInterface::VkPtr.217" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* }
%"class.GrVkInterface::VkPtr.218" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.GrVkInterface::VkPtr.219" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.GrVkInterface::VkPtr.220" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.GrVkInterface::VkPtr.221" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.GrVkInterface::VkPtr.222" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%"class.GrVkInterface::VkPtr.223" = type { void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* }
%"class.GrVkInterface::VkPtr.224" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.225" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.226" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.227" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.GrVkInterface::VkPtr.228" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.GrVkInterface::VkPtr.229" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.GrVkInterface::VkPtr.230" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.231" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.232" = type { i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%"class.GrVkInterface::VkPtr.233" = type { void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.234" = type { i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* }
%"class.GrVkInterface::VkPtr.235" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%"class.GrVkInterface::VkPtr.236" = type { void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.237" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* }
%"class.GrVkInterface::VkPtr.238" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.GrVkInterface::VkPtr.239" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.240" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%"class.GrVkInterface::VkPtr.241" = type { void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.242" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.GrVkInterface::VkPtr.243" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.244" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.245" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.GrVkInterface::VkPtr.246" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.247" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%"class.GrVkInterface::VkPtr.248" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.249" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%"class.GrVkInterface::VkPtr.250" = type { void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.251" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* }
%"class.GrVkInterface::VkPtr.252" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* }
%"class.GrVkInterface::VkPtr.253" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkRenderPass_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.GrVkInterface::VkPtr.254" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%"class.GrVkInterface::VkPtr.255" = type { void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.256" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkPushConstantRange = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.257" = type { void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.258" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%"class.GrVkInterface::VkPtr.259" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.260" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%"class.GrVkInterface::VkPtr.261" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.262" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%"class.GrVkInterface::VkPtr.263" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.264" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.265" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%"class.GrVkInterface::VkPtr.266" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.GrVkInterface::VkPtr.267" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.268" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%"class.GrVkInterface::VkPtr.269" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.270" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.271" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.272" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* }
%"class.GrVkInterface::VkPtr.273" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%"class.GrVkInterface::VkPtr.274" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.275" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.276" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.GrVkInterface::VkPtr.277" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.278" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.279" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.280" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.281" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* }
%"class.GrVkInterface::VkPtr.282" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* }
%"class.GrVkInterface::VkPtr.283" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* }
%"class.GrVkInterface::VkPtr.284" = type { void (%struct.VkCommandBuffer_T*, float)* }
%"class.GrVkInterface::VkPtr.285" = type { void (%struct.VkCommandBuffer_T*, float, float, float)* }
%"class.GrVkInterface::VkPtr.286" = type { void (%struct.VkCommandBuffer_T*, float*)* }
%"class.GrVkInterface::VkPtr.287" = type { void (%struct.VkCommandBuffer_T*, float, float)* }
%"class.GrVkInterface::VkPtr.288" = type { void (%struct.VkCommandBuffer_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.289" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* }
%"class.GrVkInterface::VkPtr.290" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* }
%"class.GrVkInterface::VkPtr.291" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* }
%"class.GrVkInterface::VkPtr.292" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.293" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.294" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* }
%"class.GrVkInterface::VkPtr.295" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.296" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* }
%"class.GrVkInterface::VkPtr.297" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.GrVkInterface::VkPtr.298" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.299" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%"class.GrVkInterface::VkPtr.300" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.301" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* }
%"class.GrVkInterface::VkPtr.302" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* }
%"class.GrVkInterface::VkPtr.303" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.304" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* }
%union.VkClearColorValue = type { [4 x float] }
%"class.GrVkInterface::VkPtr.305" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* }
%struct.VkClearDepthStencilValue = type { float, i32 }
%"class.GrVkInterface::VkPtr.306" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%"class.GrVkInterface::VkPtr.307" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.308" = type { void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* }
%"class.GrVkInterface::VkPtr.309" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%"class.GrVkInterface::VkPtr.310" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%"class.GrVkInterface::VkPtr.312" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.311" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.313" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.314" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.315" = type { void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* }
%"class.GrVkInterface::VkPtr.316" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%"class.GrVkInterface::VkPtr.317" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.318" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.319" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.320" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%"class.GrVkInterface::VkPtr.321" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.GrVkInterface::VkPtr.322" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.GrVkInterface::VkPtr.323" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%"class.GrVkInterface::VkPtr.324" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%"class.GrVkInterface::VkPtr.325" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.GrVkInterface::VkPtr.326" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%"class.GrVkInterface::VkPtr.327" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.GrVkInterface::VkPtr.328" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%"class.GrVkInterface::VkPtr.329" = type { void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%"class.GrVkInterface::VkPtr.330" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.331" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.332" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.333" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.334" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.335" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.336" = type { void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* }
%class.sk_sp.337 = type { %class.GrVkMemoryAllocator* }
%class.GrVkMemoryAllocator = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.338 = type { %class.GrVkCaps* }
%class.GrVkCaps = type <{ %class.GrCaps.base, i8, [22 x %"struct.GrVkCaps::FormatInfo"], [31 x i32], i32, %class.SkSTArray.346, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, [2 x i8], i32, [4 x i8] }>
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.1, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%"struct.GrVkCaps::FormatInfo" = type <{ i16, i16, [4 x i8], %class.SkTDArray.339, %"class.std::__1::unique_ptr.340", i32, [4 x i8] }>
%class.SkTDArray.339 = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"struct.GrVkCaps::ColorTypeInfo"* }
%"struct.GrVkCaps::ColorTypeInfo" = type { i32, i32, i32, %class.GrSwizzle, %class.GrSwizzle }
%class.GrSwizzle = type { i16 }
%class.SkSTArray.346 = type { %class.SkAlignedSTStorage.347, %class.SkTArray.348 }
%class.SkAlignedSTStorage.347 = type { [48 x i8] }
%class.SkTArray.348 = type { %struct.GrVkYcbcrConversionInfo*, i64 }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.VkPhysicalDevice_T = type opaque
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%class.GrVkResourceProvider = type { %class.GrVkGpu*, %struct.VkPipelineCache_T*, %class.SkTArray.349, %class.SkSTArray.351, %class.SkTArray.357, %class.SkSTArray.358, %class.SkMutex, %class.SkSTArray.358, %class.SkTDynamicHash.361, %class.SkTDynamicHash.370, %class.sk_sp.379, %class.SkSTArray.388, %class.GrResourceHandle, %class.GrResourceHandle }
%class.SkTArray.349 = type { %"struct.GrVkResourceProvider::MSAALoadPipeline"*, i64 }
%"struct.GrVkResourceProvider::MSAALoadPipeline" = type { %class.sk_sp.350, %class.GrVkRenderPass* }
%class.sk_sp.350 = type { %class.GrVkPipeline* }
%class.GrVkPipeline = type opaque
%class.GrVkRenderPass = type <{ %class.GrVkManagedResource, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor", i32, i32, %struct.VkExtent2D, i32, i32, i32, [4 x i8] }>
%"struct.GrVkRenderPass::AttachmentsDescriptor" = type { %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc" = type { i32, i32, %"struct.GrVkRenderPass::LoadStoreOps" }
%"struct.GrVkRenderPass::LoadStoreOps" = type { i32, i32 }
%class.SkSTArray.351 = type { %class.SkAlignedSTStorage.352, %class.SkTArray.353 }
%class.SkAlignedSTStorage.352 = type { [224 x i8] }
%class.SkTArray.353 = type { %"class.GrVkResourceProvider::CompatibleRenderPassSet"*, i64 }
%"class.GrVkResourceProvider::CompatibleRenderPassSet" = type <{ %class.SkSTArray.354, i32, [4 x i8] }>
%class.SkSTArray.354 = type { %class.SkAlignedSTStorage.355, %class.SkTArray.356 }
%class.SkAlignedSTStorage.355 = type { [32 x i8] }
%class.SkTArray.356 = type { %class.GrVkRenderPass**, i64 }
%class.SkTArray.357 = type { %class.GrVkRenderPass**, i64 }
%class.SkSTArray.358 = type { %class.SkAlignedSTStorage.359, %class.SkTArray.360 }
%class.SkAlignedSTStorage.359 = type { [32 x i8] }
%class.SkTArray.360 = type { %class.GrVkCommandPool**, i64 }
%class.SkTDynamicHash.361 = type { %class.SkTHashTable.362 }
%class.SkTHashTable.362 = type { i32, i32, %class.SkAutoTArray.363 }
%class.SkAutoTArray.363 = type { %"class.std::__1::unique_ptr.364" }
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.370 = type { %class.SkTHashTable.371 }
%class.SkTHashTable.371 = type { i32, i32, %class.SkAutoTArray.372 }
%class.SkAutoTArray.372 = type { %"class.std::__1::unique_ptr.373" }
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot" = type opaque
%class.sk_sp.379 = type { %"class.GrVkResourceProvider::PipelineStateCache"* }
%"class.GrVkResourceProvider::PipelineStateCache" = type { %class.GrThreadSafePipelineBuilder.base, %class.SkLRUCache, %class.GrVkGpu* }
%class.GrThreadSafePipelineBuilder.base = type { %class.SkRefCnt.base, %"class.GrThreadSafePipelineBuilder::Stats" }
%"class.GrThreadSafePipelineBuilder::Stats" = type { i8 }
%class.SkLRUCache = type { i32, %class.SkTHashTable.380, %class.SkTInternalLList }
%class.SkTHashTable.380 = type { i32, i32, %class.SkAutoTArray.381 }
%class.SkAutoTArray.381 = type { %"class.std::__1::unique_ptr.382" }
%"class.std::__1::unique_ptr.382" = type { %"class.std::__1::__compressed_pair.383" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot"* }
%"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot" = type opaque
%class.SkTInternalLList = type { %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"*, %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"* }
%"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry" = type opaque
%class.SkSTArray.388 = type { %class.SkAlignedSTStorage.389, %class.SkTArray.390 }
%class.SkAlignedSTStorage.389 = type { [32 x i8] }
%class.SkTArray.390 = type { %"class.std::__1::unique_ptr.391"*, i64 }
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %class.GrVkDescriptorSetManager* }
%class.GrStagingBufferManager = type { %"class.std::__1::vector.397", %class.GrGpu* }
%"class.std::__1::vector.397" = type { %"class.std::__1::__vector_base.398" }
%"class.std::__1::__vector_base.398" = type { %"struct.GrStagingBufferManager::StagingBuffer"*, %"struct.GrStagingBufferManager::StagingBuffer"*, %"class.std::__1::__compressed_pair.400" }
%"struct.GrStagingBufferManager::StagingBuffer" = type { %class.sk_sp.399, i8*, i64 }
%class.sk_sp.399 = type { %class.GrGpuBuffer* }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"struct.GrStagingBufferManager::StagingBuffer"* }
%class.GrVkMSAALoadManager = type { %struct.VkShaderModule_T*, %struct.VkShaderModule_T*, [2 x %struct.VkPipelineShaderStageCreateInfo], %struct.VkPipelineLayout_T* }
%class.GrVkCommandPool = type opaque
%class.GrVkPrimaryCommandBuffer = type opaque
%class.SkSTArray.405 = type { %class.SkAlignedSTStorage.406, %class.SkTArray.407 }
%class.SkAlignedSTStorage.406 = type { [8 x i8] }
%class.SkTArray.407 = type { %"class.GrVkSemaphore::Resource"**, i64 }
%"class.GrVkSemaphore::Resource" = type <{ %class.GrVkManagedResource, %struct.VkSemaphore_T*, i8, i8, i8, [5 x i8] }>
%class.SkTArray.408 = type { %"class.std::__1::unique_ptr.409"*, i64 }
%"class.std::__1::unique_ptr.409" = type { %"class.std::__1::__compressed_pair.410" }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"class.SkDrawable::GpuDrawHandler"* }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.std::__1::unique_ptr.415" = type { %"class.std::__1::__compressed_pair.416" }
%"class.std::__1::__compressed_pair.416" = type { %"struct.std::__1::__compressed_pair_elem.417" }
%"struct.std::__1::__compressed_pair_elem.417" = type { %class.GrVkOpsRenderPass* }
%class.GrVkOpsRenderPass = type opaque
%struct.VkDescriptorSetLayout_T = type opaque
%class.SkSTArray.458 = type { %class.SkAlignedSTStorage.459, %class.SkTArray.424 }
%class.SkAlignedSTStorage.459 = type { [4 x i8] }
%class.GrVkUniformHandler = type <{ %class.GrGLSLUniformHandler, %class.GrTBlockList.539, %class.GrTBlockList.539, %class.SkTArray.541, %"struct.GrGLSLUniformHandler::UniformInfo", %class.GrSwizzle, i8, i8, [2 x i32], [4 x i8] }>
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrGLSLProgramBuilder = type { i32 (...)**, [8 x i8], %class.GrGLSLVertexBuilder, %class.GrGLSLGeometryBuilder, %class.GrGLSLFragmentShaderBuilder, i32, %class.GrProgramDesc*, %class.GrProgramInfo*, %struct.GrGLSLBuiltinUniformHandles, %"class.std::__1::unique_ptr.509", %"class.std::__1::unique_ptr.516", %"class.std::__1::vector.522", i32, %class.SkSTArray.536 }
%class.GrGLSLVertexBuilder = type { %class.GrGLSLVertexGeoBuilder.base, [12 x i8] }
%class.GrGLSLVertexGeoBuilder.base = type { %class.GrGLSLShaderBuilder.base }
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.460, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.462, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.471], i32, i8, [3 x i8], i32 }>
%class.SkSTArray.460 = type { %class.SkAlignedSTStorage.461, %class.SkTArray.81 }
%class.SkAlignedSTStorage.461 = type { [120 x i8] }
%class.SkSTArray.462 = type { %class.SkAlignedSTStorage.463, %class.SkTArray.464 }
%class.SkAlignedSTStorage.463 = type { [16 x i8] }
%class.SkTArray.464 = type { %"class.std::__1::unique_ptr.465"*, i64 }
%"class.std::__1::unique_ptr.465" = type { %"class.std::__1::__compressed_pair.466" }
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.471 = type { %class.SkAlignedSTStorage.472, %class.SkTArray.81 }
%class.SkAlignedSTStorage.472 = type { [8 x i8] }
%class.GrGLSLGeometryBuilder = type { %class.GrGLSLVertexGeoBuilder.base, i32, [8 x i8] }
%class.GrGLSLFragmentShaderBuilder = type <{ %class.GrGLSLFPFragmentBuilder.base, [4 x i8], %class.GrGLSLXPFragmentBuilder.base, %class.SkTArray.473, %class.SkString, %class.GrShaderVar*, i8, i8, i8, i8, [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLFPFragmentBuilder.base = type <{ i32 (...)**, [4 x i8] }>
%class.GrGLSLXPFragmentBuilder.base = type { i32 (...)** }
%class.SkTArray.473 = type { i32*, i64 }
%class.GrShaderVar = type { i32, i32, i32, %class.SkString, %class.SkString, %class.SkString }
%class.GrProgramDesc = type <{ %class.SkSTArray.474, i32, [4 x i8] }>
%class.SkSTArray.474 = type { %class.SkAlignedSTStorage.475, %class.SkTArray.476 }
%class.SkAlignedSTStorage.475 = type { [132 x i8] }
%class.SkTArray.476 = type { i32*, i64 }
%class.GrProgramInfo = type { i32, i8, %class.GrBackendFormat, i32, i8, %class.GrPipeline*, %struct.GrUserStencilSettings*, %class.GrGeometryProcessor*, i32, i8, i8, i32, i32 }
%class.GrBackendFormat = type { i32, i8, %union.anon.477, i32, [4 x i8] }
%union.anon.477 = type { %struct.anon.478 }
%struct.anon.478 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%class.GrPipeline = type <{ %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8], %class.GrWindowRectsState, i8, [7 x i8], %class.sk_sp.490, %class.SkAutoSTArray, i32, %class.GrSwizzle, [2 x i8] }>
%class.GrSurfaceProxyView = type <{ %class.sk_sp.480, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.480 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.481, %class.sk_sp.482, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.484" }
%class.SkNVRefCnt.481 = type { %"struct.std::__1::atomic" }
%class.sk_sp.482 = type { %class.GrSurface* }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.482, i32, i8, [3 x i8] }>
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.484" = type { %"struct.std::__1::__atomic_base.485" }
%"struct.std::__1::__atomic_base.485" = type { %"struct.std::__1::__atomic_base.486" }
%"struct.std::__1::__atomic_base.486" = type { %"struct.std::__1::__cxx_atomic_impl.487" }
%"struct.std::__1::__cxx_atomic_impl.487" = type { %"struct.std::__1::__cxx_atomic_base_impl.488" }
%"struct.std::__1::__cxx_atomic_base_impl.488" = type { i64 }
%struct.SkIPoint = type { i32, i32 }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.489 }
%union.anon.489 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef = type { i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.sk_sp.490 = type { %class.GrXferProcessor* }
%class.GrXferProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.491, i8, i8, [2 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.GrNonAtomicRef.491 = type { i32 }
%class.SkAutoSTArray = type { i32, %"class.std::__1::unique_ptr.492"*, [24 x i8] }
%"class.std::__1::unique_ptr.492" = type { %"class.std::__1::__compressed_pair.493" }
%"class.std::__1::__compressed_pair.493" = type { %"struct.std::__1::__compressed_pair_elem.494" }
%"struct.std::__1::__compressed_pair_elem.494" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.495, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.SkSTArray.495 = type { %class.SkAlignedSTStorage.496, %class.SkTArray.497 }
%class.SkAlignedSTStorage.496 = type { [8 x i8] }
%class.SkTArray.497 = type { %"class.std::__1::unique_ptr.498"*, i64 }
%"class.std::__1::unique_ptr.498" = type { %"class.std::__1::__compressed_pair.499" }
%"class.std::__1::__compressed_pair.499" = type { %"struct.std::__1::__compressed_pair_elem.500" }
%"struct.std::__1::__compressed_pair_elem.500" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.GrUserStencilSettings = type { [2 x i16], %struct.GrTStencilFaceSettings, [2 x i16], %struct.GrTStencilFaceSettings }
%struct.GrTStencilFaceSettings = type { i16, i16, i16, i8, i8, i16 }
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef.507, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrNonAtomicRef.507 = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%struct.GrGLSLBuiltinUniformHandles = type { %class.GrResourceHandle.508, %class.GrResourceHandle.508 }
%class.GrResourceHandle.508 = type { i32 }
%"class.std::__1::unique_ptr.509" = type { %"class.std::__1::__compressed_pair.510" }
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.511" }
%"struct.std::__1::__compressed_pair_elem.511" = type { %class.GrGLSLGeometryProcessor* }
%class.GrGLSLGeometryProcessor = type { i32 (...)**, %class.SkTArray.512 }
%class.SkTArray.512 = type { %"struct.GrGLSLGeometryProcessor::TransformInfo"*, i64 }
%"struct.GrGLSLGeometryProcessor::TransformInfo" = type { %class.GrShaderVar, %class.GrShaderVar, %class.GrFragmentProcessor* }
%"class.std::__1::unique_ptr.516" = type { %"class.std::__1::__compressed_pair.517" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %class.GrGLSLXferProcessor* }
%class.GrGLSLXferProcessor = type { i32 (...)**, %class.GrResourceHandle.508, %class.GrResourceHandle.508 }
%"class.std::__1::vector.522" = type { %"class.std::__1::__vector_base.523" }
%"class.std::__1::__vector_base.523" = type { %"class.std::__1::unique_ptr.524"*, %"class.std::__1::unique_ptr.524"*, %"class.std::__1::__compressed_pair.531" }
%"class.std::__1::unique_ptr.524" = type { %"class.std::__1::__compressed_pair.525" }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.526" }
%"struct.std::__1::__compressed_pair_elem.526" = type { %class.GrGLSLFragmentProcessor* }
%class.GrGLSLFragmentProcessor = type { i32 (...)**, %class.SkTArray.81, %class.SkTArray.527 }
%class.SkTArray.527 = type { %"class.std::__1::unique_ptr.524"*, i64 }
%"class.std::__1::__compressed_pair.531" = type { %"struct.std::__1::__compressed_pair_elem.532" }
%"struct.std::__1::__compressed_pair_elem.532" = type { %"class.std::__1::unique_ptr.524"* }
%class.SkSTArray.536 = type { %class.SkAlignedSTStorage.537, %class.SkTArray.538 }
%class.SkAlignedSTStorage.537 = type { [160 x i8] }
%class.SkTArray.538 = type { %class.GrShaderVar*, i64 }
%class.GrTBlockList.539 = type { %class.GrSBlockAllocator.540 }
%class.GrSBlockAllocator.540 = type { [128 x i8] }
%class.SkTArray.541 = type { %class.GrSwizzle*, i64 }
%"struct.GrGLSLUniformHandler::UniformInfo" = type { %class.GrShaderVar, i32, %class.GrFragmentProcessor*, %class.SkString }
%"class.GrBlockAllocator::Block" = type { %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"*, i32, i32, i32, i32 }
%class.GrManagedResource = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZN8SkTArrayIPK11GrVkSamplerLb0EE12checkReallocEiNS3_11ReallocTypeE = comdat any

$_ZN8SkTArrayIPK17GrVkDescriptorSetLb1EE12checkReallocEiNS3_11ReallocTypeE = comdat any

@.str = private unnamed_addr constant [63 x i8] c"../../third_party/skia/src/gpu/vk/GrVkDescriptorSetManager.cpp\00", align 1
@.str.1 = private unnamed_addr constant [90 x i8] c"Failed vulkan call. Error: %d,AllocateDescriptorSets(gpu->device(), &dsAllocateInfo, ds)\0A\00", align 1
@.str.2 = private unnamed_addr constant [124 x i8] c"Failed vulkan call. Error: %d,CreateDescriptorSetLayout(gpu->device(), &dsSamplerLayoutCreateInfo, nullptr, descSetLayout)\0A\00", align 1
@.str.3 = private unnamed_addr constant [122 x i8] c"Failed vulkan call. Error: %d,CreateDescriptorSetLayout(gpu->device(), &uniformLayoutCreateInfo, nullptr, descSetLayout)\0A\00", align 1
@.str.4 = private unnamed_addr constant [120 x i8] c"Failed vulkan call. Error: %d,CreateDescriptorSetLayout(gpu->device(), &inputLayoutCreateInfo, nullptr, descSetLayout)\0A\00", align 1

@_ZN24GrVkDescriptorSetManagerC1EP7GrVkGpu16VkDescriptorTypeP23VkDescriptorSetLayout_TjRK8SkTArrayIjLb0EERKS5_IPK11GrVkSamplerLb0EE = hidden unnamed_addr alias void (%class.GrVkDescriptorSetManager*, %class.GrVkGpu*, i32, %struct.VkDescriptorSetLayout_T*, i32, %class.SkTArray.424*, %class.SkTArray.427*), void (%class.GrVkDescriptorSetManager*, %class.GrVkGpu*, i32, %struct.VkDescriptorSetLayout_T*, i32, %class.SkTArray.424*, %class.SkTArray.427*)* @_ZN24GrVkDescriptorSetManagerC2EP7GrVkGpu16VkDescriptorTypeP23VkDescriptorSetLayout_TjRK8SkTArrayIjLb0EERKS5_IPK11GrVkSamplerLb0EE
@_ZN24GrVkDescriptorSetManager21DescriptorPoolManagerC1EP23VkDescriptorSetLayout_T16VkDescriptorTypej = hidden unnamed_addr alias void (%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"*, %struct.VkDescriptorSetLayout_T*, i32, i32), void (%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"*, %struct.VkDescriptorSetLayout_T*, i32, i32)* @_ZN24GrVkDescriptorSetManager21DescriptorPoolManagerC2EP23VkDescriptorSetLayout_T16VkDescriptorTypej

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager20CreateUniformManagerEP7GrVkGpu(%class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkSTArray.458, align 8
  %3 = alloca %class.SkTArray.427, align 8
  %4 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = bitcast %class.SkSTArray.458* %2 to i64*
  store i64 -6148914691236517206, i64* %5, align 8
  %6 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 8
  %7 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 16
  %8 = bitcast i8* %7 to i64*
  %9 = bitcast i8* %6 to i8**
  store i8* %4, i8** %9, align 8
  store i64 8589934592, i64* %8, align 8
  %10 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 3, i32 0
  %11 = bitcast %class.GrVkCaps** %10 to %class.GrCaps**
  %12 = load %class.GrCaps*, %class.GrCaps** %11, align 8
  %13 = getelementptr inbounds %class.GrCaps, %class.GrCaps* %12, i64 0, i32 2, i32 0
  %14 = load %class.GrShaderCaps*, %class.GrShaderCaps** %13, align 8
  %15 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %14, i64 0, i32 2
  %16 = bitcast i56* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, 2
  %19 = icmp eq i64 %18, 0
  %20 = select i1 %19, i32 17, i32 25
  %21 = bitcast i8* %6 to %class.SkTArray.424*
  call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.424* %21, i32 1, i32 1) #9
  %22 = bitcast i8* %6 to i32**
  %23 = load i32*, i32** %22, align 8
  %24 = load i64, i64* %8, align 8
  %25 = lshr i64 %24, 1
  %26 = and i64 %25, 2147483647
  %27 = getelementptr inbounds i32, i32* %23, i64 %26
  %28 = add i64 %24, 2
  %29 = and i64 %28, 4294967294
  %30 = and i64 %24, -4294967295
  %31 = or i64 %29, %30
  store i64 %31, i64* %8, align 8
  store i32 %20, i32* %27, align 4
  %32 = bitcast %class.SkTArray.427* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 0
  %34 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 1
  store %class.GrVkSampler** null, %class.GrVkSampler*** %33, align 8
  store i64 1, i64* %34, align 8
  %35 = call %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager6CreateEP7GrVkGpu16VkDescriptorTypeRK8SkTArrayIjLb0EERKS3_IPK11GrVkSamplerLb0EE(%class.GrVkGpu* %0, i32 6, %class.SkTArray.424* dereferenceable(16) %21, %class.SkTArray.427* nonnull dereferenceable(16) %3)
  call void @_Z7sk_freePv(i8* null) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  %36 = load i64, i64* %8, align 8
  %37 = and i64 %36, 1
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %1
  %40 = load i8*, i8** %9, align 8
  call void @_Z7sk_freePv(i8* %40) #9
  br label %41

41:                                               ; preds = %1, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret %class.GrVkDescriptorSetManager* %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager6CreateEP7GrVkGpu16VkDescriptorTypeRK8SkTArrayIjLb0EERKS3_IPK11GrVkSamplerLb0EE(%class.GrVkGpu*, i32, %class.SkTArray.424* nocapture readonly dereferenceable(16), %class.SkTArray.427* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.VkDescriptorSetLayoutCreateInfo, align 8
  %6 = alloca %struct.VkDescriptorSetLayoutBinding, align 8
  %7 = alloca %struct.VkDescriptorSetLayoutCreateInfo, align 8
  %8 = alloca %struct.VkDescriptorSetLayoutBinding, align 8
  %9 = alloca %struct.VkDescriptorSetLayoutCreateInfo, align 8
  %10 = alloca %struct.VkDescriptorSetLayout_T*, align 8
  %11 = bitcast %struct.VkDescriptorSetLayout_T** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #9
  store %struct.VkDescriptorSetLayout_T* inttoptr (i64 -6148914691236517206 to %struct.VkDescriptorSetLayout_T*), %struct.VkDescriptorSetLayout_T** %10, align 8
  %12 = icmp eq i32 %1, 1
  switch i32 %1, label %116 [
    i32 4, label %13
    i32 1, label %13
    i32 6, label %80
  ]

13:                                               ; preds = %4, %4
  %14 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  %19 = zext i32 %18 to i64
  %20 = mul nuw nsw i64 %19, 24
  %21 = tail call i8* @_Znam(i64 %20) #10
  %22 = bitcast i8* %21 to %struct.VkDescriptorSetLayoutBinding*
  %23 = icmp eq i32 %18, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %13
  %25 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 0
  %26 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 0
  %27 = load i32*, i32** %25, align 8
  br label %44

28:                                               ; preds = %62, %13
  %29 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #9
  %30 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %5 to i64*
  store i64 32, i64* %30, align 8
  %31 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %5, i64 0, i32 1
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %5, i64 0, i32 2
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %5, i64 0, i32 3
  store i32 %18, i32* %33, align 4
  %34 = select i1 %23, %struct.VkDescriptorSetLayoutBinding* null, %struct.VkDescriptorSetLayoutBinding* %22
  %35 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %5, i64 0, i32 4
  store %struct.VkDescriptorSetLayoutBinding* %34, %struct.VkDescriptorSetLayoutBinding** %35, align 8
  %36 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %37 = load %struct.GrVkInterface*, %struct.GrVkInterface** %36, align 8
  %38 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %37, i64 0, i32 1, i32 70, i32 0
  %39 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)** %38, align 8
  %40 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %41 = load %struct.VkDevice_T*, %struct.VkDevice_T** %40, align 8
  %42 = call i32 %39(%struct.VkDevice_T* %41, %struct.VkDescriptorSetLayoutCreateInfo* nonnull %5, %struct.VkAllocationCallbacks* null, %struct.VkDescriptorSetLayout_T** nonnull %10) #9
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %72, label %65

44:                                               ; preds = %62, %24
  %45 = phi i64 [ 0, %24 ], [ %63, %62 ]
  %46 = getelementptr inbounds i32, i32* %27, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %22, i64 %45, i32 0
  %49 = trunc i64 %45 to i32
  store i32 %49, i32* %48, align 8
  %50 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %22, i64 %45, i32 1
  store i32 %1, i32* %50, align 4
  %51 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %22, i64 %45, i32 2
  store i32 1, i32* %51, align 8
  %52 = and i32 %47, 25
  %53 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %22, i64 %45, i32 3
  store i32 %52, i32* %53, align 4
  br i1 %12, label %54, label %62

54:                                               ; preds = %44
  %55 = load %class.GrVkSampler**, %class.GrVkSampler*** %26, align 8
  %56 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %55, i64 %45
  %57 = load %class.GrVkSampler*, %class.GrVkSampler** %56, align 8
  %58 = icmp eq %class.GrVkSampler* %57, null
  %59 = getelementptr inbounds %class.GrVkSampler, %class.GrVkSampler* %57, i64 0, i32 1
  %60 = select i1 %58, %struct.VkSampler_T** null, %struct.VkSampler_T** %59
  %61 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %22, i64 %45, i32 4
  store %struct.VkSampler_T** %60, %struct.VkSampler_T*** %61, align 8
  br label %62

62:                                               ; preds = %54, %44
  %63 = add nuw nsw i64 %45, 1
  %64 = icmp eq i64 %63, %19
  br i1 %64, label %28, label %44

65:                                               ; preds = %28
  %66 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %67 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %66, align 8
  %68 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %67, i64 8
  %69 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %68, align 8
  %70 = call zeroext i1 %69(%class.GrVkGpu* %0) #9
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 116, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.2, i64 0, i64 0), i32 %42) #9
  br label %78

72:                                               ; preds = %28
  %73 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  %74 = load i64, i64* %14, align 8
  %75 = lshr i64 %74, 1
  %76 = trunc i64 %75 to i32
  %77 = and i32 %76, 2147483647
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  call void @_ZdaPv(i8* nonnull %21) #10
  br label %152

78:                                               ; preds = %71, %65
  %79 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %42) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #9
  call void @_ZdaPv(i8* nonnull %21) #10
  br label %157

80:                                               ; preds = %4
  %81 = bitcast %struct.VkDescriptorSetLayoutBinding* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #9
  %82 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %6, i64 0, i32 0
  %83 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %6, i64 0, i32 1
  %84 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %6, i64 0, i32 2
  %85 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %6, i64 0, i32 3
  %86 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %6, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %81, i8 -86, i64 24, i1 false) #9
  store i32 0, i32* %82, align 8
  store i32 6, i32* %83, align 4
  store i32 1, i32* %84, align 8
  %87 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 0
  %88 = load i32*, i32** %87, align 8
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 25
  store i32 %90, i32* %85, align 4
  store %struct.VkSampler_T** null, %struct.VkSampler_T*** %86, align 8
  %91 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %91) #9
  %92 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %7 to i64*
  store i64 -6148914694099828704, i64* %92, align 8
  %93 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %7, i64 0, i32 1
  store i8* null, i8** %93, align 8
  %94 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %7, i64 0, i32 2
  store i32 0, i32* %94, align 8
  %95 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %7, i64 0, i32 3
  store i32 1, i32* %95, align 4
  %96 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %7, i64 0, i32 4
  store %struct.VkDescriptorSetLayoutBinding* %6, %struct.VkDescriptorSetLayoutBinding** %96, align 8
  %97 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %98 = load %struct.GrVkInterface*, %struct.GrVkInterface** %97, align 8
  %99 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %98, i64 0, i32 1, i32 70, i32 0
  %100 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)** %99, align 8
  %101 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %102 = load %struct.VkDevice_T*, %struct.VkDevice_T** %101, align 8
  %103 = call i32 %100(%struct.VkDevice_T* %102, %struct.VkDescriptorSetLayoutCreateInfo* nonnull %7, %struct.VkAllocationCallbacks* null, %struct.VkDescriptorSetLayout_T** nonnull %10) #9
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %80
  %106 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %107 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %106, align 8
  %108 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %107, i64 8
  %109 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %108, align 8
  %110 = call zeroext i1 %109(%class.GrVkGpu* %0) #9
  br i1 %110, label %114, label %111

111:                                              ; preds = %105
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.3, i64 0, i64 0), i32 %103) #9
  br label %114

112:                                              ; preds = %80
  %113 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %91) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #9
  br label %152

114:                                              ; preds = %111, %105
  %115 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %103) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %91) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #9
  br label %157

116:                                              ; preds = %4
  %117 = bitcast %struct.VkDescriptorSetLayoutBinding* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %117) #9
  %118 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %8, i64 0, i32 0
  %119 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %8, i64 0, i32 1
  %120 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %8, i64 0, i32 2
  %121 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %8, i64 0, i32 3
  %122 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %8, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 -86, i64 24, i1 false) #9
  store i32 0, i32* %118, align 8
  store i32 10, i32* %119, align 4
  store i32 1, i32* %120, align 8
  %123 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 0
  %124 = load i32*, i32** %123, align 8
  %125 = load i32, i32* %124, align 4
  %126 = and i32 %125, 25
  store i32 %126, i32* %121, align 4
  store %struct.VkSampler_T** null, %struct.VkSampler_T*** %122, align 8
  %127 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %127) #9
  %128 = bitcast %struct.VkDescriptorSetLayoutCreateInfo* %9 to i64*
  store i64 -6148914694099828704, i64* %128, align 8
  %129 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %9, i64 0, i32 1
  store i8* null, i8** %129, align 8
  %130 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %9, i64 0, i32 2
  store i32 0, i32* %130, align 8
  %131 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %9, i64 0, i32 3
  store i32 1, i32* %131, align 4
  %132 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %9, i64 0, i32 4
  store %struct.VkDescriptorSetLayoutBinding* %8, %struct.VkDescriptorSetLayoutBinding** %132, align 8
  %133 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %134 = load %struct.GrVkInterface*, %struct.GrVkInterface** %133, align 8
  %135 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %134, i64 0, i32 1, i32 70, i32 0
  %136 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)** %135, align 8
  %137 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %138 = load %struct.VkDevice_T*, %struct.VkDevice_T** %137, align 8
  %139 = call i32 %136(%struct.VkDevice_T* %138, %struct.VkDescriptorSetLayoutCreateInfo* nonnull %9, %struct.VkAllocationCallbacks* null, %struct.VkDescriptorSetLayout_T** nonnull %10) #9
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %148, label %141

141:                                              ; preds = %116
  %142 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %143 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %142, align 8
  %144 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %143, i64 8
  %145 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %144, align 8
  %146 = call zeroext i1 %145(%class.GrVkGpu* %0) #9
  br i1 %146, label %150, label %147

147:                                              ; preds = %141
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 182, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.4, i64 0, i64 0), i32 %139) #9
  br label %150

148:                                              ; preds = %116
  %149 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %127) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117) #9
  br label %152

150:                                              ; preds = %147, %141
  %151 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %139) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %127) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117) #9
  br label %157

152:                                              ; preds = %148, %112, %72
  %153 = phi i32 [ %77, %72 ], [ 1, %112 ], [ 1, %148 ]
  %154 = call i8* @_Znwm(i64 128) #10
  %155 = bitcast i8* %154 to %class.GrVkDescriptorSetManager*
  %156 = load %struct.VkDescriptorSetLayout_T*, %struct.VkDescriptorSetLayout_T** %10, align 8
  call void @_ZN24GrVkDescriptorSetManagerC2EP7GrVkGpu16VkDescriptorTypeP23VkDescriptorSetLayout_TjRK8SkTArrayIjLb0EERKS5_IPK11GrVkSamplerLb0EE(%class.GrVkDescriptorSetManager* nonnull %155, %class.GrVkGpu* undef, i32 %1, %struct.VkDescriptorSetLayout_T* %156, i32 %153, %class.SkTArray.424* dereferenceable(16) %2, %class.SkTArray.427* dereferenceable(16) %3)
  br label %157

157:                                              ; preds = %150, %114, %78, %152
  %158 = phi %class.GrVkDescriptorSetManager* [ %155, %152 ], [ null, %78 ], [ null, %114 ], [ null, %150 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #9
  ret %class.GrVkDescriptorSetManager* %158
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager20CreateSamplerManagerEP7GrVkGpu16VkDescriptorTypeRK18GrVkUniformHandler(%class.GrVkGpu*, i32, %class.GrVkUniformHandler* nocapture readonly dereferenceable(368)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkSTArray.422, align 8
  %5 = alloca %class.SkSTArray.425, align 8
  %6 = getelementptr inbounds %class.SkSTArray.422, %class.SkSTArray.422* %4, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  %7 = getelementptr inbounds %class.SkSTArray.422, %class.SkSTArray.422* %4, i64 0, i32 0, i32 0, i64 16
  %8 = getelementptr inbounds %class.SkSTArray.422, %class.SkSTArray.422* %4, i64 0, i32 0, i32 0, i64 24
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %7 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  store i8* %6, i8** %10, align 8
  store i64 34359738368, i64* %9, align 8
  %11 = getelementptr inbounds %class.SkSTArray.425, %class.SkSTArray.425* %5, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = getelementptr inbounds %class.SkSTArray.425, %class.SkSTArray.425* %5, i64 0, i32 0, i32 0, i64 32
  %13 = getelementptr inbounds %class.SkSTArray.425, %class.SkSTArray.425* %5, i64 0, i32 0, i32 0, i64 40
  %14 = bitcast i8* %13 to i64*
  %15 = bitcast i8* %12 to i8**
  store i8* %11, i8** %15, align 8
  store i64 34359738368, i64* %14, align 8
  %16 = getelementptr inbounds %class.GrVkUniformHandler, %class.GrVkUniformHandler* %2, i64 0, i32 2, i32 0, i32 0, i64 44
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 0
  %20 = bitcast i8* %7 to %class.SkTArray.424*
  br i1 %19, label %23, label %21

21:                                               ; preds = %3
  %22 = bitcast i8* %12 to %class.SkTArray.427*
  br label %30

23:                                               ; preds = %3
  %24 = getelementptr inbounds %class.GrVkUniformHandler, %class.GrVkUniformHandler* %2, i64 0, i32 2, i32 0, i32 0, i64 16
  %25 = bitcast i8* %24 to %"class.GrBlockAllocator::Block"**
  %26 = bitcast i8* %24 to %"class.GrBlockAllocator::Block"*
  %27 = bitcast i8* %7 to i32**
  %28 = bitcast i8* %12 to %class.SkTArray.427*
  %29 = bitcast i8* %12 to %class.GrVkSampler***
  br label %45

30:                                               ; preds = %114, %21
  %31 = phi %class.SkTArray.427* [ %22, %21 ], [ %28, %114 ]
  %32 = call %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager6CreateEP7GrVkGpu16VkDescriptorTypeRK8SkTArrayIjLb0EERKS3_IPK11GrVkSamplerLb0EE(%class.GrVkGpu* %0, i32 %1, %class.SkTArray.424* dereferenceable(16) %20, %class.SkTArray.427* dereferenceable(16) %31)
  %33 = load i64, i64* %14, align 8
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %30
  %37 = load i8*, i8** %15, align 8
  call void @_Z7sk_freePv(i8* %37) #9
  br label %38

38:                                               ; preds = %30, %36
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #9
  %39 = load i64, i64* %9, align 8
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = load i8*, i8** %10, align 8
  call void @_Z7sk_freePv(i8* %43) #9
  br label %44

44:                                               ; preds = %38, %42
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret %class.GrVkDescriptorSetManager* %32

45:                                               ; preds = %23, %114
  %46 = phi i32 [ 0, %23 ], [ %130, %114 ]
  br label %47

47:                                               ; preds = %68, %45
  %48 = phi i32 [ %69, %68 ], [ %46, %45 ]
  %49 = phi %"class.GrBlockAllocator::Block"** [ %71, %68 ], [ %25, %45 ]
  %50 = phi %"class.GrBlockAllocator::Block"* [ %52, %68 ], [ %26, %45 ]
  %51 = phi i8* [ %53, %68 ], [ %24, %45 ]
  %52 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %49, align 8
  %53 = bitcast %"class.GrBlockAllocator::Block"* %52 to i8*
  %54 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %50, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %47
  %58 = add i32 %55, 80
  %59 = mul i32 %48, 80
  %60 = add i32 %59, 32
  %61 = icmp slt i32 %60, %58
  br i1 %61, label %73, label %62

62:                                               ; preds = %57
  %63 = add i32 %55, 48
  %64 = sext i32 %63 to i64
  %65 = udiv i64 %64, 80
  %66 = trunc i64 %65 to i32
  %67 = sub i32 %48, %66
  br label %68

68:                                               ; preds = %62, %47
  %69 = phi i32 [ %67, %62 ], [ %48, %47 ]
  %70 = icmp eq %"class.GrBlockAllocator::Block"* %52, null
  %71 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %52, i64 0, i32 0
  br i1 %70, label %72, label %47

72:                                               ; preds = %68
  call void @llvm.trap() #9
  unreachable

73:                                               ; preds = %57
  %74 = sext i32 %60 to i64
  %75 = getelementptr inbounds i8, i8* %51, i64 40
  %76 = getelementptr inbounds i8, i8* %75, i64 %74
  %77 = bitcast i8* %76 to i32*
  %78 = load i32, i32* %77, align 8
  call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.424* %20, i32 1, i32 1) #9
  %79 = load i32*, i32** %27, align 8
  %80 = load i64, i64* %9, align 8
  %81 = lshr i64 %80, 1
  %82 = and i64 %81, 2147483647
  %83 = getelementptr inbounds i32, i32* %79, i64 %82
  %84 = add i64 %80, 2
  %85 = and i64 %84, 4294967294
  %86 = and i64 %80, -4294967295
  %87 = or i64 %85, %86
  store i64 %87, i64* %9, align 8
  store i32 %78, i32* %83, align 4
  br label %88

88:                                               ; preds = %109, %73
  %89 = phi i32 [ %110, %109 ], [ %46, %73 ]
  %90 = phi %"class.GrBlockAllocator::Block"** [ %112, %109 ], [ %25, %73 ]
  %91 = phi %"class.GrBlockAllocator::Block"* [ %93, %109 ], [ %26, %73 ]
  %92 = phi i8* [ %94, %109 ], [ %24, %73 ]
  %93 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %90, align 8
  %94 = bitcast %"class.GrBlockAllocator::Block"* %93 to i8*
  %95 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %91, i64 0, i32 4
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %88
  %99 = add i32 %96, 80
  %100 = mul i32 %89, 80
  %101 = add i32 %100, 32
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %114, label %103

103:                                              ; preds = %98
  %104 = add i32 %96, 48
  %105 = sext i32 %104 to i64
  %106 = udiv i64 %105, 80
  %107 = trunc i64 %106 to i32
  %108 = sub i32 %89, %107
  br label %109

109:                                              ; preds = %103, %88
  %110 = phi i32 [ %108, %103 ], [ %89, %88 ]
  %111 = icmp eq %"class.GrBlockAllocator::Block"* %93, null
  %112 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %93, i64 0, i32 0
  br i1 %111, label %113, label %88

113:                                              ; preds = %109
  call void @llvm.trap() #9
  unreachable

114:                                              ; preds = %98
  %115 = sext i32 %101 to i64
  %116 = getelementptr inbounds i8, i8* %92, i64 72
  %117 = getelementptr inbounds i8, i8* %116, i64 %115
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 8
  call void @_ZN8SkTArrayIPK11GrVkSamplerLb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.427* %28, i32 1, i32 1) #9
  %120 = load %class.GrVkSampler**, %class.GrVkSampler*** %29, align 8
  %121 = load i64, i64* %14, align 8
  %122 = lshr i64 %121, 1
  %123 = and i64 %122, 2147483647
  %124 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %120, i64 %123
  %125 = add i64 %121, 2
  %126 = and i64 %125, 4294967294
  %127 = and i64 %121, -4294967295
  %128 = or i64 %126, %127
  store i64 %128, i64* %14, align 8
  %129 = bitcast %class.GrVkSampler** %124 to i64*
  store i64 %119, i64* %129, align 8
  %130 = add nuw nsw i32 %46, 1
  %131 = load i32, i32* %17, align 4
  %132 = icmp slt i32 %130, %131
  br i1 %132, label %45, label %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager24CreateZeroSamplerManagerEP7GrVkGpu(%class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkTArray.424, align 8
  %3 = alloca %class.SkTArray.427, align 8
  %4 = bitcast %class.SkTArray.424* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #9
  %5 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 0
  %6 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %2, i64 0, i32 1
  store i32* null, i32** %5, align 8
  store i64 1, i64* %6, align 8
  %7 = bitcast %class.SkTArray.427* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #9
  %8 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 0
  %9 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 1
  store %class.GrVkSampler** null, %class.GrVkSampler*** %8, align 8
  store i64 1, i64* %9, align 8
  %10 = call %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager6CreateEP7GrVkGpu16VkDescriptorTypeRK8SkTArrayIjLb0EERKS3_IPK11GrVkSamplerLb0EE(%class.GrVkGpu* %0, i32 1, %class.SkTArray.424* nonnull dereferenceable(16) %2, %class.SkTArray.427* nonnull dereferenceable(16) %3)
  tail call void @_Z7sk_freePv(i8* null) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #9
  tail call void @_Z7sk_freePv(i8* null) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #9
  ret %class.GrVkDescriptorSetManager* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager18CreateInputManagerEP7GrVkGpu(%class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkSTArray.458, align 8
  %3 = alloca %class.SkTArray.427, align 8
  %4 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = bitcast %class.SkSTArray.458* %2 to i64*
  store i64 -6148914691236517206, i64* %5, align 8
  %6 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 8
  %7 = getelementptr inbounds %class.SkSTArray.458, %class.SkSTArray.458* %2, i64 0, i32 0, i32 0, i64 16
  %8 = bitcast i8* %7 to i64*
  %9 = bitcast i8* %6 to i8**
  store i8* %4, i8** %9, align 8
  store i64 8589934592, i64* %8, align 8
  %10 = bitcast i8* %6 to %class.SkTArray.424*
  call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.424* %10, i32 1, i32 1) #9
  %11 = bitcast i8* %6 to i32**
  %12 = load i32*, i32** %11, align 8
  %13 = load i64, i64* %8, align 8
  %14 = lshr i64 %13, 1
  %15 = and i64 %14, 2147483647
  %16 = getelementptr inbounds i32, i32* %12, i64 %15
  %17 = add i64 %13, 2
  %18 = and i64 %17, 4294967294
  %19 = and i64 %13, -4294967295
  %20 = or i64 %18, %19
  store i64 %20, i64* %8, align 8
  store i32 16, i32* %16, align 4
  %21 = bitcast %class.SkTArray.427* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #9
  %22 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 0
  %23 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %3, i64 0, i32 1
  store %class.GrVkSampler** null, %class.GrVkSampler*** %22, align 8
  store i64 1, i64* %23, align 8
  %24 = call %class.GrVkDescriptorSetManager* @_ZN24GrVkDescriptorSetManager6CreateEP7GrVkGpu16VkDescriptorTypeRK8SkTArrayIjLb0EERKS3_IPK11GrVkSamplerLb0EE(%class.GrVkGpu* %0, i32 10, %class.SkTArray.424* dereferenceable(16) %10, %class.SkTArray.427* nonnull dereferenceable(16) %3)
  call void @_Z7sk_freePv(i8* null) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #9
  %25 = load i64, i64* %8, align 8
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %1
  %29 = load i8*, i8** %9, align 8
  call void @_Z7sk_freePv(i8* %29) #9
  br label %30

30:                                               ; preds = %1, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret %class.GrVkDescriptorSetManager* %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z28visibility_to_vk_stage_flagsj(i32) local_unnamed_addr #2 {
  %2 = and i32 %0, 25
  ret i32 %2
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkDescriptorSetManagerC2EP7GrVkGpu16VkDescriptorTypeP23VkDescriptorSetLayout_TjRK8SkTArrayIjLb0EERKS5_IPK11GrVkSamplerLb0EE(%class.GrVkDescriptorSetManager*, %class.GrVkGpu* nocapture readnone, i32, %struct.VkDescriptorSetLayout_T*, i32, %class.SkTArray.424* nocapture readonly dereferenceable(16), %class.SkTArray.427* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 0
  store %struct.VkDescriptorSetLayout_T* %3, %struct.VkDescriptorSetLayout_T** %8, align 8
  %9 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 1
  store i32 %2, i32* %9, align 8
  %10 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 2
  store i32 %4, i32* %10, align 4
  %11 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 3
  store i32 16, i32* %11, align 8
  %12 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 4
  %13 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1, i32 1
  %14 = bitcast i32* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 20, i1 false)
  store i64 1, i64* %13, align 8
  %15 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 16
  %16 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 0
  %17 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 24
  %18 = bitcast i8* %17 to i64*
  %19 = bitcast i8* %15 to i8**
  store i8* %16, i8** %19, align 8
  store i64 34359738368, i64* %18, align 8
  %20 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 32
  %21 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 0
  %22 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 40
  %23 = bitcast i8* %22 to i64*
  %24 = bitcast i8* %20 to i8**
  store i8* %21, i8** %24, align 8
  store i64 34359738368, i64* %23, align 8
  %25 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %5, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %7
  %30 = bitcast i8* %15 to %class.SkTArray.424*
  %31 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %5, i64 0, i32 0
  %32 = bitcast i8* %15 to i32**
  br label %42

33:                                               ; preds = %42, %7
  %34 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %6, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, 4294967294
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %61, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %6, i64 0, i32 0
  %40 = bitcast i8* %20 to %class.SkTArray.427*
  %41 = bitcast i8* %20 to %class.GrVkSampler***
  br label %62

42:                                               ; preds = %29, %42
  %43 = phi i64 [ 0, %29 ], [ %56, %42 ]
  %44 = load i32*, i32** %31, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %43
  tail call void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.424* %30, i32 1, i32 1) #9
  %46 = load i32*, i32** %32, align 8
  %47 = load i64, i64* %18, align 8
  %48 = lshr i64 %47, 1
  %49 = and i64 %48, 2147483647
  %50 = getelementptr inbounds i32, i32* %46, i64 %49
  %51 = add i64 %47, 2
  %52 = and i64 %51, 4294967294
  %53 = and i64 %47, -4294967295
  %54 = or i64 %52, %53
  store i64 %54, i64* %18, align 8
  %55 = load i32, i32* %45, align 4
  store i32 %55, i32* %50, align 4
  %56 = add nuw nsw i64 %43, 1
  %57 = load i64, i64* %25, align 8
  %58 = lshr i64 %57, 1
  %59 = and i64 %58, 2147483647
  %60 = icmp ult i64 %56, %59
  br i1 %60, label %42, label %33

61:                                               ; preds = %72, %33
  ret void

62:                                               ; preds = %38, %72
  %63 = phi i64 [ 0, %38 ], [ %83, %72 ]
  %64 = load %class.GrVkSampler**, %class.GrVkSampler*** %39, align 8
  %65 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %64, i64 %63
  %66 = load %class.GrVkSampler*, %class.GrVkSampler** %65, align 8
  %67 = ptrtoint %class.GrVkSampler* %66 to i64
  %68 = icmp eq %class.GrVkSampler* %66, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %class.GrVkSampler, %class.GrVkSampler* %66, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = atomicrmw add i32* %70, i32 1 monotonic
  br label %72

72:                                               ; preds = %62, %69
  tail call void @_ZN8SkTArrayIPK11GrVkSamplerLb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.427* %40, i32 1, i32 1) #9
  %73 = load %class.GrVkSampler**, %class.GrVkSampler*** %41, align 8
  %74 = load i64, i64* %23, align 8
  %75 = lshr i64 %74, 1
  %76 = and i64 %75, 2147483647
  %77 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %73, i64 %76
  %78 = add i64 %74, 2
  %79 = and i64 %78, 4294967294
  %80 = and i64 %74, -4294967295
  %81 = or i64 %79, %80
  store i64 %81, i64* %23, align 8
  %82 = bitcast %class.GrVkSampler** %77 to i64*
  store i64 %67, i64* %82, align 8
  %83 = add nuw nsw i64 %63, 1
  %84 = load i64, i64* %34, align 8
  %85 = lshr i64 %84, 1
  %86 = and i64 %85, 2147483647
  %87 = icmp ult i64 %83, %86
  br i1 %87, label %62, label %61
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrVkDescriptorSet* @_ZN24GrVkDescriptorSetManager16getDescriptorSetEP7GrVkGpuRK16GrResourceHandleINS_10HandleKindEE(%class.GrVkDescriptorSetManager*, %class.GrVkGpu*, %class.GrResourceHandle* nocapture readonly dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkDescriptorSet_T*, align 8
  %5 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 1
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2147483647
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %22, label %11

11:                                               ; preds = %3
  %12 = add nsw i32 %9, -1
  %13 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1, i32 0
  %14 = load %class.GrVkDescriptorSet**, %class.GrVkDescriptorSet*** %13, align 8
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds %class.GrVkDescriptorSet*, %class.GrVkDescriptorSet** %14, i64 %15
  %17 = load %class.GrVkDescriptorSet*, %class.GrVkDescriptorSet** %16, align 8
  %18 = shl i32 %12, 1
  %19 = zext i32 %18 to i64
  %20 = and i64 %6, -4294967295
  %21 = or i64 %20, %19
  store i64 %21, i64* %5, align 8
  br label %35

22:                                               ; preds = %3
  %23 = bitcast %struct.VkDescriptorSet_T** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #9
  store %struct.VkDescriptorSet_T* inttoptr (i64 -6148914691236517206 to %struct.VkDescriptorSet_T*), %struct.VkDescriptorSet_T** %4, align 8
  %24 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0
  %25 = call zeroext i1 @_ZN24GrVkDescriptorSetManager21DescriptorPoolManager19getNewDescriptorSetEP7GrVkGpuPP17VkDescriptorSet_T(%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %24, %class.GrVkGpu* %1, %struct.VkDescriptorSet_T** nonnull %4)
  br i1 %25, label %26, label %34

26:                                               ; preds = %22
  %27 = call i8* @_Znwm(i64 48) #10
  %28 = bitcast i8* %27 to %class.GrVkDescriptorSet*
  %29 = load %struct.VkDescriptorSet_T*, %struct.VkDescriptorSet_T** %4, align 8
  %30 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 5
  %31 = load %class.GrVkDescriptorPool*, %class.GrVkDescriptorPool** %30, align 8
  %32 = getelementptr inbounds %class.GrResourceHandle, %class.GrResourceHandle* %2, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  call void @_ZN17GrVkDescriptorSetC1EP7GrVkGpuP17VkDescriptorSet_TP18GrVkDescriptorPool16GrResourceHandleIN24GrVkDescriptorSetManager10HandleKindEE(%class.GrVkDescriptorSet* nonnull %28, %class.GrVkGpu* %1, %struct.VkDescriptorSet_T* %29, %class.GrVkDescriptorPool* %31, i32 %33) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #9
  br label %35

34:                                               ; preds = %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #9
  br label %35

35:                                               ; preds = %11, %26, %34
  %36 = phi %class.GrVkDescriptorSet* [ null, %34 ], [ %17, %11 ], [ %28, %26 ]
  ret %class.GrVkDescriptorSet* %36
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24GrVkDescriptorSetManager21DescriptorPoolManager19getNewDescriptorSetEP7GrVkGpuPP17VkDescriptorSet_T(%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"*, %class.GrVkGpu*, %struct.VkDescriptorSet_T**) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkDescriptorSetAllocateInfo, align 8
  %5 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %78, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, %10
  store i32 %13, i32* %11, align 4
  %14 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 5
  %15 = load %class.GrVkDescriptorPool*, %class.GrVkDescriptorPool** %14, align 8
  %16 = icmp eq %class.GrVkDescriptorPool* %15, null
  br i1 %16, label %39, label %17

17:                                               ; preds = %8
  %18 = icmp ugt i32 %13, %6
  br i1 %18, label %19, label %48

19:                                               ; preds = %17
  %20 = bitcast %class.GrVkDescriptorPool* %15 to %class.GrManagedResource*
  %21 = getelementptr inbounds %class.GrVkDescriptorPool, %class.GrVkDescriptorPool* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %19
  %25 = bitcast %class.GrVkDescriptorPool* %15 to void (%class.GrManagedResource*)***
  %26 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %25, align 8
  %27 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %26, i64 4
  %28 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %27, align 8
  tail call void %28(%class.GrManagedResource* nonnull %20) #9
  %29 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %25, align 8
  %30 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %29, i64 1
  %31 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %30, align 8
  tail call void %31(%class.GrManagedResource* nonnull %20) #9
  br label %32

32:                                               ; preds = %24, %19
  %33 = load i32, i32* %5, align 8
  %34 = add i32 %33, 1
  %35 = lshr i32 %34, 1
  %36 = add i32 %35, %33
  %37 = icmp ult i32 %36, 1024
  %38 = select i1 %37, i32 %36, i32 1024
  store i32 %38, i32* %5, align 8
  br label %39

39:                                               ; preds = %8, %32
  %40 = phi i32 [ %38, %32 ], [ %6, %8 ]
  %41 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 9
  %42 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = tail call %class.GrVkDescriptorPool* @_ZN20GrVkResourceProvider36findOrCreateCompatibleDescriptorPoolE16VkDescriptorTypej(%class.GrVkResourceProvider* %41, i32 %43, i32 %40) #9
  store %class.GrVkDescriptorPool* %44, %class.GrVkDescriptorPool** %14, align 8
  %45 = icmp eq %class.GrVkDescriptorPool* %44, null
  br i1 %45, label %78, label %46

46:                                               ; preds = %39
  %47 = load i32, i32* %9, align 4
  store i32 %47, i32* %11, align 4
  br label %48

48:                                               ; preds = %46, %17
  %49 = phi %class.GrVkDescriptorPool* [ %44, %46 ], [ %15, %17 ]
  %50 = bitcast %struct.VkDescriptorSetAllocateInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %50) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 0, i64 40, i1 false)
  %51 = getelementptr inbounds %struct.VkDescriptorSetAllocateInfo, %struct.VkDescriptorSetAllocateInfo* %4, i64 0, i32 0
  store i32 34, i32* %51, align 8
  %52 = getelementptr inbounds %struct.VkDescriptorSetAllocateInfo, %struct.VkDescriptorSetAllocateInfo* %4, i64 0, i32 1
  store i8* null, i8** %52, align 8
  %53 = getelementptr inbounds %class.GrVkDescriptorPool, %class.GrVkDescriptorPool* %49, i64 0, i32 3
  %54 = bitcast %struct.VkDescriptorPool_T** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.VkDescriptorSetAllocateInfo, %struct.VkDescriptorSetAllocateInfo* %4, i64 0, i32 2
  %57 = bitcast %struct.VkDescriptorPool_T** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %struct.VkDescriptorSetAllocateInfo, %struct.VkDescriptorSetAllocateInfo* %4, i64 0, i32 3
  store i32 1, i32* %58, align 8
  %59 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 0
  %60 = getelementptr inbounds %struct.VkDescriptorSetAllocateInfo, %struct.VkDescriptorSetAllocateInfo* %4, i64 0, i32 4
  store %struct.VkDescriptorSetLayout_T** %59, %struct.VkDescriptorSetLayout_T*** %60, align 8
  %61 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %62 = load %struct.GrVkInterface*, %struct.GrVkInterface** %61, align 8
  %63 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %62, i64 0, i32 1, i32 75, i32 0
  %64 = load i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)*, i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)** %63, align 8
  %65 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %66 = load %struct.VkDevice_T*, %struct.VkDevice_T** %65, align 8
  %67 = call i32 %64(%struct.VkDevice_T* %66, %struct.VkDescriptorSetAllocateInfo* nonnull %4, %struct.VkDescriptorSet_T** %2) #9
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %48
  %70 = bitcast %class.GrVkGpu* %1 to i1 (%class.GrVkGpu*)***
  %71 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %70, align 8
  %72 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %71, i64 8
  %73 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %72, align 8
  %74 = call zeroext i1 %73(%class.GrVkGpu* %1) #9
  br i1 %74, label %76, label %75

75:                                               ; preds = %69
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.1, i64 0, i64 0), i32 %67) #9
  br label %76

76:                                               ; preds = %48, %75, %69
  %77 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %1, i32 %67) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %50) #9
  br label %78

78:                                               ; preds = %39, %3, %76
  %79 = phi i1 [ %68, %76 ], [ false, %3 ], [ false, %39 ]
  ret i1 %79
}

declare void @_ZN17GrVkDescriptorSetC1EP7GrVkGpuP17VkDescriptorSet_TP18GrVkDescriptorPool16GrResourceHandleIN24GrVkDescriptorSetManager10HandleKindEE(%class.GrVkDescriptorSet*, %class.GrVkGpu*, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, i32) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkDescriptorSetManager20recycleDescriptorSetEPK17GrVkDescriptorSet(%class.GrVkDescriptorSetManager*, %class.GrVkDescriptorSet*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %class.GrVkDescriptorSet* %1 to i64
  %4 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1
  tail call void @_ZN8SkTArrayIPK17GrVkDescriptorSetLb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.421* %4, i32 1, i32 1) #9
  %5 = getelementptr inbounds %class.SkTArray.421, %class.SkTArray.421* %4, i64 0, i32 0
  %6 = load %class.GrVkDescriptorSet**, %class.GrVkDescriptorSet*** %5, align 8
  %7 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = lshr i64 %8, 1
  %10 = and i64 %9, 2147483647
  %11 = getelementptr inbounds %class.GrVkDescriptorSet*, %class.GrVkDescriptorSet** %6, i64 %10
  %12 = add i64 %8, 2
  %13 = and i64 %12, 4294967294
  %14 = and i64 %8, -4294967295
  %15 = or i64 %13, %14
  store i64 %15, i64* %7, align 8
  %16 = bitcast %class.GrVkDescriptorSet** %11 to i64*
  store i64 %3, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkDescriptorSetManager7releaseEP7GrVkGpu(%class.GrVkDescriptorSetManager*, %class.GrVkGpu* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 0
  %4 = load %struct.VkDescriptorSetLayout_T*, %struct.VkDescriptorSetLayout_T** %3, align 8
  %5 = icmp eq %struct.VkDescriptorSetLayout_T* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 71, i32 0
  %10 = load void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  tail call void %10(%struct.VkDevice_T* %12, %struct.VkDescriptorSetLayout_T* nonnull %4, %struct.VkAllocationCallbacks* null) #9
  store %struct.VkDescriptorSetLayout_T* null, %struct.VkDescriptorSetLayout_T** %3, align 8
  br label %13

13:                                               ; preds = %6, %2
  %14 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 5
  %15 = load %class.GrVkDescriptorPool*, %class.GrVkDescriptorPool** %14, align 8
  %16 = icmp eq %class.GrVkDescriptorPool* %15, null
  br i1 %16, label %31, label %17

17:                                               ; preds = %13
  %18 = bitcast %class.GrVkDescriptorPool* %15 to %class.GrManagedResource*
  %19 = getelementptr inbounds %class.GrVkDescriptorPool, %class.GrVkDescriptorPool* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %30

22:                                               ; preds = %17
  %23 = bitcast %class.GrVkDescriptorPool* %15 to void (%class.GrManagedResource*)***
  %24 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %24, i64 4
  %26 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %25, align 8
  tail call void %26(%class.GrManagedResource* nonnull %18) #9
  %27 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %23, align 8
  %28 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %27, i64 1
  %29 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %28, align 8
  tail call void %29(%class.GrManagedResource* nonnull %18) #9
  br label %30

30:                                               ; preds = %22, %17
  store %class.GrVkDescriptorPool* null, %class.GrVkDescriptorPool** %14, align 8
  br label %31

31:                                               ; preds = %13, %30
  %32 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1
  %33 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 1, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = and i64 %34, 4294967294
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %class.SkTArray.421, %class.SkTArray.421* %32, i64 0, i32 0
  br label %52

39:                                               ; preds = %71, %31
  %40 = phi i64 [ %34, %31 ], [ %73, %71 ]
  %41 = and i64 %40, -4294967295
  store i64 %41, i64* %33, align 8
  tail call void @_ZN8SkTArrayIPK17GrVkDescriptorSetLb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.421* %32, i32 0, i32 2) #9
  %42 = load i64, i64* %33, align 8
  %43 = and i64 %42, -4294967297
  store i64 %43, i64* %33, align 8
  %44 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 32
  %45 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 40
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 4294967294
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %77, label %50

50:                                               ; preds = %39
  %51 = bitcast i8* %44 to %class.GrVkSampler***
  br label %83

52:                                               ; preds = %37, %71
  %53 = phi i64 [ 0, %37 ], [ %72, %71 ]
  %54 = load %class.GrVkDescriptorSet**, %class.GrVkDescriptorSet*** %38, align 8
  %55 = getelementptr inbounds %class.GrVkDescriptorSet*, %class.GrVkDescriptorSet** %54, i64 %53
  %56 = bitcast %class.GrVkDescriptorSet** %55 to %class.GrManagedResource**
  %57 = load %class.GrManagedResource*, %class.GrManagedResource** %56, align 8
  %58 = getelementptr inbounds %class.GrManagedResource, %class.GrManagedResource* %57, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = atomicrmw add i32* %58, i32 -1 acq_rel
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %71

61:                                               ; preds = %52
  %62 = bitcast %class.GrManagedResource* %57 to void (%class.GrManagedResource*)***
  %63 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %62, align 8
  %64 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %63, i64 4
  %65 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %64, align 8
  tail call void %65(%class.GrManagedResource* %57) #9
  %66 = icmp eq %class.GrManagedResource* %57, null
  br i1 %66, label %71, label %67

67:                                               ; preds = %61
  %68 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %62, align 8
  %69 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %68, i64 1
  %70 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %69, align 8
  tail call void %70(%class.GrManagedResource* nonnull %57) #9
  br label %71

71:                                               ; preds = %52, %61, %67
  %72 = add nuw nsw i64 %53, 1
  %73 = load i64, i64* %33, align 8
  %74 = lshr i64 %73, 1
  %75 = and i64 %74, 2147483647
  %76 = icmp ult i64 %72, %75
  br i1 %76, label %52, label %39

77:                                               ; preds = %102, %39
  %78 = phi i64 [ %47, %39 ], [ %104, %102 ]
  %79 = bitcast i8* %44 to %class.SkTArray.427*
  %80 = and i64 %78, -4294967295
  store i64 %80, i64* %46, align 8
  tail call void @_ZN8SkTArrayIPK11GrVkSamplerLb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.427* %79, i32 0, i32 2) #9
  %81 = load i64, i64* %46, align 8
  %82 = and i64 %81, -4294967297
  store i64 %82, i64* %46, align 8
  ret void

83:                                               ; preds = %50, %102
  %84 = phi i64 [ 0, %50 ], [ %103, %102 ]
  %85 = load %class.GrVkSampler**, %class.GrVkSampler*** %51, align 8
  %86 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %85, i64 %84
  %87 = load %class.GrVkSampler*, %class.GrVkSampler** %86, align 8
  %88 = icmp eq %class.GrVkSampler* %87, null
  %89 = bitcast %class.GrVkSampler* %87 to %class.GrManagedResource*
  br i1 %88, label %102, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %class.GrVkSampler, %class.GrVkSampler* %87, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = atomicrmw add i32* %91, i32 -1 acq_rel
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %102

94:                                               ; preds = %90
  %95 = bitcast %class.GrVkSampler* %87 to void (%class.GrManagedResource*)***
  %96 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %95, align 8
  %97 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %96, i64 4
  %98 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %97, align 8
  tail call void %98(%class.GrManagedResource* nonnull %89) #9
  %99 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %95, align 8
  %100 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %99, i64 1
  %101 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %100, align 8
  tail call void %101(%class.GrManagedResource* nonnull %89) #9
  br label %102

102:                                              ; preds = %94, %90, %83
  %103 = add nuw nsw i64 %84, 1
  %104 = load i64, i64* %46, align 8
  %105 = lshr i64 %104, 1
  %106 = and i64 %105, 2147483647
  %107 = icmp ult i64 %103, %106
  br i1 %107, label %83, label %77
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24GrVkDescriptorSetManager21DescriptorPoolManager16freeGPUResourcesEP7GrVkGpu(%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* nocapture, %class.GrVkGpu* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 0
  %4 = load %struct.VkDescriptorSetLayout_T*, %struct.VkDescriptorSetLayout_T** %3, align 8
  %5 = icmp eq %struct.VkDescriptorSetLayout_T* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 1, i32 0
  %8 = load %struct.GrVkInterface*, %struct.GrVkInterface** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %8, i64 0, i32 1, i32 71, i32 0
  %10 = load void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)** %9, align 8
  %11 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 6
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  tail call void %10(%struct.VkDevice_T* %12, %struct.VkDescriptorSetLayout_T* nonnull %4, %struct.VkAllocationCallbacks* null) #9
  store %struct.VkDescriptorSetLayout_T* null, %struct.VkDescriptorSetLayout_T** %3, align 8
  br label %13

13:                                               ; preds = %2, %6
  %14 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 5
  %15 = load %class.GrVkDescriptorPool*, %class.GrVkDescriptorPool** %14, align 8
  %16 = icmp eq %class.GrVkDescriptorPool* %15, null
  br i1 %16, label %31, label %17

17:                                               ; preds = %13
  %18 = bitcast %class.GrVkDescriptorPool* %15 to %class.GrManagedResource*
  %19 = getelementptr inbounds %class.GrVkDescriptorPool, %class.GrVkDescriptorPool* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %30

22:                                               ; preds = %17
  %23 = bitcast %class.GrVkDescriptorPool* %15 to void (%class.GrManagedResource*)***
  %24 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %24, i64 4
  %26 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %25, align 8
  tail call void %26(%class.GrManagedResource* nonnull %18) #9
  %27 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %23, align 8
  %28 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %27, i64 1
  %29 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %28, align 8
  tail call void %29(%class.GrManagedResource* nonnull %18) #9
  br label %30

30:                                               ; preds = %17, %22
  store %class.GrVkDescriptorPool* null, %class.GrVkDescriptorPool** %14, align 8
  br label %31

31:                                               ; preds = %13, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24GrVkDescriptorSetManager12isCompatibleE16VkDescriptorTypePK18GrVkUniformHandler(%class.GrVkDescriptorSetManager* nocapture readonly, i32, %class.GrVkUniformHandler* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, %1
  br i1 %6, label %7, label %107

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 16
  %9 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 24
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = lshr i64 %11, 1
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 2147483647
  %15 = getelementptr inbounds %class.GrVkUniformHandler, %class.GrVkUniformHandler* %2, i64 0, i32 2, i32 0, i32 0, i64 44
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %14, %17
  br i1 %18, label %19, label %107

19:                                               ; preds = %7
  %20 = icmp eq i32 %14, 0
  br i1 %20, label %107, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.GrVkUniformHandler, %class.GrVkUniformHandler* %2, i64 0, i32 2, i32 0, i32 0, i64 16
  %23 = bitcast i8* %22 to %"class.GrBlockAllocator::Block"**
  %24 = bitcast i8* %22 to %"class.GrBlockAllocator::Block"*
  %25 = bitcast i8* %8 to i32**
  %26 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 3, i32 0, i32 0, i64 32
  %27 = bitcast i8* %26 to %class.GrVkSampler***
  %28 = zext i32 %14 to i64
  br label %31

29:                                               ; preds = %96
  %30 = icmp eq i64 %106, %28
  br i1 %30, label %107, label %31

31:                                               ; preds = %29, %21
  %32 = phi i64 [ 0, %21 ], [ %106, %29 ]
  %33 = trunc i64 %32 to i32
  br label %34

34:                                               ; preds = %55, %31
  %35 = phi i32 [ %56, %55 ], [ %33, %31 ]
  %36 = phi %"class.GrBlockAllocator::Block"** [ %58, %55 ], [ %23, %31 ]
  %37 = phi %"class.GrBlockAllocator::Block"* [ %39, %55 ], [ %24, %31 ]
  %38 = phi i8* [ %40, %55 ], [ %22, %31 ]
  %39 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %36, align 8
  %40 = bitcast %"class.GrBlockAllocator::Block"* %39 to i8*
  %41 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %37, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %34
  %45 = add i32 %42, 80
  %46 = mul i32 %35, 80
  %47 = add i32 %46, 32
  %48 = icmp slt i32 %47, %45
  br i1 %48, label %60, label %49

49:                                               ; preds = %44
  %50 = add i32 %42, 48
  %51 = sext i32 %50 to i64
  %52 = udiv i64 %51, 80
  %53 = trunc i64 %52 to i32
  %54 = sub i32 %35, %53
  br label %55

55:                                               ; preds = %49, %34
  %56 = phi i32 [ %54, %49 ], [ %35, %34 ]
  %57 = icmp eq %"class.GrBlockAllocator::Block"* %39, null
  %58 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %39, i64 0, i32 0
  br i1 %57, label %59, label %34

59:                                               ; preds = %55
  tail call void @llvm.trap() #9
  unreachable

60:                                               ; preds = %44
  %61 = sext i32 %47 to i64
  %62 = getelementptr inbounds i8, i8* %38, i64 40
  %63 = getelementptr inbounds i8, i8* %62, i64 %61
  %64 = bitcast i8* %63 to i32*
  %65 = load i32, i32* %64, align 8
  %66 = load i32*, i32** %25, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 %32
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %65, %68
  br i1 %69, label %70, label %107

70:                                               ; preds = %60, %91
  %71 = phi i32 [ %92, %91 ], [ %33, %60 ]
  %72 = phi %"class.GrBlockAllocator::Block"** [ %94, %91 ], [ %23, %60 ]
  %73 = phi %"class.GrBlockAllocator::Block"* [ %75, %91 ], [ %24, %60 ]
  %74 = phi i8* [ %76, %91 ], [ %22, %60 ]
  %75 = load %"class.GrBlockAllocator::Block"*, %"class.GrBlockAllocator::Block"** %72, align 8
  %76 = bitcast %"class.GrBlockAllocator::Block"* %75 to i8*
  %77 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %73, i64 0, i32 4
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %70
  %81 = add i32 %78, 80
  %82 = mul i32 %71, 80
  %83 = add i32 %82, 32
  %84 = icmp slt i32 %83, %81
  br i1 %84, label %96, label %85

85:                                               ; preds = %80
  %86 = add i32 %78, 48
  %87 = sext i32 %86 to i64
  %88 = udiv i64 %87, 80
  %89 = trunc i64 %88 to i32
  %90 = sub i32 %71, %89
  br label %91

91:                                               ; preds = %85, %70
  %92 = phi i32 [ %90, %85 ], [ %71, %70 ]
  %93 = icmp eq %"class.GrBlockAllocator::Block"* %75, null
  %94 = getelementptr inbounds %"class.GrBlockAllocator::Block", %"class.GrBlockAllocator::Block"* %75, i64 0, i32 0
  br i1 %93, label %95, label %70

95:                                               ; preds = %91
  tail call void @llvm.trap() #9
  unreachable

96:                                               ; preds = %80
  %97 = sext i32 %83 to i64
  %98 = getelementptr inbounds i8, i8* %74, i64 72
  %99 = getelementptr inbounds i8, i8* %98, i64 %97
  %100 = bitcast i8* %99 to %class.GrVkSampler**
  %101 = load %class.GrVkSampler*, %class.GrVkSampler** %100, align 8
  %102 = load %class.GrVkSampler**, %class.GrVkSampler*** %27, align 8
  %103 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %102, i64 %32
  %104 = load %class.GrVkSampler*, %class.GrVkSampler** %103, align 8
  %105 = icmp eq %class.GrVkSampler* %101, %104
  %106 = add nuw nsw i64 %32, 1
  br i1 %105, label %29, label %107

107:                                              ; preds = %96, %60, %29, %19, %3, %7
  %108 = phi i1 [ false, %7 ], [ false, %3 ], [ true, %19 ], [ true, %29 ], [ false, %96 ], [ false, %60 ]
  ret i1 %108
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK24GrVkDescriptorSetManager13isZeroSamplerEv(%class.GrVkDescriptorSetManager* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrVkDescriptorSetManager, %class.GrVkDescriptorSetManager* %0, i64 0, i32 2, i32 0, i32 0, i64 24
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = and i64 %8, 4294967294
  %10 = icmp eq i64 %9, 0
  br label %11

11:                                               ; preds = %5, %1
  %12 = phi i1 [ false, %1 ], [ %10, %5 ]
  ret i1 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN24GrVkDescriptorSetManager21DescriptorPoolManagerC2EP23VkDescriptorSetLayout_T16VkDescriptorTypej(%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* nocapture, %struct.VkDescriptorSetLayout_T*, i32, i32) unnamed_addr #6 align 2 {
  %5 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 0
  store %struct.VkDescriptorSetLayout_T* %1, %struct.VkDescriptorSetLayout_T** %5, align 8
  %6 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 2
  store i32 %3, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 3
  store i32 16, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 4
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 5
  store %class.GrVkDescriptorPool* null, %class.GrVkDescriptorPool** %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24GrVkDescriptorSetManager21DescriptorPoolManager10getNewPoolEP7GrVkGpu(%"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* nocapture, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 5
  %4 = load %class.GrVkDescriptorPool*, %class.GrVkDescriptorPool** %3, align 8
  %5 = icmp eq %class.GrVkDescriptorPool* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  br label %30

9:                                                ; preds = %2
  %10 = bitcast %class.GrVkDescriptorPool* %4 to %class.GrManagedResource*
  %11 = getelementptr inbounds %class.GrVkDescriptorPool, %class.GrVkDescriptorPool* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 -1 acq_rel
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %22

14:                                               ; preds = %9
  %15 = bitcast %class.GrVkDescriptorPool* %4 to void (%class.GrManagedResource*)***
  %16 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %15, align 8
  %17 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %16, i64 4
  %18 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %17, align 8
  tail call void %18(%class.GrManagedResource* nonnull %10) #9
  %19 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %15, align 8
  %20 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %19, i64 1
  %21 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %20, align 8
  tail call void %21(%class.GrManagedResource* nonnull %10) #9
  br label %22

22:                                               ; preds = %9, %14
  %23 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, 1
  %26 = lshr i32 %25, 1
  %27 = add i32 %26, %24
  %28 = icmp ult i32 %27, 1024
  %29 = select i1 %28, i32 %27, i32 1024
  store i32 %29, i32* %23, align 8
  br label %30

30:                                               ; preds = %6, %22
  %31 = phi i32 [ %8, %6 ], [ %29, %22 ]
  %32 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 9
  %33 = getelementptr inbounds %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %"struct.GrVkDescriptorSetManager::DescriptorPoolManager"* %0, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = tail call %class.GrVkDescriptorPool* @_ZN20GrVkResourceProvider36findOrCreateCompatibleDescriptorPoolE16VkDescriptorTypej(%class.GrVkResourceProvider* %32, i32 %34, i32 %31) #9
  store %class.GrVkDescriptorPool* %35, %class.GrVkDescriptorPool** %3, align 8
  %36 = icmp ne %class.GrVkDescriptorPool* %35, null
  ret i1 %36
}

declare %class.GrVkDescriptorPool* @_ZN20GrVkResourceProvider36findOrCreateCompatibleDescriptorPoolE16VkDescriptorTypej(%class.GrVkResourceProvider*, i32, i32) local_unnamed_addr #4

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #4

declare zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu*, i32) local_unnamed_addr #4

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIjLb0EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.424*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %75, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.424, %class.SkTArray.424* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %58, %50 ]
  %52 = shl nuw nsw i64 %51, 2
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to i32*
  %55 = load i32*, i32** %49, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 %51
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %54, align 4
  %58 = add nuw nsw i64 %51, 1
  %59 = load i64, i64* %4, align 8
  %60 = lshr i64 %59, 1
  %61 = and i64 %60, 2147483647
  %62 = icmp ult i64 %58, %61
  br i1 %62, label %50, label %63

63:                                               ; preds = %50, %35
  %64 = phi i64 [ %45, %35 ], [ %59, %50 ]
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %65, 0
  %67 = bitcast %class.SkTArray.424* %0 to i8**
  br i1 %66, label %71, label %68

68:                                               ; preds = %63
  %69 = load i8*, i8** %67, align 8
  tail call void @_Z7sk_freePv(i8* %69) #9
  %70 = load i64, i64* %4, align 8
  br label %71

71:                                               ; preds = %63, %68
  %72 = phi i64 [ %70, %68 ], [ %64, %63 ]
  store i8* %44, i8** %67, align 8
  %73 = and i64 %72, -4294967298
  %74 = or i64 %73, 1
  store i64 %74, i64* %4, align 8
  br label %75

75:                                               ; preds = %71, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIPK11GrVkSamplerLb0EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.427*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.427, %class.SkTArray.427* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %class.GrVkSampler**, %class.GrVkSampler*** %49, align 8
  %55 = getelementptr inbounds %class.GrVkSampler*, %class.GrVkSampler** %54, i64 %51
  %56 = bitcast %class.GrVkSampler** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8* %53 to i64*
  store i64 %57, i64* %58, align 8
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray.427* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #9
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIPK17GrVkDescriptorSetLb1EE12checkReallocEiNS3_11ReallocTypeE(%class.SkTArray.421*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.421, %class.SkTArray.421* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.421* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #9
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.421* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #9
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
