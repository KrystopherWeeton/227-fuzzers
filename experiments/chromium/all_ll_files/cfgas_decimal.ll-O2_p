; ModuleID = '../../third_party/pdfium/xfa/fgas/crt/cfgas_decimal.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/crt/cfgas_decimal.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_Decimal = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>

@_ZN13CFGAS_DecimalC1Ev = hidden unnamed_addr alias void (%class.CFGAS_Decimal*), void (%class.CFGAS_Decimal*)* @_ZN13CFGAS_DecimalC2Ev
@_ZN13CFGAS_DecimalC1Em = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, i64), void (%class.CFGAS_Decimal*, i64)* @_ZN13CFGAS_DecimalC2Em
@_ZN13CFGAS_DecimalC1Ej = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, i32), void (%class.CFGAS_Decimal*, i32)* @_ZN13CFGAS_DecimalC2Ej
@_ZN13CFGAS_DecimalC1Ejjjbh = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, i32, i32, i32, i1, i8), void (%class.CFGAS_Decimal*, i32, i32, i32, i1, i8)* @_ZN13CFGAS_DecimalC2Ejjjbh
@_ZN13CFGAS_DecimalC1Ei = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, i32), void (%class.CFGAS_Decimal*, i32)* @_ZN13CFGAS_DecimalC2Ei
@_ZN13CFGAS_DecimalC1Efh = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, float, i8), void (%class.CFGAS_Decimal*, float, i8)* @_ZN13CFGAS_DecimalC2Efh
@_ZN13CFGAS_DecimalC1EN5fxcrt18StringViewTemplateIwEE = hidden unnamed_addr alias void (%class.CFGAS_Decimal*, %"class.fxcrt::StringViewTemplate"*), void (%class.CFGAS_Decimal*, %"class.fxcrt::StringViewTemplate"*)* @_ZN13CFGAS_DecimalC2EN5fxcrt18StringViewTemplateIwEE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13CFGAS_DecimalC2Ev(%class.CFGAS_Decimal* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFGAS_Decimal* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 14, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13CFGAS_DecimalC2Em(%class.CFGAS_Decimal* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %4, align 4
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %8 = trunc i64 %1 to i32
  store i32 %8, i32* %7, align 4
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  store i8 0, i8* %10, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13CFGAS_DecimalC2Ej(%class.CFGAS_Decimal* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  store i32 %1, i32* %5, align 4
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFGAS_DecimalC2Ejjjbh(%class.CFGAS_Decimal* nocapture, i32, i32, i32, i1 zeroext, i8 zeroext) unnamed_addr #1 align 2 {
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  store i32 %3, i32* %7, align 4
  %8 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  store i32 %1, i32* %9, align 4
  %10 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  br i1 %4, label %11, label %16

11:                                               ; preds = %6
  %12 = or i32 %2, %1
  %13 = or i32 %12, %3
  %14 = icmp ne i32 %13, 0
  %15 = zext i1 %14 to i8
  br label %16

16:                                               ; preds = %11, %6
  %17 = phi i8 [ 0, %6 ], [ %15, %11 ]
  store i8 %17, i8* %10, align 4
  %18 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %19 = icmp ugt i8 %5, 28
  %20 = select i1 %19, i8 0, i8 %5
  store i8 %20, i8* %18, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFGAS_DecimalC2Ei(%class.CFGAS_Decimal* nocapture, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %8 = icmp sgt i32 %1, -1
  %9 = bitcast %class.CFGAS_Decimal* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 14, i1 false)
  br i1 %8, label %10, label %11

10:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8 0, i8* %6, align 4
  store i8 0, i8* %7, align 1
  br label %16

11:                                               ; preds = %2
  %12 = icmp eq i32 %1, -2147483648
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 -2147483648, i32* %5, align 4
  store i8 0, i8* %7, align 1
  store i8 1, i8* %6, align 4
  br label %16

14:                                               ; preds = %11
  %15 = sub nsw i32 0, %1
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 %15, i32* %5, align 4
  store i8 0, i8* %7, align 1
  store i8 1, i8* %6, align 4
  br label %16

16:                                               ; preds = %14, %13, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CFGAS_Decimal9SetNegateEv(%class.CFGAS_Decimal* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9, %1, %5
  %14 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %15 = load i8, i8* %14, align 4, !range !2
  %16 = xor i8 %15, 1
  store i8 %16, i8* %14, align 4
  br label %17

17:                                               ; preds = %9, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFGAS_DecimalC2Efh(%class.CFGAS_Decimal* nocapture, float, i8 zeroext) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %8 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %9 = tail call float @llvm.fabs.f32(float %1) #10
  %10 = bitcast %class.CFGAS_Decimal* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 14, i1 false)
  %11 = tail call float @fmodf(float %9, float 0x43F0000000000000) #10
  %12 = fptoui float %11 to i64
  %13 = fmul float %9, 0x3BF0000000000000
  %14 = fptoui float %13 to i64
  %15 = and i64 %12, 4294967295
  %16 = lshr i64 %12, 32
  %17 = and i64 %14, 4294967295
  %18 = tail call float @fmodf(float %9, float 1.000000e+00) #10
  %19 = icmp eq i8 %2, 0
  br i1 %19, label %20, label %36

20:                                               ; preds = %36, %3
  %21 = phi i64 [ %15, %3 ], [ %53, %36 ]
  %22 = phi i64 [ %16, %3 ], [ %50, %36 ]
  %23 = phi i64 [ %17, %3 ], [ %49, %36 ]
  %24 = phi float [ %18, %3 ], [ %54, %36 ]
  %25 = tail call i32 @FXSYS_roundf(float %24) #10
  %26 = sext i32 %25 to i64
  %27 = add i64 %21, %26
  %28 = lshr i64 %27, 32
  %29 = add nuw nsw i64 %28, %22
  %30 = lshr i64 %29, 32
  %31 = add i64 %30, %23
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %4, align 4
  %33 = trunc i64 %29 to i32
  store i32 %33, i32* %5, align 4
  %34 = trunc i64 %27 to i32
  store i32 %34, i32* %6, align 4
  %35 = fcmp olt float %1, 0.000000e+00
  br i1 %35, label %57, label %63

36:                                               ; preds = %3, %36
  %37 = phi i8 [ %55, %36 ], [ 0, %3 ]
  %38 = phi float [ %54, %36 ], [ %18, %3 ]
  %39 = phi i64 [ %49, %36 ], [ %17, %3 ]
  %40 = phi i64 [ %50, %36 ], [ %16, %3 ]
  %41 = phi i64 [ %53, %36 ], [ %15, %3 ]
  %42 = mul i64 %41, 10
  %43 = mul nuw nsw i64 %40, 10
  %44 = lshr i64 %42, 32
  %45 = add nuw nsw i64 %43, %44
  %46 = and i64 %42, 4294967294
  %47 = mul i64 %39, 10
  %48 = lshr i64 %45, 32
  %49 = add i64 %48, %47
  %50 = and i64 %45, 4294967295
  %51 = fmul float %38, 1.000000e+01
  %52 = fptoui float %51 to i64
  %53 = add i64 %46, %52
  %54 = tail call float @fmodf(float %51, float 1.000000e+00) #10
  %55 = add nuw i8 %37, 1
  %56 = icmp eq i8 %55, %2
  br i1 %56, label %20, label %36

57:                                               ; preds = %20
  %58 = or i64 %29, %27
  %59 = or i64 %58, %31
  %60 = trunc i64 %59 to i32
  %61 = icmp ne i32 %60, 0
  %62 = zext i1 %61 to i8
  br label %63

63:                                               ; preds = %57, %20
  %64 = phi i8 [ 0, %20 ], [ %62, %57 ]
  store i8 %64, i8* %7, align 4
  store i8 %2, i8* %8, align 1
  ret void
}

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #4

declare i32 @FXSYS_roundf(float) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFGAS_DecimalC2EN5fxcrt18StringViewTemplateIwEE(%class.CFGAS_Decimal* nocapture, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %class.CFGAS_Decimal* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 14, i1 false)
  %10 = load i32*, i32** %8, align 8
  %11 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i32, i32* %10, i64 %12
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %2, %18
  %16 = phi i32* [ %19, %18 ], [ %10, %2 ]
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %23 [
    i32 32, label %18
    i32 45, label %21
  ]

18:                                               ; preds = %15
  %19 = getelementptr inbounds i32, i32* %16, i64 1
  %20 = icmp eq i32* %19, %13
  br i1 %20, label %95, label %15

21:                                               ; preds = %15
  %22 = getelementptr inbounds i32, i32* %16, i64 1
  br label %27

23:                                               ; preds = %15
  %24 = icmp eq i32 %17, 43
  %25 = getelementptr inbounds i32, i32* %16, i64 1
  %26 = select i1 %24, i32* %25, i32* %16
  br label %27

27:                                               ; preds = %2, %23, %21
  %28 = phi i32* [ %22, %21 ], [ %26, %23 ], [ %10, %2 ]
  %29 = phi i1 [ true, %21 ], [ false, %23 ], [ false, %2 ]
  %30 = icmp eq i32* %28, %13
  br i1 %30, label %82, label %31

31:                                               ; preds = %27, %77
  %32 = phi i8 [ %79, %77 ], [ 0, %27 ]
  %33 = phi i8 [ %78, %77 ], [ 0, %27 ]
  %34 = phi i32* [ %80, %77 ], [ %28, %27 ]
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %35, 127
  br i1 %36, label %37, label %38

37:                                               ; preds = %31
  br i1 %29, label %84, label %95

38:                                               ; preds = %31
  %39 = tail call i32 @iswdigit(i32 %35) #10
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %38
  %42 = load i32, i32* %34, align 4
  %43 = icmp eq i32 %42, 46
  %44 = icmp ult i8 %32, 28
  %45 = and i1 %44, %43
  br i1 %45, label %51, label %82

46:                                               ; preds = %38
  %47 = icmp ult i8 %32, 28
  br i1 %47, label %48, label %82

48:                                               ; preds = %46
  %49 = load i32, i32* %34, align 4
  %50 = icmp eq i32 %49, 46
  br i1 %50, label %51, label %55

51:                                               ; preds = %41, %48
  %52 = and i8 %33, 1
  %53 = icmp eq i8 %52, 0
  %54 = select i1 %53, i8 1, i8 %33
  br label %77

55:                                               ; preds = %48
  %56 = load i32, i32* %3, align 4
  %57 = mul i32 %56, 10
  %58 = load i32, i32* %4, align 4
  %59 = zext i32 %58 to i64
  %60 = mul nuw nsw i64 %59, 10
  %61 = lshr i64 %60, 32
  %62 = trunc i64 %61 to i32
  %63 = add i32 %57, %62
  store i32 %63, i32* %3, align 4
  %64 = mul i32 %58, 10
  %65 = load i32, i32* %5, align 4
  %66 = zext i32 %65 to i64
  %67 = mul nuw nsw i64 %66, 10
  %68 = lshr i64 %67, 32
  %69 = trunc i64 %68 to i32
  %70 = add i32 %64, %69
  store i32 %70, i32* %4, align 4
  %71 = mul i32 %65, 10
  %72 = load i32, i32* %34, align 4
  %73 = add i32 %71, -48
  %74 = add i32 %73, %72
  store i32 %74, i32* %5, align 4
  %75 = and i8 %33, 1
  %76 = add nuw nsw i8 %32, %75
  br label %77

77:                                               ; preds = %55, %51
  %78 = phi i8 [ %54, %51 ], [ %33, %55 ]
  %79 = phi i8 [ %32, %51 ], [ %76, %55 ]
  %80 = getelementptr inbounds i32, i32* %34, i64 1
  %81 = icmp eq i32* %80, %13
  br i1 %81, label %82, label %31

82:                                               ; preds = %46, %41, %77, %27
  %83 = phi i8 [ 0, %27 ], [ %79, %77 ], [ %32, %41 ], [ %32, %46 ]
  br i1 %29, label %84, label %95

84:                                               ; preds = %37, %82
  %85 = phi i8 [ %32, %37 ], [ %83, %82 ]
  %86 = load i32, i32* %3, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %95

88:                                               ; preds = %84
  %89 = load i32, i32* %4, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %88
  %92 = load i32, i32* %5, align 4
  %93 = icmp ne i32 %92, 0
  %94 = zext i1 %93 to i8
  br label %95

95:                                               ; preds = %18, %37, %91, %88, %84, %82
  %96 = phi i8 [ %83, %82 ], [ %85, %88 ], [ %85, %84 ], [ %85, %91 ], [ %32, %37 ], [ 0, %18 ]
  %97 = phi i8 [ 0, %82 ], [ 1, %88 ], [ 1, %84 ], [ %94, %91 ], [ 0, %37 ], [ 0, %18 ]
  store i8 %97, i8* %6, align 4
  store i8 %96, i8* %7, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13CFGAS_Decimal12ToWideStringEv(%"class.fxcrt::WideString"* noalias sret, %class.CFGAS_Decimal* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %4, align 8
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %0) #10
  %5 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %6, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %3) #10
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = or i32 %10, %8
  %14 = or i32 %13, %12
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %2
  %17 = zext i32 %12 to i64
  %18 = zext i32 %10 to i64
  %19 = zext i32 %8 to i64
  br label %20

20:                                               ; preds = %16, %20
  %21 = phi i64 [ %34, %20 ], [ %17, %16 ]
  %22 = phi i64 [ %31, %20 ], [ %18, %16 ]
  %23 = phi i64 [ %27, %20 ], [ %19, %16 ]
  %24 = urem i64 %23, 10
  %25 = shl nuw nsw i64 %24, 32
  %26 = add nuw nsw i64 %25, %22
  %27 = udiv i64 %23, 10
  %28 = urem i64 %26, 10
  %29 = shl nuw nsw i64 %28, 32
  %30 = add nuw nsw i64 %29, %21
  %31 = udiv i64 %26, 10
  %32 = urem i64 %30, 10
  %33 = trunc i64 %32 to i32
  %34 = udiv i64 %30, 10
  %35 = or i32 %33, 48
  %36 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %3, i32 signext %35) #10
  %37 = or i64 %31, %27
  %38 = or i64 %37, %34
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %20

40:                                               ; preds = %20, %2
  %41 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %42 = icmp eq %"class.fxcrt::StringDataTemplate"* %41, null
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 4
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  br label %55

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %41, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 4
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = icmp ult i8 %52, %50
  br i1 %54, label %64, label %55

55:                                               ; preds = %43, %47
  %56 = phi i64 [ %46, %43 ], [ %53, %47 ]
  %57 = phi i8 [ %45, %43 ], [ %52, %47 ]
  %58 = phi i8 [ 0, %43 ], [ %50, %47 ]
  br label %59

59:                                               ; preds = %55, %59
  %60 = phi i8 [ %62, %59 ], [ %58, %55 ]
  %61 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* nonnull %3, i32 signext 48) #10
  %62 = add i8 %60, 1
  %63 = icmp ugt i8 %62, %57
  br i1 %63, label %64, label %59

64:                                               ; preds = %59, %47
  %65 = phi i64 [ %53, %47 ], [ %56, %59 ]
  %66 = phi i8 [ %52, %47 ], [ %57, %59 ]
  %67 = phi i8 [ %50, %47 ], [ %62, %59 ]
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 3
  %70 = load i8, i8* %69, align 4, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %64
  %73 = load i32, i32* %7, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %81

75:                                               ; preds = %72
  %76 = load i32, i32* %9, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %75
  %79 = load i32, i32* %11, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %78, %72, %75
  %82 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext 45) #10
  br label %83

83:                                               ; preds = %81, %64, %78
  %84 = sub nsw i64 %68, %65
  %85 = icmp eq i8 %66, 0
  %86 = zext i8 %67 to i64
  %87 = and i64 %84, 4294967295
  %88 = zext i8 %67 to i64
  br label %90

89:                                               ; preds = %106
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret void

90:                                               ; preds = %106, %83
  %91 = phi i64 [ 0, %83 ], [ %110, %106 ]
  %92 = icmp ne i64 %87, %91
  %93 = or i1 %85, %92
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext 46) #10
  br label %96

96:                                               ; preds = %90, %94
  %97 = xor i64 %91, -1
  %98 = add nsw i64 %97, %86
  %99 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %6, align 8
  %100 = icmp eq %"class.fxcrt::StringDataTemplate"* %99, null
  br i1 %100, label %105, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %99, i64 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = icmp ugt i64 %103, %98
  br i1 %104, label %106, label %105, !prof !3

105:                                              ; preds = %101, %96
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !4
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !5
  unreachable

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %99, i64 0, i32 3, i64 %98
  %108 = load i32, i32* %107, align 4
  %109 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"* %0, i32 signext %108) #10
  %110 = add nuw nsw i64 %91, 1
  %111 = icmp eq i64 %110, %88
  br i1 %111, label %89, label %90
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #5

declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringpLEw(%"class.fxcrt::WideString"*, i32 signext) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #6

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK13CFGAS_Decimal7ToFloatEv(%class.CFGAS_Decimal* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = uitofp i32 %3 to double
  %5 = fmul double %4, 0x41F0000000000000
  %6 = fmul double %5, 0x41F0000000000000
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = uitofp i32 %8 to double
  %10 = fmul double %9, 0x41F0000000000000
  %11 = fadd double %6, %10
  %12 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = uitofp i32 %13 to double
  %15 = fadd double %11, %14
  %16 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %17 = load i8, i8* %16, align 4, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %18, double 1.000000e+00, double -1.000000e+00
  %20 = fmul double %19, %15
  %21 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 0, %23
  %25 = sitofp i32 %24 to float
  %26 = tail call float @powf(float 1.000000e+01, float %25) #10
  %27 = fpext float %26 to double
  %28 = fmul double %20, %27
  %29 = fptrunc double %28 to float
  ret float %29
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @_ZNK13CFGAS_Decimal8ToDoubleEv(%class.CFGAS_Decimal* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = uitofp i32 %3 to double
  %5 = fmul double %4, 0x41F0000000000000
  %6 = fmul double %5, 0x41F0000000000000
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = uitofp i32 %8 to double
  %10 = fmul double %9, 0x41F0000000000000
  %11 = fadd double %6, %10
  %12 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = uitofp i32 %13 to double
  %15 = fadd double %11, %14
  %16 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %17 = load i8, i8* %16, align 4, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %18, double 1.000000e+00, double -1.000000e+00
  %20 = fmul double %19, %15
  %21 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = sub nsw i32 0, %23
  %25 = sitofp i32 %24 to float
  %26 = tail call float @powf(float 1.000000e+01, float %25) #10
  %27 = fpext float %26 to double
  %28 = fmul double %20, %27
  ret double %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFGAS_Decimal8SetScaleEh(%class.CFGAS_Decimal* nocapture, i8 zeroext) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = zext i8 %1 to i32
  %7 = icmp eq i8 %4, %1
  br i1 %7, label %130, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = icmp ult i8 %4, %1
  br i1 %18, label %23, label %19

19:                                               ; preds = %8
  %20 = sub nsw i32 %5, %6
  %21 = add nsw i32 %20, -1
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %78, label %61

23:                                               ; preds = %8
  %24 = sub nsw i32 %6, %5
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %36, %23
  %27 = phi i64 [ %11, %23 ], [ %48, %36 ]
  %28 = phi i64 [ %14, %23 ], [ %49, %36 ]
  %29 = phi i64 [ %17, %23 ], [ %45, %36 ]
  %30 = trunc i64 %27 to i32
  store i32 %30, i32* %9, align 4
  %31 = trunc i64 %28 to i32
  store i32 %31, i32* %12, align 4
  %32 = trunc i64 %29 to i32
  store i32 %32, i32* %15, align 4
  %33 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %59, label %53

36:                                               ; preds = %23, %36
  %37 = phi i8 [ %50, %36 ], [ 0, %23 ]
  %38 = phi i64 [ %45, %36 ], [ %17, %23 ]
  %39 = phi i64 [ %49, %36 ], [ %14, %23 ]
  %40 = phi i64 [ %48, %36 ], [ %11, %23 ]
  %41 = mul nuw nsw i64 %38, 10
  %42 = mul nuw nsw i64 %39, 10
  %43 = lshr i64 %41, 32
  %44 = add nuw nsw i64 %43, %42
  %45 = and i64 %41, 4294967294
  %46 = mul i64 %40, 10
  %47 = lshr i64 %44, 32
  %48 = add i64 %47, %46
  %49 = and i64 %44, 4294967295
  %50 = add i8 %37, 1
  %51 = zext i8 %50 to i32
  %52 = icmp sgt i32 %24, %51
  br i1 %52, label %36, label %26

53:                                               ; preds = %26
  %54 = or i64 %28, %27
  %55 = or i64 %54, %29
  %56 = trunc i64 %55 to i32
  %57 = icmp ne i32 %56, 0
  %58 = zext i1 %57 to i8
  br label %59

59:                                               ; preds = %26, %53
  %60 = phi i8 [ 0, %26 ], [ %58, %53 ]
  store i8 %60, i8* %33, align 4
  store i8 %1, i8* %3, align 1
  br label %112

61:                                               ; preds = %78, %19
  %62 = phi i64 [ 0, %19 ], [ %90, %78 ]
  %63 = phi i64 [ 0, %19 ], [ %91, %78 ]
  %64 = phi i64 [ 5, %19 ], [ %87, %78 ]
  %65 = add i64 %62, %11
  %66 = add nuw nsw i64 %63, %14
  %67 = add nuw nsw i64 %64, %17
  %68 = lshr i64 %66, 32
  %69 = add i64 %65, %68
  %70 = and i64 %66, 4294967295
  %71 = lshr i64 %67, 32
  %72 = add nuw nsw i64 %71, %70
  %73 = and i64 %67, 4294967295
  %74 = lshr i64 %72, 32
  %75 = add i64 %69, %74
  %76 = and i64 %72, 4294967295
  %77 = icmp sgt i32 %20, 0
  br i1 %77, label %95, label %112

78:                                               ; preds = %19, %78
  %79 = phi i8 [ %92, %78 ], [ 0, %19 ]
  %80 = phi i64 [ %87, %78 ], [ 5, %19 ]
  %81 = phi i64 [ %91, %78 ], [ 0, %19 ]
  %82 = phi i64 [ %90, %78 ], [ 0, %19 ]
  %83 = mul nuw nsw i64 %80, 10
  %84 = mul nuw nsw i64 %81, 10
  %85 = lshr i64 %83, 32
  %86 = add nuw nsw i64 %85, %84
  %87 = and i64 %83, 4294967294
  %88 = mul i64 %82, 10
  %89 = lshr i64 %86, 32
  %90 = add i64 %89, %88
  %91 = and i64 %86, 4294967295
  %92 = add i8 %79, 1
  %93 = zext i8 %92 to i32
  %94 = icmp sgt i32 %21, %93
  br i1 %94, label %78, label %61

95:                                               ; preds = %61, %95
  %96 = phi i8 [ %109, %95 ], [ 0, %61 ]
  %97 = phi i64 [ %108, %95 ], [ %73, %61 ]
  %98 = phi i64 [ %107, %95 ], [ %76, %61 ]
  %99 = phi i64 [ %103, %95 ], [ %75, %61 ]
  %100 = urem i64 %99, 10
  %101 = shl nuw nsw i64 %100, 32
  %102 = add nuw nsw i64 %101, %98
  %103 = udiv i64 %99, 10
  %104 = urem i64 %102, 10
  %105 = shl nuw nsw i64 %104, 32
  %106 = add nuw nsw i64 %105, %97
  %107 = udiv i64 %102, 10
  %108 = udiv i64 %106, 10
  %109 = add i8 %96, 1
  %110 = zext i8 %109 to i32
  %111 = icmp sgt i32 %20, %110
  br i1 %111, label %95, label %112

112:                                              ; preds = %95, %61, %59
  %113 = phi i64 [ %27, %59 ], [ %75, %61 ], [ %103, %95 ]
  %114 = phi i64 [ %28, %59 ], [ %76, %61 ], [ %107, %95 ]
  %115 = phi i64 [ %29, %59 ], [ %73, %61 ], [ %108, %95 ]
  %116 = trunc i64 %113 to i32
  store i32 %116, i32* %9, align 4
  %117 = trunc i64 %114 to i32
  store i32 %117, i32* %12, align 4
  %118 = trunc i64 %115 to i32
  store i32 %118, i32* %15, align 4
  %119 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %120 = load i8, i8* %119, align 4, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %128, label %122

122:                                              ; preds = %112
  %123 = or i64 %114, %113
  %124 = or i64 %123, %115
  %125 = trunc i64 %124 to i32
  %126 = icmp ne i32 %125, 0
  %127 = zext i1 %126 to i8
  br label %128

128:                                              ; preds = %112, %122
  %129 = phi i8 [ 0, %112 ], [ %127, %122 ]
  store i8 %129, i8* %119, align 4
  store i8 %1, i8* %3, align 1
  br label %130

130:                                              ; preds = %2, %128
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK13CFGAS_DecimalmlERKS_(%class.CFGAS_Decimal* nocapture readonly, %class.CFGAS_Decimal* nocapture readonly dereferenceable(16)) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = mul nuw i64 %5, %14
  %22 = and i64 %21, 4294967295
  %23 = lshr i64 %21, 32
  %24 = mul nuw i64 %5, %17
  %25 = and i64 %24, 4294967295
  %26 = add nuw nsw i64 %25, %23
  %27 = lshr i64 %24, 32
  %28 = mul nuw i64 %5, %20
  %29 = and i64 %28, 4294967295
  %30 = add nuw nsw i64 %29, %27
  %31 = lshr i64 %28, 32
  %32 = mul nuw i64 %8, %14
  %33 = and i64 %32, 4294967295
  %34 = add nuw nsw i64 %33, %26
  %35 = lshr i64 %32, 32
  %36 = mul nuw i64 %8, %17
  %37 = and i64 %36, 4294967295
  %38 = add nuw nsw i64 %37, %35
  %39 = add nuw nsw i64 %38, %30
  %40 = lshr i64 %36, 32
  %41 = mul nuw i64 %8, %20
  %42 = and i64 %41, 4294967295
  %43 = add nuw nsw i64 %42, %40
  %44 = add nuw nsw i64 %43, %31
  %45 = lshr i64 %41, 32
  %46 = mul nuw i64 %11, %14
  %47 = and i64 %46, 4294967295
  %48 = add nuw nsw i64 %47, %39
  %49 = lshr i64 %46, 32
  %50 = mul nuw i64 %11, %17
  %51 = and i64 %50, 4294967295
  %52 = add nuw nsw i64 %51, %49
  %53 = add nuw nsw i64 %52, %44
  %54 = lshr i64 %50, 32
  %55 = mul nuw i64 %11, %20
  %56 = and i64 %55, 4294967295
  %57 = add nuw nsw i64 %56, %54
  %58 = add nuw nsw i64 %57, %45
  %59 = lshr i64 %55, 32
  %60 = lshr i64 %34, 32
  %61 = add nuw nsw i64 %48, %60
  %62 = and i64 %34, 4294967295
  %63 = lshr i64 %61, 32
  %64 = add nuw nsw i64 %53, %63
  %65 = and i64 %61, 4294967295
  %66 = lshr i64 %64, 32
  %67 = add nuw nsw i64 %58, %66
  %68 = and i64 %64, 4294967295
  %69 = lshr i64 %67, 32
  %70 = add nuw nsw i64 %59, %69
  %71 = and i64 %67, 4294967295
  %72 = and i64 %70, 4294967295
  %73 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %74 = load i8, i8* %73, align 4, !range !2
  %75 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 3
  %76 = load i8, i8* %75, align 4, !range !2
  %77 = icmp eq i8 %74, %76
  %78 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 4
  %81 = load i8, i8* %80, align 1
  %82 = add i8 %81, %79
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %150, label %84

84:                                               ; preds = %2
  %85 = icmp ult i8 %82, 29
  %86 = or i64 %71, %68
  %87 = or i64 %86, %72
  %88 = icmp eq i64 %87, 0
  %89 = and i1 %85, %88
  br i1 %89, label %150, label %96

90:                                               ; preds = %96
  %91 = icmp ult i8 %126, 29
  %92 = or i64 %111, %115
  %93 = or i64 %92, %107
  %94 = icmp eq i64 %93, 0
  %95 = and i1 %91, %94
  br i1 %95, label %128, label %96

96:                                               ; preds = %84, %90
  %97 = phi i64 [ %124, %90 ], [ %22, %84 ]
  %98 = phi i64 [ %123, %90 ], [ %62, %84 ]
  %99 = phi i64 [ %119, %90 ], [ %65, %84 ]
  %100 = phi i64 [ %111, %90 ], [ %71, %84 ]
  %101 = phi i64 [ %107, %90 ], [ %72, %84 ]
  %102 = phi i64 [ %115, %90 ], [ %68, %84 ]
  %103 = phi i8 [ %126, %90 ], [ %82, %84 ]
  %104 = urem i64 %101, 10
  %105 = shl nuw nsw i64 %104, 32
  %106 = add nuw nsw i64 %105, %100
  %107 = udiv i64 %101, 10
  %108 = urem i64 %106, 10
  %109 = shl nuw nsw i64 %108, 32
  %110 = add nuw nsw i64 %109, %102
  %111 = udiv i64 %106, 10
  %112 = urem i64 %110, 10
  %113 = shl nuw nsw i64 %112, 32
  %114 = add nuw nsw i64 %113, %99
  %115 = udiv i64 %110, 10
  %116 = urem i64 %114, 10
  %117 = shl nuw nsw i64 %116, 32
  %118 = add nuw nsw i64 %117, %98
  %119 = udiv i64 %114, 10
  %120 = urem i64 %118, 10
  %121 = shl nuw nsw i64 %120, 32
  %122 = add nuw nsw i64 %121, %97
  %123 = udiv i64 %118, 10
  %124 = udiv i64 %122, 10
  %125 = urem i64 %122, 10
  %126 = add i8 %103, -1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %90

128:                                              ; preds = %96, %90
  %129 = trunc i64 %125 to i8
  %130 = icmp ugt i8 %129, 4
  br i1 %130, label %131, label %150

131:                                              ; preds = %128
  %132 = lshr i64 %123, 32
  %133 = add nuw nsw i64 %119, %132
  %134 = and i64 %123, 4294967295
  %135 = lshr i64 %124, 32
  %136 = add nuw nsw i64 %135, %134
  %137 = and i64 %124, 4294967295
  %138 = lshr i64 %136, 32
  %139 = add nuw nsw i64 %133, %138
  %140 = and i64 %136, 4294967295
  %141 = add nuw nsw i64 %137, 1
  %142 = icmp ult i64 %141, 4294967296
  br i1 %142, label %150, label %143

143:                                              ; preds = %131
  %144 = add nuw nsw i64 %140, 1
  %145 = icmp ult i64 %144, 4294967296
  br i1 %145, label %150, label %146

146:                                              ; preds = %143
  %147 = add nuw nsw i64 %139, 1
  %148 = icmp ult i64 %147, 4294967296
  %149 = select i1 %148, i64 %147, i64 0
  br label %150

150:                                              ; preds = %84, %2, %128, %131, %143, %146
  %151 = phi i64 [ %65, %2 ], [ %139, %131 ], [ %139, %143 ], [ %149, %146 ], [ %119, %128 ], [ %65, %84 ]
  %152 = phi i64 [ %62, %2 ], [ %140, %131 ], [ %144, %143 ], [ 0, %146 ], [ %123, %128 ], [ %62, %84 ]
  %153 = phi i64 [ %22, %2 ], [ %141, %131 ], [ 0, %143 ], [ 0, %146 ], [ %124, %128 ], [ %22, %84 ]
  %154 = phi i8 [ 0, %2 ], [ %126, %131 ], [ %126, %143 ], [ %126, %146 ], [ %126, %128 ], [ %82, %84 ]
  br i1 %77, label %162, label %155

155:                                              ; preds = %150
  %156 = or i64 %152, %153
  %157 = or i64 %156, %151
  %158 = trunc i64 %157 to i32
  %159 = icmp ne i32 %158, 0
  %160 = zext i1 %159 to i64
  %161 = shl nuw nsw i64 %160, 32
  br label %162

162:                                              ; preds = %150, %155
  %163 = phi i64 [ 0, %150 ], [ %161, %155 ]
  %164 = shl i64 %152, 32
  %165 = and i64 %151, 4294967295
  %166 = or i64 %165, %164
  %167 = insertvalue { i64, i64 } undef, i64 %166, 0
  %168 = zext i8 %154 to i64
  %169 = shl nuw nsw i64 %168, 40
  %170 = and i64 %153, 4294967295
  %171 = or i64 %169, %170
  %172 = or i64 %171, %163
  %173 = insertvalue { i64, i64 } %167, i64 %172, 1
  ret { i64, i64 } %173
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK13CFGAS_DecimaldvERKS_(%class.CFGAS_Decimal* nocapture readonly, %class.CFGAS_Decimal* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = alloca [16 x i64], align 16
  %4 = alloca [16 x i64], align 16
  %5 = alloca [10 x i64], align 16
  %6 = alloca [7 x i64], align 16
  %7 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %8, %10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %633, label %17

17:                                               ; preds = %2, %13
  %18 = phi i32 [ 0, %13 ], [ %10, %2 ]
  %19 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 3
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 3
  %22 = load i8, i8* %21, align 4, !range !2
  %23 = bitcast [7 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %23) #10
  %24 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 0
  %25 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  store i64 %27, i64* %24, align 16
  %28 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 1
  %29 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  store i64 %31, i64* %28, align 8
  %32 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 2
  %33 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  store i64 %35, i64* %32, align 16
  %36 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 3
  %37 = bitcast i64* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 32, i1 false)
  %38 = icmp eq i8 %20, %22
  %39 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = zext i32 %18 to i64
  %43 = zext i32 %8 to i64
  %44 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %0, i64 0, i32 4
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds %class.CFGAS_Decimal, %class.CFGAS_Decimal* %1, i64 0, i32 4
  %47 = load i8, i8* %46, align 1
  %48 = icmp ult i8 %45, %47
  br i1 %48, label %49, label %94

49:                                               ; preds = %17
  %50 = zext i8 %45 to i32
  %51 = zext i8 %47 to i32
  %52 = sub nsw i32 %51, %50
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %97

54:                                               ; preds = %49
  %55 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 4
  %56 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 5
  %57 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 6
  br label %58

58:                                               ; preds = %54, %58
  %59 = phi i64 [ 0, %54 ], [ %90, %58 ]
  %60 = phi i64 [ 0, %54 ], [ %91, %58 ]
  %61 = phi i64 [ 0, %54 ], [ %87, %58 ]
  %62 = phi i64 [ 0, %54 ], [ %83, %58 ]
  %63 = phi i64 [ %35, %54 ], [ %79, %58 ]
  %64 = phi i64 [ %31, %54 ], [ %75, %58 ]
  %65 = phi i64 [ %27, %54 ], [ %71, %58 ]
  %66 = phi i32 [ %52, %54 ], [ %92, %58 ]
  %67 = mul nuw nsw i64 %65, 10
  %68 = mul nuw nsw i64 %64, 10
  %69 = lshr i64 %67, 32
  %70 = add nuw nsw i64 %69, %68
  %71 = and i64 %67, 4294967294
  %72 = mul nuw nsw i64 %63, 10
  %73 = lshr i64 %70, 32
  %74 = add nuw nsw i64 %73, %72
  %75 = and i64 %70, 4294967295
  %76 = mul nuw nsw i64 %62, 10
  %77 = lshr i64 %74, 32
  %78 = add nuw nsw i64 %77, %76
  %79 = and i64 %74, 4294967295
  %80 = mul nuw nsw i64 %61, 10
  %81 = lshr i64 %78, 32
  %82 = add nuw nsw i64 %81, %80
  %83 = and i64 %78, 4294967295
  %84 = mul nuw nsw i64 %60, 10
  %85 = lshr i64 %82, 32
  %86 = add nuw nsw i64 %85, %84
  %87 = and i64 %82, 4294967295
  %88 = mul i64 %59, 10
  %89 = lshr i64 %86, 32
  %90 = add i64 %89, %88
  %91 = and i64 %86, 4294967295
  %92 = add nsw i32 %66, -1
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %58, label %96

94:                                               ; preds = %17
  %95 = sub i8 %45, %47
  br label %97

96:                                               ; preds = %58
  store i64 %71, i64* %24, align 16
  store i64 %75, i64* %28, align 8
  store i64 %79, i64* %32, align 16
  store i64 %83, i64* %36, align 8
  store i64 %87, i64* %55, align 16
  store i64 %91, i64* %56, align 8
  store i64 %90, i64* %57, align 16
  br label %97

97:                                               ; preds = %49, %96, %94
  %98 = phi i64 [ 0, %94 ], [ %91, %96 ], [ 0, %49 ]
  %99 = phi i64 [ 0, %94 ], [ %87, %96 ], [ 0, %49 ]
  %100 = phi i64 [ 0, %94 ], [ %83, %96 ], [ 0, %49 ]
  %101 = phi i64 [ %35, %94 ], [ %79, %96 ], [ %35, %49 ]
  %102 = phi i64 [ %31, %94 ], [ %75, %96 ], [ %31, %49 ]
  %103 = phi i64 [ %27, %94 ], [ %71, %96 ], [ %27, %49 ]
  %104 = phi i64 [ 0, %94 ], [ %90, %96 ], [ 0, %49 ]
  %105 = phi i8 [ %95, %94 ], [ 0, %96 ], [ 0, %49 ]
  %106 = or i32 %34, %30
  %107 = or i32 %106, %26
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %115, label %109

109:                                              ; preds = %97
  %110 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 6
  %111 = icmp eq i64 %104, 0
  br i1 %111, label %112, label %121

112:                                              ; preds = %109
  %113 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 4
  %114 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 5
  br label %192

115:                                              ; preds = %97
  %116 = icmp ugt i8 %105, 28
  %117 = select i1 %116, i8 0, i8 %105
  %118 = zext i8 %117 to i64
  %119 = shl nuw nsw i64 %118, 40
  br label %629

120:                                              ; preds = %192
  store i64 %204, i64* %24, align 16
  store i64 %208, i64* %28, align 8
  store i64 %212, i64* %32, align 16
  store i64 %216, i64* %36, align 8
  store i64 %220, i64* %113, align 16
  store i64 %222, i64* %114, align 8
  store i64 %221, i64* %110, align 16
  br label %121

121:                                              ; preds = %120, %109
  %122 = phi i64 [ %204, %120 ], [ %103, %109 ]
  %123 = phi i64 [ %208, %120 ], [ %102, %109 ]
  %124 = phi i64 [ %212, %120 ], [ %101, %109 ]
  %125 = phi i64 [ %216, %120 ], [ %100, %109 ]
  %126 = phi i64 [ %220, %120 ], [ %99, %109 ]
  %127 = phi i64 [ %222, %120 ], [ %98, %109 ]
  %128 = phi i64 [ %221, %120 ], [ %104, %109 ]
  %129 = phi i8 [ %223, %120 ], [ %105, %109 ]
  %130 = urem i64 %128, 10
  %131 = shl nuw nsw i64 %130, 32
  %132 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 5
  %133 = add nuw nsw i64 %131, %127
  %134 = udiv i64 %128, 10
  store i64 %134, i64* %110, align 16
  %135 = urem i64 %133, 10
  %136 = shl nuw nsw i64 %135, 32
  %137 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 4
  %138 = add nuw nsw i64 %136, %126
  %139 = udiv i64 %133, 10
  store i64 %139, i64* %132, align 8
  %140 = urem i64 %138, 10
  %141 = shl nuw nsw i64 %140, 32
  %142 = add nuw nsw i64 %141, %125
  %143 = udiv i64 %138, 10
  store i64 %143, i64* %137, align 16
  %144 = urem i64 %142, 10
  %145 = shl nuw nsw i64 %144, 32
  %146 = add nuw nsw i64 %145, %124
  %147 = udiv i64 %142, 10
  store i64 %147, i64* %36, align 8
  %148 = urem i64 %146, 10
  %149 = shl nuw nsw i64 %148, 32
  %150 = add nuw nsw i64 %149, %123
  %151 = udiv i64 %146, 10
  store i64 %151, i64* %32, align 16
  %152 = urem i64 %150, 10
  %153 = shl nuw nsw i64 %152, 32
  %154 = add nuw nsw i64 %153, %122
  %155 = udiv i64 %150, 10
  store i64 %155, i64* %28, align 8
  %156 = udiv i64 %154, 10
  store i64 %156, i64* %24, align 16
  %157 = add i8 %129, -1
  %158 = bitcast [16 x i64]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %158) #10
  %159 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 6
  %160 = bitcast i64* %159 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %160, i8 0, i64 80, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %158, i8* nonnull align 16 %23, i64 48, i1 false) #10
  %161 = bitcast [16 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %161) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %161, i8 -86, i64 128, i1 false) #10
  %162 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 0
  %163 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 5
  %164 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 4
  %165 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 3
  %166 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 2
  %167 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 1
  %168 = getelementptr inbounds [16 x i64], [16 x i64]* %3, i64 0, i64 0
  %169 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 8
  %170 = bitcast i64* %169 to i8*
  %171 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 1
  %172 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 2
  %173 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 3
  %174 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 4
  %175 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 5
  %176 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 6
  %177 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 7
  %178 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 9
  %179 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 10
  %180 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 11
  %181 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 12
  %182 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 13
  %183 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 14
  %184 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 15
  %185 = bitcast [10 x i64]* %5 to i8*
  %186 = load i64, i64* %163, align 8
  %187 = load i64, i64* %164, align 16
  %188 = load i64, i64* %165, align 8
  %189 = load i64, i64* %166, align 16
  %190 = load i64, i64* %167, align 8
  %191 = load i64, i64* %168, align 16
  br label %225

192:                                              ; preds = %112, %192
  %193 = phi i64 [ %98, %112 ], [ %222, %192 ]
  %194 = phi i64 [ %99, %112 ], [ %220, %192 ]
  %195 = phi i64 [ %100, %112 ], [ %216, %192 ]
  %196 = phi i64 [ %101, %112 ], [ %212, %192 ]
  %197 = phi i64 [ %102, %112 ], [ %208, %192 ]
  %198 = phi i64 [ %103, %112 ], [ %204, %192 ]
  %199 = phi i8 [ %105, %112 ], [ %223, %192 ]
  %200 = mul nsw i64 %198, 10
  %201 = mul nsw i64 %197, 10
  %202 = lshr i64 %200, 32
  %203 = add nuw nsw i64 %202, %201
  %204 = and i64 %200, 4294967294
  %205 = mul nsw i64 %196, 10
  %206 = lshr i64 %203, 32
  %207 = add nuw nsw i64 %206, %205
  %208 = and i64 %203, 4294967295
  %209 = mul nsw i64 %195, 10
  %210 = lshr i64 %207, 32
  %211 = add nuw nsw i64 %210, %209
  %212 = and i64 %207, 4294967295
  %213 = mul nsw i64 %194, 10
  %214 = lshr i64 %211, 32
  %215 = add nuw nsw i64 %214, %213
  %216 = and i64 %211, 4294967295
  %217 = mul nsw i64 %193, 10
  %218 = lshr i64 %215, 32
  %219 = add nsw i64 %218, %217
  %220 = and i64 %215, 4294967295
  %221 = lshr i64 %219, 32
  %222 = and i64 %219, 4294967295
  %223 = add i8 %199, 1
  %224 = icmp eq i64 %221, 0
  br i1 %224, label %192, label %120

225:                                              ; preds = %306, %121
  %226 = phi i64 [ %191, %121 ], [ %307, %306 ]
  %227 = phi i64 [ %190, %121 ], [ %308, %306 ]
  %228 = phi i64 [ %189, %121 ], [ %309, %306 ]
  %229 = phi i64 [ %188, %121 ], [ %310, %306 ]
  %230 = phi i64 [ %187, %121 ], [ %311, %306 ]
  %231 = phi i64 [ %186, %121 ], [ %312, %306 ]
  %232 = phi i64 [ 0, %121 ], [ %313, %306 ]
  %233 = phi i64 [ 0, %121 ], [ %314, %306 ]
  %234 = phi i64 [ 0, %121 ], [ %315, %306 ]
  %235 = phi i64 [ 0, %121 ], [ %316, %306 ]
  %236 = phi i64 [ 0, %121 ], [ %317, %306 ]
  %237 = phi i64 [ 0, %121 ], [ %318, %306 ]
  %238 = icmp ugt i64 %232, %231
  %239 = icmp ult i64 %232, %231
  %240 = sext i1 %239 to i8
  %241 = select i1 %238, i8 1, i8 %240
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %319, label %243

243:                                              ; preds = %343, %337, %331, %325, %319, %225
  %244 = phi i8 [ %241, %225 ], [ %323, %319 ], [ %329, %325 ], [ %335, %331 ], [ %341, %337 ], [ %347, %343 ]
  %245 = icmp slt i8 %244, 1
  br i1 %245, label %349, label %508

246:                                              ; preds = %259
  %247 = add nsw i64 %254, -1
  %248 = icmp eq i64 %254, 0
  br i1 %248, label %300, label %249

249:                                              ; preds = %246
  %250 = getelementptr inbounds [16 x i64], [16 x i64]* %4, i64 0, i64 %247
  %251 = load i64, i64* %250, align 8
  br label %252

252:                                              ; preds = %249, %349
  %253 = phi i64 [ %251, %249 ], [ %507, %349 ]
  %254 = phi i64 [ %247, %249 ], [ 15, %349 ]
  %255 = icmp ult i64 %254, 6
  br i1 %255, label %256, label %259

256:                                              ; preds = %252
  %257 = getelementptr inbounds [7 x i64], [7 x i64]* %6, i64 0, i64 %254
  %258 = load i64, i64* %257, align 8
  br label %259

259:                                              ; preds = %256, %252
  %260 = phi i64 [ %258, %256 ], [ 0, %252 ]
  %261 = icmp ugt i64 %253, %260
  %262 = icmp ult i64 %253, %260
  %263 = sext i1 %262 to i8
  %264 = select i1 %261, i8 1, i8 %263
  %265 = icmp eq i8 %264, 0
  br i1 %265, label %246, label %266

266:                                              ; preds = %259
  %267 = sext i8 %264 to i32
  switch i32 %267, label %306 [
    i32 -1, label %271
    i32 1, label %268
    i32 0, label %301
  ]

268:                                              ; preds = %266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %160, i8* nonnull align 16 %185, i64 80, i1 false)
  %269 = add nsw i64 %376, -1
  %270 = icmp eq i64 %376, 0
  br i1 %270, label %303, label %306

271:                                              ; preds = %266
  %272 = add nuw i64 %376, 1
  %273 = lshr i64 %358, 33
  %274 = add nuw i64 %273, %359
  %275 = and i64 %363, 4294967295
  %276 = lshr i64 %362, 33
  %277 = add nuw nsw i64 %276, %275
  %278 = and i64 %367, 4294967295
  %279 = lshr i64 %366, 33
  %280 = add nuw nsw i64 %279, %278
  %281 = and i64 %371, 4294967295
  %282 = lshr i64 %370, 33
  %283 = add nuw nsw i64 %282, %281
  %284 = and i64 %375, 4294967295
  %285 = lshr i64 %272, 32
  %286 = add nuw nsw i64 %285, %284
  %287 = and i64 %272, 4294967295
  %288 = lshr i64 %286, 32
  %289 = add nuw nsw i64 %283, %288
  %290 = and i64 %286, 4294967295
  %291 = lshr i64 %289, 32
  %292 = add nuw nsw i64 %280, %291
  %293 = and i64 %289, 4294967295
  %294 = lshr i64 %292, 32
  %295 = add nuw nsw i64 %277, %294
  %296 = and i64 %292, 4294967295
  %297 = lshr i64 %295, 32
  %298 = add i64 %274, %297
  %299 = and i64 %295, 4294967295
  br label %306

300:                                              ; preds = %246
  store i64 %231, i64* %163, align 8
  store i64 %230, i64* %164, align 16
  store i64 %229, i64* %165, align 8
  store i64 %228, i64* %166, align 16
  store i64 %227, i64* %167, align 8
  store i64 %226, i64* %168, align 16
  br label %302

301:                                              ; preds = %266
  store i64 %231, i64* %163, align 8
  store i64 %230, i64* %164, align 16
  store i64 %229, i64* %165, align 8
  store i64 %228, i64* %166, align 16
  store i64 %227, i64* %167, align 8
  store i64 %226, i64* %168, align 16
  br label %302

302:                                              ; preds = %301, %300
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %185)
  br label %509

303:                                              ; preds = %268
  %304 = add i64 %375, -1
  %305 = icmp eq i64 %375, 0
  br i1 %305, label %642, label %306

306:                                              ; preds = %648, %303, %642, %645, %268, %271, %266
  %307 = phi i64 [ %226, %266 ], [ %226, %271 ], [ %269, %268 ], [ %269, %645 ], [ %269, %642 ], [ %269, %303 ], [ %269, %648 ]
  %308 = phi i64 [ %227, %266 ], [ %227, %271 ], [ %375, %268 ], [ %304, %645 ], [ %304, %642 ], [ %304, %303 ], [ %304, %648 ]
  %309 = phi i64 [ %228, %266 ], [ %228, %271 ], [ %371, %268 ], [ %643, %645 ], [ %643, %642 ], [ %371, %303 ], [ %643, %648 ]
  %310 = phi i64 [ %229, %266 ], [ %229, %271 ], [ %367, %268 ], [ %646, %645 ], [ %367, %642 ], [ %367, %303 ], [ %646, %648 ]
  %311 = phi i64 [ %230, %266 ], [ %230, %271 ], [ %363, %268 ], [ %363, %645 ], [ %363, %642 ], [ %363, %303 ], [ %649, %648 ]
  %312 = phi i64 [ %231, %266 ], [ %231, %271 ], [ %359, %268 ], [ %359, %645 ], [ %359, %642 ], [ %359, %303 ], [ %652, %648 ]
  %313 = phi i64 [ %232, %266 ], [ %298, %271 ], [ %232, %268 ], [ %232, %645 ], [ %232, %642 ], [ %232, %303 ], [ %232, %648 ]
  %314 = phi i64 [ %233, %266 ], [ %299, %271 ], [ %233, %268 ], [ %233, %645 ], [ %233, %642 ], [ %233, %303 ], [ %233, %648 ]
  %315 = phi i64 [ %234, %266 ], [ %296, %271 ], [ %234, %268 ], [ %234, %645 ], [ %234, %642 ], [ %234, %303 ], [ %234, %648 ]
  %316 = phi i64 [ %235, %266 ], [ %293, %271 ], [ %235, %268 ], [ %235, %645 ], [ %235, %642 ], [ %235, %303 ], [ %235, %648 ]
  %317 = phi i64 [ %236, %266 ], [ %290, %271 ], [ %236, %268 ], [ %236, %645 ], [ %236, %642 ], [ %236, %303 ], [ %236, %648 ]
  %318 = phi i64 [ %237, %266 ], [ %287, %271 ], [ %237, %268 ], [ %237, %645 ], [ %237, %642 ], [ %237, %303 ], [ %237, %648 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %185)
  br label %225

319:                                              ; preds = %225
  %320 = icmp ugt i64 %233, %230
  %321 = icmp ult i64 %233, %230
  %322 = sext i1 %321 to i8
  %323 = select i1 %320, i8 1, i8 %322
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %325, label %243

325:                                              ; preds = %319
  %326 = icmp ugt i64 %234, %229
  %327 = icmp ult i64 %234, %229
  %328 = sext i1 %327 to i8
  %329 = select i1 %326, i8 1, i8 %328
  %330 = icmp eq i8 %329, 0
  br i1 %330, label %331, label %243

331:                                              ; preds = %325
  %332 = icmp ugt i64 %235, %228
  %333 = icmp ult i64 %235, %228
  %334 = sext i1 %333 to i8
  %335 = select i1 %332, i8 1, i8 %334
  %336 = icmp eq i8 %335, 0
  br i1 %336, label %337, label %243

337:                                              ; preds = %331
  %338 = icmp ugt i64 %236, %227
  %339 = icmp ult i64 %236, %227
  %340 = sext i1 %339 to i8
  %341 = select i1 %338, i8 1, i8 %340
  %342 = icmp eq i8 %341, 0
  br i1 %342, label %343, label %243

343:                                              ; preds = %337
  %344 = icmp ugt i64 %237, %226
  %345 = icmp ult i64 %237, %226
  %346 = sext i1 %345 to i8
  %347 = select i1 %344, i8 1, i8 %346
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %349, label %243

349:                                              ; preds = %243, %343
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %185)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %185, i8 -86, i64 80, i1 false)
  %350 = add i64 %226, %237
  %351 = add i64 %227, %236
  %352 = add i64 %228, %235
  %353 = add i64 %229, %234
  %354 = add i64 %231, %232
  %355 = shl i64 %354, 32
  %356 = and i64 %355, 4294967296
  %357 = add i64 %356, %233
  %358 = add i64 %357, %230
  %359 = lshr i64 %354, 1
  %360 = shl i64 %358, 32
  %361 = and i64 %360, 4294967296
  %362 = add i64 %353, %361
  %363 = lshr i64 %358, 1
  %364 = shl i64 %362, 32
  %365 = and i64 %364, 4294967296
  %366 = add i64 %352, %365
  %367 = lshr i64 %362, 1
  %368 = shl i64 %366, 32
  %369 = and i64 %368, 4294967296
  %370 = add i64 %351, %369
  %371 = lshr i64 %366, 1
  %372 = shl i64 %370, 32
  %373 = and i64 %372, 4294967296
  %374 = add i64 %350, %373
  %375 = lshr i64 %370, 1
  %376 = lshr i64 %374, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %170, i8 0, i64 64, i1 false) #10
  %377 = mul i64 %376, %41
  %378 = and i64 %377, 4294967295
  store i64 %378, i64* %162, align 16
  %379 = lshr i64 %377, 32
  %380 = mul i64 %376, %42
  %381 = and i64 %380, 4294967295
  %382 = lshr i64 %380, 32
  %383 = mul i64 %376, %43
  %384 = and i64 %383, 4294967295
  %385 = lshr i64 %383, 32
  %386 = mul i64 %375, %41
  %387 = and i64 %386, 4294967295
  %388 = add nuw nsw i64 %379, %387
  %389 = add nuw nsw i64 %388, %381
  %390 = lshr i64 %386, 32
  %391 = mul i64 %375, %42
  %392 = and i64 %391, 4294967295
  %393 = lshr i64 %391, 32
  %394 = mul i64 %375, %43
  %395 = and i64 %394, 4294967295
  %396 = lshr i64 %394, 32
  %397 = mul i64 %371, %41
  %398 = and i64 %397, 4294967295
  %399 = lshr i64 %397, 32
  %400 = mul i64 %371, %42
  %401 = and i64 %400, 4294967295
  %402 = lshr i64 %400, 32
  %403 = mul i64 %371, %43
  %404 = and i64 %403, 4294967295
  %405 = lshr i64 %403, 32
  %406 = mul i64 %367, %41
  %407 = and i64 %406, 4294967295
  %408 = lshr i64 %406, 32
  %409 = mul i64 %367, %42
  %410 = and i64 %409, 4294967295
  %411 = lshr i64 %409, 32
  %412 = mul i64 %367, %43
  %413 = and i64 %412, 4294967295
  %414 = lshr i64 %412, 32
  %415 = mul i64 %363, %41
  %416 = and i64 %415, 4294967295
  %417 = lshr i64 %415, 32
  %418 = mul i64 %363, %42
  %419 = and i64 %418, 4294967295
  %420 = lshr i64 %418, 32
  %421 = mul i64 %363, %43
  %422 = and i64 %421, 4294967295
  %423 = lshr i64 %421, 32
  %424 = mul i64 %359, %41
  %425 = and i64 %424, 4294967295
  %426 = lshr i64 %424, 32
  %427 = mul i64 %359, %42
  %428 = and i64 %427, 4294967295
  %429 = lshr i64 %427, 32
  %430 = mul i64 %359, %43
  %431 = and i64 %430, 4294967295
  %432 = lshr i64 %430, 32
  %433 = lshr i64 %389, 32
  %434 = add nuw nsw i64 %390, %398
  %435 = add nuw nsw i64 %434, %392
  %436 = add nuw nsw i64 %435, %382
  %437 = add nuw nsw i64 %436, %384
  %438 = add nuw nsw i64 %437, %433
  %439 = and i64 %389, 4294967295
  %440 = lshr i64 %438, 32
  %441 = add nuw nsw i64 %399, %407
  %442 = add nuw nsw i64 %441, %401
  %443 = add nuw nsw i64 %442, %393
  %444 = add nuw nsw i64 %443, %395
  %445 = add nuw nsw i64 %444, %385
  %446 = add nuw nsw i64 %445, %440
  %447 = and i64 %438, 4294967295
  %448 = lshr i64 %446, 32
  %449 = add nuw nsw i64 %408, %416
  %450 = add nuw nsw i64 %449, %410
  %451 = add nuw nsw i64 %450, %402
  %452 = add nuw nsw i64 %451, %404
  %453 = add nuw nsw i64 %452, %396
  %454 = add nuw nsw i64 %453, %448
  %455 = and i64 %446, 4294967295
  %456 = lshr i64 %454, 32
  %457 = add nuw nsw i64 %417, %425
  %458 = add nuw nsw i64 %457, %419
  %459 = add nuw nsw i64 %458, %411
  %460 = add nuw nsw i64 %459, %413
  %461 = add nuw nsw i64 %460, %405
  %462 = add nuw nsw i64 %461, %456
  %463 = and i64 %454, 4294967295
  %464 = lshr i64 %462, 32
  %465 = add nuw nsw i64 %428, %426
  %466 = add nuw nsw i64 %465, %420
  %467 = add nuw nsw i64 %466, %422
  %468 = add nuw nsw i64 %467, %414
  %469 = add nuw nsw i64 %468, %464
  %470 = and i64 %462, 4294967295
  %471 = lshr i64 %469, 32
  %472 = add nuw nsw i64 %431, %429
  %473 = add nuw nsw i64 %472, %423
  %474 = add nuw nsw i64 %473, %471
  %475 = and i64 %469, 4294967295
  %476 = lshr i64 %474, 32
  %477 = add nuw nsw i64 %432, %476
  %478 = and i64 %474, 4294967295
  %479 = lshr i64 %477, 32
  %480 = load i64, i64* %178, align 8
  %481 = add i64 %479, %480
  %482 = and i64 %477, 4294967295
  %483 = lshr i64 %481, 32
  %484 = load i64, i64* %179, align 16
  %485 = add i64 %483, %484
  %486 = and i64 %481, 4294967295
  %487 = lshr i64 %485, 32
  %488 = load i64, i64* %180, align 8
  %489 = add i64 %487, %488
  %490 = and i64 %485, 4294967295
  %491 = lshr i64 %489, 32
  %492 = load i64, i64* %181, align 16
  %493 = add i64 %491, %492
  %494 = and i64 %489, 4294967295
  %495 = lshr i64 %493, 32
  %496 = load i64, i64* %182, align 8
  %497 = add i64 %495, %496
  %498 = and i64 %493, 4294967295
  %499 = lshr i64 %497, 32
  %500 = load i64, i64* %183, align 16
  %501 = add i64 %499, %500
  %502 = and i64 %497, 4294967295
  %503 = lshr i64 %501, 32
  %504 = load i64, i64* %184, align 8
  %505 = add i64 %503, %504
  %506 = and i64 %501, 4294967295
  store i64 %378, i64* %162, align 16
  store i64 %439, i64* %171, align 8
  store i64 %447, i64* %172, align 16
  store i64 %455, i64* %173, align 8
  store i64 %463, i64* %174, align 16
  store i64 %470, i64* %175, align 8
  store i64 %475, i64* %176, align 16
  store i64 %478, i64* %177, align 8
  store i64 %482, i64* %169, align 16
  store i64 %486, i64* %178, align 8
  store i64 %490, i64* %179, align 16
  store i64 %494, i64* %180, align 8
  store i64 %498, i64* %181, align 16
  store i64 %502, i64* %182, align 8
  store i64 %506, i64* %183, align 16
  %507 = and i64 %505, 4294967295
  store i64 %507, i64* %184, align 8
  br label %252

508:                                              ; preds = %243
  store i64 %231, i64* %163, align 8
  store i64 %230, i64* %164, align 16
  store i64 %229, i64* %165, align 8
  store i64 %228, i64* %166, align 16
  store i64 %227, i64* %167, align 8
  store i64 %226, i64* %168, align 16
  br label %509

509:                                              ; preds = %508, %302
  %510 = phi i64 [ %376, %302 ], [ %237, %508 ]
  %511 = phi i64 [ %375, %302 ], [ %236, %508 ]
  %512 = phi i64 [ %371, %302 ], [ %235, %508 ]
  %513 = phi i64 [ %367, %302 ], [ %234, %508 ]
  %514 = phi i64 [ %363, %302 ], [ %233, %508 ]
  %515 = phi i64 [ %359, %302 ], [ %232, %508 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %161) #10
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %158) #10
  %516 = icmp eq i8 %157, 0
  br i1 %516, label %608, label %517

517:                                              ; preds = %509
  %518 = icmp ult i8 %157, 29
  %519 = or i64 %514, %513
  %520 = or i64 %519, %515
  %521 = icmp eq i64 %520, 0
  %522 = and i1 %521, %518
  br i1 %522, label %583, label %529

523:                                              ; preds = %529
  %524 = icmp ult i8 %559, 29
  %525 = or i64 %544, %548
  %526 = or i64 %525, %540
  %527 = icmp eq i64 %526, 0
  %528 = and i1 %527, %524
  br i1 %528, label %561, label %529

529:                                              ; preds = %517, %523
  %530 = phi i8 [ %559, %523 ], [ %157, %517 ]
  %531 = phi i64 [ %540, %523 ], [ %515, %517 ]
  %532 = phi i64 [ %544, %523 ], [ %514, %517 ]
  %533 = phi i64 [ %548, %523 ], [ %513, %517 ]
  %534 = phi i64 [ %552, %523 ], [ %512, %517 ]
  %535 = phi i64 [ %556, %523 ], [ %511, %517 ]
  %536 = phi i64 [ %557, %523 ], [ %510, %517 ]
  %537 = urem i64 %531, 10
  %538 = shl nuw nsw i64 %537, 32
  %539 = add i64 %538, %532
  %540 = udiv i64 %531, 10
  %541 = urem i64 %539, 10
  %542 = shl nuw nsw i64 %541, 32
  %543 = add i64 %542, %533
  %544 = udiv i64 %539, 10
  %545 = urem i64 %543, 10
  %546 = shl nuw nsw i64 %545, 32
  %547 = add i64 %546, %534
  %548 = udiv i64 %543, 10
  %549 = urem i64 %547, 10
  %550 = shl nuw nsw i64 %549, 32
  %551 = add i64 %550, %535
  %552 = udiv i64 %547, 10
  %553 = urem i64 %551, 10
  %554 = shl nuw nsw i64 %553, 32
  %555 = add i64 %554, %536
  %556 = udiv i64 %551, 10
  %557 = udiv i64 %555, 10
  %558 = urem i64 %555, 10
  %559 = add i8 %530, -1
  %560 = icmp eq i8 %559, 0
  br i1 %560, label %561, label %523

561:                                              ; preds = %529, %523
  %562 = trunc i64 %558 to i8
  %563 = icmp ugt i8 %562, 4
  br i1 %563, label %564, label %583

564:                                              ; preds = %561
  %565 = lshr i64 %556, 32
  %566 = add nuw nsw i64 %552, %565
  %567 = and i64 %556, 4294967295
  %568 = lshr i64 %557, 32
  %569 = add nuw nsw i64 %567, %568
  %570 = and i64 %557, 4294967295
  %571 = lshr i64 %569, 32
  %572 = add nuw nsw i64 %566, %571
  %573 = and i64 %569, 4294967295
  %574 = add nuw nsw i64 %570, 1
  %575 = icmp ult i64 %574, 4294967296
  br i1 %575, label %583, label %576

576:                                              ; preds = %564
  %577 = add nuw nsw i64 %573, 1
  %578 = icmp ult i64 %577, 4294967296
  br i1 %578, label %583, label %579

579:                                              ; preds = %576
  %580 = add nuw nsw i64 %572, 1
  %581 = icmp ult i64 %580, 4294967296
  %582 = select i1 %581, i64 %580, i64 0
  br label %583

583:                                              ; preds = %517, %561, %564, %576, %579
  %584 = phi i64 [ %574, %564 ], [ 0, %576 ], [ 0, %579 ], [ %557, %561 ], [ %510, %517 ]
  %585 = phi i64 [ %573, %564 ], [ %577, %576 ], [ 0, %579 ], [ %556, %561 ], [ %511, %517 ]
  %586 = phi i64 [ %572, %564 ], [ %572, %576 ], [ %582, %579 ], [ %552, %561 ], [ %512, %517 ]
  %587 = phi i8 [ %559, %564 ], [ %559, %576 ], [ %559, %579 ], [ %559, %561 ], [ %157, %517 ]
  %588 = icmp ugt i8 %587, %105
  br i1 %588, label %589, label %608

589:                                              ; preds = %583, %605
  %590 = phi i64 [ %603, %605 ], [ %584, %583 ]
  %591 = phi i64 [ %599, %605 ], [ %585, %583 ]
  %592 = phi i64 [ %595, %605 ], [ %586, %583 ]
  %593 = phi i8 [ %606, %605 ], [ %587, %583 ]
  %594 = urem i64 %592, 10
  %595 = udiv i64 %592, 10
  %596 = shl nuw nsw i64 %594, 32
  %597 = add i64 %596, %591
  %598 = urem i64 %597, 10
  %599 = udiv i64 %597, 10
  %600 = shl nuw nsw i64 %598, 32
  %601 = add i64 %600, %590
  %602 = urem i64 %601, 10
  %603 = udiv i64 %601, 10
  %604 = icmp eq i64 %602, 0
  br i1 %604, label %605, label %608

605:                                              ; preds = %589
  %606 = add i8 %593, -1
  %607 = icmp ugt i8 %606, %105
  br i1 %607, label %589, label %608

608:                                              ; preds = %589, %605, %509, %583
  %609 = phi i64 [ %584, %583 ], [ %510, %509 ], [ %590, %589 ], [ %603, %605 ]
  %610 = phi i64 [ %585, %583 ], [ %511, %509 ], [ %591, %589 ], [ %599, %605 ]
  %611 = phi i64 [ %586, %583 ], [ %512, %509 ], [ %592, %589 ], [ %595, %605 ]
  %612 = phi i8 [ %587, %583 ], [ 0, %509 ], [ %593, %589 ], [ %606, %605 ]
  %613 = and i64 %609, 4294967295
  br i1 %38, label %621, label %614

614:                                              ; preds = %608
  %615 = or i64 %610, %609
  %616 = or i64 %615, %611
  %617 = trunc i64 %616 to i32
  %618 = icmp ne i32 %617, 0
  %619 = zext i1 %618 to i64
  %620 = shl nuw nsw i64 %619, 32
  br label %621

621:                                              ; preds = %608, %614
  %622 = phi i64 [ 0, %608 ], [ %620, %614 ]
  %623 = icmp ugt i8 %612, 28
  %624 = select i1 %623, i8 0, i8 %612
  %625 = zext i8 %624 to i64
  %626 = shl nuw nsw i64 %625, 40
  %627 = or i64 %626, %613
  %628 = or i64 %627, %622
  br label %629

629:                                              ; preds = %621, %115
  %630 = phi i64 [ %611, %621 ], [ 0, %115 ]
  %631 = phi i64 [ %610, %621 ], [ 0, %115 ]
  %632 = phi i64 [ %628, %621 ], [ %119, %115 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %23) #10
  br label %633

633:                                              ; preds = %13, %629
  %634 = phi i64 [ %630, %629 ], [ 0, %13 ]
  %635 = phi i64 [ %631, %629 ], [ 0, %13 ]
  %636 = phi i64 [ %632, %629 ], [ 0, %13 ]
  %637 = shl i64 %635, 32
  %638 = and i64 %634, 4294967295
  %639 = or i64 %637, %638
  %640 = insertvalue { i64, i64 } undef, i64 %639, 0
  %641 = insertvalue { i64, i64 } %640, i64 %636, 1
  ret { i64, i64 } %641

642:                                              ; preds = %303
  %643 = add i64 %371, -1
  %644 = icmp eq i64 %371, 0
  br i1 %644, label %645, label %306

645:                                              ; preds = %642
  %646 = add i64 %367, -1
  %647 = icmp eq i64 %367, 0
  br i1 %647, label %648, label %306

648:                                              ; preds = %645
  %649 = add i64 %363, -1
  %650 = icmp eq i64 %363, 0
  %651 = add i64 %359, -1
  %652 = select i1 %650, i64 %651, i64 %359
  br label %306
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i32 -2143823981}
!5 = !{i32 -2143823960}
