; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_reconstruct.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_reconstruct.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.269" }
%"struct.std::__1::__atomic_base.269" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon.43* }
%class.anon.43 = type { %"class.jxl::Image3"**, %"struct.jxl::OutputEncodingInfo"* }
%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow" = type <{ %"class.jxl::Image3"*, %"class.jxl::Plane"*, i64, i64, i64, i64, i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.44" }
%"struct.std::__1::pair" = type { %"class.jxl::Plane"*, %"class.jxl::Rect" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::pair"* }
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.220", %"class.std::__1::vector.228", %"class.std::__1::vector.159", float, float, %"class.jxl::Image3", %"class.std::__1::vector.220", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.256", %"class.std::__1::vector.262", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.270", %"class.std::__1::vector.276", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.290", %"class.std::__1::vector.290", %"class.std::__1::vector.290", [4 x %"class.std::__1::vector.290"], %"class.std::__1::vector.220", %"class.std::__1::vector.290", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.104", %"class.jxl::Plane.73", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector.59", %"class.jxl::Plane.73", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.155], i64 }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.47", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.54" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.59", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.66", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.73", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.74", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.78" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76", %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.76" = type { float* }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.99" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.81, %"struct.jxl::DctQuantWeightParams", %union.anon.98 }>
%union.anon.81 = type { %"struct.std::__1::array.88", [4 x i8] }
%"struct.std::__1::array.88" = type { [3 x %"struct.std::__1::array.89"] }
%"struct.std::__1::array.89" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.80"] }
%"struct.std::__1::array.80" = type { [17 x float] }
%union.anon.98 = type { i8 }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.104" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.105", %"class.jxl::Plane.105", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.105" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.106", %"class.std::__1::vector.120", %"class.std::__1::vector.120" }
%"class.std::__1::vector.106" = type { %"class.std::__1::__vector_base.107" }
%"class.std::__1::__vector_base.107" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.115" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.108", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.110" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.120" = type { %"class.std::__1::__vector_base.121" }
%"class.std::__1::__vector_base.121" = type { i64*, i64*, %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.127", %"class.std::__1::vector.142" }
%"class.std::__1::vector.127" = type { %"class.std::__1::__vector_base.128" }
%"class.std::__1::__vector_base.128" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.137" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.129", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.129" = type { %"class.std::__1::__vector_base.130" }
%"class.std::__1::__vector_base.130" = type { %"struct.std::__1::pair.131"*, %"struct.std::__1::pair.131"*, %"class.std::__1::__compressed_pair.132" }
%"struct.std::__1::pair.131" = type { i64, i64 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.std::__1::pair.131"* }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.144" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.jxl::Spline::Point"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i32*, i32*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i32* }
%"class.jxl::Plane.73" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.91"], %"class.std::__1::vector.59", %"class.std::__1::vector.149", i64, i64 }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i32*, i32*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i32* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { i8*, i8*, %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem" }
%struct.anon.155 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.156", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.220", i64 }
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.159", %"class.std::__1::vector.166", %"class.std::__1::vector.159", %"class.std::__1::vector.173", %"class.std::__1::vector.181", %"class.std::__1::vector.190", %"class.std::__1::vector.204", %"class.std::__1::vector.149", %"class.std::__1::vector.159", %"class.std::__1::vector.149", i32, i8, %"class.std::__1::vector.149" }
%"class.std::__1::vector.166" = type { %"class.std::__1::__vector_base.167" }
%"class.std::__1::__vector_base.167" = type { i32*, i32*, %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { i32* }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.176" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.175", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.175" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.181" = type { %"class.std::__1::__vector_base.182" }
%"class.std::__1::__vector_base.182" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.185" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.183", %"struct.std::__1::array.184", i32, i8, [3 x i8] }>
%"struct.std::__1::array.183" = type { [17 x i32] }
%"struct.std::__1::array.184" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.190" = type { %"class.std::__1::__vector_base.191" }
%"class.std::__1::__vector_base.191" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.199" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.192" }
%"class.std::__1::vector.192" = type { %"class.std::__1::__vector_base.193" }
%"class.std::__1::__vector_base.193" = type { i16*, i16*, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { i16* }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.204" = type { %"class.std::__1::__vector_base.205" }
%"class.std::__1::__vector_base.205" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.214" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.206", i32, %"class.std::__1::vector.59", %"class.std::__1::vector.207" }
%"struct.std::__1::array.206" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.207" = type { %"class.std::__1::__vector_base.208" }
%"class.std::__1::__vector_base.208" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.209" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.251" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.230", %"class.std::__1::vector.244", %"class.std::__1::vector.91", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.230" = type { %"class.std::__1::__vector_base.231" }
%"class.std::__1::__vector_base.231" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.239" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.232" }
%"class.std::__1::vector.232" = type { %"class.std::__1::__vector_base.233" }
%"class.std::__1::__vector_base.233" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.234" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.244" = type { %"class.std::__1::__vector_base.245" }
%"class.std::__1::__vector_base.245" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.246" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.159" = type { %"class.std::__1::__vector_base.160" }
%"class.std::__1::__vector_base.160" = type { %"class.std::__1::vector.149"*, %"class.std::__1::vector.149"*, %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::vector.149"* }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.256" = type { %"class.std::__1::__vector_base.257" }
%"class.std::__1::__vector_base.257" = type { float*, float*, %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"class.std::__1::vector.262" = type { %"class.std::__1::__vector_base.263" }
%"class.std::__1::__vector_base.263" = type { %"class.std::__1::vector.256"*, %"class.std::__1::vector.256"*, %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.std::__1::vector.256"* }
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.276" = type { %"class.std::__1::__vector_base.277" }
%"class.std::__1::__vector_base.277" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.278" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.283" }
%"class.std::__1::unique_ptr.283" = type { %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"struct.std::__1::atomic.286"* }
%"struct.std::__1::atomic.286" = type opaque
%"class.std::__1::vector.220" = type { %"class.std::__1::__vector_base.221" }
%"class.std::__1::__vector_base.221" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.290" = type { %"class.std::__1::__vector_base.291" }
%"class.std::__1::__vector_base.291" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.292" }
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"class.jxl::Image3"* }
%"class.std::__1::vector.297" = type { %"class.std::__1::__vector_base.298" }
%"class.std::__1::__vector_base.298" = type { %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*, %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*, %"class.std::__1::__compressed_pair.299" }
%"class.std::__1::__compressed_pair.299" = type { %"struct.std::__1::__compressed_pair_elem.300" }
%"struct.std::__1::__compressed_pair_elem.300" = type { %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* }
%"class.std::__1::vector.304" = type { %"class.std::__1::__vector_base.305" }
%"class.std::__1::__vector_base.305" = type { float**, float**, %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { float** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.398" = type { i32 (i64)*, %class.anon.325* }
%class.anon.325 = type { %"class.std::__1::vector.311"*, %"class.jxl::ImageBlender"*, %"class.jxl::ImageBundle"*, %"struct.std::__1::atomic.319"* }
%"class.std::__1::vector.311" = type { %"class.std::__1::__vector_base.312" }
%"class.std::__1::__vector_base.312" = type { %"class.jxl::Rect"*, %"class.jxl::Rect"*, %"class.std::__1::__compressed_pair.313" }
%"class.std::__1::__compressed_pair.313" = type { %"struct.std::__1::__compressed_pair_elem.314" }
%"struct.std::__1::__compressed_pair_elem.314" = type { %"class.jxl::Rect"* }
%"class.jxl::ImageBlender" = type { %"struct.jxl::BlendingInfo", %"class.jxl::ImageBundle"*, %"class.jxl::Rect", %"class.jxl::Rect", i8, %"class.std::__1::vector.66"*, %"struct.jxl::FrameOrigin" }
%"struct.std::__1::atomic.319" = type { %"struct.std::__1::__atomic_base.320" }
%"struct.std::__1::__atomic_base.320" = type { %"struct.std::__1::__cxx_atomic_impl.321" }
%"struct.std::__1::__cxx_atomic_impl.321" = type { %"struct.std::__1::__cxx_atomic_base_impl.322" }
%"struct.std::__1::__cxx_atomic_base_impl.322" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.385" = type { %class.anon.318*, %class.anon.323* }
%class.anon.318 = type { %"struct.jxl::PassesDecoderState"** }
%class.anon.323 = type { %"struct.jxl::PassesDecoderState"**, %"class.std::__1::vector.311"*, %"class.jxl::Image3"**, %"class.jxl::ImageBundle"**, %"struct.jxl::FrameHeader"*, %"struct.std::__1::atomic.319"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jxl::Visitor" = type { i32 (...)** }
%"struct.std::__1::__split_buffer.386" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.387" }
%"class.std::__1::__compressed_pair.387" = type { %"struct.std::__1::__compressed_pair_elem.279", %"struct.std::__1::__compressed_pair_elem.388" }
%"struct.std::__1::__compressed_pair_elem.388" = type { %"class.std::__1::allocator.281"* }
%"class.std::__1::allocator.281" = type { i8 }
%"struct.std::__1::__split_buffer.389" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.390" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.293", %"struct.std::__1::__compressed_pair_elem.391" }
%"struct.std::__1::__compressed_pair_elem.391" = type { %"class.std::__1::allocator.295"* }
%"class.std::__1::allocator.295" = type { i8 }
%"class.jxl::ImageBlender::RectBlender" = type { i8, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, %"class.std::__1::vector.399", %"class.std::__1::vector.304", %"class.std::__1::vector.108" }
%"class.std::__1::vector.399" = type { %"class.std::__1::__vector_base.400" }
%"class.std::__1::__vector_base.400" = type { float**, float**, %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { float** }

$_ZN3jxl6Image3IfE8ShrinkToEmm = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl11ImageBundleC2EOS0_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_ = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKmS9_EEEvDpOT_ = comdat any

$_ZN3jxl18PassesDecoderState13EnsureStorageEm = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@.str = private unnamed_addr constant [43 x i8] c"%s:%d: JXL_ABORT: Invalid target encoding\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_reconstruct.cc\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"ec < extra_channels.size()\00", align 1
@_ZN3jxlL34UndoXYBInPlaceHighwayDispatchTableE = internal unnamed_addr constant [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*] [i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* @_ZN3hwy13FunctionCacheIN3jxl6StatusEJPNS1_6Image3IfEERKNS1_4RectERKNS1_18OutputEncodingInfoEEE13ChooseAndCallIXadL_ZNS1_L34UndoXYBInPlaceHighwayDispatchTableEEEEES2_S5_S8_SB_, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* @_ZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* @_ZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* @_ZN3jxl6N_SSE414UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* null, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)* @_ZN3jxl8N_SCALAR14UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL32FloatToRGBA8HighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*] [void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectEbPKNS1_5PlaneIfEES8_S8_PhmEE13ChooseAndCallIXadL_ZNS1_L32FloatToRGBA8HighwayDispatchTableEEEEEvS5_S8_bSC_S8_S8_SD_m, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* @_ZN3jxl6N_AVX312FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* @_ZN3jxl6N_AVX212FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* @_ZN3jxl6N_SSE412FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* null, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)* @_ZN3jxl8N_SCALAR12FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm], align 16
@.str.9 = private unnamed_addr constant [14 x i8] c"ApplyFeatures\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"Blend\00", align 1
@_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = linkonce_odr hidden local_unnamed_addr constant [4 x i64] [i64 0, i64 2, i64 3, i64 6], comdat, align 16
@.str.16 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [45 x i8] c"../../third_party/libjxl/src/lib/jxl/image.h\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"xsize <= orig_xsize_\00", align 1
@.str.19 = private unnamed_addr constant [21 x i8] c"ysize <= orig_ysize_\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.20 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.21 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@.str.24 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@.str.27 = private unnamed_addr constant [75 x i8] c"HWY_DYNAMIC_DISPATCH(UndoXYBInPlace)(dst, Rect(*dst).Line(y), output_info)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_SSE414UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::OutputEncodingInfo"* dereferenceable(352)) #0 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %41, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 2
  %15 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 4
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2
  %18 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 0
  %19 = bitcast float* %18 to <4 x float>*
  %20 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 0
  %21 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 1
  %22 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 2
  %23 = bitcast %"struct.jxl::OpsinParams"* %17 to <4 x float>*
  %24 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 12
  %25 = bitcast float* %24 to <4 x float>*
  %26 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 24
  %27 = bitcast float* %26 to <4 x float>*
  %28 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 4
  %29 = bitcast float* %28 to <4 x float>*
  %30 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 16
  %31 = bitcast float* %30 to <4 x float>*
  %32 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 28
  %33 = bitcast float* %32 to <4 x float>*
  %34 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 8
  %35 = bitcast float* %34 to <4 x float>*
  %36 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 20
  %37 = bitcast float* %36 to <4 x float>*
  %38 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 32
  %39 = bitcast float* %38 to <4 x float>*
  %40 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 1
  br label %42

41:                                               ; preds = %1115, %3
  ret i32 0

42:                                               ; preds = %7, %1115
  %43 = phi i64 [ 0, %7 ], [ %1116, %1115 ]
  %44 = load i64, i64* %8, align 8
  %45 = add i64 %44, %43
  %46 = load i64, i64* %9, align 8
  %47 = mul i64 %46, %45
  %48 = load i8*, i8** %10, align 8
  %49 = ptrtoint i8* %48 to i64
  %50 = and i64 %49, 63
  %51 = icmp eq i64 %50, 0
  tail call void @llvm.assume(i1 %51) #12
  %52 = getelementptr inbounds i8, i8* %48, i64 %47
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #12
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %11, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = load i8*, i8** %12, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds i8, i8* %59, i64 %47
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #12
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds float, float* %67, i64 %57
  %69 = load i8*, i8** %13, align 8
  %70 = ptrtoint i8* %69 to i64
  %71 = and i64 %70, 63
  %72 = icmp eq i64 %71, 0
  tail call void @llvm.assume(i1 %72) #12
  %73 = getelementptr inbounds i8, i8* %69, i64 %47
  %74 = ptrtoint i8* %73 to i64
  %75 = and i64 %74, 63
  %76 = icmp eq i64 %75, 0
  tail call void @llvm.assume(i1 %76) #12
  %77 = bitcast i8* %73 to float*
  %78 = getelementptr inbounds float, float* %77, i64 %57
  %79 = load i8, i8* %14, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %900

81:                                               ; preds = %42
  %82 = load i32, i32* %15, align 4
  switch i32 %82, label %1112 [
    i32 8, label %83
    i32 13, label %151
    i32 16, label %306
    i32 18, label %512
    i32 1, label %688
    i32 17, label %900
  ]

83:                                               ; preds = %81
  %84 = load i64, i64* %16, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %1115, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %148, %86 ], [ 0, %83 ]
  %88 = getelementptr inbounds float, float* %58, i64 %87
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 16, !alias.scope !3
  %91 = getelementptr inbounds float, float* %68, i64 %87
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 16, !alias.scope !6
  %94 = getelementptr inbounds float, float* %78, i64 %87
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 16, !alias.scope !9
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !12
  %97 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !13, !noalias !18
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> zeroinitializer
  %99 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %100 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %101 = fadd <4 x float> %90, %93
  %102 = fsub <4 x float> %93, %90
  %103 = load float, float* %20, align 4, !noalias !18
  %104 = insertelement <4 x float> undef, float %103, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = fsub <4 x float> %101, %105
  %107 = load float, float* %21, align 4, !noalias !18
  %108 = insertelement <4 x float> undef, float %107, i32 0
  %109 = shufflevector <4 x float> %108, <4 x float> undef, <4 x i32> zeroinitializer
  %110 = fsub <4 x float> %102, %109
  %111 = load float, float* %22, align 4, !noalias !18
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = fsub <4 x float> %96, %113
  %115 = fmul <4 x float> %106, %106
  %116 = fmul <4 x float> %110, %110
  %117 = fmul <4 x float> %114, %114
  %118 = fmul <4 x float> %106, %115
  %119 = fadd <4 x float> %98, %118
  %120 = fmul <4 x float> %110, %116
  %121 = fadd <4 x float> %99, %120
  %122 = fmul <4 x float> %114, %117
  %123 = fadd <4 x float> %100, %122
  %124 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !23, !noalias !18
  %125 = fmul <4 x float> %124, %119
  %126 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !28, !noalias !18
  %127 = fmul <4 x float> %126, %119
  %128 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !33, !noalias !18
  %129 = fmul <4 x float> %128, %119
  %130 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !38, !noalias !18
  %131 = fmul <4 x float> %130, %121
  %132 = fadd <4 x float> %125, %131
  %133 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !43, !noalias !18
  %134 = fmul <4 x float> %121, %133
  %135 = fadd <4 x float> %127, %134
  %136 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !48, !noalias !18
  %137 = fmul <4 x float> %121, %136
  %138 = fadd <4 x float> %129, %137
  %139 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !53, !noalias !18
  %140 = fmul <4 x float> %123, %139
  %141 = fadd <4 x float> %132, %140
  %142 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !58, !noalias !18
  %143 = fmul <4 x float> %123, %142
  %144 = fadd <4 x float> %135, %143
  %145 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !63, !noalias !18
  %146 = fmul <4 x float> %123, %145
  %147 = fadd <4 x float> %138, %146
  store <4 x float> %141, <4 x float>* %89, align 16, !alias.scope !68
  store <4 x float> %144, <4 x float>* %92, align 16, !alias.scope !71
  store <4 x float> %147, <4 x float>* %95, align 16, !alias.scope !74
  %148 = add i64 %87, 4
  %149 = load i64, i64* %16, align 8
  %150 = icmp ult i64 %148, %149
  br i1 %150, label %86, label %1115

151:                                              ; preds = %81
  %152 = load i64, i64* %16, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %1115, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %303, %154 ], [ 0, %151 ]
  %156 = getelementptr inbounds float, float* %58, i64 %155
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 16, !alias.scope !77
  %159 = getelementptr inbounds float, float* %68, i64 %155
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 16, !alias.scope !80
  %162 = getelementptr inbounds float, float* %78, i64 %155
  %163 = bitcast float* %162 to <4 x float>*
  %164 = load <4 x float>, <4 x float>* %163, align 16, !alias.scope !83
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !86
  %165 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !87, !noalias !92
  %166 = shufflevector <4 x float> %165, <4 x float> undef, <4 x i32> zeroinitializer
  %167 = shufflevector <4 x float> %165, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %168 = shufflevector <4 x float> %165, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %169 = fadd <4 x float> %158, %161
  %170 = fsub <4 x float> %161, %158
  %171 = load float, float* %20, align 4, !noalias !92
  %172 = insertelement <4 x float> undef, float %171, i32 0
  %173 = shufflevector <4 x float> %172, <4 x float> undef, <4 x i32> zeroinitializer
  %174 = fsub <4 x float> %169, %173
  %175 = load float, float* %21, align 4, !noalias !92
  %176 = insertelement <4 x float> undef, float %175, i32 0
  %177 = shufflevector <4 x float> %176, <4 x float> undef, <4 x i32> zeroinitializer
  %178 = fsub <4 x float> %170, %177
  %179 = load float, float* %22, align 4, !noalias !92
  %180 = insertelement <4 x float> undef, float %179, i32 0
  %181 = shufflevector <4 x float> %180, <4 x float> undef, <4 x i32> zeroinitializer
  %182 = fsub <4 x float> %164, %181
  %183 = fmul <4 x float> %174, %174
  %184 = fmul <4 x float> %178, %178
  %185 = fmul <4 x float> %182, %182
  %186 = fmul <4 x float> %174, %183
  %187 = fadd <4 x float> %166, %186
  %188 = fmul <4 x float> %178, %184
  %189 = fadd <4 x float> %167, %188
  %190 = fmul <4 x float> %182, %185
  %191 = fadd <4 x float> %168, %190
  %192 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !97, !noalias !92
  %193 = fmul <4 x float> %192, %187
  %194 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !102, !noalias !92
  %195 = fmul <4 x float> %194, %187
  %196 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !107, !noalias !92
  %197 = fmul <4 x float> %196, %187
  %198 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !112, !noalias !92
  %199 = fmul <4 x float> %198, %189
  %200 = fadd <4 x float> %193, %199
  %201 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !117, !noalias !92
  %202 = fmul <4 x float> %189, %201
  %203 = fadd <4 x float> %195, %202
  %204 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !122, !noalias !92
  %205 = fmul <4 x float> %189, %204
  %206 = fadd <4 x float> %197, %205
  %207 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !127, !noalias !92
  %208 = fmul <4 x float> %191, %207
  %209 = fadd <4 x float> %200, %208
  %210 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !132, !noalias !92
  %211 = fmul <4 x float> %191, %210
  %212 = fadd <4 x float> %203, %211
  %213 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !137, !noalias !92
  %214 = fmul <4 x float> %191, %213
  %215 = fadd <4 x float> %206, %214
  %216 = bitcast <4 x float> %209 to <4 x i32>
  %217 = and <4 x i32> %216, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %218 = and <4 x i32> %216, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %219 = bitcast <4 x i32> %218 to <4 x float>
  %220 = fmul <4 x float> %219, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %221 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %219) #12
  fence acq_rel
  %222 = fmul <4 x float> %221, <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>
  %223 = fadd <4 x float> %222, <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>
  %224 = fmul <4 x float> %221, <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>
  %225 = fadd <4 x float> %224, <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>
  fence acq_rel
  %226 = fmul <4 x float> %221, %223
  %227 = fadd <4 x float> %226, <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>
  %228 = fmul <4 x float> %221, %225
  %229 = fadd <4 x float> %228, <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>
  fence acq_rel
  %230 = fmul <4 x float> %221, %227
  %231 = fadd <4 x float> %230, <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>
  %232 = fmul <4 x float> %221, %229
  %233 = fadd <4 x float> %232, <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>
  fence acq_rel
  %234 = fmul <4 x float> %221, %231
  %235 = fadd <4 x float> %234, <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>
  %236 = fmul <4 x float> %221, %233
  %237 = fadd <4 x float> %236, <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>
  fence acq_rel
  %238 = fdiv <4 x float> %235, %237
  %239 = fcmp ogt <4 x float> %219, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %240 = select <4 x i1> %239, <4 x float> %238, <4 x float> %220
  %241 = bitcast <4 x float> %240 to <4 x i32>
  %242 = and <4 x i32> %241, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %243 = or <4 x i32> %242, %217
  %244 = bitcast float* %156 to <4 x i32>*
  store <4 x i32> %243, <4 x i32>* %244, align 16, !alias.scope !142
  %245 = bitcast <4 x float> %212 to <4 x i32>
  %246 = and <4 x i32> %245, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %247 = and <4 x i32> %245, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %248 = bitcast <4 x i32> %247 to <4 x float>
  %249 = fmul <4 x float> %248, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %250 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %248) #12
  fence acq_rel
  %251 = fmul <4 x float> %250, <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>
  %252 = fadd <4 x float> %251, <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>
  %253 = fmul <4 x float> %250, <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>
  %254 = fadd <4 x float> %253, <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>
  fence acq_rel
  %255 = fmul <4 x float> %250, %252
  %256 = fadd <4 x float> %255, <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>
  %257 = fmul <4 x float> %250, %254
  %258 = fadd <4 x float> %257, <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>
  fence acq_rel
  %259 = fmul <4 x float> %250, %256
  %260 = fadd <4 x float> %259, <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>
  %261 = fmul <4 x float> %250, %258
  %262 = fadd <4 x float> %261, <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>
  fence acq_rel
  %263 = fmul <4 x float> %250, %260
  %264 = fadd <4 x float> %263, <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>
  %265 = fmul <4 x float> %250, %262
  %266 = fadd <4 x float> %265, <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>
  fence acq_rel
  %267 = fdiv <4 x float> %264, %266
  %268 = fcmp ogt <4 x float> %248, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %269 = select <4 x i1> %268, <4 x float> %267, <4 x float> %249
  %270 = bitcast <4 x float> %269 to <4 x i32>
  %271 = and <4 x i32> %270, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %272 = or <4 x i32> %271, %246
  %273 = bitcast float* %159 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %273, align 16, !alias.scope !145
  %274 = bitcast <4 x float> %215 to <4 x i32>
  %275 = and <4 x i32> %274, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %276 = and <4 x i32> %274, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %277 = bitcast <4 x i32> %276 to <4 x float>
  %278 = fmul <4 x float> %277, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %279 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %277) #12
  fence acq_rel
  %280 = fmul <4 x float> %279, <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>
  %281 = fadd <4 x float> %280, <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>
  %282 = fmul <4 x float> %279, <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>
  %283 = fadd <4 x float> %282, <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>
  fence acq_rel
  %284 = fmul <4 x float> %279, %281
  %285 = fadd <4 x float> %284, <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>
  %286 = fmul <4 x float> %279, %283
  %287 = fadd <4 x float> %286, <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>
  fence acq_rel
  %288 = fmul <4 x float> %279, %285
  %289 = fadd <4 x float> %288, <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>
  %290 = fmul <4 x float> %279, %287
  %291 = fadd <4 x float> %290, <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>
  fence acq_rel
  %292 = fmul <4 x float> %279, %289
  %293 = fadd <4 x float> %292, <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>
  %294 = fmul <4 x float> %279, %291
  %295 = fadd <4 x float> %294, <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>
  fence acq_rel
  %296 = fdiv <4 x float> %293, %295
  %297 = fcmp ogt <4 x float> %277, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %298 = select <4 x i1> %297, <4 x float> %296, <4 x float> %278
  %299 = bitcast <4 x float> %298 to <4 x i32>
  %300 = and <4 x i32> %299, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %301 = or <4 x i32> %300, %275
  %302 = bitcast float* %162 to <4 x i32>*
  store <4 x i32> %301, <4 x i32>* %302, align 16, !alias.scope !148
  %303 = add i64 %155, 4
  %304 = load i64, i64* %16, align 8
  %305 = icmp ult i64 %303, %304
  br i1 %305, label %154, label %1115

306:                                              ; preds = %81
  %307 = load i64, i64* %16, align 8
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %1115, label %309

309:                                              ; preds = %306, %309
  %310 = phi i64 [ %509, %309 ], [ 0, %306 ]
  %311 = getelementptr inbounds float, float* %58, i64 %310
  %312 = bitcast float* %311 to <4 x float>*
  %313 = load <4 x float>, <4 x float>* %312, align 16, !alias.scope !151
  %314 = getelementptr inbounds float, float* %68, i64 %310
  %315 = bitcast float* %314 to <4 x float>*
  %316 = load <4 x float>, <4 x float>* %315, align 16, !alias.scope !154
  %317 = getelementptr inbounds float, float* %78, i64 %310
  %318 = bitcast float* %317 to <4 x float>*
  %319 = load <4 x float>, <4 x float>* %318, align 16, !alias.scope !157
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !160
  %320 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !161, !noalias !166
  %321 = shufflevector <4 x float> %320, <4 x float> undef, <4 x i32> zeroinitializer
  %322 = shufflevector <4 x float> %320, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %323 = shufflevector <4 x float> %320, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %324 = fadd <4 x float> %313, %316
  %325 = fsub <4 x float> %316, %313
  %326 = load float, float* %20, align 4, !noalias !166
  %327 = insertelement <4 x float> undef, float %326, i32 0
  %328 = shufflevector <4 x float> %327, <4 x float> undef, <4 x i32> zeroinitializer
  %329 = fsub <4 x float> %324, %328
  %330 = load float, float* %21, align 4, !noalias !166
  %331 = insertelement <4 x float> undef, float %330, i32 0
  %332 = shufflevector <4 x float> %331, <4 x float> undef, <4 x i32> zeroinitializer
  %333 = fsub <4 x float> %325, %332
  %334 = load float, float* %22, align 4, !noalias !166
  %335 = insertelement <4 x float> undef, float %334, i32 0
  %336 = shufflevector <4 x float> %335, <4 x float> undef, <4 x i32> zeroinitializer
  %337 = fsub <4 x float> %319, %336
  %338 = fmul <4 x float> %329, %329
  %339 = fmul <4 x float> %333, %333
  %340 = fmul <4 x float> %337, %337
  %341 = fmul <4 x float> %329, %338
  %342 = fadd <4 x float> %321, %341
  %343 = fmul <4 x float> %333, %339
  %344 = fadd <4 x float> %322, %343
  %345 = fmul <4 x float> %337, %340
  %346 = fadd <4 x float> %323, %345
  %347 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !171, !noalias !166
  %348 = fmul <4 x float> %347, %342
  %349 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !176, !noalias !166
  %350 = fmul <4 x float> %349, %342
  %351 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !181, !noalias !166
  %352 = fmul <4 x float> %351, %342
  %353 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !186, !noalias !166
  %354 = fmul <4 x float> %353, %344
  %355 = fadd <4 x float> %348, %354
  %356 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !191, !noalias !166
  %357 = fmul <4 x float> %344, %356
  %358 = fadd <4 x float> %350, %357
  %359 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !196, !noalias !166
  %360 = fmul <4 x float> %344, %359
  %361 = fadd <4 x float> %352, %360
  %362 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !201, !noalias !166
  %363 = fmul <4 x float> %346, %362
  %364 = fadd <4 x float> %355, %363
  %365 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !206, !noalias !166
  %366 = fmul <4 x float> %346, %365
  %367 = fadd <4 x float> %358, %366
  %368 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !211, !noalias !166
  %369 = fmul <4 x float> %346, %368
  %370 = fadd <4 x float> %361, %369
  %371 = bitcast <4 x float> %364 to <4 x i32>
  %372 = and <4 x i32> %371, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %373 = and <4 x i32> %371, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %374 = bitcast <4 x i32> %373 to <4 x float>
  %375 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %374) #12
  %376 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %375) #12
  %377 = fcmp olt <4 x float> %374, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %378 = fmul <4 x float> %376, <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>
  %379 = fadd <4 x float> %378, <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>
  %380 = fmul <4 x float> %376, <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>
  %381 = fadd <4 x float> %380, <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>
  fence acq_rel
  %382 = fmul <4 x float> %376, %379
  %383 = fadd <4 x float> %382, <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>
  %384 = fmul <4 x float> %376, %381
  %385 = fadd <4 x float> %384, <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>
  fence acq_rel
  %386 = fmul <4 x float> %376, %383
  %387 = fadd <4 x float> %386, <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>
  %388 = fmul <4 x float> %376, %385
  %389 = fadd <4 x float> %388, <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>
  fence acq_rel
  %390 = fmul <4 x float> %376, %387
  %391 = fadd <4 x float> %390, <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>
  %392 = fmul <4 x float> %376, %389
  %393 = fadd <4 x float> %392, <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>
  fence acq_rel
  %394 = fdiv <4 x float> %391, %393
  fence acq_rel
  %395 = fmul <4 x float> %376, <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>
  %396 = fadd <4 x float> %395, <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>
  %397 = fmul <4 x float> %376, <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>
  %398 = fadd <4 x float> %397, <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>
  fence acq_rel
  %399 = fmul <4 x float> %376, %396
  %400 = fadd <4 x float> %399, <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>
  %401 = fmul <4 x float> %376, %398
  %402 = fadd <4 x float> %401, <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>
  fence acq_rel
  %403 = fmul <4 x float> %376, %400
  %404 = fadd <4 x float> %403, <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>
  %405 = fmul <4 x float> %376, %402
  %406 = fadd <4 x float> %405, <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>
  fence acq_rel
  %407 = fmul <4 x float> %376, %404
  %408 = fadd <4 x float> %407, <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>
  %409 = fmul <4 x float> %376, %406
  %410 = fadd <4 x float> %409, <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>
  fence acq_rel
  %411 = fdiv <4 x float> %408, %410
  %412 = select <4 x i1> %377, <4 x float> %394, <4 x float> %411
  %413 = bitcast <4 x float> %412 to <4 x i32>
  %414 = and <4 x i32> %413, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %415 = or <4 x i32> %414, %372
  %416 = bitcast float* %311 to <4 x i32>*
  store <4 x i32> %415, <4 x i32>* %416, align 16, !alias.scope !216
  %417 = bitcast <4 x float> %367 to <4 x i32>
  %418 = and <4 x i32> %417, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %419 = and <4 x i32> %417, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %420 = bitcast <4 x i32> %419 to <4 x float>
  %421 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %420) #12
  %422 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %421) #12
  %423 = fcmp olt <4 x float> %420, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %424 = fmul <4 x float> %422, <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>
  %425 = fadd <4 x float> %424, <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>
  %426 = fmul <4 x float> %422, <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>
  %427 = fadd <4 x float> %426, <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>
  fence acq_rel
  %428 = fmul <4 x float> %422, %425
  %429 = fadd <4 x float> %428, <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>
  %430 = fmul <4 x float> %422, %427
  %431 = fadd <4 x float> %430, <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>
  fence acq_rel
  %432 = fmul <4 x float> %422, %429
  %433 = fadd <4 x float> %432, <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>
  %434 = fmul <4 x float> %422, %431
  %435 = fadd <4 x float> %434, <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>
  fence acq_rel
  %436 = fmul <4 x float> %422, %433
  %437 = fadd <4 x float> %436, <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>
  %438 = fmul <4 x float> %422, %435
  %439 = fadd <4 x float> %438, <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>
  fence acq_rel
  %440 = fdiv <4 x float> %437, %439
  fence acq_rel
  %441 = fmul <4 x float> %422, <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>
  %442 = fadd <4 x float> %441, <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>
  %443 = fmul <4 x float> %422, <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>
  %444 = fadd <4 x float> %443, <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>
  fence acq_rel
  %445 = fmul <4 x float> %422, %442
  %446 = fadd <4 x float> %445, <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>
  %447 = fmul <4 x float> %422, %444
  %448 = fadd <4 x float> %447, <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>
  fence acq_rel
  %449 = fmul <4 x float> %422, %446
  %450 = fadd <4 x float> %449, <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>
  %451 = fmul <4 x float> %422, %448
  %452 = fadd <4 x float> %451, <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>
  fence acq_rel
  %453 = fmul <4 x float> %422, %450
  %454 = fadd <4 x float> %453, <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>
  %455 = fmul <4 x float> %422, %452
  %456 = fadd <4 x float> %455, <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>
  fence acq_rel
  %457 = fdiv <4 x float> %454, %456
  %458 = select <4 x i1> %423, <4 x float> %440, <4 x float> %457
  %459 = bitcast <4 x float> %458 to <4 x i32>
  %460 = and <4 x i32> %459, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %461 = or <4 x i32> %460, %418
  %462 = bitcast float* %314 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %462, align 16, !alias.scope !219
  %463 = bitcast <4 x float> %370 to <4 x i32>
  %464 = and <4 x i32> %463, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %465 = and <4 x i32> %463, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %466 = bitcast <4 x i32> %465 to <4 x float>
  %467 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %466) #12
  %468 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %467) #12
  %469 = fcmp olt <4 x float> %466, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %470 = fmul <4 x float> %468, <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>
  %471 = fadd <4 x float> %470, <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>
  %472 = fmul <4 x float> %468, <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>
  %473 = fadd <4 x float> %472, <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>
  fence acq_rel
  %474 = fmul <4 x float> %468, %471
  %475 = fadd <4 x float> %474, <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>
  %476 = fmul <4 x float> %468, %473
  %477 = fadd <4 x float> %476, <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>
  fence acq_rel
  %478 = fmul <4 x float> %468, %475
  %479 = fadd <4 x float> %478, <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>
  %480 = fmul <4 x float> %468, %477
  %481 = fadd <4 x float> %480, <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>
  fence acq_rel
  %482 = fmul <4 x float> %468, %479
  %483 = fadd <4 x float> %482, <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>
  %484 = fmul <4 x float> %468, %481
  %485 = fadd <4 x float> %484, <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>
  fence acq_rel
  %486 = fdiv <4 x float> %483, %485
  fence acq_rel
  %487 = fmul <4 x float> %468, <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>
  %488 = fadd <4 x float> %487, <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>
  %489 = fmul <4 x float> %468, <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>
  %490 = fadd <4 x float> %489, <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>
  fence acq_rel
  %491 = fmul <4 x float> %468, %488
  %492 = fadd <4 x float> %491, <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>
  %493 = fmul <4 x float> %468, %490
  %494 = fadd <4 x float> %493, <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>
  fence acq_rel
  %495 = fmul <4 x float> %468, %492
  %496 = fadd <4 x float> %495, <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>
  %497 = fmul <4 x float> %468, %494
  %498 = fadd <4 x float> %497, <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>
  fence acq_rel
  %499 = fmul <4 x float> %468, %496
  %500 = fadd <4 x float> %499, <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>
  %501 = fmul <4 x float> %468, %498
  %502 = fadd <4 x float> %501, <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>
  fence acq_rel
  %503 = fdiv <4 x float> %500, %502
  %504 = select <4 x i1> %469, <4 x float> %486, <4 x float> %503
  %505 = bitcast <4 x float> %504 to <4 x i32>
  %506 = and <4 x i32> %505, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %507 = or <4 x i32> %506, %464
  %508 = bitcast float* %317 to <4 x i32>*
  store <4 x i32> %507, <4 x i32>* %508, align 16, !alias.scope !222
  %509 = add i64 %310, 4
  %510 = load i64, i64* %16, align 8
  %511 = icmp ult i64 %509, %510
  br i1 %511, label %309, label %1115

512:                                              ; preds = %81
  %513 = load i64, i64* %16, align 8
  %514 = icmp eq i64 %513, 0
  br i1 %514, label %1115, label %515

515:                                              ; preds = %512, %515
  %516 = phi i64 [ %685, %515 ], [ 0, %512 ]
  %517 = getelementptr inbounds float, float* %58, i64 %516
  %518 = bitcast float* %517 to <4 x float>*
  %519 = load <4 x float>, <4 x float>* %518, align 16, !alias.scope !225
  %520 = getelementptr inbounds float, float* %68, i64 %516
  %521 = bitcast float* %520 to <4 x float>*
  %522 = load <4 x float>, <4 x float>* %521, align 16, !alias.scope !228
  %523 = getelementptr inbounds float, float* %78, i64 %516
  %524 = bitcast float* %523 to <4 x float>*
  %525 = load <4 x float>, <4 x float>* %524, align 16, !alias.scope !231
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !234
  %526 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !235, !noalias !240
  %527 = shufflevector <4 x float> %526, <4 x float> undef, <4 x i32> zeroinitializer
  %528 = shufflevector <4 x float> %526, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %529 = shufflevector <4 x float> %526, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %530 = fadd <4 x float> %519, %522
  %531 = fsub <4 x float> %522, %519
  %532 = load float, float* %20, align 4, !noalias !240
  %533 = insertelement <4 x float> undef, float %532, i32 0
  %534 = shufflevector <4 x float> %533, <4 x float> undef, <4 x i32> zeroinitializer
  %535 = fsub <4 x float> %530, %534
  %536 = load float, float* %21, align 4, !noalias !240
  %537 = insertelement <4 x float> undef, float %536, i32 0
  %538 = shufflevector <4 x float> %537, <4 x float> undef, <4 x i32> zeroinitializer
  %539 = fsub <4 x float> %531, %538
  %540 = load float, float* %22, align 4, !noalias !240
  %541 = insertelement <4 x float> undef, float %540, i32 0
  %542 = shufflevector <4 x float> %541, <4 x float> undef, <4 x i32> zeroinitializer
  %543 = fsub <4 x float> %525, %542
  %544 = fmul <4 x float> %535, %535
  %545 = fmul <4 x float> %539, %539
  %546 = fmul <4 x float> %543, %543
  %547 = fmul <4 x float> %535, %544
  %548 = fadd <4 x float> %527, %547
  %549 = fmul <4 x float> %539, %545
  %550 = fadd <4 x float> %528, %549
  %551 = fmul <4 x float> %543, %546
  %552 = fadd <4 x float> %529, %551
  %553 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !245, !noalias !240
  %554 = fmul <4 x float> %553, %548
  %555 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !250, !noalias !240
  %556 = fmul <4 x float> %555, %548
  %557 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !255, !noalias !240
  %558 = fmul <4 x float> %557, %548
  %559 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !260, !noalias !240
  %560 = fmul <4 x float> %559, %550
  %561 = fadd <4 x float> %554, %560
  %562 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !265, !noalias !240
  %563 = fmul <4 x float> %550, %562
  %564 = fadd <4 x float> %556, %563
  %565 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !270, !noalias !240
  %566 = fmul <4 x float> %550, %565
  %567 = fadd <4 x float> %558, %566
  %568 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !275, !noalias !240
  %569 = fmul <4 x float> %552, %568
  %570 = fadd <4 x float> %561, %569
  %571 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !280, !noalias !240
  %572 = fmul <4 x float> %552, %571
  %573 = fadd <4 x float> %564, %572
  %574 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !285, !noalias !240
  %575 = fmul <4 x float> %552, %574
  %576 = fadd <4 x float> %567, %575
  %577 = bitcast <4 x float> %570 to <4 x i32>
  %578 = and <4 x i32> %577, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %579 = and <4 x i32> %577, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %580 = bitcast <4 x i32> %579 to <4 x float>
  %581 = fmul <4 x float> %580, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %582 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %581) #12
  %583 = fmul <4 x float> %580, <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>
  %584 = fadd <4 x float> %583, <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>
  %585 = bitcast <4 x float> %584 to <4 x i32>
  %586 = add <4 x i32> %585, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %587 = ashr <4 x i32> %586, <i32 23, i32 23, i32 23, i32 23>
  %588 = and <4 x i32> %586, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %589 = sub <4 x i32> %585, %588
  %590 = bitcast <4 x i32> %589 to <4 x float>
  %591 = sitofp <4 x i32> %587 to <4 x float>
  %592 = fadd <4 x float> %590, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %593 = fmul <4 x float> %592, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %594 = fadd <4 x float> %593, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %595 = fmul <4 x float> %592, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %596 = fadd <4 x float> %595, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %597 = fmul <4 x float> %592, %594
  %598 = fadd <4 x float> %597, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %599 = fmul <4 x float> %592, %596
  %600 = fadd <4 x float> %599, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %601 = fdiv <4 x float> %598, %600
  %602 = fadd <4 x float> %601, %591
  %603 = fmul <4 x float> %602, <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>
  %604 = fadd <4 x float> %603, <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>
  %605 = fcmp ole <4 x float> %580, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %606 = select <4 x i1> %605, <4 x float> %582, <4 x float> %604
  %607 = bitcast <4 x float> %606 to <4 x i32>
  %608 = and <4 x i32> %607, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %609 = or <4 x i32> %608, %578
  %610 = bitcast <4 x i32> %609 to <4 x float>
  %611 = fmul <4 x float> %610, <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>
  %612 = fadd <4 x float> %611, <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>
  store <4 x float> %612, <4 x float>* %518, align 16, !alias.scope !290
  %613 = bitcast <4 x float> %573 to <4 x i32>
  %614 = and <4 x i32> %613, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %615 = and <4 x i32> %613, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %616 = bitcast <4 x i32> %615 to <4 x float>
  %617 = fmul <4 x float> %616, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %618 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %617) #12
  %619 = fmul <4 x float> %616, <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>
  %620 = fadd <4 x float> %619, <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>
  %621 = bitcast <4 x float> %620 to <4 x i32>
  %622 = add <4 x i32> %621, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %623 = ashr <4 x i32> %622, <i32 23, i32 23, i32 23, i32 23>
  %624 = and <4 x i32> %622, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %625 = sub <4 x i32> %621, %624
  %626 = bitcast <4 x i32> %625 to <4 x float>
  %627 = sitofp <4 x i32> %623 to <4 x float>
  %628 = fadd <4 x float> %626, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %629 = fmul <4 x float> %628, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %630 = fadd <4 x float> %629, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %631 = fmul <4 x float> %628, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %632 = fadd <4 x float> %631, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %633 = fmul <4 x float> %628, %630
  %634 = fadd <4 x float> %633, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %635 = fmul <4 x float> %628, %632
  %636 = fadd <4 x float> %635, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %637 = fdiv <4 x float> %634, %636
  %638 = fadd <4 x float> %637, %627
  %639 = fmul <4 x float> %638, <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>
  %640 = fadd <4 x float> %639, <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>
  %641 = fcmp ole <4 x float> %616, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %642 = select <4 x i1> %641, <4 x float> %618, <4 x float> %640
  %643 = bitcast <4 x float> %642 to <4 x i32>
  %644 = and <4 x i32> %643, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %645 = or <4 x i32> %644, %614
  %646 = bitcast <4 x i32> %645 to <4 x float>
  %647 = fmul <4 x float> %646, <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>
  %648 = fadd <4 x float> %647, <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>
  store <4 x float> %648, <4 x float>* %521, align 16, !alias.scope !293
  %649 = bitcast <4 x float> %576 to <4 x i32>
  %650 = and <4 x i32> %649, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %651 = and <4 x i32> %649, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %652 = bitcast <4 x i32> %651 to <4 x float>
  %653 = fmul <4 x float> %652, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %654 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %653) #12
  %655 = fmul <4 x float> %652, <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>
  %656 = fadd <4 x float> %655, <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>
  %657 = bitcast <4 x float> %656 to <4 x i32>
  %658 = add <4 x i32> %657, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %659 = ashr <4 x i32> %658, <i32 23, i32 23, i32 23, i32 23>
  %660 = and <4 x i32> %658, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %661 = sub <4 x i32> %657, %660
  %662 = bitcast <4 x i32> %661 to <4 x float>
  %663 = sitofp <4 x i32> %659 to <4 x float>
  %664 = fadd <4 x float> %662, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %665 = fmul <4 x float> %664, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %666 = fadd <4 x float> %665, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %667 = fmul <4 x float> %664, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %668 = fadd <4 x float> %667, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %669 = fmul <4 x float> %664, %666
  %670 = fadd <4 x float> %669, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %671 = fmul <4 x float> %664, %668
  %672 = fadd <4 x float> %671, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %673 = fdiv <4 x float> %670, %672
  %674 = fadd <4 x float> %673, %663
  %675 = fmul <4 x float> %674, <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>
  %676 = fadd <4 x float> %675, <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>
  %677 = fcmp ole <4 x float> %652, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %678 = select <4 x i1> %677, <4 x float> %654, <4 x float> %676
  %679 = bitcast <4 x float> %678 to <4 x i32>
  %680 = and <4 x i32> %679, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %681 = or <4 x i32> %680, %650
  %682 = bitcast <4 x i32> %681 to <4 x float>
  %683 = fmul <4 x float> %682, <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>
  %684 = fadd <4 x float> %683, <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>
  store <4 x float> %684, <4 x float>* %524, align 16, !alias.scope !296
  %685 = add i64 %516, 4
  %686 = load i64, i64* %16, align 8
  %687 = icmp ult i64 %685, %686
  br i1 %687, label %515, label %1115

688:                                              ; preds = %81
  %689 = load i64, i64* %16, align 8
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %1115, label %691

691:                                              ; preds = %688, %691
  %692 = phi i64 [ %897, %691 ], [ 0, %688 ]
  %693 = getelementptr inbounds float, float* %58, i64 %692
  %694 = bitcast float* %693 to <4 x float>*
  %695 = load <4 x float>, <4 x float>* %694, align 16, !alias.scope !299
  %696 = getelementptr inbounds float, float* %68, i64 %692
  %697 = bitcast float* %696 to <4 x float>*
  %698 = load <4 x float>, <4 x float>* %697, align 16, !alias.scope !302
  %699 = getelementptr inbounds float, float* %78, i64 %692
  %700 = bitcast float* %699 to <4 x float>*
  %701 = load <4 x float>, <4 x float>* %700, align 16, !alias.scope !305
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !308
  %702 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !309, !noalias !314
  %703 = shufflevector <4 x float> %702, <4 x float> undef, <4 x i32> zeroinitializer
  %704 = shufflevector <4 x float> %702, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %705 = shufflevector <4 x float> %702, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %706 = fadd <4 x float> %695, %698
  %707 = fsub <4 x float> %698, %695
  %708 = load float, float* %20, align 4, !noalias !314
  %709 = insertelement <4 x float> undef, float %708, i32 0
  %710 = shufflevector <4 x float> %709, <4 x float> undef, <4 x i32> zeroinitializer
  %711 = fsub <4 x float> %706, %710
  %712 = load float, float* %21, align 4, !noalias !314
  %713 = insertelement <4 x float> undef, float %712, i32 0
  %714 = shufflevector <4 x float> %713, <4 x float> undef, <4 x i32> zeroinitializer
  %715 = fsub <4 x float> %707, %714
  %716 = load float, float* %22, align 4, !noalias !314
  %717 = insertelement <4 x float> undef, float %716, i32 0
  %718 = shufflevector <4 x float> %717, <4 x float> undef, <4 x i32> zeroinitializer
  %719 = fsub <4 x float> %701, %718
  %720 = fmul <4 x float> %711, %711
  %721 = fmul <4 x float> %715, %715
  %722 = fmul <4 x float> %719, %719
  %723 = fmul <4 x float> %711, %720
  %724 = fadd <4 x float> %703, %723
  %725 = fmul <4 x float> %715, %721
  %726 = fadd <4 x float> %704, %725
  %727 = fmul <4 x float> %719, %722
  %728 = fadd <4 x float> %705, %727
  %729 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !319, !noalias !314
  %730 = fmul <4 x float> %729, %724
  %731 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !324, !noalias !314
  %732 = fmul <4 x float> %731, %724
  %733 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !329, !noalias !314
  %734 = fmul <4 x float> %733, %724
  %735 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !334, !noalias !314
  %736 = fmul <4 x float> %735, %726
  %737 = fadd <4 x float> %730, %736
  %738 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !339, !noalias !314
  %739 = fmul <4 x float> %726, %738
  %740 = fadd <4 x float> %732, %739
  %741 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !344, !noalias !314
  %742 = fmul <4 x float> %726, %741
  %743 = fadd <4 x float> %734, %742
  %744 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !349, !noalias !314
  %745 = fmul <4 x float> %728, %744
  %746 = fadd <4 x float> %737, %745
  %747 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !354, !noalias !314
  %748 = fmul <4 x float> %728, %747
  %749 = fadd <4 x float> %740, %748
  %750 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !359, !noalias !314
  %751 = fmul <4 x float> %728, %750
  %752 = fadd <4 x float> %743, %751
  %753 = fmul <4 x float> %746, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %754 = bitcast <4 x float> %746 to <4 x i32>
  %755 = add <4 x i32> %754, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %756 = ashr <4 x i32> %755, <i32 23, i32 23, i32 23, i32 23>
  %757 = and <4 x i32> %755, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %758 = sub <4 x i32> %754, %757
  %759 = bitcast <4 x i32> %758 to <4 x float>
  %760 = sitofp <4 x i32> %756 to <4 x float>
  %761 = fadd <4 x float> %759, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %762 = fmul <4 x float> %761, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %763 = fadd <4 x float> %762, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %764 = fmul <4 x float> %761, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %765 = fadd <4 x float> %764, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %766 = fmul <4 x float> %761, %763
  %767 = fadd <4 x float> %766, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %768 = fmul <4 x float> %761, %765
  %769 = fadd <4 x float> %768, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %770 = fdiv <4 x float> %767, %769
  %771 = fadd <4 x float> %770, %760
  %772 = fmul <4 x float> %771, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %773 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %772, i32 9) #12
  %774 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %773) #12
  %775 = bitcast <4 x float> %773 to <4 x i32>
  %776 = xor <4 x i32> %775, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %777 = and <4 x i32> %776, %774
  %778 = ashr <4 x i32> %777, <i32 31, i32 31, i32 31, i32 31>
  %779 = xor <4 x i32> %778, %774
  %780 = shl <4 x i32> %779, <i32 23, i32 23, i32 23, i32 23>
  %781 = add <4 x i32> %780, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %782 = bitcast <4 x i32> %781 to <4 x float>
  %783 = fsub <4 x float> %772, %773
  %784 = fadd <4 x float> %783, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %785 = fmul <4 x float> %783, %784
  %786 = fadd <4 x float> %785, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %787 = fmul <4 x float> %783, %786
  %788 = fadd <4 x float> %787, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %789 = fmul <4 x float> %788, %782
  %790 = fmul <4 x float> %783, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %791 = fadd <4 x float> %790, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %792 = fmul <4 x float> %783, %791
  %793 = fadd <4 x float> %792, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %794 = fmul <4 x float> %783, %793
  %795 = fadd <4 x float> %794, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %796 = fdiv <4 x float> %789, %795
  %797 = fmul <4 x float> %796, <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>
  %798 = fadd <4 x float> %797, <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>
  %799 = fcmp ole <4 x float> %746, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %800 = select <4 x i1> %799, <4 x float> %753, <4 x float> %798
  store <4 x float> %800, <4 x float>* %694, align 16, !alias.scope !364
  %801 = fmul <4 x float> %749, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %802 = bitcast <4 x float> %749 to <4 x i32>
  %803 = add <4 x i32> %802, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %804 = ashr <4 x i32> %803, <i32 23, i32 23, i32 23, i32 23>
  %805 = and <4 x i32> %803, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %806 = sub <4 x i32> %802, %805
  %807 = bitcast <4 x i32> %806 to <4 x float>
  %808 = sitofp <4 x i32> %804 to <4 x float>
  %809 = fadd <4 x float> %807, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %810 = fmul <4 x float> %809, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %811 = fadd <4 x float> %810, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %812 = fmul <4 x float> %809, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %813 = fadd <4 x float> %812, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %814 = fmul <4 x float> %809, %811
  %815 = fadd <4 x float> %814, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %816 = fmul <4 x float> %809, %813
  %817 = fadd <4 x float> %816, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %818 = fdiv <4 x float> %815, %817
  %819 = fadd <4 x float> %818, %808
  %820 = fmul <4 x float> %819, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %821 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %820, i32 9) #12
  %822 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %821) #12
  %823 = bitcast <4 x float> %821 to <4 x i32>
  %824 = xor <4 x i32> %823, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %825 = and <4 x i32> %824, %822
  %826 = ashr <4 x i32> %825, <i32 31, i32 31, i32 31, i32 31>
  %827 = xor <4 x i32> %826, %822
  %828 = shl <4 x i32> %827, <i32 23, i32 23, i32 23, i32 23>
  %829 = add <4 x i32> %828, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %830 = bitcast <4 x i32> %829 to <4 x float>
  %831 = fsub <4 x float> %820, %821
  %832 = fadd <4 x float> %831, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %833 = fmul <4 x float> %831, %832
  %834 = fadd <4 x float> %833, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %835 = fmul <4 x float> %831, %834
  %836 = fadd <4 x float> %835, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %837 = fmul <4 x float> %836, %830
  %838 = fmul <4 x float> %831, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %839 = fadd <4 x float> %838, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %840 = fmul <4 x float> %831, %839
  %841 = fadd <4 x float> %840, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %842 = fmul <4 x float> %831, %841
  %843 = fadd <4 x float> %842, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %844 = fdiv <4 x float> %837, %843
  %845 = fmul <4 x float> %844, <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>
  %846 = fadd <4 x float> %845, <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>
  %847 = fcmp ole <4 x float> %749, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %848 = select <4 x i1> %847, <4 x float> %801, <4 x float> %846
  store <4 x float> %848, <4 x float>* %697, align 16, !alias.scope !367
  %849 = fmul <4 x float> %752, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %850 = bitcast <4 x float> %752 to <4 x i32>
  %851 = add <4 x i32> %850, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %852 = ashr <4 x i32> %851, <i32 23, i32 23, i32 23, i32 23>
  %853 = and <4 x i32> %851, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %854 = sub <4 x i32> %850, %853
  %855 = bitcast <4 x i32> %854 to <4 x float>
  %856 = sitofp <4 x i32> %852 to <4 x float>
  %857 = fadd <4 x float> %855, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %858 = fmul <4 x float> %857, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %859 = fadd <4 x float> %858, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %860 = fmul <4 x float> %857, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %861 = fadd <4 x float> %860, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %862 = fmul <4 x float> %857, %859
  %863 = fadd <4 x float> %862, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %864 = fmul <4 x float> %857, %861
  %865 = fadd <4 x float> %864, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %866 = fdiv <4 x float> %863, %865
  %867 = fadd <4 x float> %866, %856
  %868 = fmul <4 x float> %867, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %869 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %868, i32 9) #12
  %870 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %869) #12
  %871 = bitcast <4 x float> %869 to <4 x i32>
  %872 = xor <4 x i32> %871, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %873 = and <4 x i32> %872, %870
  %874 = ashr <4 x i32> %873, <i32 31, i32 31, i32 31, i32 31>
  %875 = xor <4 x i32> %874, %870
  %876 = shl <4 x i32> %875, <i32 23, i32 23, i32 23, i32 23>
  %877 = add <4 x i32> %876, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %878 = bitcast <4 x i32> %877 to <4 x float>
  %879 = fsub <4 x float> %868, %869
  %880 = fadd <4 x float> %879, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %881 = fmul <4 x float> %879, %880
  %882 = fadd <4 x float> %881, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %883 = fmul <4 x float> %879, %882
  %884 = fadd <4 x float> %883, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %885 = fmul <4 x float> %884, %878
  %886 = fmul <4 x float> %879, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %887 = fadd <4 x float> %886, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %888 = fmul <4 x float> %879, %887
  %889 = fadd <4 x float> %888, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %890 = fmul <4 x float> %879, %889
  %891 = fadd <4 x float> %890, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %892 = fdiv <4 x float> %885, %891
  %893 = fmul <4 x float> %892, <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>
  %894 = fadd <4 x float> %893, <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>
  %895 = fcmp ole <4 x float> %752, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %896 = select <4 x i1> %895, <4 x float> %849, <4 x float> %894
  store <4 x float> %896, <4 x float>* %700, align 16, !alias.scope !370
  %897 = add i64 %692, 4
  %898 = load i64, i64* %16, align 8
  %899 = icmp ult i64 %897, %898
  br i1 %899, label %691, label %1115

900:                                              ; preds = %81, %42
  %901 = load i64, i64* %16, align 8
  %902 = icmp eq i64 %901, 0
  br i1 %902, label %1115, label %903

903:                                              ; preds = %900, %903
  %904 = phi i64 [ %1109, %903 ], [ 0, %900 ]
  %905 = getelementptr inbounds float, float* %58, i64 %904
  %906 = bitcast float* %905 to <4 x float>*
  %907 = load <4 x float>, <4 x float>* %906, align 16, !alias.scope !373
  %908 = getelementptr inbounds float, float* %68, i64 %904
  %909 = bitcast float* %908 to <4 x float>*
  %910 = load <4 x float>, <4 x float>* %909, align 16, !alias.scope !376
  %911 = getelementptr inbounds float, float* %78, i64 %904
  %912 = bitcast float* %911 to <4 x float>*
  %913 = load <4 x float>, <4 x float>* %912, align 16, !alias.scope !379
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !382
  %914 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !383, !noalias !388
  %915 = shufflevector <4 x float> %914, <4 x float> undef, <4 x i32> zeroinitializer
  %916 = shufflevector <4 x float> %914, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %917 = shufflevector <4 x float> %914, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %918 = fadd <4 x float> %907, %910
  %919 = fsub <4 x float> %910, %907
  %920 = load float, float* %20, align 4, !noalias !388
  %921 = insertelement <4 x float> undef, float %920, i32 0
  %922 = shufflevector <4 x float> %921, <4 x float> undef, <4 x i32> zeroinitializer
  %923 = fsub <4 x float> %918, %922
  %924 = load float, float* %21, align 4, !noalias !388
  %925 = insertelement <4 x float> undef, float %924, i32 0
  %926 = shufflevector <4 x float> %925, <4 x float> undef, <4 x i32> zeroinitializer
  %927 = fsub <4 x float> %919, %926
  %928 = load float, float* %22, align 4, !noalias !388
  %929 = insertelement <4 x float> undef, float %928, i32 0
  %930 = shufflevector <4 x float> %929, <4 x float> undef, <4 x i32> zeroinitializer
  %931 = fsub <4 x float> %913, %930
  %932 = fmul <4 x float> %923, %923
  %933 = fmul <4 x float> %927, %927
  %934 = fmul <4 x float> %931, %931
  %935 = fmul <4 x float> %923, %932
  %936 = fadd <4 x float> %915, %935
  %937 = fmul <4 x float> %927, %933
  %938 = fadd <4 x float> %916, %937
  %939 = fmul <4 x float> %931, %934
  %940 = fadd <4 x float> %917, %939
  %941 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !393, !noalias !388
  %942 = fmul <4 x float> %941, %936
  %943 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !398, !noalias !388
  %944 = fmul <4 x float> %943, %936
  %945 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !403, !noalias !388
  %946 = fmul <4 x float> %945, %936
  %947 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !408, !noalias !388
  %948 = fmul <4 x float> %947, %938
  %949 = fadd <4 x float> %942, %948
  %950 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !413, !noalias !388
  %951 = fmul <4 x float> %938, %950
  %952 = fadd <4 x float> %944, %951
  %953 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !418, !noalias !388
  %954 = fmul <4 x float> %938, %953
  %955 = fadd <4 x float> %946, %954
  %956 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !423, !noalias !388
  %957 = fmul <4 x float> %940, %956
  %958 = fadd <4 x float> %949, %957
  %959 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !428, !noalias !388
  %960 = fmul <4 x float> %940, %959
  %961 = fadd <4 x float> %952, %960
  %962 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !433, !noalias !388
  %963 = fmul <4 x float> %940, %962
  %964 = fadd <4 x float> %955, %963
  %965 = fcmp ugt <4 x float> %958, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %966 = load float, float* %40, align 8
  %967 = insertelement <4 x float> undef, float %966, i32 0
  %968 = shufflevector <4 x float> %967, <4 x float> undef, <4 x i32> zeroinitializer
  %969 = bitcast <4 x float> %958 to <4 x i32>
  %970 = add <4 x i32> %969, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %971 = ashr <4 x i32> %970, <i32 23, i32 23, i32 23, i32 23>
  %972 = and <4 x i32> %970, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %973 = sub <4 x i32> %969, %972
  %974 = bitcast <4 x i32> %973 to <4 x float>
  %975 = sitofp <4 x i32> %971 to <4 x float>
  %976 = fadd <4 x float> %974, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %977 = fmul <4 x float> %976, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %978 = fadd <4 x float> %977, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %979 = fmul <4 x float> %976, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %980 = fadd <4 x float> %979, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %981 = fmul <4 x float> %976, %978
  %982 = fadd <4 x float> %981, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %983 = fmul <4 x float> %976, %980
  %984 = fadd <4 x float> %983, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %985 = fdiv <4 x float> %982, %984
  %986 = fadd <4 x float> %985, %975
  %987 = fmul <4 x float> %968, %986
  %988 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %987, i32 9) #12
  %989 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %988) #12
  %990 = bitcast <4 x float> %988 to <4 x i32>
  %991 = xor <4 x i32> %990, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %992 = and <4 x i32> %991, %989
  %993 = ashr <4 x i32> %992, <i32 31, i32 31, i32 31, i32 31>
  %994 = xor <4 x i32> %993, %989
  %995 = shl <4 x i32> %994, <i32 23, i32 23, i32 23, i32 23>
  %996 = add <4 x i32> %995, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %997 = bitcast <4 x i32> %996 to <4 x float>
  %998 = fsub <4 x float> %987, %988
  %999 = fadd <4 x float> %998, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %1000 = fmul <4 x float> %998, %999
  %1001 = fadd <4 x float> %1000, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %1002 = fmul <4 x float> %998, %1001
  %1003 = fadd <4 x float> %1002, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %1004 = fmul <4 x float> %1003, %997
  %1005 = fmul <4 x float> %998, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %1006 = fadd <4 x float> %1005, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %1007 = fmul <4 x float> %998, %1006
  %1008 = fadd <4 x float> %1007, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %1009 = fmul <4 x float> %998, %1008
  %1010 = fadd <4 x float> %1009, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %1011 = fdiv <4 x float> %1004, %1010
  %1012 = select <4 x i1> %965, <4 x float> %1011, <4 x float> zeroinitializer
  store <4 x float> %1012, <4 x float>* %906, align 16, !alias.scope !438
  %1013 = fcmp ugt <4 x float> %961, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %1014 = load float, float* %40, align 8
  %1015 = insertelement <4 x float> undef, float %1014, i32 0
  %1016 = shufflevector <4 x float> %1015, <4 x float> undef, <4 x i32> zeroinitializer
  %1017 = bitcast <4 x float> %961 to <4 x i32>
  %1018 = add <4 x i32> %1017, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1019 = ashr <4 x i32> %1018, <i32 23, i32 23, i32 23, i32 23>
  %1020 = and <4 x i32> %1018, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1021 = sub <4 x i32> %1017, %1020
  %1022 = bitcast <4 x i32> %1021 to <4 x float>
  %1023 = sitofp <4 x i32> %1019 to <4 x float>
  %1024 = fadd <4 x float> %1022, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1025 = fmul <4 x float> %1024, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %1026 = fadd <4 x float> %1025, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %1027 = fmul <4 x float> %1024, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %1028 = fadd <4 x float> %1027, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %1029 = fmul <4 x float> %1024, %1026
  %1030 = fadd <4 x float> %1029, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %1031 = fmul <4 x float> %1024, %1028
  %1032 = fadd <4 x float> %1031, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %1033 = fdiv <4 x float> %1030, %1032
  %1034 = fadd <4 x float> %1033, %1023
  %1035 = fmul <4 x float> %1016, %1034
  %1036 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1035, i32 9) #12
  %1037 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1036) #12
  %1038 = bitcast <4 x float> %1036 to <4 x i32>
  %1039 = xor <4 x i32> %1038, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1040 = and <4 x i32> %1039, %1037
  %1041 = ashr <4 x i32> %1040, <i32 31, i32 31, i32 31, i32 31>
  %1042 = xor <4 x i32> %1041, %1037
  %1043 = shl <4 x i32> %1042, <i32 23, i32 23, i32 23, i32 23>
  %1044 = add <4 x i32> %1043, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %1045 = bitcast <4 x i32> %1044 to <4 x float>
  %1046 = fsub <4 x float> %1035, %1036
  %1047 = fadd <4 x float> %1046, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %1048 = fmul <4 x float> %1046, %1047
  %1049 = fadd <4 x float> %1048, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %1050 = fmul <4 x float> %1046, %1049
  %1051 = fadd <4 x float> %1050, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %1052 = fmul <4 x float> %1051, %1045
  %1053 = fmul <4 x float> %1046, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %1054 = fadd <4 x float> %1053, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %1055 = fmul <4 x float> %1046, %1054
  %1056 = fadd <4 x float> %1055, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %1057 = fmul <4 x float> %1046, %1056
  %1058 = fadd <4 x float> %1057, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %1059 = fdiv <4 x float> %1052, %1058
  %1060 = select <4 x i1> %1013, <4 x float> %1059, <4 x float> zeroinitializer
  store <4 x float> %1060, <4 x float>* %909, align 16, !alias.scope !441
  %1061 = fcmp ugt <4 x float> %964, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %1062 = load float, float* %40, align 8
  %1063 = insertelement <4 x float> undef, float %1062, i32 0
  %1064 = shufflevector <4 x float> %1063, <4 x float> undef, <4 x i32> zeroinitializer
  %1065 = bitcast <4 x float> %964 to <4 x i32>
  %1066 = add <4 x i32> %1065, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1067 = ashr <4 x i32> %1066, <i32 23, i32 23, i32 23, i32 23>
  %1068 = and <4 x i32> %1066, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1069 = sub <4 x i32> %1065, %1068
  %1070 = bitcast <4 x i32> %1069 to <4 x float>
  %1071 = sitofp <4 x i32> %1067 to <4 x float>
  %1072 = fadd <4 x float> %1070, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1073 = fmul <4 x float> %1072, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %1074 = fadd <4 x float> %1073, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %1075 = fmul <4 x float> %1072, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %1076 = fadd <4 x float> %1075, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %1077 = fmul <4 x float> %1072, %1074
  %1078 = fadd <4 x float> %1077, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %1079 = fmul <4 x float> %1072, %1076
  %1080 = fadd <4 x float> %1079, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %1081 = fdiv <4 x float> %1078, %1080
  %1082 = fadd <4 x float> %1081, %1071
  %1083 = fmul <4 x float> %1082, %1064
  %1084 = tail call <4 x float> @llvm.x86.sse41.round.ps(<4 x float> %1083, i32 9) #12
  %1085 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1084) #12
  %1086 = bitcast <4 x float> %1084 to <4 x i32>
  %1087 = xor <4 x i32> %1086, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %1088 = and <4 x i32> %1087, %1085
  %1089 = ashr <4 x i32> %1088, <i32 31, i32 31, i32 31, i32 31>
  %1090 = xor <4 x i32> %1089, %1085
  %1091 = shl <4 x i32> %1090, <i32 23, i32 23, i32 23, i32 23>
  %1092 = add <4 x i32> %1091, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %1093 = bitcast <4 x i32> %1092 to <4 x float>
  %1094 = fsub <4 x float> %1083, %1084
  %1095 = fadd <4 x float> %1094, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %1096 = fmul <4 x float> %1094, %1095
  %1097 = fadd <4 x float> %1096, <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>
  %1098 = fmul <4 x float> %1094, %1097
  %1099 = fadd <4 x float> %1098, <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>
  %1100 = fmul <4 x float> %1099, %1093
  %1101 = fmul <4 x float> %1094, <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>
  %1102 = fadd <4 x float> %1101, <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>
  %1103 = fmul <4 x float> %1094, %1102
  %1104 = fadd <4 x float> %1103, <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>
  %1105 = fmul <4 x float> %1094, %1104
  %1106 = fadd <4 x float> %1105, <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>
  %1107 = fdiv <4 x float> %1100, %1106
  %1108 = select <4 x i1> %1061, <4 x float> %1107, <4 x float> zeroinitializer
  store <4 x float> %1108, <4 x float>* %912, align 16, !alias.scope !444
  %1109 = add i64 %904, 4
  %1110 = load i64, i64* %16, align 8
  %1111 = icmp ult i64 %1109, %1110
  br i1 %1111, label %903, label %1115

1112:                                             ; preds = %81
  %1113 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 173) #12
  %1114 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

1115:                                             ; preds = %903, %691, %515, %309, %154, %86, %83, %151, %306, %512, %688, %900
  %1116 = add nuw i64 %43, 1
  %1117 = load i64, i64* %4, align 8
  %1118 = icmp ult i64 %1116, %1117
  br i1 %1118, label %42, label %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE412FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i1 zeroext, %"class.jxl::Plane"* readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i8* noalias nocapture, i64) #0 {
  %9 = alloca [16 x i8], align 16
  %10 = select i1 %2, i64 4, i64 3
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #12
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #12
  %36 = icmp eq %"class.jxl::Plane"* %3, null
  %37 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %41 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = mul i64 %46, %10
  %48 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %52 = bitcast [16 x i8]* %9 to i32*
  %53 = shl nuw nsw i64 %10, 1
  %54 = mul nuw nsw i64 %10, 3
  %55 = add nuw nsw i64 %10, 1
  %56 = or i64 %53, 1
  %57 = add nuw nsw i64 %54, 1
  %58 = add nuw nsw i64 %10, 2
  %59 = add nuw nsw i64 %53, 2
  %60 = add nuw nsw i64 %54, 2
  %61 = add i64 %49, -2
  %62 = add i64 %49, -3
  %63 = add nuw nsw i64 %10, 1
  %64 = add nuw nsw i64 %10, 2
  br label %66

65:                                               ; preds = %107, %8
  ret void

66:                                               ; preds = %14, %107
  %67 = phi i64 [ 0, %14 ], [ %108, %107 ]
  %68 = add i64 %16, %67
  %69 = mul i64 %18, %68
  %70 = getelementptr inbounds i8, i8* %20, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #12
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds float, float* %74, i64 %25
  %76 = getelementptr inbounds i8, i8* %27, i64 %69
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #12
  %80 = bitcast i8* %76 to float*
  %81 = getelementptr inbounds float, float* %80, i64 %25
  %82 = getelementptr inbounds i8, i8* %32, i64 %69
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #12
  %86 = bitcast i8* %82 to float*
  %87 = getelementptr inbounds float, float* %86, i64 %25
  br i1 %36, label %99, label %88

88:                                               ; preds = %66
  %89 = add i64 %38, %67
  %90 = load i8*, i8** %39, align 8
  %91 = load i64, i64* %40, align 8
  %92 = mul i64 %91, %89
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #12
  %97 = bitcast i8* %93 to float*
  %98 = getelementptr inbounds float, float* %97, i64 %42
  br label %99

99:                                               ; preds = %66, %88
  %100 = phi float* [ %98, %88 ], [ null, %66 ]
  br i1 %50, label %107, label %101

101:                                              ; preds = %99
  %102 = add i64 %44, %67
  %103 = mul i64 %102, %7
  %104 = add i64 %103, %47
  %105 = icmp eq float* %100, null
  %106 = getelementptr inbounds i8, i8* %6, i64 %104
  br label %110

107:                                              ; preds = %482, %99
  %108 = add nuw i64 %67, 1
  %109 = icmp ult i64 %108, %12
  br i1 %109, label %66, label %65

110:                                              ; preds = %101, %482
  %111 = phi i64 [ 0, %101 ], [ %485, %482 ]
  %112 = phi i64 [ 0, %101 ], [ %483, %482 ]
  %113 = mul i64 %111, -4
  %114 = add i64 %61, %113
  %115 = add i64 %62, %113
  %116 = mul i64 %111, -4
  %117 = add i64 %61, %116
  %118 = add i64 %62, %116
  %119 = mul i64 %111, -4
  %120 = add i64 %61, %119
  %121 = add i64 %62, %119
  %122 = mul i64 %111, -4
  %123 = add i64 %61, %122
  %124 = add i64 %62, %122
  %125 = getelementptr inbounds float, float* %75, i64 %112
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16, !alias.scope !447
  %128 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %127, <4 x float> zeroinitializer) #12
  %129 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %128, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %130 = fmul <4 x float> %129, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %131 = getelementptr inbounds float, float* %81, i64 %112
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 16, !alias.scope !450
  %134 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %133, <4 x float> zeroinitializer) #12
  %135 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %134, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %136 = fmul <4 x float> %135, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %137 = getelementptr inbounds float, float* %87, i64 %112
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16, !alias.scope !453
  %140 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %139, <4 x float> zeroinitializer) #12
  %141 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %140, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %142 = fmul <4 x float> %141, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br i1 %105, label %150, label %143

143:                                              ; preds = %110
  %144 = getelementptr inbounds float, float* %100, i64 %112
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 16, !alias.scope !456
  %147 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %146, <4 x float> zeroinitializer) #12
  %148 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %147, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %149 = fmul <4 x float> %148, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br label %150

150:                                              ; preds = %110, %143
  %151 = phi <4 x float> [ %149, %143 ], [ <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %110 ]
  %152 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %130) #12
  %153 = bitcast <4 x float> %130 to <4 x i32>
  %154 = xor <4 x i32> %153, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %155 = and <4 x i32> %152, %154
  %156 = ashr <4 x i32> %155, <i32 31, i32 31, i32 31, i32 31>
  %157 = xor <4 x i32> %156, %152
  %158 = bitcast <4 x i32> %157 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %136) #12
  %161 = bitcast <4 x float> %136 to <4 x i32>
  %162 = xor <4 x i32> %161, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %163 = and <4 x i32> %160, %162
  %164 = ashr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, %160
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %168 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %142) #12
  %169 = bitcast <4 x float> %142 to <4 x i32>
  %170 = xor <4 x i32> %169, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %171 = and <4 x i32> %168, %170
  %172 = ashr <4 x i32> %171, <i32 31, i32 31, i32 31, i32 31>
  %173 = xor <4 x i32> %172, %168
  %174 = bitcast <4 x i32> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %176 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %151) #12
  %177 = bitcast <4 x float> %151 to <4 x i32>
  %178 = xor <4 x i32> %177, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %179 = and <4 x i32> %176, %178
  %180 = ashr <4 x i32> %179, <i32 31, i32 31, i32 31, i32 31>
  %181 = xor <4 x i32> %180, %176
  %182 = bitcast <4 x i32> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %184 = sub i64 %49, %112
  %185 = icmp ult i64 %184, 4
  %186 = mul i64 %112, %10
  %187 = getelementptr inbounds i8, i8* %106, i64 %186
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #12
  %188 = bitcast <16 x i8> %159 to <4 x i32>
  %189 = extractelement <4 x i32> %188, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 16, i1 false) #12
  store i32 %189, i32* %52, align 16
  %190 = lshr i32 %189, 8
  %191 = trunc i32 %190 to i8
  br i1 %185, label %241, label %192, !prof !459

192:                                              ; preds = %150
  %193 = lshr i32 %189, 24
  %194 = trunc i32 %193 to i8
  %195 = lshr i32 %189, 16
  %196 = trunc i32 %195 to i8
  %197 = trunc i32 %189 to i8
  store i8 %197, i8* %187, align 1
  %198 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %187, i64 %53
  store i8 %196, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %187, i64 %54
  store i8 %194, i8* %200, align 1
  %201 = bitcast <16 x i8> %167 to <4 x i32>
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %203, i8* %204, align 1
  %205 = lshr i32 %202, 8
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %187, i64 %55
  store i8 %206, i8* %207, align 1
  %208 = lshr i32 %202, 16
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %187, i64 %56
  store i8 %209, i8* %210, align 1
  %211 = lshr i32 %202, 24
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds i8, i8* %187, i64 %57
  store i8 %212, i8* %213, align 1
  %214 = bitcast <16 x i8> %175 to <4 x i32>
  %215 = extractelement <4 x i32> %214, i32 0
  store i32 %215, i32* %52, align 16, !alias.scope !460
  %216 = trunc i32 %215 to i8
  %217 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %216, i8* %217, align 1
  %218 = lshr i32 %215, 8
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds i8, i8* %187, i64 %58
  store i8 %219, i8* %220, align 1
  %221 = lshr i32 %215, 16
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %187, i64 %59
  store i8 %222, i8* %223, align 1
  %224 = lshr i32 %215, 24
  %225 = trunc i32 %224 to i8
  %226 = getelementptr inbounds i8, i8* %187, i64 %60
  store i8 %225, i8* %226, align 1
  br i1 %2, label %227, label %482

227:                                              ; preds = %192
  %228 = bitcast <16 x i8> %183 to <4 x i32>
  %229 = extractelement <4 x i32> %228, i32 0
  store i32 %229, i32* %52, align 16, !alias.scope !463
  %230 = trunc i32 %229 to i8
  %231 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %230, i8* %231, align 1
  %232 = lshr i32 %229, 8
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %233, i8* %234, align 1
  %235 = lshr i32 %229, 16
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %187, i64 11
  store i8 %236, i8* %237, align 1
  %238 = lshr i32 %229, 24
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %187, i64 15
  store i8 %239, i8* %240, align 1
  br label %482

241:                                              ; preds = %150
  %242 = icmp eq i64 %184, 0
  br i1 %242, label %312, label %243

243:                                              ; preds = %241
  %244 = trunc i32 %189 to i8
  store i8 %244, i8* %187, align 1
  %245 = icmp eq i64 %184, 1
  br i1 %245, label %254, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %247, align 1
  %248 = icmp eq i64 %184, 2
  br i1 %248, label %272, label %249

249:                                              ; preds = %246
  %250 = and i64 %123, 3
  %251 = icmp ult i64 %124, 3
  br i1 %251, label %259, label %252

252:                                              ; preds = %249
  %253 = sub i64 %123, %250
  br label %287

254:                                              ; preds = %243
  %255 = bitcast <16 x i8> %167 to <4 x i32>
  %256 = extractelement <4 x i32> %255, i32 0
  store i32 %256, i32* %52, align 16, !alias.scope !466
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %257, i8* %258, align 1
  br label %315

259:                                              ; preds = %287, %249
  %260 = phi i64 [ 2, %249 ], [ %309, %287 ]
  %261 = icmp eq i64 %250, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %269, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %270, %262 ], [ %250, %259 ]
  %265 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %263
  %266 = load i8, i8* %265, align 1
  %267 = mul i64 %263, %10
  %268 = getelementptr inbounds i8, i8* %187, i64 %267
  store i8 %266, i8* %268, align 1
  %269 = add nuw i64 %263, 1
  %270 = add i64 %264, -1
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %262, !llvm.loop !469

272:                                              ; preds = %259, %262, %246
  %273 = bitcast <16 x i8> %167 to <4 x i32>
  %274 = extractelement <4 x i32> %273, i32 0
  store i32 %274, i32* %52, align 16, !alias.scope !466
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %275, i8* %276, align 1
  br i1 %245, label %315, label %277

277:                                              ; preds = %272
  %278 = lshr i32 %274, 8
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds i8, i8* %187, i64 %63
  store i8 %279, i8* %280, align 1
  %281 = icmp eq i64 %184, 2
  br i1 %281, label %334, label %282

282:                                              ; preds = %277
  %283 = and i64 %120, 3
  %284 = icmp ult i64 %121, 3
  br i1 %284, label %320, label %285

285:                                              ; preds = %282
  %286 = sub i64 %120, %283
  br label %349

287:                                              ; preds = %287, %252
  %288 = phi i64 [ 2, %252 ], [ %309, %287 ]
  %289 = phi i64 [ %253, %252 ], [ %310, %287 ]
  %290 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %288
  %291 = load i8, i8* %290, align 2
  %292 = mul i64 %288, %10
  %293 = getelementptr inbounds i8, i8* %187, i64 %292
  store i8 %291, i8* %293, align 1
  %294 = or i64 %288, 1
  %295 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = mul i64 %294, %10
  %298 = getelementptr inbounds i8, i8* %187, i64 %297
  store i8 %296, i8* %298, align 1
  %299 = add nuw i64 %288, 2
  %300 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %299
  %301 = load i8, i8* %300, align 2
  %302 = mul i64 %299, %10
  %303 = getelementptr inbounds i8, i8* %187, i64 %302
  store i8 %301, i8* %303, align 1
  %304 = add nuw i64 %288, 3
  %305 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = mul i64 %304, %10
  %308 = getelementptr inbounds i8, i8* %187, i64 %307
  store i8 %306, i8* %308, align 1
  %309 = add nuw i64 %288, 4
  %310 = add i64 %289, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %259, label %287, !llvm.loop !471

312:                                              ; preds = %241
  %313 = bitcast <16 x i8> %175 to <4 x i32>
  %314 = extractelement <4 x i32> %313, i32 0
  store i32 %314, i32* %52, align 16, !alias.scope !473
  br label %392

315:                                              ; preds = %254, %272
  %316 = bitcast <16 x i8> %175 to <4 x i32>
  %317 = extractelement <4 x i32> %316, i32 0
  store i32 %317, i32* %52, align 16, !alias.scope !473
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %318, i8* %319, align 1
  br label %392

320:                                              ; preds = %349, %282
  %321 = phi i64 [ 2, %282 ], [ %375, %349 ]
  %322 = icmp eq i64 %283, 0
  br i1 %322, label %334, label %323

323:                                              ; preds = %320, %323
  %324 = phi i64 [ %331, %323 ], [ %321, %320 ]
  %325 = phi i64 [ %332, %323 ], [ %283, %320 ]
  %326 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %324
  %327 = load i8, i8* %326, align 1
  %328 = mul i64 %324, %10
  %329 = add i64 %328, 1
  %330 = getelementptr inbounds i8, i8* %187, i64 %329
  store i8 %327, i8* %330, align 1
  %331 = add nuw i64 %324, 1
  %332 = add i64 %325, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %323, !llvm.loop !476

334:                                              ; preds = %320, %323, %277
  %335 = bitcast <16 x i8> %175 to <4 x i32>
  %336 = extractelement <4 x i32> %335, i32 0
  store i32 %336, i32* %52, align 16, !alias.scope !473
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %337, i8* %338, align 1
  br i1 %245, label %392, label %339

339:                                              ; preds = %334
  %340 = lshr i32 %336, 8
  %341 = trunc i32 %340 to i8
  %342 = getelementptr inbounds i8, i8* %187, i64 %64
  store i8 %341, i8* %342, align 1
  %343 = icmp eq i64 %184, 2
  br i1 %343, label %392, label %344

344:                                              ; preds = %339
  %345 = and i64 %117, 3
  %346 = icmp ult i64 %118, 3
  br i1 %346, label %378, label %347

347:                                              ; preds = %344
  %348 = sub i64 %117, %345
  br label %393

349:                                              ; preds = %349, %285
  %350 = phi i64 [ 2, %285 ], [ %375, %349 ]
  %351 = phi i64 [ %286, %285 ], [ %376, %349 ]
  %352 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %350
  %353 = load i8, i8* %352, align 2
  %354 = mul i64 %350, %10
  %355 = or i64 %354, 1
  %356 = getelementptr inbounds i8, i8* %187, i64 %355
  store i8 %353, i8* %356, align 1
  %357 = or i64 %350, 1
  %358 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = mul i64 %357, %10
  %361 = add i64 %360, 1
  %362 = getelementptr inbounds i8, i8* %187, i64 %361
  store i8 %359, i8* %362, align 1
  %363 = add nuw i64 %350, 2
  %364 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %363
  %365 = load i8, i8* %364, align 2
  %366 = mul i64 %363, %10
  %367 = or i64 %366, 1
  %368 = getelementptr inbounds i8, i8* %187, i64 %367
  store i8 %365, i8* %368, align 1
  %369 = add nuw i64 %350, 3
  %370 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = mul i64 %369, %10
  %373 = add i64 %372, 1
  %374 = getelementptr inbounds i8, i8* %187, i64 %373
  store i8 %371, i8* %374, align 1
  %375 = add nuw i64 %350, 4
  %376 = add i64 %351, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %320, label %349, !llvm.loop !477

378:                                              ; preds = %393, %344
  %379 = phi i64 [ 2, %344 ], [ %419, %393 ]
  %380 = icmp eq i64 %345, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %389, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %390, %381 ], [ %345, %378 ]
  %384 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %382
  %385 = load i8, i8* %384, align 1
  %386 = mul i64 %382, %10
  %387 = add i64 %386, 2
  %388 = getelementptr inbounds i8, i8* %187, i64 %387
  store i8 %385, i8* %388, align 1
  %389 = add nuw i64 %382, 1
  %390 = add i64 %383, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %381, !llvm.loop !478

392:                                              ; preds = %378, %381, %339, %315, %334, %312
  br i1 %2, label %422, label %482

393:                                              ; preds = %393, %347
  %394 = phi i64 [ 2, %347 ], [ %419, %393 ]
  %395 = phi i64 [ %348, %347 ], [ %420, %393 ]
  %396 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %394
  %397 = load i8, i8* %396, align 2
  %398 = mul i64 %394, %10
  %399 = add i64 %398, 2
  %400 = getelementptr inbounds i8, i8* %187, i64 %399
  store i8 %397, i8* %400, align 1
  %401 = or i64 %394, 1
  %402 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = mul i64 %401, %10
  %405 = add i64 %404, 2
  %406 = getelementptr inbounds i8, i8* %187, i64 %405
  store i8 %403, i8* %406, align 1
  %407 = add nuw i64 %394, 2
  %408 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %407
  %409 = load i8, i8* %408, align 2
  %410 = mul i64 %407, %10
  %411 = add i64 %410, 2
  %412 = getelementptr inbounds i8, i8* %187, i64 %411
  store i8 %409, i8* %412, align 1
  %413 = add nuw i64 %394, 3
  %414 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = mul i64 %413, %10
  %417 = add i64 %416, 2
  %418 = getelementptr inbounds i8, i8* %187, i64 %417
  store i8 %415, i8* %418, align 1
  %419 = add nuw i64 %394, 4
  %420 = add i64 %395, -4
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %378, label %393, !llvm.loop !479

422:                                              ; preds = %392
  %423 = bitcast <16 x i8> %183 to <4 x i32>
  %424 = extractelement <4 x i32> %423, i32 0
  store i32 %424, i32* %52, align 16, !alias.scope !480
  br i1 %242, label %482, label %425

425:                                              ; preds = %422
  %426 = trunc i32 %424 to i8
  %427 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %426, i8* %427, align 1
  %428 = icmp eq i64 %184, 1
  br i1 %428, label %482, label %429

429:                                              ; preds = %425
  %430 = lshr i32 %424, 8
  %431 = trunc i32 %430 to i8
  %432 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %431, i8* %432, align 1
  %433 = icmp eq i64 %184, 2
  br i1 %433, label %482, label %434

434:                                              ; preds = %429
  %435 = and i64 %114, 3
  %436 = icmp ult i64 %115, 3
  br i1 %436, label %468, label %437

437:                                              ; preds = %434
  %438 = sub i64 %114, %435
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i64 [ 2, %437 ], [ %465, %439 ]
  %441 = phi i64 [ %438, %437 ], [ %466, %439 ]
  %442 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %440
  %443 = load i8, i8* %442, align 2
  %444 = shl i64 %440, 2
  %445 = or i64 %444, 3
  %446 = getelementptr inbounds i8, i8* %187, i64 %445
  store i8 %443, i8* %446, align 1
  %447 = or i64 %440, 1
  %448 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = shl i64 %447, 2
  %451 = or i64 %450, 3
  %452 = getelementptr inbounds i8, i8* %187, i64 %451
  store i8 %449, i8* %452, align 1
  %453 = add nuw i64 %440, 2
  %454 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %453
  %455 = load i8, i8* %454, align 2
  %456 = shl i64 %453, 2
  %457 = or i64 %456, 3
  %458 = getelementptr inbounds i8, i8* %187, i64 %457
  store i8 %455, i8* %458, align 1
  %459 = add nuw i64 %440, 3
  %460 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = shl i64 %459, 2
  %463 = or i64 %462, 3
  %464 = getelementptr inbounds i8, i8* %187, i64 %463
  store i8 %461, i8* %464, align 1
  %465 = add nuw i64 %440, 4
  %466 = add i64 %441, -4
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %468, label %439

468:                                              ; preds = %439, %434
  %469 = phi i64 [ 2, %434 ], [ %465, %439 ]
  %470 = icmp eq i64 %435, 0
  br i1 %470, label %482, label %471

471:                                              ; preds = %468, %471
  %472 = phi i64 [ %479, %471 ], [ %469, %468 ]
  %473 = phi i64 [ %480, %471 ], [ %435, %468 ]
  %474 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %472
  %475 = load i8, i8* %474, align 1
  %476 = shl i64 %472, 2
  %477 = or i64 %476, 3
  %478 = getelementptr inbounds i8, i8* %187, i64 %477
  store i8 %475, i8* %478, align 1
  %479 = add nuw i64 %472, 1
  %480 = add i64 %473, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %471, !llvm.loop !483

482:                                              ; preds = %468, %471, %422, %392, %425, %429, %192, %227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #12
  %483 = add i64 %112, 4
  %484 = icmp ugt i64 %49, %483
  %485 = add i64 %111, 1
  br i1 %484, label %110, label %107
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::OutputEncodingInfo"* dereferenceable(352)) #4 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %41, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 2
  %15 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 4
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2
  %18 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 0
  %19 = bitcast float* %18 to <4 x float>*
  %20 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 0
  %21 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 1
  %22 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 2
  %23 = bitcast %"struct.jxl::OpsinParams"* %17 to <4 x float>*
  %24 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 12
  %25 = bitcast float* %24 to <4 x float>*
  %26 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 24
  %27 = bitcast float* %26 to <4 x float>*
  %28 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 4
  %29 = bitcast float* %28 to <4 x float>*
  %30 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 16
  %31 = bitcast float* %30 to <4 x float>*
  %32 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 28
  %33 = bitcast float* %32 to <4 x float>*
  %34 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 8
  %35 = bitcast float* %34 to <4 x float>*
  %36 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 20
  %37 = bitcast float* %36 to <4 x float>*
  %38 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 32
  %39 = bitcast float* %38 to <4 x float>*
  %40 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 1
  br label %42

41:                                               ; preds = %965, %3
  ret i32 0

42:                                               ; preds = %7, %965
  %43 = phi i64 [ 0, %7 ], [ %966, %965 ]
  %44 = load i64, i64* %8, align 8
  %45 = add i64 %44, %43
  %46 = load i64, i64* %9, align 8
  %47 = mul i64 %46, %45
  %48 = load i8*, i8** %10, align 8
  %49 = ptrtoint i8* %48 to i64
  %50 = and i64 %49, 63
  %51 = icmp eq i64 %50, 0
  tail call void @llvm.assume(i1 %51) #12
  %52 = getelementptr inbounds i8, i8* %48, i64 %47
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #12
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %11, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = load i8*, i8** %12, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds i8, i8* %59, i64 %47
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #12
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds float, float* %67, i64 %57
  %69 = load i8*, i8** %13, align 8
  %70 = ptrtoint i8* %69 to i64
  %71 = and i64 %70, 63
  %72 = icmp eq i64 %71, 0
  tail call void @llvm.assume(i1 %72) #12
  %73 = getelementptr inbounds i8, i8* %69, i64 %47
  %74 = ptrtoint i8* %73 to i64
  %75 = and i64 %74, 63
  %76 = icmp eq i64 %75, 0
  tail call void @llvm.assume(i1 %76) #12
  %77 = bitcast i8* %73 to float*
  %78 = getelementptr inbounds float, float* %77, i64 %57
  %79 = load i8, i8* %14, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %777

81:                                               ; preds = %42
  %82 = load i32, i32* %15, align 4
  switch i32 %82, label %962 [
    i32 8, label %83
    i32 13, label %151
    i32 16, label %282
    i32 18, label %440
    i32 1, label %595
    i32 17, label %777
  ]

83:                                               ; preds = %81
  %84 = load i64, i64* %16, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %965, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %148, %86 ], [ 0, %83 ]
  %88 = getelementptr inbounds float, float* %58, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !alias.scope !484, !noalias !487
  %91 = getelementptr inbounds float, float* %68, i64 %87
  %92 = bitcast float* %91 to <8 x float>*
  %93 = load <8 x float>, <8 x float>* %92, align 32, !alias.scope !489, !noalias !492
  %94 = getelementptr inbounds float, float* %78, i64 %87
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !494, !noalias !497
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !499
  %97 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !500, !noalias !503
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> zeroinitializer
  %99 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %101 = fadd <8 x float> %90, %93
  %102 = fsub <8 x float> %93, %90
  %103 = load float, float* %20, align 4, !noalias !509
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = shufflevector <8 x float> %104, <8 x float> undef, <8 x i32> zeroinitializer
  %106 = fsub <8 x float> %101, %105
  %107 = load float, float* %21, align 4, !noalias !509
  %108 = insertelement <8 x float> undef, float %107, i32 0
  %109 = shufflevector <8 x float> %108, <8 x float> undef, <8 x i32> zeroinitializer
  %110 = fsub <8 x float> %102, %109
  %111 = load float, float* %22, align 4, !noalias !509
  %112 = insertelement <8 x float> undef, float %111, i32 0
  %113 = shufflevector <8 x float> %112, <8 x float> undef, <8 x i32> zeroinitializer
  %114 = fsub <8 x float> %96, %113
  %115 = fmul <8 x float> %106, %106
  %116 = fmul <8 x float> %110, %110
  %117 = fmul <8 x float> %114, %114
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %115, <8 x float> %106, <8 x float> %98) #12
  %119 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %116, <8 x float> %110, <8 x float> %99) #12
  %120 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %117, <8 x float> %114, <8 x float> %100) #12
  %121 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !510, !noalias !513
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %123 = fmul <8 x float> %122, %118
  %124 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !515, !noalias !518
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %126 = fmul <8 x float> %118, %125
  %127 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !520, !noalias !523
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %129 = fmul <8 x float> %118, %128
  %130 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !525, !noalias !528
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %132 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> %119, <8 x float> %123) #12
  %133 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !530, !noalias !533
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %135 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %119, <8 x float> %126) #12
  %136 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !535, !noalias !538
  %137 = shufflevector <4 x float> %136, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %119, <8 x float> %129) #12
  %139 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !540, !noalias !543
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %140, <8 x float> %120, <8 x float> %132) #12
  %142 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !545, !noalias !548
  %143 = shufflevector <4 x float> %142, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %144 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %143, <8 x float> %120, <8 x float> %135) #12
  %145 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !550, !noalias !553
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %147 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %146, <8 x float> %120, <8 x float> %138) #12
  store <8 x float> %141, <8 x float>* %89, align 32, !alias.scope !555
  store <8 x float> %144, <8 x float>* %92, align 32, !alias.scope !558
  store <8 x float> %147, <8 x float>* %95, align 32, !alias.scope !561
  %148 = add i64 %87, 8
  %149 = load i64, i64* %16, align 8
  %150 = icmp ult i64 %148, %149
  br i1 %150, label %86, label %965

151:                                              ; preds = %81
  %152 = load i64, i64* %16, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %965, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %279, %154 ], [ 0, %151 ]
  %156 = getelementptr inbounds float, float* %58, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 32, !alias.scope !564, !noalias !567
  %159 = getelementptr inbounds float, float* %68, i64 %155
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 32, !alias.scope !569, !noalias !572
  %162 = getelementptr inbounds float, float* %78, i64 %155
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 32, !alias.scope !574, !noalias !577
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !579
  %165 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !580, !noalias !583
  %166 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> zeroinitializer
  %167 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %169 = fadd <8 x float> %158, %161
  %170 = fsub <8 x float> %161, %158
  %171 = load float, float* %20, align 4, !noalias !589
  %172 = insertelement <8 x float> undef, float %171, i32 0
  %173 = shufflevector <8 x float> %172, <8 x float> undef, <8 x i32> zeroinitializer
  %174 = fsub <8 x float> %169, %173
  %175 = load float, float* %21, align 4, !noalias !589
  %176 = insertelement <8 x float> undef, float %175, i32 0
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> zeroinitializer
  %178 = fsub <8 x float> %170, %177
  %179 = load float, float* %22, align 4, !noalias !589
  %180 = insertelement <8 x float> undef, float %179, i32 0
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> zeroinitializer
  %182 = fsub <8 x float> %164, %181
  %183 = fmul <8 x float> %174, %174
  %184 = fmul <8 x float> %178, %178
  %185 = fmul <8 x float> %182, %182
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %174, <8 x float> %166) #12
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %178, <8 x float> %167) #12
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %185, <8 x float> %182, <8 x float> %168) #12
  %189 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !590, !noalias !593
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %191 = fmul <8 x float> %190, %186
  %192 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !595, !noalias !598
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %194 = fmul <8 x float> %186, %193
  %195 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !600, !noalias !603
  %196 = shufflevector <4 x float> %195, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %197 = fmul <8 x float> %186, %196
  %198 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !605, !noalias !608
  %199 = shufflevector <4 x float> %198, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %200 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %199, <8 x float> %187, <8 x float> %191) #12
  %201 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !610, !noalias !613
  %202 = shufflevector <4 x float> %201, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %187, <8 x float> %194) #12
  %204 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !615, !noalias !618
  %205 = shufflevector <4 x float> %204, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %187, <8 x float> %197) #12
  %207 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !620, !noalias !623
  %208 = shufflevector <4 x float> %207, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %208, <8 x float> %188, <8 x float> %200) #12
  %210 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !625, !noalias !628
  %211 = shufflevector <4 x float> %210, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %212 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %188, <8 x float> %203) #12
  %213 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !630, !noalias !633
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %214, <8 x float> %188, <8 x float> %206) #12
  %216 = bitcast <8 x float> %209 to <8 x i32>
  %217 = and <8 x i32> %216, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %218 = and <8 x i32> %216, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %219 = bitcast <8 x i32> %218 to <8 x float>
  %220 = fmul <8 x float> %219, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %221 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %219) #12
  fence acq_rel
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %221, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %221, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %221, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %223, <8 x float> %221, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %224, <8 x float> %221, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %225, <8 x float> %221, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %226, <8 x float> %221, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %229 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %227, <8 x float> %221, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %230 = fdiv <8 x float> %228, %229
  %231 = fcmp ogt <8 x float> %219, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %232 = select <8 x i1> %231, <8 x float> %230, <8 x float> %220
  %233 = bitcast <8 x float> %232 to <8 x i32>
  %234 = and <8 x i32> %233, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %235 = or <8 x i32> %234, %217
  %236 = bitcast float* %156 to <8 x i32>*
  store <8 x i32> %235, <8 x i32>* %236, align 32, !alias.scope !635
  %237 = bitcast <8 x float> %212 to <8 x i32>
  %238 = and <8 x i32> %237, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %239 = and <8 x i32> %237, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %240 = bitcast <8 x i32> %239 to <8 x float>
  %241 = fmul <8 x float> %240, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %242 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %240) #12
  fence acq_rel
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %242, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %244, <8 x float> %242, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %247 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %245, <8 x float> %242, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %248 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %246, <8 x float> %242, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %242, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %248, <8 x float> %242, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %251 = fdiv <8 x float> %249, %250
  %252 = fcmp ogt <8 x float> %240, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %253 = select <8 x i1> %252, <8 x float> %251, <8 x float> %241
  %254 = bitcast <8 x float> %253 to <8 x i32>
  %255 = and <8 x i32> %254, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %256 = or <8 x i32> %255, %238
  %257 = bitcast float* %159 to <8 x i32>*
  store <8 x i32> %256, <8 x i32>* %257, align 32, !alias.scope !638
  %258 = bitcast <8 x float> %215 to <8 x i32>
  %259 = and <8 x i32> %258, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %260 = and <8 x i32> %258, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %261 = bitcast <8 x i32> %260 to <8 x float>
  %262 = fmul <8 x float> %261, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %263 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %261) #12
  fence acq_rel
  %264 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %266 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %264, <8 x float> %263, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %267 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %265, <8 x float> %263, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %268 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %266, <8 x float> %263, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %269 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %263, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %270 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %268, <8 x float> %263, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %271 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %269, <8 x float> %263, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %272 = fdiv <8 x float> %270, %271
  %273 = fcmp ogt <8 x float> %261, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %274 = select <8 x i1> %273, <8 x float> %272, <8 x float> %262
  %275 = bitcast <8 x float> %274 to <8 x i32>
  %276 = and <8 x i32> %275, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %277 = or <8 x i32> %276, %259
  %278 = bitcast float* %162 to <8 x i32>*
  store <8 x i32> %277, <8 x i32>* %278, align 32, !alias.scope !641
  %279 = add i64 %155, 8
  %280 = load i64, i64* %16, align 8
  %281 = icmp ult i64 %279, %280
  br i1 %281, label %154, label %965

282:                                              ; preds = %81
  %283 = load i64, i64* %16, align 8
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %965, label %285

285:                                              ; preds = %282, %285
  %286 = phi i64 [ %437, %285 ], [ 0, %282 ]
  %287 = getelementptr inbounds float, float* %58, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 32, !alias.scope !644, !noalias !647
  %290 = getelementptr inbounds float, float* %68, i64 %286
  %291 = bitcast float* %290 to <8 x float>*
  %292 = load <8 x float>, <8 x float>* %291, align 32, !alias.scope !649, !noalias !652
  %293 = getelementptr inbounds float, float* %78, i64 %286
  %294 = bitcast float* %293 to <8 x float>*
  %295 = load <8 x float>, <8 x float>* %294, align 32, !alias.scope !654, !noalias !657
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !659
  %296 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !660, !noalias !663
  %297 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> zeroinitializer
  %298 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %300 = fadd <8 x float> %289, %292
  %301 = fsub <8 x float> %292, %289
  %302 = load float, float* %20, align 4, !noalias !669
  %303 = insertelement <8 x float> undef, float %302, i32 0
  %304 = shufflevector <8 x float> %303, <8 x float> undef, <8 x i32> zeroinitializer
  %305 = fsub <8 x float> %300, %304
  %306 = load float, float* %21, align 4, !noalias !669
  %307 = insertelement <8 x float> undef, float %306, i32 0
  %308 = shufflevector <8 x float> %307, <8 x float> undef, <8 x i32> zeroinitializer
  %309 = fsub <8 x float> %301, %308
  %310 = load float, float* %22, align 4, !noalias !669
  %311 = insertelement <8 x float> undef, float %310, i32 0
  %312 = shufflevector <8 x float> %311, <8 x float> undef, <8 x i32> zeroinitializer
  %313 = fsub <8 x float> %295, %312
  %314 = fmul <8 x float> %305, %305
  %315 = fmul <8 x float> %309, %309
  %316 = fmul <8 x float> %313, %313
  %317 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %314, <8 x float> %305, <8 x float> %297) #12
  %318 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %315, <8 x float> %309, <8 x float> %298) #12
  %319 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %316, <8 x float> %313, <8 x float> %299) #12
  %320 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !670, !noalias !673
  %321 = shufflevector <4 x float> %320, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %322 = fmul <8 x float> %321, %317
  %323 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !675, !noalias !678
  %324 = shufflevector <4 x float> %323, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %325 = fmul <8 x float> %317, %324
  %326 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !680, !noalias !683
  %327 = shufflevector <4 x float> %326, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %328 = fmul <8 x float> %317, %327
  %329 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !685, !noalias !688
  %330 = shufflevector <4 x float> %329, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %331 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %330, <8 x float> %318, <8 x float> %322) #12
  %332 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !690, !noalias !693
  %333 = shufflevector <4 x float> %332, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %334 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %333, <8 x float> %318, <8 x float> %325) #12
  %335 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !695, !noalias !698
  %336 = shufflevector <4 x float> %335, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %337 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %336, <8 x float> %318, <8 x float> %328) #12
  %338 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !700, !noalias !703
  %339 = shufflevector <4 x float> %338, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %340 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %339, <8 x float> %319, <8 x float> %331) #12
  %341 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !705, !noalias !708
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %343 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %319, <8 x float> %334) #12
  %344 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !710, !noalias !713
  %345 = shufflevector <4 x float> %344, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %346 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %345, <8 x float> %319, <8 x float> %337) #12
  %347 = bitcast <8 x float> %340 to <8 x i32>
  %348 = and <8 x i32> %347, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %349 = and <8 x i32> %347, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %350 = bitcast <8 x i32> %349 to <8 x float>
  %351 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %350) #12
  %352 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %351) #12
  %353 = fcmp olt <8 x float> %350, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %354 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %355 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %356 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %352, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %357 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %355, <8 x float> %352, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %358 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %356, <8 x float> %352, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %359 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %357, <8 x float> %352, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %360 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %358, <8 x float> %352, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %361 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %359, <8 x float> %352, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %362 = fdiv <8 x float> %360, %361
  fence acq_rel
  %363 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %364 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %365 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %363, <8 x float> %352, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %366 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %364, <8 x float> %352, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %367 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %365, <8 x float> %352, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %368 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %366, <8 x float> %352, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %369 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %367, <8 x float> %352, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %370 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %368, <8 x float> %352, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %371 = fdiv <8 x float> %369, %370
  %372 = select <8 x i1> %353, <8 x float> %362, <8 x float> %371
  %373 = bitcast <8 x float> %372 to <8 x i32>
  %374 = and <8 x i32> %373, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %375 = or <8 x i32> %374, %348
  %376 = bitcast float* %287 to <8 x i32>*
  store <8 x i32> %375, <8 x i32>* %376, align 32, !alias.scope !715
  %377 = bitcast <8 x float> %343 to <8 x i32>
  %378 = and <8 x i32> %377, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %379 = and <8 x i32> %377, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %380 = bitcast <8 x i32> %379 to <8 x float>
  %381 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %380) #12
  %382 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %381) #12
  %383 = fcmp olt <8 x float> %380, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %384 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %385 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %386 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %384, <8 x float> %382, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %387 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %385, <8 x float> %382, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %388 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %386, <8 x float> %382, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %389 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> %382, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %390 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %382, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %391 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %382, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %392 = fdiv <8 x float> %390, %391
  fence acq_rel
  %393 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %394 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %395 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %393, <8 x float> %382, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %396 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %394, <8 x float> %382, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %397 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %395, <8 x float> %382, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %398 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %396, <8 x float> %382, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %399 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %397, <8 x float> %382, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %400 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %398, <8 x float> %382, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %401 = fdiv <8 x float> %399, %400
  %402 = select <8 x i1> %383, <8 x float> %392, <8 x float> %401
  %403 = bitcast <8 x float> %402 to <8 x i32>
  %404 = and <8 x i32> %403, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %405 = or <8 x i32> %404, %378
  %406 = bitcast float* %290 to <8 x i32>*
  store <8 x i32> %405, <8 x i32>* %406, align 32, !alias.scope !718
  %407 = bitcast <8 x float> %346 to <8 x i32>
  %408 = and <8 x i32> %407, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %409 = and <8 x i32> %407, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %410 = bitcast <8 x i32> %409 to <8 x float>
  %411 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %410) #12
  %412 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %411) #12
  %413 = fcmp olt <8 x float> %410, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %414 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %415 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %416 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %414, <8 x float> %412, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %417 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %415, <8 x float> %412, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %418 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %416, <8 x float> %412, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %419 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %417, <8 x float> %412, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %420 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %418, <8 x float> %412, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %421 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %419, <8 x float> %412, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %422 = fdiv <8 x float> %420, %421
  fence acq_rel
  %423 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %424 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %425 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %423, <8 x float> %412, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %426 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %424, <8 x float> %412, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %427 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %425, <8 x float> %412, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %428 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %426, <8 x float> %412, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %429 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %427, <8 x float> %412, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %430 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %428, <8 x float> %412, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %431 = fdiv <8 x float> %429, %430
  %432 = select <8 x i1> %413, <8 x float> %422, <8 x float> %431
  %433 = bitcast <8 x float> %432 to <8 x i32>
  %434 = and <8 x i32> %433, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %435 = or <8 x i32> %434, %408
  %436 = bitcast float* %293 to <8 x i32>*
  store <8 x i32> %435, <8 x i32>* %436, align 32, !alias.scope !721
  %437 = add i64 %286, 8
  %438 = load i64, i64* %16, align 8
  %439 = icmp ult i64 %437, %438
  br i1 %439, label %285, label %965

440:                                              ; preds = %81
  %441 = load i64, i64* %16, align 8
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %965, label %443

443:                                              ; preds = %440, %443
  %444 = phi i64 [ %592, %443 ], [ 0, %440 ]
  %445 = getelementptr inbounds float, float* %58, i64 %444
  %446 = bitcast float* %445 to <8 x float>*
  %447 = load <8 x float>, <8 x float>* %446, align 32, !alias.scope !724, !noalias !727
  %448 = getelementptr inbounds float, float* %68, i64 %444
  %449 = bitcast float* %448 to <8 x float>*
  %450 = load <8 x float>, <8 x float>* %449, align 32, !alias.scope !729, !noalias !732
  %451 = getelementptr inbounds float, float* %78, i64 %444
  %452 = bitcast float* %451 to <8 x float>*
  %453 = load <8 x float>, <8 x float>* %452, align 32, !alias.scope !734, !noalias !737
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !739
  %454 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !740, !noalias !743
  %455 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> zeroinitializer
  %456 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %457 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %458 = fadd <8 x float> %447, %450
  %459 = fsub <8 x float> %450, %447
  %460 = load float, float* %20, align 4, !noalias !749
  %461 = insertelement <8 x float> undef, float %460, i32 0
  %462 = shufflevector <8 x float> %461, <8 x float> undef, <8 x i32> zeroinitializer
  %463 = fsub <8 x float> %458, %462
  %464 = load float, float* %21, align 4, !noalias !749
  %465 = insertelement <8 x float> undef, float %464, i32 0
  %466 = shufflevector <8 x float> %465, <8 x float> undef, <8 x i32> zeroinitializer
  %467 = fsub <8 x float> %459, %466
  %468 = load float, float* %22, align 4, !noalias !749
  %469 = insertelement <8 x float> undef, float %468, i32 0
  %470 = shufflevector <8 x float> %469, <8 x float> undef, <8 x i32> zeroinitializer
  %471 = fsub <8 x float> %453, %470
  %472 = fmul <8 x float> %463, %463
  %473 = fmul <8 x float> %467, %467
  %474 = fmul <8 x float> %471, %471
  %475 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %472, <8 x float> %463, <8 x float> %455) #12
  %476 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %467, <8 x float> %456) #12
  %477 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %474, <8 x float> %471, <8 x float> %457) #12
  %478 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !750, !noalias !753
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %480 = fmul <8 x float> %479, %475
  %481 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !755, !noalias !758
  %482 = shufflevector <4 x float> %481, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %483 = fmul <8 x float> %475, %482
  %484 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !760, !noalias !763
  %485 = shufflevector <4 x float> %484, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %486 = fmul <8 x float> %475, %485
  %487 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !765, !noalias !768
  %488 = shufflevector <4 x float> %487, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %489 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %488, <8 x float> %476, <8 x float> %480) #12
  %490 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !770, !noalias !773
  %491 = shufflevector <4 x float> %490, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %492 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %491, <8 x float> %476, <8 x float> %483) #12
  %493 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !775, !noalias !778
  %494 = shufflevector <4 x float> %493, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %495 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %494, <8 x float> %476, <8 x float> %486) #12
  %496 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !780, !noalias !783
  %497 = shufflevector <4 x float> %496, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %498 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %497, <8 x float> %477, <8 x float> %489) #12
  %499 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !785, !noalias !788
  %500 = shufflevector <4 x float> %499, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %501 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %500, <8 x float> %477, <8 x float> %492) #12
  %502 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !790, !noalias !793
  %503 = shufflevector <4 x float> %502, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %504 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %477, <8 x float> %495) #12
  %505 = bitcast <8 x float> %498 to <8 x i32>
  %506 = and <8 x i32> %505, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %507 = and <8 x i32> %505, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %508 = bitcast <8 x i32> %507 to <8 x float>
  %509 = fmul <8 x float> %508, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %510 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %509) #12
  %511 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %508, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %512 = bitcast <8 x float> %511 to <8 x i32>
  %513 = add <8 x i32> %512, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %514 = ashr <8 x i32> %513, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %515 = and <8 x i32> %513, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %516 = sub <8 x i32> %512, %515
  %517 = bitcast <8 x i32> %516 to <8 x float>
  %518 = sitofp <8 x i32> %514 to <8 x float>
  %519 = fadd <8 x float> %517, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %520 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %521 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %520, <8 x float> %519, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %521, <8 x float> %519, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %524 = fdiv <8 x float> %522, %523
  %525 = fadd <8 x float> %524, %518
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %525, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %527 = fcmp ole <8 x float> %508, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %528 = select <8 x i1> %527, <8 x float> %510, <8 x float> %526
  %529 = bitcast <8 x float> %528 to <8 x i32>
  %530 = and <8 x i32> %529, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %531 = or <8 x i32> %530, %506
  %532 = bitcast <8 x i32> %531 to <8 x float>
  %533 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %532, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %533, <8 x float>* %446, align 32, !alias.scope !795
  %534 = bitcast <8 x float> %501 to <8 x i32>
  %535 = and <8 x i32> %534, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %536 = and <8 x i32> %534, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %537 = bitcast <8 x i32> %536 to <8 x float>
  %538 = fmul <8 x float> %537, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %539 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %538) #12
  %540 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %537, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %541 = bitcast <8 x float> %540 to <8 x i32>
  %542 = add <8 x i32> %541, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %543 = ashr <8 x i32> %542, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %544 = and <8 x i32> %542, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %545 = sub <8 x i32> %541, %544
  %546 = bitcast <8 x i32> %545 to <8 x float>
  %547 = sitofp <8 x i32> %543 to <8 x float>
  %548 = fadd <8 x float> %546, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %549 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %548, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %550 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %548, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %551 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %549, <8 x float> %548, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %552 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %550, <8 x float> %548, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %553 = fdiv <8 x float> %551, %552
  %554 = fadd <8 x float> %553, %547
  %555 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %554, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %556 = fcmp ole <8 x float> %537, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %557 = select <8 x i1> %556, <8 x float> %539, <8 x float> %555
  %558 = bitcast <8 x float> %557 to <8 x i32>
  %559 = and <8 x i32> %558, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %560 = or <8 x i32> %559, %535
  %561 = bitcast <8 x i32> %560 to <8 x float>
  %562 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %561, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %562, <8 x float>* %449, align 32, !alias.scope !798
  %563 = bitcast <8 x float> %504 to <8 x i32>
  %564 = and <8 x i32> %563, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %565 = and <8 x i32> %563, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %566 = bitcast <8 x i32> %565 to <8 x float>
  %567 = fmul <8 x float> %566, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %568 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %567) #12
  %569 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %566, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %570 = bitcast <8 x float> %569 to <8 x i32>
  %571 = add <8 x i32> %570, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %572 = ashr <8 x i32> %571, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %573 = and <8 x i32> %571, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %574 = sub <8 x i32> %570, %573
  %575 = bitcast <8 x i32> %574 to <8 x float>
  %576 = sitofp <8 x i32> %572 to <8 x float>
  %577 = fadd <8 x float> %575, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %578 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %577, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %579 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %577, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %580 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %578, <8 x float> %577, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %581 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %579, <8 x float> %577, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %582 = fdiv <8 x float> %580, %581
  %583 = fadd <8 x float> %582, %576
  %584 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %583, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %585 = fcmp ole <8 x float> %566, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %586 = select <8 x i1> %585, <8 x float> %568, <8 x float> %584
  %587 = bitcast <8 x float> %586 to <8 x i32>
  %588 = and <8 x i32> %587, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %589 = or <8 x i32> %588, %564
  %590 = bitcast <8 x i32> %589 to <8 x float>
  %591 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %590, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %591, <8 x float>* %452, align 32, !alias.scope !801
  %592 = add i64 %444, 8
  %593 = load i64, i64* %16, align 8
  %594 = icmp ult i64 %592, %593
  br i1 %594, label %443, label %965

595:                                              ; preds = %81
  %596 = load i64, i64* %16, align 8
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %965, label %598

598:                                              ; preds = %595, %598
  %599 = phi i64 [ %774, %598 ], [ 0, %595 ]
  %600 = getelementptr inbounds float, float* %58, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 32, !alias.scope !804, !noalias !807
  %603 = getelementptr inbounds float, float* %68, i64 %599
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 32, !alias.scope !809, !noalias !812
  %606 = getelementptr inbounds float, float* %78, i64 %599
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 32, !alias.scope !814, !noalias !817
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !819
  %609 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !820, !noalias !823
  %610 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> zeroinitializer
  %611 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %612 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %613 = fadd <8 x float> %602, %605
  %614 = fsub <8 x float> %605, %602
  %615 = load float, float* %20, align 4, !noalias !829
  %616 = insertelement <8 x float> undef, float %615, i32 0
  %617 = shufflevector <8 x float> %616, <8 x float> undef, <8 x i32> zeroinitializer
  %618 = fsub <8 x float> %613, %617
  %619 = load float, float* %21, align 4, !noalias !829
  %620 = insertelement <8 x float> undef, float %619, i32 0
  %621 = shufflevector <8 x float> %620, <8 x float> undef, <8 x i32> zeroinitializer
  %622 = fsub <8 x float> %614, %621
  %623 = load float, float* %22, align 4, !noalias !829
  %624 = insertelement <8 x float> undef, float %623, i32 0
  %625 = shufflevector <8 x float> %624, <8 x float> undef, <8 x i32> zeroinitializer
  %626 = fsub <8 x float> %608, %625
  %627 = fmul <8 x float> %618, %618
  %628 = fmul <8 x float> %622, %622
  %629 = fmul <8 x float> %626, %626
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %627, <8 x float> %618, <8 x float> %610) #12
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %628, <8 x float> %622, <8 x float> %611) #12
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %629, <8 x float> %626, <8 x float> %612) #12
  %633 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !830, !noalias !833
  %634 = shufflevector <4 x float> %633, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %635 = fmul <8 x float> %634, %630
  %636 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !835, !noalias !838
  %637 = shufflevector <4 x float> %636, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %638 = fmul <8 x float> %630, %637
  %639 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !840, !noalias !843
  %640 = shufflevector <4 x float> %639, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %641 = fmul <8 x float> %630, %640
  %642 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !845, !noalias !848
  %643 = shufflevector <4 x float> %642, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %644 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %643, <8 x float> %631, <8 x float> %635) #12
  %645 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !850, !noalias !853
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %647 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %646, <8 x float> %631, <8 x float> %638) #12
  %648 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !855, !noalias !858
  %649 = shufflevector <4 x float> %648, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %650 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %649, <8 x float> %631, <8 x float> %641) #12
  %651 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !860, !noalias !863
  %652 = shufflevector <4 x float> %651, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %653 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %652, <8 x float> %632, <8 x float> %644) #12
  %654 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !865, !noalias !868
  %655 = shufflevector <4 x float> %654, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %656 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %655, <8 x float> %632, <8 x float> %647) #12
  %657 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !870, !noalias !873
  %658 = shufflevector <4 x float> %657, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %659 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %658, <8 x float> %632, <8 x float> %650) #12
  %660 = fmul <8 x float> %653, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %661 = bitcast <8 x float> %653 to <8 x i32>
  %662 = add <8 x i32> %661, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %663 = ashr <8 x i32> %662, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %664 = and <8 x i32> %662, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %665 = sub <8 x i32> %661, %664
  %666 = bitcast <8 x i32> %665 to <8 x float>
  %667 = sitofp <8 x i32> %663 to <8 x float>
  %668 = fadd <8 x float> %666, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %669 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %668, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %670 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %668, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %671 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %669, <8 x float> %668, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %672 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %670, <8 x float> %668, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %673 = fdiv <8 x float> %671, %672
  %674 = fadd <8 x float> %673, %667
  %675 = fmul <8 x float> %674, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %676 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %675, i32 9) #12
  %677 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %676) #12
  %678 = bitcast <8 x float> %676 to <8 x i32>
  %679 = xor <8 x i32> %678, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %680 = and <8 x i32> %679, %677
  %681 = ashr <8 x i32> %680, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %682 = xor <8 x i32> %681, %677
  %683 = shl <8 x i32> %682, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %684 = add <8 x i32> %683, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %685 = bitcast <8 x i32> %684 to <8 x float>
  %686 = fsub <8 x float> %675, %676
  %687 = fadd <8 x float> %686, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %688 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %687, <8 x float> %686, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %689 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %688, <8 x float> %686, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %690 = fmul <8 x float> %689, %685
  %691 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %686, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %692 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %691, <8 x float> %686, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %693 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %692, <8 x float> %686, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %694 = fdiv <8 x float> %690, %693
  %695 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %694, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %696 = fcmp ole <8 x float> %653, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %697 = select <8 x i1> %696, <8 x float> %660, <8 x float> %695
  store <8 x float> %697, <8 x float>* %601, align 32, !alias.scope !875
  %698 = fmul <8 x float> %656, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %699 = bitcast <8 x float> %656 to <8 x i32>
  %700 = add <8 x i32> %699, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %701 = ashr <8 x i32> %700, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %702 = and <8 x i32> %700, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %703 = sub <8 x i32> %699, %702
  %704 = bitcast <8 x i32> %703 to <8 x float>
  %705 = sitofp <8 x i32> %701 to <8 x float>
  %706 = fadd <8 x float> %704, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %707 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %706, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %708 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %706, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %709 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %707, <8 x float> %706, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %710 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %708, <8 x float> %706, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %711 = fdiv <8 x float> %709, %710
  %712 = fadd <8 x float> %711, %705
  %713 = fmul <8 x float> %712, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %714 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %713, i32 9) #12
  %715 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %714) #12
  %716 = bitcast <8 x float> %714 to <8 x i32>
  %717 = xor <8 x i32> %716, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %718 = and <8 x i32> %717, %715
  %719 = ashr <8 x i32> %718, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %720 = xor <8 x i32> %719, %715
  %721 = shl <8 x i32> %720, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %722 = add <8 x i32> %721, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %723 = bitcast <8 x i32> %722 to <8 x float>
  %724 = fsub <8 x float> %713, %714
  %725 = fadd <8 x float> %724, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %726 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %725, <8 x float> %724, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %727 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %726, <8 x float> %724, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %728 = fmul <8 x float> %727, %723
  %729 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %724, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %730 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %729, <8 x float> %724, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %731 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %730, <8 x float> %724, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %732 = fdiv <8 x float> %728, %731
  %733 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %732, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %734 = fcmp ole <8 x float> %656, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %735 = select <8 x i1> %734, <8 x float> %698, <8 x float> %733
  store <8 x float> %735, <8 x float>* %604, align 32, !alias.scope !878
  %736 = fmul <8 x float> %659, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %737 = bitcast <8 x float> %659 to <8 x i32>
  %738 = add <8 x i32> %737, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %739 = ashr <8 x i32> %738, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %740 = and <8 x i32> %738, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %741 = sub <8 x i32> %737, %740
  %742 = bitcast <8 x i32> %741 to <8 x float>
  %743 = sitofp <8 x i32> %739 to <8 x float>
  %744 = fadd <8 x float> %742, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %745 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %744, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %746 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %744, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %747 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %745, <8 x float> %744, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %748 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %746, <8 x float> %744, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %749 = fdiv <8 x float> %747, %748
  %750 = fadd <8 x float> %749, %743
  %751 = fmul <8 x float> %750, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %752 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %751, i32 9) #12
  %753 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %752) #12
  %754 = bitcast <8 x float> %752 to <8 x i32>
  %755 = xor <8 x i32> %754, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %756 = and <8 x i32> %755, %753
  %757 = ashr <8 x i32> %756, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %758 = xor <8 x i32> %757, %753
  %759 = shl <8 x i32> %758, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %760 = add <8 x i32> %759, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %761 = bitcast <8 x i32> %760 to <8 x float>
  %762 = fsub <8 x float> %751, %752
  %763 = fadd <8 x float> %762, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %764 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %763, <8 x float> %762, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %765 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %764, <8 x float> %762, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %766 = fmul <8 x float> %765, %761
  %767 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %762, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %768 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %767, <8 x float> %762, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %769 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %768, <8 x float> %762, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %770 = fdiv <8 x float> %766, %769
  %771 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %770, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %772 = fcmp ole <8 x float> %659, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %773 = select <8 x i1> %772, <8 x float> %736, <8 x float> %771
  store <8 x float> %773, <8 x float>* %607, align 32, !alias.scope !881
  %774 = add i64 %599, 8
  %775 = load i64, i64* %16, align 8
  %776 = icmp ult i64 %774, %775
  br i1 %776, label %598, label %965

777:                                              ; preds = %81, %42
  %778 = load i64, i64* %16, align 8
  %779 = icmp eq i64 %778, 0
  br i1 %779, label %965, label %780

780:                                              ; preds = %777, %780
  %781 = phi i64 [ %959, %780 ], [ 0, %777 ]
  %782 = getelementptr inbounds float, float* %58, i64 %781
  %783 = bitcast float* %782 to <8 x float>*
  %784 = load <8 x float>, <8 x float>* %783, align 32, !alias.scope !884, !noalias !887
  %785 = getelementptr inbounds float, float* %68, i64 %781
  %786 = bitcast float* %785 to <8 x float>*
  %787 = load <8 x float>, <8 x float>* %786, align 32, !alias.scope !889, !noalias !892
  %788 = getelementptr inbounds float, float* %78, i64 %781
  %789 = bitcast float* %788 to <8 x float>*
  %790 = load <8 x float>, <8 x float>* %789, align 32, !alias.scope !894, !noalias !897
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !899
  %791 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !900, !noalias !903
  %792 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> zeroinitializer
  %793 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %794 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %795 = fadd <8 x float> %784, %787
  %796 = fsub <8 x float> %787, %784
  %797 = load float, float* %20, align 4, !noalias !909
  %798 = insertelement <8 x float> undef, float %797, i32 0
  %799 = shufflevector <8 x float> %798, <8 x float> undef, <8 x i32> zeroinitializer
  %800 = fsub <8 x float> %795, %799
  %801 = load float, float* %21, align 4, !noalias !909
  %802 = insertelement <8 x float> undef, float %801, i32 0
  %803 = shufflevector <8 x float> %802, <8 x float> undef, <8 x i32> zeroinitializer
  %804 = fsub <8 x float> %796, %803
  %805 = load float, float* %22, align 4, !noalias !909
  %806 = insertelement <8 x float> undef, float %805, i32 0
  %807 = shufflevector <8 x float> %806, <8 x float> undef, <8 x i32> zeroinitializer
  %808 = fsub <8 x float> %790, %807
  %809 = fmul <8 x float> %800, %800
  %810 = fmul <8 x float> %804, %804
  %811 = fmul <8 x float> %808, %808
  %812 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %809, <8 x float> %800, <8 x float> %792) #12
  %813 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %810, <8 x float> %804, <8 x float> %793) #12
  %814 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %811, <8 x float> %808, <8 x float> %794) #12
  %815 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !910, !noalias !913
  %816 = shufflevector <4 x float> %815, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %817 = fmul <8 x float> %816, %812
  %818 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !915, !noalias !918
  %819 = shufflevector <4 x float> %818, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %820 = fmul <8 x float> %812, %819
  %821 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !920, !noalias !923
  %822 = shufflevector <4 x float> %821, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %823 = fmul <8 x float> %812, %822
  %824 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !925, !noalias !928
  %825 = shufflevector <4 x float> %824, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %826 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %825, <8 x float> %813, <8 x float> %817) #12
  %827 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !930, !noalias !933
  %828 = shufflevector <4 x float> %827, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %829 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %813, <8 x float> %820) #12
  %830 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !935, !noalias !938
  %831 = shufflevector <4 x float> %830, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %832 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %831, <8 x float> %813, <8 x float> %823) #12
  %833 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !940, !noalias !943
  %834 = shufflevector <4 x float> %833, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %835 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %834, <8 x float> %814, <8 x float> %826) #12
  %836 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !945, !noalias !948
  %837 = shufflevector <4 x float> %836, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %838 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %837, <8 x float> %814, <8 x float> %829) #12
  %839 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !950, !noalias !953
  %840 = shufflevector <4 x float> %839, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %840, <8 x float> %814, <8 x float> %832) #12
  %842 = fcmp ugt <8 x float> %835, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %843 = load float, float* %40, align 8, !noalias !955
  %844 = insertelement <8 x float> undef, float %843, i32 0
  %845 = shufflevector <8 x float> %844, <8 x float> undef, <8 x i32> zeroinitializer
  %846 = bitcast <8 x float> %835 to <8 x i32>
  %847 = add <8 x i32> %846, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %848 = ashr <8 x i32> %847, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %849 = and <8 x i32> %847, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %850 = sub <8 x i32> %846, %849
  %851 = bitcast <8 x i32> %850 to <8 x float>
  %852 = sitofp <8 x i32> %848 to <8 x float>
  %853 = fadd <8 x float> %851, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %854 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %855 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %856 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %854, <8 x float> %853, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %857 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %855, <8 x float> %853, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %858 = fdiv <8 x float> %856, %857
  %859 = fadd <8 x float> %858, %852
  %860 = fmul <8 x float> %845, %859
  %861 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %860, i32 9) #12
  %862 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %861) #12
  %863 = bitcast <8 x float> %861 to <8 x i32>
  %864 = xor <8 x i32> %863, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %865 = and <8 x i32> %864, %862
  %866 = ashr <8 x i32> %865, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %867 = xor <8 x i32> %866, %862
  %868 = shl <8 x i32> %867, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %869 = add <8 x i32> %868, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %870 = bitcast <8 x i32> %869 to <8 x float>
  %871 = fsub <8 x float> %860, %861
  %872 = fadd <8 x float> %871, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %873 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %872, <8 x float> %871, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %874 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %873, <8 x float> %871, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %875 = fmul <8 x float> %874, %870
  %876 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %871, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %877 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %876, <8 x float> %871, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %878 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %877, <8 x float> %871, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %879 = fdiv <8 x float> %875, %878
  %880 = select <8 x i1> %842, <8 x float> %879, <8 x float> zeroinitializer
  store <8 x float> %880, <8 x float>* %783, align 32, !alias.scope !958
  %881 = fcmp ugt <8 x float> %838, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %882 = load float, float* %40, align 8, !noalias !961
  %883 = insertelement <8 x float> undef, float %882, i32 0
  %884 = shufflevector <8 x float> %883, <8 x float> undef, <8 x i32> zeroinitializer
  %885 = bitcast <8 x float> %838 to <8 x i32>
  %886 = add <8 x i32> %885, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %887 = ashr <8 x i32> %886, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %888 = and <8 x i32> %886, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %889 = sub <8 x i32> %885, %888
  %890 = bitcast <8 x i32> %889 to <8 x float>
  %891 = sitofp <8 x i32> %887 to <8 x float>
  %892 = fadd <8 x float> %890, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %893 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %892, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %894 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %892, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %895 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %893, <8 x float> %892, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %894, <8 x float> %892, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %897 = fdiv <8 x float> %895, %896
  %898 = fadd <8 x float> %897, %891
  %899 = fmul <8 x float> %884, %898
  %900 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %899, i32 9) #12
  %901 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %900) #12
  %902 = bitcast <8 x float> %900 to <8 x i32>
  %903 = xor <8 x i32> %902, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %904 = and <8 x i32> %903, %901
  %905 = ashr <8 x i32> %904, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %906 = xor <8 x i32> %905, %901
  %907 = shl <8 x i32> %906, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %908 = add <8 x i32> %907, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %909 = bitcast <8 x i32> %908 to <8 x float>
  %910 = fsub <8 x float> %899, %900
  %911 = fadd <8 x float> %910, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %912 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %911, <8 x float> %910, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %913 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %912, <8 x float> %910, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %914 = fmul <8 x float> %913, %909
  %915 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %910, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %916 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %915, <8 x float> %910, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %917 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %916, <8 x float> %910, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %918 = fdiv <8 x float> %914, %917
  %919 = select <8 x i1> %881, <8 x float> %918, <8 x float> zeroinitializer
  store <8 x float> %919, <8 x float>* %786, align 32, !alias.scope !964
  %920 = fcmp ugt <8 x float> %841, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %921 = load float, float* %40, align 8, !noalias !967
  %922 = insertelement <8 x float> undef, float %921, i32 0
  %923 = shufflevector <8 x float> %922, <8 x float> undef, <8 x i32> zeroinitializer
  %924 = bitcast <8 x float> %841 to <8 x i32>
  %925 = add <8 x i32> %924, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %926 = ashr <8 x i32> %925, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %927 = and <8 x i32> %925, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %928 = sub <8 x i32> %924, %927
  %929 = bitcast <8 x i32> %928 to <8 x float>
  %930 = sitofp <8 x i32> %926 to <8 x float>
  %931 = fadd <8 x float> %929, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %932 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %931, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %933 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %931, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %934 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %932, <8 x float> %931, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %935 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %933, <8 x float> %931, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %936 = fdiv <8 x float> %934, %935
  %937 = fadd <8 x float> %936, %930
  %938 = fmul <8 x float> %937, %923
  %939 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %938, i32 9) #12
  %940 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %939) #12
  %941 = bitcast <8 x float> %939 to <8 x i32>
  %942 = xor <8 x i32> %941, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %943 = and <8 x i32> %942, %940
  %944 = ashr <8 x i32> %943, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %945 = xor <8 x i32> %944, %940
  %946 = shl <8 x i32> %945, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %947 = add <8 x i32> %946, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %948 = bitcast <8 x i32> %947 to <8 x float>
  %949 = fsub <8 x float> %938, %939
  %950 = fadd <8 x float> %949, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %951 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %950, <8 x float> %949, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %952 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %951, <8 x float> %949, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %953 = fmul <8 x float> %952, %948
  %954 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %949, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %955 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %954, <8 x float> %949, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %956 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %955, <8 x float> %949, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %957 = fdiv <8 x float> %953, %956
  %958 = select <8 x i1> %920, <8 x float> %957, <8 x float> zeroinitializer
  store <8 x float> %958, <8 x float>* %789, align 32, !alias.scope !970
  %959 = add i64 %781, 8
  %960 = load i64, i64* %16, align 8
  %961 = icmp ult i64 %959, %960
  br i1 %961, label %780, label %965

962:                                              ; preds = %81
  %963 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 173) #12
  %964 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

965:                                              ; preds = %780, %598, %443, %285, %154, %86, %83, %151, %282, %440, %595, %777
  %966 = add nuw i64 %43, 1
  %967 = load i64, i64* %4, align 8
  %968 = icmp ult i64 %966, %967
  br i1 %968, label %42, label %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX212FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i1 zeroext, %"class.jxl::Plane"* readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i8* noalias nocapture, i64) #5 {
  %9 = alloca [16 x i8], align 32
  %10 = select i1 %2, i64 4, i64 3
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #12
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #12
  %36 = icmp eq %"class.jxl::Plane"* %3, null
  %37 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %41 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = mul i64 %46, %10
  %48 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %52 = bitcast [16 x i8]* %9 to i32*
  %53 = shl nuw nsw i64 %10, 1
  %54 = mul nuw nsw i64 %10, 3
  %55 = add nuw nsw i64 %10, 1
  %56 = or i64 %53, 1
  %57 = add nuw nsw i64 %54, 1
  %58 = add nuw nsw i64 %10, 2
  %59 = add nuw nsw i64 %53, 2
  %60 = add nuw nsw i64 %54, 2
  %61 = add i64 %49, -2
  %62 = add i64 %49, -3
  %63 = add nuw nsw i64 %10, 1
  %64 = add nuw nsw i64 %10, 2
  br label %66

65:                                               ; preds = %107, %8
  ret void

66:                                               ; preds = %14, %107
  %67 = phi i64 [ 0, %14 ], [ %108, %107 ]
  %68 = add i64 %16, %67
  %69 = mul i64 %18, %68
  %70 = getelementptr inbounds i8, i8* %20, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #12
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds float, float* %74, i64 %25
  %76 = getelementptr inbounds i8, i8* %27, i64 %69
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #12
  %80 = bitcast i8* %76 to float*
  %81 = getelementptr inbounds float, float* %80, i64 %25
  %82 = getelementptr inbounds i8, i8* %32, i64 %69
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #12
  %86 = bitcast i8* %82 to float*
  %87 = getelementptr inbounds float, float* %86, i64 %25
  br i1 %36, label %99, label %88

88:                                               ; preds = %66
  %89 = add i64 %38, %67
  %90 = load i8*, i8** %39, align 8
  %91 = load i64, i64* %40, align 8
  %92 = mul i64 %91, %89
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #12
  %97 = bitcast i8* %93 to float*
  %98 = getelementptr inbounds float, float* %97, i64 %42
  br label %99

99:                                               ; preds = %66, %88
  %100 = phi float* [ %98, %88 ], [ null, %66 ]
  br i1 %50, label %107, label %101

101:                                              ; preds = %99
  %102 = add i64 %44, %67
  %103 = mul i64 %102, %7
  %104 = add i64 %103, %47
  %105 = icmp eq float* %100, null
  %106 = getelementptr inbounds i8, i8* %6, i64 %104
  br label %110

107:                                              ; preds = %482, %99
  %108 = add nuw i64 %67, 1
  %109 = icmp ult i64 %108, %12
  br i1 %109, label %66, label %65

110:                                              ; preds = %101, %482
  %111 = phi i64 [ 0, %101 ], [ %485, %482 ]
  %112 = phi i64 [ 0, %101 ], [ %483, %482 ]
  %113 = mul i64 %111, -4
  %114 = add i64 %61, %113
  %115 = add i64 %62, %113
  %116 = mul i64 %111, -4
  %117 = add i64 %61, %116
  %118 = add i64 %62, %116
  %119 = mul i64 %111, -4
  %120 = add i64 %61, %119
  %121 = add i64 %62, %119
  %122 = mul i64 %111, -4
  %123 = add i64 %61, %122
  %124 = add i64 %62, %122
  %125 = getelementptr inbounds float, float* %75, i64 %112
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16, !alias.scope !973
  %128 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %127, <4 x float> zeroinitializer) #12
  %129 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %128, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %130 = fmul <4 x float> %129, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %131 = getelementptr inbounds float, float* %81, i64 %112
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 16, !alias.scope !976
  %134 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %133, <4 x float> zeroinitializer) #12
  %135 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %134, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %136 = fmul <4 x float> %135, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %137 = getelementptr inbounds float, float* %87, i64 %112
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16, !alias.scope !979
  %140 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %139, <4 x float> zeroinitializer) #12
  %141 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %140, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %142 = fmul <4 x float> %141, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br i1 %105, label %150, label %143

143:                                              ; preds = %110
  %144 = getelementptr inbounds float, float* %100, i64 %112
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 16, !alias.scope !982
  %147 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %146, <4 x float> zeroinitializer) #12
  %148 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %147, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %149 = fmul <4 x float> %148, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br label %150

150:                                              ; preds = %110, %143
  %151 = phi <4 x float> [ %149, %143 ], [ <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %110 ]
  %152 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %130) #12
  %153 = bitcast <4 x float> %130 to <4 x i32>
  %154 = xor <4 x i32> %153, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %155 = and <4 x i32> %152, %154
  %156 = ashr <4 x i32> %155, <i32 31, i32 31, i32 31, i32 31>
  %157 = xor <4 x i32> %156, %152
  %158 = bitcast <4 x i32> %157 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %136) #12
  %161 = bitcast <4 x float> %136 to <4 x i32>
  %162 = xor <4 x i32> %161, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %163 = and <4 x i32> %160, %162
  %164 = ashr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, %160
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %168 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %142) #12
  %169 = bitcast <4 x float> %142 to <4 x i32>
  %170 = xor <4 x i32> %169, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %171 = and <4 x i32> %168, %170
  %172 = ashr <4 x i32> %171, <i32 31, i32 31, i32 31, i32 31>
  %173 = xor <4 x i32> %172, %168
  %174 = bitcast <4 x i32> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %176 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %151) #12
  %177 = bitcast <4 x float> %151 to <4 x i32>
  %178 = xor <4 x i32> %177, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %179 = and <4 x i32> %176, %178
  %180 = ashr <4 x i32> %179, <i32 31, i32 31, i32 31, i32 31>
  %181 = xor <4 x i32> %180, %176
  %182 = bitcast <4 x i32> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %184 = sub i64 %49, %112
  %185 = icmp ult i64 %184, 4
  %186 = mul i64 %112, %10
  %187 = getelementptr inbounds i8, i8* %106, i64 %186
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #12
  %188 = bitcast <16 x i8> %159 to <4 x i32>
  %189 = extractelement <4 x i32> %188, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %51, i8 -86, i64 16, i1 false) #12
  store i32 %189, i32* %52, align 32
  %190 = lshr i32 %189, 8
  %191 = trunc i32 %190 to i8
  br i1 %185, label %241, label %192, !prof !459

192:                                              ; preds = %150
  %193 = lshr i32 %189, 24
  %194 = trunc i32 %193 to i8
  %195 = lshr i32 %189, 16
  %196 = trunc i32 %195 to i8
  %197 = trunc i32 %189 to i8
  store i8 %197, i8* %187, align 1
  %198 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %187, i64 %53
  store i8 %196, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %187, i64 %54
  store i8 %194, i8* %200, align 1
  %201 = bitcast <16 x i8> %167 to <4 x i32>
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %203, i8* %204, align 1
  %205 = lshr i32 %202, 8
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %187, i64 %55
  store i8 %206, i8* %207, align 1
  %208 = lshr i32 %202, 16
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %187, i64 %56
  store i8 %209, i8* %210, align 1
  %211 = lshr i32 %202, 24
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds i8, i8* %187, i64 %57
  store i8 %212, i8* %213, align 1
  %214 = bitcast <16 x i8> %175 to <4 x i32>
  %215 = extractelement <4 x i32> %214, i32 0
  store i32 %215, i32* %52, align 32, !alias.scope !985
  %216 = trunc i32 %215 to i8
  %217 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %216, i8* %217, align 1
  %218 = lshr i32 %215, 8
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds i8, i8* %187, i64 %58
  store i8 %219, i8* %220, align 1
  %221 = lshr i32 %215, 16
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %187, i64 %59
  store i8 %222, i8* %223, align 1
  %224 = lshr i32 %215, 24
  %225 = trunc i32 %224 to i8
  %226 = getelementptr inbounds i8, i8* %187, i64 %60
  store i8 %225, i8* %226, align 1
  br i1 %2, label %227, label %482

227:                                              ; preds = %192
  %228 = bitcast <16 x i8> %183 to <4 x i32>
  %229 = extractelement <4 x i32> %228, i32 0
  store i32 %229, i32* %52, align 32, !alias.scope !988
  %230 = trunc i32 %229 to i8
  %231 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %230, i8* %231, align 1
  %232 = lshr i32 %229, 8
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %233, i8* %234, align 1
  %235 = lshr i32 %229, 16
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %187, i64 11
  store i8 %236, i8* %237, align 1
  %238 = lshr i32 %229, 24
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %187, i64 15
  store i8 %239, i8* %240, align 1
  br label %482

241:                                              ; preds = %150
  %242 = icmp eq i64 %184, 0
  br i1 %242, label %312, label %243

243:                                              ; preds = %241
  %244 = trunc i32 %189 to i8
  store i8 %244, i8* %187, align 1
  %245 = icmp eq i64 %184, 1
  br i1 %245, label %254, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %247, align 1
  %248 = icmp eq i64 %184, 2
  br i1 %248, label %272, label %249

249:                                              ; preds = %246
  %250 = and i64 %123, 3
  %251 = icmp ult i64 %124, 3
  br i1 %251, label %259, label %252

252:                                              ; preds = %249
  %253 = sub i64 %123, %250
  br label %287

254:                                              ; preds = %243
  %255 = bitcast <16 x i8> %167 to <4 x i32>
  %256 = extractelement <4 x i32> %255, i32 0
  store i32 %256, i32* %52, align 32, !alias.scope !991
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %257, i8* %258, align 1
  br label %315

259:                                              ; preds = %287, %249
  %260 = phi i64 [ 2, %249 ], [ %309, %287 ]
  %261 = icmp eq i64 %250, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %269, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %270, %262 ], [ %250, %259 ]
  %265 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %263
  %266 = load i8, i8* %265, align 1
  %267 = mul i64 %263, %10
  %268 = getelementptr inbounds i8, i8* %187, i64 %267
  store i8 %266, i8* %268, align 1
  %269 = add nuw i64 %263, 1
  %270 = add i64 %264, -1
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %262, !llvm.loop !994

272:                                              ; preds = %259, %262, %246
  %273 = bitcast <16 x i8> %167 to <4 x i32>
  %274 = extractelement <4 x i32> %273, i32 0
  store i32 %274, i32* %52, align 32, !alias.scope !991
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %275, i8* %276, align 1
  br i1 %245, label %315, label %277

277:                                              ; preds = %272
  %278 = lshr i32 %274, 8
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds i8, i8* %187, i64 %63
  store i8 %279, i8* %280, align 1
  %281 = icmp eq i64 %184, 2
  br i1 %281, label %334, label %282

282:                                              ; preds = %277
  %283 = and i64 %120, 3
  %284 = icmp ult i64 %121, 3
  br i1 %284, label %320, label %285

285:                                              ; preds = %282
  %286 = sub i64 %120, %283
  br label %349

287:                                              ; preds = %287, %252
  %288 = phi i64 [ 2, %252 ], [ %309, %287 ]
  %289 = phi i64 [ %253, %252 ], [ %310, %287 ]
  %290 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %288
  %291 = load i8, i8* %290, align 2
  %292 = mul i64 %288, %10
  %293 = getelementptr inbounds i8, i8* %187, i64 %292
  store i8 %291, i8* %293, align 1
  %294 = or i64 %288, 1
  %295 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = mul i64 %294, %10
  %298 = getelementptr inbounds i8, i8* %187, i64 %297
  store i8 %296, i8* %298, align 1
  %299 = add nuw i64 %288, 2
  %300 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %299
  %301 = load i8, i8* %300, align 2
  %302 = mul i64 %299, %10
  %303 = getelementptr inbounds i8, i8* %187, i64 %302
  store i8 %301, i8* %303, align 1
  %304 = add nuw i64 %288, 3
  %305 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = mul i64 %304, %10
  %308 = getelementptr inbounds i8, i8* %187, i64 %307
  store i8 %306, i8* %308, align 1
  %309 = add nuw i64 %288, 4
  %310 = add i64 %289, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %259, label %287, !llvm.loop !995

312:                                              ; preds = %241
  %313 = bitcast <16 x i8> %175 to <4 x i32>
  %314 = extractelement <4 x i32> %313, i32 0
  store i32 %314, i32* %52, align 32, !alias.scope !996
  br label %392

315:                                              ; preds = %254, %272
  %316 = bitcast <16 x i8> %175 to <4 x i32>
  %317 = extractelement <4 x i32> %316, i32 0
  store i32 %317, i32* %52, align 32, !alias.scope !996
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %318, i8* %319, align 1
  br label %392

320:                                              ; preds = %349, %282
  %321 = phi i64 [ 2, %282 ], [ %375, %349 ]
  %322 = icmp eq i64 %283, 0
  br i1 %322, label %334, label %323

323:                                              ; preds = %320, %323
  %324 = phi i64 [ %331, %323 ], [ %321, %320 ]
  %325 = phi i64 [ %332, %323 ], [ %283, %320 ]
  %326 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %324
  %327 = load i8, i8* %326, align 1
  %328 = mul i64 %324, %10
  %329 = add i64 %328, 1
  %330 = getelementptr inbounds i8, i8* %187, i64 %329
  store i8 %327, i8* %330, align 1
  %331 = add nuw i64 %324, 1
  %332 = add i64 %325, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %323, !llvm.loop !999

334:                                              ; preds = %320, %323, %277
  %335 = bitcast <16 x i8> %175 to <4 x i32>
  %336 = extractelement <4 x i32> %335, i32 0
  store i32 %336, i32* %52, align 32, !alias.scope !996
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %337, i8* %338, align 1
  br i1 %245, label %392, label %339

339:                                              ; preds = %334
  %340 = lshr i32 %336, 8
  %341 = trunc i32 %340 to i8
  %342 = getelementptr inbounds i8, i8* %187, i64 %64
  store i8 %341, i8* %342, align 1
  %343 = icmp eq i64 %184, 2
  br i1 %343, label %392, label %344

344:                                              ; preds = %339
  %345 = and i64 %117, 3
  %346 = icmp ult i64 %118, 3
  br i1 %346, label %378, label %347

347:                                              ; preds = %344
  %348 = sub i64 %117, %345
  br label %393

349:                                              ; preds = %349, %285
  %350 = phi i64 [ 2, %285 ], [ %375, %349 ]
  %351 = phi i64 [ %286, %285 ], [ %376, %349 ]
  %352 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %350
  %353 = load i8, i8* %352, align 2
  %354 = mul i64 %350, %10
  %355 = or i64 %354, 1
  %356 = getelementptr inbounds i8, i8* %187, i64 %355
  store i8 %353, i8* %356, align 1
  %357 = or i64 %350, 1
  %358 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = mul i64 %357, %10
  %361 = add i64 %360, 1
  %362 = getelementptr inbounds i8, i8* %187, i64 %361
  store i8 %359, i8* %362, align 1
  %363 = add nuw i64 %350, 2
  %364 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %363
  %365 = load i8, i8* %364, align 2
  %366 = mul i64 %363, %10
  %367 = or i64 %366, 1
  %368 = getelementptr inbounds i8, i8* %187, i64 %367
  store i8 %365, i8* %368, align 1
  %369 = add nuw i64 %350, 3
  %370 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = mul i64 %369, %10
  %373 = add i64 %372, 1
  %374 = getelementptr inbounds i8, i8* %187, i64 %373
  store i8 %371, i8* %374, align 1
  %375 = add nuw i64 %350, 4
  %376 = add i64 %351, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %320, label %349, !llvm.loop !1000

378:                                              ; preds = %393, %344
  %379 = phi i64 [ 2, %344 ], [ %419, %393 ]
  %380 = icmp eq i64 %345, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %389, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %390, %381 ], [ %345, %378 ]
  %384 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %382
  %385 = load i8, i8* %384, align 1
  %386 = mul i64 %382, %10
  %387 = add i64 %386, 2
  %388 = getelementptr inbounds i8, i8* %187, i64 %387
  store i8 %385, i8* %388, align 1
  %389 = add nuw i64 %382, 1
  %390 = add i64 %383, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %381, !llvm.loop !1001

392:                                              ; preds = %378, %381, %339, %315, %334, %312
  br i1 %2, label %422, label %482

393:                                              ; preds = %393, %347
  %394 = phi i64 [ 2, %347 ], [ %419, %393 ]
  %395 = phi i64 [ %348, %347 ], [ %420, %393 ]
  %396 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %394
  %397 = load i8, i8* %396, align 2
  %398 = mul i64 %394, %10
  %399 = add i64 %398, 2
  %400 = getelementptr inbounds i8, i8* %187, i64 %399
  store i8 %397, i8* %400, align 1
  %401 = or i64 %394, 1
  %402 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = mul i64 %401, %10
  %405 = add i64 %404, 2
  %406 = getelementptr inbounds i8, i8* %187, i64 %405
  store i8 %403, i8* %406, align 1
  %407 = add nuw i64 %394, 2
  %408 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %407
  %409 = load i8, i8* %408, align 2
  %410 = mul i64 %407, %10
  %411 = add i64 %410, 2
  %412 = getelementptr inbounds i8, i8* %187, i64 %411
  store i8 %409, i8* %412, align 1
  %413 = add nuw i64 %394, 3
  %414 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = mul i64 %413, %10
  %417 = add i64 %416, 2
  %418 = getelementptr inbounds i8, i8* %187, i64 %417
  store i8 %415, i8* %418, align 1
  %419 = add nuw i64 %394, 4
  %420 = add i64 %395, -4
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %378, label %393, !llvm.loop !1002

422:                                              ; preds = %392
  %423 = bitcast <16 x i8> %183 to <4 x i32>
  %424 = extractelement <4 x i32> %423, i32 0
  store i32 %424, i32* %52, align 32, !alias.scope !1003
  br i1 %242, label %482, label %425

425:                                              ; preds = %422
  %426 = trunc i32 %424 to i8
  %427 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %426, i8* %427, align 1
  %428 = icmp eq i64 %184, 1
  br i1 %428, label %482, label %429

429:                                              ; preds = %425
  %430 = lshr i32 %424, 8
  %431 = trunc i32 %430 to i8
  %432 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %431, i8* %432, align 1
  %433 = icmp eq i64 %184, 2
  br i1 %433, label %482, label %434

434:                                              ; preds = %429
  %435 = and i64 %114, 3
  %436 = icmp ult i64 %115, 3
  br i1 %436, label %468, label %437

437:                                              ; preds = %434
  %438 = sub i64 %114, %435
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i64 [ 2, %437 ], [ %465, %439 ]
  %441 = phi i64 [ %438, %437 ], [ %466, %439 ]
  %442 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %440
  %443 = load i8, i8* %442, align 2
  %444 = shl i64 %440, 2
  %445 = or i64 %444, 3
  %446 = getelementptr inbounds i8, i8* %187, i64 %445
  store i8 %443, i8* %446, align 1
  %447 = or i64 %440, 1
  %448 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = shl i64 %447, 2
  %451 = or i64 %450, 3
  %452 = getelementptr inbounds i8, i8* %187, i64 %451
  store i8 %449, i8* %452, align 1
  %453 = add nuw i64 %440, 2
  %454 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %453
  %455 = load i8, i8* %454, align 2
  %456 = shl i64 %453, 2
  %457 = or i64 %456, 3
  %458 = getelementptr inbounds i8, i8* %187, i64 %457
  store i8 %455, i8* %458, align 1
  %459 = add nuw i64 %440, 3
  %460 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = shl i64 %459, 2
  %463 = or i64 %462, 3
  %464 = getelementptr inbounds i8, i8* %187, i64 %463
  store i8 %461, i8* %464, align 1
  %465 = add nuw i64 %440, 4
  %466 = add i64 %441, -4
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %468, label %439

468:                                              ; preds = %439, %434
  %469 = phi i64 [ 2, %434 ], [ %465, %439 ]
  %470 = icmp eq i64 %435, 0
  br i1 %470, label %482, label %471

471:                                              ; preds = %468, %471
  %472 = phi i64 [ %479, %471 ], [ %469, %468 ]
  %473 = phi i64 [ %480, %471 ], [ %435, %468 ]
  %474 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %472
  %475 = load i8, i8* %474, align 1
  %476 = shl i64 %472, 2
  %477 = or i64 %476, 3
  %478 = getelementptr inbounds i8, i8* %187, i64 %477
  store i8 %475, i8* %478, align 1
  %479 = add nuw i64 %472, 1
  %480 = add i64 %473, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %471, !llvm.loop !1006

482:                                              ; preds = %468, %471, %422, %392, %425, %429, %192, %227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #12
  %483 = add i64 %112, 4
  %484 = icmp ugt i64 %49, %483
  %485 = add i64 %111, 1
  br i1 %484, label %110, label %107
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::OutputEncodingInfo"* dereferenceable(352)) #6 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %41, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 2
  %15 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 4
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2
  %18 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 0
  %19 = bitcast float* %18 to <4 x float>*
  %20 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 0
  %21 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 1
  %22 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 2
  %23 = bitcast %"struct.jxl::OpsinParams"* %17 to <4 x float>*
  %24 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 12
  %25 = bitcast float* %24 to <4 x float>*
  %26 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 24
  %27 = bitcast float* %26 to <4 x float>*
  %28 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 4
  %29 = bitcast float* %28 to <4 x float>*
  %30 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 16
  %31 = bitcast float* %30 to <4 x float>*
  %32 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 28
  %33 = bitcast float* %32 to <4 x float>*
  %34 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 8
  %35 = bitcast float* %34 to <4 x float>*
  %36 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 20
  %37 = bitcast float* %36 to <4 x float>*
  %38 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 32
  %39 = bitcast float* %38 to <4 x float>*
  %40 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 1
  br label %42

41:                                               ; preds = %965, %3
  ret i32 0

42:                                               ; preds = %7, %965
  %43 = phi i64 [ 0, %7 ], [ %966, %965 ]
  %44 = load i64, i64* %8, align 8
  %45 = add i64 %44, %43
  %46 = load i64, i64* %9, align 8
  %47 = mul i64 %46, %45
  %48 = load i8*, i8** %10, align 8
  %49 = ptrtoint i8* %48 to i64
  %50 = and i64 %49, 63
  %51 = icmp eq i64 %50, 0
  tail call void @llvm.assume(i1 %51) #12
  %52 = getelementptr inbounds i8, i8* %48, i64 %47
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #12
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %11, align 8
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = load i8*, i8** %12, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds i8, i8* %59, i64 %47
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #12
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds float, float* %67, i64 %57
  %69 = load i8*, i8** %13, align 8
  %70 = ptrtoint i8* %69 to i64
  %71 = and i64 %70, 63
  %72 = icmp eq i64 %71, 0
  tail call void @llvm.assume(i1 %72) #12
  %73 = getelementptr inbounds i8, i8* %69, i64 %47
  %74 = ptrtoint i8* %73 to i64
  %75 = and i64 %74, 63
  %76 = icmp eq i64 %75, 0
  tail call void @llvm.assume(i1 %76) #12
  %77 = bitcast i8* %73 to float*
  %78 = getelementptr inbounds float, float* %77, i64 %57
  %79 = load i8, i8* %14, align 4, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %777

81:                                               ; preds = %42
  %82 = load i32, i32* %15, align 4
  switch i32 %82, label %962 [
    i32 8, label %83
    i32 13, label %151
    i32 16, label %282
    i32 18, label %440
    i32 1, label %595
    i32 17, label %777
  ]

83:                                               ; preds = %81
  %84 = load i64, i64* %16, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %965, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %148, %86 ], [ 0, %83 ]
  %88 = getelementptr inbounds float, float* %58, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 32, !alias.scope !1007, !noalias !1010
  %91 = getelementptr inbounds float, float* %68, i64 %87
  %92 = bitcast float* %91 to <8 x float>*
  %93 = load <8 x float>, <8 x float>* %92, align 32, !alias.scope !1012, !noalias !1015
  %94 = getelementptr inbounds float, float* %78, i64 %87
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !alias.scope !1017, !noalias !1020
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1022
  %97 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1023, !noalias !1026
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> zeroinitializer
  %99 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = shufflevector <4 x float> %97, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %101 = fadd <8 x float> %90, %93
  %102 = fsub <8 x float> %93, %90
  %103 = load float, float* %20, align 4, !noalias !1032
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = shufflevector <8 x float> %104, <8 x float> undef, <8 x i32> zeroinitializer
  %106 = fsub <8 x float> %101, %105
  %107 = load float, float* %21, align 4, !noalias !1032
  %108 = insertelement <8 x float> undef, float %107, i32 0
  %109 = shufflevector <8 x float> %108, <8 x float> undef, <8 x i32> zeroinitializer
  %110 = fsub <8 x float> %102, %109
  %111 = load float, float* %22, align 4, !noalias !1032
  %112 = insertelement <8 x float> undef, float %111, i32 0
  %113 = shufflevector <8 x float> %112, <8 x float> undef, <8 x i32> zeroinitializer
  %114 = fsub <8 x float> %96, %113
  %115 = fmul <8 x float> %106, %106
  %116 = fmul <8 x float> %110, %110
  %117 = fmul <8 x float> %114, %114
  %118 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %115, <8 x float> %106, <8 x float> %98) #12
  %119 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %116, <8 x float> %110, <8 x float> %99) #12
  %120 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %117, <8 x float> %114, <8 x float> %100) #12
  %121 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1033, !noalias !1036
  %122 = shufflevector <4 x float> %121, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %123 = fmul <8 x float> %122, %118
  %124 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1038, !noalias !1041
  %125 = shufflevector <4 x float> %124, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %126 = fmul <8 x float> %118, %125
  %127 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1043, !noalias !1046
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %129 = fmul <8 x float> %118, %128
  %130 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1048, !noalias !1051
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %132 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %131, <8 x float> %119, <8 x float> %123) #12
  %133 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1053, !noalias !1056
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %135 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %119, <8 x float> %126) #12
  %136 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1058, !noalias !1061
  %137 = shufflevector <4 x float> %136, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %138 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %137, <8 x float> %119, <8 x float> %129) #12
  %139 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1063, !noalias !1066
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %140, <8 x float> %120, <8 x float> %132) #12
  %142 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1068, !noalias !1071
  %143 = shufflevector <4 x float> %142, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %144 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %143, <8 x float> %120, <8 x float> %135) #12
  %145 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1073, !noalias !1076
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %147 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %146, <8 x float> %120, <8 x float> %138) #12
  store <8 x float> %141, <8 x float>* %89, align 32, !alias.scope !1078
  store <8 x float> %144, <8 x float>* %92, align 32, !alias.scope !1081
  store <8 x float> %147, <8 x float>* %95, align 32, !alias.scope !1084
  %148 = add i64 %87, 8
  %149 = load i64, i64* %16, align 8
  %150 = icmp ult i64 %148, %149
  br i1 %150, label %86, label %965

151:                                              ; preds = %81
  %152 = load i64, i64* %16, align 8
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %965, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %279, %154 ], [ 0, %151 ]
  %156 = getelementptr inbounds float, float* %58, i64 %155
  %157 = bitcast float* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 32, !alias.scope !1087, !noalias !1090
  %159 = getelementptr inbounds float, float* %68, i64 %155
  %160 = bitcast float* %159 to <8 x float>*
  %161 = load <8 x float>, <8 x float>* %160, align 32, !alias.scope !1092, !noalias !1095
  %162 = getelementptr inbounds float, float* %78, i64 %155
  %163 = bitcast float* %162 to <8 x float>*
  %164 = load <8 x float>, <8 x float>* %163, align 32, !alias.scope !1097, !noalias !1100
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1102
  %165 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1103, !noalias !1106
  %166 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> zeroinitializer
  %167 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = shufflevector <4 x float> %165, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %169 = fadd <8 x float> %158, %161
  %170 = fsub <8 x float> %161, %158
  %171 = load float, float* %20, align 4, !noalias !1112
  %172 = insertelement <8 x float> undef, float %171, i32 0
  %173 = shufflevector <8 x float> %172, <8 x float> undef, <8 x i32> zeroinitializer
  %174 = fsub <8 x float> %169, %173
  %175 = load float, float* %21, align 4, !noalias !1112
  %176 = insertelement <8 x float> undef, float %175, i32 0
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> zeroinitializer
  %178 = fsub <8 x float> %170, %177
  %179 = load float, float* %22, align 4, !noalias !1112
  %180 = insertelement <8 x float> undef, float %179, i32 0
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> zeroinitializer
  %182 = fsub <8 x float> %164, %181
  %183 = fmul <8 x float> %174, %174
  %184 = fmul <8 x float> %178, %178
  %185 = fmul <8 x float> %182, %182
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %183, <8 x float> %174, <8 x float> %166) #12
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %178, <8 x float> %167) #12
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %185, <8 x float> %182, <8 x float> %168) #12
  %189 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1113, !noalias !1116
  %190 = shufflevector <4 x float> %189, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %191 = fmul <8 x float> %190, %186
  %192 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1118, !noalias !1121
  %193 = shufflevector <4 x float> %192, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %194 = fmul <8 x float> %186, %193
  %195 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1123, !noalias !1126
  %196 = shufflevector <4 x float> %195, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %197 = fmul <8 x float> %186, %196
  %198 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1128, !noalias !1131
  %199 = shufflevector <4 x float> %198, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %200 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %199, <8 x float> %187, <8 x float> %191) #12
  %201 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1133, !noalias !1136
  %202 = shufflevector <4 x float> %201, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %202, <8 x float> %187, <8 x float> %194) #12
  %204 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1138, !noalias !1141
  %205 = shufflevector <4 x float> %204, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %187, <8 x float> %197) #12
  %207 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1143, !noalias !1146
  %208 = shufflevector <4 x float> %207, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %208, <8 x float> %188, <8 x float> %200) #12
  %210 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1148, !noalias !1151
  %211 = shufflevector <4 x float> %210, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %212 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %211, <8 x float> %188, <8 x float> %203) #12
  %213 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1153, !noalias !1156
  %214 = shufflevector <4 x float> %213, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %215 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %214, <8 x float> %188, <8 x float> %206) #12
  %216 = bitcast <8 x float> %209 to <8 x i32>
  %217 = and <8 x i32> %216, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %218 = and <8 x i32> %216, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %219 = bitcast <8 x i32> %218 to <8 x float>
  %220 = fmul <8 x float> %219, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %221 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %219) #12
  fence acq_rel
  %222 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %221, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %223 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %221, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %224 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %222, <8 x float> %221, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %225 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %223, <8 x float> %221, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %226 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %224, <8 x float> %221, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %227 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %225, <8 x float> %221, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %228 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %226, <8 x float> %221, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %229 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %227, <8 x float> %221, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %230 = fdiv <8 x float> %228, %229
  %231 = fcmp ogt <8 x float> %219, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %232 = select <8 x i1> %231, <8 x float> %230, <8 x float> %220
  %233 = bitcast <8 x float> %232 to <8 x i32>
  %234 = and <8 x i32> %233, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %235 = or <8 x i32> %234, %217
  %236 = bitcast float* %156 to <8 x i32>*
  store <8 x i32> %235, <8 x i32>* %236, align 32, !alias.scope !1158
  %237 = bitcast <8 x float> %212 to <8 x i32>
  %238 = and <8 x i32> %237, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %239 = and <8 x i32> %237, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %240 = bitcast <8 x i32> %239 to <8 x float>
  %241 = fmul <8 x float> %240, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %242 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %240) #12
  fence acq_rel
  %243 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %244 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %242, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %245 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %243, <8 x float> %242, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %246 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %244, <8 x float> %242, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %247 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %245, <8 x float> %242, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %248 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %246, <8 x float> %242, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %249 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %247, <8 x float> %242, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %250 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %248, <8 x float> %242, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %251 = fdiv <8 x float> %249, %250
  %252 = fcmp ogt <8 x float> %240, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %253 = select <8 x i1> %252, <8 x float> %251, <8 x float> %241
  %254 = bitcast <8 x float> %253 to <8 x i32>
  %255 = and <8 x i32> %254, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %256 = or <8 x i32> %255, %238
  %257 = bitcast float* %159 to <8 x i32>*
  store <8 x i32> %256, <8 x i32>* %257, align 32, !alias.scope !1161
  %258 = bitcast <8 x float> %215 to <8 x i32>
  %259 = and <8 x i32> %258, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %260 = and <8 x i32> %258, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %261 = bitcast <8 x i32> %260 to <8 x float>
  %262 = fmul <8 x float> %261, <float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000, float 0x4029D70A40000000>
  %263 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %261) #12
  fence acq_rel
  %264 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> <float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000, float 0x3FE7874640000000>, <8 x float> <float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000, float 0x3FF7965840000000>) #12
  %265 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %263, <8 x float> <float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000, float 0x3F98D4A540000000>, <8 x float> <float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000, float 0x3FEDA08C60000000>) #12
  fence acq_rel
  %266 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %264, <8 x float> %263, <8 x float> <float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000, float 0x3FD8FC0E60000000>) #12
  %267 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %265, <8 x float> %263, <8 x float> <float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000, float 0x3FF573FC80000000>) #12
  fence acq_rel
  %268 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %266, <8 x float> %263, <8 x float> <float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000, float 0x3F75A816A0000000>) #12
  %269 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %267, <8 x float> %263, <8 x float> <float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000, float 0x3FD36F4A00000000>) #12
  fence acq_rel
  %270 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %268, <8 x float> %263, <8 x float> <float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000, float 0xBF40D3ADA0000000>) #12
  %271 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %269, <8 x float> %263, <8 x float> <float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000, float 0x3F84929360000000>) #12
  fence acq_rel
  %272 = fdiv <8 x float> %270, %271
  %273 = fcmp ogt <8 x float> %261, <float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000, float 0x3F69A5C380000000>
  %274 = select <8 x i1> %273, <8 x float> %272, <8 x float> %262
  %275 = bitcast <8 x float> %274 to <8 x i32>
  %276 = and <8 x i32> %275, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %277 = or <8 x i32> %276, %259
  %278 = bitcast float* %162 to <8 x i32>*
  store <8 x i32> %277, <8 x i32>* %278, align 32, !alias.scope !1164
  %279 = add i64 %155, 8
  %280 = load i64, i64* %16, align 8
  %281 = icmp ult i64 %279, %280
  br i1 %281, label %154, label %965

282:                                              ; preds = %81
  %283 = load i64, i64* %16, align 8
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %965, label %285

285:                                              ; preds = %282, %285
  %286 = phi i64 [ %437, %285 ], [ 0, %282 ]
  %287 = getelementptr inbounds float, float* %58, i64 %286
  %288 = bitcast float* %287 to <8 x float>*
  %289 = load <8 x float>, <8 x float>* %288, align 32, !alias.scope !1167, !noalias !1170
  %290 = getelementptr inbounds float, float* %68, i64 %286
  %291 = bitcast float* %290 to <8 x float>*
  %292 = load <8 x float>, <8 x float>* %291, align 32, !alias.scope !1172, !noalias !1175
  %293 = getelementptr inbounds float, float* %78, i64 %286
  %294 = bitcast float* %293 to <8 x float>*
  %295 = load <8 x float>, <8 x float>* %294, align 32, !alias.scope !1177, !noalias !1180
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1182
  %296 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1183, !noalias !1186
  %297 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> zeroinitializer
  %298 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %299 = shufflevector <4 x float> %296, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %300 = fadd <8 x float> %289, %292
  %301 = fsub <8 x float> %292, %289
  %302 = load float, float* %20, align 4, !noalias !1192
  %303 = insertelement <8 x float> undef, float %302, i32 0
  %304 = shufflevector <8 x float> %303, <8 x float> undef, <8 x i32> zeroinitializer
  %305 = fsub <8 x float> %300, %304
  %306 = load float, float* %21, align 4, !noalias !1192
  %307 = insertelement <8 x float> undef, float %306, i32 0
  %308 = shufflevector <8 x float> %307, <8 x float> undef, <8 x i32> zeroinitializer
  %309 = fsub <8 x float> %301, %308
  %310 = load float, float* %22, align 4, !noalias !1192
  %311 = insertelement <8 x float> undef, float %310, i32 0
  %312 = shufflevector <8 x float> %311, <8 x float> undef, <8 x i32> zeroinitializer
  %313 = fsub <8 x float> %295, %312
  %314 = fmul <8 x float> %305, %305
  %315 = fmul <8 x float> %309, %309
  %316 = fmul <8 x float> %313, %313
  %317 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %314, <8 x float> %305, <8 x float> %297) #12
  %318 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %315, <8 x float> %309, <8 x float> %298) #12
  %319 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %316, <8 x float> %313, <8 x float> %299) #12
  %320 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1193, !noalias !1196
  %321 = shufflevector <4 x float> %320, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %322 = fmul <8 x float> %321, %317
  %323 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1198, !noalias !1201
  %324 = shufflevector <4 x float> %323, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %325 = fmul <8 x float> %317, %324
  %326 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1203, !noalias !1206
  %327 = shufflevector <4 x float> %326, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %328 = fmul <8 x float> %317, %327
  %329 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1208, !noalias !1211
  %330 = shufflevector <4 x float> %329, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %331 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %330, <8 x float> %318, <8 x float> %322) #12
  %332 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1213, !noalias !1216
  %333 = shufflevector <4 x float> %332, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %334 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %333, <8 x float> %318, <8 x float> %325) #12
  %335 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1218, !noalias !1221
  %336 = shufflevector <4 x float> %335, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %337 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %336, <8 x float> %318, <8 x float> %328) #12
  %338 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1223, !noalias !1226
  %339 = shufflevector <4 x float> %338, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %340 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %339, <8 x float> %319, <8 x float> %331) #12
  %341 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1228, !noalias !1231
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %343 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %342, <8 x float> %319, <8 x float> %334) #12
  %344 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1233, !noalias !1236
  %345 = shufflevector <4 x float> %344, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %346 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %345, <8 x float> %319, <8 x float> %337) #12
  %347 = bitcast <8 x float> %340 to <8 x i32>
  %348 = and <8 x i32> %347, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %349 = and <8 x i32> %347, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %350 = bitcast <8 x i32> %349 to <8 x float>
  %351 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %350) #12
  %352 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %351) #12
  %353 = fcmp olt <8 x float> %350, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %354 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %355 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %356 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %354, <8 x float> %352, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %357 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %355, <8 x float> %352, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %358 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %356, <8 x float> %352, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %359 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %357, <8 x float> %352, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %360 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %358, <8 x float> %352, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %361 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %359, <8 x float> %352, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %362 = fdiv <8 x float> %360, %361
  fence acq_rel
  %363 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %364 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %352, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %365 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %363, <8 x float> %352, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %366 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %364, <8 x float> %352, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %367 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %365, <8 x float> %352, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %368 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %366, <8 x float> %352, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %369 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %367, <8 x float> %352, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %370 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %368, <8 x float> %352, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %371 = fdiv <8 x float> %369, %370
  %372 = select <8 x i1> %353, <8 x float> %362, <8 x float> %371
  %373 = bitcast <8 x float> %372 to <8 x i32>
  %374 = and <8 x i32> %373, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %375 = or <8 x i32> %374, %348
  %376 = bitcast float* %287 to <8 x i32>*
  store <8 x i32> %375, <8 x i32>* %376, align 32, !alias.scope !1238
  %377 = bitcast <8 x float> %343 to <8 x i32>
  %378 = and <8 x i32> %377, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %379 = and <8 x i32> %377, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %380 = bitcast <8 x i32> %379 to <8 x float>
  %381 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %380) #12
  %382 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %381) #12
  %383 = fcmp olt <8 x float> %380, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %384 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %385 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %386 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %384, <8 x float> %382, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %387 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %385, <8 x float> %382, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %388 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %386, <8 x float> %382, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %389 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> %382, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %390 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %382, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %391 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %382, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %392 = fdiv <8 x float> %390, %391
  fence acq_rel
  %393 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %394 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %382, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %395 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %393, <8 x float> %382, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %396 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %394, <8 x float> %382, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %397 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %395, <8 x float> %382, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %398 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %396, <8 x float> %382, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %399 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %397, <8 x float> %382, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %400 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %398, <8 x float> %382, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %401 = fdiv <8 x float> %399, %400
  %402 = select <8 x i1> %383, <8 x float> %392, <8 x float> %401
  %403 = bitcast <8 x float> %402 to <8 x i32>
  %404 = and <8 x i32> %403, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %405 = or <8 x i32> %404, %378
  %406 = bitcast float* %290 to <8 x i32>*
  store <8 x i32> %405, <8 x i32>* %406, align 32, !alias.scope !1241
  %407 = bitcast <8 x float> %346 to <8 x i32>
  %408 = and <8 x i32> %407, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %409 = and <8 x i32> %407, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %410 = bitcast <8 x i32> %409 to <8 x float>
  %411 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %410) #12
  %412 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %411) #12
  %413 = fcmp olt <8 x float> %410, <float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000, float 0x3F1A36E2E0000000>
  fence acq_rel
  %414 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000, float 0xC1117C49A0000000>, <8 x float> <float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000, float 0x40F0D229E0000000>) #12
  %415 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000, float 0xC1094CB4C0000000>, <8 x float> <float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000, float 0xC0E56F5AE0000000>) #12
  fence acq_rel
  %416 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %414, <8 x float> %412, <8 x float> <float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000, float 0x4060E90700000000>) #12
  %417 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %415, <8 x float> %412, <8 x float> <float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000, float 0x40CF6A6280000000>) #12
  fence acq_rel
  %418 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %416, <8 x float> %412, <8 x float> <float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000, float 0x3FD8D70380000000>) #12
  %419 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %417, <8 x float> %412, <8 x float> <float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000, float 0x409716E040000000>) #12
  fence acq_rel
  %420 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %418, <8 x float> %412, <8 x float> <float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000, float 0x3EE4AF6040000000>) #12
  %421 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %419, <8 x float> %412, <8 x float> <float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000, float 0x4040DBFDC0000000>) #12
  fence acq_rel
  %422 = fdiv <8 x float> %420, %421
  fence acq_rel
  %423 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000, float 0x4048313200000000>, <8 x float> <float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000, float 0x4062A80D20000000>) #12
  %424 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> <float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000, float 0x4039E77860000000>, <8 x float> <float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000, float 0x405C03E280000000>) #12
  fence acq_rel
  %425 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %423, <8 x float> %412, <8 x float> <float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000, float 0x404B9D2740000000>) #12
  %426 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %424, <8 x float> %412, <8 x float> <float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000, float 0x405728C640000000>) #12
  fence acq_rel
  %427 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %425, <8 x float> %412, <8 x float> <float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000, float 0xBFF1884E80000000>) #12
  %428 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %426, <8 x float> %412, <8 x float> <float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000, float 0x40342AC5C0000000>) #12
  fence acq_rel
  %429 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %427, <8 x float> %412, <8 x float> <float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000, float 0x3F8BAD2FA0000000>) #12
  %430 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %428, <8 x float> %412, <8 x float> <float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000, float 0x3FF032DB20000000>) #12
  fence acq_rel
  %431 = fdiv <8 x float> %429, %430
  %432 = select <8 x i1> %413, <8 x float> %422, <8 x float> %431
  %433 = bitcast <8 x float> %432 to <8 x i32>
  %434 = and <8 x i32> %433, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %435 = or <8 x i32> %434, %408
  %436 = bitcast float* %293 to <8 x i32>*
  store <8 x i32> %435, <8 x i32>* %436, align 32, !alias.scope !1244
  %437 = add i64 %286, 8
  %438 = load i64, i64* %16, align 8
  %439 = icmp ult i64 %437, %438
  br i1 %439, label %285, label %965

440:                                              ; preds = %81
  %441 = load i64, i64* %16, align 8
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %965, label %443

443:                                              ; preds = %440, %443
  %444 = phi i64 [ %592, %443 ], [ 0, %440 ]
  %445 = getelementptr inbounds float, float* %58, i64 %444
  %446 = bitcast float* %445 to <8 x float>*
  %447 = load <8 x float>, <8 x float>* %446, align 32, !alias.scope !1247, !noalias !1250
  %448 = getelementptr inbounds float, float* %68, i64 %444
  %449 = bitcast float* %448 to <8 x float>*
  %450 = load <8 x float>, <8 x float>* %449, align 32, !alias.scope !1252, !noalias !1255
  %451 = getelementptr inbounds float, float* %78, i64 %444
  %452 = bitcast float* %451 to <8 x float>*
  %453 = load <8 x float>, <8 x float>* %452, align 32, !alias.scope !1257, !noalias !1260
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1262
  %454 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1263, !noalias !1266
  %455 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> zeroinitializer
  %456 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %457 = shufflevector <4 x float> %454, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %458 = fadd <8 x float> %447, %450
  %459 = fsub <8 x float> %450, %447
  %460 = load float, float* %20, align 4, !noalias !1272
  %461 = insertelement <8 x float> undef, float %460, i32 0
  %462 = shufflevector <8 x float> %461, <8 x float> undef, <8 x i32> zeroinitializer
  %463 = fsub <8 x float> %458, %462
  %464 = load float, float* %21, align 4, !noalias !1272
  %465 = insertelement <8 x float> undef, float %464, i32 0
  %466 = shufflevector <8 x float> %465, <8 x float> undef, <8 x i32> zeroinitializer
  %467 = fsub <8 x float> %459, %466
  %468 = load float, float* %22, align 4, !noalias !1272
  %469 = insertelement <8 x float> undef, float %468, i32 0
  %470 = shufflevector <8 x float> %469, <8 x float> undef, <8 x i32> zeroinitializer
  %471 = fsub <8 x float> %453, %470
  %472 = fmul <8 x float> %463, %463
  %473 = fmul <8 x float> %467, %467
  %474 = fmul <8 x float> %471, %471
  %475 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %472, <8 x float> %463, <8 x float> %455) #12
  %476 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %473, <8 x float> %467, <8 x float> %456) #12
  %477 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %474, <8 x float> %471, <8 x float> %457) #12
  %478 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1273, !noalias !1276
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %480 = fmul <8 x float> %479, %475
  %481 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1278, !noalias !1281
  %482 = shufflevector <4 x float> %481, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %483 = fmul <8 x float> %475, %482
  %484 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1283, !noalias !1286
  %485 = shufflevector <4 x float> %484, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %486 = fmul <8 x float> %475, %485
  %487 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1288, !noalias !1291
  %488 = shufflevector <4 x float> %487, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %489 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %488, <8 x float> %476, <8 x float> %480) #12
  %490 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1293, !noalias !1296
  %491 = shufflevector <4 x float> %490, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %492 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %491, <8 x float> %476, <8 x float> %483) #12
  %493 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1298, !noalias !1301
  %494 = shufflevector <4 x float> %493, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %495 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %494, <8 x float> %476, <8 x float> %486) #12
  %496 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1303, !noalias !1306
  %497 = shufflevector <4 x float> %496, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %498 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %497, <8 x float> %477, <8 x float> %489) #12
  %499 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1308, !noalias !1311
  %500 = shufflevector <4 x float> %499, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %501 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %500, <8 x float> %477, <8 x float> %492) #12
  %502 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1313, !noalias !1316
  %503 = shufflevector <4 x float> %502, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %504 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %503, <8 x float> %477, <8 x float> %495) #12
  %505 = bitcast <8 x float> %498 to <8 x i32>
  %506 = and <8 x i32> %505, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %507 = and <8 x i32> %505, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %508 = bitcast <8 x i32> %507 to <8 x float>
  %509 = fmul <8 x float> %508, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %510 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %509) #12
  %511 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %508, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %512 = bitcast <8 x float> %511 to <8 x i32>
  %513 = add <8 x i32> %512, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %514 = ashr <8 x i32> %513, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %515 = and <8 x i32> %513, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %516 = sub <8 x i32> %512, %515
  %517 = bitcast <8 x i32> %516 to <8 x float>
  %518 = sitofp <8 x i32> %514 to <8 x float>
  %519 = fadd <8 x float> %517, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %520 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %521 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %519, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %522 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %520, <8 x float> %519, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %523 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %521, <8 x float> %519, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %524 = fdiv <8 x float> %522, %523
  %525 = fadd <8 x float> %524, %518
  %526 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %525, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %527 = fcmp ole <8 x float> %508, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %528 = select <8 x i1> %527, <8 x float> %510, <8 x float> %526
  %529 = bitcast <8 x float> %528 to <8 x i32>
  %530 = and <8 x i32> %529, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %531 = or <8 x i32> %530, %506
  %532 = bitcast <8 x i32> %531 to <8 x float>
  %533 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %532, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %533, <8 x float>* %446, align 32, !alias.scope !1318
  %534 = bitcast <8 x float> %501 to <8 x i32>
  %535 = and <8 x i32> %534, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %536 = and <8 x i32> %534, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %537 = bitcast <8 x i32> %536 to <8 x float>
  %538 = fmul <8 x float> %537, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %539 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %538) #12
  %540 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %537, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %541 = bitcast <8 x float> %540 to <8 x i32>
  %542 = add <8 x i32> %541, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %543 = ashr <8 x i32> %542, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %544 = and <8 x i32> %542, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %545 = sub <8 x i32> %541, %544
  %546 = bitcast <8 x i32> %545 to <8 x float>
  %547 = sitofp <8 x i32> %543 to <8 x float>
  %548 = fadd <8 x float> %546, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %549 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %548, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %550 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %548, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %551 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %549, <8 x float> %548, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %552 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %550, <8 x float> %548, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %553 = fdiv <8 x float> %551, %552
  %554 = fadd <8 x float> %553, %547
  %555 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %554, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %556 = fcmp ole <8 x float> %537, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %557 = select <8 x i1> %556, <8 x float> %539, <8 x float> %555
  %558 = bitcast <8 x float> %557 to <8 x i32>
  %559 = and <8 x i32> %558, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %560 = or <8 x i32> %559, %535
  %561 = bitcast <8 x i32> %560 to <8 x float>
  %562 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %561, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %562, <8 x float>* %449, align 32, !alias.scope !1321
  %563 = bitcast <8 x float> %504 to <8 x i32>
  %564 = and <8 x i32> %563, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %565 = and <8 x i32> %563, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %566 = bitcast <8 x i32> %565 to <8 x float>
  %567 = fmul <8 x float> %566, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %568 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %567) #12
  %569 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %566, <8 x float> <float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01, float 1.200000e+01>, <8 x float> <float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000, float 0xBFD2380400000000>) #12
  %570 = bitcast <8 x float> %569 to <8 x i32>
  %571 = add <8 x i32> %570, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %572 = ashr <8 x i32> %571, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %573 = and <8 x i32> %571, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %574 = sub <8 x i32> %570, %573
  %575 = bitcast <8 x i32> %574 to <8 x float>
  %576 = sitofp <8 x i32> %572 to <8 x float>
  %577 = fadd <8 x float> %575, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %578 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %577, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %579 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %577, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %580 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %578, <8 x float> %577, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %581 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %579, <8 x float> %577, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %582 = fdiv <8 x float> %580, %581
  %583 = fadd <8 x float> %582, %576
  %584 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %583, <8 x float> <float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000, float 0x3FBFBBACA0000000>, <8 x float> <float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000, float 0x3FE1EAC9E0000000>) #12
  %585 = fcmp ole <8 x float> %566, <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>
  %586 = select <8 x i1> %585, <8 x float> %568, <8 x float> %584
  %587 = bitcast <8 x float> %586 to <8 x i32>
  %588 = and <8 x i32> %587, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %589 = or <8 x i32> %588, %564
  %590 = bitcast <8 x i32> %589 to <8 x float>
  %591 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %590, <8 x float> <float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000, float 0x3FF0AAAAA0000000>, <8 x float> <float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000, float 0xBFA5555560000000>) #12
  store <8 x float> %591, <8 x float>* %452, align 32, !alias.scope !1324
  %592 = add i64 %444, 8
  %593 = load i64, i64* %16, align 8
  %594 = icmp ult i64 %592, %593
  br i1 %594, label %443, label %965

595:                                              ; preds = %81
  %596 = load i64, i64* %16, align 8
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %965, label %598

598:                                              ; preds = %595, %598
  %599 = phi i64 [ %774, %598 ], [ 0, %595 ]
  %600 = getelementptr inbounds float, float* %58, i64 %599
  %601 = bitcast float* %600 to <8 x float>*
  %602 = load <8 x float>, <8 x float>* %601, align 32, !alias.scope !1327, !noalias !1330
  %603 = getelementptr inbounds float, float* %68, i64 %599
  %604 = bitcast float* %603 to <8 x float>*
  %605 = load <8 x float>, <8 x float>* %604, align 32, !alias.scope !1332, !noalias !1335
  %606 = getelementptr inbounds float, float* %78, i64 %599
  %607 = bitcast float* %606 to <8 x float>*
  %608 = load <8 x float>, <8 x float>* %607, align 32, !alias.scope !1337, !noalias !1340
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1342
  %609 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1343, !noalias !1346
  %610 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> zeroinitializer
  %611 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %612 = shufflevector <4 x float> %609, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %613 = fadd <8 x float> %602, %605
  %614 = fsub <8 x float> %605, %602
  %615 = load float, float* %20, align 4, !noalias !1352
  %616 = insertelement <8 x float> undef, float %615, i32 0
  %617 = shufflevector <8 x float> %616, <8 x float> undef, <8 x i32> zeroinitializer
  %618 = fsub <8 x float> %613, %617
  %619 = load float, float* %21, align 4, !noalias !1352
  %620 = insertelement <8 x float> undef, float %619, i32 0
  %621 = shufflevector <8 x float> %620, <8 x float> undef, <8 x i32> zeroinitializer
  %622 = fsub <8 x float> %614, %621
  %623 = load float, float* %22, align 4, !noalias !1352
  %624 = insertelement <8 x float> undef, float %623, i32 0
  %625 = shufflevector <8 x float> %624, <8 x float> undef, <8 x i32> zeroinitializer
  %626 = fsub <8 x float> %608, %625
  %627 = fmul <8 x float> %618, %618
  %628 = fmul <8 x float> %622, %622
  %629 = fmul <8 x float> %626, %626
  %630 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %627, <8 x float> %618, <8 x float> %610) #12
  %631 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %628, <8 x float> %622, <8 x float> %611) #12
  %632 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %629, <8 x float> %626, <8 x float> %612) #12
  %633 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1353, !noalias !1356
  %634 = shufflevector <4 x float> %633, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %635 = fmul <8 x float> %634, %630
  %636 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1358, !noalias !1361
  %637 = shufflevector <4 x float> %636, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %638 = fmul <8 x float> %630, %637
  %639 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1363, !noalias !1366
  %640 = shufflevector <4 x float> %639, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %641 = fmul <8 x float> %630, %640
  %642 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1368, !noalias !1371
  %643 = shufflevector <4 x float> %642, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %644 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %643, <8 x float> %631, <8 x float> %635) #12
  %645 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1373, !noalias !1376
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %647 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %646, <8 x float> %631, <8 x float> %638) #12
  %648 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1378, !noalias !1381
  %649 = shufflevector <4 x float> %648, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %650 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %649, <8 x float> %631, <8 x float> %641) #12
  %651 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1383, !noalias !1386
  %652 = shufflevector <4 x float> %651, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %653 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %652, <8 x float> %632, <8 x float> %644) #12
  %654 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1388, !noalias !1391
  %655 = shufflevector <4 x float> %654, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %656 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %655, <8 x float> %632, <8 x float> %647) #12
  %657 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1393, !noalias !1396
  %658 = shufflevector <4 x float> %657, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %659 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %658, <8 x float> %632, <8 x float> %650) #12
  %660 = fmul <8 x float> %653, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %661 = bitcast <8 x float> %653 to <8 x i32>
  %662 = add <8 x i32> %661, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %663 = ashr <8 x i32> %662, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %664 = and <8 x i32> %662, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %665 = sub <8 x i32> %661, %664
  %666 = bitcast <8 x i32> %665 to <8 x float>
  %667 = sitofp <8 x i32> %663 to <8 x float>
  %668 = fadd <8 x float> %666, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %669 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %668, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %670 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %668, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %671 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %669, <8 x float> %668, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %672 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %670, <8 x float> %668, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %673 = fdiv <8 x float> %671, %672
  %674 = fadd <8 x float> %673, %667
  %675 = fmul <8 x float> %674, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %676 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %675, i32 9) #12
  %677 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %676) #12
  %678 = bitcast <8 x float> %676 to <8 x i32>
  %679 = xor <8 x i32> %678, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %680 = and <8 x i32> %679, %677
  %681 = ashr <8 x i32> %680, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %682 = xor <8 x i32> %681, %677
  %683 = shl <8 x i32> %682, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %684 = add <8 x i32> %683, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %685 = bitcast <8 x i32> %684 to <8 x float>
  %686 = fsub <8 x float> %675, %676
  %687 = fadd <8 x float> %686, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %688 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %687, <8 x float> %686, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %689 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %688, <8 x float> %686, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %690 = fmul <8 x float> %689, %685
  %691 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %686, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %692 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %691, <8 x float> %686, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %693 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %692, <8 x float> %686, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %694 = fdiv <8 x float> %690, %693
  %695 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %694, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %696 = fcmp ole <8 x float> %653, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %697 = select <8 x i1> %696, <8 x float> %660, <8 x float> %695
  store <8 x float> %697, <8 x float>* %601, align 32, !alias.scope !1398
  %698 = fmul <8 x float> %656, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %699 = bitcast <8 x float> %656 to <8 x i32>
  %700 = add <8 x i32> %699, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %701 = ashr <8 x i32> %700, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %702 = and <8 x i32> %700, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %703 = sub <8 x i32> %699, %702
  %704 = bitcast <8 x i32> %703 to <8 x float>
  %705 = sitofp <8 x i32> %701 to <8 x float>
  %706 = fadd <8 x float> %704, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %707 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %706, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %708 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %706, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %709 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %707, <8 x float> %706, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %710 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %708, <8 x float> %706, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %711 = fdiv <8 x float> %709, %710
  %712 = fadd <8 x float> %711, %705
  %713 = fmul <8 x float> %712, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %714 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %713, i32 9) #12
  %715 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %714) #12
  %716 = bitcast <8 x float> %714 to <8 x i32>
  %717 = xor <8 x i32> %716, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %718 = and <8 x i32> %717, %715
  %719 = ashr <8 x i32> %718, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %720 = xor <8 x i32> %719, %715
  %721 = shl <8 x i32> %720, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %722 = add <8 x i32> %721, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %723 = bitcast <8 x i32> %722 to <8 x float>
  %724 = fsub <8 x float> %713, %714
  %725 = fadd <8 x float> %724, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %726 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %725, <8 x float> %724, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %727 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %726, <8 x float> %724, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %728 = fmul <8 x float> %727, %723
  %729 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %724, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %730 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %729, <8 x float> %724, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %731 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %730, <8 x float> %724, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %732 = fdiv <8 x float> %728, %731
  %733 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %732, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %734 = fcmp ole <8 x float> %656, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %735 = select <8 x i1> %734, <8 x float> %698, <8 x float> %733
  store <8 x float> %735, <8 x float>* %604, align 32, !alias.scope !1401
  %736 = fmul <8 x float> %659, <float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00, float 4.500000e+00>
  %737 = bitcast <8 x float> %659 to <8 x i32>
  %738 = add <8 x i32> %737, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %739 = ashr <8 x i32> %738, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %740 = and <8 x i32> %738, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %741 = sub <8 x i32> %737, %740
  %742 = bitcast <8 x i32> %741 to <8 x float>
  %743 = sitofp <8 x i32> %739 to <8 x float>
  %744 = fadd <8 x float> %742, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %745 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %744, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %746 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %744, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %747 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %745, <8 x float> %744, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %748 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %746, <8 x float> %744, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %749 = fdiv <8 x float> %747, %748
  %750 = fadd <8 x float> %749, %743
  %751 = fmul <8 x float> %750, <float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000, float 0x3FDCCCCCC0000000>
  %752 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %751, i32 9) #12
  %753 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %752) #12
  %754 = bitcast <8 x float> %752 to <8 x i32>
  %755 = xor <8 x i32> %754, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %756 = and <8 x i32> %755, %753
  %757 = ashr <8 x i32> %756, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %758 = xor <8 x i32> %757, %753
  %759 = shl <8 x i32> %758, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %760 = add <8 x i32> %759, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %761 = bitcast <8 x i32> %760 to <8 x float>
  %762 = fsub <8 x float> %751, %752
  %763 = fadd <8 x float> %762, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %764 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %763, <8 x float> %762, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %765 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %764, <8 x float> %762, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %766 = fmul <8 x float> %765, %761
  %767 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %762, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %768 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %767, <8 x float> %762, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %769 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %768, <8 x float> %762, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %770 = fdiv <8 x float> %766, %769
  %771 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %770, <8 x float> <float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000, float 0x3FF1958100000000>, <8 x float> <float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000, float 0xBFB9581060000000>) #12
  %772 = fcmp ole <8 x float> %659, <float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000, float 0x3F926E9780000000>
  %773 = select <8 x i1> %772, <8 x float> %736, <8 x float> %771
  store <8 x float> %773, <8 x float>* %607, align 32, !alias.scope !1404
  %774 = add i64 %599, 8
  %775 = load i64, i64* %16, align 8
  %776 = icmp ult i64 %774, %775
  br i1 %776, label %598, label %965

777:                                              ; preds = %81, %42
  %778 = load i64, i64* %16, align 8
  %779 = icmp eq i64 %778, 0
  br i1 %779, label %965, label %780

780:                                              ; preds = %777, %780
  %781 = phi i64 [ %959, %780 ], [ 0, %777 ]
  %782 = getelementptr inbounds float, float* %58, i64 %781
  %783 = bitcast float* %782 to <8 x float>*
  %784 = load <8 x float>, <8 x float>* %783, align 32, !alias.scope !1407, !noalias !1410
  %785 = getelementptr inbounds float, float* %68, i64 %781
  %786 = bitcast float* %785 to <8 x float>*
  %787 = load <8 x float>, <8 x float>* %786, align 32, !alias.scope !1412, !noalias !1415
  %788 = getelementptr inbounds float, float* %78, i64 %781
  %789 = bitcast float* %788 to <8 x float>*
  %790 = load <8 x float>, <8 x float>* %789, align 32, !alias.scope !1417, !noalias !1420
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1422
  %791 = load <4 x float>, <4 x float>* %19, align 1, !alias.scope !1423, !noalias !1426
  %792 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> zeroinitializer
  %793 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %794 = shufflevector <4 x float> %791, <4 x float> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %795 = fadd <8 x float> %784, %787
  %796 = fsub <8 x float> %787, %784
  %797 = load float, float* %20, align 4, !noalias !1432
  %798 = insertelement <8 x float> undef, float %797, i32 0
  %799 = shufflevector <8 x float> %798, <8 x float> undef, <8 x i32> zeroinitializer
  %800 = fsub <8 x float> %795, %799
  %801 = load float, float* %21, align 4, !noalias !1432
  %802 = insertelement <8 x float> undef, float %801, i32 0
  %803 = shufflevector <8 x float> %802, <8 x float> undef, <8 x i32> zeroinitializer
  %804 = fsub <8 x float> %796, %803
  %805 = load float, float* %22, align 4, !noalias !1432
  %806 = insertelement <8 x float> undef, float %805, i32 0
  %807 = shufflevector <8 x float> %806, <8 x float> undef, <8 x i32> zeroinitializer
  %808 = fsub <8 x float> %790, %807
  %809 = fmul <8 x float> %800, %800
  %810 = fmul <8 x float> %804, %804
  %811 = fmul <8 x float> %808, %808
  %812 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %809, <8 x float> %800, <8 x float> %792) #12
  %813 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %810, <8 x float> %804, <8 x float> %793) #12
  %814 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %811, <8 x float> %808, <8 x float> %794) #12
  %815 = load <4 x float>, <4 x float>* %23, align 1, !alias.scope !1433, !noalias !1436
  %816 = shufflevector <4 x float> %815, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %817 = fmul <8 x float> %816, %812
  %818 = load <4 x float>, <4 x float>* %25, align 1, !alias.scope !1438, !noalias !1441
  %819 = shufflevector <4 x float> %818, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %820 = fmul <8 x float> %812, %819
  %821 = load <4 x float>, <4 x float>* %27, align 1, !alias.scope !1443, !noalias !1446
  %822 = shufflevector <4 x float> %821, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %823 = fmul <8 x float> %812, %822
  %824 = load <4 x float>, <4 x float>* %29, align 1, !alias.scope !1448, !noalias !1451
  %825 = shufflevector <4 x float> %824, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %826 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %825, <8 x float> %813, <8 x float> %817) #12
  %827 = load <4 x float>, <4 x float>* %31, align 1, !alias.scope !1453, !noalias !1456
  %828 = shufflevector <4 x float> %827, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %829 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %828, <8 x float> %813, <8 x float> %820) #12
  %830 = load <4 x float>, <4 x float>* %33, align 1, !alias.scope !1458, !noalias !1461
  %831 = shufflevector <4 x float> %830, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %832 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %831, <8 x float> %813, <8 x float> %823) #12
  %833 = load <4 x float>, <4 x float>* %35, align 1, !alias.scope !1463, !noalias !1466
  %834 = shufflevector <4 x float> %833, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %835 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %834, <8 x float> %814, <8 x float> %826) #12
  %836 = load <4 x float>, <4 x float>* %37, align 1, !alias.scope !1468, !noalias !1471
  %837 = shufflevector <4 x float> %836, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %838 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %837, <8 x float> %814, <8 x float> %829) #12
  %839 = load <4 x float>, <4 x float>* %39, align 1, !alias.scope !1473, !noalias !1476
  %840 = shufflevector <4 x float> %839, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %841 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %840, <8 x float> %814, <8 x float> %832) #12
  %842 = fcmp ugt <8 x float> %835, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %843 = load float, float* %40, align 8, !noalias !1478
  %844 = insertelement <8 x float> undef, float %843, i32 0
  %845 = shufflevector <8 x float> %844, <8 x float> undef, <8 x i32> zeroinitializer
  %846 = bitcast <8 x float> %835 to <8 x i32>
  %847 = add <8 x i32> %846, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %848 = ashr <8 x i32> %847, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %849 = and <8 x i32> %847, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %850 = sub <8 x i32> %846, %849
  %851 = bitcast <8 x i32> %850 to <8 x float>
  %852 = sitofp <8 x i32> %848 to <8 x float>
  %853 = fadd <8 x float> %851, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %854 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %855 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %853, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %856 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %854, <8 x float> %853, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %857 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %855, <8 x float> %853, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %858 = fdiv <8 x float> %856, %857
  %859 = fadd <8 x float> %858, %852
  %860 = fmul <8 x float> %845, %859
  %861 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %860, i32 9) #12
  %862 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %861) #12
  %863 = bitcast <8 x float> %861 to <8 x i32>
  %864 = xor <8 x i32> %863, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %865 = and <8 x i32> %864, %862
  %866 = ashr <8 x i32> %865, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %867 = xor <8 x i32> %866, %862
  %868 = shl <8 x i32> %867, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %869 = add <8 x i32> %868, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %870 = bitcast <8 x i32> %869 to <8 x float>
  %871 = fsub <8 x float> %860, %861
  %872 = fadd <8 x float> %871, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %873 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %872, <8 x float> %871, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %874 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %873, <8 x float> %871, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %875 = fmul <8 x float> %874, %870
  %876 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %871, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %877 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %876, <8 x float> %871, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %878 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %877, <8 x float> %871, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %879 = fdiv <8 x float> %875, %878
  %880 = select <8 x i1> %842, <8 x float> %879, <8 x float> zeroinitializer
  store <8 x float> %880, <8 x float>* %783, align 32, !alias.scope !1481
  %881 = fcmp ugt <8 x float> %838, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %882 = load float, float* %40, align 8, !noalias !1484
  %883 = insertelement <8 x float> undef, float %882, i32 0
  %884 = shufflevector <8 x float> %883, <8 x float> undef, <8 x i32> zeroinitializer
  %885 = bitcast <8 x float> %838 to <8 x i32>
  %886 = add <8 x i32> %885, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %887 = ashr <8 x i32> %886, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %888 = and <8 x i32> %886, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %889 = sub <8 x i32> %885, %888
  %890 = bitcast <8 x i32> %889 to <8 x float>
  %891 = sitofp <8 x i32> %887 to <8 x float>
  %892 = fadd <8 x float> %890, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %893 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %892, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %894 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %892, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %895 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %893, <8 x float> %892, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %896 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %894, <8 x float> %892, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %897 = fdiv <8 x float> %895, %896
  %898 = fadd <8 x float> %897, %891
  %899 = fmul <8 x float> %884, %898
  %900 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %899, i32 9) #12
  %901 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %900) #12
  %902 = bitcast <8 x float> %900 to <8 x i32>
  %903 = xor <8 x i32> %902, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %904 = and <8 x i32> %903, %901
  %905 = ashr <8 x i32> %904, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %906 = xor <8 x i32> %905, %901
  %907 = shl <8 x i32> %906, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %908 = add <8 x i32> %907, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %909 = bitcast <8 x i32> %908 to <8 x float>
  %910 = fsub <8 x float> %899, %900
  %911 = fadd <8 x float> %910, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %912 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %911, <8 x float> %910, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %913 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %912, <8 x float> %910, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %914 = fmul <8 x float> %913, %909
  %915 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %910, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %916 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %915, <8 x float> %910, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %917 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %916, <8 x float> %910, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %918 = fdiv <8 x float> %914, %917
  %919 = select <8 x i1> %881, <8 x float> %918, <8 x float> zeroinitializer
  store <8 x float> %919, <8 x float>* %786, align 32, !alias.scope !1487
  %920 = fcmp ugt <8 x float> %841, <float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000, float 0x3EE4F8B580000000>
  %921 = load float, float* %40, align 8, !noalias !1490
  %922 = insertelement <8 x float> undef, float %921, i32 0
  %923 = shufflevector <8 x float> %922, <8 x float> undef, <8 x i32> zeroinitializer
  %924 = bitcast <8 x float> %841 to <8 x i32>
  %925 = add <8 x i32> %924, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %926 = ashr <8 x i32> %925, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %927 = and <8 x i32> %925, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %928 = sub <8 x i32> %924, %927
  %929 = bitcast <8 x i32> %928 to <8 x float>
  %930 = sitofp <8 x i32> %926 to <8 x float>
  %931 = fadd <8 x float> %929, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %932 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %931, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #12
  %933 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %931, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #12
  fence acq_rel
  %934 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %932, <8 x float> %931, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #12
  %935 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %933, <8 x float> %931, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #12
  fence acq_rel
  %936 = fdiv <8 x float> %934, %935
  %937 = fadd <8 x float> %936, %930
  %938 = fmul <8 x float> %937, %923
  %939 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %938, i32 9) #12
  %940 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %939) #12
  %941 = bitcast <8 x float> %939 to <8 x i32>
  %942 = xor <8 x i32> %941, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %943 = and <8 x i32> %942, %940
  %944 = ashr <8 x i32> %943, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %945 = xor <8 x i32> %944, %940
  %946 = shl <8 x i32> %945, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %947 = add <8 x i32> %946, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %948 = bitcast <8 x i32> %947 to <8 x float>
  %949 = fsub <8 x float> %938, %939
  %950 = fadd <8 x float> %949, <float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000, float 0x4024598D60000000>
  %951 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %950, <8 x float> %949, <8 x float> <float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000, float 0x40486F3420000000>) #12
  %952 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %951, <8 x float> %949, <8 x float> <float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000, float 0x4058A33E00000000>) #12
  %953 = fmul <8 x float> %952, %948
  %954 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %949, <8 x float> <float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000, float 0x3FCAE93DC0000000>, <8 x float> <float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000, float 0xBF96C437C0000000>) #12
  %955 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %954, <8 x float> %949, <8 x float> <float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000, float 0xC033710620000000>) #12
  %956 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %955, <8 x float> %949, <8 x float> <float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000, float 0x4058A33E20000000>) #12
  %957 = fdiv <8 x float> %953, %956
  %958 = select <8 x i1> %920, <8 x float> %957, <8 x float> zeroinitializer
  store <8 x float> %958, <8 x float>* %789, align 32, !alias.scope !1493
  %959 = add i64 %781, 8
  %960 = load i64, i64* %16, align 8
  %961 = icmp ult i64 %959, %960
  br i1 %961, label %780, label %965

962:                                              ; preds = %81
  %963 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 173) #12
  %964 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

965:                                              ; preds = %780, %598, %443, %285, %154, %86, %83, %151, %282, %440, %595, %777
  %966 = add nuw i64 %43, 1
  %967 = load i64, i64* %4, align 8
  %968 = icmp ult i64 %966, %967
  br i1 %968, label %42, label %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX312FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i1 zeroext, %"class.jxl::Plane"* readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i8* noalias nocapture, i64) #7 {
  %9 = alloca [16 x i8], align 64
  %10 = select i1 %2, i64 4, i64 3
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %20 to i64
  %22 = and i64 %21, 63
  %23 = icmp eq i64 %22, 0
  tail call void @llvm.assume(i1 %23) #12
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #12
  %36 = icmp eq %"class.jxl::Plane"* %3, null
  %37 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %41 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = mul i64 %46, %10
  %48 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %52 = bitcast [16 x i8]* %9 to i32*
  %53 = shl nuw nsw i64 %10, 1
  %54 = mul nuw nsw i64 %10, 3
  %55 = add nuw nsw i64 %10, 1
  %56 = or i64 %53, 1
  %57 = add nuw nsw i64 %54, 1
  %58 = add nuw nsw i64 %10, 2
  %59 = add nuw nsw i64 %53, 2
  %60 = add nuw nsw i64 %54, 2
  %61 = add i64 %49, -2
  %62 = add i64 %49, -3
  %63 = add nuw nsw i64 %10, 1
  %64 = add nuw nsw i64 %10, 2
  br label %66

65:                                               ; preds = %107, %8
  ret void

66:                                               ; preds = %14, %107
  %67 = phi i64 [ 0, %14 ], [ %108, %107 ]
  %68 = add i64 %16, %67
  %69 = mul i64 %18, %68
  %70 = getelementptr inbounds i8, i8* %20, i64 %69
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #12
  %74 = bitcast i8* %70 to float*
  %75 = getelementptr inbounds float, float* %74, i64 %25
  %76 = getelementptr inbounds i8, i8* %27, i64 %69
  %77 = ptrtoint i8* %76 to i64
  %78 = and i64 %77, 63
  %79 = icmp eq i64 %78, 0
  tail call void @llvm.assume(i1 %79) #12
  %80 = bitcast i8* %76 to float*
  %81 = getelementptr inbounds float, float* %80, i64 %25
  %82 = getelementptr inbounds i8, i8* %32, i64 %69
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #12
  %86 = bitcast i8* %82 to float*
  %87 = getelementptr inbounds float, float* %86, i64 %25
  br i1 %36, label %99, label %88

88:                                               ; preds = %66
  %89 = add i64 %38, %67
  %90 = load i8*, i8** %39, align 8
  %91 = load i64, i64* %40, align 8
  %92 = mul i64 %91, %89
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #12
  %97 = bitcast i8* %93 to float*
  %98 = getelementptr inbounds float, float* %97, i64 %42
  br label %99

99:                                               ; preds = %66, %88
  %100 = phi float* [ %98, %88 ], [ null, %66 ]
  br i1 %50, label %107, label %101

101:                                              ; preds = %99
  %102 = add i64 %44, %67
  %103 = mul i64 %102, %7
  %104 = add i64 %103, %47
  %105 = icmp eq float* %100, null
  %106 = getelementptr inbounds i8, i8* %6, i64 %104
  br label %110

107:                                              ; preds = %482, %99
  %108 = add nuw i64 %67, 1
  %109 = icmp ult i64 %108, %12
  br i1 %109, label %66, label %65

110:                                              ; preds = %101, %482
  %111 = phi i64 [ 0, %101 ], [ %485, %482 ]
  %112 = phi i64 [ 0, %101 ], [ %483, %482 ]
  %113 = mul i64 %111, -4
  %114 = add i64 %61, %113
  %115 = add i64 %62, %113
  %116 = mul i64 %111, -4
  %117 = add i64 %61, %116
  %118 = add i64 %62, %116
  %119 = mul i64 %111, -4
  %120 = add i64 %61, %119
  %121 = add i64 %62, %119
  %122 = mul i64 %111, -4
  %123 = add i64 %61, %122
  %124 = add i64 %62, %122
  %125 = getelementptr inbounds float, float* %75, i64 %112
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 16, !alias.scope !1496
  %128 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %127, <4 x float> zeroinitializer) #12
  %129 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %128, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %130 = fmul <4 x float> %129, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %131 = getelementptr inbounds float, float* %81, i64 %112
  %132 = bitcast float* %131 to <4 x float>*
  %133 = load <4 x float>, <4 x float>* %132, align 16, !alias.scope !1499
  %134 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %133, <4 x float> zeroinitializer) #12
  %135 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %134, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %136 = fmul <4 x float> %135, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %137 = getelementptr inbounds float, float* %87, i64 %112
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16, !alias.scope !1502
  %140 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %139, <4 x float> zeroinitializer) #12
  %141 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %140, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %142 = fmul <4 x float> %141, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br i1 %105, label %150, label %143

143:                                              ; preds = %110
  %144 = getelementptr inbounds float, float* %100, i64 %112
  %145 = bitcast float* %144 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 16, !alias.scope !1505
  %147 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %146, <4 x float> zeroinitializer) #12
  %148 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %147, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %149 = fmul <4 x float> %148, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  br label %150

150:                                              ; preds = %110, %143
  %151 = phi <4 x float> [ %149, %143 ], [ <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, %110 ]
  %152 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %130) #12
  %153 = bitcast <4 x float> %130 to <4 x i32>
  %154 = xor <4 x i32> %153, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %155 = and <4 x i32> %152, %154
  %156 = ashr <4 x i32> %155, <i32 31, i32 31, i32 31, i32 31>
  %157 = xor <4 x i32> %156, %152
  %158 = bitcast <4 x i32> %157 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %136) #12
  %161 = bitcast <4 x float> %136 to <4 x i32>
  %162 = xor <4 x i32> %161, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %163 = and <4 x i32> %160, %162
  %164 = ashr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, %160
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %168 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %142) #12
  %169 = bitcast <4 x float> %142 to <4 x i32>
  %170 = xor <4 x i32> %169, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %171 = and <4 x i32> %168, %170
  %172 = ashr <4 x i32> %171, <i32 31, i32 31, i32 31, i32 31>
  %173 = xor <4 x i32> %172, %168
  %174 = bitcast <4 x i32> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %176 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %151) #12
  %177 = bitcast <4 x float> %151 to <4 x i32>
  %178 = xor <4 x i32> %177, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %179 = and <4 x i32> %176, %178
  %180 = ashr <4 x i32> %179, <i32 31, i32 31, i32 31, i32 31>
  %181 = xor <4 x i32> %180, %176
  %182 = bitcast <4 x i32> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12, i32 0, i32 4, i32 8, i32 12>
  %184 = sub i64 %49, %112
  %185 = icmp ult i64 %184, 4
  %186 = mul i64 %112, %10
  %187 = getelementptr inbounds i8, i8* %106, i64 %186
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #12
  %188 = bitcast <16 x i8> %159 to <4 x i32>
  %189 = extractelement <4 x i32> %188, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %51, i8 -86, i64 16, i1 false) #12
  store i32 %189, i32* %52, align 64
  %190 = lshr i32 %189, 8
  %191 = trunc i32 %190 to i8
  br i1 %185, label %241, label %192, !prof !459

192:                                              ; preds = %150
  %193 = lshr i32 %189, 24
  %194 = trunc i32 %193 to i8
  %195 = lshr i32 %189, 16
  %196 = trunc i32 %195 to i8
  %197 = trunc i32 %189 to i8
  store i8 %197, i8* %187, align 1
  %198 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %187, i64 %53
  store i8 %196, i8* %199, align 1
  %200 = getelementptr inbounds i8, i8* %187, i64 %54
  store i8 %194, i8* %200, align 1
  %201 = bitcast <16 x i8> %167 to <4 x i32>
  %202 = extractelement <4 x i32> %201, i32 0
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %203, i8* %204, align 1
  %205 = lshr i32 %202, 8
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %187, i64 %55
  store i8 %206, i8* %207, align 1
  %208 = lshr i32 %202, 16
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %187, i64 %56
  store i8 %209, i8* %210, align 1
  %211 = lshr i32 %202, 24
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds i8, i8* %187, i64 %57
  store i8 %212, i8* %213, align 1
  %214 = bitcast <16 x i8> %175 to <4 x i32>
  %215 = extractelement <4 x i32> %214, i32 0
  store i32 %215, i32* %52, align 64, !alias.scope !1508
  %216 = trunc i32 %215 to i8
  %217 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %216, i8* %217, align 1
  %218 = lshr i32 %215, 8
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds i8, i8* %187, i64 %58
  store i8 %219, i8* %220, align 1
  %221 = lshr i32 %215, 16
  %222 = trunc i32 %221 to i8
  %223 = getelementptr inbounds i8, i8* %187, i64 %59
  store i8 %222, i8* %223, align 1
  %224 = lshr i32 %215, 24
  %225 = trunc i32 %224 to i8
  %226 = getelementptr inbounds i8, i8* %187, i64 %60
  store i8 %225, i8* %226, align 1
  br i1 %2, label %227, label %482

227:                                              ; preds = %192
  %228 = bitcast <16 x i8> %183 to <4 x i32>
  %229 = extractelement <4 x i32> %228, i32 0
  store i32 %229, i32* %52, align 64, !alias.scope !1511
  %230 = trunc i32 %229 to i8
  %231 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %230, i8* %231, align 1
  %232 = lshr i32 %229, 8
  %233 = trunc i32 %232 to i8
  %234 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %233, i8* %234, align 1
  %235 = lshr i32 %229, 16
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds i8, i8* %187, i64 11
  store i8 %236, i8* %237, align 1
  %238 = lshr i32 %229, 24
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds i8, i8* %187, i64 15
  store i8 %239, i8* %240, align 1
  br label %482

241:                                              ; preds = %150
  %242 = icmp eq i64 %184, 0
  br i1 %242, label %312, label %243

243:                                              ; preds = %241
  %244 = trunc i32 %189 to i8
  store i8 %244, i8* %187, align 1
  %245 = icmp eq i64 %184, 1
  br i1 %245, label %254, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds i8, i8* %187, i64 %10
  store i8 %191, i8* %247, align 1
  %248 = icmp eq i64 %184, 2
  br i1 %248, label %272, label %249

249:                                              ; preds = %246
  %250 = and i64 %123, 3
  %251 = icmp ult i64 %124, 3
  br i1 %251, label %259, label %252

252:                                              ; preds = %249
  %253 = sub i64 %123, %250
  br label %287

254:                                              ; preds = %243
  %255 = bitcast <16 x i8> %167 to <4 x i32>
  %256 = extractelement <4 x i32> %255, i32 0
  store i32 %256, i32* %52, align 64, !alias.scope !1514
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %257, i8* %258, align 1
  br label %315

259:                                              ; preds = %287, %249
  %260 = phi i64 [ 2, %249 ], [ %309, %287 ]
  %261 = icmp eq i64 %250, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %269, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %270, %262 ], [ %250, %259 ]
  %265 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %263
  %266 = load i8, i8* %265, align 1
  %267 = mul i64 %263, %10
  %268 = getelementptr inbounds i8, i8* %187, i64 %267
  store i8 %266, i8* %268, align 1
  %269 = add nuw i64 %263, 1
  %270 = add i64 %264, -1
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %262, !llvm.loop !1517

272:                                              ; preds = %259, %262, %246
  %273 = bitcast <16 x i8> %167 to <4 x i32>
  %274 = extractelement <4 x i32> %273, i32 0
  store i32 %274, i32* %52, align 64, !alias.scope !1514
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds i8, i8* %187, i64 1
  store i8 %275, i8* %276, align 1
  br i1 %245, label %315, label %277

277:                                              ; preds = %272
  %278 = lshr i32 %274, 8
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds i8, i8* %187, i64 %63
  store i8 %279, i8* %280, align 1
  %281 = icmp eq i64 %184, 2
  br i1 %281, label %334, label %282

282:                                              ; preds = %277
  %283 = and i64 %120, 3
  %284 = icmp ult i64 %121, 3
  br i1 %284, label %320, label %285

285:                                              ; preds = %282
  %286 = sub i64 %120, %283
  br label %349

287:                                              ; preds = %287, %252
  %288 = phi i64 [ 2, %252 ], [ %309, %287 ]
  %289 = phi i64 [ %253, %252 ], [ %310, %287 ]
  %290 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %288
  %291 = load i8, i8* %290, align 2
  %292 = mul i64 %288, %10
  %293 = getelementptr inbounds i8, i8* %187, i64 %292
  store i8 %291, i8* %293, align 1
  %294 = or i64 %288, 1
  %295 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = mul i64 %294, %10
  %298 = getelementptr inbounds i8, i8* %187, i64 %297
  store i8 %296, i8* %298, align 1
  %299 = add nuw i64 %288, 2
  %300 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %299
  %301 = load i8, i8* %300, align 2
  %302 = mul i64 %299, %10
  %303 = getelementptr inbounds i8, i8* %187, i64 %302
  store i8 %301, i8* %303, align 1
  %304 = add nuw i64 %288, 3
  %305 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = mul i64 %304, %10
  %308 = getelementptr inbounds i8, i8* %187, i64 %307
  store i8 %306, i8* %308, align 1
  %309 = add nuw i64 %288, 4
  %310 = add i64 %289, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %259, label %287, !llvm.loop !1518

312:                                              ; preds = %241
  %313 = bitcast <16 x i8> %175 to <4 x i32>
  %314 = extractelement <4 x i32> %313, i32 0
  store i32 %314, i32* %52, align 64, !alias.scope !1519
  br label %392

315:                                              ; preds = %254, %272
  %316 = bitcast <16 x i8> %175 to <4 x i32>
  %317 = extractelement <4 x i32> %316, i32 0
  store i32 %317, i32* %52, align 64, !alias.scope !1519
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %318, i8* %319, align 1
  br label %392

320:                                              ; preds = %349, %282
  %321 = phi i64 [ 2, %282 ], [ %375, %349 ]
  %322 = icmp eq i64 %283, 0
  br i1 %322, label %334, label %323

323:                                              ; preds = %320, %323
  %324 = phi i64 [ %331, %323 ], [ %321, %320 ]
  %325 = phi i64 [ %332, %323 ], [ %283, %320 ]
  %326 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %324
  %327 = load i8, i8* %326, align 1
  %328 = mul i64 %324, %10
  %329 = add i64 %328, 1
  %330 = getelementptr inbounds i8, i8* %187, i64 %329
  store i8 %327, i8* %330, align 1
  %331 = add nuw i64 %324, 1
  %332 = add i64 %325, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %323, !llvm.loop !1522

334:                                              ; preds = %320, %323, %277
  %335 = bitcast <16 x i8> %175 to <4 x i32>
  %336 = extractelement <4 x i32> %335, i32 0
  store i32 %336, i32* %52, align 64, !alias.scope !1519
  %337 = trunc i32 %336 to i8
  %338 = getelementptr inbounds i8, i8* %187, i64 2
  store i8 %337, i8* %338, align 1
  br i1 %245, label %392, label %339

339:                                              ; preds = %334
  %340 = lshr i32 %336, 8
  %341 = trunc i32 %340 to i8
  %342 = getelementptr inbounds i8, i8* %187, i64 %64
  store i8 %341, i8* %342, align 1
  %343 = icmp eq i64 %184, 2
  br i1 %343, label %392, label %344

344:                                              ; preds = %339
  %345 = and i64 %117, 3
  %346 = icmp ult i64 %118, 3
  br i1 %346, label %378, label %347

347:                                              ; preds = %344
  %348 = sub i64 %117, %345
  br label %393

349:                                              ; preds = %349, %285
  %350 = phi i64 [ 2, %285 ], [ %375, %349 ]
  %351 = phi i64 [ %286, %285 ], [ %376, %349 ]
  %352 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %350
  %353 = load i8, i8* %352, align 2
  %354 = mul i64 %350, %10
  %355 = or i64 %354, 1
  %356 = getelementptr inbounds i8, i8* %187, i64 %355
  store i8 %353, i8* %356, align 1
  %357 = or i64 %350, 1
  %358 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %357
  %359 = load i8, i8* %358, align 1
  %360 = mul i64 %357, %10
  %361 = add i64 %360, 1
  %362 = getelementptr inbounds i8, i8* %187, i64 %361
  store i8 %359, i8* %362, align 1
  %363 = add nuw i64 %350, 2
  %364 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %363
  %365 = load i8, i8* %364, align 2
  %366 = mul i64 %363, %10
  %367 = or i64 %366, 1
  %368 = getelementptr inbounds i8, i8* %187, i64 %367
  store i8 %365, i8* %368, align 1
  %369 = add nuw i64 %350, 3
  %370 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = mul i64 %369, %10
  %373 = add i64 %372, 1
  %374 = getelementptr inbounds i8, i8* %187, i64 %373
  store i8 %371, i8* %374, align 1
  %375 = add nuw i64 %350, 4
  %376 = add i64 %351, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %320, label %349, !llvm.loop !1523

378:                                              ; preds = %393, %344
  %379 = phi i64 [ 2, %344 ], [ %419, %393 ]
  %380 = icmp eq i64 %345, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %389, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %390, %381 ], [ %345, %378 ]
  %384 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %382
  %385 = load i8, i8* %384, align 1
  %386 = mul i64 %382, %10
  %387 = add i64 %386, 2
  %388 = getelementptr inbounds i8, i8* %187, i64 %387
  store i8 %385, i8* %388, align 1
  %389 = add nuw i64 %382, 1
  %390 = add i64 %383, -1
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %381, !llvm.loop !1524

392:                                              ; preds = %378, %381, %339, %315, %334, %312
  br i1 %2, label %422, label %482

393:                                              ; preds = %393, %347
  %394 = phi i64 [ 2, %347 ], [ %419, %393 ]
  %395 = phi i64 [ %348, %347 ], [ %420, %393 ]
  %396 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %394
  %397 = load i8, i8* %396, align 2
  %398 = mul i64 %394, %10
  %399 = add i64 %398, 2
  %400 = getelementptr inbounds i8, i8* %187, i64 %399
  store i8 %397, i8* %400, align 1
  %401 = or i64 %394, 1
  %402 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = mul i64 %401, %10
  %405 = add i64 %404, 2
  %406 = getelementptr inbounds i8, i8* %187, i64 %405
  store i8 %403, i8* %406, align 1
  %407 = add nuw i64 %394, 2
  %408 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %407
  %409 = load i8, i8* %408, align 2
  %410 = mul i64 %407, %10
  %411 = add i64 %410, 2
  %412 = getelementptr inbounds i8, i8* %187, i64 %411
  store i8 %409, i8* %412, align 1
  %413 = add nuw i64 %394, 3
  %414 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = mul i64 %413, %10
  %417 = add i64 %416, 2
  %418 = getelementptr inbounds i8, i8* %187, i64 %417
  store i8 %415, i8* %418, align 1
  %419 = add nuw i64 %394, 4
  %420 = add i64 %395, -4
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %378, label %393, !llvm.loop !1525

422:                                              ; preds = %392
  %423 = bitcast <16 x i8> %183 to <4 x i32>
  %424 = extractelement <4 x i32> %423, i32 0
  store i32 %424, i32* %52, align 64, !alias.scope !1526
  br i1 %242, label %482, label %425

425:                                              ; preds = %422
  %426 = trunc i32 %424 to i8
  %427 = getelementptr inbounds i8, i8* %187, i64 3
  store i8 %426, i8* %427, align 1
  %428 = icmp eq i64 %184, 1
  br i1 %428, label %482, label %429

429:                                              ; preds = %425
  %430 = lshr i32 %424, 8
  %431 = trunc i32 %430 to i8
  %432 = getelementptr inbounds i8, i8* %187, i64 7
  store i8 %431, i8* %432, align 1
  %433 = icmp eq i64 %184, 2
  br i1 %433, label %482, label %434

434:                                              ; preds = %429
  %435 = and i64 %114, 3
  %436 = icmp ult i64 %115, 3
  br i1 %436, label %468, label %437

437:                                              ; preds = %434
  %438 = sub i64 %114, %435
  br label %439

439:                                              ; preds = %439, %437
  %440 = phi i64 [ 2, %437 ], [ %465, %439 ]
  %441 = phi i64 [ %438, %437 ], [ %466, %439 ]
  %442 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %440
  %443 = load i8, i8* %442, align 2
  %444 = shl i64 %440, 2
  %445 = or i64 %444, 3
  %446 = getelementptr inbounds i8, i8* %187, i64 %445
  store i8 %443, i8* %446, align 1
  %447 = or i64 %440, 1
  %448 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = shl i64 %447, 2
  %451 = or i64 %450, 3
  %452 = getelementptr inbounds i8, i8* %187, i64 %451
  store i8 %449, i8* %452, align 1
  %453 = add nuw i64 %440, 2
  %454 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %453
  %455 = load i8, i8* %454, align 2
  %456 = shl i64 %453, 2
  %457 = or i64 %456, 3
  %458 = getelementptr inbounds i8, i8* %187, i64 %457
  store i8 %455, i8* %458, align 1
  %459 = add nuw i64 %440, 3
  %460 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = shl i64 %459, 2
  %463 = or i64 %462, 3
  %464 = getelementptr inbounds i8, i8* %187, i64 %463
  store i8 %461, i8* %464, align 1
  %465 = add nuw i64 %440, 4
  %466 = add i64 %441, -4
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %468, label %439

468:                                              ; preds = %439, %434
  %469 = phi i64 [ 2, %434 ], [ %465, %439 ]
  %470 = icmp eq i64 %435, 0
  br i1 %470, label %482, label %471

471:                                              ; preds = %468, %471
  %472 = phi i64 [ %479, %471 ], [ %469, %468 ]
  %473 = phi i64 [ %480, %471 ], [ %435, %468 ]
  %474 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %472
  %475 = load i8, i8* %474, align 1
  %476 = shl i64 %472, 2
  %477 = or i64 %476, 3
  %478 = getelementptr inbounds i8, i8* %187, i64 %477
  store i8 %475, i8* %478, align 1
  %479 = add nuw i64 %472, 1
  %480 = add i64 %473, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %471, !llvm.loop !1529

482:                                              ; preds = %468, %471, %422, %392, %425, %429, %192, %227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #12
  %483 = add i64 %112, 4
  %484 = icmp ugt i64 %49, %483
  %485 = add i64 %111, 1
  br i1 %484, label %110, label %107
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8N_SCALAR14UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoE(%"class.jxl::Image3"* nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::OutputEncodingInfo"* dereferenceable(352)) #8 {
  %4 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %9 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 2
  %15 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 0, i32 4, i32 4
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 0
  %18 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 1
  %19 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 1, i64 2
  %20 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 0
  %21 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 1
  %22 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 2, i64 2
  %23 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 0
  %24 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 12
  %25 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 24
  %26 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 4
  %27 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 16
  %28 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 28
  %29 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 8
  %30 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 20
  %31 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 2, i32 0, i64 32
  %32 = getelementptr inbounds %"struct.jxl::OutputEncodingInfo", %"struct.jxl::OutputEncodingInfo"* %2, i64 0, i32 1
  br label %34

33:                                               ; preds = %853, %3
  ret i32 0

34:                                               ; preds = %7, %853
  %35 = phi i64 [ 0, %7 ], [ %854, %853 ]
  %36 = load i64, i64* %8, align 8
  %37 = add i64 %36, %35
  %38 = load i64, i64* %9, align 8
  %39 = mul i64 %38, %37
  %40 = load i8*, i8** %10, align 8
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #12
  %44 = getelementptr inbounds i8, i8* %40, i64 %39
  %45 = ptrtoint i8* %44 to i64
  %46 = and i64 %45, 63
  %47 = icmp eq i64 %46, 0
  tail call void @llvm.assume(i1 %47) #12
  %48 = bitcast i8* %44 to float*
  %49 = load i64, i64* %11, align 8
  %50 = getelementptr inbounds float, float* %48, i64 %49
  %51 = load i8*, i8** %12, align 8
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #12
  %55 = getelementptr inbounds i8, i8* %51, i64 %39
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 63
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #12
  %59 = bitcast i8* %55 to float*
  %60 = getelementptr inbounds float, float* %59, i64 %49
  %61 = load i8*, i8** %13, align 8
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #12
  %65 = getelementptr inbounds i8, i8* %61, i64 %39
  %66 = ptrtoint i8* %65 to i64
  %67 = and i64 %66, 63
  %68 = icmp eq i64 %67, 0
  tail call void @llvm.assume(i1 %68) #12
  %69 = bitcast i8* %65 to float*
  %70 = getelementptr inbounds float, float* %69, i64 %49
  %71 = load i8, i8* %14, align 4, !range !2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %769

73:                                               ; preds = %34
  %74 = load i32, i32* %15, align 4
  switch i32 %74, label %850 [
    i32 8, label %75
    i32 13, label %133
    i32 16, label %289
    i32 18, label %496
    i32 1, label %682
    i32 17, label %769
  ]

75:                                               ; preds = %73
  %76 = load i64, i64* %16, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %853, label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %130, %78 ], [ 0, %75 ]
  %80 = getelementptr inbounds float, float* %50, i64 %79
  %81 = load float, float* %80, align 4
  %82 = getelementptr inbounds float, float* %60, i64 %79
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds float, float* %70, i64 %79
  %85 = load float, float* %84, align 4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1530
  %86 = load float, float* %17, align 4, !noalias !1531
  %87 = load float, float* %18, align 4, !noalias !1531
  %88 = load float, float* %19, align 4, !noalias !1531
  %89 = fadd float %81, %83
  %90 = fsub float %83, %81
  %91 = load float, float* %20, align 4, !noalias !1531
  %92 = fsub float %89, %91
  %93 = load float, float* %21, align 4, !noalias !1531
  %94 = fsub float %90, %93
  %95 = load float, float* %22, align 4, !noalias !1531
  %96 = fsub float %85, %95
  %97 = fmul float %92, %92
  %98 = fmul float %94, %94
  %99 = fmul float %96, %96
  %100 = fmul float %92, %97
  %101 = fadd float %86, %100
  %102 = fmul float %94, %98
  %103 = fadd float %87, %102
  %104 = fmul float %96, %99
  %105 = fadd float %88, %104
  %106 = load float, float* %23, align 4, !alias.scope !1536, !noalias !1531
  %107 = fmul float %106, %101
  %108 = load float, float* %24, align 4, !alias.scope !1541, !noalias !1531
  %109 = fmul float %101, %108
  %110 = load float, float* %25, align 4, !alias.scope !1546, !noalias !1531
  %111 = fmul float %101, %110
  %112 = load float, float* %26, align 4, !alias.scope !1551, !noalias !1531
  %113 = fmul float %103, %112
  %114 = fadd float %107, %113
  %115 = load float, float* %27, align 4, !alias.scope !1556, !noalias !1531
  %116 = fmul float %103, %115
  %117 = fadd float %109, %116
  %118 = load float, float* %28, align 4, !alias.scope !1561, !noalias !1531
  %119 = fmul float %103, %118
  %120 = fadd float %111, %119
  %121 = load float, float* %29, align 4, !alias.scope !1566, !noalias !1531
  %122 = fmul float %105, %121
  %123 = fadd float %114, %122
  %124 = load float, float* %30, align 4, !alias.scope !1571, !noalias !1531
  %125 = fmul float %105, %124
  %126 = fadd float %117, %125
  %127 = load float, float* %31, align 4, !alias.scope !1576, !noalias !1531
  %128 = fmul float %105, %127
  %129 = fadd float %120, %128
  store float %123, float* %80, align 4, !alias.scope !1581
  store float %126, float* %82, align 4, !alias.scope !1584
  store float %129, float* %84, align 4, !alias.scope !1587
  %130 = add nuw i64 %79, 1
  %131 = load i64, i64* %16, align 8
  %132 = icmp ult i64 %130, %131
  br i1 %132, label %78, label %853

133:                                              ; preds = %73
  %134 = load i64, i64* %16, align 8
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %853, label %136

136:                                              ; preds = %133, %136
  %137 = phi i64 [ %286, %136 ], [ 0, %133 ]
  %138 = getelementptr inbounds float, float* %50, i64 %137
  %139 = load float, float* %138, align 4
  %140 = getelementptr inbounds float, float* %60, i64 %137
  %141 = load float, float* %140, align 4
  %142 = getelementptr inbounds float, float* %70, i64 %137
  %143 = load float, float* %142, align 4
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1590
  %144 = load float, float* %17, align 4, !noalias !1591
  %145 = load float, float* %18, align 4, !noalias !1591
  %146 = load float, float* %19, align 4, !noalias !1591
  %147 = fadd float %139, %141
  %148 = fsub float %141, %139
  %149 = load float, float* %20, align 4, !noalias !1591
  %150 = load float, float* %21, align 4, !noalias !1591
  %151 = fsub float %148, %150
  %152 = load float, float* %22, align 4, !noalias !1591
  %153 = insertelement <2 x float> undef, float %147, i32 0
  %154 = insertelement <2 x float> %153, float %143, i32 1
  %155 = insertelement <2 x float> undef, float %149, i32 0
  %156 = insertelement <2 x float> %155, float %152, i32 1
  %157 = fsub <2 x float> %154, %156
  %158 = fmul float %151, %151
  %159 = fmul <2 x float> %157, %157
  %160 = fmul float %151, %158
  %161 = fadd float %145, %160
  %162 = fmul <2 x float> %157, %159
  %163 = insertelement <2 x float> undef, float %144, i32 0
  %164 = insertelement <2 x float> %163, float %146, i32 1
  %165 = fadd <2 x float> %164, %162
  %166 = load float, float* %23, align 4, !alias.scope !1596, !noalias !1591
  %167 = load float, float* %24, align 4, !alias.scope !1601, !noalias !1591
  %168 = load float, float* %25, align 4, !alias.scope !1606, !noalias !1591
  %169 = load float, float* %26, align 4, !alias.scope !1611, !noalias !1591
  %170 = fmul float %161, %169
  %171 = load float, float* %29, align 4, !alias.scope !1616, !noalias !1591
  %172 = insertelement <2 x float> undef, float %166, i32 0
  %173 = insertelement <2 x float> %172, float %171, i32 1
  %174 = fmul <2 x float> %173, %165
  %175 = extractelement <2 x float> %174, i32 0
  %176 = fadd float %175, %170
  %177 = load float, float* %27, align 4, !alias.scope !1621, !noalias !1591
  %178 = fmul float %161, %177
  %179 = load float, float* %30, align 4, !alias.scope !1626, !noalias !1591
  %180 = insertelement <2 x float> undef, float %167, i32 0
  %181 = insertelement <2 x float> %180, float %179, i32 1
  %182 = fmul <2 x float> %165, %181
  %183 = extractelement <2 x float> %182, i32 0
  %184 = fadd float %183, %178
  %185 = load float, float* %28, align 4, !alias.scope !1631, !noalias !1591
  %186 = fmul float %161, %185
  %187 = load float, float* %31, align 4, !alias.scope !1636, !noalias !1591
  %188 = insertelement <2 x float> undef, float %168, i32 0
  %189 = insertelement <2 x float> %188, float %187, i32 1
  %190 = fmul <2 x float> %165, %189
  %191 = extractelement <2 x float> %190, i32 0
  %192 = fadd float %191, %186
  %193 = extractelement <2 x float> %174, i32 1
  %194 = fadd float %176, %193
  %195 = extractelement <2 x float> %182, i32 1
  %196 = fadd float %184, %195
  %197 = extractelement <2 x float> %190, i32 1
  %198 = fadd float %192, %197
  %199 = bitcast float %194 to i32
  %200 = and i32 %199, -2147483648
  %201 = and i32 %199, 2147483647
  %202 = bitcast i32 %201 to float
  %203 = fmul float %202, 0x4029D70A40000000
  %204 = tail call float @sqrtf(float %202) #12
  fence acq_rel
  %205 = fmul float %204, 0x3FE7874640000000
  %206 = fadd float %205, 0x3FF7965840000000
  %207 = fmul float %204, 0x3F98D4A540000000
  %208 = fadd float %207, 0x3FEDA08C60000000
  fence acq_rel
  %209 = fmul float %204, %206
  %210 = fadd float %209, 0x3FD8FC0E60000000
  %211 = fmul float %204, %208
  %212 = fadd float %211, 0x3FF573FC80000000
  fence acq_rel
  %213 = fmul float %204, %210
  %214 = fadd float %213, 0x3F75A816A0000000
  %215 = fmul float %204, %212
  %216 = fadd float %215, 0x3FD36F4A00000000
  fence acq_rel
  %217 = fmul float %204, %214
  %218 = fadd float %217, 0xBF40D3ADA0000000
  %219 = fmul float %204, %216
  %220 = fadd float %219, 0x3F84929360000000
  fence acq_rel
  %221 = fdiv float %218, %220
  %222 = fcmp ule float %202, 0x3F69A5C380000000
  %223 = select i1 %222, float %203, float %221
  %224 = bitcast float %223 to i32
  %225 = and i32 %224, 2147483647
  %226 = or i32 %225, %200
  %227 = bitcast float* %138 to i32*
  store i32 %226, i32* %227, align 4, !alias.scope !1641
  %228 = bitcast float %196 to i32
  %229 = and i32 %228, -2147483648
  %230 = and i32 %228, 2147483647
  %231 = bitcast i32 %230 to float
  %232 = fmul float %231, 0x4029D70A40000000
  %233 = tail call float @sqrtf(float %231) #12
  fence acq_rel
  %234 = fmul float %233, 0x3FE7874640000000
  %235 = fadd float %234, 0x3FF7965840000000
  %236 = fmul float %233, 0x3F98D4A540000000
  %237 = fadd float %236, 0x3FEDA08C60000000
  fence acq_rel
  %238 = fmul float %233, %235
  %239 = fadd float %238, 0x3FD8FC0E60000000
  %240 = fmul float %233, %237
  %241 = fadd float %240, 0x3FF573FC80000000
  fence acq_rel
  %242 = fmul float %233, %239
  %243 = fadd float %242, 0x3F75A816A0000000
  %244 = fmul float %233, %241
  %245 = fadd float %244, 0x3FD36F4A00000000
  fence acq_rel
  %246 = fmul float %233, %243
  %247 = fadd float %246, 0xBF40D3ADA0000000
  %248 = fmul float %233, %245
  %249 = fadd float %248, 0x3F84929360000000
  fence acq_rel
  %250 = fdiv float %247, %249
  %251 = fcmp ule float %231, 0x3F69A5C380000000
  %252 = select i1 %251, float %232, float %250
  %253 = bitcast float %252 to i32
  %254 = and i32 %253, 2147483647
  %255 = or i32 %254, %229
  %256 = bitcast float* %140 to i32*
  store i32 %255, i32* %256, align 4, !alias.scope !1644
  %257 = bitcast float %198 to i32
  %258 = and i32 %257, -2147483648
  %259 = and i32 %257, 2147483647
  %260 = bitcast i32 %259 to float
  %261 = fmul float %260, 0x4029D70A40000000
  %262 = tail call float @sqrtf(float %260) #12
  fence acq_rel
  %263 = fmul float %262, 0x3FE7874640000000
  %264 = fadd float %263, 0x3FF7965840000000
  %265 = fmul float %262, 0x3F98D4A540000000
  %266 = fadd float %265, 0x3FEDA08C60000000
  fence acq_rel
  %267 = fmul float %262, %264
  %268 = fadd float %267, 0x3FD8FC0E60000000
  %269 = fmul float %262, %266
  %270 = fadd float %269, 0x3FF573FC80000000
  fence acq_rel
  %271 = fmul float %262, %268
  %272 = fadd float %271, 0x3F75A816A0000000
  %273 = fmul float %262, %270
  %274 = fadd float %273, 0x3FD36F4A00000000
  fence acq_rel
  %275 = fmul float %262, %272
  %276 = fadd float %275, 0xBF40D3ADA0000000
  %277 = fmul float %262, %274
  %278 = fadd float %277, 0x3F84929360000000
  fence acq_rel
  %279 = fdiv float %276, %278
  %280 = fcmp ule float %260, 0x3F69A5C380000000
  %281 = select i1 %280, float %261, float %279
  %282 = bitcast float %281 to i32
  %283 = and i32 %282, 2147483647
  %284 = or i32 %283, %258
  %285 = bitcast float* %142 to i32*
  store i32 %284, i32* %285, align 4, !alias.scope !1647
  %286 = add nuw i64 %137, 1
  %287 = load i64, i64* %16, align 8
  %288 = icmp ult i64 %286, %287
  br i1 %288, label %136, label %853

289:                                              ; preds = %73
  %290 = load i64, i64* %16, align 8
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %853, label %292

292:                                              ; preds = %289, %292
  %293 = phi i64 [ %493, %292 ], [ 0, %289 ]
  %294 = getelementptr inbounds float, float* %50, i64 %293
  %295 = load float, float* %294, align 4, !alias.scope !1650
  %296 = getelementptr inbounds float, float* %60, i64 %293
  %297 = load float, float* %296, align 4, !alias.scope !1653
  %298 = getelementptr inbounds float, float* %70, i64 %293
  %299 = load float, float* %298, align 4, !alias.scope !1656
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1659
  %300 = load float, float* %17, align 4, !noalias !1660
  %301 = load float, float* %18, align 4, !noalias !1660
  %302 = load float, float* %19, align 4, !noalias !1660
  %303 = fadd float %295, %297
  %304 = fsub float %297, %295
  %305 = load float, float* %20, align 4, !noalias !1660
  %306 = load float, float* %21, align 4, !noalias !1660
  %307 = fsub float %304, %306
  %308 = load float, float* %22, align 4, !noalias !1660
  %309 = insertelement <2 x float> undef, float %303, i32 0
  %310 = insertelement <2 x float> %309, float %299, i32 1
  %311 = insertelement <2 x float> undef, float %305, i32 0
  %312 = insertelement <2 x float> %311, float %308, i32 1
  %313 = fsub <2 x float> %310, %312
  %314 = fmul float %307, %307
  %315 = fmul <2 x float> %313, %313
  %316 = fmul float %307, %314
  %317 = fadd float %301, %316
  %318 = fmul <2 x float> %313, %315
  %319 = insertelement <2 x float> undef, float %300, i32 0
  %320 = insertelement <2 x float> %319, float %302, i32 1
  %321 = fadd <2 x float> %320, %318
  %322 = load float, float* %23, align 4, !alias.scope !1665, !noalias !1660
  %323 = load float, float* %24, align 4, !alias.scope !1670, !noalias !1660
  %324 = load float, float* %25, align 4, !alias.scope !1675, !noalias !1660
  %325 = load float, float* %26, align 4, !alias.scope !1680, !noalias !1660
  %326 = fmul float %317, %325
  %327 = load float, float* %29, align 4, !alias.scope !1685, !noalias !1660
  %328 = insertelement <2 x float> undef, float %322, i32 0
  %329 = insertelement <2 x float> %328, float %327, i32 1
  %330 = fmul <2 x float> %329, %321
  %331 = extractelement <2 x float> %330, i32 0
  %332 = fadd float %331, %326
  %333 = load float, float* %27, align 4, !alias.scope !1690, !noalias !1660
  %334 = fmul float %317, %333
  %335 = load float, float* %30, align 4, !alias.scope !1695, !noalias !1660
  %336 = insertelement <2 x float> undef, float %323, i32 0
  %337 = insertelement <2 x float> %336, float %335, i32 1
  %338 = fmul <2 x float> %321, %337
  %339 = extractelement <2 x float> %338, i32 0
  %340 = fadd float %339, %334
  %341 = load float, float* %28, align 4, !alias.scope !1700, !noalias !1660
  %342 = fmul float %317, %341
  %343 = load float, float* %31, align 4, !alias.scope !1705, !noalias !1660
  %344 = insertelement <2 x float> undef, float %324, i32 0
  %345 = insertelement <2 x float> %344, float %343, i32 1
  %346 = fmul <2 x float> %321, %345
  %347 = extractelement <2 x float> %346, i32 0
  %348 = fadd float %347, %342
  %349 = extractelement <2 x float> %330, i32 1
  %350 = fadd float %332, %349
  %351 = extractelement <2 x float> %338, i32 1
  %352 = fadd float %340, %351
  %353 = extractelement <2 x float> %346, i32 1
  %354 = fadd float %348, %353
  %355 = bitcast float %350 to i32
  %356 = and i32 %355, -2147483648
  %357 = and i32 %355, 2147483647
  %358 = bitcast i32 %357 to float
  %359 = tail call float @sqrtf(float %358) #12
  %360 = tail call float @sqrtf(float %359) #12
  %361 = fcmp uge float %358, 0x3F1A36E2E0000000
  fence acq_rel
  %362 = fmul float %360, 0x41117C49A0000000
  %363 = fsub float 0x40F0D229E0000000, %362
  %364 = fmul float %360, 0x41094CB4C0000000
  %365 = fsub float 0xC0E56F5AE0000000, %364
  fence acq_rel
  %366 = fmul float %360, %363
  %367 = fadd float %366, 0x4060E90700000000
  %368 = fmul float %360, %365
  %369 = fadd float %368, 0x40CF6A6280000000
  fence acq_rel
  %370 = fmul float %360, %367
  %371 = fadd float %370, 0x3FD8D70380000000
  %372 = fmul float %360, %369
  %373 = fadd float %372, 0x409716E040000000
  fence acq_rel
  %374 = fmul float %360, %371
  %375 = fadd float %374, 0x3EE4AF6040000000
  %376 = fmul float %360, %373
  %377 = fadd float %376, 0x4040DBFDC0000000
  fence acq_rel
  %378 = fdiv float %375, %377
  fence acq_rel
  %379 = fmul float %360, 0x4048313200000000
  %380 = fadd float %379, 0x4062A80D20000000
  %381 = fmul float %360, 0x4039E77860000000
  %382 = fadd float %381, 0x405C03E280000000
  fence acq_rel
  %383 = fmul float %360, %380
  %384 = fadd float %383, 0x404B9D2740000000
  %385 = fmul float %360, %382
  %386 = fadd float %385, 0x405728C640000000
  fence acq_rel
  %387 = fmul float %360, %384
  %388 = fadd float %387, 0xBFF1884E80000000
  %389 = fmul float %360, %386
  %390 = fadd float %389, 0x40342AC5C0000000
  fence acq_rel
  %391 = fmul float %360, %388
  %392 = fadd float %391, 0x3F8BAD2FA0000000
  %393 = fmul float %360, %390
  %394 = fadd float %393, 0x3FF032DB20000000
  fence acq_rel
  %395 = fdiv float %392, %394
  %396 = select i1 %361, float %395, float %378
  %397 = bitcast float %396 to i32
  %398 = and i32 %397, 2147483647
  %399 = or i32 %398, %356
  %400 = bitcast float* %294 to i32*
  store i32 %399, i32* %400, align 4, !alias.scope !1710
  %401 = bitcast float %352 to i32
  %402 = and i32 %401, -2147483648
  %403 = and i32 %401, 2147483647
  %404 = bitcast i32 %403 to float
  %405 = tail call float @sqrtf(float %404) #12
  %406 = tail call float @sqrtf(float %405) #12
  %407 = fcmp uge float %404, 0x3F1A36E2E0000000
  fence acq_rel
  %408 = fmul float %406, 0x41117C49A0000000
  %409 = fsub float 0x40F0D229E0000000, %408
  %410 = fmul float %406, 0x41094CB4C0000000
  %411 = fsub float 0xC0E56F5AE0000000, %410
  fence acq_rel
  %412 = fmul float %406, %409
  %413 = fadd float %412, 0x4060E90700000000
  %414 = fmul float %406, %411
  %415 = fadd float %414, 0x40CF6A6280000000
  fence acq_rel
  %416 = fmul float %406, %413
  %417 = fadd float %416, 0x3FD8D70380000000
  %418 = fmul float %406, %415
  %419 = fadd float %418, 0x409716E040000000
  fence acq_rel
  %420 = fmul float %406, %417
  %421 = fadd float %420, 0x3EE4AF6040000000
  %422 = fmul float %406, %419
  %423 = fadd float %422, 0x4040DBFDC0000000
  fence acq_rel
  %424 = fdiv float %421, %423
  fence acq_rel
  %425 = fmul float %406, 0x4048313200000000
  %426 = fadd float %425, 0x4062A80D20000000
  %427 = fmul float %406, 0x4039E77860000000
  %428 = fadd float %427, 0x405C03E280000000
  fence acq_rel
  %429 = fmul float %406, %426
  %430 = fadd float %429, 0x404B9D2740000000
  %431 = fmul float %406, %428
  %432 = fadd float %431, 0x405728C640000000
  fence acq_rel
  %433 = fmul float %406, %430
  %434 = fadd float %433, 0xBFF1884E80000000
  %435 = fmul float %406, %432
  %436 = fadd float %435, 0x40342AC5C0000000
  fence acq_rel
  %437 = fmul float %406, %434
  %438 = fadd float %437, 0x3F8BAD2FA0000000
  %439 = fmul float %406, %436
  %440 = fadd float %439, 0x3FF032DB20000000
  fence acq_rel
  %441 = fdiv float %438, %440
  %442 = select i1 %407, float %441, float %424
  %443 = bitcast float %442 to i32
  %444 = and i32 %443, 2147483647
  %445 = or i32 %444, %402
  %446 = bitcast float* %296 to i32*
  store i32 %445, i32* %446, align 4, !alias.scope !1713
  %447 = bitcast float %354 to i32
  %448 = and i32 %447, -2147483648
  %449 = and i32 %447, 2147483647
  %450 = bitcast i32 %449 to float
  %451 = tail call float @sqrtf(float %450) #12
  %452 = tail call float @sqrtf(float %451) #12
  %453 = fcmp uge float %450, 0x3F1A36E2E0000000
  fence acq_rel
  %454 = fmul float %452, 0x41117C49A0000000
  %455 = fsub float 0x40F0D229E0000000, %454
  %456 = fmul float %452, 0x41094CB4C0000000
  %457 = fsub float 0xC0E56F5AE0000000, %456
  fence acq_rel
  %458 = fmul float %452, %455
  %459 = fadd float %458, 0x4060E90700000000
  %460 = fmul float %452, %457
  %461 = fadd float %460, 0x40CF6A6280000000
  fence acq_rel
  %462 = fmul float %452, %459
  %463 = fadd float %462, 0x3FD8D70380000000
  %464 = fmul float %452, %461
  %465 = fadd float %464, 0x409716E040000000
  fence acq_rel
  %466 = fmul float %452, %463
  %467 = fadd float %466, 0x3EE4AF6040000000
  %468 = fmul float %452, %465
  %469 = fadd float %468, 0x4040DBFDC0000000
  fence acq_rel
  %470 = fdiv float %467, %469
  fence acq_rel
  %471 = fmul float %452, 0x4048313200000000
  %472 = fadd float %471, 0x4062A80D20000000
  %473 = fmul float %452, 0x4039E77860000000
  %474 = fadd float %473, 0x405C03E280000000
  fence acq_rel
  %475 = fmul float %452, %472
  %476 = fadd float %475, 0x404B9D2740000000
  %477 = fmul float %452, %474
  %478 = fadd float %477, 0x405728C640000000
  fence acq_rel
  %479 = fmul float %452, %476
  %480 = fadd float %479, 0xBFF1884E80000000
  %481 = fmul float %452, %478
  %482 = fadd float %481, 0x40342AC5C0000000
  fence acq_rel
  %483 = fmul float %452, %480
  %484 = fadd float %483, 0x3F8BAD2FA0000000
  %485 = fmul float %452, %482
  %486 = fadd float %485, 0x3FF032DB20000000
  fence acq_rel
  %487 = fdiv float %484, %486
  %488 = select i1 %453, float %487, float %470
  %489 = bitcast float %488 to i32
  %490 = and i32 %489, 2147483647
  %491 = or i32 %490, %448
  %492 = bitcast float* %298 to i32*
  store i32 %491, i32* %492, align 4, !alias.scope !1716
  %493 = add nuw i64 %293, 1
  %494 = load i64, i64* %16, align 8
  %495 = icmp ult i64 %493, %494
  br i1 %495, label %292, label %853

496:                                              ; preds = %73
  %497 = load i64, i64* %16, align 8
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %853, label %499

499:                                              ; preds = %496, %499
  %500 = phi i64 [ %679, %499 ], [ 0, %496 ]
  %501 = getelementptr inbounds float, float* %50, i64 %500
  %502 = load float, float* %501, align 4, !alias.scope !1719
  %503 = getelementptr inbounds float, float* %60, i64 %500
  %504 = load float, float* %503, align 4, !alias.scope !1722
  %505 = getelementptr inbounds float, float* %70, i64 %500
  %506 = load float, float* %505, align 4, !alias.scope !1725
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1728
  %507 = load float, float* %17, align 4, !noalias !1729
  %508 = load float, float* %18, align 4, !noalias !1729
  %509 = load float, float* %19, align 4, !noalias !1729
  %510 = fadd float %502, %504
  %511 = fsub float %504, %502
  %512 = load float, float* %20, align 4, !noalias !1729
  %513 = load float, float* %21, align 4, !noalias !1729
  %514 = fsub float %511, %513
  %515 = load float, float* %22, align 4, !noalias !1729
  %516 = insertelement <2 x float> undef, float %510, i32 0
  %517 = insertelement <2 x float> %516, float %506, i32 1
  %518 = insertelement <2 x float> undef, float %512, i32 0
  %519 = insertelement <2 x float> %518, float %515, i32 1
  %520 = fsub <2 x float> %517, %519
  %521 = fmul float %514, %514
  %522 = fmul <2 x float> %520, %520
  %523 = fmul float %514, %521
  %524 = fadd float %508, %523
  %525 = fmul <2 x float> %520, %522
  %526 = insertelement <2 x float> undef, float %507, i32 0
  %527 = insertelement <2 x float> %526, float %509, i32 1
  %528 = fadd <2 x float> %527, %525
  %529 = load float, float* %23, align 4, !alias.scope !1734, !noalias !1729
  %530 = load float, float* %24, align 4, !alias.scope !1739, !noalias !1729
  %531 = load float, float* %25, align 4, !alias.scope !1744, !noalias !1729
  %532 = load float, float* %26, align 4, !alias.scope !1749, !noalias !1729
  %533 = fmul float %524, %532
  %534 = load float, float* %29, align 4, !alias.scope !1754, !noalias !1729
  %535 = insertelement <2 x float> undef, float %529, i32 0
  %536 = insertelement <2 x float> %535, float %534, i32 1
  %537 = fmul <2 x float> %536, %528
  %538 = extractelement <2 x float> %537, i32 0
  %539 = fadd float %538, %533
  %540 = load float, float* %27, align 4, !alias.scope !1759, !noalias !1729
  %541 = fmul float %524, %540
  %542 = load float, float* %30, align 4, !alias.scope !1764, !noalias !1729
  %543 = insertelement <2 x float> undef, float %530, i32 0
  %544 = insertelement <2 x float> %543, float %542, i32 1
  %545 = fmul <2 x float> %528, %544
  %546 = extractelement <2 x float> %545, i32 0
  %547 = fadd float %546, %541
  %548 = load float, float* %28, align 4, !alias.scope !1769, !noalias !1729
  %549 = fmul float %524, %548
  %550 = load float, float* %31, align 4, !alias.scope !1774, !noalias !1729
  %551 = insertelement <2 x float> undef, float %531, i32 0
  %552 = insertelement <2 x float> %551, float %550, i32 1
  %553 = fmul <2 x float> %528, %552
  %554 = extractelement <2 x float> %553, i32 0
  %555 = fadd float %554, %549
  %556 = extractelement <2 x float> %537, i32 1
  %557 = fadd float %539, %556
  %558 = extractelement <2 x float> %545, i32 1
  %559 = fadd float %547, %558
  %560 = extractelement <2 x float> %553, i32 1
  %561 = fadd float %555, %560
  %562 = bitcast float %557 to i32
  %563 = and i32 %562, -2147483648
  %564 = and i32 %562, 2147483647
  %565 = bitcast i32 %564 to float
  %566 = fmul float %565, 3.000000e+00
  %567 = tail call float @sqrtf(float %566) #12
  %568 = fmul float %565, 1.200000e+01
  %569 = fadd float %568, 0xBFD2380400000000
  %570 = bitcast float %569 to i32
  %571 = add i32 %570, -1059760811
  %572 = lshr i32 %571, 23
  %573 = ashr i32 %571, 31
  %574 = shl nsw i32 %573, 8
  %575 = or i32 %574, %572
  %576 = shl i32 %575, 23
  %577 = sub i32 %570, %576
  %578 = bitcast i32 %577 to float
  %579 = sitofp i32 %575 to float
  %580 = fadd float %578, -1.000000e+00
  fence acq_rel
  %581 = fmul float %580, 0x3FE7C238E0000000
  %582 = fadd float %581, 0x3FF6DC0560000000
  %583 = fmul float %580, 0x3FC648B180000000
  %584 = fadd float %583, 0x3FF0279DA0000000
  fence acq_rel
  %585 = fmul float %580, %582
  %586 = fadd float %585, 0xBEBF0B5600000000
  %587 = fmul float %580, %584
  %588 = fadd float %587, 0x3FEFB0C4A0000000
  fence acq_rel
  %589 = fdiv float %586, %588
  %590 = fadd float %589, %579
  %591 = fmul float %590, 0x3FBFBBACA0000000
  %592 = fadd float %591, 0x3FE1EAC9E0000000
  %593 = fcmp ugt float %565, 0x3FB5555560000000
  %594 = select i1 %593, float %592, float %567
  %595 = bitcast float %594 to i32
  %596 = and i32 %595, 2147483647
  %597 = or i32 %596, %563
  %598 = bitcast i32 %597 to float
  %599 = fmul float %598, 0x3FF0AAAAA0000000
  %600 = fadd float %599, 0xBFA5555560000000
  store float %600, float* %501, align 4, !alias.scope !1779
  %601 = bitcast float %559 to i32
  %602 = and i32 %601, -2147483648
  %603 = and i32 %601, 2147483647
  %604 = bitcast i32 %603 to float
  %605 = fmul float %604, 3.000000e+00
  %606 = tail call float @sqrtf(float %605) #12
  %607 = fmul float %604, 1.200000e+01
  %608 = fadd float %607, 0xBFD2380400000000
  %609 = bitcast float %608 to i32
  %610 = add i32 %609, -1059760811
  %611 = lshr i32 %610, 23
  %612 = ashr i32 %610, 31
  %613 = shl nsw i32 %612, 8
  %614 = or i32 %613, %611
  %615 = shl i32 %614, 23
  %616 = sub i32 %609, %615
  %617 = bitcast i32 %616 to float
  %618 = sitofp i32 %614 to float
  %619 = fadd float %617, -1.000000e+00
  fence acq_rel
  %620 = fmul float %619, 0x3FE7C238E0000000
  %621 = fadd float %620, 0x3FF6DC0560000000
  %622 = fmul float %619, 0x3FC648B180000000
  %623 = fadd float %622, 0x3FF0279DA0000000
  fence acq_rel
  %624 = fmul float %619, %621
  %625 = fadd float %624, 0xBEBF0B5600000000
  %626 = fmul float %619, %623
  %627 = fadd float %626, 0x3FEFB0C4A0000000
  fence acq_rel
  %628 = fdiv float %625, %627
  %629 = fadd float %628, %618
  %630 = fmul float %629, 0x3FBFBBACA0000000
  %631 = fadd float %630, 0x3FE1EAC9E0000000
  %632 = fcmp ugt float %604, 0x3FB5555560000000
  %633 = select i1 %632, float %631, float %606
  %634 = bitcast float %633 to i32
  %635 = and i32 %634, 2147483647
  %636 = or i32 %635, %602
  %637 = bitcast i32 %636 to float
  %638 = fmul float %637, 0x3FF0AAAAA0000000
  %639 = fadd float %638, 0xBFA5555560000000
  store float %639, float* %503, align 4, !alias.scope !1782
  %640 = bitcast float %561 to i32
  %641 = and i32 %640, -2147483648
  %642 = and i32 %640, 2147483647
  %643 = bitcast i32 %642 to float
  %644 = fmul float %643, 3.000000e+00
  %645 = tail call float @sqrtf(float %644) #12
  %646 = fmul float %643, 1.200000e+01
  %647 = fadd float %646, 0xBFD2380400000000
  %648 = bitcast float %647 to i32
  %649 = add i32 %648, -1059760811
  %650 = lshr i32 %649, 23
  %651 = ashr i32 %649, 31
  %652 = shl nsw i32 %651, 8
  %653 = or i32 %652, %650
  %654 = shl i32 %653, 23
  %655 = sub i32 %648, %654
  %656 = bitcast i32 %655 to float
  %657 = sitofp i32 %653 to float
  %658 = fadd float %656, -1.000000e+00
  fence acq_rel
  %659 = fmul float %658, 0x3FE7C238E0000000
  %660 = fadd float %659, 0x3FF6DC0560000000
  %661 = fmul float %658, 0x3FC648B180000000
  %662 = fadd float %661, 0x3FF0279DA0000000
  fence acq_rel
  %663 = fmul float %658, %660
  %664 = fadd float %663, 0xBEBF0B5600000000
  %665 = fmul float %658, %662
  %666 = fadd float %665, 0x3FEFB0C4A0000000
  fence acq_rel
  %667 = fdiv float %664, %666
  %668 = fadd float %667, %657
  %669 = fmul float %668, 0x3FBFBBACA0000000
  %670 = fadd float %669, 0x3FE1EAC9E0000000
  %671 = fcmp ugt float %643, 0x3FB5555560000000
  %672 = select i1 %671, float %670, float %645
  %673 = bitcast float %672 to i32
  %674 = and i32 %673, 2147483647
  %675 = or i32 %674, %641
  %676 = bitcast i32 %675 to float
  %677 = fmul float %676, 0x3FF0AAAAA0000000
  %678 = fadd float %677, 0xBFA5555560000000
  store float %678, float* %505, align 4, !alias.scope !1785
  %679 = add nuw i64 %500, 1
  %680 = load i64, i64* %16, align 8
  %681 = icmp ult i64 %679, %680
  br i1 %681, label %499, label %853

682:                                              ; preds = %73
  %683 = load i64, i64* %16, align 8
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %853, label %685

685:                                              ; preds = %682, %685
  %686 = phi i64 [ %766, %685 ], [ 0, %682 ]
  %687 = getelementptr inbounds float, float* %50, i64 %686
  %688 = load float, float* %687, align 4, !alias.scope !1788
  %689 = getelementptr inbounds float, float* %60, i64 %686
  %690 = load float, float* %689, align 4, !alias.scope !1791
  %691 = getelementptr inbounds float, float* %70, i64 %686
  %692 = load float, float* %691, align 4, !alias.scope !1794
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1797
  %693 = load float, float* %17, align 4, !noalias !1798
  %694 = load float, float* %18, align 4, !noalias !1798
  %695 = load float, float* %19, align 4, !noalias !1798
  %696 = fadd float %688, %690
  %697 = fsub float %690, %688
  %698 = load float, float* %20, align 4, !noalias !1798
  %699 = load float, float* %21, align 4, !noalias !1798
  %700 = fsub float %697, %699
  %701 = load float, float* %22, align 4, !noalias !1798
  %702 = insertelement <2 x float> undef, float %696, i32 0
  %703 = insertelement <2 x float> %702, float %692, i32 1
  %704 = insertelement <2 x float> undef, float %698, i32 0
  %705 = insertelement <2 x float> %704, float %701, i32 1
  %706 = fsub <2 x float> %703, %705
  %707 = fmul float %700, %700
  %708 = fmul <2 x float> %706, %706
  %709 = fmul float %700, %707
  %710 = fadd float %694, %709
  %711 = fmul <2 x float> %706, %708
  %712 = insertelement <2 x float> undef, float %693, i32 0
  %713 = insertelement <2 x float> %712, float %695, i32 1
  %714 = fadd <2 x float> %713, %711
  %715 = load float, float* %23, align 4, !alias.scope !1803, !noalias !1798
  %716 = load float, float* %24, align 4, !alias.scope !1808, !noalias !1798
  %717 = load float, float* %25, align 4, !alias.scope !1813, !noalias !1798
  %718 = load float, float* %26, align 4, !alias.scope !1818, !noalias !1798
  %719 = fmul float %710, %718
  %720 = load float, float* %29, align 4, !alias.scope !1823, !noalias !1798
  %721 = insertelement <2 x float> undef, float %715, i32 0
  %722 = insertelement <2 x float> %721, float %720, i32 1
  %723 = fmul <2 x float> %722, %714
  %724 = extractelement <2 x float> %723, i32 0
  %725 = fadd float %724, %719
  %726 = load float, float* %27, align 4, !alias.scope !1828, !noalias !1798
  %727 = fmul float %710, %726
  %728 = load float, float* %30, align 4, !alias.scope !1833, !noalias !1798
  %729 = insertelement <2 x float> undef, float %716, i32 0
  %730 = insertelement <2 x float> %729, float %728, i32 1
  %731 = fmul <2 x float> %714, %730
  %732 = extractelement <2 x float> %731, i32 0
  %733 = fadd float %732, %727
  %734 = load float, float* %28, align 4, !alias.scope !1838, !noalias !1798
  %735 = fmul float %710, %734
  %736 = load float, float* %31, align 4, !alias.scope !1843, !noalias !1798
  %737 = insertelement <2 x float> undef, float %717, i32 0
  %738 = insertelement <2 x float> %737, float %736, i32 1
  %739 = fmul <2 x float> %714, %738
  %740 = extractelement <2 x float> %739, i32 0
  %741 = fadd float %740, %735
  %742 = extractelement <2 x float> %723, i32 1
  %743 = fadd float %725, %742
  %744 = extractelement <2 x float> %731, i32 1
  %745 = fadd float %733, %744
  %746 = extractelement <2 x float> %739, i32 1
  %747 = fadd float %741, %746
  %748 = fmul float %743, 4.500000e+00
  %749 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %743, float 0x3FDCCCCCC0000000) #12
  %750 = fmul float %749, 0x3FF1958100000000
  %751 = fadd float %750, 0xBFB9581060000000
  %752 = fcmp ugt float %743, 0x3F926E9780000000
  %753 = select i1 %752, float %751, float %748
  store float %753, float* %687, align 4, !alias.scope !1848
  %754 = fmul float %745, 4.500000e+00
  %755 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %745, float 0x3FDCCCCCC0000000) #12
  %756 = fmul float %755, 0x3FF1958100000000
  %757 = fadd float %756, 0xBFB9581060000000
  %758 = fcmp ugt float %745, 0x3F926E9780000000
  %759 = select i1 %758, float %757, float %754
  store float %759, float* %689, align 4, !alias.scope !1851
  %760 = fmul float %747, 4.500000e+00
  %761 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %747, float 0x3FDCCCCCC0000000) #12
  %762 = fmul float %761, 0x3FF1958100000000
  %763 = fadd float %762, 0xBFB9581060000000
  %764 = fcmp ugt float %747, 0x3F926E9780000000
  %765 = select i1 %764, float %763, float %760
  store float %765, float* %691, align 4, !alias.scope !1854
  %766 = add nuw i64 %686, 1
  %767 = load i64, i64* %16, align 8
  %768 = icmp ult i64 %766, %767
  br i1 %768, label %685, label %853

769:                                              ; preds = %73, %34
  %770 = load i64, i64* %16, align 8
  %771 = icmp eq i64 %770, 0
  br i1 %771, label %853, label %772

772:                                              ; preds = %769, %772
  %773 = phi i64 [ %847, %772 ], [ 0, %769 ]
  %774 = getelementptr inbounds float, float* %50, i64 %773
  %775 = load float, float* %774, align 4, !alias.scope !1857
  %776 = getelementptr inbounds float, float* %60, i64 %773
  %777 = load float, float* %776, align 4, !alias.scope !1860
  %778 = getelementptr inbounds float, float* %70, i64 %773
  %779 = load float, float* %778, align 4, !alias.scope !1863
  tail call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #12, !srcloc !1866
  %780 = load float, float* %17, align 4, !noalias !1867
  %781 = load float, float* %18, align 4, !noalias !1867
  %782 = load float, float* %19, align 4, !noalias !1867
  %783 = fadd float %775, %777
  %784 = fsub float %777, %775
  %785 = load float, float* %20, align 4, !noalias !1867
  %786 = load float, float* %21, align 4, !noalias !1867
  %787 = fsub float %784, %786
  %788 = load float, float* %22, align 4, !noalias !1867
  %789 = insertelement <2 x float> undef, float %783, i32 0
  %790 = insertelement <2 x float> %789, float %779, i32 1
  %791 = insertelement <2 x float> undef, float %785, i32 0
  %792 = insertelement <2 x float> %791, float %788, i32 1
  %793 = fsub <2 x float> %790, %792
  %794 = fmul float %787, %787
  %795 = fmul <2 x float> %793, %793
  %796 = fmul float %787, %794
  %797 = fadd float %781, %796
  %798 = fmul <2 x float> %793, %795
  %799 = insertelement <2 x float> undef, float %780, i32 0
  %800 = insertelement <2 x float> %799, float %782, i32 1
  %801 = fadd <2 x float> %800, %798
  %802 = load float, float* %23, align 4, !alias.scope !1872, !noalias !1867
  %803 = load float, float* %24, align 4, !alias.scope !1877, !noalias !1867
  %804 = load float, float* %25, align 4, !alias.scope !1882, !noalias !1867
  %805 = load float, float* %26, align 4, !alias.scope !1887, !noalias !1867
  %806 = fmul float %797, %805
  %807 = load float, float* %29, align 4, !alias.scope !1892, !noalias !1867
  %808 = insertelement <2 x float> undef, float %802, i32 0
  %809 = insertelement <2 x float> %808, float %807, i32 1
  %810 = fmul <2 x float> %809, %801
  %811 = extractelement <2 x float> %810, i32 0
  %812 = fadd float %811, %806
  %813 = load float, float* %27, align 4, !alias.scope !1897, !noalias !1867
  %814 = fmul float %797, %813
  %815 = load float, float* %30, align 4, !alias.scope !1902, !noalias !1867
  %816 = insertelement <2 x float> undef, float %803, i32 0
  %817 = insertelement <2 x float> %816, float %815, i32 1
  %818 = fmul <2 x float> %801, %817
  %819 = extractelement <2 x float> %818, i32 0
  %820 = fadd float %819, %814
  %821 = load float, float* %28, align 4, !alias.scope !1907, !noalias !1867
  %822 = fmul float %797, %821
  %823 = load float, float* %31, align 4, !alias.scope !1912, !noalias !1867
  %824 = insertelement <2 x float> undef, float %804, i32 0
  %825 = insertelement <2 x float> %824, float %823, i32 1
  %826 = fmul <2 x float> %801, %825
  %827 = extractelement <2 x float> %826, i32 0
  %828 = fadd float %827, %822
  %829 = extractelement <2 x float> %810, i32 1
  %830 = fadd float %812, %829
  %831 = extractelement <2 x float> %818, i32 1
  %832 = fadd float %820, %831
  %833 = extractelement <2 x float> %826, i32 1
  %834 = fadd float %828, %833
  %835 = fcmp ugt float %830, 0x3EE4F8B580000000
  %836 = load float, float* %32, align 8
  %837 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %830, float %836) #12
  %838 = select i1 %835, float %837, float 0.000000e+00
  store float %838, float* %774, align 4, !alias.scope !1917
  %839 = fcmp ugt float %832, 0x3EE4F8B580000000
  %840 = load float, float* %32, align 8
  %841 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %832, float %840) #12
  %842 = select i1 %839, float %841, float 0.000000e+00
  store float %842, float* %776, align 4, !alias.scope !1920
  %843 = fcmp ugt float %834, 0x3EE4F8B580000000
  %844 = load float, float* %32, align 8
  %845 = tail call float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float %834, float %844) #12
  %846 = select i1 %843, float %845, float 0.000000e+00
  store float %846, float* %778, align 4, !alias.scope !1923
  %847 = add nuw i64 %773, 1
  %848 = load i64, i64* %16, align 8
  %849 = icmp ult i64 %847, %848
  br i1 %849, label %772, label %853

850:                                              ; preds = %73
  %851 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 173) #12
  %852 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

853:                                              ; preds = %772, %685, %499, %292, %136, %78, %75, %133, %289, %496, %682, %769
  %854 = add nuw i64 %35, 1
  %855 = load i64, i64* %4, align 8
  %856 = icmp ult i64 %854, %855
  br i1 %856, label %34, label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR12FloatToRGBA8ERKNS_6Image3IfEERKNS_4RectEbPKNS_5PlaneIfEES7_S7_Phm(%"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i1 zeroext, %"class.jxl::Plane"* readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i8* noalias nocapture, i64) #8 {
  %9 = select i1 %2, i64 4, i64 3
  %10 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %50, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #12
  %23 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = ptrtoint i8* %26 to i64
  %28 = and i64 %27, 63
  %29 = icmp eq i64 %28, 0
  tail call void @llvm.assume(i1 %29) #12
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = icmp eq %"class.jxl::Plane"* %3, null
  %36 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, %9
  %47 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, 0
  br label %51

50:                                               ; preds = %92, %8
  ret void

51:                                               ; preds = %13, %92
  %52 = phi i64 [ 0, %13 ], [ %93, %92 ]
  %53 = add i64 %15, %52
  %54 = mul i64 %17, %53
  %55 = getelementptr inbounds i8, i8* %19, i64 %54
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 63
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #12
  %59 = bitcast i8* %55 to float*
  %60 = getelementptr inbounds float, float* %59, i64 %24
  %61 = getelementptr inbounds i8, i8* %26, i64 %54
  %62 = ptrtoint i8* %61 to i64
  %63 = and i64 %62, 63
  %64 = icmp eq i64 %63, 0
  tail call void @llvm.assume(i1 %64) #12
  %65 = bitcast i8* %61 to float*
  %66 = getelementptr inbounds float, float* %65, i64 %24
  %67 = getelementptr inbounds i8, i8* %31, i64 %54
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #12
  %71 = bitcast i8* %67 to float*
  %72 = getelementptr inbounds float, float* %71, i64 %24
  br i1 %35, label %84, label %73

73:                                               ; preds = %51
  %74 = add i64 %37, %52
  %75 = load i8*, i8** %38, align 8
  %76 = load i64, i64* %39, align 8
  %77 = mul i64 %76, %74
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = ptrtoint i8* %78 to i64
  %80 = and i64 %79, 63
  %81 = icmp eq i64 %80, 0
  tail call void @llvm.assume(i1 %81) #12
  %82 = bitcast i8* %78 to float*
  %83 = getelementptr inbounds float, float* %82, i64 %41
  br label %84

84:                                               ; preds = %51, %73
  %85 = phi float* [ %83, %73 ], [ null, %51 ]
  br i1 %49, label %92, label %86

86:                                               ; preds = %84
  %87 = add i64 %43, %52
  %88 = mul i64 %87, %7
  %89 = add i64 %88, %46
  %90 = icmp eq float* %85, null
  %91 = getelementptr inbounds i8, i8* %6, i64 %89
  br label %95

92:                                               ; preds = %286, %84
  %93 = add nuw i64 %52, 1
  %94 = icmp ult i64 %93, %11
  br i1 %94, label %51, label %50

95:                                               ; preds = %286, %86
  %96 = phi i64 [ 0, %86 ], [ %287, %286 ]
  %97 = getelementptr inbounds float, float* %60, i64 %96
  %98 = load float, float* %97, align 4, !alias.scope !1926
  %99 = fcmp ogt float %98, 0.000000e+00
  br i1 %99, label %100, label %102

100:                                              ; preds = %95
  %101 = fcmp uno float %98, 0.000000e+00
  br i1 %101, label %106, label %102

102:                                              ; preds = %95, %100
  %103 = phi float [ %98, %100 ], [ 0.000000e+00, %95 ]
  %104 = fcmp olt float %103, 1.000000e+00
  %105 = select i1 %104, float %103, float 1.000000e+00
  br label %106

106:                                              ; preds = %100, %102
  %107 = phi float [ %105, %102 ], [ 1.000000e+00, %100 ]
  %108 = fmul float %107, 2.550000e+02
  %109 = getelementptr inbounds float, float* %66, i64 %96
  %110 = load float, float* %109, align 4, !alias.scope !1929
  %111 = fcmp ogt float %110, 0.000000e+00
  br i1 %111, label %112, label %114

112:                                              ; preds = %106
  %113 = fcmp uno float %110, 0.000000e+00
  br i1 %113, label %118, label %114

114:                                              ; preds = %106, %112
  %115 = phi float [ %110, %112 ], [ 0.000000e+00, %106 ]
  %116 = fcmp olt float %115, 1.000000e+00
  %117 = select i1 %116, float %115, float 1.000000e+00
  br label %118

118:                                              ; preds = %112, %114
  %119 = phi float [ %117, %114 ], [ 1.000000e+00, %112 ]
  %120 = fmul float %119, 2.550000e+02
  %121 = getelementptr inbounds float, float* %72, i64 %96
  %122 = load float, float* %121, align 4, !alias.scope !1932
  %123 = fcmp ogt float %122, 0.000000e+00
  br i1 %123, label %124, label %126

124:                                              ; preds = %118
  %125 = fcmp uno float %122, 0.000000e+00
  br i1 %125, label %130, label %126

126:                                              ; preds = %118, %124
  %127 = phi float [ %122, %124 ], [ 0.000000e+00, %118 ]
  %128 = fcmp olt float %127, 1.000000e+00
  %129 = select i1 %128, float %127, float 1.000000e+00
  br label %130

130:                                              ; preds = %124, %126
  %131 = phi float [ %129, %126 ], [ 1.000000e+00, %124 ]
  %132 = fmul float %131, 2.550000e+02
  br i1 %90, label %146, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds float, float* %85, i64 %96
  %135 = load float, float* %134, align 4, !alias.scope !1935
  %136 = fcmp ogt float %135, 0.000000e+00
  br i1 %136, label %137, label %139

137:                                              ; preds = %133
  %138 = fcmp uno float %135, 0.000000e+00
  br i1 %138, label %143, label %139

139:                                              ; preds = %133, %137
  %140 = phi float [ %135, %137 ], [ 0.000000e+00, %133 ]
  %141 = fcmp olt float %140, 1.000000e+00
  %142 = select i1 %141, float %140, float 1.000000e+00
  br label %143

143:                                              ; preds = %137, %139
  %144 = phi float [ %142, %139 ], [ 1.000000e+00, %137 ]
  %145 = fmul float %144, 2.550000e+02
  br label %146

146:                                              ; preds = %130, %143
  %147 = phi float [ %145, %143 ], [ 2.550000e+02, %130 ]
  %148 = tail call float @llvm.fabs.f32(float %108) #12
  %149 = bitcast float %108 to i32
  %150 = icmp slt i32 %149, 0
  %151 = fcmp olt float %148, 0x4160000000000000
  br i1 %151, label %156, label %152

152:                                              ; preds = %146
  %153 = fcmp ugt float %148, 0x41E0000000000000
  br i1 %153, label %178, label %154

154:                                              ; preds = %152
  %155 = fptosi float %108 to i32
  br label %173

156:                                              ; preds = %146
  %157 = fcmp olt float %108, 0.000000e+00
  %158 = select i1 %157, float -5.000000e-01, float 5.000000e-01
  %159 = fadd float %108, %158
  %160 = fptosi float %159 to i32
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %176, label %162

162:                                              ; preds = %156
  %163 = and i32 %160, 1
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %173, label %165

165:                                              ; preds = %162
  %166 = sitofp i32 %160 to float
  %167 = fsub float %166, %108
  %168 = tail call float @llvm.fabs.f32(float %167) #12
  %169 = fcmp oeq float %168, 5.000000e-01
  br i1 %169, label %170, label %173

170:                                              ; preds = %165
  %171 = select i1 %150, i32 -1, i32 1
  %172 = sub nsw i32 %160, %171
  br label %173

173:                                              ; preds = %154, %162, %165, %170
  %174 = phi i32 [ %172, %170 ], [ %155, %154 ], [ %160, %162 ], [ %160, %165 ]
  %175 = icmp ult i32 %174, 255
  br i1 %175, label %176, label %178

176:                                              ; preds = %156, %173
  %177 = phi i32 [ %174, %173 ], [ 0, %156 ]
  br label %178

178:                                              ; preds = %152, %173, %176
  %179 = phi i32 [ %177, %176 ], [ 255, %173 ], [ 255, %152 ]
  %180 = trunc i32 %179 to i8
  %181 = tail call float @llvm.fabs.f32(float %120) #12
  %182 = bitcast float %120 to i32
  %183 = icmp slt i32 %182, 0
  %184 = fcmp olt float %181, 0x4160000000000000
  br i1 %184, label %189, label %185

185:                                              ; preds = %178
  %186 = fcmp ugt float %181, 0x41E0000000000000
  br i1 %186, label %211, label %187

187:                                              ; preds = %185
  %188 = fptosi float %120 to i32
  br label %206

189:                                              ; preds = %178
  %190 = fcmp olt float %120, 0.000000e+00
  %191 = select i1 %190, float -5.000000e-01, float 5.000000e-01
  %192 = fadd float %120, %191
  %193 = fptosi float %192 to i32
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %209, label %195

195:                                              ; preds = %189
  %196 = and i32 %193, 1
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %206, label %198

198:                                              ; preds = %195
  %199 = sitofp i32 %193 to float
  %200 = fsub float %199, %120
  %201 = tail call float @llvm.fabs.f32(float %200) #12
  %202 = fcmp oeq float %201, 5.000000e-01
  br i1 %202, label %203, label %206

203:                                              ; preds = %198
  %204 = select i1 %183, i32 -1, i32 1
  %205 = sub nsw i32 %193, %204
  br label %206

206:                                              ; preds = %187, %195, %198, %203
  %207 = phi i32 [ %205, %203 ], [ %188, %187 ], [ %193, %195 ], [ %193, %198 ]
  %208 = icmp ult i32 %207, 255
  br i1 %208, label %209, label %211

209:                                              ; preds = %189, %206
  %210 = phi i32 [ %207, %206 ], [ 0, %189 ]
  br label %211

211:                                              ; preds = %185, %206, %209
  %212 = phi i32 [ %210, %209 ], [ 255, %206 ], [ 255, %185 ]
  %213 = trunc i32 %212 to i8
  %214 = tail call float @llvm.fabs.f32(float %132) #12
  %215 = bitcast float %132 to i32
  %216 = icmp slt i32 %215, 0
  %217 = fcmp olt float %214, 0x4160000000000000
  br i1 %217, label %222, label %218

218:                                              ; preds = %211
  %219 = fcmp ugt float %214, 0x41E0000000000000
  br i1 %219, label %244, label %220

220:                                              ; preds = %218
  %221 = fptosi float %132 to i32
  br label %239

222:                                              ; preds = %211
  %223 = fcmp olt float %132, 0.000000e+00
  %224 = select i1 %223, float -5.000000e-01, float 5.000000e-01
  %225 = fadd float %132, %224
  %226 = fptosi float %225 to i32
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %242, label %228

228:                                              ; preds = %222
  %229 = and i32 %226, 1
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %239, label %231

231:                                              ; preds = %228
  %232 = sitofp i32 %226 to float
  %233 = fsub float %232, %132
  %234 = tail call float @llvm.fabs.f32(float %233) #12
  %235 = fcmp oeq float %234, 5.000000e-01
  br i1 %235, label %236, label %239

236:                                              ; preds = %231
  %237 = select i1 %216, i32 -1, i32 1
  %238 = sub nsw i32 %226, %237
  br label %239

239:                                              ; preds = %220, %228, %231, %236
  %240 = phi i32 [ %238, %236 ], [ %221, %220 ], [ %226, %228 ], [ %226, %231 ]
  %241 = icmp ult i32 %240, 255
  br i1 %241, label %242, label %244

242:                                              ; preds = %222, %239
  %243 = phi i32 [ %240, %239 ], [ 0, %222 ]
  br label %244

244:                                              ; preds = %218, %239, %242
  %245 = phi i32 [ %243, %242 ], [ 255, %239 ], [ 255, %218 ]
  %246 = trunc i32 %245 to i8
  %247 = tail call float @llvm.fabs.f32(float %147) #12
  %248 = bitcast float %147 to i32
  %249 = icmp slt i32 %248, 0
  %250 = fcmp olt float %247, 0x4160000000000000
  br i1 %250, label %255, label %251

251:                                              ; preds = %244
  %252 = fcmp ugt float %247, 0x41E0000000000000
  br i1 %252, label %277, label %253

253:                                              ; preds = %251
  %254 = fptosi float %147 to i32
  br label %272

255:                                              ; preds = %244
  %256 = fcmp olt float %147, 0.000000e+00
  %257 = select i1 %256, float -5.000000e-01, float 5.000000e-01
  %258 = fadd float %147, %257
  %259 = fptosi float %258 to i32
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %275, label %261

261:                                              ; preds = %255
  %262 = and i32 %259, 1
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %272, label %264

264:                                              ; preds = %261
  %265 = sitofp i32 %259 to float
  %266 = fsub float %265, %147
  %267 = tail call float @llvm.fabs.f32(float %266) #12
  %268 = fcmp oeq float %267, 5.000000e-01
  br i1 %268, label %269, label %272

269:                                              ; preds = %264
  %270 = select i1 %249, i32 -1, i32 1
  %271 = sub nsw i32 %259, %270
  br label %272

272:                                              ; preds = %253, %261, %264, %269
  %273 = phi i32 [ %271, %269 ], [ %254, %253 ], [ %259, %261 ], [ %259, %264 ]
  %274 = icmp ult i32 %273, 255
  br i1 %274, label %275, label %277

275:                                              ; preds = %255, %272
  %276 = phi i32 [ %273, %272 ], [ 0, %255 ]
  br label %277

277:                                              ; preds = %275, %272, %251
  %278 = phi i32 [ %276, %275 ], [ 255, %272 ], [ 255, %251 ]
  %279 = mul i64 %96, %9
  %280 = getelementptr inbounds i8, i8* %91, i64 %279
  store i8 %180, i8* %280, align 1
  %281 = getelementptr inbounds i8, i8* %280, i64 1
  store i8 %213, i8* %281, align 1
  %282 = getelementptr inbounds i8, i8* %280, i64 2
  store i8 %246, i8* %282, align 1
  br i1 %2, label %283, label %286

283:                                              ; preds = %277
  %284 = trunc i32 %278 to i8
  %285 = getelementptr inbounds i8, i8* %280, i64 3
  store i8 %284, i8* %285, align 1
  br label %286

286:                                              ; preds = %283, %277
  %287 = add nuw i64 %96, 1
  %288 = icmp eq i64 %287, %48
  br i1 %288, label %92, label %95
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl7UndoXYBERKNS_6Image3IfEEPS1_RKNS_18OutputEncodingInfoEPNS_10ThreadPoolE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"*, %"struct.jxl::OutputEncodingInfo"* dereferenceable(352), %"class.jxl::ThreadPool"* nocapture readonly) local_unnamed_addr #8 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::Image3"*, align 8
  %9 = alloca %class.anon.43, align 8
  store %"class.jxl::Image3"* %1, %"class.jxl::Image3"** %8, align 8
  %10 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #12, !noalias !1938
  %11 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  %12 = bitcast %"class.jxl::Image3"* %0 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 8, !noalias !1938
  %14 = zext <2 x i32> %13 to <2 x i64>
  %15 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false) #12, !noalias !1938
  %16 = bitcast i64* %15 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %16, align 8, !noalias !1938
  %17 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #12, !noalias !1938
  %18 = bitcast %"class.jxl::Image3"* %1 to <2 x i32>*
  %19 = load <2 x i32>, <2 x i32>* %18, align 8, !alias.scope !1938
  %20 = zext <2 x i32> %19 to <2 x i64>
  %21 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 16, i1 false) #12, !noalias !1938
  %22 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> %20, <2 x i64>* %22, align 8, !noalias !1938
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"class.jxl::Image3"* %1) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #12, !noalias !1938
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #12, !noalias !1938
  %23 = load i32, i32* %11, align 4
  %24 = bitcast %class.anon.43* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #12
  %25 = getelementptr inbounds %class.anon.43, %class.anon.43* %9, i64 0, i32 0
  store %"class.jxl::Image3"** %8, %"class.jxl::Image3"*** %25, align 8
  %26 = getelementptr inbounds %class.anon.43, %class.anon.43* %9, i64 0, i32 1
  store %"struct.jxl::OutputEncodingInfo"* %2, %"struct.jxl::OutputEncodingInfo"** %26, align 8
  %27 = icmp eq i32 %23, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %4
  %29 = bitcast %"class.jxl::ThreadPool::RunCallState"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #12
  %30 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %30, align 8
  store %class.anon.43* %9, %class.anon.43** %31, align 8
  %32 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %33 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %32, align 8
  %34 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 %33(i8* %35, i8* nonnull %29, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_7UndoXYBERKNS_6Image3IfEEPS5_RKNS_18OutputEncodingInfoEPS0_E3$_8E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_7UndoXYBERKNS_6Image3IfEEPS5_RKNS_18OutputEncodingInfoEPS0_E3$_8E12CallDataFuncEPvjm", i32 0, i32 %23) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #12
  br label %37

37:                                               ; preds = %4, %28
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl20EnsurePaddingInPlaceEPNS_6Image3IfEERKNS_4RectES5_mmmm(%"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i64, i64, i64, i64) local_unnamed_addr #8 {
  %8 = alloca %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", align 8
  %9 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 64, i1 false)
  %10 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 56, i1 false) #12
  store i32 2, i32* %10, align 8
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, %6
  %14 = select i1 %13, i64 %6, i64 %12
  %15 = sub i64 0, %14
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %4, %19
  %21 = sub i64 %20, %12
  %22 = icmp ult i64 %21, %6
  %23 = select i1 %22, i64 %21, i64 %6
  %24 = add i64 %23, %17
  %25 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, %5
  br i1 %27, label %34, label %28

28:                                               ; preds = %7
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %26, %5
  %32 = add i64 %31, %30
  %33 = icmp ugt i64 %32, %3
  br i1 %33, label %34, label %38

34:                                               ; preds = %28, %7
  %35 = shl i64 %5, 1
  %36 = icmp ugt i64 %35, %3
  %37 = zext i1 %36 to i32
  br label %38

38:                                               ; preds = %34, %28
  %39 = phi i32 [ 2, %28 ], [ %37, %34 ]
  store i32 %39, i32* %10, align 8
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 6
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %44, %5
  %46 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 3
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 2
  store i64 %45, i64* %47, align 8
  br i1 %27, label %48, label %50

48:                                               ; preds = %38
  %49 = sub i64 %44, %26
  store i64 %49, i64* %46, align 8
  br label %50

50:                                               ; preds = %48, %38
  %51 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %44, %5
  %54 = add i64 %53, %52
  %55 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 5
  store i64 %54, i64* %55, align 8
  %56 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 4
  store i64 %54, i64* %56, align 8
  %57 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %26, %5
  %60 = add i64 %59, %58
  %61 = icmp ugt i64 %60, %3
  br i1 %61, label %62, label %65

62:                                               ; preds = %50
  %63 = sub i64 %3, %26
  %64 = add i64 %63, %44
  store i64 %64, i64* %56, align 8
  br label %65

65:                                               ; preds = %50, %62
  %66 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %66, align 8
  %67 = icmp sgt i64 %24, %15
  br i1 %67, label %68, label %73

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %8, i64 0, i32 1
  %70 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  br label %74

73:                                               ; preds = %74, %65
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #12
  ret void

74:                                               ; preds = %68, %74
  %75 = phi i64 [ %15, %68 ], [ %76, %74 ]
  store %"class.jxl::Plane"* %70, %"class.jxl::Plane"** %69, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %8, i64 %75) #12
  store %"class.jxl::Plane"* %71, %"class.jxl::Plane"** %69, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %8, i64 %75) #12
  store %"class.jxl::Plane"* %72, %"class.jxl::Plane"** %69, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %8, i64 %75) #12
  %76 = add nsw i64 %75, 1
  %77 = icmp slt i64 %76, %24
  br i1 %77, label %74, label %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17FinalizeImageRectEPNS_6Image3IfEERKNS_4RectERKNSt3__16vectorINS6_4pairIPNS_5PlaneIfEES3_EENS6_9allocatorISC_EEEEPNS_18PassesDecoderStateEmPNS_11ImageBundleES5_(%"class.jxl::Image3"*, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.std::__1::vector"* readonly dereferenceable(24), %"struct.jxl::PassesDecoderState"*, i64, %"class.jxl::ImageBundle"* noalias, %"class.jxl::Rect"* readonly dereferenceable(32)) local_unnamed_addr #8 {
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", align 8
  %10 = alloca %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", align 8
  %11 = alloca %"class.jxl::Rect", align 8
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = alloca %"class.std::__1::vector.297", align 8
  %14 = alloca %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", align 8
  %15 = alloca %"class.std::__1::vector.304", align 8
  %16 = alloca %"class.jxl::Rect", align 8
  %17 = alloca %"class.jxl::Rect", align 8
  %18 = alloca %"class.jxl::Rect", align 8
  %19 = alloca %"class.jxl::Rect", align 8
  %20 = alloca %"class.jxl::Rect", align 8
  %21 = alloca %"class.jxl::Rect", align 8
  %22 = alloca %"class.jxl::Rect", align 8
  %23 = alloca %"class.jxl::Rect", align 8
  %24 = alloca %"class.jxl::Rect", align 8
  %25 = alloca %"class.jxl::Rect", align 8
  %26 = alloca %"class.jxl::Rect", align 8
  %27 = alloca %"class.jxl::Rect", align 8
  %28 = alloca %"class.jxl::Rect", align 8
  %29 = alloca %"class.jxl::Rect", align 8
  %30 = alloca %"class.jxl::Rect", align 8
  %31 = alloca %"class.jxl::Rect", align 8
  %32 = alloca %"class.jxl::Rect", align 8
  %33 = alloca %"class.jxl::Rect", align 8
  %34 = alloca %"class.jxl::Rect", align 8
  %35 = alloca %"class.jxl::Rect", align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 1
  %37 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %36, align 8
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 25
  %39 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %38, align 8
  %40 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26
  %41 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2
  %42 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 14
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %53

45:                                               ; preds = %7
  %46 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 18, i32 0, i32 2
  %47 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %46, align 8
  %48 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %47, i64 0, i32 2
  %49 = load i8, i8* %48, align 8, !range !2
  %50 = icmp eq i8 %49, 0
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 10
  %52 = select i1 %50, %"class.jxl::Image3"* null, %"class.jxl::Image3"* %51
  br label %53

53:                                               ; preds = %45, %7
  %54 = phi %"class.jxl::Image3"* [ null, %7 ], [ %52, %45 ]
  %55 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 15
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %113, label %74

74:                                               ; preds = %53
  %75 = icmp ugt i64 %56, 1
  %76 = icmp ugt i64 %58, 1
  %77 = add i64 %60, %56
  %78 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 6
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %62, %58
  %81 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 7
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %77, 1
  %84 = icmp ule i64 %83, %79
  %85 = zext i1 %84 to i64
  %86 = add i64 %80, 1
  %87 = icmp ule i64 %86, %82
  %88 = zext i1 %87 to i64
  %89 = add i64 %77, 2
  %90 = icmp ugt i64 %89, %79
  %91 = select i1 %90, i64 %85, i64 2
  %92 = add i64 %80, 2
  %93 = icmp ugt i64 %92, %82
  %94 = select i1 %93, i64 %88, i64 2
  %95 = select i1 %75, i64 2, i64 0
  %96 = select i1 %76, i64 2, i64 0
  %97 = sub i64 %56, %95
  %98 = sub i64 %58, %96
  %99 = add i64 %60, %95
  %100 = add i64 %99, %91
  %101 = add i64 %62, %96
  %102 = add i64 %101, %94
  %103 = add nuw nsw i64 %95, 7
  %104 = and i64 %103, 8
  %105 = add nuw nsw i64 %104, 8
  %106 = sub nuw nsw i64 %105, %95
  %107 = or i64 %96, 8
  %108 = sub i64 %64, %95
  %109 = sub i64 %66, %96
  %110 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 29, i32 0, i32 0
  %111 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %110, align 8
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %111, i64 %4
  br label %113

113:                                              ; preds = %53, %74
  %114 = phi i64 [ %64, %53 ], [ %108, %74 ]
  %115 = phi i64 [ %66, %53 ], [ %109, %74 ]
  %116 = phi i64 [ %68, %53 ], [ %100, %74 ]
  %117 = phi i64 [ %70, %53 ], [ %102, %74 ]
  %118 = phi i64 [ %56, %53 ], [ %105, %74 ]
  %119 = phi i64 [ %58, %53 ], [ %107, %74 ]
  %120 = phi i64 [ %56, %53 ], [ %106, %74 ]
  %121 = phi i64 [ %58, %53 ], [ 8, %74 ]
  %122 = phi i64 [ %60, %53 ], [ %100, %74 ]
  %123 = phi i64 [ %62, %53 ], [ %102, %74 ]
  %124 = phi i64 [ %56, %53 ], [ %97, %74 ]
  %125 = phi i64 [ %58, %53 ], [ %98, %74 ]
  %126 = phi i64 [ 0, %53 ], [ %94, %74 ]
  %127 = phi i64 [ 0, %53 ], [ %96, %74 ]
  %128 = phi %"class.jxl::Image3"* [ %54, %53 ], [ %112, %74 ]
  %129 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %129) #12
  %130 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 0
  %131 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 1
  %132 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 2
  %133 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 3
  %134 = zext i32 %72 to i64
  %135 = mul i64 %56, %134
  %136 = mul i64 %58, %134
  %137 = mul i64 %60, %134
  %138 = mul i64 %62, %134
  %139 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 2
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 3
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %137, %135
  %144 = icmp ugt i64 %143, %140
  %145 = tail call i64 @llvm.usub.sat.i64(i64 %140, i64 %135) #12
  %146 = select i1 %144, i64 %145, i64 %137
  %147 = add i64 %138, %136
  %148 = icmp ugt i64 %147, %142
  %149 = tail call i64 @llvm.usub.sat.i64(i64 %142, i64 %136) #12
  %150 = select i1 %148, i64 %149, i64 %138
  store i64 %135, i64* %130, align 8
  store i64 %136, i64* %131, align 8
  store i64 %146, i64* %132, align 8
  store i64 %150, i64* %133, align 8
  %151 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %151) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 -86, i64 64, i1 false)
  %152 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 56, i1 false) #12
  store i32 2, i32* %152, align 8
  %153 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %153) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 -86, i64 64, i1 false)
  %154 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 56, i1 false) #12
  store i32 2, i32* %154, align 8
  %155 = bitcast %"class.jxl::Rect"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %155) #12
  %156 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %11, i64 0, i32 0
  %157 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %11, i64 0, i32 1
  %158 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %11, i64 0, i32 2
  %159 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %11, i64 0, i32 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 0, i64 32, i1 false) #12
  %160 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26, i32 11
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %113
  %164 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26, i32 2
  %165 = load i8, i8* %164, align 1, !range !2
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %174, label %167

167:                                              ; preds = %163, %113
  %168 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 24, i32 0, i32 0
  %169 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %168, align 8
  %170 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %169, i64 %4
  %171 = and i64 %114, 7
  %172 = sub i64 %124, %171
  %173 = add i64 %122, %171
  store i64 %172, i64* %156, align 8
  store i64 %125, i64* %157, align 8
  store i64 %173, i64* %158, align 8
  store i64 %123, i64* %159, align 8
  br label %174

174:                                              ; preds = %163, %167
  %175 = phi %"class.jxl::FilterPipeline"* [ %170, %167 ], [ null, %163 ]
  br i1 %44, label %176, label %182

176:                                              ; preds = %174
  %177 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 18, i32 0, i32 2
  %178 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %177, align 8
  %179 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %178, i64 0, i32 2
  %180 = load i8, i8* %179, align 8, !range !2
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %182, label %209

182:                                              ; preds = %174, %176
  %183 = tail call i32 @llvm.ctlz.i32(i32 %72, i1 true) #12, !range !1941
  %184 = xor i32 %183, 31
  %185 = zext i32 %184 to i64
  %186 = tail call i32 @llvm.ctpop.i32(i32 %72) #12, !range !1941
  %187 = icmp ugt i32 %186, 1
  %188 = zext i1 %187 to i64
  %189 = add nuw nsw i64 %188, %185
  %190 = icmp eq %"class.jxl::Image3"* %128, %54
  %191 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 30, i64 %189, i32 0, i32 0
  %192 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %191, align 8
  %193 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %192, i64 %4
  %194 = select i1 %190, i64 0, i64 %120
  %195 = select i1 %190, i64 0, i64 %121
  %196 = select i1 %190, %"class.jxl::Image3"* %193, %"class.jxl::Image3"* %128
  %197 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %192, i64 %4
  %198 = icmp eq %"class.jxl::FilterPipeline"* %175, null
  %199 = and i1 %198, %73
  %200 = select i1 %199, i64 %114, i64 0
  %201 = select i1 %199, i64 %115, i64 0
  %202 = select i1 %199, i64 %116, i64 %146
  %203 = select i1 %199, i64 %114, i64 %194
  %204 = select i1 %199, i64 %115, i64 %195
  %205 = select i1 %199, i64 %116, i64 %122
  %206 = select i1 %199, i64 %117, i64 %123
  %207 = select i1 %199, %"class.jxl::Image3"* %0, %"class.jxl::Image3"* %197
  %208 = select i1 %199, %"class.jxl::Image3"* %0, %"class.jxl::Image3"* %196
  br label %209

209:                                              ; preds = %182, %176
  %210 = phi i64 [ %135, %176 ], [ %200, %182 ]
  %211 = phi i64 [ %136, %176 ], [ %201, %182 ]
  %212 = phi i64 [ %146, %176 ], [ %202, %182 ]
  %213 = phi i64 [ %120, %176 ], [ %203, %182 ]
  %214 = phi i64 [ %121, %176 ], [ %204, %182 ]
  %215 = phi i64 [ %122, %176 ], [ %205, %182 ]
  %216 = phi i64 [ %123, %176 ], [ %206, %182 ]
  %217 = phi %"class.jxl::Image3"* [ %54, %176 ], [ %207, %182 ]
  %218 = phi %"class.jxl::Image3"* [ %128, %176 ], [ %208, %182 ]
  %219 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %39, i64 0, i32 0, i32 17, i32 0, i32 0
  %220 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %219, align 8
  %221 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %39, i64 0, i32 0, i32 17, i32 0, i32 1
  %222 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %221, align 8
  %223 = icmp eq %"struct.jxl::ExtraChannelInfo"* %220, %222
  %224 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %220 to i64
  %225 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %222 to i64
  br i1 %223, label %234, label %228

226:                                              ; preds = %228
  %227 = icmp eq %"struct.jxl::ExtraChannelInfo"* %233, %222
  br i1 %227, label %234, label %228

228:                                              ; preds = %209, %226
  %229 = phi %"struct.jxl::ExtraChannelInfo"* [ %233, %226 ], [ %220, %209 ]
  %230 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %229, i64 0, i32 2
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %231, 0
  %233 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %229, i64 1
  br i1 %232, label %234, label %226

234:                                              ; preds = %226, %228, %209
  %235 = phi %"struct.jxl::ExtraChannelInfo"* [ null, %209 ], [ null, %226 ], [ %229, %228 ]
  %236 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %235 to i64
  %237 = sub i64 %236, %224
  %238 = sdiv exact i64 %237, 96
  %239 = sub i64 %225, %224
  %240 = sdiv exact i64 %239, 96
  %241 = icmp ult i64 %238, %240
  br i1 %241, label %242, label %274

242:                                              ; preds = %234
  %243 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %244 = bitcast %"struct.std::__1::pair"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.std::__1::vector"* %2 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = sub i64 %245, %247
  %249 = sdiv exact i64 %248, 40
  %250 = icmp ult i64 %238, %249
  %251 = inttoptr i64 %247 to %"struct.std::__1::pair"*
  br i1 %250, label %255, label %252

252:                                              ; preds = %242
  %253 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 595, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0)) #12
  %254 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

255:                                              ; preds = %242
  %256 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 16, i32 0, i32 0
  %257 = load i32*, i32** %256, align 8
  %258 = getelementptr inbounds i32, i32* %257, i64 %238
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %261, label %270

261:                                              ; preds = %255
  %262 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %251, i64 %238, i32 0
  %263 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %262, align 8
  %264 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %251, i64 %238, i32 1, i32 0
  %265 = load i64, i64* %264, align 8
  %266 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %251, i64 %238, i32 1, i32 1
  %267 = load i64, i64* %266, align 8
  %268 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %251, i64 %238, i32 1, i32 2
  %269 = load i64, i64* %268, align 8
  br label %274

270:                                              ; preds = %255
  %271 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 12, i32 0, i32 0
  %272 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %271, align 8
  %273 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %272, i64 %238
  br label %274

274:                                              ; preds = %261, %270, %234
  %275 = phi i64 [ %265, %261 ], [ %135, %270 ], [ %135, %234 ]
  %276 = phi i64 [ %267, %261 ], [ %136, %270 ], [ %136, %234 ]
  %277 = phi i64 [ %269, %261 ], [ %146, %270 ], [ %146, %234 ]
  %278 = phi %"class.jxl::Plane"* [ %263, %261 ], [ %273, %270 ], [ null, %234 ]
  br i1 %73, label %328, label %279

279:                                              ; preds = %274
  %280 = tail call i32 @llvm.ctlz.i32(i32 %72, i1 true) #12, !range !1941
  %281 = xor i32 %280, 31
  %282 = zext i32 %281 to i64
  %283 = tail call i32 @llvm.ctpop.i32(i32 %72) #12, !range !1941
  %284 = icmp ugt i32 %283, 1
  %285 = zext i1 %284 to i64
  %286 = add nsw i64 %282, -1
  %287 = add nsw i64 %286, %285
  %288 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 2, i64 %287
  %289 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 6
  %290 = load i64, i64* %289, align 8
  %291 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 7
  %292 = load i64, i64* %291, align 8
  %293 = icmp ult i64 %58, 2
  %294 = select i1 %293, i64 %58, i64 2
  %295 = sub nsw i64 0, %294
  %296 = sub i64 %292, %62
  %297 = sub i64 %296, %58
  %298 = icmp ult i64 %297, 2
  %299 = select i1 %298, i64 %297, i64 2
  %300 = add i64 %299, %62
  %301 = icmp ult i64 %56, 2
  br i1 %301, label %306, label %302

302:                                              ; preds = %279
  %303 = add i64 %60, %56
  %304 = add i64 %303, 2
  %305 = icmp ugt i64 %304, %290
  br i1 %305, label %306, label %309

306:                                              ; preds = %302, %279
  %307 = icmp ult i64 %290, 4
  %308 = zext i1 %307 to i32
  br label %309

309:                                              ; preds = %306, %302
  %310 = phi i32 [ 2, %302 ], [ %308, %306 ]
  store i32 %310, i32* %152, align 8
  %311 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 6
  store i64 %119, i64* %311, align 8
  %312 = add i64 %118, -2
  %313 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 3
  store i64 %312, i64* %313, align 8
  %314 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 2
  store i64 %312, i64* %314, align 8
  %315 = sub i64 %118, %56
  br i1 %301, label %316, label %317

316:                                              ; preds = %309
  store i64 %315, i64* %313, align 8
  br label %317

317:                                              ; preds = %309, %316
  %318 = add i64 %60, 2
  %319 = add i64 %318, %118
  %320 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 5
  store i64 %319, i64* %320, align 8
  %321 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 4
  %322 = add i64 %60, %56
  %323 = add i64 %322, 2
  %324 = icmp ugt i64 %323, %290
  %325 = add i64 %315, %290
  %326 = select i1 %324, i64 %325, i64 %319
  store i64 %326, i64* %321, align 8
  %327 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 0
  store %"class.jxl::Image3"* %218, %"class.jxl::Image3"** %327, align 8
  br label %328

328:                                              ; preds = %274, %317
  %329 = phi i64 [ 0, %274 ], [ %300, %317 ]
  %330 = phi i64 [ 0, %274 ], [ %295, %317 ]
  %331 = phi %"struct.jxl::Upsampler"* [ null, %274 ], [ %288, %317 ]
  %332 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %332) #12
  %333 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %334 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %335 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %332, i8 0, i64 24, i1 false) #12
  %336 = bitcast %"class.std::__1::vector.297"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %336) #12
  %337 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %13, i64 0, i32 0, i32 0
  %338 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %13, i64 0, i32 0, i32 1
  %339 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %336, i8 0, i64 24, i1 false) #12
  %340 = icmp ne i32 %72, 1
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 16, i32 0, i32 0
  %343 = load i32*, i32** %342, align 8
  %344 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 16, i32 0, i32 1
  %345 = load i32*, i32** %344, align 8
  %346 = icmp eq i32* %343, %345
  br i1 %346, label %371, label %347

347:                                              ; preds = %328
  %348 = ptrtoint i32* %343 to i64
  %349 = getelementptr i32, i32* %345, i64 -1
  %350 = ptrtoint i32* %349 to i64
  %351 = sub i64 %350, %348
  %352 = lshr i64 %351, 2
  %353 = add nuw nsw i64 %352, 1
  %354 = and i64 %353, 7
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %366, label %356

356:                                              ; preds = %347, %356
  %357 = phi i8 [ %362, %356 ], [ %341, %347 ]
  %358 = phi i32* [ %363, %356 ], [ %343, %347 ]
  %359 = phi i64 [ %364, %356 ], [ %354, %347 ]
  %360 = load i32, i32* %358, align 4
  %361 = icmp eq i32 %360, %72
  %362 = select i1 %361, i8 %357, i8 0
  %363 = getelementptr inbounds i32, i32* %358, i64 1
  %364 = add i64 %359, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %356, !llvm.loop !1942

366:                                              ; preds = %356, %347
  %367 = phi i8 [ undef, %347 ], [ %362, %356 ]
  %368 = phi i8 [ %341, %347 ], [ %362, %356 ]
  %369 = phi i32* [ %343, %347 ], [ %363, %356 ]
  %370 = icmp ult i64 %351, 28
  br i1 %370, label %371, label %400

371:                                              ; preds = %366, %400, %328
  %372 = phi i8 [ %341, %328 ], [ %367, %366 ], [ %433, %400 ]
  %373 = and i8 %372, 1
  %374 = icmp ne i8 %373, 0
  %375 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %376 = bitcast %"struct.std::__1::pair"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.std::__1::vector"* %2 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = sub i64 %377, %379
  %381 = sdiv exact i64 %380, 40
  %382 = inttoptr i64 %379 to %"struct.std::__1::pair"*
  br i1 %374, label %665, label %383

383:                                              ; preds = %371
  %384 = icmp eq i64 %380, 0
  br i1 %384, label %908, label %385

385:                                              ; preds = %383
  %386 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14 to i8*
  %387 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 7
  %388 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %389 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 6
  %390 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 3
  %391 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 2
  %392 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 5
  %393 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 4
  %394 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %14, i64 0, i32 1
  %395 = bitcast %"class.jxl::Plane"** %394 to i64*
  %396 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 12, i32 0, i32 0
  %397 = bitcast %"struct.std::__1::pair"** %334 to i64*
  %398 = bitcast %"class.std::__1::vector"* %12 to i64*
  %399 = bitcast %"struct.std::__1::pair"** %335 to i64*
  br label %436

400:                                              ; preds = %366, %400
  %401 = phi i8 [ %433, %400 ], [ %368, %366 ]
  %402 = phi i32* [ %434, %400 ], [ %369, %366 ]
  %403 = load i32, i32* %402, align 4
  %404 = icmp eq i32 %403, %72
  %405 = getelementptr inbounds i32, i32* %402, i64 1
  %406 = load i32, i32* %405, align 4
  %407 = icmp eq i32 %406, %72
  %408 = and i1 %407, %404
  %409 = getelementptr inbounds i32, i32* %402, i64 2
  %410 = load i32, i32* %409, align 4
  %411 = icmp eq i32 %410, %72
  %412 = and i1 %411, %408
  %413 = getelementptr inbounds i32, i32* %402, i64 3
  %414 = load i32, i32* %413, align 4
  %415 = icmp eq i32 %414, %72
  %416 = and i1 %415, %412
  %417 = getelementptr inbounds i32, i32* %402, i64 4
  %418 = load i32, i32* %417, align 4
  %419 = icmp eq i32 %418, %72
  %420 = and i1 %419, %416
  %421 = getelementptr inbounds i32, i32* %402, i64 5
  %422 = load i32, i32* %421, align 4
  %423 = icmp eq i32 %422, %72
  %424 = and i1 %423, %420
  %425 = getelementptr inbounds i32, i32* %402, i64 6
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, %72
  %428 = and i1 %427, %424
  %429 = getelementptr inbounds i32, i32* %402, i64 7
  %430 = load i32, i32* %429, align 4
  %431 = icmp eq i32 %430, %72
  %432 = and i1 %431, %428
  %433 = select i1 %432, i8 %401, i8 0
  %434 = getelementptr inbounds i32, i32* %402, i64 8
  %435 = icmp eq i32* %434, %345
  br i1 %435, label %371, label %400

436:                                              ; preds = %662, %385
  %437 = phi %"struct.std::__1::pair"* [ %382, %385 ], [ %663, %662 ]
  %438 = phi i32* [ %343, %385 ], [ %664, %662 ]
  %439 = phi i64 [ 0, %385 ], [ %656, %662 ]
  %440 = getelementptr inbounds i32, i32* %438, i64 %439
  %441 = load i32, i32* %440, align 4
  %442 = icmp eq i32 %441, 1
  br i1 %442, label %443, label %498

443:                                              ; preds = %436
  %444 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439
  %445 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %334, align 8
  %446 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %335, align 8
  %447 = icmp eq %"struct.std::__1::pair"* %445, %446
  %448 = ptrtoint %"struct.std::__1::pair"* %446 to i64
  br i1 %447, label %454, label %449

449:                                              ; preds = %443
  %450 = bitcast %"struct.std::__1::pair"* %445 to i8*
  %451 = bitcast %"struct.std::__1::pair"* %444 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %450, i8* align 8 %451, i64 40, i1 false) #12
  %452 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %445, i64 1
  %453 = ptrtoint %"struct.std::__1::pair"* %452 to i64
  store i64 %453, i64* %397, align 8
  br label %655

454:                                              ; preds = %443
  %455 = ptrtoint %"struct.std::__1::pair"* %445 to i64
  %456 = load i64, i64* %398, align 8
  %457 = sub i64 %455, %456
  %458 = sdiv exact i64 %457, 40
  %459 = add nsw i64 %458, 1
  %460 = icmp ugt i64 %459, 461168601842738790
  br i1 %460, label %461, label %463

461:                                              ; preds = %454
  %462 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %462) #17
  unreachable

463:                                              ; preds = %454
  %464 = sub i64 %448, %456
  %465 = sdiv exact i64 %464, 40
  %466 = icmp ult i64 %465, 230584300921369395
  br i1 %466, label %467, label %472

467:                                              ; preds = %463
  %468 = shl nsw i64 %465, 1
  %469 = icmp ult i64 %468, %459
  %470 = select i1 %469, i64 %459, i64 %468
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %477, label %472

472:                                              ; preds = %467, %463
  %473 = phi i64 [ %470, %467 ], [ 461168601842738790, %463 ]
  %474 = mul i64 %473, 40
  %475 = call i8* @_Znwm(i64 %474) #18
  %476 = bitcast i8* %475 to %"struct.std::__1::pair"*
  br label %477

477:                                              ; preds = %472, %467
  %478 = phi i64 [ %473, %472 ], [ 0, %467 ]
  %479 = phi %"struct.std::__1::pair"* [ %476, %472 ], [ null, %467 ]
  %480 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %479, i64 %458
  %481 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %479, i64 %478
  %482 = ptrtoint %"struct.std::__1::pair"* %481 to i64
  %483 = bitcast %"struct.std::__1::pair"* %480 to i8*
  %484 = bitcast %"struct.std::__1::pair"* %444 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %483, i8* align 8 %484, i64 40, i1 false) #12
  %485 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %480, i64 1
  %486 = ptrtoint %"struct.std::__1::pair"* %485 to i64
  %487 = sdiv exact i64 %457, -40
  %488 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %480, i64 %487
  %489 = ptrtoint %"struct.std::__1::pair"* %488 to i64
  %490 = icmp sgt i64 %457, 0
  br i1 %490, label %491, label %494

491:                                              ; preds = %477
  %492 = bitcast %"struct.std::__1::pair"* %488 to i8*
  %493 = inttoptr i64 %456 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %492, i8* align 8 %493, i64 %457, i1 false) #12
  br label %494

494:                                              ; preds = %491, %477
  store i64 %489, i64* %398, align 8
  store i64 %486, i64* %397, align 8
  store i64 %482, i64* %399, align 8
  %495 = icmp eq i64 %456, 0
  br i1 %495, label %655, label %496

496:                                              ; preds = %494
  %497 = inttoptr i64 %456 to i8*
  call void @_ZdlPv(i8* %497) #18
  br label %655

498:                                              ; preds = %436
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %386) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %386, i8 -86, i64 64, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %386, i8 0, i64 56, i1 false) #12
  store i32 2, i32* %387, align 8
  %499 = load i64, i64* %55, align 8
  %500 = load i64, i64* %57, align 8
  %501 = load i64, i64* %59, align 8
  %502 = load i64, i64* %61, align 8
  %503 = load i32, i32* %71, align 4, !noalias !1943
  %504 = zext i32 %503 to i64
  %505 = mul i64 %499, %504
  %506 = zext i32 %441 to i64
  %507 = add nsw i64 %506, -1
  %508 = add i64 %507, %505
  %509 = udiv i64 %508, %506
  %510 = mul i64 %500, %504
  %511 = add i64 %507, %510
  %512 = udiv i64 %511, %506
  %513 = mul i64 %501, %504
  %514 = add i64 %507, %513
  %515 = udiv i64 %514, %506
  %516 = mul i64 %502, %504
  %517 = add i64 %507, %516
  %518 = udiv i64 %517, %506
  %519 = load i64, i64* %139, align 8
  %520 = add i64 %507, %519
  %521 = udiv i64 %520, %506
  %522 = load i64, i64* %141, align 8
  %523 = add i64 %507, %522
  %524 = udiv i64 %523, %506
  %525 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439
  %526 = bitcast %"struct.std::__1::pair"* %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = icmp ult i64 %512, 2
  %529 = select i1 %528, i64 %512, i64 2
  %530 = sub nsw i64 0, %529
  %531 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439, i32 1, i32 3
  %532 = load i64, i64* %531, align 8
  %533 = sub i64 %524, %518
  %534 = sub i64 %533, %512
  %535 = icmp ult i64 %534, 2
  %536 = select i1 %535, i64 %534, i64 2
  %537 = add i64 %536, %532
  %538 = icmp ult i64 %509, 2
  br i1 %538, label %543, label %539

539:                                              ; preds = %498
  %540 = add i64 %509, 2
  %541 = add i64 %540, %515
  %542 = icmp ugt i64 %541, %521
  br i1 %542, label %543, label %546

543:                                              ; preds = %539, %498
  %544 = icmp ult i64 %521, 4
  %545 = zext i1 %544 to i32
  br label %546

546:                                              ; preds = %543, %539
  %547 = phi i32 [ 2, %539 ], [ %545, %543 ]
  store i32 %547, i32* %387, align 8
  %548 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439, i32 1, i32 1
  %549 = load i64, i64* %548, align 8
  store i64 %549, i64* %389, align 8
  %550 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439, i32 1, i32 0
  %551 = load i64, i64* %550, align 8
  %552 = add i64 %551, -2
  store i64 %552, i64* %390, align 8
  store i64 %552, i64* %391, align 8
  br i1 %538, label %553, label %555

553:                                              ; preds = %546
  %554 = sub i64 %551, %509
  store i64 %554, i64* %390, align 8
  br label %555

555:                                              ; preds = %553, %546
  %556 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %437, i64 %439, i32 1, i32 2
  %557 = load i64, i64* %556, align 8
  %558 = add i64 %551, 2
  %559 = add i64 %558, %557
  store i64 %559, i64* %392, align 8
  %560 = add i64 %509, 2
  %561 = add i64 %560, %515
  %562 = icmp ugt i64 %561, %521
  %563 = sub i64 %521, %509
  %564 = add i64 %563, %551
  %565 = select i1 %562, i64 %564, i64 %559
  store i64 %565, i64* %393, align 8
  store i64 %527, i64* %395, align 8
  %566 = icmp sgt i64 %537, %530
  br i1 %566, label %651, label %572

567:                                              ; preds = %651
  %568 = load i32*, i32** %342, align 8
  %569 = getelementptr inbounds i32, i32* %568, i64 %439
  %570 = load i32, i32* %569, align 4
  %571 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %388, align 8
  br label %572

572:                                              ; preds = %567, %555
  %573 = phi %"struct.std::__1::pair"* [ %571, %567 ], [ %437, %555 ]
  %574 = phi i32 [ %570, %567 ], [ %441, %555 ]
  %575 = call i32 @llvm.ctlz.i32(i32 %574, i1 true) #12, !range !1941
  %576 = xor i32 %575, 31
  %577 = zext i32 %576 to i64
  %578 = call i32 @llvm.ctpop.i32(i32 %574) #12, !range !1941
  %579 = icmp ugt i32 %578, 1
  %580 = zext i1 %579 to i64
  %581 = add nsw i64 %577, -1
  %582 = add nsw i64 %581, %580
  %583 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 2, i64 %582
  %584 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %573, i64 %439, i32 0
  %585 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %584, align 8
  %586 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %573, i64 %439, i32 1
  %587 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %396, align 8
  %588 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %587, i64 %439
  %589 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %573, i64 %439, i32 1, i32 1
  %590 = load i64, i64* %589, align 8
  %591 = sub nsw i64 %512, %590
  call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %583, %"class.jxl::Plane"* dereferenceable(32) %585, %"class.jxl::Rect"* dereferenceable(32) %586, %"class.jxl::Plane"* %588, %"class.jxl::Rect"* nonnull dereferenceable(32) %8, i64 %591, i64 %524) #12
  %592 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %396, align 8
  %593 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %592, i64 %439
  %594 = ptrtoint %"class.jxl::Plane"* %593 to i64
  %595 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %334, align 8
  %596 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %335, align 8
  %597 = icmp ult %"struct.std::__1::pair"* %595, %596
  %598 = ptrtoint %"struct.std::__1::pair"* %596 to i64
  br i1 %597, label %599, label %605

599:                                              ; preds = %572
  %600 = bitcast %"struct.std::__1::pair"* %595 to i64*
  store i64 %594, i64* %600, align 8
  %601 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %595, i64 0, i32 1
  %602 = bitcast %"class.jxl::Rect"* %601 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %602, i8* nonnull align 8 %129, i64 32, i1 false) #12
  %603 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %595, i64 1
  %604 = ptrtoint %"struct.std::__1::pair"* %603 to i64
  store i64 %604, i64* %397, align 8
  br label %650

605:                                              ; preds = %572
  %606 = ptrtoint %"struct.std::__1::pair"* %595 to i64
  %607 = load i64, i64* %398, align 8
  %608 = sub i64 %606, %607
  %609 = sdiv exact i64 %608, 40
  %610 = add nsw i64 %609, 1
  %611 = icmp ugt i64 %610, 461168601842738790
  br i1 %611, label %612, label %614

612:                                              ; preds = %605
  %613 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %613) #17
  unreachable

614:                                              ; preds = %605
  %615 = sub i64 %598, %607
  %616 = sdiv exact i64 %615, 40
  %617 = icmp ult i64 %616, 230584300921369395
  br i1 %617, label %618, label %623

618:                                              ; preds = %614
  %619 = shl nsw i64 %616, 1
  %620 = icmp ult i64 %619, %610
  %621 = select i1 %620, i64 %610, i64 %619
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %628, label %623

623:                                              ; preds = %618, %614
  %624 = phi i64 [ %621, %618 ], [ 461168601842738790, %614 ]
  %625 = mul i64 %624, 40
  %626 = call i8* @_Znwm(i64 %625) #18
  %627 = bitcast i8* %626 to %"struct.std::__1::pair"*
  br label %628

628:                                              ; preds = %623, %618
  %629 = phi i64 [ %624, %623 ], [ 0, %618 ]
  %630 = phi %"struct.std::__1::pair"* [ %627, %623 ], [ null, %618 ]
  %631 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %630, i64 %609
  %632 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %630, i64 %629
  %633 = ptrtoint %"struct.std::__1::pair"* %632 to i64
  %634 = bitcast %"struct.std::__1::pair"* %631 to i64*
  store i64 %594, i64* %634, align 8
  %635 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %630, i64 %609, i32 1
  %636 = bitcast %"class.jxl::Rect"* %635 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %636, i8* nonnull align 8 %129, i64 32, i1 false) #12
  %637 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %631, i64 1
  %638 = ptrtoint %"struct.std::__1::pair"* %637 to i64
  %639 = sdiv exact i64 %608, -40
  %640 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %631, i64 %639
  %641 = ptrtoint %"struct.std::__1::pair"* %640 to i64
  %642 = icmp sgt i64 %608, 0
  br i1 %642, label %643, label %646

643:                                              ; preds = %628
  %644 = bitcast %"struct.std::__1::pair"* %640 to i8*
  %645 = inttoptr i64 %607 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %644, i8* align 8 %645, i64 %608, i1 false) #12
  br label %646

646:                                              ; preds = %643, %628
  store i64 %641, i64* %398, align 8
  store i64 %638, i64* %397, align 8
  store i64 %633, i64* %399, align 8
  %647 = icmp eq i64 %607, 0
  br i1 %647, label %650, label %648

648:                                              ; preds = %646
  %649 = inttoptr i64 %607 to i8*
  call void @_ZdlPv(i8* %649) #18
  br label %650

650:                                              ; preds = %599, %646, %648
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %386) #12
  br label %655

651:                                              ; preds = %555, %651
  %652 = phi i64 [ %653, %651 ], [ %530, %555 ]
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %14, i64 %652)
  %653 = add nsw i64 %652, 1
  %654 = icmp slt i64 %653, %537
  br i1 %654, label %651, label %567

655:                                              ; preds = %496, %494, %449, %650
  %656 = add nuw i64 %439, 1
  %657 = load i64, i64* %376, align 8
  %658 = load i64, i64* %378, align 8
  %659 = sub i64 %657, %658
  %660 = sdiv exact i64 %659, 40
  %661 = icmp ult i64 %656, %660
  br i1 %661, label %662, label %908

662:                                              ; preds = %655
  %663 = inttoptr i64 %658 to %"struct.std::__1::pair"*
  %664 = load i32*, i32** %342, align 8
  br label %436

665:                                              ; preds = %371
  %666 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %338 to i64*
  %667 = bitcast %"class.std::__1::vector.297"* %13 to i64*
  %668 = icmp eq i64 %380, 0
  br i1 %668, label %731, label %669

669:                                              ; preds = %665
  %670 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %339 to i64*
  %671 = icmp ugt i64 %381, 288230376151711743
  br i1 %671, label %672, label %674

672:                                              ; preds = %669
  %673 = bitcast %"class.std::__1::vector.297"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %673) #17
  unreachable

674:                                              ; preds = %669
  %675 = shl i64 %381, 6
  %676 = tail call i8* @_Znwm(i64 %675) #18
  %677 = bitcast i8* %676 to %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*
  %678 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %677, i64 %381
  %679 = shl nsw i64 %381, 6
  %680 = add i64 %679, -64
  %681 = lshr exact i64 %680, 6
  %682 = add nuw nsw i64 %681, 1
  %683 = and i64 %682, 7
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %693, label %685

685:                                              ; preds = %674, %685
  %686 = phi %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* [ %690, %685 ], [ %677, %674 ]
  %687 = phi i64 [ %691, %685 ], [ %683, %674 ]
  %688 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %686, i64 0, i32 7
  %689 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %686 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %689, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %688, align 8
  %690 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %686, i64 1
  %691 = add i64 %687, -1
  %692 = icmp eq i64 %691, 0
  br i1 %692, label %693, label %685, !llvm.loop !1946

693:                                              ; preds = %685, %674
  %694 = phi %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* [ %677, %674 ], [ %690, %685 ]
  %695 = icmp ult i64 %680, 448
  br i1 %695, label %723, label %696

696:                                              ; preds = %693, %696
  %697 = phi %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* [ %721, %696 ], [ %694, %693 ]
  %698 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 0, i32 7
  %699 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %699, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %698, align 8
  %700 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 1
  %701 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 1, i32 7
  %702 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %700 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %702, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %701, align 8
  %703 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 2
  %704 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 2, i32 7
  %705 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %703 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %705, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %704, align 8
  %706 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 3
  %707 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 3, i32 7
  %708 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %706 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %708, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %707, align 8
  %709 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 4
  %710 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 4, i32 7
  %711 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %709 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %711, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %710, align 8
  %712 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 5
  %713 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 5, i32 7
  %714 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %712 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %714, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %713, align 8
  %715 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 6
  %716 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 6, i32 7
  %717 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %715 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %717, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %716, align 8
  %718 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 7
  %719 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 7, i32 7
  %720 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %718 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %720, i8 0, i64 64, i1 false) #12
  store i32 2, i32* %719, align 8
  %721 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %697, i64 8
  %722 = icmp eq %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %678, %721
  br i1 %722, label %723, label %696

723:                                              ; preds = %696, %693
  %724 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %677, i64 %381
  %725 = ptrtoint %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %724 to i64
  %726 = ptrtoint %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %678 to i64
  %727 = ptrtoint i8* %676 to i64
  store i64 %727, i64* %667, align 8
  store i64 %726, i64* %666, align 8
  store i64 %725, i64* %670, align 8
  %728 = load i64, i64* %376, align 8
  %729 = load i64, i64* %378, align 8
  %730 = inttoptr i64 %729 to %"struct.std::__1::pair"*
  br label %731

731:                                              ; preds = %665, %723
  %732 = phi %"struct.std::__1::pair"* [ %730, %723 ], [ %382, %665 ]
  %733 = phi i64 [ %729, %723 ], [ %379, %665 ]
  %734 = phi i64 [ %728, %723 ], [ %377, %665 ]
  %735 = icmp eq i64 %734, %733
  br i1 %735, label %908, label %736

736:                                              ; preds = %731
  %737 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %738 = sub i64 %118, %213
  %739 = sub i64 %119, %214
  %740 = sub i64 %215, %60
  %741 = sub i64 %216, %62
  %742 = bitcast %"struct.std::__1::pair"** %334 to i64*
  %743 = bitcast %"class.std::__1::vector"* %12 to i64*
  %744 = bitcast %"struct.std::__1::pair"** %335 to i64*
  %745 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %41, i64 0, i32 0
  %746 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 1
  br label %747

747:                                              ; preds = %894, %736
  %748 = phi i64 [ 0, %736 ], [ %898, %894 ]
  %749 = phi %"struct.std::__1::pair"* [ null, %736 ], [ %897, %894 ]
  %750 = phi %"struct.std::__1::pair"* [ null, %736 ], [ %896, %894 ]
  %751 = phi %"struct.std::__1::pair"* [ %732, %736 ], [ %895, %894 ]
  %752 = phi i64 [ 0, %736 ], [ %888, %894 ]
  %753 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %751, i64 %752, i32 1, i32 0
  %754 = load i64, i64* %753, align 8
  %755 = add i64 %738, %754
  %756 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %751, i64 %752, i32 1, i32 1
  %757 = load i64, i64* %756, align 8
  %758 = add i64 %739, %757
  %759 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %751, i64 %752, i32 1, i32 2
  %760 = load i64, i64* %759, align 8
  %761 = add i64 %740, %760
  %762 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %751, i64 %752, i32 1, i32 3
  %763 = load i64, i64* %762, align 8
  %764 = add i64 %741, %763
  %765 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %751, i64 %752, i32 0
  %766 = icmp ult %"struct.std::__1::pair"* %750, %749
  %767 = ptrtoint %"struct.std::__1::pair"* %749 to i64
  br i1 %766, label %768, label %778

768:                                              ; preds = %747
  %769 = bitcast %"class.jxl::Plane"** %765 to i64*
  %770 = load i64, i64* %769, align 8
  %771 = bitcast %"struct.std::__1::pair"* %750 to i64*
  store i64 %770, i64* %771, align 8
  %772 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %750, i64 0, i32 1, i32 0
  store i64 %755, i64* %772, align 8
  %773 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %750, i64 0, i32 1, i32 1
  store i64 %758, i64* %773, align 8
  %774 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %750, i64 0, i32 1, i32 2
  store i64 %761, i64* %774, align 8
  %775 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %750, i64 0, i32 1, i32 3
  store i64 %764, i64* %775, align 8
  %776 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %750, i64 1
  %777 = ptrtoint %"struct.std::__1::pair"* %776 to i64
  store i64 %777, i64* %742, align 8
  br label %828

778:                                              ; preds = %747
  %779 = ptrtoint %"struct.std::__1::pair"* %750 to i64
  %780 = load i64, i64* %743, align 8
  %781 = sub i64 %779, %780
  %782 = sdiv exact i64 %781, 40
  %783 = add nsw i64 %782, 1
  %784 = icmp ugt i64 %783, 461168601842738790
  br i1 %784, label %785, label %787

785:                                              ; preds = %778
  %786 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %786) #17
  unreachable

787:                                              ; preds = %778
  %788 = sub i64 %767, %780
  %789 = sdiv exact i64 %788, 40
  %790 = icmp ult i64 %789, 230584300921369395
  br i1 %790, label %791, label %796

791:                                              ; preds = %787
  %792 = shl nsw i64 %789, 1
  %793 = icmp ult i64 %792, %783
  %794 = select i1 %793, i64 %783, i64 %792
  %795 = icmp eq i64 %794, 0
  br i1 %795, label %801, label %796

796:                                              ; preds = %791, %787
  %797 = phi i64 [ %794, %791 ], [ 461168601842738790, %787 ]
  %798 = mul i64 %797, 40
  %799 = tail call i8* @_Znwm(i64 %798) #18
  %800 = bitcast i8* %799 to %"struct.std::__1::pair"*
  br label %801

801:                                              ; preds = %796, %791
  %802 = phi i64 [ %797, %796 ], [ 0, %791 ]
  %803 = phi %"struct.std::__1::pair"* [ %800, %796 ], [ null, %791 ]
  %804 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %782
  %805 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %802
  %806 = ptrtoint %"struct.std::__1::pair"* %805 to i64
  %807 = bitcast %"class.jxl::Plane"** %765 to i64*
  %808 = load i64, i64* %807, align 8
  %809 = bitcast %"struct.std::__1::pair"* %804 to i64*
  store i64 %808, i64* %809, align 8
  %810 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %782, i32 1, i32 0
  store i64 %755, i64* %810, align 8
  %811 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %782, i32 1, i32 1
  store i64 %758, i64* %811, align 8
  %812 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %782, i32 1, i32 2
  store i64 %761, i64* %812, align 8
  %813 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %803, i64 %782, i32 1, i32 3
  store i64 %764, i64* %813, align 8
  %814 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %804, i64 1
  %815 = ptrtoint %"struct.std::__1::pair"* %814 to i64
  %816 = sub i64 %748, %780
  %817 = sdiv exact i64 %816, -40
  %818 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %804, i64 %817
  %819 = ptrtoint %"struct.std::__1::pair"* %818 to i64
  %820 = icmp sgt i64 %816, 0
  br i1 %820, label %821, label %824

821:                                              ; preds = %801
  %822 = bitcast %"struct.std::__1::pair"* %818 to i8*
  %823 = inttoptr i64 %780 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %822, i8* align 8 %823, i64 %816, i1 false) #12
  br label %824

824:                                              ; preds = %821, %801
  store i64 %819, i64* %743, align 8
  store i64 %815, i64* %742, align 8
  store i64 %806, i64* %744, align 8
  %825 = icmp eq i64 %780, 0
  br i1 %825, label %828, label %826

826:                                              ; preds = %824
  %827 = inttoptr i64 %780 to i8*
  tail call void @_ZdlPv(i8* %827) #18
  br label %828

828:                                              ; preds = %768, %824, %826
  %829 = load %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*, %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %337, align 8
  %830 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %737, align 8
  %831 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %830, i64 %752
  %832 = bitcast %"struct.std::__1::pair"* %831 to i64*
  %833 = load i64, i64* %832, align 8
  %834 = load i64, i64* %745, align 8
  %835 = load i64, i64* %746, align 8
  %836 = load i64, i64* %57, align 8
  %837 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %830, i64 %752, i32 1, i32 3
  %838 = load i64, i64* %837, align 8
  %839 = load i64, i64* %61, align 8
  %840 = load i64, i64* %55, align 8
  %841 = icmp ult i64 %840, 2
  br i1 %841, label %849, label %842

842:                                              ; preds = %828
  %843 = load i64, i64* %59, align 8
  %844 = add i64 %840, 2
  %845 = add i64 %844, %843
  %846 = icmp ugt i64 %845, %834
  br i1 %846, label %849, label %847

847:                                              ; preds = %842
  %848 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 7
  store i32 2, i32* %848, align 8
  br label %854

849:                                              ; preds = %842, %828
  %850 = icmp ult i64 %834, 4
  %851 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 7
  br i1 %850, label %853, label %852

852:                                              ; preds = %849
  store i32 0, i32* %851, align 8
  br label %854

853:                                              ; preds = %849
  store i32 1, i32* %851, align 8
  br label %854

854:                                              ; preds = %853, %852, %847
  %855 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %830, i64 %752, i32 1, i32 1
  %856 = load i64, i64* %855, align 8
  %857 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 6
  store i64 %856, i64* %857, align 8
  %858 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %830, i64 %752, i32 1, i32 0
  %859 = load i64, i64* %858, align 8
  %860 = add i64 %859, -2
  %861 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 3
  store i64 %860, i64* %861, align 8
  %862 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 2
  store i64 %860, i64* %862, align 8
  %863 = load i64, i64* %55, align 8
  %864 = icmp ult i64 %863, 2
  br i1 %864, label %865, label %868

865:                                              ; preds = %854
  %866 = load i64, i64* %858, align 8
  %867 = sub i64 %866, %863
  store i64 %867, i64* %861, align 8
  br label %868

868:                                              ; preds = %865, %854
  %869 = load i64, i64* %858, align 8
  %870 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %830, i64 %752, i32 1, i32 2
  %871 = load i64, i64* %870, align 8
  %872 = add i64 %869, 2
  %873 = add i64 %872, %871
  %874 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 5
  store i64 %873, i64* %874, align 8
  %875 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 4
  store i64 %873, i64* %875, align 8
  %876 = load i64, i64* %55, align 8
  %877 = load i64, i64* %59, align 8
  %878 = add i64 %876, 2
  %879 = add i64 %878, %877
  %880 = icmp ugt i64 %879, %834
  br i1 %880, label %881, label %885

881:                                              ; preds = %868
  %882 = load i64, i64* %858, align 8
  %883 = sub i64 %834, %876
  %884 = add i64 %883, %882
  store i64 %884, i64* %875, align 8
  br label %885

885:                                              ; preds = %868, %881
  %886 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %829, i64 %752, i32 1
  %887 = bitcast %"class.jxl::Plane"** %886 to i64*
  store i64 %833, i64* %887, align 8
  %888 = add nuw i64 %752, 1
  %889 = load i64, i64* %376, align 8
  %890 = load i64, i64* %378, align 8
  %891 = sub i64 %889, %890
  %892 = sdiv exact i64 %891, 40
  %893 = icmp ult i64 %888, %892
  br i1 %893, label %894, label %899

894:                                              ; preds = %885
  %895 = inttoptr i64 %890 to %"struct.std::__1::pair"*
  %896 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %334, align 8
  %897 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %335, align 8
  %898 = ptrtoint %"struct.std::__1::pair"* %896 to i64
  br label %747

899:                                              ; preds = %885
  %900 = icmp ult i64 %836, 2
  %901 = select i1 %900, i64 %836, i64 2
  %902 = sub nsw i64 0, %901
  %903 = sub i64 %835, %839
  %904 = sub i64 %903, %836
  %905 = icmp ult i64 %904, 2
  %906 = select i1 %905, i64 %904, i64 2
  %907 = add i64 %906, %838
  br label %908

908:                                              ; preds = %655, %731, %383, %899
  %909 = phi i64 [ 0, %383 ], [ %892, %899 ], [ 0, %731 ], [ %660, %655 ]
  %910 = phi i64 [ 0, %383 ], [ %891, %899 ], [ 0, %731 ], [ %659, %655 ]
  %911 = phi i64 [ 0, %383 ], [ %907, %899 ], [ 0, %731 ], [ 0, %655 ]
  %912 = phi i64 [ 0, %383 ], [ %902, %899 ], [ 0, %731 ], [ 0, %655 ]
  %913 = bitcast %"class.std::__1::vector.304"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %913) #12
  %914 = getelementptr inbounds %"class.std::__1::vector.304", %"class.std::__1::vector.304"* %15, i64 0, i32 0, i32 0
  %915 = getelementptr inbounds %"class.std::__1::vector.304", %"class.std::__1::vector.304"* %15, i64 0, i32 0, i32 1
  %916 = getelementptr inbounds %"class.std::__1::vector.304", %"class.std::__1::vector.304"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %917 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 4
  %918 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %919 = bitcast i8** %918 to i64*
  %920 = load i64, i64* %919, align 8
  %921 = and i64 %920, 63
  %922 = icmp eq i64 %921, 0
  call void @llvm.assume(i1 %922) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %913, i8 0, i64 24, i1 false) #12
  %923 = icmp eq i64 %910, 0
  br i1 %923, label %1024, label %924

924:                                              ; preds = %908
  %925 = icmp ugt i64 %909, 2305843009213693951
  br i1 %925, label %926, label %928

926:                                              ; preds = %924
  %927 = bitcast %"class.std::__1::vector.304"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %927) #17
  unreachable

928:                                              ; preds = %924
  %929 = shl nsw i64 %909, 3
  %930 = call i8* @_Znwm(i64 %929) #18
  %931 = bitcast i8* %930 to float**
  %932 = bitcast float*** %915 to i8**
  store i8* %930, i8** %932, align 8
  %933 = bitcast %"class.std::__1::vector.304"* %15 to i8**
  store i8* %930, i8** %933, align 8
  %934 = getelementptr inbounds float*, float** %931, i64 %909
  store float** %934, float*** %916, align 8
  %935 = shl nsw i64 %909, 3
  %936 = add nsw i64 %935, -8
  %937 = lshr exact i64 %936, 3
  %938 = add nuw nsw i64 %937, 1
  %939 = icmp ult i64 %938, 4
  br i1 %939, label %1014, label %940

940:                                              ; preds = %928
  %941 = and i64 %938, 4611686018427387900
  %942 = getelementptr float*, float** %931, i64 %941
  %943 = insertelement <2 x i64> undef, i64 %920, i32 0
  %944 = shufflevector <2 x i64> %943, <2 x i64> undef, <2 x i32> zeroinitializer
  %945 = insertelement <2 x i64> undef, i64 %920, i32 0
  %946 = shufflevector <2 x i64> %945, <2 x i64> undef, <2 x i32> zeroinitializer
  %947 = add nsw i64 %941, -4
  %948 = lshr exact i64 %947, 2
  %949 = add nuw nsw i64 %948, 1
  %950 = and i64 %949, 7
  %951 = icmp ult i64 %947, 28
  br i1 %951, label %999, label %952

952:                                              ; preds = %940
  %953 = sub nsw i64 %949, %950
  br label %954

954:                                              ; preds = %954, %952
  %955 = phi i64 [ 0, %952 ], [ %996, %954 ]
  %956 = phi i64 [ %953, %952 ], [ %997, %954 ]
  %957 = getelementptr float*, float** %931, i64 %955
  %958 = bitcast float** %957 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %958, align 8
  %959 = getelementptr float*, float** %957, i64 2
  %960 = bitcast float** %959 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %960, align 8
  %961 = or i64 %955, 4
  %962 = getelementptr float*, float** %931, i64 %961
  %963 = bitcast float** %962 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %963, align 8
  %964 = getelementptr float*, float** %962, i64 2
  %965 = bitcast float** %964 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %965, align 8
  %966 = or i64 %955, 8
  %967 = getelementptr float*, float** %931, i64 %966
  %968 = bitcast float** %967 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %968, align 8
  %969 = getelementptr float*, float** %967, i64 2
  %970 = bitcast float** %969 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %970, align 8
  %971 = or i64 %955, 12
  %972 = getelementptr float*, float** %931, i64 %971
  %973 = bitcast float** %972 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %973, align 8
  %974 = getelementptr float*, float** %972, i64 2
  %975 = bitcast float** %974 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %975, align 8
  %976 = or i64 %955, 16
  %977 = getelementptr float*, float** %931, i64 %976
  %978 = bitcast float** %977 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %978, align 8
  %979 = getelementptr float*, float** %977, i64 2
  %980 = bitcast float** %979 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %980, align 8
  %981 = or i64 %955, 20
  %982 = getelementptr float*, float** %931, i64 %981
  %983 = bitcast float** %982 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %983, align 8
  %984 = getelementptr float*, float** %982, i64 2
  %985 = bitcast float** %984 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %985, align 8
  %986 = or i64 %955, 24
  %987 = getelementptr float*, float** %931, i64 %986
  %988 = bitcast float** %987 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %988, align 8
  %989 = getelementptr float*, float** %987, i64 2
  %990 = bitcast float** %989 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %990, align 8
  %991 = or i64 %955, 28
  %992 = getelementptr float*, float** %931, i64 %991
  %993 = bitcast float** %992 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %993, align 8
  %994 = getelementptr float*, float** %992, i64 2
  %995 = bitcast float** %994 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %995, align 8
  %996 = add i64 %955, 32
  %997 = add i64 %956, -8
  %998 = icmp eq i64 %997, 0
  br i1 %998, label %999, label %954, !llvm.loop !1947

999:                                              ; preds = %954, %940
  %1000 = phi i64 [ 0, %940 ], [ %996, %954 ]
  %1001 = icmp eq i64 %950, 0
  br i1 %1001, label %1012, label %1002

1002:                                             ; preds = %999, %1002
  %1003 = phi i64 [ %1009, %1002 ], [ %1000, %999 ]
  %1004 = phi i64 [ %1010, %1002 ], [ %950, %999 ]
  %1005 = getelementptr float*, float** %931, i64 %1003
  %1006 = bitcast float** %1005 to <2 x i64>*
  store <2 x i64> %944, <2 x i64>* %1006, align 8
  %1007 = getelementptr float*, float** %1005, i64 2
  %1008 = bitcast float** %1007 to <2 x i64>*
  store <2 x i64> %946, <2 x i64>* %1008, align 8
  %1009 = add i64 %1003, 4
  %1010 = add i64 %1004, -1
  %1011 = icmp eq i64 %1010, 0
  br i1 %1011, label %1012, label %1002, !llvm.loop !1948

1012:                                             ; preds = %1002, %999
  %1013 = icmp eq i64 %938, %941
  br i1 %1013, label %1021, label %1014

1014:                                             ; preds = %1012, %928
  %1015 = phi float** [ %931, %928 ], [ %942, %1012 ]
  br label %1016

1016:                                             ; preds = %1014, %1016
  %1017 = phi float** [ %1019, %1016 ], [ %1015, %1014 ]
  %1018 = bitcast float** %1017 to i64*
  store i64 %920, i64* %1018, align 8
  %1019 = getelementptr inbounds float*, float** %1017, i64 1
  %1020 = icmp eq float** %1019, %934
  br i1 %1020, label %1021, label %1016, !llvm.loop !1949

1021:                                             ; preds = %1016, %1012
  %1022 = bitcast float*** %915 to i64*
  %1023 = ptrtoint float** %934 to i64
  store i64 %1023, i64* %1022, align 8
  br label %1024

1024:                                             ; preds = %908, %1021
  %1025 = icmp eq %"class.jxl::FilterPipeline"* %175, null
  br i1 %1025, label %1091, label %1026

1026:                                             ; preds = %1024
  %1027 = and i64 %114, 7
  %1028 = bitcast %"class.jxl::Rect"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1028) #12
  %1029 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %16, i64 0, i32 0
  %1030 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %16, i64 0, i32 1
  %1031 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %16, i64 0, i32 2
  %1032 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %16, i64 0, i32 3
  %1033 = sub i64 %114, %1027
  %1034 = add i64 %116, %1027
  store i64 %1033, i64* %1029, align 8
  store i64 %115, i64* %1030, align 8
  store i64 %1034, i64* %1031, align 8
  store i64 %117, i64* %1032, align 8
  %1035 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 6
  %1036 = load i64, i64* %1035, align 8
  %1037 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 7
  %1038 = load i64, i64* %1037, align 8
  %1039 = load i32, i32* %160, align 4
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1040
  %1042 = load i64, i64* %1041, align 8
  %1043 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26, i32 2
  %1044 = load i8, i8* %1043, align 1, !range !2
  %1045 = zext i8 %1044 to i64
  %1046 = add i64 %1042, %1045
  %1047 = icmp ugt i64 %125, %1046
  %1048 = select i1 %1047, i64 %1046, i64 %125
  %1049 = sub i64 0, %1048
  %1050 = sub i64 %1038, %123
  %1051 = sub i64 %1050, %125
  %1052 = icmp ult i64 %1051, %1046
  %1053 = select i1 %1052, i64 %1051, i64 %1046
  %1054 = add i64 %1053, %117
  %1055 = icmp ult i64 %124, %1046
  br i1 %1055, label %1060, label %1056

1056:                                             ; preds = %1026
  %1057 = add i64 %124, %122
  %1058 = add i64 %1057, %1046
  %1059 = icmp ugt i64 %1058, %1036
  br i1 %1059, label %1060, label %1064

1060:                                             ; preds = %1056, %1026
  %1061 = shl i64 %1046, 1
  %1062 = icmp ugt i64 %1061, %1036
  %1063 = zext i1 %1062 to i32
  br label %1064

1064:                                             ; preds = %1060, %1056
  %1065 = phi i32 [ 2, %1056 ], [ %1063, %1060 ]
  store i32 %1065, i32* %154, align 8
  %1066 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 6
  store i64 %115, i64* %1066, align 8
  %1067 = sub i64 %114, %1046
  %1068 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 3
  store i64 %1067, i64* %1068, align 8
  %1069 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 2
  store i64 %1067, i64* %1069, align 8
  %1070 = sub i64 %114, %124
  br i1 %1055, label %1071, label %1072

1071:                                             ; preds = %1064
  store i64 %1070, i64* %1068, align 8
  br label %1072

1072:                                             ; preds = %1064, %1071
  %1073 = add i64 %116, %114
  %1074 = add i64 %1073, %1046
  %1075 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 5
  store i64 %1074, i64* %1075, align 8
  %1076 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 4
  %1077 = add i64 %124, %122
  %1078 = add i64 %1077, %1046
  %1079 = icmp ugt i64 %1078, %1036
  %1080 = add i64 %1070, %1036
  %1081 = select i1 %1079, i64 %1080, i64 %1074
  store i64 %1081, i64* %1076, align 8
  %1082 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 0
  store %"class.jxl::Image3"* %0, %"class.jxl::Image3"** %1082, align 8
  %1083 = bitcast %"class.jxl::Rect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1083) #12
  %1084 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 0
  %1085 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 1
  %1086 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 2
  %1087 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 3
  %1088 = sub i64 %213, %1027
  %1089 = add i64 %215, %1027
  store i64 %1088, i64* %1084, align 8
  store i64 %214, i64* %1085, align 8
  store i64 %1089, i64* %1086, align 8
  store i64 %216, i64* %1087, align 8
  %1090 = call %"class.jxl::FilterPipeline"* @_ZN3jxl21PrepareFilterPipelineEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mmPS6_S4_(%"struct.jxl::PassesDecoderState"* %3, %"class.jxl::Rect"* nonnull dereferenceable(32) %11, %"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* nonnull dereferenceable(32) %16, i64 %1038, i64 %4, %"class.jxl::Image3"* %218, %"class.jxl::Rect"* nonnull dereferenceable(32) %17) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1083) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1028) #12
  br label %1091

1091:                                             ; preds = %1024, %1072
  %1092 = phi %"class.jxl::Image3"* [ null, %1024 ], [ %0, %1072 ]
  %1093 = phi i64 [ 0, %1024 ], [ %1054, %1072 ]
  %1094 = phi i64 [ 0, %1024 ], [ %1049, %1072 ]
  %1095 = phi %"class.jxl::FilterPipeline"* [ null, %1024 ], [ %1090, %1072 ]
  %1096 = load i64, i64* %57, align 8
  %1097 = icmp eq i64 %1096, 0
  br i1 %1097, label %1098, label %1119

1098:                                             ; preds = %1091
  %1099 = load i32, i32* %160, align 4
  %1100 = zext i32 %1099 to i64
  %1101 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1100
  %1102 = load i64, i64* %1101, align 8
  %1103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26, i32 2
  %1104 = load i8, i8* %1103, align 1, !range !2
  %1105 = zext i8 %1104 to i64
  %1106 = add i64 %1102, %1105
  %1107 = icmp slt i64 %1093, %1106
  %1108 = select i1 %1107, i64 %1093, i64 %1106
  %1109 = icmp sgt i64 %1108, 0
  br i1 %1109, label %1110, label %1119

1110:                                             ; preds = %1098
  %1111 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 1
  %1112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1092, i64 0, i32 0, i64 0
  %1113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1092, i64 0, i32 0, i64 1
  %1114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1092, i64 0, i32 0, i64 2
  br label %1115

1115:                                             ; preds = %1110, %1115
  %1116 = phi i64 [ 0, %1110 ], [ %1117, %1115 ]
  store %"class.jxl::Plane"* %1112, %"class.jxl::Plane"** %1111, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1116) #12
  store %"class.jxl::Plane"* %1113, %"class.jxl::Plane"** %1111, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1116) #12
  store %"class.jxl::Plane"* %1114, %"class.jxl::Plane"** %1111, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1116) #12
  %1117 = add nuw nsw i64 %1116, 1
  %1118 = icmp slt i64 %1117, %1108
  br i1 %1118, label %1115, label %1119

1119:                                             ; preds = %1115, %1098, %1091
  %1120 = phi i64 [ %1094, %1091 ], [ %1108, %1098 ], [ %1108, %1115 ]
  %1121 = load i32, i32* %160, align 4
  %1122 = zext i32 %1121 to i64
  %1123 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1122
  %1124 = load i64, i64* %1123, align 8
  %1125 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 26, i32 2
  %1126 = load i8, i8* %1125, align 1, !range !2
  %1127 = zext i8 %1126 to i64
  %1128 = add i64 %1124, %1127
  %1129 = sub i64 0, %1128
  %1130 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 9, i32 2
  %1131 = bitcast %"class.jxl::Rect"* %20 to i8*
  %1132 = add i64 %1124, %123
  %1133 = add i64 %1132, %1127
  %1134 = icmp sgt i64 %1133, %1129
  br i1 %1134, label %1135, label %1801

1135:                                             ; preds = %1119
  %1136 = icmp eq %"class.jxl::FilterPipeline"* %1095, null
  %1137 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 0
  %1138 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %10, i64 0, i32 1
  %1139 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 25
  %1140 = icmp eq %"class.jxl::Image3"* %217, %0
  %1141 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %218, i64 0, i32 0, i64 0, i32 0, i32 4
  %1142 = shl i64 %116, 2
  %1143 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 9, i32 1
  %1144 = bitcast %"class.jxl::Rect"* %18 to i8*
  %1145 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 0
  %1146 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 1
  %1147 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 2
  %1148 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 3
  %1149 = bitcast %"class.jxl::Rect"* %19 to i8*
  %1150 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 0
  %1151 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 1
  %1152 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 2
  %1153 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %19, i64 0, i32 3
  %1154 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %20, i64 0, i32 0
  %1155 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %20, i64 0, i32 1
  %1156 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %20, i64 0, i32 2
  %1157 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %20, i64 0, i32 3
  %1158 = bitcast %"class.jxl::Rect"* %21 to i8*
  %1159 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %21, i64 0, i32 0
  %1160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %21, i64 0, i32 1
  %1161 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %21, i64 0, i32 2
  %1162 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %21, i64 0, i32 3
  %1163 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 0
  %1164 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %9, i64 0, i32 1
  %1165 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 7
  %1166 = icmp eq i64 %126, 2
  %1167 = bitcast %"class.jxl::Rect"* %22 to i8*
  %1168 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %22, i64 0, i32 0
  %1169 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %22, i64 0, i32 1
  %1170 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %22, i64 0, i32 2
  %1171 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %22, i64 0, i32 3
  %1172 = bitcast %"class.jxl::Rect"* %23 to i8*
  %1173 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %23, i64 0, i32 0
  %1174 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %23, i64 0, i32 1
  %1175 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %23, i64 0, i32 2
  %1176 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %23, i64 0, i32 3
  %1177 = bitcast %"class.jxl::Rect"* %24 to i8*
  %1178 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 0
  %1179 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 1
  %1180 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 2
  %1181 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %24, i64 0, i32 3
  %1182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 12, i32 0, i32 0
  %1183 = bitcast %"class.jxl::Rect"* %25 to i8*
  %1184 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %25, i64 0, i32 0
  %1185 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %25, i64 0, i32 1
  %1186 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %25, i64 0, i32 2
  %1187 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %25, i64 0, i32 3
  %1188 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 2, i32 1
  %1189 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 4
  %1190 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 9, i32 0
  %1191 = bitcast %"class.jxl::Rect"* %26 to i8*
  %1192 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 0
  %1193 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 1
  %1194 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 2
  %1195 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %26, i64 0, i32 3
  %1196 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 3
  %1197 = bitcast %"class.jxl::Rect"* %27 to i8*
  %1198 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %27, i64 0, i32 0
  %1199 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %27, i64 0, i32 1
  %1200 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %27, i64 0, i32 2
  %1201 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %27, i64 0, i32 3
  %1202 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 0, i32 8
  %1203 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 4, i32 0, i64 0, i32 0, i32 0
  %1204 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 4, i32 0, i64 0, i32 0, i32 4
  %1205 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 0, i32 0, i32 4
  %1206 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 16
  %1207 = bitcast %"class.jxl::Rect"* %28 to i8*
  %1208 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %28, i64 0, i32 0
  %1209 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %28, i64 0, i32 1
  %1210 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %28, i64 0, i32 2
  %1211 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %28, i64 0, i32 3
  %1212 = bitcast %"class.jxl::Rect"* %29 to i8*
  %1213 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %41, i64 0, i32 0
  %1214 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %29, i64 0, i32 0
  %1215 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %29, i64 0, i32 1
  %1216 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %29, i64 0, i32 2
  %1217 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %29, i64 0, i32 3
  %1218 = bitcast %"class.jxl::Rect"* %30 to i8*
  %1219 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %30, i64 0, i32 0
  %1220 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %30, i64 0, i32 1
  %1221 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %30, i64 0, i32 2
  %1222 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %30, i64 0, i32 3
  %1223 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 17
  %1224 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 15
  %1225 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 23
  %1226 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 3
  %1227 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %37, i64 0, i32 1, i32 5
  %1228 = bitcast %"class.jxl::Rect"* %32 to i8*
  %1229 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %32, i64 0, i32 0
  %1230 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %32, i64 0, i32 1
  %1231 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %32, i64 0, i32 2
  %1232 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %32, i64 0, i32 3
  %1233 = bitcast %"class.jxl::Rect"* %31 to i8*
  %1234 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %31, i64 0, i32 0
  %1235 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %31, i64 0, i32 1
  %1236 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %31, i64 0, i32 2
  %1237 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %31, i64 0, i32 3
  %1238 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 33
  %1239 = bitcast %"class.jxl::Rect"* %33 to i8*
  %1240 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %33, i64 0, i32 0
  %1241 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %33, i64 0, i32 1
  %1242 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %33, i64 0, i32 2
  %1243 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %33, i64 0, i32 3
  %1244 = bitcast %"class.jxl::Rect"* %34 to i8*
  %1245 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %34, i64 0, i32 0
  %1246 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %34, i64 0, i32 1
  %1247 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %34, i64 0, i32 2
  %1248 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %34, i64 0, i32 3
  %1249 = bitcast %"class.jxl::Rect"* %35 to i8*
  %1250 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %35, i64 0, i32 0
  %1251 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %35, i64 0, i32 1
  %1252 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %35, i64 0, i32 2
  %1253 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %35, i64 0, i32 3
  %1254 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 18, i32 0, i32 2
  %1255 = icmp eq %"class.jxl::Plane"* %278, null
  %1256 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %278, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1257 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %278, i64 0, i32 0, i32 4
  %1258 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 19, i32 0, i32 0
  %1259 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 20, i32 0, i32 0
  %1260 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 18, i32 0, i32 1, i32 0
  %1261 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 18, i32 0, i32 0
  %1262 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %218, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1263 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %218, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1264 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1265 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %218, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1266 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1267 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1268 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1269 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1270 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1271 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %3, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1272 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1273 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1274 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1275 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %217, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %1276

1276:                                             ; preds = %1135, %1790
  %1277 = phi i64 [ %1129, %1135 ], [ %1791, %1790 ]
  br i1 %1136, label %1288, label %1278

1278:                                             ; preds = %1276
  %1279 = icmp sge i64 %1277, %1120
  %1280 = icmp slt i64 %1277, %1093
  %1281 = and i1 %1279, %1280
  br i1 %1281, label %1282, label %1287

1282:                                             ; preds = %1278
  %1283 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %1137, align 8
  %1284 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1283, i64 0, i32 0, i64 0
  store %"class.jxl::Plane"* %1284, %"class.jxl::Plane"** %1138, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1277) #12
  %1285 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1283, i64 0, i32 0, i64 1
  store %"class.jxl::Plane"* %1285, %"class.jxl::Plane"** %1138, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1277) #12
  %1286 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1283, i64 0, i32 0, i64 2
  store %"class.jxl::Plane"* %1286, %"class.jxl::Plane"** %1138, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %10, i64 %1277) #12
  br label %1287

1287:                                             ; preds = %1278, %1282
  call void @_ZN3jxl14FilterPipeline15ApplyFiltersRowERKNS_10LoopFilterERKNS_13FilterWeightsERKNS_4RectEl(%"class.jxl::FilterPipeline"* nonnull %1095, %"struct.jxl::LoopFilter"* dereferenceable(144) %40, %"struct.jxl::FilterWeights"* dereferenceable(72) %1139, %"class.jxl::Rect"* nonnull dereferenceable(32) %11, i64 %1277) #12
  br label %1370

1288:                                             ; preds = %1276
  br i1 %1140, label %1370, label %1289

1289:                                             ; preds = %1288
  %1290 = add i64 %1277, %214
  %1291 = add i64 %1277, %115
  %1292 = load i64, i64* %1141, align 8
  %1293 = mul i64 %1292, %1290
  %1294 = load i8*, i8** %1262, align 8
  %1295 = ptrtoint i8* %1294 to i64
  %1296 = and i64 %1295, 63
  %1297 = icmp eq i64 %1296, 0
  call void @llvm.assume(i1 %1297) #12
  %1298 = getelementptr inbounds i8, i8* %1294, i64 %1293
  %1299 = ptrtoint i8* %1298 to i64
  %1300 = and i64 %1299, 63
  %1301 = icmp eq i64 %1300, 0
  call void @llvm.assume(i1 %1301) #12
  %1302 = bitcast i8* %1298 to float*
  %1303 = getelementptr inbounds float, float* %1302, i64 %213
  %1304 = bitcast float* %1303 to i8*
  %1305 = load i64, i64* %917, align 8
  %1306 = mul i64 %1305, %1291
  %1307 = load i8*, i8** %918, align 8
  %1308 = ptrtoint i8* %1307 to i64
  %1309 = and i64 %1308, 63
  %1310 = icmp eq i64 %1309, 0
  call void @llvm.assume(i1 %1310) #12
  %1311 = getelementptr inbounds i8, i8* %1307, i64 %1306
  %1312 = ptrtoint i8* %1311 to i64
  %1313 = and i64 %1312, 63
  %1314 = icmp eq i64 %1313, 0
  call void @llvm.assume(i1 %1314) #12
  %1315 = bitcast i8* %1311 to float*
  %1316 = getelementptr inbounds float, float* %1315, i64 %114
  %1317 = bitcast float* %1316 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1304, i8* align 4 %1317, i64 %1142, i1 false)
  %1318 = load i64, i64* %1141, align 8
  %1319 = mul i64 %1318, %1290
  %1320 = load i8*, i8** %1263, align 8
  %1321 = ptrtoint i8* %1320 to i64
  %1322 = and i64 %1321, 63
  %1323 = icmp eq i64 %1322, 0
  call void @llvm.assume(i1 %1323) #12
  %1324 = getelementptr inbounds i8, i8* %1320, i64 %1319
  %1325 = ptrtoint i8* %1324 to i64
  %1326 = and i64 %1325, 63
  %1327 = icmp eq i64 %1326, 0
  call void @llvm.assume(i1 %1327) #12
  %1328 = bitcast i8* %1324 to float*
  %1329 = getelementptr inbounds float, float* %1328, i64 %213
  %1330 = bitcast float* %1329 to i8*
  %1331 = load i64, i64* %917, align 8
  %1332 = mul i64 %1331, %1291
  %1333 = load i8*, i8** %1264, align 8
  %1334 = ptrtoint i8* %1333 to i64
  %1335 = and i64 %1334, 63
  %1336 = icmp eq i64 %1335, 0
  call void @llvm.assume(i1 %1336) #12
  %1337 = getelementptr inbounds i8, i8* %1333, i64 %1332
  %1338 = ptrtoint i8* %1337 to i64
  %1339 = and i64 %1338, 63
  %1340 = icmp eq i64 %1339, 0
  call void @llvm.assume(i1 %1340) #12
  %1341 = bitcast i8* %1337 to float*
  %1342 = getelementptr inbounds float, float* %1341, i64 %114
  %1343 = bitcast float* %1342 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1330, i8* align 4 %1343, i64 %1142, i1 false)
  %1344 = load i64, i64* %1141, align 8
  %1345 = mul i64 %1344, %1290
  %1346 = load i8*, i8** %1265, align 8
  %1347 = ptrtoint i8* %1346 to i64
  %1348 = and i64 %1347, 63
  %1349 = icmp eq i64 %1348, 0
  call void @llvm.assume(i1 %1349) #12
  %1350 = getelementptr inbounds i8, i8* %1346, i64 %1345
  %1351 = ptrtoint i8* %1350 to i64
  %1352 = and i64 %1351, 63
  %1353 = icmp eq i64 %1352, 0
  call void @llvm.assume(i1 %1353) #12
  %1354 = bitcast i8* %1350 to float*
  %1355 = getelementptr inbounds float, float* %1354, i64 %213
  %1356 = bitcast float* %1355 to i8*
  %1357 = load i64, i64* %917, align 8
  %1358 = mul i64 %1357, %1291
  %1359 = load i8*, i8** %1266, align 8
  %1360 = ptrtoint i8* %1359 to i64
  %1361 = and i64 %1360, 63
  %1362 = icmp eq i64 %1361, 0
  call void @llvm.assume(i1 %1362) #12
  %1363 = getelementptr inbounds i8, i8* %1359, i64 %1358
  %1364 = ptrtoint i8* %1363 to i64
  %1365 = and i64 %1364, 63
  %1366 = icmp eq i64 %1365, 0
  call void @llvm.assume(i1 %1366) #12
  %1367 = bitcast i8* %1363 to float*
  %1368 = getelementptr inbounds float, float* %1367, i64 %114
  %1369 = bitcast float* %1368 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1356, i8* align 4 %1369, i64 %1142, i1 false)
  br label %1370

1370:                                             ; preds = %1289, %1288, %1287
  %1371 = load i32, i32* %160, align 4
  %1372 = zext i32 %1371 to i64
  %1373 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1372
  %1374 = load i64, i64* %1373, align 8
  %1375 = load i8, i8* %1125, align 1, !range !2
  %1376 = zext i8 %1375 to i64
  %1377 = add i64 %1374, %1376
  %1378 = icmp slt i64 %1277, %1377
  br i1 %1378, label %1790, label %1379

1379:                                             ; preds = %1370
  %1380 = sub i64 %1277, %1377
  %1381 = load i32, i32* %71, align 4
  %1382 = icmp eq i32 %1381, 1
  br i1 %1382, label %1383, label %1416

1383:                                             ; preds = %1379
  %1384 = load i64, i64* %376, align 8
  %1385 = load i64, i64* %378, align 8
  %1386 = icmp eq i64 %1384, %1385
  br i1 %1386, label %1416, label %1387

1387:                                             ; preds = %1383, %1387
  %1388 = phi i64 [ %1410, %1387 ], [ 0, %1383 ]
  %1389 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %333, align 8
  %1390 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1389, i64 %1388, i32 0
  %1391 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1390, align 8
  %1392 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1389, i64 %1388, i32 1, i32 1
  %1393 = load i64, i64* %1392, align 8
  %1394 = add i64 %1393, %1380
  %1395 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1391, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1396 = load i8*, i8** %1395, align 8
  %1397 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1391, i64 0, i32 0, i32 4
  %1398 = load i64, i64* %1397, align 8
  %1399 = mul i64 %1398, %1394
  %1400 = getelementptr inbounds i8, i8* %1396, i64 %1399
  %1401 = ptrtoint i8* %1400 to i64
  %1402 = and i64 %1401, 63
  %1403 = icmp eq i64 %1402, 0
  call void @llvm.assume(i1 %1403) #12
  %1404 = bitcast i8* %1400 to float*
  %1405 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1389, i64 %1388, i32 1, i32 0
  %1406 = load i64, i64* %1405, align 8
  %1407 = getelementptr inbounds float, float* %1404, i64 %1406
  %1408 = load float**, float*** %914, align 8
  %1409 = getelementptr inbounds float*, float** %1408, i64 %1388
  store float* %1407, float** %1409, align 8
  %1410 = add nuw i64 %1388, 1
  %1411 = load i64, i64* %376, align 8
  %1412 = load i64, i64* %378, align 8
  %1413 = sub i64 %1411, %1412
  %1414 = sdiv exact i64 %1413, 40
  %1415 = icmp ult i64 %1410, %1414
  br i1 %1415, label %1387, label %1416

1416:                                             ; preds = %1387, %1383, %1379
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1144) #12
  %1417 = add i64 %1380, %214
  store i64 %213, i64* %1145, align 8, !alias.scope !1951
  store i64 %1417, i64* %1146, align 8, !alias.scope !1951
  store i64 %215, i64* %1147, align 8, !alias.scope !1951
  store i64 1, i64* %1148, align 8, !alias.scope !1951
  %1418 = load float**, float*** %914, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1149) #12
  %1419 = add i64 %1380, %125
  store i64 %124, i64* %1150, align 8, !alias.scope !1956
  store i64 %1419, i64* %1151, align 8, !alias.scope !1956
  store i64 %122, i64* %1152, align 8, !alias.scope !1956
  store i64 1, i64* %1153, align 8, !alias.scope !1956
  %1420 = call i32 @_ZNK3jxl15PatchDictionary5AddToEPNS_6Image3IfEERKNS_4RectEPKPfS6_(%"class.jxl::PatchDictionary"* %1143, %"class.jxl::Image3"* %218, %"class.jxl::Rect"* nonnull dereferenceable(32) %18, float** %1418, %"class.jxl::Rect"* nonnull dereferenceable(32) %19) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1149) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1144) #12
  %1421 = icmp eq i32 %1420, 0
  br i1 %1421, label %1422, label %1801

1422:                                             ; preds = %1416
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1131) #12
  store i64 %213, i64* %1154, align 8, !alias.scope !1961
  store i64 %1417, i64* %1155, align 8, !alias.scope !1961
  store i64 %215, i64* %1156, align 8, !alias.scope !1961
  store i64 1, i64* %1157, align 8, !alias.scope !1961
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1158) #12
  store i64 %124, i64* %1159, align 8, !alias.scope !1966
  store i64 %1419, i64* %1160, align 8, !alias.scope !1966
  store i64 %122, i64* %1161, align 8, !alias.scope !1966
  store i64 1, i64* %1162, align 8, !alias.scope !1966
  %1423 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %36, align 8
  %1424 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1423, i64 0, i32 8
  %1425 = call i32 @_ZNK3jxl7Splines5AddToEPNS_6Image3IfEERKNS_4RectES6_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"* %1130, %"class.jxl::Image3"* %218, %"class.jxl::Rect"* nonnull dereferenceable(32) %20, %"class.jxl::Rect"* nonnull dereferenceable(32) %21, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %1424) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1158) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1131) #12
  %1426 = icmp eq i32 %1425, 0
  br i1 %1426, label %1427, label %1801

1427:                                             ; preds = %1422
  %1428 = load i32, i32* %71, align 4
  %1429 = icmp eq i32 %1428, 1
  br i1 %1429, label %1535, label %1430

1430:                                             ; preds = %1427
  %1431 = sub i64 %1380, %127
  %1432 = icmp sge i64 %1431, %330
  %1433 = icmp slt i64 %1431, %329
  %1434 = and i1 %1432, %1433
  br i1 %1434, label %1435, label %1440

1435:                                             ; preds = %1430
  %1436 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %1163, align 8
  %1437 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1436, i64 0, i32 0, i64 0
  store %"class.jxl::Plane"* %1437, %"class.jxl::Plane"** %1164, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %9, i64 %1431) #12
  %1438 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1436, i64 0, i32 0, i64 1
  store %"class.jxl::Plane"* %1438, %"class.jxl::Plane"** %1164, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %9, i64 %1431) #12
  %1439 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1436, i64 0, i32 0, i64 2
  store %"class.jxl::Plane"* %1439, %"class.jxl::Plane"** %1164, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nonnull %9, i64 %1431) #12
  br label %1440

1440:                                             ; preds = %1430, %1435
  %1441 = icmp sge i64 %1431, %912
  %1442 = and i1 %374, %1441
  %1443 = icmp slt i64 %1431, %911
  %1444 = and i1 %1443, %1442
  br i1 %1444, label %1445, label %1459

1445:                                             ; preds = %1440
  %1446 = load i64, i64* %376, align 8
  %1447 = load i64, i64* %378, align 8
  %1448 = icmp eq i64 %1446, %1447
  br i1 %1448, label %1459, label %1449

1449:                                             ; preds = %1445, %1449
  %1450 = phi i64 [ %1453, %1449 ], [ 0, %1445 ]
  %1451 = load %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*, %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %337, align 8
  %1452 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %1451, i64 %1450
  call fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %1452, i64 %1431)
  %1453 = add nuw i64 %1450, 1
  %1454 = load i64, i64* %376, align 8
  %1455 = load i64, i64* %378, align 8
  %1456 = sub i64 %1454, %1455
  %1457 = sdiv exact i64 %1456, 40
  %1458 = icmp ult i64 %1453, %1457
  br i1 %1458, label %1449, label %1459

1459:                                             ; preds = %1449, %1445, %1440
  %1460 = icmp slt i64 %1431, 2
  br i1 %1460, label %1461, label %1465

1461:                                             ; preds = %1459
  %1462 = add nsw i64 %1431, 1
  %1463 = load i64, i64* %1165, align 8
  %1464 = icmp eq i64 %1462, %1463
  br i1 %1464, label %1465, label %1790

1465:                                             ; preds = %1461, %1459
  %1466 = icmp sgt i64 %1431, 2
  %1467 = select i1 %1466, i64 %1431, i64 2
  %1468 = add nsw i64 %1467, -2
  %1469 = load i32, i32* %71, align 4
  %1470 = zext i32 %1469 to i64
  %1471 = mul i64 %1468, %1470
  br i1 %1166, label %1484, label %1472

1472:                                             ; preds = %1465
  %1473 = add nsw i64 %1277, 1
  %1474 = load i32, i32* %160, align 4
  %1475 = zext i32 %1474 to i64
  %1476 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1475
  %1477 = load i64, i64* %1476, align 8
  %1478 = load i8, i8* %1125, align 1, !range !2
  %1479 = zext i8 %1478 to i64
  %1480 = add i64 %1477, %123
  %1481 = add i64 %1480, %1479
  %1482 = icmp eq i64 %1473, %1481
  %1483 = select i1 %1482, i64 3, i64 1
  br label %1484

1484:                                             ; preds = %1472, %1465
  %1485 = phi i64 [ 1, %1465 ], [ %1483, %1472 ]
  %1486 = load i64, i64* %1165, align 8
  %1487 = icmp ult i64 %1486, %1485
  %1488 = select i1 %1487, i64 %1486, i64 %1485
  %1489 = mul nuw nsw i64 %1488, %1470
  %1490 = load i64, i64* %133, align 8
  %1491 = icmp ugt i64 %1490, %1471
  br i1 %1491, label %1492, label %1790

1492:                                             ; preds = %1484
  %1493 = add i64 %1489, %1471
  %1494 = icmp ult i64 %1493, %1490
  %1495 = sub i64 %1490, %1471
  %1496 = select i1 %1494, i64 %1489, i64 %1495
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1167) #12
  %1497 = add i64 %1468, %119
  store i64 %118, i64* %1168, align 8, !alias.scope !1971
  store i64 %1497, i64* %1169, align 8, !alias.scope !1971
  store i64 %60, i64* %1170, align 8, !alias.scope !1971
  store i64 1, i64* %1171, align 8, !alias.scope !1971
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1172) #12
  %1498 = add i64 %1471, %211
  store i64 %210, i64* %1173, align 8, !alias.scope !1974
  store i64 %1498, i64* %1174, align 8, !alias.scope !1974
  store i64 %212, i64* %1175, align 8, !alias.scope !1974
  store i64 %1496, i64* %1176, align 8, !alias.scope !1974
  %1499 = load i64, i64* %57, align 8
  %1500 = sub nsw i64 %1499, %119
  call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_6Image3IfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %331, %"class.jxl::Image3"* dereferenceable(96) %218, %"class.jxl::Rect"* nonnull dereferenceable(32) %22, %"class.jxl::Image3"* %217, %"class.jxl::Rect"* nonnull dereferenceable(32) %23, i64 %1500, i64 %1486) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1172) #12
  br i1 %374, label %1501, label %1534

1501:                                             ; preds = %1492
  %1502 = load i64, i64* %376, align 8
  %1503 = load i64, i64* %378, align 8
  %1504 = icmp eq i64 %1502, %1503
  br i1 %1504, label %1534, label %1505

1505:                                             ; preds = %1501, %1505
  %1506 = phi i64 [ %1530, %1505 ], [ %1503, %1501 ]
  %1507 = phi i64 [ %1528, %1505 ], [ 0, %1501 ]
  %1508 = inttoptr i64 %1506 to %"struct.std::__1::pair"*
  %1509 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1508, i64 %1507, i32 0
  %1510 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1509, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1177) #12
  %1511 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1508, i64 %1507, i32 1, i32 0
  %1512 = load i64, i64* %1511, align 8, !noalias !1977
  %1513 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1508, i64 %1507, i32 1, i32 1
  %1514 = load i64, i64* %1513, align 8, !noalias !1977
  %1515 = add i64 %1514, %1468
  %1516 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1508, i64 %1507, i32 1, i32 2
  %1517 = load i64, i64* %1516, align 8, !noalias !1977
  store i64 %1512, i64* %1178, align 8, !alias.scope !1977
  store i64 %1515, i64* %1179, align 8, !alias.scope !1977
  store i64 %1517, i64* %1180, align 8, !alias.scope !1977
  store i64 %1488, i64* %1181, align 8, !alias.scope !1977
  %1518 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %1182, align 8
  %1519 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1518, i64 %1507
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1183) #12
  %1520 = load i64, i64* %130, align 8, !noalias !1980
  %1521 = load i64, i64* %131, align 8, !noalias !1980
  %1522 = add i64 %1521, %1471
  %1523 = load i64, i64* %132, align 8, !noalias !1980
  store i64 %1520, i64* %1184, align 8, !alias.scope !1980
  store i64 %1522, i64* %1185, align 8, !alias.scope !1980
  store i64 %1523, i64* %1186, align 8, !alias.scope !1980
  store i64 %1496, i64* %1187, align 8, !alias.scope !1980
  %1524 = load i64, i64* %57, align 8
  %1525 = load i64, i64* %1513, align 8
  %1526 = sub nsw i64 %1524, %1525
  %1527 = load i64, i64* %1188, align 8
  call void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"* %331, %"class.jxl::Plane"* dereferenceable(32) %1510, %"class.jxl::Rect"* nonnull dereferenceable(32) %24, %"class.jxl::Plane"* %1519, %"class.jxl::Rect"* nonnull dereferenceable(32) %25, i64 %1526, i64 %1527) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1183) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1177) #12
  %1528 = add nuw i64 %1507, 1
  %1529 = load i64, i64* %376, align 8
  %1530 = load i64, i64* %378, align 8
  %1531 = sub i64 %1529, %1530
  %1532 = sdiv exact i64 %1531, 40
  %1533 = icmp ult i64 %1528, %1532
  br i1 %1533, label %1505, label %1534

1534:                                             ; preds = %1505, %1501, %1492
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1167) #12
  br label %1535

1535:                                             ; preds = %1534, %1427
  %1536 = phi i64 [ %1471, %1534 ], [ %1380, %1427 ]
  %1537 = phi i64 [ %1496, %1534 ], [ 1, %1427 ]
  %1538 = load i64, i64* %133, align 8
  %1539 = icmp ult i64 %1536, %1538
  br i1 %1539, label %1540, label %1790

1540:                                             ; preds = %1535
  %1541 = load i64, i64* %1189, align 8
  %1542 = and i64 %1541, 1
  %1543 = icmp eq i64 %1542, 0
  br i1 %1543, label %1550, label %1544

1544:                                             ; preds = %1540
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1191) #12
  %1545 = load i64, i64* %130, align 8, !noalias !1983
  %1546 = load i64, i64* %131, align 8, !noalias !1983
  %1547 = add i64 %1546, %1536
  %1548 = load i64, i64* %132, align 8, !noalias !1983
  store i64 %1545, i64* %1192, align 8, !alias.scope !1983
  store i64 %1547, i64* %1193, align 8, !alias.scope !1983
  store i64 %1548, i64* %1194, align 8, !alias.scope !1983
  store i64 %1537, i64* %1195, align 8, !alias.scope !1983
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1197) #12
  %1549 = add i64 %1536, %211
  store i64 %210, i64* %1198, align 8, !alias.scope !1986
  store i64 %1549, i64* %1199, align 8, !alias.scope !1986
  store i64 %212, i64* %1200, align 8, !alias.scope !1986
  store i64 %1537, i64* %1201, align 8, !alias.scope !1986
  call void @_ZN3jxl8AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES5_RKNS_19ColorCorrelationMapEPS7_(%"struct.jxl::NoiseParams"* dereferenceable(32) %1190, %"class.jxl::Rect"* nonnull dereferenceable(32) %26, %"class.jxl::Image3"* dereferenceable(96) %1196, %"class.jxl::Rect"* nonnull dereferenceable(32) %27, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %1202, %"class.jxl::Image3"* %217) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1197) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1191) #12
  br label %1550

1550:                                             ; preds = %1540, %1544
  %1551 = load i32, i32* %1203, align 8
  %1552 = icmp eq i32 %1551, 0
  br i1 %1552, label %1593, label %1553

1553:                                             ; preds = %1550
  %1554 = add i64 %1537, %1536
  %1555 = icmp ult i64 %1536, %1554
  br i1 %1555, label %1557, label %1593

1556:                                             ; preds = %1557
  br i1 %1555, label %1824, label %1593

1557:                                             ; preds = %1553, %1557
  %1558 = phi i64 [ %1591, %1557 ], [ %1536, %1553 ]
  %1559 = load i64, i64* %131, align 8
  %1560 = add i64 %1559, %1558
  %1561 = load i64, i64* %1204, align 8
  %1562 = mul i64 %1561, %1560
  %1563 = load i8*, i8** %1267, align 8
  %1564 = ptrtoint i8* %1563 to i64
  %1565 = and i64 %1564, 63
  %1566 = icmp eq i64 %1565, 0
  call void @llvm.assume(i1 %1566) #12
  %1567 = getelementptr inbounds i8, i8* %1563, i64 %1562
  %1568 = ptrtoint i8* %1567 to i64
  %1569 = and i64 %1568, 63
  %1570 = icmp eq i64 %1569, 0
  call void @llvm.assume(i1 %1570) #12
  %1571 = bitcast i8* %1567 to float*
  %1572 = load i64, i64* %130, align 8
  %1573 = getelementptr inbounds float, float* %1571, i64 %1572
  %1574 = add i64 %1558, %211
  %1575 = load i64, i64* %1205, align 8
  %1576 = mul i64 %1575, %1574
  %1577 = load i8*, i8** %1268, align 8
  %1578 = ptrtoint i8* %1577 to i64
  %1579 = and i64 %1578, 63
  %1580 = icmp eq i64 %1579, 0
  call void @llvm.assume(i1 %1580) #12
  %1581 = getelementptr inbounds i8, i8* %1577, i64 %1576
  %1582 = ptrtoint i8* %1581 to i64
  %1583 = and i64 %1582, 63
  %1584 = icmp eq i64 %1583, 0
  call void @llvm.assume(i1 %1584) #12
  %1585 = bitcast i8* %1581 to float*
  %1586 = getelementptr inbounds float, float* %1585, i64 %210
  %1587 = bitcast float* %1573 to i8*
  %1588 = bitcast float* %1586 to i8*
  %1589 = load i64, i64* %132, align 8
  %1590 = shl i64 %1589, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1587, i8* align 4 %1588, i64 %1590, i1 false)
  %1591 = add nuw i64 %1558, 1
  %1592 = icmp eq i64 %1591, %1554
  br i1 %1592, label %1556, label %1557

1593:                                             ; preds = %1861, %1553, %1556, %1860, %1550
  %1594 = load i8, i8* %1206, align 8, !range !2
  %1595 = icmp eq i8 %1594, 0
  br i1 %1595, label %1617, label %1596

1596:                                             ; preds = %1593
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1207) #12
  %1597 = add i64 %1536, %211
  store i64 %210, i64* %1208, align 8, !alias.scope !1989
  store i64 %1597, i64* %1209, align 8, !alias.scope !1989
  store i64 %212, i64* %1210, align 8, !alias.scope !1989
  store i64 %1537, i64* %1211, align 8, !alias.scope !1989
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1212) #12
  %1598 = load i64, i64* %130, align 8, !noalias !1992
  %1599 = load i64, i64* %131, align 8, !noalias !1992
  %1600 = add i64 %1599, %1536
  %1601 = load i64, i64* %132, align 8, !noalias !1992
  %1602 = load i64, i64* %1213, align 8
  %1603 = load i64, i64* %1188, align 8
  store i64 %1598, i64* %1214, align 8, !alias.scope !1995
  store i64 %1600, i64* %1215, align 8, !alias.scope !1995
  %1604 = add i64 %1601, %1598
  %1605 = icmp ugt i64 %1604, %1602
  %1606 = call i64 @llvm.usub.sat.i64(i64 %1602, i64 %1598) #12
  %1607 = select i1 %1605, i64 %1606, i64 %1601
  store i64 %1607, i64* %1216, align 8, !alias.scope !1995
  %1608 = add i64 %1600, %1537
  %1609 = icmp ugt i64 %1608, %1603
  %1610 = call i64 @llvm.usub.sat.i64(i64 %1603, i64 %1600) #12
  %1611 = select i1 %1609, i64 %1610, i64 %1537
  store i64 %1611, i64* %1217, align 8, !alias.scope !1995
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1218) #12
  %1612 = add i64 %1536, %276
  store i64 %275, i64* %1219, align 8, !alias.scope !1998
  store i64 %1612, i64* %1220, align 8, !alias.scope !1998
  store i64 %277, i64* %1221, align 8, !alias.scope !1998
  store i64 %1537, i64* %1222, align 8, !alias.scope !1998
  %1613 = load i8, i8* %1223, align 1, !range !2
  %1614 = icmp ne i8 %1613, 0
  %1615 = load i8*, i8** %42, align 8
  %1616 = load i64, i64* %1224, align 8
  call void @_ZN3jxl14FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES6_PKNS_5PlaneIfEES6_bPhmm(%"class.jxl::Image3"* dereferenceable(96) %217, %"class.jxl::Rect"* nonnull dereferenceable(32) %28, %"class.jxl::Rect"* nonnull dereferenceable(32) %29, %"class.jxl::Plane"* %278, %"class.jxl::Rect"* nonnull dereferenceable(32) %30, i1 zeroext %1614, i8* %1615, i64 %1602, i64 %1616) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1218) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1212) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1207) #12
  br label %1790

1617:                                             ; preds = %1593
  %1618 = load i8, i8* %1225, align 8, !range !2
  %1619 = icmp eq i8 %1618, 0
  br i1 %1619, label %1622, label %1620

1620:                                             ; preds = %1617
  %1621 = load i32, i32* %1226, align 8
  switch i32 %1621, label %1636 [
    i32 3, label %1622
    i32 0, label %1622
  ]

1622:                                             ; preds = %1620, %1620, %1617
  %1623 = load i32, i32* %1227, align 8
  switch i32 %1623, label %1636 [
    i32 0, label %1624
    i32 2, label %1634
  ]

1624:                                             ; preds = %1622
  %1625 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %1626 = and i32 %1625, 2225
  %1627 = call i32 @llvm.cttz.i32(i32 %1626, i1 true) #12, !range !1941
  %1628 = zext i32 %1627 to i64
  %1629 = getelementptr inbounds [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*], [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*]* @_ZN3jxlL34UndoXYBInPlaceHighwayDispatchTableE, i64 0, i64 %1628
  %1630 = load i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)** %1629, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1233) #12
  %1631 = add i64 %1536, %211
  store i64 %210, i64* %1234, align 8, !alias.scope !2001
  store i64 %1631, i64* %1235, align 8, !alias.scope !2001
  store i64 %212, i64* %1236, align 8, !alias.scope !2001
  store i64 %1537, i64* %1237, align 8, !alias.scope !2001
  %1632 = call i32 %1630(%"class.jxl::Image3"* %217, %"class.jxl::Rect"* nonnull dereferenceable(32) %31, %"struct.jxl::OutputEncodingInfo"* dereferenceable(352) %1238) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1233) #12
  %1633 = icmp eq i32 %1632, 0
  br i1 %1633, label %1636, label %1801

1634:                                             ; preds = %1622
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1228) #12
  %1635 = add i64 %1536, %211
  store i64 %210, i64* %1229, align 8, !alias.scope !2004
  store i64 %1635, i64* %1230, align 8, !alias.scope !2004
  store i64 %212, i64* %1231, align 8, !alias.scope !2004
  store i64 %1537, i64* %1232, align 8, !alias.scope !2004
  call void @_ZN3jxl10YcbcrToRgbERKNS_6Image3IfEEPS1_RKNS_4RectE(%"class.jxl::Image3"* dereferenceable(96) %217, %"class.jxl::Image3"* %217, %"class.jxl::Rect"* nonnull dereferenceable(32) %32) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1228) #12
  br label %1636

1636:                                             ; preds = %1620, %1622, %1624, %1634
  %1637 = load i8*, i8** %42, align 8
  %1638 = icmp eq i8* %1637, null
  br i1 %1638, label %1666, label %1639

1639:                                             ; preds = %1636
  %1640 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %1641 = and i32 %1640, 2225
  %1642 = call i32 @llvm.cttz.i32(i32 %1641, i1 true) #12, !range !1941
  %1643 = zext i32 %1642 to i64
  %1644 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*]* @_ZN3jxlL32FloatToRGBA8HighwayDispatchTableE, i64 0, i64 %1643
  %1645 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)** %1644, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1239) #12
  %1646 = add i64 %1536, %211
  store i64 %210, i64* %1240, align 8, !alias.scope !2007
  store i64 %1646, i64* %1241, align 8, !alias.scope !2007
  store i64 %212, i64* %1242, align 8, !alias.scope !2007
  store i64 %1537, i64* %1243, align 8, !alias.scope !2007
  %1647 = load i8, i8* %1223, align 1, !range !2
  %1648 = icmp ne i8 %1647, 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1244) #12
  %1649 = add i64 %1536, %276
  store i64 %275, i64* %1245, align 8, !alias.scope !2010
  store i64 %1649, i64* %1246, align 8, !alias.scope !2010
  store i64 %277, i64* %1247, align 8, !alias.scope !2010
  store i64 %1537, i64* %1248, align 8, !alias.scope !2010
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1249) #12
  %1650 = load i64, i64* %130, align 8, !noalias !2013
  %1651 = load i64, i64* %131, align 8, !noalias !2013
  %1652 = add i64 %1651, %1536
  %1653 = load i64, i64* %132, align 8, !noalias !2013
  %1654 = load i64, i64* %1213, align 8
  %1655 = load i64, i64* %1188, align 8
  store i64 %1650, i64* %1250, align 8, !alias.scope !2016
  store i64 %1652, i64* %1251, align 8, !alias.scope !2016
  %1656 = add i64 %1653, %1650
  %1657 = icmp ugt i64 %1656, %1654
  %1658 = call i64 @llvm.usub.sat.i64(i64 %1654, i64 %1650) #12
  %1659 = select i1 %1657, i64 %1658, i64 %1653
  store i64 %1659, i64* %1252, align 8, !alias.scope !2016
  %1660 = add i64 %1652, %1537
  %1661 = icmp ugt i64 %1660, %1655
  %1662 = call i64 @llvm.usub.sat.i64(i64 %1655, i64 %1652) #12
  %1663 = select i1 %1661, i64 %1662, i64 %1537
  store i64 %1663, i64* %1253, align 8, !alias.scope !2016
  %1664 = load i8*, i8** %42, align 8
  %1665 = load i64, i64* %1224, align 8
  call void %1645(%"class.jxl::Image3"* dereferenceable(96) %217, %"class.jxl::Rect"* nonnull dereferenceable(32) %33, i1 zeroext %1648, %"class.jxl::Plane"* %278, %"class.jxl::Rect"* nonnull dereferenceable(32) %34, %"class.jxl::Rect"* nonnull dereferenceable(32) %35, i8* %1664, i64 %1665) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1249) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1244) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1239) #12
  br label %1666

1666:                                             ; preds = %1636, %1639
  %1667 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %1254, align 8
  %1668 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %1667, i64 0, i32 2
  %1669 = load i8, i8* %1668, align 8, !range !2
  %1670 = icmp eq i8 %1669, 0
  br i1 %1670, label %1671, label %1790

1671:                                             ; preds = %1666
  %1672 = add i64 %1536, %276
  %1673 = add i64 %1536, %211
  %1674 = load i64, i64* %130, align 8, !noalias !2019
  %1675 = load i64, i64* %131, align 8, !noalias !2019
  %1676 = add i64 %1675, %1536
  %1677 = load i64, i64* %132, align 8, !noalias !2019
  %1678 = load i64, i64* %1213, align 8
  %1679 = load i64, i64* %1188, align 8
  %1680 = add i64 %1677, %1674
  %1681 = icmp ugt i64 %1680, %1678
  %1682 = call i64 @llvm.usub.sat.i64(i64 %1678, i64 %1674) #12
  %1683 = select i1 %1681, i64 %1682, i64 %1677
  %1684 = add i64 %1676, %1537
  %1685 = icmp ugt i64 %1684, %1679
  %1686 = call i64 @llvm.usub.sat.i64(i64 %1679, i64 %1676) #12
  %1687 = select i1 %1685, i64 %1686, i64 %1537
  %1688 = icmp eq i64 %1687, 0
  br i1 %1688, label %1790, label %1689

1689:                                             ; preds = %1671
  %1690 = icmp eq i64 %1683, 0
  br label %1691

1691:                                             ; preds = %1745, %1689
  %1692 = phi i64 [ 0, %1689 ], [ %1750, %1745 ]
  %1693 = add i64 %1673, %1692
  %1694 = load i64, i64* %1205, align 8
  %1695 = mul i64 %1694, %1693
  %1696 = load i8*, i8** %1273, align 8
  %1697 = ptrtoint i8* %1696 to i64
  %1698 = and i64 %1697, 63
  %1699 = icmp eq i64 %1698, 0
  call void @llvm.assume(i1 %1699) #12
  %1700 = getelementptr inbounds i8, i8* %1696, i64 %1695
  %1701 = ptrtoint i8* %1700 to i64
  %1702 = and i64 %1701, 63
  %1703 = icmp eq i64 %1702, 0
  call void @llvm.assume(i1 %1703) #12
  %1704 = bitcast i8* %1700 to float*
  %1705 = getelementptr inbounds float, float* %1704, i64 %210
  %1706 = load i8*, i8** %1274, align 8
  %1707 = ptrtoint i8* %1706 to i64
  %1708 = and i64 %1707, 63
  %1709 = icmp eq i64 %1708, 0
  call void @llvm.assume(i1 %1709) #12
  %1710 = getelementptr inbounds i8, i8* %1706, i64 %1695
  %1711 = ptrtoint i8* %1710 to i64
  %1712 = and i64 %1711, 63
  %1713 = icmp eq i64 %1712, 0
  call void @llvm.assume(i1 %1713) #12
  %1714 = bitcast i8* %1710 to float*
  %1715 = getelementptr inbounds float, float* %1714, i64 %210
  %1716 = load i8*, i8** %1275, align 8
  %1717 = ptrtoint i8* %1716 to i64
  %1718 = and i64 %1717, 63
  %1719 = icmp eq i64 %1718, 0
  call void @llvm.assume(i1 %1719) #12
  %1720 = getelementptr inbounds i8, i8* %1716, i64 %1695
  %1721 = ptrtoint i8* %1720 to i64
  %1722 = and i64 %1721, 63
  %1723 = icmp eq i64 %1722, 0
  call void @llvm.assume(i1 %1723) #12
  %1724 = bitcast i8* %1720 to float*
  %1725 = getelementptr inbounds float, float* %1724, i64 %210
  br i1 %1255, label %1737, label %1726

1726:                                             ; preds = %1691
  %1727 = add i64 %1672, %1692
  %1728 = load i8*, i8** %1256, align 8
  %1729 = load i64, i64* %1257, align 8
  %1730 = mul i64 %1729, %1727
  %1731 = getelementptr inbounds i8, i8* %1728, i64 %1730
  %1732 = ptrtoint i8* %1731 to i64
  %1733 = and i64 %1732, 63
  %1734 = icmp eq i64 %1733, 0
  call void @llvm.assume(i1 %1734) #12
  %1735 = bitcast i8* %1731 to float*
  %1736 = getelementptr inbounds float, float* %1735, i64 %275
  br label %1739

1737:                                             ; preds = %1691
  %1738 = load float*, float** %1258, align 8
  br label %1739

1739:                                             ; preds = %1737, %1726
  %1740 = phi float* [ %1738, %1737 ], [ %1736, %1726 ]
  %1741 = load %"class.std::__1::vector.256"*, %"class.std::__1::vector.256"** %1259, align 8
  %1742 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %1741, i64 %4
  br i1 %1690, label %1745, label %1743

1743:                                             ; preds = %1739
  %1744 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %1742, i64 0, i32 0, i32 0
  br label %1752

1745:                                             ; preds = %1786, %1739
  %1746 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %1742, i64 0, i32 0, i32 0
  %1747 = load float*, float** %1746, align 8
  %1748 = add i64 %1692, %1676
  %1749 = load void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)*, void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)** %1260, align 8
  call void %1749(%"union.std::__1::__function::__policy_storage"* %1261, float* %1747, i64 %1674, i64 %1748, i64 %1683) #12
  %1750 = add nuw i64 %1692, 1
  %1751 = icmp eq i64 %1750, %1687
  br i1 %1751, label %1790, label %1691

1752:                                             ; preds = %1786, %1743
  %1753 = phi i64 [ 0, %1743 ], [ %1788, %1786 ]
  %1754 = phi i64 [ 0, %1743 ], [ %1787, %1786 ]
  %1755 = getelementptr inbounds float, float* %1705, i64 %1753
  %1756 = bitcast float* %1755 to i32*
  %1757 = load i32, i32* %1756, align 4
  %1758 = add i64 %1754, 1
  %1759 = load float*, float** %1744, align 8
  %1760 = getelementptr inbounds float, float* %1759, i64 %1754
  %1761 = bitcast float* %1760 to i32*
  store i32 %1757, i32* %1761, align 4
  %1762 = getelementptr inbounds float, float* %1715, i64 %1753
  %1763 = bitcast float* %1762 to i32*
  %1764 = load i32, i32* %1763, align 4
  %1765 = add i64 %1754, 2
  %1766 = load float*, float** %1744, align 8
  %1767 = getelementptr inbounds float, float* %1766, i64 %1758
  %1768 = bitcast float* %1767 to i32*
  store i32 %1764, i32* %1768, align 4
  %1769 = getelementptr inbounds float, float* %1725, i64 %1753
  %1770 = bitcast float* %1769 to i32*
  %1771 = load i32, i32* %1770, align 4
  %1772 = add i64 %1754, 3
  %1773 = load float*, float** %1744, align 8
  %1774 = getelementptr inbounds float, float* %1773, i64 %1765
  %1775 = bitcast float* %1774 to i32*
  store i32 %1771, i32* %1775, align 4
  %1776 = load i8, i8* %1223, align 1, !range !2
  %1777 = icmp eq i8 %1776, 0
  br i1 %1777, label %1786, label %1778

1778:                                             ; preds = %1752
  %1779 = getelementptr inbounds float, float* %1740, i64 %1753
  %1780 = bitcast float* %1779 to i32*
  %1781 = load i32, i32* %1780, align 4
  %1782 = add i64 %1754, 4
  %1783 = load float*, float** %1744, align 8
  %1784 = getelementptr inbounds float, float* %1783, i64 %1772
  %1785 = bitcast float* %1784 to i32*
  store i32 %1781, i32* %1785, align 4
  br label %1786

1786:                                             ; preds = %1752, %1778
  %1787 = phi i64 [ %1782, %1778 ], [ %1772, %1752 ]
  %1788 = add nuw i64 %1753, 1
  %1789 = icmp eq i64 %1788, %1683
  br i1 %1789, label %1745, label %1752

1790:                                             ; preds = %1745, %1671, %1484, %1461, %1596, %1666, %1535, %1370
  %1791 = add nsw i64 %1277, 1
  %1792 = load i32, i32* %160, align 4
  %1793 = zext i32 %1792 to i64
  %1794 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %1793
  %1795 = load i64, i64* %1794, align 8
  %1796 = load i8, i8* %1125, align 1, !range !2
  %1797 = zext i8 %1796 to i64
  %1798 = add i64 %1795, %123
  %1799 = add i64 %1798, %1797
  %1800 = icmp slt i64 %1791, %1799
  br i1 %1800, label %1276, label %1801

1801:                                             ; preds = %1790, %1624, %1422, %1416, %1119
  %1802 = phi i32 [ 0, %1119 ], [ %1420, %1416 ], [ %1425, %1422 ], [ %1632, %1624 ], [ 0, %1790 ]
  %1803 = load float**, float*** %914, align 8
  %1804 = icmp eq float** %1803, null
  br i1 %1804, label %1809, label %1805

1805:                                             ; preds = %1801
  %1806 = ptrtoint float** %1803 to i64
  %1807 = bitcast float*** %915 to i64*
  store i64 %1806, i64* %1807, align 8
  %1808 = bitcast float** %1803 to i8*
  call void @_ZdlPv(i8* %1808) #18
  br label %1809

1809:                                             ; preds = %1801, %1805
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %913) #12
  %1810 = load %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"*, %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %337, align 8
  %1811 = icmp eq %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %1810, null
  br i1 %1811, label %1816, label %1812

1812:                                             ; preds = %1809
  %1813 = ptrtoint %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %1810 to i64
  %1814 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"** %338 to i64*
  store i64 %1813, i64* %1814, align 8
  %1815 = bitcast %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %1810 to i8*
  call void @_ZdlPv(i8* %1815) #18
  br label %1816

1816:                                             ; preds = %1809, %1812
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %336) #12
  %1817 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %333, align 8
  %1818 = icmp eq %"struct.std::__1::pair"* %1817, null
  br i1 %1818, label %1823, label %1819

1819:                                             ; preds = %1816
  %1820 = ptrtoint %"struct.std::__1::pair"* %1817 to i64
  %1821 = bitcast %"struct.std::__1::pair"** %334 to i64*
  store i64 %1820, i64* %1821, align 8
  %1822 = bitcast %"struct.std::__1::pair"* %1817 to i8*
  call void @_ZdlPv(i8* %1822) #18
  br label %1823

1823:                                             ; preds = %1816, %1819
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %332) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %155) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %153) #12
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %151) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %129) #12
  ret i32 %1802

1824:                                             ; preds = %1556, %1824
  %1825 = phi i64 [ %1858, %1824 ], [ %1536, %1556 ]
  %1826 = load i64, i64* %131, align 8
  %1827 = add i64 %1826, %1825
  %1828 = load i64, i64* %1204, align 8
  %1829 = mul i64 %1828, %1827
  %1830 = load i8*, i8** %1269, align 8
  %1831 = ptrtoint i8* %1830 to i64
  %1832 = and i64 %1831, 63
  %1833 = icmp eq i64 %1832, 0
  call void @llvm.assume(i1 %1833) #12
  %1834 = getelementptr inbounds i8, i8* %1830, i64 %1829
  %1835 = ptrtoint i8* %1834 to i64
  %1836 = and i64 %1835, 63
  %1837 = icmp eq i64 %1836, 0
  call void @llvm.assume(i1 %1837) #12
  %1838 = bitcast i8* %1834 to float*
  %1839 = load i64, i64* %130, align 8
  %1840 = getelementptr inbounds float, float* %1838, i64 %1839
  %1841 = add i64 %1825, %211
  %1842 = load i64, i64* %1205, align 8
  %1843 = mul i64 %1842, %1841
  %1844 = load i8*, i8** %1270, align 8
  %1845 = ptrtoint i8* %1844 to i64
  %1846 = and i64 %1845, 63
  %1847 = icmp eq i64 %1846, 0
  call void @llvm.assume(i1 %1847) #12
  %1848 = getelementptr inbounds i8, i8* %1844, i64 %1843
  %1849 = ptrtoint i8* %1848 to i64
  %1850 = and i64 %1849, 63
  %1851 = icmp eq i64 %1850, 0
  call void @llvm.assume(i1 %1851) #12
  %1852 = bitcast i8* %1848 to float*
  %1853 = getelementptr inbounds float, float* %1852, i64 %210
  %1854 = bitcast float* %1840 to i8*
  %1855 = bitcast float* %1853 to i8*
  %1856 = load i64, i64* %132, align 8
  %1857 = shl i64 %1856, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1854, i8* align 4 %1855, i64 %1857, i1 false)
  %1858 = add nuw i64 %1825, 1
  %1859 = icmp eq i64 %1858, %1554
  br i1 %1859, label %1860, label %1824

1860:                                             ; preds = %1824
  br i1 %1555, label %1861, label %1593

1861:                                             ; preds = %1860, %1861
  %1862 = phi i64 [ %1895, %1861 ], [ %1536, %1860 ]
  %1863 = load i64, i64* %131, align 8
  %1864 = add i64 %1863, %1862
  %1865 = load i64, i64* %1204, align 8
  %1866 = mul i64 %1865, %1864
  %1867 = load i8*, i8** %1271, align 8
  %1868 = ptrtoint i8* %1867 to i64
  %1869 = and i64 %1868, 63
  %1870 = icmp eq i64 %1869, 0
  call void @llvm.assume(i1 %1870) #12
  %1871 = getelementptr inbounds i8, i8* %1867, i64 %1866
  %1872 = ptrtoint i8* %1871 to i64
  %1873 = and i64 %1872, 63
  %1874 = icmp eq i64 %1873, 0
  call void @llvm.assume(i1 %1874) #12
  %1875 = bitcast i8* %1871 to float*
  %1876 = load i64, i64* %130, align 8
  %1877 = getelementptr inbounds float, float* %1875, i64 %1876
  %1878 = add i64 %1862, %211
  %1879 = load i64, i64* %1205, align 8
  %1880 = mul i64 %1879, %1878
  %1881 = load i8*, i8** %1272, align 8
  %1882 = ptrtoint i8* %1881 to i64
  %1883 = and i64 %1882, 63
  %1884 = icmp eq i64 %1883, 0
  call void @llvm.assume(i1 %1884) #12
  %1885 = getelementptr inbounds i8, i8* %1881, i64 %1880
  %1886 = ptrtoint i8* %1885 to i64
  %1887 = and i64 %1886, 63
  %1888 = icmp eq i64 %1887, 0
  call void @llvm.assume(i1 %1888) #12
  %1889 = bitcast i8* %1885 to float*
  %1890 = getelementptr inbounds float, float* %1889, i64 %210
  %1891 = bitcast float* %1877 to i8*
  %1892 = bitcast float* %1890 to i8*
  %1893 = load i64, i64* %132, align 8
  %1894 = shl i64 %1893, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1891, i8* align 4 %1892, i64 %1894, i1 false)
  %1895 = add nuw i64 %1862, 1
  %1896 = icmp eq i64 %1895, %1554
  br i1 %1896, label %1593, label %1861
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_128EnsurePaddingInPlaceRowByRow7ProcessEl(%"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* nocapture readonly, i64) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 7
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %163 [
    i32 1, label %72
    i32 0, label %5
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 1
  %7 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 6
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %1
  %11 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = mul i64 %14, %10
  %16 = getelementptr inbounds i8, i8* %12, i64 %15
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #12
  %20 = bitcast i8* %16 to float*
  %21 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 3
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %22, %24
  br i1 %25, label %44, label %26

26:                                               ; preds = %44, %5
  %27 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 4
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 5
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %28, %30
  br i1 %31, label %32, label %163

32:                                               ; preds = %26
  %33 = shl i64 %28, 1
  %34 = xor i64 %28, -1
  %35 = add i64 %33, %34
  %36 = getelementptr inbounds float, float* %20, i64 %35
  %37 = bitcast float* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds float, float* %20, i64 %28
  %40 = bitcast float* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = add nuw i64 %28, 1
  %42 = load i64, i64* %29, align 8
  %43 = icmp ult i64 %41, %42
  br i1 %43, label %58, label %163

44:                                               ; preds = %5, %44
  %45 = phi i64 [ %56, %44 ], [ %24, %5 ]
  %46 = phi i64 [ %55, %44 ], [ %22, %5 ]
  %47 = shl i64 %45, 1
  %48 = xor i64 %46, -1
  %49 = add i64 %47, %48
  %50 = getelementptr inbounds float, float* %20, i64 %49
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds float, float* %20, i64 %46
  %54 = bitcast float* %53 to i32*
  store i32 %52, i32* %54, align 4
  %55 = add nuw i64 %46, 1
  %56 = load i64, i64* %23, align 8
  %57 = icmp ult i64 %55, %56
  br i1 %57, label %44, label %26

58:                                               ; preds = %32, %58
  %59 = phi i64 [ %69, %58 ], [ %41, %32 ]
  %60 = load i64, i64* %27, align 8
  %61 = shl i64 %60, 1
  %62 = xor i64 %59, -1
  %63 = add i64 %61, %62
  %64 = getelementptr inbounds float, float* %20, i64 %63
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds float, float* %20, i64 %59
  %68 = bitcast float* %67 to i32*
  store i32 %66, i32* %68, align 4
  %69 = add nuw i64 %59, 1
  %70 = load i64, i64* %29, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %58, label %163

72:                                               ; preds = %2
  %73 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 1
  %74 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %73, align 8
  %75 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 6
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, %1
  %78 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 0, i32 0, i32 4
  %81 = load i64, i64* %80, align 8
  %82 = mul i64 %81, %77
  %83 = getelementptr inbounds i8, i8* %79, i64 %82
  %84 = ptrtoint i8* %83 to i64
  %85 = and i64 %84, 63
  %86 = icmp eq i64 %85, 0
  tail call void @llvm.assume(i1 %86) #12
  %87 = bitcast i8* %83 to float*
  %88 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 3
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds float, float* %87, i64 %89
  %91 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %92, %89
  %94 = icmp slt i64 %93, 0
  %95 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 4
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %96, %89
  br i1 %94, label %106, label %98

98:                                               ; preds = %119, %72
  %99 = phi i64 [ %96, %72 ], [ %126, %119 ]
  %100 = phi i64 [ %89, %72 ], [ %127, %119 ]
  %101 = phi i64 [ %97, %72 ], [ %128, %119 ]
  %102 = getelementptr inbounds %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow", %"class.jxl::(anonymous namespace)::EnsurePaddingInPlaceRowByRow"* %0, i64 0, i32 5
  %103 = load i64, i64* %102, align 8
  %104 = sub i64 %103, %100
  %105 = icmp ult i64 %101, %104
  br i1 %105, label %130, label %163

106:                                              ; preds = %72, %119
  %107 = phi i64 [ %128, %119 ], [ %97, %72 ]
  %108 = phi i64 [ %125, %119 ], [ %93, %72 ]
  %109 = shl i64 %107, 1
  br label %110

110:                                              ; preds = %110, %106
  %111 = phi i1 [ true, %106 ], [ %116, %110 ]
  %112 = phi i64 [ %108, %106 ], [ %115, %110 ]
  %113 = xor i64 %112, -1
  %114 = select i1 %111, i64 0, i64 %109
  %115 = add i64 %114, %113
  %116 = icmp slt i64 %115, 0
  %117 = icmp sge i64 %115, %107
  %118 = or i1 %116, %117
  br i1 %118, label %110, label %119

119:                                              ; preds = %110
  %120 = getelementptr inbounds float, float* %90, i64 %115
  %121 = bitcast float* %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds float, float* %90, i64 %108
  %124 = bitcast float* %123 to i32*
  store i32 %122, i32* %124, align 4
  %125 = add nsw i64 %108, 1
  %126 = load i64, i64* %95, align 8
  %127 = load i64, i64* %88, align 8
  %128 = sub i64 %126, %127
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %98, label %106

130:                                              ; preds = %98, %161
  %131 = phi i64 [ %162, %161 ], [ %99, %98 ]
  %132 = phi i64 [ %158, %161 ], [ %100, %98 ]
  %133 = phi i64 [ %156, %161 ], [ %101, %98 ]
  %134 = sub i64 %131, %132
  %135 = icmp slt i64 %133, 0
  %136 = icmp sge i64 %133, %134
  %137 = or i1 %135, %136
  br i1 %137, label %138, label %149

138:                                              ; preds = %130
  %139 = shl i64 %134, 1
  br label %140

140:                                              ; preds = %140, %138
  %141 = phi i1 [ %135, %138 ], [ %146, %140 ]
  %142 = phi i64 [ %133, %138 ], [ %145, %140 ]
  %143 = xor i64 %142, -1
  %144 = select i1 %141, i64 0, i64 %139
  %145 = add i64 %144, %143
  %146 = icmp slt i64 %145, 0
  %147 = icmp sge i64 %145, %134
  %148 = or i1 %146, %147
  br i1 %148, label %140, label %149

149:                                              ; preds = %140, %130
  %150 = phi i64 [ %133, %130 ], [ %145, %140 ]
  %151 = getelementptr inbounds float, float* %90, i64 %150
  %152 = bitcast float* %151 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = getelementptr inbounds float, float* %90, i64 %133
  %155 = bitcast float* %154 to i32*
  store i32 %153, i32* %155, align 4
  %156 = add nuw i64 %133, 1
  %157 = load i64, i64* %102, align 8
  %158 = load i64, i64* %88, align 8
  %159 = sub i64 %157, %158
  %160 = icmp ult i64 %156, %159
  br i1 %160, label %161, label %163

161:                                              ; preds = %149
  %162 = load i64, i64* %95, align 8
  br label %130

163:                                              ; preds = %58, %149, %32, %26, %98, %2
  ret void
}

declare void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_5PlaneIfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"*, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Rect"* dereferenceable(32), i64, i64) local_unnamed_addr #2

declare %"class.jxl::FilterPipeline"* @_ZN3jxl21PrepareFilterPipelineEPNS_18PassesDecoderStateERKNS_4RectERKNS_6Image3IfEES4_mmPS6_S4_(%"struct.jxl::PassesDecoderState"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), i64, i64, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #2

declare void @_ZN3jxl14FilterPipeline15ApplyFiltersRowERKNS_10LoopFilterERKNS_13FilterWeightsERKNS_4RectEl(%"class.jxl::FilterPipeline"*, %"struct.jxl::LoopFilter"* dereferenceable(144), %"struct.jxl::FilterWeights"* dereferenceable(72), %"class.jxl::Rect"* dereferenceable(32), i64) local_unnamed_addr #2

declare i32 @_ZNK3jxl15PatchDictionary5AddToEPNS_6Image3IfEERKNS_4RectEPKPfS6_(%"class.jxl::PatchDictionary"*, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), float**, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #2

declare i32 @_ZNK3jxl7Splines5AddToEPNS_6Image3IfEERKNS_4RectES6_RKNS_19ColorCorrelationMapE(%"class.jxl::Splines"*, %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104)) local_unnamed_addr #2

declare void @_ZNK3jxl9Upsampler12UpsampleRectERKNS_6Image3IfEERKNS_4RectEPS2_S7_lm(%"struct.jxl::Upsampler"*, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl8AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES5_RKNS_19ColorCorrelationMapEPS7_(%"struct.jxl::NoiseParams"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104), %"class.jxl::Image3"*) local_unnamed_addr #2

declare void @_ZN3jxl14FastXYBTosRGB8ERKNS_6Image3IfEERKNS_4RectES6_PKNS_5PlaneIfEES6_bPhmm(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Plane"*, %"class.jxl::Rect"* dereferenceable(32), i1 zeroext, i8*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl10YcbcrToRgbERKNS_6Image3IfEEPS1_RKNS_4RectE(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPNS_10ThreadPoolEbb(%"class.jxl::ImageBundle"*, %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, i1 zeroext, i1 zeroext) local_unnamed_addr #8 {
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.398", align 8
  %7 = alloca %"class.jxl::ThreadPool::RunCallState.398", align 8
  %8 = alloca double, align 8
  %9 = alloca %"class.jxl::ThreadPool", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.385", align 8
  %11 = alloca %"class.jxl::ThreadPool::RunCallState.385", align 8
  %12 = alloca double, align 8
  %13 = alloca %"class.jxl::ThreadPool", align 8
  %14 = alloca %"class.jxl::Rect", align 8
  %15 = alloca %"class.jxl::Rect", align 8
  %16 = alloca %"class.jxl::ImageBundle"*, align 8
  %17 = alloca %"struct.jxl::PassesDecoderState"*, align 8
  %18 = alloca %"class.jxl::Image3"*, align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Image3", align 8
  %21 = alloca %"class.jxl::Plane", align 8
  %22 = alloca %"class.jxl::Plane", align 8
  %23 = alloca %"class.std::__1::vector.311", align 8
  %24 = alloca %class.anon.318, align 8
  %25 = alloca %"class.std::__1::vector.220", align 8
  %26 = alloca %"struct.std::__1::atomic.319", align 1
  %27 = alloca %class.anon.323, align 8
  %28 = alloca %"class.jxl::Plane", align 8
  %29 = alloca %"class.jxl::ImageBlender", align 8
  %30 = alloca %"class.jxl::ImageBundle", align 8
  %31 = alloca %"class.std::__1::vector.311", align 8
  %32 = alloca %"struct.std::__1::atomic.319", align 1
  %33 = alloca %class.anon.325, align 8
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %16, align 8
  store %"struct.jxl::PassesDecoderState"* %1, %"struct.jxl::PassesDecoderState"** %17, align 8
  %34 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 1
  %35 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %34, align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1
  %37 = bitcast %"class.jxl::Image3"** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #12
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 10
  store %"class.jxl::Image3"* %38, %"class.jxl::Image3"** %18, align 8
  %39 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %39) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 0, i64 96, i1 false) #12
  %40 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 1, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 1, i64 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, %41
  br i1 %44, label %45, label %49

45:                                               ; preds = %5
  %46 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 1, i64 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, %41
  br i1 %48, label %308, label %49

49:                                               ; preds = %5, %45
  %50 = bitcast %"class.jxl::Image3"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %50) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 96, i1 false) #12, !alias.scope !2022
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %38, i64 0, i32 0, i64 0, i32 0, i32 0
  %52 = load i32, i32* %51, align 8, !noalias !2022
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %55 = load i32, i32* %54, align 4, !noalias !2022
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %57, i64 %53, i64 %56, i64 4) #12
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %58, i64 %53, i64 %56, i64 4) #12
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %59, i64 %53, i64 %56, i64 4) #12
  %60 = bitcast %"class.jxl::Rect"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60) #12, !noalias !2025
  %61 = bitcast %"class.jxl::Image3"* %38 to <2 x i32>*
  %62 = load <2 x i32>, <2 x i32>* %61, align 8, !noalias !2025
  %63 = zext <2 x i32> %62 to <2 x i64>
  %64 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %14, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 0, i64 16, i1 false) #12, !noalias !2025
  %65 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %65, align 8, !noalias !2025
  %66 = bitcast %"class.jxl::Rect"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #12, !noalias !2025
  %67 = bitcast %"class.jxl::Image3"* %20 to <2 x i32>*
  %68 = load <2 x i32>, <2 x i32>* %67, align 8, !alias.scope !2025
  %69 = zext <2 x i32> %68 to <2 x i64>
  %70 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %15, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 0, i64 16, i1 false) #12, !noalias !2025
  %71 = bitcast i64* %70 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %71, align 8, !noalias !2025
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %14, %"class.jxl::Image3"* dereferenceable(96) %38, %"class.jxl::Rect"* nonnull dereferenceable(32) %15, %"class.jxl::Image3"* nonnull %20) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #12, !noalias !2025
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %60) #12, !noalias !2025
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %50, i64 24, i1 false) #12
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = bitcast %"class.std::__1::unique_ptr"* %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i8* null, i8** %74, align 8
  %77 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  store i64 %76, i64* %79, align 8
  %80 = icmp eq i8* %78, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %49
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %78) #12
  br label %82

82:                                               ; preds = %81, %49
  %83 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1
  %84 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %85 = bitcast %"class.jxl::Plane"* %84 to i8*
  %86 = bitcast %"class.jxl::Plane"* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 24, i1 false) #12
  %87 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %88, i64 0, i32 0, i32 0, i32 0
  %90 = bitcast %"class.std::__1::unique_ptr"* %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i8* null, i8** %89, align 8
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 0, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = bitcast %"class.std::__1::unique_ptr"* %87 to i64*
  store i64 %91, i64* %94, align 8
  %95 = icmp eq i8* %93, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %82
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %93) #12
  br label %97

97:                                               ; preds = %96, %82
  %98 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2
  %99 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %100 = bitcast %"class.jxl::Plane"* %99 to i8*
  %101 = bitcast %"class.jxl::Plane"* %98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 24, i1 false) #12
  %102 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5
  %103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %103, i64 0, i32 0, i32 0, i32 0
  %105 = bitcast %"class.std::__1::unique_ptr"* %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i8* null, i8** %104, align 8
  %107 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %102, i64 0, i32 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = bitcast %"class.std::__1::unique_ptr"* %102 to i64*
  store i64 %106, i64* %109, align 8
  %110 = icmp eq i8* %108, null
  br i1 %110, label %111, label %113

111:                                              ; preds = %97
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %112, align 8
  br label %119

113:                                              ; preds = %97
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %108) #12
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %116, align 8
  %117 = icmp eq i8* %115, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %115) #12
  br label %119

119:                                              ; preds = %111, %118, %113
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8
  store i8* null, i8** %120, align 8
  %122 = icmp eq i8* %121, null
  br i1 %122, label %124, label %123

123:                                              ; preds = %119
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %121) #12
  br label %124

124:                                              ; preds = %123, %119
  %125 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %20, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  store i8* null, i8** %125, align 8
  %127 = icmp eq i8* %126, null
  br i1 %127, label %129, label %128

128:                                              ; preds = %124
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %126) #12
  br label %129

129:                                              ; preds = %124, %128
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %50) #12
  store %"class.jxl::Image3"* %19, %"class.jxl::Image3"** %18, align 8
  %130 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 6
  %131 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 2
  %132 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 7
  %133 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 3
  %134 = bitcast %"class.jxl::Plane"* %21 to i8*
  %135 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5
  %136 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %135, i64 0, i32 0, i32 0, i32 0
  %137 = bitcast %"class.std::__1::unique_ptr"* %135 to i64*
  %138 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"* %22 to i8*
  %140 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 5
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %140, i64 0, i32 0, i32 0, i32 0
  %142 = bitcast %"class.std::__1::unique_ptr"* %140 to i64*
  %143 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %22, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %144

144:                                              ; preds = %273, %129
  %145 = phi i64 [ 0, %129 ], [ %276, %273 ]
  %146 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145
  %147 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %146, i64 0, i32 0
  %148 = load i64, i64* %130, align 8
  %149 = load i8, i8* %131, align 4
  %150 = zext i8 %149 to i32
  %151 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 7, i32 1, i64 %145
  %152 = load i32, i32* %151, align 4
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = sub nsw i32 %150, %156
  %158 = shl i32 1, %157
  %159 = sext i32 %158 to i64
  %160 = add i64 %148, -1
  %161 = add i64 %160, %159
  %162 = udiv i64 %161, %159
  %163 = load i64, i64* %132, align 8
  %164 = load i8, i8* %133, align 1
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %153
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = sub nsw i32 %165, %168
  %170 = shl i32 1, %169
  %171 = sext i32 %170 to i64
  %172 = add i64 %163, -1
  %173 = add i64 %172, %171
  %174 = udiv i64 %173, %171
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145, i32 0, i32 2
  %176 = load i32, i32* %175, align 8
  %177 = zext i32 %176 to i64
  %178 = icmp ugt i64 %162, %177
  br i1 %178, label %179, label %182

179:                                              ; preds = %144
  %180 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)) #12
  %181 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

182:                                              ; preds = %144
  %183 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145, i32 0, i32 3
  %184 = load i32, i32* %183, align 4
  %185 = zext i32 %184 to i64
  %186 = icmp ugt i64 %174, %185
  br i1 %186, label %187, label %190

187:                                              ; preds = %182
  %188 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0)) #12
  %189 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

190:                                              ; preds = %182
  %191 = trunc i64 %162 to i32
  %192 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %146, i64 0, i32 0, i32 0
  store i32 %191, i32* %192, align 8
  %193 = trunc i64 %174 to i32
  %194 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145, i32 0, i32 1
  store i32 %193, i32* %194, align 4
  %195 = load i8, i8* %131, align 4
  %196 = load i32, i32* %151, align 4
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = icmp eq i8 %195, %199
  br i1 %200, label %208, label %201

201:                                              ; preds = %190
  %202 = bitcast %"class.jxl::Plane"* %146 to i8*
  %203 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145, i32 0, i32 5
  %204 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %203, i64 0, i32 0, i32 0, i32 0
  %205 = bitcast %"class.std::__1::unique_ptr"* %203 to i64*
  br label %219

206:                                              ; preds = %246
  %207 = zext i32 %250 to i64
  br label %208

208:                                              ; preds = %206, %190
  %209 = phi i64 [ %197, %190 ], [ %207, %206 ]
  %210 = load i8, i8* %133, align 1
  %211 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %209
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %210, %212
  br i1 %213, label %257, label %214

214:                                              ; preds = %208
  %215 = bitcast %"class.jxl::Plane"* %146 to i8*
  %216 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %145, i32 0, i32 5
  %217 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %216, i64 0, i32 0, i32 0, i32 0
  %218 = bitcast %"class.std::__1::unique_ptr"* %216 to i64*
  br label %278

219:                                              ; preds = %201, %246
  %220 = phi i64 [ 0, %201 ], [ %247, %246 ]
  call void @_ZN3jxl9PlaneBase17InitializePaddingEmNS0_7PaddingE(%"struct.jxl::PlaneBase"* %147, i64 4, i32 1) #12
  %221 = load i64, i64* %130, align 8
  %222 = load i8, i8* %131, align 4
  %223 = zext i8 %222 to i64
  %224 = load i32, i32* %151, align 4
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i64
  %229 = xor i64 %220, 4294967295
  %230 = add i64 %229, %223
  %231 = sub i64 %230, %228
  %232 = trunc i64 %231 to i32
  %233 = shl i32 1, %232
  %234 = sext i32 %233 to i64
  %235 = add i64 %221, -1
  %236 = add i64 %235, %234
  %237 = udiv i64 %236, %234
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %134) #12
  call void @_ZN3jxl10UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* nonnull sret %21, %"class.jxl::Plane"* dereferenceable(32) %146, i64 %237, %"class.jxl::ThreadPool"* %2) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* nonnull align 8 %134, i64 24, i1 false) #12
  %238 = load i64, i64* %137, align 8
  store i8* null, i8** %136, align 8
  %239 = load i8*, i8** %204, align 8
  store i64 %238, i64* %205, align 8
  %240 = icmp eq i8* %239, null
  br i1 %240, label %241, label %242

241:                                              ; preds = %219
  store i8* null, i8** %138, align 8
  br label %246

242:                                              ; preds = %219
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %239) #12
  %243 = load i8*, i8** %138, align 8
  store i8* null, i8** %138, align 8
  %244 = icmp eq i8* %243, null
  br i1 %244, label %246, label %245

245:                                              ; preds = %242
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %243) #12
  br label %246

246:                                              ; preds = %241, %242, %245
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %134) #12
  %247 = add nuw i64 %220, 1
  %248 = load i8, i8* %131, align 4
  %249 = zext i8 %248 to i64
  %250 = load i32, i32* %151, align 4
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = sub nsw i64 %249, %254
  %256 = icmp ult i64 %247, %255
  br i1 %256, label %219, label %206

257:                                              ; preds = %288, %208
  %258 = load i64, i64* %130, align 8
  %259 = load i64, i64* %132, align 8
  %260 = load i32, i32* %175, align 8
  %261 = zext i32 %260 to i64
  %262 = icmp ugt i64 %258, %261
  br i1 %262, label %263, label %266

263:                                              ; preds = %257
  %264 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)) #12
  %265 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

266:                                              ; preds = %257
  %267 = load i32, i32* %183, align 4
  %268 = zext i32 %267 to i64
  %269 = icmp ugt i64 %259, %268
  br i1 %269, label %270, label %273

270:                                              ; preds = %266
  %271 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0)) #12
  %272 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

273:                                              ; preds = %266
  %274 = trunc i64 %258 to i32
  store i32 %274, i32* %192, align 8
  %275 = trunc i64 %259 to i32
  store i32 %275, i32* %194, align 4
  %276 = add nuw nsw i64 %145, 1
  %277 = icmp eq i64 %276, 3
  br i1 %277, label %299, label %144

278:                                              ; preds = %214, %288
  %279 = phi i64 [ 0, %214 ], [ %289, %288 ]
  call void @_ZN3jxl9PlaneBase17InitializePaddingEmNS0_7PaddingE(%"struct.jxl::PlaneBase"* %147, i64 4, i32 1) #12
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %139) #12
  call void @_ZN3jxl10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* nonnull sret %22, %"class.jxl::Plane"* dereferenceable(32) %146, %"class.jxl::ThreadPool"* %2) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %215, i8* nonnull align 8 %139, i64 24, i1 false) #12
  %280 = load i64, i64* %142, align 8
  store i8* null, i8** %141, align 8
  %281 = load i8*, i8** %217, align 8
  store i64 %280, i64* %218, align 8
  %282 = icmp eq i8* %281, null
  br i1 %282, label %283, label %284

283:                                              ; preds = %278
  store i8* null, i8** %143, align 8
  br label %288

284:                                              ; preds = %278
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %281) #12
  %285 = load i8*, i8** %143, align 8
  store i8* null, i8** %143, align 8
  %286 = icmp eq i8* %285, null
  br i1 %286, label %288, label %287

287:                                              ; preds = %284
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %285) #12
  br label %288

288:                                              ; preds = %283, %284, %287
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %139) #12
  %289 = add nuw i64 %279, 1
  %290 = load i8, i8* %133, align 1
  %291 = zext i8 %290 to i64
  %292 = load i32, i32* %151, align 4
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %293
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i64
  %297 = sub nsw i64 %291, %296
  %298 = icmp ult i64 %289, %297
  br i1 %298, label %278, label %257

299:                                              ; preds = %273
  %300 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %301 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %300, i64 0, i32 1
  %302 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %301, align 8
  %303 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %302, i64 0, i32 1, i32 7, i32 1, i64 1
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %302, i64 0, i32 1, i32 7, i32 1, i64 0
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %306, %304
  br i1 %307, label %308, label %328

308:                                              ; preds = %45, %299
  %309 = phi %"struct.jxl::PassesDecoderState"* [ %300, %299 ], [ %1, %45 ]
  %310 = phi %"struct.jxl::PassesSharedState"* [ %302, %299 ], [ %35, %45 ]
  %311 = phi i32 [ %306, %299 ], [ %41, %45 ]
  %312 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %310, i64 0, i32 1, i32 7, i32 1, i64 2
  %313 = load i32, i32* %312, align 4
  %314 = icmp eq i32 %313, %311
  br i1 %314, label %315, label %328

315:                                              ; preds = %308
  %316 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %310, i64 0, i32 1, i32 2
  %317 = load i32, i32* %316, align 4
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %319, label %328

319:                                              ; preds = %315
  %320 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %310, i64 0, i32 1, i32 25
  %321 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %320, align 8
  %322 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %321, i64 0, i32 0, i32 17, i32 0, i32 0
  %323 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %322, align 8
  %324 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %321, i64 0, i32 0, i32 17, i32 0, i32 1
  %325 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %324, align 8
  %326 = icmp ne %"struct.jxl::ExtraChannelInfo"* %323, %325
  %327 = or i1 %326, %3
  br i1 %327, label %328, label %618

328:                                              ; preds = %299, %308, %315, %319
  %329 = phi %"struct.jxl::PassesDecoderState"* [ %300, %299 ], [ %309, %308 ], [ %309, %315 ], [ %309, %319 ]
  %330 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 26, i32 11
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %377, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 1
  br i1 %336, label %337, label %377

337:                                              ; preds = %333
  %338 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 26, i32 26
  %339 = load float, float* %338, align 8
  %340 = fdiv float 0xBFF2BEC340000000, %339
  %341 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %329, i64 0, i32 25, i32 1, i32 0, i32 1
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %377, label %344

344:                                              ; preds = %337
  %345 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %329, i64 0, i32 25, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %346 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %329, i64 0, i32 25, i32 1, i32 0, i32 4
  %347 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %329, i64 0, i32 25, i32 1, i32 0, i32 0
  %348 = load i32, i32* %347, align 8
  br label %349

349:                                              ; preds = %364, %344
  %350 = phi i32 [ %342, %344 ], [ %365, %364 ]
  %351 = phi i32 [ %348, %344 ], [ %366, %364 ]
  %352 = phi i64 [ 0, %344 ], [ %367, %364 ]
  %353 = load i8*, i8** %345, align 8
  %354 = load i64, i64* %346, align 8
  %355 = mul i64 %354, %352
  %356 = getelementptr inbounds i8, i8* %353, i64 %355
  %357 = ptrtoint i8* %356 to i64
  %358 = and i64 %357, 63
  %359 = icmp eq i64 %358, 0
  call void @llvm.assume(i1 %359) #12
  %360 = bitcast i8* %356 to float*
  %361 = icmp eq i32 %351, 0
  br i1 %361, label %364, label %370

362:                                              ; preds = %370
  %363 = load i32, i32* %341, align 4
  br label %364

364:                                              ; preds = %362, %349
  %365 = phi i32 [ %363, %362 ], [ %350, %349 ]
  %366 = phi i32 [ %374, %362 ], [ 0, %349 ]
  %367 = add nuw nsw i64 %352, 1
  %368 = zext i32 %365 to i64
  %369 = icmp ult i64 %367, %368
  br i1 %369, label %349, label %377

370:                                              ; preds = %349, %370
  %371 = phi i64 [ %373, %370 ], [ 0, %349 ]
  %372 = getelementptr inbounds float, float* %360, i64 %371
  store float %340, float* %372, align 4
  %373 = add nuw nsw i64 %371, 1
  %374 = load i32, i32* %347, align 8
  %375 = zext i32 %374 to i64
  %376 = icmp ult i64 %373, %375
  br i1 %376, label %370, label %362

377:                                              ; preds = %364, %337, %328, %333
  %378 = bitcast %"class.std::__1::vector.311"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %378) #12
  %379 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %23, i64 0, i32 0, i32 0
  %380 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %23, i64 0, i32 0, i32 1
  %381 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %378, i8 0, i64 24, i1 false) #12
  %382 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 7
  %383 = load i64, i64* %382, align 8
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %397, label %385

385:                                              ; preds = %377
  %386 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 6
  %387 = bitcast %"class.jxl::Rect"** %380 to i64*
  %388 = bitcast %"class.std::__1::vector.311"* %23 to i64*
  %389 = bitcast %"class.jxl::Rect"** %381 to i64*
  %390 = load i64, i64* %386, align 8
  br label %391

391:                                              ; preds = %385, %414
  %392 = phi i64 [ %383, %385 ], [ %415, %414 ]
  %393 = phi i64 [ %390, %385 ], [ %416, %414 ]
  %394 = phi i64 [ 0, %385 ], [ %396, %414 ]
  %395 = icmp eq i64 %393, 0
  %396 = add i64 %394, 256
  br i1 %395, label %414, label %418

397:                                              ; preds = %414, %377
  %398 = bitcast %class.anon.318* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %398) #12
  %399 = getelementptr inbounds %class.anon.318, %class.anon.318* %24, i64 0, i32 0
  store %"struct.jxl::PassesDecoderState"** %17, %"struct.jxl::PassesDecoderState"*** %399, align 8
  %400 = bitcast %"class.std::__1::vector.220"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %400) #12
  %401 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %25, i64 0, i32 0, i32 0
  %402 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %25, i64 0, i32 0, i32 1
  %403 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %400, i8 0, i64 24, i1 false) #12
  %404 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 25
  %405 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %404, align 8
  %406 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %405, i64 0, i32 0, i32 15
  %407 = load i32, i32* %406, align 8
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %495, label %409

409:                                              ; preds = %397
  %410 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 16, i32 0, i32 0
  %411 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 4
  %412 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 5
  %413 = bitcast %"class.jxl::Plane"** %402 to i64*
  br label %566

414:                                              ; preds = %491, %391
  %415 = phi i64 [ %392, %391 ], [ %494, %491 ]
  %416 = phi i64 [ 0, %391 ], [ %492, %491 ]
  %417 = icmp ult i64 %396, %415
  br i1 %417, label %391, label %397

418:                                              ; preds = %391, %491
  %419 = phi i64 [ %494, %491 ], [ %392, %391 ]
  %420 = phi i64 [ %492, %491 ], [ %393, %391 ]
  %421 = phi i64 [ %422, %491 ], [ 0, %391 ]
  %422 = add i64 %421, 256
  %423 = icmp ugt i64 %422, %420
  %424 = call i64 @llvm.usub.sat.i64(i64 %420, i64 %421) #12
  %425 = select i1 %423, i64 %424, i64 256
  %426 = icmp ugt i64 %396, %419
  %427 = call i64 @llvm.usub.sat.i64(i64 %419, i64 %394) #12
  %428 = select i1 %426, i64 %427, i64 256
  %429 = icmp eq i64 %425, 0
  %430 = icmp eq i64 %428, 0
  %431 = or i1 %429, %430
  br i1 %431, label %491, label %432

432:                                              ; preds = %418
  %433 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %380, align 8
  %434 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %381, align 8
  %435 = icmp eq %"class.jxl::Rect"* %433, %434
  %436 = ptrtoint %"class.jxl::Rect"* %434 to i64
  br i1 %435, label %444, label %437

437:                                              ; preds = %432
  %438 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %433, i64 0, i32 0
  store i64 %421, i64* %438, align 8
  %439 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %433, i64 0, i32 1
  store i64 %394, i64* %439, align 8
  %440 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %433, i64 0, i32 2
  store i64 %425, i64* %440, align 8
  %441 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %433, i64 0, i32 3
  store i64 %428, i64* %441, align 8
  %442 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %433, i64 1
  %443 = ptrtoint %"class.jxl::Rect"* %442 to i64
  store i64 %443, i64* %387, align 8
  br label %491

444:                                              ; preds = %432
  %445 = ptrtoint %"class.jxl::Rect"* %433 to i64
  %446 = load i64, i64* %388, align 8
  %447 = sub i64 %445, %446
  %448 = ashr exact i64 %447, 5
  %449 = add nsw i64 %448, 1
  %450 = icmp ugt i64 %449, 576460752303423487
  br i1 %450, label %451, label %453

451:                                              ; preds = %444
  %452 = bitcast %"class.std::__1::vector.311"* %23 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %452) #17
  unreachable

453:                                              ; preds = %444
  %454 = sub i64 %436, %446
  %455 = ashr exact i64 %454, 5
  %456 = icmp ult i64 %455, 288230376151711743
  br i1 %456, label %457, label %465

457:                                              ; preds = %453
  %458 = ashr exact i64 %454, 4
  %459 = icmp ult i64 %458, %449
  %460 = select i1 %459, i64 %449, i64 %458
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %470, label %462

462:                                              ; preds = %457
  %463 = icmp ugt i64 %460, 576460752303423487
  br i1 %463, label %464, label %465

464:                                              ; preds = %462
  call void @abort() #17
  unreachable

465:                                              ; preds = %462, %453
  %466 = phi i64 [ %460, %462 ], [ 576460752303423487, %453 ]
  %467 = shl i64 %466, 5
  %468 = call i8* @_Znwm(i64 %467) #18
  %469 = bitcast i8* %468 to %"class.jxl::Rect"*
  br label %470

470:                                              ; preds = %465, %457
  %471 = phi i64 [ %466, %465 ], [ 0, %457 ]
  %472 = phi i8* [ %468, %465 ], [ null, %457 ]
  %473 = phi %"class.jxl::Rect"* [ %469, %465 ], [ null, %457 ]
  %474 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %473, i64 %448
  %475 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %473, i64 %471
  %476 = ptrtoint %"class.jxl::Rect"* %475 to i64
  %477 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %474, i64 0, i32 0
  store i64 %421, i64* %477, align 8
  %478 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %473, i64 %448, i32 1
  store i64 %394, i64* %478, align 8
  %479 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %473, i64 %448, i32 2
  store i64 %425, i64* %479, align 8
  %480 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %473, i64 %448, i32 3
  store i64 %428, i64* %480, align 8
  %481 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %474, i64 1
  %482 = ptrtoint %"class.jxl::Rect"* %481 to i64
  %483 = ptrtoint %"class.jxl::Rect"* %473 to i64
  %484 = icmp sgt i64 %447, 0
  br i1 %484, label %485, label %487

485:                                              ; preds = %470
  %486 = inttoptr i64 %446 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %472, i8* align 8 %486, i64 %447, i1 false) #12
  br label %487

487:                                              ; preds = %485, %470
  store i64 %483, i64* %388, align 8
  store i64 %482, i64* %387, align 8
  store i64 %476, i64* %389, align 8
  %488 = icmp eq i64 %446, 0
  br i1 %488, label %491, label %489

489:                                              ; preds = %487
  %490 = inttoptr i64 %446 to i8*
  call void @_ZdlPv(i8* %490) #18
  br label %491

491:                                              ; preds = %489, %487, %437, %418
  %492 = load i64, i64* %386, align 8
  %493 = icmp ult i64 %422, %492
  %494 = load i64, i64* %382, align 8
  br i1 %493, label %418, label %414

495:                                              ; preds = %603, %397
  %496 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %16, align 8
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* %496, %"class.std::__1::vector.220"* nonnull dereferenceable(24) %25) #12
  %497 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %401, align 8
  %498 = icmp eq %"class.jxl::Plane"* %497, null
  br i1 %498, label %517, label %499

499:                                              ; preds = %495
  %500 = bitcast %"class.jxl::Plane"* %497 to i8*
  %501 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %402, align 8
  %502 = icmp eq %"class.jxl::Plane"* %501, %497
  br i1 %502, label %515, label %503

503:                                              ; preds = %499, %510
  %504 = phi %"class.jxl::Plane"* [ %505, %510 ], [ %501, %499 ]
  %505 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %504, i64 -1
  %506 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %504, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %507 = load i8*, i8** %506, align 8
  store i8* null, i8** %506, align 8
  %508 = icmp eq i8* %507, null
  br i1 %508, label %510, label %509

509:                                              ; preds = %503
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %507) #12
  br label %510

510:                                              ; preds = %509, %503
  %511 = icmp eq %"class.jxl::Plane"* %505, %497
  br i1 %511, label %512, label %503

512:                                              ; preds = %510
  %513 = bitcast %"class.std::__1::vector.220"* %25 to i8**
  %514 = load i8*, i8** %513, align 8
  br label %515

515:                                              ; preds = %512, %499
  %516 = phi i8* [ %514, %512 ], [ %500, %499 ]
  store %"class.jxl::Plane"* %497, %"class.jxl::Plane"** %402, align 8
  call void @_ZdlPv(i8* %516) #18
  br label %517

517:                                              ; preds = %495, %515
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %400) #12
  %518 = getelementptr inbounds %"struct.std::__1::atomic.319", %"struct.std::__1::atomic.319"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %518) #12
  store i8 1, i8* %518, align 1
  %519 = bitcast %class.anon.323* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %519) #12
  %520 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 0
  %521 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 1
  %522 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 2
  %523 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 3
  %524 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 4
  %525 = getelementptr inbounds %class.anon.323, %class.anon.323* %27, i64 0, i32 5
  store %"struct.jxl::PassesDecoderState"** %17, %"struct.jxl::PassesDecoderState"*** %520, align 8
  store %"class.std::__1::vector.311"* %23, %"class.std::__1::vector.311"** %521, align 8
  store %"class.jxl::Image3"** %18, %"class.jxl::Image3"*** %522, align 8
  store %"class.jxl::ImageBundle"** %16, %"class.jxl::ImageBundle"*** %523, align 8
  store %"struct.jxl::FrameHeader"* %36, %"struct.jxl::FrameHeader"** %524, align 8
  store %"struct.std::__1::atomic.319"* %26, %"struct.std::__1::atomic.319"** %525, align 8
  %526 = bitcast %"class.jxl::Rect"** %380 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast %"class.std::__1::vector.311"* %23 to i64*
  %529 = load i64, i64* %528, align 8
  %530 = sub i64 %527, %529
  %531 = lshr exact i64 %530, 5
  %532 = trunc i64 %531 to i32
  %533 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %533) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %12, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), double* nonnull %12) #12
  %534 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %534, label %535, label %546

535:                                              ; preds = %517
  %536 = bitcast %"class.jxl::ThreadPool"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %536) #12
  %537 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 0
  %538 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %13, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %537, align 8
  %539 = bitcast i8** %538 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %13, %"class.jxl::ThreadPool"** %539, align 8
  %540 = icmp eq i32 %532, 0
  br i1 %540, label %557, label %541

541:                                              ; preds = %535
  %542 = bitcast %"class.jxl::ThreadPool::RunCallState.385"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %542) #12
  %543 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.385", %"class.jxl::ThreadPool::RunCallState.385"* %10, i64 0, i32 0
  %544 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.385", %"class.jxl::ThreadPool::RunCallState.385"* %10, i64 0, i32 1
  store %class.anon.318* %24, %class.anon.318** %543, align 8
  store %class.anon.323* %27, %class.anon.323** %544, align 8
  %545 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %536, i8* nonnull %542, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallDataFuncEPvjm", i32 0, i32 %532) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %542) #12
  br label %557

546:                                              ; preds = %517
  %547 = icmp eq i32 %532, 0
  br i1 %547, label %559, label %548

548:                                              ; preds = %546
  %549 = bitcast %"class.jxl::ThreadPool::RunCallState.385"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %549) #12
  %550 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.385", %"class.jxl::ThreadPool::RunCallState.385"* %11, i64 0, i32 0
  %551 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.385", %"class.jxl::ThreadPool::RunCallState.385"* %11, i64 0, i32 1
  store %class.anon.318* %24, %class.anon.318** %550, align 8
  store %class.anon.323* %27, %class.anon.323** %551, align 8
  %552 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %553 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %552, align 8
  %554 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %555 = load i8*, i8** %554, align 8
  %556 = call i32 %553(i8* %555, i8* nonnull %549, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallDataFuncEPvjm", i32 0, i32 %532) #12
  br label %557

557:                                              ; preds = %535, %541, %548
  %558 = phi i8* [ %549, %548 ], [ %536, %541 ], [ %536, %535 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %558) #12
  br label %559

559:                                              ; preds = %557, %546
  %560 = load double, double* %12, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), double %560) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %533) #12
  %561 = load atomic i8, i8* %518 seq_cst, align 1
  %562 = and i8 %561, 1
  %563 = icmp eq i8 %562, 0
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %519) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %518) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %398) #12
  %564 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %379, align 8
  %565 = icmp eq %"class.jxl::Rect"* %564, null
  br i1 %563, label %608, label %613

566:                                              ; preds = %409, %603
  %567 = phi i64 [ 0, %409 ], [ %604, %603 ]
  %568 = load i32*, i32** %410, align 8
  %569 = getelementptr inbounds i32, i32* %568, i64 %567
  %570 = load i32, i32* %569, align 4
  %571 = icmp eq i32 %570, 1
  br i1 %571, label %572, label %592

572:                                              ; preds = %566
  %573 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %574 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %573, i64 0, i32 11, i32 0, i32 0
  %575 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %574, align 8
  %576 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %575, i64 %567
  %577 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %402, align 8
  %578 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %403, align 8
  %579 = icmp ult %"class.jxl::Plane"* %577, %578
  br i1 %579, label %580, label %591

580:                                              ; preds = %572
  %581 = bitcast %"class.jxl::Plane"* %577 to i8*
  %582 = bitcast %"class.jxl::Plane"* %576 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %581, i8* align 8 %582, i64 24, i1 false) #12
  %583 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %577, i64 0, i32 0, i32 5
  %584 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %575, i64 %567, i32 0, i32 5
  %585 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %584, i64 0, i32 0, i32 0, i32 0
  %586 = bitcast %"class.std::__1::unique_ptr"* %584 to i64*
  %587 = load i64, i64* %586, align 8
  store i8* null, i8** %585, align 8
  %588 = bitcast %"class.std::__1::unique_ptr"* %583 to i64*
  store i64 %587, i64* %588, align 8
  %589 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %577, i64 1
  %590 = ptrtoint %"class.jxl::Plane"* %589 to i64
  store i64 %590, i64* %413, align 8
  br label %603

591:                                              ; preds = %572
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.220"* nonnull %25, %"class.jxl::Plane"* dereferenceable(32) %576) #12
  br label %603

592:                                              ; preds = %566
  %593 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %402, align 8
  %594 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %403, align 8
  %595 = icmp ult %"class.jxl::Plane"* %593, %594
  br i1 %595, label %596, label %602

596:                                              ; preds = %592
  %597 = load i64, i64* %411, align 8
  %598 = load i64, i64* %412, align 8
  %599 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %593, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %599, i64 %597, i64 %598, i64 4) #12
  %600 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %593, i64 1
  %601 = ptrtoint %"class.jxl::Plane"* %600 to i64
  store i64 %601, i64* %413, align 8
  br label %603

602:                                              ; preds = %592
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKmS9_EEEvDpOT_(%"class.std::__1::vector.220"* nonnull %25, i64* dereferenceable(8) %411, i64* dereferenceable(8) %412) #12
  br label %603

603:                                              ; preds = %602, %596, %591, %580
  %604 = add nuw nsw i64 %567, 1
  %605 = load i32, i32* %406, align 8
  %606 = zext i32 %605 to i64
  %607 = icmp ult i64 %604, %606
  br i1 %607, label %566, label %495

608:                                              ; preds = %559
  br i1 %565, label %612, label %609

609:                                              ; preds = %608
  %610 = ptrtoint %"class.jxl::Rect"* %564 to i64
  store i64 %610, i64* %526, align 8
  %611 = bitcast %"class.jxl::Rect"* %564 to i8*
  call void @_ZdlPv(i8* %611) #18
  br label %612

612:                                              ; preds = %608, %609
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %378) #12
  br label %923

613:                                              ; preds = %559
  br i1 %565, label %617, label %614

614:                                              ; preds = %613
  %615 = ptrtoint %"class.jxl::Rect"* %564 to i64
  store i64 %615, i64* %526, align 8
  %616 = bitcast %"class.jxl::Rect"* %564 to i8*
  call void @_ZdlPv(i8* %616) #18
  br label %617

617:                                              ; preds = %613, %614
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %378) #12
  br label %618

618:                                              ; preds = %617, %319
  %619 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 2
  %620 = load i64, i64* %619, align 8
  %621 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 3
  %622 = load i64, i64* %621, align 8
  %623 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %16, align 8
  call void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"* %623, i64 %620, i64 %622) #12
  %624 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %625 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %624, i64 0, i32 4
  %626 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %625, i64 0, i32 0, i64 0, i32 0, i32 0
  %627 = load i32, i32* %626, align 8
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %630, label %629

629:                                              ; preds = %618
  call void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"* %625, i64 %620, i64 %622)
  br label %630

630:                                              ; preds = %618, %629
  br i1 %4, label %922, label %631

631:                                              ; preds = %630
  %632 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %633 = call zeroext i1 @_ZN3jxl12ImageBlender13NeedsBlendingEPNS_18PassesDecoderStateE(%"struct.jxl::PassesDecoderState"* %632) #12
  br i1 %633, label %634, label %922

634:                                              ; preds = %631
  %635 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %636 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %635, i64 0, i32 4, i32 0, i64 0, i32 0, i32 0
  %637 = load i32, i32* %636, align 8
  %638 = icmp eq i32 %637, 0
  br i1 %638, label %692, label %639

639:                                              ; preds = %634
  %640 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %635, i64 0, i32 5, i32 0, i32 0
  %641 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %640, align 8
  %642 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %635, i64 0, i32 5, i32 0, i32 1
  %643 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %642, align 8
  %644 = icmp eq %"class.jxl::Plane"* %643, %641
  br i1 %644, label %654, label %645

645:                                              ; preds = %639, %652
  %646 = phi %"class.jxl::Plane"* [ %647, %652 ], [ %643, %639 ]
  %647 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %646, i64 -1
  %648 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %646, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %649 = load i8*, i8** %648, align 8
  store i8* null, i8** %648, align 8
  %650 = icmp eq i8* %649, null
  br i1 %650, label %652, label %651

651:                                              ; preds = %645
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %649) #12
  br label %652

652:                                              ; preds = %651, %645
  %653 = icmp eq %"class.jxl::Plane"* %647, %641
  br i1 %653, label %654, label %645

654:                                              ; preds = %652, %639
  store %"class.jxl::Plane"* %641, %"class.jxl::Plane"** %642, align 8
  %655 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %16, align 8
  %656 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %655, i64 0, i32 12, i32 0, i32 0
  %657 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %656, align 8
  %658 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %655, i64 0, i32 12, i32 0, i32 1
  %659 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %658, align 8
  %660 = icmp eq %"class.jxl::Plane"* %657, %659
  br i1 %660, label %692, label %661

661:                                              ; preds = %654
  %662 = bitcast %"class.jxl::Plane"* %28 to i8*
  %663 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 0, i32 0, i32 5
  %664 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %663, i64 0, i32 0, i32 0, i32 0
  %665 = bitcast %"class.std::__1::unique_ptr"* %663 to i64*
  %666 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %667

667:                                              ; preds = %661, %689
  %668 = phi %"class.jxl::Plane"* [ %657, %661 ], [ %690, %689 ]
  %669 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %662) #12
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %28, %"class.jxl::Plane"* dereferenceable(32) %668)
  %670 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %669, i64 0, i32 5, i32 0, i32 1
  %671 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %670, align 8
  %672 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %669, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %673 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %672, align 8
  %674 = icmp ult %"class.jxl::Plane"* %671, %673
  br i1 %674, label %675, label %683

675:                                              ; preds = %667
  %676 = bitcast %"class.jxl::Plane"* %671 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %676, i8* nonnull align 8 %662, i64 24, i1 false) #12
  %677 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %671, i64 0, i32 0, i32 5
  %678 = load i64, i64* %665, align 8
  store i8* null, i8** %664, align 8
  %679 = bitcast %"class.std::__1::unique_ptr"* %677 to i64*
  store i64 %678, i64* %679, align 8
  %680 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %671, i64 1
  %681 = ptrtoint %"class.jxl::Plane"* %680 to i64
  %682 = bitcast %"class.jxl::Plane"** %670 to i64*
  store i64 %681, i64* %682, align 8
  br label %685

683:                                              ; preds = %667
  %684 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %669, i64 0, i32 5
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.220"* %684, %"class.jxl::Plane"* nonnull dereferenceable(32) %28) #12
  br label %685

685:                                              ; preds = %675, %683
  %686 = load i8*, i8** %666, align 8
  store i8* null, i8** %666, align 8
  %687 = icmp eq i8* %686, null
  br i1 %687, label %689, label %688

688:                                              ; preds = %685
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %686) #12
  br label %689

689:                                              ; preds = %685, %688
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %662) #12
  %690 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %668, i64 1
  %691 = icmp eq %"class.jxl::Plane"* %690, %659
  br i1 %691, label %692, label %667

692:                                              ; preds = %689, %654, %634
  %693 = bitcast %"class.jxl::ImageBlender"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %693) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %693, i8 -86, i64 136, i1 false)
  %694 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %29, i64 0, i32 0
  call void @_ZN3jxl12BlendingInfoC1Ev(%"struct.jxl::BlendingInfo"* nonnull %694) #12
  %695 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %29, i64 0, i32 2
  %696 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %29, i64 0, i32 6, i32 0
  store i32 0, i32* %696, align 8
  %697 = getelementptr inbounds %"class.jxl::ImageBlender", %"class.jxl::ImageBlender"* %29, i64 0, i32 6, i32 1
  store i32 0, i32* %697, align 4
  %698 = bitcast %"class.jxl::Rect"* %695 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %698, i8 0, i64 65, i1 false) #12
  %699 = bitcast %"class.jxl::ImageBundle"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %699) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %699, i8 -86, i64 368, i1 false)
  %700 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %16, align 8
  call void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"* nonnull %30, %"class.jxl::ImageBundle"* dereferenceable(368) %700) #12
  %701 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %17, align 8
  %702 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 4
  %703 = bitcast %"struct.jxl::FrameOrigin"* %702 to i64*
  %704 = load i64, i64* %703, align 8
  %705 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  %706 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %705, align 8
  %707 = icmp eq %"struct.jxl::jpeg::JPEGData"* %706, null
  br i1 %707, label %708, label %721

708:                                              ; preds = %692
  %709 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %710 = load i32, i32* %709, align 8
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %712, label %728

712:                                              ; preds = %708
  %713 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 12, i32 0, i32 0
  %714 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %713, align 8
  %715 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 12, i32 0, i32 1
  %716 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %715, align 8
  %717 = icmp eq %"class.jxl::Plane"* %714, %716
  br i1 %717, label %728, label %718

718:                                              ; preds = %712
  %719 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %714, i64 0, i32 0, i32 0
  %720 = load i32, i32* %719, align 8
  br label %728

721:                                              ; preds = %692
  %722 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %706, i64 0, i32 1
  %723 = load i32, i32* %722, align 8
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %706, i64 0, i32 2
  %726 = load i32, i32* %725, align 4
  %727 = sext i32 %726 to i64
  br label %745

728:                                              ; preds = %708, %712, %718
  %729 = phi i32 [ %710, %708 ], [ 0, %712 ], [ %720, %718 ]
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %732 = load i32, i32* %731, align 4
  %733 = zext i32 %732 to i64
  %734 = icmp eq i32 %732, 0
  br i1 %734, label %735, label %745

735:                                              ; preds = %728
  %736 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 12, i32 0, i32 0
  %737 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %736, align 8
  %738 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 12, i32 0, i32 1
  %739 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %738, align 8
  %740 = icmp eq %"class.jxl::Plane"* %737, %739
  br i1 %740, label %745, label %741

741:                                              ; preds = %735
  %742 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %737, i64 0, i32 0, i32 1
  %743 = load i32, i32* %742, align 4
  %744 = zext i32 %743 to i64
  br label %745

745:                                              ; preds = %721, %728, %735, %741
  %746 = phi i64 [ %724, %721 ], [ %730, %741 ], [ %730, %735 ], [ %730, %728 ]
  %747 = phi i64 [ %727, %721 ], [ %744, %741 ], [ 0, %735 ], [ %733, %728 ]
  %748 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %30, i64 0, i32 11
  %749 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %16, align 8
  %750 = call i32 @_ZN3jxl12ImageBlender15PrepareBlendingEPNS_18PassesDecoderStateENS_11FrameOriginEmmRKNS_13ColorEncodingEPNS_11ImageBundleE(%"class.jxl::ImageBlender"* nonnull %29, %"struct.jxl::PassesDecoderState"* %701, i64 %704, i64 %746, i64 %747, %"struct.jxl::ColorEncoding"* dereferenceable(152) %748, %"class.jxl::ImageBundle"* %749) #12
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %752, label %918

752:                                              ; preds = %745
  %753 = bitcast %"class.std::__1::vector.311"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %753) #12
  %754 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %31, i64 0, i32 0, i32 0
  %755 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %31, i64 0, i32 0, i32 1
  %756 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %31, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %753, i8 0, i64 24, i1 false) #12
  %757 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 1
  %758 = load i64, i64* %757, align 8
  %759 = icmp eq i64 %758, 0
  br i1 %759, label %760, label %762

760:                                              ; preds = %752
  %761 = bitcast %"class.jxl::Rect"** %755 to i64*
  br label %777

762:                                              ; preds = %752
  %763 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2, i32 0
  %764 = bitcast %"class.jxl::Rect"** %755 to i64*
  %765 = bitcast %"class.std::__1::vector.311"* %31 to i64*
  %766 = bitcast %"class.jxl::Rect"** %756 to i64*
  %767 = load i64, i64* %763, align 8
  br label %768

768:                                              ; preds = %762, %824
  %769 = phi i64 [ %758, %762 ], [ %825, %824 ]
  %770 = phi i64 [ %767, %762 ], [ %826, %824 ]
  %771 = phi i64 [ 0, %762 ], [ %773, %824 ]
  %772 = icmp eq i64 %770, 0
  %773 = add i64 %771, 256
  br i1 %772, label %824, label %828

774:                                              ; preds = %824
  %775 = load i64, i64* %764, align 8
  %776 = load i64, i64* %765, align 8
  br label %777

777:                                              ; preds = %760, %774
  %778 = phi i64* [ %761, %760 ], [ %764, %774 ]
  %779 = phi i64 [ 0, %760 ], [ %776, %774 ]
  %780 = phi i64 [ 0, %760 ], [ %775, %774 ]
  %781 = getelementptr inbounds %"struct.std::__1::atomic.319", %"struct.std::__1::atomic.319"* %32, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %781) #12
  store i8 1, i8* %781, align 1
  %782 = sub i64 %780, %779
  %783 = lshr exact i64 %782, 5
  %784 = trunc i64 %783 to i32
  %785 = bitcast %class.anon.325* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %785) #12
  %786 = getelementptr inbounds %class.anon.325, %class.anon.325* %33, i64 0, i32 0
  store %"class.std::__1::vector.311"* %31, %"class.std::__1::vector.311"** %786, align 8
  %787 = getelementptr inbounds %class.anon.325, %class.anon.325* %33, i64 0, i32 1
  store %"class.jxl::ImageBlender"* %29, %"class.jxl::ImageBlender"** %787, align 8
  %788 = getelementptr inbounds %class.anon.325, %class.anon.325* %33, i64 0, i32 2
  store %"class.jxl::ImageBundle"* %30, %"class.jxl::ImageBundle"** %788, align 8
  %789 = getelementptr inbounds %class.anon.325, %class.anon.325* %33, i64 0, i32 3
  store %"struct.std::__1::atomic.319"* %32, %"struct.std::__1::atomic.319"** %789, align 8
  %790 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %790) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), double* nonnull %8) #12
  %791 = icmp eq %"class.jxl::ThreadPool"* %2, null
  br i1 %791, label %792, label %807

792:                                              ; preds = %777
  %793 = bitcast %"class.jxl::ThreadPool"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %793) #12
  %794 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 0
  %795 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %9, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %794, align 8
  %796 = bitcast i8** %795 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %9, %"class.jxl::ThreadPool"** %796, align 8
  %797 = icmp eq i32 %784, 0
  br i1 %797, label %805, label %798

798:                                              ; preds = %792
  %799 = bitcast %"class.jxl::ThreadPool::RunCallState.398"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %799) #12
  %800 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.398", %"class.jxl::ThreadPool::RunCallState.398"* %6, i64 0, i32 0
  %801 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.398", %"class.jxl::ThreadPool::RunCallState.398"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %800, align 8
  store %class.anon.325* %33, %class.anon.325** %801, align 8
  %802 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %793, i8* nonnull %799, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallDataFuncEPvjm", i32 0, i32 %784) #12
  %803 = icmp ne i32 %802, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %799) #12
  %804 = zext i1 %803 to i32
  br label %805

805:                                              ; preds = %798, %792
  %806 = phi i32 [ %804, %798 ], [ 0, %792 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %793) #12
  br label %820

807:                                              ; preds = %777
  %808 = icmp eq i32 %784, 0
  br i1 %808, label %820, label %809

809:                                              ; preds = %807
  %810 = bitcast %"class.jxl::ThreadPool::RunCallState.398"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %810) #12
  %811 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.398", %"class.jxl::ThreadPool::RunCallState.398"* %7, i64 0, i32 0
  %812 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.398", %"class.jxl::ThreadPool::RunCallState.398"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %811, align 8
  store %class.anon.325* %33, %class.anon.325** %812, align 8
  %813 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 0
  %814 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %813, align 8
  %815 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %2, i64 0, i32 1
  %816 = load i8*, i8** %815, align 8
  %817 = call i32 %814(i8* %816, i8* nonnull %810, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallDataFuncEPvjm", i32 0, i32 %784) #12
  %818 = icmp ne i32 %817, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %810) #12
  %819 = zext i1 %818 to i32
  br label %820

820:                                              ; preds = %805, %807, %809
  %821 = phi i32 [ %806, %805 ], [ %819, %809 ], [ 0, %807 ]
  %822 = load double, double* %8, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), double %822) #12
  %823 = icmp eq i32 %821, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %790) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %785) #12
  br i1 %823, label %905, label %910

824:                                              ; preds = %901, %768
  %825 = phi i64 [ %769, %768 ], [ %904, %901 ]
  %826 = phi i64 [ 0, %768 ], [ %902, %901 ]
  %827 = icmp ult i64 %773, %825
  br i1 %827, label %768, label %774

828:                                              ; preds = %768, %901
  %829 = phi i64 [ %904, %901 ], [ %769, %768 ]
  %830 = phi i64 [ %902, %901 ], [ %770, %768 ]
  %831 = phi i64 [ %832, %901 ], [ 0, %768 ]
  %832 = add i64 %831, 256
  %833 = icmp ugt i64 %832, %830
  %834 = call i64 @llvm.usub.sat.i64(i64 %830, i64 %831) #12
  %835 = select i1 %833, i64 %834, i64 256
  %836 = icmp ugt i64 %773, %829
  %837 = call i64 @llvm.usub.sat.i64(i64 %829, i64 %771) #12
  %838 = select i1 %836, i64 %837, i64 256
  %839 = icmp eq i64 %835, 0
  %840 = icmp eq i64 %838, 0
  %841 = or i1 %839, %840
  br i1 %841, label %901, label %842

842:                                              ; preds = %828
  %843 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %755, align 8
  %844 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %756, align 8
  %845 = icmp eq %"class.jxl::Rect"* %843, %844
  %846 = ptrtoint %"class.jxl::Rect"* %844 to i64
  br i1 %845, label %854, label %847

847:                                              ; preds = %842
  %848 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %843, i64 0, i32 0
  store i64 %831, i64* %848, align 8
  %849 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %843, i64 0, i32 1
  store i64 %771, i64* %849, align 8
  %850 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %843, i64 0, i32 2
  store i64 %835, i64* %850, align 8
  %851 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %843, i64 0, i32 3
  store i64 %838, i64* %851, align 8
  %852 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %843, i64 1
  %853 = ptrtoint %"class.jxl::Rect"* %852 to i64
  store i64 %853, i64* %764, align 8
  br label %901

854:                                              ; preds = %842
  %855 = ptrtoint %"class.jxl::Rect"* %843 to i64
  %856 = load i64, i64* %765, align 8
  %857 = sub i64 %855, %856
  %858 = ashr exact i64 %857, 5
  %859 = add nsw i64 %858, 1
  %860 = icmp ugt i64 %859, 576460752303423487
  br i1 %860, label %861, label %863

861:                                              ; preds = %854
  %862 = bitcast %"class.std::__1::vector.311"* %31 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %862) #17
  unreachable

863:                                              ; preds = %854
  %864 = sub i64 %846, %856
  %865 = ashr exact i64 %864, 5
  %866 = icmp ult i64 %865, 288230376151711743
  br i1 %866, label %867, label %875

867:                                              ; preds = %863
  %868 = ashr exact i64 %864, 4
  %869 = icmp ult i64 %868, %859
  %870 = select i1 %869, i64 %859, i64 %868
  %871 = icmp eq i64 %870, 0
  br i1 %871, label %880, label %872

872:                                              ; preds = %867
  %873 = icmp ugt i64 %870, 576460752303423487
  br i1 %873, label %874, label %875

874:                                              ; preds = %872
  call void @abort() #17
  unreachable

875:                                              ; preds = %872, %863
  %876 = phi i64 [ %870, %872 ], [ 576460752303423487, %863 ]
  %877 = shl i64 %876, 5
  %878 = call i8* @_Znwm(i64 %877) #18
  %879 = bitcast i8* %878 to %"class.jxl::Rect"*
  br label %880

880:                                              ; preds = %875, %867
  %881 = phi i64 [ %876, %875 ], [ 0, %867 ]
  %882 = phi i8* [ %878, %875 ], [ null, %867 ]
  %883 = phi %"class.jxl::Rect"* [ %879, %875 ], [ null, %867 ]
  %884 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %883, i64 %858
  %885 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %883, i64 %881
  %886 = ptrtoint %"class.jxl::Rect"* %885 to i64
  %887 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %884, i64 0, i32 0
  store i64 %831, i64* %887, align 8
  %888 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %883, i64 %858, i32 1
  store i64 %771, i64* %888, align 8
  %889 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %883, i64 %858, i32 2
  store i64 %835, i64* %889, align 8
  %890 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %883, i64 %858, i32 3
  store i64 %838, i64* %890, align 8
  %891 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %884, i64 1
  %892 = ptrtoint %"class.jxl::Rect"* %891 to i64
  %893 = ptrtoint %"class.jxl::Rect"* %883 to i64
  %894 = icmp sgt i64 %857, 0
  br i1 %894, label %895, label %897

895:                                              ; preds = %880
  %896 = inttoptr i64 %856 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %882, i8* align 8 %896, i64 %857, i1 false) #12
  br label %897

897:                                              ; preds = %895, %880
  store i64 %893, i64* %765, align 8
  store i64 %892, i64* %764, align 8
  store i64 %886, i64* %766, align 8
  %898 = icmp eq i64 %856, 0
  br i1 %898, label %901, label %899

899:                                              ; preds = %897
  %900 = inttoptr i64 %856 to i8*
  call void @_ZdlPv(i8* %900) #18
  br label %901

901:                                              ; preds = %899, %897, %847, %828
  %902 = load i64, i64* %763, align 8
  %903 = icmp ult i64 %832, %902
  %904 = load i64, i64* %757, align 8
  br i1 %903, label %828, label %824

905:                                              ; preds = %820
  %906 = load atomic i8, i8* %781 seq_cst, align 1
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  %909 = zext i8 %908 to i32
  br label %910

910:                                              ; preds = %905, %820
  %911 = phi i32 [ 1, %820 ], [ %909, %905 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %781) #12
  %912 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %754, align 8
  %913 = icmp eq %"class.jxl::Rect"* %912, null
  br i1 %913, label %917, label %914

914:                                              ; preds = %910
  %915 = ptrtoint %"class.jxl::Rect"* %912 to i64
  store i64 %915, i64* %778, align 8
  %916 = bitcast %"class.jxl::Rect"* %912 to i8*
  call void @_ZdlPv(i8* %916) #18
  br label %917

917:                                              ; preds = %910, %914
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %753) #12
  br label %918

918:                                              ; preds = %745, %917
  %919 = phi i32 [ %911, %917 ], [ %750, %745 ]
  %920 = phi i32 [ %911, %917 ], [ 1, %745 ]
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %699) #12
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %693) #12
  %921 = icmp eq i32 %920, 0
  br i1 %921, label %922, label %923

922:                                              ; preds = %918, %631, %630
  br label %923

923:                                              ; preds = %922, %918, %612
  %924 = phi i32 [ 0, %922 ], [ %919, %918 ], [ 1, %612 ]
  %925 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %926 = load i8*, i8** %925, align 8
  store i8* null, i8** %925, align 8
  %927 = icmp eq i8* %926, null
  br i1 %927, label %929, label %928

928:                                              ; preds = %923
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %926) #12
  br label %929

929:                                              ; preds = %928, %923
  %930 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %931 = load i8*, i8** %930, align 8
  store i8* null, i8** %930, align 8
  %932 = icmp eq i8* %931, null
  br i1 %932, label %934, label %933

933:                                              ; preds = %929
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %931) #12
  br label %934

934:                                              ; preds = %933, %929
  %935 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %936 = load i8*, i8** %935, align 8
  store i8* null, i8** %935, align 8
  %937 = icmp eq i8* %936, null
  br i1 %937, label %939, label %938

938:                                              ; preds = %934
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %936) #12
  br label %939

939:                                              ; preds = %934, %938
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %39) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #12
  ret i32 %924
}

declare void @_ZN3jxl10UpsampleH2ERKNS_5PlaneIfEEmPNS_10ThreadPoolE(%"class.jxl::Plane"* sret, %"class.jxl::Plane"* dereferenceable(32), i64, %"class.jxl::ThreadPool"*) local_unnamed_addr #2

declare void @_ZN3jxl10UpsampleV2ERKNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::Plane"* sret, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"*) local_unnamed_addr #2

declare void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"*, %"class.std::__1::vector.220"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6Image3IfE8ShrinkToEmm(%"class.jxl::Image3"*, i64, i64) local_unnamed_addr #8 comdat align 2 {
  %4 = trunc i64 %1 to i32
  %5 = trunc i64 %2 to i32
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %13

10:                                               ; preds = %33, %21, %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)) #12
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %18, label %21

18:                                               ; preds = %40, %28, %13
  %19 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0)) #12
  %20 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 0
  store i32 %4, i32* %22, align 8
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0, i32 1
  store i32 %5, i32* %23, align 4
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp ult i64 %26, %1
  br i1 %27, label %10, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %18, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 0
  store i32 %4, i32* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1, i32 0, i32 1
  store i32 %5, i32* %35, align 4
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %38, %1
  br i1 %39, label %10, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %18, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 0
  store i32 %4, i32* %46, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2, i32 0, i32 1
  store i32 %5, i32* %47, align 4
  ret void
}

declare zeroext i1 @_ZN3jxl12ImageBlender13NeedsBlendingEPNS_18PassesDecoderStateE(%"struct.jxl::PassesDecoderState"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #8 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #12
  %14 = load i32, i32* %6, align 8, !noalias !2028
  %15 = load i32, i32* %3, align 8, !alias.scope !2028
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !2028
  %20 = load i32, i32* %18, align 4, !alias.scope !2028
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.21, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0)) #12, !noalias !2028
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17, !noalias !2028
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !2028
  %33 = load i64, i64* %4, align 8, !alias.scope !2028
  %34 = load i8*, i8** %30, align 8, !noalias !2028
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #12, !noalias !2028
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #12, !noalias !2028
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #12, !noalias !2028
  %43 = load i32, i32* %10, align 4, !noalias !2028
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !2028
  %48 = load i8*, i8** %30, align 8, !noalias !2028
  %49 = load i64, i64* %31, align 8, !noalias !2028
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #12, !noalias !2028
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #12, !noalias !2028
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #12, !noalias !2028
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !2028
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleC2EOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %13 = bitcast [3 x i32]* %11 to i8*
  %14 = bitcast [3 x i32]* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 14, i1 false) #12
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %17 = bitcast %"struct.jxl::FrameOrigin"* %15 to i8*
  %18 = bitcast %"struct.jxl::FrameOrigin"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 14, i1 false)
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %21 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #12
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %25 = bitcast %"struct.jxl::ImageMetadata"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"struct.jxl::ImageMetadata"** %23 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %29 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %30 = bitcast %"class.jxl::Image3"* %28 to i8*
  %31 = bitcast %"class.jxl::Image3"* %29 to i8*
  %32 = getelementptr %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false) #12
  %34 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = bitcast %"class.std::__1::unique_ptr"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i8* null, i8** %35, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %32, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %2
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #12
  br label %43

43:                                               ; preds = %42, %2
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %45 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %46 = bitcast %"class.jxl::Plane"* %45 to i8*
  %47 = bitcast %"class.jxl::Plane"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false) #12
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %43
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #12
  br label %58

58:                                               ; preds = %57, %43
  %59 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #12
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #12
  br label %73

73:                                               ; preds = %58, %72
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 12, i1 false) #12
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %79 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %80 = bitcast i32* %78 to i8*
  %81 = bitcast i32* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false) #12
  %82 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %83 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %84 = bitcast i32* %82 to i8*
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 6, i1 false) #12
  %86 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %87 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  %88 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %86, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i8* null, i8** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = bitcast %"class.jxl::PaddedBytes"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #12
  %100 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %100, align 8
  %103 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %106 = bitcast i32* %105 to i64*
  %107 = bitcast i32* %104 to i64*
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %109, align 8
  %110 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %112 = bitcast i32* %111 to i64*
  %113 = bitcast i32* %110 to i64*
  %114 = load i64, i64* %112, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %115, align 8
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %118 = bitcast i32* %117 to i64*
  %119 = bitcast i32* %116 to i64*
  %120 = load i64, i64* %118, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %121, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %124 = bitcast i32* %123 to i64*
  %125 = bitcast i32* %122 to i64*
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %128 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %129 = bitcast %"class.std::__1::vector.220"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #12
  %130 = bitcast %"class.std::__1::vector.220"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.220"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %134 = bitcast %"class.jxl::Plane"** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %137 = bitcast %"class.jxl::Plane"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"class.jxl::Plane"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast %"class.jxl::Plane"** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.220"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #12
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  %145 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %144, align 8
  ret void
}

declare i32 @_ZN3jxl12ImageBlender15PrepareBlendingEPNS_18PassesDecoderStateENS_11FrameOriginEmmRKNS_13ColorEncodingEPNS_11ImageBundleE(%"class.jxl::ImageBlender"*, %"struct.jxl::PassesDecoderState"*, i64, i64, i64, %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ImageBundle"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #12
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.220"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #18
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #12
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #12
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #12
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #12
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #18
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #12
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.round.ps(<4 x float>, i32 immarg) #10

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #10

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32 immarg) #10

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float>) #10

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZN3jxl8N_SCALAR8FastPowfIN3hwy8N_SCALAR4SimdIfLm1EEENS3_4Vec1IfEEEET0_T_S8_S8_(float, float) local_unnamed_addr #8 comdat {
  %3 = bitcast float %0 to i32
  %4 = add i32 %3, -1059760811
  %5 = lshr i32 %4, 23
  %6 = ashr i32 %4, 31
  %7 = shl nsw i32 %6, 8
  %8 = or i32 %7, %5
  %9 = shl i32 %8, 23
  %10 = sub i32 %3, %9
  %11 = bitcast i32 %10 to float
  %12 = sitofp i32 %8 to float
  %13 = fadd float %11, -1.000000e+00
  fence acq_rel
  %14 = insertelement <2 x float> undef, float %13, i32 0
  %15 = shufflevector <2 x float> %14, <2 x float> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x float> %15, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %17 = fadd <2 x float> %16, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %18 = fmul <2 x float> %15, %17
  %19 = fadd <2 x float> %18, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %20 = extractelement <2 x float> %19, i32 0
  %21 = extractelement <2 x float> %19, i32 1
  %22 = fdiv float %20, %21
  %23 = fadd float %22, %12
  %24 = fmul float %23, %1
  %25 = bitcast float %24 to i32
  %26 = fcmp olt float %24, 0.000000e+00
  %27 = lshr i32 %25, 23
  %28 = and i32 %27, 255
  %29 = add nsw i32 %28, -127
  %30 = icmp sgt i32 %29, 22
  br i1 %30, label %46, label %31

31:                                               ; preds = %2
  %32 = icmp slt i32 %29, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %31
  %34 = select i1 %26, float -1.000000e+00, float 0.000000e+00
  %35 = bitcast float %34 to i32
  br label %46

36:                                               ; preds = %31
  %37 = lshr i32 8388607, %29
  %38 = and i32 %37, %25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = lshr i32 8388608, %29
  %42 = select i1 %26, i32 %41, i32 0
  %43 = add i32 %42, %25
  %44 = ashr i32 -8388608, %29
  %45 = and i32 %43, %44
  br label %46

46:                                               ; preds = %2, %33, %36, %40
  %47 = phi i32 [ %35, %33 ], [ %45, %40 ], [ %25, %2 ], [ %25, %36 ]
  %48 = bitcast i32 %47 to float
  %49 = tail call float @llvm.fabs.f32(float %48) #10
  %50 = fcmp oeq float %49, 0x7FF0000000000000
  %51 = fpext float %49 to double
  %52 = fcmp ogt double %51, 0x41DFFFFFFFC00000
  %53 = or i1 %50, %52
  %54 = icmp slt i32 %47, 0
  %55 = select i1 %54, i32 0, i32 511
  %56 = fptosi float %48 to i32
  %57 = select i1 %53, i32 %55, i32 %56
  %58 = shl i32 %57, 23
  %59 = add i32 %58, 1065353216
  %60 = bitcast i32 %59 to float
  %61 = fsub float %24, %48
  %62 = fadd float %61, 0x4024598D60000000
  %63 = fmul float %61, %62
  %64 = fadd float %63, 0x40486F3420000000
  %65 = fmul float %61, %64
  %66 = fadd float %65, 0x4058A33E00000000
  %67 = fmul float %66, %60
  %68 = fmul float %61, 0x3FCAE93DC0000000
  %69 = fadd float %68, 0xBF96C437C0000000
  %70 = fmul float %61, %69
  %71 = fadd float %70, 0xC033710620000000
  %72 = fmul float %61, %71
  %73 = fadd float %72, 0x4058A33E20000000
  %74 = fdiv float %67, %73
  ret float %74
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #11

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3hwy13FunctionCacheIN3jxl6StatusEJPNS1_6Image3IfEERKNS1_4RectERKNS1_18OutputEncodingInfoEEE13ChooseAndCallIXadL_ZNS1_L34UndoXYBInPlaceHighwayDispatchTableEEEEES2_S5_S8_SB_(%"class.jxl::Image3"*, %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::OutputEncodingInfo"* dereferenceable(352)) #8 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #12, !range !1941
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*], [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*]* @_ZN3jxlL34UndoXYBInPlaceHighwayDispatchTableE, i64 0, i64 %7
  %9 = load i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)** %8, align 8
  %10 = tail call i32 %9(%"class.jxl::Image3"* %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"struct.jxl::OutputEncodingInfo"* dereferenceable(352) %2) #12
  ret i32 %10
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #11

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl6Image3IfEERKNS1_4RectEbPKNS1_5PlaneIfEES8_S8_PhmEE13ChooseAndCallIXadL_ZNS1_L32FloatToRGBA8HighwayDispatchTableEEEEEvS5_S8_bSC_S8_S8_SD_m(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), i1 zeroext, %"class.jxl::Plane"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), i8*, i64) #8 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %9 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %10 = and i32 %9, 2225
  %11 = tail call i32 @llvm.cttz.i32(i32 %10, i1 true) #12, !range !1941
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*], [12 x void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*]* @_ZN3jxlL32FloatToRGBA8HighwayDispatchTableE, i64 0, i64 %12
  %14 = load void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)*, void (%"class.jxl::Image3"*, %"class.jxl::Rect"*, i1, %"class.jxl::Plane"*, %"class.jxl::Rect"*, %"class.jxl::Rect"*, i8*, i64)** %13, align 8
  tail call void %14(%"class.jxl::Image3"* dereferenceable(96) %0, %"class.jxl::Rect"* dereferenceable(32) %1, i1 zeroext %2, %"class.jxl::Plane"* %3, %"class.jxl::Rect"* dereferenceable(32) %4, %"class.jxl::Rect"* dereferenceable(32) %5, i8* %6, i64 %7) #12
  ret void
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl12BlendingInfoC1Ev(%"struct.jxl::BlendingInfo"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #9 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #8 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #8 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #12
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #12
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #8 comdat align 2 {
  ret void
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.220"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.220"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.220"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #17
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #18
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #12
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #12
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #12
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #12
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #18
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #14

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #15

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #11

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #11

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #10

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #10

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #10

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #11

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #16

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #8 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.21, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0)) #12
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !2031
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !2031
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !2031
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !2031
  %40 = load i64, i64* %29, align 8, !noalias !2031
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #12, !noalias !2031
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !2031
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !2031
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #12, !noalias !2031
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !2031
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #12, !noalias !2031
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !2031
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !2031
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !2031
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !2031
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !2031
  %85 = load i64, i64* %74, align 8, !noalias !2031
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #12, !noalias !2031
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !2031
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !2031
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #12, !noalias !2031
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !2031
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #12, !noalias !2031
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !2031
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !2031
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !2031
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !2031
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !2031
  %130 = load i64, i64* %119, align 8, !noalias !2031
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #12, !noalias !2031
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !2031
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !2031
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #12, !noalias !2031
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !2031
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #12, !noalias !2031
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !2031
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !2031
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #8 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_7UndoXYBERKNS_6Image3IfEEPS5_RKNS_18OutputEncodingInfoEPS0_E3$_8E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #8 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_7UndoXYBERKNS_6Image3IfEEPS5_RKNS_18OutputEncodingInfoEPS0_E3$_8E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #8 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.43**
  %7 = load %class.anon.43*, %class.anon.43** %6, align 8
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #12, !range !1941
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*], [12 x i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*]* @_ZN3jxlL34UndoXYBInPlaceHighwayDispatchTableE, i64 0, i64 %11
  %13 = load i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)*, i32 (%"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::OutputEncodingInfo"*)** %12, align 8
  %14 = getelementptr inbounds %class.anon.43, %class.anon.43* %7, i64 0, i32 0
  %15 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %14, align 8
  %16 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %15, align 8
  %17 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %16, i64 0, i32 0, i64 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = sext i32 %1 to i64
  %22 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  store i64 0, i64* %22, align 8, !alias.scope !2034
  %23 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  store i64 %21, i64* %23, align 8, !alias.scope !2034
  %24 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  store i64 %20, i64* %24, align 8, !alias.scope !2034
  %25 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 1, i64* %25, align 8, !alias.scope !2034
  %26 = getelementptr inbounds %class.anon.43, %class.anon.43* %7, i64 0, i32 1
  %27 = load %"struct.jxl::OutputEncodingInfo"*, %"struct.jxl::OutputEncodingInfo"** %26, align 8
  %28 = call i32 %13(%"class.jxl::Image3"* %16, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"struct.jxl::OutputEncodingInfo"* dereferenceable(352) %27) #12
  %29 = icmp eq i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #12
  br i1 %29, label %33, label %30

30:                                               ; preds = %3
  %31 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0), i32 308, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.27, i64 0, i64 0)) #12
  %32 = call zeroext i1 @_ZN3jxl5AbortEv() #17
  unreachable

33:                                               ; preds = %3
  ret void
}

declare void @_ZN3jxl9PlaneBase17InitializePaddingEmNS0_7PaddingE(%"struct.jxl::PlaneBase"*, i64, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.220"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.220"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.220"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #17
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #18
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #12
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #12
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #12
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #12
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #18
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRKmS9_EEEvDpOT_(%"class.std::__1::vector.220"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #9 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.jxl::Plane"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.220"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 5
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 576460752303423487
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector.220"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #17
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.jxl::Plane"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 5
  %21 = icmp ult i64 %20, 288230376151711743
  br i1 %21, label %22, label %30

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 4
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %22
  %28 = icmp ugt i64 %25, 576460752303423487
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  tail call void @abort() #17
  unreachable

30:                                               ; preds = %15, %27
  %31 = phi i64 [ %25, %27 ], [ 576460752303423487, %15 ]
  %32 = shl i64 %31, 5
  %33 = tail call i8* @_Znwm(i64 %32) #18
  %34 = bitcast i8* %33 to %"class.jxl::Plane"*
  br label %35

35:                                               ; preds = %22, %30
  %36 = phi i64 [ %31, %30 ], [ 0, %22 ]
  %37 = phi %"class.jxl::Plane"* [ %34, %30 ], [ null, %22 ]
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 %10
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 %36
  %40 = ptrtoint %"class.jxl::Plane"* %39 to i64
  %41 = load i64, i64* %1, align 8
  %42 = load i64, i64* %2, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %43, i64 %41, i64 %42, i64 4) #12
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 1
  %45 = ptrtoint %"class.jxl::Plane"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %46, align 8
  %48 = ptrtoint %"class.jxl::Plane"* %47 to i64
  %49 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %4, align 8
  %50 = icmp eq %"class.jxl::Plane"* %49, %47
  br i1 %50, label %101, label %51

51:                                               ; preds = %35
  %52 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1, i32 0, i32 0
  %53 = ptrtoint i32* %52 to i64
  %54 = sub i64 %53, %48
  %55 = and i64 %54, 32
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %68

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 -1
  %59 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1
  %60 = bitcast %"class.jxl::Plane"* %58 to i8*
  %61 = bitcast %"class.jxl::Plane"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false) #12
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %38, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %49, i64 -1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i8* null, i8** %64, align 8
  %67 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  store i64 %66, i64* %67, align 8
  br label %68

68:                                               ; preds = %57, %51
  %69 = phi %"class.jxl::Plane"* [ undef, %51 ], [ %58, %57 ]
  %70 = phi %"class.jxl::Plane"* [ %38, %51 ], [ %58, %57 ]
  %71 = phi %"class.jxl::Plane"* [ %49, %51 ], [ %59, %57 ]
  %72 = icmp ult i64 %54, 32
  br i1 %72, label %97, label %73

73:                                               ; preds = %68, %73
  %74 = phi %"class.jxl::Plane"* [ %86, %73 ], [ %70, %68 ]
  %75 = phi %"class.jxl::Plane"* [ %87, %73 ], [ %71, %68 ]
  %76 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -1
  %77 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -1
  %78 = bitcast %"class.jxl::Plane"* %76 to i8*
  %79 = bitcast %"class.jxl::Plane"* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #12
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -1, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -1, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -2
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -2
  %88 = bitcast %"class.jxl::Plane"* %86 to i8*
  %89 = bitcast %"class.jxl::Plane"* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 24, i1 false) #12
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %74, i64 -2, i32 0, i32 5
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %75, i64 -2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %91, i64 0, i32 0, i32 0, i32 0
  %93 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i8* null, i8** %92, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %90 to i64*
  store i64 %94, i64* %95, align 8
  %96 = icmp eq %"class.jxl::Plane"* %87, %47
  br i1 %96, label %97, label %73

97:                                               ; preds = %73, %68
  %98 = phi %"class.jxl::Plane"* [ %69, %68 ], [ %86, %73 ]
  %99 = load i64, i64* %7, align 8
  %100 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %4, align 8
  br label %101

101:                                              ; preds = %35, %97
  %102 = phi %"class.jxl::Plane"* [ %100, %97 ], [ %47, %35 ]
  %103 = phi %"class.jxl::Plane"* [ %98, %97 ], [ %38, %35 ]
  %104 = phi i64 [ %99, %97 ], [ %48, %35 ]
  %105 = ptrtoint %"class.jxl::Plane"* %103 to i64
  store i64 %105, i64* %7, align 8
  store i64 %45, i64* %5, align 8
  store i64 %40, i64* %17, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Plane"*
  %107 = icmp eq %"class.jxl::Plane"* %102, %106
  br i1 %107, label %117, label %108

108:                                              ; preds = %101, %115
  %109 = phi %"class.jxl::Plane"* [ %110, %115 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %109, i64 -1
  %111 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %109, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  store i8* null, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %108
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %112) #12
  br label %115

115:                                              ; preds = %114, %108
  %116 = icmp eq %"class.jxl::Plane"* %110, %106
  br i1 %116, label %117, label %108

117:                                              ; preds = %115, %101
  %118 = icmp eq i64 %104, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %120) #18
  br label %121

121:                                              ; preds = %117, %119
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #2

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #2

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #8 align 2 {
  %3 = bitcast i8* %0 to %class.anon.318**
  %4 = load %class.anon.318*, %class.anon.318** %3, align 8
  %5 = getelementptr inbounds %class.anon.318, %class.anon.318* %4, i64 0, i32 0
  %6 = load %"struct.jxl::PassesDecoderState"**, %"struct.jxl::PassesDecoderState"*** %5, align 8
  %7 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %6, align 8
  tail call void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"* %7, i64 %1) #12
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE3$_9ZNS_21FinalizeFrameDecodingES3_S5_S6_bbE4$_10E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #8 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds i8, i8* %0, i64 8
  %9 = bitcast i8* %8 to %class.anon.323**
  %10 = load %class.anon.323*, %class.anon.323** %9, align 8
  %11 = zext i32 %1 to i64
  %12 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 0
  %13 = load %"struct.jxl::PassesDecoderState"**, %"struct.jxl::PassesDecoderState"*** %12, align 8
  %14 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %14, i64 0, i32 1
  %16 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 11
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %19
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 2
  %23 = load i8, i8* %22, align 1, !range !2
  %24 = zext i8 %23 to i64
  %25 = add i64 %21, %24
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 15
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 1
  %29 = select i1 %28, i64 0, i64 2
  %30 = add i64 %25, %29
  %31 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 16, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = ptrtoint i32* %32 to i64
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 16, i32 0, i32 1
  %35 = load i32*, i32** %34, align 8
  %36 = icmp eq i32* %32, %35
  br i1 %36, label %144, label %37

37:                                               ; preds = %3
  %38 = getelementptr i32, i32* %35, i64 -1
  %39 = ptrtoint i32* %38 to i64
  %40 = sub i64 %39, %33
  %41 = lshr i64 %40, 2
  %42 = add nuw nsw i64 %41, 1
  %43 = and i64 %42, 3
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %37, %45
  %46 = phi i64 [ %53, %45 ], [ %30, %37 ]
  %47 = phi i32* [ %54, %45 ], [ %32, %37 ]
  %48 = phi i64 [ %55, %45 ], [ %43, %37 ]
  %49 = load i32, i32* %47, align 4
  %50 = icmp ugt i32 %49, 1
  %51 = icmp ugt i64 %46, 2
  %52 = select i1 %51, i64 %46, i64 2
  %53 = select i1 %50, i64 %52, i64 %46
  %54 = getelementptr inbounds i32, i32* %47, i64 1
  %55 = add i64 %48, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %45, !llvm.loop !2039

57:                                               ; preds = %45, %37
  %58 = phi i64 [ undef, %37 ], [ %53, %45 ]
  %59 = phi i64 [ %30, %37 ], [ %53, %45 ]
  %60 = phi i32* [ %32, %37 ], [ %54, %45 ]
  %61 = icmp ult i64 %40, 12
  br i1 %61, label %90, label %62

62:                                               ; preds = %57, %62
  %63 = phi i64 [ %87, %62 ], [ %59, %57 ]
  %64 = phi i32* [ %88, %62 ], [ %60, %57 ]
  %65 = load i32, i32* %64, align 4
  %66 = icmp ugt i32 %65, 1
  %67 = icmp ugt i64 %63, 2
  %68 = select i1 %67, i64 %63, i64 2
  %69 = select i1 %66, i64 %68, i64 %63
  %70 = getelementptr inbounds i32, i32* %64, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = icmp ugt i32 %71, 1
  %73 = icmp ugt i64 %69, 2
  %74 = select i1 %73, i64 %69, i64 2
  %75 = select i1 %72, i64 %74, i64 %69
  %76 = getelementptr inbounds i32, i32* %64, i64 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp ugt i32 %77, 1
  %79 = icmp ugt i64 %75, 2
  %80 = select i1 %79, i64 %75, i64 2
  %81 = select i1 %78, i64 %80, i64 %75
  %82 = getelementptr inbounds i32, i32* %64, i64 3
  %83 = load i32, i32* %82, align 4
  %84 = icmp ugt i32 %83, 1
  %85 = icmp ugt i64 %81, 2
  %86 = select i1 %85, i64 %81, i64 2
  %87 = select i1 %84, i64 %86, i64 %81
  %88 = getelementptr inbounds i32, i32* %64, i64 4
  %89 = icmp eq i32* %88, %35
  br i1 %89, label %90, label %62

90:                                               ; preds = %62, %57
  %91 = phi i64 [ %58, %57 ], [ %87, %62 ]
  %92 = getelementptr i32, i32* %35, i64 -1
  %93 = ptrtoint i32* %92 to i64
  %94 = sub i64 %93, %33
  %95 = lshr i64 %94, 2
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 3
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %111, label %99

99:                                               ; preds = %90, %99
  %100 = phi i64 [ %107, %99 ], [ %30, %90 ]
  %101 = phi i32* [ %108, %99 ], [ %32, %90 ]
  %102 = phi i64 [ %109, %99 ], [ %97, %90 ]
  %103 = load i32, i32* %101, align 4
  %104 = icmp ugt i32 %103, 1
  %105 = icmp ugt i64 %100, 2
  %106 = select i1 %105, i64 %100, i64 2
  %107 = select i1 %104, i64 %106, i64 %100
  %108 = getelementptr inbounds i32, i32* %101, i64 1
  %109 = add i64 %102, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %99, !llvm.loop !2040

111:                                              ; preds = %99, %90
  %112 = phi i64 [ undef, %90 ], [ %107, %99 ]
  %113 = phi i64 [ %30, %90 ], [ %107, %99 ]
  %114 = phi i32* [ %32, %90 ], [ %108, %99 ]
  %115 = icmp ult i64 %94, 12
  br i1 %115, label %144, label %116

116:                                              ; preds = %111, %116
  %117 = phi i64 [ %141, %116 ], [ %113, %111 ]
  %118 = phi i32* [ %142, %116 ], [ %114, %111 ]
  %119 = load i32, i32* %118, align 4
  %120 = icmp ugt i32 %119, 1
  %121 = icmp ugt i64 %117, 2
  %122 = select i1 %121, i64 %117, i64 2
  %123 = select i1 %120, i64 %122, i64 %117
  %124 = getelementptr inbounds i32, i32* %118, i64 1
  %125 = load i32, i32* %124, align 4
  %126 = icmp ugt i32 %125, 1
  %127 = icmp ugt i64 %123, 2
  %128 = select i1 %127, i64 %123, i64 2
  %129 = select i1 %126, i64 %128, i64 %123
  %130 = getelementptr inbounds i32, i32* %118, i64 2
  %131 = load i32, i32* %130, align 4
  %132 = icmp ugt i32 %131, 1
  %133 = icmp ugt i64 %129, 2
  %134 = select i1 %133, i64 %129, i64 2
  %135 = select i1 %132, i64 %134, i64 %129
  %136 = getelementptr inbounds i32, i32* %118, i64 3
  %137 = load i32, i32* %136, align 4
  %138 = icmp ugt i32 %137, 1
  %139 = icmp ugt i64 %135, 2
  %140 = select i1 %139, i64 %135, i64 2
  %141 = select i1 %138, i64 %140, i64 %135
  %142 = getelementptr inbounds i32, i32* %118, i64 4
  %143 = icmp eq i32* %142, %35
  br i1 %143, label %144, label %116

144:                                              ; preds = %111, %116, %3
  %145 = phi i64 [ %30, %3 ], [ %91, %116 ], [ %91, %111 ]
  %146 = phi i64 [ %30, %3 ], [ %112, %111 ], [ %141, %116 ]
  %147 = add i64 %145, 15
  %148 = and i64 %147, -8
  %149 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %149) #12
  %150 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 0
  %151 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 1
  %152 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  %153 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 3
  %154 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 1
  %155 = load %"class.std::__1::vector.311"*, %"class.std::__1::vector.311"** %154, align 8
  %156 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %155, i64 0, i32 0, i32 0
  %157 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %156, align 8
  %158 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %157, i64 %11, i32 2
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %157, i64 %11, i32 3
  %161 = load i64, i64* %160, align 8
  store i64 %148, i64* %150, align 8
  store i64 %146, i64* %151, align 8
  store i64 %159, i64* %152, align 8
  store i64 %161, i64* %153, align 8
  %162 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 2
  %163 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %162, align 8
  %164 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %163, align 8
  br i1 %36, label %218, label %165

165:                                              ; preds = %144
  %166 = getelementptr i32, i32* %35, i64 -1
  %167 = ptrtoint i32* %166 to i64
  %168 = sub i64 %167, %33
  %169 = lshr i64 %168, 2
  %170 = add nuw nsw i64 %169, 1
  %171 = and i64 %170, 3
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %185, label %173

173:                                              ; preds = %165, %173
  %174 = phi i64 [ %181, %173 ], [ %30, %165 ]
  %175 = phi i32* [ %182, %173 ], [ %32, %165 ]
  %176 = phi i64 [ %183, %173 ], [ %171, %165 ]
  %177 = load i32, i32* %175, align 4
  %178 = icmp ugt i32 %177, 1
  %179 = icmp ugt i64 %174, 2
  %180 = select i1 %179, i64 %174, i64 2
  %181 = select i1 %178, i64 %180, i64 %174
  %182 = getelementptr inbounds i32, i32* %175, i64 1
  %183 = add i64 %176, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %173, !llvm.loop !2041

185:                                              ; preds = %173, %165
  %186 = phi i64 [ undef, %165 ], [ %181, %173 ]
  %187 = phi i64 [ %30, %165 ], [ %181, %173 ]
  %188 = phi i32* [ %32, %165 ], [ %182, %173 ]
  %189 = icmp ult i64 %168, 12
  br i1 %189, label %218, label %190

190:                                              ; preds = %185, %190
  %191 = phi i64 [ %215, %190 ], [ %187, %185 ]
  %192 = phi i32* [ %216, %190 ], [ %188, %185 ]
  %193 = load i32, i32* %192, align 4
  %194 = icmp ugt i32 %193, 1
  %195 = icmp ugt i64 %191, 2
  %196 = select i1 %195, i64 %191, i64 2
  %197 = select i1 %194, i64 %196, i64 %191
  %198 = getelementptr inbounds i32, i32* %192, i64 1
  %199 = load i32, i32* %198, align 4
  %200 = icmp ugt i32 %199, 1
  %201 = icmp ugt i64 %197, 2
  %202 = select i1 %201, i64 %197, i64 2
  %203 = select i1 %200, i64 %202, i64 %197
  %204 = getelementptr inbounds i32, i32* %192, i64 2
  %205 = load i32, i32* %204, align 4
  %206 = icmp ugt i32 %205, 1
  %207 = icmp ugt i64 %203, 2
  %208 = select i1 %207, i64 %203, i64 2
  %209 = select i1 %206, i64 %208, i64 %203
  %210 = getelementptr inbounds i32, i32* %192, i64 3
  %211 = load i32, i32* %210, align 4
  %212 = icmp ugt i32 %211, 1
  %213 = icmp ugt i64 %209, 2
  %214 = select i1 %213, i64 %209, i64 2
  %215 = select i1 %212, i64 %214, i64 %209
  %216 = getelementptr inbounds i32, i32* %192, i64 4
  %217 = icmp eq i32* %216, %35
  br i1 %217, label %218, label %190

218:                                              ; preds = %185, %190, %144
  %219 = phi i64 [ %30, %144 ], [ %186, %185 ], [ %215, %190 ]
  %220 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %14, i64 0, i32 32, i32 0, i32 0
  %221 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %220, align 8
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %221, i64 %2
  %223 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %157, i64 %11, i32 0
  %224 = load i64, i64* %223, align 8
  %225 = icmp ult i64 %224, %219
  %226 = select i1 %225, i64 %224, i64 %219
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %164, i64 0, i32 0, i64 0, i32 0, i32 0
  %228 = load i32, i32* %227, align 8
  %229 = zext i32 %228 to i64
  %230 = sub i64 %229, %224
  %231 = sub i64 %230, %159
  %232 = icmp ult i64 %231, %219
  %233 = select i1 %232, i64 %231, i64 %219
  %234 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %157, i64 %11, i32 1
  %235 = load i64, i64* %234, align 8
  %236 = icmp ult i64 %235, %219
  %237 = select i1 %236, i64 %235, i64 %219
  %238 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %164, i64 0, i32 0, i64 0, i32 0, i32 1
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %239 to i64
  %241 = sub i64 %240, %235
  %242 = sub i64 %241, %161
  %243 = icmp ult i64 %242, %219
  %244 = select i1 %243, i64 %242, i64 %219
  %245 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %245) #12
  %246 = sub i64 %224, %226
  %247 = sub i64 %235, %237
  %248 = add i64 %226, %159
  %249 = add i64 %248, %233
  %250 = add i64 %237, %161
  %251 = add i64 %250, %244
  %252 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  store i64 %246, i64* %252, align 8
  %253 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  store i64 %247, i64* %253, align 8
  %254 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  store i64 %249, i64* %254, align 8
  %255 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  store i64 %251, i64* %255, align 8
  %256 = bitcast %"class.jxl::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %256) #12
  %257 = sub i64 %148, %226
  %258 = sub i64 %146, %237
  %259 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 0
  store i64 %257, i64* %259, align 8
  %260 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 1
  store i64 %258, i64* %260, align 8
  %261 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 2
  store i64 %249, i64* %261, align 8
  %262 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %5, i64 0, i32 3
  store i64 %251, i64* %262, align 8
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* dereferenceable(96) %164, %"class.jxl::Rect"* nonnull dereferenceable(32) %5, %"class.jxl::Image3"* %222) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %256) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %245) #12
  %263 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %263) #12
  %264 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %265 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %266 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %263, i8 0, i64 24, i1 false) #12
  %267 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 3
  %268 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %267, align 8
  %269 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %268, align 8
  %270 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %269, i64 0, i32 12
  %271 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %269, i64 0, i32 12, i32 0, i32 1
  %272 = bitcast %"class.jxl::Plane"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::vector.220"* %270 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = sub i64 %273, %275
  %277 = ashr exact i64 %276, 5
  %278 = bitcast %"struct.std::__1::pair"** %266 to i64*
  %279 = bitcast %"class.std::__1::vector"* %7 to i64*
  %280 = icmp eq i64 %276, 0
  br i1 %280, label %305, label %281

281:                                              ; preds = %218
  %282 = icmp ugt i64 %277, 461168601842738790
  br i1 %282, label %283, label %284

283:                                              ; preds = %281
  call void @abort() #17
  unreachable

284:                                              ; preds = %281
  %285 = bitcast %"struct.std::__1::pair"** %265 to i64*
  %286 = mul i64 %277, 40
  %287 = call i8* @_Znwm(i64 %286) #18
  %288 = bitcast i8* %287 to %"struct.std::__1::pair"*
  %289 = ptrtoint i8* %287 to i64
  %290 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %288, i64 %277
  %291 = ptrtoint %"struct.std::__1::pair"* %290 to i64
  store i64 %289, i64* %279, align 8
  store i64 %289, i64* %285, align 8
  store i64 %291, i64* %278, align 8
  %292 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %268, align 8
  %293 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %292, i64 0, i32 12, i32 0, i32 1
  %294 = bitcast %"class.jxl::Plane"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %292, i64 0, i32 12
  %297 = bitcast %"class.std::__1::vector.220"* %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = sub i64 %295, %298
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %305, label %301

301:                                              ; preds = %284
  %302 = ashr exact i64 %299, 5
  %303 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 4
  %304 = bitcast %"struct.std::__1::pair"** %265 to i64*
  br label %318

305:                                              ; preds = %606, %218, %284
  %306 = phi %"class.jxl::ImageBundle"* [ %292, %284 ], [ %269, %218 ], [ %609, %606 ]
  %307 = load %"struct.jxl::PassesDecoderState"**, %"struct.jxl::PassesDecoderState"*** %12, align 8
  %308 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %307, align 8
  %309 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %308, i64 0, i32 32, i32 0, i32 0
  %310 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %309, align 8
  %311 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %310, i64 %2
  %312 = load %"class.std::__1::vector.311"*, %"class.std::__1::vector.311"** %154, align 8
  %313 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %312, i64 0, i32 0, i32 0
  %314 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %313, align 8
  %315 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %314, i64 %11
  %316 = call i32 @_ZN3jxl17FinalizeImageRectEPNS_6Image3IfEERKNS_4RectERKNSt3__16vectorINS6_4pairIPNS_5PlaneIfEES3_EENS6_9allocatorISC_EEEEPNS_18PassesDecoderStateEmPNS_11ImageBundleES5_(%"class.jxl::Image3"* %311, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"class.std::__1::vector"* nonnull dereferenceable(24) %7, %"struct.jxl::PassesDecoderState"* %308, i64 %2, %"class.jxl::ImageBundle"* %306, %"class.jxl::Rect"* dereferenceable(32) %315) #12
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %623, label %619

318:                                              ; preds = %606, %301
  %319 = phi i64 [ %302, %301 ], [ %617, %606 ]
  %320 = phi %"class.jxl::ImageBundle"* [ %292, %301 ], [ %609, %606 ]
  %321 = phi i64 [ 0, %301 ], [ %607, %606 ]
  %322 = load %"class.std::__1::vector.311"*, %"class.std::__1::vector.311"** %154, align 8
  %323 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %322, i64 0, i32 0, i32 0
  %324 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %323, align 8
  %325 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %324, i64 %11, i32 0
  %326 = load i64, i64* %325, align 8
  %327 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %324, i64 %11, i32 1
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %324, i64 %11, i32 2
  %330 = load i64, i64* %329, align 8
  %331 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %324, i64 %11, i32 3
  %332 = load i64, i64* %331, align 8
  %333 = load %"struct.jxl::FrameHeader"*, %"struct.jxl::FrameHeader"** %303, align 8
  %334 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %333, i64 0, i32 15
  %335 = load i32, i32* %334, align 4, !noalias !2042
  %336 = zext i32 %335 to i64
  %337 = mul i64 %326, %336
  %338 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %333, i64 0, i32 16, i32 0, i32 0
  %339 = load i32*, i32** %338, align 8
  %340 = getelementptr inbounds i32, i32* %339, i64 %321
  %341 = load i32, i32* %340, align 4
  %342 = zext i32 %341 to i64
  %343 = add nsw i64 %342, -1
  %344 = add i64 %343, %337
  %345 = udiv i64 %344, %342
  %346 = mul i64 %328, %336
  %347 = add i64 %343, %346
  %348 = udiv i64 %347, %342
  %349 = mul i64 %330, %336
  %350 = add i64 %343, %349
  %351 = udiv i64 %350, %342
  %352 = mul i64 %332, %336
  %353 = add i64 %343, %352
  %354 = udiv i64 %353, %342
  %355 = icmp eq i32 %341, 1
  br i1 %355, label %542, label %356

356:                                              ; preds = %318
  %357 = load %"struct.jxl::PassesDecoderState"**, %"struct.jxl::PassesDecoderState"*** %12, align 8
  %358 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %357, align 8
  %359 = mul i64 %319, %2
  %360 = add i64 %321, %359
  %361 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %358, i64 0, i32 31, i32 0, i32 0
  %362 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %361, align 8
  %363 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %362, i64 %360
  %364 = ptrtoint %"class.jxl::Plane"* %363 to i64
  %365 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %358, i64 0, i32 11, i32 0, i32 0
  %366 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %365, align 8
  %367 = icmp ult i64 %345, 2
  %368 = select i1 %367, i64 %345, i64 2
  %369 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %366, i64 %321, i32 0, i32 0
  %370 = load i32, i32* %369, align 8
  %371 = zext i32 %370 to i64
  %372 = sub i64 %371, %345
  %373 = sub i64 %372, %351
  %374 = icmp ult i64 %373, 2
  %375 = select i1 %374, i64 %373, i64 2
  %376 = icmp ult i64 %348, 2
  %377 = select i1 %376, i64 %348, i64 2
  %378 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %366, i64 %321, i32 0, i32 1
  %379 = load i32, i32* %378, align 4
  %380 = zext i32 %379 to i64
  %381 = sub i64 %380, %348
  %382 = sub i64 %381, %354
  %383 = icmp ult i64 %382, 2
  %384 = select i1 %383, i64 %382, i64 2
  %385 = sub i64 %345, %368
  %386 = sub i64 %348, %377
  %387 = add i64 %351, %368
  %388 = add i64 %387, %375
  %389 = add i64 %354, %377
  %390 = add i64 %389, %384
  %391 = sub nuw nsw i64 8, %368
  %392 = sub nuw nsw i64 2, %377
  %393 = icmp eq i64 %388, 0
  %394 = icmp eq i64 %390, 0
  %395 = or i1 %393, %394
  br i1 %395, label %482, label %396

396:                                              ; preds = %356
  %397 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %366, i64 %321, i32 0, i32 5, i32 0, i32 0, i32 0
  %398 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %366, i64 %321, i32 0, i32 4
  %399 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %362, i64 %360, i32 0, i32 5, i32 0, i32 0, i32 0
  %400 = load i8*, i8** %399, align 8, !alias.scope !2045
  %401 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %362, i64 %360, i32 0, i32 4
  %402 = load i64, i64* %401, align 8, !alias.scope !2045
  %403 = shl i64 %388, 2
  %404 = add nsw i64 %377, -1
  %405 = add nsw i64 %404, %384
  %406 = and i64 %390, 1
  %407 = sub i64 0, %354
  %408 = icmp eq i64 %405, %407
  br i1 %408, label %458, label %409

409:                                              ; preds = %396
  %410 = sub i64 %390, %406
  br label %411

411:                                              ; preds = %411, %409
  %412 = phi i64 [ 0, %409 ], [ %455, %411 ]
  %413 = phi i64 [ %410, %409 ], [ %456, %411 ]
  %414 = add i64 %386, %412
  %415 = load i8*, i8** %397, align 8, !noalias !2045
  %416 = load i64, i64* %398, align 8, !noalias !2045
  %417 = mul i64 %416, %414
  %418 = getelementptr inbounds i8, i8* %415, i64 %417
  %419 = ptrtoint i8* %418 to i64
  %420 = and i64 %419, 63
  %421 = icmp eq i64 %420, 0
  call void @llvm.assume(i1 %421) #12, !noalias !2045
  %422 = bitcast i8* %418 to float*
  %423 = getelementptr inbounds float, float* %422, i64 %385
  %424 = add i64 %392, %412
  %425 = mul i64 %424, %402
  %426 = getelementptr inbounds i8, i8* %400, i64 %425
  %427 = ptrtoint i8* %426 to i64
  %428 = and i64 %427, 63
  %429 = icmp eq i64 %428, 0
  call void @llvm.assume(i1 %429) #12, !noalias !2045
  %430 = bitcast i8* %426 to float*
  %431 = getelementptr inbounds float, float* %430, i64 %391
  %432 = bitcast float* %431 to i8*
  %433 = bitcast float* %423 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %432, i8* align 4 %433, i64 %403, i1 false) #12, !noalias !2045
  %434 = or i64 %412, 1
  %435 = add i64 %386, %434
  %436 = load i8*, i8** %397, align 8, !noalias !2045
  %437 = load i64, i64* %398, align 8, !noalias !2045
  %438 = mul i64 %437, %435
  %439 = getelementptr inbounds i8, i8* %436, i64 %438
  %440 = ptrtoint i8* %439 to i64
  %441 = and i64 %440, 63
  %442 = icmp eq i64 %441, 0
  call void @llvm.assume(i1 %442) #12, !noalias !2045
  %443 = bitcast i8* %439 to float*
  %444 = getelementptr inbounds float, float* %443, i64 %385
  %445 = add i64 %392, %434
  %446 = mul i64 %445, %402
  %447 = getelementptr inbounds i8, i8* %400, i64 %446
  %448 = ptrtoint i8* %447 to i64
  %449 = and i64 %448, 63
  %450 = icmp eq i64 %449, 0
  call void @llvm.assume(i1 %450) #12, !noalias !2045
  %451 = bitcast i8* %447 to float*
  %452 = getelementptr inbounds float, float* %451, i64 %391
  %453 = bitcast float* %452 to i8*
  %454 = bitcast float* %444 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %453, i8* align 4 %454, i64 %403, i1 false) #12, !noalias !2045
  %455 = add nuw i64 %412, 2
  %456 = add i64 %413, -2
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %411

458:                                              ; preds = %411, %396
  %459 = phi i64 [ 0, %396 ], [ %455, %411 ]
  %460 = icmp eq i64 %406, 0
  br i1 %460, label %482, label %461

461:                                              ; preds = %458
  %462 = add i64 %386, %459
  %463 = load i8*, i8** %397, align 8, !noalias !2045
  %464 = load i64, i64* %398, align 8, !noalias !2045
  %465 = mul i64 %464, %462
  %466 = getelementptr inbounds i8, i8* %463, i64 %465
  %467 = ptrtoint i8* %466 to i64
  %468 = and i64 %467, 63
  %469 = icmp eq i64 %468, 0
  call void @llvm.assume(i1 %469) #12, !noalias !2045
  %470 = bitcast i8* %466 to float*
  %471 = getelementptr inbounds float, float* %470, i64 %385
  %472 = add i64 %392, %459
  %473 = mul i64 %472, %402
  %474 = getelementptr inbounds i8, i8* %400, i64 %473
  %475 = ptrtoint i8* %474 to i64
  %476 = and i64 %475, 63
  %477 = icmp eq i64 %476, 0
  call void @llvm.assume(i1 %477) #12, !noalias !2045
  %478 = bitcast i8* %474 to float*
  %479 = getelementptr inbounds float, float* %478, i64 %391
  %480 = bitcast float* %479 to i8*
  %481 = bitcast float* %471 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %480, i8* align 4 %481, i64 %403, i1 false) #12, !noalias !2045
  br label %482

482:                                              ; preds = %461, %458, %356
  %483 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %265, align 8
  %484 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %266, align 8
  %485 = icmp ult %"struct.std::__1::pair"* %483, %484
  %486 = ptrtoint %"struct.std::__1::pair"* %484 to i64
  br i1 %485, label %487, label %495

487:                                              ; preds = %482
  %488 = bitcast %"struct.std::__1::pair"* %483 to i64*
  store i64 %364, i64* %488, align 8
  %489 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %483, i64 0, i32 1, i32 0
  %490 = bitcast i64* %489 to <2 x i64>*
  store <2 x i64> <i64 8, i64 2>, <2 x i64>* %490, align 8
  %491 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %483, i64 0, i32 1, i32 2
  store i64 %351, i64* %491, align 8
  %492 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %483, i64 0, i32 1, i32 3
  store i64 %354, i64* %492, align 8
  %493 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %483, i64 1
  %494 = ptrtoint %"struct.std::__1::pair"* %493 to i64
  store i64 %494, i64* %304, align 8
  br label %606

495:                                              ; preds = %482
  %496 = ptrtoint %"struct.std::__1::pair"* %483 to i64
  %497 = load i64, i64* %279, align 8
  %498 = sub i64 %496, %497
  %499 = sdiv exact i64 %498, 40
  %500 = add nsw i64 %499, 1
  %501 = icmp ugt i64 %500, 461168601842738790
  br i1 %501, label %502, label %504

502:                                              ; preds = %495
  %503 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %503) #17
  unreachable

504:                                              ; preds = %495
  %505 = sub i64 %486, %497
  %506 = sdiv exact i64 %505, 40
  %507 = icmp ult i64 %506, 230584300921369395
  br i1 %507, label %508, label %513

508:                                              ; preds = %504
  %509 = shl nsw i64 %506, 1
  %510 = icmp ult i64 %509, %500
  %511 = select i1 %510, i64 %500, i64 %509
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %518, label %513

513:                                              ; preds = %508, %504
  %514 = phi i64 [ %511, %508 ], [ 461168601842738790, %504 ]
  %515 = mul i64 %514, 40
  %516 = call i8* @_Znwm(i64 %515) #18
  %517 = bitcast i8* %516 to %"struct.std::__1::pair"*
  br label %518

518:                                              ; preds = %513, %508
  %519 = phi i64 [ %514, %513 ], [ 0, %508 ]
  %520 = phi %"struct.std::__1::pair"* [ %517, %513 ], [ null, %508 ]
  %521 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %520, i64 %499
  %522 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %520, i64 %519
  %523 = ptrtoint %"struct.std::__1::pair"* %522 to i64
  %524 = bitcast %"struct.std::__1::pair"* %521 to i64*
  store i64 %364, i64* %524, align 8
  %525 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %520, i64 %499, i32 1, i32 0
  %526 = bitcast i64* %525 to <2 x i64>*
  store <2 x i64> <i64 8, i64 2>, <2 x i64>* %526, align 8
  %527 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %520, i64 %499, i32 1, i32 2
  store i64 %351, i64* %527, align 8
  %528 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %520, i64 %499, i32 1, i32 3
  store i64 %354, i64* %528, align 8
  %529 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %521, i64 1
  %530 = ptrtoint %"struct.std::__1::pair"* %529 to i64
  %531 = sdiv exact i64 %498, -40
  %532 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %521, i64 %531
  %533 = ptrtoint %"struct.std::__1::pair"* %532 to i64
  %534 = icmp sgt i64 %498, 0
  br i1 %534, label %535, label %538

535:                                              ; preds = %518
  %536 = bitcast %"struct.std::__1::pair"* %532 to i8*
  %537 = inttoptr i64 %497 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %536, i8* align 8 %537, i64 %498, i1 false) #12
  br label %538

538:                                              ; preds = %535, %518
  store i64 %533, i64* %279, align 8
  store i64 %530, i64* %304, align 8
  store i64 %523, i64* %278, align 8
  %539 = icmp eq i64 %497, 0
  br i1 %539, label %606, label %540

540:                                              ; preds = %538
  %541 = inttoptr i64 %497 to i8*
  call void @_ZdlPv(i8* %541) #18
  br label %606

542:                                              ; preds = %318
  %543 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %320, i64 0, i32 12, i32 0, i32 0
  %544 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %543, align 8
  %545 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %544, i64 %321
  %546 = ptrtoint %"class.jxl::Plane"* %545 to i64
  %547 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %265, align 8
  %548 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %266, align 8
  %549 = icmp ult %"struct.std::__1::pair"* %547, %548
  %550 = ptrtoint %"struct.std::__1::pair"* %548 to i64
  br i1 %549, label %551, label %559

551:                                              ; preds = %542
  %552 = bitcast %"struct.std::__1::pair"* %547 to i64*
  store i64 %546, i64* %552, align 8
  %553 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %547, i64 0, i32 1, i32 0
  store i64 %345, i64* %553, align 8
  %554 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %547, i64 0, i32 1, i32 1
  store i64 %348, i64* %554, align 8
  %555 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %547, i64 0, i32 1, i32 2
  store i64 %351, i64* %555, align 8
  %556 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %547, i64 0, i32 1, i32 3
  store i64 %354, i64* %556, align 8
  %557 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %547, i64 1
  %558 = ptrtoint %"struct.std::__1::pair"* %557 to i64
  store i64 %558, i64* %304, align 8
  br label %606

559:                                              ; preds = %542
  %560 = ptrtoint %"struct.std::__1::pair"* %547 to i64
  %561 = load i64, i64* %279, align 8
  %562 = sub i64 %560, %561
  %563 = sdiv exact i64 %562, 40
  %564 = add nsw i64 %563, 1
  %565 = icmp ugt i64 %564, 461168601842738790
  br i1 %565, label %566, label %568

566:                                              ; preds = %559
  %567 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %567) #17
  unreachable

568:                                              ; preds = %559
  %569 = sub i64 %550, %561
  %570 = sdiv exact i64 %569, 40
  %571 = icmp ult i64 %570, 230584300921369395
  br i1 %571, label %572, label %577

572:                                              ; preds = %568
  %573 = shl nsw i64 %570, 1
  %574 = icmp ult i64 %573, %564
  %575 = select i1 %574, i64 %564, i64 %573
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %582, label %577

577:                                              ; preds = %572, %568
  %578 = phi i64 [ %575, %572 ], [ 461168601842738790, %568 ]
  %579 = mul i64 %578, 40
  %580 = call i8* @_Znwm(i64 %579) #18
  %581 = bitcast i8* %580 to %"struct.std::__1::pair"*
  br label %582

582:                                              ; preds = %577, %572
  %583 = phi i64 [ %578, %577 ], [ 0, %572 ]
  %584 = phi %"struct.std::__1::pair"* [ %581, %577 ], [ null, %572 ]
  %585 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %563
  %586 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %583
  %587 = ptrtoint %"struct.std::__1::pair"* %586 to i64
  %588 = bitcast %"struct.std::__1::pair"* %585 to i64*
  store i64 %546, i64* %588, align 8
  %589 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %563, i32 1, i32 0
  store i64 %345, i64* %589, align 8
  %590 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %563, i32 1, i32 1
  store i64 %348, i64* %590, align 8
  %591 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %563, i32 1, i32 2
  store i64 %351, i64* %591, align 8
  %592 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %584, i64 %563, i32 1, i32 3
  store i64 %354, i64* %592, align 8
  %593 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %585, i64 1
  %594 = ptrtoint %"struct.std::__1::pair"* %593 to i64
  %595 = sdiv exact i64 %562, -40
  %596 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %585, i64 %595
  %597 = ptrtoint %"struct.std::__1::pair"* %596 to i64
  %598 = icmp sgt i64 %562, 0
  br i1 %598, label %599, label %602

599:                                              ; preds = %582
  %600 = bitcast %"struct.std::__1::pair"* %596 to i8*
  %601 = inttoptr i64 %561 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %600, i8* align 8 %601, i64 %562, i1 false) #12
  br label %602

602:                                              ; preds = %599, %582
  store i64 %597, i64* %279, align 8
  store i64 %594, i64* %304, align 8
  store i64 %587, i64* %278, align 8
  %603 = icmp eq i64 %561, 0
  br i1 %603, label %606, label %604

604:                                              ; preds = %602
  %605 = inttoptr i64 %561 to i8*
  call void @_ZdlPv(i8* %605) #18
  br label %606

606:                                              ; preds = %604, %602, %551, %540, %538, %487
  %607 = add nuw i64 %321, 1
  %608 = load %"class.jxl::ImageBundle"**, %"class.jxl::ImageBundle"*** %267, align 8
  %609 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %608, align 8
  %610 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %609, i64 0, i32 12
  %611 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %609, i64 0, i32 12, i32 0, i32 1
  %612 = bitcast %"class.jxl::Plane"** %611 to i64*
  %613 = load i64, i64* %612, align 8
  %614 = bitcast %"class.std::__1::vector.220"* %610 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = sub i64 %613, %615
  %617 = ashr exact i64 %616, 5
  %618 = icmp ult i64 %607, %617
  br i1 %618, label %318, label %305

619:                                              ; preds = %305
  %620 = getelementptr inbounds %class.anon.323, %class.anon.323* %10, i64 0, i32 5
  %621 = load %"struct.std::__1::atomic.319"*, %"struct.std::__1::atomic.319"** %620, align 8
  %622 = getelementptr inbounds %"struct.std::__1::atomic.319", %"struct.std::__1::atomic.319"* %621, i64 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 0, i8* %622 seq_cst, align 1
  br label %623

623:                                              ; preds = %619, %305
  %624 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %264, align 8
  %625 = icmp eq %"struct.std::__1::pair"* %624, null
  br i1 %625, label %630, label %626

626:                                              ; preds = %623
  %627 = ptrtoint %"struct.std::__1::pair"* %624 to i64
  %628 = bitcast %"struct.std::__1::pair"** %265 to i64*
  store i64 %627, i64* %628, align 8
  %629 = bitcast %"struct.std::__1::pair"* %624 to i8*
  call void @_ZdlPv(i8* %629) #18
  br label %630

630:                                              ; preds = %623, %626
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %263) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %149) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca float, align 4
  %14 = alloca %"class.jxl::Plane", align 8
  %15 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %16 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 11
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 2
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %20, %2
  %25 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %27 = bitcast %"class.jxl::FilterPipeline"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.276"* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = sdiv exact i64 %31, 832
  %33 = icmp ult i64 %32, %1
  br i1 %33, label %34, label %36

34:                                               ; preds = %24
  %35 = sub i64 %1, %32
  tail call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.276"* %25, i64 %35) #12
  br label %36

36:                                               ; preds = %34, %20, %24
  %37 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %39 = bitcast %"class.jxl::Image3"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.290"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = sdiv exact i64 %43, 96
  %45 = icmp ult i64 %44, %1
  br i1 %45, label %46, label %51

46:                                               ; preds = %36
  %47 = inttoptr i64 %40 to %"class.jxl::Image3"*
  %48 = bitcast i64* %3 to i8*
  %49 = bitcast i64* %4 to i8*
  %50 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 2, i32 0, i32 0
  br label %56

51:                                               ; preds = %68, %36
  %52 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %53 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 1, i32 15
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %122, label %73

56:                                               ; preds = %71, %46
  %57 = phi %"class.jxl::Image3"* [ %47, %46 ], [ %72, %71 ]
  %58 = phi i64 [ %44, %46 ], [ %69, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #12
  store i64 368, i64* %3, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #12
  store i64 324, i64* %4, align 8
  %59 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %60 = icmp ult %"class.jxl::Image3"* %57, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %62, i64 368, i64 324, i64 4) #12
  %63 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %63, i64 368, i64 324, i64 4) #12
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %64, i64 368, i64 324, i64 4) #12
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 1
  %66 = ptrtoint %"class.jxl::Image3"* %65 to i64
  store i64 %66, i64* %39, align 8
  br label %68

67:                                               ; preds = %56
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"* %37, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %4) #12
  br label %68

68:                                               ; preds = %61, %67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #12
  %69 = add i64 %58, 1
  %70 = icmp eq i64 %69, %1
  br i1 %70, label %51, label %71

71:                                               ; preds = %68
  %72 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %38, align 8
  br label %56

73:                                               ; preds = %51
  %74 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %75 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %76 = bitcast %"class.jxl::Image3"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.std::__1::vector.290"* %74 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %77, %79
  %81 = sdiv exact i64 %80, 96
  %82 = icmp ult i64 %81, %1
  br i1 %82, label %83, label %122

83:                                               ; preds = %73
  %84 = inttoptr i64 %77 to %"class.jxl::Image3"*
  %85 = bitcast i64* %5 to i8*
  %86 = bitcast i64* %6 to i8*
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 2, i32 0, i32 0
  %88 = bitcast i64* %7 to i8*
  %89 = bitcast i64* %8 to i8*
  %90 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 2, i32 0, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %93 = bitcast %"class.jxl::Image3"** %90 to i64*
  br label %94

94:                                               ; preds = %120, %83
  %95 = phi %"class.jxl::Image3"* [ %84, %83 ], [ %121, %120 ]
  %96 = phi i64 [ %81, %83 ], [ %118, %120 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #12
  store i64 304, i64* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #12
  store i64 292, i64* %6, align 8
  %97 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %87, align 8
  %98 = icmp ult %"class.jxl::Image3"* %95, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %100, i64 304, i64 292, i64 4) #12
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %101, i64 304, i64 292, i64 4) #12
  %102 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %102, i64 304, i64 292, i64 4) #12
  %103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 1
  %104 = ptrtoint %"class.jxl::Image3"* %103 to i64
  store i64 %104, i64* %76, align 8
  br label %106

105:                                              ; preds = %94
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"* %74, i64* nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %6) #12
  br label %106

106:                                              ; preds = %99, %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #12
  store i64 304, i64* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #12
  store i64 292, i64* %8, align 8
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %90, align 8
  %108 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %91, align 8
  %109 = icmp ult %"class.jxl::Image3"* %107, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %111, i64 304, i64 292, i64 4) #12
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %112, i64 304, i64 292, i64 4) #12
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %113, i64 304, i64 292, i64 4) #12
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 1
  %115 = ptrtoint %"class.jxl::Image3"* %114 to i64
  store i64 %115, i64* %93, align 8
  br label %117

116:                                              ; preds = %106
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"* %92, i64* nonnull dereferenceable(8) %7, i64* nonnull dereferenceable(8) %8) #12
  br label %117

117:                                              ; preds = %110, %116
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #12
  %118 = add i64 %96, 1
  %119 = icmp eq i64 %118, %1
  br i1 %119, label %122, label %120

120:                                              ; preds = %117
  %121 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %75, align 8
  br label %94

122:                                              ; preds = %117, %73, %51
  %123 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %124 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %125 = bitcast %"class.jxl::Image3"** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.std::__1::vector.290"* %123 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %126, %128
  %130 = sdiv exact i64 %129, 96
  %131 = icmp ult i64 %130, %1
  br i1 %131, label %132, label %137

132:                                              ; preds = %122
  %133 = inttoptr i64 %126 to %"class.jxl::Image3"*
  %134 = bitcast i64* %9 to i8*
  %135 = bitcast i64* %10 to i8*
  %136 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 2, i32 0, i32 0
  br label %141

137:                                              ; preds = %153, %122
  %138 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 14
  %139 = load i8*, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %158, label %164

141:                                              ; preds = %156, %132
  %142 = phi %"class.jxl::Image3"* [ %133, %132 ], [ %157, %156 ]
  %143 = phi i64 [ %130, %132 ], [ %154, %156 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #12
  store i64 336, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #12
  store i64 292, i64* %10, align 8
  %144 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %136, align 8
  %145 = icmp ult %"class.jxl::Image3"* %142, %144
  br i1 %145, label %146, label %152

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %147, i64 336, i64 292, i64 4) #12
  %148 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %148, i64 336, i64 292, i64 4) #12
  %149 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %149, i64 336, i64 292, i64 4) #12
  %150 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 1
  %151 = ptrtoint %"class.jxl::Image3"* %150 to i64
  store i64 %151, i64* %125, align 8
  br label %153

152:                                              ; preds = %141
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"* %123, i64* nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %10) #12
  br label %153

153:                                              ; preds = %146, %152
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #12
  %154 = add i64 %143, 1
  %155 = icmp eq i64 %154, %1
  br i1 %155, label %137, label %156

156:                                              ; preds = %153
  %157 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %124, align 8
  br label %141

158:                                              ; preds = %137
  %159 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %160 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %159, align 8
  %161 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %160, i64 0, i32 2
  %162 = load i8, i8* %161, align 8, !range !2
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %315

164:                                              ; preds = %137, %158
  %165 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %166 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %165, i64 0, i32 1, i32 15
  %167 = load i32, i32* %166, align 4
  %168 = call i32 @llvm.ctlz.i32(i32 %167, i1 true) #12, !range !1941
  %169 = xor i32 %168, 31
  %170 = zext i32 %169 to i64
  %171 = call i32 @llvm.ctpop.i32(i32 %167) #12, !range !1941
  %172 = icmp ugt i32 %171, 1
  %173 = zext i1 %172 to i64
  %174 = add nuw nsw i64 %173, %170
  %175 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174
  %176 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 1
  %177 = bitcast %"class.jxl::Image3"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.290"* %175 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = sdiv exact i64 %181, 96
  %183 = icmp ult i64 %182, %1
  br i1 %183, label %184, label %194

184:                                              ; preds = %164
  %185 = inttoptr i64 %178 to %"class.jxl::Image3"*
  %186 = bitcast i64* %11 to i8*
  %187 = shl i64 288, %174
  %188 = bitcast i64* %12 to i8*
  %189 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 2, i32 0, i32 0
  br label %221

190:                                              ; preds = %233
  %191 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %191, i64 0, i32 1, i32 15
  %193 = load i32, i32* %192, align 4
  br label %194

194:                                              ; preds = %190, %164
  %195 = phi i32 [ %193, %190 ], [ %167, %164 ]
  %196 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19
  %197 = zext i32 %195 to i64
  %198 = mul nuw nsw i64 %197, 288
  %199 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %199) #12
  store float 1.000000e+00, float* %13, align 4
  %200 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %201 = bitcast float** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.std::__1::vector.256"* %196 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %202, %204
  %206 = ashr exact i64 %205, 2
  %207 = icmp ugt i64 %198, %206
  %208 = inttoptr i64 %204 to float*
  br i1 %207, label %209, label %211

209:                                              ; preds = %194
  %210 = sub nsw i64 %198, %206
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.256"* %196, i64 %210, float* nonnull dereferenceable(4) %13) #12
  br label %215

211:                                              ; preds = %194
  %212 = icmp ult i64 %198, %206
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = getelementptr inbounds float, float* %208, i64 %198
  store float* %214, float** %200, align 8
  br label %215

215:                                              ; preds = %209, %211, %213
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #12
  %216 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %217 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %216, align 8
  %218 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %217, i64 0, i32 2
  %219 = load i8, i8* %218, align 8, !range !2
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %238, label %315

221:                                              ; preds = %236, %184
  %222 = phi %"class.jxl::Image3"* [ %185, %184 ], [ %237, %236 ]
  %223 = phi i64 [ %182, %184 ], [ %234, %236 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #12
  store i64 %187, i64* %11, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #12
  store i64 %187, i64* %12, align 8
  %224 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %189, align 8
  %225 = icmp ult %"class.jxl::Image3"* %222, %224
  br i1 %225, label %226, label %232

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %227, i64 %187, i64 %187, i64 4) #12
  %228 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %228, i64 %187, i64 %187, i64 4) #12
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %229, i64 %187, i64 %187, i64 4) #12
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 1
  %231 = ptrtoint %"class.jxl::Image3"* %230 to i64
  store i64 %231, i64* %177, align 8
  br label %233

232:                                              ; preds = %221
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"* %175, i64* nonnull dereferenceable(8) %11, i64* nonnull dereferenceable(8) %12) #12
  br label %233

233:                                              ; preds = %226, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #12
  %234 = add i64 %223, 1
  %235 = icmp eq i64 %234, %1
  br i1 %235, label %190, label %236

236:                                              ; preds = %233
  %237 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %176, align 8
  br label %221

238:                                              ; preds = %215
  %239 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %240 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %241 = bitcast %"class.std::__1::vector.256"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.std::__1::vector.262"* %239 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = sub i64 %242, %244
  %246 = sdiv exact i64 %245, 24
  %247 = icmp ult i64 %246, %1
  %248 = inttoptr i64 %244 to %"class.std::__1::vector.256"*
  %249 = inttoptr i64 %242 to %"class.std::__1::vector.256"*
  br i1 %247, label %250, label %253

250:                                              ; preds = %238
  %251 = sub i64 %1, %246
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.262"* %239, i64 %251) #12
  %252 = load i64, i64* %241, align 8
  br label %273

253:                                              ; preds = %238
  %254 = icmp ugt i64 %246, %1
  br i1 %254, label %255, label %273

255:                                              ; preds = %253
  %256 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %248, i64 %1
  %257 = icmp eq %"class.std::__1::vector.256"* %256, %249
  br i1 %257, label %271, label %258

258:                                              ; preds = %255, %269
  %259 = phi %"class.std::__1::vector.256"* [ %260, %269 ], [ %249, %255 ]
  %260 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %259, i64 -1
  %261 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %260, i64 0, i32 0, i32 0
  %262 = load float*, float** %261, align 8
  %263 = icmp eq float* %262, null
  br i1 %263, label %269, label %264

264:                                              ; preds = %258
  %265 = ptrtoint float* %262 to i64
  %266 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %259, i64 -1, i32 0, i32 1
  %267 = bitcast float** %266 to i64*
  store i64 %265, i64* %267, align 8
  %268 = bitcast float* %262 to i8*
  call void @_ZdlPv(i8* %268) #18
  br label %269

269:                                              ; preds = %264, %258
  %270 = icmp eq %"class.std::__1::vector.256"* %260, %256
  br i1 %270, label %271, label %258

271:                                              ; preds = %269, %255
  store %"class.std::__1::vector.256"* %256, %"class.std::__1::vector.256"** %240, align 8
  %272 = ptrtoint %"class.std::__1::vector.256"* %256 to i64
  br label %273

273:                                              ; preds = %250, %253, %271
  %274 = phi i64 [ %252, %250 ], [ %242, %253 ], [ %272, %271 ]
  %275 = load i64, i64* %243, align 8
  %276 = icmp eq i64 %274, %275
  br i1 %276, label %315, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 17
  br label %279

279:                                              ; preds = %277, %308
  %280 = phi i64 [ %275, %277 ], [ %311, %308 ]
  %281 = phi i64 [ 0, %277 ], [ %309, %308 ]
  %282 = inttoptr i64 %280 to %"class.std::__1::vector.256"*
  %283 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %282, i64 %281
  %284 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %285 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %284, i64 0, i32 1, i32 15
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  %288 = mul nuw nsw i64 %287, 288
  %289 = load i8, i8* %278, align 1, !range !2
  %290 = icmp eq i8 %289, 0
  %291 = select i1 %290, i64 3, i64 4
  %292 = mul nuw nsw i64 %288, %291
  %293 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %282, i64 %281, i32 0, i32 1
  %294 = bitcast float** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.std::__1::vector.256"* %283 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %295, %297
  %299 = ashr exact i64 %298, 2
  %300 = icmp ugt i64 %292, %299
  %301 = inttoptr i64 %297 to float*
  br i1 %300, label %302, label %304

302:                                              ; preds = %279
  %303 = sub nsw i64 %292, %299
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.256"* %283, i64 %303) #12
  br label %308

304:                                              ; preds = %279
  %305 = icmp ult i64 %292, %299
  br i1 %305, label %306, label %308

306:                                              ; preds = %304
  %307 = getelementptr inbounds float, float* %301, i64 %292
  store float* %307, float** %293, align 8
  br label %308

308:                                              ; preds = %302, %304, %306
  %309 = add nuw i64 %281, 1
  %310 = load i64, i64* %241, align 8
  %311 = load i64, i64* %243, align 8
  %312 = sub i64 %310, %311
  %313 = sdiv exact i64 %312, 24
  %314 = icmp ult i64 %309, %313
  br i1 %314, label %279, label %315

315:                                              ; preds = %308, %273, %215, %158
  %316 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %317 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %316, i64 0, i32 0
  %318 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %317, align 8
  %319 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %318, i64 0, i32 0, i32 15
  %320 = load i32, i32* %319, align 8
  %321 = zext i32 %320 to i64
  %322 = mul i64 %321, %1
  %323 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %324 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %325 = bitcast %"class.jxl::Plane"** %324 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = bitcast %"class.std::__1::vector.220"* %323 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = sub i64 %326, %328
  %330 = ashr exact i64 %329, 5
  %331 = icmp ugt i64 %322, %330
  br i1 %331, label %332, label %339

332:                                              ; preds = %315
  %333 = sub i64 %322, %330
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.220"* %323, i64 %333) #12
  %334 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %335 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %334, i64 0, i32 0
  %336 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %335, align 8
  %337 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %336, i64 0, i32 0, i32 15
  %338 = load i32, i32* %337, align 8
  br label %339

339:                                              ; preds = %332, %315
  %340 = phi i32 [ %338, %332 ], [ %320, %315 ]
  %341 = phi %"struct.jxl::PassesSharedState"* [ %334, %332 ], [ %316, %315 ]
  %342 = icmp eq i32 %340, 0
  br i1 %342, label %352, label %343

343:                                              ; preds = %339
  %344 = icmp eq i64 %1, 0
  %345 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %323, i64 0, i32 0, i32 0
  %346 = bitcast %"class.jxl::Plane"* %14 to i8*
  %347 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0
  %348 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %348, i64 0, i32 0, i32 0, i32 0
  %350 = bitcast %"class.std::__1::unique_ptr"* %348 to i64*
  %351 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %353

352:                                              ; preds = %409, %339
  ret void

353:                                              ; preds = %343, %409
  %354 = phi %"struct.jxl::PassesSharedState"* [ %341, %343 ], [ %410, %409 ]
  %355 = phi i64 [ 0, %343 ], [ %411, %409 ]
  %356 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 16, i32 0, i32 0
  %357 = load i32*, i32** %356, align 8
  %358 = getelementptr inbounds i32, i32* %357, i64 %355
  %359 = load i32, i32* %358, align 4
  %360 = icmp eq i32 %359, 1
  br i1 %360, label %409, label %361

361:                                              ; preds = %353
  %362 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 15
  %363 = load i32, i32* %362, align 4
  %364 = zext i32 %363 to i64
  %365 = mul nuw nsw i64 %364, 288
  %366 = zext i32 %359 to i64
  %367 = udiv i64 %365, %366
  %368 = add nuw nsw i64 %367, 16
  %369 = add nuw nsw i64 %367, 4
  br i1 %344, label %409, label %370

370:                                              ; preds = %361, %405
  %371 = phi %"struct.jxl::PassesSharedState"* [ %408, %405 ], [ %354, %361 ]
  %372 = phi i64 [ %406, %405 ], [ 0, %361 ]
  %373 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %371, i64 0, i32 0
  %374 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %373, align 8
  %375 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %374, i64 0, i32 0, i32 15
  %376 = load i32, i32* %375, align 8
  %377 = zext i32 %376 to i64
  %378 = mul i64 %372, %377
  %379 = add i64 %378, %355
  %380 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %345, align 8
  %381 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %380, i64 %379
  %382 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %381, i64 0, i32 0, i32 0
  %383 = load i32, i32* %382, align 8
  %384 = zext i32 %383 to i64
  %385 = icmp ugt i64 %368, %384
  br i1 %385, label %391, label %386

386:                                              ; preds = %370
  %387 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %380, i64 %379, i32 0, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = zext i32 %388 to i64
  %390 = icmp ugt i64 %369, %389
  br i1 %390, label %391, label %405

391:                                              ; preds = %386, %370
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %346) #12
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %347, i64 %368, i64 %369, i64 4) #12
  %392 = bitcast %"class.jxl::Plane"* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %392, i8* nonnull align 8 %346, i64 24, i1 false) #12
  %393 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %380, i64 %379, i32 0, i32 5
  %394 = load i64, i64* %350, align 8
  store i8* null, i8** %349, align 8
  %395 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %393, i64 0, i32 0, i32 0, i32 0
  %396 = load i8*, i8** %395, align 8
  %397 = bitcast %"class.std::__1::unique_ptr"* %393 to i64*
  store i64 %394, i64* %397, align 8
  %398 = icmp eq i8* %396, null
  br i1 %398, label %400, label %399

399:                                              ; preds = %391
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %396) #12
  br label %400

400:                                              ; preds = %391, %399
  %401 = load i8*, i8** %351, align 8
  store i8* null, i8** %351, align 8
  %402 = icmp eq i8* %401, null
  br i1 %402, label %404, label %403

403:                                              ; preds = %400
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %401) #12
  br label %404

404:                                              ; preds = %400, %403
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %346) #12
  br label %405

405:                                              ; preds = %404, %386
  %406 = add nuw i64 %372, 1
  %407 = icmp eq i64 %406, %1
  %408 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  br i1 %407, label %409, label %370

409:                                              ; preds = %405, %361, %353
  %410 = phi %"struct.jxl::PassesSharedState"* [ %354, %361 ], [ %354, %353 ], [ %408, %405 ]
  %411 = add nuw nsw i64 %355, 1
  %412 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %410, i64 0, i32 0
  %413 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %412, align 8
  %414 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %413, i64 0, i32 0, i32 15
  %415 = load i32, i32* %414, align 8
  %416 = zext i32 %415 to i64
  %417 = icmp ult i64 %411, %416
  br i1 %417, label %353, label %352
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.276"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer.386", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::FilterPipeline"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 832
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %44, label %13

13:                                               ; preds = %2
  %14 = inttoptr i64 %9 to %"class.jxl::FilterPipeline"*
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %42, label %19

17:                                               ; preds = %19
  %18 = ptrtoint %"class.jxl::FilterPipeline"* %15 to i64
  br label %42

19:                                               ; preds = %13, %19
  %20 = phi %"class.jxl::FilterPipeline"* [ %40, %19 ], [ %14, %13 ]
  %21 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %21, i64 320, i64 15, i64 4) #12
  %22 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %22, i64 320, i64 15, i64 4) #12
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %23, i64 320, i64 15, i64 4) #12
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 1
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 3
  %27 = bitcast i64* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 104, i1 false) #12
  %28 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 3
  %30 = bitcast i64* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 104, i1 false) #12
  %31 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 3
  %33 = bitcast i64* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 104, i1 false) #12
  %34 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 3
  %36 = bitcast i64* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 104, i1 false) #12
  %37 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 3
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 4
  store i8 0, i8* %38, align 8
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 5
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 1
  %41 = icmp eq %"class.jxl::FilterPipeline"* %40, %15
  br i1 %41, label %17, label %19

42:                                               ; preds = %13, %17
  %43 = phi i64 [ %18, %17 ], [ %9, %13 ]
  store i64 %43, i64* %8, align 8
  br label %139

44:                                               ; preds = %2
  %45 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 2
  %46 = bitcast %"struct.std::__1::__split_buffer.386"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %3, i64 0, i32 0
  %48 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %3, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %3, i64 0, i32 2
  %50 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %3, i64 0, i32 3, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %3, i64 0, i32 3, i32 1, i32 0
  %52 = bitcast %"class.std::__1::vector.276"* %0 to i64*
  %53 = bitcast %"struct.std::__1::__split_buffer.386"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 40, i1 false)
  %54 = load i64, i64* %52, align 8
  %55 = sub i64 %9, %54
  %56 = sdiv exact i64 %55, 832
  %57 = add i64 %56, %1
  %58 = icmp ugt i64 %57, 22171567396285518
  br i1 %58, label %59, label %61

59:                                               ; preds = %44
  %60 = bitcast %"class.std::__1::vector.276"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #17
  unreachable

61:                                               ; preds = %44
  %62 = sub i64 %6, %54
  %63 = sdiv exact i64 %62, 832
  %64 = icmp ult i64 %63, 11085783698142759
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %66 = bitcast %"class.std::__1::allocator.281"** %51 to %"class.std::__1::__compressed_pair.278"**
  store %"class.std::__1::__compressed_pair.278"* %45, %"class.std::__1::__compressed_pair.278"** %66, align 8
  br label %73

67:                                               ; preds = %61
  %68 = shl nsw i64 %63, 1
  %69 = icmp ult i64 %68, %57
  %70 = select i1 %69, i64 %57, i64 %68
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %71 = bitcast %"class.std::__1::allocator.281"** %51 to %"class.std::__1::__compressed_pair.278"**
  store %"class.std::__1::__compressed_pair.278"* %45, %"class.std::__1::__compressed_pair.278"** %71, align 8
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %67, %65
  %74 = phi i64 [ 22171567396285518, %65 ], [ %70, %67 ]
  %75 = mul i64 %74, 832
  %76 = tail call i8* @_Znwm(i64 %75) #18
  %77 = bitcast i8* %76 to %"class.jxl::FilterPipeline"*
  br label %78

78:                                               ; preds = %67, %73
  %79 = phi i64 [ %74, %73 ], [ 0, %67 ]
  %80 = phi %"class.jxl::FilterPipeline"* [ %77, %73 ], [ null, %67 ]
  store %"class.jxl::FilterPipeline"* %80, %"class.jxl::FilterPipeline"** %47, align 8
  %81 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %56
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %49, align 8
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %48, align 8
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %79
  store %"class.jxl::FilterPipeline"* %82, %"class.jxl::FilterPipeline"** %50, align 8
  %83 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %81, i64 %1
  br label %84

84:                                               ; preds = %78, %84
  %85 = phi %"class.jxl::FilterPipeline"* [ %105, %84 ], [ %81, %78 ]
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %86, i64 320, i64 15, i64 4) #12
  %87 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %87, i64 320, i64 15, i64 4) #12
  %88 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %88, i64 320, i64 15, i64 4) #12
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 1
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 3
  %92 = bitcast i64* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 104, i1 false) #12
  %93 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %93, align 8
  %94 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 3
  %95 = bitcast i64* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 104, i1 false) #12
  %96 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 3
  %98 = bitcast i64* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 104, i1 false) #12
  %99 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %99, align 8
  %100 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 3
  %101 = bitcast i64* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 104, i1 false) #12
  %102 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 3
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 4
  store i8 0, i8* %103, align 8
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 5
  store i64 0, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 1
  %106 = icmp eq %"class.jxl::FilterPipeline"* %83, %105
  br i1 %106, label %107, label %84

107:                                              ; preds = %84
  %108 = bitcast %"class.jxl::FilterPipeline"** %49 to i64*
  %109 = ptrtoint %"class.jxl::FilterPipeline"* %83 to i64
  store i64 %109, i64* %108, align 8
  call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.276"* %0, %"struct.std::__1::__split_buffer.386"* nonnull dereferenceable(40) %3)
  %110 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %48, align 8
  %111 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %112 = icmp eq %"class.jxl::FilterPipeline"* %111, %110
  br i1 %112, label %133, label %113

113:                                              ; preds = %107, %130
  %114 = phi %"class.jxl::FilterPipeline"* [ %131, %130 ], [ %111, %107 ]
  %115 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1
  store %"class.jxl::FilterPipeline"* %115, %"class.jxl::FilterPipeline"** %49, align 8
  %116 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  store i8* null, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %117) #12
  br label %120

120:                                              ; preds = %119, %113
  %121 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  store i8* null, i8** %121, align 8
  %123 = icmp eq i8* %122, null
  br i1 %123, label %125, label %124

124:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #12
  br label %125

125:                                              ; preds = %124, %120
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  store i8* null, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %130, label %129

129:                                              ; preds = %125
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %127) #12
  br label %130

130:                                              ; preds = %129, %125
  %131 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %132 = icmp eq %"class.jxl::FilterPipeline"* %131, %110
  br i1 %132, label %133, label %113

133:                                              ; preds = %130, %107
  %134 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %47, align 8
  %135 = icmp eq %"class.jxl::FilterPipeline"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = bitcast %"class.jxl::FilterPipeline"* %134 to i8*
  call void @_ZdlPv(i8* %137) #18
  br label %138

138:                                              ; preds = %133, %136
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #12
  br label %139

139:                                              ; preds = %138, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.276"*, %"struct.std::__1::__split_buffer.386"* dereferenceable(40)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::FilterPipeline"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::FilterPipeline"* %4 to i64
  %11 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.276"* %0 to i64*
  br label %77

14:                                               ; preds = %2
  %15 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::FilterPipeline"* [ %70, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::FilterPipeline"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1
  %21 = bitcast %"class.jxl::FilterPipeline"* %19 to i8*
  %22 = bitcast %"class.jxl::FilterPipeline"* %20 to i8*
  %23 = getelementptr %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #12
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #12
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  %54 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #12
  br label %64

64:                                               ; preds = %63, %49
  %65 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 1
  %66 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 1
  %67 = bitcast i64* %65 to i8*
  %68 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 736, i1 false) #12
  %69 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  %70 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %69, i64 -1
  store %"class.jxl::FilterPipeline"* %70, %"class.jxl::FilterPipeline"** %7, align 8
  %71 = icmp eq %"class.jxl::FilterPipeline"* %20, %4
  br i1 %71, label %72, label %16

72:                                               ; preds = %64
  %73 = ptrtoint %"class.jxl::FilterPipeline"* %70 to i64
  %74 = bitcast %"class.std::__1::vector.276"* %0 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  br label %77

77:                                               ; preds = %9, %72
  %78 = phi i64* [ %11, %9 ], [ %76, %72 ]
  %79 = phi i64* [ %13, %9 ], [ %74, %72 ]
  %80 = phi i64 [ %12, %9 ], [ %73, %72 ]
  %81 = phi i64 [ %10, %9 ], [ %75, %72 ]
  store i64 %80, i64* %79, align 8
  store i64 %81, i64* %78, align 8
  %82 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %1, i64 0, i32 2
  %83 = bitcast %"class.jxl::FilterPipeline"** %5 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"class.jxl::FilterPipeline"** %82 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %83, align 8
  store i64 %84, i64* %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector.276", %"class.std::__1::vector.276"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %88 = getelementptr inbounds %"struct.std::__1::__split_buffer.386", %"struct.std::__1::__split_buffer.386"* %1, i64 0, i32 3, i32 0, i32 0
  %89 = bitcast %"class.jxl::FilterPipeline"** %87 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.jxl::FilterPipeline"** %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %89, align 8
  store i64 %90, i64* %91, align 8
  %93 = load i64, i64* %78, align 8
  %94 = bitcast %"struct.std::__1::__split_buffer.386"* %1 to i64*
  store i64 %93, i64* %94, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.290"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #9 comdat align 2 {
  %4 = alloca %"struct.std::__1::__split_buffer.389", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 2
  %6 = bitcast %"struct.std::__1::__split_buffer.389"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %4, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %4, i64 0, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %4, i64 0, i32 3, i32 1, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 1
  %13 = bitcast %"class.jxl::Image3"** %12 to i64*
  %14 = bitcast %"struct.std::__1::__split_buffer.389"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false)
  %15 = load i64, i64* %13, align 8
  %16 = bitcast %"class.std::__1::vector.290"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = sdiv exact i64 %18, 96
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 192153584101141162
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = bitcast %"class.std::__1::vector.290"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #17
  unreachable

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.jxl::Image3"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %17
  %29 = sdiv exact i64 %28, 96
  %30 = icmp ult i64 %29, 96076792050570581
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %32 = bitcast %"class.std::__1::allocator.295"** %11 to %"class.std::__1::__compressed_pair.292"**
  store %"class.std::__1::__compressed_pair.292"* %5, %"class.std::__1::__compressed_pair.292"** %32, align 8
  br label %39

33:                                               ; preds = %24
  %34 = shl nsw i64 %29, 1
  %35 = icmp ult i64 %34, %20
  %36 = select i1 %35, i64 %20, i64 %34
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %37 = bitcast %"class.std::__1::allocator.295"** %11 to %"class.std::__1::__compressed_pair.292"**
  store %"class.std::__1::__compressed_pair.292"* %5, %"class.std::__1::__compressed_pair.292"** %37, align 8
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %33, %31
  %40 = phi i64 [ 192153584101141162, %31 ], [ %36, %33 ]
  %41 = mul i64 %40, 96
  %42 = tail call i8* @_Znwm(i64 %41) #18
  %43 = bitcast i8* %42 to %"class.jxl::Image3"*
  br label %44

44:                                               ; preds = %33, %39
  %45 = phi i64 [ %40, %39 ], [ 0, %33 ]
  %46 = phi %"class.jxl::Image3"* [ %43, %39 ], [ null, %33 ]
  store %"class.jxl::Image3"* %46, %"class.jxl::Image3"** %7, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %8, align 8
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %45
  store %"class.jxl::Image3"* %48, %"class.jxl::Image3"** %10, align 8
  %49 = load i64, i64* %1, align 8
  %50 = load i64, i64* %2, align 8
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %51, i64 %49, i64 %50, i64 4) #12
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %52, i64 %49, i64 %50, i64 4) #12
  %53 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %53, i64 %49, i64 %50, i64 4) #12
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 1
  store %"class.jxl::Image3"* %54, %"class.jxl::Image3"** %9, align 8
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.290"* %0, %"struct.std::__1::__split_buffer.389"* nonnull dereferenceable(40) %4)
  %55 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %56 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %57 = icmp eq %"class.jxl::Image3"* %56, %55
  br i1 %57, label %78, label %58

58:                                               ; preds = %44, %75
  %59 = phi %"class.jxl::Image3"* [ %76, %75 ], [ %56, %44 ]
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1
  store %"class.jxl::Image3"* %60, %"class.jxl::Image3"** %9, align 8
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #12
  br label %65

65:                                               ; preds = %64, %58
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #12
  br label %70

70:                                               ; preds = %69, %65
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  store i8* null, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %70
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %72) #12
  br label %75

75:                                               ; preds = %74, %70
  %76 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %77 = icmp eq %"class.jxl::Image3"* %76, %55
  br i1 %77, label %78, label %58

78:                                               ; preds = %75, %44
  %79 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %80 = icmp eq %"class.jxl::Image3"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = bitcast %"class.jxl::Image3"* %79 to i8*
  call void @_ZdlPv(i8* %82) #18
  br label %83

83:                                               ; preds = %78, %81
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.290"*, %"struct.std::__1::__split_buffer.389"* dereferenceable(40)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::Image3"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::Image3"* %4 to i64
  %11 = bitcast %"class.jxl::Image3"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.290"* %0 to i64*
  br label %73

14:                                               ; preds = %2
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::Image3"* [ %66, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::Image3"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %21 = bitcast %"class.jxl::Image3"* %19 to i8*
  %22 = bitcast %"class.jxl::Image3"* %20 to i8*
  %23 = getelementptr %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #12
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #12
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #12
  br label %64

64:                                               ; preds = %63, %49
  %65 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %65, i64 -1
  store %"class.jxl::Image3"* %66, %"class.jxl::Image3"** %7, align 8
  %67 = icmp eq %"class.jxl::Image3"* %20, %4
  br i1 %67, label %68, label %16

68:                                               ; preds = %64
  %69 = ptrtoint %"class.jxl::Image3"* %66 to i64
  %70 = bitcast %"class.std::__1::vector.290"* %0 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.jxl::Image3"** %7 to i64*
  br label %73

73:                                               ; preds = %9, %68
  %74 = phi i64* [ %11, %9 ], [ %72, %68 ]
  %75 = phi i64* [ %13, %9 ], [ %70, %68 ]
  %76 = phi i64 [ %12, %9 ], [ %69, %68 ]
  %77 = phi i64 [ %10, %9 ], [ %71, %68 ]
  store i64 %76, i64* %75, align 8
  store i64 %77, i64* %74, align 8
  %78 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %1, i64 0, i32 2
  %79 = bitcast %"class.jxl::Image3"** %5 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"class.jxl::Image3"** %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %79, align 8
  store i64 %80, i64* %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.290", %"class.std::__1::vector.290"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %84 = getelementptr inbounds %"struct.std::__1::__split_buffer.389", %"struct.std::__1::__split_buffer.389"* %1, i64 0, i32 3, i32 0, i32 0
  %85 = bitcast %"class.jxl::Image3"** %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.jxl::Image3"** %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %85, align 8
  store i64 %86, i64* %87, align 8
  %89 = load i64, i64* %74, align 8
  %90 = bitcast %"struct.std::__1::__split_buffer.389"* %1 to i64*
  store i64 %89, i64* %90, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.256"*, i64, float* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %4 = bitcast float* %2 to i8*
  %5 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast float** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp ult i64 %12, %1
  br i1 %13, label %139, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %10 to float*
  %16 = inttoptr i64 %10 to i8*
  %17 = getelementptr inbounds float, float* %15, i64 %1
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %14
  %20 = bitcast float* %2 to i32*
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %48

26:                                               ; preds = %106, %48, %19
  %27 = phi float* [ %15, %48 ], [ %15, %19 ], [ %60, %106 ]
  %28 = ptrtoint float* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr float, float* %15, i64 %29
  %31 = ptrtoint float* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %26, %37
  %38 = phi float* [ %42, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %43, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %20, align 4
  %41 = bitcast float* %38 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds float, float* %38, i64 1
  %43 = add i64 %39, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %37, !llvm.loop !2048

45:                                               ; preds = %37, %26
  %46 = phi float* [ %27, %26 ], [ %42, %37 ]
  %47 = icmp ult i64 %32, 28
  br i1 %47, label %108, label %110

48:                                               ; preds = %19
  %49 = shl nsw i64 %1, 2
  %50 = add i64 %49, -4
  %51 = lshr exact i64 %50, 2
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr float, float* %15, i64 %52
  %54 = getelementptr i8, i8* %4, i64 1
  %55 = icmp ugt i8* %54, %16
  %56 = icmp ugt float* %53, %2
  %57 = and i1 %55, %56
  br i1 %57, label %26, label %58

58:                                               ; preds = %48
  %59 = and i64 %24, 9223372036854775800
  %60 = getelementptr float, float* %15, i64 %59
  %61 = add nsw i64 %59, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i32, i32* %20, align 4, !alias.scope !2049
  %69 = insertelement <4 x i32> undef, i32 %68, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  %71 = insertelement <4 x i32> undef, i32 %68, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = load i32, i32* %20, align 4, !alias.scope !2049
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = insertelement <4 x i32> undef, i32 %73, i32 0
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr float, float* %15, i64 %79
  %82 = bitcast float* %81 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %82, align 4, !alias.scope !2052, !noalias !2049
  %83 = getelementptr float, float* %81, i64 4
  %84 = bitcast float* %83 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %84, align 4, !alias.scope !2052, !noalias !2049
  %85 = or i64 %79, 8
  %86 = getelementptr float, float* %15, i64 %85
  %87 = bitcast float* %86 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %87, align 4, !alias.scope !2052, !noalias !2049
  %88 = getelementptr float, float* %86, i64 4
  %89 = bitcast float* %88 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %89, align 4, !alias.scope !2052, !noalias !2049
  %90 = add i64 %79, 16
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !2054

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr float, float* %15, i64 %94
  %98 = load i32, i32* %20, align 4, !alias.scope !2049
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  %101 = insertelement <4 x i32> undef, i32 %98, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast float* %97 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 4, !alias.scope !2052, !noalias !2049
  %104 = getelementptr float, float* %97, i64 4
  %105 = bitcast float* %104 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %105, align 4, !alias.scope !2052, !noalias !2049
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %24, %59
  br i1 %107, label %108, label %26

108:                                              ; preds = %45, %110, %106
  %109 = ptrtoint float* %17 to i64
  br label %137

110:                                              ; preds = %45, %110
  %111 = phi float* [ %135, %110 ], [ %46, %45 ]
  %112 = load i32, i32* %20, align 4
  %113 = bitcast float* %111 to i32*
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds float, float* %111, i64 1
  %115 = load i32, i32* %20, align 4
  %116 = bitcast float* %114 to i32*
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds float, float* %111, i64 2
  %118 = load i32, i32* %20, align 4
  %119 = bitcast float* %117 to i32*
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds float, float* %111, i64 3
  %121 = load i32, i32* %20, align 4
  %122 = bitcast float* %120 to i32*
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds float, float* %111, i64 4
  %124 = load i32, i32* %20, align 4
  %125 = bitcast float* %123 to i32*
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds float, float* %111, i64 5
  %127 = load i32, i32* %20, align 4
  %128 = bitcast float* %126 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds float, float* %111, i64 6
  %130 = load i32, i32* %20, align 4
  %131 = bitcast float* %129 to i32*
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds float, float* %111, i64 7
  %133 = load i32, i32* %20, align 4
  %134 = bitcast float* %132 to i32*
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds float, float* %111, i64 8
  %136 = icmp eq float* %135, %17
  br i1 %136, label %108, label %110, !llvm.loop !2055

137:                                              ; preds = %14, %108
  %138 = phi i64 [ %109, %108 ], [ %10, %14 ]
  store i64 %138, i64* %9, align 8
  br label %311

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.256"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %10, %141
  %143 = ashr exact i64 %142, 2
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 4611686018427387903
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.256"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #17
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %7, %141
  %150 = ashr exact i64 %149, 2
  %151 = icmp ult i64 %150, 2305843009213693951
  br i1 %151, label %152, label %160

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 1
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = icmp ugt i64 %155, 4611686018427387903
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  tail call void @abort() #17
  unreachable

160:                                              ; preds = %148, %157
  %161 = phi i64 [ %155, %157 ], [ 4611686018427387903, %148 ]
  %162 = shl i64 %161, 2
  %163 = tail call i8* @_Znwm(i64 %162) #18
  %164 = bitcast i8* %163 to float*
  br label %165

165:                                              ; preds = %160, %152
  %166 = phi i64 [ %161, %160 ], [ 0, %152 ]
  %167 = phi float* [ %164, %160 ], [ null, %152 ]
  %168 = getelementptr inbounds float, float* %167, i64 %143
  %169 = getelementptr inbounds float, float* %167, i64 %166
  %170 = getelementptr inbounds float, float* %168, i64 %1
  %171 = bitcast float* %2 to i32*
  %172 = shl nsw i64 %1, 2
  %173 = add i64 %172, -4
  %174 = lshr exact i64 %173, 2
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i64 %175, 8
  br i1 %176, label %239, label %177

177:                                              ; preds = %165
  %178 = bitcast float* %168 to i8*
  %179 = shl nsw i64 %1, 2
  %180 = add i64 %179, -4
  %181 = lshr exact i64 %180, 2
  %182 = add nsw i64 %143, %181
  %183 = add i64 %182, 1
  %184 = getelementptr float, float* %167, i64 %183
  %185 = getelementptr i8, i8* %4, i64 1
  %186 = icmp ugt i8* %185, %178
  %187 = icmp ugt float* %184, %2
  %188 = and i1 %186, %187
  br i1 %188, label %239, label %189

189:                                              ; preds = %177
  %190 = and i64 %175, 9223372036854775800
  %191 = getelementptr float, float* %168, i64 %190
  %192 = add nsw i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 1
  %196 = icmp eq i64 %192, 0
  br i1 %196, label %224, label %197

197:                                              ; preds = %189
  %198 = sub nuw nsw i64 %194, %195
  %199 = load i32, i32* %171, align 4, !alias.scope !2056
  %200 = insertelement <4 x i32> undef, i32 %199, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  %202 = insertelement <4 x i32> undef, i32 %199, i32 0
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> zeroinitializer
  %204 = load i32, i32* %171, align 4, !alias.scope !2056
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> zeroinitializer
  %207 = insertelement <4 x i32> undef, i32 %204, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %209

209:                                              ; preds = %209, %197
  %210 = phi i64 [ 0, %197 ], [ %221, %209 ]
  %211 = phi i64 [ %198, %197 ], [ %222, %209 ]
  %212 = getelementptr float, float* %168, i64 %210
  %213 = bitcast float* %212 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %213, align 4, !alias.scope !2059, !noalias !2056
  %214 = getelementptr float, float* %212, i64 4
  %215 = bitcast float* %214 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %215, align 4, !alias.scope !2059, !noalias !2056
  %216 = or i64 %210, 8
  %217 = getelementptr float, float* %168, i64 %216
  %218 = bitcast float* %217 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %218, align 4, !alias.scope !2059, !noalias !2056
  %219 = getelementptr float, float* %217, i64 4
  %220 = bitcast float* %219 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %220, align 4, !alias.scope !2059, !noalias !2056
  %221 = add i64 %210, 16
  %222 = add i64 %211, -2
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %209, !llvm.loop !2061

224:                                              ; preds = %209, %189
  %225 = phi i64 [ 0, %189 ], [ %221, %209 ]
  %226 = icmp eq i64 %195, 0
  br i1 %226, label %237, label %227

227:                                              ; preds = %224
  %228 = getelementptr float, float* %168, i64 %225
  %229 = load i32, i32* %171, align 4, !alias.scope !2056
  %230 = insertelement <4 x i32> undef, i32 %229, i32 0
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x i32> undef, i32 %229, i32 0
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> zeroinitializer
  %234 = bitcast float* %228 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %234, align 4, !alias.scope !2059, !noalias !2056
  %235 = getelementptr float, float* %228, i64 4
  %236 = bitcast float* %235 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4, !alias.scope !2059, !noalias !2056
  br label %237

237:                                              ; preds = %224, %227
  %238 = icmp eq i64 %175, %190
  br i1 %238, label %289, label %239

239:                                              ; preds = %237, %177, %165
  %240 = phi float* [ %168, %177 ], [ %168, %165 ], [ %191, %237 ]
  %241 = ptrtoint float* %240 to i64
  %242 = add i64 %143, %1
  %243 = add i64 %242, -1
  %244 = getelementptr float, float* %167, i64 %243
  %245 = ptrtoint float* %244 to i64
  %246 = sub i64 %245, %241
  %247 = lshr i64 %246, 2
  %248 = add nuw nsw i64 %247, 1
  %249 = and i64 %248, 7
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %259, label %251

251:                                              ; preds = %239, %251
  %252 = phi float* [ %256, %251 ], [ %240, %239 ]
  %253 = phi i64 [ %257, %251 ], [ %249, %239 ]
  %254 = load i32, i32* %171, align 4
  %255 = bitcast float* %252 to i32*
  store i32 %254, i32* %255, align 4
  %256 = getelementptr inbounds float, float* %252, i64 1
  %257 = add i64 %253, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %251, !llvm.loop !2062

259:                                              ; preds = %251, %239
  %260 = phi float* [ %240, %239 ], [ %256, %251 ]
  %261 = icmp ult i64 %246, 28
  br i1 %261, label %289, label %262

262:                                              ; preds = %259, %262
  %263 = phi float* [ %287, %262 ], [ %260, %259 ]
  %264 = load i32, i32* %171, align 4
  %265 = bitcast float* %263 to i32*
  store i32 %264, i32* %265, align 4
  %266 = getelementptr inbounds float, float* %263, i64 1
  %267 = load i32, i32* %171, align 4
  %268 = bitcast float* %266 to i32*
  store i32 %267, i32* %268, align 4
  %269 = getelementptr inbounds float, float* %263, i64 2
  %270 = load i32, i32* %171, align 4
  %271 = bitcast float* %269 to i32*
  store i32 %270, i32* %271, align 4
  %272 = getelementptr inbounds float, float* %263, i64 3
  %273 = load i32, i32* %171, align 4
  %274 = bitcast float* %272 to i32*
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds float, float* %263, i64 4
  %276 = load i32, i32* %171, align 4
  %277 = bitcast float* %275 to i32*
  store i32 %276, i32* %277, align 4
  %278 = getelementptr inbounds float, float* %263, i64 5
  %279 = load i32, i32* %171, align 4
  %280 = bitcast float* %278 to i32*
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds float, float* %263, i64 6
  %282 = load i32, i32* %171, align 4
  %283 = bitcast float* %281 to i32*
  store i32 %282, i32* %283, align 4
  %284 = getelementptr inbounds float, float* %263, i64 7
  %285 = load i32, i32* %171, align 4
  %286 = bitcast float* %284 to i32*
  store i32 %285, i32* %286, align 4
  %287 = getelementptr inbounds float, float* %263, i64 8
  %288 = icmp eq float* %170, %287
  br i1 %288, label %289, label %262, !llvm.loop !2063

289:                                              ; preds = %259, %262, %237
  %290 = ptrtoint float* %169 to i64
  %291 = ptrtoint float* %170 to i64
  %292 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 0
  %293 = load float*, float** %292, align 8
  %294 = load i64, i64* %9, align 8
  %295 = ptrtoint float* %293 to i64
  %296 = sub i64 %294, %295
  %297 = ashr exact i64 %296, 2
  %298 = sub nsw i64 0, %297
  %299 = getelementptr inbounds float, float* %168, i64 %298
  %300 = ptrtoint float* %299 to i64
  %301 = icmp sgt i64 %296, 0
  br i1 %301, label %302, label %306

302:                                              ; preds = %289
  %303 = bitcast float* %299 to i8*
  %304 = bitcast float* %293 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %303, i8* align 4 %304, i64 %296, i1 false) #12
  %305 = load float*, float** %292, align 8
  br label %306

306:                                              ; preds = %289, %302
  %307 = phi float* [ %293, %289 ], [ %305, %302 ]
  store i64 %300, i64* %140, align 8
  store i64 %291, i64* %9, align 8
  store i64 %290, i64* %6, align 8
  %308 = icmp eq float* %307, null
  br i1 %308, label %311, label %309

309:                                              ; preds = %306
  %310 = bitcast float* %307 to i8*
  tail call void @_ZdlPv(i8* %310) #18
  br label %311

311:                                              ; preds = %309, %306, %137
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.262"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.262", %"class.std::__1::vector.262"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.256"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.262", %"class.std::__1::vector.262"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.256"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.256"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"class.std::__1::vector.256"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.262"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.262"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #17
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #18
  %52 = bitcast i8* %51 to %"class.std::__1::vector.256"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.256"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.256"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.256"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #12
  %64 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.256"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.256"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.256"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.256"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.262", %"class.std::__1::vector.262"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.256"*, %"class.std::__1::vector.256"** %70, align 8
  %72 = load %"class.std::__1::vector.256"*, %"class.std::__1::vector.256"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.256"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.256"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.256"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.256"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.256"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #12
  %82 = bitcast %"class.std::__1::vector.256"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.256"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast float** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast float** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast float** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast float** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.256"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = icmp eq %"class.std::__1::vector.256"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.256"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.256"*, %"class.std::__1::vector.256"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.256"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.256"*
  %106 = icmp eq %"class.std::__1::vector.256"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.256"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %109, i64 0, i32 0, i32 0
  %111 = load float*, float** %110, align 8
  %112 = icmp eq float* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint float* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast float** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast float* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #18
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.256"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #18
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.256"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.256"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.256"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #17
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #18
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.256", %"class.std::__1::vector.256"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #18
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.220"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Plane"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 5
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Plane"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 32
  %25 = and i64 %24, -32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint %"class.jxl::Plane"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %182

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.220"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 5
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 576460752303423487
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.220"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 5
  %41 = icmp ult i64 %40, 288230376151711743
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 4
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 576460752303423487
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #17
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 576460752303423487, %38 ]
  %52 = shl i64 %51, 5
  %53 = tail call i8* @_Znwm(i64 %52) #18
  %54 = bitcast i8* %53 to %"class.jxl::Plane"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.jxl::Plane"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 %33
  %59 = ptrtoint %"class.jxl::Plane"* %58 to i64
  %60 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %57, i64 %56
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %58, i64 %1
  %62 = shl nsw i64 %1, 5
  %63 = add i64 %62, -32
  %64 = lshr exact i64 %63, 5
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.jxl::Plane"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 32, i1 false) #12
  %73 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 1
  %74 = ptrtoint %"class.jxl::Plane"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !2064

77:                                               ; preds = %68
  %78 = ptrtoint %"class.jxl::Plane"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.jxl::Plane"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 224
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.jxl::Plane"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 32, i1 false) #12
  %87 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 1
  %88 = bitcast %"class.jxl::Plane"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 32, i1 false) #12
  %89 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 2
  %90 = bitcast %"class.jxl::Plane"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 32, i1 false) #12
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 3
  %92 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 32, i1 false) #12
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 4
  %94 = bitcast %"class.jxl::Plane"* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 32, i1 false) #12
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 5
  %96 = bitcast %"class.jxl::Plane"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 32, i1 false) #12
  %97 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 6
  %98 = bitcast %"class.jxl::Plane"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 32, i1 false) #12
  %99 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 7
  %100 = bitcast %"class.jxl::Plane"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 32, i1 false) #12
  %101 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %84, i64 8
  %102 = ptrtoint %"class.jxl::Plane"* %101 to i64
  %103 = icmp eq %"class.jxl::Plane"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.jxl::Plane"* %60 to i64
  %106 = ptrtoint %"class.jxl::Plane"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %107, align 8
  %109 = ptrtoint %"class.jxl::Plane"* %108 to i64
  %110 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %6, align 8
  %111 = icmp eq %"class.jxl::Plane"* %110, %108
  br i1 %111, label %163, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %110, i64 -1, i32 0, i32 0
  %114 = ptrtoint i32* %113 to i64
  %115 = sub i64 %114, %109
  %116 = and i64 %115, 32
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %58, i64 -1
  %120 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %110, i64 -1
  %121 = bitcast %"class.jxl::Plane"* %119 to i8*
  %122 = bitcast %"class.jxl::Plane"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false) #12
  %123 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %58, i64 -1, i32 0, i32 5
  %124 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %110, i64 -1, i32 0, i32 5
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i8* null, i8** %125, align 8
  %128 = bitcast %"class.std::__1::unique_ptr"* %123 to i64*
  store i64 %127, i64* %128, align 8
  br label %129

129:                                              ; preds = %118, %112
  %130 = phi %"class.jxl::Plane"* [ undef, %112 ], [ %119, %118 ]
  %131 = phi %"class.jxl::Plane"* [ %58, %112 ], [ %119, %118 ]
  %132 = phi %"class.jxl::Plane"* [ %110, %112 ], [ %120, %118 ]
  %133 = icmp ult i64 %115, 32
  br i1 %133, label %158, label %134

134:                                              ; preds = %129, %134
  %135 = phi %"class.jxl::Plane"* [ %147, %134 ], [ %131, %129 ]
  %136 = phi %"class.jxl::Plane"* [ %148, %134 ], [ %132, %129 ]
  %137 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %136, i64 -1
  %139 = bitcast %"class.jxl::Plane"* %137 to i8*
  %140 = bitcast %"class.jxl::Plane"* %138 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 24, i1 false) #12
  %141 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -1, i32 0, i32 5
  %142 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %136, i64 -1, i32 0, i32 5
  %143 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %142, i64 0, i32 0, i32 0, i32 0
  %144 = bitcast %"class.std::__1::unique_ptr"* %142 to i64*
  %145 = load i64, i64* %144, align 8
  store i8* null, i8** %143, align 8
  %146 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -2
  %148 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %136, i64 -2
  %149 = bitcast %"class.jxl::Plane"* %147 to i8*
  %150 = bitcast %"class.jxl::Plane"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 24, i1 false) #12
  %151 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %135, i64 -2, i32 0, i32 5
  %152 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %136, i64 -2, i32 0, i32 5
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = bitcast %"class.std::__1::unique_ptr"* %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i8* null, i8** %153, align 8
  %156 = bitcast %"class.std::__1::unique_ptr"* %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = icmp eq %"class.jxl::Plane"* %148, %108
  br i1 %157, label %158, label %134

158:                                              ; preds = %134, %129
  %159 = phi %"class.jxl::Plane"* [ %130, %129 ], [ %147, %134 ]
  %160 = ptrtoint %"class.jxl::Plane"* %159 to i64
  %161 = load i64, i64* %30, align 8
  %162 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %6, align 8
  br label %163

163:                                              ; preds = %104, %158
  %164 = phi %"class.jxl::Plane"* [ %162, %158 ], [ %108, %104 ]
  %165 = phi i64 [ %160, %158 ], [ %59, %104 ]
  %166 = phi i64 [ %161, %158 ], [ %109, %104 ]
  store i64 %165, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %167 = inttoptr i64 %166 to %"class.jxl::Plane"*
  %168 = icmp eq %"class.jxl::Plane"* %164, %167
  br i1 %168, label %178, label %169

169:                                              ; preds = %163, %176
  %170 = phi %"class.jxl::Plane"* [ %171, %176 ], [ %164, %163 ]
  %171 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %170, i64 -1
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %170, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  store i8* null, i8** %172, align 8
  %174 = icmp eq i8* %173, null
  br i1 %174, label %176, label %175

175:                                              ; preds = %169
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %173) #12
  br label %176

176:                                              ; preds = %175, %169
  %177 = icmp eq %"class.jxl::Plane"* %171, %167
  br i1 %177, label %178, label %169

178:                                              ; preds = %176, %163
  %179 = icmp eq i64 %166, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %178
  %181 = inttoptr i64 %166 to i8*
  tail call void @_ZdlPv(i8* %181) #18
  br label %182

182:                                              ; preds = %180, %178, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #8 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPS0_bbE4$_11E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #8 align 2 {
  %4 = alloca %"class.jxl::ImageBlender::RectBlender", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.325**
  %7 = load %class.anon.325*, %class.anon.325** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.325, %class.anon.325* %7, i64 0, i32 0
  %10 = load %"class.std::__1::vector.311"*, %"class.std::__1::vector.311"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.311", %"class.std::__1::vector.311"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.jxl::Rect"*, %"class.jxl::Rect"** %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %12, i64 %8
  %14 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %14) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 520, i1 false) #12
  %15 = getelementptr inbounds %class.anon.325, %class.anon.325* %7, i64 0, i32 1
  %16 = load %"class.jxl::ImageBlender"*, %"class.jxl::ImageBlender"** %15, align 8
  %17 = getelementptr inbounds %class.anon.325, %class.anon.325* %7, i64 0, i32 2
  %18 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %17, align 8
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %18, i64 0, i32 10
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %18, i64 0, i32 12
  call void @_ZNK3jxl12ImageBlender11PrepareRectERKNS_4RectERKNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENS8_9allocatorISB_EEEES3_(%"class.jxl::ImageBlender::RectBlender"* nonnull sret %4, %"class.jxl::ImageBlender"* %16, %"class.jxl::Rect"* dereferenceable(32) %13, %"class.jxl::Image3"* dereferenceable(96) %19, %"class.std::__1::vector.220"* dereferenceable(24) %20, %"class.jxl::Rect"* dereferenceable(32) %13) #12
  %21 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %12, i64 %8, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %36, label %27

24:                                               ; preds = %27
  %25 = load i64, i64* %21, align 8
  %26 = icmp ult i64 %31, %25
  br i1 %26, label %27, label %36

27:                                               ; preds = %3, %24
  %28 = phi i64 [ %31, %24 ], [ 0, %3 ]
  %29 = call i32 @_ZN3jxl12ImageBlender11RectBlender10DoBlendingEm(%"class.jxl::ImageBlender::RectBlender"* nonnull %4, i64 %28) #12
  %30 = icmp eq i32 %29, 0
  %31 = add nuw i64 %28, 1
  br i1 %30, label %24, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %class.anon.325, %class.anon.325* %7, i64 0, i32 3
  %34 = load %"struct.std::__1::atomic.319"*, %"struct.std::__1::atomic.319"** %33, align 8
  %35 = getelementptr inbounds %"struct.std::__1::atomic.319", %"struct.std::__1::atomic.319"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 0, i8* %35 seq_cst, align 1
  br label %36

36:                                               ; preds = %24, %32, %3
  %37 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 7, i32 0, i32 0
  %38 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %37, align 8
  %39 = icmp eq %"struct.jxl::PatchBlending"* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %36
  %41 = ptrtoint %"struct.jxl::PatchBlending"* %38 to i64
  %42 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 7, i32 0, i32 1
  %43 = bitcast %"struct.jxl::PatchBlending"** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %38, i64 0, i32 0
  call void @_ZdlPv(i8* %44) #18
  br label %45

45:                                               ; preds = %40, %36
  %46 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 6, i32 0, i32 0
  %47 = load float**, float*** %46, align 8
  %48 = icmp eq float** %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %45
  %50 = ptrtoint float** %47 to i64
  %51 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 6, i32 0, i32 1
  %52 = bitcast float*** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = bitcast float** %47 to i8*
  call void @_ZdlPv(i8* %53) #18
  br label %54

54:                                               ; preds = %49, %45
  %55 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 5, i32 0, i32 0
  %56 = load float**, float*** %55, align 8
  %57 = icmp eq float** %56, null
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = ptrtoint float** %56 to i64
  %60 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 5, i32 0, i32 1
  %61 = bitcast float*** %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = bitcast float** %56 to i8*
  call void @_ZdlPv(i8* %62) #18
  br label %63

63:                                               ; preds = %54, %58
  %64 = getelementptr inbounds %"class.jxl::ImageBlender::RectBlender", %"class.jxl::ImageBlender::RectBlender"* %4, i64 0, i32 3
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %64) #12
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %14) #12
  ret void
}

declare void @_ZNK3jxl12ImageBlender11PrepareRectERKNS_4RectERKNS_6Image3IfEERKNSt3__16vectorINS_5PlaneIfEENS8_9allocatorISB_EEEES3_(%"class.jxl::ImageBlender::RectBlender"* sret, %"class.jxl::ImageBlender"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.std::__1::vector.220"* dereferenceable(24), %"class.jxl::Rect"* dereferenceable(32)) local_unnamed_addr #2

declare i32 @_ZN3jxl12ImageBlender11RectBlender10DoBlendingEm(%"class.jxl::ImageBlender::RectBlender"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #11

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!5 = distinct !{!5, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!8 = distinct !{!8, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!11 = distinct !{!11, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!12 = !{i32 -2141229619}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!15 = distinct !{!15, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!16 = distinct !{!16, !17, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!17 = distinct !{!17, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!18 = !{!19, !21, !22}
!19 = distinct !{!19, !20, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!21 = distinct !{!21, !20, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!22 = distinct !{!22, !20, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!25 = distinct !{!25, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!26 = distinct !{!26, !27, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!27 = distinct !{!27, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!28 = !{!29, !31}
!29 = distinct !{!29, !30, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!30 = distinct !{!30, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!31 = distinct !{!31, !32, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!32 = distinct !{!32, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!33 = !{!34, !36}
!34 = distinct !{!34, !35, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!35 = distinct !{!35, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!36 = distinct !{!36, !37, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!37 = distinct !{!37, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!38 = !{!39, !41}
!39 = distinct !{!39, !40, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!40 = distinct !{!40, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!41 = distinct !{!41, !42, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!42 = distinct !{!42, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!43 = !{!44, !46}
!44 = distinct !{!44, !45, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!45 = distinct !{!45, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!46 = distinct !{!46, !47, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!47 = distinct !{!47, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!48 = !{!49, !51}
!49 = distinct !{!49, !50, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!50 = distinct !{!50, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!51 = distinct !{!51, !52, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!52 = distinct !{!52, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!53 = !{!54, !56}
!54 = distinct !{!54, !55, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!55 = distinct !{!55, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!56 = distinct !{!56, !57, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!57 = distinct !{!57, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!58 = !{!59, !61}
!59 = distinct !{!59, !60, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!60 = distinct !{!60, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!61 = distinct !{!61, !62, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!62 = distinct !{!62, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!63 = !{!64, !66}
!64 = distinct !{!64, !65, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!65 = distinct !{!65, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!66 = distinct !{!66, !67, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!67 = distinct !{!67, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!70 = distinct !{!70, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!73 = distinct !{!73, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!76 = distinct !{!76, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!79 = distinct !{!79, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!82 = distinct !{!82, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!85 = distinct !{!85, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!86 = !{i32 -2141229587}
!87 = !{!88, !90}
!88 = distinct !{!88, !89, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!89 = distinct !{!89, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!90 = distinct !{!90, !91, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!91 = distinct !{!91, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!92 = !{!93, !95, !96}
!93 = distinct !{!93, !94, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!94 = distinct !{!94, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!95 = distinct !{!95, !94, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!96 = distinct !{!96, !94, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!97 = !{!98, !100}
!98 = distinct !{!98, !99, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!99 = distinct !{!99, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!100 = distinct !{!100, !101, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!101 = distinct !{!101, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!102 = !{!103, !105}
!103 = distinct !{!103, !104, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!104 = distinct !{!104, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!106 = distinct !{!106, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!107 = !{!108, !110}
!108 = distinct !{!108, !109, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!109 = distinct !{!109, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!110 = distinct !{!110, !111, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!111 = distinct !{!111, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!112 = !{!113, !115}
!113 = distinct !{!113, !114, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!114 = distinct !{!114, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!115 = distinct !{!115, !116, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!116 = distinct !{!116, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!117 = !{!118, !120}
!118 = distinct !{!118, !119, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!119 = distinct !{!119, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!120 = distinct !{!120, !121, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!121 = distinct !{!121, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!122 = !{!123, !125}
!123 = distinct !{!123, !124, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!124 = distinct !{!124, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!125 = distinct !{!125, !126, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!126 = distinct !{!126, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!127 = !{!128, !130}
!128 = distinct !{!128, !129, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!129 = distinct !{!129, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!130 = distinct !{!130, !131, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!131 = distinct !{!131, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!132 = !{!133, !135}
!133 = distinct !{!133, !134, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!134 = distinct !{!134, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!135 = distinct !{!135, !136, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!136 = distinct !{!136, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!137 = !{!138, !140}
!138 = distinct !{!138, !139, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!140 = distinct !{!140, !141, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!141 = distinct !{!141, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!144 = distinct !{!144, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!147 = distinct !{!147, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!150 = distinct !{!150, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!151 = !{!152}
!152 = distinct !{!152, !153, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!153 = distinct !{!153, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!154 = !{!155}
!155 = distinct !{!155, !156, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!156 = distinct !{!156, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!159 = distinct !{!159, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!160 = !{i32 -2141229553}
!161 = !{!162, !164}
!162 = distinct !{!162, !163, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!163 = distinct !{!163, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!164 = distinct !{!164, !165, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!165 = distinct !{!165, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!166 = !{!167, !169, !170}
!167 = distinct !{!167, !168, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!168 = distinct !{!168, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!169 = distinct !{!169, !168, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!170 = distinct !{!170, !168, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!171 = !{!172, !174}
!172 = distinct !{!172, !173, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!173 = distinct !{!173, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!174 = distinct !{!174, !175, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!175 = distinct !{!175, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!176 = !{!177, !179}
!177 = distinct !{!177, !178, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!178 = distinct !{!178, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!179 = distinct !{!179, !180, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!180 = distinct !{!180, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!181 = !{!182, !184}
!182 = distinct !{!182, !183, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!183 = distinct !{!183, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!184 = distinct !{!184, !185, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!185 = distinct !{!185, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!186 = !{!187, !189}
!187 = distinct !{!187, !188, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!188 = distinct !{!188, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!189 = distinct !{!189, !190, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!190 = distinct !{!190, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!191 = !{!192, !194}
!192 = distinct !{!192, !193, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!193 = distinct !{!193, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!194 = distinct !{!194, !195, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!195 = distinct !{!195, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!196 = !{!197, !199}
!197 = distinct !{!197, !198, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!198 = distinct !{!198, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!199 = distinct !{!199, !200, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!200 = distinct !{!200, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!201 = !{!202, !204}
!202 = distinct !{!202, !203, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!203 = distinct !{!203, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!204 = distinct !{!204, !205, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!205 = distinct !{!205, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!206 = !{!207, !209}
!207 = distinct !{!207, !208, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!208 = distinct !{!208, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!209 = distinct !{!209, !210, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!210 = distinct !{!210, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!211 = !{!212, !214}
!212 = distinct !{!212, !213, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!213 = distinct !{!213, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!214 = distinct !{!214, !215, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!215 = distinct !{!215, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!218 = distinct !{!218, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!219 = !{!220}
!220 = distinct !{!220, !221, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!221 = distinct !{!221, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!222 = !{!223}
!223 = distinct !{!223, !224, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!224 = distinct !{!224, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!227 = distinct !{!227, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!228 = !{!229}
!229 = distinct !{!229, !230, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!230 = distinct !{!230, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!231 = !{!232}
!232 = distinct !{!232, !233, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!233 = distinct !{!233, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!234 = !{i32 -2141229521}
!235 = !{!236, !238}
!236 = distinct !{!236, !237, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!237 = distinct !{!237, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!238 = distinct !{!238, !239, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!239 = distinct !{!239, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!240 = !{!241, !243, !244}
!241 = distinct !{!241, !242, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!242 = distinct !{!242, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!243 = distinct !{!243, !242, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!244 = distinct !{!244, !242, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!245 = !{!246, !248}
!246 = distinct !{!246, !247, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!247 = distinct !{!247, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!248 = distinct !{!248, !249, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!249 = distinct !{!249, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!250 = !{!251, !253}
!251 = distinct !{!251, !252, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!252 = distinct !{!252, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!253 = distinct !{!253, !254, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!254 = distinct !{!254, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!255 = !{!256, !258}
!256 = distinct !{!256, !257, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!257 = distinct !{!257, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!258 = distinct !{!258, !259, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!259 = distinct !{!259, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!260 = !{!261, !263}
!261 = distinct !{!261, !262, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!262 = distinct !{!262, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!263 = distinct !{!263, !264, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!264 = distinct !{!264, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!265 = !{!266, !268}
!266 = distinct !{!266, !267, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!267 = distinct !{!267, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!268 = distinct !{!268, !269, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!269 = distinct !{!269, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!270 = !{!271, !273}
!271 = distinct !{!271, !272, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!272 = distinct !{!272, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!273 = distinct !{!273, !274, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!274 = distinct !{!274, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!275 = !{!276, !278}
!276 = distinct !{!276, !277, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!277 = distinct !{!277, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!278 = distinct !{!278, !279, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!279 = distinct !{!279, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!280 = !{!281, !283}
!281 = distinct !{!281, !282, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!282 = distinct !{!282, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!283 = distinct !{!283, !284, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!284 = distinct !{!284, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!285 = !{!286, !288}
!286 = distinct !{!286, !287, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!287 = distinct !{!287, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!288 = distinct !{!288, !289, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!289 = distinct !{!289, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!290 = !{!291}
!291 = distinct !{!291, !292, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!292 = distinct !{!292, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!295 = distinct !{!295, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!298 = distinct !{!298, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!301 = distinct !{!301, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!304 = distinct !{!304, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!307 = distinct !{!307, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!308 = !{i32 -2141229489}
!309 = !{!310, !312}
!310 = distinct !{!310, !311, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!311 = distinct !{!311, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!312 = distinct !{!312, !313, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!313 = distinct !{!313, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!314 = !{!315, !317, !318}
!315 = distinct !{!315, !316, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!316 = distinct !{!316, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!317 = distinct !{!317, !316, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!318 = distinct !{!318, !316, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!319 = !{!320, !322}
!320 = distinct !{!320, !321, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!321 = distinct !{!321, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!322 = distinct !{!322, !323, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!323 = distinct !{!323, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!324 = !{!325, !327}
!325 = distinct !{!325, !326, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!326 = distinct !{!326, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!327 = distinct !{!327, !328, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!328 = distinct !{!328, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!329 = !{!330, !332}
!330 = distinct !{!330, !331, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!331 = distinct !{!331, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!332 = distinct !{!332, !333, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!333 = distinct !{!333, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!334 = !{!335, !337}
!335 = distinct !{!335, !336, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!336 = distinct !{!336, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!337 = distinct !{!337, !338, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!338 = distinct !{!338, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!339 = !{!340, !342}
!340 = distinct !{!340, !341, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!341 = distinct !{!341, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!342 = distinct !{!342, !343, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!343 = distinct !{!343, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!344 = !{!345, !347}
!345 = distinct !{!345, !346, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!346 = distinct !{!346, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!347 = distinct !{!347, !348, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!348 = distinct !{!348, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!349 = !{!350, !352}
!350 = distinct !{!350, !351, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!351 = distinct !{!351, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!352 = distinct !{!352, !353, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!353 = distinct !{!353, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!354 = !{!355, !357}
!355 = distinct !{!355, !356, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!356 = distinct !{!356, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!357 = distinct !{!357, !358, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!358 = distinct !{!358, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!359 = !{!360, !362}
!360 = distinct !{!360, !361, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!361 = distinct !{!361, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!362 = distinct !{!362, !363, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!363 = distinct !{!363, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!364 = !{!365}
!365 = distinct !{!365, !366, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!366 = distinct !{!366, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!369 = distinct !{!369, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!370 = !{!371}
!371 = distinct !{!371, !372, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!372 = distinct !{!372, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!373 = !{!374}
!374 = distinct !{!374, !375, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!375 = distinct !{!375, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!376 = !{!377}
!377 = distinct !{!377, !378, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!378 = distinct !{!378, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!379 = !{!380}
!380 = distinct !{!380, !381, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!381 = distinct !{!381, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!382 = !{i32 -2141229450}
!383 = !{!384, !386}
!384 = distinct !{!384, !385, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!385 = distinct !{!385, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!386 = distinct !{!386, !387, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!387 = distinct !{!387, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!388 = !{!389, !391, !392}
!389 = distinct !{!389, !390, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!390 = distinct !{!390, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!391 = distinct !{!391, !390, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!392 = distinct !{!392, !390, !"_ZN3jxl6N_SSE412_GLOBAL__N_18XybToRgbIN3hwy6N_SSE44SimdIfLm4EEENS4_6Vec128IfLm4EEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!393 = !{!394, !396}
!394 = distinct !{!394, !395, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!395 = distinct !{!395, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!396 = distinct !{!396, !397, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!397 = distinct !{!397, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!398 = !{!399, !401}
!399 = distinct !{!399, !400, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!400 = distinct !{!400, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!401 = distinct !{!401, !402, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!402 = distinct !{!402, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!403 = !{!404, !406}
!404 = distinct !{!404, !405, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!405 = distinct !{!405, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!406 = distinct !{!406, !407, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!407 = distinct !{!407, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!408 = !{!409, !411}
!409 = distinct !{!409, !410, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!410 = distinct !{!410, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!411 = distinct !{!411, !412, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!412 = distinct !{!412, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!413 = !{!414, !416}
!414 = distinct !{!414, !415, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!415 = distinct !{!415, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!416 = distinct !{!416, !417, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!417 = distinct !{!417, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!418 = !{!419, !421}
!419 = distinct !{!419, !420, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!420 = distinct !{!420, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!421 = distinct !{!421, !422, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!422 = distinct !{!422, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!423 = !{!424, !426}
!424 = distinct !{!424, !425, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!425 = distinct !{!425, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!426 = distinct !{!426, !427, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!427 = distinct !{!427, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!428 = !{!429, !431}
!429 = distinct !{!429, !430, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!430 = distinct !{!430, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!431 = distinct !{!431, !432, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!432 = distinct !{!432, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!433 = !{!434, !436}
!434 = distinct !{!434, !435, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf: argument 0"}
!435 = distinct !{!435, !"_ZN3hwy6N_SSE4L5LoadUENS0_4SimdIfLm4EEEPKf"}
!436 = distinct !{!436, !437, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_: argument 0"}
!437 = distinct !{!437, !"_ZN3hwy6N_SSE4L10LoadDup128IfLm4ELPv0EEENS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPKS4_"}
!438 = !{!439}
!439 = distinct !{!439, !440, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!440 = distinct !{!440, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!441 = !{!442}
!442 = distinct !{!442, !443, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!443 = distinct !{!443, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!444 = !{!445}
!445 = distinct !{!445, !446, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!446 = distinct !{!446, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!447 = !{!448}
!448 = distinct !{!448, !449, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!449 = distinct !{!449, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!450 = !{!451}
!451 = distinct !{!451, !452, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!452 = distinct !{!452, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!453 = !{!454}
!454 = distinct !{!454, !455, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!455 = distinct !{!455, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!456 = !{!457}
!457 = distinct !{!457, !458, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!458 = distinct !{!458, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!459 = !{!"branch_weights", i32 1, i32 2000}
!460 = !{!461}
!461 = distinct !{!461, !462, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!462 = distinct !{!462, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!463 = !{!464}
!464 = distinct !{!464, !465, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!465 = distinct !{!465, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!466 = !{!467}
!467 = distinct !{!467, !468, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!468 = distinct !{!468, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!469 = distinct !{!469, !470}
!470 = !{!"llvm.loop.unroll.disable"}
!471 = distinct !{!471, !472}
!472 = !{!"llvm.loop.isvectorized", i32 1}
!473 = !{!474}
!474 = distinct !{!474, !475, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!475 = distinct !{!475, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!476 = distinct !{!476, !470}
!477 = distinct !{!477, !472}
!478 = distinct !{!478, !470}
!479 = distinct !{!479, !472}
!480 = !{!481}
!481 = distinct !{!481, !482, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!482 = distinct !{!482, !"_ZN3hwy6N_SSE4L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!483 = distinct !{!483, !470}
!484 = !{!485}
!485 = distinct !{!485, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!486 = distinct !{!486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!487 = !{!488}
!488 = distinct !{!488, !486, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!489 = !{!490}
!490 = distinct !{!490, !491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!491 = distinct !{!491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!492 = !{!493}
!493 = distinct !{!493, !491, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!494 = !{!495}
!495 = distinct !{!495, !496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!496 = distinct !{!496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!497 = !{!498}
!498 = distinct !{!498, !496, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!499 = !{i32 -2138753455}
!500 = !{!501}
!501 = distinct !{!501, !502, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!502 = distinct !{!502, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!503 = !{!504, !505, !507, !508}
!504 = distinct !{!504, !502, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!505 = distinct !{!505, !506, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!506 = distinct !{!506, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!507 = distinct !{!507, !506, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!508 = distinct !{!508, !506, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!509 = !{!505, !507, !508}
!510 = !{!511}
!511 = distinct !{!511, !512, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!512 = distinct !{!512, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!513 = !{!514, !505, !507, !508}
!514 = distinct !{!514, !512, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!515 = !{!516}
!516 = distinct !{!516, !517, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!517 = distinct !{!517, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!518 = !{!519, !505, !507, !508}
!519 = distinct !{!519, !517, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!520 = !{!521}
!521 = distinct !{!521, !522, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!522 = distinct !{!522, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!523 = !{!524, !505, !507, !508}
!524 = distinct !{!524, !522, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!525 = !{!526}
!526 = distinct !{!526, !527, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!527 = distinct !{!527, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!528 = !{!529, !505, !507, !508}
!529 = distinct !{!529, !527, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!530 = !{!531}
!531 = distinct !{!531, !532, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!532 = distinct !{!532, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!533 = !{!534, !505, !507, !508}
!534 = distinct !{!534, !532, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!537 = distinct !{!537, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!538 = !{!539, !505, !507, !508}
!539 = distinct !{!539, !537, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!540 = !{!541}
!541 = distinct !{!541, !542, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!542 = distinct !{!542, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!543 = !{!544, !505, !507, !508}
!544 = distinct !{!544, !542, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!545 = !{!546}
!546 = distinct !{!546, !547, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!547 = distinct !{!547, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!548 = !{!549, !505, !507, !508}
!549 = distinct !{!549, !547, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!550 = !{!551}
!551 = distinct !{!551, !552, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!552 = distinct !{!552, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!553 = !{!554, !505, !507, !508}
!554 = distinct !{!554, !552, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!555 = !{!556}
!556 = distinct !{!556, !557, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!557 = distinct !{!557, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!558 = !{!559}
!559 = distinct !{!559, !560, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!560 = distinct !{!560, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!561 = !{!562}
!562 = distinct !{!562, !563, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!563 = distinct !{!563, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!564 = !{!565}
!565 = distinct !{!565, !566, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!566 = distinct !{!566, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!567 = !{!568}
!568 = distinct !{!568, !566, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!569 = !{!570}
!570 = distinct !{!570, !571, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!571 = distinct !{!571, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!572 = !{!573}
!573 = distinct !{!573, !571, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!574 = !{!575}
!575 = distinct !{!575, !576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!576 = distinct !{!576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!577 = !{!578}
!578 = distinct !{!578, !576, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!579 = !{i32 -2138753423}
!580 = !{!581}
!581 = distinct !{!581, !582, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!582 = distinct !{!582, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!583 = !{!584, !585, !587, !588}
!584 = distinct !{!584, !582, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!585 = distinct !{!585, !586, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!586 = distinct !{!586, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!587 = distinct !{!587, !586, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!588 = distinct !{!588, !586, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!589 = !{!585, !587, !588}
!590 = !{!591}
!591 = distinct !{!591, !592, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!592 = distinct !{!592, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!593 = !{!594, !585, !587, !588}
!594 = distinct !{!594, !592, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!595 = !{!596}
!596 = distinct !{!596, !597, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!597 = distinct !{!597, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!598 = !{!599, !585, !587, !588}
!599 = distinct !{!599, !597, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!600 = !{!601}
!601 = distinct !{!601, !602, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!602 = distinct !{!602, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!603 = !{!604, !585, !587, !588}
!604 = distinct !{!604, !602, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!605 = !{!606}
!606 = distinct !{!606, !607, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!607 = distinct !{!607, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!608 = !{!609, !585, !587, !588}
!609 = distinct !{!609, !607, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!610 = !{!611}
!611 = distinct !{!611, !612, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!612 = distinct !{!612, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!613 = !{!614, !585, !587, !588}
!614 = distinct !{!614, !612, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!615 = !{!616}
!616 = distinct !{!616, !617, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!617 = distinct !{!617, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!618 = !{!619, !585, !587, !588}
!619 = distinct !{!619, !617, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!620 = !{!621}
!621 = distinct !{!621, !622, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!622 = distinct !{!622, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!623 = !{!624, !585, !587, !588}
!624 = distinct !{!624, !622, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!625 = !{!626}
!626 = distinct !{!626, !627, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!627 = distinct !{!627, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!628 = !{!629, !585, !587, !588}
!629 = distinct !{!629, !627, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!630 = !{!631}
!631 = distinct !{!631, !632, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!632 = distinct !{!632, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!633 = !{!634, !585, !587, !588}
!634 = distinct !{!634, !632, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!635 = !{!636}
!636 = distinct !{!636, !637, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!637 = distinct !{!637, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!638 = !{!639}
!639 = distinct !{!639, !640, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!640 = distinct !{!640, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!641 = !{!642}
!642 = distinct !{!642, !643, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!643 = distinct !{!643, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!644 = !{!645}
!645 = distinct !{!645, !646, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!646 = distinct !{!646, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!647 = !{!648}
!648 = distinct !{!648, !646, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!649 = !{!650}
!650 = distinct !{!650, !651, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!651 = distinct !{!651, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!652 = !{!653}
!653 = distinct !{!653, !651, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!654 = !{!655}
!655 = distinct !{!655, !656, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!656 = distinct !{!656, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!657 = !{!658}
!658 = distinct !{!658, !656, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!659 = !{i32 -2138753389}
!660 = !{!661}
!661 = distinct !{!661, !662, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!662 = distinct !{!662, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!663 = !{!664, !665, !667, !668}
!664 = distinct !{!664, !662, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!665 = distinct !{!665, !666, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!666 = distinct !{!666, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!667 = distinct !{!667, !666, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!668 = distinct !{!668, !666, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!669 = !{!665, !667, !668}
!670 = !{!671}
!671 = distinct !{!671, !672, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!672 = distinct !{!672, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!673 = !{!674, !665, !667, !668}
!674 = distinct !{!674, !672, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!675 = !{!676}
!676 = distinct !{!676, !677, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!677 = distinct !{!677, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!678 = !{!679, !665, !667, !668}
!679 = distinct !{!679, !677, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!680 = !{!681}
!681 = distinct !{!681, !682, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!682 = distinct !{!682, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!683 = !{!684, !665, !667, !668}
!684 = distinct !{!684, !682, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!685 = !{!686}
!686 = distinct !{!686, !687, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!687 = distinct !{!687, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!688 = !{!689, !665, !667, !668}
!689 = distinct !{!689, !687, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!690 = !{!691}
!691 = distinct !{!691, !692, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!692 = distinct !{!692, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!693 = !{!694, !665, !667, !668}
!694 = distinct !{!694, !692, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!695 = !{!696}
!696 = distinct !{!696, !697, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!697 = distinct !{!697, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!698 = !{!699, !665, !667, !668}
!699 = distinct !{!699, !697, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!700 = !{!701}
!701 = distinct !{!701, !702, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!702 = distinct !{!702, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!703 = !{!704, !665, !667, !668}
!704 = distinct !{!704, !702, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!705 = !{!706}
!706 = distinct !{!706, !707, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!707 = distinct !{!707, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!708 = !{!709, !665, !667, !668}
!709 = distinct !{!709, !707, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!710 = !{!711}
!711 = distinct !{!711, !712, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!712 = distinct !{!712, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!713 = !{!714, !665, !667, !668}
!714 = distinct !{!714, !712, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!715 = !{!716}
!716 = distinct !{!716, !717, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!717 = distinct !{!717, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!718 = !{!719}
!719 = distinct !{!719, !720, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!720 = distinct !{!720, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!721 = !{!722}
!722 = distinct !{!722, !723, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!723 = distinct !{!723, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!724 = !{!725}
!725 = distinct !{!725, !726, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!726 = distinct !{!726, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!727 = !{!728}
!728 = distinct !{!728, !726, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!729 = !{!730}
!730 = distinct !{!730, !731, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!731 = distinct !{!731, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!732 = !{!733}
!733 = distinct !{!733, !731, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!734 = !{!735}
!735 = distinct !{!735, !736, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!736 = distinct !{!736, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!737 = !{!738}
!738 = distinct !{!738, !736, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!739 = !{i32 -2138753357}
!740 = !{!741}
!741 = distinct !{!741, !742, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!742 = distinct !{!742, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!743 = !{!744, !745, !747, !748}
!744 = distinct !{!744, !742, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!745 = distinct !{!745, !746, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!746 = distinct !{!746, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!747 = distinct !{!747, !746, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!748 = distinct !{!748, !746, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!749 = !{!745, !747, !748}
!750 = !{!751}
!751 = distinct !{!751, !752, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!752 = distinct !{!752, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!753 = !{!754, !745, !747, !748}
!754 = distinct !{!754, !752, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!755 = !{!756}
!756 = distinct !{!756, !757, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!757 = distinct !{!757, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!758 = !{!759, !745, !747, !748}
!759 = distinct !{!759, !757, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!760 = !{!761}
!761 = distinct !{!761, !762, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!762 = distinct !{!762, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!763 = !{!764, !745, !747, !748}
!764 = distinct !{!764, !762, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!765 = !{!766}
!766 = distinct !{!766, !767, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!767 = distinct !{!767, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!768 = !{!769, !745, !747, !748}
!769 = distinct !{!769, !767, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!770 = !{!771}
!771 = distinct !{!771, !772, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!772 = distinct !{!772, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!773 = !{!774, !745, !747, !748}
!774 = distinct !{!774, !772, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!775 = !{!776}
!776 = distinct !{!776, !777, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!777 = distinct !{!777, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!778 = !{!779, !745, !747, !748}
!779 = distinct !{!779, !777, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!780 = !{!781}
!781 = distinct !{!781, !782, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!782 = distinct !{!782, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!783 = !{!784, !745, !747, !748}
!784 = distinct !{!784, !782, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!785 = !{!786}
!786 = distinct !{!786, !787, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!787 = distinct !{!787, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!788 = !{!789, !745, !747, !748}
!789 = distinct !{!789, !787, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!790 = !{!791}
!791 = distinct !{!791, !792, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!792 = distinct !{!792, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!793 = !{!794, !745, !747, !748}
!794 = distinct !{!794, !792, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!795 = !{!796}
!796 = distinct !{!796, !797, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!797 = distinct !{!797, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!798 = !{!799}
!799 = distinct !{!799, !800, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!800 = distinct !{!800, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!801 = !{!802}
!802 = distinct !{!802, !803, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!803 = distinct !{!803, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!804 = !{!805}
!805 = distinct !{!805, !806, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!806 = distinct !{!806, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!807 = !{!808}
!808 = distinct !{!808, !806, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!809 = !{!810}
!810 = distinct !{!810, !811, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!811 = distinct !{!811, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!812 = !{!813}
!813 = distinct !{!813, !811, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!814 = !{!815}
!815 = distinct !{!815, !816, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!816 = distinct !{!816, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!817 = !{!818}
!818 = distinct !{!818, !816, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!819 = !{i32 -2138753325}
!820 = !{!821}
!821 = distinct !{!821, !822, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!822 = distinct !{!822, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!823 = !{!824, !825, !827, !828}
!824 = distinct !{!824, !822, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!825 = distinct !{!825, !826, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!826 = distinct !{!826, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!827 = distinct !{!827, !826, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!828 = distinct !{!828, !826, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!829 = !{!825, !827, !828}
!830 = !{!831}
!831 = distinct !{!831, !832, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!832 = distinct !{!832, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!833 = !{!834, !825, !827, !828}
!834 = distinct !{!834, !832, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!835 = !{!836}
!836 = distinct !{!836, !837, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!837 = distinct !{!837, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!838 = !{!839, !825, !827, !828}
!839 = distinct !{!839, !837, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!840 = !{!841}
!841 = distinct !{!841, !842, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!842 = distinct !{!842, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!843 = !{!844, !825, !827, !828}
!844 = distinct !{!844, !842, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!845 = !{!846}
!846 = distinct !{!846, !847, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!847 = distinct !{!847, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!848 = !{!849, !825, !827, !828}
!849 = distinct !{!849, !847, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!850 = !{!851}
!851 = distinct !{!851, !852, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!852 = distinct !{!852, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!853 = !{!854, !825, !827, !828}
!854 = distinct !{!854, !852, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!855 = !{!856}
!856 = distinct !{!856, !857, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!857 = distinct !{!857, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!858 = !{!859, !825, !827, !828}
!859 = distinct !{!859, !857, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!860 = !{!861}
!861 = distinct !{!861, !862, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!862 = distinct !{!862, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!863 = !{!864, !825, !827, !828}
!864 = distinct !{!864, !862, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!865 = !{!866}
!866 = distinct !{!866, !867, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!867 = distinct !{!867, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!868 = !{!869, !825, !827, !828}
!869 = distinct !{!869, !867, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!870 = !{!871}
!871 = distinct !{!871, !872, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!872 = distinct !{!872, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!873 = !{!874, !825, !827, !828}
!874 = distinct !{!874, !872, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!875 = !{!876}
!876 = distinct !{!876, !877, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!877 = distinct !{!877, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!878 = !{!879}
!879 = distinct !{!879, !880, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!880 = distinct !{!880, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!881 = !{!882}
!882 = distinct !{!882, !883, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!883 = distinct !{!883, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!884 = !{!885}
!885 = distinct !{!885, !886, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!886 = distinct !{!886, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!887 = !{!888}
!888 = distinct !{!888, !886, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!889 = !{!890}
!890 = distinct !{!890, !891, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!891 = distinct !{!891, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!892 = !{!893}
!893 = distinct !{!893, !891, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!894 = !{!895}
!895 = distinct !{!895, !896, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!896 = distinct !{!896, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!897 = !{!898}
!898 = distinct !{!898, !896, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!899 = !{i32 -2138753286}
!900 = !{!901}
!901 = distinct !{!901, !902, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!902 = distinct !{!902, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!903 = !{!904, !905, !907, !908}
!904 = distinct !{!904, !902, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!905 = distinct !{!905, !906, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!906 = distinct !{!906, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!907 = distinct !{!907, !906, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!908 = distinct !{!908, !906, !"_ZN3jxl6N_AVX212_GLOBAL__N_18XybToRgbIN3hwy6N_AVX24SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!909 = !{!905, !907, !908}
!910 = !{!911}
!911 = distinct !{!911, !912, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!912 = distinct !{!912, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!913 = !{!914, !905, !907, !908}
!914 = distinct !{!914, !912, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!915 = !{!916}
!916 = distinct !{!916, !917, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!917 = distinct !{!917, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!918 = !{!919, !905, !907, !908}
!919 = distinct !{!919, !917, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!920 = !{!921}
!921 = distinct !{!921, !922, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!922 = distinct !{!922, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!923 = !{!924, !905, !907, !908}
!924 = distinct !{!924, !922, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!925 = !{!926}
!926 = distinct !{!926, !927, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!927 = distinct !{!927, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!928 = !{!929, !905, !907, !908}
!929 = distinct !{!929, !927, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!930 = !{!931}
!931 = distinct !{!931, !932, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!932 = distinct !{!932, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!933 = !{!934, !905, !907, !908}
!934 = distinct !{!934, !932, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!935 = !{!936}
!936 = distinct !{!936, !937, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!937 = distinct !{!937, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!938 = !{!939, !905, !907, !908}
!939 = distinct !{!939, !937, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!940 = !{!941}
!941 = distinct !{!941, !942, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!942 = distinct !{!942, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!943 = !{!944, !905, !907, !908}
!944 = distinct !{!944, !942, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!945 = !{!946}
!946 = distinct !{!946, !947, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!947 = distinct !{!947, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!948 = !{!949, !905, !907, !908}
!949 = distinct !{!949, !947, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!950 = !{!951}
!951 = distinct !{!951, !952, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!952 = distinct !{!952, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!953 = !{!954, !905, !907, !908}
!954 = distinct !{!954, !952, !"_ZN3hwy6N_AVX2L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!955 = !{!956}
!956 = distinct !{!956, !957, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE: argument 0"}
!957 = distinct !{!957, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE"}
!958 = !{!959}
!959 = distinct !{!959, !960, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!960 = distinct !{!960, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!961 = !{!962}
!962 = distinct !{!962, !963, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE: argument 0"}
!963 = distinct !{!963, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE"}
!964 = !{!965}
!965 = distinct !{!965, !966, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!966 = distinct !{!966, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!967 = !{!968}
!968 = distinct !{!968, !969, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE: argument 0"}
!969 = distinct !{!969, !"_ZZN3jxl6N_AVX214UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_2clEN3hwy6N_AVX26Vec256IfEE"}
!970 = !{!971}
!971 = distinct !{!971, !972, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!972 = distinct !{!972, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!973 = !{!974}
!974 = distinct !{!974, !975, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!975 = distinct !{!975, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!976 = !{!977}
!977 = distinct !{!977, !978, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!978 = distinct !{!978, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!979 = !{!980}
!980 = distinct !{!980, !981, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!981 = distinct !{!981, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!982 = !{!983}
!983 = distinct !{!983, !984, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!984 = distinct !{!984, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm4EEEPKf"}
!985 = !{!986}
!986 = distinct !{!986, !987, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!987 = distinct !{!987, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!988 = !{!989}
!989 = distinct !{!989, !990, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!990 = distinct !{!990, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!991 = !{!992}
!992 = distinct !{!992, !993, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!993 = distinct !{!993, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!994 = distinct !{!994, !470}
!995 = distinct !{!995, !472}
!996 = !{!997}
!997 = distinct !{!997, !998, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!998 = distinct !{!998, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!999 = distinct !{!999, !470}
!1000 = distinct !{!1000, !472}
!1001 = distinct !{!1001, !470}
!1002 = distinct !{!1002, !472}
!1003 = !{!1004}
!1004 = distinct !{!1004, !1005, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1005 = distinct !{!1005, !"_ZN3hwy6N_AVX2L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1006 = distinct !{!1006, !470}
!1007 = !{!1008}
!1008 = distinct !{!1008, !1009, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1009 = distinct !{!1009, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1010 = !{!1011}
!1011 = distinct !{!1011, !1009, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1012 = !{!1013}
!1013 = distinct !{!1013, !1014, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1014 = distinct !{!1014, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1015 = !{!1016}
!1016 = distinct !{!1016, !1014, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1017 = !{!1018}
!1018 = distinct !{!1018, !1019, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1019 = distinct !{!1019, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1020 = !{!1021}
!1021 = distinct !{!1021, !1019, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1022 = !{i32 -2137956314}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1025 = distinct !{!1025, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1026 = !{!1027, !1028, !1030, !1031}
!1027 = distinct !{!1027, !1025, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1028 = distinct !{!1028, !1029, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1029 = distinct !{!1029, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1030 = distinct !{!1030, !1029, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1031 = distinct !{!1031, !1029, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1032 = !{!1028, !1030, !1031}
!1033 = !{!1034}
!1034 = distinct !{!1034, !1035, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1035 = distinct !{!1035, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1036 = !{!1037, !1028, !1030, !1031}
!1037 = distinct !{!1037, !1035, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1038 = !{!1039}
!1039 = distinct !{!1039, !1040, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1040 = distinct !{!1040, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1041 = !{!1042, !1028, !1030, !1031}
!1042 = distinct !{!1042, !1040, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1043 = !{!1044}
!1044 = distinct !{!1044, !1045, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1045 = distinct !{!1045, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1046 = !{!1047, !1028, !1030, !1031}
!1047 = distinct !{!1047, !1045, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1048 = !{!1049}
!1049 = distinct !{!1049, !1050, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1050 = distinct !{!1050, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1051 = !{!1052, !1028, !1030, !1031}
!1052 = distinct !{!1052, !1050, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1053 = !{!1054}
!1054 = distinct !{!1054, !1055, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1055 = distinct !{!1055, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1056 = !{!1057, !1028, !1030, !1031}
!1057 = distinct !{!1057, !1055, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1058 = !{!1059}
!1059 = distinct !{!1059, !1060, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1060 = distinct !{!1060, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1061 = !{!1062, !1028, !1030, !1031}
!1062 = distinct !{!1062, !1060, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1063 = !{!1064}
!1064 = distinct !{!1064, !1065, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1065 = distinct !{!1065, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1066 = !{!1067, !1028, !1030, !1031}
!1067 = distinct !{!1067, !1065, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1068 = !{!1069}
!1069 = distinct !{!1069, !1070, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1070 = distinct !{!1070, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1071 = !{!1072, !1028, !1030, !1031}
!1072 = distinct !{!1072, !1070, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1073 = !{!1074}
!1074 = distinct !{!1074, !1075, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1075 = distinct !{!1075, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1076 = !{!1077, !1028, !1030, !1031}
!1077 = distinct !{!1077, !1075, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1078 = !{!1079}
!1079 = distinct !{!1079, !1080, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1080 = distinct !{!1080, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1081 = !{!1082}
!1082 = distinct !{!1082, !1083, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1083 = distinct !{!1083, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1084 = !{!1085}
!1085 = distinct !{!1085, !1086, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1086 = distinct !{!1086, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1087 = !{!1088}
!1088 = distinct !{!1088, !1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1089 = distinct !{!1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1090 = !{!1091}
!1091 = distinct !{!1091, !1089, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1092 = !{!1093}
!1093 = distinct !{!1093, !1094, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1094 = distinct !{!1094, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1095 = !{!1096}
!1096 = distinct !{!1096, !1094, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1097 = !{!1098}
!1098 = distinct !{!1098, !1099, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1099 = distinct !{!1099, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1100 = !{!1101}
!1101 = distinct !{!1101, !1099, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1102 = !{i32 -2137956282}
!1103 = !{!1104}
!1104 = distinct !{!1104, !1105, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1105 = distinct !{!1105, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1106 = !{!1107, !1108, !1110, !1111}
!1107 = distinct !{!1107, !1105, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1108 = distinct !{!1108, !1109, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1109 = distinct !{!1109, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1110 = distinct !{!1110, !1109, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1111 = distinct !{!1111, !1109, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1112 = !{!1108, !1110, !1111}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1115, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1115 = distinct !{!1115, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1116 = !{!1117, !1108, !1110, !1111}
!1117 = distinct !{!1117, !1115, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1118 = !{!1119}
!1119 = distinct !{!1119, !1120, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1120 = distinct !{!1120, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1121 = !{!1122, !1108, !1110, !1111}
!1122 = distinct !{!1122, !1120, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1123 = !{!1124}
!1124 = distinct !{!1124, !1125, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1125 = distinct !{!1125, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1126 = !{!1127, !1108, !1110, !1111}
!1127 = distinct !{!1127, !1125, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1128 = !{!1129}
!1129 = distinct !{!1129, !1130, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1130 = distinct !{!1130, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1131 = !{!1132, !1108, !1110, !1111}
!1132 = distinct !{!1132, !1130, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1133 = !{!1134}
!1134 = distinct !{!1134, !1135, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1135 = distinct !{!1135, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1136 = !{!1137, !1108, !1110, !1111}
!1137 = distinct !{!1137, !1135, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1138 = !{!1139}
!1139 = distinct !{!1139, !1140, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1140 = distinct !{!1140, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1141 = !{!1142, !1108, !1110, !1111}
!1142 = distinct !{!1142, !1140, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1143 = !{!1144}
!1144 = distinct !{!1144, !1145, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1145 = distinct !{!1145, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1146 = !{!1147, !1108, !1110, !1111}
!1147 = distinct !{!1147, !1145, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1148 = !{!1149}
!1149 = distinct !{!1149, !1150, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1150 = distinct !{!1150, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1151 = !{!1152, !1108, !1110, !1111}
!1152 = distinct !{!1152, !1150, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1153 = !{!1154}
!1154 = distinct !{!1154, !1155, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1155 = distinct !{!1155, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1156 = !{!1157, !1108, !1110, !1111}
!1157 = distinct !{!1157, !1155, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1158 = !{!1159}
!1159 = distinct !{!1159, !1160, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1160 = distinct !{!1160, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1161 = !{!1162}
!1162 = distinct !{!1162, !1163, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1163 = distinct !{!1163, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1164 = !{!1165}
!1165 = distinct !{!1165, !1166, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1166 = distinct !{!1166, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1167 = !{!1168}
!1168 = distinct !{!1168, !1169, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1169 = distinct !{!1169, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1170 = !{!1171}
!1171 = distinct !{!1171, !1169, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1172 = !{!1173}
!1173 = distinct !{!1173, !1174, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1174 = distinct !{!1174, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1175 = !{!1176}
!1176 = distinct !{!1176, !1174, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1177 = !{!1178}
!1178 = distinct !{!1178, !1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1179 = distinct !{!1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1180 = !{!1181}
!1181 = distinct !{!1181, !1179, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1182 = !{i32 -2137956248}
!1183 = !{!1184}
!1184 = distinct !{!1184, !1185, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1185 = distinct !{!1185, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1186 = !{!1187, !1188, !1190, !1191}
!1187 = distinct !{!1187, !1185, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1188 = distinct !{!1188, !1189, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1189 = distinct !{!1189, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1190 = distinct !{!1190, !1189, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1191 = distinct !{!1191, !1189, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1192 = !{!1188, !1190, !1191}
!1193 = !{!1194}
!1194 = distinct !{!1194, !1195, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1195 = distinct !{!1195, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1196 = !{!1197, !1188, !1190, !1191}
!1197 = distinct !{!1197, !1195, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1198 = !{!1199}
!1199 = distinct !{!1199, !1200, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1200 = distinct !{!1200, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1201 = !{!1202, !1188, !1190, !1191}
!1202 = distinct !{!1202, !1200, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1203 = !{!1204}
!1204 = distinct !{!1204, !1205, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1205 = distinct !{!1205, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1206 = !{!1207, !1188, !1190, !1191}
!1207 = distinct !{!1207, !1205, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1208 = !{!1209}
!1209 = distinct !{!1209, !1210, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1210 = distinct !{!1210, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1211 = !{!1212, !1188, !1190, !1191}
!1212 = distinct !{!1212, !1210, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1213 = !{!1214}
!1214 = distinct !{!1214, !1215, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1215 = distinct !{!1215, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1216 = !{!1217, !1188, !1190, !1191}
!1217 = distinct !{!1217, !1215, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1218 = !{!1219}
!1219 = distinct !{!1219, !1220, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1220 = distinct !{!1220, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1221 = !{!1222, !1188, !1190, !1191}
!1222 = distinct !{!1222, !1220, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1223 = !{!1224}
!1224 = distinct !{!1224, !1225, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1225 = distinct !{!1225, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1226 = !{!1227, !1188, !1190, !1191}
!1227 = distinct !{!1227, !1225, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1228 = !{!1229}
!1229 = distinct !{!1229, !1230, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1230 = distinct !{!1230, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1231 = !{!1232, !1188, !1190, !1191}
!1232 = distinct !{!1232, !1230, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1233 = !{!1234}
!1234 = distinct !{!1234, !1235, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1235 = distinct !{!1235, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1236 = !{!1237, !1188, !1190, !1191}
!1237 = distinct !{!1237, !1235, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1238 = !{!1239}
!1239 = distinct !{!1239, !1240, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1240 = distinct !{!1240, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1241 = !{!1242}
!1242 = distinct !{!1242, !1243, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1243 = distinct !{!1243, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1244 = !{!1245}
!1245 = distinct !{!1245, !1246, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1246 = distinct !{!1246, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1247 = !{!1248}
!1248 = distinct !{!1248, !1249, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1249 = distinct !{!1249, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1250 = !{!1251}
!1251 = distinct !{!1251, !1249, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1252 = !{!1253}
!1253 = distinct !{!1253, !1254, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1254 = distinct !{!1254, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1255 = !{!1256}
!1256 = distinct !{!1256, !1254, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1257 = !{!1258}
!1258 = distinct !{!1258, !1259, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1259 = distinct !{!1259, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1260 = !{!1261}
!1261 = distinct !{!1261, !1259, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1262 = !{i32 -2137956216}
!1263 = !{!1264}
!1264 = distinct !{!1264, !1265, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1265 = distinct !{!1265, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1266 = !{!1267, !1268, !1270, !1271}
!1267 = distinct !{!1267, !1265, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1268 = distinct !{!1268, !1269, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1269 = distinct !{!1269, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1270 = distinct !{!1270, !1269, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1271 = distinct !{!1271, !1269, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1272 = !{!1268, !1270, !1271}
!1273 = !{!1274}
!1274 = distinct !{!1274, !1275, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1275 = distinct !{!1275, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1276 = !{!1277, !1268, !1270, !1271}
!1277 = distinct !{!1277, !1275, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1280, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1280 = distinct !{!1280, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1281 = !{!1282, !1268, !1270, !1271}
!1282 = distinct !{!1282, !1280, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1283 = !{!1284}
!1284 = distinct !{!1284, !1285, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1285 = distinct !{!1285, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1286 = !{!1287, !1268, !1270, !1271}
!1287 = distinct !{!1287, !1285, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1290, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1290 = distinct !{!1290, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1291 = !{!1292, !1268, !1270, !1271}
!1292 = distinct !{!1292, !1290, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1293 = !{!1294}
!1294 = distinct !{!1294, !1295, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1295 = distinct !{!1295, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1296 = !{!1297, !1268, !1270, !1271}
!1297 = distinct !{!1297, !1295, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1298 = !{!1299}
!1299 = distinct !{!1299, !1300, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1300 = distinct !{!1300, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1301 = !{!1302, !1268, !1270, !1271}
!1302 = distinct !{!1302, !1300, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1303 = !{!1304}
!1304 = distinct !{!1304, !1305, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1305 = distinct !{!1305, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1306 = !{!1307, !1268, !1270, !1271}
!1307 = distinct !{!1307, !1305, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1310, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1310 = distinct !{!1310, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1311 = !{!1312, !1268, !1270, !1271}
!1312 = distinct !{!1312, !1310, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1313 = !{!1314}
!1314 = distinct !{!1314, !1315, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1315 = distinct !{!1315, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1316 = !{!1317, !1268, !1270, !1271}
!1317 = distinct !{!1317, !1315, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1318 = !{!1319}
!1319 = distinct !{!1319, !1320, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1320 = distinct !{!1320, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1321 = !{!1322}
!1322 = distinct !{!1322, !1323, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1323 = distinct !{!1323, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1324 = !{!1325}
!1325 = distinct !{!1325, !1326, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1326 = distinct !{!1326, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1327 = !{!1328}
!1328 = distinct !{!1328, !1329, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1329 = distinct !{!1329, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1330 = !{!1331}
!1331 = distinct !{!1331, !1329, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1332 = !{!1333}
!1333 = distinct !{!1333, !1334, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1334 = distinct !{!1334, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1335 = !{!1336}
!1336 = distinct !{!1336, !1334, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1337 = !{!1338}
!1338 = distinct !{!1338, !1339, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1339 = distinct !{!1339, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1340 = !{!1341}
!1341 = distinct !{!1341, !1339, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1342 = !{i32 -2137956184}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1345, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1345 = distinct !{!1345, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1346 = !{!1347, !1348, !1350, !1351}
!1347 = distinct !{!1347, !1345, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1348 = distinct !{!1348, !1349, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1349 = distinct !{!1349, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1350 = distinct !{!1350, !1349, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1351 = distinct !{!1351, !1349, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1352 = !{!1348, !1350, !1351}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1355 = distinct !{!1355, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1356 = !{!1357, !1348, !1350, !1351}
!1357 = distinct !{!1357, !1355, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1358 = !{!1359}
!1359 = distinct !{!1359, !1360, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1360 = distinct !{!1360, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1361 = !{!1362, !1348, !1350, !1351}
!1362 = distinct !{!1362, !1360, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1363 = !{!1364}
!1364 = distinct !{!1364, !1365, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1365 = distinct !{!1365, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1366 = !{!1367, !1348, !1350, !1351}
!1367 = distinct !{!1367, !1365, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1370, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1370 = distinct !{!1370, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1371 = !{!1372, !1348, !1350, !1351}
!1372 = distinct !{!1372, !1370, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1373 = !{!1374}
!1374 = distinct !{!1374, !1375, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1375 = distinct !{!1375, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1376 = !{!1377, !1348, !1350, !1351}
!1377 = distinct !{!1377, !1375, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1378 = !{!1379}
!1379 = distinct !{!1379, !1380, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1380 = distinct !{!1380, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1381 = !{!1382, !1348, !1350, !1351}
!1382 = distinct !{!1382, !1380, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1383 = !{!1384}
!1384 = distinct !{!1384, !1385, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1385 = distinct !{!1385, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1386 = !{!1387, !1348, !1350, !1351}
!1387 = distinct !{!1387, !1385, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1388 = !{!1389}
!1389 = distinct !{!1389, !1390, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1390 = distinct !{!1390, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1391 = !{!1392, !1348, !1350, !1351}
!1392 = distinct !{!1392, !1390, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1393 = !{!1394}
!1394 = distinct !{!1394, !1395, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1395 = distinct !{!1395, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1396 = !{!1397, !1348, !1350, !1351}
!1397 = distinct !{!1397, !1395, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1398 = !{!1399}
!1399 = distinct !{!1399, !1400, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1400 = distinct !{!1400, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1401 = !{!1402}
!1402 = distinct !{!1402, !1403, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1403 = distinct !{!1403, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1404 = !{!1405}
!1405 = distinct !{!1405, !1406, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1406 = distinct !{!1406, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1407 = !{!1408}
!1408 = distinct !{!1408, !1409, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1409 = distinct !{!1409, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1410 = !{!1411}
!1411 = distinct !{!1411, !1409, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1412 = !{!1413}
!1413 = distinct !{!1413, !1414, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1414 = distinct !{!1414, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1415 = !{!1416}
!1416 = distinct !{!1416, !1414, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1419, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!1419 = distinct !{!1419, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf"}
!1420 = !{!1421}
!1421 = distinct !{!1421, !1419, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!1422 = !{i32 -2137956145}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1425 = distinct !{!1425, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1426 = !{!1427, !1428, !1430, !1431}
!1427 = distinct !{!1427, !1425, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1428 = distinct !{!1428, !1429, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1429 = distinct !{!1429, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1430 = distinct !{!1430, !1429, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1431 = distinct !{!1431, !1429, !"_ZN3jxl6N_AVX312_GLOBAL__N_18XybToRgbIN3hwy6N_AVX34SimdIfLm8EEENS4_6Vec256IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1432 = !{!1428, !1430, !1431}
!1433 = !{!1434}
!1434 = distinct !{!1434, !1435, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1435 = distinct !{!1435, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1436 = !{!1437, !1428, !1430, !1431}
!1437 = distinct !{!1437, !1435, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1438 = !{!1439}
!1439 = distinct !{!1439, !1440, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1440 = distinct !{!1440, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1441 = !{!1442, !1428, !1430, !1431}
!1442 = distinct !{!1442, !1440, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1443 = !{!1444}
!1444 = distinct !{!1444, !1445, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1445 = distinct !{!1445, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1446 = !{!1447, !1428, !1430, !1431}
!1447 = distinct !{!1447, !1445, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1448 = !{!1449}
!1449 = distinct !{!1449, !1450, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1450 = distinct !{!1450, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1451 = !{!1452, !1428, !1430, !1431}
!1452 = distinct !{!1452, !1450, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1453 = !{!1454}
!1454 = distinct !{!1454, !1455, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1455 = distinct !{!1455, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1456 = !{!1457, !1428, !1430, !1431}
!1457 = distinct !{!1457, !1455, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1458 = !{!1459}
!1459 = distinct !{!1459, !1460, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1460 = distinct !{!1460, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1461 = !{!1462, !1428, !1430, !1431}
!1462 = distinct !{!1462, !1460, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1463 = !{!1464}
!1464 = distinct !{!1464, !1465, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1465 = distinct !{!1465, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1466 = !{!1467, !1428, !1430, !1431}
!1467 = distinct !{!1467, !1465, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1468 = !{!1469}
!1469 = distinct !{!1469, !1470, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1470 = distinct !{!1470, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1471 = !{!1472, !1428, !1430, !1431}
!1472 = distinct !{!1472, !1470, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1473 = !{!1474}
!1474 = distinct !{!1474, !1475, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 1"}
!1475 = distinct !{!1475, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf"}
!1476 = !{!1477, !1428, !1430, !1431}
!1477 = distinct !{!1477, !1475, !"_ZN3hwy6N_AVX3L10LoadDup128ENS0_4SimdIfLm8EEEPKf: argument 0"}
!1478 = !{!1479}
!1479 = distinct !{!1479, !1480, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE: argument 0"}
!1480 = distinct !{!1480, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE"}
!1481 = !{!1482}
!1482 = distinct !{!1482, !1483, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1483 = distinct !{!1483, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1486, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE: argument 0"}
!1486 = distinct !{!1486, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1489, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1489 = distinct !{!1489, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1490 = !{!1491}
!1491 = distinct !{!1491, !1492, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE: argument 0"}
!1492 = distinct !{!1492, !"_ZZN3jxl6N_AVX314UndoXYBInPlaceEPNS_6Image3IfEERKNS_4RectERKNS_18OutputEncodingInfoEENK3$_4clEN3hwy6N_AVX36Vec256IfEE"}
!1493 = !{!1494}
!1494 = distinct !{!1494, !1495, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!1495 = distinct !{!1495, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!1496 = !{!1497}
!1497 = distinct !{!1497, !1498, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!1498 = distinct !{!1498, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf"}
!1499 = !{!1500}
!1500 = distinct !{!1500, !1501, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!1501 = distinct !{!1501, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf"}
!1502 = !{!1503}
!1503 = distinct !{!1503, !1504, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!1504 = distinct !{!1504, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf"}
!1505 = !{!1506}
!1506 = distinct !{!1506, !1507, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!1507 = distinct !{!1507, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm4EEEPKf"}
!1508 = !{!1509}
!1509 = distinct !{!1509, !1510, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1510 = distinct !{!1510, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1511 = !{!1512}
!1512 = distinct !{!1512, !1513, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1513 = distinct !{!1513, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1516, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1516 = distinct !{!1516, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1517 = distinct !{!1517, !470}
!1518 = distinct !{!1518, !472}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1521, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1521 = distinct !{!1521, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1522 = distinct !{!1522, !470}
!1523 = distinct !{!1523, !472}
!1524 = distinct !{!1524, !470}
!1525 = distinct !{!1525, !472}
!1526 = !{!1527}
!1527 = distinct !{!1527, !1528, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_: argument 0"}
!1528 = distinct !{!1528, !"_ZN3hwy6N_AVX3L5StoreIhLm4ELPv0EEEvNS0_6Vec128IT_XT0_EEENS0_4SimdIS4_XT0_EEEPS4_"}
!1529 = distinct !{!1529, !470}
!1530 = !{i32 -2137750174}
!1531 = !{!1532, !1534, !1535}
!1532 = distinct !{!1532, !1533, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1533 = distinct !{!1533, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1534 = distinct !{!1534, !1533, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1535 = distinct !{!1535, !1533, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1536 = !{!1537, !1539}
!1537 = distinct !{!1537, !1538, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1538 = distinct !{!1538, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1539 = distinct !{!1539, !1540, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1540 = distinct !{!1540, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1541 = !{!1542, !1544}
!1542 = distinct !{!1542, !1543, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1543 = distinct !{!1543, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1544 = distinct !{!1544, !1545, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1545 = distinct !{!1545, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1546 = !{!1547, !1549}
!1547 = distinct !{!1547, !1548, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1548 = distinct !{!1548, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1549 = distinct !{!1549, !1550, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1550 = distinct !{!1550, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1551 = !{!1552, !1554}
!1552 = distinct !{!1552, !1553, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1553 = distinct !{!1553, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1554 = distinct !{!1554, !1555, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1555 = distinct !{!1555, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1556 = !{!1557, !1559}
!1557 = distinct !{!1557, !1558, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1558 = distinct !{!1558, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1559 = distinct !{!1559, !1560, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1560 = distinct !{!1560, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1561 = !{!1562, !1564}
!1562 = distinct !{!1562, !1563, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1563 = distinct !{!1563, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1564 = distinct !{!1564, !1565, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1565 = distinct !{!1565, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1566 = !{!1567, !1569}
!1567 = distinct !{!1567, !1568, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1568 = distinct !{!1568, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1569 = distinct !{!1569, !1570, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1570 = distinct !{!1570, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1571 = !{!1572, !1574}
!1572 = distinct !{!1572, !1573, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1573 = distinct !{!1573, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1574 = distinct !{!1574, !1575, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1575 = distinct !{!1575, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1576 = !{!1577, !1579}
!1577 = distinct !{!1577, !1578, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1578 = distinct !{!1578, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1579 = distinct !{!1579, !1580, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1580 = distinct !{!1580, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1581 = !{!1582}
!1582 = distinct !{!1582, !1583, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1583 = distinct !{!1583, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1584 = !{!1585}
!1585 = distinct !{!1585, !1586, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1586 = distinct !{!1586, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1587 = !{!1588}
!1588 = distinct !{!1588, !1589, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1589 = distinct !{!1589, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1590 = !{i32 -2137750142}
!1591 = !{!1592, !1594, !1595}
!1592 = distinct !{!1592, !1593, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1593 = distinct !{!1593, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1594 = distinct !{!1594, !1593, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1595 = distinct !{!1595, !1593, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1596 = !{!1597, !1599}
!1597 = distinct !{!1597, !1598, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1598 = distinct !{!1598, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1599 = distinct !{!1599, !1600, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1600 = distinct !{!1600, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1601 = !{!1602, !1604}
!1602 = distinct !{!1602, !1603, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1603 = distinct !{!1603, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1604 = distinct !{!1604, !1605, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1605 = distinct !{!1605, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1606 = !{!1607, !1609}
!1607 = distinct !{!1607, !1608, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1608 = distinct !{!1608, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1609 = distinct !{!1609, !1610, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1610 = distinct !{!1610, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1611 = !{!1612, !1614}
!1612 = distinct !{!1612, !1613, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1613 = distinct !{!1613, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1614 = distinct !{!1614, !1615, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1615 = distinct !{!1615, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1616 = !{!1617, !1619}
!1617 = distinct !{!1617, !1618, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1618 = distinct !{!1618, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1619 = distinct !{!1619, !1620, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1620 = distinct !{!1620, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1621 = !{!1622, !1624}
!1622 = distinct !{!1622, !1623, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1623 = distinct !{!1623, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1624 = distinct !{!1624, !1625, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1625 = distinct !{!1625, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1626 = !{!1627, !1629}
!1627 = distinct !{!1627, !1628, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1628 = distinct !{!1628, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1629 = distinct !{!1629, !1630, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1630 = distinct !{!1630, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1631 = !{!1632, !1634}
!1632 = distinct !{!1632, !1633, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1633 = distinct !{!1633, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1634 = distinct !{!1634, !1635, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1635 = distinct !{!1635, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1636 = !{!1637, !1639}
!1637 = distinct !{!1637, !1638, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1638 = distinct !{!1638, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1639 = distinct !{!1639, !1640, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1640 = distinct !{!1640, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1641 = !{!1642}
!1642 = distinct !{!1642, !1643, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1643 = distinct !{!1643, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1644 = !{!1645}
!1645 = distinct !{!1645, !1646, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1646 = distinct !{!1646, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1647 = !{!1648}
!1648 = distinct !{!1648, !1649, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1649 = distinct !{!1649, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1650 = !{!1651}
!1651 = distinct !{!1651, !1652, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1652 = distinct !{!1652, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1653 = !{!1654}
!1654 = distinct !{!1654, !1655, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1655 = distinct !{!1655, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1656 = !{!1657}
!1657 = distinct !{!1657, !1658, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1658 = distinct !{!1658, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1659 = !{i32 -2137750108}
!1660 = !{!1661, !1663, !1664}
!1661 = distinct !{!1661, !1662, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1662 = distinct !{!1662, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1663 = distinct !{!1663, !1662, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1664 = distinct !{!1664, !1662, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1665 = !{!1666, !1668}
!1666 = distinct !{!1666, !1667, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1667 = distinct !{!1667, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1668 = distinct !{!1668, !1669, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1669 = distinct !{!1669, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1670 = !{!1671, !1673}
!1671 = distinct !{!1671, !1672, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1672 = distinct !{!1672, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1673 = distinct !{!1673, !1674, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1674 = distinct !{!1674, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1675 = !{!1676, !1678}
!1676 = distinct !{!1676, !1677, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1677 = distinct !{!1677, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1678 = distinct !{!1678, !1679, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1679 = distinct !{!1679, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1680 = !{!1681, !1683}
!1681 = distinct !{!1681, !1682, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1682 = distinct !{!1682, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1683 = distinct !{!1683, !1684, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1684 = distinct !{!1684, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1685 = !{!1686, !1688}
!1686 = distinct !{!1686, !1687, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1687 = distinct !{!1687, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1688 = distinct !{!1688, !1689, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1689 = distinct !{!1689, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1690 = !{!1691, !1693}
!1691 = distinct !{!1691, !1692, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1692 = distinct !{!1692, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1693 = distinct !{!1693, !1694, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1694 = distinct !{!1694, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1695 = !{!1696, !1698}
!1696 = distinct !{!1696, !1697, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1697 = distinct !{!1697, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1698 = distinct !{!1698, !1699, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1699 = distinct !{!1699, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1700 = !{!1701, !1703}
!1701 = distinct !{!1701, !1702, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1702 = distinct !{!1702, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1703 = distinct !{!1703, !1704, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1704 = distinct !{!1704, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1705 = !{!1706, !1708}
!1706 = distinct !{!1706, !1707, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1707 = distinct !{!1707, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1708 = distinct !{!1708, !1709, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1709 = distinct !{!1709, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1710 = !{!1711}
!1711 = distinct !{!1711, !1712, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1712 = distinct !{!1712, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1713 = !{!1714}
!1714 = distinct !{!1714, !1715, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1715 = distinct !{!1715, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1716 = !{!1717}
!1717 = distinct !{!1717, !1718, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1718 = distinct !{!1718, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1719 = !{!1720}
!1720 = distinct !{!1720, !1721, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1721 = distinct !{!1721, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1722 = !{!1723}
!1723 = distinct !{!1723, !1724, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1724 = distinct !{!1724, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1725 = !{!1726}
!1726 = distinct !{!1726, !1727, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1727 = distinct !{!1727, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1728 = !{i32 -2137750076}
!1729 = !{!1730, !1732, !1733}
!1730 = distinct !{!1730, !1731, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1731 = distinct !{!1731, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1732 = distinct !{!1732, !1731, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1733 = distinct !{!1733, !1731, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1734 = !{!1735, !1737}
!1735 = distinct !{!1735, !1736, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1736 = distinct !{!1736, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1737 = distinct !{!1737, !1738, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1738 = distinct !{!1738, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1739 = !{!1740, !1742}
!1740 = distinct !{!1740, !1741, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1741 = distinct !{!1741, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1742 = distinct !{!1742, !1743, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1743 = distinct !{!1743, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1744 = !{!1745, !1747}
!1745 = distinct !{!1745, !1746, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1746 = distinct !{!1746, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1747 = distinct !{!1747, !1748, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1748 = distinct !{!1748, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1749 = !{!1750, !1752}
!1750 = distinct !{!1750, !1751, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1751 = distinct !{!1751, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1752 = distinct !{!1752, !1753, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1753 = distinct !{!1753, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1754 = !{!1755, !1757}
!1755 = distinct !{!1755, !1756, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1756 = distinct !{!1756, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1757 = distinct !{!1757, !1758, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1758 = distinct !{!1758, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1759 = !{!1760, !1762}
!1760 = distinct !{!1760, !1761, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1761 = distinct !{!1761, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1762 = distinct !{!1762, !1763, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1763 = distinct !{!1763, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1764 = !{!1765, !1767}
!1765 = distinct !{!1765, !1766, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1766 = distinct !{!1766, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1767 = distinct !{!1767, !1768, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1768 = distinct !{!1768, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1769 = !{!1770, !1772}
!1770 = distinct !{!1770, !1771, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1771 = distinct !{!1771, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1772 = distinct !{!1772, !1773, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1773 = distinct !{!1773, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1774 = !{!1775, !1777}
!1775 = distinct !{!1775, !1776, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1776 = distinct !{!1776, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1777 = distinct !{!1777, !1778, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1778 = distinct !{!1778, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1779 = !{!1780}
!1780 = distinct !{!1780, !1781, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1781 = distinct !{!1781, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1782 = !{!1783}
!1783 = distinct !{!1783, !1784, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1784 = distinct !{!1784, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1785 = !{!1786}
!1786 = distinct !{!1786, !1787, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1787 = distinct !{!1787, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1788 = !{!1789}
!1789 = distinct !{!1789, !1790, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1790 = distinct !{!1790, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1791 = !{!1792}
!1792 = distinct !{!1792, !1793, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1793 = distinct !{!1793, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1794 = !{!1795}
!1795 = distinct !{!1795, !1796, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1796 = distinct !{!1796, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1797 = !{i32 -2137750044}
!1798 = !{!1799, !1801, !1802}
!1799 = distinct !{!1799, !1800, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1800 = distinct !{!1800, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1801 = distinct !{!1801, !1800, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1802 = distinct !{!1802, !1800, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1803 = !{!1804, !1806}
!1804 = distinct !{!1804, !1805, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1805 = distinct !{!1805, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1806 = distinct !{!1806, !1807, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1807 = distinct !{!1807, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1808 = !{!1809, !1811}
!1809 = distinct !{!1809, !1810, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1810 = distinct !{!1810, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1811 = distinct !{!1811, !1812, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1812 = distinct !{!1812, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1813 = !{!1814, !1816}
!1814 = distinct !{!1814, !1815, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1815 = distinct !{!1815, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1816 = distinct !{!1816, !1817, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1817 = distinct !{!1817, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1818 = !{!1819, !1821}
!1819 = distinct !{!1819, !1820, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1820 = distinct !{!1820, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1821 = distinct !{!1821, !1822, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1822 = distinct !{!1822, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1823 = !{!1824, !1826}
!1824 = distinct !{!1824, !1825, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1825 = distinct !{!1825, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1826 = distinct !{!1826, !1827, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1827 = distinct !{!1827, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1828 = !{!1829, !1831}
!1829 = distinct !{!1829, !1830, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1830 = distinct !{!1830, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1831 = distinct !{!1831, !1832, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1832 = distinct !{!1832, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1833 = !{!1834, !1836}
!1834 = distinct !{!1834, !1835, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1835 = distinct !{!1835, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1836 = distinct !{!1836, !1837, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1837 = distinct !{!1837, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1838 = !{!1839, !1841}
!1839 = distinct !{!1839, !1840, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1840 = distinct !{!1840, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1841 = distinct !{!1841, !1842, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1842 = distinct !{!1842, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1843 = !{!1844, !1846}
!1844 = distinct !{!1844, !1845, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1845 = distinct !{!1845, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1846 = distinct !{!1846, !1847, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1847 = distinct !{!1847, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1848 = !{!1849}
!1849 = distinct !{!1849, !1850, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1850 = distinct !{!1850, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1851 = !{!1852}
!1852 = distinct !{!1852, !1853, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1853 = distinct !{!1853, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1854 = !{!1855}
!1855 = distinct !{!1855, !1856, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1856 = distinct !{!1856, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1857 = !{!1858}
!1858 = distinct !{!1858, !1859, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1859 = distinct !{!1859, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1860 = !{!1861}
!1861 = distinct !{!1861, !1862, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1862 = distinct !{!1862, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1863 = !{!1864}
!1864 = distinct !{!1864, !1865, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1865 = distinct !{!1865, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1866 = !{i32 -2137750003}
!1867 = !{!1868, !1870, !1871}
!1868 = distinct !{!1868, !1869, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 0"}
!1869 = distinct !{!1869, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_"}
!1870 = distinct !{!1870, !1869, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 1"}
!1871 = distinct !{!1871, !1869, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_18XybToRgbIN3hwy8N_SCALAR4SimdIfLm1EEENS4_4Vec1IfEEEEvT_T0_SA_SA_RKNS_11OpsinParamsEPSA_SE_SE_: argument 2"}
!1872 = !{!1873, !1875}
!1873 = distinct !{!1873, !1874, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1874 = distinct !{!1874, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1875 = distinct !{!1875, !1876, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1876 = distinct !{!1876, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1877 = !{!1878, !1880}
!1878 = distinct !{!1878, !1879, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1879 = distinct !{!1879, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1880 = distinct !{!1880, !1881, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1881 = distinct !{!1881, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1882 = !{!1883, !1885}
!1883 = distinct !{!1883, !1884, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1884 = distinct !{!1884, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1885 = distinct !{!1885, !1886, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1886 = distinct !{!1886, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1887 = !{!1888, !1890}
!1888 = distinct !{!1888, !1889, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1889 = distinct !{!1889, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1890 = distinct !{!1890, !1891, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1891 = distinct !{!1891, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1892 = !{!1893, !1895}
!1893 = distinct !{!1893, !1894, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1894 = distinct !{!1894, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1895 = distinct !{!1895, !1896, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1896 = distinct !{!1896, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1897 = !{!1898, !1900}
!1898 = distinct !{!1898, !1899, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1899 = distinct !{!1899, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1900 = distinct !{!1900, !1901, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1901 = distinct !{!1901, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1902 = !{!1903, !1905}
!1903 = distinct !{!1903, !1904, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1904 = distinct !{!1904, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1905 = distinct !{!1905, !1906, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1906 = distinct !{!1906, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1907 = !{!1908, !1910}
!1908 = distinct !{!1908, !1909, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1909 = distinct !{!1909, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1910 = distinct !{!1910, !1911, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1911 = distinct !{!1911, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1912 = !{!1913, !1915}
!1913 = distinct !{!1913, !1914, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1914 = distinct !{!1914, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1915 = distinct !{!1915, !1916, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1916 = distinct !{!1916, !"_ZN3hwy8N_SCALAR10LoadDup128IfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1917 = !{!1918}
!1918 = distinct !{!1918, !1919, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1919 = distinct !{!1919, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1920 = !{!1921}
!1921 = distinct !{!1921, !1922, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1922 = distinct !{!1922, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1923 = !{!1924}
!1924 = distinct !{!1924, !1925, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!1925 = distinct !{!1925, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!1926 = !{!1927}
!1927 = distinct !{!1927, !1928, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1928 = distinct !{!1928, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1929 = !{!1930}
!1930 = distinct !{!1930, !1931, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1931 = distinct !{!1931, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1932 = !{!1933}
!1933 = distinct !{!1933, !1934, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1934 = distinct !{!1934, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1935 = !{!1936}
!1936 = distinct !{!1936, !1937, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!1937 = distinct !{!1937, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!1938 = !{!1939}
!1939 = distinct !{!1939, !1940, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!1940 = distinct !{!1940, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!1941 = !{i32 0, i32 33}
!1942 = distinct !{!1942, !470}
!1943 = !{!1944}
!1944 = distinct !{!1944, !1945, !"_ZN3jxl12_GLOBAL__N_114ScaleRectForECENS_4RectERKNS_11FrameHeaderEm: argument 0"}
!1945 = distinct !{!1945, !"_ZN3jxl12_GLOBAL__N_114ScaleRectForECENS_4RectERKNS_11FrameHeaderEm"}
!1946 = distinct !{!1946, !470}
!1947 = distinct !{!1947, !472}
!1948 = distinct !{!1948, !470}
!1949 = distinct !{!1949, !1950, !472}
!1950 = !{!"llvm.loop.unroll.runtime.disable"}
!1951 = !{!1952, !1954}
!1952 = distinct !{!1952, !1953, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1953 = distinct !{!1953, !"_ZNK3jxl4Rect5LinesEmm"}
!1954 = distinct !{!1954, !1955, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!1955 = distinct !{!1955, !"_ZNK3jxl4Rect4LineEm"}
!1956 = !{!1957, !1959}
!1957 = distinct !{!1957, !1958, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1958 = distinct !{!1958, !"_ZNK3jxl4Rect5LinesEmm"}
!1959 = distinct !{!1959, !1960, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!1960 = distinct !{!1960, !"_ZNK3jxl4Rect4LineEm"}
!1961 = !{!1962, !1964}
!1962 = distinct !{!1962, !1963, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1963 = distinct !{!1963, !"_ZNK3jxl4Rect5LinesEmm"}
!1964 = distinct !{!1964, !1965, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!1965 = distinct !{!1965, !"_ZNK3jxl4Rect4LineEm"}
!1966 = !{!1967, !1969}
!1967 = distinct !{!1967, !1968, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1968 = distinct !{!1968, !"_ZNK3jxl4Rect5LinesEmm"}
!1969 = distinct !{!1969, !1970, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!1970 = distinct !{!1970, !"_ZNK3jxl4Rect4LineEm"}
!1971 = !{!1972}
!1972 = distinct !{!1972, !1973, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1973 = distinct !{!1973, !"_ZNK3jxl4Rect5LinesEmm"}
!1974 = !{!1975}
!1975 = distinct !{!1975, !1976, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1976 = distinct !{!1976, !"_ZNK3jxl4Rect5LinesEmm"}
!1977 = !{!1978}
!1978 = distinct !{!1978, !1979, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1979 = distinct !{!1979, !"_ZNK3jxl4Rect5LinesEmm"}
!1980 = !{!1981}
!1981 = distinct !{!1981, !1982, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1982 = distinct !{!1982, !"_ZNK3jxl4Rect5LinesEmm"}
!1983 = !{!1984}
!1984 = distinct !{!1984, !1985, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1985 = distinct !{!1985, !"_ZNK3jxl4Rect5LinesEmm"}
!1986 = !{!1987}
!1987 = distinct !{!1987, !1988, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1988 = distinct !{!1988, !"_ZNK3jxl4Rect5LinesEmm"}
!1989 = !{!1990}
!1990 = distinct !{!1990, !1991, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1991 = distinct !{!1991, !"_ZNK3jxl4Rect5LinesEmm"}
!1992 = !{!1993}
!1993 = distinct !{!1993, !1994, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!1994 = distinct !{!1994, !"_ZNK3jxl4Rect5LinesEmm"}
!1995 = !{!1996}
!1996 = distinct !{!1996, !1997, !"_ZNK3jxl4Rect4CropIS0_EES0_RKT_: argument 0"}
!1997 = distinct !{!1997, !"_ZNK3jxl4Rect4CropIS0_EES0_RKT_"}
!1998 = !{!1999}
!1999 = distinct !{!1999, !2000, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2000 = distinct !{!2000, !"_ZNK3jxl4Rect5LinesEmm"}
!2001 = !{!2002}
!2002 = distinct !{!2002, !2003, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2003 = distinct !{!2003, !"_ZNK3jxl4Rect5LinesEmm"}
!2004 = !{!2005}
!2005 = distinct !{!2005, !2006, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2006 = distinct !{!2006, !"_ZNK3jxl4Rect5LinesEmm"}
!2007 = !{!2008}
!2008 = distinct !{!2008, !2009, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2009 = distinct !{!2009, !"_ZNK3jxl4Rect5LinesEmm"}
!2010 = !{!2011}
!2011 = distinct !{!2011, !2012, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2012 = distinct !{!2012, !"_ZNK3jxl4Rect5LinesEmm"}
!2013 = !{!2014}
!2014 = distinct !{!2014, !2015, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2015 = distinct !{!2015, !"_ZNK3jxl4Rect5LinesEmm"}
!2016 = !{!2017}
!2017 = distinct !{!2017, !2018, !"_ZNK3jxl4Rect4CropIS0_EES0_RKT_: argument 0"}
!2018 = distinct !{!2018, !"_ZNK3jxl4Rect4CropIS0_EES0_RKT_"}
!2019 = !{!2020}
!2020 = distinct !{!2020, !2021, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2021 = distinct !{!2021, !"_ZNK3jxl4Rect5LinesEmm"}
!2022 = !{!2023}
!2023 = distinct !{!2023, !2024, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!2024 = distinct !{!2024, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!2025 = !{!2026, !2023}
!2026 = distinct !{!2026, !2027, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!2027 = distinct !{!2027, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!2028 = !{!2029}
!2029 = distinct !{!2029, !2030, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!2030 = distinct !{!2030, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!2031 = !{!2032}
!2032 = distinct !{!2032, !2033, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!2033 = distinct !{!2033, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!2034 = !{!2035, !2037}
!2035 = distinct !{!2035, !2036, !"_ZNK3jxl4Rect5LinesEmm: argument 0"}
!2036 = distinct !{!2036, !"_ZNK3jxl4Rect5LinesEmm"}
!2037 = distinct !{!2037, !2038, !"_ZNK3jxl4Rect4LineEm: argument 0"}
!2038 = distinct !{!2038, !"_ZNK3jxl4Rect4LineEm"}
!2039 = distinct !{!2039, !470}
!2040 = distinct !{!2040, !470}
!2041 = distinct !{!2041, !470}
!2042 = !{!2043}
!2043 = distinct !{!2043, !2044, !"_ZN3jxl12_GLOBAL__N_114ScaleRectForECENS_4RectERKNS_11FrameHeaderEm: argument 0"}
!2044 = distinct !{!2044, !"_ZN3jxl12_GLOBAL__N_114ScaleRectForECENS_4RectERKNS_11FrameHeaderEm"}
!2045 = !{!2046}
!2046 = distinct !{!2046, !2047, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!2047 = distinct !{!2047, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!2048 = distinct !{!2048, !470}
!2049 = !{!2050}
!2050 = distinct !{!2050, !2051}
!2051 = distinct !{!2051, !"LVerDomain"}
!2052 = !{!2053}
!2053 = distinct !{!2053, !2051}
!2054 = distinct !{!2054, !472}
!2055 = distinct !{!2055, !472}
!2056 = !{!2057}
!2057 = distinct !{!2057, !2058}
!2058 = distinct !{!2058, !"LVerDomain"}
!2059 = !{!2060}
!2060 = distinct !{!2060, !2058}
!2061 = distinct !{!2061, !472}
!2062 = distinct !{!2062, !470}
!2063 = distinct !{!2063, !472}
!2064 = distinct !{!2064, !470}
