; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/txb_rdopt.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/txb_rdopt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SCAN_ORDER = type { i16*, i16* }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.txb_ctx = type { i32, i32 }

@tx_type_to_class = internal unnamed_addr constant [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\02\01\02\01\02\01", align 16
@txsize_log2_minus4 = internal unnamed_addr constant [19 x i8] c"\00\02\04\06\06\01\01\03\03\05\05\06\06\02\02\04\04\05\05", align 16
@plane_rd_mult = internal unnamed_addr constant [2 x [2 x i32]] [[2 x i32] [i32 17, i32 13], [2 x i32] [i32 16, i32 10]], align 16
@av1_txb_init_levels = external local_unnamed_addr global void (i32*, i32, i32, i8*)*, align 8
@costLUT = internal unnamed_addr constant [15 x i32] [i32 -1143, i32 53, i32 545, i32 825, i32 1031, i32 1209, i32 1393, i32 1577, i32 1763, i32 1947, i32 2132, i32 2317, i32 2501, i32 2686, i32 2871], align 16
@av1_scan_orders = external constant [19 x [16 x %struct.SCAN_ORDER]], align 16
@txsize_sqr_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\00\00\01\01\02\02\03\03\00\00\01\01\02\02", align 16
@txsize_sqr_up_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\01\02\02\03\03\04\04\02\02\03\03\04\04", align 16
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@av1_eob_offset_bits = external local_unnamed_addr constant [12 x i16], align 16
@clip_max3 = internal unnamed_addr constant [256 x i8] calign 16
@av1_nz_map_ctx_offset = external local_unnamed_addr global [19 x i8*], align 16
@nz_map_ctx_offset_1d = internal unnamed_addr constant [32 x i32] [i32 26, i32 31, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36, i32 36], align 16
@golomb_bits_cost = internal unnamed_addr constant [32 x i32] [i32 0, i32 512, i32 1536, i32 1536, i32 2560, i32 2560, i32 2560, i32 2560, i32 3584, i32 3584, i32 3584, i32 3584, i32 3584, i32 3584, i32 3584, i32 3584, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608, i32 4608], align 16
@golomb_cost_diff = internal unnamed_addr constant <{ [17 x i32], [15 x i32] }> <{ [17 x i32] [i32 0, i32 512, i32 1024, i32 0, i32 1024, i32 0, i32 0, i32 0, i32 1024, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1024], [15 x i32] zeroinitializer }>, align 16
@fimode_to_intradir = internal unnamed_addr constant [5 x i8] c"\00\01\02\06\00", align 1
@av1_ext_tx_set_lookup = internal unnamed_addr constant [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\05\04"], align 1
@ext_tx_set_index = internal unnamed_addr constant [2 x [6 x i32]] [[6 x i32] [i32 0, i32 -1, i32 2, i32 1, i32 -1, i32 -1], [6 x i32] [i32 0, i32 3, i32 -1, i32 -1, i32 2, i32 1]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_optimize_txb(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [1312 x i8], align 16
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca [3 x i32], align 4
  %18 = alloca i64, align 8
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %20 = sext i32 %2 to i64
  %21 = zext i8 %4 to i64
  %22 = zext i8 %5 to i64
  %23 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %21, i64 %22
  %24 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %23, i64 0, i32 0
  %25 = load i16*, i16** %24, align 16
  %26 = tail call i32 @av1_get_tx_scale(i8 zeroext %4) #7
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 4
  %28 = load i16*, i16** %27, align 8
  %29 = sext i32 %3 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 13
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %36 = tail call i8* @av1_get_iqmatrix(%struct.CommonQuantParams* %35, %struct.macroblockd* %19, i32 %2, i8 zeroext %4, i8 zeroext %5) #7
  %37 = shl i32 %3, 4
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 2
  %39 = load i32*, i32** %38, align 8
  %40 = sext i32 %37 to i64
  %41 = getelementptr inbounds i32, i32* %39, i64 %40
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 1
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds i32, i32* %43, i64 %40
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 3
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 %40
  %48 = icmp ne i32 %2, 0
  %49 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %21
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %21
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nuw nsw i64 %51, 1
  %56 = add nuw nsw i64 %55, %54
  %57 = lshr i64 %56, 1
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* @tx_type_to_class, i64 0, i64 %22
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %61 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %60, align 8
  %62 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %61, align 8
  switch i8 %4, label %63 [
    i8 4, label %64
    i8 12, label %64
    i8 11, label %64
    i8 18, label %73
    i8 17, label %76
  ]

63:                                               ; preds = %9
  br label %64

64:                                               ; preds = %9, %9, %9, %63
  %65 = phi i64 [ %21, %63 ], [ 3, %9 ], [ 3, %9 ], [ 3, %9 ]
  %66 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  switch i8 %4, label %68 [
    i8 4, label %69
    i8 12, label %69
    i8 11, label %69
    i8 18, label %73
    i8 17, label %76
  ]

68:                                               ; preds = %64
  br label %69

69:                                               ; preds = %64, %64, %64, %68
  %70 = phi i64 [ %21, %68 ], [ 3, %64 ], [ 3, %64 ], [ 3, %64 ]
  %71 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  switch i8 %4, label %79 [
    i8 4, label %80
    i8 12, label %80
    i8 11, label %80
    i8 18, label %73
    i8 17, label %76
  ]

73:                                               ; preds = %9, %64, %69
  %74 = phi i32 [ %72, %69 ], [ 32, %64 ], [ 32, %9 ]
  %75 = phi i32 [ %67, %69 ], [ %67, %64 ], [ 5, %9 ]
  br label %80

76:                                               ; preds = %9, %64, %69
  %77 = phi i32 [ %72, %69 ], [ 16, %64 ], [ 16, %9 ]
  %78 = phi i32 [ %67, %69 ], [ %67, %64 ], [ 4, %9 ]
  br label %80

79:                                               ; preds = %69
  br label %80

80:                                               ; preds = %69, %69, %69, %73, %76, %79
  %81 = phi i32 [ %72, %79 ], [ %77, %76 ], [ %74, %73 ], [ %72, %69 ], [ %72, %69 ], [ %72, %69 ]
  %82 = phi i32 [ %67, %79 ], [ %78, %76 ], [ %75, %73 ], [ %67, %69 ], [ %67, %69 ], [ %67, %69 ]
  %83 = phi i64 [ %21, %79 ], [ 9, %76 ], [ 10, %73 ], [ 3, %69 ], [ 3, %69 ], [ 3, %69 ]
  %84 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %62, i64 0, i32 28
  %87 = load i16, i16* %86, align 1
  %88 = trunc i16 %87 to i8
  %89 = icmp sgt i8 %88, -1
  br i1 %89, label %90, label %95

90:                                               ; preds = %80
  %91 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %62, i64 0, i32 6, i64 0
  %92 = load i8, i8* %91, align 8
  %93 = icmp sgt i8 %92, 0
  %94 = zext i1 %93 to i64
  br label %95

95:                                               ; preds = %80, %90
  %96 = phi i64 [ 1, %80 ], [ %94, %90 ]
  %97 = and i64 %57, 255
  %98 = zext i1 %48 to i64
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98
  %100 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %21
  %101 = load i8, i8* %100, align 1
  %102 = sext i8 %101 to i64
  %103 = add nsw i32 %8, 2
  %104 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %105 = load i32, i32* %104, align 8
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @plane_rd_mult, i64 0, i64 %96, i64 %98
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %110 = load i32, i32* %109, align 16
  %111 = shl i32 %110, 1
  %112 = add i32 %111, -16
  %113 = shl i32 %108, %112
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, %106
  %116 = add nsw i64 %115, 2
  %117 = zext i32 %103 to i64
  %118 = ashr i64 %116, %117
  %119 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1312, i8* nonnull %119) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %119, i8 -86, i64 1312, i1 false)
  %120 = icmp ugt i16 %31, 1
  br i1 %120, label %121, label %123

121:                                              ; preds = %95
  %122 = load void (i32*, i32, i32, i8*)*, void (i32*, i32, i32, i8*)** @av1_txb_init_levels, align 8
  call void %122(i32* %41, i32 %81, i32 %85, i8* nonnull %119) #7
  br label %123

123:                                              ; preds = %121, %95
  %124 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 0, i64 %126, i64 0
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 0, i64 %126, i64 1
  %130 = load i32, i32* %129, align 4
  %131 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %131) #7
  store i32 -1431655766, i32* %10, align 4
  %132 = call i32 @av1_get_eob_pos_token(i32 %32, i32* nonnull %10) #7
  %133 = add nsw i64 %22, -10
  %134 = icmp ult i64 %133, 6
  %135 = zext i1 %134 to i64
  %136 = add nsw i32 %132, -1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 1, i64 %102, i64 %98, i32 0, i64 %135, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %132 to i64
  %141 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = icmp sgt i16 %142, 0
  br i1 %143, label %144, label %161

144:                                              ; preds = %123
  %145 = sext i16 %142 to i32
  %146 = add nsw i32 %132, -3
  %147 = add nsw i32 %145, -1
  %148 = load i32, i32* %10, align 4
  %149 = shl i32 1, %147
  %150 = and i32 %148, %149
  %151 = icmp ne i32 %150, 0
  %152 = sext i32 %146 to i64
  %153 = zext i1 %151 to i64
  %154 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 3, i64 %152, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i16 %142, 1
  %157 = shl nsw i32 %147, 9
  %158 = select i1 %156, i32 0, i32 %157
  %159 = add i32 %158, %139
  %160 = add i32 %159, %155
  br label %161

161:                                              ; preds = %123, %144
  %162 = phi i32 [ %139, %123 ], [ %160, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #7
  %163 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #7
  store i32 %162, i32* %15, align 4
  %164 = bitcast i64* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %164) #7
  store i64 0, i64* %16, align 8
  %165 = add nsw i32 %32, -1
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i16, i16* %25, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = sext i16 %168 to i32
  %170 = sext i16 %168 to i64
  %171 = getelementptr inbounds i32, i32* %41, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = icmp slt i32 %172, 0
  %174 = sub nsw i32 0, %172
  %175 = select i1 %173, i32 %174, i32 %172
  %176 = bitcast [3 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %176) #7
  %177 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 0
  %178 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 1
  %179 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 2
  store i32 %169, i32* %177, align 4
  store i32 0, i32* %178, align 4
  store i32 0, i32* %179, align 4
  %180 = icmp sgt i32 %175, 1
  br i1 %180, label %181, label %184

181:                                              ; preds = %161
  %182 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %183 = load i32, i32* %182, align 4
  call fastcc void @update_coeff_general(i32* nonnull %15, i64* nonnull %16, i32 %165, i32 %32, i8 zeroext %4, i8 zeroext %59, i32 %82, i32 %85, i64 %118, i32 %26, i32 %183, i16* %34, i16* %25, %struct.LV_MAP_COEFF_COST* %99, i32* %47, i32* %41, i32* %44, i8* nonnull %119, i8* %36)
  br label %229

184:                                              ; preds = %161
  %185 = lshr i32 %172, 31
  %186 = icmp eq i32 %165, 0
  br i1 %186, label %195, label %187

187:                                              ; preds = %184
  %188 = shl i32 %85, %82
  %189 = sdiv i32 %188, 8
  %190 = icmp slt i32 %189, %165
  br i1 %190, label %191, label %195

191:                                              ; preds = %187
  %192 = sdiv i32 %188, 4
  %193 = icmp slt i32 %192, %165
  %194 = select i1 %193, i64 3, i64 2
  br label %195

195:                                              ; preds = %184, %187, %191
  %196 = phi i64 [ 0, %184 ], [ 1, %187 ], [ %194, %191 ]
  %197 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %198 = load i32, i32* %197, align 4
  %199 = add nsw i32 %175, -1
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %196, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %175, 0
  br i1 %203, label %214, label %204

204:                                              ; preds = %195
  %205 = icmp eq i16 %168, 0
  br i1 %205, label %206, label %211

206:                                              ; preds = %204
  %207 = sext i32 %198 to i64
  %208 = zext i32 %185 to i64
  %209 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %207, i64 %208
  %210 = load i32, i32* %209, align 4
  br label %211

211:                                              ; preds = %206, %204
  %212 = phi i32 [ %210, %206 ], [ 512, %204 ]
  %213 = add nsw i32 %212, %202
  br label %214

214:                                              ; preds = %211, %195
  %215 = phi i32 [ %213, %211 ], [ %202, %195 ]
  %216 = add nsw i32 %215, %162
  store i32 %216, i32* %15, align 4
  %217 = getelementptr inbounds i32, i32* %47, i64 %170
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds i32, i32* %44, i64 %170
  %220 = load i32, i32* %219, align 4
  %221 = sub nsw i32 %218, %220
  %222 = shl i32 %221, %26
  %223 = sext i32 %222 to i64
  %224 = mul nsw i64 %223, %223
  %225 = shl i32 %218, %26
  %226 = sext i32 %225 to i64
  %227 = mul nsw i64 %226, %226
  %228 = sub nsw i64 %224, %227
  store i64 %228, i64* %16, align 8
  br label %229

229:                                              ; preds = %214, %181
  %230 = add nsw i32 %32, -2
  switch i8 %59, label %1839 [
    i8 0, label %279
    i8 1, label %259
    i8 2, label %231
  ]

231:                                              ; preds = %229
  %232 = icmp sgt i32 %230, -1
  br i1 %232, label %233, label %1839

233:                                              ; preds = %231
  %234 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %235 = icmp eq i8* %36, null
  %236 = shl i32 1, %82
  %237 = add nsw i32 %236, 4
  %238 = sext i32 %237 to i64
  %239 = shl i32 2, %82
  %240 = add nsw i32 %239, 8
  %241 = sext i32 %240 to i64
  %242 = shl i32 3, %82
  %243 = add nsw i32 %242, 12
  %244 = sext i32 %243 to i64
  %245 = shl i32 4, %82
  %246 = add nsw i32 %245, 16
  %247 = sext i32 %246 to i64
  %248 = shl i32 %237, 1
  %249 = shl i32 %85, %82
  %250 = sdiv i32 %249, 8
  %251 = sdiv i32 %249, 4
  %252 = bitcast i32* %13 to i8*
  %253 = icmp eq i32 %8, 0
  %254 = load i64, i64* %16, align 8
  %255 = zext i16 %31 to i64
  %256 = add nsw i64 %255, -2
  %257 = sext i32 %251 to i64
  %258 = sext i32 %250 to i64
  br label %1330

259:                                              ; preds = %229
  %260 = icmp sgt i32 %230, -1
  br i1 %260, label %261, label %1839

261:                                              ; preds = %259
  %262 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %263 = icmp eq i8* %36, null
  %264 = shl i32 1, %82
  %265 = add nsw i32 %264, 4
  %266 = sext i32 %265 to i64
  %267 = shl i32 -1, %82
  %268 = xor i32 %267, -1
  %269 = shl i32 %85, %82
  %270 = sdiv i32 %269, 8
  %271 = sdiv i32 %269, 4
  %272 = bitcast i32* %12 to i8*
  %273 = icmp eq i32 %8, 0
  %274 = load i64, i64* %16, align 8
  %275 = zext i16 %31 to i64
  %276 = add nsw i64 %275, -2
  %277 = sext i32 %271 to i64
  %278 = sext i32 %270 to i64
  br label %824

279:                                              ; preds = %229
  %280 = icmp sgt i32 %230, -1
  br i1 %280, label %281, label %1839

281:                                              ; preds = %279
  %282 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %283 = icmp eq i8* %36, null
  %284 = shl i32 1, %82
  %285 = add nsw i32 %284, 4
  %286 = sext i32 %285 to i64
  %287 = add nsw i32 %284, 5
  %288 = sext i32 %287 to i64
  %289 = shl i32 2, %82
  %290 = add nsw i32 %289, 8
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %21
  %293 = shl i32 %85, %82
  %294 = sdiv i32 %293, 8
  %295 = sdiv i32 %293, 4
  %296 = bitcast i32* %11 to i8*
  %297 = icmp eq i32 %8, 0
  %298 = load i64, i64* %16, align 8
  %299 = zext i16 %31 to i64
  %300 = add nsw i64 %299, -2
  %301 = sext i32 %295 to i64
  %302 = sext i32 %294 to i64
  br label %303

303:                                              ; preds = %281, %816
  %304 = phi i64 [ %300, %281 ], [ %820, %816 ]
  %305 = phi i64 [ %298, %281 ], [ %817, %816 ]
  %306 = phi i32 [ 1, %281 ], [ %819, %816 ]
  %307 = phi i32 [ %32, %281 ], [ %818, %816 ]
  %308 = load i32, i32* %282, align 4
  %309 = getelementptr inbounds i16, i16* %25, i64 %304
  %310 = load i16, i16* %309, align 2
  %311 = sext i16 %310 to i32
  %312 = icmp ne i16 %310, 0
  %313 = zext i1 %312 to i64
  %314 = getelementptr inbounds i16, i16* %34, i64 %313
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i32
  %317 = sext i16 %310 to i64
  br i1 %283, label %325, label %318

318:                                              ; preds = %303
  %319 = getelementptr inbounds i8, i8* %36, i64 %317
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = mul nsw i32 %321, %316
  %323 = add nsw i32 %322, 16
  %324 = ashr i32 %323, 5
  br label %325

325:                                              ; preds = %318, %303
  %326 = phi i32 [ %324, %318 ], [ %316, %303 ]
  %327 = getelementptr inbounds i32, i32* %41, i64 %317
  %328 = load i32, i32* %327, align 4
  %329 = ashr i32 %311, %82
  %330 = shl nsw i32 %329, 2
  %331 = add nsw i32 %330, %311
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %332
  %334 = icmp eq i16 %310, 0
  br i1 %334, label %379, label %335

335:                                              ; preds = %325
  %336 = getelementptr inbounds i8, i8* %333, i64 %286
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i64
  %339 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i32
  %342 = getelementptr inbounds i8, i8* %333, i64 1
  %343 = load i8, i8* %342, align 1
  %344 = zext i8 %343 to i64
  %345 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = getelementptr inbounds i8, i8* %333, i64 %288
  %349 = load i8, i8* %348, align 1
  %350 = zext i8 %349 to i64
  %351 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %350
  %352 = load i8, i8* %351, align 1
  %353 = zext i8 %352 to i32
  %354 = getelementptr inbounds i8, i8* %333, i64 2
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i64
  %357 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %356
  %358 = load i8, i8* %357, align 1
  %359 = zext i8 %358 to i32
  %360 = getelementptr inbounds i8, i8* %333, i64 %291
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i64
  %363 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = add nuw nsw i32 %341, 1
  %367 = add nuw nsw i32 %366, %347
  %368 = add nuw nsw i32 %367, %353
  %369 = add nuw nsw i32 %368, %359
  %370 = add nuw nsw i32 %369, %365
  %371 = lshr i32 %370, 1
  %372 = icmp ult i32 %371, 4
  %373 = select i1 %372, i32 %371, i32 4
  %374 = load i8*, i8** %292, align 8
  %375 = getelementptr inbounds i8, i8* %374, i64 %317
  %376 = load i8, i8* %375, align 1
  %377 = sext i8 %376 to i32
  %378 = add nsw i32 %373, %377
  br label %379

379:                                              ; preds = %335, %325
  %380 = phi i32 [ 0, %325 ], [ %378, %335 ]
  %381 = icmp eq i32 %328, 0
  br i1 %381, label %382, label %388

382:                                              ; preds = %379
  %383 = sext i32 %380 to i64
  %384 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %383, i64 0
  %385 = load i32, i32* %384, align 4
  %386 = load i32, i32* %15, align 4
  %387 = add nsw i32 %386, %385
  store i32 %387, i32* %15, align 4
  br label %816

388:                                              ; preds = %379
  %389 = icmp slt i32 %328, 0
  %390 = sub nsw i32 0, %328
  %391 = select i1 %389, i32 %390, i32 %328
  %392 = getelementptr inbounds i32, i32* %47, i64 %317
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds i32, i32* %44, i64 %317
  %395 = load i32, i32* %394, align 4
  %396 = lshr i32 %328, 31
  %397 = shl i32 %393, %26
  %398 = sext i32 %397 to i64
  %399 = mul nsw i64 %398, %398
  %400 = sub nsw i32 %393, %395
  %401 = shl i32 %400, %26
  %402 = sext i32 %401 to i64
  %403 = mul nsw i64 %402, %402
  %404 = sub nsw i64 %403, %399
  %405 = sext i32 %380 to i64
  %406 = icmp slt i32 %391, 3
  %407 = select i1 %406, i32 %391, i32 3
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %405, i64 %408
  %410 = load i32, i32* %409, align 4
  %411 = icmp eq i32 %391, 0
  br i1 %411, label %475, label %412

412:                                              ; preds = %388
  br i1 %334, label %413, label %418

413:                                              ; preds = %412
  %414 = sext i32 %308 to i64
  %415 = zext i32 %396 to i64
  %416 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %414, i64 %415
  %417 = load i32, i32* %416, align 4
  br label %418

418:                                              ; preds = %413, %412
  %419 = phi i32 [ %417, %413 ], [ 512, %412 ]
  %420 = add nsw i32 %419, %410
  %421 = icmp sgt i32 %391, 2
  br i1 %421, label %422, label %475

422:                                              ; preds = %418
  %423 = shl i32 %329, %82
  %424 = sub nsw i32 %311, %423
  %425 = mul nsw i32 %329, %285
  %426 = add nsw i32 %424, %425
  %427 = add nsw i32 %426, 1
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i32
  %432 = add nsw i32 %426, %285
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = add nsw i32 %432, 1
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = add nuw nsw i32 %431, 1
  %443 = add nuw nsw i32 %442, %436
  %444 = add nuw nsw i32 %443, %441
  %445 = icmp ult i32 %444, 12
  %446 = lshr i32 %444, 1
  %447 = select i1 %445, i32 %446, i32 6
  br i1 %334, label %456, label %448

448:                                              ; preds = %422
  %449 = icmp slt i32 %329, 2
  %450 = icmp slt i32 %424, 2
  %451 = and i1 %449, %450
  br i1 %451, label %452, label %454

452:                                              ; preds = %448
  %453 = add nuw nsw i32 %447, 7
  br label %456

454:                                              ; preds = %448
  %455 = add nuw nsw i32 %447, 14
  br label %456

456:                                              ; preds = %454, %452, %422
  %457 = phi i32 [ %455, %454 ], [ %453, %452 ], [ %447, %422 ]
  %458 = sext i32 %457 to i64
  %459 = icmp slt i32 %391, 15
  %460 = select i1 %459, i32 %391, i32 15
  %461 = add nsw i32 %460, -3
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %458, i64 %462
  %464 = load i32, i32* %463, align 4
  %465 = icmp sgt i32 %391, 14
  br i1 %465, label %466, label %471

466:                                              ; preds = %456
  %467 = add nsw i32 %391, -14
  %468 = call i32 @llvm.ctlz.i32(i32 %467, i1 true) #7, !range !2
  %469 = shl nuw nsw i32 %468, 10
  %470 = xor i32 %469, 32256
  br label %471

471:                                              ; preds = %466, %456
  %472 = phi i32 [ %470, %466 ], [ 0, %456 ]
  %473 = add i32 %464, %420
  %474 = add i32 %473, %472
  br label %475

475:                                              ; preds = %388, %418, %471
  %476 = phi i32 [ %474, %471 ], [ %420, %418 ], [ %410, %388 ]
  %477 = load i32, i32* %15, align 4
  %478 = add nsw i32 %477, %476
  %479 = sext i32 %478 to i64
  %480 = mul nsw i64 %118, %479
  %481 = add nsw i64 %480, 256
  %482 = ashr i64 %481, 9
  %483 = add nsw i64 %305, %404
  %484 = shl nsw i64 %483, 7
  %485 = add nsw i64 %482, %484
  %486 = icmp eq i32 %391, 1
  br i1 %486, label %487, label %490

487:                                              ; preds = %475
  %488 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %405, i64 0
  %489 = load i32, i32* %488, align 4
  br label %576

490:                                              ; preds = %475
  %491 = add nsw i32 %391, -1
  %492 = ashr i32 %328, 31
  %493 = xor i32 %491, %492
  %494 = add nsw i32 %493, %396
  %495 = mul nsw i32 %491, %326
  %496 = ashr i32 %495, %26
  %497 = xor i32 %496, %492
  %498 = add nsw i32 %497, %396
  %499 = sub nsw i32 %393, %498
  %500 = shl i32 %499, %26
  %501 = sext i32 %500 to i64
  %502 = mul nsw i64 %501, %501
  %503 = sub nsw i64 %502, %399
  %504 = icmp slt i32 %491, 3
  %505 = select i1 %504, i32 %491, i32 3
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %405, i64 %506
  %508 = load i32, i32* %507, align 4
  %509 = icmp eq i32 %491, 0
  br i1 %509, label %573, label %510

510:                                              ; preds = %490
  br i1 %334, label %511, label %516

511:                                              ; preds = %510
  %512 = sext i32 %308 to i64
  %513 = zext i32 %396 to i64
  %514 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %512, i64 %513
  %515 = load i32, i32* %514, align 4
  br label %516

516:                                              ; preds = %511, %510
  %517 = phi i32 [ %515, %511 ], [ 512, %510 ]
  %518 = add nsw i32 %517, %508
  %519 = icmp sgt i32 %491, 2
  br i1 %519, label %520, label %573

520:                                              ; preds = %516
  %521 = shl i32 %329, %82
  %522 = sub nsw i32 %311, %521
  %523 = mul nsw i32 %329, %285
  %524 = add nsw i32 %522, %523
  %525 = add nsw i32 %524, 1
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i32
  %530 = add nsw i32 %524, %285
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %531
  %533 = load i8, i8* %532, align 1
  %534 = zext i8 %533 to i32
  %535 = add nsw i32 %530, 1
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %536
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = add nuw nsw i32 %529, 1
  %541 = add nuw nsw i32 %540, %534
  %542 = add nuw nsw i32 %541, %539
  %543 = icmp ult i32 %542, 12
  %544 = lshr i32 %542, 1
  %545 = select i1 %543, i32 %544, i32 6
  br i1 %334, label %554, label %546

546:                                              ; preds = %520
  %547 = icmp slt i32 %329, 2
  %548 = icmp slt i32 %522, 2
  %549 = and i1 %547, %548
  br i1 %549, label %550, label %552

550:                                              ; preds = %546
  %551 = add nuw nsw i32 %545, 7
  br label %554

552:                                              ; preds = %546
  %553 = add nuw nsw i32 %545, 14
  br label %554

554:                                              ; preds = %552, %550, %520
  %555 = phi i32 [ %553, %552 ], [ %551, %550 ], [ %545, %520 ]
  %556 = sext i32 %555 to i64
  %557 = icmp slt i32 %491, 15
  %558 = select i1 %557, i32 %491, i32 15
  %559 = add nsw i32 %558, -3
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %556, i64 %560
  %562 = load i32, i32* %561, align 4
  %563 = icmp sgt i32 %491, 14
  br i1 %563, label %564, label %569

564:                                              ; preds = %554
  %565 = add nsw i32 %391, -15
  %566 = call i32 @llvm.ctlz.i32(i32 %565, i1 true) #7, !range !2
  %567 = shl nuw nsw i32 %566, 10
  %568 = xor i32 %567, 32256
  br label %569

569:                                              ; preds = %564, %554
  %570 = phi i32 [ %568, %564 ], [ 0, %554 ]
  %571 = add i32 %562, %518
  %572 = add i32 %571, %570
  br label %573

573:                                              ; preds = %490, %516, %569
  %574 = phi i32 [ %572, %569 ], [ %518, %516 ], [ %508, %490 ]
  %575 = add nsw i64 %305, %503
  br label %576

576:                                              ; preds = %573, %487
  %577 = phi i64 [ %575, %573 ], [ %305, %487 ]
  %578 = phi i32 [ %574, %573 ], [ %489, %487 ]
  %579 = phi i32 [ %494, %573 ], [ 0, %487 ]
  %580 = phi i32 [ %498, %573 ], [ 0, %487 ]
  %581 = phi i32 [ %491, %573 ], [ 0, %487 ]
  %582 = phi i64 [ %503, %573 ], [ 0, %487 ]
  %583 = add nsw i32 %578, %477
  %584 = sext i32 %583 to i64
  %585 = mul nsw i64 %118, %584
  %586 = add nsw i64 %585, 256
  %587 = ashr i64 %586, 9
  %588 = shl i64 %577, 7
  %589 = add nsw i64 %587, %588
  %590 = icmp eq i64 %304, 0
  br i1 %590, label %596, label %591

591:                                              ; preds = %576
  %592 = icmp sgt i64 %304, %302
  br i1 %592, label %593, label %596

593:                                              ; preds = %591
  %594 = icmp sgt i64 %304, %301
  %595 = select i1 %594, i64 3, i64 2
  br label %596

596:                                              ; preds = %593, %591, %576
  %597 = phi i64 [ 0, %576 ], [ 1, %591 ], [ %595, %593 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %296) #7
  store i32 -1431655766, i32* %11, align 4
  %598 = trunc i64 %304 to i32
  %599 = add i32 %598, 1
  %600 = call i32 @av1_get_eob_pos_token(i32 %599, i32* nonnull %11) #7
  %601 = add nsw i32 %600, -1
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 1, i64 %102, i64 %98, i32 0, i64 0, i64 %602
  %604 = load i32, i32* %603, align 4
  %605 = sext i32 %600 to i64
  %606 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %605
  %607 = load i16, i16* %606, align 2
  %608 = icmp sgt i16 %607, 0
  br i1 %608, label %609, label %626

609:                                              ; preds = %596
  %610 = sext i16 %607 to i32
  %611 = add nsw i32 %600, -3
  %612 = add nsw i32 %610, -1
  %613 = load i32, i32* %11, align 4
  %614 = shl i32 1, %612
  %615 = and i32 %613, %614
  %616 = icmp ne i32 %615, 0
  %617 = sext i32 %611 to i64
  %618 = zext i1 %616 to i64
  %619 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 3, i64 %617, i64 %618
  %620 = load i32, i32* %619, align 4
  %621 = icmp eq i16 %607, 1
  %622 = shl nsw i32 %612, 9
  %623 = select i1 %621, i32 0, i32 %622
  %624 = add i32 %623, %604
  %625 = add i32 %624, %620
  br label %626

626:                                              ; preds = %609, %596
  %627 = phi i32 [ %604, %596 ], [ %625, %609 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %296) #7
  %628 = add nsw i32 %407, -1
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %597, i64 %629
  %631 = load i32, i32* %630, align 4
  br i1 %334, label %632, label %637

632:                                              ; preds = %626
  %633 = sext i32 %308 to i64
  %634 = zext i32 %396 to i64
  %635 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %633, i64 %634
  %636 = load i32, i32* %635, align 4
  br label %637

637:                                              ; preds = %632, %626
  %638 = phi i32 [ %636, %632 ], [ 512, %626 ]
  %639 = add nsw i32 %638, %631
  %640 = icmp sgt i32 %391, 2
  br i1 %640, label %641, label %667

641:                                              ; preds = %637
  br i1 %334, label %649, label %642

642:                                              ; preds = %641
  %643 = shl i32 %329, %82
  %644 = sub nsw i32 %311, %643
  %645 = icmp slt i32 %329, 2
  %646 = icmp slt i32 %644, 2
  %647 = and i1 %645, %646
  %648 = select i1 %647, i64 7, i64 14
  br label %649

649:                                              ; preds = %642, %641
  %650 = phi i64 [ 0, %641 ], [ %648, %642 ]
  %651 = icmp slt i32 %391, 15
  %652 = select i1 %651, i32 %391, i32 15
  %653 = add nsw i32 %652, -3
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %650, i64 %654
  %656 = load i32, i32* %655, align 4
  %657 = icmp sgt i32 %391, 14
  br i1 %657, label %658, label %663

658:                                              ; preds = %649
  %659 = add nsw i32 %391, -14
  %660 = call i32 @llvm.ctlz.i32(i32 %659, i1 true) #7, !range !2
  %661 = shl nuw nsw i32 %660, 10
  %662 = xor i32 %661, 32256
  br label %663

663:                                              ; preds = %658, %649
  %664 = phi i32 [ %662, %658 ], [ 0, %649 ]
  %665 = add i32 %656, %639
  %666 = add i32 %665, %664
  br label %667

667:                                              ; preds = %663, %637
  %668 = phi i32 [ %666, %663 ], [ %639, %637 ]
  %669 = add nsw i32 %668, %627
  %670 = sext i32 %669 to i64
  %671 = mul nsw i64 %118, %670
  %672 = add nsw i64 %671, 256
  %673 = ashr i64 %672, 9
  %674 = shl nsw i64 %404, 7
  %675 = add nsw i64 %673, %674
  %676 = icmp sgt i32 %581, 0
  br i1 %676, label %677, label %733

677:                                              ; preds = %667
  %678 = icmp slt i32 %581, 3
  %679 = select i1 %678, i32 %581, i32 3
  %680 = add nsw i32 %679, -1
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %597, i64 %681
  %683 = load i32, i32* %682, align 4
  br i1 %334, label %684, label %689

684:                                              ; preds = %677
  %685 = sext i32 %308 to i64
  %686 = zext i32 %396 to i64
  %687 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %685, i64 %686
  %688 = load i32, i32* %687, align 4
  br label %689

689:                                              ; preds = %684, %677
  %690 = phi i32 [ %688, %684 ], [ 512, %677 ]
  %691 = add nsw i32 %690, %683
  %692 = icmp sgt i32 %581, 2
  br i1 %692, label %693, label %719

693:                                              ; preds = %689
  br i1 %334, label %701, label %694

694:                                              ; preds = %693
  %695 = shl i32 %329, %82
  %696 = sub nsw i32 %311, %695
  %697 = icmp slt i32 %329, 2
  %698 = icmp slt i32 %696, 2
  %699 = and i1 %697, %698
  %700 = select i1 %699, i64 7, i64 14
  br label %701

701:                                              ; preds = %694, %693
  %702 = phi i64 [ 0, %693 ], [ %700, %694 ]
  %703 = icmp slt i32 %581, 15
  %704 = select i1 %703, i32 %581, i32 15
  %705 = add nsw i32 %704, -3
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %702, i64 %706
  %708 = load i32, i32* %707, align 4
  %709 = icmp sgt i32 %581, 14
  br i1 %709, label %710, label %715

710:                                              ; preds = %701
  %711 = add nsw i32 %581, -14
  %712 = call i32 @llvm.ctlz.i32(i32 %711, i1 true) #7, !range !2
  %713 = shl nuw nsw i32 %712, 10
  %714 = xor i32 %713, 32256
  br label %715

715:                                              ; preds = %710, %701
  %716 = phi i32 [ %714, %710 ], [ 0, %701 ]
  %717 = add i32 %708, %691
  %718 = add i32 %717, %716
  br label %719

719:                                              ; preds = %715, %689
  %720 = phi i32 [ %718, %715 ], [ %691, %689 ]
  %721 = add nsw i32 %720, %627
  %722 = sext i32 %721 to i64
  %723 = mul nsw i64 %118, %722
  %724 = add nsw i64 %723, 256
  %725 = ashr i64 %724, 9
  %726 = shl nsw i64 %582, 7
  %727 = add nsw i64 %725, %726
  %728 = icmp slt i64 %727, %675
  %729 = zext i1 %728 to i32
  %730 = select i1 %728, i32 %721, i32 %669
  %731 = select i1 %728, i64 %582, i64 %404
  %732 = select i1 %728, i64 %727, i64 %675
  br label %733

733:                                              ; preds = %719, %667
  %734 = phi i32 [ %729, %719 ], [ 0, %667 ]
  %735 = phi i32 [ %730, %719 ], [ %669, %667 ]
  %736 = phi i64 [ %731, %719 ], [ %404, %667 ]
  %737 = phi i64 [ %732, %719 ], [ %675, %667 ]
  %738 = icmp slt i64 %589, %485
  %739 = select i1 %738, i64 %589, i64 %485
  %740 = icmp slt i64 %737, %739
  %741 = and i1 %297, %740
  br i1 %741, label %742, label %792

742:                                              ; preds = %733
  %743 = icmp sgt i32 %306, 0
  br i1 %743, label %744, label %764

744:                                              ; preds = %742
  %745 = sext i32 %306 to i64
  %746 = and i64 %745, 1
  %747 = icmp eq i32 %306, 1
  br i1 %747, label %750, label %748

748:                                              ; preds = %744
  %749 = sub nsw i64 %745, %746
  br label %765

750:                                              ; preds = %765, %744
  %751 = phi i64 [ 0, %744 ], [ %789, %765 ]
  %752 = icmp eq i64 %746, 0
  br i1 %752, label %764, label %753

753:                                              ; preds = %750
  %754 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %751
  %755 = load i32, i32* %754, align 4
  %756 = ashr i32 %755, %82
  %757 = shl i32 %756, 2
  %758 = add nsw i32 %757, %755
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %759
  store i8 0, i8* %760, align 1
  %761 = sext i32 %755 to i64
  %762 = getelementptr inbounds i32, i32* %41, i64 %761
  store i32 0, i32* %762, align 4
  %763 = getelementptr inbounds i32, i32* %44, i64 %761
  store i32 0, i32* %763, align 4
  br label %764

764:                                              ; preds = %753, %750, %742
  store i32 %735, i32* %15, align 4
  br label %799

765:                                              ; preds = %765, %748
  %766 = phi i64 [ 0, %748 ], [ %789, %765 ]
  %767 = phi i64 [ %749, %748 ], [ %790, %765 ]
  %768 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %766
  %769 = load i32, i32* %768, align 4
  %770 = ashr i32 %769, %82
  %771 = shl i32 %770, 2
  %772 = add nsw i32 %771, %769
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %773
  store i8 0, i8* %774, align 1
  %775 = sext i32 %769 to i64
  %776 = getelementptr inbounds i32, i32* %41, i64 %775
  store i32 0, i32* %776, align 4
  %777 = getelementptr inbounds i32, i32* %44, i64 %775
  store i32 0, i32* %777, align 4
  %778 = or i64 %766, 1
  %779 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = ashr i32 %780, %82
  %782 = shl i32 %781, 2
  %783 = add nsw i32 %782, %780
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %784
  store i8 0, i8* %785, align 1
  %786 = sext i32 %780 to i64
  %787 = getelementptr inbounds i32, i32* %41, i64 %786
  store i32 0, i32* %787, align 4
  %788 = getelementptr inbounds i32, i32* %44, i64 %786
  store i32 0, i32* %788, align 4
  %789 = add nuw nsw i64 %766, 2
  %790 = add i64 %767, -2
  %791 = icmp eq i64 %790, 0
  br i1 %791, label %750, label %765

792:                                              ; preds = %733
  %793 = select i1 %738, i32 %578, i32 %476
  %794 = select i1 %738, i64 %582, i64 %404
  %795 = zext i1 %738 to i32
  %796 = load i32, i32* %15, align 4
  %797 = add nsw i32 %796, %793
  store i32 %797, i32* %15, align 4
  %798 = add nsw i64 %794, %305
  br label %799

799:                                              ; preds = %792, %764
  %800 = phi i32 [ %599, %764 ], [ %307, %792 ]
  %801 = phi i32 [ 0, %764 ], [ %306, %792 ]
  %802 = phi i64 [ %736, %764 ], [ %798, %792 ]
  %803 = phi i32 [ %734, %764 ], [ %795, %792 ]
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %809, label %805

805:                                              ; preds = %799
  store i32 %579, i32* %327, align 4
  store i32 %580, i32* %394, align 4
  %806 = icmp slt i32 %581, 127
  %807 = select i1 %806, i32 %581, i32 127
  %808 = trunc i32 %807 to i8
  store i8 %808, i8* %333, align 1
  br label %809

809:                                              ; preds = %805, %799
  %810 = load i32, i32* %327, align 4
  %811 = icmp eq i32 %810, 0
  br i1 %811, label %816, label %812

812:                                              ; preds = %809
  %813 = sext i32 %801 to i64
  %814 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %813
  store i32 %311, i32* %814, align 4
  %815 = add nsw i32 %801, 1
  br label %816

816:                                              ; preds = %382, %809, %812
  %817 = phi i64 [ %305, %382 ], [ %802, %809 ], [ %802, %812 ]
  %818 = phi i32 [ %307, %382 ], [ %800, %809 ], [ %800, %812 ]
  %819 = phi i32 [ %306, %382 ], [ %801, %809 ], [ %815, %812 ]
  %820 = add i64 %304, -1
  %821 = icmp sgt i64 %304, 0
  %822 = icmp slt i32 %819, 3
  %823 = and i1 %822, %821
  br i1 %823, label %303, label %1833

824:                                              ; preds = %261, %1322
  %825 = phi i64 [ %276, %261 ], [ %1326, %1322 ]
  %826 = phi i64 [ %274, %261 ], [ %1323, %1322 ]
  %827 = phi i32 [ 1, %261 ], [ %1325, %1322 ]
  %828 = phi i32 [ %32, %261 ], [ %1324, %1322 ]
  %829 = load i32, i32* %262, align 4
  %830 = getelementptr inbounds i16, i16* %25, i64 %825
  %831 = load i16, i16* %830, align 2
  %832 = sext i16 %831 to i32
  %833 = icmp ne i16 %831, 0
  %834 = zext i1 %833 to i64
  %835 = getelementptr inbounds i16, i16* %34, i64 %834
  %836 = load i16, i16* %835, align 2
  %837 = sext i16 %836 to i32
  %838 = sext i16 %831 to i64
  br i1 %263, label %846, label %839

839:                                              ; preds = %824
  %840 = getelementptr inbounds i8, i8* %36, i64 %838
  %841 = load i8, i8* %840, align 1
  %842 = zext i8 %841 to i32
  %843 = mul nsw i32 %842, %837
  %844 = add nsw i32 %843, 16
  %845 = ashr i32 %844, 5
  br label %846

846:                                              ; preds = %839, %824
  %847 = phi i32 [ %845, %839 ], [ %837, %824 ]
  %848 = getelementptr inbounds i32, i32* %41, i64 %838
  %849 = load i32, i32* %848, align 4
  %850 = ashr i32 %832, %82
  %851 = shl nsw i32 %850, 2
  %852 = add nsw i32 %851, %832
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %853
  %855 = getelementptr inbounds i8, i8* %854, i64 1
  %856 = load i8, i8* %855, align 1
  %857 = zext i8 %856 to i64
  %858 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %857
  %859 = load i8, i8* %858, align 1
  %860 = zext i8 %859 to i32
  %861 = getelementptr inbounds i8, i8* %854, i64 %266
  %862 = load i8, i8* %861, align 1
  %863 = zext i8 %862 to i64
  %864 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %863
  %865 = load i8, i8* %864, align 1
  %866 = zext i8 %865 to i32
  %867 = getelementptr inbounds i8, i8* %854, i64 2
  %868 = load i8, i8* %867, align 1
  %869 = zext i8 %868 to i64
  %870 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %869
  %871 = load i8, i8* %870, align 1
  %872 = zext i8 %871 to i32
  %873 = getelementptr inbounds i8, i8* %854, i64 3
  %874 = load i8, i8* %873, align 1
  %875 = zext i8 %874 to i64
  %876 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %875
  %877 = load i8, i8* %876, align 1
  %878 = zext i8 %877 to i32
  %879 = getelementptr inbounds i8, i8* %854, i64 4
  %880 = load i8, i8* %879, align 1
  %881 = zext i8 %880 to i64
  %882 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %881
  %883 = load i8, i8* %882, align 1
  %884 = zext i8 %883 to i32
  %885 = add nuw nsw i32 %860, 1
  %886 = add nuw nsw i32 %885, %866
  %887 = add nuw nsw i32 %886, %872
  %888 = add nuw nsw i32 %887, %878
  %889 = add nuw nsw i32 %888, %884
  %890 = lshr i32 %889, 1
  %891 = icmp ult i32 %890, 4
  %892 = select i1 %891, i32 %890, i32 4
  %893 = and i32 %832, %268
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %894
  %896 = load i32, i32* %895, align 4
  %897 = add nsw i32 %892, %896
  %898 = icmp eq i32 %849, 0
  br i1 %898, label %899, label %905

899:                                              ; preds = %846
  %900 = sext i32 %897 to i64
  %901 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %900, i64 0
  %902 = load i32, i32* %901, align 4
  %903 = load i32, i32* %15, align 4
  %904 = add nsw i32 %903, %902
  store i32 %904, i32* %15, align 4
  br label %1322

905:                                              ; preds = %846
  %906 = icmp slt i32 %849, 0
  %907 = sub nsw i32 0, %849
  %908 = select i1 %906, i32 %907, i32 %849
  %909 = getelementptr inbounds i32, i32* %47, i64 %838
  %910 = load i32, i32* %909, align 4
  %911 = getelementptr inbounds i32, i32* %44, i64 %838
  %912 = load i32, i32* %911, align 4
  %913 = lshr i32 %849, 31
  %914 = shl i32 %910, %26
  %915 = sext i32 %914 to i64
  %916 = mul nsw i64 %915, %915
  %917 = sub nsw i32 %910, %912
  %918 = shl i32 %917, %26
  %919 = sext i32 %918 to i64
  %920 = mul nsw i64 %919, %919
  %921 = sub nsw i64 %920, %916
  %922 = sext i32 %897 to i64
  %923 = icmp slt i32 %908, 3
  %924 = select i1 %923, i32 %908, i32 3
  %925 = zext i32 %924 to i64
  %926 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %922, i64 %925
  %927 = load i32, i32* %926, align 4
  %928 = icmp eq i32 %908, 0
  br i1 %928, label %991, label %929

929:                                              ; preds = %905
  %930 = icmp eq i16 %831, 0
  br i1 %930, label %931, label %936

931:                                              ; preds = %929
  %932 = sext i32 %829 to i64
  %933 = zext i32 %913 to i64
  %934 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %932, i64 %933
  %935 = load i32, i32* %934, align 4
  br label %936

936:                                              ; preds = %931, %929
  %937 = phi i32 [ %935, %931 ], [ 512, %929 ]
  %938 = add nsw i32 %937, %927
  %939 = icmp sgt i32 %908, 2
  br i1 %939, label %940, label %991

940:                                              ; preds = %936
  %941 = shl i32 %850, %82
  %942 = sub nsw i32 %832, %941
  %943 = mul nsw i32 %850, %265
  %944 = add nsw i32 %942, %943
  %945 = add nsw i32 %944, 1
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %946
  %948 = load i8, i8* %947, align 1
  %949 = zext i8 %948 to i32
  %950 = add nsw i32 %944, %265
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %951
  %953 = load i8, i8* %952, align 1
  %954 = zext i8 %953 to i32
  %955 = add nsw i32 %944, 2
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %956
  %958 = load i8, i8* %957, align 1
  %959 = zext i8 %958 to i32
  %960 = add nuw nsw i32 %949, 1
  %961 = add nuw nsw i32 %960, %954
  %962 = add nuw nsw i32 %961, %959
  %963 = icmp ult i32 %962, 12
  %964 = lshr i32 %962, 1
  %965 = select i1 %963, i32 %964, i32 6
  br i1 %930, label %972, label %966

966:                                              ; preds = %940
  %967 = icmp eq i32 %942, 0
  br i1 %967, label %968, label %970

968:                                              ; preds = %966
  %969 = add nuw nsw i32 %965, 7
  br label %972

970:                                              ; preds = %966
  %971 = add nuw nsw i32 %965, 14
  br label %972

972:                                              ; preds = %970, %968, %940
  %973 = phi i32 [ %971, %970 ], [ %969, %968 ], [ %965, %940 ]
  %974 = sext i32 %973 to i64
  %975 = icmp slt i32 %908, 15
  %976 = select i1 %975, i32 %908, i32 15
  %977 = add nsw i32 %976, -3
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %974, i64 %978
  %980 = load i32, i32* %979, align 4
  %981 = icmp sgt i32 %908, 14
  br i1 %981, label %982, label %987

982:                                              ; preds = %972
  %983 = add nsw i32 %908, -14
  %984 = call i32 @llvm.ctlz.i32(i32 %983, i1 true) #7, !range !2
  %985 = shl nuw nsw i32 %984, 10
  %986 = xor i32 %985, 32256
  br label %987

987:                                              ; preds = %982, %972
  %988 = phi i32 [ %986, %982 ], [ 0, %972 ]
  %989 = add i32 %980, %938
  %990 = add i32 %989, %988
  br label %991

991:                                              ; preds = %905, %936, %987
  %992 = phi i32 [ %990, %987 ], [ %938, %936 ], [ %927, %905 ]
  %993 = load i32, i32* %15, align 4
  %994 = add nsw i32 %993, %992
  %995 = sext i32 %994 to i64
  %996 = mul nsw i64 %118, %995
  %997 = add nsw i64 %996, 256
  %998 = ashr i64 %997, 9
  %999 = add nsw i64 %826, %921
  %1000 = shl nsw i64 %999, 7
  %1001 = add nsw i64 %998, %1000
  %1002 = icmp eq i32 %908, 1
  br i1 %1002, label %1003, label %1006

1003:                                             ; preds = %991
  %1004 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %922, i64 0
  %1005 = load i32, i32* %1004, align 4
  br label %1091

1006:                                             ; preds = %991
  %1007 = add nsw i32 %908, -1
  %1008 = ashr i32 %849, 31
  %1009 = xor i32 %1007, %1008
  %1010 = add nsw i32 %1009, %913
  %1011 = mul nsw i32 %1007, %847
  %1012 = ashr i32 %1011, %26
  %1013 = xor i32 %1012, %1008
  %1014 = add nsw i32 %1013, %913
  %1015 = sub nsw i32 %910, %1014
  %1016 = shl i32 %1015, %26
  %1017 = sext i32 %1016 to i64
  %1018 = mul nsw i64 %1017, %1017
  %1019 = sub nsw i64 %1018, %916
  %1020 = icmp slt i32 %1007, 3
  %1021 = select i1 %1020, i32 %1007, i32 3
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %922, i64 %1022
  %1024 = load i32, i32* %1023, align 4
  %1025 = icmp eq i32 %1007, 0
  br i1 %1025, label %1088, label %1026

1026:                                             ; preds = %1006
  %1027 = icmp eq i16 %831, 0
  br i1 %1027, label %1028, label %1033

1028:                                             ; preds = %1026
  %1029 = sext i32 %829 to i64
  %1030 = zext i32 %913 to i64
  %1031 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1029, i64 %1030
  %1032 = load i32, i32* %1031, align 4
  br label %1033

1033:                                             ; preds = %1028, %1026
  %1034 = phi i32 [ %1032, %1028 ], [ 512, %1026 ]
  %1035 = add nsw i32 %1034, %1024
  %1036 = icmp sgt i32 %1007, 2
  br i1 %1036, label %1037, label %1088

1037:                                             ; preds = %1033
  %1038 = shl i32 %850, %82
  %1039 = sub nsw i32 %832, %1038
  %1040 = mul nsw i32 %850, %265
  %1041 = add nsw i32 %1039, %1040
  %1042 = add nsw i32 %1041, 1
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1043
  %1045 = load i8, i8* %1044, align 1
  %1046 = zext i8 %1045 to i32
  %1047 = add nsw i32 %1041, %265
  %1048 = sext i32 %1047 to i64
  %1049 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1048
  %1050 = load i8, i8* %1049, align 1
  %1051 = zext i8 %1050 to i32
  %1052 = add nsw i32 %1041, 2
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1053
  %1055 = load i8, i8* %1054, align 1
  %1056 = zext i8 %1055 to i32
  %1057 = add nuw nsw i32 %1046, 1
  %1058 = add nuw nsw i32 %1057, %1051
  %1059 = add nuw nsw i32 %1058, %1056
  %1060 = icmp ult i32 %1059, 12
  %1061 = lshr i32 %1059, 1
  %1062 = select i1 %1060, i32 %1061, i32 6
  br i1 %1027, label %1069, label %1063

1063:                                             ; preds = %1037
  %1064 = icmp eq i32 %1039, 0
  br i1 %1064, label %1065, label %1067

1065:                                             ; preds = %1063
  %1066 = add nuw nsw i32 %1062, 7
  br label %1069

1067:                                             ; preds = %1063
  %1068 = add nuw nsw i32 %1062, 14
  br label %1069

1069:                                             ; preds = %1067, %1065, %1037
  %1070 = phi i32 [ %1068, %1067 ], [ %1066, %1065 ], [ %1062, %1037 ]
  %1071 = sext i32 %1070 to i64
  %1072 = icmp slt i32 %1007, 15
  %1073 = select i1 %1072, i32 %1007, i32 15
  %1074 = add nsw i32 %1073, -3
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1071, i64 %1075
  %1077 = load i32, i32* %1076, align 4
  %1078 = icmp sgt i32 %1007, 14
  br i1 %1078, label %1079, label %1084

1079:                                             ; preds = %1069
  %1080 = add nsw i32 %908, -15
  %1081 = call i32 @llvm.ctlz.i32(i32 %1080, i1 true) #7, !range !2
  %1082 = shl nuw nsw i32 %1081, 10
  %1083 = xor i32 %1082, 32256
  br label %1084

1084:                                             ; preds = %1079, %1069
  %1085 = phi i32 [ %1083, %1079 ], [ 0, %1069 ]
  %1086 = add i32 %1077, %1035
  %1087 = add i32 %1086, %1085
  br label %1088

1088:                                             ; preds = %1006, %1033, %1084
  %1089 = phi i32 [ %1087, %1084 ], [ %1035, %1033 ], [ %1024, %1006 ]
  %1090 = add nsw i64 %826, %1019
  br label %1091

1091:                                             ; preds = %1088, %1003
  %1092 = phi i64 [ %1090, %1088 ], [ %826, %1003 ]
  %1093 = phi i32 [ %1089, %1088 ], [ %1005, %1003 ]
  %1094 = phi i32 [ %1010, %1088 ], [ 0, %1003 ]
  %1095 = phi i32 [ %1014, %1088 ], [ 0, %1003 ]
  %1096 = phi i32 [ %1007, %1088 ], [ 0, %1003 ]
  %1097 = phi i64 [ %1019, %1088 ], [ 0, %1003 ]
  %1098 = add nsw i32 %1093, %993
  %1099 = sext i32 %1098 to i64
  %1100 = mul nsw i64 %118, %1099
  %1101 = add nsw i64 %1100, 256
  %1102 = ashr i64 %1101, 9
  %1103 = shl i64 %1092, 7
  %1104 = add nsw i64 %1102, %1103
  %1105 = icmp eq i64 %825, 0
  br i1 %1105, label %1111, label %1106

1106:                                             ; preds = %1091
  %1107 = icmp sgt i64 %825, %278
  br i1 %1107, label %1108, label %1111

1108:                                             ; preds = %1106
  %1109 = icmp sgt i64 %825, %277
  %1110 = select i1 %1109, i64 3, i64 2
  br label %1111

1111:                                             ; preds = %1108, %1106, %1091
  %1112 = phi i64 [ 0, %1091 ], [ 1, %1106 ], [ %1110, %1108 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %272) #7
  store i32 -1431655766, i32* %12, align 4
  %1113 = trunc i64 %825 to i32
  %1114 = add i32 %1113, 1
  %1115 = call i32 @av1_get_eob_pos_token(i32 %1114, i32* nonnull %12) #7
  %1116 = add nsw i32 %1115, -1
  %1117 = sext i32 %1116 to i64
  %1118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 1, i64 %102, i64 %98, i32 0, i64 1, i64 %1117
  %1119 = load i32, i32* %1118, align 4
  %1120 = sext i32 %1115 to i64
  %1121 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %1120
  %1122 = load i16, i16* %1121, align 2
  %1123 = icmp sgt i16 %1122, 0
  br i1 %1123, label %1124, label %1141

1124:                                             ; preds = %1111
  %1125 = sext i16 %1122 to i32
  %1126 = add nsw i32 %1115, -3
  %1127 = add nsw i32 %1125, -1
  %1128 = load i32, i32* %12, align 4
  %1129 = shl i32 1, %1127
  %1130 = and i32 %1128, %1129
  %1131 = icmp ne i32 %1130, 0
  %1132 = sext i32 %1126 to i64
  %1133 = zext i1 %1131 to i64
  %1134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 3, i64 %1132, i64 %1133
  %1135 = load i32, i32* %1134, align 4
  %1136 = icmp eq i16 %1122, 1
  %1137 = shl nsw i32 %1127, 9
  %1138 = select i1 %1136, i32 0, i32 %1137
  %1139 = add i32 %1138, %1119
  %1140 = add i32 %1139, %1135
  br label %1141

1141:                                             ; preds = %1124, %1111
  %1142 = phi i32 [ %1119, %1111 ], [ %1140, %1124 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %272) #7
  %1143 = add nsw i32 %924, -1
  %1144 = sext i32 %1143 to i64
  %1145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %1112, i64 %1144
  %1146 = load i32, i32* %1145, align 4
  %1147 = icmp eq i16 %831, 0
  br i1 %1147, label %1148, label %1153

1148:                                             ; preds = %1141
  %1149 = sext i32 %829 to i64
  %1150 = zext i32 %913 to i64
  %1151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1149, i64 %1150
  %1152 = load i32, i32* %1151, align 4
  br label %1153

1153:                                             ; preds = %1148, %1141
  %1154 = phi i32 [ %1152, %1148 ], [ 512, %1141 ]
  %1155 = add nsw i32 %1154, %1146
  %1156 = icmp sgt i32 %908, 2
  br i1 %1156, label %1157, label %1178

1157:                                             ; preds = %1153
  %1158 = shl i32 %850, %82
  %1159 = icmp eq i32 %1158, %832
  %1160 = select i1 %1159, i64 7, i64 14
  %1161 = select i1 %1147, i64 0, i64 %1160
  %1162 = icmp slt i32 %908, 15
  %1163 = select i1 %1162, i32 %908, i32 15
  %1164 = add nsw i32 %1163, -3
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1161, i64 %1165
  %1167 = load i32, i32* %1166, align 4
  %1168 = icmp sgt i32 %908, 14
  br i1 %1168, label %1169, label %1174

1169:                                             ; preds = %1157
  %1170 = add nsw i32 %908, -14
  %1171 = call i32 @llvm.ctlz.i32(i32 %1170, i1 true) #7, !range !2
  %1172 = shl nuw nsw i32 %1171, 10
  %1173 = xor i32 %1172, 32256
  br label %1174

1174:                                             ; preds = %1169, %1157
  %1175 = phi i32 [ %1173, %1169 ], [ 0, %1157 ]
  %1176 = add i32 %1167, %1155
  %1177 = add i32 %1176, %1175
  br label %1178

1178:                                             ; preds = %1174, %1153
  %1179 = phi i32 [ %1177, %1174 ], [ %1155, %1153 ]
  %1180 = add nsw i32 %1179, %1142
  %1181 = sext i32 %1180 to i64
  %1182 = mul nsw i64 %118, %1181
  %1183 = add nsw i64 %1182, 256
  %1184 = ashr i64 %1183, 9
  %1185 = shl nsw i64 %921, 7
  %1186 = add nsw i64 %1184, %1185
  %1187 = icmp sgt i32 %1096, 0
  br i1 %1187, label %1188, label %1239

1188:                                             ; preds = %1178
  %1189 = icmp slt i32 %1096, 3
  %1190 = select i1 %1189, i32 %1096, i32 3
  %1191 = add nsw i32 %1190, -1
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %1112, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  br i1 %1147, label %1195, label %1200

1195:                                             ; preds = %1188
  %1196 = sext i32 %829 to i64
  %1197 = zext i32 %913 to i64
  %1198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1196, i64 %1197
  %1199 = load i32, i32* %1198, align 4
  br label %1200

1200:                                             ; preds = %1195, %1188
  %1201 = phi i32 [ %1199, %1195 ], [ 512, %1188 ]
  %1202 = add nsw i32 %1201, %1194
  %1203 = icmp sgt i32 %1096, 2
  br i1 %1203, label %1204, label %1225

1204:                                             ; preds = %1200
  %1205 = shl i32 %850, %82
  %1206 = icmp eq i32 %1205, %832
  %1207 = select i1 %1206, i64 7, i64 14
  %1208 = select i1 %1147, i64 0, i64 %1207
  %1209 = icmp slt i32 %1096, 15
  %1210 = select i1 %1209, i32 %1096, i32 15
  %1211 = add nsw i32 %1210, -3
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1208, i64 %1212
  %1214 = load i32, i32* %1213, align 4
  %1215 = icmp sgt i32 %1096, 14
  br i1 %1215, label %1216, label %1221

1216:                                             ; preds = %1204
  %1217 = add nsw i32 %1096, -14
  %1218 = call i32 @llvm.ctlz.i32(i32 %1217, i1 true) #7, !range !2
  %1219 = shl nuw nsw i32 %1218, 10
  %1220 = xor i32 %1219, 32256
  br label %1221

1221:                                             ; preds = %1216, %1204
  %1222 = phi i32 [ %1220, %1216 ], [ 0, %1204 ]
  %1223 = add i32 %1214, %1202
  %1224 = add i32 %1223, %1222
  br label %1225

1225:                                             ; preds = %1221, %1200
  %1226 = phi i32 [ %1224, %1221 ], [ %1202, %1200 ]
  %1227 = add nsw i32 %1226, %1142
  %1228 = sext i32 %1227 to i64
  %1229 = mul nsw i64 %118, %1228
  %1230 = add nsw i64 %1229, 256
  %1231 = ashr i64 %1230, 9
  %1232 = shl nsw i64 %1097, 7
  %1233 = add nsw i64 %1231, %1232
  %1234 = icmp slt i64 %1233, %1186
  %1235 = zext i1 %1234 to i32
  %1236 = select i1 %1234, i32 %1227, i32 %1180
  %1237 = select i1 %1234, i64 %1097, i64 %921
  %1238 = select i1 %1234, i64 %1233, i64 %1186
  br label %1239

1239:                                             ; preds = %1225, %1178
  %1240 = phi i32 [ %1235, %1225 ], [ 0, %1178 ]
  %1241 = phi i32 [ %1236, %1225 ], [ %1180, %1178 ]
  %1242 = phi i64 [ %1237, %1225 ], [ %921, %1178 ]
  %1243 = phi i64 [ %1238, %1225 ], [ %1186, %1178 ]
  %1244 = icmp slt i64 %1104, %1001
  %1245 = select i1 %1244, i64 %1104, i64 %1001
  %1246 = icmp slt i64 %1243, %1245
  %1247 = and i1 %273, %1246
  br i1 %1247, label %1248, label %1298

1248:                                             ; preds = %1239
  %1249 = icmp sgt i32 %827, 0
  br i1 %1249, label %1250, label %1270

1250:                                             ; preds = %1248
  %1251 = sext i32 %827 to i64
  %1252 = and i64 %1251, 1
  %1253 = icmp eq i32 %827, 1
  br i1 %1253, label %1256, label %1254

1254:                                             ; preds = %1250
  %1255 = sub nsw i64 %1251, %1252
  br label %1271

1256:                                             ; preds = %1271, %1250
  %1257 = phi i64 [ 0, %1250 ], [ %1295, %1271 ]
  %1258 = icmp eq i64 %1252, 0
  br i1 %1258, label %1270, label %1259

1259:                                             ; preds = %1256
  %1260 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1257
  %1261 = load i32, i32* %1260, align 4
  %1262 = ashr i32 %1261, %82
  %1263 = shl i32 %1262, 2
  %1264 = add nsw i32 %1263, %1261
  %1265 = sext i32 %1264 to i64
  %1266 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1265
  store i8 0, i8* %1266, align 1
  %1267 = sext i32 %1261 to i64
  %1268 = getelementptr inbounds i32, i32* %41, i64 %1267
  store i32 0, i32* %1268, align 4
  %1269 = getelementptr inbounds i32, i32* %44, i64 %1267
  store i32 0, i32* %1269, align 4
  br label %1270

1270:                                             ; preds = %1259, %1256, %1248
  store i32 %1241, i32* %15, align 4
  br label %1305

1271:                                             ; preds = %1271, %1254
  %1272 = phi i64 [ 0, %1254 ], [ %1295, %1271 ]
  %1273 = phi i64 [ %1255, %1254 ], [ %1296, %1271 ]
  %1274 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1272
  %1275 = load i32, i32* %1274, align 4
  %1276 = ashr i32 %1275, %82
  %1277 = shl i32 %1276, 2
  %1278 = add nsw i32 %1277, %1275
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1279
  store i8 0, i8* %1280, align 1
  %1281 = sext i32 %1275 to i64
  %1282 = getelementptr inbounds i32, i32* %41, i64 %1281
  store i32 0, i32* %1282, align 4
  %1283 = getelementptr inbounds i32, i32* %44, i64 %1281
  store i32 0, i32* %1283, align 4
  %1284 = or i64 %1272, 1
  %1285 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1284
  %1286 = load i32, i32* %1285, align 4
  %1287 = ashr i32 %1286, %82
  %1288 = shl i32 %1287, 2
  %1289 = add nsw i32 %1288, %1286
  %1290 = sext i32 %1289 to i64
  %1291 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1290
  store i8 0, i8* %1291, align 1
  %1292 = sext i32 %1286 to i64
  %1293 = getelementptr inbounds i32, i32* %41, i64 %1292
  store i32 0, i32* %1293, align 4
  %1294 = getelementptr inbounds i32, i32* %44, i64 %1292
  store i32 0, i32* %1294, align 4
  %1295 = add nuw nsw i64 %1272, 2
  %1296 = add i64 %1273, -2
  %1297 = icmp eq i64 %1296, 0
  br i1 %1297, label %1256, label %1271

1298:                                             ; preds = %1239
  %1299 = select i1 %1244, i32 %1093, i32 %992
  %1300 = select i1 %1244, i64 %1097, i64 %921
  %1301 = zext i1 %1244 to i32
  %1302 = load i32, i32* %15, align 4
  %1303 = add nsw i32 %1302, %1299
  store i32 %1303, i32* %15, align 4
  %1304 = add nsw i64 %1300, %826
  br label %1305

1305:                                             ; preds = %1298, %1270
  %1306 = phi i32 [ %1114, %1270 ], [ %828, %1298 ]
  %1307 = phi i32 [ 0, %1270 ], [ %827, %1298 ]
  %1308 = phi i64 [ %1242, %1270 ], [ %1304, %1298 ]
  %1309 = phi i32 [ %1240, %1270 ], [ %1301, %1298 ]
  %1310 = icmp eq i32 %1309, 0
  br i1 %1310, label %1315, label %1311

1311:                                             ; preds = %1305
  store i32 %1094, i32* %848, align 4
  store i32 %1095, i32* %911, align 4
  %1312 = icmp slt i32 %1096, 127
  %1313 = select i1 %1312, i32 %1096, i32 127
  %1314 = trunc i32 %1313 to i8
  store i8 %1314, i8* %854, align 1
  br label %1315

1315:                                             ; preds = %1311, %1305
  %1316 = load i32, i32* %848, align 4
  %1317 = icmp eq i32 %1316, 0
  br i1 %1317, label %1322, label %1318

1318:                                             ; preds = %1315
  %1319 = sext i32 %1307 to i64
  %1320 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1319
  store i32 %832, i32* %1320, align 4
  %1321 = add nsw i32 %1307, 1
  br label %1322

1322:                                             ; preds = %899, %1315, %1318
  %1323 = phi i64 [ %826, %899 ], [ %1308, %1315 ], [ %1308, %1318 ]
  %1324 = phi i32 [ %828, %899 ], [ %1306, %1315 ], [ %1306, %1318 ]
  %1325 = phi i32 [ %827, %899 ], [ %1307, %1315 ], [ %1321, %1318 ]
  %1326 = add i64 %825, -1
  %1327 = icmp sgt i64 %825, 0
  %1328 = icmp slt i32 %1325, 3
  %1329 = and i1 %1328, %1327
  br i1 %1329, label %824, label %1835

1330:                                             ; preds = %233, %1825
  %1331 = phi i64 [ %256, %233 ], [ %1829, %1825 ]
  %1332 = phi i64 [ %254, %233 ], [ %1826, %1825 ]
  %1333 = phi i32 [ 1, %233 ], [ %1828, %1825 ]
  %1334 = phi i32 [ %32, %233 ], [ %1827, %1825 ]
  %1335 = load i32, i32* %234, align 4
  %1336 = getelementptr inbounds i16, i16* %25, i64 %1331
  %1337 = load i16, i16* %1336, align 2
  %1338 = sext i16 %1337 to i32
  %1339 = icmp ne i16 %1337, 0
  %1340 = zext i1 %1339 to i64
  %1341 = getelementptr inbounds i16, i16* %34, i64 %1340
  %1342 = load i16, i16* %1341, align 2
  %1343 = sext i16 %1342 to i32
  %1344 = sext i16 %1337 to i64
  br i1 %235, label %1352, label %1345

1345:                                             ; preds = %1330
  %1346 = getelementptr inbounds i8, i8* %36, i64 %1344
  %1347 = load i8, i8* %1346, align 1
  %1348 = zext i8 %1347 to i32
  %1349 = mul nsw i32 %1348, %1343
  %1350 = add nsw i32 %1349, 16
  %1351 = ashr i32 %1350, 5
  br label %1352

1352:                                             ; preds = %1345, %1330
  %1353 = phi i32 [ %1351, %1345 ], [ %1343, %1330 ]
  %1354 = getelementptr inbounds i32, i32* %41, i64 %1344
  %1355 = load i32, i32* %1354, align 4
  %1356 = ashr i32 %1338, %82
  %1357 = shl nsw i32 %1356, 2
  %1358 = add nsw i32 %1357, %1338
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1359
  %1361 = getelementptr inbounds i8, i8* %1360, i64 1
  %1362 = load i8, i8* %1361, align 1
  %1363 = zext i8 %1362 to i64
  %1364 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1363
  %1365 = load i8, i8* %1364, align 1
  %1366 = zext i8 %1365 to i32
  %1367 = getelementptr inbounds i8, i8* %1360, i64 %238
  %1368 = load i8, i8* %1367, align 1
  %1369 = zext i8 %1368 to i64
  %1370 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1369
  %1371 = load i8, i8* %1370, align 1
  %1372 = zext i8 %1371 to i32
  %1373 = getelementptr inbounds i8, i8* %1360, i64 %241
  %1374 = load i8, i8* %1373, align 1
  %1375 = zext i8 %1374 to i64
  %1376 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1375
  %1377 = load i8, i8* %1376, align 1
  %1378 = zext i8 %1377 to i32
  %1379 = getelementptr inbounds i8, i8* %1360, i64 %244
  %1380 = load i8, i8* %1379, align 1
  %1381 = zext i8 %1380 to i64
  %1382 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1381
  %1383 = load i8, i8* %1382, align 1
  %1384 = zext i8 %1383 to i32
  %1385 = getelementptr inbounds i8, i8* %1360, i64 %247
  %1386 = load i8, i8* %1385, align 1
  %1387 = zext i8 %1386 to i64
  %1388 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1387
  %1389 = load i8, i8* %1388, align 1
  %1390 = zext i8 %1389 to i32
  %1391 = add nuw nsw i32 %1366, 1
  %1392 = add nuw nsw i32 %1391, %1372
  %1393 = add nuw nsw i32 %1392, %1378
  %1394 = add nuw nsw i32 %1393, %1384
  %1395 = add nuw nsw i32 %1394, %1390
  %1396 = lshr i32 %1395, 1
  %1397 = icmp ult i32 %1396, 4
  %1398 = select i1 %1397, i32 %1396, i32 4
  %1399 = sext i32 %1356 to i64
  %1400 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %1399
  %1401 = load i32, i32* %1400, align 4
  %1402 = add nsw i32 %1398, %1401
  %1403 = icmp eq i32 %1355, 0
  br i1 %1403, label %1404, label %1410

1404:                                             ; preds = %1352
  %1405 = sext i32 %1402 to i64
  %1406 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %1405, i64 0
  %1407 = load i32, i32* %1406, align 4
  %1408 = load i32, i32* %15, align 4
  %1409 = add nsw i32 %1408, %1407
  store i32 %1409, i32* %15, align 4
  br label %1825

1410:                                             ; preds = %1352
  %1411 = icmp slt i32 %1355, 0
  %1412 = sub nsw i32 0, %1355
  %1413 = select i1 %1411, i32 %1412, i32 %1355
  %1414 = getelementptr inbounds i32, i32* %47, i64 %1344
  %1415 = load i32, i32* %1414, align 4
  %1416 = getelementptr inbounds i32, i32* %44, i64 %1344
  %1417 = load i32, i32* %1416, align 4
  %1418 = lshr i32 %1355, 31
  %1419 = shl i32 %1415, %26
  %1420 = sext i32 %1419 to i64
  %1421 = mul nsw i64 %1420, %1420
  %1422 = sub nsw i32 %1415, %1417
  %1423 = shl i32 %1422, %26
  %1424 = sext i32 %1423 to i64
  %1425 = mul nsw i64 %1424, %1424
  %1426 = sub nsw i64 %1425, %1421
  %1427 = sext i32 %1402 to i64
  %1428 = icmp slt i32 %1413, 3
  %1429 = select i1 %1428, i32 %1413, i32 3
  %1430 = zext i32 %1429 to i64
  %1431 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %1427, i64 %1430
  %1432 = load i32, i32* %1431, align 4
  %1433 = icmp eq i32 %1413, 0
  br i1 %1433, label %1496, label %1434

1434:                                             ; preds = %1410
  %1435 = icmp eq i16 %1337, 0
  br i1 %1435, label %1436, label %1441

1436:                                             ; preds = %1434
  %1437 = sext i32 %1335 to i64
  %1438 = zext i32 %1418 to i64
  %1439 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1437, i64 %1438
  %1440 = load i32, i32* %1439, align 4
  br label %1441

1441:                                             ; preds = %1436, %1434
  %1442 = phi i32 [ %1440, %1436 ], [ 512, %1434 ]
  %1443 = add nsw i32 %1442, %1432
  %1444 = icmp sgt i32 %1413, 2
  br i1 %1444, label %1445, label %1496

1445:                                             ; preds = %1441
  %1446 = shl i32 %1356, %82
  %1447 = sub nsw i32 %1338, %1446
  %1448 = mul nsw i32 %1356, %237
  %1449 = add nsw i32 %1447, %1448
  %1450 = add nsw i32 %1449, 1
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1451
  %1453 = load i8, i8* %1452, align 1
  %1454 = zext i8 %1453 to i32
  %1455 = add nsw i32 %1449, %237
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1456
  %1458 = load i8, i8* %1457, align 1
  %1459 = zext i8 %1458 to i32
  %1460 = add nsw i32 %1449, %248
  %1461 = sext i32 %1460 to i64
  %1462 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1461
  %1463 = load i8, i8* %1462, align 1
  %1464 = zext i8 %1463 to i32
  %1465 = add nuw nsw i32 %1454, 1
  %1466 = add nuw nsw i32 %1465, %1459
  %1467 = add nuw nsw i32 %1466, %1464
  %1468 = icmp ult i32 %1467, 12
  %1469 = lshr i32 %1467, 1
  %1470 = select i1 %1468, i32 %1469, i32 6
  br i1 %1435, label %1477, label %1471

1471:                                             ; preds = %1445
  %1472 = icmp eq i32 %1356, 0
  br i1 %1472, label %1473, label %1475

1473:                                             ; preds = %1471
  %1474 = add nuw nsw i32 %1470, 7
  br label %1477

1475:                                             ; preds = %1471
  %1476 = add nuw nsw i32 %1470, 14
  br label %1477

1477:                                             ; preds = %1475, %1473, %1445
  %1478 = phi i32 [ %1476, %1475 ], [ %1474, %1473 ], [ %1470, %1445 ]
  %1479 = sext i32 %1478 to i64
  %1480 = icmp slt i32 %1413, 15
  %1481 = select i1 %1480, i32 %1413, i32 15
  %1482 = add nsw i32 %1481, -3
  %1483 = sext i32 %1482 to i64
  %1484 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1479, i64 %1483
  %1485 = load i32, i32* %1484, align 4
  %1486 = icmp sgt i32 %1413, 14
  br i1 %1486, label %1487, label %1492

1487:                                             ; preds = %1477
  %1488 = add nsw i32 %1413, -14
  %1489 = call i32 @llvm.ctlz.i32(i32 %1488, i1 true) #7, !range !2
  %1490 = shl nuw nsw i32 %1489, 10
  %1491 = xor i32 %1490, 32256
  br label %1492

1492:                                             ; preds = %1487, %1477
  %1493 = phi i32 [ %1491, %1487 ], [ 0, %1477 ]
  %1494 = add i32 %1485, %1443
  %1495 = add i32 %1494, %1493
  br label %1496

1496:                                             ; preds = %1410, %1441, %1492
  %1497 = phi i32 [ %1495, %1492 ], [ %1443, %1441 ], [ %1432, %1410 ]
  %1498 = load i32, i32* %15, align 4
  %1499 = add nsw i32 %1498, %1497
  %1500 = sext i32 %1499 to i64
  %1501 = mul nsw i64 %118, %1500
  %1502 = add nsw i64 %1501, 256
  %1503 = ashr i64 %1502, 9
  %1504 = add nsw i64 %1332, %1426
  %1505 = shl nsw i64 %1504, 7
  %1506 = add nsw i64 %1503, %1505
  %1507 = icmp eq i32 %1413, 1
  br i1 %1507, label %1508, label %1511

1508:                                             ; preds = %1496
  %1509 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %1427, i64 0
  %1510 = load i32, i32* %1509, align 4
  br label %1596

1511:                                             ; preds = %1496
  %1512 = add nsw i32 %1413, -1
  %1513 = ashr i32 %1355, 31
  %1514 = xor i32 %1512, %1513
  %1515 = add nsw i32 %1514, %1418
  %1516 = mul nsw i32 %1512, %1353
  %1517 = ashr i32 %1516, %26
  %1518 = xor i32 %1517, %1513
  %1519 = add nsw i32 %1518, %1418
  %1520 = sub nsw i32 %1415, %1519
  %1521 = shl i32 %1520, %26
  %1522 = sext i32 %1521 to i64
  %1523 = mul nsw i64 %1522, %1522
  %1524 = sub nsw i64 %1523, %1421
  %1525 = icmp slt i32 %1512, 3
  %1526 = select i1 %1525, i32 %1512, i32 3
  %1527 = sext i32 %1526 to i64
  %1528 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %1427, i64 %1527
  %1529 = load i32, i32* %1528, align 4
  %1530 = icmp eq i32 %1512, 0
  br i1 %1530, label %1593, label %1531

1531:                                             ; preds = %1511
  %1532 = icmp eq i16 %1337, 0
  br i1 %1532, label %1533, label %1538

1533:                                             ; preds = %1531
  %1534 = sext i32 %1335 to i64
  %1535 = zext i32 %1418 to i64
  %1536 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1534, i64 %1535
  %1537 = load i32, i32* %1536, align 4
  br label %1538

1538:                                             ; preds = %1533, %1531
  %1539 = phi i32 [ %1537, %1533 ], [ 512, %1531 ]
  %1540 = add nsw i32 %1539, %1529
  %1541 = icmp sgt i32 %1512, 2
  br i1 %1541, label %1542, label %1593

1542:                                             ; preds = %1538
  %1543 = shl i32 %1356, %82
  %1544 = sub nsw i32 %1338, %1543
  %1545 = mul nsw i32 %1356, %237
  %1546 = add nsw i32 %1544, %1545
  %1547 = add nsw i32 %1546, 1
  %1548 = sext i32 %1547 to i64
  %1549 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1548
  %1550 = load i8, i8* %1549, align 1
  %1551 = zext i8 %1550 to i32
  %1552 = add nsw i32 %1546, %237
  %1553 = sext i32 %1552 to i64
  %1554 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1553
  %1555 = load i8, i8* %1554, align 1
  %1556 = zext i8 %1555 to i32
  %1557 = add nsw i32 %1546, %248
  %1558 = sext i32 %1557 to i64
  %1559 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1558
  %1560 = load i8, i8* %1559, align 1
  %1561 = zext i8 %1560 to i32
  %1562 = add nuw nsw i32 %1551, 1
  %1563 = add nuw nsw i32 %1562, %1556
  %1564 = add nuw nsw i32 %1563, %1561
  %1565 = icmp ult i32 %1564, 12
  %1566 = lshr i32 %1564, 1
  %1567 = select i1 %1565, i32 %1566, i32 6
  br i1 %1532, label %1574, label %1568

1568:                                             ; preds = %1542
  %1569 = icmp eq i32 %1356, 0
  br i1 %1569, label %1570, label %1572

1570:                                             ; preds = %1568
  %1571 = add nuw nsw i32 %1567, 7
  br label %1574

1572:                                             ; preds = %1568
  %1573 = add nuw nsw i32 %1567, 14
  br label %1574

1574:                                             ; preds = %1572, %1570, %1542
  %1575 = phi i32 [ %1573, %1572 ], [ %1571, %1570 ], [ %1567, %1542 ]
  %1576 = sext i32 %1575 to i64
  %1577 = icmp slt i32 %1512, 15
  %1578 = select i1 %1577, i32 %1512, i32 15
  %1579 = add nsw i32 %1578, -3
  %1580 = sext i32 %1579 to i64
  %1581 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1576, i64 %1580
  %1582 = load i32, i32* %1581, align 4
  %1583 = icmp sgt i32 %1512, 14
  br i1 %1583, label %1584, label %1589

1584:                                             ; preds = %1574
  %1585 = add nsw i32 %1413, -15
  %1586 = call i32 @llvm.ctlz.i32(i32 %1585, i1 true) #7, !range !2
  %1587 = shl nuw nsw i32 %1586, 10
  %1588 = xor i32 %1587, 32256
  br label %1589

1589:                                             ; preds = %1584, %1574
  %1590 = phi i32 [ %1588, %1584 ], [ 0, %1574 ]
  %1591 = add i32 %1582, %1540
  %1592 = add i32 %1591, %1590
  br label %1593

1593:                                             ; preds = %1511, %1538, %1589
  %1594 = phi i32 [ %1592, %1589 ], [ %1540, %1538 ], [ %1529, %1511 ]
  %1595 = add nsw i64 %1332, %1524
  br label %1596

1596:                                             ; preds = %1593, %1508
  %1597 = phi i64 [ %1595, %1593 ], [ %1332, %1508 ]
  %1598 = phi i32 [ %1594, %1593 ], [ %1510, %1508 ]
  %1599 = phi i32 [ %1515, %1593 ], [ 0, %1508 ]
  %1600 = phi i32 [ %1519, %1593 ], [ 0, %1508 ]
  %1601 = phi i32 [ %1512, %1593 ], [ 0, %1508 ]
  %1602 = phi i64 [ %1524, %1593 ], [ 0, %1508 ]
  %1603 = add nsw i32 %1598, %1498
  %1604 = sext i32 %1603 to i64
  %1605 = mul nsw i64 %118, %1604
  %1606 = add nsw i64 %1605, 256
  %1607 = ashr i64 %1606, 9
  %1608 = shl i64 %1597, 7
  %1609 = add nsw i64 %1607, %1608
  %1610 = icmp eq i64 %1331, 0
  br i1 %1610, label %1616, label %1611

1611:                                             ; preds = %1596
  %1612 = icmp sgt i64 %1331, %258
  br i1 %1612, label %1613, label %1616

1613:                                             ; preds = %1611
  %1614 = icmp sgt i64 %1331, %257
  %1615 = select i1 %1614, i64 3, i64 2
  br label %1616

1616:                                             ; preds = %1613, %1611, %1596
  %1617 = phi i64 [ 0, %1596 ], [ 1, %1611 ], [ %1615, %1613 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %252) #7
  store i32 -1431655766, i32* %13, align 4
  %1618 = trunc i64 %1331 to i32
  %1619 = add i32 %1618, 1
  %1620 = call i32 @av1_get_eob_pos_token(i32 %1619, i32* nonnull %13) #7
  %1621 = add nsw i32 %1620, -1
  %1622 = sext i32 %1621 to i64
  %1623 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 1, i64 %102, i64 %98, i32 0, i64 1, i64 %1622
  %1624 = load i32, i32* %1623, align 4
  %1625 = sext i32 %1620 to i64
  %1626 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %1625
  %1627 = load i16, i16* %1626, align 2
  %1628 = icmp sgt i16 %1627, 0
  br i1 %1628, label %1629, label %1646

1629:                                             ; preds = %1616
  %1630 = sext i16 %1627 to i32
  %1631 = add nsw i32 %1620, -3
  %1632 = add nsw i32 %1630, -1
  %1633 = load i32, i32* %13, align 4
  %1634 = shl i32 1, %1632
  %1635 = and i32 %1633, %1634
  %1636 = icmp ne i32 %1635, 0
  %1637 = sext i32 %1631 to i64
  %1638 = zext i1 %1636 to i64
  %1639 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 3, i64 %1637, i64 %1638
  %1640 = load i32, i32* %1639, align 4
  %1641 = icmp eq i16 %1627, 1
  %1642 = shl nsw i32 %1632, 9
  %1643 = select i1 %1641, i32 0, i32 %1642
  %1644 = add i32 %1643, %1624
  %1645 = add i32 %1644, %1640
  br label %1646

1646:                                             ; preds = %1629, %1616
  %1647 = phi i32 [ %1624, %1616 ], [ %1645, %1629 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252) #7
  %1648 = add nsw i32 %1429, -1
  %1649 = sext i32 %1648 to i64
  %1650 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %1617, i64 %1649
  %1651 = load i32, i32* %1650, align 4
  %1652 = icmp eq i16 %1337, 0
  br i1 %1652, label %1653, label %1658

1653:                                             ; preds = %1646
  %1654 = sext i32 %1335 to i64
  %1655 = zext i32 %1418 to i64
  %1656 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1654, i64 %1655
  %1657 = load i32, i32* %1656, align 4
  br label %1658

1658:                                             ; preds = %1653, %1646
  %1659 = phi i32 [ %1657, %1653 ], [ 512, %1646 ]
  %1660 = add nsw i32 %1659, %1651
  %1661 = icmp sgt i32 %1413, 2
  br i1 %1661, label %1662, label %1682

1662:                                             ; preds = %1658
  %1663 = icmp eq i32 %1356, 0
  %1664 = select i1 %1663, i64 7, i64 14
  %1665 = select i1 %1652, i64 0, i64 %1664
  %1666 = icmp slt i32 %1413, 15
  %1667 = select i1 %1666, i32 %1413, i32 15
  %1668 = add nsw i32 %1667, -3
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1665, i64 %1669
  %1671 = load i32, i32* %1670, align 4
  %1672 = icmp sgt i32 %1413, 14
  br i1 %1672, label %1673, label %1678

1673:                                             ; preds = %1662
  %1674 = add nsw i32 %1413, -14
  %1675 = call i32 @llvm.ctlz.i32(i32 %1674, i1 true) #7, !range !2
  %1676 = shl nuw nsw i32 %1675, 10
  %1677 = xor i32 %1676, 32256
  br label %1678

1678:                                             ; preds = %1673, %1662
  %1679 = phi i32 [ %1677, %1673 ], [ 0, %1662 ]
  %1680 = add i32 %1671, %1660
  %1681 = add i32 %1680, %1679
  br label %1682

1682:                                             ; preds = %1678, %1658
  %1683 = phi i32 [ %1681, %1678 ], [ %1660, %1658 ]
  %1684 = add nsw i32 %1683, %1647
  %1685 = sext i32 %1684 to i64
  %1686 = mul nsw i64 %118, %1685
  %1687 = add nsw i64 %1686, 256
  %1688 = ashr i64 %1687, 9
  %1689 = shl nsw i64 %1426, 7
  %1690 = add nsw i64 %1688, %1689
  %1691 = icmp sgt i32 %1601, 0
  br i1 %1691, label %1692, label %1742

1692:                                             ; preds = %1682
  %1693 = icmp slt i32 %1601, 3
  %1694 = select i1 %1693, i32 %1601, i32 3
  %1695 = add nsw i32 %1694, -1
  %1696 = sext i32 %1695 to i64
  %1697 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 1, i64 %1617, i64 %1696
  %1698 = load i32, i32* %1697, align 4
  br i1 %1652, label %1699, label %1704

1699:                                             ; preds = %1692
  %1700 = sext i32 %1335 to i64
  %1701 = zext i32 %1418 to i64
  %1702 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 4, i64 %1700, i64 %1701
  %1703 = load i32, i32* %1702, align 4
  br label %1704

1704:                                             ; preds = %1699, %1692
  %1705 = phi i32 [ %1703, %1699 ], [ 512, %1692 ]
  %1706 = add nsw i32 %1705, %1698
  %1707 = icmp sgt i32 %1601, 2
  br i1 %1707, label %1708, label %1728

1708:                                             ; preds = %1704
  %1709 = icmp eq i32 %1356, 0
  %1710 = select i1 %1709, i64 7, i64 14
  %1711 = select i1 %1652, i64 0, i64 %1710
  %1712 = icmp slt i32 %1601, 15
  %1713 = select i1 %1712, i32 %1601, i32 15
  %1714 = add nsw i32 %1713, -3
  %1715 = sext i32 %1714 to i64
  %1716 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %1711, i64 %1715
  %1717 = load i32, i32* %1716, align 4
  %1718 = icmp sgt i32 %1601, 14
  br i1 %1718, label %1719, label %1724

1719:                                             ; preds = %1708
  %1720 = add nsw i32 %1601, -14
  %1721 = call i32 @llvm.ctlz.i32(i32 %1720, i1 true) #7, !range !2
  %1722 = shl nuw nsw i32 %1721, 10
  %1723 = xor i32 %1722, 32256
  br label %1724

1724:                                             ; preds = %1719, %1708
  %1725 = phi i32 [ %1723, %1719 ], [ 0, %1708 ]
  %1726 = add i32 %1717, %1706
  %1727 = add i32 %1726, %1725
  br label %1728

1728:                                             ; preds = %1724, %1704
  %1729 = phi i32 [ %1727, %1724 ], [ %1706, %1704 ]
  %1730 = add nsw i32 %1729, %1647
  %1731 = sext i32 %1730 to i64
  %1732 = mul nsw i64 %118, %1731
  %1733 = add nsw i64 %1732, 256
  %1734 = ashr i64 %1733, 9
  %1735 = shl nsw i64 %1602, 7
  %1736 = add nsw i64 %1734, %1735
  %1737 = icmp slt i64 %1736, %1690
  %1738 = zext i1 %1737 to i32
  %1739 = select i1 %1737, i32 %1730, i32 %1684
  %1740 = select i1 %1737, i64 %1602, i64 %1426
  %1741 = select i1 %1737, i64 %1736, i64 %1690
  br label %1742

1742:                                             ; preds = %1728, %1682
  %1743 = phi i32 [ %1738, %1728 ], [ 0, %1682 ]
  %1744 = phi i32 [ %1739, %1728 ], [ %1684, %1682 ]
  %1745 = phi i64 [ %1740, %1728 ], [ %1426, %1682 ]
  %1746 = phi i64 [ %1741, %1728 ], [ %1690, %1682 ]
  %1747 = icmp slt i64 %1609, %1506
  %1748 = select i1 %1747, i64 %1609, i64 %1506
  %1749 = icmp slt i64 %1746, %1748
  %1750 = and i1 %253, %1749
  br i1 %1750, label %1751, label %1801

1751:                                             ; preds = %1742
  %1752 = icmp sgt i32 %1333, 0
  br i1 %1752, label %1753, label %1773

1753:                                             ; preds = %1751
  %1754 = sext i32 %1333 to i64
  %1755 = and i64 %1754, 1
  %1756 = icmp eq i32 %1333, 1
  br i1 %1756, label %1759, label %1757

1757:                                             ; preds = %1753
  %1758 = sub nsw i64 %1754, %1755
  br label %1774

1759:                                             ; preds = %1774, %1753
  %1760 = phi i64 [ 0, %1753 ], [ %1798, %1774 ]
  %1761 = icmp eq i64 %1755, 0
  br i1 %1761, label %1773, label %1762

1762:                                             ; preds = %1759
  %1763 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1760
  %1764 = load i32, i32* %1763, align 4
  %1765 = ashr i32 %1764, %82
  %1766 = shl i32 %1765, 2
  %1767 = add nsw i32 %1766, %1764
  %1768 = sext i32 %1767 to i64
  %1769 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1768
  store i8 0, i8* %1769, align 1
  %1770 = sext i32 %1764 to i64
  %1771 = getelementptr inbounds i32, i32* %41, i64 %1770
  store i32 0, i32* %1771, align 4
  %1772 = getelementptr inbounds i32, i32* %44, i64 %1770
  store i32 0, i32* %1772, align 4
  br label %1773

1773:                                             ; preds = %1762, %1759, %1751
  store i32 %1744, i32* %15, align 4
  br label %1808

1774:                                             ; preds = %1774, %1757
  %1775 = phi i64 [ 0, %1757 ], [ %1798, %1774 ]
  %1776 = phi i64 [ %1758, %1757 ], [ %1799, %1774 ]
  %1777 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1775
  %1778 = load i32, i32* %1777, align 4
  %1779 = ashr i32 %1778, %82
  %1780 = shl i32 %1779, 2
  %1781 = add nsw i32 %1780, %1778
  %1782 = sext i32 %1781 to i64
  %1783 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1782
  store i8 0, i8* %1783, align 1
  %1784 = sext i32 %1778 to i64
  %1785 = getelementptr inbounds i32, i32* %41, i64 %1784
  store i32 0, i32* %1785, align 4
  %1786 = getelementptr inbounds i32, i32* %44, i64 %1784
  store i32 0, i32* %1786, align 4
  %1787 = or i64 %1775, 1
  %1788 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1787
  %1789 = load i32, i32* %1788, align 4
  %1790 = ashr i32 %1789, %82
  %1791 = shl i32 %1790, 2
  %1792 = add nsw i32 %1791, %1789
  %1793 = sext i32 %1792 to i64
  %1794 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1793
  store i8 0, i8* %1794, align 1
  %1795 = sext i32 %1789 to i64
  %1796 = getelementptr inbounds i32, i32* %41, i64 %1795
  store i32 0, i32* %1796, align 4
  %1797 = getelementptr inbounds i32, i32* %44, i64 %1795
  store i32 0, i32* %1797, align 4
  %1798 = add nuw nsw i64 %1775, 2
  %1799 = add i64 %1776, -2
  %1800 = icmp eq i64 %1799, 0
  br i1 %1800, label %1759, label %1774

1801:                                             ; preds = %1742
  %1802 = select i1 %1747, i32 %1598, i32 %1497
  %1803 = select i1 %1747, i64 %1602, i64 %1426
  %1804 = zext i1 %1747 to i32
  %1805 = load i32, i32* %15, align 4
  %1806 = add nsw i32 %1805, %1802
  store i32 %1806, i32* %15, align 4
  %1807 = add nsw i64 %1803, %1332
  br label %1808

1808:                                             ; preds = %1801, %1773
  %1809 = phi i32 [ %1619, %1773 ], [ %1334, %1801 ]
  %1810 = phi i32 [ 0, %1773 ], [ %1333, %1801 ]
  %1811 = phi i64 [ %1745, %1773 ], [ %1807, %1801 ]
  %1812 = phi i32 [ %1743, %1773 ], [ %1804, %1801 ]
  %1813 = icmp eq i32 %1812, 0
  br i1 %1813, label %1818, label %1814

1814:                                             ; preds = %1808
  store i32 %1599, i32* %1354, align 4
  store i32 %1600, i32* %1416, align 4
  %1815 = icmp slt i32 %1601, 127
  %1816 = select i1 %1815, i32 %1601, i32 127
  %1817 = trunc i32 %1816 to i8
  store i8 %1817, i8* %1360, align 1
  br label %1818

1818:                                             ; preds = %1814, %1808
  %1819 = load i32, i32* %1354, align 4
  %1820 = icmp eq i32 %1819, 0
  br i1 %1820, label %1825, label %1821

1821:                                             ; preds = %1818
  %1822 = sext i32 %1810 to i64
  %1823 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1822
  store i32 %1338, i32* %1823, align 4
  %1824 = add nsw i32 %1810, 1
  br label %1825

1825:                                             ; preds = %1404, %1818, %1821
  %1826 = phi i64 [ %1332, %1404 ], [ %1811, %1818 ], [ %1811, %1821 ]
  %1827 = phi i32 [ %1334, %1404 ], [ %1809, %1818 ], [ %1809, %1821 ]
  %1828 = phi i32 [ %1333, %1404 ], [ %1810, %1818 ], [ %1824, %1821 ]
  %1829 = add i64 %1331, -1
  %1830 = icmp sgt i64 %1331, 0
  %1831 = icmp slt i32 %1828, 3
  %1832 = and i1 %1831, %1830
  br i1 %1832, label %1330, label %1837

1833:                                             ; preds = %816
  %1834 = trunc i64 %820 to i32
  store i64 %817, i64* %16, align 8
  br label %1839

1835:                                             ; preds = %1322
  %1836 = trunc i64 %1326 to i32
  store i64 %1323, i64* %16, align 8
  br label %1839

1837:                                             ; preds = %1825
  %1838 = trunc i64 %1829 to i32
  store i64 %1826, i64* %16, align 8
  br label %1839

1839:                                             ; preds = %231, %1837, %259, %1835, %279, %1833, %229
  %1840 = phi i32 [ %32, %229 ], [ %818, %1833 ], [ %32, %279 ], [ %1324, %1835 ], [ %32, %259 ], [ %1827, %1837 ], [ %32, %231 ]
  %1841 = phi i32 [ 1, %229 ], [ %819, %1833 ], [ 1, %279 ], [ %1325, %1835 ], [ 1, %259 ], [ %1828, %1837 ], [ 1, %231 ]
  %1842 = phi i32 [ %230, %229 ], [ %1834, %1833 ], [ %230, %279 ], [ %1836, %1835 ], [ %230, %259 ], [ %1838, %1837 ], [ %230, %231 ]
  %1843 = icmp eq i32 %1842, -1
  %1844 = icmp slt i32 %1841, 3
  %1845 = and i1 %1844, %1843
  %1846 = icmp eq i32 %8, 0
  %1847 = and i1 %1846, %1845
  br i1 %1847, label %1848, label %1916

1848:                                             ; preds = %1839
  %1849 = load i64, i64* %16, align 8
  %1850 = sext i32 %130 to i64
  %1851 = mul nsw i64 %118, %1850
  %1852 = add nsw i64 %1851, 256
  %1853 = ashr i64 %1852, 9
  %1854 = load i32, i32* %15, align 4
  %1855 = add nsw i32 %1854, %128
  %1856 = sext i32 %1855 to i64
  %1857 = mul nsw i64 %118, %1856
  %1858 = add nsw i64 %1857, 256
  %1859 = ashr i64 %1858, 9
  %1860 = shl i64 %1849, 7
  %1861 = add nsw i64 %1859, %1860
  %1862 = icmp slt i64 %1853, %1861
  br i1 %1862, label %1863, label %1916

1863:                                             ; preds = %1848
  %1864 = icmp sgt i32 %1841, 0
  br i1 %1864, label %1865, label %1886

1865:                                             ; preds = %1863
  %1866 = zext i32 %1841 to i64
  %1867 = add nsw i64 %1866, -1
  %1868 = and i64 %1866, 3
  %1869 = icmp ult i64 %1867, 3
  br i1 %1869, label %1872, label %1870

1870:                                             ; preds = %1865
  %1871 = sub nsw i64 %1866, %1868
  br label %1887

1872:                                             ; preds = %1887, %1865
  %1873 = phi i64 [ 0, %1865 ], [ %1913, %1887 ]
  %1874 = icmp eq i64 %1868, 0
  br i1 %1874, label %1886, label %1875

1875:                                             ; preds = %1872, %1875
  %1876 = phi i64 [ %1883, %1875 ], [ %1873, %1872 ]
  %1877 = phi i64 [ %1884, %1875 ], [ %1868, %1872 ]
  %1878 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1876
  %1879 = load i32, i32* %1878, align 4
  %1880 = sext i32 %1879 to i64
  %1881 = getelementptr inbounds i32, i32* %41, i64 %1880
  store i32 0, i32* %1881, align 4
  %1882 = getelementptr inbounds i32, i32* %44, i64 %1880
  store i32 0, i32* %1882, align 4
  %1883 = add nuw nsw i64 %1876, 1
  %1884 = add i64 %1877, -1
  %1885 = icmp eq i64 %1884, 0
  br i1 %1885, label %1886, label %1875, !llvm.loop !3

1886:                                             ; preds = %1872, %1875, %1863
  store i32 0, i32* %15, align 4
  br label %1916

1887:                                             ; preds = %1887, %1870
  %1888 = phi i64 [ 0, %1870 ], [ %1913, %1887 ]
  %1889 = phi i64 [ %1871, %1870 ], [ %1914, %1887 ]
  %1890 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1888
  %1891 = load i32, i32* %1890, align 4
  %1892 = sext i32 %1891 to i64
  %1893 = getelementptr inbounds i32, i32* %41, i64 %1892
  store i32 0, i32* %1893, align 4
  %1894 = getelementptr inbounds i32, i32* %44, i64 %1892
  store i32 0, i32* %1894, align 4
  %1895 = or i64 %1888, 1
  %1896 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1895
  %1897 = load i32, i32* %1896, align 4
  %1898 = sext i32 %1897 to i64
  %1899 = getelementptr inbounds i32, i32* %41, i64 %1898
  store i32 0, i32* %1899, align 4
  %1900 = getelementptr inbounds i32, i32* %44, i64 %1898
  store i32 0, i32* %1900, align 4
  %1901 = or i64 %1888, 2
  %1902 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1901
  %1903 = load i32, i32* %1902, align 4
  %1904 = sext i32 %1903 to i64
  %1905 = getelementptr inbounds i32, i32* %41, i64 %1904
  store i32 0, i32* %1905, align 4
  %1906 = getelementptr inbounds i32, i32* %44, i64 %1904
  store i32 0, i32* %1906, align 4
  %1907 = or i64 %1888, 3
  %1908 = getelementptr inbounds [3 x i32], [3 x i32]* %17, i64 0, i64 %1907
  %1909 = load i32, i32* %1908, align 4
  %1910 = sext i32 %1909 to i64
  %1911 = getelementptr inbounds i32, i32* %41, i64 %1910
  store i32 0, i32* %1911, align 4
  %1912 = getelementptr inbounds i32, i32* %44, i64 %1910
  store i32 0, i32* %1912, align 4
  %1913 = add nuw nsw i64 %1888, 4
  %1914 = add i64 %1889, -4
  %1915 = icmp eq i64 %1914, 0
  br i1 %1915, label %1872, label %1887

1916:                                             ; preds = %1886, %1848, %1839
  %1917 = phi i32 [ %1840, %1839 ], [ 0, %1886 ], [ %1840, %1848 ]
  switch i8 %59, label %2684 [
    i8 0, label %1946
    i8 1, label %1936
    i8 2, label %1918
  ]

1918:                                             ; preds = %1916
  %1919 = icmp sgt i32 %1842, 0
  br i1 %1919, label %1920, label %2684

1920:                                             ; preds = %1918
  %1921 = icmp eq i8* %36, null
  %1922 = shl i32 1, %82
  %1923 = add nsw i32 %1922, 4
  %1924 = sext i32 %1923 to i64
  %1925 = shl i32 2, %82
  %1926 = add nsw i32 %1925, 8
  %1927 = sext i32 %1926 to i64
  %1928 = shl i32 3, %82
  %1929 = add nsw i32 %1928, 12
  %1930 = sext i32 %1929 to i64
  %1931 = shl i32 4, %82
  %1932 = add nsw i32 %1931, 16
  %1933 = sext i32 %1932 to i64
  %1934 = shl i32 %1923, 1
  %1935 = sext i32 %1842 to i64
  br label %2441

1936:                                             ; preds = %1916
  %1937 = icmp sgt i32 %1842, 0
  br i1 %1937, label %1938, label %2684

1938:                                             ; preds = %1936
  %1939 = icmp eq i8* %36, null
  %1940 = shl i32 1, %82
  %1941 = add nsw i32 %1940, 4
  %1942 = sext i32 %1941 to i64
  %1943 = shl i32 -1, %82
  %1944 = xor i32 %1943, -1
  %1945 = sext i32 %1842 to i64
  br label %2203

1946:                                             ; preds = %1916
  %1947 = icmp sgt i32 %1842, 0
  br i1 %1947, label %1948, label %2684

1948:                                             ; preds = %1946
  %1949 = icmp eq i8* %36, null
  %1950 = shl i32 1, %82
  %1951 = add nsw i32 %1950, 4
  %1952 = sext i32 %1951 to i64
  %1953 = add nsw i32 %1950, 5
  %1954 = sext i32 %1953 to i64
  %1955 = shl i32 2, %82
  %1956 = add nsw i32 %1955, 8
  %1957 = sext i32 %1956 to i64
  %1958 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %21
  %1959 = sext i32 %1842 to i64
  br label %1960

1960:                                             ; preds = %1948, %2200
  %1961 = phi i64 [ %1959, %1948 ], [ %2201, %2200 ]
  %1962 = getelementptr inbounds i16, i16* %25, i64 %1961
  %1963 = load i16, i16* %1962, align 2
  %1964 = sext i16 %1963 to i32
  %1965 = icmp ne i16 %1963, 0
  %1966 = zext i1 %1965 to i64
  %1967 = getelementptr inbounds i16, i16* %34, i64 %1966
  %1968 = load i16, i16* %1967, align 2
  %1969 = sext i16 %1968 to i32
  %1970 = sext i16 %1963 to i64
  br i1 %1949, label %1978, label %1971

1971:                                             ; preds = %1960
  %1972 = getelementptr inbounds i8, i8* %36, i64 %1970
  %1973 = load i8, i8* %1972, align 1
  %1974 = zext i8 %1973 to i32
  %1975 = mul nsw i32 %1974, %1969
  %1976 = add nsw i32 %1975, 16
  %1977 = ashr i32 %1976, 5
  br label %1978

1978:                                             ; preds = %1971, %1960
  %1979 = phi i32 [ %1977, %1971 ], [ %1969, %1960 ]
  %1980 = getelementptr inbounds i32, i32* %41, i64 %1970
  %1981 = load i32, i32* %1980, align 4
  %1982 = ashr i32 %1964, %82
  %1983 = shl nsw i32 %1982, 2
  %1984 = add nsw i32 %1983, %1964
  %1985 = sext i32 %1984 to i64
  %1986 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %1985
  %1987 = icmp eq i16 %1963, 0
  br i1 %1987, label %2032, label %1988

1988:                                             ; preds = %1978
  %1989 = getelementptr inbounds i8, i8* %1986, i64 %1952
  %1990 = load i8, i8* %1989, align 1
  %1991 = zext i8 %1990 to i64
  %1992 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1991
  %1993 = load i8, i8* %1992, align 1
  %1994 = zext i8 %1993 to i32
  %1995 = getelementptr inbounds i8, i8* %1986, i64 1
  %1996 = load i8, i8* %1995, align 1
  %1997 = zext i8 %1996 to i64
  %1998 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %1997
  %1999 = load i8, i8* %1998, align 1
  %2000 = zext i8 %1999 to i32
  %2001 = getelementptr inbounds i8, i8* %1986, i64 %1954
  %2002 = load i8, i8* %2001, align 1
  %2003 = zext i8 %2002 to i64
  %2004 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2003
  %2005 = load i8, i8* %2004, align 1
  %2006 = zext i8 %2005 to i32
  %2007 = getelementptr inbounds i8, i8* %1986, i64 2
  %2008 = load i8, i8* %2007, align 1
  %2009 = zext i8 %2008 to i64
  %2010 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2009
  %2011 = load i8, i8* %2010, align 1
  %2012 = zext i8 %2011 to i32
  %2013 = getelementptr inbounds i8, i8* %1986, i64 %1957
  %2014 = load i8, i8* %2013, align 1
  %2015 = zext i8 %2014 to i64
  %2016 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2015
  %2017 = load i8, i8* %2016, align 1
  %2018 = zext i8 %2017 to i32
  %2019 = add nuw nsw i32 %1994, 1
  %2020 = add nuw nsw i32 %2019, %2000
  %2021 = add nuw nsw i32 %2020, %2006
  %2022 = add nuw nsw i32 %2021, %2012
  %2023 = add nuw nsw i32 %2022, %2018
  %2024 = lshr i32 %2023, 1
  %2025 = icmp ult i32 %2024, 4
  %2026 = select i1 %2025, i32 %2024, i32 4
  %2027 = load i8*, i8** %1958, align 8
  %2028 = getelementptr inbounds i8, i8* %2027, i64 %1970
  %2029 = load i8, i8* %2028, align 1
  %2030 = sext i8 %2029 to i32
  %2031 = add nsw i32 %2026, %2030
  br label %2032

2032:                                             ; preds = %1988, %1978
  %2033 = phi i32 [ 0, %1978 ], [ %2031, %1988 ]
  %2034 = icmp eq i32 %1981, 0
  br i1 %2034, label %2035, label %2041

2035:                                             ; preds = %2032
  %2036 = sext i32 %2033 to i64
  %2037 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2036, i64 0
  %2038 = load i32, i32* %2037, align 4
  %2039 = load i32, i32* %15, align 4
  %2040 = add nsw i32 %2039, %2038
  store i32 %2040, i32* %15, align 4
  br label %2200

2041:                                             ; preds = %2032
  %2042 = icmp slt i32 %1981, 0
  %2043 = sub nsw i32 0, %1981
  %2044 = select i1 %2042, i32 %2043, i32 %1981
  %2045 = getelementptr inbounds i32, i32* %47, i64 %1970
  %2046 = load i32, i32* %2045, align 4
  %2047 = icmp slt i32 %2046, 0
  %2048 = sub nsw i32 0, %2046
  %2049 = select i1 %2047, i32 %2048, i32 %2046
  %2050 = getelementptr inbounds i32, i32* %44, i64 %1970
  %2051 = load i32, i32* %2050, align 4
  %2052 = icmp slt i32 %2051, 0
  %2053 = sub nsw i32 0, %2051
  %2054 = select i1 %2052, i32 %2053, i32 %2051
  %2055 = sext i32 %2033 to i64
  %2056 = icmp slt i32 %2044, 3
  %2057 = select i1 %2056, i32 %2044, i32 3
  %2058 = zext i32 %2057 to i64
  %2059 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2055, i64 %2058
  %2060 = load i32, i32* %2059, align 4
  %2061 = icmp slt i32 %2044, 4
  br i1 %2061, label %2064, label %2062

2062:                                             ; preds = %2041
  %2063 = add nsw i32 %2060, 512
  br label %2071

2064:                                             ; preds = %2041
  %2065 = add nuw nsw i32 %2044, 4
  %2066 = zext i32 %2065 to i64
  %2067 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2055, i64 %2066
  %2068 = load i32, i32* %2067, align 4
  %2069 = add nsw i32 %2060, 512
  %2070 = icmp eq i32 %2044, 3
  br i1 %2070, label %2071, label %2150

2071:                                             ; preds = %2064, %2062
  %2072 = phi i32 [ %2063, %2062 ], [ %2069, %2064 ]
  %2073 = phi i32 [ 0, %2062 ], [ %2068, %2064 ]
  %2074 = shl i32 %1982, %82
  %2075 = sub nsw i32 %1964, %2074
  %2076 = mul nsw i32 %1982, %1951
  %2077 = add nsw i32 %2075, %2076
  %2078 = add nsw i32 %2077, 1
  %2079 = sext i32 %2078 to i64
  %2080 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2079
  %2081 = load i8, i8* %2080, align 1
  %2082 = zext i8 %2081 to i32
  %2083 = add nsw i32 %2077, %1951
  %2084 = sext i32 %2083 to i64
  %2085 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2084
  %2086 = load i8, i8* %2085, align 1
  %2087 = zext i8 %2086 to i32
  %2088 = add nsw i32 %2083, 1
  %2089 = sext i32 %2088 to i64
  %2090 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2089
  %2091 = load i8, i8* %2090, align 1
  %2092 = zext i8 %2091 to i32
  %2093 = add nuw nsw i32 %2082, 1
  %2094 = add nuw nsw i32 %2093, %2087
  %2095 = add nuw nsw i32 %2094, %2092
  %2096 = icmp ult i32 %2095, 12
  %2097 = lshr i32 %2095, 1
  %2098 = select i1 %2096, i32 %2097, i32 6
  br i1 %1987, label %2107, label %2099

2099:                                             ; preds = %2071
  %2100 = icmp slt i32 %1982, 2
  %2101 = icmp slt i32 %2075, 2
  %2102 = and i1 %2100, %2101
  br i1 %2102, label %2103, label %2105

2103:                                             ; preds = %2099
  %2104 = add nuw nsw i32 %2098, 7
  br label %2107

2105:                                             ; preds = %2099
  %2106 = add nuw nsw i32 %2098, 14
  br label %2107

2107:                                             ; preds = %2105, %2103, %2071
  %2108 = phi i32 [ %2106, %2105 ], [ %2104, %2103 ], [ %2098, %2071 ]
  %2109 = sext i32 %2108 to i64
  %2110 = icmp slt i32 %2044, 15
  %2111 = select i1 %2110, i32 %2044, i32 15
  %2112 = add nsw i32 %2111, -3
  %2113 = icmp slt i32 %2044, 16
  br i1 %2113, label %2114, label %2120

2114:                                             ; preds = %2107
  %2115 = add nuw nsw i32 %2111, 10
  %2116 = zext i32 %2115 to i64
  %2117 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2109, i64 %2116
  %2118 = load i32, i32* %2117, align 4
  %2119 = icmp eq i32 %2044, 15
  br i1 %2119, label %2125, label %2141

2120:                                             ; preds = %2107
  %2121 = add nsw i32 %2044, -14
  %2122 = icmp slt i32 %2121, 32
  br i1 %2122, label %2123, label %2133

2123:                                             ; preds = %2120
  %2124 = sext i32 %2121 to i64
  br label %2125

2125:                                             ; preds = %2123, %2114
  %2126 = phi i32 [ 0, %2123 ], [ %2118, %2114 ]
  %2127 = phi i64 [ %2124, %2123 ], [ 1, %2114 ]
  %2128 = getelementptr inbounds [32 x i32], [32 x i32]* @golomb_bits_cost, i64 0, i64 %2127
  %2129 = load i32, i32* %2128, align 4
  %2130 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ [17 x i32], [15 x i32] }>* @golomb_cost_diff to [32 x i32]*), i64 0, i64 %2127
  %2131 = load i32, i32* %2130, align 4
  %2132 = add nsw i32 %2131, %2126
  br label %2141

2133:                                             ; preds = %2120
  %2134 = call i32 @llvm.ctlz.i32(i32 %2121, i1 true) #7, !range !2
  %2135 = shl nuw nsw i32 %2134, 10
  %2136 = xor i32 %2135, 32256
  %2137 = add nsw i32 %2044, -15
  %2138 = and i32 %2121, %2137
  %2139 = icmp eq i32 %2138, 0
  %2140 = select i1 %2139, i32 1024, i32 0
  br label %2141

2141:                                             ; preds = %2133, %2125, %2114
  %2142 = phi i32 [ %2118, %2114 ], [ %2140, %2133 ], [ %2132, %2125 ]
  %2143 = phi i32 [ 0, %2114 ], [ %2136, %2133 ], [ %2129, %2125 ]
  %2144 = sext i32 %2112 to i64
  %2145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2109, i64 %2144
  %2146 = load i32, i32* %2145, align 4
  %2147 = add i32 %2143, %2072
  %2148 = add i32 %2147, %2146
  %2149 = add nsw i32 %2142, %2073
  br label %2150

2150:                                             ; preds = %2141, %2064
  %2151 = phi i32 [ %2149, %2141 ], [ %2068, %2064 ]
  %2152 = phi i32 [ %2148, %2141 ], [ %2069, %2064 ]
  %2153 = sub nsw i32 %2152, %2151
  %2154 = icmp sgt i32 %2049, %2054
  br i1 %2154, label %2155, label %2158

2155:                                             ; preds = %2150
  %2156 = load i32, i32* %15, align 4
  %2157 = add nsw i32 %2156, %2152
  store i32 %2157, i32* %15, align 4
  br label %2200

2158:                                             ; preds = %2150
  %2159 = sub nsw i32 %2049, %2054
  %2160 = shl i32 %2159, %26
  %2161 = sext i32 %2160 to i64
  %2162 = sext i32 %2152 to i64
  %2163 = mul nsw i64 %118, %2162
  %2164 = add nsw i64 %2163, 256
  %2165 = ashr i64 %2164, 9
  %2166 = shl nsw i64 %2161, 7
  %2167 = mul i64 %2166, %2161
  %2168 = add nsw i64 %2165, %2167
  %2169 = add nsw i32 %2044, -1
  %2170 = mul nsw i32 %2169, %1979
  %2171 = ashr i32 %2170, %26
  %2172 = sub nsw i32 %2049, %2171
  %2173 = shl i32 %2172, %26
  %2174 = sext i32 %2173 to i64
  %2175 = sext i32 %2153 to i64
  %2176 = mul nsw i64 %118, %2175
  %2177 = add nsw i64 %2176, 256
  %2178 = ashr i64 %2177, 9
  %2179 = shl nsw i64 %2174, 7
  %2180 = mul i64 %2179, %2174
  %2181 = add nsw i64 %2178, %2180
  %2182 = icmp slt i64 %2181, %2168
  br i1 %2182, label %2183, label %2195

2183:                                             ; preds = %2158
  %2184 = lshr i32 %1981, 31
  %2185 = ashr i32 %1981, 31
  %2186 = xor i32 %2169, %2185
  %2187 = add nsw i32 %2186, %2184
  store i32 %2187, i32* %1980, align 4
  %2188 = xor i32 %2171, %2185
  %2189 = add nsw i32 %2188, %2184
  store i32 %2189, i32* %2050, align 4
  %2190 = icmp slt i32 %2169, 127
  %2191 = select i1 %2190, i32 %2169, i32 127
  %2192 = trunc i32 %2191 to i8
  store i8 %2192, i8* %1986, align 1
  %2193 = load i32, i32* %15, align 4
  %2194 = add nsw i32 %2193, %2153
  br label %2198

2195:                                             ; preds = %2158
  %2196 = load i32, i32* %15, align 4
  %2197 = add nsw i32 %2196, %2152
  br label %2198

2198:                                             ; preds = %2195, %2183
  %2199 = phi i32 [ %2197, %2195 ], [ %2194, %2183 ]
  store i32 %2199, i32* %15, align 4
  br label %2200

2200:                                             ; preds = %2035, %2155, %2198
  %2201 = add nsw i64 %1961, -1
  %2202 = icmp sgt i64 %2201, 0
  br i1 %2202, label %1960, label %2678

2203:                                             ; preds = %1938, %2438
  %2204 = phi i64 [ %1945, %1938 ], [ %2439, %2438 ]
  %2205 = getelementptr inbounds i16, i16* %25, i64 %2204
  %2206 = load i16, i16* %2205, align 2
  %2207 = sext i16 %2206 to i32
  %2208 = icmp ne i16 %2206, 0
  %2209 = zext i1 %2208 to i64
  %2210 = getelementptr inbounds i16, i16* %34, i64 %2209
  %2211 = load i16, i16* %2210, align 2
  %2212 = sext i16 %2211 to i32
  %2213 = sext i16 %2206 to i64
  br i1 %1939, label %2221, label %2214

2214:                                             ; preds = %2203
  %2215 = getelementptr inbounds i8, i8* %36, i64 %2213
  %2216 = load i8, i8* %2215, align 1
  %2217 = zext i8 %2216 to i32
  %2218 = mul nsw i32 %2217, %2212
  %2219 = add nsw i32 %2218, 16
  %2220 = ashr i32 %2219, 5
  br label %2221

2221:                                             ; preds = %2214, %2203
  %2222 = phi i32 [ %2220, %2214 ], [ %2212, %2203 ]
  %2223 = getelementptr inbounds i32, i32* %41, i64 %2213
  %2224 = load i32, i32* %2223, align 4
  %2225 = ashr i32 %2207, %82
  %2226 = shl nsw i32 %2225, 2
  %2227 = add nsw i32 %2226, %2207
  %2228 = sext i32 %2227 to i64
  %2229 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2228
  %2230 = getelementptr inbounds i8, i8* %2229, i64 1
  %2231 = load i8, i8* %2230, align 1
  %2232 = zext i8 %2231 to i64
  %2233 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2232
  %2234 = load i8, i8* %2233, align 1
  %2235 = zext i8 %2234 to i32
  %2236 = getelementptr inbounds i8, i8* %2229, i64 %1942
  %2237 = load i8, i8* %2236, align 1
  %2238 = zext i8 %2237 to i64
  %2239 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2238
  %2240 = load i8, i8* %2239, align 1
  %2241 = zext i8 %2240 to i32
  %2242 = getelementptr inbounds i8, i8* %2229, i64 2
  %2243 = load i8, i8* %2242, align 1
  %2244 = zext i8 %2243 to i64
  %2245 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2244
  %2246 = load i8, i8* %2245, align 1
  %2247 = zext i8 %2246 to i32
  %2248 = getelementptr inbounds i8, i8* %2229, i64 3
  %2249 = load i8, i8* %2248, align 1
  %2250 = zext i8 %2249 to i64
  %2251 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2250
  %2252 = load i8, i8* %2251, align 1
  %2253 = zext i8 %2252 to i32
  %2254 = getelementptr inbounds i8, i8* %2229, i64 4
  %2255 = load i8, i8* %2254, align 1
  %2256 = zext i8 %2255 to i64
  %2257 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2256
  %2258 = load i8, i8* %2257, align 1
  %2259 = zext i8 %2258 to i32
  %2260 = add nuw nsw i32 %2235, 1
  %2261 = add nuw nsw i32 %2260, %2241
  %2262 = add nuw nsw i32 %2261, %2247
  %2263 = add nuw nsw i32 %2262, %2253
  %2264 = add nuw nsw i32 %2263, %2259
  %2265 = lshr i32 %2264, 1
  %2266 = icmp ult i32 %2265, 4
  %2267 = select i1 %2266, i32 %2265, i32 4
  %2268 = and i32 %2207, %1944
  %2269 = sext i32 %2268 to i64
  %2270 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %2269
  %2271 = load i32, i32* %2270, align 4
  %2272 = add nsw i32 %2267, %2271
  %2273 = icmp eq i32 %2224, 0
  br i1 %2273, label %2274, label %2280

2274:                                             ; preds = %2221
  %2275 = sext i32 %2272 to i64
  %2276 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2275, i64 0
  %2277 = load i32, i32* %2276, align 4
  %2278 = load i32, i32* %15, align 4
  %2279 = add nsw i32 %2278, %2277
  store i32 %2279, i32* %15, align 4
  br label %2438

2280:                                             ; preds = %2221
  %2281 = icmp slt i32 %2224, 0
  %2282 = sub nsw i32 0, %2224
  %2283 = select i1 %2281, i32 %2282, i32 %2224
  %2284 = getelementptr inbounds i32, i32* %47, i64 %2213
  %2285 = load i32, i32* %2284, align 4
  %2286 = icmp slt i32 %2285, 0
  %2287 = sub nsw i32 0, %2285
  %2288 = select i1 %2286, i32 %2287, i32 %2285
  %2289 = getelementptr inbounds i32, i32* %44, i64 %2213
  %2290 = load i32, i32* %2289, align 4
  %2291 = icmp slt i32 %2290, 0
  %2292 = sub nsw i32 0, %2290
  %2293 = select i1 %2291, i32 %2292, i32 %2290
  %2294 = sext i32 %2272 to i64
  %2295 = icmp slt i32 %2283, 3
  %2296 = select i1 %2295, i32 %2283, i32 3
  %2297 = zext i32 %2296 to i64
  %2298 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2294, i64 %2297
  %2299 = load i32, i32* %2298, align 4
  %2300 = icmp slt i32 %2283, 4
  br i1 %2300, label %2303, label %2301

2301:                                             ; preds = %2280
  %2302 = add nsw i32 %2299, 512
  br label %2310

2303:                                             ; preds = %2280
  %2304 = add nuw nsw i32 %2283, 4
  %2305 = zext i32 %2304 to i64
  %2306 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2294, i64 %2305
  %2307 = load i32, i32* %2306, align 4
  %2308 = add nsw i32 %2299, 512
  %2309 = icmp eq i32 %2283, 3
  br i1 %2309, label %2310, label %2388

2310:                                             ; preds = %2303, %2301
  %2311 = phi i32 [ %2302, %2301 ], [ %2308, %2303 ]
  %2312 = phi i32 [ 0, %2301 ], [ %2307, %2303 ]
  %2313 = shl i32 %2225, %82
  %2314 = sub nsw i32 %2207, %2313
  %2315 = mul nsw i32 %2225, %1941
  %2316 = add nsw i32 %2314, %2315
  %2317 = add nsw i32 %2316, 1
  %2318 = sext i32 %2317 to i64
  %2319 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2318
  %2320 = load i8, i8* %2319, align 1
  %2321 = zext i8 %2320 to i32
  %2322 = add nsw i32 %2316, %1941
  %2323 = sext i32 %2322 to i64
  %2324 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2323
  %2325 = load i8, i8* %2324, align 1
  %2326 = zext i8 %2325 to i32
  %2327 = add nsw i32 %2316, 2
  %2328 = sext i32 %2327 to i64
  %2329 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2328
  %2330 = load i8, i8* %2329, align 1
  %2331 = zext i8 %2330 to i32
  %2332 = add nuw nsw i32 %2321, 1
  %2333 = add nuw nsw i32 %2332, %2326
  %2334 = add nuw nsw i32 %2333, %2331
  %2335 = icmp ult i32 %2334, 12
  %2336 = lshr i32 %2334, 1
  %2337 = select i1 %2335, i32 %2336, i32 6
  %2338 = icmp eq i16 %2206, 0
  br i1 %2338, label %2345, label %2339

2339:                                             ; preds = %2310
  %2340 = icmp eq i32 %2314, 0
  br i1 %2340, label %2341, label %2343

2341:                                             ; preds = %2339
  %2342 = add nuw nsw i32 %2337, 7
  br label %2345

2343:                                             ; preds = %2339
  %2344 = add nuw nsw i32 %2337, 14
  br label %2345

2345:                                             ; preds = %2343, %2341, %2310
  %2346 = phi i32 [ %2344, %2343 ], [ %2342, %2341 ], [ %2337, %2310 ]
  %2347 = sext i32 %2346 to i64
  %2348 = icmp slt i32 %2283, 15
  %2349 = select i1 %2348, i32 %2283, i32 15
  %2350 = add nsw i32 %2349, -3
  %2351 = icmp slt i32 %2283, 16
  br i1 %2351, label %2352, label %2358

2352:                                             ; preds = %2345
  %2353 = add nuw nsw i32 %2349, 10
  %2354 = zext i32 %2353 to i64
  %2355 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2347, i64 %2354
  %2356 = load i32, i32* %2355, align 4
  %2357 = icmp eq i32 %2283, 15
  br i1 %2357, label %2363, label %2379

2358:                                             ; preds = %2345
  %2359 = add nsw i32 %2283, -14
  %2360 = icmp slt i32 %2359, 32
  br i1 %2360, label %2361, label %2371

2361:                                             ; preds = %2358
  %2362 = sext i32 %2359 to i64
  br label %2363

2363:                                             ; preds = %2361, %2352
  %2364 = phi i32 [ 0, %2361 ], [ %2356, %2352 ]
  %2365 = phi i64 [ %2362, %2361 ], [ 1, %2352 ]
  %2366 = getelementptr inbounds [32 x i32], [32 x i32]* @golomb_bits_cost, i64 0, i64 %2365
  %2367 = load i32, i32* %2366, align 4
  %2368 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ [17 x i32], [15 x i32] }>* @golomb_cost_diff to [32 x i32]*), i64 0, i64 %2365
  %2369 = load i32, i32* %2368, align 4
  %2370 = add nsw i32 %2369, %2364
  br label %2379

2371:                                             ; preds = %2358
  %2372 = call i32 @llvm.ctlz.i32(i32 %2359, i1 true) #7, !range !2
  %2373 = shl nuw nsw i32 %2372, 10
  %2374 = xor i32 %2373, 32256
  %2375 = add nsw i32 %2283, -15
  %2376 = and i32 %2359, %2375
  %2377 = icmp eq i32 %2376, 0
  %2378 = select i1 %2377, i32 1024, i32 0
  br label %2379

2379:                                             ; preds = %2371, %2363, %2352
  %2380 = phi i32 [ %2356, %2352 ], [ %2378, %2371 ], [ %2370, %2363 ]
  %2381 = phi i32 [ 0, %2352 ], [ %2374, %2371 ], [ %2367, %2363 ]
  %2382 = sext i32 %2350 to i64
  %2383 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2347, i64 %2382
  %2384 = load i32, i32* %2383, align 4
  %2385 = add i32 %2381, %2311
  %2386 = add i32 %2385, %2384
  %2387 = add nsw i32 %2380, %2312
  br label %2388

2388:                                             ; preds = %2379, %2303
  %2389 = phi i32 [ %2387, %2379 ], [ %2307, %2303 ]
  %2390 = phi i32 [ %2386, %2379 ], [ %2308, %2303 ]
  %2391 = sub nsw i32 %2390, %2389
  %2392 = icmp sgt i32 %2288, %2293
  br i1 %2392, label %2393, label %2396

2393:                                             ; preds = %2388
  %2394 = load i32, i32* %15, align 4
  %2395 = add nsw i32 %2394, %2390
  store i32 %2395, i32* %15, align 4
  br label %2438

2396:                                             ; preds = %2388
  %2397 = sub nsw i32 %2288, %2293
  %2398 = shl i32 %2397, %26
  %2399 = sext i32 %2398 to i64
  %2400 = sext i32 %2390 to i64
  %2401 = mul nsw i64 %118, %2400
  %2402 = add nsw i64 %2401, 256
  %2403 = ashr i64 %2402, 9
  %2404 = shl nsw i64 %2399, 7
  %2405 = mul i64 %2404, %2399
  %2406 = add nsw i64 %2403, %2405
  %2407 = add nsw i32 %2283, -1
  %2408 = mul nsw i32 %2407, %2222
  %2409 = ashr i32 %2408, %26
  %2410 = sub nsw i32 %2288, %2409
  %2411 = shl i32 %2410, %26
  %2412 = sext i32 %2411 to i64
  %2413 = sext i32 %2391 to i64
  %2414 = mul nsw i64 %118, %2413
  %2415 = add nsw i64 %2414, 256
  %2416 = ashr i64 %2415, 9
  %2417 = shl nsw i64 %2412, 7
  %2418 = mul i64 %2417, %2412
  %2419 = add nsw i64 %2416, %2418
  %2420 = icmp slt i64 %2419, %2406
  br i1 %2420, label %2421, label %2433

2421:                                             ; preds = %2396
  %2422 = lshr i32 %2224, 31
  %2423 = ashr i32 %2224, 31
  %2424 = xor i32 %2407, %2423
  %2425 = add nsw i32 %2424, %2422
  store i32 %2425, i32* %2223, align 4
  %2426 = xor i32 %2409, %2423
  %2427 = add nsw i32 %2426, %2422
  store i32 %2427, i32* %2289, align 4
  %2428 = icmp slt i32 %2407, 127
  %2429 = select i1 %2428, i32 %2407, i32 127
  %2430 = trunc i32 %2429 to i8
  store i8 %2430, i8* %2229, align 1
  %2431 = load i32, i32* %15, align 4
  %2432 = add nsw i32 %2431, %2391
  br label %2436

2433:                                             ; preds = %2396
  %2434 = load i32, i32* %15, align 4
  %2435 = add nsw i32 %2434, %2390
  br label %2436

2436:                                             ; preds = %2433, %2421
  %2437 = phi i32 [ %2435, %2433 ], [ %2432, %2421 ]
  store i32 %2437, i32* %15, align 4
  br label %2438

2438:                                             ; preds = %2274, %2393, %2436
  %2439 = add nsw i64 %2204, -1
  %2440 = icmp sgt i64 %2439, 0
  br i1 %2440, label %2203, label %2680

2441:                                             ; preds = %1920, %2675
  %2442 = phi i64 [ %1935, %1920 ], [ %2676, %2675 ]
  %2443 = getelementptr inbounds i16, i16* %25, i64 %2442
  %2444 = load i16, i16* %2443, align 2
  %2445 = sext i16 %2444 to i32
  %2446 = icmp ne i16 %2444, 0
  %2447 = zext i1 %2446 to i64
  %2448 = getelementptr inbounds i16, i16* %34, i64 %2447
  %2449 = load i16, i16* %2448, align 2
  %2450 = sext i16 %2449 to i32
  %2451 = sext i16 %2444 to i64
  br i1 %1921, label %2459, label %2452

2452:                                             ; preds = %2441
  %2453 = getelementptr inbounds i8, i8* %36, i64 %2451
  %2454 = load i8, i8* %2453, align 1
  %2455 = zext i8 %2454 to i32
  %2456 = mul nsw i32 %2455, %2450
  %2457 = add nsw i32 %2456, 16
  %2458 = ashr i32 %2457, 5
  br label %2459

2459:                                             ; preds = %2452, %2441
  %2460 = phi i32 [ %2458, %2452 ], [ %2450, %2441 ]
  %2461 = getelementptr inbounds i32, i32* %41, i64 %2451
  %2462 = load i32, i32* %2461, align 4
  %2463 = ashr i32 %2445, %82
  %2464 = shl nsw i32 %2463, 2
  %2465 = add nsw i32 %2464, %2445
  %2466 = sext i32 %2465 to i64
  %2467 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2466
  %2468 = getelementptr inbounds i8, i8* %2467, i64 1
  %2469 = load i8, i8* %2468, align 1
  %2470 = zext i8 %2469 to i64
  %2471 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2470
  %2472 = load i8, i8* %2471, align 1
  %2473 = zext i8 %2472 to i32
  %2474 = getelementptr inbounds i8, i8* %2467, i64 %1924
  %2475 = load i8, i8* %2474, align 1
  %2476 = zext i8 %2475 to i64
  %2477 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2476
  %2478 = load i8, i8* %2477, align 1
  %2479 = zext i8 %2478 to i32
  %2480 = getelementptr inbounds i8, i8* %2467, i64 %1927
  %2481 = load i8, i8* %2480, align 1
  %2482 = zext i8 %2481 to i64
  %2483 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2482
  %2484 = load i8, i8* %2483, align 1
  %2485 = zext i8 %2484 to i32
  %2486 = getelementptr inbounds i8, i8* %2467, i64 %1930
  %2487 = load i8, i8* %2486, align 1
  %2488 = zext i8 %2487 to i64
  %2489 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2488
  %2490 = load i8, i8* %2489, align 1
  %2491 = zext i8 %2490 to i32
  %2492 = getelementptr inbounds i8, i8* %2467, i64 %1933
  %2493 = load i8, i8* %2492, align 1
  %2494 = zext i8 %2493 to i64
  %2495 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %2494
  %2496 = load i8, i8* %2495, align 1
  %2497 = zext i8 %2496 to i32
  %2498 = add nuw nsw i32 %2473, 1
  %2499 = add nuw nsw i32 %2498, %2479
  %2500 = add nuw nsw i32 %2499, %2485
  %2501 = add nuw nsw i32 %2500, %2491
  %2502 = add nuw nsw i32 %2501, %2497
  %2503 = lshr i32 %2502, 1
  %2504 = icmp ult i32 %2503, 4
  %2505 = select i1 %2504, i32 %2503, i32 4
  %2506 = sext i32 %2463 to i64
  %2507 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %2506
  %2508 = load i32, i32* %2507, align 4
  %2509 = add nsw i32 %2505, %2508
  %2510 = icmp eq i32 %2462, 0
  br i1 %2510, label %2511, label %2517

2511:                                             ; preds = %2459
  %2512 = sext i32 %2509 to i64
  %2513 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2512, i64 0
  %2514 = load i32, i32* %2513, align 4
  %2515 = load i32, i32* %15, align 4
  %2516 = add nsw i32 %2515, %2514
  store i32 %2516, i32* %15, align 4
  br label %2675

2517:                                             ; preds = %2459
  %2518 = icmp slt i32 %2462, 0
  %2519 = sub nsw i32 0, %2462
  %2520 = select i1 %2518, i32 %2519, i32 %2462
  %2521 = getelementptr inbounds i32, i32* %47, i64 %2451
  %2522 = load i32, i32* %2521, align 4
  %2523 = icmp slt i32 %2522, 0
  %2524 = sub nsw i32 0, %2522
  %2525 = select i1 %2523, i32 %2524, i32 %2522
  %2526 = getelementptr inbounds i32, i32* %44, i64 %2451
  %2527 = load i32, i32* %2526, align 4
  %2528 = icmp slt i32 %2527, 0
  %2529 = sub nsw i32 0, %2527
  %2530 = select i1 %2528, i32 %2529, i32 %2527
  %2531 = sext i32 %2509 to i64
  %2532 = icmp slt i32 %2520, 3
  %2533 = select i1 %2532, i32 %2520, i32 3
  %2534 = zext i32 %2533 to i64
  %2535 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2531, i64 %2534
  %2536 = load i32, i32* %2535, align 4
  %2537 = icmp slt i32 %2520, 4
  br i1 %2537, label %2540, label %2538

2538:                                             ; preds = %2517
  %2539 = add nsw i32 %2536, 512
  br label %2547

2540:                                             ; preds = %2517
  %2541 = add nuw nsw i32 %2520, 4
  %2542 = zext i32 %2541 to i64
  %2543 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 2, i64 %2531, i64 %2542
  %2544 = load i32, i32* %2543, align 4
  %2545 = add nsw i32 %2536, 512
  %2546 = icmp eq i32 %2520, 3
  br i1 %2546, label %2547, label %2625

2547:                                             ; preds = %2540, %2538
  %2548 = phi i32 [ %2539, %2538 ], [ %2545, %2540 ]
  %2549 = phi i32 [ 0, %2538 ], [ %2544, %2540 ]
  %2550 = shl i32 %2463, %82
  %2551 = sub nsw i32 %2445, %2550
  %2552 = mul nsw i32 %2463, %1923
  %2553 = add nsw i32 %2551, %2552
  %2554 = add nsw i32 %2553, 1
  %2555 = sext i32 %2554 to i64
  %2556 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2555
  %2557 = load i8, i8* %2556, align 1
  %2558 = zext i8 %2557 to i32
  %2559 = add nsw i32 %2553, %1923
  %2560 = sext i32 %2559 to i64
  %2561 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2560
  %2562 = load i8, i8* %2561, align 1
  %2563 = zext i8 %2562 to i32
  %2564 = add nsw i32 %2553, %1934
  %2565 = sext i32 %2564 to i64
  %2566 = getelementptr inbounds [1312 x i8], [1312 x i8]* %14, i64 0, i64 %2565
  %2567 = load i8, i8* %2566, align 1
  %2568 = zext i8 %2567 to i32
  %2569 = add nuw nsw i32 %2558, 1
  %2570 = add nuw nsw i32 %2569, %2563
  %2571 = add nuw nsw i32 %2570, %2568
  %2572 = icmp ult i32 %2571, 12
  %2573 = lshr i32 %2571, 1
  %2574 = select i1 %2572, i32 %2573, i32 6
  %2575 = icmp eq i16 %2444, 0
  br i1 %2575, label %2582, label %2576

2576:                                             ; preds = %2547
  %2577 = icmp eq i32 %2463, 0
  br i1 %2577, label %2578, label %2580

2578:                                             ; preds = %2576
  %2579 = add nuw nsw i32 %2574, 7
  br label %2582

2580:                                             ; preds = %2576
  %2581 = add nuw nsw i32 %2574, 14
  br label %2582

2582:                                             ; preds = %2580, %2578, %2547
  %2583 = phi i32 [ %2581, %2580 ], [ %2579, %2578 ], [ %2574, %2547 ]
  %2584 = sext i32 %2583 to i64
  %2585 = icmp slt i32 %2520, 15
  %2586 = select i1 %2585, i32 %2520, i32 15
  %2587 = add nsw i32 %2586, -3
  %2588 = icmp slt i32 %2520, 16
  br i1 %2588, label %2589, label %2595

2589:                                             ; preds = %2582
  %2590 = add nuw nsw i32 %2586, 10
  %2591 = zext i32 %2590 to i64
  %2592 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2584, i64 %2591
  %2593 = load i32, i32* %2592, align 4
  %2594 = icmp eq i32 %2520, 15
  br i1 %2594, label %2600, label %2616

2595:                                             ; preds = %2582
  %2596 = add nsw i32 %2520, -14
  %2597 = icmp slt i32 %2596, 32
  br i1 %2597, label %2598, label %2608

2598:                                             ; preds = %2595
  %2599 = sext i32 %2596 to i64
  br label %2600

2600:                                             ; preds = %2598, %2589
  %2601 = phi i32 [ 0, %2598 ], [ %2593, %2589 ]
  %2602 = phi i64 [ %2599, %2598 ], [ 1, %2589 ]
  %2603 = getelementptr inbounds [32 x i32], [32 x i32]* @golomb_bits_cost, i64 0, i64 %2602
  %2604 = load i32, i32* %2603, align 4
  %2605 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ [17 x i32], [15 x i32] }>* @golomb_cost_diff to [32 x i32]*), i64 0, i64 %2602
  %2606 = load i32, i32* %2605, align 4
  %2607 = add nsw i32 %2606, %2601
  br label %2616

2608:                                             ; preds = %2595
  %2609 = call i32 @llvm.ctlz.i32(i32 %2596, i1 true) #7, !range !2
  %2610 = shl nuw nsw i32 %2609, 10
  %2611 = xor i32 %2610, 32256
  %2612 = add nsw i32 %2520, -15
  %2613 = and i32 %2596, %2612
  %2614 = icmp eq i32 %2613, 0
  %2615 = select i1 %2614, i32 1024, i32 0
  br label %2616

2616:                                             ; preds = %2608, %2600, %2589
  %2617 = phi i32 [ %2593, %2589 ], [ %2615, %2608 ], [ %2607, %2600 ]
  %2618 = phi i32 [ 0, %2589 ], [ %2611, %2608 ], [ %2604, %2600 ]
  %2619 = sext i32 %2587 to i64
  %2620 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %97, i64 %98, i32 5, i64 %2584, i64 %2619
  %2621 = load i32, i32* %2620, align 4
  %2622 = add i32 %2618, %2548
  %2623 = add i32 %2622, %2621
  %2624 = add nsw i32 %2617, %2549
  br label %2625

2625:                                             ; preds = %2616, %2540
  %2626 = phi i32 [ %2624, %2616 ], [ %2544, %2540 ]
  %2627 = phi i32 [ %2623, %2616 ], [ %2545, %2540 ]
  %2628 = sub nsw i32 %2627, %2626
  %2629 = icmp sgt i32 %2525, %2530
  br i1 %2629, label %2630, label %2633

2630:                                             ; preds = %2625
  %2631 = load i32, i32* %15, align 4
  %2632 = add nsw i32 %2631, %2627
  store i32 %2632, i32* %15, align 4
  br label %2675

2633:                                             ; preds = %2625
  %2634 = sub nsw i32 %2525, %2530
  %2635 = shl i32 %2634, %26
  %2636 = sext i32 %2635 to i64
  %2637 = sext i32 %2627 to i64
  %2638 = mul nsw i64 %118, %2637
  %2639 = add nsw i64 %2638, 256
  %2640 = ashr i64 %2639, 9
  %2641 = shl nsw i64 %2636, 7
  %2642 = mul i64 %2641, %2636
  %2643 = add nsw i64 %2640, %2642
  %2644 = add nsw i32 %2520, -1
  %2645 = mul nsw i32 %2644, %2460
  %2646 = ashr i32 %2645, %26
  %2647 = sub nsw i32 %2525, %2646
  %2648 = shl i32 %2647, %26
  %2649 = sext i32 %2648 to i64
  %2650 = sext i32 %2628 to i64
  %2651 = mul nsw i64 %118, %2650
  %2652 = add nsw i64 %2651, 256
  %2653 = ashr i64 %2652, 9
  %2654 = shl nsw i64 %2649, 7
  %2655 = mul i64 %2654, %2649
  %2656 = add nsw i64 %2653, %2655
  %2657 = icmp slt i64 %2656, %2643
  br i1 %2657, label %2658, label %2670

2658:                                             ; preds = %2633
  %2659 = lshr i32 %2462, 31
  %2660 = ashr i32 %2462, 31
  %2661 = xor i32 %2644, %2660
  %2662 = add nsw i32 %2661, %2659
  store i32 %2662, i32* %2461, align 4
  %2663 = xor i32 %2646, %2660
  %2664 = add nsw i32 %2663, %2659
  store i32 %2664, i32* %2526, align 4
  %2665 = icmp slt i32 %2644, 127
  %2666 = select i1 %2665, i32 %2644, i32 127
  %2667 = trunc i32 %2666 to i8
  store i8 %2667, i8* %2467, align 1
  %2668 = load i32, i32* %15, align 4
  %2669 = add nsw i32 %2668, %2628
  br label %2673

2670:                                             ; preds = %2633
  %2671 = load i32, i32* %15, align 4
  %2672 = add nsw i32 %2671, %2627
  br label %2673

2673:                                             ; preds = %2670, %2658
  %2674 = phi i32 [ %2672, %2670 ], [ %2669, %2658 ]
  store i32 %2674, i32* %15, align 4
  br label %2675

2675:                                             ; preds = %2511, %2630, %2673
  %2676 = add nsw i64 %2442, -1
  %2677 = icmp sgt i64 %2676, 0
  br i1 %2677, label %2441, label %2682

2678:                                             ; preds = %2200
  %2679 = trunc i64 %2201 to i32
  br label %2684

2680:                                             ; preds = %2438
  %2681 = trunc i64 %2439 to i32
  br label %2684

2682:                                             ; preds = %2675
  %2683 = trunc i64 %2676 to i32
  br label %2684

2684:                                             ; preds = %2682, %2680, %2678, %1918, %1936, %1946, %1916
  %2685 = phi i32 [ %1842, %1916 ], [ %1842, %1946 ], [ %1842, %1936 ], [ %1842, %1918 ], [ %2679, %2678 ], [ %2681, %2680 ], [ %2683, %2682 ]
  %2686 = icmp eq i32 %2685, 0
  br i1 %2686, label %2687, label %2691

2687:                                             ; preds = %2684
  %2688 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2688) #7
  store i64 0, i64* %18, align 8
  %2689 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %6, i64 0, i32 1
  %2690 = load i32, i32* %2689, align 4
  call fastcc void @update_coeff_general(i32* nonnull %15, i64* nonnull %18, i32 0, i32 %1917, i8 zeroext %4, i8 zeroext %59, i32 %82, i32 %85, i64 %118, i32 %26, i32 %2690, i16* %34, i16* %25, %struct.LV_MAP_COEFF_COST* %99, i32* %47, i32* %41, i32* %44, i8* nonnull %119, i8* %36)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2688) #7
  br label %2691

2691:                                             ; preds = %2687, %2684
  %2692 = icmp eq i32 %1917, 0
  br i1 %2692, label %2693, label %2696

2693:                                             ; preds = %2691
  %2694 = load i32, i32* %15, align 4
  %2695 = add nsw i32 %2694, %130
  br label %2704

2696:                                             ; preds = %2691
  %2697 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %2698 = load i8, i8* %2697, align 1, !range !5
  %2699 = zext i8 %2698 to i32
  %2700 = call fastcc i32 @get_tx_type_cost(%struct.macroblock* %1, %struct.macroblockd* %19, i32 %2, i8 zeroext %4, i8 zeroext %5, i32 %2699)
  %2701 = add nsw i32 %2700, %128
  %2702 = load i32, i32* %15, align 4
  %2703 = add nsw i32 %2701, %2702
  br label %2704

2704:                                             ; preds = %2696, %2693
  %2705 = phi i32 [ %2703, %2696 ], [ %2695, %2693 ]
  store i32 %2705, i32* %15, align 4
  %2706 = trunc i32 %1917 to i16
  %2707 = load i16*, i16** %27, align 8
  %2708 = getelementptr inbounds i16, i16* %2707, i64 %29
  store i16 %2706, i16* %2708, align 2
  %2709 = load i16*, i16** %27, align 8
  %2710 = getelementptr inbounds i16, i16* %2709, i64 %29
  %2711 = load i16, i16* %2710, align 2
  %2712 = zext i16 %2711 to i32
  %2713 = call zeroext i8 @av1_get_txb_entropy_context(i32* %41, %struct.SCAN_ORDER* %23, i32 %2712) #7
  %2714 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %20, i32 5
  %2715 = load i8*, i8** %2714, align 8
  %2716 = getelementptr inbounds i8, i8* %2715, i64 %29
  store i8 %2713, i8* %2716, align 1
  %2717 = load i32, i32* %15, align 4
  store i32 %2717, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %176) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %164) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #7
  call void @llvm.lifetime.end.p0i8(i64 1312, i8* nonnull %119) #7
  ret i32 %1917
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @av1_get_tx_scale(i8 zeroext) local_unnamed_addr #2

declare i8* @av1_get_iqmatrix(%struct.CommonQuantParams*, %struct.macroblockd*, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @update_coeff_general(i32* nocapture, i64* nocapture, i32, i32, i8 zeroext, i8 zeroext, i32, i32, i64, i32, i32, i16* nocapture readonly, i16* nocapture readonly, %struct.LV_MAP_COEFF_COST* nocapture readonly, i32* nocapture readonly, i32* nocapture, i32* nocapture, i8* nocapture, i8* readonly) unnamed_addr #3 {
  %20 = sext i32 %2 to i64
  %21 = getelementptr inbounds i16, i16* %12, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = icmp ne i16 %22, 0
  %25 = zext i1 %24 to i64
  %26 = getelementptr inbounds i16, i16* %11, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = icmp eq i8* %18, null
  %30 = sext i16 %22 to i64
  br i1 %29, label %38, label %31

31:                                               ; preds = %19
  %32 = getelementptr inbounds i8, i8* %18, i64 %30
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = mul nsw i32 %34, %28
  %36 = add nsw i32 %35, 16
  %37 = ashr i32 %36, 5
  br label %38

38:                                               ; preds = %19, %31
  %39 = phi i32 [ %37, %31 ], [ %28, %19 ]
  %40 = getelementptr inbounds i32, i32* %15, i64 %30
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %3, -1
  %43 = icmp eq i32 %42, %2
  %44 = zext i1 %43 to i32
  br i1 %43, label %45, label %55

45:                                               ; preds = %38
  %46 = icmp eq i32 %2, 0
  br i1 %46, label %175, label %47

47:                                               ; preds = %45
  %48 = shl i32 %7, %6
  %49 = ashr i32 %48, 3
  %50 = icmp slt i32 %49, %2
  br i1 %50, label %51, label %175

51:                                               ; preds = %47
  %52 = ashr i32 %48, 2
  %53 = icmp slt i32 %52, %2
  %54 = select i1 %53, i32 3, i32 2
  br label %175

55:                                               ; preds = %38
  %56 = ashr i32 %23, %6
  %57 = shl nsw i32 %56, 2
  %58 = add nsw i32 %57, %23
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %17, i64 %59
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl i32 1, %6
  %68 = add nsw i32 %67, 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %60, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add nuw nsw i32 %75, %66
  switch i8 %5, label %121 [
    i8 0, label %77
    i8 2, label %97
  ]

77:                                               ; preds = %55
  %78 = add nsw i32 %67, 5
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %60, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = add nuw nsw i32 %76, %85
  %87 = getelementptr inbounds i8, i8* %60, i64 2
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i64
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %86, %92
  %94 = shl i32 2, %6
  %95 = add nsw i32 %94, 8
  %96 = sext i32 %95 to i64
  br label %136

97:                                               ; preds = %55
  %98 = shl i32 2, %6
  %99 = add nsw i32 %98, 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %60, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i64
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nuw nsw i32 %76, %106
  %108 = shl i32 3, %6
  %109 = add nsw i32 %108, 12
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %60, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nuw nsw i32 %107, %116
  %118 = shl i32 4, %6
  %119 = add nsw i32 %118, 16
  %120 = sext i32 %119 to i64
  br label %136

121:                                              ; preds = %55
  %122 = getelementptr inbounds i8, i8* %60, i64 2
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = add nuw nsw i32 %76, %127
  %129 = getelementptr inbounds i8, i8* %60, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %128, %134
  br label %136

136:                                              ; preds = %121, %97, %77
  %137 = phi i64 [ 4, %121 ], [ %120, %97 ], [ %96, %77 ]
  %138 = phi i32 [ %135, %121 ], [ %117, %97 ], [ %93, %77 ]
  %139 = zext i8 %5 to i32
  %140 = or i32 %23, %139
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %175, label %142

142:                                              ; preds = %136
  %143 = getelementptr inbounds i8, i8* %60, i64 %137
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [256 x i8], [256 x i8]* @clip_max3, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = add nuw nsw i32 %138, %148
  %150 = add nuw nsw i32 %149, 1
  %151 = ashr i32 %150, 1
  %152 = icmp slt i32 %151, 4
  %153 = select i1 %152, i32 %151, i32 4
  switch i8 %5, label %175 [
    i8 0, label %154
    i8 1, label %162
    i8 2, label %170
  ]

154:                                              ; preds = %142
  %155 = zext i8 %4 to i64
  %156 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_nz_map_ctx_offset, i64 0, i64 %155
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 %30
  %159 = load i8, i8* %158, align 1
  %160 = sext i8 %159 to i32
  %161 = add nsw i32 %153, %160
  br label %175

162:                                              ; preds = %142
  %163 = shl i32 -1, %6
  %164 = xor i32 %163, -1
  %165 = and i32 %23, %164
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %166
  %168 = load i32, i32* %167, align 4
  %169 = add nsw i32 %168, %153
  br label %175

170:                                              ; preds = %142
  %171 = sext i32 %56 to i64
  %172 = getelementptr inbounds [32 x i32], [32 x i32]* @nz_map_ctx_offset_1d, i64 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %173, %153
  br label %175

175:                                              ; preds = %45, %47, %51, %136, %142, %154, %162, %170
  %176 = phi i32 [ 0, %45 ], [ 1, %47 ], [ %54, %51 ], [ 0, %136 ], [ %174, %170 ], [ %169, %162 ], [ %161, %154 ], [ 0, %142 ]
  %177 = icmp eq i32 %41, 0
  br i1 %177, label %178, label %184

178:                                              ; preds = %175
  %179 = sext i32 %176 to i64
  %180 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %13, i64 0, i32 2, i64 %179, i64 0
  %181 = load i32, i32* %180, align 4
  %182 = load i32, i32* %0, align 4
  %183 = add nsw i32 %182, %181
  store i32 %183, i32* %0, align 4
  br label %256

184:                                              ; preds = %175
  %185 = lshr i32 %41, 31
  %186 = icmp slt i32 %41, 0
  %187 = sub nsw i32 0, %41
  %188 = select i1 %186, i32 %187, i32 %41
  %189 = getelementptr inbounds i32, i32* %14, i64 %30
  %190 = load i32, i32* %189, align 4
  %191 = getelementptr inbounds i32, i32* %16, i64 %30
  %192 = load i32, i32* %191, align 4
  %193 = sub nsw i32 %190, %192
  %194 = shl i32 %193, %9
  %195 = sext i32 %194 to i64
  %196 = mul nsw i64 %195, %195
  %197 = shl i32 %190, %9
  %198 = sext i32 %197 to i64
  %199 = mul nsw i64 %198, %198
  %200 = tail call fastcc i32 @get_coeff_cost_general(i32 %44, i32 %23, i32 %188, i32 %185, i32 %176, i32 %10, %struct.LV_MAP_COEFF_COST* %13, i32 %6, i8 zeroext %5, i8* %17)
  %201 = sext i32 %200 to i64
  %202 = mul nsw i64 %201, %8
  %203 = add nsw i64 %202, 256
  %204 = ashr i64 %203, 9
  %205 = shl i64 %196, 7
  %206 = add nsw i64 %204, %205
  %207 = icmp eq i32 %188, 1
  br i1 %207, label %208, label %212

208:                                              ; preds = %184
  %209 = sext i32 %176 to i64
  %210 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %13, i64 0, i32 2, i64 %209, i64 0
  %211 = load i32, i32* %210, align 4
  br label %226

212:                                              ; preds = %184
  %213 = add nsw i32 %188, -1
  %214 = ashr i32 %41, 31
  %215 = xor i32 %213, %214
  %216 = add nsw i32 %215, %185
  %217 = mul nsw i32 %213, %39
  %218 = ashr i32 %217, %9
  %219 = xor i32 %218, %214
  %220 = add nsw i32 %219, %185
  %221 = sub nsw i32 %190, %220
  %222 = shl i32 %221, %9
  %223 = sext i32 %222 to i64
  %224 = mul nsw i64 %223, %223
  %225 = tail call fastcc i32 @get_coeff_cost_general(i32 %44, i32 %23, i32 %213, i32 %185, i32 %176, i32 %10, %struct.LV_MAP_COEFF_COST* %13, i32 %6, i8 zeroext %5, i8* %17)
  br label %226

226:                                              ; preds = %212, %208
  %227 = phi i32 [ 0, %208 ], [ %216, %212 ]
  %228 = phi i32 [ 0, %208 ], [ %220, %212 ]
  %229 = phi i32 [ 0, %208 ], [ %213, %212 ]
  %230 = phi i64 [ %199, %208 ], [ %224, %212 ]
  %231 = phi i32 [ %211, %208 ], [ %225, %212 ]
  %232 = sext i32 %231 to i64
  %233 = mul nsw i64 %232, %8
  %234 = add nsw i64 %233, 256
  %235 = ashr i64 %234, 9
  %236 = shl i64 %230, 7
  %237 = add nsw i64 %235, %236
  %238 = icmp slt i64 %237, %206
  br i1 %238, label %239, label %248

239:                                              ; preds = %226
  store i32 %227, i32* %40, align 4
  store i32 %228, i32* %191, align 4
  %240 = icmp slt i32 %229, 127
  %241 = select i1 %240, i32 %229, i32 127
  %242 = trunc i32 %241 to i8
  %243 = ashr i32 %23, %6
  %244 = shl nsw i32 %243, 2
  %245 = add nsw i32 %244, %23
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %17, i64 %246
  store i8 %242, i8* %247, align 1
  br label %248

248:                                              ; preds = %226, %239
  %249 = phi i32 [ %231, %239 ], [ %200, %226 ]
  %250 = phi i64 [ %230, %239 ], [ %196, %226 ]
  %251 = load i32, i32* %0, align 4
  %252 = add nsw i32 %251, %249
  store i32 %252, i32* %0, align 4
  %253 = sub nsw i64 %250, %199
  %254 = load i64, i64* %1, align 8
  %255 = add nsw i64 %253, %254
  store i64 %255, i64* %1, align 8
  br label %256

256:                                              ; preds = %248, %178
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @get_tx_type_cost(%struct.macroblock* nocapture readonly, %struct.macroblockd* nocapture readonly, i32, i8 zeroext, i8 zeroext, i32) unnamed_addr #4 {
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %105, label %8

8:                                                ; preds = %6
  %9 = zext i8 %3 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %13 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %12, align 8
  %14 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %13, align 8
  %15 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 28
  %16 = load i16, i16* %15, align 1
  %17 = trunc i16 %16 to i8
  %18 = icmp sgt i8 %17, -1
  br i1 %18, label %19, label %24

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 6, i64 0
  %21 = load i8, i8* %20, align 8
  %22 = icmp sgt i8 %21, 0
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %8, %19
  %25 = phi i32 [ 1, %8 ], [ %23, %19 ]
  %26 = lshr i64 399376, %9
  %27 = and i64 %26, 1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %105

29:                                               ; preds = %24
  %30 = lshr i64 99848, %9
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = trunc i32 %25 to i8
  br label %43

35:                                               ; preds = %29
  %36 = icmp eq i32 %5, 0
  br i1 %36, label %37, label %46

37:                                               ; preds = %35
  %38 = zext i32 %25 to i64
  %39 = lshr i64 394756, %9
  %40 = and i64 %39, 1
  %41 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %38, i64 %40
  %42 = load i8, i8* %41, align 1
  br label %43

43:                                               ; preds = %33, %37
  %44 = phi i8 [ %34, %33 ], [ %42, %37 ]
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %105, label %46

46:                                               ; preds = %35, %43
  %47 = and i16 %16, 7
  %48 = zext i16 %47 to i64
  %49 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 42, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %105

52:                                               ; preds = %46
  %53 = lshr i64 99848, %9
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = trunc i32 %25 to i8
  br label %69

58:                                               ; preds = %52
  %59 = icmp eq i32 %5, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %58
  %61 = icmp eq i32 %25, 0
  %62 = select i1 %61, i8 2, i8 1
  br label %69

63:                                               ; preds = %58
  %64 = zext i32 %25 to i64
  %65 = lshr i64 394756, %9
  %66 = and i64 %65, 1
  %67 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %64, i64 %66
  %68 = load i8, i8* %67, align 1
  br label %69

69:                                               ; preds = %56, %60, %63
  %70 = phi i8 [ %57, %56 ], [ %62, %60 ], [ %68, %63 ]
  %71 = zext i32 %25 to i64
  %72 = zext i8 %70 to i64
  %73 = getelementptr inbounds [2 x [6 x i32]], [2 x [6 x i32]]* @ext_tx_set_index, i64 0, i64 %71, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %25, 0
  %76 = icmp sgt i32 %74, 0
  br i1 %75, label %84, label %77

77:                                               ; preds = %69
  br i1 %76, label %78, label %105

78:                                               ; preds = %77
  %79 = sext i32 %74 to i64
  %80 = zext i8 %11 to i64
  %81 = zext i8 %4 to i64
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 41, i64 %79, i64 %80, i64 %81
  %83 = load i32, i32* %82, align 4
  br label %105

84:                                               ; preds = %69
  br i1 %76, label %85, label %105

85:                                               ; preds = %84
  %86 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 19, i32 1
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 19, i32 0
  %91 = load i8, i8* %90, align 2
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [5 x i8], [5 x i8]* @fimode_to_intradir, i64 0, i64 %92
  br label %96

94:                                               ; preds = %85
  %95 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 2
  br label %96

96:                                               ; preds = %94, %89
  %97 = phi i8* [ %93, %89 ], [ %95, %94 ]
  %98 = load i8, i8* %97, align 1
  %99 = sext i32 %74 to i64
  %100 = zext i8 %11 to i64
  %101 = zext i8 %98 to i64
  %102 = zext i8 %4 to i64
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 20, i32 42, i64 %99, i64 %100, i64 %101, i64 %102
  %104 = load i32, i32* %103, align 4
  br label %105

105:                                              ; preds = %24, %43, %77, %84, %46, %78, %96, %6
  %106 = phi i32 [ 0, %6 ], [ %83, %78 ], [ %104, %96 ], [ 0, %46 ], [ 0, %43 ], [ 0, %84 ], [ 0, %77 ], [ 0, %24 ]
  ret i32 %106
}

declare zeroext i8 @av1_get_txb_entropy_context(i32*, %struct.SCAN_ORDER*, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_cost_coeffs_txb_estimate(%struct.macroblock* nocapture readonly, i32, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #4 {
  %6 = sext i32 %1 to i64
  %7 = zext i8 %3 to i64
  %8 = zext i8 %4 to i64
  %9 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %7, i64 %8, i32 0
  %10 = load i16*, i16** %9, align 16
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 2
  %12 = load i32*, i32** %11, align 8
  %13 = shl i32 %2, 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 4
  %17 = load i16*, i16** %16, align 8
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds i16, i16* %17, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = add nsw i32 %21, -1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %10, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i64
  %27 = getelementptr inbounds i32, i32* %15, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  %30 = sub nsw i32 0, %28
  %31 = select i1 %29, i32 %30, i32 %28
  %32 = shl i32 %31, 11
  %33 = add i32 %32, -2048
  %34 = icmp ugt i16 %20, 1
  br i1 %34, label %35, label %95

35:                                               ; preds = %5
  %36 = zext i16 %20 to i64
  %37 = add nsw i64 %36, -2
  %38 = and i64 %36, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %56

40:                                               ; preds = %35
  %41 = getelementptr inbounds i16, i16* %10, i64 %37
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i64
  %44 = getelementptr inbounds i32, i32* %15, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, 0
  %47 = sub nsw i32 0, %45
  %48 = select i1 %46, i32 %47, i32 %45
  %49 = icmp slt i32 %48, 14
  %50 = select i1 %49, i32 %48, i32 14
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %53, %33
  %55 = add nsw i64 %36, -3
  br label %56

56:                                               ; preds = %40, %35
  %57 = phi i64 [ %37, %35 ], [ %55, %40 ]
  %58 = phi i32 [ %33, %35 ], [ %54, %40 ]
  %59 = phi i32 [ undef, %35 ], [ %54, %40 ]
  %60 = icmp eq i64 %37, 0
  br i1 %60, label %95, label %61

61:                                               ; preds = %56, %61
  %62 = phi i64 [ %93, %61 ], [ %57, %56 ]
  %63 = phi i32 [ %92, %61 ], [ %58, %56 ]
  %64 = getelementptr inbounds i16, i16* %10, i64 %62
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i64
  %67 = getelementptr inbounds i32, i32* %15, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %68, 0
  %70 = sub nsw i32 0, %68
  %71 = select i1 %69, i32 %70, i32 %68
  %72 = icmp slt i32 %71, 14
  %73 = select i1 %72, i32 %71, i32 14
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, %63
  %78 = add nsw i64 %62, -1
  %79 = getelementptr inbounds i16, i16* %10, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i64
  %82 = getelementptr inbounds i32, i32* %15, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = icmp slt i32 %83, 0
  %85 = sub nsw i32 0, %83
  %86 = select i1 %84, i32 %85, i32 %83
  %87 = icmp slt i32 %86, 14
  %88 = select i1 %87, i32 %86, i32 14
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, %77
  %93 = add nsw i64 %62, -2
  %94 = icmp sgt i64 %78, 0
  br i1 %94, label %61, label %95

95:                                               ; preds = %56, %61, %5
  %96 = phi i32 [ %33, %5 ], [ %59, %56 ], [ %92, %61 ]
  %97 = mul nsw i32 %22, 1251
  %98 = add nsw i32 %96, %97
  ret i32 %98
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_cost_coeffs_txb(%struct.macroblock* nocapture readonly, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca [1312 x i8], align 16
  %10 = alloca [4096 x i8], align 16
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 4
  %13 = load i16*, i16** %12, align 8
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds i16, i16* %13, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = zext i8 %3 to i64
  %18 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %17
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = add nuw nsw i64 %20, 1
  %25 = add nuw nsw i64 %24, %23
  %26 = lshr i64 %25, 1
  %27 = icmp ne i32 %1, 0
  %28 = and i64 %26, 255
  %29 = zext i1 %27 to i64
  %30 = icmp eq i16 %16, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %7
  %32 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 0, i64 %34, i64 1
  %36 = load i32, i32* %35, align 4
  br label %460

37:                                               ; preds = %7
  %38 = zext i16 %16 to i32
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2
  %40 = zext i8 %4 to i64
  %41 = getelementptr inbounds [16 x i8], [16 x i8]* @tx_type_to_class, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 2
  %44 = load i32*, i32** %43, align 8
  %45 = shl i32 %2, 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  %48 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  switch i8 %3, label %50 [
    i8 4, label %51
    i8 12, label %51
    i8 11, label %51
    i8 18, label %60
    i8 17, label %63
  ]

50:                                               ; preds = %37
  br label %51

51:                                               ; preds = %50, %37, %37, %37
  %52 = phi i64 [ %17, %50 ], [ 3, %37 ], [ 3, %37 ], [ 3, %37 ]
  %53 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  switch i8 %3, label %55 [
    i8 4, label %56
    i8 12, label %56
    i8 11, label %56
    i8 18, label %60
    i8 17, label %63
  ]

55:                                               ; preds = %51
  br label %56

56:                                               ; preds = %55, %51, %51, %51
  %57 = phi i64 [ %17, %55 ], [ 3, %51 ], [ 3, %51 ], [ 3, %51 ]
  %58 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  switch i8 %3, label %66 [
    i8 4, label %67
    i8 12, label %67
    i8 11, label %67
    i8 18, label %60
    i8 17, label %63
  ]

60:                                               ; preds = %56, %51, %37
  %61 = phi i32 [ %59, %56 ], [ 32, %51 ], [ 32, %37 ]
  %62 = phi i32 [ %54, %56 ], [ %54, %51 ], [ 5, %37 ]
  br label %67

63:                                               ; preds = %56, %51, %37
  %64 = phi i32 [ %59, %56 ], [ 16, %51 ], [ 16, %37 ]
  %65 = phi i32 [ %54, %56 ], [ %54, %51 ], [ 4, %37 ]
  br label %67

66:                                               ; preds = %56
  br label %67

67:                                               ; preds = %66, %63, %60, %56, %56, %56
  %68 = phi i32 [ %59, %66 ], [ %64, %63 ], [ %61, %60 ], [ %59, %56 ], [ %59, %56 ], [ %59, %56 ]
  %69 = phi i32 [ %54, %66 ], [ %65, %63 ], [ %62, %60 ], [ %54, %56 ], [ %54, %56 ], [ %54, %56 ]
  %70 = phi i64 [ %17, %66 ], [ 9, %63 ], [ 10, %60 ], [ 3, %56 ], [ 3, %56 ], [ 3, %56 ]
  %71 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %17, i64 %40, i32 0
  %74 = load i16*, i16** %73, align 16
  %75 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1312, i8* nonnull %75) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 1312, i1 false) #7
  %76 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %76) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %76, i8 -86, i64 4096, i1 false) #7
  %77 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %17
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i64
  %80 = sext i32 %49 to i64
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 0, i64 %80, i64 0
  %82 = load i32, i32* %81, align 4
  %83 = load void (i32*, i32, i32, i8*)*, void (i32*, i32, i32, i8*)** @av1_txb_init_levels, align 8
  call void %83(i32* %47, i32 %68, i32 %72, i8* nonnull %75) #7
  %84 = call fastcc i32 @get_tx_type_cost(%struct.macroblock* %0, %struct.macroblockd* %39, i32 %1, i8 zeroext %3, i8 zeroext %4, i32 %6) #7
  %85 = add nsw i32 %84, %82
  %86 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #7
  store i32 -1431655766, i32* %8, align 4
  %87 = call i32 @av1_get_eob_pos_token(i32 %38, i32* nonnull %8) #7
  %88 = add nsw i64 %40, -10
  %89 = icmp ult i64 %88, 6
  %90 = zext i1 %89 to i64
  %91 = add nsw i32 %87, -1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 1, i64 %79, i64 %29, i32 0, i64 %90, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %87 to i64
  %96 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = icmp sgt i16 %97, 0
  br i1 %98, label %99, label %116

99:                                               ; preds = %67
  %100 = sext i16 %97 to i32
  %101 = add nsw i32 %87, -3
  %102 = add nsw i32 %100, -1
  %103 = load i32, i32* %8, align 4
  %104 = shl i32 1, %102
  %105 = and i32 %103, %104
  %106 = icmp ne i32 %105, 0
  %107 = sext i32 %101 to i64
  %108 = zext i1 %106 to i64
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 3, i64 %107, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i16 %97, 1
  %112 = shl nsw i32 %102, 9
  %113 = select i1 %111, i32 0, i32 %112
  %114 = add i32 %113, %94
  %115 = add i32 %114, %110
  br label %116

116:                                              ; preds = %99, %67
  %117 = phi i32 [ %94, %67 ], [ %115, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #7
  %118 = add nsw i32 %85, %117
  call void @av1_get_nz_map_contexts_sse2(i8* nonnull %75, i16* %74, i16 zeroext %16, i8 zeroext %3, i8 zeroext %42, i8* nonnull %76) #7
  %119 = add nsw i32 %38, -1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %74, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = sext i16 %122 to i32
  %124 = sext i16 %122 to i64
  %125 = getelementptr inbounds i32, i32* %47, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp slt i32 %126, 0
  %128 = sub nsw i32 0, %126
  %129 = select i1 %127, i32 %128, i32 %126
  %130 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %124
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i64
  %133 = icmp slt i32 %129, 3
  %134 = select i1 %133, i32 %129, i32 3
  %135 = add nsw i32 %134, -1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 1, i64 %132, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = add nsw i32 %118, %138
  %140 = icmp eq i32 %126, 0
  br i1 %140, label %199, label %141

141:                                              ; preds = %116
  %142 = icmp sgt i32 %129, 2
  br i1 %142, label %143, label %185

143:                                              ; preds = %141
  %144 = ashr i32 %123, %69
  %145 = shl i32 %144, %69
  %146 = sub nsw i32 %123, %145
  %147 = icmp eq i16 %122, 0
  br i1 %147, label %167, label %148

148:                                              ; preds = %143
  %149 = icmp ult i8 %4, 10
  %150 = icmp slt i32 %144, 2
  %151 = and i1 %149, %150
  %152 = icmp slt i32 %146, 2
  %153 = and i1 %151, %152
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = lshr i64 43008, %40
  %156 = and i64 %155, 1
  %157 = icmp ne i64 %156, 0
  %158 = icmp eq i32 %146, 0
  %159 = and i1 %157, %158
  br i1 %159, label %167, label %160

160:                                              ; preds = %154
  %161 = lshr i64 21504, %40
  %162 = and i64 %161, 1
  %163 = icmp ne i64 %162, 0
  %164 = icmp eq i32 %144, 0
  %165 = and i1 %163, %164
  %166 = select i1 %165, i64 7, i64 14
  br label %167

167:                                              ; preds = %160, %154, %148, %143
  %168 = phi i64 [ %166, %160 ], [ 0, %143 ], [ 7, %154 ], [ 7, %148 ]
  %169 = icmp slt i32 %129, 15
  %170 = select i1 %169, i32 %129, i32 15
  %171 = add nsw i32 %170, -3
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 5, i64 %168, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = icmp sgt i32 %129, 14
  br i1 %175, label %176, label %181

176:                                              ; preds = %167
  %177 = add nsw i32 %129, -14
  %178 = call i32 @llvm.ctlz.i32(i32 %177, i1 true) #7, !range !2
  %179 = shl nuw nsw i32 %178, 10
  %180 = xor i32 %179, 32256
  br label %181

181:                                              ; preds = %176, %167
  %182 = phi i32 [ %180, %176 ], [ 0, %167 ]
  %183 = add i32 %174, %139
  %184 = add i32 %183, %182
  br label %185

185:                                              ; preds = %181, %141
  %186 = phi i32 [ %184, %181 ], [ %139, %141 ]
  %187 = icmp eq i32 %119, 0
  br i1 %187, label %190, label %188

188:                                              ; preds = %185
  %189 = add nsw i32 %186, 512
  br label %199

190:                                              ; preds = %185
  %191 = lshr i32 %126, 31
  %192 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 1
  %193 = load i32, i32* %192, align 4
  %194 = sext i32 %193 to i64
  %195 = zext i32 %191 to i64
  %196 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 4, i64 %194, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, %186
  br label %458

199:                                              ; preds = %188, %116
  %200 = phi i32 [ %139, %116 ], [ %189, %188 ]
  %201 = add nsw i32 %38, -2
  %202 = icmp sgt i32 %201, 0
  %203 = sext i32 %201 to i64
  %204 = getelementptr inbounds i16, i16* %74, i64 %203
  %205 = load i16, i16* %204, align 2
  %206 = sext i16 %205 to i32
  %207 = sext i16 %205 to i64
  br i1 %202, label %208, label %336

208:                                              ; preds = %199
  %209 = shl i32 1, %69
  %210 = add nsw i32 %209, 4
  %211 = shl i32 %210, 1
  br label %212

212:                                              ; preds = %325, %208
  %213 = phi i64 [ %203, %208 ], [ %327, %325 ]
  %214 = phi i64 [ %207, %208 ], [ %332, %325 ]
  %215 = phi i32 [ %206, %208 ], [ %331, %325 ]
  %216 = phi i16 [ %205, %208 ], [ %330, %325 ]
  %217 = phi i32 [ %200, %208 ], [ %326, %325 ]
  %218 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %214
  %219 = load i8, i8* %218, align 1
  %220 = getelementptr inbounds i32, i32* %47, i64 %214
  %221 = load i32, i32* %220, align 4
  %222 = icmp slt i32 %221, 0
  %223 = sub nsw i32 0, %221
  %224 = select i1 %222, i32 %223, i32 %221
  %225 = sext i8 %219 to i64
  %226 = icmp slt i32 %224, 3
  %227 = select i1 %226, i32 %224, i32 3
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 2, i64 %225, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = add nsw i32 %230, %217
  %232 = icmp eq i32 %221, 0
  br i1 %232, label %325, label %233

233:                                              ; preds = %212
  %234 = add nsw i32 %231, 512
  %235 = icmp sgt i32 %224, 2
  br i1 %235, label %236, label %325

236:                                              ; preds = %233
  %237 = ashr i32 %215, %69
  %238 = shl i32 %237, %69
  %239 = sub nsw i32 %215, %238
  %240 = mul nsw i32 %237, %210
  %241 = add nsw i32 %239, %240
  %242 = add nsw i32 %241, 1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = add nsw i32 %241, %210
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = add nuw nsw i32 %251, %246
  switch i8 %42, label %303 [
    i8 0, label %253
    i8 1, label %271
    i8 2, label %287
  ]

253:                                              ; preds = %236
  %254 = add nsw i32 %247, 1
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = zext i8 %257 to i32
  %259 = add nuw nsw i32 %252, 1
  %260 = add nuw nsw i32 %259, %258
  %261 = icmp ult i32 %260, 12
  %262 = lshr i32 %260, 1
  %263 = select i1 %261, i32 %262, i32 6
  %264 = icmp eq i16 %216, 0
  br i1 %264, label %306, label %265

265:                                              ; preds = %253
  %266 = icmp slt i32 %237, 2
  %267 = icmp slt i32 %239, 2
  %268 = and i1 %266, %267
  br i1 %268, label %269, label %303

269:                                              ; preds = %265
  %270 = add nuw nsw i32 %263, 7
  br label %306

271:                                              ; preds = %236
  %272 = add nsw i32 %241, 2
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i8 %275 to i32
  %277 = add nuw nsw i32 %252, 1
  %278 = add nuw nsw i32 %277, %276
  %279 = icmp ult i32 %278, 12
  %280 = lshr i32 %278, 1
  %281 = select i1 %279, i32 %280, i32 6
  %282 = icmp eq i16 %216, 0
  br i1 %282, label %306, label %283

283:                                              ; preds = %271
  %284 = icmp eq i32 %239, 0
  br i1 %284, label %285, label %303

285:                                              ; preds = %283
  %286 = add nuw nsw i32 %281, 7
  br label %306

287:                                              ; preds = %236
  %288 = add nsw i32 %241, %211
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  %293 = add nuw nsw i32 %252, 1
  %294 = add nuw nsw i32 %293, %292
  %295 = icmp ult i32 %294, 12
  %296 = lshr i32 %294, 1
  %297 = select i1 %295, i32 %296, i32 6
  %298 = icmp eq i16 %216, 0
  br i1 %298, label %306, label %299

299:                                              ; preds = %287
  %300 = icmp eq i32 %237, 0
  br i1 %300, label %301, label %303

301:                                              ; preds = %299
  %302 = add nuw nsw i32 %297, 7
  br label %306

303:                                              ; preds = %299, %283, %265, %236
  %304 = phi i32 [ %252, %236 ], [ %297, %299 ], [ %281, %283 ], [ %263, %265 ]
  %305 = add nuw nsw i32 %304, 14
  br label %306

306:                                              ; preds = %303, %301, %287, %285, %271, %269, %253
  %307 = phi i32 [ %305, %303 ], [ %302, %301 ], [ %286, %285 ], [ %270, %269 ], [ %263, %253 ], [ %281, %271 ], [ %297, %287 ]
  %308 = sext i32 %307 to i64
  %309 = icmp slt i32 %224, 15
  %310 = select i1 %309, i32 %224, i32 15
  %311 = add nsw i32 %310, -3
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 5, i64 %308, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = icmp sgt i32 %224, 14
  br i1 %315, label %316, label %321

316:                                              ; preds = %306
  %317 = add nsw i32 %224, -14
  %318 = call i32 @llvm.ctlz.i32(i32 %317, i1 true) #7, !range !2
  %319 = shl nuw nsw i32 %318, 10
  %320 = xor i32 %319, 32256
  br label %321

321:                                              ; preds = %316, %306
  %322 = phi i32 [ %320, %316 ], [ 0, %306 ]
  %323 = add i32 %314, %234
  %324 = add i32 %323, %322
  br label %325

325:                                              ; preds = %321, %233, %212
  %326 = phi i32 [ %324, %321 ], [ %234, %233 ], [ %231, %212 ]
  %327 = add nsw i64 %213, -1
  %328 = icmp sgt i64 %327, 0
  %329 = getelementptr inbounds i16, i16* %74, i64 %327
  %330 = load i16, i16* %329, align 2
  %331 = sext i16 %330 to i32
  %332 = sext i16 %330 to i64
  br i1 %328, label %212, label %333

333:                                              ; preds = %325
  %334 = sext i16 %330 to i32
  %335 = sext i16 %330 to i64
  br label %336

336:                                              ; preds = %333, %199
  %337 = phi i32 [ %200, %199 ], [ %326, %333 ]
  %338 = phi i16 [ %205, %199 ], [ %330, %333 ]
  %339 = phi i32 [ %206, %199 ], [ %334, %333 ]
  %340 = phi i64 [ %207, %199 ], [ %335, %333 ]
  %341 = getelementptr inbounds i32, i32* %47, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 %340
  %344 = load i8, i8* %343, align 1
  %345 = icmp slt i32 %342, 0
  %346 = sub nsw i32 0, %342
  %347 = select i1 %345, i32 %346, i32 %342
  %348 = sext i8 %344 to i64
  %349 = icmp slt i32 %347, 3
  %350 = select i1 %349, i32 %347, i32 3
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 2, i64 %348, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = add nsw i32 %353, %337
  %355 = icmp eq i32 %342, 0
  br i1 %355, label %458, label %356

356:                                              ; preds = %336
  %357 = lshr i32 %342, 31
  %358 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 1
  %359 = load i32, i32* %358, align 4
  %360 = sext i32 %359 to i64
  %361 = zext i32 %357 to i64
  %362 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 4, i64 %360, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = add nsw i32 %363, %354
  %365 = icmp sgt i32 %347, 2
  br i1 %365, label %366, label %458

366:                                              ; preds = %356
  %367 = ashr i32 %339, %69
  %368 = shl i32 %367, %69
  %369 = sub nsw i32 %339, %368
  %370 = shl i32 1, %69
  %371 = add nsw i32 %370, 4
  %372 = mul nsw i32 %367, %371
  %373 = add nsw i32 %369, %372
  %374 = add nsw i32 %373, 1
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %375
  %377 = load i8, i8* %376, align 1
  %378 = zext i8 %377 to i32
  %379 = add nsw i32 %373, %371
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %380
  %382 = load i8, i8* %381, align 1
  %383 = zext i8 %382 to i32
  %384 = add nuw nsw i32 %383, %378
  switch i8 %42, label %436 [
    i8 0, label %385
    i8 1, label %403
    i8 2, label %419
  ]

385:                                              ; preds = %366
  %386 = add nsw i32 %379, 1
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %387
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i32
  %391 = add nuw nsw i32 %384, 1
  %392 = add nuw nsw i32 %391, %390
  %393 = icmp ult i32 %392, 12
  %394 = lshr i32 %392, 1
  %395 = select i1 %393, i32 %394, i32 6
  %396 = icmp eq i16 %338, 0
  br i1 %396, label %439, label %397

397:                                              ; preds = %385
  %398 = icmp slt i32 %367, 2
  %399 = icmp slt i32 %369, 2
  %400 = and i1 %398, %399
  br i1 %400, label %401, label %436

401:                                              ; preds = %397
  %402 = add nuw nsw i32 %395, 7
  br label %439

403:                                              ; preds = %366
  %404 = add nsw i32 %373, 2
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = add nuw nsw i32 %384, 1
  %410 = add nuw nsw i32 %409, %408
  %411 = icmp ult i32 %410, 12
  %412 = lshr i32 %410, 1
  %413 = select i1 %411, i32 %412, i32 6
  %414 = icmp eq i16 %338, 0
  br i1 %414, label %439, label %415

415:                                              ; preds = %403
  %416 = icmp eq i32 %369, 0
  br i1 %416, label %417, label %436

417:                                              ; preds = %415
  %418 = add nuw nsw i32 %413, 7
  br label %439

419:                                              ; preds = %366
  %420 = shl i32 %371, 1
  %421 = add nsw i32 %373, %420
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [1312 x i8], [1312 x i8]* %9, i64 0, i64 %422
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = add nuw nsw i32 %384, 1
  %427 = add nuw nsw i32 %426, %425
  %428 = icmp ult i32 %427, 12
  %429 = lshr i32 %427, 1
  %430 = select i1 %428, i32 %429, i32 6
  %431 = icmp eq i16 %338, 0
  br i1 %431, label %439, label %432

432:                                              ; preds = %419
  %433 = icmp eq i32 %367, 0
  br i1 %433, label %434, label %436

434:                                              ; preds = %432
  %435 = add nuw nsw i32 %430, 7
  br label %439

436:                                              ; preds = %432, %415, %397, %366
  %437 = phi i32 [ %384, %366 ], [ %430, %432 ], [ %413, %415 ], [ %395, %397 ]
  %438 = add nuw nsw i32 %437, 14
  br label %439

439:                                              ; preds = %436, %434, %419, %417, %403, %401, %385
  %440 = phi i32 [ %438, %436 ], [ %435, %434 ], [ %418, %417 ], [ %402, %401 ], [ %395, %385 ], [ %413, %403 ], [ %430, %419 ]
  %441 = sext i32 %440 to i64
  %442 = icmp slt i32 %347, 15
  %443 = select i1 %442, i32 %347, i32 15
  %444 = add nsw i32 %443, -3
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %28, i64 %29, i32 5, i64 %441, i64 %445
  %447 = load i32, i32* %446, align 4
  %448 = icmp sgt i32 %347, 14
  br i1 %448, label %449, label %454

449:                                              ; preds = %439
  %450 = add nsw i32 %347, -14
  %451 = call i32 @llvm.ctlz.i32(i32 %450, i1 true) #7, !range !2
  %452 = shl nuw nsw i32 %451, 10
  %453 = xor i32 %452, 32256
  br label %454

454:                                              ; preds = %449, %439
  %455 = phi i32 [ %453, %449 ], [ 0, %439 ]
  %456 = add i32 %447, %364
  %457 = add i32 %456, %455
  br label %458

458:                                              ; preds = %190, %336, %356, %454
  %459 = phi i32 [ %198, %190 ], [ %354, %336 ], [ %457, %454 ], [ %364, %356 ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %76) #7
  call void @llvm.lifetime.end.p0i8(i64 1312, i8* nonnull %75) #7
  br label %460

460:                                              ; preds = %458, %31
  %461 = phi i32 [ %36, %31 ], [ %459, %458 ]
  ret i32 %461
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_cost_coeffs_txb_laplacian(%struct.macroblock* nocapture readonly, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %9 = alloca [2 x i32], align 4
  %10 = alloca i32, align 4
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 4
  %13 = load i16*, i16** %12, align 8
  %14 = sext i32 %2 to i64
  %15 = getelementptr inbounds i16, i16* %13, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = icmp eq i32 %7, 0
  %19 = zext i8 %3 to i64
  br i1 %18, label %92, label %20

20:                                               ; preds = %8
  %21 = zext i8 %4 to i64
  %22 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %19, i64 %21, i32 0
  %23 = load i16*, i16** %22, align 16
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 3
  %25 = load i32*, i32** %24, align 8
  %26 = shl i32 %2, 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %25, i64 %27
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 2
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 %27
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 1
  %33 = load i32*, i32** %32, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 %27
  %35 = tail call i32 @av1_get_tx_scale(i8 zeroext %3) #7
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 13
  %37 = load i16*, i16** %36, align 8
  %38 = bitcast [2 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #7
  %39 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  %41 = load i16, i16* %37, align 2
  %42 = sext i16 %41 to i32
  %43 = mul nsw i32 %42, 70
  %44 = add nsw i32 %43, 64
  %45 = ashr i32 %44, 7
  %46 = add nsw i32 %45, %42
  store i32 %46, i32* %39, align 4
  %47 = getelementptr inbounds i16, i16* %37, i64 1
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = mul nsw i32 %49, 70
  %51 = add nsw i32 %50, 64
  %52 = ashr i32 %51, 7
  %53 = add nsw i32 %52, %49
  store i32 %53, i32* %40, align 4
  %54 = icmp eq i16 %16, 0
  br i1 %54, label %87, label %55

55:                                               ; preds = %20
  %56 = add nsw i32 %35, 1
  %57 = zext i32 %56 to i64
  %58 = zext i16 %16 to i64
  br label %59

59:                                               ; preds = %84, %55
  %60 = phi i64 [ %58, %55 ], [ %62, %84 ]
  %61 = phi i32 [ %17, %55 ], [ %63, %84 ]
  %62 = add nsw i64 %60, -1
  %63 = add nsw i32 %61, -1
  %64 = getelementptr inbounds i16, i16* %23, i64 %62
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i64
  %67 = getelementptr inbounds i32, i32* %31, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds i32, i32* %28, i64 %66
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = zext i32 %73 to i64
  %75 = shl i64 %74, %57
  %76 = icmp ne i16 %65, 0
  %77 = zext i1 %76 to i64
  %78 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = icmp slt i64 %75, %80
  %82 = icmp eq i32 %68, 0
  %83 = or i1 %82, %81
  br i1 %83, label %84, label %87

84:                                               ; preds = %59
  store i32 0, i32* %67, align 4
  %85 = getelementptr inbounds i32, i32* %34, i64 %66
  store i32 0, i32* %85, align 4
  %86 = icmp sgt i64 %62, 0
  br i1 %86, label %59, label %87

87:                                               ; preds = %59, %84, %20
  %88 = phi i32 [ 0, %20 ], [ %63, %84 ], [ %61, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #7
  %89 = trunc i32 %88 to i16
  %90 = load i16*, i16** %12, align 8
  %91 = getelementptr inbounds i16, i16* %90, i64 %14
  store i16 %89, i16* %91, align 2
  br label %92

92:                                               ; preds = %8, %87
  %93 = phi i32 [ %88, %87 ], [ %17, %8 ]
  %94 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_map, i64 0, i64 %19
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %19
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = add nuw nsw i64 %96, 1
  %101 = add nuw nsw i64 %100, %99
  %102 = lshr i64 %101, 1
  %103 = icmp ne i32 %1, 0
  %104 = and i64 %102, 255
  %105 = zext i1 %103 to i64
  %106 = icmp eq i32 %93, 0
  br i1 %106, label %107, label %113

107:                                              ; preds = %92
  %108 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %104, i64 %105, i32 0, i64 %110, i64 1
  %112 = load i32, i32* %111, align 4
  br label %248

113:                                              ; preds = %92
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2
  %115 = zext i8 %4 to i64
  %116 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_log2_minus4, i64 0, i64 %19
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i64
  %121 = sext i32 %117 to i64
  %122 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %104, i64 %105, i32 0, i64 %121, i64 0
  %123 = load i32, i32* %122, align 4
  %124 = tail call fastcc i32 @get_tx_type_cost(%struct.macroblock* %0, %struct.macroblockd* %114, i32 %1, i8 zeroext %3, i8 zeroext %4, i32 %6) #7
  %125 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %125) #7
  store i32 -1431655766, i32* %10, align 4
  %126 = call i32 @av1_get_eob_pos_token(i32 %93, i32* nonnull %10) #7
  %127 = add nsw i64 %115, -10
  %128 = icmp ult i64 %127, 6
  %129 = zext i1 %128 to i64
  %130 = add nsw i32 %126, -1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 1, i64 %120, i64 %105, i32 0, i64 %129, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = sext i32 %126 to i64
  %135 = getelementptr inbounds [12 x i16], [12 x i16]* @av1_eob_offset_bits, i64 0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = icmp sgt i16 %136, 0
  br i1 %137, label %138, label %155

138:                                              ; preds = %113
  %139 = sext i16 %136 to i32
  %140 = add nsw i32 %126, -3
  %141 = add nsw i32 %139, -1
  %142 = load i32, i32* %10, align 4
  %143 = shl i32 1, %141
  %144 = and i32 %142, %143
  %145 = icmp ne i32 %144, 0
  %146 = sext i32 %140 to i64
  %147 = zext i1 %145 to i64
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %104, i64 %105, i32 3, i64 %146, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i16 %136, 1
  %151 = shl nsw i32 %141, 9
  %152 = select i1 %150, i32 0, i32 %151
  %153 = add i32 %152, %133
  %154 = add i32 %153, %149
  br label %155

155:                                              ; preds = %138, %113
  %156 = phi i32 [ %133, %113 ], [ %154, %138 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %125) #7
  %157 = getelementptr inbounds [19 x [16 x %struct.SCAN_ORDER]], [19 x [16 x %struct.SCAN_ORDER]]* @av1_scan_orders, i64 0, i64 %19, i64 %115, i32 0
  %158 = load i16*, i16** %157, align 16
  %159 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %11, i32 2
  %160 = load i32*, i32** %159, align 8
  %161 = shl i32 %2, 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i32, i32* %160, i64 %162
  %164 = load i16*, i16** %12, align 8
  %165 = getelementptr inbounds i16, i16* %164, i64 %14
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = add nsw i32 %167, -1
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i16, i16* %158, i64 %169
  %171 = load i16, i16* %170, align 2
  %172 = sext i16 %171 to i64
  %173 = getelementptr inbounds i32, i32* %163, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = icmp slt i32 %174, 0
  %176 = sub nsw i32 0, %174
  %177 = select i1 %175, i32 %176, i32 %174
  %178 = shl i32 %177, 11
  %179 = add i32 %178, -2048
  %180 = icmp ugt i16 %166, 1
  br i1 %180, label %181, label %241

181:                                              ; preds = %155
  %182 = zext i16 %166 to i64
  %183 = add nsw i64 %182, -2
  %184 = and i64 %182, 1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %202

186:                                              ; preds = %181
  %187 = getelementptr inbounds i16, i16* %158, i64 %183
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i64
  %190 = getelementptr inbounds i32, i32* %163, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = icmp slt i32 %191, 0
  %193 = sub nsw i32 0, %191
  %194 = select i1 %192, i32 %193, i32 %191
  %195 = icmp slt i32 %194, 14
  %196 = select i1 %195, i32 %194, i32 14
  %197 = zext i32 %196 to i64
  %198 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = add nsw i32 %199, %179
  %201 = add nsw i64 %182, -3
  br label %202

202:                                              ; preds = %186, %181
  %203 = phi i64 [ %183, %181 ], [ %201, %186 ]
  %204 = phi i32 [ %179, %181 ], [ %200, %186 ]
  %205 = phi i32 [ undef, %181 ], [ %200, %186 ]
  %206 = icmp eq i64 %183, 0
  br i1 %206, label %241, label %207

207:                                              ; preds = %202, %207
  %208 = phi i64 [ %239, %207 ], [ %203, %202 ]
  %209 = phi i32 [ %238, %207 ], [ %204, %202 ]
  %210 = getelementptr inbounds i16, i16* %158, i64 %208
  %211 = load i16, i16* %210, align 2
  %212 = sext i16 %211 to i64
  %213 = getelementptr inbounds i32, i32* %163, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = icmp slt i32 %214, 0
  %216 = sub nsw i32 0, %214
  %217 = select i1 %215, i32 %216, i32 %214
  %218 = icmp slt i32 %217, 14
  %219 = select i1 %218, i32 %217, i32 14
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = add nsw i32 %222, %209
  %224 = add nsw i64 %208, -1
  %225 = getelementptr inbounds i16, i16* %158, i64 %224
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i64
  %228 = getelementptr inbounds i32, i32* %163, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = icmp slt i32 %229, 0
  %231 = sub nsw i32 0, %229
  %232 = select i1 %230, i32 %231, i32 %229
  %233 = icmp slt i32 %232, 14
  %234 = select i1 %233, i32 %232, i32 14
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [15 x i32], [15 x i32]* @costLUT, i64 0, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = add nsw i32 %237, %223
  %239 = add nsw i64 %208, -2
  %240 = icmp sgt i64 %224, 0
  br i1 %240, label %207, label %241

241:                                              ; preds = %202, %207, %155
  %242 = phi i32 [ %179, %155 ], [ %205, %202 ], [ %238, %207 ]
  %243 = mul nsw i32 %168, 1251
  %244 = add i32 %124, %123
  %245 = add i32 %244, %156
  %246 = add i32 %245, %243
  %247 = add i32 %246, %242
  br label %248

248:                                              ; preds = %241, %107
  %249 = phi i32 [ %112, %107 ], [ %247, %241 ]
  ret i32 %249
}

declare i32 @av1_get_eob_pos_token(i32, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind readonly ssp uwtable
define internal fastcc i32 @get_coeff_cost_general(i32, i32, i32, i32, i32, i32, %struct.LV_MAP_COEFF_COST* nocapture readonly, i32, i8 zeroext, i8* nocapture readonly) unnamed_addr #5 {
  %11 = icmp ne i32 %0, 0
  %12 = sext i32 %4 to i64
  %13 = icmp slt i32 %2, 3
  %14 = select i1 %13, i32 %2, i32 3
  br i1 %11, label %15, label %19

15:                                               ; preds = %10
  %16 = add nsw i32 %14, -1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %6, i64 0, i32 1, i64 %12, i64 %17
  br label %22

19:                                               ; preds = %10
  %20 = sext i32 %14 to i64
  %21 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %6, i64 0, i32 2, i64 %12, i64 %20
  br label %22

22:                                               ; preds = %19, %15
  %23 = phi i32* [ %18, %15 ], [ %21, %19 ]
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %143, label %26

26:                                               ; preds = %22
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = sext i32 %5 to i64
  %30 = sext i32 %3 to i64
  %31 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %6, i64 0, i32 4, i64 %29, i64 %30
  %32 = load i32, i32* %31, align 4
  br label %33

33:                                               ; preds = %26, %28
  %34 = phi i32 [ %32, %28 ], [ 512, %26 ]
  %35 = add nsw i32 %34, %24
  %36 = icmp sgt i32 %2, 2
  br i1 %36, label %37, label %143

37:                                               ; preds = %33
  %38 = ashr i32 %1, %7
  %39 = shl i32 %38, %7
  %40 = sub nsw i32 %1, %39
  br i1 %11, label %41, label %57

41:                                               ; preds = %37
  br i1 %27, label %124, label %42

42:                                               ; preds = %41
  %43 = icmp eq i8 %8, 0
  %44 = icmp slt i32 %38, 2
  %45 = and i1 %43, %44
  %46 = icmp slt i32 %40, 2
  %47 = and i1 %45, %46
  br i1 %47, label %124, label %48

48:                                               ; preds = %42
  %49 = icmp eq i8 %8, 1
  %50 = icmp eq i32 %40, 0
  %51 = and i1 %49, %50
  br i1 %51, label %124, label %52

52:                                               ; preds = %48
  %53 = icmp eq i8 %8, 2
  %54 = icmp eq i32 %38, 0
  %55 = and i1 %53, %54
  %56 = select i1 %55, i32 7, i32 14
  br label %124

57:                                               ; preds = %37
  %58 = shl i32 1, %7
  %59 = add nsw i32 %58, 4
  %60 = mul nsw i32 %59, %38
  %61 = add nsw i32 %60, %40
  %62 = add nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %9, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nsw i32 %61, %59
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %9, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %71, %66
  switch i8 %8, label %121 [
    i8 0, label %73
    i8 1, label %90
    i8 2, label %105
  ]

73:                                               ; preds = %57
  %74 = add nsw i32 %67, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %9, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = add nuw nsw i32 %72, 1
  %80 = add nuw nsw i32 %79, %78
  %81 = icmp ult i32 %80, 12
  %82 = lshr i32 %80, 1
  %83 = select i1 %81, i32 %82, i32 6
  br i1 %27, label %124, label %84

84:                                               ; preds = %73
  %85 = icmp slt i32 %38, 2
  %86 = icmp slt i32 %40, 2
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %121

88:                                               ; preds = %84
  %89 = add nuw nsw i32 %83, 7
  br label %124

90:                                               ; preds = %57
  %91 = add nsw i32 %61, 2
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %9, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %72, 1
  %97 = add nuw nsw i32 %96, %95
  %98 = icmp ult i32 %97, 12
  %99 = lshr i32 %97, 1
  %100 = select i1 %98, i32 %99, i32 6
  br i1 %27, label %124, label %101

101:                                              ; preds = %90
  %102 = icmp eq i32 %40, 0
  br i1 %102, label %103, label %121

103:                                              ; preds = %101
  %104 = add nuw nsw i32 %100, 7
  br label %124

105:                                              ; preds = %57
  %106 = shl i32 %59, 1
  %107 = add nsw i32 %61, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %9, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %72, 1
  %113 = add nuw nsw i32 %112, %111
  %114 = icmp ult i32 %113, 12
  %115 = lshr i32 %113, 1
  %116 = select i1 %114, i32 %115, i32 6
  br i1 %27, label %124, label %117

117:                                              ; preds = %105
  %118 = icmp eq i32 %38, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %117
  %120 = add nuw nsw i32 %116, 7
  br label %124

121:                                              ; preds = %117, %101, %84, %57
  %122 = phi i32 [ %72, %57 ], [ %116, %117 ], [ %100, %101 ], [ %83, %84 ]
  %123 = add nuw nsw i32 %122, 14
  br label %124

124:                                              ; preds = %121, %119, %105, %103, %90, %88, %73, %52, %48, %42, %41
  %125 = phi i32 [ %56, %52 ], [ 0, %41 ], [ 7, %48 ], [ 7, %42 ], [ %123, %121 ], [ %120, %119 ], [ %104, %103 ], [ %89, %88 ], [ %83, %73 ], [ %100, %90 ], [ %116, %105 ]
  %126 = sext i32 %125 to i64
  %127 = icmp slt i32 %2, 15
  %128 = select i1 %127, i32 %2, i32 15
  %129 = add nsw i32 %128, -3
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.LV_MAP_COEFF_COST, %struct.LV_MAP_COEFF_COST* %6, i64 0, i32 5, i64 %126, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %2, 14
  br i1 %133, label %134, label %139

134:                                              ; preds = %124
  %135 = add nsw i32 %2, -14
  %136 = tail call i32 @llvm.ctlz.i32(i32 %135, i1 true) #7, !range !2
  %137 = shl nuw nsw i32 %136, 10
  %138 = xor i32 %137, 32256
  br label %139

139:                                              ; preds = %124, %134
  %140 = phi i32 [ %138, %134 ], [ 0, %124 ]
  %141 = add i32 %132, %35
  %142 = add i32 %141, %140
  br label %143

143:                                              ; preds = %22, %33, %139
  %144 = phi i32 [ %142, %139 ], [ %35, %33 ], [ %24, %22 ]
  ret i32 %144
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

declare void @av1_get_nz_map_contexts_sse2(i8*, i16*, i16 zeroext, i8 zeroext, i8 zeroext, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{i8 0, i8 2}
