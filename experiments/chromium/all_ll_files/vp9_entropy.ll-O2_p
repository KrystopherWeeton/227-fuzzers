; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_entropy.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_entropy.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, {}*, {}*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }

@vp9_coef_con_tree = hidden local_unnamed_addr constant [22 x i8] c"\02\06\FE\04\FD\FC\08\0A\FB\FA\0C\0E\F9\F8\F7\F6\00\00\00\00\00\00", align 16
@vp9_cat1_prob = hidden local_unnamed_addr constant [1 x i8] c"\9F", align 16
@vp9_cat2_prob = hidden local_unnamed_addr constant [2 x i8] c"\A5\91", align 16
@vp9_cat3_prob = hidden local_unnamed_addr constant [3 x i8] c"\AD\94\8C", align 16
@vp9_cat4_prob = hidden local_unnamed_addr constant [4 x i8] c"\B0\9B\8C\87", align 16
@vp9_cat5_prob = hidden local_unnamed_addr constant [5 x i8] c"\B4\9D\8D\86\82", align 16
@vp9_cat6_prob = hidden local_unnamed_addr constant [14 x i8] c"\FE\FE\FE\FC\F9\F3\E6\C4\B1\99\8C\85\82\81", align 16
@vp9_cat6_prob_high12 = hidden local_unnamed_addr constant [18 x i8] c"\FF\FF\FF\FF\FE\FE\FE\FC\F9\F3\E6\C4\B1\99\8C\85\82\81", align 16
@vp9_coefband_trans_8x8plus = hidden local_unnamed_addr constant [1024 x i8] calign 16
@vp9_coefband_trans_4x4 = hidden local_unnamed_addr constant [16 x i8] c"\00\01\01\02\02\02\03\03\03\03\04\04\04\05\05\05", align 16
@vp9_pt_energy_class = hidden local_unnamed_addr constant [12 x i8] c"\00\01\02\03\03\04\04\05\05\05\05\05", align 16
@vp9_pareto8_full = hidden local_unnamed_addr constant [255 x [8 x i8]] [[8 x i8] c"\03V\80\06V\17X\1D", [8 x i8] c"\06V\80\0BW*[4", [8 x i8] c"\09V\81\11X=^L", [8 x i8] c"\0CV\81\16XMa]", [8 x i8] c"\0FW\81\1CY]dn", [8 x i8] c"\11W\81!Zig{", [8 x i8] c"\14X\82&[vj\88", [8 x i8] c"\17X\82+[\80l\92", [8 x i8] c"\1AY\830\5C\8Bo\9C", [8 x i8] c"\1CY\835]\93r\A3", [8 x i8] c"\1FZ\83:^\9Cu\AB", [8 x i8] c"\22Z\83>^\A3w\B1", [8 x i8] c"%Z\84B_\ABz\B8", [8 x i8] c"'Z\84F`\B1|\BD", [8 x i8] c"*[\84Ka\B7\7F\C2", [8 x i8] c",[\84Oa\BC\81\C6", [8 x i8] c"/\5C\85Sb\C1\84\CA", [8 x i8] c"1\5C\85Vc\C5\86\CD", [8 x i8] c"4]\85Zd\C9\89\D0", [8 x i8] c"6]\85^d\CC\8B\D3", [8 x i8] c"9^\86be\D0\8E\D6", [8 x i8] c";^\86ef\D3\90\D8", [8 x i8] c">^\87ig\D6\92\DA", [8 x i8] c"@^\87lg\D8\94\DC", [8 x i8] c"B_\87oh\DB\97\DE", [8 x i8] c"D_\87ri\DD\99\DF", [8 x i8] c"G`\88uj\E0\9B\E1", [8 x i8] c"I`\88xj\E1\9D\E2", [8 x i8] c"La\88{k\E3\9F\E4", [8 x i8] c"Na\88~l\E5\A0\E5", [8 x i8] c"Pb\89\81m\E7\A2\E7", [8 x i8] c"Rb\89\83m\E8\A4\E8", [8 x i8] c"Tb\8A\86n\EA\A6\E9", [8 x i8] c"Vb\8A\89o\EB\A8\EA", [8 x i8] c"Yc\8A\8Cp\EC\AA\EB", [8 x i8] c"[c\8A\8Ep\ED\AB\EB", [8 x i8] c"]d\8B\91q\EE\AD\EC", [8 x i8] c"_d\8B\93r\EF\AE\ED", [8 x i8] c"ae\8C\95s\F0\B0\EE", [8 x i8] c"ce\8C\97s\F1\B1\EE", [8 x i8] c"ef\8C\9At\F2\B3\EF", [8 x i8] c"gf\8C\9Cu\F2\B4\EF", [8 x i8] c"ig\8D\9Ev\F3\B6\F0", [8 x i8] c"kg\8D\A0v\F3\B7\F0", [8 x i8] c"mh\8D\A2w\F4\B9\F1", [8 x i8] c"oh\8D\A4w\F4\BA\F1", [8 x i8] c"qh\8E\A6x\F5\BB\F2", [8 x i8] c"rh\8E\A8y\F5\BC\F2", [8 x i8] c"ti\8F\AAz\F6\BE\F3", [8 x i8] c"vi\8F\ABz\F6\BF\F3", [8 x i8] c"xj\8F\AD{\F7\C0\F4", [8 x i8] c"yj\8F\AF|\F7\C1\F4", [8 x i8] c"{k\90\B1}\F8\C3\F4", [8 x i8] c"}k\90\B2}\F8\C4\F4", [8 x i8] c"\7Fl\91\B4~\F9\C5\F5", [8 x i8] c"\80l\91\B5\7F\F9\C6\F5", [8 x i8] c"\82m\91\B7\80\F9\C7\F5", [8 x i8] c"\84m\91\B8\80\F9\C8\F5", [8 x i8] c"\86n\92\BA\81\FA\C9\F6", [8 x i8] c"\87n\92\BB\82\FA\CA\F6", [8 x i8] c"\89o\93\BD\83\FB\CB\F6", [8 x i8] c"\8Ao\93\BE\83\FB\CC\F6", [8 x i8] c"\8Cp\93\C0\84\FB\CD\F7", [8 x i8] c"\8Dp\93\C1\84\FB\CE\F7", [8 x i8] c"\8Fq\94\C2\85\FB\CF\F7", [8 x i8] c"\90q\94\C3\86\FB\CF\F7", [8 x i8] c"\92r\95\C5\87\FC\D0\F8", [8 x i8] c"\93r\95\C6\87\FC\D1\F8", [8 x i8] c"\95s\95\C7\88\FC\D2\F8", [8 x i8] c"\96s\95\C8\89\FC\D2\F8", [8 x i8] c"\98s\96\C9\8A\FC\D3\F8", [8 x i8] c"\99s\96\CA\8A\FC\D4\F8", [8 x i8] c"\9Bt\97\CC\8B\FD\D5\F9", [8 x i8] c"\9Ct\97\CD\8B\FD\D5\F9", [8 x i8] c"\9Eu\97\CE\8C\FD\D6\F9", [8 x i8] c"\9Fu\97\CF\8D\FD\D7\F9", [8 x i8] c"\A1v\98\D0\8E\FD\D8\F9", [8 x i8] c"\A2v\98\D1\8E\FD\D8\F9", [8 x i8] c"\A3w\99\D2\8F\FD\D9\F9", [8 x i8] c"\A4w\99\D3\8F\FD\D9\F9", [8 x i8] c"\A6x\99\D4\90\FE\DA\FA", [8 x i8] c"\A7x\99\D4\91\FE\DB\FA", [8 x i8] c"\A8y\9A\D5\92\FE\DC\FA", [8 x i8] c"\A9y\9A\D6\92\FE\DC\FA", [8 x i8] c"\ABz\9B\D7\93\FE\DD\FA", [8 x i8] c"\ACz\9B\D8\93\FE\DD\FA", [8 x i8] c"\AD{\9B\D9\94\FE\DE\FA", [8 x i8] c"\AE{\9B\D9\95\FE\DE\FA", [8 x i8] c"\B0|\9C\DA\96\FE\DF\FA", [8 x i8] c"\B1|\9C\DB\96\FE\DF\FA", [8 x i8] c"\B2}\9D\DC\97\FE\E0\FB", [8 x i8] c"\B3}\9D\DC\97\FE\E0\FB", [8 x i8] c"\B4~\9D\DD\98\FE\E1\FB", [8 x i8] c"\B5~\9D\DD\98\FE\E1\FB", [8 x i8] c"\B7\7F\9E\DE\99\FE\E2\FB", [8 x i8] c"\B8\7F\9E\DF\9A\FE\E2\FB", [8 x i8] c"\B9\80\9F\E0\9B\FF\E3\FB", [8 x i8] c"\BA\80\9F\E0\9B\FF\E3\FB", [8 x i8] c"\BB\81\A0\E1\9C\FF\E4\FB", [8 x i8] c"\BC\82\A0\E1\9C\FF\E4\FB", [8 x i8] c"\BD\83\A0\E2\9D\FF\E4\FB", [8 x i8] c"\BE\83\A0\E2\9E\FF\E4\FB", [8 x i8] c"\BF\84\A1\E3\9F\FF\E5\FB", [8 x i8] c"\C0\84\A1\E3\9F\FF\E5\FB", [8 x i8] c"\C1\85\A2\E4\A0\FF\E6\FC", [8 x i8] c"\C2\85\A2\E5\A0\FF\E6\FC", [8 x i8] c"\C3\86\A3\E6\A1\FF\E7\FC", [8 x i8] c"\C4\86\A3\E6\A1\FF\E7\FC", [8 x i8] c"\C5\87\A3\E7\A2\FF\E7\FC", [8 x i8] c"\C6\87\A3\E7\A2\FF\E7\FC", [8 x i8] c"\C7\88\A4\E8\A3\FF\E8\FC", [8 x i8] c"\C8\88\A4\E8\A4\FF\E8\FC", [8 x i8] c"\C9\89\A5\E9\A5\FF\E9\FC", [8 x i8] c"\C9\89\A5\E9\A5\FF\E9\FC", [8 x i8] c"\CA\8A\A6\E9\A6\FF\E9\FC", [8 x i8] c"\CB\8A\A6\E9\A6\FF\E9\FC", [8 x i8] c"\CC\8B\A6\EA\A7\FF\EA\FC", [8 x i8] c"\CD\8B\A6\EA\A7\FF\EA\FC", [8 x i8] c"\CE\8C\A7\EB\A8\FF\EB\FC", [8 x i8] c"\CE\8C\A7\EB\A8\FF\EB\FC", [8 x i8] c"\CF\8D\A8\EC\A9\FF\EB\FC", [8 x i8] c"\D0\8D\A8\EC\AA\FF\EB\FC", [8 x i8] c"\D1\8E\A9\ED\AB\FF\EC\FC", [8 x i8] c"\D1\8F\A9\ED\AB\FF\EC\FC", [8 x i8] c"\D2\90\A9\ED\AC\FF\EC\FC", [8 x i8] c"\D3\90\A9\ED\AC\FF\EC\FC", [8 x i8] c"\D4\91\AA\EE\AD\FF\ED\FC", [8 x i8] c"\D5\91\AA\EE\AD\FF\ED\FC", [8 x i8] c"\D6\92\AB\EF\AE\FF\ED\FD", [8 x i8] c"\D6\92\AB\EF\AE\FF\ED\FD", [8 x i8] c"\D7\93\AC\F0\AF\FF\EE\FD", [8 x i8] c"\D7\93\AC\F0\AF\FF\EE\FD", [8 x i8] c"\D8\94\AD\F0\B0\FF\EE\FD", [8 x i8] c"\D9\94\AD\F0\B0\FF\EE\FD", [8 x i8] c"\DA\95\AD\F1\B1\FF\EF\FD", [8 x i8] c"\DA\95\AD\F1\B2\FF\EF\FD", [8 x i8] c"\DB\96\AE\F1\B3\FF\EF\FD", [8 x i8] c"\DB\97\AE\F1\B3\FF\EF\FD", [8 x i8] c"\DC\98\AF\F2\B4\FF\F0\FD", [8 x i8] c"\DD\98\AF\F2\B4\FF\F0\FD", [8 x i8] c"\DE\99\B0\F2\B5\FF\F0\FD", [8 x i8] c"\DE\99\B0\F2\B5\FF\F0\FD", [8 x i8] c"\DF\9A\B1\F3\B6\FF\F0\FD", [8 x i8] c"\DF\9A\B1\F3\B6\FF\F0\FD", [8 x i8] c"\E0\9B\B2\F4\B7\FF\F1\FD", [8 x i8] c"\E0\9B\B2\F4\B7\FF\F1\FD", [8 x i8] c"\E1\9C\B2\F4\B8\FF\F1\FD", [8 x i8] c"\E1\9D\B2\F4\B8\FF\F1\FD", [8 x i8] c"\E2\9E\B3\F4\B9\FF\F2\FD", [8 x i8] c"\E3\9E\B3\F4\B9\FF\F2\FD", [8 x i8] c"\E4\9F\B4\F5\BA\FF\F2\FD", [8 x i8] c"\E4\9F\B4\F5\BA\FF\F2\FD", [8 x i8] c"\E5\A0\B5\F5\BB\FF\F2\FD", [8 x i8] c"\E5\A0\B5\F5\BB\FF\F2\FD", [8 x i8] c"\E6\A1\B6\F6\BC\FF\F3\FD", [8 x i8] c"\E6\A2\B6\F6\BC\FF\F3\FD", [8 x i8] c"\E7\A3\B7\F6\BD\FF\F3\FD", [8 x i8] c"\E7\A3\B7\F6\BD\FF\F3\FD", [8 x i8] c"\E8\A4\B8\F7\BE\FF\F3\FD", [8 x i8] c"\E8\A4\B8\F7\BE\FF\F3\FD", [8 x i8] c"\E9\A5\B9\F7\BF\FF\F4\FD", [8 x i8] c"\E9\A5\B9\F7\BF\FF\F4\FD", [8 x i8] c"\EA\A6\B9\F7\C0\FF\F4\FD", [8 x i8] c"\EA\A7\B9\F7\C0\FF\F4\FD", [8 x i8] c"\EB\A8\BA\F8\C1\FF\F4\FD", [8 x i8] c"\EB\A8\BA\F8\C1\FF\F4\FD", [8 x i8] c"\EC\A9\BB\F8\C2\FF\F4\FD", [8 x i8] c"\EC\A9\BB\F8\C2\FF\F4\FD", [8 x i8] c"\EC\AA\BC\F8\C3\FF\F5\FD", [8 x i8] c"\EC\AA\BC\F8\C3\FF\F5\FD", [8 x i8] c"\ED\AB\BD\F9\C4\FF\F5\FE", [8 x i8] c"\ED\AC\BD\F9\C4\FF\F5\FE", [8 x i8] c"\EE\AD\BE\F9\C5\FF\F5\FE", [8 x i8] c"\EE\AD\BE\F9\C5\FF\F5\FE", [8 x i8] c"\EF\AE\BF\F9\C6\FF\F5\FE", [8 x i8] c"\EF\AE\BF\F9\C6\FF\F5\FE", [8 x i8] c"\F0\AF\C0\F9\C7\FF\F6\FE", [8 x i8] c"\F0\B0\C0\F9\C7\FF\F6\FE", [8 x i8] c"\F0\B1\C1\FA\C8\FF\F6\FE", [8 x i8] c"\F0\B1\C1\FA\C8\FF\F6\FE", [8 x i8] c"\F1\B2\C2\FA\C9\FF\F6\FE", [8 x i8] c"\F1\B2\C2\FA\C9\FF\F6\FE", [8 x i8] c"\F2\B3\C3\FA\CA\FF\F6\FE", [8 x i8] c"\F2\B4\C3\FA\CA\FF\F6\FE", [8 x i8] c"\F2\B5\C4\FA\CB\FF\F7\FE", [8 x i8] c"\F2\B5\C4\FA\CB\FF\F7\FE", [8 x i8] c"\F3\B6\C5\FB\CC\FF\F7\FE", [8 x i8] c"\F3\B7\C5\FB\CC\FF\F7\FE", [8 x i8] c"\F4\B8\C6\FB\CD\FF\F7\FE", [8 x i8] c"\F4\B8\C6\FB\CD\FF\F7\FE", [8 x i8] c"\F4\B9\C7\FB\CE\FF\F7\FE", [8 x i8] c"\F4\B9\C7\FB\CE\FF\F7\FE", [8 x i8] c"\F5\BA\C8\FB\CF\FF\F7\FE", [8 x i8] c"\F5\BB\C8\FB\CF\FF\F7\FE", [8 x i8] c"\F6\BC\C9\FC\CF\FF\F8\FE", [8 x i8] c"\F6\BC\C9\FC\CF\FF\F8\FE", [8 x i8] c"\F6\BD\CA\FC\D0\FF\F8\FE", [8 x i8] c"\F6\BE\CA\FC\D0\FF\F8\FE", [8 x i8] c"\F7\BF\CB\FC\D1\FF\F8\FE", [8 x i8] c"\F7\BF\CB\FC\D1\FF\F8\FE", [8 x i8] c"\F7\C0\CC\FC\D2\FF\F8\FE", [8 x i8] c"\F7\C1\CC\FC\D2\FF\F8\FE", [8 x i8] c"\F8\C2\CD\FC\D3\FF\F8\FE", [8 x i8] c"\F8\C2\CD\FC\D3\FF\F8\FE", [8 x i8] c"\F8\C3\CE\FC\D4\FF\F9\FE", [8 x i8] c"\F8\C4\CE\FC\D4\FF\F9\FE", [8 x i8] c"\F9\C5\CF\FD\D5\FF\F9\FE", [8 x i8] c"\F9\C5\CF\FD\D5\FF\F9\FE", [8 x i8] c"\F9\C6\D0\FD\D6\FF\F9\FE", [8 x i8] c"\F9\C7\D1\FD\D6\FF\F9\FE", [8 x i8] c"\FA\C8\D2\FD\D7\FF\F9\FE", [8 x i8] c"\FA\C8\D2\FD\D7\FF\F9\FE", [8 x i8] c"\FA\C9\D3\FD\D7\FF\F9\FE", [8 x i8] c"\FA\CA\D3\FD\D7\FF\F9\FE", [8 x i8] c"\FA\CB\D4\FD\D8\FF\F9\FE", [8 x i8] c"\FA\CB\D4\FD\D8\FF\F9\FE", [8 x i8] c"\FB\CC\D5\FD\D9\FF\FA\FE", [8 x i8] c"\FB\CD\D5\FD\D9\FF\FA\FE", [8 x i8] c"\FB\CE\D6\FE\DA\FF\FA\FE", [8 x i8] c"\FB\CE\D7\FE\DA\FF\FA\FE", [8 x i8] c"\FC\CF\D8\FE\DB\FF\FA\FE", [8 x i8] c"\FC\D0\D8\FE\DB\FF\FA\FE", [8 x i8] c"\FC\D1\D9\FE\DC\FF\FA\FE", [8 x i8] c"\FC\D2\D9\FE\DC\FF\FA\FE", [8 x i8] c"\FC\D3\DA\FE\DD\FF\FA\FE", [8 x i8] c"\FC\D4\DA\FE\DD\FF\FA\FE", [8 x i8] c"\FD\D5\DB\FE\DE\FF\FA\FE", [8 x i8] c"\FD\D5\DC\FE\DE\FF\FA\FE", [8 x i8] c"\FD\D6\DD\FE\DF\FF\FA\FE", [8 x i8] c"\FD\D7\DD\FE\DF\FF\FA\FE", [8 x i8] c"\FD\D8\DE\FE\E0\FF\FB\FE", [8 x i8] c"\FD\D9\DF\FE\E0\FF\FB\FE", [8 x i8] c"\FD\DA\E0\FE\E1\FF\FB\FE", [8 x i8] c"\FD\DB\E0\FE\E1\FF\FB\FE", [8 x i8] c"\FE\DC\E1\FE\E1\FF\FB\FE", [8 x i8] c"\FE\DD\E2\FE\E1\FF\FB\FE", [8 x i8] c"\FE\DE\E3\FF\E2\FF\FB\FE", [8 x i8] c"\FE\DF\E3\FF\E2\FF\FB\FE", [8 x i8] c"\FE\E0\E4\FF\E3\FF\FB\FE", [8 x i8] c"\FE\E1\E5\FF\E3\FF\FB\FE", [8 x i8] c"\FE\E2\E6\FF\E4\FF\FB\FE", [8 x i8] c"\FE\E3\E6\FF\E5\FF\FB\FE", [8 x i8] c"\FF\E4\E7\FF\E6\FF\FB\FE", [8 x i8] c"\FF\E5\E8\FF\E6\FF\FB\FE", [8 x i8] c"\FF\E6\E9\FF\E7\FF\FC\FE", [8 x i8] c"\FF\E7\EA\FF\E7\FF\FC\FE", [8 x i8] c"\FF\E8\EB\FF\E8\FF\FC\FE", [8 x i8] c"\FF\E9\EC\FF\E8\FF\FC\FE", [8 x i8] c"\FF\EB\ED\FF\E9\FF\FC\FE", [8 x i8] c"\FF\EC\EE\FF\EA\FF\FC\FE", [8 x i8] c"\FF\EE\F0\FF\EB\FF\FC\FF", [8 x i8] c"\FF\EF\F1\FF\EB\FF\FC\FE", [8 x i8] c"\FF\F1\F3\FF\EC\FF\FC\FE", [8 x i8] c"\FF\F3\F5\FF\ED\FF\FC\FE", [8 x i8] c"\FF\F6\F7\FF\EF\FF\FD\FF"], align 16
@default_coef_probs_4x4 = internal unnamed_addr constant [2 x [2 x [6 x [6 x [3 x i8]]]]] [[2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\C3\1D\B7", [3 x i8] c"T1\88", [3 x i8] c"\08*G", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"\1Fk\A9", [3 x i8] c"#c\9F", [3 x i8] c"\11R\8C", [3 x i8] c"\08Br", [3 x i8] c"\02,L", [3 x i8] c"\01\13 "], [6 x [3 x i8]] [[3 x i8] c"(\84\C9", [3 x i8] c"\1Dr\BB", [3 x i8] c"\0D[\9D", [3 x i8] c"\07K\7F", [3 x i8] c"\03:_", [3 x i8] c"\01\1C/"], [6 x [3 x i8]] [[3 x i8] c"E\8E\DD", [3 x i8] c"*z\C9", [3 x i8] c"\0F[\9F", [3 x i8] c"\06Cy", [3 x i8] c"\01*M", [3 x i8] c"\01\11\1F"], [6 x [3 x i8]] [[3 x i8] c"f\94\E4", [3 x i8] c"Cu\CC", [3 x i8] c"\11R\9A", [3 x i8] c"\06;r", [3 x i8] c"\02'K", [3 x i8] c"\01\0F\1D"], [6 x [3 x i8]] [[3 x i8] c"\9C9\E9", [3 x i8] c"w9\D4", [3 x i8] c":0\A3", [3 x i8] c"\1D(|", [3 x i8] c"\0C\1EQ", [3 x i8] c"\03\0C\1F"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\BFk\E2", [3 x i8] c"|u\CC", [3 x i8] c"\19c\9B", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"\1D\94\D2", [3 x i8] c"%~\C2", [3 x i8] c"\08]\9D", [3 x i8] c"\02Dv", [3 x i8] c"\01'E", [3 x i8] c"\01\11!"], [6 x [3 x i8]] [[3 x i8] c")\97\D5", [3 x i8] c"\1B{\C1", [3 x i8] c"\03R\90", [3 x i8] c"\01:i", [3 x i8] c"\01 <", [3 x i8] c"\01\0D\1A"], [6 x [3 x i8]] [[3 x i8] c";\9F\DC", [3 x i8] c"\17~\C6", [3 x i8] c"\04X\97", [3 x i8] c"\01Br", [3 x i8] c"\01&G", [3 x i8] c"\01\12\22"], [6 x [3 x i8]] [[3 x i8] c"r\88\E8", [3 x i8] c"3r\CF", [3 x i8] c"\0BS\9B", [3 x i8] c"\038i", [3 x i8] c"\01!A", [3 x i8] c"\01\11\22"], [6 x [3 x i8]] [[3 x i8] c"\95A\EA", [3 x i8] c"y9\D7", [3 x i8] c"=1\A6", [3 x i8] c"\1C$r", [3 x i8] c"\0C\19L", [3 x i8] c"\03\10*"]]], [2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\D61\DC", [3 x i8] c"\84?\BC", [3 x i8] c"*A\89", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"U\89\DD", [3 x i8] c"h\83\D8", [3 x i8] c"1o\C0", [3 x i8] c"\15W\9B", [3 x i8] c"\021W", [3 x i8] c"\01\10\1C"], [6 x [3 x i8]] [[3 x i8] c"Y\A3\E6", [3 x i8] c"Z\89\DC", [3 x i8] c"\1Dd\B7", [3 x i8] c"\0AF\87", [3 x i8] c"\02*Q", [3 x i8] c"\01\11!"], [6 x [3 x i8]] [[3 x i8] c"l\A7\ED", [3 x i8] c"7\85\DE", [3 x i8] c"\0Fa\B3", [3 x i8] c"\04H\87", [3 x i8] c"\01-U", [3 x i8] c"\01\13&"], [6 x [3 x i8]] [[3 x i8] c"|\92\F0", [3 x i8] c"B|\E0", [3 x i8] c"\11X\AF", [3 x i8] c"\04:z", [3 x i8] c"\01$K", [3 x i8] c"\01\12%"], [6 x [3 x i8]] [[3 x i8] c"\8DO\F1", [3 x i8] c"~F\E3", [3 x i8] c"B:\B6", [3 x i8] c"\1E,\88", [3 x i8] c"\0C\22`", [3 x i8] c"\02\14/"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\E5c\F9", [3 x i8] c"\8Fo\EB", [3 x i8] c".m\C0", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"R\9E\EC", [3 x i8] c"^\92\E0", [3 x i8] c"\19u\BF", [3 x i8] c"\09W\95", [3 x i8] c"\038c", [3 x i8] c"\01!9"], [6 x [3 x i8]] [[3 x i8] c"S\A7\ED", [3 x i8] c"D\91\DE", [3 x i8] c"\0Ag\B1", [3 x i8] c"\02H\83", [3 x i8] c"\01)O", [3 x i8] c"\01\14'"], [6 x [3 x i8]] [[3 x i8] c"c\A7\EF", [3 x i8] c"/\8D\E0", [3 x i8] c"\0Ah\B2", [3 x i8] c"\02I\85", [3 x i8] c"\01,U", [3 x i8] c"\01\16/"], [6 x [3 x i8]] [[3 x i8] c"\7F\91\F3", [3 x i8] c"G\81\E4", [3 x i8] c"\11]\B1", [3 x i8] c"\03=|", [3 x i8] c"\01)T", [3 x i8] c"\01\154"], [6 x [3 x i8]] [[3 x i8] c"\9DN\F4", [3 x i8] c"\8CH\E7", [3 x i8] c"E:\B8", [3 x i8] c"\1F,\89", [3 x i8] c"\0E&i", [3 x i8] c"\08\17="]]]], align 16
@default_coef_probs_8x8 = internal unnamed_addr constant [2 x [2 x [6 x [6 x [3 x i8]]]]] [[2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"}\22\BB", [3 x i8] c"4)\85", [3 x i8] c"\06\1F8", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"%m\99", [3 x i8] c"3f\93", [3 x i8] c"\17W\80", [3 x i8] c"\08Ce", [3 x i8] c"\01)?", [3 x i8] c"\01\13\1D"], [6 x [3 x i8]] [[3 x i8] c"\1F\9A\B9", [3 x i8] c"\11\7F\AF", [3 x i8] c"\06`\91", [3 x i8] c"\02Ir", [3 x i8] c"\013R", [3 x i8] c"\01\1C-"], [6 x [3 x i8]] [[3 x i8] c"\17\A3\C8", [3 x i8] c"\0A\83\B9", [3 x i8] c"\02]\94", [3 x i8] c"\01Co", [3 x i8] c"\01)E", [3 x i8] c"\01\0E\18"], [6 x [3 x i8]] [[3 x i8] c"\1D\B0\D9", [3 x i8] c"\0C\91\C9", [3 x i8] c"\03e\9C", [3 x i8] c"\01Eo", [3 x i8] c"\01'?", [3 x i8] c"\01\0E\17"], [6 x [3 x i8]] [[3 x i8] c"9\C0\E9", [3 x i8] c"\19\9A\D7", [3 x i8] c"\06m\A7", [3 x i8] c"\03Nv", [3 x i8] c"\010E", [3 x i8] c"\01\15\1D"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\CAi\F5", [3 x i8] c"lj\D8", [3 x i8] c"\12Z\90", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"!\AC\DB", [3 x i8] c"@\95\CE", [3 x i8] c"\0Eu\B1", [3 x i8] c"\05Z\8D", [3 x i8] c"\02=_", [3 x i8] c"\01%9"], [6 x [3 x i8]] [[3 x i8] c"!\B3\DC", [3 x i8] c"\0B\8C\C6", [3 x i8] c"\01Y\94", [3 x i8] c"\01<h", [3 x i8] c"\01!9", [3 x i8] c"\01\0C\15"], [6 x [3 x i8]] [[3 x i8] c"\1E\B5\DD", [3 x i8] c"\08\8D\C6", [3 x i8] c"\01W\91", [3 x i8] c"\01:d", [3 x i8] c"\01\1F7", [3 x i8] c"\01\0C\14"], [6 x [3 x i8]] [[3 x i8] c" \BA\E0", [3 x i8] c"\07\8E\C6", [3 x i8] c"\01V\8F", [3 x i8] c"\01:d", [3 x i8] c"\01\1F7", [3 x i8] c"\01\0C\16"], [6 x [3 x i8]] [[3 x i8] c"9\C0\E3", [3 x i8] c"\14\8F\CC", [3 x i8] c"\03`\9A", [3 x i8] c"\01Dp", [3 x i8] c"\01*E", [3 x i8] c"\01\13 "]]], [2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\D4#\D7", [3 x i8] c"q/\A9", [3 x i8] c"\1D0i", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"J\81\CB", [3 x i8] c"jx\CB", [3 x i8] c"1k\B2", [3 x i8] c"\13T\90", [3 x i8] c"\042T", [3 x i8] c"\01\0F\19"], [6 x [3 x i8]] [[3 x i8] c"G\AC\D9", [3 x i8] c",\8D\D1", [3 x i8] c"\0Ff\AD", [3 x i8] c"\06L\85", [3 x i8] c"\023Y", [3 x i8] c"\01\18*"], [6 x [3 x i8]] [[3 x i8] c"@\B9\E7", [3 x i8] c"\1F\94\D8", [3 x i8] c"\08g\AF", [3 x i8] c"\03J\83", [3 x i8] c"\01.Q", [3 x i8] c"\01\12\1E"], [6 x [3 x i8]] [[3 x i8] c"A\C4\EB", [3 x i8] c"\19\9D\DD", [3 x i8] c"\05i\AE", [3 x i8] c"\01Cx", [3 x i8] c"\01&E", [3 x i8] c"\01\0F\1E"], [6 x [3 x i8]] [[3 x i8] c"A\CC\EE", [3 x i8] c"\1E\9C\E0", [3 x i8] c"\07k\B1", [3 x i8] c"\02F|", [3 x i8] c"\01*I", [3 x i8] c"\01\12\22"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\E1V\FB", [3 x i8] c"\90h\EB", [3 x i8] c"*c\B5", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"U\AF\EF", [3 x i8] c"p\A5\E5", [3 x i8] c"\1D\88\C8", [3 x i8] c"\0Cg\A2", [3 x i8] c"\06M{", [3 x i8] c"\025T"], [6 x [3 x i8]] [[3 x i8] c"K\B7\EF", [3 x i8] c"\1E\9B\DD", [3 x i8] c"\03j\AB", [3 x i8] c"\01J\80", [3 x i8] c"\01,L", [3 x i8] c"\01\11\1C"], [6 x [3 x i8]] [[3 x i8] c"I\B9\F0", [3 x i8] c"\1B\9F\DE", [3 x i8] c"\02k\AC", [3 x i8] c"\01K\7F", [3 x i8] c"\01*I", [3 x i8] c"\01\11\1D"], [6 x [3 x i8]] [[3 x i8] c">\BE\EE", [3 x i8] c"\15\9F\DE", [3 x i8] c"\02k\AC", [3 x i8] c"\01Hz", [3 x i8] c"\01(G", [3 x i8] c"\01\12 "], [6 x [3 x i8]] [[3 x i8] c"=\C7\F0", [3 x i8] c"\1B\A1\E2", [3 x i8] c"\04q\B4", [3 x i8] c"\01L\81", [3 x i8] c"\01.P", [3 x i8] c"\01\17)"]]]], align 16
@default_coef_probs_16x16 = internal unnamed_addr constant [2 x [2 x [6 x [6 x [3 x i8]]]]] [[2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\07\1B\99", [3 x i8] c"\05\1E_", [3 x i8] c"\01\10\1E", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"2K\7F", [3 x i8] c"9K|", [3 x i8] c"\1BCl", [3 x i8] c"\0A6V", [3 x i8] c"\01!4", [3 x i8] c"\01\0C\12"], [6 x [3 x i8]] [[3 x i8] c"+}\97", [3 x i8] c"\1Al\94", [3 x i8] c"\07Sz", [3 x i8] c"\02;Y", [3 x i8] c"\01&<", [3 x i8] c"\01\11\1B"], [6 x [3 x i8]] [[3 x i8] c"\17\90\A3", [3 x i8] c"\0Dp\9A", [3 x i8] c"\02Ku", [3 x i8] c"\012Q", [3 x i8] c"\01\1F3", [3 x i8] c"\01\0E\17"], [6 x [3 x i8]] [[3 x i8] c"\12\A2\B9", [3 x i8] c"\06{\AB", [3 x i8] c"\01N}", [3 x i8] c"\013V", [3 x i8] c"\01\1F6", [3 x i8] c"\01\0E\17"], [6 x [3 x i8]] [[3 x i8] c"\0F\C7\E3", [3 x i8] c"\03\96\CC", [3 x i8] c"\01[\92", [3 x i8] c"\017_", [3 x i8] c"\01\1E5", [3 x i8] c"\01\0B\14"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\137\F0", [3 x i8] c"\13;\C4", [3 x i8] c"\034i", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c")\A6\CF", [3 x i8] c"h\99\C7", [3 x i8] c"\1F{\B5", [3 x i8] c"\0Ee\98", [3 x i8] c"\05Hj", [3 x i8] c"\01$4"], [6 x [3 x i8]] [[3 x i8] c"#\B0\D3", [3 x i8] c"\0C\83\BE", [3 x i8] c"\02X\90", [3 x i8] c"\01<e", [3 x i8] c"\01$<", [3 x i8] c"\01\10\1C"], [6 x [3 x i8]] [[3 x i8] c"\1C\B7\D5", [3 x i8] c"\08\86\BF", [3 x i8] c"\01V\8E", [3 x i8] c"\018`", [3 x i8] c"\01\1E5", [3 x i8] c"\01\0C\14"], [6 x [3 x i8]] [[3 x i8] c"\14\BE\D7", [3 x i8] c"\04\87\C0", [3 x i8] c"\01T\8B", [3 x i8] c"\015[", [3 x i8] c"\01\1C1", [3 x i8] c"\01\0B\14"], [6 x [3 x i8]] [[3 x i8] c"\0D\C4\D8", [3 x i8] c"\02\89\C0", [3 x i8] c"\01V\8F", [3 x i8] c"\019c", [3 x i8] c"\01 8", [3 x i8] c"\01\0D\18"]]], [2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\D3\1D\D9", [3 x i8] c"`/\9C", [3 x i8] c"\16+W", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"Nx\C1", [3 x i8] c"ot\BA", [3 x i8] c".f\A4", [3 x i8] c"\0FP\80", [3 x i8] c"\021L", [3 x i8] c"\01\12\1C"], [6 x [3 x i8]] [[3 x i8] c"G\A1\CB", [3 x i8] c"*\84\C0", [3 x i8] c"\0Ab\96", [3 x i8] c"\03Em", [3 x i8] c"\01,F", [3 x i8] c"\01\12\1D"], [6 x [3 x i8]] [[3 x i8] c"9\BA\D3", [3 x i8] c"\1E\8C\C4", [3 x i8] c"\04]\92", [3 x i8] c"\01>f", [3 x i8] c"\01&A", [3 x i8] c"\01\10\1B"], [6 x [3 x i8]] [[3 x i8] c"/\C7\D9", [3 x i8] c"\0E\91\C4", [3 x i8] c"\01X\8E", [3 x i8] c"\019b", [3 x i8] c"\01$>", [3 x i8] c"\01\0F\1A"], [6 x [3 x i8]] [[3 x i8] c"\1A\DB\E5", [3 x i8] c"\05\9B\CF", [3 x i8] c"\01^\97", [3 x i8] c"\01<h", [3 x i8] c"\01$>", [3 x i8] c"\01\10\1C"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\E9\1D\F8", [3 x i8] c"\92/\DC", [3 x i8] c"+4\8C", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"d\A3\E8", [3 x i8] c"\B3\A1\DE", [3 x i8] c"?\8E\CC", [3 x i8] c"%q\AE", [3 x i8] c"\1AY\89", [3 x i8] c"\12Da"], [6 x [3 x i8]] [[3 x i8] c"U\B5\E6", [3 x i8] c" \92\D1", [3 x i8] c"\07d\A4", [3 x i8] c"\03Gy", [3 x i8] c"\01-M", [3 x i8] c"\01\12\1E"], [6 x [3 x i8]] [[3 x i8] c"A\BB\E6", [3 x i8] c"\14\94\CF", [3 x i8] c"\02a\9F", [3 x i8] c"\01Dt", [3 x i8] c"\01(F", [3 x i8] c"\01\0E\1D"], [6 x [3 x i8]] [[3 x i8] c"(\C2\E3", [3 x i8] c"\08\93\CC", [3 x i8] c"\01^\9B", [3 x i8] c"\01Ap", [3 x i8] c"\01'B", [3 x i8] c"\01\0E\1A"], [6 x [3 x i8]] [[3 x i8] c"\10\D0\E4", [3 x i8] c"\03\97\CF", [3 x i8] c"\01b\A0", [3 x i8] c"\01Cu", [3 x i8] c"\01)J", [3 x i8] c"\01\11\1F"]]]], align 16
@default_coef_probs_32x32 = internal unnamed_addr constant [2 x [2 x [6 x [6 x [3 x i8]]]]] [[2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\11&\8C", [3 x i8] c"\07\22P", [3 x i8] c"\01\11\1D", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"%K\80", [3 x i8] c")L\80", [3 x i8] c"\1ABt", [3 x i8] c"\0C4^", [3 x i8] c"\02 7", [3 x i8] c"\01\0A\10"], [6 x [3 x i8]] [[3 x i8] c"2\7F\9A", [3 x i8] c"%m\98", [3 x i8] c"\10Ry", [3 x i8] c"\05;U", [3 x i8] c"\01#6", [3 x i8] c"\01\0D\14"], [6 x [3 x i8]] [[3 x i8] c"(\8E\A7", [3 x i8] c"\11n\9D", [3 x i8] c"\02Gp", [3 x i8] c"\01,H", [3 x i8] c"\01\1B-", [3 x i8] c"\01\0B\11"], [6 x [3 x i8]] [[3 x i8] c"\1E\AF\BC", [3 x i8] c"\09|\A9", [3 x i8] c"\01Jt", [3 x i8] c"\010N", [3 x i8] c"\01\1E1", [3 x i8] c"\01\0B\12"], [6 x [3 x i8]] [[3 x i8] c"\0A\DE\DF", [3 x i8] c"\02\96\C2", [3 x i8] c"\01S\80", [3 x i8] c"\010O", [3 x i8] c"\01\1B-", [3 x i8] c"\01\0B\11"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"$)\EB", [3 x i8] c"\1D$\C1", [3 x i8] c"\0A\1Bo", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"U\A5\DE", [3 x i8] c"\B1\A2\D7", [3 x i8] c"n\87\C3", [3 x i8] c"9q\A8", [3 x i8] c"\17Sx", [3 x i8] c"\0A1="], [6 x [3 x i8]] [[3 x i8] c"U\BE\DF", [3 x i8] c"$\8B\C8", [3 x i8] c"\05Z\92", [3 x i8] c"\01<g", [3 x i8] c"\01&A", [3 x i8] c"\01\12\1E"], [6 x [3 x i8]] [[3 x i8] c"H\CA\DF", [3 x i8] c"\17\8D\C7", [3 x i8] c"\02V\8C", [3 x i8] c"\018a", [3 x i8] c"\01$=", [3 x i8] c"\01\10\1B"], [6 x [3 x i8]] [[3 x i8] c"7\DA\E1", [3 x i8] c"\0D\91\C8", [3 x i8] c"\01V\8D", [3 x i8] c"\019c", [3 x i8] c"\01#=", [3 x i8] c"\01\0D\16"], [6 x [3 x i8]] [[3 x i8] c"\0F\EB\D4", [3 x i8] c"\01\84\B8", [3 x i8] c"\01T\8B", [3 x i8] c"\019a", [3 x i8] c"\01\228", [3 x i8] c"\01\0E\17"]]], [2 x [6 x [6 x [3 x i8]]]] [[6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\B5\15\C9", [3 x i8] c"=%{", [3 x i8] c"\0A&G", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"/j\AC", [3 x i8] c"_h\AD", [3 x i8] c"*]\9F", [3 x i8] c"\12M\83", [3 x i8] c"\042Q", [3 x i8] c"\01\11\17"], [6 x [3 x i8]] [[3 x i8] c">\93\C7", [3 x i8] c",\82\BD", [3 x i8] c"\1Cf\9A", [3 x i8] c"\12Ks", [3 x i8] c"\02,A", [3 x i8] c"\01\0C\13"], [6 x [3 x i8]] [[3 x i8] c"7\99\D2", [3 x i8] c"\18\82\C2", [3 x i8] c"\03]\92", [3 x i8] c"\01=a", [3 x i8] c"\01\1F2", [3 x i8] c"\01\0A\10"], [6 x [3 x i8]] [[3 x i8] c"1\BA\DF", [3 x i8] c"\11\94\CC", [3 x i8] c"\01`\8E", [3 x i8] c"\015S", [3 x i8] c"\01\1A,", [3 x i8] c"\01\0B\11"], [6 x [3 x i8]] [[3 x i8] c"\0D\D9\D4", [3 x i8] c"\02\88\B4", [3 x i8] c"\01N|", [3 x i8] c"\012S", [3 x i8] c"\01\1D1", [3 x i8] c"\01\0E\17"]], [6 x [6 x [3 x i8]]] [[6 x [3 x i8]] [[3 x i8] c"\C5\0D\F7", [3 x i8] c"R\11\DE", [3 x i8] c"\19\11\A2", [3 x i8] zeroinitializer, [3 x i8] zeroinitializer, [3 x i8] zeroinitializer], [6 x [3 x i8]] [[3 x i8] c"~\BA\F7", [3 x i8] c"\EA\BF\F3", [3 x i8] c"\B0\B1\EA", [3 x i8] c"h\9E\DC", [3 x i8] c"B\80\BA", [3 x i8] c"7Z\89"], [6 x [3 x i8]] [[3 x i8] c"o\C5\F2", [3 x i8] c".\9E\DB", [3 x i8] c"\09h\AB", [3 x i8] c"\02A}", [3 x i8] c"\01,P", [3 x i8] c"\01\11["], [6 x [3 x i8]] [[3 x i8] c"h\D0\F5", [3 x i8] c"'\A8\E0", [3 x i8] c"\03m\A2", [3 x i8] c"\01O|", [3 x i8] c"\012f", [3 x i8] c"\01+f"], [6 x [3 x i8]] [[3 x i8] c"T\DC\F6", [3 x i8] c"\1F\B1\E7", [3 x i8] c"\02s\B4", [3 x i8] c"\01O\86", [3 x i8] c"\017M", [3 x i8] c"\01<O"], [6 x [3 x i8]] [[3 x i8] c"+\F3\F0", [3 x i8] c"\08\B4\D9", [3 x i8] c"\01s\A6", [3 x i8] c"\01Ty", [3 x i8] c"\013C", [3 x i8] c"\01\10\06"]]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_model_to_full_probs(i8* readonly, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i8* %1, %0
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %0, i64 3, i1 false)
  br label %5

5:                                                ; preds = %2, %4
  %6 = getelementptr inbounds i8, i8* %1, i64 3
  %7 = getelementptr inbounds i8, i8* %0, i64 2
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %10, i64 0
  %12 = bitcast i8* %11 to i64*
  %13 = bitcast i8* %6 to i64*
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_default_coef_probs(%struct.VP9Common* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %3 = load %struct.frame_contexts*, %struct.frame_contexts** %2, align 8
  %4 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %3, i64 0, i32 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %4, i8* align 16 getelementptr inbounds ([2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* @default_coef_probs_4x4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0), i64 432, i1 false)
  %5 = load %struct.frame_contexts*, %struct.frame_contexts** %2, align 8
  %6 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %5, i64 0, i32 3, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %6, i8* align 16 getelementptr inbounds ([2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* @default_coef_probs_8x8, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0), i64 432, i1 false)
  %7 = load %struct.frame_contexts*, %struct.frame_contexts** %2, align 8
  %8 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %7, i64 0, i32 3, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %8, i8* align 16 getelementptr inbounds ([2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* @default_coef_probs_16x16, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0), i64 432, i1 false)
  %9 = load %struct.frame_contexts*, %struct.frame_contexts** %2, align 8
  %10 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %9, i64 0, i32 3, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %10, i8* align 16 getelementptr inbounds ([2 x [2 x [6 x [6 x [3 x i8]]]]], [2 x [2 x [6 x [6 x [3 x i8]]]]]* @default_coef_probs_32x32, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0), i64 432, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_adapt_coef_probs(%struct.VP9Common* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 23
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 27
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 22
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 128, i32 112
  br label %14

14:                                               ; preds = %1, %9, %5
  %15 = phi i32 [ 112, %5 ], [ %13, %9 ], [ 112, %1 ]
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 74
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 75
  %18 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  br label %19

19:                                               ; preds = %160, %14
  %20 = phi i64 [ 0, %14 ], [ %161, %160 ]
  %21 = load %struct.frame_contexts*, %struct.frame_contexts** %16, align 16
  %22 = load i32, i32* %17, align 8
  %23 = zext i32 %22 to i64
  %24 = load %struct.frame_contexts*, %struct.frame_contexts** %18, align 8
  br label %25

25:                                               ; preds = %90, %19
  %26 = phi i64 [ 0, %19 ], [ %91, %90 ]
  br label %27

27:                                               ; preds = %87, %25
  %28 = phi i64 [ 0, %25 ], [ %88, %87 ]
  br label %29

29:                                               ; preds = %84, %27
  %30 = phi i64 [ 0, %27 ], [ %85, %84 ]
  %31 = icmp eq i64 %30, 0
  %32 = select i1 %31, i64 3, i64 6
  br label %33

33:                                               ; preds = %143, %29
  %34 = phi i64 [ 0, %29 ], [ %158, %143 ]
  %35 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 2
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 4, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34
  %42 = load i32, i32* %41, align 4
  %43 = add i32 %40, %38
  %44 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %21, i64 %23, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i32 %42, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %33
  %48 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 76, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 3
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = shl nuw nsw i64 %50, 8
  %52 = lshr i32 %42, 1
  %53 = zext i32 %52 to i64
  %54 = add nuw nsw i64 %51, %53
  %55 = zext i32 %42 to i64
  %56 = udiv i64 %54, %55
  %57 = trunc i64 %56 to i32
  %58 = sub nsw i32 255, %57
  %59 = lshr i32 %58, 23
  %60 = or i32 %59, %57
  %61 = icmp eq i32 %57, 0
  %62 = zext i1 %61 to i32
  %63 = and i32 %60, 255
  %64 = or i32 %63, %62
  br label %65

65:                                               ; preds = %47, %33
  %66 = phi i32 [ %64, %47 ], [ 128, %33 ]
  %67 = icmp ult i32 %42, 24
  %68 = select i1 %67, i32 %42, i32 24
  %69 = mul nuw nsw i32 %68, %15
  %70 = udiv i32 %69, 24
  %71 = zext i8 %45 to i32
  %72 = sub nsw i32 256, %70
  %73 = mul nsw i32 %72, %71
  %74 = mul nsw i32 %66, %70
  %75 = add nsw i32 %73, 128
  %76 = add i32 %75, %74
  %77 = lshr i32 %76, 8
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %24, i64 0, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 0
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %21, i64 %23, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 1
  %81 = load i8, i8* %80, align 1
  %82 = add i32 %43, %36
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %109, label %93

84:                                               ; preds = %143
  %85 = add nuw nsw i64 %30, 1
  %86 = icmp eq i64 %85, 6
  br i1 %86, label %87, label %29

87:                                               ; preds = %84
  %88 = add nuw nsw i64 %28, 1
  %89 = icmp eq i64 %88, 2
  br i1 %89, label %90, label %27

90:                                               ; preds = %87
  %91 = add nuw nsw i64 %26, 1
  %92 = icmp eq i64 %91, 2
  br i1 %92, label %160, label %25

93:                                               ; preds = %65
  %94 = zext i32 %36 to i64
  %95 = shl nuw nsw i64 %94, 8
  %96 = lshr i32 %82, 1
  %97 = zext i32 %96 to i64
  %98 = add nuw nsw i64 %95, %97
  %99 = zext i32 %82 to i64
  %100 = udiv i64 %98, %99
  %101 = trunc i64 %100 to i32
  %102 = sub nsw i32 255, %101
  %103 = lshr i32 %102, 23
  %104 = or i32 %103, %101
  %105 = icmp eq i32 %101, 0
  %106 = zext i1 %105 to i32
  %107 = and i32 %104, 255
  %108 = or i32 %107, %106
  br label %109

109:                                              ; preds = %93, %65
  %110 = phi i32 [ %108, %93 ], [ 128, %65 ]
  %111 = icmp ult i32 %82, 24
  %112 = select i1 %111, i32 %82, i32 24
  %113 = mul nuw nsw i32 %112, %15
  %114 = udiv i32 %113, 24
  %115 = zext i8 %81 to i32
  %116 = sub nsw i32 256, %114
  %117 = mul nsw i32 %116, %115
  %118 = mul nsw i32 %110, %114
  %119 = add nsw i32 %117, 128
  %120 = add i32 %119, %118
  %121 = lshr i32 %120, 8
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %24, i64 0, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 1
  store i8 %122, i8* %123, align 1
  %124 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %21, i64 %23, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 2
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i32 %43, 0
  br i1 %126, label %143, label %127

127:                                              ; preds = %109
  %128 = zext i32 %38 to i64
  %129 = shl nuw nsw i64 %128, 8
  %130 = lshr i32 %43, 1
  %131 = zext i32 %130 to i64
  %132 = add nuw nsw i64 %129, %131
  %133 = zext i32 %43 to i64
  %134 = udiv i64 %132, %133
  %135 = trunc i64 %134 to i32
  %136 = sub nsw i32 255, %135
  %137 = lshr i32 %136, 23
  %138 = or i32 %137, %135
  %139 = icmp eq i32 %135, 0
  %140 = zext i1 %139 to i32
  %141 = and i32 %138, 255
  %142 = or i32 %141, %140
  br label %143

143:                                              ; preds = %127, %109
  %144 = phi i32 [ %142, %127 ], [ 128, %109 ]
  %145 = icmp ult i32 %43, 24
  %146 = select i1 %145, i32 %43, i32 24
  %147 = mul nuw nsw i32 %146, %15
  %148 = udiv i32 %147, 24
  %149 = zext i8 %125 to i32
  %150 = sub nsw i32 256, %148
  %151 = mul nsw i32 %150, %149
  %152 = mul nsw i32 %144, %148
  %153 = add nsw i32 %151, 128
  %154 = add i32 %153, %152
  %155 = lshr i32 %154, 8
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %24, i64 0, i32 3, i64 %20, i64 %26, i64 %28, i64 %30, i64 %34, i64 2
  store i8 %156, i8* %157, align 1
  %158 = add nuw nsw i64 %34, 1
  %159 = icmp eq i64 %158, %32
  br i1 %159, label %84, label %33

160:                                              ; preds = %90
  %161 = add nuw nsw i64 %20, 1
  %162 = icmp eq i64 %161, 4
  br i1 %162, label %163, label %19

163:                                              ; preds = %160
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
