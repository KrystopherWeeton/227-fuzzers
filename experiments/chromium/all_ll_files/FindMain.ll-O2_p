; ModuleID = '../../third_party/angle/src/compiler/translator/tree_util/FindMain.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_util/FindMain.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.1"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector.1" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.9, i32 }
%union.anon.9 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.2"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.2" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.3"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.3" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2sh13FindMainIndexEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.sh::TIntermBlock"* %0 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %3 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %3, i64 27
  %5 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %4, align 8
  %6 = tail call %"class.sh::TVector"* %5(%"class.sh::TIntermBlock"* %0) #2
  %7 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.sh::TVector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %9, %11
  br i1 %12, label %38, label %13

13:                                               ; preds = %1, %31
  %14 = phi i64 [ %34, %31 ], [ %11, %1 ]
  %15 = phi i64 [ %32, %31 ], [ 0, %1 ]
  %16 = inttoptr i64 %14 to %"class.sh::TIntermNode"**
  %17 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %16, i64 %15
  %18 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"* %18 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %20 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %20, i64 6
  %22 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %21, align 8
  %23 = tail call %"class.sh::TIntermFunctionDefinition"* %22(%"class.sh::TIntermNode"* %18) #2
  %24 = icmp eq %"class.sh::TIntermFunctionDefinition"* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %13
  %26 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %23, i64 0, i32 1
  %27 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %27, i64 0, i32 1
  %29 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %28, align 8
  %30 = tail call zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"* %29) #2
  br i1 %30, label %38, label %31

31:                                               ; preds = %25, %13
  %32 = add nuw i64 %15, 1
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %10, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 3
  %37 = icmp ult i64 %32, %36
  br i1 %37, label %13, label %38

38:                                               ; preds = %25, %31, %1
  %39 = phi i64 [ -1, %1 ], [ -1, %31 ], [ %15, %25 ]
  ret i64 %39
}

declare zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermFunctionDefinition"* @_ZN2sh8FindMainEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.sh::TIntermBlock"* %0 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %3 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %3, i64 27
  %5 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %4, align 8
  %6 = tail call %"class.sh::TVector"* %5(%"class.sh::TIntermBlock"* %0) #2
  %7 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  br i1 %11, label %30, label %12

12:                                               ; preds = %1, %27
  %13 = phi %"class.sh::TIntermNode"** [ %28, %27 ], [ %8, %1 ]
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %16, i64 6
  %18 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermFunctionDefinition"* %18(%"class.sh::TIntermNode"* %14) #2
  %20 = icmp eq %"class.sh::TIntermFunctionDefinition"* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %19, i64 0, i32 1
  %23 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %23, i64 0, i32 1
  %25 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %24, align 8
  %26 = tail call zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"* %25) #2
  br i1 %26, label %30, label %27

27:                                               ; preds = %21, %12
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, i64 1
  %29 = icmp eq %"class.sh::TIntermNode"** %28, %10
  br i1 %29, label %30, label %12

30:                                               ; preds = %21, %27, %1
  %31 = phi %"class.sh::TIntermFunctionDefinition"* [ null, %1 ], [ null, %27 ], [ %19, %21 ]
  ret %"class.sh::TIntermFunctionDefinition"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #0 {
  %2 = bitcast %"class.sh::TIntermBlock"* %0 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %3 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %3, i64 27
  %5 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %4, align 8
  %6 = tail call %"class.sh::TVector"* %5(%"class.sh::TIntermBlock"* %0) #2
  %7 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  br i1 %11, label %30, label %12

12:                                               ; preds = %1, %27
  %13 = phi %"class.sh::TIntermNode"** [ %28, %27 ], [ %8, %1 ]
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %16, i64 6
  %18 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermFunctionDefinition"* %18(%"class.sh::TIntermNode"* %14) #2
  %20 = icmp eq %"class.sh::TIntermFunctionDefinition"* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %19, i64 0, i32 1
  %23 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %23, i64 0, i32 1
  %25 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %24, align 8
  %26 = tail call zeroext i1 @_ZNK2sh9TFunction6isMainEv(%"class.sh::TFunction"* %25) #2
  br i1 %26, label %30, label %27

27:                                               ; preds = %21, %12
  %28 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, i64 1
  %29 = icmp eq %"class.sh::TIntermNode"** %28, %10
  br i1 %29, label %30, label %12

30:                                               ; preds = %21, %27, %1
  %31 = phi %"class.sh::TIntermFunctionDefinition"* [ null, %1 ], [ %19, %21 ], [ null, %27 ]
  %32 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %31, i64 0, i32 2
  %33 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %32, align 8
  ret %"class.sh::TIntermBlock"* %33
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
