; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/subtractor_output.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/subtractor_output.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.webrtc::SubtractorOutput" = type { %"struct.std::__1::array", %"struct.std::__1::array", %"struct.std::__1::array", %"struct.std::__1::array", %"struct.webrtc::FftData", %"struct.std::__1::array.0", %"struct.std::__1::array.0", float, float, float, float, float, float, float }
%"struct.std::__1::array" = type { [64 x float] }
%"struct.webrtc::FftData" = type { %"struct.std::__1::array.0", %"struct.std::__1::array.0" }
%"struct.std::__1::array.0" = type { [65 x float] }

@_ZN6webrtc16SubtractorOutputC1Ev = hidden unnamed_addr alias void (%"struct.webrtc::SubtractorOutput"*), void (%"struct.webrtc::SubtractorOutput"*)* @_ZN6webrtc16SubtractorOutputC2Ev
@_ZN6webrtc16SubtractorOutputD1Ev = hidden unnamed_addr alias void (%"struct.webrtc::SubtractorOutput"*), void (%"struct.webrtc::SubtractorOutput"*)* @_ZN6webrtc16SubtractorOutputD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc16SubtractorOutputC2Ev(%"struct.webrtc::SubtractorOutput"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 7
  %3 = bitcast float* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc16SubtractorOutputD2Ev(%"struct.webrtc::SubtractorOutput"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc16SubtractorOutput5ResetEv(%"struct.webrtc::SubtractorOutput"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = bitcast %"struct.webrtc::SubtractorOutput"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 2084, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16SubtractorOutput14ComputeMetricsEN3rtc9ArrayViewIKfLln4711EEE(%"struct.webrtc::SubtractorOutput"*, float*, i64) local_unnamed_addr #4 align 2 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = getelementptr inbounds float, float* %1, i64 %2
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %66, label %8

8:                                                ; preds = %3
  %9 = shl nsw i64 %2, 2
  %10 = add i64 %9, -4
  %11 = lshr exact i64 %10, 2
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %8, %15
  %16 = phi float [ %21, %15 ], [ 0.000000e+00, %8 ]
  %17 = phi float* [ %22, %15 ], [ %1, %8 ]
  %18 = phi i64 [ %23, %15 ], [ %13, %8 ]
  %19 = load float, float* %17, align 4
  %20 = fmul float %19, %19
  %21 = fadd float %16, %20
  %22 = getelementptr inbounds float, float* %17, i64 1
  %23 = add i64 %18, -1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %15, !llvm.loop !2

25:                                               ; preds = %15, %8
  %26 = phi float [ undef, %8 ], [ %21, %15 ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %21, %15 ]
  %28 = phi float* [ %1, %8 ], [ %22, %15 ]
  %29 = icmp ult i64 %10, 28
  br i1 %29, label %66, label %30

30:                                               ; preds = %25, %30
  %31 = phi float [ %63, %30 ], [ %27, %25 ]
  %32 = phi float* [ %64, %30 ], [ %28, %25 ]
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, %33
  %35 = fadd float %31, %34
  %36 = getelementptr inbounds float, float* %32, i64 1
  %37 = load float, float* %36, align 4
  %38 = fmul float %37, %37
  %39 = fadd float %35, %38
  %40 = getelementptr inbounds float, float* %32, i64 2
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, %41
  %43 = fadd float %39, %42
  %44 = getelementptr inbounds float, float* %32, i64 3
  %45 = load float, float* %44, align 4
  %46 = fmul float %45, %45
  %47 = fadd float %43, %46
  %48 = getelementptr inbounds float, float* %32, i64 4
  %49 = load float, float* %48, align 4
  %50 = fmul float %49, %49
  %51 = fadd float %47, %50
  %52 = getelementptr inbounds float, float* %32, i64 5
  %53 = load float, float* %52, align 4
  %54 = fmul float %53, %53
  %55 = fadd float %51, %54
  %56 = getelementptr inbounds float, float* %32, i64 6
  %57 = load float, float* %56, align 4
  %58 = fmul float %57, %57
  %59 = fadd float %55, %58
  %60 = getelementptr inbounds float, float* %32, i64 7
  %61 = load float, float* %60, align 4
  %62 = fmul float %61, %61
  %63 = fadd float %59, %62
  %64 = getelementptr inbounds float, float* %32, i64 8
  %65 = icmp eq float* %64, %6
  br i1 %65, label %66, label %30

66:                                               ; preds = %25, %30, %3
  %67 = phi float [ 0.000000e+00, %3 ], [ %26, %25 ], [ %63, %30 ]
  %68 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 11
  store float %67, float* %68, align 4
  %69 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 2, i32 0, i64 0
  %70 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 2, i32 0, i64 64
  br label %71

71:                                               ; preds = %71, %66
  %72 = phi float [ 0.000000e+00, %66 ], [ %104, %71 ]
  %73 = phi float* [ %69, %66 ], [ %105, %71 ]
  %74 = load float, float* %73, align 4
  %75 = fmul float %74, %74
  %76 = fadd float %72, %75
  %77 = getelementptr inbounds float, float* %73, i64 1
  %78 = load float, float* %77, align 4
  %79 = fmul float %78, %78
  %80 = fadd float %76, %79
  %81 = getelementptr inbounds float, float* %73, i64 2
  %82 = load float, float* %81, align 4
  %83 = fmul float %82, %82
  %84 = fadd float %80, %83
  %85 = getelementptr inbounds float, float* %73, i64 3
  %86 = load float, float* %85, align 4
  %87 = fmul float %86, %86
  %88 = fadd float %84, %87
  %89 = getelementptr inbounds float, float* %73, i64 4
  %90 = load float, float* %89, align 4
  %91 = fmul float %90, %90
  %92 = fadd float %88, %91
  %93 = getelementptr inbounds float, float* %73, i64 5
  %94 = load float, float* %93, align 4
  %95 = fmul float %94, %94
  %96 = fadd float %92, %95
  %97 = getelementptr inbounds float, float* %73, i64 6
  %98 = load float, float* %97, align 4
  %99 = fmul float %98, %98
  %100 = fadd float %96, %99
  %101 = getelementptr inbounds float, float* %73, i64 7
  %102 = load float, float* %101, align 4
  %103 = fmul float %102, %102
  %104 = fadd float %100, %103
  %105 = getelementptr inbounds float, float* %73, i64 8
  %106 = icmp eq float* %105, %70
  br i1 %106, label %107, label %71

107:                                              ; preds = %71
  %108 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 9
  store float %104, float* %108, align 4
  %109 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 3, i32 0, i64 0
  %110 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 3, i32 0, i64 64
  br label %111

111:                                              ; preds = %111, %107
  %112 = phi float [ 0.000000e+00, %107 ], [ %144, %111 ]
  %113 = phi float* [ %109, %107 ], [ %145, %111 ]
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, %114
  %116 = fadd float %112, %115
  %117 = getelementptr inbounds float, float* %113, i64 1
  %118 = load float, float* %117, align 4
  %119 = fmul float %118, %118
  %120 = fadd float %116, %119
  %121 = getelementptr inbounds float, float* %113, i64 2
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, %122
  %124 = fadd float %120, %123
  %125 = getelementptr inbounds float, float* %113, i64 3
  %126 = load float, float* %125, align 4
  %127 = fmul float %126, %126
  %128 = fadd float %124, %127
  %129 = getelementptr inbounds float, float* %113, i64 4
  %130 = load float, float* %129, align 4
  %131 = fmul float %130, %130
  %132 = fadd float %128, %131
  %133 = getelementptr inbounds float, float* %113, i64 5
  %134 = load float, float* %133, align 4
  %135 = fmul float %134, %134
  %136 = fadd float %132, %135
  %137 = getelementptr inbounds float, float* %113, i64 6
  %138 = load float, float* %137, align 4
  %139 = fmul float %138, %138
  %140 = fadd float %136, %139
  %141 = getelementptr inbounds float, float* %113, i64 7
  %142 = load float, float* %141, align 4
  %143 = fmul float %142, %142
  %144 = fadd float %140, %143
  %145 = getelementptr inbounds float, float* %113, i64 8
  %146 = icmp eq float* %145, %110
  br i1 %146, label %147, label %111

147:                                              ; preds = %111
  %148 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 10
  store float %144, float* %148, align 4
  %149 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 0, i32 0, i64 0
  %150 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 0, i32 0, i64 64
  br label %151

151:                                              ; preds = %151, %147
  %152 = phi float [ 0.000000e+00, %147 ], [ %184, %151 ]
  %153 = phi float* [ %149, %147 ], [ %185, %151 ]
  %154 = load float, float* %153, align 4
  %155 = fmul float %154, %154
  %156 = fadd float %152, %155
  %157 = getelementptr inbounds float, float* %153, i64 1
  %158 = load float, float* %157, align 4
  %159 = fmul float %158, %158
  %160 = fadd float %156, %159
  %161 = getelementptr inbounds float, float* %153, i64 2
  %162 = load float, float* %161, align 4
  %163 = fmul float %162, %162
  %164 = fadd float %160, %163
  %165 = getelementptr inbounds float, float* %153, i64 3
  %166 = load float, float* %165, align 4
  %167 = fmul float %166, %166
  %168 = fadd float %164, %167
  %169 = getelementptr inbounds float, float* %153, i64 4
  %170 = load float, float* %169, align 4
  %171 = fmul float %170, %170
  %172 = fadd float %168, %171
  %173 = getelementptr inbounds float, float* %153, i64 5
  %174 = load float, float* %173, align 4
  %175 = fmul float %174, %174
  %176 = fadd float %172, %175
  %177 = getelementptr inbounds float, float* %153, i64 6
  %178 = load float, float* %177, align 4
  %179 = fmul float %178, %178
  %180 = fadd float %176, %179
  %181 = getelementptr inbounds float, float* %153, i64 7
  %182 = load float, float* %181, align 4
  %183 = fmul float %182, %182
  %184 = fadd float %180, %183
  %185 = getelementptr inbounds float, float* %153, i64 8
  %186 = icmp eq float* %185, %150
  br i1 %186, label %187, label %151

187:                                              ; preds = %151
  %188 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 7
  store float %184, float* %188, align 4
  %189 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 1, i32 0, i64 0
  %190 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 1, i32 0, i64 64
  br label %191

191:                                              ; preds = %191, %187
  %192 = phi float [ 0.000000e+00, %187 ], [ %224, %191 ]
  %193 = phi float* [ %189, %187 ], [ %225, %191 ]
  %194 = load float, float* %193, align 4
  %195 = fmul float %194, %194
  %196 = fadd float %192, %195
  %197 = getelementptr inbounds float, float* %193, i64 1
  %198 = load float, float* %197, align 4
  %199 = fmul float %198, %198
  %200 = fadd float %196, %199
  %201 = getelementptr inbounds float, float* %193, i64 2
  %202 = load float, float* %201, align 4
  %203 = fmul float %202, %202
  %204 = fadd float %200, %203
  %205 = getelementptr inbounds float, float* %193, i64 3
  %206 = load float, float* %205, align 4
  %207 = fmul float %206, %206
  %208 = fadd float %204, %207
  %209 = getelementptr inbounds float, float* %193, i64 4
  %210 = load float, float* %209, align 4
  %211 = fmul float %210, %210
  %212 = fadd float %208, %211
  %213 = getelementptr inbounds float, float* %193, i64 5
  %214 = load float, float* %213, align 4
  %215 = fmul float %214, %214
  %216 = fadd float %212, %215
  %217 = getelementptr inbounds float, float* %193, i64 6
  %218 = load float, float* %217, align 4
  %219 = fmul float %218, %218
  %220 = fadd float %216, %219
  %221 = getelementptr inbounds float, float* %193, i64 7
  %222 = load float, float* %221, align 4
  %223 = fmul float %222, %222
  %224 = fadd float %220, %223
  %225 = getelementptr inbounds float, float* %193, i64 8
  %226 = icmp eq float* %225, %190
  br i1 %226, label %227, label %191

227:                                              ; preds = %191
  %228 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 8
  store float %224, float* %228, align 4
  %229 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 0, i32 0, i64 1
  br label %230

230:                                              ; preds = %230, %227
  %231 = phi float* [ %229, %227 ], [ %247, %230 ]
  %232 = phi float* [ %149, %227 ], [ %246, %230 ]
  %233 = load float, float* %232, align 4
  %234 = load float, float* %231, align 4
  %235 = fcmp olt float %233, %234
  %236 = select i1 %235, float* %231, float* %232
  %237 = getelementptr inbounds float, float* %231, i64 1
  %238 = load float, float* %236, align 4
  %239 = load float, float* %237, align 4
  %240 = fcmp olt float %238, %239
  %241 = select i1 %240, float* %237, float* %236
  %242 = getelementptr inbounds float, float* %231, i64 2
  %243 = load float, float* %241, align 4
  %244 = load float, float* %242, align 4
  %245 = fcmp olt float %243, %244
  %246 = select i1 %245, float* %242, float* %241
  %247 = getelementptr inbounds float, float* %231, i64 3
  %248 = icmp eq float* %247, %150
  br i1 %248, label %249, label %230

249:                                              ; preds = %230
  %250 = load float, float* %246, align 4
  %251 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 12
  store float %250, float* %251, align 4
  %252 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %252)
  br label %253

253:                                              ; preds = %253, %249
  %254 = phi float* [ %229, %249 ], [ %270, %253 ]
  %255 = phi float* [ %149, %249 ], [ %269, %253 ]
  %256 = load float, float* %254, align 4
  %257 = load float, float* %255, align 4
  %258 = fcmp olt float %256, %257
  %259 = select i1 %258, float* %254, float* %255
  %260 = getelementptr inbounds float, float* %254, i64 1
  %261 = load float, float* %260, align 4
  %262 = load float, float* %259, align 4
  %263 = fcmp olt float %261, %262
  %264 = select i1 %263, float* %260, float* %259
  %265 = getelementptr inbounds float, float* %254, i64 2
  %266 = load float, float* %265, align 4
  %267 = load float, float* %264, align 4
  %268 = fcmp olt float %266, %267
  %269 = select i1 %268, float* %265, float* %264
  %270 = getelementptr inbounds float, float* %254, i64 3
  %271 = icmp eq float* %270, %150
  br i1 %271, label %272, label %253

272:                                              ; preds = %253
  %273 = bitcast float* %251 to i32*
  %274 = load float, float* %269, align 4
  %275 = fsub float -0.000000e+00, %274
  store float %275, float* %4, align 4
  %276 = fcmp olt float %250, %275
  %277 = select i1 %276, float* %4, float* %251
  %278 = bitcast float* %277 to i32*
  %279 = load i32, i32* %278, align 4
  store i32 %279, i32* %273, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %252)
  %280 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 1, i32 0, i64 1
  br label %281

281:                                              ; preds = %281, %272
  %282 = phi float* [ %280, %272 ], [ %298, %281 ]
  %283 = phi float* [ %189, %272 ], [ %297, %281 ]
  %284 = load float, float* %283, align 4
  %285 = load float, float* %282, align 4
  %286 = fcmp olt float %284, %285
  %287 = select i1 %286, float* %282, float* %283
  %288 = getelementptr inbounds float, float* %282, i64 1
  %289 = load float, float* %287, align 4
  %290 = load float, float* %288, align 4
  %291 = fcmp olt float %289, %290
  %292 = select i1 %291, float* %288, float* %287
  %293 = getelementptr inbounds float, float* %282, i64 2
  %294 = load float, float* %292, align 4
  %295 = load float, float* %293, align 4
  %296 = fcmp olt float %294, %295
  %297 = select i1 %296, float* %293, float* %292
  %298 = getelementptr inbounds float, float* %282, i64 3
  %299 = icmp eq float* %298, %190
  br i1 %299, label %300, label %281

300:                                              ; preds = %281
  %301 = load float, float* %297, align 4
  %302 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %0, i64 0, i32 13
  store float %301, float* %302, align 4
  %303 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %303)
  br label %304

304:                                              ; preds = %304, %300
  %305 = phi float* [ %280, %300 ], [ %321, %304 ]
  %306 = phi float* [ %189, %300 ], [ %320, %304 ]
  %307 = load float, float* %305, align 4
  %308 = load float, float* %306, align 4
  %309 = fcmp olt float %307, %308
  %310 = select i1 %309, float* %305, float* %306
  %311 = getelementptr inbounds float, float* %305, i64 1
  %312 = load float, float* %311, align 4
  %313 = load float, float* %310, align 4
  %314 = fcmp olt float %312, %313
  %315 = select i1 %314, float* %311, float* %310
  %316 = getelementptr inbounds float, float* %305, i64 2
  %317 = load float, float* %316, align 4
  %318 = load float, float* %315, align 4
  %319 = fcmp olt float %317, %318
  %320 = select i1 %319, float* %316, float* %315
  %321 = getelementptr inbounds float, float* %305, i64 3
  %322 = icmp eq float* %321, %190
  br i1 %322, label %323, label %304

323:                                              ; preds = %304
  %324 = bitcast float* %302 to i32*
  %325 = load float, float* %320, align 4
  %326 = fsub float -0.000000e+00, %325
  store float %326, float* %5, align 4
  %327 = fcmp olt float %301, %326
  %328 = select i1 %327, float* %5, float* %302
  %329 = bitcast float* %328 to i32*
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %324, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %303)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
