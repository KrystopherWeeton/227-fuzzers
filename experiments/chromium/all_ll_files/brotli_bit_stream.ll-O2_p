; ModuleID = '../../third_party/brotli/enc/brotli_bit_stream.c'
source_filename = "../../third_party/brotli/enc/brotli_bit_stream.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.BrotliPrefixCodeRange = type { i16, i8 }
%struct.HuffmanTree = type { i32, i16, i16 }
%struct.MemoryManager = type { i8* (i8*, i64)*, void (i8*, i8*)*, i8* }
%struct.BrotliEncoderParams = type { i32, i32, i32, i32, i64, i64, i32, i32, %struct.BrotliHasherParams, %struct.BrotliDistanceParams, %struct.BrotliEncoderDictionary }
%struct.BrotliHasherParams = type { i32, i32, i32, i32, i32 }
%struct.BrotliDistanceParams = type { i32, i32, i32, i32, i64 }
%struct.BrotliEncoderDictionary = type { %struct.BrotliDictionary*, i32, i32, i64, i16*, i8*, i16*, %struct.DictWord* }
%struct.BrotliDictionary = type { [32 x i8], [32 x i32], i64, i8* }
%struct.DictWord = type { i8, i8, i16 }
%struct.Command = type { i32, i32, i32, i16, i16 }
%struct.MetaBlockSplit = type { %struct.BlockSplit, %struct.BlockSplit, %struct.BlockSplit, i32*, i64, i32*, i64, %struct.HistogramLiteral*, i64, %struct.HistogramCommand*, i64, %struct.HistogramDistance*, i64 }
%struct.BlockSplit = type { i64, i64, i8*, i32*, i64, i64 }
%struct.HistogramLiteral = type { [256 x i32], i64, double }
%struct.HistogramCommand = type { [704 x i32], i64, double }
%struct.HistogramDistance = type { [544 x i32], i64, double }
%struct.BlockEncoder = type { i64, i64, i8*, i32*, i64, %struct.BlockSplitCode, i64, i64, i64, i8*, i16* }
%struct.BlockSplitCode = type { %struct.BlockTypeCodeCalculator, [258 x i8], [258 x i16], [26 x i8], [26 x i16] }
%struct.BlockTypeCodeCalculator = type { i64, i64 }

@kZeroRepsDepth = internal unnamed_addr constant [704 x i32] [i32 0, i32 4, i32 8, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 11, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 21, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28], align 16
@kZeroRepsBits = internal unnamed_addr constant [704 x i64] [i64 0, i64 0, i64 0, i64 7, i64 23, i64 39, i64 55, i64 71, i64 87, i64 103, i64 119, i64 1904, i64 2951, i64 4999, i64 7047, i64 9095, i64 11143, i64 13191, i64 15239, i64 919, i64 2967, i64 5015, i64 7063, i64 9111, i64 11159, i64 13207, i64 15255, i64 935, i64 2983, i64 5031, i64 7079, i64 9127, i64 11175, i64 13223, i64 15271, i64 951, i64 2999, i64 5047, i64 7095, i64 9143, i64 11191, i64 13239, i64 15287, i64 967, i64 3015, i64 5063, i64 7111, i64 9159, i64 11207, i64 13255, i64 15303, i64 983, i64 3031, i64 5079, i64 7127, i64 9175, i64 11223, i64 13271, i64 15319, i64 999, i64 3047, i64 5095, i64 7143, i64 9191, i64 11239, i64 13287, i64 15335, i64 1015, i64 3063, i64 5111, i64 7159, i64 9207, i64 11255, i64 13303, i64 15351, i64 115591, i64 377735, i64 639879, i64 902023, i64 1164167, i64 1426311, i64 1688455, i64 1950599, i64 117639, i64 379783, i64 641927, i64 904071, i64 1166215, i64 1428359, i64 1690503, i64 1952647, i64 119687, i64 381831, i64 643975, i64 906119, i64 1168263, i64 1430407, i64 1692551, i64 1954695, i64 121735, i64 383879, i64 646023, i64 908167, i64 1170311, i64 1432455, i64 1694599, i64 1956743, i64 123783, i64 385927, i64 648071, i64 910215, i64 1172359, i64 1434503, i64 1696647, i64 1958791, i64 125831, i64 387975, i64 650119, i64 912263, i64 1174407, i64 1436551, i64 1698695, i64 1960839, i64 127879, i64 390023, i64 652167, i64 914311, i64 1176455, i64 1438599, i64 1700743, i64 1962887, i64 129927, i64 392071, i64 654215, i64 916359, i64 1178503, i64 1440647, i64 1702791, i64 1964935, i64 115607, i64 377751, i64 639895, i64 902039, i64 1164183, i64 1426327, i64 1688471, i64 1950615, i64 117655, i64 379799, i64 641943, i64 904087, i64 1166231, i64 1428375, i64 1690519, i64 1952663, i64 119703, i64 381847, i64 643991, i64 906135, i64 1168279, i64 1430423, i64 1692567, i64 1954711, i64 121751, i64 383895, i64 646039, i64 908183, i64 1170327, i64 1432471, i64 1694615, i64 1956759, i64 123799, i64 385943, i64 648087, i64 910231, i64 1172375, i64 1434519, i64 1696663, i64 1958807, i64 125847, i64 387991, i64 650135, i64 912279, i64 1174423, i64 1436567, i64 1698711, i64 1960855, i64 127895, i64 390039, i64 652183, i64 914327, i64 1176471, i64 1438615, i64 1700759, i64 1962903, i64 129943, i64 392087, i64 654231, i64 916375, i64 1178519, i64 1440663, i64 1702807, i64 1964951, i64 115623, i64 377767, i64 639911, i64 902055, i64 1164199, i64 1426343, i64 1688487, i64 1950631, i64 117671, i64 379815, i64 641959, i64 904103, i64 1166247, i64 1428391, i64 1690535, i64 1952679, i64 119719, i64 381863, i64 644007, i64 906151, i64 1168295, i64 1430439, i64 1692583, i64 1954727, i64 121767, i64 383911, i64 646055, i64 908199, i64 1170343, i64 1432487, i64 1694631, i64 1956775, i64 123815, i64 385959, i64 648103, i64 910247, i64 1172391, i64 1434535, i64 1696679, i64 1958823, i64 125863, i64 388007, i64 650151, i64 912295, i64 1174439, i64 1436583, i64 1698727, i64 1960871, i64 127911, i64 390055, i64 652199, i64 914343, i64 1176487, i64 1438631, i64 1700775, i64 1962919, i64 129959, i64 392103, i64 654247, i64 916391, i64 1178535, i64 1440679, i64 1702823, i64 1964967, i64 115639, i64 377783, i64 639927, i64 902071, i64 1164215, i64 1426359, i64 1688503, i64 1950647, i64 117687, i64 379831, i64 641975, i64 904119, i64 1166263, i64 1428407, i64 1690551, i64 1952695, i64 119735, i64 381879, i64 644023, i64 906167, i64 1168311, i64 1430455, i64 1692599, i64 1954743, i64 121783, i64 383927, i64 646071, i64 908215, i64 1170359, i64 1432503, i64 1694647, i64 1956791, i64 123831, i64 385975, i64 648119, i64 910263, i64 1172407, i64 1434551, i64 1696695, i64 1958839, i64 125879, i64 388023, i64 650167, i64 912311, i64 1174455, i64 1436599, i64 1698743, i64 1960887, i64 127927, i64 390071, i64 652215, i64 914359, i64 1176503, i64 1438647, i64 1700791, i64 1962935, i64 129975, i64 392119, i64 654263, i64 916407, i64 1178551, i64 1440695, i64 1702839, i64 1964983, i64 115655, i64 377799, i64 639943, i64 902087, i64 1164231, i64 1426375, i64 1688519, i64 1950663, i64 117703, i64 379847, i64 641991, i64 904135, i64 1166279, i64 1428423, i64 1690567, i64 1952711, i64 119751, i64 381895, i64 644039, i64 906183, i64 1168327, i64 1430471, i64 1692615, i64 1954759, i64 121799, i64 383943, i64 646087, i64 908231, i64 1170375, i64 1432519, i64 1694663, i64 1956807, i64 123847, i64 385991, i64 648135, i64 910279, i64 1172423, i64 1434567, i64 1696711, i64 1958855, i64 125895, i64 388039, i64 650183, i64 912327, i64 1174471, i64 1436615, i64 1698759, i64 1960903, i64 127943, i64 390087, i64 652231, i64 914375, i64 1176519, i64 1438663, i64 1700807, i64 1962951, i64 129991, i64 392135, i64 654279, i64 916423, i64 1178567, i64 1440711, i64 1702855, i64 1964999, i64 115671, i64 377815, i64 639959, i64 902103, i64 1164247, i64 1426391, i64 1688535, i64 1950679, i64 117719, i64 379863, i64 642007, i64 904151, i64 1166295, i64 1428439, i64 1690583, i64 1952727, i64 119767, i64 381911, i64 644055, i64 906199, i64 1168343, i64 1430487, i64 1692631, i64 1954775, i64 121815, i64 383959, i64 646103, i64 908247, i64 1170391, i64 1432535, i64 1694679, i64 1956823, i64 123863, i64 386007, i64 648151, i64 910295, i64 1172439, i64 1434583, i64 1696727, i64 1958871, i64 125911, i64 388055, i64 650199, i64 912343, i64 1174487, i64 1436631, i64 1698775, i64 1960919, i64 127959, i64 390103, i64 652247, i64 914391, i64 1176535, i64 1438679, i64 1700823, i64 1962967, i64 130007, i64 392151, i64 654295, i64 916439, i64 1178583, i64 1440727, i64 1702871, i64 1965015, i64 115687, i64 377831, i64 639975, i64 902119, i64 1164263, i64 1426407, i64 1688551, i64 1950695, i64 117735, i64 379879, i64 642023, i64 904167, i64 1166311, i64 1428455, i64 1690599, i64 1952743, i64 119783, i64 381927, i64 644071, i64 906215, i64 1168359, i64 1430503, i64 1692647, i64 1954791, i64 121831, i64 383975, i64 646119, i64 908263, i64 1170407, i64 1432551, i64 1694695, i64 1956839, i64 123879, i64 386023, i64 648167, i64 910311, i64 1172455, i64 1434599, i64 1696743, i64 1958887, i64 125927, i64 388071, i64 650215, i64 912359, i64 1174503, i64 1436647, i64 1698791, i64 1960935, i64 127975, i64 390119, i64 652263, i64 914407, i64 1176551, i64 1438695, i64 1700839, i64 1962983, i64 130023, i64 392167, i64 654311, i64 916455, i64 1178599, i64 1440743, i64 1702887, i64 1965031, i64 115703, i64 377847, i64 639991, i64 902135, i64 1164279, i64 1426423, i64 1688567, i64 1950711, i64 117751, i64 379895, i64 642039, i64 904183, i64 1166327, i64 1428471, i64 1690615, i64 1952759, i64 119799, i64 381943, i64 644087, i64 906231, i64 1168375, i64 1430519, i64 1692663, i64 1954807, i64 121847, i64 383991, i64 646135, i64 908279, i64 1170423, i64 1432567, i64 1694711, i64 1956855, i64 123895, i64 386039, i64 648183, i64 910327, i64 1172471, i64 1434615, i64 1696759, i64 1958903, i64 125943, i64 388087, i64 650231, i64 912375, i64 1174519, i64 1436663, i64 1698807, i64 1960951, i64 127991, i64 390135, i64 652279, i64 914423, i64 1176567, i64 1438711, i64 1700855, i64 1962999, i64 130039, i64 392183, i64 654327, i64 916471, i64 1178615, i64 1440759, i64 1702903, i64 1965047, i64 14795655, i64 48350087, i64 81904519, i64 115458951, i64 149013383, i64 182567815, i64 216122247, i64 249676679, i64 15057799, i64 48612231, i64 82166663, i64 115721095, i64 149275527, i64 182829959, i64 216384391, i64 249938823, i64 15319943, i64 48874375, i64 82428807, i64 115983239, i64 149537671, i64 183092103, i64 216646535, i64 250200967, i64 15582087, i64 49136519, i64 82690951, i64 116245383, i64 149799815, i64 183354247, i64 216908679, i64 250463111, i64 15844231, i64 49398663, i64 82953095, i64 116507527, i64 150061959, i64 183616391, i64 217170823, i64 250725255, i64 16106375, i64 49660807, i64 83215239, i64 116769671, i64 150324103, i64 183878535, i64 217432967, i64 250987399, i64 16368519, i64 49922951, i64 83477383, i64 117031815, i64 150586247, i64 184140679, i64 217695111, i64 251249543, i64 16630663, i64 50185095, i64 83739527, i64 117293959, i64 150848391, i64 184402823, i64 217957255, i64 251511687, i64 14797703, i64 48352135, i64 81906567, i64 115460999, i64 149015431, i64 182569863, i64 216124295, i64 249678727, i64 15059847, i64 48614279, i64 82168711, i64 115723143, i64 149277575, i64 182832007, i64 216386439, i64 249940871, i64 15321991, i64 48876423, i64 82430855, i64 115985287, i64 149539719, i64 183094151, i64 216648583, i64 250203015, i64 15584135, i64 49138567, i64 82692999, i64 116247431, i64 149801863, i64 183356295, i64 216910727, i64 250465159, i64 15846279, i64 49400711, i64 82955143, i64 116509575, i64 150064007, i64 183618439, i64 217172871, i64 250727303, i64 16108423, i64 49662855, i64 83217287, i64 116771719, i64 150326151, i64 183880583, i64 217435015, i64 250989447, i64 16370567, i64 49924999, i64 83479431, i64 117033863, i64 150588295], align 16
@kCodeLengthDepth = internal unnamed_addr constant [18 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\05\05\00\04\04", align 16
@kCodeLengthBits = internal unnamed_addr constant [18 x i32] [i32 0, i32 8, i32 4, i32 12, i32 2, i32 10, i32 6, i32 14, i32 1, i32 9, i32 5, i32 13, i32 3, i32 15, i32 31, i32 0, i32 11, i32 7], align 16
@kNonZeroRepsDepth = internal unnamed_addr constant [704 x i32] [i32 6, i32 6, i32 6, i32 6, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30], align 16
@kNonZeroRepsBits = internal unnamed_addr constant [704 x i64] [i64 11, i64 27, i64 43, i64 59, i64 715, i64 1739, i64 2763, i64 3787, i64 731, i64 1755, i64 2779, i64 3803, i64 747, i64 1771, i64 2795, i64 3819, i64 763, i64 1787, i64 2811, i64 3835, i64 45771, i64 111307, i64 176843, i64 242379, i64 46795, i64 112331, i64 177867, i64 243403, i64 47819, i64 113355, i64 178891, i64 244427, i64 48843, i64 114379, i64 179915, i64 245451, i64 45787, i64 111323, i64 176859, i64 242395, i64 46811, i64 112347, i64 177883, i64 243419, i64 47835, i64 113371, i64 178907, i64 244443, i64 48859, i64 114395, i64 179931, i64 245467, i64 45803, i64 111339, i64 176875, i64 242411, i64 46827, i64 112363, i64 177899, i64 243435, i64 47851, i64 113387, i64 178923, i64 244459, i64 48875, i64 114411, i64 179947, i64 245483, i64 45819, i64 111355, i64 176891, i64 242427, i64 46843, i64 112379, i64 177915, i64 243451, i64 47867, i64 113403, i64 178939, i64 244475, i64 48891, i64 114427, i64 179963, i64 245499, i64 2929355, i64 7123659, i64 11317963, i64 15512267, i64 2994891, i64 7189195, i64 11383499, i64 15577803, i64 3060427, i64 7254731, i64 11449035, i64 15643339, i64 3125963, i64 7320267, i64 11514571, i64 15708875, i64 2930379, i64 7124683, i64 11318987, i64 15513291, i64 2995915, i64 7190219, i64 11384523, i64 15578827, i64 3061451, i64 7255755, i64 11450059, i64 15644363, i64 3126987, i64 7321291, i64 11515595, i64 15709899, i64 2931403, i64 7125707, i64 11320011, i64 15514315, i64 2996939, i64 7191243, i64 11385547, i64 15579851, i64 3062475, i64 7256779, i64 11451083, i64 15645387, i64 3128011, i64 7322315, i64 11516619, i64 15710923, i64 2932427, i64 7126731, i64 11321035, i64 15515339, i64 2997963, i64 7192267, i64 11386571, i64 15580875, i64 3063499, i64 7257803, i64 11452107, i64 15646411, i64 3129035, i64 7323339, i64 11517643, i64 15711947, i64 2929371, i64 7123675, i64 11317979, i64 15512283, i64 2994907, i64 7189211, i64 11383515, i64 15577819, i64 3060443, i64 7254747, i64 11449051, i64 15643355, i64 3125979, i64 7320283, i64 11514587, i64 15708891, i64 2930395, i64 7124699, i64 11319003, i64 15513307, i64 2995931, i64 7190235, i64 11384539, i64 15578843, i64 3061467, i64 7255771, i64 11450075, i64 15644379, i64 3127003, i64 7321307, i64 11515611, i64 15709915, i64 2931419, i64 7125723, i64 11320027, i64 15514331, i64 2996955, i64 7191259, i64 11385563, i64 15579867, i64 3062491, i64 7256795, i64 11451099, i64 15645403, i64 3128027, i64 7322331, i64 11516635, i64 15710939, i64 2932443, i64 7126747, i64 11321051, i64 15515355, i64 2997979, i64 7192283, i64 11386587, i64 15580891, i64 3063515, i64 7257819, i64 11452123, i64 15646427, i64 3129051, i64 7323355, i64 11517659, i64 15711963, i64 2929387, i64 7123691, i64 11317995, i64 15512299, i64 2994923, i64 7189227, i64 11383531, i64 15577835, i64 3060459, i64 7254763, i64 11449067, i64 15643371, i64 3125995, i64 7320299, i64 11514603, i64 15708907, i64 2930411, i64 7124715, i64 11319019, i64 15513323, i64 2995947, i64 7190251, i64 11384555, i64 15578859, i64 3061483, i64 7255787, i64 11450091, i64 15644395, i64 3127019, i64 7321323, i64 11515627, i64 15709931, i64 2931435, i64 7125739, i64 11320043, i64 15514347, i64 2996971, i64 7191275, i64 11385579, i64 15579883, i64 3062507, i64 7256811, i64 11451115, i64 15645419, i64 3128043, i64 7322347, i64 11516651, i64 15710955, i64 2932459, i64 7126763, i64 11321067, i64 15515371, i64 2997995, i64 7192299, i64 11386603, i64 15580907, i64 3063531, i64 7257835, i64 11452139, i64 15646443, i64 3129067, i64 7323371, i64 11517675, i64 15711979, i64 2929403, i64 7123707, i64 11318011, i64 15512315, i64 2994939, i64 7189243, i64 11383547, i64 15577851, i64 3060475, i64 7254779, i64 11449083, i64 15643387, i64 3126011, i64 7320315, i64 11514619, i64 15708923, i64 2930427, i64 7124731, i64 11319035, i64 15513339, i64 2995963, i64 7190267, i64 11384571, i64 15578875, i64 3061499, i64 7255803, i64 11450107, i64 15644411, i64 3127035, i64 7321339, i64 11515643, i64 15709947, i64 2931451, i64 7125755, i64 11320059, i64 15514363, i64 2996987, i64 7191291, i64 11385595, i64 15579899, i64 3062523, i64 7256827, i64 11451131, i64 15645435, i64 3128059, i64 7322363, i64 11516667, i64 15710971, i64 2932475, i64 7126779, i64 11321083, i64 15515387, i64 2998011, i64 7192315, i64 11386619, i64 15580923, i64 3063547, i64 7257851, i64 11452155, i64 15646459, i64 3129083, i64 7323387, i64 11517691, i64 15711995, i64 187478731, i64 455914187, i64 724349643, i64 992785099, i64 191673035, i64 460108491, i64 728543947, i64 996979403, i64 195867339, i64 464302795, i64 732738251, i64 1001173707, i64 200061643, i64 468497099, i64 736932555, i64 1005368011, i64 187544267, i64 455979723, i64 724415179, i64 992850635, i64 191738571, i64 460174027, i64 728609483, i64 997044939, i64 195932875, i64 464368331, i64 732803787, i64 1001239243, i64 200127179, i64 468562635, i64 736998091, i64 1005433547, i64 187609803, i64 456045259, i64 724480715, i64 992916171, i64 191804107, i64 460239563, i64 728675019, i64 997110475, i64 195998411, i64 464433867, i64 732869323, i64 1001304779, i64 200192715, i64 468628171, i64 737063627, i64 1005499083, i64 187675339, i64 456110795, i64 724546251, i64 992981707, i64 191869643, i64 460305099, i64 728740555, i64 997176011, i64 196063947, i64 464499403, i64 732934859, i64 1001370315, i64 200258251, i64 468693707, i64 737129163, i64 1005564619, i64 187479755, i64 455915211, i64 724350667, i64 992786123, i64 191674059, i64 460109515, i64 728544971, i64 996980427, i64 195868363, i64 464303819, i64 732739275, i64 1001174731, i64 200062667, i64 468498123, i64 736933579, i64 1005369035, i64 187545291, i64 455980747, i64 724416203, i64 992851659, i64 191739595, i64 460175051, i64 728610507, i64 997045963, i64 195933899, i64 464369355, i64 732804811, i64 1001240267, i64 200128203, i64 468563659, i64 736999115, i64 1005434571, i64 187610827, i64 456046283, i64 724481739, i64 992917195, i64 191805131, i64 460240587, i64 728676043, i64 997111499, i64 195999435, i64 464434891, i64 732870347, i64 1001305803, i64 200193739, i64 468629195, i64 737064651, i64 1005500107, i64 187676363, i64 456111819, i64 724547275, i64 992982731, i64 191870667, i64 460306123, i64 728741579, i64 997177035, i64 196064971, i64 464500427, i64 732935883, i64 1001371339, i64 200259275, i64 468694731, i64 737130187, i64 1005565643, i64 187480779, i64 455916235, i64 724351691, i64 992787147, i64 191675083, i64 460110539, i64 728545995, i64 996981451, i64 195869387, i64 464304843, i64 732740299, i64 1001175755, i64 200063691, i64 468499147, i64 736934603, i64 1005370059, i64 187546315, i64 455981771, i64 724417227, i64 992852683, i64 191740619, i64 460176075, i64 728611531, i64 997046987, i64 195934923, i64 464370379, i64 732805835, i64 1001241291, i64 200129227, i64 468564683, i64 737000139, i64 1005435595, i64 187611851, i64 456047307, i64 724482763, i64 992918219, i64 191806155, i64 460241611, i64 728677067, i64 997112523, i64 196000459, i64 464435915, i64 732871371, i64 1001306827, i64 200194763, i64 468630219, i64 737065675, i64 1005501131, i64 187677387, i64 456112843, i64 724548299, i64 992983755, i64 191871691, i64 460307147, i64 728742603, i64 997178059, i64 196065995, i64 464501451, i64 732936907, i64 1001372363, i64 200260299, i64 468695755, i64 737131211, i64 1005566667, i64 187481803, i64 455917259, i64 724352715, i64 992788171, i64 191676107, i64 460111563, i64 728547019, i64 996982475, i64 195870411, i64 464305867, i64 732741323, i64 1001176779, i64 200064715, i64 468500171, i64 736935627, i64 1005371083, i64 187547339, i64 455982795, i64 724418251, i64 992853707, i64 191741643, i64 460177099, i64 728612555, i64 997048011, i64 195935947, i64 464371403, i64 732806859, i64 1001242315, i64 200130251, i64 468565707, i64 737001163, i64 1005436619, i64 187612875, i64 456048331, i64 724483787, i64 992919243, i64 191807179, i64 460242635, i64 728678091, i64 997113547, i64 196001483, i64 464436939, i64 732872395, i64 1001307851, i64 200195787, i64 468631243, i64 737066699, i64 1005502155, i64 187678411, i64 456113867, i64 724549323, i64 992984779, i64 191872715, i64 460308171, i64 728743627, i64 997179083, i64 196067019, i64 464502475, i64 732937931, i64 1001373387, i64 200261323, i64 468696779, i64 737132235, i64 1005567691, i64 187478747, i64 455914203, i64 724349659, i64 992785115, i64 191673051, i64 460108507, i64 728543963, i64 996979419, i64 195867355, i64 464302811, i64 732738267, i64 1001173723, i64 200061659, i64 468497115, i64 736932571, i64 1005368027, i64 187544283, i64 455979739, i64 724415195, i64 992850651, i64 191738587, i64 460174043, i64 728609499, i64 997044955, i64 195932891, i64 464368347, i64 732803803, i64 1001239259, i64 200127195, i64 468562651, i64 736998107, i64 1005433563, i64 187609819, i64 456045275, i64 724480731, i64 992916187, i64 191804123, i64 460239579, i64 728675035, i64 997110491, i64 195998427, i64 464433883, i64 732869339, i64 1001304795, i64 200192731, i64 468628187, i64 737063643, i64 1005499099, i64 187675355, i64 456110811, i64 724546267, i64 992981723, i64 191869659, i64 460305115, i64 728740571, i64 997176027, i64 196063963, i64 464499419, i64 732934875, i64 1001370331, i64 200258267, i64 468693723, i64 737129179, i64 1005564635, i64 187479771, i64 455915227, i64 724350683, i64 992786139, i64 191674075, i64 460109531, i64 728544987, i64 996980443, i64 195868379, i64 464303835, i64 732739291, i64 1001174747, i64 200062683, i64 468498139, i64 736933595, i64 1005369051, i64 187545307, i64 455980763, i64 724416219, i64 992851675, i64 191739611, i64 460175067, i64 728610523, i64 997045979, i64 195933915, i64 464369371, i64 732804827, i64 1001240283, i64 200128219, i64 468563675, i64 736999131, i64 1005434587, i64 187610843, i64 456046299, i64 724481755, i64 992917211, i64 191805147, i64 460240603, i64 728676059, i64 997111515, i64 195999451, i64 464434907, i64 732870363, i64 1001305819], align 16
@_kBrotliContextLookupTable = external local_unnamed_addr constant [2048 x i8], align 16
@kStaticCommandCodeDepth = internal constant [704 x i8] c"\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B", align 16
@kStaticCommandCodeBits = internal constant [704 x i16] [i16 0, i16 256, i16 128, i16 384, i16 64, i16 320, i16 192, i16 448, i16 32, i16 288, i16 160, i16 416, i16 96, i16 352, i16 224, i16 480, i16 16, i16 272, i16 144, i16 400, i16 80, i16 336, i16 208, i16 464, i16 48, i16 304, i16 176, i16 432, i16 112, i16 368, i16 240, i16 496, i16 8, i16 264, i16 136, i16 392, i16 72, i16 328, i16 200, i16 456, i16 40, i16 296, i16 168, i16 424, i16 104, i16 360, i16 232, i16 488, i16 24, i16 280, i16 152, i16 408, i16 88, i16 344, i16 216, i16 472, i16 56, i16 312, i16 184, i16 440, i16 120, i16 376, i16 248, i16 504, i16 4, i16 260, i16 132, i16 388, i16 68, i16 324, i16 196, i16 452, i16 36, i16 292, i16 164, i16 420, i16 100, i16 356, i16 228, i16 484, i16 20, i16 276, i16 148, i16 404, i16 84, i16 340, i16 212, i16 468, i16 52, i16 308, i16 180, i16 436, i16 116, i16 372, i16 244, i16 500, i16 12, i16 268, i16 140, i16 396, i16 76, i16 332, i16 204, i16 460, i16 44, i16 300, i16 172, i16 428, i16 108, i16 364, i16 236, i16 492, i16 28, i16 284, i16 156, i16 412, i16 92, i16 348, i16 220, i16 476, i16 60, i16 316, i16 188, i16 444, i16 124, i16 380, i16 252, i16 508, i16 2, i16 258, i16 130, i16 386, i16 66, i16 322, i16 194, i16 450, i16 34, i16 290, i16 162, i16 418, i16 98, i16 354, i16 226, i16 482, i16 18, i16 274, i16 146, i16 402, i16 82, i16 338, i16 210, i16 466, i16 50, i16 306, i16 178, i16 434, i16 114, i16 370, i16 242, i16 498, i16 10, i16 266, i16 138, i16 394, i16 74, i16 330, i16 202, i16 458, i16 42, i16 298, i16 170, i16 426, i16 106, i16 362, i16 234, i16 490, i16 26, i16 282, i16 154, i16 410, i16 90, i16 346, i16 218, i16 474, i16 58, i16 314, i16 186, i16 442, i16 122, i16 378, i16 250, i16 506, i16 6, i16 262, i16 134, i16 390, i16 70, i16 326, i16 198, i16 454, i16 38, i16 294, i16 166, i16 422, i16 102, i16 358, i16 230, i16 486, i16 22, i16 278, i16 150, i16 406, i16 86, i16 342, i16 214, i16 470, i16 54, i16 310, i16 182, i16 438, i16 118, i16 374, i16 246, i16 502, i16 14, i16 270, i16 142, i16 398, i16 78, i16 334, i16 206, i16 462, i16 46, i16 302, i16 174, i16 430, i16 110, i16 366, i16 238, i16 494, i16 30, i16 286, i16 158, i16 414, i16 94, i16 350, i16 222, i16 478, i16 62, i16 318, i16 190, i16 446, i16 126, i16 382, i16 254, i16 510, i16 1, i16 257, i16 129, i16 385, i16 65, i16 321, i16 193, i16 449, i16 33, i16 289, i16 161, i16 417, i16 97, i16 353, i16 225, i16 481, i16 17, i16 273, i16 145, i16 401, i16 81, i16 337, i16 209, i16 465, i16 49, i16 305, i16 177, i16 433, i16 113, i16 369, i16 241, i16 497, i16 9, i16 265, i16 137, i16 393, i16 73, i16 329, i16 201, i16 457, i16 41, i16 297, i16 169, i16 425, i16 105, i16 361, i16 233, i16 489, i16 25, i16 281, i16 153, i16 409, i16 89, i16 345, i16 217, i16 473, i16 57, i16 313, i16 185, i16 441, i16 121, i16 377, i16 249, i16 505, i16 5, i16 261, i16 133, i16 389, i16 69, i16 325, i16 197, i16 453, i16 37, i16 293, i16 165, i16 421, i16 101, i16 357, i16 229, i16 485, i16 21, i16 277, i16 149, i16 405, i16 85, i16 341, i16 213, i16 469, i16 53, i16 309, i16 181, i16 437, i16 117, i16 373, i16 245, i16 501, i16 13, i16 269, i16 141, i16 397, i16 77, i16 333, i16 205, i16 461, i16 45, i16 301, i16 173, i16 429, i16 109, i16 365, i16 237, i16 493, i16 29, i16 285, i16 157, i16 413, i16 93, i16 349, i16 221, i16 477, i16 61, i16 317, i16 189, i16 445, i16 125, i16 381, i16 253, i16 509, i16 3, i16 259, i16 131, i16 387, i16 67, i16 323, i16 195, i16 451, i16 35, i16 291, i16 163, i16 419, i16 99, i16 355, i16 227, i16 483, i16 19, i16 275, i16 147, i16 403, i16 83, i16 339, i16 211, i16 467, i16 51, i16 307, i16 179, i16 435, i16 115, i16 371, i16 243, i16 499, i16 11, i16 267, i16 139, i16 395, i16 75, i16 331, i16 203, i16 459, i16 43, i16 299, i16 171, i16 427, i16 107, i16 363, i16 235, i16 491, i16 27, i16 283, i16 155, i16 411, i16 91, i16 347, i16 219, i16 475, i16 59, i16 315, i16 187, i16 443, i16 123, i16 379, i16 251, i16 507, i16 7, i16 1031, i16 519, i16 1543, i16 263, i16 1287, i16 775, i16 1799, i16 135, i16 1159, i16 647, i16 1671, i16 391, i16 1415, i16 903, i16 1927, i16 71, i16 1095, i16 583, i16 1607, i16 327, i16 1351, i16 839, i16 1863, i16 199, i16 1223, i16 711, i16 1735, i16 455, i16 1479, i16 967, i16 1991, i16 39, i16 1063, i16 551, i16 1575, i16 295, i16 1319, i16 807, i16 1831, i16 167, i16 1191, i16 679, i16 1703, i16 423, i16 1447, i16 935, i16 1959, i16 103, i16 1127, i16 615, i16 1639, i16 359, i16 1383, i16 871, i16 1895, i16 231, i16 1255, i16 743, i16 1767, i16 487, i16 1511, i16 999, i16 2023, i16 23, i16 1047, i16 535, i16 1559, i16 279, i16 1303, i16 791, i16 1815, i16 151, i16 1175, i16 663, i16 1687, i16 407, i16 1431, i16 919, i16 1943, i16 87, i16 1111, i16 599, i16 1623, i16 343, i16 1367, i16 855, i16 1879, i16 215, i16 1239, i16 727, i16 1751, i16 471, i16 1495, i16 983, i16 2007, i16 55, i16 1079, i16 567, i16 1591, i16 311, i16 1335, i16 823, i16 1847, i16 183, i16 1207, i16 695, i16 1719, i16 439, i16 1463, i16 951, i16 1975, i16 119, i16 1143, i16 631, i16 1655, i16 375, i16 1399, i16 887, i16 1911, i16 247, i16 1271, i16 759, i16 1783, i16 503, i16 1527, i16 1015, i16 2039, i16 15, i16 1039, i16 527, i16 1551, i16 271, i16 1295, i16 783, i16 1807, i16 143, i16 1167, i16 655, i16 1679, i16 399, i16 1423, i16 911, i16 1935, i16 79, i16 1103, i16 591, i16 1615, i16 335, i16 1359, i16 847, i16 1871, i16 207, i16 1231, i16 719, i16 1743, i16 463, i16 1487, i16 975, i16 1999, i16 47, i16 1071, i16 559, i16 1583, i16 303, i16 1327, i16 815, i16 1839, i16 175, i16 1199, i16 687, i16 1711, i16 431, i16 1455, i16 943, i16 1967, i16 111, i16 1135, i16 623, i16 1647, i16 367, i16 1391, i16 879, i16 1903, i16 239, i16 1263, i16 751, i16 1775, i16 495, i16 1519, i16 1007, i16 2031, i16 31, i16 1055, i16 543, i16 1567, i16 287, i16 1311, i16 799, i16 1823, i16 159, i16 1183, i16 671, i16 1695, i16 415, i16 1439, i16 927, i16 1951, i16 95, i16 1119, i16 607, i16 1631, i16 351, i16 1375, i16 863, i16 1887, i16 223, i16 1247, i16 735, i16 1759, i16 479, i16 1503, i16 991, i16 2015, i16 63, i16 1087, i16 575, i16 1599, i16 319, i16 1343, i16 831, i16 1855, i16 191, i16 1215, i16 703, i16 1727, i16 447, i16 1471, i16 959, i16 1983, i16 127, i16 1151, i16 639, i16 1663, i16 383, i16 1407, i16 895, i16 1919, i16 255, i16 1279, i16 767, i16 1791, i16 511, i16 1535, i16 1023, i16 2047], align 16
@kStaticDistanceCodeDepth = internal constant [64 x i8] c"\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06", align 16
@kStaticDistanceCodeBits = internal constant [64 x i16] [i16 0, i16 32, i16 16, i16 48, i16 8, i16 40, i16 24, i16 56, i16 4, i16 36, i16 20, i16 52, i16 12, i16 44, i16 28, i16 60, i16 2, i16 34, i16 18, i16 50, i16 10, i16 42, i16 26, i16 58, i16 6, i16 38, i16 22, i16 54, i16 14, i16 46, i16 30, i16 62, i16 1, i16 33, i16 17, i16 49, i16 9, i16 41, i16 25, i16 57, i16 5, i16 37, i16 21, i16 53, i16 13, i16 45, i16 29, i16 61, i16 3, i16 35, i16 19, i16 51, i16 11, i16 43, i16 27, i16 59, i16 7, i16 39, i16 23, i16 55, i16 15, i16 47, i16 31, i16 63], align 16
@BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder = internal unnamed_addr constant [18 x i8] c"\01\02\03\04\00\05\11\06\10\07\08\09\0A\0B\0C\0D\0E\0F", align 16
@BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeSymbols = internal unnamed_addr constant [6 x i8] c"\00\07\03\02\01\0F", align 1
@BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeBitLengths = internal unnamed_addr constant [6 x i8] c"\02\04\03\02\02\04", align 1
@kBrotliShellGaps = external hidden local_unnamed_addr constant [6 x i64], align 16
@_kBrotliPrefixCodeRanges = external local_unnamed_addr constant [26 x %struct.BrotliPrefixCodeRange], align 16
@kBrotliInsExtra = external hidden local_unnamed_addr constant [24 x i32], align 16
@kBrotliInsBase = external hidden local_unnamed_addr constant [24 x i32], align 16
@kBrotliCopyBase = external hidden local_unnamed_addr constant [24 x i32], align 16
@kBrotliCopyExtra = external hidden local_unnamed_addr constant [24 x i32], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliStoreHuffmanTree(i8*, i64, %struct.HuffmanTree*, i64* nocapture, i8* nocapture) local_unnamed_addr #0 {
  %6 = alloca [704 x i8], align 16
  %7 = alloca [704 x i8], align 16
  %8 = alloca i64, align 8
  %9 = alloca [18 x i8], align 16
  %10 = alloca [18 x i16], align 16
  %11 = alloca [18 x i32], align 16
  %12 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 704, i1 false)
  %13 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 704, i1 false)
  %14 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  store i64 0, i64* %8, align 8
  %15 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 18, i1 false)
  %16 = bitcast [18 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %16) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 36, i1 false)
  %17 = bitcast [18 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %17) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 0, i64 72, i1 false)
  call void @BrotliWriteHuffmanTree(i8* %0, i64 %1, i64* nonnull %8, i8* nonnull %12, i8* nonnull %13) #5
  %18 = load i64, i64* %8, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %5
  %21 = add i64 %18, -1
  %22 = and i64 %18, 3
  %23 = icmp ult i64 %21, 3
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = sub i64 %18, %22
  br label %49

26:                                               ; preds = %5
  %27 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 0
  br label %82

28:                                               ; preds = %49, %20
  %29 = phi i64 [ 0, %20 ], [ %79, %49 ]
  %30 = icmp eq i64 %22, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %28, %31
  %32 = phi i64 [ %40, %31 ], [ %29, %28 ]
  %33 = phi i64 [ %41, %31 ], [ %22, %28 ]
  %34 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %32
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %37, align 4
  %40 = add nuw i64 %32, 1
  %41 = add i64 %33, -1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %31, !llvm.loop !2

43:                                               ; preds = %31, %28
  %44 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 0
  %45 = load i32, i32* %44, align 16
  %46 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 0
  %47 = icmp ne i32 %45, 0
  %48 = zext i1 %47 to i32
  br label %82

49:                                               ; preds = %49, %24
  %50 = phi i64 [ 0, %24 ], [ %79, %49 ]
  %51 = phi i64 [ %25, %24 ], [ %80, %49 ]
  %52 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %50
  %53 = load i8, i8* %52, align 4
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* %55, align 4
  %58 = or i64 %50, 1
  %59 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %62, align 4
  %65 = or i64 %50, 2
  %66 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %65
  %67 = load i8, i8* %66, align 2
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, 1
  store i32 %71, i32* %69, align 4
  %72 = or i64 %50, 3
  %73 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = add i32 %77, 1
  store i32 %78, i32* %76, align 4
  %79 = add nuw i64 %50, 4
  %80 = add i64 %51, -4
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %28, label %49

82:                                               ; preds = %43, %26
  %83 = phi i32* [ %27, %26 ], [ %46, %43 ]
  %84 = phi i32 [ 0, %26 ], [ %48, %43 ]
  %85 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 1
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %266, label %264

88:                                               ; preds = %264, %394, %392, %384, %376, %368, %360, %352, %344, %336, %328, %320, %312, %304, %296, %288, %280, %272
  %89 = phi i64 [ 0, %264 ], [ %268, %272 ], [ %276, %280 ], [ %284, %288 ], [ %292, %296 ], [ %300, %304 ], [ %308, %312 ], [ %316, %320 ], [ %324, %328 ], [ %332, %336 ], [ %340, %344 ], [ %348, %352 ], [ %356, %360 ], [ %364, %368 ], [ %372, %376 ], [ %380, %384 ], [ %388, %392 ], [ %396, %394 ]
  %90 = phi i32 [ 2, %264 ], [ 2, %272 ], [ 2, %280 ], [ 2, %288 ], [ 2, %296 ], [ 2, %304 ], [ 2, %312 ], [ 2, %320 ], [ 2, %328 ], [ 2, %336 ], [ 2, %344 ], [ 2, %352 ], [ 2, %360 ], [ 2, %368 ], [ 2, %376 ], [ 2, %384 ], [ 2, %392 ], [ %395, %394 ]
  call void @BrotliCreateHuffmanTree(i32* nonnull %83, i64 18, i32 5, %struct.HuffmanTree* %2, i8* nonnull %15) #5
  %91 = getelementptr inbounds [18 x i16], [18 x i16]* %10, i64 0, i64 0
  call void @BrotliConvertBitDepthsToSymbols(i8* nonnull %15, i64 18, i16* nonnull %91) #5
  %92 = icmp sgt i32 %90, 1
  br i1 %92, label %93, label %104

93:                                               ; preds = %88, %96
  %94 = phi i64 [ %97, %96 ], [ 18, %88 ]
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %104, label %96

96:                                               ; preds = %93
  %97 = add nsw i64 %94, -1
  %98 = getelementptr inbounds [18 x i8], [18 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i64
  %101 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %93, label %104

104:                                              ; preds = %96, %93, %88
  %105 = phi i64 [ 18, %88 ], [ %94, %96 ], [ 0, %93 ]
  %106 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 1
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %118

109:                                              ; preds = %104
  %110 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 2
  %111 = load i8, i8* %110, align 2
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %118

113:                                              ; preds = %109
  %114 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 3
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  %117 = select i1 %116, i64 3, i64 2
  br label %118

118:                                              ; preds = %113, %109, %104
  %119 = phi i64 [ %117, %113 ], [ 0, %109 ], [ 0, %104 ]
  %120 = load i64, i64* %3, align 8, !alias.scope !4, !noalias !7
  %121 = lshr i64 %120, 3
  %122 = getelementptr inbounds i8, i8* %4, i64 %121
  %123 = load i8, i8* %122, align 1, !alias.scope !7, !noalias !4
  %124 = zext i8 %123 to i64
  %125 = and i64 %120, 7
  %126 = shl i64 %119, %125
  %127 = or i64 %126, %124
  %128 = bitcast i8* %122 to i64*
  store i64 %127, i64* %128, align 8, !alias.scope !7, !noalias !4
  %129 = add i64 %120, 2
  store i64 %129, i64* %3, align 8, !alias.scope !4, !noalias !7
  %130 = icmp ugt i64 %105, %119
  br i1 %130, label %131, label %214

131:                                              ; preds = %118
  %132 = sub i64 %105, %119
  %133 = and i64 %132, 1
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %158, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds [18 x i8], [18 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %119
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i64
  %142 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeBitLengths, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeSymbols, i64 0, i64 %141
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i64
  %148 = lshr i64 %129, 3
  %149 = getelementptr inbounds i8, i8* %4, i64 %148
  %150 = load i8, i8* %149, align 1, !alias.scope !9, !noalias !12
  %151 = zext i8 %150 to i64
  %152 = and i64 %129, 7
  %153 = shl i64 %147, %152
  %154 = or i64 %153, %151
  %155 = bitcast i8* %149 to i64*
  store i64 %154, i64* %155, align 8, !alias.scope !9, !noalias !12
  %156 = add i64 %129, %144
  %157 = add nuw nsw i64 %119, 1
  br label %158

158:                                              ; preds = %131, %135
  %159 = phi i64 [ undef, %131 ], [ %156, %135 ]
  %160 = phi i64 [ %129, %131 ], [ %156, %135 ]
  %161 = phi i64 [ %119, %131 ], [ %157, %135 ]
  %162 = add nuw nsw i64 %119, 1
  %163 = icmp eq i64 %105, %162
  br i1 %163, label %212, label %164

164:                                              ; preds = %158, %164
  %165 = phi i64 [ %209, %164 ], [ %160, %158 ]
  %166 = phi i64 [ %210, %164 ], [ %161, %158 ]
  %167 = getelementptr inbounds [18 x i8], [18 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeBitLengths, i64 0, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeSymbols, i64 0, i64 %172
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i64
  %179 = lshr i64 %165, 3
  %180 = getelementptr inbounds i8, i8* %4, i64 %179
  %181 = load i8, i8* %180, align 1, !alias.scope !9, !noalias !12
  %182 = zext i8 %181 to i64
  %183 = and i64 %165, 7
  %184 = shl i64 %178, %183
  %185 = or i64 %184, %182
  %186 = bitcast i8* %180 to i64*
  store i64 %185, i64* %186, align 8, !alias.scope !9, !noalias !12
  %187 = add i64 %165, %175
  %188 = add nuw nsw i64 %166, 1
  %189 = getelementptr inbounds [18 x i8], [18 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kStorageOrder, i64 0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i64
  %195 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeBitLengths, i64 0, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i64
  %198 = getelementptr inbounds [6 x i8], [6 x i8]* @BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask.kHuffmanBitLengthHuffmanCodeSymbols, i64 0, i64 %194
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i64
  %201 = lshr i64 %187, 3
  %202 = getelementptr inbounds i8, i8* %4, i64 %201
  %203 = load i8, i8* %202, align 1, !alias.scope !9, !noalias !12
  %204 = zext i8 %203 to i64
  %205 = and i64 %187, 7
  %206 = shl i64 %200, %205
  %207 = or i64 %206, %204
  %208 = bitcast i8* %202 to i64*
  store i64 %207, i64* %208, align 8, !alias.scope !9, !noalias !12
  %209 = add i64 %187, %197
  %210 = add nuw nsw i64 %166, 2
  %211 = icmp eq i64 %210, %105
  br i1 %211, label %212, label %164

212:                                              ; preds = %164, %158
  %213 = phi i64 [ %159, %158 ], [ %209, %164 ]
  store i64 %213, i64* %3, align 8, !alias.scope !12, !noalias !9
  br label %214

214:                                              ; preds = %212, %118
  %215 = phi i64 [ %213, %212 ], [ %129, %118 ]
  %216 = icmp eq i32 %90, 1
  br i1 %216, label %217, label %219

217:                                              ; preds = %214
  %218 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %89
  store i8 0, i8* %218, align 1
  br label %219

219:                                              ; preds = %217, %214
  %220 = load i64, i64* %8, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %263, label %222

222:                                              ; preds = %219, %258
  %223 = phi i64 [ %259, %258 ], [ %215, %219 ]
  %224 = phi i64 [ %260, %258 ], [ 0, %219 ]
  %225 = getelementptr inbounds [704 x i8], [704 x i8]* %6, i64 0, i64 %224
  %226 = load i8, i8* %225, align 1, !noalias !14
  %227 = zext i8 %226 to i64
  %228 = getelementptr inbounds [18 x i8], [18 x i8]* %9, i64 0, i64 %227
  %229 = load i8, i8* %228, align 1, !noalias !14
  %230 = zext i8 %229 to i64
  %231 = getelementptr inbounds [18 x i16], [18 x i16]* %10, i64 0, i64 %227
  %232 = load i16, i16* %231, align 2, !noalias !14
  %233 = zext i16 %232 to i64
  %234 = lshr i64 %223, 3
  %235 = getelementptr inbounds i8, i8* %4, i64 %234
  %236 = load i8, i8* %235, align 1, !alias.scope !18, !noalias !21
  %237 = zext i8 %236 to i64
  %238 = and i64 %223, 7
  %239 = shl i64 %233, %238
  %240 = or i64 %239, %237
  %241 = bitcast i8* %235 to i64*
  store i64 %240, i64* %241, align 8, !alias.scope !18, !noalias !21
  %242 = add i64 %223, %230
  switch i8 %226, label %258 [
    i8 16, label %244
    i8 17, label %243
  ]

243:                                              ; preds = %222
  br label %244

244:                                              ; preds = %222, %243
  %245 = phi i64 [ 3, %243 ], [ 2, %222 ]
  %246 = getelementptr inbounds [704 x i8], [704 x i8]* %7, i64 0, i64 %224
  %247 = load i8, i8* %246, align 1, !noalias !14
  %248 = zext i8 %247 to i64
  %249 = lshr i64 %242, 3
  %250 = getelementptr inbounds i8, i8* %4, i64 %249
  %251 = load i8, i8* %250, align 1, !alias.scope !23, !noalias !28
  %252 = zext i8 %251 to i64
  %253 = and i64 %242, 7
  %254 = shl i64 %248, %253
  %255 = or i64 %254, %252
  %256 = bitcast i8* %250 to i64*
  store i64 %255, i64* %256, align 8, !alias.scope !23, !noalias !28
  %257 = add i64 %242, %245
  br label %258

258:                                              ; preds = %244, %222
  %259 = phi i64 [ %242, %222 ], [ %257, %244 ]
  %260 = add nuw i64 %224, 1
  %261 = icmp eq i64 %260, %220
  br i1 %261, label %262, label %222

262:                                              ; preds = %258
  store i64 %259, i64* %3, align 8, !alias.scope !29, !noalias !32
  br label %263

263:                                              ; preds = %219, %262
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %12) #5
  ret void

264:                                              ; preds = %82
  %265 = icmp eq i32 %84, 0
  br i1 %265, label %266, label %88

266:                                              ; preds = %264, %82
  %267 = phi i32 [ %84, %82 ], [ 1, %264 ]
  %268 = phi i64 [ 0, %82 ], [ 1, %264 ]
  %269 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 2
  %270 = load i32, i32* %269, align 8
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %274, label %272

272:                                              ; preds = %266
  switch i32 %267, label %273 [
    i32 0, label %274
    i32 1, label %88
  ]

273:                                              ; preds = %272
  br label %274

274:                                              ; preds = %273, %272, %266
  %275 = phi i32 [ %267, %266 ], [ 1, %272 ], [ %267, %273 ]
  %276 = phi i64 [ %268, %266 ], [ 2, %272 ], [ %268, %273 ]
  %277 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 3
  %278 = load i32, i32* %277, align 4
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %282, label %280

280:                                              ; preds = %274
  switch i32 %275, label %281 [
    i32 0, label %282
    i32 1, label %88
  ]

281:                                              ; preds = %280
  br label %282

282:                                              ; preds = %281, %280, %274
  %283 = phi i32 [ %275, %274 ], [ 1, %280 ], [ %275, %281 ]
  %284 = phi i64 [ %276, %274 ], [ 3, %280 ], [ %276, %281 ]
  %285 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 4
  %286 = load i32, i32* %285, align 16
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %290, label %288

288:                                              ; preds = %282
  switch i32 %283, label %289 [
    i32 0, label %290
    i32 1, label %88
  ]

289:                                              ; preds = %288
  br label %290

290:                                              ; preds = %289, %288, %282
  %291 = phi i32 [ %283, %282 ], [ 1, %288 ], [ %283, %289 ]
  %292 = phi i64 [ %284, %282 ], [ 4, %288 ], [ %284, %289 ]
  %293 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 5
  %294 = load i32, i32* %293, align 4
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %298, label %296

296:                                              ; preds = %290
  switch i32 %291, label %297 [
    i32 0, label %298
    i32 1, label %88
  ]

297:                                              ; preds = %296
  br label %298

298:                                              ; preds = %297, %296, %290
  %299 = phi i32 [ %291, %290 ], [ 1, %296 ], [ %291, %297 ]
  %300 = phi i64 [ %292, %290 ], [ 5, %296 ], [ %292, %297 ]
  %301 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 6
  %302 = load i32, i32* %301, align 8
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %306, label %304

304:                                              ; preds = %298
  switch i32 %299, label %305 [
    i32 0, label %306
    i32 1, label %88
  ]

305:                                              ; preds = %304
  br label %306

306:                                              ; preds = %305, %304, %298
  %307 = phi i32 [ %299, %298 ], [ 1, %304 ], [ %299, %305 ]
  %308 = phi i64 [ %300, %298 ], [ 6, %304 ], [ %300, %305 ]
  %309 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 7
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %314, label %312

312:                                              ; preds = %306
  switch i32 %307, label %313 [
    i32 0, label %314
    i32 1, label %88
  ]

313:                                              ; preds = %312
  br label %314

314:                                              ; preds = %313, %312, %306
  %315 = phi i32 [ %307, %306 ], [ 1, %312 ], [ %307, %313 ]
  %316 = phi i64 [ %308, %306 ], [ 7, %312 ], [ %308, %313 ]
  %317 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 8
  %318 = load i32, i32* %317, align 16
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %322, label %320

320:                                              ; preds = %314
  switch i32 %315, label %321 [
    i32 0, label %322
    i32 1, label %88
  ]

321:                                              ; preds = %320
  br label %322

322:                                              ; preds = %321, %320, %314
  %323 = phi i32 [ %315, %314 ], [ 1, %320 ], [ %315, %321 ]
  %324 = phi i64 [ %316, %314 ], [ 8, %320 ], [ %316, %321 ]
  %325 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 9
  %326 = load i32, i32* %325, align 4
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %330, label %328

328:                                              ; preds = %322
  switch i32 %323, label %329 [
    i32 0, label %330
    i32 1, label %88
  ]

329:                                              ; preds = %328
  br label %330

330:                                              ; preds = %329, %328, %322
  %331 = phi i32 [ %323, %322 ], [ 1, %328 ], [ %323, %329 ]
  %332 = phi i64 [ %324, %322 ], [ 9, %328 ], [ %324, %329 ]
  %333 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 10
  %334 = load i32, i32* %333, align 8
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %338, label %336

336:                                              ; preds = %330
  switch i32 %331, label %337 [
    i32 0, label %338
    i32 1, label %88
  ]

337:                                              ; preds = %336
  br label %338

338:                                              ; preds = %337, %336, %330
  %339 = phi i32 [ %331, %330 ], [ 1, %336 ], [ %331, %337 ]
  %340 = phi i64 [ %332, %330 ], [ 10, %336 ], [ %332, %337 ]
  %341 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 11
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %346, label %344

344:                                              ; preds = %338
  switch i32 %339, label %345 [
    i32 0, label %346
    i32 1, label %88
  ]

345:                                              ; preds = %344
  br label %346

346:                                              ; preds = %345, %344, %338
  %347 = phi i32 [ %339, %338 ], [ 1, %344 ], [ %339, %345 ]
  %348 = phi i64 [ %340, %338 ], [ 11, %344 ], [ %340, %345 ]
  %349 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 12
  %350 = load i32, i32* %349, align 16
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %354, label %352

352:                                              ; preds = %346
  switch i32 %347, label %353 [
    i32 0, label %354
    i32 1, label %88
  ]

353:                                              ; preds = %352
  br label %354

354:                                              ; preds = %353, %352, %346
  %355 = phi i32 [ %347, %346 ], [ 1, %352 ], [ %347, %353 ]
  %356 = phi i64 [ %348, %346 ], [ 12, %352 ], [ %348, %353 ]
  %357 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 13
  %358 = load i32, i32* %357, align 4
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %362, label %360

360:                                              ; preds = %354
  switch i32 %355, label %361 [
    i32 0, label %362
    i32 1, label %88
  ]

361:                                              ; preds = %360
  br label %362

362:                                              ; preds = %361, %360, %354
  %363 = phi i32 [ %355, %354 ], [ 1, %360 ], [ %355, %361 ]
  %364 = phi i64 [ %356, %354 ], [ 13, %360 ], [ %356, %361 ]
  %365 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 14
  %366 = load i32, i32* %365, align 8
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %370, label %368

368:                                              ; preds = %362
  switch i32 %363, label %369 [
    i32 0, label %370
    i32 1, label %88
  ]

369:                                              ; preds = %368
  br label %370

370:                                              ; preds = %369, %368, %362
  %371 = phi i32 [ %363, %362 ], [ 1, %368 ], [ %363, %369 ]
  %372 = phi i64 [ %364, %362 ], [ 14, %368 ], [ %364, %369 ]
  %373 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 15
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %378, label %376

376:                                              ; preds = %370
  switch i32 %371, label %377 [
    i32 0, label %378
    i32 1, label %88
  ]

377:                                              ; preds = %376
  br label %378

378:                                              ; preds = %377, %376, %370
  %379 = phi i32 [ %371, %370 ], [ 1, %376 ], [ %371, %377 ]
  %380 = phi i64 [ %372, %370 ], [ 15, %376 ], [ %372, %377 ]
  %381 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 16
  %382 = load i32, i32* %381, align 16
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %386, label %384

384:                                              ; preds = %378
  switch i32 %379, label %385 [
    i32 0, label %386
    i32 1, label %88
  ]

385:                                              ; preds = %384
  br label %386

386:                                              ; preds = %385, %384, %378
  %387 = phi i32 [ %379, %378 ], [ 1, %384 ], [ %379, %385 ]
  %388 = phi i64 [ %380, %378 ], [ 16, %384 ], [ %380, %385 ]
  %389 = getelementptr inbounds [18 x i32], [18 x i32]* %11, i64 0, i64 17
  %390 = load i32, i32* %389, align 4
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %394, label %392

392:                                              ; preds = %386
  switch i32 %387, label %393 [
    i32 0, label %394
    i32 1, label %88
  ]

393:                                              ; preds = %392
  br label %394

394:                                              ; preds = %393, %392, %386
  %395 = phi i32 [ %387, %386 ], [ 1, %392 ], [ %387, %393 ]
  %396 = phi i64 [ %388, %386 ], [ 17, %392 ], [ %388, %393 ]
  br label %88
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare hidden void @BrotliWriteHuffmanTree(i8*, i64, i64*, i8*, i8*) local_unnamed_addr #2

declare hidden void @BrotliCreateHuffmanTree(i32*, i64, i32, %struct.HuffmanTree*, i8*) local_unnamed_addr #2

declare hidden void @BrotliConvertBitDepthsToSymbols(i8*, i64, i16*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager*, i32* nocapture readonly, i64, i64, i8*, i16*, i64*, i8* nocapture) local_unnamed_addr #0 {
  %9 = alloca [4 x i64], align 16
  %10 = bitcast [4 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 32, i1 false)
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %34, label %12

12:                                               ; preds = %8, %27
  %13 = phi i64 [ %29, %27 ], [ 0, %8 ]
  %14 = phi i64 [ %28, %27 ], [ %2, %8 ]
  %15 = phi i64 [ %30, %27 ], [ 0, %8 ]
  %16 = getelementptr inbounds i32, i32* %1, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %12
  %20 = icmp ult i64 %13, 4
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %13
  store i64 %15, i64* %22, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = add i64 %13, 1
  %25 = zext i32 %17 to i64
  %26 = sub i64 %14, %25
  br label %27

27:                                               ; preds = %12, %23
  %28 = phi i64 [ %26, %23 ], [ %14, %12 ]
  %29 = phi i64 [ %24, %23 ], [ %13, %12 ]
  %30 = add i64 %15, 1
  %31 = icmp eq i64 %28, 0
  br i1 %31, label %32, label %12

32:                                               ; preds = %27
  %33 = icmp ult i64 %29, 2
  br i1 %33, label %34, label %58

34:                                               ; preds = %8, %32
  %35 = load i64, i64* %6, align 8, !alias.scope !33, !noalias !36
  %36 = lshr i64 %35, 3
  %37 = getelementptr inbounds i8, i8* %7, i64 %36
  %38 = load i8, i8* %37, align 1, !alias.scope !36, !noalias !33
  %39 = zext i8 %38 to i64
  %40 = and i64 %35, 7
  %41 = shl i64 1, %40
  %42 = or i64 %41, %39
  %43 = bitcast i8* %37 to i64*
  store i64 %42, i64* %43, align 8, !alias.scope !36, !noalias !33
  %44 = add i64 %35, 4
  %45 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %46 = load i64, i64* %45, align 16
  %47 = lshr i64 %44, 3
  %48 = getelementptr inbounds i8, i8* %7, i64 %47
  %49 = load i8, i8* %48, align 1, !alias.scope !38, !noalias !41
  %50 = zext i8 %49 to i64
  %51 = and i64 %44, 7
  %52 = shl i64 %46, %51
  %53 = or i64 %52, %50
  %54 = bitcast i8* %48 to i64*
  store i64 %53, i64* %54, align 8, !alias.scope !38, !noalias !41
  %55 = add i64 %44, %3
  store i64 %55, i64* %6, align 8, !alias.scope !41, !noalias !38
  %56 = getelementptr inbounds i8, i8* %4, i64 %46
  store i8 0, i8* %56, align 1
  %57 = getelementptr inbounds i16, i16* %5, i64 %46
  store i16 0, i16* %57, align 2
  br label %586

58:                                               ; preds = %32
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 %30, i1 false)
  %59 = shl i64 %30, 4
  %60 = or i64 %59, 8
  %61 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %60) #5
  %62 = bitcast i8* %61 to %struct.HuffmanTree*
  %63 = icmp eq i64 %30, 0
  %64 = ptrtoint i8* %61 to i64
  %65 = and i64 %30, 1
  %66 = icmp eq i64 %65, 0
  %67 = getelementptr inbounds i32, i32* %1, i64 %15
  %68 = trunc i64 %15 to i16
  %69 = bitcast i8* %61 to i32*
  %70 = getelementptr inbounds i8, i8* %61, i64 4
  %71 = bitcast i8* %70 to i16*
  %72 = getelementptr inbounds i8, i8* %61, i64 6
  %73 = bitcast i8* %72 to i16*
  %74 = getelementptr inbounds i8, i8* %61, i64 8
  %75 = bitcast i8* %74 to %struct.HuffmanTree*
  %76 = icmp eq i64 %15, 0
  br label %77

77:                                               ; preds = %275, %58
  %78 = phi i32 [ 1, %58 ], [ %281, %275 ]
  br i1 %63, label %111, label %79

79:                                               ; preds = %77
  br i1 %66, label %86, label %80

80:                                               ; preds = %79
  %81 = load i32, i32* %67, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %80
  %84 = icmp ult i32 %81, %78
  %85 = select i1 %84, i32 %78, i32 %81, !prof !43
  store i32 %85, i32* %69, align 4
  store i16 -1, i16* %71, align 4
  store i16 %68, i16* %73, align 2
  br label %86

86:                                               ; preds = %79, %83, %80
  %87 = phi %struct.HuffmanTree* [ undef, %79 ], [ %75, %83 ], [ %62, %80 ]
  %88 = phi i64 [ %30, %79 ], [ %15, %83 ], [ %15, %80 ]
  %89 = phi %struct.HuffmanTree* [ %62, %79 ], [ %75, %83 ], [ %62, %80 ]
  br i1 %76, label %111, label %90

90:                                               ; preds = %86, %600
  %91 = phi i64 [ %107, %600 ], [ %88, %86 ]
  %92 = phi %struct.HuffmanTree* [ %601, %600 ], [ %89, %86 ]
  %93 = add i64 %91, -1
  %94 = getelementptr inbounds i32, i32* %1, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %90
  %98 = icmp ult i32 %95, %78
  %99 = trunc i64 %93 to i16
  %100 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %92, i64 0, i32 0
  %101 = select i1 %98, i32 %78, i32 %95, !prof !43
  store i32 %101, i32* %100, align 4
  %102 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %92, i64 0, i32 1
  store i16 -1, i16* %102, align 4
  %103 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %92, i64 0, i32 2
  store i16 %99, i16* %103, align 2
  %104 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %92, i64 1
  br label %105

105:                                              ; preds = %90, %97
  %106 = phi %struct.HuffmanTree* [ %104, %97 ], [ %92, %90 ]
  %107 = add i64 %91, -2
  %108 = getelementptr inbounds i32, i32* %1, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %600, label %592

111:                                              ; preds = %86, %600, %77
  %112 = phi %struct.HuffmanTree* [ %62, %77 ], [ %87, %86 ], [ %601, %600 ]
  %113 = ptrtoint %struct.HuffmanTree* %112 to i64
  %114 = sub i64 %113, %64
  %115 = lshr exact i64 %114, 3
  %116 = trunc i64 %115 to i32
  %117 = add nsw i32 %116, 1
  %118 = shl i64 %114, 29
  %119 = ashr exact i64 %118, 32
  %120 = icmp ult i64 %119, 13
  br i1 %120, label %121, label %158

121:                                              ; preds = %111
  %122 = icmp ugt i64 %119, 1
  br i1 %122, label %123, label %222

123:                                              ; preds = %121
  %124 = add nsw i64 %119, -1
  %125 = and i64 %124, 1
  %126 = icmp eq i64 %118, 8589934592
  br i1 %126, label %197, label %127

127:                                              ; preds = %123
  %128 = sub nsw i64 %124, %125
  br label %129

129:                                              ; preds = %616, %127
  %130 = phi i64 [ 1, %127 ], [ %620, %616 ]
  %131 = phi i64 [ %128, %127 ], [ %621, %616 ]
  %132 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %130
  %133 = bitcast %struct.HuffmanTree* %132 to i64*
  %134 = load i64, i64* %133, align 4
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %143, %129
  %137 = phi i64 [ %130, %129 ], [ %138, %143 ]
  %138 = add i64 %137, -1
  %139 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %138
  %140 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %139, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = icmp ugt i32 %141, %135
  br i1 %142, label %143, label %149

143:                                              ; preds = %136
  %144 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %137
  %145 = bitcast %struct.HuffmanTree* %139 to i64*
  %146 = bitcast %struct.HuffmanTree* %144 to i64*
  %147 = load i64, i64* %145, align 4
  store i64 %147, i64* %146, align 4
  %148 = icmp eq i64 %138, 0
  br i1 %148, label %149, label %136

149:                                              ; preds = %143, %136
  %150 = phi i64 [ 0, %143 ], [ %137, %136 ]
  %151 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %150
  %152 = bitcast %struct.HuffmanTree* %151 to i64*
  store i64 %134, i64* %152, align 4
  %153 = add nuw i64 %130, 1
  %154 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %153
  %155 = bitcast %struct.HuffmanTree* %154 to i64*
  %156 = load i64, i64* %155, align 4
  %157 = trunc i64 %156 to i32
  br label %603

158:                                              ; preds = %111
  %159 = icmp ult i64 %119, 57
  %160 = select i1 %159, i64 2, i64 0
  br label %161

161:                                              ; preds = %194, %158
  %162 = phi i64 [ %160, %158 ], [ %195, %194 ]
  %163 = getelementptr inbounds [6 x i64], [6 x i64]* @kBrotliShellGaps, i64 0, i64 %162
  %164 = load i64, i64* %163, align 8
  %165 = icmp ult i64 %164, %119
  br i1 %165, label %166, label %194

166:                                              ; preds = %161, %189
  %167 = phi i64 [ %192, %189 ], [ %164, %161 ]
  %168 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %167
  %169 = bitcast %struct.HuffmanTree* %168 to i64*
  %170 = load i64, i64* %169, align 4
  %171 = trunc i64 %170 to i32
  %172 = icmp ult i64 %167, %164
  br i1 %172, label %173, label %176

173:                                              ; preds = %183, %166
  %174 = phi i64 [ %167, %166 ], [ %178, %183 ]
  %175 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %174
  br label %189

176:                                              ; preds = %166, %183
  %177 = phi i64 [ %178, %183 ], [ %167, %166 ]
  %178 = sub i64 %177, %164
  %179 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %178, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = icmp ugt i32 %180, %171
  %182 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %177
  br i1 %181, label %183, label %189

183:                                              ; preds = %176
  %184 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %178
  %185 = bitcast %struct.HuffmanTree* %184 to i64*
  %186 = bitcast %struct.HuffmanTree* %182 to i64*
  %187 = load i64, i64* %185, align 4
  store i64 %187, i64* %186, align 4
  %188 = icmp ult i64 %178, %164
  br i1 %188, label %173, label %176

189:                                              ; preds = %176, %173
  %190 = phi %struct.HuffmanTree* [ %175, %173 ], [ %182, %176 ]
  %191 = bitcast %struct.HuffmanTree* %190 to i64*
  store i64 %170, i64* %191, align 4
  %192 = add nuw i64 %167, 1
  %193 = icmp eq i64 %192, %119
  br i1 %193, label %194, label %166

194:                                              ; preds = %189, %161
  %195 = add nuw nsw i64 %162, 1
  %196 = icmp eq i64 %195, 6
  br i1 %196, label %222, label %161

197:                                              ; preds = %616, %123
  %198 = phi i64 [ 1, %123 ], [ %620, %616 ]
  %199 = icmp eq i64 %125, 0
  br i1 %199, label %222, label %200

200:                                              ; preds = %197
  %201 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %198
  %202 = bitcast %struct.HuffmanTree* %201 to i64*
  %203 = load i64, i64* %202, align 4
  %204 = trunc i64 %203 to i32
  br label %205

205:                                              ; preds = %212, %200
  %206 = phi i64 [ %198, %200 ], [ %207, %212 ]
  %207 = add i64 %206, -1
  %208 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %207
  %209 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %208, i64 0, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = icmp ugt i32 %210, %204
  br i1 %211, label %212, label %218

212:                                              ; preds = %205
  %213 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %206
  %214 = bitcast %struct.HuffmanTree* %208 to i64*
  %215 = bitcast %struct.HuffmanTree* %213 to i64*
  %216 = load i64, i64* %214, align 4
  store i64 %216, i64* %215, align 4
  %217 = icmp eq i64 %207, 0
  br i1 %217, label %218, label %205

218:                                              ; preds = %212, %205
  %219 = phi i64 [ 0, %212 ], [ %206, %205 ]
  %220 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %219
  %221 = bitcast %struct.HuffmanTree* %220 to i64*
  store i64 %203, i64* %221, align 4
  br label %222

222:                                              ; preds = %194, %218, %197, %121
  %223 = add nsw i32 %116, -1
  %224 = icmp sgt i32 %223, 0
  %225 = bitcast %struct.HuffmanTree* %112 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %225, i8 -1, i64 16, i1 false)
  br i1 %224, label %226, label %275

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %112, i64 2
  br label %228

228:                                              ; preds = %226, %228
  %229 = phi i32 [ %273, %228 ], [ %223, %226 ]
  %230 = phi i32 [ %257, %228 ], [ %117, %226 ]
  %231 = phi i32 [ %255, %228 ], [ 0, %226 ]
  %232 = phi %struct.HuffmanTree* [ %271, %228 ], [ %227, %226 ]
  %233 = sext i32 %231 to i64
  %234 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %233, i32 0
  %235 = load i32, i32* %234, align 4
  %236 = sext i32 %230 to i64
  %237 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %236, i32 0
  %238 = load i32, i32* %237, align 4
  %239 = icmp ugt i32 %235, %238
  %240 = xor i1 %239, true
  %241 = zext i1 %240 to i32
  %242 = add nsw i32 %231, %241
  %243 = zext i1 %239 to i32
  %244 = add nsw i32 %230, %243
  %245 = select i1 %239, i32 %230, i32 %231
  %246 = sext i32 %242 to i64
  %247 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %246, i32 0
  %248 = load i32, i32* %247, align 4
  %249 = sext i32 %244 to i64
  %250 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %249, i32 0
  %251 = load i32, i32* %250, align 4
  %252 = icmp ugt i32 %248, %251
  %253 = xor i1 %252, true
  %254 = zext i1 %253 to i32
  %255 = add nsw i32 %242, %254
  %256 = zext i1 %252 to i32
  %257 = add nsw i32 %244, %256
  %258 = select i1 %252, i32 %244, i32 %242
  %259 = sext i32 %245 to i64
  %260 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %259, i32 0
  %261 = load i32, i32* %260, align 4
  %262 = sext i32 %258 to i64
  %263 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %262, i32 0
  %264 = load i32, i32* %263, align 4
  %265 = add i32 %264, %261
  %266 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %232, i64 -1, i32 0
  store i32 %265, i32* %266, align 4
  %267 = trunc i32 %245 to i16
  %268 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %232, i64 -1, i32 1
  store i16 %267, i16* %268, align 4
  %269 = trunc i32 %258 to i16
  %270 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %232, i64 -1, i32 2
  store i16 %269, i16* %270, align 2
  %271 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %232, i64 1
  %272 = bitcast %struct.HuffmanTree* %232 to i64*
  store i64 -1, i64* %272, align 4
  %273 = add nsw i32 %229, -1
  %274 = icmp sgt i32 %273, 0
  br i1 %274, label %228, label %275

275:                                              ; preds = %228, %222
  %276 = lshr exact i64 %114, 2
  %277 = trunc i64 %276 to i32
  %278 = add nsw i32 %277, -1
  %279 = tail call i32 @BrotliSetDepth(i32 %278, %struct.HuffmanTree* %62, i8* %4, i32 14) #5
  %280 = icmp eq i32 %279, 0
  %281 = shl i32 %78, 1
  br i1 %280, label %77, label %282

282:                                              ; preds = %275
  tail call void @BrotliFree(%struct.MemoryManager* %0, i8* %61) #5
  tail call void @BrotliConvertBitDepthsToSymbols(i8* %4, i64 %30, i16* %5) #5
  %283 = icmp ult i64 %29, 5
  %284 = load i64, i64* %6, align 8
  %285 = lshr i64 %284, 3
  %286 = getelementptr inbounds i8, i8* %7, i64 %285
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i64
  %289 = and i64 %284, 7
  br i1 %283, label %290, label %443

290:                                              ; preds = %282
  %291 = shl i64 1, %289
  %292 = or i64 %291, %288
  %293 = bitcast i8* %286 to i64*
  store i64 %292, i64* %293, align 8, !alias.scope !44, !noalias !47
  %294 = add i64 %284, 2
  %295 = add nsw i64 %29, -1
  %296 = lshr i64 %294, 3
  %297 = getelementptr inbounds i8, i8* %7, i64 %296
  %298 = load i8, i8* %297, align 1, !alias.scope !49, !noalias !52
  %299 = zext i8 %298 to i64
  %300 = and i64 %294, 7
  %301 = shl i64 %295, %300
  %302 = or i64 %301, %299
  %303 = bitcast i8* %297 to i64*
  store i64 %302, i64* %303, align 8, !alias.scope !49, !noalias !52
  %304 = add i64 %284, 4
  store i64 %304, i64* %6, align 8, !alias.scope !52, !noalias !49
  %305 = icmp eq i64 %29, 0
  br i1 %305, label %383, label %306

306:                                              ; preds = %290
  %307 = add i64 %29, -2
  br label %310

308:                                              ; preds = %333, %588, %310
  %309 = icmp eq i64 %312, %29
  br i1 %309, label %358, label %310

310:                                              ; preds = %306, %308
  %311 = phi i64 [ %312, %308 ], [ 0, %306 ]
  %312 = add nuw i64 %311, 1
  %313 = icmp ult i64 %312, %29
  br i1 %313, label %314, label %308

314:                                              ; preds = %310
  %315 = xor i64 %311, 1
  %316 = add i64 %29, %315
  %317 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %311
  %318 = load i64, i64* %317, align 8
  %319 = and i64 %316, 1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %333, label %321

321:                                              ; preds = %314
  %322 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %312
  %323 = load i64, i64* %322, align 8
  %324 = getelementptr inbounds i8, i8* %4, i64 %323
  %325 = load i8, i8* %324, align 1
  %326 = getelementptr inbounds i8, i8* %4, i64 %318
  %327 = load i8, i8* %326, align 1
  %328 = icmp ult i8 %325, %327
  br i1 %328, label %329, label %330

329:                                              ; preds = %321
  store i64 %318, i64* %322, align 8
  store i64 %323, i64* %317, align 8
  br label %330

330:                                              ; preds = %329, %321
  %331 = phi i64 [ %318, %321 ], [ %323, %329 ]
  %332 = add nuw i64 %311, 2
  br label %333

333:                                              ; preds = %330, %314
  %334 = phi i64 [ %331, %330 ], [ %318, %314 ]
  %335 = phi i64 [ %332, %330 ], [ %312, %314 ]
  %336 = icmp eq i64 %307, %311
  br i1 %336, label %308, label %337

337:                                              ; preds = %333, %588
  %338 = phi i64 [ %589, %588 ], [ %334, %333 ]
  %339 = phi i64 [ %590, %588 ], [ %335, %333 ]
  %340 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %339
  %341 = load i64, i64* %340, align 8
  %342 = getelementptr inbounds i8, i8* %4, i64 %341
  %343 = load i8, i8* %342, align 1
  %344 = getelementptr inbounds i8, i8* %4, i64 %338
  %345 = load i8, i8* %344, align 1
  %346 = icmp ult i8 %343, %345
  br i1 %346, label %347, label %348

347:                                              ; preds = %337
  store i64 %338, i64* %340, align 8
  store i64 %341, i64* %317, align 8
  br label %348

348:                                              ; preds = %337, %347
  %349 = phi i64 [ %338, %337 ], [ %341, %347 ]
  %350 = add nuw i64 %339, 1
  %351 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = getelementptr inbounds i8, i8* %4, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = getelementptr inbounds i8, i8* %4, i64 %349
  %356 = load i8, i8* %355, align 1
  %357 = icmp ult i8 %354, %356
  br i1 %357, label %587, label %588

358:                                              ; preds = %308
  %359 = icmp eq i64 %29, 2
  br i1 %359, label %360, label %383

360:                                              ; preds = %358
  %361 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %362 = load i64, i64* %361, align 16
  %363 = lshr i64 %304, 3
  %364 = getelementptr inbounds i8, i8* %7, i64 %363
  %365 = load i8, i8* %364, align 1, !alias.scope !54, !noalias !57
  %366 = zext i8 %365 to i64
  %367 = and i64 %304, 7
  %368 = shl i64 %362, %367
  %369 = or i64 %368, %366
  %370 = bitcast i8* %364 to i64*
  store i64 %369, i64* %370, align 8, !alias.scope !54, !noalias !57
  %371 = add i64 %304, %3
  %372 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %373 = load i64, i64* %372, align 8
  %374 = lshr i64 %371, 3
  %375 = getelementptr inbounds i8, i8* %7, i64 %374
  %376 = load i8, i8* %375, align 1, !alias.scope !59, !noalias !62
  %377 = zext i8 %376 to i64
  %378 = and i64 %371, 7
  %379 = shl i64 %373, %378
  %380 = or i64 %379, %377
  %381 = bitcast i8* %375 to i64*
  store i64 %380, i64* %381, align 8, !alias.scope !59, !noalias !62
  %382 = add i64 %371, %3
  store i64 %382, i64* %6, align 8, !alias.scope !62, !noalias !59
  br label %586

383:                                              ; preds = %290, %358
  %384 = icmp eq i64 %29, 3
  %385 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %386 = load i64, i64* %385, align 16
  %387 = lshr i64 %304, 3
  %388 = getelementptr inbounds i8, i8* %7, i64 %387
  %389 = load i8, i8* %388, align 1, !alias.scope !64, !noalias !67
  %390 = zext i8 %389 to i64
  %391 = and i64 %304, 7
  %392 = shl i64 %386, %391
  %393 = or i64 %392, %390
  %394 = bitcast i8* %388 to i64*
  store i64 %393, i64* %394, align 8, !alias.scope !64, !noalias !67
  %395 = add i64 %304, %3
  %396 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %397 = load i64, i64* %396, align 8
  %398 = lshr i64 %395, 3
  %399 = getelementptr inbounds i8, i8* %7, i64 %398
  %400 = load i8, i8* %399, align 1, !alias.scope !69, !noalias !72
  %401 = zext i8 %400 to i64
  %402 = and i64 %395, 7
  %403 = shl i64 %397, %402
  %404 = or i64 %403, %401
  %405 = bitcast i8* %399 to i64*
  store i64 %404, i64* %405, align 8, !alias.scope !69, !noalias !72
  %406 = add i64 %395, %3
  %407 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 2
  %408 = load i64, i64* %407, align 16
  %409 = lshr i64 %406, 3
  %410 = getelementptr inbounds i8, i8* %7, i64 %409
  %411 = load i8, i8* %410, align 1, !alias.scope !74, !noalias !77
  %412 = zext i8 %411 to i64
  %413 = and i64 %406, 7
  %414 = shl i64 %408, %413
  %415 = or i64 %414, %412
  %416 = bitcast i8* %410 to i64*
  store i64 %415, i64* %416, align 8, !alias.scope !74, !noalias !77
  %417 = add i64 %406, %3
  store i64 %417, i64* %6, align 8, !alias.scope !77, !noalias !74
  br i1 %384, label %586, label %418

418:                                              ; preds = %383
  %419 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 3
  %420 = load i64, i64* %419, align 8
  %421 = lshr i64 %417, 3
  %422 = getelementptr inbounds i8, i8* %7, i64 %421
  %423 = load i8, i8* %422, align 1, !alias.scope !79, !noalias !82
  %424 = zext i8 %423 to i64
  %425 = and i64 %417, 7
  %426 = shl i64 %420, %425
  %427 = or i64 %426, %424
  %428 = bitcast i8* %422 to i64*
  store i64 %427, i64* %428, align 8, !alias.scope !79, !noalias !82
  %429 = add i64 %417, %3
  store i64 %429, i64* %6, align 8, !alias.scope !82, !noalias !79
  %430 = getelementptr inbounds i8, i8* %4, i64 %386
  %431 = load i8, i8* %430, align 1
  %432 = icmp eq i8 %431, 1
  %433 = zext i1 %432 to i64
  %434 = lshr i64 %429, 3
  %435 = getelementptr inbounds i8, i8* %7, i64 %434
  %436 = load i8, i8* %435, align 1, !alias.scope !84, !noalias !87
  %437 = zext i8 %436 to i64
  %438 = and i64 %429, 7
  %439 = shl i64 %433, %438
  %440 = or i64 %439, %437
  %441 = bitcast i8* %435 to i64*
  store i64 %440, i64* %441, align 8, !alias.scope !84, !noalias !87
  %442 = add i64 %429, 1
  store i64 %442, i64* %6, align 8, !alias.scope !87, !noalias !84
  br label %586

443:                                              ; preds = %282
  %444 = shl i64 1096648316244, %289
  %445 = or i64 %444, %288
  %446 = bitcast i8* %286 to i64*
  store i64 %445, i64* %446, align 8, !alias.scope !89, !noalias !92
  %447 = add i64 %284, 40
  store i64 %447, i64* %6, align 8, !alias.scope !92, !noalias !89
  br i1 %63, label %586, label %448

448:                                              ; preds = %443, %582
  %449 = phi i64 [ %583, %582 ], [ %447, %443 ]
  %450 = phi i64 [ %470, %582 ], [ 0, %443 ]
  %451 = phi i8 [ %584, %582 ], [ 8, %443 ]
  %452 = getelementptr inbounds i8, i8* %4, i64 %450
  %453 = load i8, i8* %452, align 1
  %454 = add nuw i64 %450, 1
  %455 = icmp ult i64 %454, %30
  br i1 %455, label %456, label %469

456:                                              ; preds = %448, %462
  %457 = phi i64 [ %464, %462 ], [ %454, %448 ]
  %458 = phi i64 [ %463, %462 ], [ 1, %448 ]
  %459 = getelementptr inbounds i8, i8* %4, i64 %457
  %460 = load i8, i8* %459, align 1
  %461 = icmp eq i8 %460, %453
  br i1 %461, label %462, label %466

462:                                              ; preds = %456
  %463 = add i64 %458, 1
  %464 = add i64 %457, 1
  %465 = icmp eq i64 %464, %30
  br i1 %465, label %466, label %456

466:                                              ; preds = %462, %456
  %467 = phi i64 [ %458, %456 ], [ %463, %462 ]
  %468 = add i64 %467, %450
  br label %469

469:                                              ; preds = %466, %448
  %470 = phi i64 [ %468, %466 ], [ %454, %448 ]
  %471 = phi i64 [ %467, %466 ], [ 1, %448 ]
  %472 = icmp eq i8 %453, 0
  br i1 %472, label %473, label %488

473:                                              ; preds = %469
  %474 = getelementptr inbounds [704 x i32], [704 x i32]* @kZeroRepsDepth, i64 0, i64 %471
  %475 = load i32, i32* %474, align 4
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds [704 x i64], [704 x i64]* @kZeroRepsBits, i64 0, i64 %471
  %478 = load i64, i64* %477, align 8
  %479 = lshr i64 %449, 3
  %480 = getelementptr inbounds i8, i8* %7, i64 %479
  %481 = load i8, i8* %480, align 1, !alias.scope !94, !noalias !97
  %482 = zext i8 %481 to i64
  %483 = and i64 %449, 7
  %484 = shl i64 %478, %483
  %485 = or i64 %484, %482
  %486 = bitcast i8* %480 to i64*
  store i64 %485, i64* %486, align 8, !alias.scope !94, !noalias !97
  %487 = add i64 %449, %476
  br label %579

488:                                              ; preds = %469
  %489 = icmp eq i8 %451, %453
  br i1 %489, label %508, label %490

490:                                              ; preds = %488
  %491 = zext i8 %453 to i64
  %492 = getelementptr inbounds [18 x i8], [18 x i8]* @kCodeLengthDepth, i64 0, i64 %491
  %493 = load i8, i8* %492, align 1
  %494 = zext i8 %493 to i64
  %495 = getelementptr inbounds [18 x i32], [18 x i32]* @kCodeLengthBits, i64 0, i64 %491
  %496 = load i32, i32* %495, align 4
  %497 = zext i32 %496 to i64
  %498 = lshr i64 %449, 3
  %499 = getelementptr inbounds i8, i8* %7, i64 %498
  %500 = load i8, i8* %499, align 1, !alias.scope !99, !noalias !102
  %501 = zext i8 %500 to i64
  %502 = and i64 %449, 7
  %503 = shl i64 %497, %502
  %504 = or i64 %503, %501
  %505 = bitcast i8* %499 to i64*
  store i64 %504, i64* %505, align 8, !alias.scope !99, !noalias !102
  %506 = add i64 %449, %494
  store i64 %506, i64* %6, align 8, !alias.scope !102, !noalias !99
  %507 = add i64 %471, -1
  br label %508

508:                                              ; preds = %488, %490
  %509 = phi i64 [ %506, %490 ], [ %449, %488 ]
  %510 = phi i64 [ %507, %490 ], [ %471, %488 ]
  %511 = icmp ult i64 %510, 3
  br i1 %511, label %512, label %563

512:                                              ; preds = %508
  %513 = icmp eq i64 %510, 0
  br i1 %513, label %582, label %514

514:                                              ; preds = %512
  %515 = zext i8 %453 to i64
  %516 = getelementptr inbounds [18 x i8], [18 x i8]* @kCodeLengthDepth, i64 0, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i64
  %519 = getelementptr inbounds [18 x i32], [18 x i32]* @kCodeLengthBits, i64 0, i64 %515
  %520 = load i32, i32* %519, align 4
  %521 = zext i32 %520 to i64
  %522 = and i64 %510, 1
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %535, label %524

524:                                              ; preds = %514
  %525 = add i64 %510, -1
  %526 = lshr i64 %509, 3
  %527 = getelementptr inbounds i8, i8* %7, i64 %526
  %528 = load i8, i8* %527, align 1, !alias.scope !104, !noalias !107
  %529 = zext i8 %528 to i64
  %530 = and i64 %509, 7
  %531 = shl i64 %521, %530
  %532 = or i64 %531, %529
  %533 = bitcast i8* %527 to i64*
  store i64 %532, i64* %533, align 8, !alias.scope !104, !noalias !107
  %534 = add i64 %509, %518
  br label %535

535:                                              ; preds = %524, %514
  %536 = phi i64 [ %534, %524 ], [ undef, %514 ]
  %537 = phi i64 [ %534, %524 ], [ %509, %514 ]
  %538 = phi i64 [ %525, %524 ], [ %510, %514 ]
  %539 = icmp eq i64 %510, 1
  br i1 %539, label %579, label %540

540:                                              ; preds = %535, %540
  %541 = phi i64 [ %561, %540 ], [ %537, %535 ]
  %542 = phi i64 [ %552, %540 ], [ %538, %535 ]
  %543 = lshr i64 %541, 3
  %544 = getelementptr inbounds i8, i8* %7, i64 %543
  %545 = load i8, i8* %544, align 1, !alias.scope !104, !noalias !107
  %546 = zext i8 %545 to i64
  %547 = and i64 %541, 7
  %548 = shl i64 %521, %547
  %549 = or i64 %548, %546
  %550 = bitcast i8* %544 to i64*
  store i64 %549, i64* %550, align 8, !alias.scope !104, !noalias !107
  %551 = add i64 %541, %518
  %552 = add i64 %542, -2
  %553 = lshr i64 %551, 3
  %554 = getelementptr inbounds i8, i8* %7, i64 %553
  %555 = load i8, i8* %554, align 1, !alias.scope !104, !noalias !107
  %556 = zext i8 %555 to i64
  %557 = and i64 %551, 7
  %558 = shl i64 %521, %557
  %559 = or i64 %558, %556
  %560 = bitcast i8* %554 to i64*
  store i64 %559, i64* %560, align 8, !alias.scope !104, !noalias !107
  %561 = add i64 %551, %518
  %562 = icmp eq i64 %552, 0
  br i1 %562, label %579, label %540

563:                                              ; preds = %508
  %564 = add i64 %510, -3
  %565 = getelementptr inbounds [704 x i32], [704 x i32]* @kNonZeroRepsDepth, i64 0, i64 %564
  %566 = load i32, i32* %565, align 4
  %567 = zext i32 %566 to i64
  %568 = getelementptr inbounds [704 x i64], [704 x i64]* @kNonZeroRepsBits, i64 0, i64 %564
  %569 = load i64, i64* %568, align 8
  %570 = lshr i64 %509, 3
  %571 = getelementptr inbounds i8, i8* %7, i64 %570
  %572 = load i8, i8* %571, align 1, !alias.scope !109, !noalias !112
  %573 = zext i8 %572 to i64
  %574 = and i64 %509, 7
  %575 = shl i64 %569, %574
  %576 = or i64 %575, %573
  %577 = bitcast i8* %571 to i64*
  store i64 %576, i64* %577, align 8, !alias.scope !109, !noalias !112
  %578 = add i64 %509, %567
  br label %579

579:                                              ; preds = %535, %540, %473, %563
  %580 = phi i64 [ %578, %563 ], [ %487, %473 ], [ %536, %535 ], [ %561, %540 ]
  %581 = phi i8 [ %453, %563 ], [ %451, %473 ], [ %453, %540 ], [ %453, %535 ]
  store i64 %580, i64* %6, align 8, !alias.scope !114, !noalias !115
  br label %582

582:                                              ; preds = %579, %512
  %583 = phi i64 [ %509, %512 ], [ %580, %579 ]
  %584 = phi i8 [ %453, %512 ], [ %581, %579 ]
  %585 = icmp ult i64 %470, %30
  br i1 %585, label %448, label %586

586:                                              ; preds = %582, %443, %418, %383, %360, %34
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  ret void

587:                                              ; preds = %348
  store i64 %349, i64* %351, align 8
  store i64 %352, i64* %317, align 8
  br label %588

588:                                              ; preds = %587, %348
  %589 = phi i64 [ %349, %348 ], [ %352, %587 ]
  %590 = add nuw i64 %339, 2
  %591 = icmp eq i64 %590, %29
  br i1 %591, label %308, label %337

592:                                              ; preds = %105
  %593 = icmp ult i32 %109, %78
  %594 = trunc i64 %107 to i16
  %595 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %106, i64 0, i32 0
  %596 = select i1 %593, i32 %78, i32 %109, !prof !43
  store i32 %596, i32* %595, align 4
  %597 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %106, i64 0, i32 1
  store i16 -1, i16* %597, align 4
  %598 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %106, i64 0, i32 2
  store i16 %594, i16* %598, align 2
  %599 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %106, i64 1
  br label %600

600:                                              ; preds = %592, %105
  %601 = phi %struct.HuffmanTree* [ %599, %592 ], [ %106, %105 ]
  %602 = icmp eq i64 %107, 0
  br i1 %602, label %111, label %90

603:                                              ; preds = %610, %149
  %604 = phi i64 [ %153, %149 ], [ %605, %610 ]
  %605 = add i64 %604, -1
  %606 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %605
  %607 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %606, i64 0, i32 0
  %608 = load i32, i32* %607, align 4
  %609 = icmp ugt i32 %608, %157
  br i1 %609, label %610, label %616

610:                                              ; preds = %603
  %611 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %604
  %612 = bitcast %struct.HuffmanTree* %606 to i64*
  %613 = bitcast %struct.HuffmanTree* %611 to i64*
  %614 = load i64, i64* %612, align 4
  store i64 %614, i64* %613, align 4
  %615 = icmp eq i64 %605, 0
  br i1 %615, label %616, label %603

616:                                              ; preds = %610, %603
  %617 = phi i64 [ 0, %610 ], [ %604, %603 ]
  %618 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %62, i64 %617
  %619 = bitcast %struct.HuffmanTree* %618 to i64*
  store i64 %156, i64* %619, align 4
  %620 = add nuw i64 %130, 2
  %621 = add i64 %131, -2
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %197, label %129
}

declare hidden i8* @BrotliAllocate(%struct.MemoryManager*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare hidden i32 @BrotliSetDepth(i32, %struct.HuffmanTree*, i8*, i32) local_unnamed_addr #2

declare hidden void @BrotliFree(%struct.MemoryManager*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliStoreMetaBlock(%struct.MemoryManager*, i8* nocapture readonly, i64, i64, i64, i8 zeroext, i8 zeroext, i32, %struct.BrotliEncoderParams* nocapture readonly, i32, %struct.Command* nocapture readonly, i64, %struct.MetaBlockSplit* readonly, i64*, i8*) local_unnamed_addr #0 {
  %16 = alloca %struct.BlockEncoder, align 8
  %17 = alloca %struct.BlockEncoder, align 8
  %18 = alloca %struct.BlockEncoder, align 8
  %19 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %8, i64 0, i32 9, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %8, i64 0, i32 9, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = shl i32 %9, 9
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [2048 x i8], [2048 x i8]* @_kBrotliContextLookupTable, i64 0, i64 %24
  %26 = bitcast %struct.BlockEncoder* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 952, i8* nonnull %26) #5
  %27 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 5, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 896, i1 false)
  %28 = bitcast %struct.BlockEncoder* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 952, i8* nonnull %28) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 952, i1 false)
  %29 = bitcast %struct.BlockEncoder* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 952, i8* nonnull %29) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 952, i1 false)
  tail call fastcc void @StoreCompressedMetaBlockHeader(i32 %7, i64 %3, i64* %13, i8* %14)
  %30 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 11272) #5
  %31 = bitcast i8* %30 to %struct.HuffmanTree*
  %32 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 0, i32 2
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 0, i32 3
  %38 = load i32*, i32** %37, align 8
  %39 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 0
  store i64 256, i64* %41, align 8
  %42 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 1
  store i64 %33, i64* %42, align 8
  %43 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 2
  %44 = bitcast i8** %43 to i64*
  store i64 %36, i64* %44, align 8
  %45 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 3
  store i32* %38, i32** %45, align 8
  %46 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 4
  store i64 %40, i64* %46, align 8
  %47 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 5, i32 0, i32 0
  %48 = bitcast i64* %47 to <2 x i64>*
  store <2 x i64> <i64 1, i64 0>, <2 x i64>* %48, align 8
  %49 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 6
  store i64 0, i64* %49, align 8
  %50 = icmp eq i64 %40, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %15
  %52 = load i32, i32* %38, align 4
  %53 = zext i32 %52 to i64
  br label %54

54:                                               ; preds = %15, %51
  %55 = phi i64 [ %53, %51 ], [ 0, %15 ]
  %56 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 7
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 8
  %58 = bitcast i64* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 24, i1 false) #5
  %59 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 1, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 1, i32 2
  %62 = bitcast i8** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 1, i32 3
  %65 = load i32*, i32** %64, align 8
  %66 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 1, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 0
  store i64 704, i64* %68, align 8
  %69 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 1
  store i64 %60, i64* %69, align 8
  %70 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 2
  %71 = bitcast i8** %70 to i64*
  store i64 %63, i64* %71, align 8
  %72 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 3
  store i32* %65, i32** %72, align 8
  %73 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 4
  store i64 %67, i64* %73, align 8
  %74 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 5, i32 0, i32 0
  %75 = bitcast i64* %74 to <2 x i64>*
  store <2 x i64> <i64 1, i64 0>, <2 x i64>* %75, align 8
  %76 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 6
  store i64 0, i64* %76, align 8
  %77 = icmp eq i64 %67, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %54
  %79 = load i32, i32* %65, align 4
  %80 = zext i32 %79 to i64
  br label %81

81:                                               ; preds = %54, %78
  %82 = phi i64 [ %80, %78 ], [ 0, %54 ]
  %83 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 7
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 8
  %85 = bitcast i64* %84 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #5
  %86 = zext i32 %22 to i64
  %87 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 2, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 2, i32 2
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 2, i32 3
  %93 = load i32*, i32** %92, align 8
  %94 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 2, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 0
  store i64 %86, i64* %96, align 8
  %97 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 1
  store i64 %88, i64* %97, align 8
  %98 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 2
  %99 = bitcast i8** %98 to i64*
  store i64 %91, i64* %99, align 8
  %100 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 3
  store i32* %93, i32** %100, align 8
  %101 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 4
  store i64 %95, i64* %101, align 8
  %102 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 5, i32 0, i32 0
  %103 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> <i64 1, i64 0>, <2 x i64>* %103, align 8
  %104 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 6
  store i64 0, i64* %104, align 8
  %105 = icmp eq i64 %95, 0
  br i1 %105, label %109, label %106

106:                                              ; preds = %81
  %107 = load i32, i32* %93, align 4
  %108 = zext i32 %107 to i64
  br label %109

109:                                              ; preds = %81, %106
  %110 = phi i64 [ %108, %106 ], [ 0, %81 ]
  %111 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 7
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 8
  %113 = bitcast i64* %112 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #5
  call fastcc void @BuildAndStoreBlockSwitchEntropyCodes(%struct.BlockEncoder* nonnull %16, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  call fastcc void @BuildAndStoreBlockSwitchEntropyCodes(%struct.BlockEncoder* nonnull %17, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  call fastcc void @BuildAndStoreBlockSwitchEntropyCodes(%struct.BlockEncoder* nonnull %18, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  %114 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %8, i64 0, i32 9, i32 0
  %115 = load i32, i32* %114, align 8
  %116 = zext i32 %115 to i64
  %117 = load i64, i64* %13, align 8, !alias.scope !116, !noalias !119
  %118 = lshr i64 %117, 3
  %119 = getelementptr inbounds i8, i8* %14, i64 %118
  %120 = load i8, i8* %119, align 1, !alias.scope !119, !noalias !116
  %121 = zext i8 %120 to i64
  %122 = and i64 %117, 7
  %123 = shl i64 %116, %122
  %124 = or i64 %123, %121
  %125 = bitcast i8* %119 to i64*
  store i64 %124, i64* %125, align 8, !alias.scope !119, !noalias !116
  %126 = add i64 %117, 2
  store i64 %126, i64* %13, align 8, !alias.scope !116, !noalias !119
  %127 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %8, i64 0, i32 9, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* %114, align 8
  %130 = lshr i32 %128, %129
  %131 = zext i32 %130 to i64
  %132 = lshr i64 %126, 3
  %133 = getelementptr inbounds i8, i8* %14, i64 %132
  %134 = load i8, i8* %133, align 1, !alias.scope !121, !noalias !124
  %135 = zext i8 %134 to i64
  %136 = and i64 %126, 7
  %137 = shl i64 %131, %136
  %138 = or i64 %137, %135
  %139 = bitcast i8* %133 to i64*
  store i64 %138, i64* %139, align 8, !alias.scope !121, !noalias !124
  %140 = add i64 %117, 6
  store i64 %140, i64* %13, align 8, !alias.scope !124, !noalias !121
  %141 = load i64, i64* %32, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %160, label %143

143:                                              ; preds = %109
  %144 = zext i32 %9 to i64
  br label %145

145:                                              ; preds = %143, %145
  %146 = phi i64 [ %140, %143 ], [ %156, %145 ]
  %147 = phi i64 [ 0, %143 ], [ %157, %145 ]
  %148 = lshr i64 %146, 3
  %149 = getelementptr inbounds i8, i8* %14, i64 %148
  %150 = load i8, i8* %149, align 1, !alias.scope !126, !noalias !129
  %151 = zext i8 %150 to i64
  %152 = and i64 %146, 7
  %153 = shl i64 %144, %152
  %154 = or i64 %153, %151
  %155 = bitcast i8* %149 to i64*
  store i64 %154, i64* %155, align 8, !alias.scope !126, !noalias !129
  %156 = add i64 %146, 2
  store i64 %156, i64* %13, align 8, !alias.scope !129, !noalias !126
  %157 = add nuw i64 %147, 1
  %158 = load i64, i64* %32, align 8
  %159 = icmp ult i64 %157, %158
  br i1 %159, label %145, label %160

160:                                              ; preds = %145, %109
  %161 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 4
  %162 = load i64, i64* %161, align 8
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %167

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 8
  %166 = load i64, i64* %165, align 8
  call fastcc void @StoreTrivialContextMap(i64 %166, i64 6, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  br label %172

167:                                              ; preds = %160
  %168 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 3
  %169 = load i32*, i32** %168, align 8
  %170 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 8
  %171 = load i64, i64* %170, align 8
  call fastcc void @EncodeContextMap(%struct.MemoryManager* %0, i32* %169, i64 %162, i64 %171, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  br label %172

172:                                              ; preds = %167, %164
  %173 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 6
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %179

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 12
  %178 = load i64, i64* %177, align 8
  call fastcc void @StoreTrivialContextMap(i64 %178, i64 2, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  br label %184

179:                                              ; preds = %172
  %180 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 5
  %181 = load i32*, i32** %180, align 8
  %182 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 12
  %183 = load i64, i64* %182, align 8
  call fastcc void @EncodeContextMap(%struct.MemoryManager* %0, i32* %181, i64 %174, i64 %183, %struct.HuffmanTree* %31, i64* %13, i8* %14)
  br label %184

184:                                              ; preds = %179, %176
  %185 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 7
  %186 = load %struct.HistogramLiteral*, %struct.HistogramLiteral** %185, align 8
  %187 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 8
  %188 = load i64, i64* %187, align 8
  %189 = load i64, i64* %41, align 8
  %190 = mul i64 %189, %188
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %194

192:                                              ; preds = %184
  %193 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 9
  store i8* null, i8** %193, align 8
  br label %200

194:                                              ; preds = %184
  %195 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %190) #5
  %196 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 9
  store i8* %195, i8** %196, align 8
  %197 = shl i64 %190, 1
  %198 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %197) #5
  %199 = bitcast i8* %198 to i16*
  br label %200

200:                                              ; preds = %194, %192
  %201 = phi i8** [ %196, %194 ], [ %193, %192 ]
  %202 = phi i16* [ %199, %194 ], [ null, %192 ]
  %203 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 10
  store i16* %202, i16** %203, align 8
  %204 = icmp eq i64 %188, 0
  br i1 %204, label %221, label %205

205:                                              ; preds = %200
  %206 = load i64, i64* %41, align 8
  %207 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %186, i64 0, i32 0, i64 0
  %208 = load i8*, i8** %201, align 8
  call fastcc void @BuildAndStoreHuffmanTree(i32* %207, i64 %206, i64 256, %struct.HuffmanTree* %31, i8* %208, i16* %202, i64* %13, i8* %14) #5
  %209 = icmp eq i64 %188, 1
  br i1 %209, label %221, label %210

210:                                              ; preds = %205, %210
  %211 = phi i64 [ %219, %210 ], [ 1, %205 ]
  %212 = load i16*, i16** %203, align 8
  %213 = load i64, i64* %41, align 8
  %214 = mul i64 %213, %211
  %215 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %186, i64 %211, i32 0, i64 0
  %216 = load i8*, i8** %201, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 %214
  %218 = getelementptr inbounds i16, i16* %212, i64 %214
  call fastcc void @BuildAndStoreHuffmanTree(i32* %215, i64 %213, i64 256, %struct.HuffmanTree* %31, i8* %217, i16* %218, i64* %13, i8* %14) #5
  %219 = add nuw i64 %211, 1
  %220 = icmp eq i64 %219, %188
  br i1 %220, label %221, label %210

221:                                              ; preds = %210, %205, %200
  %222 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 9
  %223 = load %struct.HistogramCommand*, %struct.HistogramCommand** %222, align 8
  %224 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 10
  %225 = load i64, i64* %224, align 8
  %226 = load i64, i64* %68, align 8
  %227 = mul i64 %226, %225
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %221
  %230 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 9
  store i8* null, i8** %230, align 8
  br label %237

231:                                              ; preds = %221
  %232 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %227) #5
  %233 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 9
  store i8* %232, i8** %233, align 8
  %234 = shl i64 %227, 1
  %235 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %234) #5
  %236 = bitcast i8* %235 to i16*
  br label %237

237:                                              ; preds = %231, %229
  %238 = phi i8** [ %233, %231 ], [ %230, %229 ]
  %239 = phi i16* [ %236, %231 ], [ null, %229 ]
  %240 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 10
  store i16* %239, i16** %240, align 8
  %241 = icmp eq i64 %225, 0
  br i1 %241, label %258, label %242

242:                                              ; preds = %237
  %243 = load i64, i64* %68, align 8
  %244 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %223, i64 0, i32 0, i64 0
  %245 = load i8*, i8** %238, align 8
  call fastcc void @BuildAndStoreHuffmanTree(i32* %244, i64 %243, i64 704, %struct.HuffmanTree* %31, i8* %245, i16* %239, i64* %13, i8* %14) #5
  %246 = icmp eq i64 %225, 1
  br i1 %246, label %258, label %247

247:                                              ; preds = %242, %247
  %248 = phi i64 [ %256, %247 ], [ 1, %242 ]
  %249 = load i16*, i16** %240, align 8
  %250 = load i64, i64* %68, align 8
  %251 = mul i64 %250, %248
  %252 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %223, i64 %248, i32 0, i64 0
  %253 = load i8*, i8** %238, align 8
  %254 = getelementptr inbounds i8, i8* %253, i64 %251
  %255 = getelementptr inbounds i16, i16* %249, i64 %251
  call fastcc void @BuildAndStoreHuffmanTree(i32* %252, i64 %250, i64 704, %struct.HuffmanTree* %31, i8* %254, i16* %255, i64* %13, i8* %14) #5
  %256 = add nuw i64 %248, 1
  %257 = icmp eq i64 %256, %225
  br i1 %257, label %258, label %247

258:                                              ; preds = %247, %242, %237
  %259 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 11
  %260 = load %struct.HistogramDistance*, %struct.HistogramDistance** %259, align 8
  %261 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 12
  %262 = load i64, i64* %261, align 8
  %263 = zext i32 %20 to i64
  %264 = load i64, i64* %96, align 8
  %265 = mul i64 %264, %262
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %269

267:                                              ; preds = %258
  %268 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 9
  store i8* null, i8** %268, align 8
  br label %275

269:                                              ; preds = %258
  %270 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %265) #5
  %271 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 9
  store i8* %270, i8** %271, align 8
  %272 = shl i64 %265, 1
  %273 = call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %272) #5
  %274 = bitcast i8* %273 to i16*
  br label %275

275:                                              ; preds = %269, %267
  %276 = phi i8** [ %271, %269 ], [ %268, %267 ]
  %277 = phi i16* [ %274, %269 ], [ null, %267 ]
  %278 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 10
  store i16* %277, i16** %278, align 8
  %279 = icmp eq i64 %262, 0
  br i1 %279, label %296, label %280

280:                                              ; preds = %275
  %281 = load i64, i64* %96, align 8
  %282 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %260, i64 0, i32 0, i64 0
  %283 = load i8*, i8** %276, align 8
  call fastcc void @BuildAndStoreHuffmanTree(i32* %282, i64 %281, i64 %263, %struct.HuffmanTree* %31, i8* %283, i16* %277, i64* %13, i8* %14) #5
  %284 = icmp eq i64 %262, 1
  br i1 %284, label %296, label %285

285:                                              ; preds = %280, %285
  %286 = phi i64 [ %294, %285 ], [ 1, %280 ]
  %287 = load i16*, i16** %278, align 8
  %288 = load i64, i64* %96, align 8
  %289 = mul i64 %288, %286
  %290 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %260, i64 %286, i32 0, i64 0
  %291 = load i8*, i8** %276, align 8
  %292 = getelementptr inbounds i8, i8* %291, i64 %289
  %293 = getelementptr inbounds i16, i16* %287, i64 %289
  call fastcc void @BuildAndStoreHuffmanTree(i32* %290, i64 %288, i64 %263, %struct.HuffmanTree* %31, i8* %292, i16* %293, i64* %13, i8* %14) #5
  %294 = add nuw i64 %286, 1
  %295 = icmp eq i64 %294, %262
  br i1 %295, label %296, label %285

296:                                              ; preds = %285, %280, %275
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %30) #5
  %297 = icmp eq i64 %11, 0
  br i1 %297, label %504, label %298

298:                                              ; preds = %296
  %299 = getelementptr inbounds i8, i8* %25, i64 256
  %300 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 3
  %301 = getelementptr inbounds %struct.MetaBlockSplit, %struct.MetaBlockSplit* %12, i64 0, i32 5
  br label %302

302:                                              ; preds = %499, %298
  %303 = phi i8 [ %5, %298 ], [ %501, %499 ]
  %304 = phi i8 [ %6, %298 ], [ %500, %499 ]
  %305 = phi i64 [ %2, %298 ], [ %451, %499 ]
  %306 = phi i64 [ 0, %298 ], [ %502, %499 ]
  %307 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %306, i32 0
  %308 = load i32, i32* %307, align 4
  %309 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %306, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %306, i32 2
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %306, i32 3
  %314 = load i16, i16* %313, align 4
  %315 = getelementptr inbounds %struct.Command, %struct.Command* %10, i64 %306, i32 4
  %316 = load i16, i16* %315, align 2
  %317 = zext i16 %314 to i64
  call fastcc void @StoreSymbol(%struct.BlockEncoder* nonnull %17, i64 %317, i64* %13, i8* %14)
  %318 = lshr i32 %310, 25
  %319 = shl nuw nsw i32 %318, 1
  %320 = and i32 %319, 128
  %321 = or i32 %320, %318
  %322 = shl nuw i32 %321, 24
  %323 = ashr exact i32 %322, 24
  %324 = and i32 %310, 33554431
  %325 = add nsw i32 %323, %324
  %326 = zext i32 %308 to i64
  %327 = icmp ult i32 %308, 6
  br i1 %327, label %353, label %328

328:                                              ; preds = %302
  %329 = icmp ult i32 %308, 130
  br i1 %329, label %330, label %341

330:                                              ; preds = %328
  %331 = add nsw i64 %326, -2
  %332 = trunc i64 %331 to i32
  %333 = call i32 @llvm.ctlz.i32(i32 %332, i1 true) #5, !range !131
  %334 = sub nsw i32 30, %333
  %335 = shl nsw i32 %334, 1
  %336 = zext i32 %335 to i64
  %337 = zext i32 %334 to i64
  %338 = lshr i64 %331, %337
  %339 = add nuw nsw i64 %336, 2
  %340 = add i64 %339, %338
  br label %353

341:                                              ; preds = %328
  %342 = icmp ult i32 %308, 2114
  br i1 %342, label %343, label %348

343:                                              ; preds = %341
  %344 = add nsw i32 %308, -66
  %345 = call i32 @llvm.ctlz.i32(i32 %344, i1 true) #5, !range !131
  %346 = sub nuw nsw i32 41, %345
  %347 = zext i32 %346 to i64
  br label %353

348:                                              ; preds = %341
  %349 = icmp ult i32 %308, 6210
  br i1 %349, label %353, label %350

350:                                              ; preds = %348
  %351 = icmp ult i32 %308, 22594
  %352 = select i1 %351, i64 22, i64 23
  br label %353

353:                                              ; preds = %350, %348, %343, %330, %302
  %354 = phi i64 [ %340, %330 ], [ %347, %343 ], [ 21, %348 ], [ %352, %350 ], [ %326, %302 ]
  %355 = zext i32 %325 to i64
  %356 = icmp ult i32 %325, 10
  br i1 %356, label %357, label %359

357:                                              ; preds = %353
  %358 = add nuw nsw i64 %355, 65534
  br label %379

359:                                              ; preds = %353
  %360 = icmp ult i32 %325, 134
  br i1 %360, label %361, label %372

361:                                              ; preds = %359
  %362 = add nsw i64 %355, -6
  %363 = trunc i64 %362 to i32
  %364 = call i32 @llvm.ctlz.i32(i32 %363, i1 true) #5, !range !131
  %365 = sub nsw i32 30, %364
  %366 = shl nsw i32 %365, 1
  %367 = zext i32 %366 to i64
  %368 = zext i32 %365 to i64
  %369 = lshr i64 %362, %368
  %370 = add nuw nsw i64 %367, 4
  %371 = add i64 %370, %369
  br label %379

372:                                              ; preds = %359
  %373 = icmp ult i32 %325, 2118
  br i1 %373, label %374, label %379

374:                                              ; preds = %372
  %375 = add nsw i32 %325, -70
  %376 = call i32 @llvm.ctlz.i32(i32 %375, i1 true) #5, !range !131
  %377 = sub nuw nsw i32 43, %376
  %378 = zext i32 %377 to i64
  br label %379

379:                                              ; preds = %357, %361, %372, %374
  %380 = phi i64 [ %358, %357 ], [ %371, %361 ], [ %378, %374 ], [ 23, %372 ]
  %381 = and i64 %354, 65535
  %382 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliInsExtra, i64 0, i64 %381
  %383 = load i32, i32* %382, align 4
  %384 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliInsBase, i64 0, i64 %381
  %385 = load i32, i32* %384, align 4
  %386 = sub i32 %308, %385
  %387 = zext i32 %386 to i64
  %388 = and i64 %380, 65535
  %389 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyBase, i64 0, i64 %388
  %390 = load i32, i32* %389, align 4
  %391 = sub i32 %325, %390
  %392 = zext i32 %391 to i64
  %393 = zext i32 %383 to i64
  %394 = shl i64 %392, %393
  %395 = or i64 %394, %387
  %396 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyExtra, i64 0, i64 %388
  %397 = load i32, i32* %396, align 4
  %398 = add i32 %397, %383
  %399 = zext i32 %398 to i64
  %400 = load i64, i64* %13, align 8, !alias.scope !132, !noalias !135
  %401 = lshr i64 %400, 3
  %402 = getelementptr inbounds i8, i8* %14, i64 %401
  %403 = load i8, i8* %402, align 1, !alias.scope !135, !noalias !132
  %404 = zext i8 %403 to i64
  %405 = and i64 %400, 7
  %406 = shl i64 %395, %405
  %407 = or i64 %406, %404
  %408 = bitcast i8* %402 to i64*
  store i64 %407, i64* %408, align 8, !alias.scope !135, !noalias !132
  %409 = add i64 %400, %399
  store i64 %409, i64* %13, align 8, !alias.scope !132, !noalias !135
  %410 = load i64, i64* %161, align 8
  %411 = icmp eq i64 %410, 0
  %412 = icmp eq i32 %308, 0
  br i1 %411, label %414, label %413

413:                                              ; preds = %379
  br i1 %412, label %446, label %425

414:                                              ; preds = %379
  br i1 %412, label %446, label %415

415:                                              ; preds = %414, %415
  %416 = phi i64 [ %422, %415 ], [ %305, %414 ]
  %417 = phi i64 [ %423, %415 ], [ %326, %414 ]
  %418 = and i64 %416, %4
  %419 = getelementptr inbounds i8, i8* %1, i64 %418
  %420 = load i8, i8* %419, align 1
  %421 = zext i8 %420 to i64
  call fastcc void @StoreSymbol(%struct.BlockEncoder* nonnull %16, i64 %421, i64* %13, i8* %14)
  %422 = add i64 %416, 1
  %423 = add nsw i64 %417, -1
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %446, label %415

425:                                              ; preds = %413, %425
  %426 = phi i8 [ %440, %425 ], [ %303, %413 ]
  %427 = phi i8 [ %426, %425 ], [ %304, %413 ]
  %428 = phi i64 [ %443, %425 ], [ %305, %413 ]
  %429 = phi i64 [ %444, %425 ], [ %326, %413 ]
  %430 = zext i8 %426 to i64
  %431 = getelementptr inbounds i8, i8* %25, i64 %430
  %432 = load i8, i8* %431, align 1
  %433 = zext i8 %427 to i64
  %434 = getelementptr inbounds i8, i8* %299, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = or i8 %435, %432
  %437 = zext i8 %436 to i64
  %438 = and i64 %428, %4
  %439 = getelementptr inbounds i8, i8* %1, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i64
  %442 = load i32*, i32** %300, align 8
  call fastcc void @StoreSymbolWithContext(%struct.BlockEncoder* nonnull %16, i64 %441, i64 %437, i32* %442, i64* %13, i8* %14, i64 6)
  %443 = add i64 %428, 1
  %444 = add nsw i64 %429, -1
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %446, label %425

446:                                              ; preds = %425, %415, %413, %414
  %447 = phi i64 [ %305, %414 ], [ %305, %413 ], [ %422, %415 ], [ %443, %425 ]
  %448 = phi i8 [ %304, %414 ], [ %304, %413 ], [ %304, %415 ], [ %426, %425 ]
  %449 = phi i8 [ %303, %414 ], [ %303, %413 ], [ %303, %415 ], [ %440, %425 ]
  %450 = zext i32 %324 to i64
  %451 = add i64 %447, %450
  %452 = icmp eq i32 %324, 0
  br i1 %452, label %499, label %453

453:                                              ; preds = %446
  %454 = add i64 %451, -2
  %455 = and i64 %454, %4
  %456 = getelementptr inbounds i8, i8* %1, i64 %455
  %457 = load i8, i8* %456, align 1
  %458 = add i64 %451, -1
  %459 = and i64 %458, %4
  %460 = getelementptr inbounds i8, i8* %1, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = icmp ugt i16 %314, 127
  br i1 %462, label %463, label %499

463:                                              ; preds = %453
  %464 = zext i16 %316 to i32
  %465 = and i32 %464, 1023
  %466 = zext i32 %465 to i64
  %467 = lshr i32 %464, 10
  %468 = zext i32 %312 to i64
  %469 = load i64, i64* %173, align 8
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %472

471:                                              ; preds = %463
  call fastcc void @StoreSymbol(%struct.BlockEncoder* nonnull %18, i64 %466, i64* %13, i8* %14)
  br label %487

472:                                              ; preds = %463
  %473 = zext i16 %314 to i32
  %474 = lshr i32 %473, 6
  %475 = and i32 %473, 7
  %476 = and i32 %473, 65344
  %477 = icmp eq i32 %476, 0
  %478 = icmp eq i32 %474, 4
  %479 = or i1 %477, %478
  %480 = icmp eq i32 %474, 7
  %481 = or i1 %480, %479
  %482 = icmp ult i32 %475, 3
  %483 = and i1 %482, %481
  %484 = zext i32 %475 to i64
  %485 = select i1 %483, i64 %484, i64 3
  %486 = load i32*, i32** %301, align 8
  call fastcc void @StoreSymbolWithContext(%struct.BlockEncoder* nonnull %18, i64 %466, i64 %485, i32* %486, i64* %13, i8* %14, i64 2)
  br label %487

487:                                              ; preds = %472, %471
  %488 = zext i32 %467 to i64
  %489 = load i64, i64* %13, align 8, !alias.scope !137, !noalias !140
  %490 = lshr i64 %489, 3
  %491 = getelementptr inbounds i8, i8* %14, i64 %490
  %492 = load i8, i8* %491, align 1, !alias.scope !140, !noalias !137
  %493 = zext i8 %492 to i64
  %494 = and i64 %489, 7
  %495 = shl i64 %468, %494
  %496 = or i64 %495, %493
  %497 = bitcast i8* %491 to i64*
  store i64 %496, i64* %497, align 8, !alias.scope !140, !noalias !137
  %498 = add i64 %489, %488
  store i64 %498, i64* %13, align 8, !alias.scope !137, !noalias !140
  br label %499

499:                                              ; preds = %446, %453, %487
  %500 = phi i8 [ %457, %487 ], [ %457, %453 ], [ %448, %446 ]
  %501 = phi i8 [ %461, %487 ], [ %461, %453 ], [ %449, %446 ]
  %502 = add nuw i64 %306, 1
  %503 = icmp eq i64 %502, %11
  br i1 %503, label %504, label %302

504:                                              ; preds = %499, %296
  %505 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %18, i64 0, i32 9
  %506 = load i8*, i8** %505, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %506) #5
  store i8* null, i8** %505, align 8
  %507 = bitcast i16** %278 to i8**
  %508 = load i8*, i8** %507, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %508) #5
  store i16* null, i16** %278, align 8
  %509 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %17, i64 0, i32 9
  %510 = load i8*, i8** %509, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %510) #5
  store i8* null, i8** %509, align 8
  %511 = bitcast i16** %240 to i8**
  %512 = load i8*, i8** %511, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %512) #5
  store i16* null, i16** %240, align 8
  %513 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %16, i64 0, i32 9
  %514 = load i8*, i8** %513, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %514) #5
  store i8* null, i8** %513, align 8
  %515 = bitcast i16** %203 to i8**
  %516 = load i8*, i8** %515, align 8
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %516) #5
  store i16* null, i16** %203, align 8
  %517 = icmp eq i32 %7, 0
  br i1 %517, label %524, label %518

518:                                              ; preds = %504
  %519 = load i64, i64* %13, align 8
  %520 = add i64 %519, 7
  %521 = and i64 %520, 4294967288
  store i64 %521, i64* %13, align 8
  %522 = lshr exact i64 %521, 3
  %523 = getelementptr inbounds i8, i8* %14, i64 %522
  store i8 0, i8* %523, align 1
  br label %524

524:                                              ; preds = %504, %518
  call void @llvm.lifetime.end.p0i8(i64 952, i8* nonnull %29) #5
  call void @llvm.lifetime.end.p0i8(i64 952, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 952, i8* nonnull %26) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @StoreCompressedMetaBlockHeader(i32, i64, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %5 = sext i32 %0 to i64
  %6 = load i64, i64* %2, align 8, !alias.scope !142, !noalias !145
  %7 = lshr i64 %6, 3
  %8 = getelementptr inbounds i8, i8* %3, i64 %7
  %9 = load i8, i8* %8, align 1, !alias.scope !145, !noalias !142
  %10 = zext i8 %9 to i64
  %11 = and i64 %6, 7
  %12 = shl i64 %5, %11
  %13 = or i64 %12, %10
  %14 = bitcast i8* %8 to i64*
  store i64 %13, i64* %14, align 8, !alias.scope !145, !noalias !142
  %15 = add i64 %6, 1
  store i64 %15, i64* %2, align 8, !alias.scope !142, !noalias !145
  %16 = icmp eq i32 %0, 0
  br i1 %16, label %57, label %17

17:                                               ; preds = %4
  %18 = lshr i64 %15, 3
  %19 = getelementptr inbounds i8, i8* %3, i64 %18
  %20 = load i8, i8* %19, align 1, !alias.scope !147, !noalias !150
  %21 = zext i8 %20 to i64
  %22 = bitcast i8* %19 to i64*
  store i64 %21, i64* %22, align 8, !alias.scope !147, !noalias !150
  %23 = add i64 %6, 2
  store i64 %23, i64* %2, align 8, !alias.scope !150, !noalias !147
  %24 = icmp eq i64 %1, 1
  br i1 %24, label %33, label %25

25:                                               ; preds = %17
  %26 = trunc i64 %1 to i32
  %27 = add i32 %26, -1
  %28 = tail call i32 @llvm.ctlz.i32(i32 %27, i1 true) #5, !range !131
  %29 = icmp ult i32 %27, 32768
  %30 = sub nuw nsw i32 35, %28
  %31 = lshr i32 %30, 2
  %32 = zext i32 %31 to i64
  br i1 %29, label %33, label %34

33:                                               ; preds = %25, %17
  br label %34

34:                                               ; preds = %25, %33
  %35 = phi i64 [ 4, %33 ], [ %32, %25 ]
  %36 = add nsw i64 %35, -4
  %37 = shl nuw nsw i64 %35, 2
  %38 = add i64 %1, -1
  %39 = lshr i64 %23, 3
  %40 = getelementptr inbounds i8, i8* %3, i64 %39
  %41 = load i8, i8* %40, align 1, !alias.scope !152, !noalias !155
  %42 = zext i8 %41 to i64
  %43 = and i64 %23, 7
  %44 = shl i64 %36, %43
  %45 = or i64 %44, %42
  %46 = bitcast i8* %40 to i64*
  store i64 %45, i64* %46, align 8, !alias.scope !152, !noalias !155
  %47 = add i64 %6, 4
  store i64 %47, i64* %2, align 8, !alias.scope !155, !noalias !152
  %48 = lshr i64 %47, 3
  %49 = getelementptr inbounds i8, i8* %3, i64 %48
  %50 = load i8, i8* %49, align 1, !alias.scope !157, !noalias !160
  %51 = zext i8 %50 to i64
  %52 = and i64 %47, 7
  %53 = shl i64 %38, %52
  %54 = or i64 %53, %51
  %55 = bitcast i8* %49 to i64*
  store i64 %54, i64* %55, align 8, !alias.scope !157, !noalias !160
  %56 = add i64 %37, %47
  br label %97

57:                                               ; preds = %4
  %58 = icmp eq i64 %1, 1
  br i1 %58, label %67, label %59

59:                                               ; preds = %57
  %60 = trunc i64 %1 to i32
  %61 = add i32 %60, -1
  %62 = tail call i32 @llvm.ctlz.i32(i32 %61, i1 true) #5, !range !131
  %63 = icmp ult i32 %61, 32768
  %64 = sub nuw nsw i32 35, %62
  %65 = lshr i32 %64, 2
  %66 = zext i32 %65 to i64
  br i1 %63, label %67, label %68

67:                                               ; preds = %59, %57
  br label %68

68:                                               ; preds = %59, %67
  %69 = phi i64 [ 4, %67 ], [ %66, %59 ]
  %70 = add nsw i64 %69, -4
  %71 = shl nuw nsw i64 %69, 2
  %72 = add i64 %1, -1
  %73 = lshr i64 %15, 3
  %74 = getelementptr inbounds i8, i8* %3, i64 %73
  %75 = load i8, i8* %74, align 1, !alias.scope !162, !noalias !165
  %76 = zext i8 %75 to i64
  %77 = and i64 %15, 7
  %78 = shl i64 %70, %77
  %79 = or i64 %78, %76
  %80 = bitcast i8* %74 to i64*
  store i64 %79, i64* %80, align 8, !alias.scope !162, !noalias !165
  %81 = add i64 %6, 3
  %82 = lshr i64 %81, 3
  %83 = getelementptr inbounds i8, i8* %3, i64 %82
  %84 = load i8, i8* %83, align 1, !alias.scope !167, !noalias !170
  %85 = zext i8 %84 to i64
  %86 = and i64 %81, 7
  %87 = shl i64 %72, %86
  %88 = or i64 %87, %85
  %89 = bitcast i8* %83 to i64*
  store i64 %88, i64* %89, align 8, !alias.scope !167, !noalias !170
  %90 = add i64 %71, %81
  store i64 %90, i64* %2, align 8, !alias.scope !170, !noalias !167
  %91 = lshr i64 %90, 3
  %92 = getelementptr inbounds i8, i8* %3, i64 %91
  %93 = load i8, i8* %92, align 1, !alias.scope !172, !noalias !175
  %94 = zext i8 %93 to i64
  %95 = bitcast i8* %92 to i64*
  store i64 %94, i64* %95, align 8, !alias.scope !172, !noalias !175
  %96 = add i64 %90, 1
  br label %97

97:                                               ; preds = %34, %68
  %98 = phi i64 [ %96, %68 ], [ %56, %34 ]
  store i64 %98, i64* %2, align 8, !alias.scope !177, !noalias !115
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BuildAndStoreBlockSwitchEntropyCodes(%struct.BlockEncoder*, %struct.HuffmanTree*, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %5 = alloca [258 x i32], align 16
  %6 = alloca [26 x i32], align 16
  %7 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 3
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = bitcast [258 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1032, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 1032, i1 false) #5
  %16 = bitcast [26 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %16) #5
  %17 = getelementptr inbounds [258 x i32], [258 x i32]* %5, i64 0, i64 0
  %18 = add i64 %14, 2
  %19 = shl i64 %18, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 %19, i1 false) #5
  %20 = getelementptr inbounds [26 x i32], [26 x i32]* %6, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 104, i1 false) #5
  %21 = icmp eq i64 %12, 0
  br i1 %21, label %67, label %22

22:                                               ; preds = %4, %60
  %23 = phi i64 [ %65, %60 ], [ 0, %4 ]
  %24 = phi i64 [ %28, %60 ], [ 1, %4 ]
  %25 = phi i64 [ %24, %60 ], [ 0, %4 ]
  %26 = getelementptr inbounds i8, i8* %8, i64 %23
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = add nuw nsw i64 %24, 1
  %30 = icmp eq i64 %29, %28
  br i1 %30, label %35, label %31

31:                                               ; preds = %22
  %32 = icmp eq i64 %25, %28
  %33 = add nuw nsw i64 %28, 2
  %34 = select i1 %32, i64 0, i64 %33
  br label %35

35:                                               ; preds = %31, %22
  %36 = phi i64 [ 1, %22 ], [ %34, %31 ]
  %37 = icmp eq i64 %23, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds [258 x i32], [258 x i32]* %5, i64 0, i64 %36
  %40 = load i32, i32* %39, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %39, align 4
  br label %42

42:                                               ; preds = %38, %35
  %43 = getelementptr inbounds i32, i32* %10, i64 %23
  %44 = load i32, i32* %43, align 4
  %45 = icmp ugt i32 %44, 176
  %46 = icmp ugt i32 %44, 752
  %47 = select i1 %46, i64 20, i64 14
  %48 = icmp ugt i32 %44, 40
  %49 = select i1 %48, i64 7, i64 0
  %50 = select i1 %45, i64 %47, i64 %49
  br label %51

51:                                               ; preds = %54, %42
  %52 = phi i64 [ %55, %54 ], [ %50, %42 ]
  %53 = icmp ult i64 %52, 25
  br i1 %53, label %54, label %60

54:                                               ; preds = %51
  %55 = add nuw nsw i64 %52, 1
  %56 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %55, i32 0
  %57 = load i16, i16* %56, align 4
  %58 = zext i16 %57 to i32
  %59 = icmp ult i32 %44, %58
  br i1 %59, label %60, label %51

60:                                               ; preds = %54, %51
  %61 = and i64 %52, 4294967295
  %62 = getelementptr inbounds [26 x i32], [26 x i32]* %6, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %62, align 4
  %65 = add nuw i64 %23, 1
  %66 = icmp eq i64 %65, %12
  br i1 %66, label %67, label %22

67:                                               ; preds = %60, %4
  %68 = add i64 %14, -1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %78

70:                                               ; preds = %67
  %71 = load i64, i64* %2, align 8, !alias.scope !178, !noalias !181
  %72 = lshr i64 %71, 3
  %73 = getelementptr inbounds i8, i8* %3, i64 %72
  %74 = load i8, i8* %73, align 1, !alias.scope !181, !noalias !178
  %75 = zext i8 %74 to i64
  %76 = bitcast i8* %73 to i64*
  store i64 %75, i64* %76, align 8, !alias.scope !181, !noalias !178
  %77 = add i64 %71, 1
  br label %175

78:                                               ; preds = %67
  %79 = trunc i64 %68 to i32
  %80 = tail call i32 @llvm.ctlz.i32(i32 %79, i1 true) #5, !range !131
  %81 = xor i32 %80, 31
  %82 = zext i32 %81 to i64
  %83 = load i64, i64* %2, align 8, !alias.scope !183, !noalias !186
  %84 = lshr i64 %83, 3
  %85 = getelementptr inbounds i8, i8* %3, i64 %84
  %86 = load i8, i8* %85, align 1, !alias.scope !186, !noalias !183
  %87 = zext i8 %86 to i64
  %88 = and i64 %83, 7
  %89 = shl i64 1, %88
  %90 = or i64 %89, %87
  %91 = bitcast i8* %85 to i64*
  store i64 %90, i64* %91, align 8, !alias.scope !186, !noalias !183
  %92 = add i64 %83, 1
  %93 = lshr i64 %92, 3
  %94 = getelementptr inbounds i8, i8* %3, i64 %93
  %95 = load i8, i8* %94, align 1, !alias.scope !188, !noalias !191
  %96 = zext i8 %95 to i64
  %97 = and i64 %92, 7
  %98 = shl i64 %82, %97
  %99 = or i64 %98, %96
  %100 = bitcast i8* %94 to i64*
  store i64 %99, i64* %100, align 8, !alias.scope !188, !noalias !191
  %101 = add i64 %83, 4
  %102 = shl i64 1, %82
  %103 = sub i64 %68, %102
  %104 = lshr i64 %101, 3
  %105 = getelementptr inbounds i8, i8* %3, i64 %104
  %106 = load i8, i8* %105, align 1, !alias.scope !193, !noalias !196
  %107 = zext i8 %106 to i64
  %108 = and i64 %101, 7
  %109 = shl i64 %103, %108
  %110 = or i64 %109, %107
  %111 = bitcast i8* %105 to i64*
  store i64 %110, i64* %111, align 8, !alias.scope !193, !noalias !196
  %112 = add i64 %101, %82
  store i64 %112, i64* %2, align 8, !alias.scope !198, !noalias !115
  %113 = icmp ugt i64 %14, 1
  br i1 %113, label %114, label %177

114:                                              ; preds = %78
  %115 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 1, i64 0
  %116 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 2, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %17, i64 %18, i64 %18, %struct.HuffmanTree* %1, i8* %115, i16* %116, i64* %2, i8* %3) #5
  %117 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 3, i64 0
  %118 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 4, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %20, i64 26, i64 26, %struct.HuffmanTree* %1, i8* %117, i16* %118, i64* %2, i8* %3) #5
  %119 = load i32, i32* %10, align 4
  %120 = load i8, i8* %8, align 1
  %121 = zext i8 %120 to i64
  %122 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 0
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 1
  store i64 %123, i64* %124, align 8
  store i64 %121, i64* %122, align 8
  %125 = icmp ugt i32 %119, 176
  %126 = icmp ugt i32 %119, 752
  %127 = select i1 %126, i64 20, i64 14
  %128 = icmp ugt i32 %119, 40
  %129 = select i1 %128, i64 7, i64 0
  %130 = select i1 %125, i64 %127, i64 %129
  br label %131

131:                                              ; preds = %134, %114
  %132 = phi i64 [ %135, %134 ], [ %130, %114 ]
  %133 = icmp ult i64 %132, 25
  br i1 %133, label %134, label %140

134:                                              ; preds = %131
  %135 = add nuw nsw i64 %132, 1
  %136 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %135, i32 0
  %137 = load i16, i16* %136, align 4
  %138 = zext i16 %137 to i32
  %139 = icmp ult i32 %119, %138
  br i1 %139, label %140, label %131

140:                                              ; preds = %134, %131
  %141 = and i64 %132, 4294967295
  %142 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %141, i32 1
  %143 = load i8, i8* %142, align 2
  %144 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %141, i32 0
  %145 = load i16, i16* %144, align 4
  %146 = zext i16 %145 to i32
  %147 = sub i32 %119, %146
  %148 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 3, i64 %141
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i64
  %151 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 4, i64 %141
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i64
  %154 = load i64, i64* %2, align 8, !alias.scope !199, !noalias !202
  %155 = lshr i64 %154, 3
  %156 = getelementptr inbounds i8, i8* %3, i64 %155
  %157 = load i8, i8* %156, align 1, !alias.scope !202, !noalias !199
  %158 = zext i8 %157 to i64
  %159 = and i64 %154, 7
  %160 = shl i64 %153, %159
  %161 = or i64 %160, %158
  %162 = bitcast i8* %156 to i64*
  store i64 %161, i64* %162, align 8, !alias.scope !202, !noalias !199
  %163 = add i64 %154, %150
  %164 = zext i8 %143 to i64
  %165 = zext i32 %147 to i64
  %166 = lshr i64 %163, 3
  %167 = getelementptr inbounds i8, i8* %3, i64 %166
  %168 = load i8, i8* %167, align 1, !alias.scope !204, !noalias !207
  %169 = zext i8 %168 to i64
  %170 = and i64 %163, 7
  %171 = shl i64 %165, %170
  %172 = or i64 %171, %169
  %173 = bitcast i8* %167 to i64*
  store i64 %172, i64* %173, align 8, !alias.scope !204, !noalias !207
  %174 = add i64 %163, %164
  br label %175

175:                                              ; preds = %140, %70
  %176 = phi i64 [ %77, %70 ], [ %174, %140 ]
  store i64 %176, i64* %2, align 8, !alias.scope !209, !noalias !115
  br label %177

177:                                              ; preds = %175, %78
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 1032, i8* nonnull %15) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @StoreTrivialContextMap(i64, i64, %struct.HuffmanTree*, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %6 = alloca [272 x i32], align 16
  %7 = alloca [272 x i8], align 16
  %8 = alloca [272 x i16], align 16
  %9 = add i64 %0, -1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %5
  %12 = load i64, i64* %3, align 8, !alias.scope !210, !noalias !213
  %13 = lshr i64 %12, 3
  %14 = getelementptr inbounds i8, i8* %4, i64 %13
  %15 = load i8, i8* %14, align 1, !alias.scope !213, !noalias !210
  %16 = zext i8 %15 to i64
  %17 = bitcast i8* %14 to i64*
  store i64 %16, i64* %17, align 8, !alias.scope !213, !noalias !210
  %18 = add i64 %12, 1
  store i64 %18, i64* %3, align 8, !alias.scope !215, !noalias !115
  br label %221

19:                                               ; preds = %5
  %20 = trunc i64 %9 to i32
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true) #5, !range !131
  %22 = xor i32 %21, 31
  %23 = zext i32 %22 to i64
  %24 = load i64, i64* %3, align 8, !alias.scope !218, !noalias !221
  %25 = lshr i64 %24, 3
  %26 = getelementptr inbounds i8, i8* %4, i64 %25
  %27 = load i8, i8* %26, align 1, !alias.scope !221, !noalias !218
  %28 = zext i8 %27 to i64
  %29 = and i64 %24, 7
  %30 = shl i64 1, %29
  %31 = or i64 %30, %28
  %32 = bitcast i8* %26 to i64*
  store i64 %31, i64* %32, align 8, !alias.scope !221, !noalias !218
  %33 = add i64 %24, 1
  %34 = lshr i64 %33, 3
  %35 = getelementptr inbounds i8, i8* %4, i64 %34
  %36 = load i8, i8* %35, align 1, !alias.scope !223, !noalias !226
  %37 = zext i8 %36 to i64
  %38 = and i64 %33, 7
  %39 = shl i64 %23, %38
  %40 = or i64 %39, %37
  %41 = bitcast i8* %35 to i64*
  store i64 %40, i64* %41, align 8, !alias.scope !223, !noalias !226
  %42 = add i64 %24, 4
  %43 = shl i64 1, %23
  %44 = sub i64 %9, %43
  %45 = lshr i64 %42, 3
  %46 = getelementptr inbounds i8, i8* %4, i64 %45
  %47 = load i8, i8* %46, align 1, !alias.scope !228, !noalias !230
  %48 = zext i8 %47 to i64
  %49 = and i64 %42, 7
  %50 = shl i64 %44, %49
  %51 = or i64 %50, %48
  %52 = bitcast i8* %46 to i64*
  store i64 %51, i64* %52, align 8, !alias.scope !228, !noalias !230
  %53 = add i64 %42, %23
  store i64 %53, i64* %3, align 8, !alias.scope !215, !noalias !115
  %54 = icmp ugt i64 %0, 1
  br i1 %54, label %55, label %221

55:                                               ; preds = %19
  %56 = add i64 %1, -1
  %57 = trunc i64 %56 to i32
  %58 = shl nsw i32 -1, %57
  %59 = xor i32 %58, -1
  %60 = zext i32 %59 to i64
  %61 = add i64 %56, %0
  %62 = bitcast [272 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %62) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 -86, i64 1088, i1 false)
  %63 = getelementptr inbounds [272 x i8], [272 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %63) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -86, i64 272, i1 false)
  %64 = bitcast [272 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %64) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %64, i8 -86, i64 544, i1 false)
  %65 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 0
  %66 = shl i64 %61, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 0, i64 %66, i1 false)
  %67 = lshr i64 %53, 3
  %68 = getelementptr inbounds i8, i8* %4, i64 %67
  %69 = load i8, i8* %68, align 1, !alias.scope !231, !noalias !234
  %70 = zext i8 %69 to i64
  %71 = and i64 %53, 7
  %72 = shl i64 1, %71
  %73 = or i64 %72, %70
  %74 = bitcast i8* %68 to i64*
  store i64 %73, i64* %74, align 8, !alias.scope !231, !noalias !234
  %75 = add i64 %53, 1
  %76 = add i64 %1, -2
  %77 = lshr i64 %75, 3
  %78 = getelementptr inbounds i8, i8* %4, i64 %77
  %79 = load i8, i8* %78, align 1, !alias.scope !236, !noalias !239
  %80 = zext i8 %79 to i64
  %81 = and i64 %75, 7
  %82 = shl i64 %76, %81
  %83 = or i64 %82, %80
  %84 = bitcast i8* %78 to i64*
  store i64 %83, i64* %84, align 8, !alias.scope !236, !noalias !239
  %85 = add i64 %53, 5
  store i64 %85, i64* %3, align 8, !alias.scope !239, !noalias !236
  %86 = trunc i64 %0 to i32
  %87 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %56
  store i32 %86, i32* %87, align 4
  store i32 1, i32* %65, align 16
  %88 = icmp ugt i64 %61, %1
  br i1 %88, label %89, label %149

89:                                               ; preds = %55
  %90 = add i64 %0, -1
  %91 = icmp ult i64 %90, 8
  br i1 %91, label %92, label %94

92:                                               ; preds = %147, %89
  %93 = phi i64 [ %1, %89 ], [ %96, %147 ]
  br label %151

94:                                               ; preds = %89
  %95 = and i64 %90, -8
  %96 = add i64 %95, %1
  %97 = add i64 %95, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 3
  %101 = icmp ult i64 %97, 24
  br i1 %101, label %133, label %102

102:                                              ; preds = %94
  %103 = sub nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %130, %104 ]
  %106 = phi i64 [ %103, %102 ], [ %131, %104 ]
  %107 = add i64 %105, %1
  %108 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %107
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %109, align 4
  %110 = getelementptr inbounds i32, i32* %108, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %111, align 4
  %112 = or i64 %105, 8
  %113 = add i64 %112, %1
  %114 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %113
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %115, align 4
  %116 = getelementptr inbounds i32, i32* %114, i64 4
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %117, align 4
  %118 = or i64 %105, 16
  %119 = add i64 %118, %1
  %120 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %119
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %121, align 4
  %122 = getelementptr inbounds i32, i32* %120, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %123, align 4
  %124 = or i64 %105, 24
  %125 = add i64 %124, %1
  %126 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %127, align 4
  %128 = getelementptr inbounds i32, i32* %126, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %129, align 4
  %130 = add i64 %105, 32
  %131 = add i64 %106, -4
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %104, !llvm.loop !241

133:                                              ; preds = %104, %94
  %134 = phi i64 [ 0, %94 ], [ %130, %104 ]
  %135 = icmp eq i64 %100, 0
  br i1 %135, label %147, label %136

136:                                              ; preds = %133, %136
  %137 = phi i64 [ %144, %136 ], [ %134, %133 ]
  %138 = phi i64 [ %145, %136 ], [ %100, %133 ]
  %139 = add i64 %137, %1
  %140 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %139
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %141, align 4
  %142 = getelementptr inbounds i32, i32* %140, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %143, align 4
  %144 = add i64 %137, 8
  %145 = add i64 %138, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %136, !llvm.loop !243

147:                                              ; preds = %136, %133
  %148 = icmp eq i64 %90, %95
  br i1 %148, label %156, label %92

149:                                              ; preds = %55
  %150 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %65, i64 %61, i64 %61, %struct.HuffmanTree* %2, i8* nonnull %63, i16* nonnull %150, i64* %3, i8* %4)
  br label %161

151:                                              ; preds = %92, %151
  %152 = phi i64 [ %154, %151 ], [ %93, %92 ]
  %153 = getelementptr inbounds [272 x i32], [272 x i32]* %6, i64 0, i64 %152
  store i32 1, i32* %153, align 4
  %154 = add nuw i64 %152, 1
  %155 = icmp eq i64 %154, %61
  br i1 %155, label %156, label %151, !llvm.loop !244

156:                                              ; preds = %151, %147
  %157 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %65, i64 %61, i64 %61, %struct.HuffmanTree* %2, i8* nonnull %63, i16* nonnull %157, i64* %3, i8* %4)
  %158 = icmp eq i64 %0, 0
  br i1 %158, label %159, label %161

159:                                              ; preds = %156
  %160 = load i64, i64* %3, align 8, !alias.scope !246, !noalias !249
  br label %210

161:                                              ; preds = %149, %156
  %162 = getelementptr inbounds [272 x i8], [272 x i8]* %7, i64 0, i64 %56
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i64
  %165 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 %56
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i64
  %168 = load i64, i64* %3, align 8, !alias.scope !251, !noalias !254
  br label %169

169:                                              ; preds = %169, %161
  %170 = phi i64 [ %168, %161 ], [ %207, %169 ]
  %171 = phi i64 [ 0, %161 ], [ %208, %169 ]
  %172 = icmp eq i64 %171, 0
  %173 = add i64 %56, %171
  %174 = select i1 %172, i64 0, i64 %173
  %175 = getelementptr inbounds [272 x i8], [272 x i8]* %7, i64 0, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i64
  %178 = getelementptr inbounds [272 x i16], [272 x i16]* %8, i64 0, i64 %174
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i64
  %181 = lshr i64 %170, 3
  %182 = getelementptr inbounds i8, i8* %4, i64 %181
  %183 = load i8, i8* %182, align 1, !alias.scope !254, !noalias !251
  %184 = zext i8 %183 to i64
  %185 = and i64 %170, 7
  %186 = shl i64 %180, %185
  %187 = or i64 %186, %184
  %188 = bitcast i8* %182 to i64*
  store i64 %187, i64* %188, align 8, !alias.scope !254, !noalias !251
  %189 = add i64 %170, %177
  %190 = lshr i64 %189, 3
  %191 = getelementptr inbounds i8, i8* %4, i64 %190
  %192 = load i8, i8* %191, align 1, !alias.scope !256, !noalias !259
  %193 = zext i8 %192 to i64
  %194 = and i64 %189, 7
  %195 = shl i64 %167, %194
  %196 = or i64 %195, %193
  %197 = bitcast i8* %191 to i64*
  store i64 %196, i64* %197, align 8, !alias.scope !256, !noalias !259
  %198 = add i64 %189, %164
  %199 = lshr i64 %198, 3
  %200 = getelementptr inbounds i8, i8* %4, i64 %199
  %201 = load i8, i8* %200, align 1, !alias.scope !261, !noalias !264
  %202 = zext i8 %201 to i64
  %203 = and i64 %198, 7
  %204 = shl i64 %60, %203
  %205 = or i64 %204, %202
  %206 = bitcast i8* %200 to i64*
  store i64 %205, i64* %206, align 8, !alias.scope !261, !noalias !264
  %207 = add i64 %198, %56
  store i64 %207, i64* %3, align 8, !alias.scope !264, !noalias !261
  %208 = add nuw i64 %171, 1
  %209 = icmp eq i64 %208, %0
  br i1 %209, label %210, label %169

210:                                              ; preds = %169, %159
  %211 = phi i64 [ %160, %159 ], [ %207, %169 ]
  %212 = lshr i64 %211, 3
  %213 = getelementptr inbounds i8, i8* %4, i64 %212
  %214 = load i8, i8* %213, align 1, !alias.scope !249, !noalias !246
  %215 = zext i8 %214 to i64
  %216 = and i64 %211, 7
  %217 = shl i64 1, %216
  %218 = or i64 %217, %215
  %219 = bitcast i8* %213 to i64*
  store i64 %218, i64* %219, align 8, !alias.scope !249, !noalias !246
  %220 = add i64 %211, 1
  store i64 %220, i64* %3, align 8, !alias.scope !246, !noalias !249
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %64) #5
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %63) #5
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %62) #5
  br label %221

221:                                              ; preds = %11, %210, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @EncodeContextMap(%struct.MemoryManager*, i32* nocapture readonly, i64, i64, %struct.HuffmanTree*, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %8 = alloca [256 x i8], align 16
  %9 = alloca [272 x i32], align 16
  %10 = alloca [272 x i8], align 16
  %11 = alloca [272 x i16], align 16
  %12 = bitcast [272 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1088, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1088, i1 false)
  %13 = getelementptr inbounds [272 x i8], [272 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 272, i1 false)
  %14 = bitcast [272 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 544, i1 false)
  %15 = add i64 %3, -1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %7
  %18 = load i64, i64* %5, align 8, !alias.scope !266, !noalias !269
  %19 = lshr i64 %18, 3
  %20 = getelementptr inbounds i8, i8* %6, i64 %19
  %21 = load i8, i8* %20, align 1, !alias.scope !269, !noalias !266
  %22 = zext i8 %21 to i64
  %23 = bitcast i8* %20 to i64*
  store i64 %22, i64* %23, align 8, !alias.scope !269, !noalias !266
  %24 = add i64 %18, 1
  store i64 %24, i64* %5, align 8, !alias.scope !271, !noalias !115
  br label %540

25:                                               ; preds = %7
  %26 = trunc i64 %15 to i32
  %27 = tail call i32 @llvm.ctlz.i32(i32 %26, i1 true) #5, !range !131
  %28 = xor i32 %27, 31
  %29 = zext i32 %28 to i64
  %30 = load i64, i64* %5, align 8, !alias.scope !274, !noalias !277
  %31 = lshr i64 %30, 3
  %32 = getelementptr inbounds i8, i8* %6, i64 %31
  %33 = load i8, i8* %32, align 1, !alias.scope !277, !noalias !274
  %34 = zext i8 %33 to i64
  %35 = and i64 %30, 7
  %36 = shl i64 1, %35
  %37 = or i64 %36, %34
  %38 = bitcast i8* %32 to i64*
  store i64 %37, i64* %38, align 8, !alias.scope !277, !noalias !274
  %39 = add i64 %30, 1
  %40 = lshr i64 %39, 3
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  %42 = load i8, i8* %41, align 1, !alias.scope !279, !noalias !282
  %43 = zext i8 %42 to i64
  %44 = and i64 %39, 7
  %45 = shl i64 %29, %44
  %46 = or i64 %45, %43
  %47 = bitcast i8* %41 to i64*
  store i64 %46, i64* %47, align 8, !alias.scope !279, !noalias !282
  %48 = add i64 %30, 4
  %49 = shl i64 1, %29
  %50 = sub i64 %15, %49
  %51 = lshr i64 %48, 3
  %52 = getelementptr inbounds i8, i8* %6, i64 %51
  %53 = load i8, i8* %52, align 1, !alias.scope !284, !noalias !286
  %54 = zext i8 %53 to i64
  %55 = and i64 %48, 7
  %56 = shl i64 %50, %55
  %57 = or i64 %56, %54
  %58 = bitcast i8* %52 to i64*
  store i64 %57, i64* %58, align 8, !alias.scope !284, !noalias !286
  %59 = add i64 %48, %29
  store i64 %59, i64* %5, align 8, !alias.scope !271, !noalias !115
  %60 = icmp eq i64 %2, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %25
  %62 = getelementptr inbounds [272 x i32], [272 x i32]* %9, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 1088, i1 false)
  br label %452

63:                                               ; preds = %25
  %64 = shl i64 %2, 2
  %65 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 %64) #5
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %67) #5, !noalias !287
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -86, i64 256, i1 false) #5, !noalias !287
  %68 = load i32, i32* %1, align 4, !alias.scope !287
  %69 = icmp eq i64 %2, 1
  br i1 %69, label %150, label %70

70:                                               ; preds = %63
  %71 = add i64 %2, -1
  %72 = icmp ult i64 %71, 8
  br i1 %72, label %73, label %76

73:                                               ; preds = %137, %70
  %74 = phi i64 [ 1, %70 ], [ %78, %137 ]
  %75 = phi i32 [ %68, %70 ], [ %148, %137 ]
  br label %219

76:                                               ; preds = %70
  %77 = and i64 %71, -8
  %78 = or i64 %77, 1
  %79 = insertelement <4 x i32> undef, i32 %68, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = add i64 %77, -8
  %82 = lshr exact i64 %81, 3
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 1
  %85 = icmp eq i64 %81, 0
  br i1 %85, label %118, label %86

86:                                               ; preds = %76
  %87 = sub nuw nsw i64 %83, %84
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %115, %88 ]
  %90 = phi <4 x i32> [ %80, %86 ], [ %113, %88 ]
  %91 = phi <4 x i32> [ %80, %86 ], [ %114, %88 ]
  %92 = phi i64 [ %87, %86 ], [ %116, %88 ]
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds i32, i32* %1, i64 %93
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !287
  %97 = getelementptr inbounds i32, i32* %94, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !287
  %100 = icmp ugt <4 x i32> %96, %90
  %101 = icmp ugt <4 x i32> %99, %91
  %102 = select <4 x i1> %100, <4 x i32> %96, <4 x i32> %90
  %103 = select <4 x i1> %101, <4 x i32> %99, <4 x i32> %91
  %104 = or i64 %89, 9
  %105 = getelementptr inbounds i32, i32* %1, i64 %104
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !287
  %108 = getelementptr inbounds i32, i32* %105, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !287
  %111 = icmp ugt <4 x i32> %107, %102
  %112 = icmp ugt <4 x i32> %110, %103
  %113 = select <4 x i1> %111, <4 x i32> %107, <4 x i32> %102
  %114 = select <4 x i1> %112, <4 x i32> %110, <4 x i32> %103
  %115 = add i64 %89, 16
  %116 = add i64 %92, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %88, !llvm.loop !290

118:                                              ; preds = %88, %76
  %119 = phi <4 x i32> [ undef, %76 ], [ %113, %88 ]
  %120 = phi <4 x i32> [ undef, %76 ], [ %114, %88 ]
  %121 = phi i64 [ 0, %76 ], [ %115, %88 ]
  %122 = phi <4 x i32> [ %80, %76 ], [ %113, %88 ]
  %123 = phi <4 x i32> [ %80, %76 ], [ %114, %88 ]
  %124 = icmp eq i64 %84, 0
  br i1 %124, label %137, label %125

125:                                              ; preds = %118
  %126 = or i64 %121, 1
  %127 = getelementptr inbounds i32, i32* %1, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4, !alias.scope !287
  %130 = getelementptr inbounds i32, i32* %127, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !287
  %133 = icmp ugt <4 x i32> %132, %123
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> %123
  %135 = icmp ugt <4 x i32> %129, %122
  %136 = select <4 x i1> %135, <4 x i32> %129, <4 x i32> %122
  br label %137

137:                                              ; preds = %118, %125
  %138 = phi <4 x i32> [ %119, %118 ], [ %136, %125 ]
  %139 = phi <4 x i32> [ %120, %118 ], [ %134, %125 ]
  %140 = icmp ugt <4 x i32> %138, %139
  %141 = select <4 x i1> %140, <4 x i32> %138, <4 x i32> %139
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %143 = icmp ugt <4 x i32> %141, %142
  %144 = select <4 x i1> %143, <4 x i32> %141, <4 x i32> %142
  %145 = shufflevector <4 x i32> %144, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %146 = icmp ugt <4 x i32> %144, %145
  %147 = select <4 x i1> %146, <4 x i32> %144, <4 x i32> %145
  %148 = extractelement <4 x i32> %147, i32 0
  %149 = icmp eq i64 %71, %77
  br i1 %149, label %150, label %73

150:                                              ; preds = %219, %137, %63
  %151 = phi i32 [ %68, %63 ], [ %148, %137 ], [ %225, %219 ]
  %152 = zext i32 %151 to i64
  %153 = add nuw nsw i64 %152, 1
  %154 = icmp ult i64 %153, 32
  br i1 %154, label %155, label %157

155:                                              ; preds = %217, %150
  %156 = phi i64 [ 0, %150 ], [ %158, %217 ]
  br label %228

157:                                              ; preds = %150
  %158 = and i64 %153, 8589934560
  %159 = add nsw i64 %158, -32
  %160 = lshr exact i64 %159, 5
  %161 = add nuw nsw i64 %160, 1
  %162 = and i64 %161, 3
  %163 = icmp ult i64 %159, 96
  br i1 %163, label %200, label %164

164:                                              ; preds = %157
  %165 = sub nsw i64 %161, %162
  br label %166

166:                                              ; preds = %166, %164
  %167 = phi i64 [ 0, %164 ], [ %196, %166 ]
  %168 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %164 ], [ %197, %166 ]
  %169 = phi i64 [ %165, %164 ], [ %198, %166 ]
  %170 = add <16 x i8> %168, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %171 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %167
  %172 = bitcast i8* %171 to <16 x i8>*
  store <16 x i8> %168, <16 x i8>* %172, align 16, !noalias !287
  %173 = getelementptr inbounds i8, i8* %171, i64 16
  %174 = bitcast i8* %173 to <16 x i8>*
  store <16 x i8> %170, <16 x i8>* %174, align 16, !noalias !287
  %175 = or i64 %167, 32
  %176 = add <16 x i8> %168, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %177 = add <16 x i8> %168, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %178 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %175
  %179 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> %176, <16 x i8>* %179, align 16, !noalias !287
  %180 = getelementptr inbounds i8, i8* %178, i64 16
  %181 = bitcast i8* %180 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %181, align 16, !noalias !287
  %182 = or i64 %167, 64
  %183 = add <16 x i8> %168, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %184 = add <16 x i8> %168, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %185 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %182
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %186, align 16, !noalias !287
  %187 = getelementptr inbounds i8, i8* %185, i64 16
  %188 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %188, align 16, !noalias !287
  %189 = or i64 %167, 96
  %190 = add <16 x i8> %168, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %191 = add <16 x i8> %168, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %189
  %193 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %193, align 16, !noalias !287
  %194 = getelementptr inbounds i8, i8* %192, i64 16
  %195 = bitcast i8* %194 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %195, align 16, !noalias !287
  %196 = add i64 %167, 128
  %197 = xor <16 x i8> %168, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %198 = add i64 %169, -4
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %166, !llvm.loop !291

200:                                              ; preds = %166, %157
  %201 = phi i64 [ 0, %157 ], [ %196, %166 ]
  %202 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %157 ], [ %197, %166 ]
  %203 = icmp eq i64 %162, 0
  br i1 %203, label %217, label %204

204:                                              ; preds = %200, %204
  %205 = phi i64 [ %213, %204 ], [ %201, %200 ]
  %206 = phi <16 x i8> [ %214, %204 ], [ %202, %200 ]
  %207 = phi i64 [ %215, %204 ], [ %162, %200 ]
  %208 = add <16 x i8> %206, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %209 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %205
  %210 = bitcast i8* %209 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %210, align 16, !noalias !287
  %211 = getelementptr inbounds i8, i8* %209, i64 16
  %212 = bitcast i8* %211 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %212, align 16, !noalias !287
  %213 = add i64 %205, 32
  %214 = add <16 x i8> %206, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %215 = add i64 %207, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %204, !llvm.loop !292

217:                                              ; preds = %204, %200
  %218 = icmp eq i64 %153, %158
  br i1 %218, label %234, label %155

219:                                              ; preds = %73, %219
  %220 = phi i64 [ %226, %219 ], [ %74, %73 ]
  %221 = phi i32 [ %225, %219 ], [ %75, %73 ]
  %222 = getelementptr inbounds i32, i32* %1, i64 %220
  %223 = load i32, i32* %222, align 4, !alias.scope !287
  %224 = icmp ugt i32 %223, %221
  %225 = select i1 %224, i32 %223, i32 %221
  %226 = add nuw i64 %220, 1
  %227 = icmp eq i64 %226, %2
  br i1 %227, label %150, label %219, !llvm.loop !293

228:                                              ; preds = %155, %228
  %229 = phi i64 [ %232, %228 ], [ %156, %155 ]
  %230 = trunc i64 %229 to i8
  %231 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %229
  store i8 %230, i8* %231, align 1, !noalias !287
  %232 = add nuw nsw i64 %229, 1
  %233 = icmp eq i64 %229, %152
  br i1 %233, label %234, label %228, !llvm.loop !294

234:                                              ; preds = %228, %217
  %235 = add i32 %151, 1
  %236 = zext i32 %235 to i64
  %237 = icmp eq i32 %235, 0
  %238 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %236
  br label %239

239:                                              ; preds = %301, %234
  %240 = phi i32 [ %68, %234 ], [ %303, %301 ]
  %241 = phi i64 [ 0, %234 ], [ %299, %301 ]
  %242 = trunc i32 %240 to i8
  br i1 %237, label %243, label %246

243:                                              ; preds = %239
  %244 = getelementptr inbounds i32, i32* %66, i64 %241
  store i32 0, i32* %244, align 4, !noalias !287
  %245 = load i8, i8* %67, align 16, !noalias !287
  br label %297

246:                                              ; preds = %239, %251
  %247 = phi i64 [ %252, %251 ], [ 0, %239 ]
  %248 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %247
  %249 = load i8, i8* %248, align 1, !noalias !287
  %250 = icmp eq i8 %249, %242
  br i1 %250, label %256, label %251

251:                                              ; preds = %246
  %252 = add nuw nsw i64 %247, 1
  %253 = icmp eq i64 %252, %236
  br i1 %253, label %254, label %246

254:                                              ; preds = %251
  %255 = load i8, i8* %238, align 1, !noalias !287
  br label %256

256:                                              ; preds = %246, %254
  %257 = phi i8 [ %255, %254 ], [ %242, %246 ]
  %258 = phi i64 [ %236, %254 ], [ %247, %246 ]
  %259 = trunc i64 %258 to i32
  %260 = getelementptr inbounds i32, i32* %66, i64 %241
  store i32 %259, i32* %260, align 4, !noalias !287
  %261 = icmp eq i64 %258, 0
  br i1 %261, label %297, label %262

262:                                              ; preds = %256
  %263 = add nsw i64 %258, -1
  %264 = and i64 %258, 3
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %275, label %266

266:                                              ; preds = %262, %266
  %267 = phi i64 [ %269, %266 ], [ %258, %262 ]
  %268 = phi i64 [ %273, %266 ], [ %264, %262 ]
  %269 = add nsw i64 %267, -1
  %270 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %269
  %271 = load i8, i8* %270, align 1, !noalias !287
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %267
  store i8 %271, i8* %272, align 1, !noalias !287
  %273 = add i64 %268, -1
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %266, !llvm.loop !295

275:                                              ; preds = %266, %262
  %276 = phi i64 [ %258, %262 ], [ %269, %266 ]
  %277 = icmp ult i64 %263, 3
  br i1 %277, label %297, label %278

278:                                              ; preds = %275, %278
  %279 = phi i64 [ %292, %278 ], [ %276, %275 ]
  %280 = add nsw i64 %279, -1
  %281 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %280
  %282 = load i8, i8* %281, align 1, !noalias !287
  %283 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %279
  store i8 %282, i8* %283, align 1, !noalias !287
  %284 = add nsw i64 %279, -2
  %285 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %284
  %286 = load i8, i8* %285, align 1, !noalias !287
  %287 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %280
  store i8 %286, i8* %287, align 1, !noalias !287
  %288 = add nsw i64 %279, -3
  %289 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %288
  %290 = load i8, i8* %289, align 1, !noalias !287
  %291 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %284
  store i8 %290, i8* %291, align 1, !noalias !287
  %292 = add nsw i64 %279, -4
  %293 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %292
  %294 = load i8, i8* %293, align 1, !noalias !287
  %295 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 %288
  store i8 %294, i8* %295, align 1, !noalias !287
  %296 = icmp eq i64 %292, 0
  br i1 %296, label %297, label %278

297:                                              ; preds = %275, %278, %256, %243
  %298 = phi i8 [ %245, %243 ], [ %257, %256 ], [ %257, %278 ], [ %257, %275 ]
  store i8 %298, i8* %67, align 16, !noalias !287
  %299 = add nuw i64 %241, 1
  %300 = icmp eq i64 %299, %2
  br i1 %300, label %304, label %301

301:                                              ; preds = %297
  %302 = getelementptr inbounds i32, i32* %1, i64 %299
  %303 = load i32, i32* %302, align 4, !alias.scope !287
  br label %239

304:                                              ; preds = %297
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %67) #5, !noalias !287
  br label %305

305:                                              ; preds = %304, %334
  %306 = phi i32 [ %338, %334 ], [ 0, %304 ]
  %307 = phi i64 [ %336, %334 ], [ 0, %304 ]
  %308 = icmp ult i64 %307, %2
  br i1 %308, label %309, label %317

309:                                              ; preds = %305, %314
  %310 = phi i64 [ %315, %314 ], [ %307, %305 ]
  %311 = getelementptr inbounds i32, i32* %66, i64 %310
  %312 = load i32, i32* %311, align 4, !alias.scope !296, !noalias !299
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %317, label %314

314:                                              ; preds = %309
  %315 = add nuw i64 %310, 1
  %316 = icmp eq i64 %315, %2
  br i1 %316, label %330, label %309

317:                                              ; preds = %309, %305
  %318 = phi i64 [ %307, %305 ], [ %310, %309 ]
  %319 = icmp ult i64 %318, %2
  br i1 %319, label %320, label %334

320:                                              ; preds = %317, %326
  %321 = phi i64 [ %328, %326 ], [ %318, %317 ]
  %322 = phi i32 [ %327, %326 ], [ 0, %317 ]
  %323 = getelementptr inbounds i32, i32* %66, i64 %321
  %324 = load i32, i32* %323, align 4, !alias.scope !296, !noalias !299
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %326, label %334

326:                                              ; preds = %320
  %327 = add i32 %322, 1
  %328 = add i64 %321, 1
  %329 = icmp eq i64 %328, %2
  br i1 %329, label %330, label %320

330:                                              ; preds = %314, %326
  %331 = phi i32 [ %327, %326 ], [ 0, %314 ]
  %332 = icmp ugt i32 %331, %306
  %333 = select i1 %332, i32 %331, i32 %306
  br label %340

334:                                              ; preds = %320, %317
  %335 = phi i32 [ 0, %317 ], [ %322, %320 ]
  %336 = phi i64 [ %318, %317 ], [ %321, %320 ]
  %337 = icmp ugt i32 %335, %306
  %338 = select i1 %337, i32 %335, i32 %306
  %339 = icmp ult i64 %336, %2
  br i1 %339, label %305, label %340

340:                                              ; preds = %334, %330
  %341 = phi i32 [ %333, %330 ], [ %338, %334 ]
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %347, label %343

343:                                              ; preds = %340
  %344 = tail call i32 @llvm.ctlz.i32(i32 %341, i1 true) #5, !range !131
  %345 = xor i32 %344, 31
  %346 = icmp ult i32 %345, 6
  br i1 %346, label %347, label %349

347:                                              ; preds = %340, %343
  %348 = phi i32 [ %345, %343 ], [ 0, %340 ]
  br label %349

349:                                              ; preds = %347, %343
  %350 = phi i32 [ %348, %347 ], [ 6, %343 ]
  %351 = shl i32 2, %350
  %352 = shl i32 -512, %350
  %353 = xor i32 %352, -512
  %354 = add i32 %353, %350
  %355 = sub nsw i32 1, %351
  br label %356

356:                                              ; preds = %407, %349
  %357 = phi i64 [ 0, %349 ], [ %408, %407 ]
  %358 = phi i64 [ 0, %349 ], [ %409, %407 ]
  %359 = phi i64 [ 0, %349 ], [ %410, %407 ]
  %360 = getelementptr inbounds i32, i32* %66, i64 %359
  %361 = load i32, i32* %360, align 4, !alias.scope !296, !noalias !299
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %366

363:                                              ; preds = %356
  %364 = add nuw i64 %359, 1
  %365 = icmp ult i64 %364, %2
  br i1 %365, label %371, label %386

366:                                              ; preds = %356
  %367 = add i32 %361, %350
  %368 = getelementptr inbounds i32, i32* %66, i64 %358
  store i32 %367, i32* %368, align 4, !alias.scope !296, !noalias !299
  %369 = add nuw i64 %359, 1
  %370 = add i64 %358, 1
  br label %407

371:                                              ; preds = %363, %377
  %372 = phi i64 [ %379, %377 ], [ %364, %363 ]
  %373 = phi i32 [ %378, %377 ], [ 1, %363 ]
  %374 = getelementptr inbounds i32, i32* %66, i64 %372
  %375 = load i32, i32* %374, align 4, !alias.scope !296, !noalias !299
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %377, label %381

377:                                              ; preds = %371
  %378 = add i32 %373, 1
  %379 = add i64 %372, 1
  %380 = icmp eq i64 %379, %2
  br i1 %380, label %381, label %371

381:                                              ; preds = %377, %371
  %382 = phi i32 [ %373, %371 ], [ %378, %377 ]
  %383 = zext i32 %382 to i64
  %384 = add i64 %359, %383
  %385 = icmp eq i32 %382, 0
  br i1 %385, label %407, label %386

386:                                              ; preds = %363, %381
  %387 = phi i64 [ %384, %381 ], [ %364, %363 ]
  %388 = phi i32 [ %382, %381 ], [ 1, %363 ]
  br label %389

389:                                              ; preds = %402, %386
  %390 = phi i64 [ %405, %402 ], [ %358, %386 ]
  %391 = phi i32 [ %404, %402 ], [ %388, %386 ]
  %392 = icmp ult i32 %391, %351
  br i1 %392, label %393, label %402

393:                                              ; preds = %389
  %394 = tail call i32 @llvm.ctlz.i32(i32 %391, i1 true) #5, !range !131
  %395 = xor i32 %394, 31
  %396 = shl i32 1, %395
  %397 = sub i32 %391, %396
  %398 = shl i32 %397, 9
  %399 = or i32 %398, %395
  %400 = getelementptr inbounds i32, i32* %66, i64 %390
  store i32 %399, i32* %400, align 4, !alias.scope !296, !noalias !299
  %401 = add i64 %390, 1
  br label %407

402:                                              ; preds = %389
  %403 = getelementptr inbounds i32, i32* %66, i64 %390
  store i32 %354, i32* %403, align 4, !alias.scope !296, !noalias !299
  %404 = add i32 %391, %355
  %405 = add i64 %390, 1
  %406 = icmp eq i32 %404, 0
  br i1 %406, label %407, label %389

407:                                              ; preds = %402, %393, %381, %366
  %408 = phi i64 [ %357, %381 ], [ %401, %393 ], [ %370, %366 ], [ %405, %402 ]
  %409 = phi i64 [ %358, %381 ], [ %401, %393 ], [ %370, %366 ], [ %405, %402 ]
  %410 = phi i64 [ %384, %381 ], [ %387, %393 ], [ %369, %366 ], [ %387, %402 ]
  %411 = icmp ult i64 %410, %2
  br i1 %411, label %356, label %412

412:                                              ; preds = %407
  %413 = getelementptr inbounds [272 x i32], [272 x i32]* %9, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 1088, i1 false)
  %414 = icmp eq i64 %408, 0
  br i1 %414, label %452, label %415

415:                                              ; preds = %412
  %416 = and i64 %408, 1
  %417 = icmp eq i64 %408, 1
  br i1 %417, label %441, label %418

418:                                              ; preds = %415
  %419 = sub i64 %408, %416
  br label %420

420:                                              ; preds = %420, %418
  %421 = phi i64 [ 0, %418 ], [ %438, %420 ]
  %422 = phi i64 [ %419, %418 ], [ %439, %420 ]
  %423 = getelementptr inbounds i32, i32* %66, i64 %421
  %424 = load i32, i32* %423, align 4
  %425 = and i32 %424, 511
  %426 = zext i32 %425 to i64
  %427 = getelementptr inbounds [272 x i32], [272 x i32]* %9, i64 0, i64 %426
  %428 = load i32, i32* %427, align 4
  %429 = add i32 %428, 1
  store i32 %429, i32* %427, align 4
  %430 = or i64 %421, 1
  %431 = getelementptr inbounds i32, i32* %66, i64 %430
  %432 = load i32, i32* %431, align 4
  %433 = and i32 %432, 511
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [272 x i32], [272 x i32]* %9, i64 0, i64 %434
  %436 = load i32, i32* %435, align 4
  %437 = add i32 %436, 1
  store i32 %437, i32* %435, align 4
  %438 = add nuw i64 %421, 2
  %439 = add i64 %422, -2
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %420

441:                                              ; preds = %420, %415
  %442 = phi i64 [ 0, %415 ], [ %438, %420 ]
  %443 = icmp eq i64 %416, 0
  br i1 %443, label %452, label %444

444:                                              ; preds = %441
  %445 = getelementptr inbounds i32, i32* %66, i64 %442
  %446 = load i32, i32* %445, align 4
  %447 = and i32 %446, 511
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds [272 x i32], [272 x i32]* %9, i64 0, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = add i32 %450, 1
  store i32 %451, i32* %449, align 4
  br label %452

452:                                              ; preds = %444, %441, %61, %412
  %453 = phi i1 [ true, %61 ], [ true, %412 ], [ %414, %441 ], [ %414, %444 ]
  %454 = phi i32* [ %62, %61 ], [ %413, %412 ], [ %413, %441 ], [ %413, %444 ]
  %455 = phi i64 [ 0, %61 ], [ 0, %412 ], [ %408, %441 ], [ %408, %444 ]
  %456 = phi i32 [ 0, %61 ], [ %350, %412 ], [ %350, %441 ], [ %350, %444 ]
  %457 = phi i32* [ null, %61 ], [ %66, %412 ], [ %66, %441 ], [ %66, %444 ]
  %458 = phi i8* [ null, %61 ], [ %65, %412 ], [ %65, %441 ], [ %65, %444 ]
  %459 = icmp ne i32 %456, 0
  %460 = zext i1 %459 to i64
  %461 = load i64, i64* %5, align 8, !alias.scope !302, !noalias !305
  %462 = lshr i64 %461, 3
  %463 = getelementptr inbounds i8, i8* %6, i64 %462
  %464 = load i8, i8* %463, align 1, !alias.scope !305, !noalias !302
  %465 = zext i8 %464 to i64
  %466 = and i64 %461, 7
  %467 = shl i64 %460, %466
  %468 = or i64 %467, %465
  %469 = bitcast i8* %463 to i64*
  store i64 %468, i64* %469, align 8, !alias.scope !305, !noalias !302
  %470 = add i64 %461, 1
  store i64 %470, i64* %5, align 8, !alias.scope !302, !noalias !305
  br i1 %459, label %471, label %483

471:                                              ; preds = %452
  %472 = add nsw i32 %456, -1
  %473 = zext i32 %472 to i64
  %474 = lshr i64 %470, 3
  %475 = getelementptr inbounds i8, i8* %6, i64 %474
  %476 = load i8, i8* %475, align 1, !alias.scope !307, !noalias !310
  %477 = zext i8 %476 to i64
  %478 = and i64 %470, 7
  %479 = shl i64 %473, %478
  %480 = or i64 %479, %477
  %481 = bitcast i8* %475 to i64*
  store i64 %480, i64* %481, align 8, !alias.scope !307, !noalias !310
  %482 = add i64 %461, 5
  store i64 %482, i64* %5, align 8, !alias.scope !310, !noalias !307
  br label %483

483:                                              ; preds = %471, %452
  %484 = phi i32 [ %456, %471 ], [ 0, %452 ]
  %485 = zext i32 %484 to i64
  %486 = add i64 %485, %3
  %487 = getelementptr inbounds [272 x i16], [272 x i16]* %11, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %454, i64 %486, i64 %486, %struct.HuffmanTree* %4, i8* nonnull %13, i16* nonnull %487, i64* %5, i8* %6)
  %488 = load i64, i64* %5, align 8
  br i1 %453, label %529, label %489

489:                                              ; preds = %483, %525
  %490 = phi i64 [ %526, %525 ], [ %488, %483 ]
  %491 = phi i64 [ %527, %525 ], [ 0, %483 ]
  %492 = getelementptr inbounds i32, i32* %457, i64 %491
  %493 = load i32, i32* %492, align 4
  %494 = and i32 %493, 511
  %495 = zext i32 %494 to i64
  %496 = getelementptr inbounds [272 x i8], [272 x i8]* %10, i64 0, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i64
  %499 = getelementptr inbounds [272 x i16], [272 x i16]* %11, i64 0, i64 %495
  %500 = load i16, i16* %499, align 2
  %501 = zext i16 %500 to i64
  %502 = lshr i64 %490, 3
  %503 = getelementptr inbounds i8, i8* %6, i64 %502
  %504 = load i8, i8* %503, align 1, !alias.scope !312, !noalias !315
  %505 = zext i8 %504 to i64
  %506 = and i64 %490, 7
  %507 = shl i64 %501, %506
  %508 = or i64 %507, %505
  %509 = bitcast i8* %503 to i64*
  store i64 %508, i64* %509, align 8, !alias.scope !312, !noalias !315
  %510 = add i64 %490, %498
  store i64 %510, i64* %5, align 8, !alias.scope !315, !noalias !312
  %511 = add nsw i32 %494, -1
  %512 = icmp ult i32 %511, %484
  br i1 %512, label %513, label %525

513:                                              ; preds = %489
  %514 = lshr i32 %493, 9
  %515 = zext i32 %514 to i64
  %516 = lshr i64 %510, 3
  %517 = getelementptr inbounds i8, i8* %6, i64 %516
  %518 = load i8, i8* %517, align 1, !alias.scope !317, !noalias !320
  %519 = zext i8 %518 to i64
  %520 = and i64 %510, 7
  %521 = shl i64 %515, %520
  %522 = or i64 %521, %519
  %523 = bitcast i8* %517 to i64*
  store i64 %522, i64* %523, align 8, !alias.scope !317, !noalias !320
  %524 = add i64 %510, %495
  store i64 %524, i64* %5, align 8, !alias.scope !320, !noalias !317
  br label %525

525:                                              ; preds = %489, %513
  %526 = phi i64 [ %510, %489 ], [ %524, %513 ]
  %527 = add nuw i64 %491, 1
  %528 = icmp eq i64 %527, %455
  br i1 %528, label %529, label %489

529:                                              ; preds = %525, %483
  %530 = phi i64 [ %488, %483 ], [ %526, %525 ]
  %531 = lshr i64 %530, 3
  %532 = getelementptr inbounds i8, i8* %6, i64 %531
  %533 = load i8, i8* %532, align 1, !alias.scope !322, !noalias !325
  %534 = zext i8 %533 to i64
  %535 = and i64 %530, 7
  %536 = shl i64 1, %535
  %537 = or i64 %536, %534
  %538 = bitcast i8* %532 to i64*
  store i64 %537, i64* %538, align 8, !alias.scope !322, !noalias !325
  %539 = add i64 %530, 1
  store i64 %539, i64* %5, align 8, !alias.scope !325, !noalias !322
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %458) #5
  br label %540

540:                                              ; preds = %17, %529
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 1088, i8* nonnull %12) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @StoreSymbol(%struct.BlockEncoder* nocapture, i64, i64* nocapture, i8* nocapture) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 7
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %105

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 6
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 3
  %13 = load i32*, i32** %12, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 %11
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %11
  %19 = load i8, i8* %18, align 1
  %20 = zext i32 %15 to i64
  store i64 %20, i64* %5, align 8
  %21 = zext i8 %19 to i64
  %22 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = mul i64 %23, %21
  %25 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 8
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, 1
  %29 = icmp eq i64 %28, %21
  br i1 %29, label %36, label %30

30:                                               ; preds = %8
  %31 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, %21
  %34 = add nuw nsw i64 %21, 2
  %35 = select i1 %33, i64 0, i64 %34
  br label %36

36:                                               ; preds = %30, %8
  %37 = phi i64 [ 1, %8 ], [ %35, %30 ]
  %38 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 1
  store i64 %27, i64* %38, align 8
  store i64 %21, i64* %26, align 8
  %39 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 1, i64 %37
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 2, i64 %37
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  %45 = load i64, i64* %2, align 8, !alias.scope !327, !noalias !330
  %46 = lshr i64 %45, 3
  %47 = getelementptr inbounds i8, i8* %3, i64 %46
  %48 = load i8, i8* %47, align 1, !alias.scope !330, !noalias !327
  %49 = zext i8 %48 to i64
  %50 = and i64 %45, 7
  %51 = shl i64 %44, %50
  %52 = or i64 %51, %49
  %53 = bitcast i8* %47 to i64*
  store i64 %52, i64* %53, align 8, !alias.scope !330, !noalias !327
  %54 = add i64 %45, %41
  store i64 %54, i64* %2, align 8, !alias.scope !327, !noalias !330
  %55 = icmp ugt i32 %15, 176
  %56 = icmp ugt i32 %15, 752
  %57 = select i1 %56, i64 20, i64 14
  %58 = icmp ugt i32 %15, 40
  %59 = select i1 %58, i64 7, i64 0
  %60 = select i1 %55, i64 %57, i64 %59
  br label %61

61:                                               ; preds = %64, %36
  %62 = phi i64 [ %65, %64 ], [ %60, %36 ]
  %63 = icmp ult i64 %62, 25
  br i1 %63, label %64, label %70

64:                                               ; preds = %61
  %65 = add nuw nsw i64 %62, 1
  %66 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %65, i32 0
  %67 = load i16, i16* %66, align 4
  %68 = zext i16 %67 to i32
  %69 = icmp ult i32 %15, %68
  br i1 %69, label %70, label %61

70:                                               ; preds = %61, %64
  %71 = and i64 %62, 4294967295
  %72 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %71, i32 1
  %73 = load i8, i8* %72, align 2
  %74 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %71, i32 0
  %75 = load i16, i16* %74, align 4
  %76 = zext i16 %75 to i32
  %77 = sub i32 %15, %76
  %78 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 3, i64 %71
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 4, i64 %71
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i64
  %84 = lshr i64 %54, 3
  %85 = getelementptr inbounds i8, i8* %3, i64 %84
  %86 = load i8, i8* %85, align 1, !alias.scope !332, !noalias !335
  %87 = zext i8 %86 to i64
  %88 = and i64 %54, 7
  %89 = shl i64 %83, %88
  %90 = or i64 %89, %87
  %91 = bitcast i8* %85 to i64*
  store i64 %90, i64* %91, align 8, !alias.scope !332, !noalias !335
  %92 = add i64 %54, %80
  %93 = zext i8 %73 to i64
  %94 = zext i32 %77 to i64
  %95 = lshr i64 %92, 3
  %96 = getelementptr inbounds i8, i8* %3, i64 %95
  %97 = load i8, i8* %96, align 1, !alias.scope !337, !noalias !340
  %98 = zext i8 %97 to i64
  %99 = and i64 %92, 7
  %100 = shl i64 %94, %99
  %101 = or i64 %100, %98
  %102 = bitcast i8* %96 to i64*
  store i64 %101, i64* %102, align 8, !alias.scope !337, !noalias !340
  %103 = add i64 %92, %93
  store i64 %103, i64* %2, align 8, !alias.scope !340, !noalias !337
  %104 = load i64, i64* %5, align 8
  br label %105

105:                                              ; preds = %70, %4
  %106 = phi i64 [ %104, %70 ], [ %6, %4 ]
  %107 = add i64 %106, -1
  store i64 %107, i64* %5, align 8
  %108 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 8
  %109 = load i64, i64* %108, align 8
  %110 = add i64 %109, %1
  %111 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 9
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 %110
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 10
  %117 = load i16*, i16** %116, align 8
  %118 = getelementptr inbounds i16, i16* %117, i64 %110
  %119 = load i16, i16* %118, align 2
  %120 = zext i16 %119 to i64
  %121 = load i64, i64* %2, align 8, !alias.scope !342, !noalias !345
  %122 = lshr i64 %121, 3
  %123 = getelementptr inbounds i8, i8* %3, i64 %122
  %124 = load i8, i8* %123, align 1, !alias.scope !345, !noalias !342
  %125 = zext i8 %124 to i64
  %126 = and i64 %121, 7
  %127 = shl i64 %120, %126
  %128 = or i64 %127, %125
  %129 = bitcast i8* %123 to i64*
  store i64 %128, i64* %129, align 8, !alias.scope !345, !noalias !342
  %130 = add i64 %121, %115
  store i64 %130, i64* %2, align 8, !alias.scope !342, !noalias !345
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @StoreSymbolWithContext(%struct.BlockEncoder* nocapture, i64, i64, i32* nocapture readonly, i64* nocapture, i8* nocapture, i64) unnamed_addr #3 {
  %8 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %106

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 6
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* %12, align 8
  %15 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 3
  %16 = load i32*, i32** %15, align 8
  %17 = getelementptr inbounds i32, i32* %16, i64 %14
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %14
  %22 = load i8, i8* %21, align 1
  %23 = zext i32 %18 to i64
  store i64 %23, i64* %8, align 8
  %24 = zext i8 %22 to i64
  %25 = shl i64 %24, %6
  %26 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 8
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, 1
  %30 = icmp eq i64 %29, %24
  br i1 %30, label %37, label %31

31:                                               ; preds = %11
  %32 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, %24
  %35 = add nuw nsw i64 %24, 2
  %36 = select i1 %34, i64 0, i64 %35
  br label %37

37:                                               ; preds = %31, %11
  %38 = phi i64 [ 1, %11 ], [ %36, %31 ]
  %39 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 0, i32 1
  store i64 %28, i64* %39, align 8
  store i64 %24, i64* %27, align 8
  %40 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 1, i64 %38
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 2, i64 %38
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i64
  %46 = load i64, i64* %4, align 8, !alias.scope !347, !noalias !350
  %47 = lshr i64 %46, 3
  %48 = getelementptr inbounds i8, i8* %5, i64 %47
  %49 = load i8, i8* %48, align 1, !alias.scope !350, !noalias !347
  %50 = zext i8 %49 to i64
  %51 = and i64 %46, 7
  %52 = shl i64 %45, %51
  %53 = or i64 %52, %50
  %54 = bitcast i8* %48 to i64*
  store i64 %53, i64* %54, align 8, !alias.scope !350, !noalias !347
  %55 = add i64 %46, %42
  store i64 %55, i64* %4, align 8, !alias.scope !347, !noalias !350
  %56 = icmp ugt i32 %18, 176
  %57 = icmp ugt i32 %18, 752
  %58 = select i1 %57, i64 20, i64 14
  %59 = icmp ugt i32 %18, 40
  %60 = select i1 %59, i64 7, i64 0
  %61 = select i1 %56, i64 %58, i64 %60
  br label %62

62:                                               ; preds = %65, %37
  %63 = phi i64 [ %66, %65 ], [ %61, %37 ]
  %64 = icmp ult i64 %63, 25
  br i1 %64, label %65, label %71

65:                                               ; preds = %62
  %66 = add nuw nsw i64 %63, 1
  %67 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %66, i32 0
  %68 = load i16, i16* %67, align 4
  %69 = zext i16 %68 to i32
  %70 = icmp ult i32 %18, %69
  br i1 %70, label %71, label %62

71:                                               ; preds = %62, %65
  %72 = and i64 %63, 4294967295
  %73 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %72, i32 1
  %74 = load i8, i8* %73, align 2
  %75 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %72, i32 0
  %76 = load i16, i16* %75, align 4
  %77 = zext i16 %76 to i32
  %78 = sub i32 %18, %77
  %79 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 3, i64 %72
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 5, i32 4, i64 %72
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i64
  %85 = lshr i64 %55, 3
  %86 = getelementptr inbounds i8, i8* %5, i64 %85
  %87 = load i8, i8* %86, align 1, !alias.scope !352, !noalias !355
  %88 = zext i8 %87 to i64
  %89 = and i64 %55, 7
  %90 = shl i64 %84, %89
  %91 = or i64 %90, %88
  %92 = bitcast i8* %86 to i64*
  store i64 %91, i64* %92, align 8, !alias.scope !352, !noalias !355
  %93 = add i64 %55, %81
  %94 = zext i8 %74 to i64
  %95 = zext i32 %78 to i64
  %96 = lshr i64 %93, 3
  %97 = getelementptr inbounds i8, i8* %5, i64 %96
  %98 = load i8, i8* %97, align 1, !alias.scope !357, !noalias !360
  %99 = zext i8 %98 to i64
  %100 = and i64 %93, 7
  %101 = shl i64 %95, %100
  %102 = or i64 %101, %99
  %103 = bitcast i8* %97 to i64*
  store i64 %102, i64* %103, align 8, !alias.scope !357, !noalias !360
  %104 = add i64 %93, %94
  store i64 %104, i64* %4, align 8, !alias.scope !360, !noalias !357
  %105 = load i64, i64* %8, align 8
  br label %106

106:                                              ; preds = %71, %7
  %107 = phi i64 [ %105, %71 ], [ %9, %7 ]
  %108 = add i64 %107, -1
  store i64 %108, i64* %8, align 8
  %109 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 8
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, %2
  %112 = getelementptr inbounds i32, i32* %3, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 0
  %116 = load i64, i64* %115, align 8
  %117 = mul i64 %116, %114
  %118 = add i64 %117, %1
  %119 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 9
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 %118
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = getelementptr inbounds %struct.BlockEncoder, %struct.BlockEncoder* %0, i64 0, i32 10
  %125 = load i16*, i16** %124, align 8
  %126 = getelementptr inbounds i16, i16* %125, i64 %118
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i64
  %129 = load i64, i64* %4, align 8, !alias.scope !362, !noalias !365
  %130 = lshr i64 %129, 3
  %131 = getelementptr inbounds i8, i8* %5, i64 %130
  %132 = load i8, i8* %131, align 1, !alias.scope !365, !noalias !362
  %133 = zext i8 %132 to i64
  %134 = and i64 %129, 7
  %135 = shl i64 %128, %134
  %136 = or i64 %135, %133
  %137 = bitcast i8* %131 to i64*
  store i64 %136, i64* %137, align 8, !alias.scope !365, !noalias !362
  %138 = add i64 %129, %123
  store i64 %138, i64* %4, align 8, !alias.scope !362, !noalias !365
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliStoreMetaBlockTrivial(%struct.MemoryManager*, i8* nocapture readonly, i64, i64, i64, i32, %struct.BrotliEncoderParams* nocapture readonly, %struct.Command* nocapture readonly, i64, i64* nocapture, i8* nocapture) local_unnamed_addr #0 {
  %12 = alloca %struct.HistogramLiteral, align 8
  %13 = alloca %struct.HistogramCommand, align 8
  %14 = alloca %struct.HistogramDistance, align 8
  %15 = alloca [256 x i8], align 16
  %16 = alloca [256 x i16], align 16
  %17 = alloca [704 x i8], align 16
  %18 = alloca [704 x i16], align 16
  %19 = alloca [140 x i8], align 16
  %20 = alloca [140 x i16], align 16
  %21 = bitcast %struct.HistogramLiteral* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1040, i8* nonnull %21) #5
  %22 = bitcast %struct.HistogramCommand* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2832, i8* nonnull %22) #5
  %23 = bitcast %struct.HistogramDistance* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2192, i8* nonnull %23) #5
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %24) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 256, i1 false)
  %25 = bitcast [256 x i16]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %25) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 512, i1 false)
  %26 = getelementptr inbounds [704 x i8], [704 x i8]* %17, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %26) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 704, i1 false)
  %27 = bitcast [704 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1408, i8* nonnull %27) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 1408, i1 false)
  %28 = getelementptr inbounds [140 x i8], [140 x i8]* %19, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 140, i8* nonnull %28) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 140, i1 false)
  %29 = bitcast [140 x i16]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %29) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 280, i1 false)
  %30 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9, i32 2
  %31 = load i32, i32* %30, align 8
  tail call fastcc void @StoreCompressedMetaBlockHeader(i32 %5, i64 %3, i64* %9, i8* %10)
  %32 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 1032, i1 false) #5
  store double 0x7FF0000000000000, double* %32, align 8
  %33 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %13, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 2824, i1 false) #5
  store double 0x7FF0000000000000, double* %33, align 8
  %34 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %14, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 2184, i1 false) #5
  store double 0x7FF0000000000000, double* %34, align 8
  %35 = icmp eq i64 %8, 0
  br i1 %35, label %123, label %36

36:                                               ; preds = %11
  %37 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %13, i64 0, i32 1
  %38 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 1
  %39 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %14, i64 0, i32 1
  br label %40

40:                                               ; preds = %120, %36
  %41 = phi i64 [ 0, %36 ], [ %121, %120 ]
  %42 = phi i64 [ %2, %36 ], [ %108, %120 ]
  %43 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %41, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %41, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %41, i32 3
  %48 = load i16, i16* %47, align 4
  %49 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %41, i32 4
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %48 to i64
  %52 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %13, i64 0, i32 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %52, align 4
  %55 = load i64, i64* %37, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %37, align 8
  %57 = icmp eq i32 %44, 0
  br i1 %57, label %104, label %58

58:                                               ; preds = %40
  %59 = zext i32 %44 to i64
  %60 = and i32 %44, 1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %74, label %62

62:                                               ; preds = %58
  %63 = and i64 %42, %4
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* %67, align 4
  %70 = load i64, i64* %38, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %38, align 8
  %72 = add i64 %42, 1
  %73 = add nsw i64 %59, -1
  br label %74

74:                                               ; preds = %62, %58
  %75 = phi i64 [ %72, %62 ], [ undef, %58 ]
  %76 = phi i64 [ %73, %62 ], [ %59, %58 ]
  %77 = phi i64 [ %72, %62 ], [ %42, %58 ]
  %78 = icmp eq i32 %44, 1
  br i1 %78, label %104, label %79

79:                                               ; preds = %74, %79
  %80 = phi i64 [ %102, %79 ], [ %76, %74 ]
  %81 = phi i64 [ %101, %79 ], [ %77, %74 ]
  %82 = and i64 %81, %4
  %83 = getelementptr inbounds i8, i8* %1, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 0, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* %86, align 4
  %89 = load i64, i64* %38, align 8
  %90 = add i64 %89, 1
  store i64 %90, i64* %38, align 8
  %91 = add i64 %81, 1
  %92 = and i64 %91, %4
  %93 = getelementptr inbounds i8, i8* %1, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %96, align 4
  %99 = load i64, i64* %38, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %38, align 8
  %101 = add i64 %81, 2
  %102 = add nsw i64 %80, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %79

104:                                              ; preds = %74, %79, %40
  %105 = phi i64 [ %42, %40 ], [ %75, %74 ], [ %101, %79 ]
  %106 = and i32 %46, 33554431
  %107 = zext i32 %106 to i64
  %108 = add i64 %105, %107
  %109 = icmp ne i32 %106, 0
  %110 = icmp ugt i16 %48, 127
  %111 = and i1 %109, %110
  br i1 %111, label %112, label %120

112:                                              ; preds = %104
  %113 = and i16 %50, 1023
  %114 = zext i16 %113 to i64
  %115 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %14, i64 0, i32 0, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = add i32 %116, 1
  store i32 %117, i32* %115, align 4
  %118 = load i64, i64* %39, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %39, align 8
  br label %120

120:                                              ; preds = %112, %104
  %121 = add nuw i64 %41, 1
  %122 = icmp eq i64 %121, %8
  br i1 %122, label %123, label %40

123:                                              ; preds = %120, %11
  %124 = load i64, i64* %9, align 8, !alias.scope !367, !noalias !370
  %125 = lshr i64 %124, 3
  %126 = getelementptr inbounds i8, i8* %10, i64 %125
  %127 = load i8, i8* %126, align 1, !alias.scope !370, !noalias !367
  %128 = zext i8 %127 to i64
  %129 = bitcast i8* %126 to i64*
  store i64 %128, i64* %129, align 8, !alias.scope !370, !noalias !367
  %130 = add i64 %124, 13
  store i64 %130, i64* %9, align 8, !alias.scope !367, !noalias !370
  %131 = tail call i8* @BrotliAllocate(%struct.MemoryManager* %0, i64 11272) #5
  %132 = bitcast i8* %131 to %struct.HuffmanTree*
  %133 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %12, i64 0, i32 0, i64 0
  %134 = getelementptr inbounds [256 x i16], [256 x i16]* %16, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %133, i64 256, i64 256, %struct.HuffmanTree* %132, i8* nonnull %24, i16* nonnull %134, i64* %9, i8* %10)
  %135 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %13, i64 0, i32 0, i64 0
  %136 = getelementptr inbounds [704 x i16], [704 x i16]* %18, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %135, i64 704, i64 704, %struct.HuffmanTree* %132, i8* nonnull %26, i16* nonnull %136, i64* %9, i8* %10)
  %137 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %14, i64 0, i32 0, i64 0
  %138 = zext i32 %31 to i64
  %139 = getelementptr inbounds [140 x i16], [140 x i16]* %20, i64 0, i64 0
  call fastcc void @BuildAndStoreHuffmanTree(i32* nonnull %137, i64 140, i64 %138, %struct.HuffmanTree* %132, i8* nonnull %28, i16* nonnull %139, i64* %9, i8* %10)
  call void @BrotliFree(%struct.MemoryManager* %0, i8* %131) #5
  call fastcc void @StoreDataWithHuffmanCodes(i8* %1, i64 %2, i64 %4, %struct.Command* %7, i64 %8, i8* nonnull %24, i16* nonnull %134, i8* nonnull %26, i16* nonnull %136, i8* nonnull %28, i16* nonnull %139, i64* %9, i8* %10)
  %140 = icmp eq i32 %5, 0
  br i1 %140, label %147, label %141

141:                                              ; preds = %123
  %142 = load i64, i64* %9, align 8
  %143 = add i64 %142, 7
  %144 = and i64 %143, 4294967288
  store i64 %144, i64* %9, align 8
  %145 = lshr exact i64 %144, 3
  %146 = getelementptr inbounds i8, i8* %10, i64 %145
  store i8 0, i8* %146, align 1
  br label %147

147:                                              ; preds = %123, %141
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %29) #5
  call void @llvm.lifetime.end.p0i8(i64 140, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 1408, i8* nonnull %27) #5
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %26) #5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %25) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %24) #5
  call void @llvm.lifetime.end.p0i8(i64 2192, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 2832, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 1040, i8* nonnull %21) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @BuildAndStoreHuffmanTree(i32*, i64, i64, %struct.HuffmanTree*, i8*, i16*, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %9 = alloca [4 x i64], align 16
  %10 = bitcast [4 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 32, i1 false)
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %8, %26
  %13 = phi i64 [ %28, %26 ], [ 0, %8 ]
  %14 = phi i64 [ %27, %26 ], [ 0, %8 ]
  %15 = getelementptr inbounds i32, i32* %0, i64 %13
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %12
  %19 = icmp ult i64 %14, 4
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %14
  store i64 %13, i64* %21, align 8
  br label %24

22:                                               ; preds = %18
  %23 = icmp eq i64 %14, 4
  br i1 %23, label %24, label %30

24:                                               ; preds = %22, %20
  %25 = add nuw nsw i64 %14, 1
  br label %26

26:                                               ; preds = %12, %24
  %27 = phi i64 [ %25, %24 ], [ %14, %12 ]
  %28 = add nuw i64 %13, 1
  %29 = icmp eq i64 %28, %1
  br i1 %29, label %30, label %12

30:                                               ; preds = %22, %26, %8
  %31 = phi i64 [ 0, %8 ], [ %14, %22 ], [ %27, %26 ]
  %32 = add i64 %2, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %30
  %35 = call i64 @llvm.ctlz.i64(i64 %32, i1 true), !range !372
  %36 = sub nuw nsw i64 64, %35
  br label %37

37:                                               ; preds = %34, %30
  %38 = phi i64 [ 0, %30 ], [ %36, %34 ]
  %39 = icmp ult i64 %31, 2
  br i1 %39, label %40, label %64

40:                                               ; preds = %37
  %41 = load i64, i64* %6, align 8, !alias.scope !373, !noalias !376
  %42 = lshr i64 %41, 3
  %43 = getelementptr inbounds i8, i8* %7, i64 %42
  %44 = load i8, i8* %43, align 1, !alias.scope !376, !noalias !373
  %45 = zext i8 %44 to i64
  %46 = and i64 %41, 7
  %47 = shl i64 1, %46
  %48 = or i64 %47, %45
  %49 = bitcast i8* %43 to i64*
  store i64 %48, i64* %49, align 8, !alias.scope !376, !noalias !373
  %50 = add i64 %41, 4
  %51 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %52 = load i64, i64* %51, align 16
  %53 = lshr i64 %50, 3
  %54 = getelementptr inbounds i8, i8* %7, i64 %53
  %55 = load i8, i8* %54, align 1, !alias.scope !378, !noalias !381
  %56 = zext i8 %55 to i64
  %57 = and i64 %50, 7
  %58 = shl i64 %52, %57
  %59 = or i64 %58, %56
  %60 = bitcast i8* %54 to i64*
  store i64 %59, i64* %60, align 8, !alias.scope !378, !noalias !381
  %61 = add i64 %50, %38
  store i64 %61, i64* %6, align 8, !alias.scope !381, !noalias !378
  %62 = getelementptr inbounds i8, i8* %4, i64 %52
  store i8 0, i8* %62, align 1
  %63 = getelementptr inbounds i16, i16* %5, i64 %52
  store i16 0, i16* %63, align 2
  br label %223

64:                                               ; preds = %37
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 %1, i1 false)
  tail call void @BrotliCreateHuffmanTree(i32* %0, i64 %1, i32 15, %struct.HuffmanTree* %3, i8* %4) #5
  tail call void @BrotliConvertBitDepthsToSymbols(i8* %4, i64 %1, i16* %5) #5
  %65 = icmp ult i64 %31, 5
  br i1 %65, label %66, label %222

66:                                               ; preds = %64
  %67 = load i64, i64* %6, align 8, !alias.scope !383, !noalias !386
  %68 = lshr i64 %67, 3
  %69 = getelementptr inbounds i8, i8* %7, i64 %68
  %70 = load i8, i8* %69, align 1, !alias.scope !386, !noalias !383
  %71 = zext i8 %70 to i64
  %72 = and i64 %67, 7
  %73 = shl i64 1, %72
  %74 = or i64 %73, %71
  %75 = bitcast i8* %69 to i64*
  store i64 %74, i64* %75, align 8, !alias.scope !386, !noalias !383
  %76 = add i64 %67, 2
  %77 = add nsw i64 %31, -1
  %78 = lshr i64 %76, 3
  %79 = getelementptr inbounds i8, i8* %7, i64 %78
  %80 = load i8, i8* %79, align 1, !alias.scope !388, !noalias !391
  %81 = zext i8 %80 to i64
  %82 = and i64 %76, 7
  %83 = shl i64 %77, %82
  %84 = or i64 %83, %81
  %85 = bitcast i8* %79 to i64*
  store i64 %84, i64* %85, align 8, !alias.scope !388, !noalias !391
  %86 = add i64 %67, 4
  store i64 %86, i64* %6, align 8, !alias.scope !391, !noalias !388
  %87 = add i64 %31, -2
  br label %90

88:                                               ; preds = %113, %225, %90
  %89 = icmp eq i64 %92, %31
  br i1 %89, label %138, label %90

90:                                               ; preds = %66, %88
  %91 = phi i64 [ %92, %88 ], [ 0, %66 ]
  %92 = add nuw i64 %91, 1
  %93 = icmp ult i64 %92, %31
  br i1 %93, label %94, label %88

94:                                               ; preds = %90
  %95 = xor i64 %91, 1
  %96 = add i64 %31, %95
  %97 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %91
  %98 = load i64, i64* %97, align 8
  %99 = and i64 %96, 1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %113, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %92
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds i8, i8* %4, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds i8, i8* %4, i64 %98
  %107 = load i8, i8* %106, align 1
  %108 = icmp ult i8 %105, %107
  br i1 %108, label %109, label %110

109:                                              ; preds = %101
  store i64 %98, i64* %102, align 8
  store i64 %103, i64* %97, align 8
  br label %110

110:                                              ; preds = %109, %101
  %111 = phi i64 [ %98, %101 ], [ %103, %109 ]
  %112 = add nuw i64 %91, 2
  br label %113

113:                                              ; preds = %110, %94
  %114 = phi i64 [ %111, %110 ], [ %98, %94 ]
  %115 = phi i64 [ %112, %110 ], [ %92, %94 ]
  %116 = icmp eq i64 %87, %91
  br i1 %116, label %88, label %117

117:                                              ; preds = %113, %225
  %118 = phi i64 [ %226, %225 ], [ %114, %113 ]
  %119 = phi i64 [ %227, %225 ], [ %115, %113 ]
  %120 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %119
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds i8, i8* %4, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds i8, i8* %4, i64 %118
  %125 = load i8, i8* %124, align 1
  %126 = icmp ult i8 %123, %125
  br i1 %126, label %127, label %128

127:                                              ; preds = %117
  store i64 %118, i64* %120, align 8
  store i64 %121, i64* %97, align 8
  br label %128

128:                                              ; preds = %127, %117
  %129 = phi i64 [ %118, %117 ], [ %121, %127 ]
  %130 = add nuw i64 %119, 1
  %131 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %130
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds i8, i8* %4, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds i8, i8* %4, i64 %129
  %136 = load i8, i8* %135, align 1
  %137 = icmp ult i8 %134, %136
  br i1 %137, label %224, label %225

138:                                              ; preds = %88
  %139 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %140 = icmp eq i64 %31, 2
  br i1 %140, label %141, label %163

141:                                              ; preds = %138
  %142 = load i64, i64* %139, align 16
  %143 = lshr i64 %86, 3
  %144 = getelementptr inbounds i8, i8* %7, i64 %143
  %145 = load i8, i8* %144, align 1, !alias.scope !393, !noalias !396
  %146 = zext i8 %145 to i64
  %147 = and i64 %86, 7
  %148 = shl i64 %142, %147
  %149 = or i64 %148, %146
  %150 = bitcast i8* %144 to i64*
  store i64 %149, i64* %150, align 8, !alias.scope !393, !noalias !396
  %151 = add i64 %86, %38
  %152 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %153 = load i64, i64* %152, align 8
  %154 = lshr i64 %151, 3
  %155 = getelementptr inbounds i8, i8* %7, i64 %154
  %156 = load i8, i8* %155, align 1, !alias.scope !398, !noalias !401
  %157 = zext i8 %156 to i64
  %158 = and i64 %151, 7
  %159 = shl i64 %153, %158
  %160 = or i64 %159, %157
  %161 = bitcast i8* %155 to i64*
  store i64 %160, i64* %161, align 8, !alias.scope !398, !noalias !401
  %162 = add i64 %151, %38
  store i64 %162, i64* %6, align 8, !alias.scope !401, !noalias !398
  br label %223

163:                                              ; preds = %138
  %164 = icmp eq i64 %31, 3
  %165 = load i64, i64* %139, align 16
  %166 = lshr i64 %86, 3
  %167 = getelementptr inbounds i8, i8* %7, i64 %166
  %168 = load i8, i8* %167, align 1, !alias.scope !403, !noalias !406
  %169 = zext i8 %168 to i64
  %170 = and i64 %86, 7
  %171 = shl i64 %165, %170
  %172 = or i64 %171, %169
  %173 = bitcast i8* %167 to i64*
  store i64 %172, i64* %173, align 8, !alias.scope !403, !noalias !406
  %174 = add i64 %86, %38
  %175 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %176 = load i64, i64* %175, align 8
  %177 = lshr i64 %174, 3
  %178 = getelementptr inbounds i8, i8* %7, i64 %177
  %179 = load i8, i8* %178, align 1, !alias.scope !408, !noalias !411
  %180 = zext i8 %179 to i64
  %181 = and i64 %174, 7
  %182 = shl i64 %176, %181
  %183 = or i64 %182, %180
  %184 = bitcast i8* %178 to i64*
  store i64 %183, i64* %184, align 8, !alias.scope !408, !noalias !411
  %185 = add i64 %174, %38
  %186 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 2
  %187 = load i64, i64* %186, align 16
  %188 = lshr i64 %185, 3
  %189 = getelementptr inbounds i8, i8* %7, i64 %188
  %190 = load i8, i8* %189, align 1, !alias.scope !413, !noalias !416
  %191 = zext i8 %190 to i64
  %192 = and i64 %185, 7
  %193 = shl i64 %187, %192
  %194 = or i64 %193, %191
  %195 = bitcast i8* %189 to i64*
  store i64 %194, i64* %195, align 8, !alias.scope !413, !noalias !416
  %196 = add i64 %185, %38
  store i64 %196, i64* %6, align 8, !alias.scope !416, !noalias !413
  br i1 %164, label %223, label %197

197:                                              ; preds = %163
  %198 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 3
  %199 = load i64, i64* %198, align 8
  %200 = lshr i64 %196, 3
  %201 = getelementptr inbounds i8, i8* %7, i64 %200
  %202 = load i8, i8* %201, align 1, !alias.scope !418, !noalias !421
  %203 = zext i8 %202 to i64
  %204 = and i64 %196, 7
  %205 = shl i64 %199, %204
  %206 = or i64 %205, %203
  %207 = bitcast i8* %201 to i64*
  store i64 %206, i64* %207, align 8, !alias.scope !418, !noalias !421
  %208 = add i64 %196, %38
  store i64 %208, i64* %6, align 8, !alias.scope !421, !noalias !418
  %209 = getelementptr inbounds i8, i8* %4, i64 %165
  %210 = load i8, i8* %209, align 1
  %211 = icmp eq i8 %210, 1
  %212 = zext i1 %211 to i64
  %213 = lshr i64 %208, 3
  %214 = getelementptr inbounds i8, i8* %7, i64 %213
  %215 = load i8, i8* %214, align 1, !alias.scope !423, !noalias !426
  %216 = zext i8 %215 to i64
  %217 = and i64 %208, 7
  %218 = shl i64 %212, %217
  %219 = or i64 %218, %216
  %220 = bitcast i8* %214 to i64*
  store i64 %219, i64* %220, align 8, !alias.scope !423, !noalias !426
  %221 = add i64 %208, 1
  store i64 %221, i64* %6, align 8, !alias.scope !426, !noalias !423
  br label %223

222:                                              ; preds = %64
  tail call void @BrotliStoreHuffmanTree(i8* %4, i64 %1, %struct.HuffmanTree* %3, i64* %6, i8* %7)
  br label %223

223:                                              ; preds = %197, %163, %141, %222, %40
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #5
  ret void

224:                                              ; preds = %128
  store i64 %129, i64* %131, align 8
  store i64 %132, i64* %97, align 8
  br label %225

225:                                              ; preds = %224, %128
  %226 = phi i64 [ %129, %128 ], [ %132, %224 ]
  %227 = add nuw i64 %119, 2
  %228 = icmp eq i64 %227, %31
  br i1 %228, label %88, label %117
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @StoreDataWithHuffmanCodes(i8* nocapture readonly, i64, i64, %struct.Command* nocapture readonly, i64, i8* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly, i64* nocapture, i8* nocapture) unnamed_addr #0 {
  %14 = icmp eq i64 %4, 0
  br i1 %14, label %208, label %15

15:                                               ; preds = %13
  %16 = load i64, i64* %11, align 8, !alias.scope !428, !noalias !431
  br label %17

17:                                               ; preds = %204, %15
  %18 = phi i64 [ %205, %204 ], [ %16, %15 ]
  %19 = phi i64 [ %169, %204 ], [ %1, %15 ]
  %20 = phi i64 [ %206, %204 ], [ 0, %15 ]
  %21 = getelementptr inbounds %struct.Command, %struct.Command* %3, i64 %20, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.Command, %struct.Command* %3, i64 %20, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.Command, %struct.Command* %3, i64 %20, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.Command, %struct.Command* %3, i64 %20, i32 3
  %28 = load i16, i16* %27, align 4
  %29 = getelementptr inbounds %struct.Command, %struct.Command* %3, i64 %20, i32 4
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %28 to i64
  %32 = getelementptr inbounds i8, i8* %7, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds i16, i16* %8, i64 %31
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i64
  %38 = lshr i64 %18, 3
  %39 = getelementptr inbounds i8, i8* %12, i64 %38
  %40 = load i8, i8* %39, align 1, !alias.scope !431, !noalias !428
  %41 = zext i8 %40 to i64
  %42 = and i64 %18, 7
  %43 = shl i64 %37, %42
  %44 = or i64 %43, %41
  %45 = bitcast i8* %39 to i64*
  store i64 %44, i64* %45, align 8, !alias.scope !431, !noalias !428
  %46 = add i64 %18, %34
  store i64 %46, i64* %11, align 8, !alias.scope !428, !noalias !431
  %47 = lshr i32 %24, 25
  %48 = shl nuw nsw i32 %47, 1
  %49 = and i32 %48, 128
  %50 = or i32 %49, %47
  %51 = shl nuw i32 %50, 24
  %52 = ashr exact i32 %51, 24
  %53 = and i32 %24, 33554431
  %54 = add nsw i32 %52, %53
  %55 = zext i32 %22 to i64
  %56 = icmp ult i32 %22, 6
  br i1 %56, label %82, label %57

57:                                               ; preds = %17
  %58 = icmp ult i32 %22, 130
  br i1 %58, label %59, label %70

59:                                               ; preds = %57
  %60 = add nsw i64 %55, -2
  %61 = trunc i64 %60 to i32
  %62 = tail call i32 @llvm.ctlz.i32(i32 %61, i1 true) #5, !range !131
  %63 = sub nsw i32 30, %62
  %64 = shl nsw i32 %63, 1
  %65 = zext i32 %64 to i64
  %66 = zext i32 %63 to i64
  %67 = lshr i64 %60, %66
  %68 = add nuw nsw i64 %65, 2
  %69 = add i64 %68, %67
  br label %82

70:                                               ; preds = %57
  %71 = icmp ult i32 %22, 2114
  br i1 %71, label %72, label %77

72:                                               ; preds = %70
  %73 = add nsw i32 %22, -66
  %74 = tail call i32 @llvm.ctlz.i32(i32 %73, i1 true) #5, !range !131
  %75 = sub nuw nsw i32 41, %74
  %76 = zext i32 %75 to i64
  br label %82

77:                                               ; preds = %70
  %78 = icmp ult i32 %22, 6210
  br i1 %78, label %82, label %79

79:                                               ; preds = %77
  %80 = icmp ult i32 %22, 22594
  %81 = select i1 %80, i64 22, i64 23
  br label %82

82:                                               ; preds = %79, %77, %72, %59, %17
  %83 = phi i64 [ %69, %59 ], [ %76, %72 ], [ 21, %77 ], [ %81, %79 ], [ %55, %17 ]
  %84 = zext i32 %54 to i64
  %85 = icmp ult i32 %54, 10
  br i1 %85, label %86, label %88

86:                                               ; preds = %82
  %87 = add nuw nsw i64 %84, 65534
  br label %108

88:                                               ; preds = %82
  %89 = icmp ult i32 %54, 134
  br i1 %89, label %90, label %101

90:                                               ; preds = %88
  %91 = add nsw i64 %84, -6
  %92 = trunc i64 %91 to i32
  %93 = tail call i32 @llvm.ctlz.i32(i32 %92, i1 true) #5, !range !131
  %94 = sub nsw i32 30, %93
  %95 = shl nsw i32 %94, 1
  %96 = zext i32 %95 to i64
  %97 = zext i32 %94 to i64
  %98 = lshr i64 %91, %97
  %99 = add nuw nsw i64 %96, 4
  %100 = add i64 %99, %98
  br label %108

101:                                              ; preds = %88
  %102 = icmp ult i32 %54, 2118
  br i1 %102, label %103, label %108

103:                                              ; preds = %101
  %104 = add nsw i32 %54, -70
  %105 = tail call i32 @llvm.ctlz.i32(i32 %104, i1 true) #5, !range !131
  %106 = sub nuw nsw i32 43, %105
  %107 = zext i32 %106 to i64
  br label %108

108:                                              ; preds = %86, %90, %101, %103
  %109 = phi i64 [ %87, %86 ], [ %100, %90 ], [ %107, %103 ], [ 23, %101 ]
  %110 = and i64 %83, 65535
  %111 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliInsExtra, i64 0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliInsBase, i64 0, i64 %110
  %114 = load i32, i32* %113, align 4
  %115 = sub i32 %22, %114
  %116 = zext i32 %115 to i64
  %117 = and i64 %109, 65535
  %118 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyBase, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = sub i32 %54, %119
  %121 = zext i32 %120 to i64
  %122 = zext i32 %112 to i64
  %123 = shl i64 %121, %122
  %124 = or i64 %123, %116
  %125 = getelementptr inbounds [24 x i32], [24 x i32]* @kBrotliCopyExtra, i64 0, i64 %117
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, %112
  %128 = zext i32 %127 to i64
  %129 = lshr i64 %46, 3
  %130 = getelementptr inbounds i8, i8* %12, i64 %129
  %131 = load i8, i8* %130, align 1, !alias.scope !433, !noalias !436
  %132 = zext i8 %131 to i64
  %133 = and i64 %46, 7
  %134 = shl i64 %124, %133
  %135 = or i64 %134, %132
  %136 = bitcast i8* %130 to i64*
  store i64 %135, i64* %136, align 8, !alias.scope !433, !noalias !436
  %137 = add i64 %46, %128
  store i64 %137, i64* %11, align 8, !alias.scope !436, !noalias !433
  %138 = icmp eq i32 %22, 0
  br i1 %138, label %165, label %139

139:                                              ; preds = %108, %139
  %140 = phi i64 [ %161, %139 ], [ %137, %108 ]
  %141 = phi i64 [ %162, %139 ], [ %19, %108 ]
  %142 = phi i64 [ %163, %139 ], [ %55, %108 ]
  %143 = and i64 %141, %2
  %144 = getelementptr inbounds i8, i8* %0, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i64
  %147 = getelementptr inbounds i8, i8* %5, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = getelementptr inbounds i16, i16* %6, i64 %146
  %151 = load i16, i16* %150, align 2
  %152 = zext i16 %151 to i64
  %153 = lshr i64 %140, 3
  %154 = getelementptr inbounds i8, i8* %12, i64 %153
  %155 = load i8, i8* %154, align 1, !alias.scope !438, !noalias !441
  %156 = zext i8 %155 to i64
  %157 = and i64 %140, 7
  %158 = shl i64 %152, %157
  %159 = or i64 %158, %156
  %160 = bitcast i8* %154 to i64*
  store i64 %159, i64* %160, align 8, !alias.scope !438, !noalias !441
  %161 = add i64 %140, %149
  store i64 %161, i64* %11, align 8, !alias.scope !441, !noalias !438
  %162 = add i64 %141, 1
  %163 = add nsw i64 %142, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %139

165:                                              ; preds = %139, %108
  %166 = phi i64 [ %137, %108 ], [ %161, %139 ]
  %167 = phi i64 [ %19, %108 ], [ %162, %139 ]
  %168 = zext i32 %53 to i64
  %169 = add i64 %167, %168
  %170 = icmp ne i32 %53, 0
  %171 = icmp ugt i16 %28, 127
  %172 = and i1 %170, %171
  br i1 %172, label %173, label %204

173:                                              ; preds = %165
  %174 = zext i16 %30 to i32
  %175 = and i32 %174, 1023
  %176 = zext i32 %175 to i64
  %177 = lshr i32 %174, 10
  %178 = getelementptr inbounds i8, i8* %9, i64 %176
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i64
  %181 = getelementptr inbounds i16, i16* %10, i64 %176
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i64
  %184 = lshr i64 %166, 3
  %185 = getelementptr inbounds i8, i8* %12, i64 %184
  %186 = load i8, i8* %185, align 1, !alias.scope !443, !noalias !446
  %187 = zext i8 %186 to i64
  %188 = and i64 %166, 7
  %189 = shl i64 %183, %188
  %190 = or i64 %189, %187
  %191 = bitcast i8* %185 to i64*
  store i64 %190, i64* %191, align 8, !alias.scope !443, !noalias !446
  %192 = add i64 %166, %180
  %193 = zext i32 %177 to i64
  %194 = zext i32 %26 to i64
  %195 = lshr i64 %192, 3
  %196 = getelementptr inbounds i8, i8* %12, i64 %195
  %197 = load i8, i8* %196, align 1, !alias.scope !448, !noalias !451
  %198 = zext i8 %197 to i64
  %199 = and i64 %192, 7
  %200 = shl i64 %194, %199
  %201 = or i64 %200, %198
  %202 = bitcast i8* %196 to i64*
  store i64 %201, i64* %202, align 8, !alias.scope !448, !noalias !451
  %203 = add i64 %192, %193
  store i64 %203, i64* %11, align 8, !alias.scope !451, !noalias !448
  br label %204

204:                                              ; preds = %165, %173
  %205 = phi i64 [ %166, %165 ], [ %203, %173 ]
  %206 = add nuw i64 %20, 1
  %207 = icmp eq i64 %206, %4
  br i1 %207, label %208, label %17

208:                                              ; preds = %204, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliStoreMetaBlockFast(%struct.MemoryManager*, i8* nocapture readonly, i64, i64, i64, i32, %struct.BrotliEncoderParams* nocapture readonly, %struct.Command* nocapture readonly, i64, i64*, i8* nocapture) local_unnamed_addr #0 {
  %12 = alloca [256 x i32], align 16
  %13 = alloca [256 x i8], align 16
  %14 = alloca [256 x i16], align 16
  %15 = alloca %struct.HistogramLiteral, align 8
  %16 = alloca %struct.HistogramCommand, align 8
  %17 = alloca %struct.HistogramDistance, align 8
  %18 = alloca [256 x i8], align 16
  %19 = alloca [256 x i16], align 16
  %20 = alloca [704 x i8], align 16
  %21 = alloca [704 x i16], align 16
  %22 = alloca [140 x i8], align 16
  %23 = alloca [140 x i16], align 16
  %24 = getelementptr inbounds %struct.BrotliEncoderParams, %struct.BrotliEncoderParams* %6, i64 0, i32 9, i32 2
  %25 = load i32, i32* %24, align 8
  tail call fastcc void @StoreCompressedMetaBlockHeader(i32 %5, i64 %3, i64* %9, i8* %10)
  %26 = load i64, i64* %9, align 8, !alias.scope !453, !noalias !456
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds i8, i8* %10, i64 %27
  %29 = load i8, i8* %28, align 1, !alias.scope !456, !noalias !453
  %30 = zext i8 %29 to i64
  %31 = bitcast i8* %28 to i64*
  store i64 %30, i64* %31, align 8, !alias.scope !456, !noalias !453
  %32 = add i64 %26, 13
  store i64 %32, i64* %9, align 8, !alias.scope !453, !noalias !456
  %33 = icmp ult i64 %8, 129
  br i1 %33, label %34, label %125

34:                                               ; preds = %11
  %35 = bitcast [256 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %35) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 0, i64 1024, i1 false)
  %36 = getelementptr inbounds [256 x i8], [256 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %36) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 256, i1 false)
  %37 = bitcast [256 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %37) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 512, i1 false)
  %38 = icmp eq i64 %8, 0
  br i1 %38, label %96, label %39

39:                                               ; preds = %34, %88
  %40 = phi i64 [ %94, %88 ], [ 0, %34 ]
  %41 = phi i64 [ %90, %88 ], [ 0, %34 ]
  %42 = phi i64 [ %93, %88 ], [ %2, %34 ]
  %43 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %40, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %40, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %44 to i64
  %48 = icmp eq i32 %44, 0
  br i1 %48, label %88, label %49

49:                                               ; preds = %39
  %50 = and i32 %44, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %62, label %52

52:                                               ; preds = %49
  %53 = and i64 %42, %4
  %54 = getelementptr inbounds i8, i8* %1, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, 1
  store i32 %59, i32* %57, align 4
  %60 = add i64 %42, 1
  %61 = add nsw i64 %47, -1
  br label %62

62:                                               ; preds = %52, %49
  %63 = phi i64 [ %60, %52 ], [ undef, %49 ]
  %64 = phi i64 [ %61, %52 ], [ %47, %49 ]
  %65 = phi i64 [ %60, %52 ], [ %42, %49 ]
  %66 = icmp eq i32 %44, 1
  br i1 %66, label %88, label %67

67:                                               ; preds = %62, %67
  %68 = phi i64 [ %86, %67 ], [ %64, %62 ]
  %69 = phi i64 [ %85, %67 ], [ %65, %62 ]
  %70 = and i64 %69, %4
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  %77 = add i64 %69, 1
  %78 = and i64 %77, %4
  %79 = getelementptr inbounds i8, i8* %1, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, 1
  store i32 %84, i32* %82, align 4
  %85 = add i64 %69, 2
  %86 = add nsw i64 %68, -2
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %67

88:                                               ; preds = %62, %67, %39
  %89 = phi i64 [ %42, %39 ], [ %63, %62 ], [ %85, %67 ]
  %90 = add i64 %41, %47
  %91 = and i32 %46, 33554431
  %92 = zext i32 %91 to i64
  %93 = add i64 %89, %92
  %94 = add nuw i64 %40, 1
  %95 = icmp eq i64 %94, %8
  br i1 %95, label %96, label %39

96:                                               ; preds = %88, %34
  %97 = phi i64 [ 0, %34 ], [ %90, %88 ]
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 0
  %99 = getelementptr inbounds [256 x i16], [256 x i16]* %14, i64 0, i64 0
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %98, i64 %97, i64 8, i8* nonnull %36, i16* nonnull %99, i64* %9, i8* %10)
  %100 = load i64, i64* %9, align 8, !alias.scope !458, !noalias !461
  %101 = lshr i64 %100, 3
  %102 = getelementptr inbounds i8, i8* %10, i64 %101
  %103 = load i8, i8* %102, align 1, !alias.scope !461, !noalias !458
  %104 = zext i8 %103 to i64
  %105 = and i64 %100, 7
  %106 = shl i64 41203391169327107, %105
  %107 = or i64 %106, %104
  %108 = bitcast i8* %102 to i64*
  store i64 %107, i64* %108, align 8, !alias.scope !461, !noalias !458
  %109 = add i64 %100, 56
  %110 = lshr i64 %109, 3
  %111 = getelementptr inbounds i8, i8* %10, i64 %110
  %112 = load i8, i8* %111, align 1, !alias.scope !463, !noalias !466
  %113 = zext i8 %112 to i64
  %114 = bitcast i8* %111 to i64*
  store i64 %113, i64* %114, align 8, !alias.scope !463, !noalias !466
  %115 = add i64 %100, 59
  %116 = lshr i64 %115, 3
  %117 = getelementptr inbounds i8, i8* %10, i64 %116
  %118 = load i8, i8* %117, align 1, !alias.scope !468, !noalias !471
  %119 = zext i8 %118 to i64
  %120 = and i64 %115, 7
  %121 = shl i64 57269251, %120
  %122 = or i64 %121, %119
  %123 = bitcast i8* %117 to i64*
  store i64 %122, i64* %123, align 8, !alias.scope !468, !noalias !471
  %124 = add i64 %100, 87
  store i64 %124, i64* %9, align 8, !alias.scope !471, !noalias !468
  call fastcc void @StoreDataWithHuffmanCodes(i8* %1, i64 %2, i64 %4, %struct.Command* %7, i64 %8, i8* nonnull %36, i16* nonnull %99, i8* getelementptr inbounds ([704 x i8], [704 x i8]* @kStaticCommandCodeDepth, i64 0, i64 0), i16* getelementptr inbounds ([704 x i16], [704 x i16]* @kStaticCommandCodeBits, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @kStaticDistanceCodeDepth, i64 0, i64 0), i16* getelementptr inbounds ([64 x i16], [64 x i16]* @kStaticDistanceCodeBits, i64 0, i64 0), i64* %9, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %37) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %36) #5
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %35) #5
  br label %240

125:                                              ; preds = %11
  %126 = add i32 %25, -1
  %127 = tail call i32 @llvm.ctlz.i32(i32 %126, i1 true) #5, !range !131
  %128 = bitcast %struct.HistogramLiteral* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1040, i8* nonnull %128) #5
  %129 = bitcast %struct.HistogramCommand* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2832, i8* nonnull %129) #5
  %130 = bitcast %struct.HistogramDistance* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2192, i8* nonnull %130) #5
  %131 = getelementptr inbounds [256 x i8], [256 x i8]* %18, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %131) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %131, i8 -86, i64 256, i1 false)
  %132 = bitcast [256 x i16]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %132) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %132, i8 -86, i64 512, i1 false)
  %133 = getelementptr inbounds [704 x i8], [704 x i8]* %20, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %133) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %133, i8 -86, i64 704, i1 false)
  %134 = bitcast [704 x i16]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1408, i8* nonnull %134) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %134, i8 -86, i64 1408, i1 false)
  %135 = getelementptr inbounds [140 x i8], [140 x i8]* %22, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 140, i8* nonnull %135) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %135, i8 -86, i64 140, i1 false)
  %136 = bitcast [140 x i16]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %136) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %136, i8 -86, i64 280, i1 false)
  %137 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %128, i8 0, i64 1032, i1 false) #5
  store double 0x7FF0000000000000, double* %137, align 8
  %138 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %16, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %129, i8 0, i64 2824, i1 false) #5
  store double 0x7FF0000000000000, double* %138, align 8
  %139 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %17, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %130, i8 0, i64 2184, i1 false) #5
  store double 0x7FF0000000000000, double* %139, align 8
  %140 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %16, i64 0, i32 1
  %141 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 1
  %142 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %17, i64 0, i32 1
  br label %143

143:                                              ; preds = %227, %125
  %144 = phi i64 [ 0, %125 ], [ %228, %227 ]
  %145 = phi i64 [ 0, %125 ], [ %211, %227 ]
  %146 = phi i64 [ 0, %125 ], [ %229, %227 ]
  %147 = phi i64 [ %2, %125 ], [ %215, %227 ]
  %148 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %146, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %146, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %146, i32 3
  %153 = load i16, i16* %152, align 4
  %154 = getelementptr inbounds %struct.Command, %struct.Command* %7, i64 %146, i32 4
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %153 to i64
  %157 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %16, i64 0, i32 0, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = add i32 %158, 1
  store i32 %159, i32* %157, align 4
  %160 = load i64, i64* %140, align 8
  %161 = add i64 %160, 1
  store i64 %161, i64* %140, align 8
  %162 = icmp eq i32 %149, 0
  br i1 %162, label %210, label %163

163:                                              ; preds = %143
  %164 = zext i32 %149 to i64
  %165 = and i32 %149, 1
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %179, label %167

167:                                              ; preds = %163
  %168 = and i64 %147, %4
  %169 = getelementptr inbounds i8, i8* %1, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add i32 %173, 1
  store i32 %174, i32* %172, align 4
  %175 = load i64, i64* %141, align 8
  %176 = add i64 %175, 1
  store i64 %176, i64* %141, align 8
  %177 = add i64 %147, 1
  %178 = add nsw i64 %164, -1
  br label %179

179:                                              ; preds = %167, %163
  %180 = phi i64 [ %176, %167 ], [ undef, %163 ]
  %181 = phi i64 [ %177, %167 ], [ undef, %163 ]
  %182 = phi i64 [ %178, %167 ], [ %164, %163 ]
  %183 = phi i64 [ %177, %167 ], [ %147, %163 ]
  %184 = icmp eq i32 %149, 1
  br i1 %184, label %210, label %185

185:                                              ; preds = %179, %185
  %186 = phi i64 [ %208, %185 ], [ %182, %179 ]
  %187 = phi i64 [ %207, %185 ], [ %183, %179 ]
  %188 = and i64 %187, %4
  %189 = getelementptr inbounds i8, i8* %1, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 0, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = add i32 %193, 1
  store i32 %194, i32* %192, align 4
  %195 = load i64, i64* %141, align 8
  %196 = add i64 %195, 1
  store i64 %196, i64* %141, align 8
  %197 = add i64 %187, 1
  %198 = and i64 %197, %4
  %199 = getelementptr inbounds i8, i8* %1, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i64
  %202 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = add i32 %203, 1
  store i32 %204, i32* %202, align 4
  %205 = load i64, i64* %141, align 8
  %206 = add i64 %205, 1
  store i64 %206, i64* %141, align 8
  %207 = add i64 %187, 2
  %208 = add nsw i64 %186, -2
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %185

210:                                              ; preds = %179, %185, %143
  %211 = phi i64 [ %145, %143 ], [ %180, %179 ], [ %206, %185 ]
  %212 = phi i64 [ %147, %143 ], [ %181, %179 ], [ %207, %185 ]
  %213 = and i32 %151, 33554431
  %214 = zext i32 %213 to i64
  %215 = add i64 %212, %214
  %216 = icmp ne i32 %213, 0
  %217 = icmp ugt i16 %153, 127
  %218 = and i1 %216, %217
  br i1 %218, label %219, label %227

219:                                              ; preds = %210
  %220 = and i16 %155, 1023
  %221 = zext i16 %220 to i64
  %222 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %17, i64 0, i32 0, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %223, 1
  store i32 %224, i32* %222, align 4
  %225 = load i64, i64* %142, align 8
  %226 = add i64 %225, 1
  store i64 %226, i64* %142, align 8
  br label %227

227:                                              ; preds = %219, %210
  %228 = phi i64 [ %226, %219 ], [ %144, %210 ]
  %229 = add nuw i64 %146, 1
  %230 = icmp eq i64 %229, %8
  br i1 %230, label %231, label %143

231:                                              ; preds = %227
  %232 = sub nuw nsw i32 32, %127
  %233 = getelementptr inbounds %struct.HistogramLiteral, %struct.HistogramLiteral* %15, i64 0, i32 0, i64 0
  %234 = getelementptr inbounds [256 x i16], [256 x i16]* %19, i64 0, i64 0
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %233, i64 %211, i64 8, i8* nonnull %131, i16* nonnull %234, i64* %9, i8* %10)
  %235 = getelementptr inbounds %struct.HistogramCommand, %struct.HistogramCommand* %16, i64 0, i32 0, i64 0
  %236 = getelementptr inbounds [704 x i16], [704 x i16]* %21, i64 0, i64 0
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %235, i64 %161, i64 10, i8* nonnull %133, i16* nonnull %236, i64* %9, i8* %10)
  %237 = getelementptr inbounds %struct.HistogramDistance, %struct.HistogramDistance* %17, i64 0, i32 0, i64 0
  %238 = zext i32 %232 to i64
  %239 = getelementptr inbounds [140 x i16], [140 x i16]* %23, i64 0, i64 0
  call void @BrotliBuildAndStoreHuffmanTreeFast(%struct.MemoryManager* %0, i32* nonnull %237, i64 %228, i64 %238, i8* nonnull %135, i16* nonnull %239, i64* %9, i8* %10)
  call fastcc void @StoreDataWithHuffmanCodes(i8* %1, i64 %2, i64 %4, %struct.Command* %7, i64 %8, i8* nonnull %131, i16* nonnull %234, i8* nonnull %133, i16* nonnull %236, i8* nonnull %135, i16* nonnull %239, i64* %9, i8* %10)
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %136) #5
  call void @llvm.lifetime.end.p0i8(i64 140, i8* nonnull %135) #5
  call void @llvm.lifetime.end.p0i8(i64 1408, i8* nonnull %134) #5
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %133) #5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %132) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %131) #5
  call void @llvm.lifetime.end.p0i8(i64 2192, i8* nonnull %130) #5
  call void @llvm.lifetime.end.p0i8(i64 2832, i8* nonnull %129) #5
  call void @llvm.lifetime.end.p0i8(i64 1040, i8* nonnull %128) #5
  br label %240

240:                                              ; preds = %231, %96
  %241 = icmp eq i32 %5, 0
  br i1 %241, label %248, label %242

242:                                              ; preds = %240
  %243 = load i64, i64* %9, align 8
  %244 = add i64 %243, 7
  %245 = and i64 %244, 4294967288
  store i64 %245, i64* %9, align 8
  %246 = lshr exact i64 %245, 3
  %247 = getelementptr inbounds i8, i8* %10, i64 %246
  store i8 0, i8* %247, align 1
  br label %248

248:                                              ; preds = %240, %242
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliStoreUncompressedMetaBlock(i32, i8* noalias nocapture readonly, i64, i64, i64, i64* noalias nocapture, i8* noalias nocapture) local_unnamed_addr #0 {
  %8 = and i64 %3, %2
  %9 = load i64, i64* %5, align 8, !alias.scope !473, !noalias !476
  %10 = lshr i64 %9, 3
  %11 = getelementptr inbounds i8, i8* %6, i64 %10
  %12 = load i8, i8* %11, align 1, !alias.scope !476, !noalias !473
  %13 = zext i8 %12 to i64
  %14 = bitcast i8* %11 to i64*
  store i64 %13, i64* %14, align 8, !alias.scope !476, !noalias !473
  %15 = add i64 %9, 1
  store i64 %15, i64* %5, align 8, !alias.scope !473, !noalias !476
  %16 = icmp eq i64 %4, 1
  br i1 %16, label %25, label %17

17:                                               ; preds = %7
  %18 = trunc i64 %4 to i32
  %19 = add i32 %18, -1
  %20 = tail call i32 @llvm.ctlz.i32(i32 %19, i1 true) #5, !range !131
  %21 = icmp ult i32 %19, 32768
  %22 = sub nuw nsw i32 35, %20
  %23 = lshr i32 %22, 2
  %24 = zext i32 %23 to i64
  br i1 %21, label %25, label %26

25:                                               ; preds = %17, %7
  br label %26

26:                                               ; preds = %17, %25
  %27 = phi i64 [ 4, %25 ], [ %24, %17 ]
  %28 = add nsw i64 %27, -4
  %29 = shl nuw nsw i64 %27, 2
  %30 = add i64 %4, -1
  %31 = lshr i64 %15, 3
  %32 = getelementptr inbounds i8, i8* %6, i64 %31
  %33 = load i8, i8* %32, align 1, !alias.scope !478, !noalias !481
  %34 = zext i8 %33 to i64
  %35 = and i64 %15, 7
  %36 = shl i64 %28, %35
  %37 = or i64 %36, %34
  %38 = bitcast i8* %32 to i64*
  store i64 %37, i64* %38, align 8, !alias.scope !478, !noalias !481
  %39 = add i64 %9, 3
  %40 = lshr i64 %39, 3
  %41 = getelementptr inbounds i8, i8* %6, i64 %40
  %42 = load i8, i8* %41, align 1, !alias.scope !483, !noalias !486
  %43 = zext i8 %42 to i64
  %44 = and i64 %39, 7
  %45 = shl i64 %30, %44
  %46 = or i64 %45, %43
  %47 = bitcast i8* %41 to i64*
  store i64 %46, i64* %47, align 8, !alias.scope !483, !noalias !486
  %48 = add i64 %29, %39
  %49 = lshr i64 %48, 3
  %50 = getelementptr inbounds i8, i8* %6, i64 %49
  %51 = load i8, i8* %50, align 1, !alias.scope !488, !noalias !491
  %52 = zext i8 %51 to i64
  %53 = and i64 %48, 7
  %54 = shl i64 1, %53
  %55 = or i64 %54, %52
  %56 = bitcast i8* %50 to i64*
  store i64 %55, i64* %56, align 8, !alias.scope !488, !noalias !491
  %57 = add i64 %48, 8
  %58 = and i64 %57, 4294967288
  store i64 %58, i64* %5, align 8
  %59 = lshr exact i64 %58, 3
  %60 = getelementptr inbounds i8, i8* %6, i64 %59
  store i8 0, i8* %60, align 1
  %61 = add i64 %8, %4
  %62 = add i64 %3, 1
  %63 = icmp ugt i64 %61, %62
  br i1 %63, label %64, label %71

64:                                               ; preds = %26
  %65 = sub i64 %62, %8
  %66 = getelementptr inbounds i8, i8* %1, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %66, i64 %65, i1 false)
  %67 = shl i64 %65, 3
  %68 = add i64 %58, %67
  store i64 %68, i64* %5, align 8
  %69 = sub i64 %4, %65
  %70 = lshr exact i64 %68, 3
  br label %71

71:                                               ; preds = %64, %26
  %72 = phi i64 [ %70, %64 ], [ %59, %26 ]
  %73 = phi i64 [ %68, %64 ], [ %58, %26 ]
  %74 = phi i64 [ 0, %64 ], [ %8, %26 ]
  %75 = phi i64 [ %69, %64 ], [ %4, %26 ]
  %76 = getelementptr inbounds i8, i8* %6, i64 %72
  %77 = getelementptr inbounds i8, i8* %1, i64 %74
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %75, i1 false)
  %78 = shl i64 %75, 3
  %79 = add i64 %73, %78
  store i64 %79, i64* %5, align 8
  %80 = lshr i64 %79, 3
  %81 = getelementptr inbounds i8, i8* %6, i64 %80
  store i8 0, i8* %81, align 1
  %82 = icmp eq i32 %0, 0
  br i1 %82, label %100, label %83

83:                                               ; preds = %71
  %84 = and i64 %79, 7
  %85 = shl i64 1, %84
  %86 = bitcast i8* %81 to i64*
  store i64 %85, i64* %86, align 8, !alias.scope !493, !noalias !496
  %87 = add i64 %79, 1
  %88 = lshr i64 %87, 3
  %89 = getelementptr inbounds i8, i8* %6, i64 %88
  %90 = load i8, i8* %89, align 1, !alias.scope !498, !noalias !501
  %91 = zext i8 %90 to i64
  %92 = and i64 %87, 7
  %93 = shl i64 1, %92
  %94 = or i64 %93, %91
  %95 = bitcast i8* %89 to i64*
  store i64 %94, i64* %95, align 8, !alias.scope !498, !noalias !501
  %96 = add i64 %79, 9
  %97 = and i64 %96, 4294967288
  store i64 %97, i64* %5, align 8
  %98 = lshr exact i64 %97, 3
  %99 = getelementptr inbounds i8, i8* %6, i64 %98
  store i8 0, i8* %99, align 1
  br label %100

100:                                              ; preds = %71, %83
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"BrotliWriteBits: argument 0"}
!6 = distinct !{!6, !"BrotliWriteBits"}
!7 = !{!8}
!8 = distinct !{!8, !6, !"BrotliWriteBits: argument 1"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"BrotliWriteBits: argument 1"}
!11 = distinct !{!11, !"BrotliWriteBits"}
!12 = !{!13}
!13 = distinct !{!13, !11, !"BrotliWriteBits: argument 0"}
!14 = !{!15, !17}
!15 = distinct !{!15, !16, !"BrotliStoreHuffmanTreeToBitMask: argument 0"}
!16 = distinct !{!16, !"BrotliStoreHuffmanTreeToBitMask"}
!17 = distinct !{!17, !16, !"BrotliStoreHuffmanTreeToBitMask: argument 1"}
!18 = !{!19, !17}
!19 = distinct !{!19, !20, !"BrotliWriteBits: argument 1"}
!20 = distinct !{!20, !"BrotliWriteBits"}
!21 = !{!22, !15}
!22 = distinct !{!22, !20, !"BrotliWriteBits: argument 0"}
!23 = !{!24, !17, !26}
!24 = distinct !{!24, !25, !"BrotliWriteBits: argument 1"}
!25 = distinct !{!25, !"BrotliWriteBits"}
!26 = distinct !{!26, !27, !"BrotliWriteBits: argument 1"}
!27 = distinct !{!27, !"BrotliWriteBits"}
!28 = !{!15}
!29 = !{!30, !31, !22, !15}
!30 = distinct !{!30, !25, !"BrotliWriteBits: argument 0"}
!31 = distinct !{!31, !27, !"BrotliWriteBits: argument 0"}
!32 = !{!17}
!33 = !{!34}
!34 = distinct !{!34, !35, !"BrotliWriteBits: argument 0"}
!35 = distinct !{!35, !"BrotliWriteBits"}
!36 = !{!37}
!37 = distinct !{!37, !35, !"BrotliWriteBits: argument 1"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"BrotliWriteBits: argument 1"}
!40 = distinct !{!40, !"BrotliWriteBits"}
!41 = !{!42}
!42 = distinct !{!42, !40, !"BrotliWriteBits: argument 0"}
!43 = !{!"branch_weights", i32 1, i32 2000}
!44 = !{!45}
!45 = distinct !{!45, !46, !"BrotliWriteBits: argument 1"}
!46 = distinct !{!46, !"BrotliWriteBits"}
!47 = !{!48}
!48 = distinct !{!48, !46, !"BrotliWriteBits: argument 0"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"BrotliWriteBits: argument 1"}
!51 = distinct !{!51, !"BrotliWriteBits"}
!52 = !{!53}
!53 = distinct !{!53, !51, !"BrotliWriteBits: argument 0"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"BrotliWriteBits: argument 1"}
!56 = distinct !{!56, !"BrotliWriteBits"}
!57 = !{!58}
!58 = distinct !{!58, !56, !"BrotliWriteBits: argument 0"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"BrotliWriteBits: argument 1"}
!61 = distinct !{!61, !"BrotliWriteBits"}
!62 = !{!63}
!63 = distinct !{!63, !61, !"BrotliWriteBits: argument 0"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"BrotliWriteBits: argument 1"}
!66 = distinct !{!66, !"BrotliWriteBits"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"BrotliWriteBits: argument 0"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"BrotliWriteBits: argument 1"}
!71 = distinct !{!71, !"BrotliWriteBits"}
!72 = !{!73}
!73 = distinct !{!73, !71, !"BrotliWriteBits: argument 0"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"BrotliWriteBits: argument 1"}
!76 = distinct !{!76, !"BrotliWriteBits"}
!77 = !{!78}
!78 = distinct !{!78, !76, !"BrotliWriteBits: argument 0"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"BrotliWriteBits: argument 1"}
!81 = distinct !{!81, !"BrotliWriteBits"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"BrotliWriteBits: argument 0"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"BrotliWriteBits: argument 1"}
!86 = distinct !{!86, !"BrotliWriteBits"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"BrotliWriteBits: argument 0"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"BrotliWriteBits: argument 1"}
!91 = distinct !{!91, !"BrotliWriteBits"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"BrotliWriteBits: argument 0"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"BrotliWriteBits: argument 1"}
!96 = distinct !{!96, !"BrotliWriteBits"}
!97 = !{!98}
!98 = distinct !{!98, !96, !"BrotliWriteBits: argument 0"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"BrotliWriteBits: argument 1"}
!101 = distinct !{!101, !"BrotliWriteBits"}
!102 = !{!103}
!103 = distinct !{!103, !101, !"BrotliWriteBits: argument 0"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"BrotliWriteBits: argument 1"}
!106 = distinct !{!106, !"BrotliWriteBits"}
!107 = !{!108}
!108 = distinct !{!108, !106, !"BrotliWriteBits: argument 0"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"BrotliWriteBits: argument 1"}
!111 = distinct !{!111, !"BrotliWriteBits"}
!112 = !{!113}
!113 = distinct !{!113, !111, !"BrotliWriteBits: argument 0"}
!114 = !{!98, !113, !108}
!115 = !{}
!116 = !{!117}
!117 = distinct !{!117, !118, !"BrotliWriteBits: argument 0"}
!118 = distinct !{!118, !"BrotliWriteBits"}
!119 = !{!120}
!120 = distinct !{!120, !118, !"BrotliWriteBits: argument 1"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"BrotliWriteBits: argument 1"}
!123 = distinct !{!123, !"BrotliWriteBits"}
!124 = !{!125}
!125 = distinct !{!125, !123, !"BrotliWriteBits: argument 0"}
!126 = !{!127}
!127 = distinct !{!127, !128, !"BrotliWriteBits: argument 1"}
!128 = distinct !{!128, !"BrotliWriteBits"}
!129 = !{!130}
!130 = distinct !{!130, !128, !"BrotliWriteBits: argument 0"}
!131 = !{i32 0, i32 33}
!132 = !{!133}
!133 = distinct !{!133, !134, !"BrotliWriteBits: argument 0"}
!134 = distinct !{!134, !"BrotliWriteBits"}
!135 = !{!136}
!136 = distinct !{!136, !134, !"BrotliWriteBits: argument 1"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"BrotliWriteBits: argument 0"}
!139 = distinct !{!139, !"BrotliWriteBits"}
!140 = !{!141}
!141 = distinct !{!141, !139, !"BrotliWriteBits: argument 1"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"BrotliWriteBits: argument 0"}
!144 = distinct !{!144, !"BrotliWriteBits"}
!145 = !{!146}
!146 = distinct !{!146, !144, !"BrotliWriteBits: argument 1"}
!147 = !{!148}
!148 = distinct !{!148, !149, !"BrotliWriteBits: argument 1"}
!149 = distinct !{!149, !"BrotliWriteBits"}
!150 = !{!151}
!151 = distinct !{!151, !149, !"BrotliWriteBits: argument 0"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"BrotliWriteBits: argument 1"}
!154 = distinct !{!154, !"BrotliWriteBits"}
!155 = !{!156}
!156 = distinct !{!156, !154, !"BrotliWriteBits: argument 0"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"BrotliWriteBits: argument 1"}
!159 = distinct !{!159, !"BrotliWriteBits"}
!160 = !{!161}
!161 = distinct !{!161, !159, !"BrotliWriteBits: argument 0"}
!162 = !{!163}
!163 = distinct !{!163, !164, !"BrotliWriteBits: argument 1"}
!164 = distinct !{!164, !"BrotliWriteBits"}
!165 = !{!166}
!166 = distinct !{!166, !164, !"BrotliWriteBits: argument 0"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"BrotliWriteBits: argument 1"}
!169 = distinct !{!169, !"BrotliWriteBits"}
!170 = !{!171}
!171 = distinct !{!171, !169, !"BrotliWriteBits: argument 0"}
!172 = !{!173}
!173 = distinct !{!173, !174, !"BrotliWriteBits: argument 1"}
!174 = distinct !{!174, !"BrotliWriteBits"}
!175 = !{!176}
!176 = distinct !{!176, !174, !"BrotliWriteBits: argument 0"}
!177 = !{!176, !161}
!178 = !{!179}
!179 = distinct !{!179, !180, !"BrotliWriteBits: argument 0"}
!180 = distinct !{!180, !"BrotliWriteBits"}
!181 = !{!182}
!182 = distinct !{!182, !180, !"BrotliWriteBits: argument 1"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"BrotliWriteBits: argument 0"}
!185 = distinct !{!185, !"BrotliWriteBits"}
!186 = !{!187}
!187 = distinct !{!187, !185, !"BrotliWriteBits: argument 1"}
!188 = !{!189}
!189 = distinct !{!189, !190, !"BrotliWriteBits: argument 1"}
!190 = distinct !{!190, !"BrotliWriteBits"}
!191 = !{!192}
!192 = distinct !{!192, !190, !"BrotliWriteBits: argument 0"}
!193 = !{!194}
!194 = distinct !{!194, !195, !"BrotliWriteBits: argument 1"}
!195 = distinct !{!195, !"BrotliWriteBits"}
!196 = !{!197}
!197 = distinct !{!197, !195, !"BrotliWriteBits: argument 0"}
!198 = !{!197, !179}
!199 = !{!200}
!200 = distinct !{!200, !201, !"BrotliWriteBits: argument 0"}
!201 = distinct !{!201, !"BrotliWriteBits"}
!202 = !{!203}
!203 = distinct !{!203, !201, !"BrotliWriteBits: argument 1"}
!204 = !{!205}
!205 = distinct !{!205, !206, !"BrotliWriteBits: argument 1"}
!206 = distinct !{!206, !"BrotliWriteBits"}
!207 = !{!208}
!208 = distinct !{!208, !206, !"BrotliWriteBits: argument 0"}
!209 = !{!208, !197, !179}
!210 = !{!211}
!211 = distinct !{!211, !212, !"BrotliWriteBits: argument 0"}
!212 = distinct !{!212, !"BrotliWriteBits"}
!213 = !{!214}
!214 = distinct !{!214, !212, !"BrotliWriteBits: argument 1"}
!215 = !{!216, !211}
!216 = distinct !{!216, !217, !"BrotliWriteBits: argument 0"}
!217 = distinct !{!217, !"BrotliWriteBits"}
!218 = !{!219}
!219 = distinct !{!219, !220, !"BrotliWriteBits: argument 0"}
!220 = distinct !{!220, !"BrotliWriteBits"}
!221 = !{!222}
!222 = distinct !{!222, !220, !"BrotliWriteBits: argument 1"}
!223 = !{!224}
!224 = distinct !{!224, !225, !"BrotliWriteBits: argument 1"}
!225 = distinct !{!225, !"BrotliWriteBits"}
!226 = !{!227}
!227 = distinct !{!227, !225, !"BrotliWriteBits: argument 0"}
!228 = !{!229}
!229 = distinct !{!229, !217, !"BrotliWriteBits: argument 1"}
!230 = !{!216}
!231 = !{!232}
!232 = distinct !{!232, !233, !"BrotliWriteBits: argument 1"}
!233 = distinct !{!233, !"BrotliWriteBits"}
!234 = !{!235}
!235 = distinct !{!235, !233, !"BrotliWriteBits: argument 0"}
!236 = !{!237}
!237 = distinct !{!237, !238, !"BrotliWriteBits: argument 1"}
!238 = distinct !{!238, !"BrotliWriteBits"}
!239 = !{!240}
!240 = distinct !{!240, !238, !"BrotliWriteBits: argument 0"}
!241 = distinct !{!241, !242}
!242 = !{!"llvm.loop.isvectorized", i32 1}
!243 = distinct !{!243, !3}
!244 = distinct !{!244, !245, !242}
!245 = !{!"llvm.loop.unroll.runtime.disable"}
!246 = !{!247}
!247 = distinct !{!247, !248, !"BrotliWriteBits: argument 0"}
!248 = distinct !{!248, !"BrotliWriteBits"}
!249 = !{!250}
!250 = distinct !{!250, !248, !"BrotliWriteBits: argument 1"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"BrotliWriteBits: argument 0"}
!253 = distinct !{!253, !"BrotliWriteBits"}
!254 = !{!255}
!255 = distinct !{!255, !253, !"BrotliWriteBits: argument 1"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"BrotliWriteBits: argument 1"}
!258 = distinct !{!258, !"BrotliWriteBits"}
!259 = !{!260}
!260 = distinct !{!260, !258, !"BrotliWriteBits: argument 0"}
!261 = !{!262}
!262 = distinct !{!262, !263, !"BrotliWriteBits: argument 1"}
!263 = distinct !{!263, !"BrotliWriteBits"}
!264 = !{!265}
!265 = distinct !{!265, !263, !"BrotliWriteBits: argument 0"}
!266 = !{!267}
!267 = distinct !{!267, !268, !"BrotliWriteBits: argument 0"}
!268 = distinct !{!268, !"BrotliWriteBits"}
!269 = !{!270}
!270 = distinct !{!270, !268, !"BrotliWriteBits: argument 1"}
!271 = !{!272, !267}
!272 = distinct !{!272, !273, !"BrotliWriteBits: argument 0"}
!273 = distinct !{!273, !"BrotliWriteBits"}
!274 = !{!275}
!275 = distinct !{!275, !276, !"BrotliWriteBits: argument 0"}
!276 = distinct !{!276, !"BrotliWriteBits"}
!277 = !{!278}
!278 = distinct !{!278, !276, !"BrotliWriteBits: argument 1"}
!279 = !{!280}
!280 = distinct !{!280, !281, !"BrotliWriteBits: argument 1"}
!281 = distinct !{!281, !"BrotliWriteBits"}
!282 = !{!283}
!283 = distinct !{!283, !281, !"BrotliWriteBits: argument 0"}
!284 = !{!285}
!285 = distinct !{!285, !273, !"BrotliWriteBits: argument 1"}
!286 = !{!272}
!287 = !{!288}
!288 = distinct !{!288, !289, !"MoveToFrontTransform: argument 0"}
!289 = distinct !{!289, !"MoveToFrontTransform"}
!290 = distinct !{!290, !242}
!291 = distinct !{!291, !242}
!292 = distinct !{!292, !3}
!293 = distinct !{!293, !245, !242}
!294 = distinct !{!294, !245, !242}
!295 = distinct !{!295, !3}
!296 = !{!297}
!297 = distinct !{!297, !298, !"RunLengthCodeZeros: argument 0"}
!298 = distinct !{!298, !"RunLengthCodeZeros"}
!299 = !{!300, !301}
!300 = distinct !{!300, !298, !"RunLengthCodeZeros: argument 1"}
!301 = distinct !{!301, !298, !"RunLengthCodeZeros: argument 2"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"BrotliWriteBits: argument 0"}
!304 = distinct !{!304, !"BrotliWriteBits"}
!305 = !{!306}
!306 = distinct !{!306, !304, !"BrotliWriteBits: argument 1"}
!307 = !{!308}
!308 = distinct !{!308, !309, !"BrotliWriteBits: argument 1"}
!309 = distinct !{!309, !"BrotliWriteBits"}
!310 = !{!311}
!311 = distinct !{!311, !309, !"BrotliWriteBits: argument 0"}
!312 = !{!313}
!313 = distinct !{!313, !314, !"BrotliWriteBits: argument 1"}
!314 = distinct !{!314, !"BrotliWriteBits"}
!315 = !{!316}
!316 = distinct !{!316, !314, !"BrotliWriteBits: argument 0"}
!317 = !{!318}
!318 = distinct !{!318, !319, !"BrotliWriteBits: argument 1"}
!319 = distinct !{!319, !"BrotliWriteBits"}
!320 = !{!321}
!321 = distinct !{!321, !319, !"BrotliWriteBits: argument 0"}
!322 = !{!323}
!323 = distinct !{!323, !324, !"BrotliWriteBits: argument 1"}
!324 = distinct !{!324, !"BrotliWriteBits"}
!325 = !{!326}
!326 = distinct !{!326, !324, !"BrotliWriteBits: argument 0"}
!327 = !{!328}
!328 = distinct !{!328, !329, !"BrotliWriteBits: argument 0"}
!329 = distinct !{!329, !"BrotliWriteBits"}
!330 = !{!331}
!331 = distinct !{!331, !329, !"BrotliWriteBits: argument 1"}
!332 = !{!333}
!333 = distinct !{!333, !334, !"BrotliWriteBits: argument 1"}
!334 = distinct !{!334, !"BrotliWriteBits"}
!335 = !{!336}
!336 = distinct !{!336, !334, !"BrotliWriteBits: argument 0"}
!337 = !{!338}
!338 = distinct !{!338, !339, !"BrotliWriteBits: argument 1"}
!339 = distinct !{!339, !"BrotliWriteBits"}
!340 = !{!341}
!341 = distinct !{!341, !339, !"BrotliWriteBits: argument 0"}
!342 = !{!343}
!343 = distinct !{!343, !344, !"BrotliWriteBits: argument 0"}
!344 = distinct !{!344, !"BrotliWriteBits"}
!345 = !{!346}
!346 = distinct !{!346, !344, !"BrotliWriteBits: argument 1"}
!347 = !{!348}
!348 = distinct !{!348, !349, !"BrotliWriteBits: argument 0"}
!349 = distinct !{!349, !"BrotliWriteBits"}
!350 = !{!351}
!351 = distinct !{!351, !349, !"BrotliWriteBits: argument 1"}
!352 = !{!353}
!353 = distinct !{!353, !354, !"BrotliWriteBits: argument 1"}
!354 = distinct !{!354, !"BrotliWriteBits"}
!355 = !{!356}
!356 = distinct !{!356, !354, !"BrotliWriteBits: argument 0"}
!357 = !{!358}
!358 = distinct !{!358, !359, !"BrotliWriteBits: argument 1"}
!359 = distinct !{!359, !"BrotliWriteBits"}
!360 = !{!361}
!361 = distinct !{!361, !359, !"BrotliWriteBits: argument 0"}
!362 = !{!363}
!363 = distinct !{!363, !364, !"BrotliWriteBits: argument 0"}
!364 = distinct !{!364, !"BrotliWriteBits"}
!365 = !{!366}
!366 = distinct !{!366, !364, !"BrotliWriteBits: argument 1"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"BrotliWriteBits: argument 0"}
!369 = distinct !{!369, !"BrotliWriteBits"}
!370 = !{!371}
!371 = distinct !{!371, !369, !"BrotliWriteBits: argument 1"}
!372 = !{i64 0, i64 65}
!373 = !{!374}
!374 = distinct !{!374, !375, !"BrotliWriteBits: argument 0"}
!375 = distinct !{!375, !"BrotliWriteBits"}
!376 = !{!377}
!377 = distinct !{!377, !375, !"BrotliWriteBits: argument 1"}
!378 = !{!379}
!379 = distinct !{!379, !380, !"BrotliWriteBits: argument 1"}
!380 = distinct !{!380, !"BrotliWriteBits"}
!381 = !{!382}
!382 = distinct !{!382, !380, !"BrotliWriteBits: argument 0"}
!383 = !{!384}
!384 = distinct !{!384, !385, !"BrotliWriteBits: argument 0"}
!385 = distinct !{!385, !"BrotliWriteBits"}
!386 = !{!387}
!387 = distinct !{!387, !385, !"BrotliWriteBits: argument 1"}
!388 = !{!389}
!389 = distinct !{!389, !390, !"BrotliWriteBits: argument 1"}
!390 = distinct !{!390, !"BrotliWriteBits"}
!391 = !{!392}
!392 = distinct !{!392, !390, !"BrotliWriteBits: argument 0"}
!393 = !{!394}
!394 = distinct !{!394, !395, !"BrotliWriteBits: argument 1"}
!395 = distinct !{!395, !"BrotliWriteBits"}
!396 = !{!397}
!397 = distinct !{!397, !395, !"BrotliWriteBits: argument 0"}
!398 = !{!399}
!399 = distinct !{!399, !400, !"BrotliWriteBits: argument 1"}
!400 = distinct !{!400, !"BrotliWriteBits"}
!401 = !{!402}
!402 = distinct !{!402, !400, !"BrotliWriteBits: argument 0"}
!403 = !{!404}
!404 = distinct !{!404, !405, !"BrotliWriteBits: argument 1"}
!405 = distinct !{!405, !"BrotliWriteBits"}
!406 = !{!407}
!407 = distinct !{!407, !405, !"BrotliWriteBits: argument 0"}
!408 = !{!409}
!409 = distinct !{!409, !410, !"BrotliWriteBits: argument 1"}
!410 = distinct !{!410, !"BrotliWriteBits"}
!411 = !{!412}
!412 = distinct !{!412, !410, !"BrotliWriteBits: argument 0"}
!413 = !{!414}
!414 = distinct !{!414, !415, !"BrotliWriteBits: argument 1"}
!415 = distinct !{!415, !"BrotliWriteBits"}
!416 = !{!417}
!417 = distinct !{!417, !415, !"BrotliWriteBits: argument 0"}
!418 = !{!419}
!419 = distinct !{!419, !420, !"BrotliWriteBits: argument 1"}
!420 = distinct !{!420, !"BrotliWriteBits"}
!421 = !{!422}
!422 = distinct !{!422, !420, !"BrotliWriteBits: argument 0"}
!423 = !{!424}
!424 = distinct !{!424, !425, !"BrotliWriteBits: argument 1"}
!425 = distinct !{!425, !"BrotliWriteBits"}
!426 = !{!427}
!427 = distinct !{!427, !425, !"BrotliWriteBits: argument 0"}
!428 = !{!429}
!429 = distinct !{!429, !430, !"BrotliWriteBits: argument 0"}
!430 = distinct !{!430, !"BrotliWriteBits"}
!431 = !{!432}
!432 = distinct !{!432, !430, !"BrotliWriteBits: argument 1"}
!433 = !{!434}
!434 = distinct !{!434, !435, !"BrotliWriteBits: argument 1"}
!435 = distinct !{!435, !"BrotliWriteBits"}
!436 = !{!437}
!437 = distinct !{!437, !435, !"BrotliWriteBits: argument 0"}
!438 = !{!439}
!439 = distinct !{!439, !440, !"BrotliWriteBits: argument 1"}
!440 = distinct !{!440, !"BrotliWriteBits"}
!441 = !{!442}
!442 = distinct !{!442, !440, !"BrotliWriteBits: argument 0"}
!443 = !{!444}
!444 = distinct !{!444, !445, !"BrotliWriteBits: argument 1"}
!445 = distinct !{!445, !"BrotliWriteBits"}
!446 = !{!447}
!447 = distinct !{!447, !445, !"BrotliWriteBits: argument 0"}
!448 = !{!449}
!449 = distinct !{!449, !450, !"BrotliWriteBits: argument 1"}
!450 = distinct !{!450, !"BrotliWriteBits"}
!451 = !{!452}
!452 = distinct !{!452, !450, !"BrotliWriteBits: argument 0"}
!453 = !{!454}
!454 = distinct !{!454, !455, !"BrotliWriteBits: argument 0"}
!455 = distinct !{!455, !"BrotliWriteBits"}
!456 = !{!457}
!457 = distinct !{!457, !455, !"BrotliWriteBits: argument 1"}
!458 = !{!459}
!459 = distinct !{!459, !460, !"BrotliWriteBits: argument 0"}
!460 = distinct !{!460, !"BrotliWriteBits"}
!461 = !{!462}
!462 = distinct !{!462, !460, !"BrotliWriteBits: argument 1"}
!463 = !{!464}
!464 = distinct !{!464, !465, !"BrotliWriteBits: argument 1"}
!465 = distinct !{!465, !"BrotliWriteBits"}
!466 = !{!467}
!467 = distinct !{!467, !465, !"BrotliWriteBits: argument 0"}
!468 = !{!469}
!469 = distinct !{!469, !470, !"BrotliWriteBits: argument 1"}
!470 = distinct !{!470, !"BrotliWriteBits"}
!471 = !{!472}
!472 = distinct !{!472, !470, !"BrotliWriteBits: argument 0"}
!473 = !{!474}
!474 = distinct !{!474, !475, !"BrotliWriteBits: argument 0"}
!475 = distinct !{!475, !"BrotliWriteBits"}
!476 = !{!477}
!477 = distinct !{!477, !475, !"BrotliWriteBits: argument 1"}
!478 = !{!479}
!479 = distinct !{!479, !480, !"BrotliWriteBits: argument 1"}
!480 = distinct !{!480, !"BrotliWriteBits"}
!481 = !{!482}
!482 = distinct !{!482, !480, !"BrotliWriteBits: argument 0"}
!483 = !{!484}
!484 = distinct !{!484, !485, !"BrotliWriteBits: argument 1"}
!485 = distinct !{!485, !"BrotliWriteBits"}
!486 = !{!487}
!487 = distinct !{!487, !485, !"BrotliWriteBits: argument 0"}
!488 = !{!489}
!489 = distinct !{!489, !490, !"BrotliWriteBits: argument 1"}
!490 = distinct !{!490, !"BrotliWriteBits"}
!491 = !{!492}
!492 = distinct !{!492, !490, !"BrotliWriteBits: argument 0"}
!493 = !{!494}
!494 = distinct !{!494, !495, !"BrotliWriteBits: argument 1"}
!495 = distinct !{!495, !"BrotliWriteBits"}
!496 = !{!497}
!497 = distinct !{!497, !495, !"BrotliWriteBits: argument 0"}
!498 = !{!499}
!499 = distinct !{!499, !500, !"BrotliWriteBits: argument 1"}
!500 = distinct !{!500, !"BrotliWriteBits"}
!501 = !{!502}
!502 = distinct !{!502, !500, !"BrotliWriteBits: argument 0"}
