; ModuleID = '../../third_party/libwebp/src/dsp/alpha_processing_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/alpha_processing_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@WebPMultARGBRow = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@WebPMultRow = external local_unnamed_addr global void (i8*, i8*, i32, i32)*, align 8
@WebPApplyAlphaMultiply = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@WebPDispatchAlpha = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)*, align 8
@WebPDispatchAlphaToGreen = external local_unnamed_addr global void (i8*, i32, i32, i32, i32*, i32)*, align 8
@WebPExtractAlpha = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)*, align 8
@WebPHasAlpha8b = external local_unnamed_addr global i32 (i8*, i32)*, align 8
@WebPHasAlpha32b = external local_unnamed_addr global i32 (i8*, i32)*, align 8
@WebPAlphaReplace = external local_unnamed_addr global void (i32*, i32, i32)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @WebPInitAlphaProcessingSSE2() local_unnamed_addr #0 {
  store void (i32*, i32, i32)* @MultARGBRow_SSE2, void (i32*, i32, i32)** @WebPMultARGBRow, align 8
  store void (i8*, i8*, i32, i32)* @MultRow_SSE2, void (i8*, i8*, i32, i32)** @WebPMultRow, align 8
  store void (i8*, i32, i32, i32, i32)* @ApplyAlphaMultiply_SSE2, void (i8*, i32, i32, i32, i32)** @WebPApplyAlphaMultiply, align 8
  store i32 (i8*, i32, i32, i32, i8*, i32)* @DispatchAlpha_SSE2, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPDispatchAlpha, align 8
  store void (i8*, i32, i32, i32, i32*, i32)* @DispatchAlphaToGreen_SSE2, void (i8*, i32, i32, i32, i32*, i32)** @WebPDispatchAlphaToGreen, align 8
  store i32 (i8*, i32, i32, i32, i8*, i32)* @ExtractAlpha_SSE2, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  store i32 (i8*, i32)* @HasAlpha8b_SSE2, i32 (i8*, i32)** @WebPHasAlpha8b, align 8
  store i32 (i8*, i32)* @HasAlpha32b_SSE2, i32 (i8*, i32)** @WebPHasAlpha32b, align 8
  store void (i32*, i32, i32)* @AlphaReplace_SSE2, void (i32*, i32, i32)** @WebPAlphaReplace, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @MultARGBRow_SSE2(i32*, i32, i32) #1 {
  %4 = icmp ne i32 %2, 0
  %5 = icmp slt i32 %1, 2
  %6 = or i1 %4, %5
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = sext i32 %1 to i64
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ 0, %7 ], [ %30, %9 ]
  %11 = phi i64 [ 2, %7 ], [ %28, %9 ]
  %12 = getelementptr inbounds i32, i32* %0, i64 %10
  %13 = bitcast i32* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast <16 x i8> %17 to <8 x i16>
  %19 = or <8 x i16> %18, <i16 undef, i16 undef, i16 255, i16 0, i16 undef, i16 undef, i16 255, i16 0>
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 2, i32 undef, i32 undef, i32 6, i32 7>
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 6>
  %22 = mul <8 x i16> %21, %18
  %23 = add <8 x i16> %22, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %24 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %23, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #8
  %25 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %24, <8 x i16> undef) #8
  %26 = bitcast <16 x i8> %25 to <2 x i64>
  %27 = extractelement <2 x i64> %26, i32 0
  store i64 %27, i64* %13, align 1
  %28 = add nuw nsw i64 %11, 2
  %29 = icmp sgt i64 %28, %8
  %30 = add nuw nsw i64 %10, 2
  br i1 %29, label %31, label %9

31:                                               ; preds = %9
  %32 = and i32 %1, -2
  br label %33

33:                                               ; preds = %31, %3
  %34 = phi i32 [ 0, %3 ], [ %32, %31 ]
  %35 = sub nsw i32 %1, %34
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = zext i32 %34 to i64
  %39 = getelementptr inbounds i32, i32* %0, i64 %38
  tail call void @WebPMultARGBRow_C(i32* %39, i32 %35, i32 %2) #8
  br label %40

40:                                               ; preds = %37, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @MultRow_SSE2(i8*, i8*, i32, i32) #1 {
  %5 = icmp ne i32 %3, 0
  %6 = icmp slt i32 %2, 8
  %7 = or i1 %5, %6
  br i1 %7, label %38, label %8

8:                                                ; preds = %4
  %9 = sext i32 %2 to i64
  br label %10

10:                                               ; preds = %8, %10
  %11 = phi i64 [ 0, %8 ], [ %35, %10 ]
  %12 = phi i64 [ 8, %8 ], [ %33, %10 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %11
  %14 = bitcast i8* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = getelementptr inbounds i8, i8* %1, i64 %11
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %16 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <2 x i64> %20 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %22 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = mul <8 x i16> %26, %25
  %28 = add <8 x i16> %27, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %29 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %28, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #8
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %29, <8 x i16> undef) #8
  %31 = bitcast <16 x i8> %30 to <2 x i64>
  %32 = extractelement <2 x i64> %31, i32 0
  store i64 %32, i64* %14, align 1
  %33 = add nuw nsw i64 %12, 8
  %34 = icmp sgt i64 %33, %9
  %35 = add nuw nsw i64 %11, 8
  br i1 %34, label %36, label %10

36:                                               ; preds = %10
  %37 = and i32 %2, -8
  br label %38

38:                                               ; preds = %36, %4
  %39 = phi i32 [ 0, %4 ], [ %37, %36 ]
  %40 = sub nsw i32 %2, %39
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = zext i32 %39 to i64
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = getelementptr inbounds i8, i8* %1, i64 %43
  tail call void @WebPMultRow_C(i8* %44, i8* %45, i32 %40, i32 %3) #8
  br label %46

46:                                               ; preds = %42, %38
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @ApplyAlphaMultiply_SSE2(i8* nocapture, i32, i32, i32, i32) #2 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %126

7:                                                ; preds = %5
  %8 = icmp ne i32 %1, 0
  %9 = icmp slt i32 %2, 4
  %10 = zext i1 %8 to i64
  %11 = select i1 %8, i64 0, i64 3
  %12 = sext i32 %4 to i64
  %13 = sext i32 %2 to i64
  %14 = add i32 %2, -4
  %15 = and i32 %14, -4
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 4
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %17 to i32
  br label %20

20:                                               ; preds = %7, %123
  %21 = phi i32 [ %3, %7 ], [ %23, %123 ]
  %22 = phi i8* [ %0, %7 ], [ %124, %123 ]
  %23 = add nsw i32 %21, -1
  %24 = bitcast i8* %22 to i32*
  br i1 %8, label %26, label %25

25:                                               ; preds = %20
  br i1 %9, label %79, label %27

26:                                               ; preds = %20
  br i1 %9, label %79, label %53

27:                                               ; preds = %25, %27
  %28 = phi i64 [ %52, %27 ], [ 0, %25 ]
  %29 = phi i64 [ %50, %27 ], [ 4, %25 ]
  %30 = getelementptr inbounds i32, i32* %24, i64 %28
  %31 = bitcast i32* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = shufflevector <16 x i8> %32, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = or <8 x i16> %35, <i16 undef, i16 undef, i16 255, i16 0, i16 undef, i16 undef, i16 255, i16 0>
  %37 = shufflevector <8 x i16> %36, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 2, i32 undef, i32 undef, i32 6, i32 7>
  %38 = bitcast <16 x i8> %34 to <8 x i16>
  %39 = or <8 x i16> %38, <i16 undef, i16 undef, i16 255, i16 0, i16 undef, i16 undef, i16 255, i16 0>
  %40 = shufflevector <8 x i16> %39, <8 x i16> undef, <8 x i32> <i32 3, i32 3, i32 3, i32 2, i32 undef, i32 undef, i32 6, i32 7>
  %41 = shufflevector <8 x i16> %37, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 6>
  %42 = shufflevector <8 x i16> %40, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 6>
  %43 = mul <8 x i16> %41, %35
  %44 = mul <8 x i16> %42, %38
  %45 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %43, <8 x i16> <i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639>) #8
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %44, <8 x i16> <i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639>) #8
  %47 = lshr <8 x i16> %45, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %48 = lshr <8 x i16> %46, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %49 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %47, <8 x i16> %48) #8
  store <16 x i8> %49, <16 x i8>* %31, align 1
  %50 = add nuw nsw i64 %29, 4
  %51 = icmp sgt i64 %50, %13
  %52 = add nuw nsw i64 %28, 4
  br i1 %51, label %79, label %27

53:                                               ; preds = %26, %53
  %54 = phi i64 [ %78, %53 ], [ 0, %26 ]
  %55 = phi i64 [ %76, %53 ], [ 4, %26 ]
  %56 = getelementptr inbounds i32, i32* %24, i64 %54
  %57 = bitcast i32* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = shufflevector <16 x i8> %58, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = or <8 x i16> %61, <i16 0, i16 255, i16 undef, i16 undef, i16 0, i16 255, i16 undef, i16 undef>
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 undef, i32 undef>
  %64 = bitcast <16 x i8> %60 to <8 x i16>
  %65 = or <8 x i16> %64, <i16 0, i16 255, i16 undef, i16 undef, i16 0, i16 255, i16 undef, i16 undef>
  %66 = shufflevector <8 x i16> %65, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 undef, i32 undef>
  %67 = shufflevector <8 x i16> %63, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 4, i32 4>
  %68 = shufflevector <8 x i16> %66, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 4, i32 4>
  %69 = mul <8 x i16> %67, %61
  %70 = mul <8 x i16> %68, %64
  %71 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %69, <8 x i16> <i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639>) #8
  %72 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %70, <8 x i16> <i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639, i16 -32639>) #8
  %73 = lshr <8 x i16> %71, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %74 = lshr <8 x i16> %72, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %75 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %73, <8 x i16> %74) #8
  store <16 x i8> %75, <16 x i8>* %57, align 1
  %76 = add nuw nsw i64 %55, 4
  %77 = icmp sgt i64 %76, %13
  %78 = add nuw nsw i64 %54, 4
  br i1 %77, label %79, label %53

79:                                               ; preds = %27, %53, %25, %26
  %80 = phi i32 [ 0, %26 ], [ 0, %25 ], [ %19, %53 ], [ %18, %27 ]
  %81 = icmp slt i32 %80, %2
  br i1 %81, label %82, label %123

82:                                               ; preds = %79
  %83 = getelementptr inbounds i8, i8* %22, i64 %10
  %84 = getelementptr inbounds i8, i8* %22, i64 %11
  %85 = zext i32 %80 to i64
  br label %86

86:                                               ; preds = %82, %119
  %87 = phi i64 [ %85, %82 ], [ %120, %119 ]
  %88 = trunc i64 %87 to i32
  %89 = shl nsw i32 %88, 2
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %84, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, -1
  br i1 %93, label %119, label %94

94:                                               ; preds = %86
  %95 = zext i8 %92 to i32
  %96 = mul nuw nsw i32 %95, 32897
  %97 = getelementptr inbounds i8, i8* %83, i64 %90
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = mul nuw i32 %96, %99
  %101 = lshr i32 %100, 23
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %97, align 1
  %103 = or i32 %89, 1
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %83, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nuw i32 %96, %107
  %109 = lshr i32 %108, 23
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %105, align 1
  %111 = or i32 %89, 2
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %83, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nuw i32 %96, %115
  %117 = lshr i32 %116, 23
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %113, align 1
  br label %119

119:                                              ; preds = %86, %94
  %120 = add nuw nsw i64 %87, 1
  %121 = trunc i64 %120 to i32
  %122 = icmp slt i32 %121, %2
  br i1 %122, label %86, label %123

123:                                              ; preds = %119, %79
  %124 = getelementptr inbounds i8, i8* %22, i64 %12
  %125 = icmp sgt i32 %23, 0
  br i1 %125, label %20, label %126

126:                                              ; preds = %123, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @DispatchAlpha_SSE2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) #3 {
  %7 = add nsw i32 %2, -1
  %8 = and i32 %7, -8
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %103

10:                                               ; preds = %6
  %11 = icmp sgt i32 %8, 0
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = sext i32 %8 to i64
  %15 = zext i32 %2 to i64
  %16 = sub nsw i64 0, %15
  br label %17

17:                                               ; preds = %97, %10
  %18 = phi i8* [ %0, %10 ], [ %99, %97 ]
  %19 = phi i8* [ %4, %10 ], [ %100, %97 ]
  %20 = phi i32 [ 255, %10 ], [ %98, %97 ]
  %21 = phi i32 [ 0, %10 ], [ %101, %97 ]
  %22 = phi <2 x i64> [ <i64 -1, i64 0>, %10 ], [ %28, %97 ]
  br i1 %11, label %23, label %27

23:                                               ; preds = %17
  %24 = bitcast i8* %19 to <2 x i64>*
  br label %51

25:                                               ; preds = %51
  %26 = trunc i64 %75 to i32
  br label %27

27:                                               ; preds = %25, %17
  %28 = phi <2 x i64> [ %22, %17 ], [ %73, %25 ]
  %29 = phi i32 [ 0, %17 ], [ %26, %25 ]
  %30 = icmp slt i32 %29, %2
  br i1 %30, label %31, label %97

31:                                               ; preds = %27
  %32 = zext i32 %29 to i64
  %33 = sub nsw i64 %15, %32
  %34 = xor i64 %32, -1
  %35 = and i64 %33, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds i8, i8* %18, i64 %32
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i64 %32, 2
  %42 = and i64 %41, 4294967292
  %43 = getelementptr inbounds i8, i8* %19, i64 %42
  store i8 %39, i8* %43, align 1
  %44 = and i32 %20, %40
  %45 = add nuw nsw i64 %32, 1
  br label %46

46:                                               ; preds = %37, %31
  %47 = phi i32 [ %44, %37 ], [ undef, %31 ]
  %48 = phi i64 [ %45, %37 ], [ %32, %31 ]
  %49 = phi i32 [ %44, %37 ], [ %20, %31 ]
  %50 = icmp eq i64 %34, %16
  br i1 %50, label %97, label %77

51:                                               ; preds = %23, %51
  %52 = phi i64 [ 0, %23 ], [ %75, %51 ]
  %53 = phi <2 x i64> [ %22, %23 ], [ %73, %51 ]
  %54 = phi <2 x i64>* [ %24, %23 ], [ %74, %51 ]
  %55 = getelementptr inbounds i8, i8* %18, i64 %52
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = bitcast <2 x i64> %58 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %61 = bitcast <16 x i8> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %61, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %63 = bitcast <8 x i16> %62 to <2 x i64>
  %64 = shufflevector <8 x i16> %61, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %65 = bitcast <8 x i16> %64 to <2 x i64>
  %66 = load <2 x i64>, <2 x i64>* %54, align 1
  %67 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 1
  %68 = load <2 x i64>, <2 x i64>* %67, align 1
  %69 = and <2 x i64> %66, <i64 -1095216660736, i64 -1095216660736>
  %70 = and <2 x i64> %68, <i64 -1095216660736, i64 -1095216660736>
  %71 = or <2 x i64> %69, %63
  %72 = or <2 x i64> %70, %65
  store <2 x i64> %71, <2 x i64>* %54, align 1
  store <2 x i64> %72, <2 x i64>* %67, align 1
  %73 = and <2 x i64> %58, %53
  %74 = getelementptr inbounds <2 x i64>, <2 x i64>* %54, i64 2
  %75 = add nuw nsw i64 %52, 8
  %76 = icmp slt i64 %75, %14
  br i1 %76, label %51, label %25

77:                                               ; preds = %46, %77
  %78 = phi i64 [ %95, %77 ], [ %48, %46 ]
  %79 = phi i32 [ %94, %77 ], [ %49, %46 ]
  %80 = getelementptr inbounds i8, i8* %18, i64 %78
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i64 %78, 2
  %84 = and i64 %83, 4294967292
  %85 = getelementptr inbounds i8, i8* %19, i64 %84
  store i8 %81, i8* %85, align 1
  %86 = and i32 %79, %82
  %87 = add nuw nsw i64 %78, 1
  %88 = getelementptr inbounds i8, i8* %18, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = shl i64 %87, 2
  %92 = and i64 %91, 4294967292
  %93 = getelementptr inbounds i8, i8* %19, i64 %92
  store i8 %89, i8* %93, align 1
  %94 = and i32 %86, %90
  %95 = add nuw nsw i64 %78, 2
  %96 = icmp eq i64 %95, %15
  br i1 %96, label %97, label %77

97:                                               ; preds = %46, %77, %27
  %98 = phi i32 [ %20, %27 ], [ %47, %46 ], [ %94, %77 ]
  %99 = getelementptr inbounds i8, i8* %18, i64 %12
  %100 = getelementptr inbounds i8, i8* %19, i64 %13
  %101 = add nuw nsw i32 %21, 1
  %102 = icmp eq i32 %101, %3
  br i1 %102, label %103, label %17

103:                                              ; preds = %97, %6
  %104 = phi <2 x i64> [ <i64 -1, i64 0>, %6 ], [ %28, %97 ]
  %105 = phi i32 [ 255, %6 ], [ %98, %97 ]
  %106 = bitcast <2 x i64> %104 to <16 x i8>
  %107 = icmp eq <16 x i8> %106, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %108 = bitcast <16 x i1> %107 to i16
  %109 = zext i16 %108 to i32
  %110 = and i32 %105, %109
  %111 = icmp ne i32 %110, 255
  %112 = zext i1 %111 to i32
  ret i32 %112
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @DispatchAlphaToGreen_SSE2(i8* nocapture readonly, i32, i32, i32, i32* nocapture, i32) #3 {
  %7 = and i32 %2, -16
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %193

9:                                                ; preds = %6
  %10 = icmp sgt i32 %7, 0
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = sext i32 %7 to i64
  %14 = zext i32 %2 to i64
  br label %15

15:                                               ; preds = %187, %9
  %16 = phi i64 [ %192, %187 ], [ 0, %9 ]
  %17 = phi i8* [ %188, %187 ], [ %0, %9 ]
  %18 = phi i32* [ %189, %187 ], [ %4, %9 ]
  %19 = phi i32 [ %190, %187 ], [ 0, %9 ]
  %20 = mul i64 %16, %12
  %21 = getelementptr i32, i32* %4, i64 %20
  %22 = add i64 %20, %14
  %23 = getelementptr i32, i32* %4, i64 %22
  %24 = bitcast i32* %23 to i8*
  %25 = mul i64 %16, %11
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add i64 %25, %14
  %28 = getelementptr i8, i8* %0, i64 %27
  br i1 %10, label %134, label %31

29:                                               ; preds = %134
  %30 = trunc i64 %158 to i32
  br label %31

31:                                               ; preds = %29, %15
  %32 = phi i32 [ 0, %15 ], [ %30, %29 ]
  %33 = icmp slt i32 %32, %2
  br i1 %33, label %34, label %187

34:                                               ; preds = %31
  %35 = zext i32 %32 to i64
  %36 = sub nsw i64 %14, %35
  %37 = icmp ult i64 %36, 8
  br i1 %37, label %38, label %59

38:                                               ; preds = %132, %59, %34
  %39 = phi i64 [ %35, %59 ], [ %35, %34 ], [ %68, %132 ]
  %40 = sub nsw i64 %14, %39
  %41 = xor i64 %39, -1
  %42 = add nsw i64 %41, %14
  %43 = and i64 %40, 3
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %38, %45
  %46 = phi i64 [ %53, %45 ], [ %39, %38 ]
  %47 = phi i64 [ %54, %45 ], [ %43, %38 ]
  %48 = getelementptr inbounds i8, i8* %17, i64 %46
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = getelementptr inbounds i32, i32* %18, i64 %46
  store i32 %51, i32* %52, align 4
  %53 = add nuw nsw i64 %46, 1
  %54 = add i64 %47, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %45, !llvm.loop !2

56:                                               ; preds = %45, %38
  %57 = phi i64 [ %39, %38 ], [ %53, %45 ]
  %58 = icmp ult i64 %42, 3
  br i1 %58, label %187, label %160

59:                                               ; preds = %34
  %60 = getelementptr i32, i32* %21, i64 %35
  %61 = bitcast i32* %60 to i8*
  %62 = getelementptr i8, i8* %26, i64 %35
  %63 = icmp ugt i8* %28, %61
  %64 = icmp ult i8* %62, %24
  %65 = and i1 %63, %64
  br i1 %65, label %38, label %66

66:                                               ; preds = %59
  %67 = and i64 %36, -8
  %68 = add nsw i64 %67, %35
  %69 = add nsw i64 %67, -8
  %70 = lshr exact i64 %69, 3
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 1
  %73 = icmp eq i64 %69, 0
  br i1 %73, label %113, label %74

74:                                               ; preds = %66
  %75 = sub nuw nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %110, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %111, %76 ]
  %79 = add i64 %77, %35
  %80 = getelementptr inbounds i8, i8* %17, i64 %79
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1, !alias.scope !4
  %83 = getelementptr inbounds i8, i8* %80, i64 4
  %84 = bitcast i8* %83 to <4 x i8>*
  %85 = load <4 x i8>, <4 x i8>* %84, align 1, !alias.scope !4
  %86 = zext <4 x i8> %82 to <4 x i32>
  %87 = zext <4 x i8> %85 to <4 x i32>
  %88 = shl nuw nsw <4 x i32> %86, <i32 8, i32 8, i32 8, i32 8>
  %89 = shl nuw nsw <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %90 = getelementptr inbounds i32, i32* %18, i64 %79
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %91, align 4, !alias.scope !7, !noalias !4
  %92 = getelementptr inbounds i32, i32* %90, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !7, !noalias !4
  %94 = or i64 %77, 8
  %95 = add i64 %94, %35
  %96 = getelementptr inbounds i8, i8* %17, i64 %95
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1, !alias.scope !4
  %99 = getelementptr inbounds i8, i8* %96, i64 4
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1, !alias.scope !4
  %102 = zext <4 x i8> %98 to <4 x i32>
  %103 = zext <4 x i8> %101 to <4 x i32>
  %104 = shl nuw nsw <4 x i32> %102, <i32 8, i32 8, i32 8, i32 8>
  %105 = shl nuw nsw <4 x i32> %103, <i32 8, i32 8, i32 8, i32 8>
  %106 = getelementptr inbounds i32, i32* %18, i64 %95
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !7, !noalias !4
  %108 = getelementptr inbounds i32, i32* %106, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %109, align 4, !alias.scope !7, !noalias !4
  %110 = add i64 %77, 16
  %111 = add i64 %78, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %76, !llvm.loop !9

113:                                              ; preds = %76, %66
  %114 = phi i64 [ 0, %66 ], [ %110, %76 ]
  %115 = icmp eq i64 %72, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113
  %117 = add i64 %114, %35
  %118 = getelementptr inbounds i8, i8* %17, i64 %117
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1, !alias.scope !4
  %121 = getelementptr inbounds i8, i8* %118, i64 4
  %122 = bitcast i8* %121 to <4 x i8>*
  %123 = load <4 x i8>, <4 x i8>* %122, align 1, !alias.scope !4
  %124 = zext <4 x i8> %120 to <4 x i32>
  %125 = zext <4 x i8> %123 to <4 x i32>
  %126 = shl nuw nsw <4 x i32> %124, <i32 8, i32 8, i32 8, i32 8>
  %127 = shl nuw nsw <4 x i32> %125, <i32 8, i32 8, i32 8, i32 8>
  %128 = getelementptr inbounds i32, i32* %18, i64 %117
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !7, !noalias !4
  %130 = getelementptr inbounds i32, i32* %128, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 4, !alias.scope !7, !noalias !4
  br label %132

132:                                              ; preds = %113, %116
  %133 = icmp eq i64 %36, %67
  br i1 %133, label %187, label %38

134:                                              ; preds = %15, %134
  %135 = phi i64 [ %158, %134 ], [ 0, %15 ]
  %136 = getelementptr inbounds i8, i8* %17, i64 %135
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = shufflevector <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i8> %138, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %140 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %138, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %141 = bitcast <16 x i8> %139 to <8 x i16>
  %142 = shufflevector <8 x i16> %141, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %143 = bitcast <16 x i8> %140 to <8 x i16>
  %144 = shufflevector <8 x i16> %143, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %145 = shufflevector <8 x i16> %141, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %146 = shufflevector <8 x i16> %143, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %147 = getelementptr inbounds i32, i32* %18, i64 %135
  %148 = bitcast i32* %147 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %148, align 1
  %149 = or i64 %135, 4
  %150 = getelementptr inbounds i32, i32* %18, i64 %149
  %151 = bitcast i32* %150 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %151, align 1
  %152 = or i64 %135, 8
  %153 = getelementptr inbounds i32, i32* %18, i64 %152
  %154 = bitcast i32* %153 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %154, align 1
  %155 = or i64 %135, 12
  %156 = getelementptr inbounds i32, i32* %18, i64 %155
  %157 = bitcast i32* %156 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %157, align 1
  %158 = add nuw nsw i64 %135, 16
  %159 = icmp slt i64 %158, %13
  br i1 %159, label %134, label %29

160:                                              ; preds = %56, %160
  %161 = phi i64 [ %185, %160 ], [ %57, %56 ]
  %162 = getelementptr inbounds i8, i8* %17, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = shl nuw nsw i32 %164, 8
  %166 = getelementptr inbounds i32, i32* %18, i64 %161
  store i32 %165, i32* %166, align 4
  %167 = add nuw nsw i64 %161, 1
  %168 = getelementptr inbounds i8, i8* %17, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = shl nuw nsw i32 %170, 8
  %172 = getelementptr inbounds i32, i32* %18, i64 %167
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %161, 2
  %174 = getelementptr inbounds i8, i8* %17, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = shl nuw nsw i32 %176, 8
  %178 = getelementptr inbounds i32, i32* %18, i64 %173
  store i32 %177, i32* %178, align 4
  %179 = add nuw nsw i64 %161, 3
  %180 = getelementptr inbounds i8, i8* %17, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = shl nuw nsw i32 %182, 8
  %184 = getelementptr inbounds i32, i32* %18, i64 %179
  store i32 %183, i32* %184, align 4
  %185 = add nuw nsw i64 %161, 4
  %186 = icmp eq i64 %185, %14
  br i1 %186, label %187, label %160, !llvm.loop !11

187:                                              ; preds = %56, %160, %132, %31
  %188 = getelementptr inbounds i8, i8* %17, i64 %11
  %189 = getelementptr inbounds i32, i32* %18, i64 %12
  %190 = add nuw nsw i32 %19, 1
  %191 = icmp eq i32 %190, %3
  %192 = add i64 %16, 1
  br i1 %191, label %193, label %15

193:                                              ; preds = %187, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @ExtractAlpha_SSE2(i8* nocapture readonly, i32, i32, i32, i8* nocapture, i32) #2 {
  %7 = add nsw i32 %2, -1
  %8 = and i32 %7, -8
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %147

10:                                               ; preds = %6
  %11 = icmp sgt i32 %8, 0
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = sext i32 %8 to i64
  %15 = zext i32 %2 to i64
  %16 = add nsw i64 %14, -1
  %17 = lshr i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %17, 0
  %21 = sub nuw nsw i64 %18, %19
  %22 = icmp eq i64 %19, 0
  %23 = sub nsw i64 0, %15
  br label %24

24:                                               ; preds = %141, %10
  %25 = phi i8* [ %0, %10 ], [ %143, %141 ]
  %26 = phi i8* [ %4, %10 ], [ %144, %141 ]
  %27 = phi i32 [ 255, %10 ], [ %142, %141 ]
  %28 = phi i32 [ 0, %10 ], [ %145, %141 ]
  %29 = phi <2 x i64> [ <i64 -1, i64 0>, %10 ], [ %59, %141 ]
  br i1 %11, label %30, label %58

30:                                               ; preds = %24
  %31 = bitcast i8* %25 to <2 x i64>*
  br i1 %20, label %32, label %82

32:                                               ; preds = %82, %30
  %33 = phi <2 x i64> [ undef, %30 ], [ %116, %82 ]
  %34 = phi i64 [ undef, %30 ], [ %118, %82 ]
  %35 = phi i64 [ 0, %30 ], [ %118, %82 ]
  %36 = phi <2 x i64>* [ %31, %30 ], [ %117, %82 ]
  %37 = phi <2 x i64> [ %29, %30 ], [ %116, %82 ]
  br i1 %22, label %54, label %38

38:                                               ; preds = %32
  %39 = bitcast <2 x i64>* %36 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 1
  %41 = getelementptr inbounds <2 x i64>, <2 x i64>* %36, i64 1
  %42 = bitcast <2 x i64>* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 1
  %44 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %45 = and <4 x i32> %43, <i32 255, i32 255, i32 255, i32 255>
  %46 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %44, <4 x i32> %45) #8
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %46) #8
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = getelementptr inbounds i8, i8* %26, i64 %35
  %50 = extractelement <2 x i64> %48, i32 0
  %51 = bitcast i8* %49 to i64*
  store i64 %50, i64* %51, align 1
  %52 = add nuw nsw i64 %35, 8
  %53 = and <2 x i64> %37, %48
  br label %54

54:                                               ; preds = %32, %38
  %55 = phi <2 x i64> [ %33, %32 ], [ %53, %38 ]
  %56 = phi i64 [ %34, %32 ], [ %52, %38 ]
  %57 = trunc i64 %56 to i32
  br label %58

58:                                               ; preds = %54, %24
  %59 = phi <2 x i64> [ %29, %24 ], [ %55, %54 ]
  %60 = phi i32 [ 0, %24 ], [ %57, %54 ]
  %61 = icmp slt i32 %60, %2
  br i1 %61, label %62, label %141

62:                                               ; preds = %58
  %63 = zext i32 %60 to i64
  %64 = sub nsw i64 %15, %63
  %65 = xor i64 %63, -1
  %66 = and i64 %64, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %77, label %68

68:                                               ; preds = %62
  %69 = shl nuw nsw i64 %63, 2
  %70 = and i64 %69, 4294967292
  %71 = getelementptr inbounds i8, i8* %25, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = getelementptr inbounds i8, i8* %26, i64 %63
  store i8 %72, i8* %74, align 1
  %75 = and i32 %27, %73
  %76 = add nuw nsw i64 %63, 1
  br label %77

77:                                               ; preds = %68, %62
  %78 = phi i32 [ %75, %68 ], [ undef, %62 ]
  %79 = phi i64 [ %76, %68 ], [ %63, %62 ]
  %80 = phi i32 [ %75, %68 ], [ %27, %62 ]
  %81 = icmp eq i64 %65, %23
  br i1 %81, label %141, label %121

82:                                               ; preds = %30, %82
  %83 = phi i64 [ %118, %82 ], [ 0, %30 ]
  %84 = phi <2 x i64>* [ %117, %82 ], [ %31, %30 ]
  %85 = phi <2 x i64> [ %116, %82 ], [ %29, %30 ]
  %86 = phi i64 [ %119, %82 ], [ %21, %30 ]
  %87 = bitcast <2 x i64>* %84 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 1
  %89 = getelementptr inbounds <2 x i64>, <2 x i64>* %84, i64 1
  %90 = bitcast <2 x i64>* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 1
  %92 = and <4 x i32> %88, <i32 255, i32 255, i32 255, i32 255>
  %93 = and <4 x i32> %91, <i32 255, i32 255, i32 255, i32 255>
  %94 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %92, <4 x i32> %93) #8
  %95 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %94, <8 x i16> %94) #8
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = getelementptr inbounds i8, i8* %26, i64 %83
  %98 = extractelement <2 x i64> %96, i32 0
  %99 = bitcast i8* %97 to i64*
  store i64 %98, i64* %99, align 1
  %100 = and <2 x i64> %85, %96
  %101 = getelementptr inbounds <2 x i64>, <2 x i64>* %84, i64 2
  %102 = or i64 %83, 8
  %103 = bitcast <2 x i64>* %101 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 1
  %105 = getelementptr inbounds <2 x i64>, <2 x i64>* %84, i64 3
  %106 = bitcast <2 x i64>* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 1
  %108 = and <4 x i32> %104, <i32 255, i32 255, i32 255, i32 255>
  %109 = and <4 x i32> %107, <i32 255, i32 255, i32 255, i32 255>
  %110 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %108, <4 x i32> %109) #8
  %111 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %110, <8 x i16> %110) #8
  %112 = bitcast <16 x i8> %111 to <2 x i64>
  %113 = getelementptr inbounds i8, i8* %26, i64 %102
  %114 = extractelement <2 x i64> %112, i32 0
  %115 = bitcast i8* %113 to i64*
  store i64 %114, i64* %115, align 1
  %116 = and <2 x i64> %100, %112
  %117 = getelementptr inbounds <2 x i64>, <2 x i64>* %84, i64 4
  %118 = add nuw nsw i64 %83, 16
  %119 = add i64 %86, -2
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %32, label %82

121:                                              ; preds = %77, %121
  %122 = phi i64 [ %139, %121 ], [ %79, %77 ]
  %123 = phi i32 [ %138, %121 ], [ %80, %77 ]
  %124 = shl i64 %122, 2
  %125 = and i64 %124, 4294967292
  %126 = getelementptr inbounds i8, i8* %25, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds i8, i8* %26, i64 %122
  store i8 %127, i8* %129, align 1
  %130 = and i32 %123, %128
  %131 = add nuw nsw i64 %122, 1
  %132 = shl i64 %131, 2
  %133 = and i64 %132, 4294967292
  %134 = getelementptr inbounds i8, i8* %25, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds i8, i8* %26, i64 %131
  store i8 %135, i8* %137, align 1
  %138 = and i32 %130, %136
  %139 = add nuw nsw i64 %122, 2
  %140 = icmp eq i64 %139, %15
  br i1 %140, label %141, label %121

141:                                              ; preds = %77, %121, %58
  %142 = phi i32 [ %27, %58 ], [ %78, %77 ], [ %138, %121 ]
  %143 = getelementptr inbounds i8, i8* %25, i64 %12
  %144 = getelementptr inbounds i8, i8* %26, i64 %13
  %145 = add nuw nsw i32 %28, 1
  %146 = icmp eq i32 %145, %3
  br i1 %146, label %147, label %24

147:                                              ; preds = %141, %6
  %148 = phi <2 x i64> [ <i64 -1, i64 0>, %6 ], [ %59, %141 ]
  %149 = phi i32 [ 255, %6 ], [ %142, %141 ]
  %150 = bitcast <2 x i64> %148 to <16 x i8>
  %151 = icmp eq <16 x i8> %150, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %152 = bitcast <16 x i1> %151 to i16
  %153 = zext i16 %152 to i32
  %154 = and i32 %149, %153
  %155 = icmp eq i32 %154, 255
  %156 = zext i1 %155 to i32
  ret i32 %156
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @HasAlpha8b_SSE2(i8* nocapture readonly, i32) #4 {
  br label %3

3:                                                ; preds = %14, %2
  %4 = phi i64 [ %5, %14 ], [ 0, %2 ]
  %5 = add nuw i64 %4, 16
  %6 = trunc i64 %5 to i32
  %7 = icmp sgt i32 %6, %1
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = trunc i64 %4 to i32
  %10 = icmp slt i32 %9, %1
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  %12 = and i64 %4, 4294967280
  %13 = zext i32 %1 to i64
  br label %23

14:                                               ; preds = %3
  %15 = getelementptr inbounds i8, i8* %0, i64 %4
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = icmp eq <16 x i8> %17, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = bitcast <16 x i1> %18 to i16
  %20 = icmp eq i16 %19, -1
  br i1 %20, label %3, label %29

21:                                               ; preds = %23
  %22 = icmp eq i64 %28, %13
  br i1 %22, label %29, label %23

23:                                               ; preds = %21, %11
  %24 = phi i64 [ %12, %11 ], [ %28, %21 ]
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, -1
  %28 = add nuw nsw i64 %24, 1
  br i1 %27, label %21, label %29

29:                                               ; preds = %14, %23, %21, %8
  %30 = phi i32 [ 0, %8 ], [ 1, %23 ], [ 0, %21 ], [ 1, %14 ]
  ret i32 %30
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @HasAlpha32b_SSE2(i8* nocapture readonly, i32) #5 {
  %3 = shl nsw i32 %1, 2
  %4 = add nsw i32 %3, -3
  br label %5

5:                                                ; preds = %12, %2
  %6 = phi i64 [ %7, %12 ], [ 0, %2 ]
  %7 = add nuw i64 %6, 64
  %8 = trunc i64 %7 to i32
  %9 = icmp slt i32 %4, %8
  br i1 %9, label %10, label %12

10:                                               ; preds = %5
  %11 = and i64 %6, 4294967232
  br label %35

12:                                               ; preds = %5
  %13 = getelementptr inbounds i8, i8* %0, i64 %6
  %14 = bitcast i8* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 16
  %17 = bitcast i8* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 1
  %19 = getelementptr inbounds i8, i8* %13, i64 32
  %20 = bitcast i8* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 1
  %22 = getelementptr inbounds i8, i8* %13, i64 48
  %23 = bitcast i8* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 1
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = and <4 x i32> %18, <i32 255, i32 255, i32 255, i32 255>
  %27 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %25, <4 x i32> %26) #8
  %28 = and <4 x i32> %21, <i32 255, i32 255, i32 255, i32 255>
  %29 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %30 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %28, <4 x i32> %29) #8
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %27, <8 x i16> %30) #8
  %32 = icmp eq <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %33 = bitcast <16 x i1> %32 to i16
  %34 = icmp eq i16 %33, -1
  br i1 %34, label %5, label %68

35:                                               ; preds = %10, %45
  %36 = phi i64 [ %11, %10 ], [ %37, %45 ]
  %37 = add nuw i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = icmp slt i32 %4, %38
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = trunc i64 %36 to i32
  %42 = icmp slt i32 %4, %41
  br i1 %42, label %68, label %43

43:                                               ; preds = %40
  %44 = and i64 %36, 4294967295
  br label %62

45:                                               ; preds = %35
  %46 = getelementptr inbounds i8, i8* %0, i64 %36
  %47 = bitcast i8* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %46, i64 16
  %50 = bitcast i8* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 1
  %52 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %53 = and <4 x i32> %51, <i32 255, i32 255, i32 255, i32 255>
  %54 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %52, <4 x i32> %53) #8
  %55 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %54) #8
  %56 = icmp eq <16 x i8> %55, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = bitcast <16 x i1> %56 to i16
  %58 = icmp eq i16 %57, -1
  br i1 %58, label %35, label %68

59:                                               ; preds = %62
  %60 = trunc i64 %67 to i32
  %61 = icmp slt i32 %4, %60
  br i1 %61, label %68, label %62

62:                                               ; preds = %43, %59
  %63 = phi i64 [ %44, %43 ], [ %67, %59 ]
  %64 = getelementptr inbounds i8, i8* %0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, -1
  %67 = add nuw i64 %63, 4
  br i1 %66, label %59, label %68

68:                                               ; preds = %12, %45, %62, %59, %40
  %69 = phi i32 [ 0, %40 ], [ 1, %62 ], [ 0, %59 ], [ 1, %45 ], [ 1, %12 ]
  ret i32 %69
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @AlphaReplace_SSE2(i32* nocapture, i32, i32) #3 {
  %4 = insertelement <4 x i32> undef, i32 %2, i32 0
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <4 x i32> zeroinitializer
  %6 = icmp slt i32 %1, 8
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = sext i32 %1 to i64
  br label %77

9:                                                ; preds = %77
  %10 = and i32 %1, -8
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %13 = icmp slt i32 %12, %1
  br i1 %13, label %14, label %116

14:                                               ; preds = %11
  %15 = zext i32 %12 to i64
  %16 = zext i32 %1 to i64
  %17 = sub nsw i64 %16, %15
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %19, label %21

19:                                               ; preds = %75, %14
  %20 = phi i64 [ %15, %14 ], [ %23, %75 ]
  br label %107

21:                                               ; preds = %14
  %22 = and i64 %17, -8
  %23 = add nsw i64 %22, %15
  br label %24

24:                                               ; preds = %72, %21
  %25 = phi i64 [ 0, %21 ], [ %73, %72 ]
  %26 = add i64 %25, %15
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4
  %30 = getelementptr inbounds i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = icmp ult <4 x i32> %29, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %34 = icmp ult <4 x i32> %32, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %35 = extractelement <4 x i1> %33, i32 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %24
  store i32 %2, i32* %27, align 4
  br label %37

37:                                               ; preds = %36, %24
  %38 = extractelement <4 x i1> %33, i32 1
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  %40 = or i64 %26, 1
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  store i32 %2, i32* %41, align 4
  br label %42

42:                                               ; preds = %39, %37
  %43 = extractelement <4 x i1> %33, i32 2
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = or i64 %26, 2
  %46 = getelementptr inbounds i32, i32* %0, i64 %45
  store i32 %2, i32* %46, align 4
  br label %47

47:                                               ; preds = %44, %42
  %48 = extractelement <4 x i1> %33, i32 3
  br i1 %48, label %49, label %52

49:                                               ; preds = %47
  %50 = or i64 %26, 3
  %51 = getelementptr inbounds i32, i32* %0, i64 %50
  store i32 %2, i32* %51, align 4
  br label %52

52:                                               ; preds = %49, %47
  %53 = extractelement <4 x i1> %34, i32 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = or i64 %26, 4
  %56 = getelementptr inbounds i32, i32* %0, i64 %55
  store i32 %2, i32* %56, align 4
  br label %57

57:                                               ; preds = %54, %52
  %58 = extractelement <4 x i1> %34, i32 1
  br i1 %58, label %59, label %62

59:                                               ; preds = %57
  %60 = or i64 %26, 5
  %61 = getelementptr inbounds i32, i32* %0, i64 %60
  store i32 %2, i32* %61, align 4
  br label %62

62:                                               ; preds = %59, %57
  %63 = extractelement <4 x i1> %34, i32 2
  br i1 %63, label %64, label %67

64:                                               ; preds = %62
  %65 = or i64 %26, 6
  %66 = getelementptr inbounds i32, i32* %0, i64 %65
  store i32 %2, i32* %66, align 4
  br label %67

67:                                               ; preds = %64, %62
  %68 = extractelement <4 x i1> %34, i32 3
  br i1 %68, label %69, label %72

69:                                               ; preds = %67
  %70 = or i64 %26, 7
  %71 = getelementptr inbounds i32, i32* %0, i64 %70
  store i32 %2, i32* %71, align 4
  br label %72

72:                                               ; preds = %69, %67
  %73 = add i64 %25, 8
  %74 = icmp eq i64 %73, %22
  br i1 %74, label %75, label %24, !llvm.loop !12

75:                                               ; preds = %72
  %76 = icmp eq i64 %17, %22
  br i1 %76, label %116, label %19

77:                                               ; preds = %7, %77
  %78 = phi i64 [ 0, %7 ], [ %106, %77 ]
  %79 = phi i64 [ 8, %7 ], [ %104, %77 ]
  %80 = getelementptr inbounds i32, i32* %0, i64 %78
  %81 = bitcast i32* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 1
  %83 = getelementptr inbounds i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 1
  %86 = bitcast <2 x i64> %82 to <4 x i32>
  %87 = bitcast <2 x i64> %85 to <4 x i32>
  %88 = icmp ult <4 x i32> %86, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %89 = sext <4 x i1> %88 to <4 x i32>
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = icmp ult <4 x i32> %87, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = and <4 x i32> %5, %89
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = and <4 x i32> %5, %92
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = xor <2 x i64> %90, <i64 -1, i64 -1>
  %99 = and <2 x i64> %82, %98
  %100 = xor <2 x i64> %93, <i64 -1, i64 -1>
  %101 = and <2 x i64> %85, %100
  %102 = or <2 x i64> %99, %95
  store <2 x i64> %102, <2 x i64>* %81, align 1
  %103 = or <2 x i64> %101, %97
  store <2 x i64> %103, <2 x i64>* %84, align 1
  %104 = add nuw nsw i64 %79, 8
  %105 = icmp sgt i64 %104, %8
  %106 = add nuw nsw i64 %78, 8
  br i1 %105, label %9, label %77

107:                                              ; preds = %19, %113
  %108 = phi i64 [ %114, %113 ], [ %20, %19 ]
  %109 = getelementptr inbounds i32, i32* %0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = icmp ult i32 %110, 16777216
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  store i32 %2, i32* %109, align 4
  br label %113

113:                                              ; preds = %107, %112
  %114 = add nuw nsw i64 %108, 1
  %115 = icmp eq i64 %114, %16
  br i1 %115, label %116, label %107, !llvm.loop !13

116:                                              ; preds = %113, %75, %11
  ret void
}

declare void @WebPMultARGBRow_C(i32*, i32, i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #7

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #7

declare void @WebPMultRow_C(i8*, i8*, i32, i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !14, !10}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
