; ModuleID = '../../third_party/angle/src/compiler/translator/tree_util/RewriteSampleMaskVariable.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_util/RewriteSampleMaskVariable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.29, i32 }
%union.anon.29 = type { i32 }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TIntermSymbol"**, %"class.sh::ImmutableString" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.30", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.37", %"class.std::__1::vector.44", %"class.sh::TVector", %"class.std::__1::vector.51" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.32" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.39" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.67", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.69" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.58", i8, [7 x i8] }>
%"class.sh::TVector.58" = type { %"class.std::__1::vector.59" }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i32*, i32*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i32* }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.66"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.66" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@.str = private unnamed_addr constant [14 x i8] c"gl_SampleMask\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"gl_SampleMaskIn\00", align 1
@_ZTVN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"*)* @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh17RewriteSampleMaskEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::TIntermSymbol"*, align 8
  %6 = alloca %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", align 8
  %7 = alloca %"class.sh::ImmutableString", align 8
  %8 = bitcast %"class.sh::TIntermSymbol"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  %9 = bitcast %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 176, i1 false)
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %10, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #6
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6, i64 0, i32 1
  store %"class.sh::TIntermSymbol"** %5, %"class.sh::TIntermSymbol"*** %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6, i64 0, i32 2, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8** %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %6, i64 0, i32 2, i32 1
  store i64 13, i64* %14, align 8
  store %"class.sh::TIntermSymbol"* null, %"class.sh::TIntermSymbol"** %5, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %10) #6
  %15 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %16 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %10, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %15) #6
  br i1 %16, label %17, label %77

17:                                               ; preds = %4
  %18 = load %"class.sh::TIntermSymbol"*, %"class.sh::TIntermSymbol"** %5, align 8
  %19 = icmp eq %"class.sh::TIntermSymbol"* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %18, i64 0, i32 1
  %22 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %21, align 8
  br label %29

23:                                               ; preds = %17
  %24 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #6
  %25 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8** %25, align 8
  %26 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  store i64 13, i64* %26, align 8
  %27 = call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %2, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %7, i32 320) #6
  %28 = bitcast %"class.sh::TSymbol"* %27 to %"class.sh::TVariable"*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #6
  br label %29

29:                                               ; preds = %23, %20
  %30 = phi %"class.sh::TVariable"* [ %22, %20 ], [ %28, %23 ]
  %31 = icmp eq %"class.sh::TVariable"* %30, null
  br i1 %31, label %77, label %32

32:                                               ; preds = %29
  %33 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %34 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %33, i64 32) #6
  %35 = bitcast i8* %34 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %35, %"class.sh::TVariable"* nonnull %30) #6
  %36 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 1) #6
  %37 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %38 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %37, i64 240) #6
  %39 = bitcast i8* %38 to %"class.sh::TIntermBinary"*
  %40 = bitcast %"class.sh::TIntermTyped"* %3 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %41 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %40, align 8
  %42 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %41, i64 23
  %43 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %42, align 8
  %44 = call %"class.sh::TIntermTyped"* %43(%"class.sh::TIntermTyped"* %3) #6
  %45 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %36, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %39, i8 zeroext 18, %"class.sh::TIntermTyped"* %44, %"class.sh::TIntermTyped"* %45) #6
  %46 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %47 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %46, i64 64) #6
  %48 = bitcast i8* %47 to %"class.sh::TIntermBlock"*
  %49 = bitcast i8* %47 to i32 (...)***
  %50 = getelementptr inbounds i8, i8* %47, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 16, i1 false) #6
  %51 = getelementptr inbounds i8, i8* %47, i64 24
  %52 = bitcast i8* %51 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %52, align 8
  %53 = getelementptr inbounds i8, i8* %47, i64 32
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 25, i1 false) #6
  %54 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %55 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %54, i64 240) #6
  %56 = bitcast i8* %55 to %"class.sh::TIntermBinary"*
  %57 = bitcast i8* %34 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %58 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %57, align 8
  %59 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %58, i64 23
  %60 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %59, align 8
  %61 = call %"class.sh::TIntermTyped"* %60(%"class.sh::TIntermSymbol"* %35) #6
  %62 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #6
  %63 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %62, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %56, i8 zeroext 44, %"class.sh::TIntermTyped"* %61, %"class.sh::TIntermTyped"* %63) #6
  %64 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 -1) #6
  %65 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %66 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %65, i64 240) #6
  %67 = bitcast i8* %66 to %"class.sh::TIntermBinary"*
  %68 = bitcast i8* %55 to %"class.sh::TIntermTyped"*
  %69 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %64, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %67, i8 zeroext -118, %"class.sh::TIntermTyped"* %68, %"class.sh::TIntermTyped"* %69) #6
  %70 = bitcast i8* %66 to %"class.sh::TIntermNode"*
  call void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"* %48, %"class.sh::TIntermNode"* %70) #6
  %71 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %72 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %71, i64 48) #6
  %73 = bitcast i8* %72 to %"class.sh::TIntermIfElse"*
  %74 = bitcast i8* %38 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* %73, %"class.sh::TIntermTyped"* %74, %"class.sh::TIntermBlock"* %48, %"class.sh::TIntermBlock"* null) #6
  %75 = bitcast i8* %72 to %"class.sh::TIntermNode"*
  %76 = call zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermNode"* %75, %"class.sh::TSymbolTable"* %2) #6
  br label %77

77:                                               ; preds = %32, %29, %4
  %78 = phi i1 [ false, %4 ], [ %76, %32 ], [ false, %29 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  ret i1 %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare void @_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh19RunAtTheEndOfShaderEPNS_9TCompilerEPNS_12TIntermBlockEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh19RewriteSampleMaskInEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::TIntermSymbol"*, align 8
  %5 = alloca %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", align 8
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = bitcast %"class.sh::TIntermSymbol"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  %8 = bitcast %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 176, i1 false)
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %9, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #6
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5, i64 0, i32 1
  store %"class.sh::TIntermSymbol"** %4, %"class.sh::TIntermSymbol"*** %11, align 8
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5, i64 0, i32 2, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %5, i64 0, i32 2, i32 1
  store i64 15, i64* %13, align 8
  store %"class.sh::TIntermSymbol"* null, %"class.sh::TIntermSymbol"** %4, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %9) #6
  %14 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %15 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %9, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %14) #6
  br i1 %15, label %16, label %22

16:                                               ; preds = %3
  %17 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #6
  %18 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8** %18, align 8
  %19 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  store i64 15, i64* %19, align 8
  %20 = call %"class.sh::TSymbol"* @_ZNK2sh12TSymbolTable11findBuiltInERKNS_15ImmutableStringEi(%"class.sh::TSymbolTable"* %2, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, i32 320) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #6
  %21 = icmp ne %"class.sh::TSymbol"* %20, null
  br label %22

22:                                               ; preds = %16, %3
  %23 = phi i1 [ false, %3 ], [ %21, %16 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  ret i1 %23
}

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverserD0Ev(%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 1
  %5 = load i8, i8* %4, align 8
  %6 = and i8 %5, -2
  %7 = icmp eq i8 %6, 44
  br i1 %7, label %8, label %61

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 2
  %10 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %10, i64 0, i32 0
  %12 = bitcast %"class.sh::TIntermTyped"* %10 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %13 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %13, i64 19
  %15 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %14, align 8
  %16 = tail call %"class.sh::TIntermSymbol"* %15(%"class.sh::TIntermNode"* %11) #6
  %17 = icmp eq %"class.sh::TIntermSymbol"* %16, null
  br i1 %17, label %61, label %18

18:                                               ; preds = %8
  %19 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %16) #6
  %20 = extractvalue { i8*, i64 } %19, 0
  %21 = extractvalue { i8*, i64 } %19, 1
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 2, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %21, %23
  br i1 %24, label %25, label %61

25:                                               ; preds = %18
  %26 = icmp eq i8* %20, null
  %27 = select i1 %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %20
  %28 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 2, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  %31 = select i1 %30, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %29
  %32 = tail call i32 @bcmp(i8* %27, i8* %31, i64 %21) #6
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %61

34:                                               ; preds = %25
  %35 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 3
  %36 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %35, align 8
  %37 = bitcast %"class.sh::TIntermTyped"* %36 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %38 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %38, i64 29
  %40 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %39, align 8
  %41 = tail call %"class.sh::TConstantUnion"* %40(%"class.sh::TIntermTyped"* %36) #6
  %42 = icmp eq %"class.sh::TConstantUnion"* %41, null
  br i1 %42, label %43, label %61

43:                                               ; preds = %34
  %44 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %35, align 8
  %45 = bitcast %"class.sh::TIntermTyped"* %44 to i1 (%"class.sh::TIntermTyped"*)***
  %46 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %45, align 8
  %47 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %46, i64 30
  %48 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %47, align 8
  %49 = tail call zeroext i1 %48(%"class.sh::TIntermTyped"* %44) #6
  br i1 %49, label %50, label %54

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 0
  %52 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %35, align 8
  %53 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %52, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %51, %"class.sh::TIntermNode"* %53) #6
  br label %54

54:                                               ; preds = %50, %43
  %55 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 0
  %56 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %35, align 8
  %58 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %57, i64 0, i32 0
  %59 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #6
  %60 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %59, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %55, %"class.sh::TIntermNode"* %56, %"class.sh::TIntermNode"* %58, %"class.sh::TIntermNode"* %60, i32 1) #6
  br label %61

61:                                               ; preds = %25, %18, %3, %8, %34, %54
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_137GLSampleMaskRelatedReferenceTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* nocapture readonly, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %5 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %5, i64 27
  %7 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %6, align 8
  %8 = tail call %"class.sh::TVector"* %7(%"class.sh::TIntermDeclaration"* %2) #6
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %8, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.sh::TVector"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = icmp eq i64 %14, 8
  br i1 %15, label %16, label %50

16:                                               ; preds = %3
  %17 = inttoptr i64 %13 to %"class.sh::TIntermNode"**
  %18 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"* %18 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %20 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %20, i64 4
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %21, align 8
  %23 = tail call %"class.sh::TIntermTyped"* %22(%"class.sh::TIntermNode"* %18) #6
  %24 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %23, i64 0, i32 0
  %25 = bitcast %"class.sh::TIntermTyped"* %23 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %26 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %26, i64 19
  %28 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermSymbol"* %28(%"class.sh::TIntermNode"* %24) #6
  %30 = icmp eq %"class.sh::TIntermSymbol"* %29, null
  br i1 %30, label %50, label %31

31:                                               ; preds = %16
  %32 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %29) #6
  %33 = extractvalue { i8*, i64 } %32, 0
  %34 = extractvalue { i8*, i64 } %32, 1
  %35 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 2, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %34, %36
  br i1 %37, label %38, label %50

38:                                               ; preds = %31
  %39 = icmp eq i8* %33, null
  %40 = select i1 %39, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %33
  %41 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 2, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  %44 = select i1 %43, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* %42
  %45 = tail call i32 @bcmp(i8* %40, i8* %44, i64 %34) #6
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser", %"class.sh::(anonymous namespace)::GLSampleMaskRelatedReferenceTraverser"* %0, i64 0, i32 1
  %49 = load %"class.sh::TIntermSymbol"**, %"class.sh::TIntermSymbol"*** %48, align 8
  store %"class.sh::TIntermSymbol"* %29, %"class.sh::TIntermSymbol"** %49, align 8
  br label %50

50:                                               ; preds = %38, %31, %16, %47, %3
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
