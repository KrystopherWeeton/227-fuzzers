; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/l2norm.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/l2norm.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteL2NormParams = type { i32 }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.tflite::L2NormalizationParams" = type { i32 }

$_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

$_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa = comdat any

$_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_ = comdat any

$_ZN6tflite13optimized_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [63 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/l2norm.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"NumDimensions(input) <= 4\00", align 1
@.str.9 = private unnamed_addr constant [94 x i8] c"output->type == kTfLiteFloat32 || output->type == kTfLiteUInt8 || output->type == kTfLiteInt8\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"output->type\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"output->params.scale\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"(1. / 128.)\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"output->params.zero_point\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"128\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"params->activation\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"kTfLiteActNone\00", align 1
@_ZZN6tflite3ops7builtin19Register_L2NORM_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6l2norm7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin27Register_L2NORM_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6l2norm7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.21 = private unnamed_addr constant [35 x i8] c"Output type is %s, requires float.\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin6l2norm7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteL2NormParams**
  %5 = load %struct.TfLiteL2NormParams*, %struct.TfLiteL2NormParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %7 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %6, align 8
  %8 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %13 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %12, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %13(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 44, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %9, i32 1) #9
  br label %104

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 45, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %18, i32 1) #9
  br label %104

23:                                               ; preds = %14
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %7, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %23, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %23 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %45 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %44, align 8
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %47, 5
  br i1 %48, label %52, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 50, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %104

52:                                               ; preds = %42
  %53 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  switch i32 %54, label %55 [
    i32 1, label %58
    i32 3, label %58
    i32 9, label %58
  ]

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %57 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %56, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %57(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.9, i64 0, i64 0)) #9
  br label %104

58:                                               ; preds = %52, %52, %52
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, %54
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %64 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %63, align 8
  %65 = tail call i8* @TfLiteTypeGetName(i32 %60) #9
  %66 = load i32, i32* %53, align 8
  %67 = tail call i8* @TfLiteTypeGetName(i32 %66) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %64(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i8* %65, i8* %67) #9
  br label %104

68:                                               ; preds = %58
  switch i32 %54, label %92 [
    i32 3, label %69
    i32 9, label %69
  ]

69:                                               ; preds = %68, %68
  %70 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 0
  %71 = load float, float* %70, align 8
  %72 = fcmp une float %71, 7.812500e-03
  br i1 %72, label %73, label %77

73:                                               ; preds = %69
  %74 = fpext float %71 to double
  %75 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %76 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %75, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %76(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 58, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i64 0, i64 0), double %74, double 7.812500e-03) #9
  br label %104

77:                                               ; preds = %69
  switch i32 %54, label %92 [
    i32 3, label %78
    i32 9, label %85
  ]

78:                                               ; preds = %77
  %79 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 128
  br i1 %81, label %92, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %84 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %83, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %84(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 60, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i32 %80, i32 128) #9
  br label %104

85:                                               ; preds = %77
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 3, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %91 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %90, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %91(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 63, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i32 %87, i32 0) #9
  br label %104

92:                                               ; preds = %77, %78, %68, %85
  %93 = getelementptr inbounds %struct.TfLiteL2NormParams, %struct.TfLiteL2NormParams* %5, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %98 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %97, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %98(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.3, i64 0, i64 0), i32 69, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i32 %94, i32 0) #9
  br label %104

99:                                               ; preds = %92
  %100 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %45) #9
  %101 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %102 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %101, align 8
  %103 = tail call i32 %102(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %43, %struct.TfLiteIntArray* %100) #9
  br label %104

104:                                              ; preds = %49, %55, %62, %73, %82, %89, %96, %99, %20, %11
  %105 = phi i32 [ 1, %11 ], [ 1, %20 ], [ 1, %62 ], [ 1, %73 ], [ 1, %82 ], [ 1, %89 ], [ 1, %96 ], [ %103, %99 ], [ 1, %55 ], [ 1, %49 ]
  ret i32 %105
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin19Register_L2NORM_REFEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin19Register_L2NORM_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"struct.tflite::L2NormalizationParams", align 4
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %17 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 %18
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi %struct.TfLiteTensor* [ %19, %15 ], [ null, %2 ]
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %23 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  switch i32 %35, label %570 [
    i32 1, label %36
    i32 3, label %321
    i32 9, label %414
  ]

36:                                               ; preds = %32
  %37 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #9
  %38 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %40, align 8, !alias.scope !2
  br label %69

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8, !noalias !2
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !2
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %45, i32* %47, align 8, !alias.scope !2
  %48 = icmp sgt i32 %45, 5
  br i1 %48, label %49, label %56

49:                                               ; preds = %41
  %50 = sext i32 %45 to i64
  %51 = shl nsw i64 %50, 2
  %52 = tail call i8* @_Znam(i64 %51) #10, !noalias !2
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8, !alias.scope !2
  %55 = bitcast i8* %52 to i32*
  br label %61

56:                                               ; preds = %41
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i32*
  %59 = sext i32 %45 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %56, %49
  %62 = phi i64 [ %51, %49 ], [ %60, %56 ]
  %63 = phi i32* [ %55, %49 ], [ %58, %56 ]
  %64 = bitcast i32* %63 to i8*
  %65 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %62, i1 false) #9
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %67 = bitcast %union.TfLitePtrUnion* %66 to float**
  %68 = load float*, float** %67, align 8
  br label %69

69:                                               ; preds = %39, %61
  %70 = phi i32 [ %45, %61 ], [ 0, %39 ]
  %71 = phi float* [ %68, %61 ], [ null, %39 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #9
  %73 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !5
  br label %104

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !5
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !5
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !5
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %91

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #10, !noalias !5
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !5
  %90 = bitcast i8* %87 to i32*
  br label %96

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i32*
  %94 = sext i32 %80 to i64
  %95 = shl nsw i64 %94, 2
  br label %96

96:                                               ; preds = %91, %84
  %97 = phi i64 [ %86, %84 ], [ %95, %91 ]
  %98 = phi i32* [ %90, %84 ], [ %93, %91 ]
  %99 = bitcast i32* %98 to i8*
  %100 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %97, i1 false) #9
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to float**
  %103 = load float*, float** %102, align 8
  br label %104

104:                                              ; preds = %74, %96
  %105 = phi i32 [ %80, %96 ], [ 0, %74 ]
  %106 = phi float* [ %103, %96 ], [ null, %74 ]
  %107 = add nsw i32 %70, -1
  %108 = icmp sgt i32 %70, 5
  %109 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %110 = getelementptr inbounds %union.anon, %union.anon* %109, i64 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = bitcast %union.anon* %109 to i32*
  %113 = select i1 %108, i32* %111, i32* %112
  %114 = icmp sgt i32 %70, 0
  br i1 %114, label %115, label %155

115:                                              ; preds = %104
  %116 = zext i32 %107 to i64
  %117 = zext i32 %70 to i64
  %118 = add nsw i64 %117, -1
  %119 = and i64 %117, 3
  %120 = icmp ult i64 %118, 3
  br i1 %120, label %136, label %121

121:                                              ; preds = %115
  %122 = sub nsw i64 %117, %119
  br label %123

123:                                              ; preds = %595, %121
  %124 = phi i64 [ 0, %121 ], [ %598, %595 ]
  %125 = phi i32 [ 1, %121 ], [ %597, %595 ]
  %126 = phi i64 [ %122, %121 ], [ %599, %595 ]
  %127 = icmp eq i64 %124, %116
  br i1 %127, label %131, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds i32, i32* %113, i64 %124
  %130 = load i32, i32* %129, align 4
  br label %131

131:                                              ; preds = %128, %123
  %132 = phi i32 [ %130, %128 ], [ 1, %123 ]
  %133 = mul nsw i32 %132, %125
  %134 = or i64 %124, 1
  %135 = icmp eq i64 %134, %116
  br i1 %135, label %579, label %576

136:                                              ; preds = %595, %115
  %137 = phi i32 [ undef, %115 ], [ %597, %595 ]
  %138 = phi i64 [ 0, %115 ], [ %598, %595 ]
  %139 = phi i32 [ 1, %115 ], [ %597, %595 ]
  %140 = icmp eq i64 %119, 0
  br i1 %140, label %155, label %141

141:                                              ; preds = %136, %149
  %142 = phi i64 [ %152, %149 ], [ %138, %136 ]
  %143 = phi i32 [ %151, %149 ], [ %139, %136 ]
  %144 = phi i64 [ %153, %149 ], [ %119, %136 ]
  %145 = icmp eq i64 %142, %116
  br i1 %145, label %149, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds i32, i32* %113, i64 %142
  %148 = load i32, i32* %147, align 4
  br label %149

149:                                              ; preds = %146, %141
  %150 = phi i32 [ %148, %146 ], [ 1, %141 ]
  %151 = mul nsw i32 %150, %143
  %152 = add nuw nsw i64 %142, 1
  %153 = add i64 %144, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %141, !llvm.loop !8

155:                                              ; preds = %136, %149, %104
  %156 = phi i32 [ 1, %104 ], [ %137, %136 ], [ %151, %149 ]
  %157 = icmp sgt i32 %105, 5
  %158 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %159 = sext i32 %107 to i64
  %160 = getelementptr inbounds i32, i32* %111, i64 %159
  %161 = bitcast %union.anon* %109 to [5 x i32]*
  %162 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i64 0, i64 %159
  %163 = select i1 %108, i32* %160, i32* %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds %union.anon, %union.anon* %158, i64 0, i32 0
  %166 = load i32*, i32** %165, align 8
  %167 = getelementptr inbounds i32, i32* %166, i64 %159
  %168 = bitcast %union.anon* %158 to [5 x i32]*
  %169 = getelementptr inbounds [5 x i32], [5 x i32]* %168, i64 0, i64 %159
  %170 = select i1 %157, i32* %167, i32* %169
  %171 = load i32, i32* %170, align 4
  %172 = icmp slt i32 %171, %164
  %173 = select i1 %172, i32 %171, i32 %164
  %174 = icmp sgt i32 %156, 0
  br i1 %174, label %175, label %308

175:                                              ; preds = %155
  %176 = icmp sgt i32 %173, 0
  %177 = sext i32 %173 to i64
  %178 = zext i32 %156 to i64
  %179 = add nsw i64 %177, -1
  %180 = add nsw i64 %177, -4
  %181 = lshr i64 %180, 2
  %182 = add nuw nsw i64 %181, 1
  %183 = and i64 %177, 3
  %184 = icmp ult i64 %179, 3
  %185 = sub nsw i64 %177, %183
  %186 = icmp eq i64 %183, 0
  %187 = icmp ult i32 %173, 4
  %188 = and i64 %177, -4
  %189 = and i64 %182, 1
  %190 = icmp eq i64 %181, 0
  %191 = sub nuw nsw i64 %182, %189
  %192 = icmp eq i64 %189, 0
  %193 = icmp eq i64 %188, %177
  br label %194

194:                                              ; preds = %296, %175
  %195 = phi i64 [ 0, %175 ], [ %297, %296 ]
  %196 = mul i64 %195, %177
  %197 = getelementptr float, float* %106, i64 %196
  %198 = add i64 %196, %177
  %199 = getelementptr float, float* %106, i64 %198
  %200 = getelementptr float, float* %71, i64 %196
  %201 = getelementptr float, float* %71, i64 %198
  br i1 %176, label %202, label %296

202:                                              ; preds = %194
  %203 = mul nsw i64 %195, %177
  br i1 %184, label %204, label %266

204:                                              ; preds = %266, %202
  %205 = phi float [ undef, %202 ], [ %292, %266 ]
  %206 = phi i64 [ 0, %202 ], [ %293, %266 ]
  %207 = phi float [ 0.000000e+00, %202 ], [ %292, %266 ]
  br i1 %186, label %220, label %208

208:                                              ; preds = %204, %208
  %209 = phi i64 [ %217, %208 ], [ %206, %204 ]
  %210 = phi float [ %216, %208 ], [ %207, %204 ]
  %211 = phi i64 [ %218, %208 ], [ %183, %204 ]
  %212 = add nsw i64 %209, %203
  %213 = getelementptr inbounds float, float* %71, i64 %212
  %214 = load float, float* %213, align 4
  %215 = fmul float %214, %214
  %216 = fadd float %210, %215
  %217 = add nuw nsw i64 %209, 1
  %218 = add i64 %211, -1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %208, !llvm.loop !10

220:                                              ; preds = %208, %204
  %221 = phi float [ %205, %204 ], [ %216, %208 ]
  %222 = tail call float @sqrtf(float %221) #9
  %223 = fcmp olt float %222, 0x3EB0C6F7A0000000
  %224 = select i1 %223, float 0x3EB0C6F7A0000000, float %222
  br i1 %187, label %225, label %227

225:                                              ; preds = %265, %227, %220
  %226 = phi i64 [ 0, %227 ], [ 0, %220 ], [ %188, %265 ]
  br label %299

227:                                              ; preds = %220
  %228 = icmp ult float* %197, %201
  %229 = icmp ult float* %200, %199
  %230 = and i1 %228, %229
  br i1 %230, label %225, label %231

231:                                              ; preds = %227
  %232 = insertelement <4 x float> undef, float %224, i32 0
  %233 = shufflevector <4 x float> %232, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %190, label %255, label %234

234:                                              ; preds = %231, %234
  %235 = phi i64 [ %252, %234 ], [ 0, %231 ]
  %236 = phi i64 [ %253, %234 ], [ %191, %231 ]
  %237 = add nsw i64 %235, %203
  %238 = getelementptr inbounds float, float* %71, i64 %237
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 4, !alias.scope !11
  %241 = fdiv <4 x float> %240, %233
  %242 = getelementptr inbounds float, float* %106, i64 %237
  %243 = bitcast float* %242 to <4 x float>*
  store <4 x float> %241, <4 x float>* %243, align 4, !alias.scope !14, !noalias !11
  %244 = or i64 %235, 4
  %245 = add nsw i64 %244, %203
  %246 = getelementptr inbounds float, float* %71, i64 %245
  %247 = bitcast float* %246 to <4 x float>*
  %248 = load <4 x float>, <4 x float>* %247, align 4, !alias.scope !11
  %249 = fdiv <4 x float> %248, %233
  %250 = getelementptr inbounds float, float* %106, i64 %245
  %251 = bitcast float* %250 to <4 x float>*
  store <4 x float> %249, <4 x float>* %251, align 4, !alias.scope !14, !noalias !11
  %252 = add i64 %235, 8
  %253 = add i64 %236, -2
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %234, !llvm.loop !16

255:                                              ; preds = %234, %231
  %256 = phi i64 [ 0, %231 ], [ %252, %234 ]
  br i1 %192, label %265, label %257

257:                                              ; preds = %255
  %258 = add nsw i64 %256, %203
  %259 = getelementptr inbounds float, float* %71, i64 %258
  %260 = bitcast float* %259 to <4 x float>*
  %261 = load <4 x float>, <4 x float>* %260, align 4, !alias.scope !11
  %262 = fdiv <4 x float> %261, %233
  %263 = getelementptr inbounds float, float* %106, i64 %258
  %264 = bitcast float* %263 to <4 x float>*
  store <4 x float> %262, <4 x float>* %264, align 4, !alias.scope !14, !noalias !11
  br label %265

265:                                              ; preds = %255, %257
  br i1 %193, label %296, label %225

266:                                              ; preds = %202, %266
  %267 = phi i64 [ %293, %266 ], [ 0, %202 ]
  %268 = phi float [ %292, %266 ], [ 0.000000e+00, %202 ]
  %269 = phi i64 [ %294, %266 ], [ %185, %202 ]
  %270 = add nsw i64 %267, %203
  %271 = getelementptr inbounds float, float* %71, i64 %270
  %272 = load float, float* %271, align 4
  %273 = fmul float %272, %272
  %274 = fadd float %268, %273
  %275 = or i64 %267, 1
  %276 = add nsw i64 %275, %203
  %277 = getelementptr inbounds float, float* %71, i64 %276
  %278 = load float, float* %277, align 4
  %279 = fmul float %278, %278
  %280 = fadd float %274, %279
  %281 = or i64 %267, 2
  %282 = add nsw i64 %281, %203
  %283 = getelementptr inbounds float, float* %71, i64 %282
  %284 = load float, float* %283, align 4
  %285 = fmul float %284, %284
  %286 = fadd float %280, %285
  %287 = or i64 %267, 3
  %288 = add nsw i64 %287, %203
  %289 = getelementptr inbounds float, float* %71, i64 %288
  %290 = load float, float* %289, align 4
  %291 = fmul float %290, %290
  %292 = fadd float %286, %291
  %293 = add nuw nsw i64 %267, 4
  %294 = add i64 %269, -4
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %204, label %266

296:                                              ; preds = %299, %265, %194
  %297 = add nuw nsw i64 %195, 1
  %298 = icmp eq i64 %297, %178
  br i1 %298, label %308, label %194

299:                                              ; preds = %225, %299
  %300 = phi i64 [ %306, %299 ], [ %226, %225 ]
  %301 = add nsw i64 %300, %203
  %302 = getelementptr inbounds float, float* %71, i64 %301
  %303 = load float, float* %302, align 4
  %304 = fdiv float %303, %224
  %305 = getelementptr inbounds float, float* %106, i64 %301
  store float %304, float* %305, align 4
  %306 = add nuw nsw i64 %300, 1
  %307 = icmp slt i64 %306, %177
  br i1 %307, label %299, label %296, !llvm.loop !18

308:                                              ; preds = %296, %155
  %309 = xor i1 %157, true
  %310 = icmp eq i32* %166, null
  %311 = or i1 %310, %309
  br i1 %311, label %314, label %312

312:                                              ; preds = %308
  %313 = bitcast i32* %166 to i8*
  tail call void @_ZdaPv(i8* %313) #10
  br label %314

314:                                              ; preds = %308, %312
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #9
  %315 = xor i1 %108, true
  %316 = icmp eq i32* %111, null
  %317 = or i1 %316, %315
  br i1 %317, label %320, label %318

318:                                              ; preds = %314
  %319 = bitcast i32* %111 to i8*
  tail call void @_ZdaPv(i8* %319) #10
  br label %320

320:                                              ; preds = %314, %318
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #9
  br label %574

321:                                              ; preds = %32
  %322 = bitcast %"struct.tflite::L2NormalizationParams"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %322) #9
  %323 = getelementptr inbounds %"struct.tflite::L2NormalizationParams", %"struct.tflite::L2NormalizationParams"* %5, i64 0, i32 0
  %324 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 3, i32 1
  %325 = load i32, i32* %324, align 4
  store i32 %325, i32* %323, align 4
  %326 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %326) #9
  %327 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %327, label %328, label %330

328:                                              ; preds = %321
  %329 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %329, align 8, !alias.scope !19
  br label %358

330:                                              ; preds = %321
  %331 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %332 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %331, align 8, !noalias !19
  %333 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %332, i64 0, i32 0
  %334 = load i32, i32* %333, align 4, !noalias !19
  %335 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %332, i64 0, i32 1, i64 0
  %336 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %334, i32* %336, align 8, !alias.scope !19
  %337 = icmp sgt i32 %334, 5
  br i1 %337, label %338, label %345

338:                                              ; preds = %330
  %339 = sext i32 %334 to i64
  %340 = shl nsw i64 %339, 2
  %341 = tail call i8* @_Znam(i64 %340) #10, !noalias !19
  %342 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %343 = bitcast i32** %342 to i8**
  store i8* %341, i8** %343, align 8, !alias.scope !19
  %344 = bitcast i8* %341 to i32*
  br label %350

345:                                              ; preds = %330
  %346 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %347 = bitcast %union.anon* %346 to i32*
  %348 = sext i32 %334 to i64
  %349 = shl nsw i64 %348, 2
  br label %350

350:                                              ; preds = %345, %338
  %351 = phi i64 [ %340, %338 ], [ %349, %345 ]
  %352 = phi i32* [ %344, %338 ], [ %347, %345 ]
  %353 = bitcast i32* %352 to i8*
  %354 = bitcast i32* %335 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %353, i8* align 4 %354, i64 %351, i1 false) #9
  %355 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %356 = bitcast %union.TfLitePtrUnion* %355 to i8**
  %357 = load i8*, i8** %356, align 8
  br label %358

358:                                              ; preds = %328, %350
  %359 = phi i8* [ %357, %350 ], [ null, %328 ]
  %360 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %360) #9
  %361 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %361, label %362, label %364

362:                                              ; preds = %358
  %363 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %363, align 8, !alias.scope !22
  br label %392

364:                                              ; preds = %358
  %365 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %366 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %365, align 8, !noalias !22
  %367 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %366, i64 0, i32 0
  %368 = load i32, i32* %367, align 4, !noalias !22
  %369 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %366, i64 0, i32 1, i64 0
  %370 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %368, i32* %370, align 8, !alias.scope !22
  %371 = icmp sgt i32 %368, 5
  br i1 %371, label %372, label %379

372:                                              ; preds = %364
  %373 = sext i32 %368 to i64
  %374 = shl nsw i64 %373, 2
  %375 = tail call i8* @_Znam(i64 %374) #10, !noalias !22
  %376 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %377 = bitcast i32** %376 to i8**
  store i8* %375, i8** %377, align 8, !alias.scope !22
  %378 = bitcast i8* %375 to i32*
  br label %384

379:                                              ; preds = %364
  %380 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %381 = bitcast %union.anon* %380 to i32*
  %382 = sext i32 %368 to i64
  %383 = shl nsw i64 %382, 2
  br label %384

384:                                              ; preds = %379, %372
  %385 = phi i64 [ %374, %372 ], [ %383, %379 ]
  %386 = phi i32* [ %378, %372 ], [ %381, %379 ]
  %387 = bitcast i32* %386 to i8*
  %388 = bitcast i32* %369 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %387, i8* align 4 %388, i64 %385, i1 false) #9
  %389 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %390 = bitcast %union.TfLitePtrUnion* %389 to i8**
  %391 = load i8*, i8** %390, align 8
  br label %392

392:                                              ; preds = %362, %384
  %393 = phi i8* [ %391, %384 ], [ null, %362 ]
  call void @_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::L2NormalizationParams"* nonnull dereferenceable(4) %5, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %359, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, i8* %393)
  %394 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %395 = load i32, i32* %394, align 8
  %396 = icmp sgt i32 %395, 5
  br i1 %396, label %397, label %403

397:                                              ; preds = %392
  %398 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %399 = load i32*, i32** %398, align 8
  %400 = icmp eq i32* %399, null
  br i1 %400, label %403, label %401

401:                                              ; preds = %397
  %402 = bitcast i32* %399 to i8*
  call void @_ZdaPv(i8* %402) #10
  br label %403

403:                                              ; preds = %392, %397, %401
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %360) #9
  %404 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %405 = load i32, i32* %404, align 8
  %406 = icmp sgt i32 %405, 5
  br i1 %406, label %407, label %413

407:                                              ; preds = %403
  %408 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %409 = load i32*, i32** %408, align 8
  %410 = icmp eq i32* %409, null
  br i1 %410, label %413, label %411

411:                                              ; preds = %407
  %412 = bitcast i32* %409 to i8*
  call void @_ZdaPv(i8* %412) #10
  br label %413

413:                                              ; preds = %403, %407, %411
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %326) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %322) #9
  br label %574

414:                                              ; preds = %32
  %415 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %415) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %415, i8 -86, i64 32, i1 false)
  %416 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %416, label %417, label %419

417:                                              ; preds = %414
  %418 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %418, align 8, !alias.scope !25
  br label %444

419:                                              ; preds = %414
  %420 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %421 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %420, align 8, !noalias !25
  %422 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %421, i64 0, i32 0
  %423 = load i32, i32* %422, align 4, !noalias !25
  %424 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %421, i64 0, i32 1, i64 0
  %425 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %423, i32* %425, align 8, !alias.scope !25
  %426 = icmp sgt i32 %423, 5
  br i1 %426, label %427, label %434

427:                                              ; preds = %419
  %428 = sext i32 %423 to i64
  %429 = shl nsw i64 %428, 2
  %430 = tail call i8* @_Znam(i64 %429) #10, !noalias !25
  %431 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %432 = bitcast i32** %431 to i8**
  store i8* %430, i8** %432, align 8, !alias.scope !25
  %433 = bitcast i8* %430 to i32*
  br label %439

434:                                              ; preds = %419
  %435 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %436 = bitcast %union.anon* %435 to i32*
  %437 = sext i32 %423 to i64
  %438 = shl nsw i64 %437, 2
  br label %439

439:                                              ; preds = %434, %427
  %440 = phi i64 [ %429, %427 ], [ %438, %434 ]
  %441 = phi i32* [ %433, %427 ], [ %436, %434 ]
  %442 = bitcast i32* %441 to i8*
  %443 = bitcast i32* %424 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %442, i8* align 4 %443, i64 %440, i1 false) #9
  br label %444

444:                                              ; preds = %417, %439
  %445 = phi i32 [ 0, %417 ], [ %423, %439 ]
  %446 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %446) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %446, i8 -86, i64 32, i1 false)
  %447 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %447, label %448, label %450

448:                                              ; preds = %444
  %449 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %449, align 8, !alias.scope !28
  br label %476

450:                                              ; preds = %444
  %451 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %452 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %451, align 8, !noalias !28
  %453 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %452, i64 0, i32 0
  %454 = load i32, i32* %453, align 4, !noalias !28
  %455 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %452, i64 0, i32 1, i64 0
  %456 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %454, i32* %456, align 8, !alias.scope !28
  %457 = icmp sgt i32 %454, 5
  br i1 %457, label %458, label %465

458:                                              ; preds = %450
  %459 = sext i32 %454 to i64
  %460 = shl nsw i64 %459, 2
  %461 = tail call i8* @_Znam(i64 %460) #10, !noalias !28
  %462 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %463 = bitcast i32** %462 to i8**
  store i8* %461, i8** %463, align 8, !alias.scope !28
  %464 = bitcast i8* %461 to i32*
  br label %470

465:                                              ; preds = %450
  %466 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %467 = bitcast %union.anon* %466 to i32*
  %468 = sext i32 %454 to i64
  %469 = shl nsw i64 %468, 2
  br label %470

470:                                              ; preds = %465, %458
  %471 = phi i64 [ %460, %458 ], [ %469, %465 ]
  %472 = phi i32* [ %464, %458 ], [ %467, %465 ]
  %473 = bitcast i32* %472 to i8*
  %474 = bitcast i32* %455 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %473, i8* align 4 %474, i64 %471, i1 false) #9
  %475 = icmp sgt i32 %454, 5
  br label %476

476:                                              ; preds = %448, %470
  %477 = phi i1 [ false, %448 ], [ %475, %470 ]
  %478 = add nsw i32 %445, -1
  %479 = icmp sgt i32 %445, 5
  %480 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %481 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %482 = getelementptr inbounds %union.anon, %union.anon* %480, i64 0, i32 0
  %483 = load i32*, i32** %482, align 8
  %484 = sext i32 %478 to i64
  %485 = getelementptr inbounds i32, i32* %483, i64 %484
  %486 = bitcast %union.anon* %480 to [5 x i32]*
  %487 = getelementptr inbounds [5 x i32], [5 x i32]* %486, i64 0, i64 %484
  %488 = select i1 %479, i32* %485, i32* %487
  %489 = load i32, i32* %488, align 4
  %490 = getelementptr inbounds %union.anon, %union.anon* %481, i64 0, i32 0
  %491 = load i32*, i32** %490, align 8
  %492 = getelementptr inbounds i32, i32* %491, i64 %484
  %493 = bitcast %union.anon* %481 to [5 x i32]*
  %494 = getelementptr inbounds [5 x i32], [5 x i32]* %493, i64 0, i64 %484
  %495 = select i1 %477, i32* %492, i32* %494
  %496 = load i32, i32* %495, align 4
  %497 = icmp slt i32 %496, %489
  %498 = select i1 %497, i32 %496, i32 %489
  %499 = bitcast %union.anon* %480 to i32*
  %500 = select i1 %479, i32* %483, i32* %499
  %501 = icmp sgt i32 %445, 0
  br i1 %501, label %502, label %542

502:                                              ; preds = %476
  %503 = zext i32 %478 to i64
  %504 = zext i32 %445 to i64
  %505 = add nsw i64 %504, -1
  %506 = and i64 %504, 3
  %507 = icmp ult i64 %505, 3
  br i1 %507, label %523, label %508

508:                                              ; preds = %502
  %509 = sub nsw i64 %504, %506
  br label %510

510:                                              ; preds = %620, %508
  %511 = phi i64 [ 0, %508 ], [ %623, %620 ]
  %512 = phi i32 [ 1, %508 ], [ %622, %620 ]
  %513 = phi i64 [ %509, %508 ], [ %624, %620 ]
  %514 = icmp eq i64 %511, %503
  br i1 %514, label %518, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds i32, i32* %500, i64 %511
  %517 = load i32, i32* %516, align 4
  br label %518

518:                                              ; preds = %515, %510
  %519 = phi i32 [ %517, %515 ], [ 1, %510 ]
  %520 = mul nsw i32 %519, %512
  %521 = or i64 %511, 1
  %522 = icmp eq i64 %521, %503
  br i1 %522, label %604, label %601

523:                                              ; preds = %620, %502
  %524 = phi i32 [ undef, %502 ], [ %622, %620 ]
  %525 = phi i64 [ 0, %502 ], [ %623, %620 ]
  %526 = phi i32 [ 1, %502 ], [ %622, %620 ]
  %527 = icmp eq i64 %506, 0
  br i1 %527, label %542, label %528

528:                                              ; preds = %523, %536
  %529 = phi i64 [ %539, %536 ], [ %525, %523 ]
  %530 = phi i32 [ %538, %536 ], [ %526, %523 ]
  %531 = phi i64 [ %540, %536 ], [ %506, %523 ]
  %532 = icmp eq i64 %529, %503
  br i1 %532, label %536, label %533

533:                                              ; preds = %528
  %534 = getelementptr inbounds i32, i32* %500, i64 %529
  %535 = load i32, i32* %534, align 4
  br label %536

536:                                              ; preds = %533, %528
  %537 = phi i32 [ %535, %533 ], [ 1, %528 ]
  %538 = mul nsw i32 %537, %530
  %539 = add nuw nsw i64 %529, 1
  %540 = add i64 %531, -1
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %528, !llvm.loop !31

542:                                              ; preds = %523, %536, %476
  %543 = phi i32 [ 1, %476 ], [ %524, %523 ], [ %538, %536 ]
  %544 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 3, i32 1
  %545 = load i32, i32* %544, align 4
  br i1 %416, label %550, label %546

546:                                              ; preds = %542
  %547 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %548 = bitcast %union.TfLitePtrUnion* %547 to i8**
  %549 = load i8*, i8** %548, align 8
  br label %550

550:                                              ; preds = %542, %546
  %551 = phi i8* [ %549, %546 ], [ null, %542 ]
  br i1 %447, label %556, label %552

552:                                              ; preds = %550
  %553 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %554 = bitcast %union.TfLitePtrUnion* %553 to i8**
  %555 = load i8*, i8** %554, align 8
  br label %556

556:                                              ; preds = %550, %552
  %557 = phi i8* [ %555, %552 ], [ null, %550 ]
  tail call void @_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa(i32 %545, i32 %543, i32 %498, i8* %551, i8* %557)
  %558 = xor i1 %477, true
  %559 = icmp eq i32* %491, null
  %560 = or i1 %559, %558
  br i1 %560, label %563, label %561

561:                                              ; preds = %556
  %562 = bitcast i32* %491 to i8*
  tail call void @_ZdaPv(i8* %562) #10
  br label %563

563:                                              ; preds = %556, %561
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %446) #9
  %564 = xor i1 %479, true
  %565 = icmp eq i32* %483, null
  %566 = or i1 %565, %564
  br i1 %566, label %569, label %567

567:                                              ; preds = %563
  %568 = bitcast i32* %483 to i8*
  tail call void @_ZdaPv(i8* %568) #10
  br label %569

569:                                              ; preds = %563, %567
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %415) #9
  br label %574

570:                                              ; preds = %32
  %571 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %572 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %571, align 8
  %573 = tail call i8* @TfLiteTypeGetName(i32 %35) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %572(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0), i8* %573) #9
  br label %574

574:                                              ; preds = %320, %569, %413, %570
  %575 = phi i32 [ 1, %570 ], [ 0, %413 ], [ 0, %569 ], [ 0, %320 ]
  ret i32 %575

576:                                              ; preds = %131
  %577 = getelementptr inbounds i32, i32* %113, i64 %134
  %578 = load i32, i32* %577, align 4
  br label %579

579:                                              ; preds = %576, %131
  %580 = phi i32 [ %578, %576 ], [ 1, %131 ]
  %581 = mul nsw i32 %580, %133
  %582 = or i64 %124, 2
  %583 = icmp eq i64 %582, %116
  br i1 %583, label %587, label %584

584:                                              ; preds = %579
  %585 = getelementptr inbounds i32, i32* %113, i64 %582
  %586 = load i32, i32* %585, align 4
  br label %587

587:                                              ; preds = %584, %579
  %588 = phi i32 [ %586, %584 ], [ 1, %579 ]
  %589 = mul nsw i32 %588, %581
  %590 = or i64 %124, 3
  %591 = icmp eq i64 %590, %116
  br i1 %591, label %595, label %592

592:                                              ; preds = %587
  %593 = getelementptr inbounds i32, i32* %113, i64 %590
  %594 = load i32, i32* %593, align 4
  br label %595

595:                                              ; preds = %592, %587
  %596 = phi i32 [ %594, %592 ], [ 1, %587 ]
  %597 = mul nsw i32 %596, %589
  %598 = add nuw nsw i64 %124, 4
  %599 = add i64 %126, -4
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %136, label %123

601:                                              ; preds = %518
  %602 = getelementptr inbounds i32, i32* %500, i64 %521
  %603 = load i32, i32* %602, align 4
  br label %604

604:                                              ; preds = %601, %518
  %605 = phi i32 [ %603, %601 ], [ 1, %518 ]
  %606 = mul nsw i32 %605, %520
  %607 = or i64 %511, 2
  %608 = icmp eq i64 %607, %503
  br i1 %608, label %612, label %609

609:                                              ; preds = %604
  %610 = getelementptr inbounds i32, i32* %500, i64 %607
  %611 = load i32, i32* %610, align 4
  br label %612

612:                                              ; preds = %609, %604
  %613 = phi i32 [ %611, %609 ], [ 1, %604 ]
  %614 = mul nsw i32 %613, %606
  %615 = or i64 %511, 3
  %616 = icmp eq i64 %615, %503
  br i1 %616, label %620, label %617

617:                                              ; preds = %612
  %618 = getelementptr inbounds i32, i32* %500, i64 %615
  %619 = load i32, i32* %618, align 4
  br label %620

620:                                              ; preds = %617, %612
  %621 = phi i32 [ %619, %617 ], [ 1, %612 ]
  %622 = mul nsw i32 %621, %614
  %623 = add nuw nsw i64 %511, 4
  %624 = add i64 %513, -4
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %523, label %510
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin27Register_L2NORM_GENERIC_OPTEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin27Register_L2NORM_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin6l2norm4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"struct.tflite::L2NormalizationParams", align 4
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %17 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %16, align 8
  %18 = sext i32 %13 to i64
  %19 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %17, i64 %18
  br label %20

20:                                               ; preds = %2, %15
  %21 = phi %struct.TfLiteTensor* [ %19, %15 ], [ null, %2 ]
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %23 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %20, %27
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  switch i32 %35, label %574 [
    i32 1, label %36
    i32 3, label %325
    i32 9, label %418
  ]

36:                                               ; preds = %32
  %37 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #9
  %38 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %40, align 8, !alias.scope !32
  br label %69

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8, !noalias !32
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4, !noalias !32
  %46 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %47 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %45, i32* %47, align 8, !alias.scope !32
  %48 = icmp sgt i32 %45, 5
  br i1 %48, label %49, label %56

49:                                               ; preds = %41
  %50 = sext i32 %45 to i64
  %51 = shl nsw i64 %50, 2
  %52 = tail call i8* @_Znam(i64 %51) #10, !noalias !32
  %53 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8, !alias.scope !32
  %55 = bitcast i8* %52 to i32*
  br label %61

56:                                               ; preds = %41
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %58 = bitcast %union.anon* %57 to i32*
  %59 = sext i32 %45 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %56, %49
  %62 = phi i64 [ %51, %49 ], [ %60, %56 ]
  %63 = phi i32* [ %55, %49 ], [ %58, %56 ]
  %64 = bitcast i32* %63 to i8*
  %65 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %62, i1 false) #9
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %67 = bitcast %union.TfLitePtrUnion* %66 to float**
  %68 = load float*, float** %67, align 8
  br label %69

69:                                               ; preds = %39, %61
  %70 = phi i32 [ %45, %61 ], [ 0, %39 ]
  %71 = phi float* [ %68, %61 ], [ null, %39 ]
  %72 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #9
  %73 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !35
  br label %104

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %78 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %77, align 8, !noalias !35
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 0
  %80 = load i32, i32* %79, align 4, !noalias !35
  %81 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %78, i64 0, i32 1, i64 0
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %80, i32* %82, align 8, !alias.scope !35
  %83 = icmp sgt i32 %80, 5
  br i1 %83, label %84, label %91

84:                                               ; preds = %76
  %85 = sext i32 %80 to i64
  %86 = shl nsw i64 %85, 2
  %87 = tail call i8* @_Znam(i64 %86) #10, !noalias !35
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %89 = bitcast i32** %88 to i8**
  store i8* %87, i8** %89, align 8, !alias.scope !35
  %90 = bitcast i8* %87 to i32*
  br label %96

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %93 = bitcast %union.anon* %92 to i32*
  %94 = sext i32 %80 to i64
  %95 = shl nsw i64 %94, 2
  br label %96

96:                                               ; preds = %91, %84
  %97 = phi i64 [ %86, %84 ], [ %95, %91 ]
  %98 = phi i32* [ %90, %84 ], [ %93, %91 ]
  %99 = bitcast i32* %98 to i8*
  %100 = bitcast i32* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %97, i1 false) #9
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %102 = bitcast %union.TfLitePtrUnion* %101 to float**
  %103 = load float*, float** %102, align 8
  br label %104

104:                                              ; preds = %74, %96
  %105 = phi i32 [ %80, %96 ], [ 0, %74 ]
  %106 = phi float* [ %103, %96 ], [ null, %74 ]
  %107 = add nsw i32 %70, -1
  %108 = icmp sgt i32 %70, 5
  %109 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %110 = getelementptr inbounds %union.anon, %union.anon* %109, i64 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = bitcast %union.anon* %109 to i32*
  %113 = select i1 %108, i32* %111, i32* %112
  %114 = icmp sgt i32 %70, 0
  br i1 %114, label %115, label %155

115:                                              ; preds = %104
  %116 = zext i32 %107 to i64
  %117 = zext i32 %70 to i64
  %118 = add nsw i64 %117, -1
  %119 = and i64 %117, 3
  %120 = icmp ult i64 %118, 3
  br i1 %120, label %136, label %121

121:                                              ; preds = %115
  %122 = sub nsw i64 %117, %119
  br label %123

123:                                              ; preds = %599, %121
  %124 = phi i64 [ 0, %121 ], [ %602, %599 ]
  %125 = phi i32 [ 1, %121 ], [ %601, %599 ]
  %126 = phi i64 [ %122, %121 ], [ %603, %599 ]
  %127 = icmp eq i64 %124, %116
  br i1 %127, label %131, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds i32, i32* %113, i64 %124
  %130 = load i32, i32* %129, align 4
  br label %131

131:                                              ; preds = %128, %123
  %132 = phi i32 [ %130, %128 ], [ 1, %123 ]
  %133 = mul nsw i32 %132, %125
  %134 = or i64 %124, 1
  %135 = icmp eq i64 %134, %116
  br i1 %135, label %583, label %580

136:                                              ; preds = %599, %115
  %137 = phi i32 [ undef, %115 ], [ %601, %599 ]
  %138 = phi i64 [ 0, %115 ], [ %602, %599 ]
  %139 = phi i32 [ 1, %115 ], [ %601, %599 ]
  %140 = icmp eq i64 %119, 0
  br i1 %140, label %155, label %141

141:                                              ; preds = %136, %149
  %142 = phi i64 [ %152, %149 ], [ %138, %136 ]
  %143 = phi i32 [ %151, %149 ], [ %139, %136 ]
  %144 = phi i64 [ %153, %149 ], [ %119, %136 ]
  %145 = icmp eq i64 %142, %116
  br i1 %145, label %149, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds i32, i32* %113, i64 %142
  %148 = load i32, i32* %147, align 4
  br label %149

149:                                              ; preds = %146, %141
  %150 = phi i32 [ %148, %146 ], [ 1, %141 ]
  %151 = mul nsw i32 %150, %143
  %152 = add nuw nsw i64 %142, 1
  %153 = add i64 %144, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %141, !llvm.loop !38

155:                                              ; preds = %136, %149, %104
  %156 = phi i32 [ 1, %104 ], [ %137, %136 ], [ %151, %149 ]
  %157 = icmp sgt i32 %105, 5
  %158 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %159 = sext i32 %107 to i64
  %160 = getelementptr inbounds i32, i32* %111, i64 %159
  %161 = bitcast %union.anon* %109 to [5 x i32]*
  %162 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i64 0, i64 %159
  %163 = select i1 %108, i32* %160, i32* %162
  %164 = load i32, i32* %163, align 4
  %165 = getelementptr inbounds %union.anon, %union.anon* %158, i64 0, i32 0
  %166 = load i32*, i32** %165, align 8
  %167 = getelementptr inbounds i32, i32* %166, i64 %159
  %168 = bitcast %union.anon* %158 to [5 x i32]*
  %169 = getelementptr inbounds [5 x i32], [5 x i32]* %168, i64 0, i64 %159
  %170 = select i1 %157, i32* %167, i32* %169
  %171 = load i32, i32* %170, align 4
  %172 = icmp slt i32 %171, %164
  %173 = select i1 %172, i32 %171, i32 %164
  %174 = icmp sgt i32 %156, 0
  br i1 %174, label %175, label %310

175:                                              ; preds = %155
  %176 = icmp sgt i32 %173, 0
  %177 = sext i32 %173 to i64
  %178 = add i32 %173, -1
  %179 = zext i32 %178 to i64
  %180 = add nuw nsw i64 %179, 1
  %181 = zext i32 %178 to i64
  %182 = add nuw nsw i64 %181, 1
  %183 = add nsw i64 %177, -1
  %184 = and i64 %180, 8589934588
  %185 = add nsw i64 %184, -4
  %186 = lshr exact i64 %185, 2
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %177, 3
  %189 = icmp ult i64 %183, 3
  %190 = sub nsw i64 %177, %188
  %191 = icmp eq i64 %188, 0
  %192 = icmp ult i64 %180, 4
  %193 = and i64 %180, 8589934588
  %194 = trunc i64 %193 to i32
  %195 = and i64 %187, 1
  %196 = icmp eq i64 %185, 0
  %197 = sub nuw nsw i64 %187, %195
  %198 = icmp eq i64 %195, 0
  %199 = icmp eq i64 %180, %193
  br label %200

200:                                              ; preds = %295, %175
  %201 = phi float* [ %71, %175 ], [ %297, %295 ]
  %202 = phi i32 [ 0, %175 ], [ %298, %295 ]
  %203 = phi float* [ %106, %175 ], [ %296, %295 ]
  br i1 %176, label %204, label %295

204:                                              ; preds = %200
  br i1 %189, label %205, label %269

205:                                              ; preds = %269, %204
  %206 = phi float [ undef, %204 ], [ %291, %269 ]
  %207 = phi i64 [ 0, %204 ], [ %292, %269 ]
  %208 = phi float [ 0.000000e+00, %204 ], [ %291, %269 ]
  br i1 %191, label %220, label %209

209:                                              ; preds = %205, %209
  %210 = phi i64 [ %217, %209 ], [ %207, %205 ]
  %211 = phi float [ %216, %209 ], [ %208, %205 ]
  %212 = phi i64 [ %218, %209 ], [ %188, %205 ]
  %213 = getelementptr inbounds float, float* %201, i64 %210
  %214 = load float, float* %213, align 4
  %215 = fmul float %214, %214
  %216 = fadd float %211, %215
  %217 = add nuw nsw i64 %210, 1
  %218 = add i64 %212, -1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %209, !llvm.loop !39

220:                                              ; preds = %209, %205
  %221 = phi float [ %206, %205 ], [ %216, %209 ]
  %222 = tail call float @sqrtf(float %221) #9
  %223 = fcmp olt float %222, 0x3EB0C6F7A0000000
  %224 = select i1 %223, float 0x3EB0C6F7A0000000, float %222
  br i1 %192, label %225, label %229

225:                                              ; preds = %268, %229, %220
  %226 = phi i32 [ 0, %229 ], [ 0, %220 ], [ %194, %268 ]
  %227 = phi float* [ %201, %229 ], [ %201, %220 ], [ %236, %268 ]
  %228 = phi float* [ %203, %229 ], [ %203, %220 ], [ %237, %268 ]
  br label %300

229:                                              ; preds = %220
  %230 = getelementptr float, float* %203, i64 %182
  %231 = getelementptr float, float* %201, i64 %182
  %232 = icmp ult float* %203, %231
  %233 = icmp ult float* %201, %230
  %234 = and i1 %232, %233
  br i1 %234, label %225, label %235

235:                                              ; preds = %229
  %236 = getelementptr float, float* %201, i64 %193
  %237 = getelementptr float, float* %203, i64 %193
  %238 = insertelement <4 x float> undef, float %224, i32 0
  %239 = shufflevector <4 x float> %238, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %196, label %259, label %240

240:                                              ; preds = %235, %240
  %241 = phi i64 [ %256, %240 ], [ 0, %235 ]
  %242 = phi i64 [ %257, %240 ], [ %197, %235 ]
  %243 = getelementptr float, float* %201, i64 %241
  %244 = getelementptr float, float* %203, i64 %241
  %245 = bitcast float* %243 to <4 x float>*
  %246 = load <4 x float>, <4 x float>* %245, align 4, !alias.scope !40
  %247 = fdiv <4 x float> %246, %239
  %248 = bitcast float* %244 to <4 x float>*
  store <4 x float> %247, <4 x float>* %248, align 4, !alias.scope !43, !noalias !40
  %249 = or i64 %241, 4
  %250 = getelementptr float, float* %201, i64 %249
  %251 = getelementptr float, float* %203, i64 %249
  %252 = bitcast float* %250 to <4 x float>*
  %253 = load <4 x float>, <4 x float>* %252, align 4, !alias.scope !40
  %254 = fdiv <4 x float> %253, %239
  %255 = bitcast float* %251 to <4 x float>*
  store <4 x float> %254, <4 x float>* %255, align 4, !alias.scope !43, !noalias !40
  %256 = add i64 %241, 8
  %257 = add i64 %242, -2
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %240, !llvm.loop !45

259:                                              ; preds = %240, %235
  %260 = phi i64 [ 0, %235 ], [ %256, %240 ]
  br i1 %198, label %268, label %261

261:                                              ; preds = %259
  %262 = getelementptr float, float* %201, i64 %260
  %263 = getelementptr float, float* %203, i64 %260
  %264 = bitcast float* %262 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4, !alias.scope !40
  %266 = fdiv <4 x float> %265, %239
  %267 = bitcast float* %263 to <4 x float>*
  store <4 x float> %266, <4 x float>* %267, align 4, !alias.scope !43, !noalias !40
  br label %268

268:                                              ; preds = %259, %261
  br i1 %199, label %295, label %225

269:                                              ; preds = %204, %269
  %270 = phi i64 [ %292, %269 ], [ 0, %204 ]
  %271 = phi float [ %291, %269 ], [ 0.000000e+00, %204 ]
  %272 = phi i64 [ %293, %269 ], [ %190, %204 ]
  %273 = getelementptr inbounds float, float* %201, i64 %270
  %274 = load float, float* %273, align 4
  %275 = fmul float %274, %274
  %276 = fadd float %271, %275
  %277 = or i64 %270, 1
  %278 = getelementptr inbounds float, float* %201, i64 %277
  %279 = load float, float* %278, align 4
  %280 = fmul float %279, %279
  %281 = fadd float %276, %280
  %282 = or i64 %270, 2
  %283 = getelementptr inbounds float, float* %201, i64 %282
  %284 = load float, float* %283, align 4
  %285 = fmul float %284, %284
  %286 = fadd float %281, %285
  %287 = or i64 %270, 3
  %288 = getelementptr inbounds float, float* %201, i64 %287
  %289 = load float, float* %288, align 4
  %290 = fmul float %289, %289
  %291 = fadd float %286, %290
  %292 = add nuw nsw i64 %270, 4
  %293 = add i64 %272, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %205, label %269

295:                                              ; preds = %300, %268, %200
  %296 = phi float* [ %203, %200 ], [ %237, %268 ], [ %306, %300 ]
  %297 = phi float* [ %201, %200 ], [ %236, %268 ], [ %307, %300 ]
  %298 = add nuw nsw i32 %202, 1
  %299 = icmp eq i32 %298, %156
  br i1 %299, label %310, label %200

300:                                              ; preds = %225, %300
  %301 = phi i32 [ %308, %300 ], [ %226, %225 ]
  %302 = phi float* [ %307, %300 ], [ %227, %225 ]
  %303 = phi float* [ %306, %300 ], [ %228, %225 ]
  %304 = load float, float* %302, align 4
  %305 = fdiv float %304, %224
  store float %305, float* %303, align 4
  %306 = getelementptr inbounds float, float* %303, i64 1
  %307 = getelementptr inbounds float, float* %302, i64 1
  %308 = add nuw nsw i32 %301, 1
  %309 = icmp slt i32 %308, %173
  br i1 %309, label %300, label %295, !llvm.loop !46

310:                                              ; preds = %295, %155
  br i1 %157, label %311, label %317

311:                                              ; preds = %310
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %313 = load i32*, i32** %312, align 8
  %314 = icmp eq i32* %313, null
  br i1 %314, label %317, label %315

315:                                              ; preds = %311
  %316 = bitcast i32* %313 to i8*
  tail call void @_ZdaPv(i8* %316) #10
  br label %317

317:                                              ; preds = %310, %311, %315
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #9
  br i1 %108, label %318, label %324

318:                                              ; preds = %317
  %319 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %320 = load i32*, i32** %319, align 8
  %321 = icmp eq i32* %320, null
  br i1 %321, label %324, label %322

322:                                              ; preds = %318
  %323 = bitcast i32* %320 to i8*
  tail call void @_ZdaPv(i8* %323) #10
  br label %324

324:                                              ; preds = %317, %318, %322
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #9
  br label %578

325:                                              ; preds = %32
  %326 = bitcast %"struct.tflite::L2NormalizationParams"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %326) #9
  %327 = getelementptr inbounds %"struct.tflite::L2NormalizationParams", %"struct.tflite::L2NormalizationParams"* %5, i64 0, i32 0
  %328 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 3, i32 1
  %329 = load i32, i32* %328, align 4
  store i32 %329, i32* %327, align 4
  %330 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %330) #9
  %331 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %331, label %332, label %334

332:                                              ; preds = %325
  %333 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %333, align 8, !alias.scope !47
  br label %362

334:                                              ; preds = %325
  %335 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %336 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %335, align 8, !noalias !47
  %337 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %336, i64 0, i32 0
  %338 = load i32, i32* %337, align 4, !noalias !47
  %339 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %336, i64 0, i32 1, i64 0
  %340 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %338, i32* %340, align 8, !alias.scope !47
  %341 = icmp sgt i32 %338, 5
  br i1 %341, label %342, label %349

342:                                              ; preds = %334
  %343 = sext i32 %338 to i64
  %344 = shl nsw i64 %343, 2
  %345 = tail call i8* @_Znam(i64 %344) #10, !noalias !47
  %346 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %347 = bitcast i32** %346 to i8**
  store i8* %345, i8** %347, align 8, !alias.scope !47
  %348 = bitcast i8* %345 to i32*
  br label %354

349:                                              ; preds = %334
  %350 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %351 = bitcast %union.anon* %350 to i32*
  %352 = sext i32 %338 to i64
  %353 = shl nsw i64 %352, 2
  br label %354

354:                                              ; preds = %349, %342
  %355 = phi i64 [ %344, %342 ], [ %353, %349 ]
  %356 = phi i32* [ %348, %342 ], [ %351, %349 ]
  %357 = bitcast i32* %356 to i8*
  %358 = bitcast i32* %339 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %357, i8* align 4 %358, i64 %355, i1 false) #9
  %359 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %360 = bitcast %union.TfLitePtrUnion* %359 to i8**
  %361 = load i8*, i8** %360, align 8
  br label %362

362:                                              ; preds = %332, %354
  %363 = phi i8* [ %361, %354 ], [ null, %332 ]
  %364 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %364) #9
  %365 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %365, label %366, label %368

366:                                              ; preds = %362
  %367 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %367, align 8, !alias.scope !50
  br label %396

368:                                              ; preds = %362
  %369 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %370 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %369, align 8, !noalias !50
  %371 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %370, i64 0, i32 0
  %372 = load i32, i32* %371, align 4, !noalias !50
  %373 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %370, i64 0, i32 1, i64 0
  %374 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %372, i32* %374, align 8, !alias.scope !50
  %375 = icmp sgt i32 %372, 5
  br i1 %375, label %376, label %383

376:                                              ; preds = %368
  %377 = sext i32 %372 to i64
  %378 = shl nsw i64 %377, 2
  %379 = tail call i8* @_Znam(i64 %378) #10, !noalias !50
  %380 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %381 = bitcast i32** %380 to i8**
  store i8* %379, i8** %381, align 8, !alias.scope !50
  %382 = bitcast i8* %379 to i32*
  br label %388

383:                                              ; preds = %368
  %384 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %385 = bitcast %union.anon* %384 to i32*
  %386 = sext i32 %372 to i64
  %387 = shl nsw i64 %386, 2
  br label %388

388:                                              ; preds = %383, %376
  %389 = phi i64 [ %378, %376 ], [ %387, %383 ]
  %390 = phi i32* [ %382, %376 ], [ %385, %383 ]
  %391 = bitcast i32* %390 to i8*
  %392 = bitcast i32* %373 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %391, i8* align 4 %392, i64 %389, i1 false) #9
  %393 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %394 = bitcast %union.TfLitePtrUnion* %393 to i8**
  %395 = load i8*, i8** %394, align 8
  br label %396

396:                                              ; preds = %366, %388
  %397 = phi i8* [ %395, %388 ], [ null, %366 ]
  call void @_ZN6tflite13optimized_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::L2NormalizationParams"* nonnull dereferenceable(4) %5, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i8* %363, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %7, i8* %397)
  %398 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  %399 = load i32, i32* %398, align 8
  %400 = icmp sgt i32 %399, 5
  br i1 %400, label %401, label %407

401:                                              ; preds = %396
  %402 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %403 = load i32*, i32** %402, align 8
  %404 = icmp eq i32* %403, null
  br i1 %404, label %407, label %405

405:                                              ; preds = %401
  %406 = bitcast i32* %403 to i8*
  call void @_ZdaPv(i8* %406) #10
  br label %407

407:                                              ; preds = %396, %401, %405
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %364) #9
  %408 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %409 = load i32, i32* %408, align 8
  %410 = icmp sgt i32 %409, 5
  br i1 %410, label %411, label %417

411:                                              ; preds = %407
  %412 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %413 = load i32*, i32** %412, align 8
  %414 = icmp eq i32* %413, null
  br i1 %414, label %417, label %415

415:                                              ; preds = %411
  %416 = bitcast i32* %413 to i8*
  call void @_ZdaPv(i8* %416) #10
  br label %417

417:                                              ; preds = %407, %411, %415
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %330) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %326) #9
  br label %578

418:                                              ; preds = %32
  %419 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %419) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %419, i8 -86, i64 32, i1 false)
  %420 = icmp eq %struct.TfLiteTensor* %21, null
  br i1 %420, label %421, label %423

421:                                              ; preds = %418
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %422, align 8, !alias.scope !53
  br label %448

423:                                              ; preds = %418
  %424 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %425 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %424, align 8, !noalias !53
  %426 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %425, i64 0, i32 0
  %427 = load i32, i32* %426, align 4, !noalias !53
  %428 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %425, i64 0, i32 1, i64 0
  %429 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %427, i32* %429, align 8, !alias.scope !53
  %430 = icmp sgt i32 %427, 5
  br i1 %430, label %431, label %438

431:                                              ; preds = %423
  %432 = sext i32 %427 to i64
  %433 = shl nsw i64 %432, 2
  %434 = tail call i8* @_Znam(i64 %433) #10, !noalias !53
  %435 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %436 = bitcast i32** %435 to i8**
  store i8* %434, i8** %436, align 8, !alias.scope !53
  %437 = bitcast i8* %434 to i32*
  br label %443

438:                                              ; preds = %423
  %439 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %440 = bitcast %union.anon* %439 to i32*
  %441 = sext i32 %427 to i64
  %442 = shl nsw i64 %441, 2
  br label %443

443:                                              ; preds = %438, %431
  %444 = phi i64 [ %433, %431 ], [ %442, %438 ]
  %445 = phi i32* [ %437, %431 ], [ %440, %438 ]
  %446 = bitcast i32* %445 to i8*
  %447 = bitcast i32* %428 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %446, i8* align 4 %447, i64 %444, i1 false) #9
  br label %448

448:                                              ; preds = %421, %443
  %449 = phi i32 [ 0, %421 ], [ %427, %443 ]
  %450 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %450) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %450, i8 -86, i64 32, i1 false)
  %451 = icmp eq %struct.TfLiteTensor* %33, null
  br i1 %451, label %452, label %454

452:                                              ; preds = %448
  %453 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %453, align 8, !alias.scope !56
  br label %480

454:                                              ; preds = %448
  %455 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %456 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %455, align 8, !noalias !56
  %457 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %456, i64 0, i32 0
  %458 = load i32, i32* %457, align 4, !noalias !56
  %459 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %456, i64 0, i32 1, i64 0
  %460 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %458, i32* %460, align 8, !alias.scope !56
  %461 = icmp sgt i32 %458, 5
  br i1 %461, label %462, label %469

462:                                              ; preds = %454
  %463 = sext i32 %458 to i64
  %464 = shl nsw i64 %463, 2
  %465 = tail call i8* @_Znam(i64 %464) #10, !noalias !56
  %466 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %467 = bitcast i32** %466 to i8**
  store i8* %465, i8** %467, align 8, !alias.scope !56
  %468 = bitcast i8* %465 to i32*
  br label %474

469:                                              ; preds = %454
  %470 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %471 = bitcast %union.anon* %470 to i32*
  %472 = sext i32 %458 to i64
  %473 = shl nsw i64 %472, 2
  br label %474

474:                                              ; preds = %469, %462
  %475 = phi i64 [ %464, %462 ], [ %473, %469 ]
  %476 = phi i32* [ %468, %462 ], [ %471, %469 ]
  %477 = bitcast i32* %476 to i8*
  %478 = bitcast i32* %459 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %477, i8* align 4 %478, i64 %475, i1 false) #9
  %479 = icmp sgt i32 %458, 5
  br label %480

480:                                              ; preds = %452, %474
  %481 = phi i1 [ false, %452 ], [ %479, %474 ]
  %482 = add nsw i32 %449, -1
  %483 = icmp sgt i32 %449, 5
  %484 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %485 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %486 = getelementptr inbounds %union.anon, %union.anon* %484, i64 0, i32 0
  %487 = load i32*, i32** %486, align 8
  %488 = sext i32 %482 to i64
  %489 = getelementptr inbounds i32, i32* %487, i64 %488
  %490 = bitcast %union.anon* %484 to [5 x i32]*
  %491 = getelementptr inbounds [5 x i32], [5 x i32]* %490, i64 0, i64 %488
  %492 = select i1 %483, i32* %489, i32* %491
  %493 = load i32, i32* %492, align 4
  %494 = getelementptr inbounds %union.anon, %union.anon* %485, i64 0, i32 0
  %495 = load i32*, i32** %494, align 8
  %496 = getelementptr inbounds i32, i32* %495, i64 %488
  %497 = bitcast %union.anon* %485 to [5 x i32]*
  %498 = getelementptr inbounds [5 x i32], [5 x i32]* %497, i64 0, i64 %488
  %499 = select i1 %481, i32* %496, i32* %498
  %500 = load i32, i32* %499, align 4
  %501 = icmp slt i32 %500, %493
  %502 = select i1 %501, i32 %500, i32 %493
  %503 = bitcast %union.anon* %484 to i32*
  %504 = select i1 %483, i32* %487, i32* %503
  %505 = icmp sgt i32 %449, 0
  br i1 %505, label %506, label %546

506:                                              ; preds = %480
  %507 = zext i32 %482 to i64
  %508 = zext i32 %449 to i64
  %509 = add nsw i64 %508, -1
  %510 = and i64 %508, 3
  %511 = icmp ult i64 %509, 3
  br i1 %511, label %527, label %512

512:                                              ; preds = %506
  %513 = sub nsw i64 %508, %510
  br label %514

514:                                              ; preds = %624, %512
  %515 = phi i64 [ 0, %512 ], [ %627, %624 ]
  %516 = phi i32 [ 1, %512 ], [ %626, %624 ]
  %517 = phi i64 [ %513, %512 ], [ %628, %624 ]
  %518 = icmp eq i64 %515, %507
  br i1 %518, label %522, label %519

519:                                              ; preds = %514
  %520 = getelementptr inbounds i32, i32* %504, i64 %515
  %521 = load i32, i32* %520, align 4
  br label %522

522:                                              ; preds = %519, %514
  %523 = phi i32 [ %521, %519 ], [ 1, %514 ]
  %524 = mul nsw i32 %523, %516
  %525 = or i64 %515, 1
  %526 = icmp eq i64 %525, %507
  br i1 %526, label %608, label %605

527:                                              ; preds = %624, %506
  %528 = phi i32 [ undef, %506 ], [ %626, %624 ]
  %529 = phi i64 [ 0, %506 ], [ %627, %624 ]
  %530 = phi i32 [ 1, %506 ], [ %626, %624 ]
  %531 = icmp eq i64 %510, 0
  br i1 %531, label %546, label %532

532:                                              ; preds = %527, %540
  %533 = phi i64 [ %543, %540 ], [ %529, %527 ]
  %534 = phi i32 [ %542, %540 ], [ %530, %527 ]
  %535 = phi i64 [ %544, %540 ], [ %510, %527 ]
  %536 = icmp eq i64 %533, %507
  br i1 %536, label %540, label %537

537:                                              ; preds = %532
  %538 = getelementptr inbounds i32, i32* %504, i64 %533
  %539 = load i32, i32* %538, align 4
  br label %540

540:                                              ; preds = %537, %532
  %541 = phi i32 [ %539, %537 ], [ 1, %532 ]
  %542 = mul nsw i32 %541, %534
  %543 = add nuw nsw i64 %533, 1
  %544 = add i64 %535, -1
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %546, label %532, !llvm.loop !59

546:                                              ; preds = %527, %540, %480
  %547 = phi i32 [ 1, %480 ], [ %528, %527 ], [ %542, %540 ]
  %548 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 3, i32 1
  %549 = load i32, i32* %548, align 4
  br i1 %420, label %554, label %550

550:                                              ; preds = %546
  %551 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 1
  %552 = bitcast %union.TfLitePtrUnion* %551 to i8**
  %553 = load i8*, i8** %552, align 8
  br label %554

554:                                              ; preds = %546, %550
  %555 = phi i8* [ %553, %550 ], [ null, %546 ]
  br i1 %451, label %560, label %556

556:                                              ; preds = %554
  %557 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 1
  %558 = bitcast %union.TfLitePtrUnion* %557 to i8**
  %559 = load i8*, i8** %558, align 8
  br label %560

560:                                              ; preds = %554, %556
  %561 = phi i8* [ %559, %556 ], [ null, %554 ]
  tail call void @_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa(i32 %549, i32 %547, i32 %502, i8* %555, i8* %561)
  %562 = xor i1 %481, true
  %563 = icmp eq i32* %495, null
  %564 = or i1 %563, %562
  br i1 %564, label %567, label %565

565:                                              ; preds = %560
  %566 = bitcast i32* %495 to i8*
  tail call void @_ZdaPv(i8* %566) #10
  br label %567

567:                                              ; preds = %560, %565
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %450) #9
  %568 = xor i1 %483, true
  %569 = icmp eq i32* %487, null
  %570 = or i1 %569, %568
  br i1 %570, label %573, label %571

571:                                              ; preds = %567
  %572 = bitcast i32* %487 to i8*
  tail call void @_ZdaPv(i8* %572) #10
  br label %573

573:                                              ; preds = %567, %571
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %419) #9
  br label %578

574:                                              ; preds = %32
  %575 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %576 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %575, align 8
  %577 = tail call i8* @TfLiteTypeGetName(i32 %35) #9
  tail call void (%struct.TfLiteContext*, i8*, ...) %576(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0), i8* %577) #9
  br label %578

578:                                              ; preds = %324, %573, %417, %574
  %579 = phi i32 [ 1, %574 ], [ 0, %417 ], [ 0, %573 ], [ 0, %324 ]
  ret i32 %579

580:                                              ; preds = %131
  %581 = getelementptr inbounds i32, i32* %113, i64 %134
  %582 = load i32, i32* %581, align 4
  br label %583

583:                                              ; preds = %580, %131
  %584 = phi i32 [ %582, %580 ], [ 1, %131 ]
  %585 = mul nsw i32 %584, %133
  %586 = or i64 %124, 2
  %587 = icmp eq i64 %586, %116
  br i1 %587, label %591, label %588

588:                                              ; preds = %583
  %589 = getelementptr inbounds i32, i32* %113, i64 %586
  %590 = load i32, i32* %589, align 4
  br label %591

591:                                              ; preds = %588, %583
  %592 = phi i32 [ %590, %588 ], [ 1, %583 ]
  %593 = mul nsw i32 %592, %585
  %594 = or i64 %124, 3
  %595 = icmp eq i64 %594, %116
  br i1 %595, label %599, label %596

596:                                              ; preds = %591
  %597 = getelementptr inbounds i32, i32* %113, i64 %594
  %598 = load i32, i32* %597, align 4
  br label %599

599:                                              ; preds = %596, %591
  %600 = phi i32 [ %598, %596 ], [ 1, %591 ]
  %601 = mul nsw i32 %600, %593
  %602 = add nuw nsw i64 %124, 4
  %603 = add i64 %126, -4
  %604 = icmp eq i64 %603, 0
  br i1 %604, label %136, label %123

605:                                              ; preds = %522
  %606 = getelementptr inbounds i32, i32* %504, i64 %525
  %607 = load i32, i32* %606, align 4
  br label %608

608:                                              ; preds = %605, %522
  %609 = phi i32 [ %607, %605 ], [ 1, %522 ]
  %610 = mul nsw i32 %609, %524
  %611 = or i64 %515, 2
  %612 = icmp eq i64 %611, %507
  br i1 %612, label %616, label %613

613:                                              ; preds = %608
  %614 = getelementptr inbounds i32, i32* %504, i64 %611
  %615 = load i32, i32* %614, align 4
  br label %616

616:                                              ; preds = %613, %608
  %617 = phi i32 [ %615, %613 ], [ 1, %608 ]
  %618 = mul nsw i32 %617, %610
  %619 = or i64 %515, 3
  %620 = icmp eq i64 %619, %507
  br i1 %620, label %624, label %621

621:                                              ; preds = %616
  %622 = getelementptr inbounds i32, i32* %504, i64 %619
  %623 = load i32, i32* %622, align 4
  br label %624

624:                                              ; preds = %621, %616
  %625 = phi i32 [ %623, %621 ], [ 1, %616 ]
  %626 = mul nsw i32 %625, %618
  %627 = add nuw nsw i64 %515, 4
  %628 = add i64 %517, -4
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %527, label %514
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin25Register_L2_NORMALIZATIONEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin27Register_L2NORM_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::L2NormalizationParams"* dereferenceable(4), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #4 comdat {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, 5
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %17 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = sext i32 %10 to i64
  %20 = getelementptr inbounds i32, i32* %18, i64 %19
  %21 = bitcast %union.anon* %12 to [5 x i32]*
  %22 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %19
  %23 = select i1 %11, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 %19
  %28 = bitcast %union.anon* %16 to [5 x i32]*
  %29 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i64 0, i64 %19
  %30 = select i1 %15, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %24
  %33 = select i1 %32, i32 %31, i32 %24
  %34 = bitcast %union.anon* %12 to i32*
  %35 = select i1 %11, i32* %18, i32* %34
  %36 = icmp sgt i32 %9, 0
  br i1 %36, label %37, label %80

37:                                               ; preds = %5
  %38 = zext i32 %10 to i64
  %39 = zext i32 %9 to i64
  %40 = add nsw i64 %39, -1
  %41 = and i64 %39, 3
  %42 = icmp ult i64 %40, 3
  br i1 %42, label %58, label %43

43:                                               ; preds = %37
  %44 = sub nsw i64 %39, %41
  br label %45

45:                                               ; preds = %269, %43
  %46 = phi i64 [ 0, %43 ], [ %272, %269 ]
  %47 = phi i32 [ 1, %43 ], [ %271, %269 ]
  %48 = phi i64 [ %44, %43 ], [ %273, %269 ]
  %49 = icmp eq i64 %46, %38
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds i32, i32* %35, i64 %46
  %52 = load i32, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %45
  %54 = phi i32 [ %52, %50 ], [ 1, %45 ]
  %55 = mul nsw i32 %54, %47
  %56 = or i64 %46, 1
  %57 = icmp eq i64 %56, %38
  br i1 %57, label %253, label %250

58:                                               ; preds = %269, %37
  %59 = phi i32 [ undef, %37 ], [ %271, %269 ]
  %60 = phi i64 [ 0, %37 ], [ %272, %269 ]
  %61 = phi i32 [ 1, %37 ], [ %271, %269 ]
  %62 = icmp eq i64 %41, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %58, %71
  %64 = phi i64 [ %74, %71 ], [ %60, %58 ]
  %65 = phi i32 [ %73, %71 ], [ %61, %58 ]
  %66 = phi i64 [ %75, %71 ], [ %41, %58 ]
  %67 = icmp eq i64 %64, %38
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds i32, i32* %35, i64 %64
  %70 = load i32, i32* %69, align 4
  br label %71

71:                                               ; preds = %68, %63
  %72 = phi i32 [ %70, %68 ], [ 1, %63 ]
  %73 = mul nsw i32 %72, %65
  %74 = add nuw nsw i64 %64, 1
  %75 = add i64 %66, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %63, !llvm.loop !60

77:                                               ; preds = %71, %58
  %78 = phi i32 [ %59, %58 ], [ %73, %71 ]
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %181

80:                                               ; preds = %5, %77
  %81 = phi i32 [ %78, %77 ], [ 1, %5 ]
  %82 = getelementptr inbounds %"struct.tflite::L2NormalizationParams", %"struct.tflite::L2NormalizationParams"* %0, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = icmp sgt i32 %33, 0
  %85 = bitcast i32* %6 to i8*
  %86 = bitcast i32* %7 to i8*
  %87 = sext i32 %33 to i64
  %88 = zext i32 %81 to i64
  %89 = add nsw i64 %87, -8
  %90 = lshr i64 %89, 3
  %91 = add nuw nsw i64 %90, 1
  %92 = icmp ult i32 %33, 8
  %93 = and i64 %87, -8
  %94 = insertelement <4 x i32> undef, i32 %83, i32 0
  %95 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> zeroinitializer
  %96 = insertelement <4 x i32> undef, i32 %83, i32 0
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> zeroinitializer
  %98 = and i64 %91, 1
  %99 = icmp eq i64 %90, 0
  %100 = sub nuw nsw i64 %91, %98
  %101 = icmp eq i64 %98, 0
  %102 = icmp eq i64 %93, %87
  br label %103

103:                                              ; preds = %208, %80
  %104 = phi i64 [ 0, %80 ], [ %209, %208 ]
  br i1 %84, label %105, label %207

105:                                              ; preds = %103
  %106 = mul nsw i64 %104, %87
  br i1 %92, label %107, label %110

107:                                              ; preds = %172, %105
  %108 = phi i64 [ 0, %105 ], [ %93, %172 ]
  %109 = phi i32 [ 0, %105 ], [ %180, %172 ]
  br label %195

110:                                              ; preds = %105
  br i1 %99, label %150, label %111

111:                                              ; preds = %110, %111
  %112 = phi i64 [ %147, %111 ], [ 0, %110 ]
  %113 = phi <4 x i32> [ %145, %111 ], [ zeroinitializer, %110 ]
  %114 = phi <4 x i32> [ %146, %111 ], [ zeroinitializer, %110 ]
  %115 = phi i64 [ %148, %111 ], [ %100, %110 ]
  %116 = add nsw i64 %112, %106
  %117 = getelementptr inbounds i8, i8* %2, i64 %116
  %118 = bitcast i8* %117 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1
  %120 = getelementptr inbounds i8, i8* %117, i64 4
  %121 = bitcast i8* %120 to <4 x i8>*
  %122 = load <4 x i8>, <4 x i8>* %121, align 1
  %123 = zext <4 x i8> %119 to <4 x i32>
  %124 = zext <4 x i8> %122 to <4 x i32>
  %125 = sub nsw <4 x i32> %123, %95
  %126 = sub nsw <4 x i32> %124, %97
  %127 = mul nsw <4 x i32> %125, %125
  %128 = mul nsw <4 x i32> %126, %126
  %129 = add nuw nsw <4 x i32> %127, %113
  %130 = add nuw nsw <4 x i32> %128, %114
  %131 = or i64 %112, 8
  %132 = add nsw i64 %131, %106
  %133 = getelementptr inbounds i8, i8* %2, i64 %132
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = getelementptr inbounds i8, i8* %133, i64 4
  %137 = bitcast i8* %136 to <4 x i8>*
  %138 = load <4 x i8>, <4 x i8>* %137, align 1
  %139 = zext <4 x i8> %135 to <4 x i32>
  %140 = zext <4 x i8> %138 to <4 x i32>
  %141 = sub nsw <4 x i32> %139, %95
  %142 = sub nsw <4 x i32> %140, %97
  %143 = mul nsw <4 x i32> %141, %141
  %144 = mul nsw <4 x i32> %142, %142
  %145 = add nuw nsw <4 x i32> %143, %129
  %146 = add nuw nsw <4 x i32> %144, %130
  %147 = add i64 %112, 16
  %148 = add i64 %115, -2
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %111, !llvm.loop !61

150:                                              ; preds = %111, %110
  %151 = phi <4 x i32> [ undef, %110 ], [ %145, %111 ]
  %152 = phi <4 x i32> [ undef, %110 ], [ %146, %111 ]
  %153 = phi i64 [ 0, %110 ], [ %147, %111 ]
  %154 = phi <4 x i32> [ zeroinitializer, %110 ], [ %145, %111 ]
  %155 = phi <4 x i32> [ zeroinitializer, %110 ], [ %146, %111 ]
  br i1 %101, label %172, label %156

156:                                              ; preds = %150
  %157 = add nsw i64 %153, %106
  %158 = getelementptr inbounds i8, i8* %2, i64 %157
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = getelementptr inbounds i8, i8* %158, i64 4
  %162 = bitcast i8* %161 to <4 x i8>*
  %163 = load <4 x i8>, <4 x i8>* %162, align 1
  %164 = zext <4 x i8> %160 to <4 x i32>
  %165 = zext <4 x i8> %163 to <4 x i32>
  %166 = sub nsw <4 x i32> %164, %95
  %167 = sub nsw <4 x i32> %165, %97
  %168 = mul nsw <4 x i32> %167, %167
  %169 = add nuw nsw <4 x i32> %168, %155
  %170 = mul nsw <4 x i32> %166, %166
  %171 = add nuw nsw <4 x i32> %170, %154
  br label %172

172:                                              ; preds = %150, %156
  %173 = phi <4 x i32> [ %151, %150 ], [ %171, %156 ]
  %174 = phi <4 x i32> [ %152, %150 ], [ %169, %156 ]
  %175 = add nuw <4 x i32> %174, %173
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %177 = add <4 x i32> %175, %176
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %179 = add <4 x i32> %177, %178
  %180 = extractelement <4 x i32> %179, i32 0
  br i1 %102, label %182, label %107

181:                                              ; preds = %208, %77
  ret void

182:                                              ; preds = %195, %172
  %183 = phi i32 [ %180, %172 ], [ %204, %195 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 %183, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br i1 %84, label %184, label %208

184:                                              ; preds = %182
  %185 = mul nsw i64 %104, %87
  %186 = load i32, i32* %6, align 4
  %187 = load i32, i32* %7, align 4
  %188 = sext i32 %186 to i64
  %189 = sub nsw i32 0, %187
  %190 = zext i32 %189 to i64
  %191 = shl nsw i64 -1, %190
  %192 = trunc i64 %191 to i32
  %193 = xor i32 %192, -1
  %194 = ashr i32 %193, 1
  br label %211

195:                                              ; preds = %107, %195
  %196 = phi i64 [ %205, %195 ], [ %108, %107 ]
  %197 = phi i32 [ %204, %195 ], [ %109, %107 ]
  %198 = add nsw i64 %196, %106
  %199 = getelementptr inbounds i8, i8* %2, i64 %198
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = sub nsw i32 %201, %83
  %203 = mul nsw i32 %202, %202
  %204 = add nuw nsw i32 %203, %197
  %205 = add nuw nsw i64 %196, 1
  %206 = icmp slt i64 %205, %87
  br i1 %206, label %195, label %182, !llvm.loop !62

207:                                              ; preds = %103
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 0, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br label %208

208:                                              ; preds = %232, %207, %182
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #9
  %209 = add nuw nsw i64 %104, 1
  %210 = icmp eq i64 %209, %88
  br i1 %210, label %181, label %103

211:                                              ; preds = %184, %232
  %212 = phi i64 [ 0, %184 ], [ %248, %232 ]
  %213 = add nsw i64 %212, %185
  %214 = getelementptr inbounds i8, i8* %2, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = sub nsw i32 %216, %83
  %218 = shl nsw i32 %217, 7
  %219 = icmp eq i32 %218, %186
  br i1 %219, label %222, label %220

220:                                              ; preds = %211
  %221 = sext i32 %218 to i64
  br label %224

222:                                              ; preds = %211
  %223 = icmp eq i32 %217, -16777216
  br i1 %223, label %232, label %224

224:                                              ; preds = %222, %220
  %225 = phi i64 [ %221, %220 ], [ %188, %222 ]
  %226 = mul nsw i64 %225, %188
  %227 = icmp sgt i64 %226, -1
  %228 = select i1 %227, i64 1073741824, i64 -1073741823
  %229 = add nsw i64 %228, %226
  %230 = sdiv i64 %229, 2147483648
  %231 = trunc i64 %230 to i32
  br label %232

232:                                              ; preds = %222, %224
  %233 = phi i32 [ %231, %224 ], [ 2147483647, %222 ]
  %234 = and i32 %233, %193
  %235 = lshr i32 %233, 31
  %236 = add nsw i32 %235, %194
  %237 = ashr i32 %233, %189
  %238 = icmp sgt i32 %234, %236
  %239 = zext i1 %238 to i32
  %240 = add nsw i32 %237, %239
  %241 = icmp sgt i32 %240, -128
  %242 = select i1 %241, i32 %240, i32 -128
  %243 = icmp slt i32 %242, 127
  %244 = select i1 %243, i32 %242, i32 127
  %245 = trunc i32 %244 to i8
  %246 = xor i8 %245, -128
  %247 = getelementptr inbounds i8, i8* %4, i64 %213
  store i8 %246, i8* %247, align 1
  %248 = add nuw nsw i64 %212, 1
  %249 = icmp slt i64 %248, %87
  br i1 %249, label %211, label %208

250:                                              ; preds = %53
  %251 = getelementptr inbounds i32, i32* %35, i64 %56
  %252 = load i32, i32* %251, align 4
  br label %253

253:                                              ; preds = %250, %53
  %254 = phi i32 [ %252, %250 ], [ 1, %53 ]
  %255 = mul nsw i32 %254, %55
  %256 = or i64 %46, 2
  %257 = icmp eq i64 %256, %38
  br i1 %257, label %261, label %258

258:                                              ; preds = %253
  %259 = getelementptr inbounds i32, i32* %35, i64 %256
  %260 = load i32, i32* %259, align 4
  br label %261

261:                                              ; preds = %258, %253
  %262 = phi i32 [ %260, %258 ], [ 1, %253 ]
  %263 = mul nsw i32 %262, %255
  %264 = or i64 %46, 3
  %265 = icmp eq i64 %264, %38
  br i1 %265, label %269, label %266

266:                                              ; preds = %261
  %267 = getelementptr inbounds i32, i32* %35, i64 %264
  %268 = load i32, i32* %267, align 4
  br label %269

269:                                              ; preds = %266, %261
  %270 = phi i32 [ %268, %266 ], [ 1, %261 ]
  %271 = mul nsw i32 %270, %263
  %272 = add nuw nsw i64 %46, 4
  %273 = add i64 %48, -4
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %58, label %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa(i32, i32, i32, i8*, i8*) local_unnamed_addr #4 comdat {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %110

9:                                                ; preds = %5
  %10 = icmp sgt i32 %2, 0
  %11 = bitcast i32* %6 to i8*
  %12 = bitcast i32* %7 to i8*
  %13 = sext i32 %2 to i64
  %14 = zext i32 %1 to i64
  %15 = zext i32 %2 to i64
  %16 = zext i32 %2 to i64
  %17 = and i64 %16, 4294967288
  %18 = add nsw i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i32 %2, 8
  %22 = and i64 %16, 4294967288
  %23 = insertelement <4 x i32> undef, i32 %0, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = insertelement <4 x i32> undef, i32 %0, i32 0
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> zeroinitializer
  %27 = and i64 %20, 1
  %28 = icmp eq i64 %18, 0
  %29 = sub nuw nsw i64 %20, %27
  %30 = icmp eq i64 %27, 0
  %31 = icmp eq i64 %22, %16
  br label %32

32:                                               ; preds = %143, %9
  %33 = phi i64 [ 0, %9 ], [ %144, %143 ]
  br i1 %10, label %34, label %142

34:                                               ; preds = %32
  %35 = mul nsw i64 %33, %13
  br i1 %21, label %36, label %39

36:                                               ; preds = %101, %34
  %37 = phi i64 [ 0, %34 ], [ %22, %101 ]
  %38 = phi i32 [ 0, %34 ], [ %109, %101 ]
  br label %130

39:                                               ; preds = %34
  br i1 %28, label %79, label %40

40:                                               ; preds = %39, %40
  %41 = phi i64 [ %76, %40 ], [ 0, %39 ]
  %42 = phi <4 x i32> [ %74, %40 ], [ zeroinitializer, %39 ]
  %43 = phi <4 x i32> [ %75, %40 ], [ zeroinitializer, %39 ]
  %44 = phi i64 [ %77, %40 ], [ %29, %39 ]
  %45 = add nsw i64 %41, %35
  %46 = getelementptr inbounds i8, i8* %3, i64 %45
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = getelementptr inbounds i8, i8* %46, i64 4
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = sext <4 x i8> %48 to <4 x i32>
  %53 = sext <4 x i8> %51 to <4 x i32>
  %54 = sub nsw <4 x i32> %52, %24
  %55 = sub nsw <4 x i32> %53, %26
  %56 = mul nsw <4 x i32> %54, %54
  %57 = mul nsw <4 x i32> %55, %55
  %58 = add nuw nsw <4 x i32> %56, %42
  %59 = add nuw nsw <4 x i32> %57, %43
  %60 = or i64 %41, 8
  %61 = add nsw i64 %60, %35
  %62 = getelementptr inbounds i8, i8* %3, i64 %61
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 4
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = sext <4 x i8> %64 to <4 x i32>
  %69 = sext <4 x i8> %67 to <4 x i32>
  %70 = sub nsw <4 x i32> %68, %24
  %71 = sub nsw <4 x i32> %69, %26
  %72 = mul nsw <4 x i32> %70, %70
  %73 = mul nsw <4 x i32> %71, %71
  %74 = add nuw nsw <4 x i32> %72, %58
  %75 = add nuw nsw <4 x i32> %73, %59
  %76 = add i64 %41, 16
  %77 = add i64 %44, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !64

79:                                               ; preds = %40, %39
  %80 = phi <4 x i32> [ undef, %39 ], [ %74, %40 ]
  %81 = phi <4 x i32> [ undef, %39 ], [ %75, %40 ]
  %82 = phi i64 [ 0, %39 ], [ %76, %40 ]
  %83 = phi <4 x i32> [ zeroinitializer, %39 ], [ %74, %40 ]
  %84 = phi <4 x i32> [ zeroinitializer, %39 ], [ %75, %40 ]
  br i1 %30, label %101, label %85

85:                                               ; preds = %79
  %86 = add nsw i64 %82, %35
  %87 = getelementptr inbounds i8, i8* %3, i64 %86
  %88 = bitcast i8* %87 to <4 x i8>*
  %89 = load <4 x i8>, <4 x i8>* %88, align 1
  %90 = getelementptr inbounds i8, i8* %87, i64 4
  %91 = bitcast i8* %90 to <4 x i8>*
  %92 = load <4 x i8>, <4 x i8>* %91, align 1
  %93 = sext <4 x i8> %89 to <4 x i32>
  %94 = sext <4 x i8> %92 to <4 x i32>
  %95 = sub nsw <4 x i32> %93, %24
  %96 = sub nsw <4 x i32> %94, %26
  %97 = mul nsw <4 x i32> %96, %96
  %98 = add nuw nsw <4 x i32> %97, %84
  %99 = mul nsw <4 x i32> %95, %95
  %100 = add nuw nsw <4 x i32> %99, %83
  br label %101

101:                                              ; preds = %79, %85
  %102 = phi <4 x i32> [ %80, %79 ], [ %100, %85 ]
  %103 = phi <4 x i32> [ %81, %79 ], [ %98, %85 ]
  %104 = add nuw <4 x i32> %103, %102
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %106 = add <4 x i32> %104, %105
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %108 = add <4 x i32> %106, %107
  %109 = extractelement <4 x i32> %108, i32 0
  br i1 %31, label %111, label %36

110:                                              ; preds = %143, %5
  ret void

111:                                              ; preds = %130, %101
  %112 = phi i32 [ %109, %101 ], [ %139, %130 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 %112, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br i1 %10, label %113, label %143

113:                                              ; preds = %111
  %114 = mul nsw i64 %33, %13
  %115 = load i32, i32* %6, align 4
  %116 = load i32, i32* %7, align 4
  %117 = add nsw i32 %116, 7
  %118 = icmp sgt i32 %117, 0
  %119 = sub i32 -7, %116
  %120 = select i1 %118, i32 0, i32 %119
  %121 = shl i32 1, %117
  %122 = select i1 %118, i32 %121, i32 1
  %123 = sext i32 %115 to i64
  %124 = icmp eq i32 %115, -2147483648
  %125 = zext i32 %120 to i64
  %126 = shl nsw i64 -1, %125
  %127 = trunc i64 %126 to i32
  %128 = xor i32 %127, -1
  %129 = ashr i32 %128, 1
  br label %146

130:                                              ; preds = %36, %130
  %131 = phi i64 [ %140, %130 ], [ %37, %36 ]
  %132 = phi i32 [ %139, %130 ], [ %38, %36 ]
  %133 = add nsw i64 %131, %35
  %134 = getelementptr inbounds i8, i8* %3, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = sub nsw i32 %136, %0
  %138 = mul nsw i32 %137, %137
  %139 = add nuw nsw i32 %138, %132
  %140 = add nuw nsw i64 %131, 1
  %141 = icmp eq i64 %140, %15
  br i1 %141, label %111, label %130, !llvm.loop !65

142:                                              ; preds = %32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 0, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br label %143

143:                                              ; preds = %166, %142, %111
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #9
  %144 = add nuw nsw i64 %33, 1
  %145 = icmp eq i64 %144, %14
  br i1 %145, label %110, label %32

146:                                              ; preds = %166, %113
  %147 = phi i64 [ 0, %113 ], [ %181, %166 ]
  %148 = add nsw i64 %147, %114
  %149 = getelementptr inbounds i8, i8* %3, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = sub nsw i32 %151, %0
  %153 = mul nsw i32 %122, %152
  %154 = icmp eq i32 %153, %115
  br i1 %154, label %157, label %155

155:                                              ; preds = %146
  %156 = sext i32 %153 to i64
  br label %158

157:                                              ; preds = %146
  br i1 %124, label %166, label %158

158:                                              ; preds = %157, %155
  %159 = phi i64 [ %156, %155 ], [ %123, %157 ]
  %160 = mul nsw i64 %159, %123
  %161 = icmp sgt i64 %160, -1
  %162 = select i1 %161, i64 1073741824, i64 -1073741823
  %163 = add nsw i64 %162, %160
  %164 = sdiv i64 %163, 2147483648
  %165 = trunc i64 %164 to i32
  br label %166

166:                                              ; preds = %157, %158
  %167 = phi i32 [ %165, %158 ], [ 2147483647, %157 ]
  %168 = and i32 %167, %128
  %169 = lshr i32 %167, 31
  %170 = add nsw i32 %169, %129
  %171 = ashr i32 %167, %120
  %172 = icmp sgt i32 %168, %170
  %173 = zext i1 %172 to i32
  %174 = add nsw i32 %171, %173
  %175 = icmp sgt i32 %174, -128
  %176 = select i1 %175, i32 %174, i32 -128
  %177 = icmp slt i32 %176, 127
  %178 = select i1 %177, i32 %176, i32 127
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds i8, i8* %4, i64 %148
  store i8 %179, i8* %180, align 1
  %181 = add nuw nsw i64 %147, 1
  %182 = icmp eq i64 %181, %16
  br i1 %182, label %143, label %146
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32, i32, i32*, i32*) local_unnamed_addr #4 comdat {
  %5 = icmp slt i32 %0, 2
  br i1 %5, label %27, label %6

6:                                                ; preds = %4
  %7 = icmp sgt i32 %0, 536870911
  %8 = lshr i32 %0, 2
  %9 = select i1 %7, i32 12, i32 11
  %10 = select i1 %7, i32 %8, i32 %0
  %11 = tail call i32 @llvm.ctlz.i32(i32 %10, i1 false) #9, !range !66
  %12 = add nsw i32 %11, -1
  %13 = lshr i32 %12, 1
  %14 = add nsw i32 %13, -1
  %15 = sub nsw i32 %9, %14
  store i32 %15, i32* %3, align 4
  %16 = shl i32 %14, 1
  %17 = shl i32 %10, %16
  %18 = ashr i32 %17, 1
  %19 = and i32 %18, 1
  %20 = lshr i32 %18, 31
  %21 = ashr i32 %17, 2
  %22 = icmp ugt i32 %19, %20
  %23 = zext i1 %22 to i32
  %24 = add nsw i32 %21, %23
  %25 = sext i32 %24 to i64
  %26 = icmp eq i32 %24, -2147483648
  br label %40

27:                                               ; preds = %4
  store i32 2147483647, i32* %2, align 4
  br label %123

28:                                               ; preds = %101
  %29 = icmp eq i32 %114, 1518500250
  %30 = sext i32 %114 to i64
  %31 = mul nsw i64 %30, 1518500250
  %32 = select i1 %29, i64 2305843009250062500, i64 %31
  %33 = icmp sgt i64 %32, -1
  %34 = select i1 %33, i64 1073741824, i64 -1073741823
  %35 = add nsw i64 %34, %32
  %36 = sdiv i64 %35, 2147483648
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %2, align 4
  %38 = load i32, i32* %3, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %117, label %120

40:                                               ; preds = %101, %6
  %41 = phi i32 [ 0, %6 ], [ %115, %101 ]
  %42 = phi i32 [ 268435456, %6 ], [ %114, %101 ]
  %43 = icmp eq i32 %42, -2147483648
  %44 = sext i32 %42 to i64
  br i1 %43, label %50, label %45

45:                                               ; preds = %40
  %46 = mul nsw i64 %44, %44
  %47 = add nuw nsw i64 %46, 1073741824
  %48 = lshr i64 %47, 31
  %49 = trunc i64 %48 to i32
  br label %50

50:                                               ; preds = %40, %45
  %51 = phi i32 [ %49, %45 ], [ 2147483647, %40 ]
  %52 = icmp eq i32 %51, %42
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = sext i32 %51 to i64
  br label %56

55:                                               ; preds = %50
  br i1 %43, label %64, label %56

56:                                               ; preds = %55, %53
  %57 = phi i64 [ %54, %53 ], [ %44, %55 ]
  %58 = mul nsw i64 %57, %44
  %59 = icmp sgt i64 %58, -1
  %60 = select i1 %59, i64 1073741824, i64 -1073741823
  %61 = add nsw i64 %60, %58
  %62 = sdiv i64 %61, 2147483648
  %63 = trunc i64 %62 to i32
  br label %64

64:                                               ; preds = %55, %56
  %65 = phi i32 [ %63, %56 ], [ 2147483647, %55 ]
  %66 = icmp slt i32 %65, 33554432
  %67 = icmp sgt i32 %65, -33554432
  %68 = sext i32 %65 to i64
  %69 = shl nsw i64 %68, 6
  %70 = icmp slt i64 %69, 2147483647
  %71 = select i1 %70, i64 %69, i64 2147483647
  %72 = icmp sgt i64 %71, -2147483648
  %73 = select i1 %72, i64 %71, i64 -2147483648
  %74 = trunc i64 %73 to i32
  %75 = select i1 %66, i32 %74, i32 2147483647
  %76 = select i1 %67, i32 %75, i32 -2147483648
  %77 = icmp eq i32 %42, 402653184
  br i1 %77, label %81, label %78

78:                                               ; preds = %64
  %79 = mul nsw i64 %44, 402653184
  %80 = icmp sgt i32 %42, -1
  br i1 %80, label %81, label %83

81:                                               ; preds = %64, %78
  %82 = phi i64 [ %79, %78 ], [ 162129586585337856, %64 ]
  br label %83

83:                                               ; preds = %81, %78
  %84 = phi i64 [ %82, %81 ], [ %79, %78 ]
  %85 = phi i64 [ 1073741824, %81 ], [ -1073741823, %78 ]
  %86 = add nsw i64 %85, %84
  %87 = sdiv i64 %86, 2147483648
  %88 = trunc i64 %87 to i32
  %89 = icmp eq i32 %24, %76
  br i1 %89, label %92, label %90

90:                                               ; preds = %83
  %91 = sext i32 %76 to i64
  br label %93

92:                                               ; preds = %83
  br i1 %26, label %101, label %93

93:                                               ; preds = %92, %90
  %94 = phi i64 [ %91, %90 ], [ %25, %92 ]
  %95 = mul nsw i64 %94, %25
  %96 = icmp sgt i64 %95, -1
  %97 = select i1 %96, i64 1073741824, i64 -1073741823
  %98 = add nsw i64 %97, %95
  %99 = sdiv i64 %98, 2147483648
  %100 = trunc i64 %99 to i32
  br label %101

101:                                              ; preds = %92, %93
  %102 = phi i32 [ %100, %93 ], [ 2147483647, %92 ]
  %103 = sub nsw i32 %88, %102
  %104 = icmp slt i32 %103, 268435456
  %105 = icmp sgt i32 %103, -268435456
  %106 = sext i32 %103 to i64
  %107 = shl nsw i64 %106, 3
  %108 = icmp slt i64 %107, 2147483647
  %109 = select i1 %108, i64 %107, i64 2147483647
  %110 = icmp sgt i64 %109, -2147483648
  %111 = select i1 %110, i64 %109, i64 -2147483648
  %112 = trunc i64 %111 to i32
  %113 = select i1 %104, i32 %112, i32 2147483647
  %114 = select i1 %105, i32 %113, i32 -2147483648
  %115 = add nuw nsw i32 %41, 1
  %116 = icmp eq i32 %115, 5
  br i1 %116, label %28, label %40

117:                                              ; preds = %28
  %118 = sub nsw i32 0, %38
  %119 = shl i32 %37, %118
  store i32 %119, i32* %2, align 4
  store i32 0, i32* %3, align 4
  br label %120

120:                                              ; preds = %117, %28
  %121 = phi i32 [ 0, %117 ], [ %38, %28 ]
  %122 = mul nsw i32 %121, %1
  br label %123

123:                                              ; preds = %120, %27
  %124 = phi i32 [ %122, %120 ], [ 0, %27 ]
  store i32 %124, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph(%"struct.tflite::L2NormalizationParams"* dereferenceable(4), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #4 comdat {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %9, 5
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, 5
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %17 = getelementptr inbounds %union.anon, %union.anon* %12, i64 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = sext i32 %10 to i64
  %20 = getelementptr inbounds i32, i32* %18, i64 %19
  %21 = bitcast %union.anon* %12 to [5 x i32]*
  %22 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %19
  %23 = select i1 %11, i32* %20, i32* %22
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 %19
  %28 = bitcast %union.anon* %16 to [5 x i32]*
  %29 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i64 0, i64 %19
  %30 = select i1 %15, i32* %27, i32* %29
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %24
  %33 = select i1 %32, i32 %31, i32 %24
  %34 = bitcast %union.anon* %12 to i32*
  %35 = select i1 %11, i32* %18, i32* %34
  %36 = icmp sgt i32 %9, 0
  br i1 %36, label %37, label %80

37:                                               ; preds = %5
  %38 = zext i32 %10 to i64
  %39 = zext i32 %9 to i64
  %40 = add nsw i64 %39, -1
  %41 = and i64 %39, 3
  %42 = icmp ult i64 %40, 3
  br i1 %42, label %58, label %43

43:                                               ; preds = %37
  %44 = sub nsw i64 %39, %41
  br label %45

45:                                               ; preds = %268, %43
  %46 = phi i64 [ 0, %43 ], [ %271, %268 ]
  %47 = phi i32 [ 1, %43 ], [ %270, %268 ]
  %48 = phi i64 [ %44, %43 ], [ %272, %268 ]
  %49 = icmp eq i64 %46, %38
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds i32, i32* %35, i64 %46
  %52 = load i32, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %45
  %54 = phi i32 [ %52, %50 ], [ 1, %45 ]
  %55 = mul nsw i32 %54, %47
  %56 = or i64 %46, 1
  %57 = icmp eq i64 %56, %38
  br i1 %57, label %252, label %249

58:                                               ; preds = %268, %37
  %59 = phi i32 [ undef, %37 ], [ %270, %268 ]
  %60 = phi i64 [ 0, %37 ], [ %271, %268 ]
  %61 = phi i32 [ 1, %37 ], [ %270, %268 ]
  %62 = icmp eq i64 %41, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %58, %71
  %64 = phi i64 [ %74, %71 ], [ %60, %58 ]
  %65 = phi i32 [ %73, %71 ], [ %61, %58 ]
  %66 = phi i64 [ %75, %71 ], [ %41, %58 ]
  %67 = icmp eq i64 %64, %38
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds i32, i32* %35, i64 %64
  %70 = load i32, i32* %69, align 4
  br label %71

71:                                               ; preds = %68, %63
  %72 = phi i32 [ %70, %68 ], [ 1, %63 ]
  %73 = mul nsw i32 %72, %65
  %74 = add nuw nsw i64 %64, 1
  %75 = add i64 %66, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %63, !llvm.loop !67

77:                                               ; preds = %71, %58
  %78 = phi i32 [ %59, %58 ], [ %73, %71 ]
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %178

80:                                               ; preds = %5, %77
  %81 = phi i32 [ %78, %77 ], [ 1, %5 ]
  %82 = getelementptr inbounds %"struct.tflite::L2NormalizationParams", %"struct.tflite::L2NormalizationParams"* %0, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = icmp sgt i32 %33, 0
  %85 = bitcast i32* %6 to i8*
  %86 = bitcast i32* %7 to i8*
  %87 = sext i32 %33 to i64
  %88 = add nsw i64 %87, -8
  %89 = lshr i64 %88, 3
  %90 = add nuw nsw i64 %89, 1
  %91 = icmp ult i32 %33, 8
  %92 = and i64 %87, -8
  %93 = insertelement <4 x i32> undef, i32 %83, i32 0
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> zeroinitializer
  %95 = insertelement <4 x i32> undef, i32 %83, i32 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> zeroinitializer
  %97 = and i64 %90, 1
  %98 = icmp eq i64 %89, 0
  %99 = sub nuw nsw i64 %90, %97
  %100 = icmp eq i64 %97, 0
  %101 = icmp eq i64 %92, %87
  br label %102

102:                                              ; preds = %193, %80
  %103 = phi i8* [ %2, %80 ], [ %195, %193 ]
  %104 = phi i8* [ %4, %80 ], [ %194, %193 ]
  %105 = phi i32 [ 0, %80 ], [ %196, %193 ]
  br i1 %84, label %106, label %192

106:                                              ; preds = %102
  br i1 %91, label %107, label %110

107:                                              ; preds = %169, %106
  %108 = phi i64 [ 0, %106 ], [ %92, %169 ]
  %109 = phi i32 [ 0, %106 ], [ %177, %169 ]
  br label %181

110:                                              ; preds = %106
  br i1 %98, label %148, label %111

111:                                              ; preds = %110, %111
  %112 = phi i64 [ %145, %111 ], [ 0, %110 ]
  %113 = phi <4 x i32> [ %143, %111 ], [ zeroinitializer, %110 ]
  %114 = phi <4 x i32> [ %144, %111 ], [ zeroinitializer, %110 ]
  %115 = phi i64 [ %146, %111 ], [ %99, %110 ]
  %116 = getelementptr inbounds i8, i8* %103, i64 %112
  %117 = bitcast i8* %116 to <4 x i8>*
  %118 = load <4 x i8>, <4 x i8>* %117, align 1
  %119 = getelementptr inbounds i8, i8* %116, i64 4
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = zext <4 x i8> %118 to <4 x i32>
  %123 = zext <4 x i8> %121 to <4 x i32>
  %124 = sub nsw <4 x i32> %122, %94
  %125 = sub nsw <4 x i32> %123, %96
  %126 = mul nsw <4 x i32> %124, %124
  %127 = mul nsw <4 x i32> %125, %125
  %128 = add nuw nsw <4 x i32> %126, %113
  %129 = add nuw nsw <4 x i32> %127, %114
  %130 = or i64 %112, 8
  %131 = getelementptr inbounds i8, i8* %103, i64 %130
  %132 = bitcast i8* %131 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = getelementptr inbounds i8, i8* %131, i64 4
  %135 = bitcast i8* %134 to <4 x i8>*
  %136 = load <4 x i8>, <4 x i8>* %135, align 1
  %137 = zext <4 x i8> %133 to <4 x i32>
  %138 = zext <4 x i8> %136 to <4 x i32>
  %139 = sub nsw <4 x i32> %137, %94
  %140 = sub nsw <4 x i32> %138, %96
  %141 = mul nsw <4 x i32> %139, %139
  %142 = mul nsw <4 x i32> %140, %140
  %143 = add nuw nsw <4 x i32> %141, %128
  %144 = add nuw nsw <4 x i32> %142, %129
  %145 = add i64 %112, 16
  %146 = add i64 %115, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %111, !llvm.loop !68

148:                                              ; preds = %111, %110
  %149 = phi <4 x i32> [ undef, %110 ], [ %143, %111 ]
  %150 = phi <4 x i32> [ undef, %110 ], [ %144, %111 ]
  %151 = phi i64 [ 0, %110 ], [ %145, %111 ]
  %152 = phi <4 x i32> [ zeroinitializer, %110 ], [ %143, %111 ]
  %153 = phi <4 x i32> [ zeroinitializer, %110 ], [ %144, %111 ]
  br i1 %100, label %169, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds i8, i8* %103, i64 %151
  %156 = bitcast i8* %155 to <4 x i8>*
  %157 = load <4 x i8>, <4 x i8>* %156, align 1
  %158 = getelementptr inbounds i8, i8* %155, i64 4
  %159 = bitcast i8* %158 to <4 x i8>*
  %160 = load <4 x i8>, <4 x i8>* %159, align 1
  %161 = zext <4 x i8> %157 to <4 x i32>
  %162 = zext <4 x i8> %160 to <4 x i32>
  %163 = sub nsw <4 x i32> %161, %94
  %164 = sub nsw <4 x i32> %162, %96
  %165 = mul nsw <4 x i32> %164, %164
  %166 = add nuw nsw <4 x i32> %165, %153
  %167 = mul nsw <4 x i32> %163, %163
  %168 = add nuw nsw <4 x i32> %167, %152
  br label %169

169:                                              ; preds = %148, %154
  %170 = phi <4 x i32> [ %149, %148 ], [ %168, %154 ]
  %171 = phi <4 x i32> [ %150, %148 ], [ %166, %154 ]
  %172 = add nuw <4 x i32> %171, %170
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %174 = add <4 x i32> %172, %173
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %176 = add <4 x i32> %174, %175
  %177 = extractelement <4 x i32> %176, i32 0
  br i1 %101, label %179, label %107

178:                                              ; preds = %193, %77
  ret void

179:                                              ; preds = %181, %169
  %180 = phi i32 [ %177, %169 ], [ %189, %181 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 %180, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br i1 %84, label %198, label %193

181:                                              ; preds = %107, %181
  %182 = phi i64 [ %190, %181 ], [ %108, %107 ]
  %183 = phi i32 [ %189, %181 ], [ %109, %107 ]
  %184 = getelementptr inbounds i8, i8* %103, i64 %182
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = sub nsw i32 %186, %83
  %188 = mul nsw i32 %187, %187
  %189 = add nuw nsw i32 %188, %183
  %190 = add nuw nsw i64 %182, 1
  %191 = icmp slt i64 %190, %87
  br i1 %191, label %181, label %179, !llvm.loop !69

192:                                              ; preds = %102
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %85) #9
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %86) #9
  store i32 -1431655766, i32* %7, align 4
  call void @_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_(i32 0, i32 -1, i32* nonnull %6, i32* nonnull %7)
  br label %193

193:                                              ; preds = %224, %192, %179
  %194 = phi i8* [ %104, %179 ], [ %104, %192 ], [ %246, %224 ]
  %195 = phi i8* [ %103, %179 ], [ %103, %192 ], [ %245, %224 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %86) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %85) #9
  %196 = add nuw nsw i32 %105, 1
  %197 = icmp eq i32 %196, %81
  br i1 %197, label %178, label %102

198:                                              ; preds = %179, %224
  %199 = phi i8* [ %245, %224 ], [ %103, %179 ]
  %200 = phi i8* [ %246, %224 ], [ %104, %179 ]
  %201 = phi i32 [ %247, %224 ], [ 0, %179 ]
  %202 = load i8, i8* %199, align 1
  %203 = zext i8 %202 to i32
  %204 = sub nsw i32 %203, %83
  %205 = shl nsw i32 %204, 7
  %206 = load i32, i32* %6, align 4
  %207 = load i32, i32* %7, align 4
  %208 = icmp eq i32 %205, %206
  br i1 %208, label %213, label %209

209:                                              ; preds = %198
  %210 = sext i32 %205 to i64
  %211 = sext i32 %206 to i64
  %212 = mul nsw i64 %210, %211
  br label %217

213:                                              ; preds = %198
  %214 = icmp eq i32 %204, -16777216
  %215 = sext i32 %205 to i64
  %216 = mul nsw i64 %215, %215
  br i1 %214, label %224, label %217

217:                                              ; preds = %213, %209
  %218 = phi i64 [ %212, %209 ], [ %216, %213 ]
  %219 = icmp sgt i64 %218, -1
  %220 = select i1 %219, i64 1073741824, i64 -1073741823
  %221 = add nsw i64 %220, %218
  %222 = sdiv i64 %221, 2147483648
  %223 = trunc i64 %222 to i32
  br label %224

224:                                              ; preds = %213, %217
  %225 = phi i32 [ %223, %217 ], [ 2147483647, %213 ]
  %226 = sub nsw i32 0, %207
  %227 = zext i32 %226 to i64
  %228 = shl nsw i64 -1, %227
  %229 = trunc i64 %228 to i32
  %230 = xor i32 %229, -1
  %231 = and i32 %225, %230
  %232 = ashr i32 %230, 1
  %233 = lshr i32 %225, 31
  %234 = add nsw i32 %233, %232
  %235 = ashr i32 %225, %226
  %236 = icmp sgt i32 %231, %234
  %237 = zext i1 %236 to i32
  %238 = add nsw i32 %235, %237
  %239 = icmp sgt i32 %238, -128
  %240 = select i1 %239, i32 %238, i32 -128
  %241 = icmp slt i32 %240, 127
  %242 = select i1 %241, i32 %240, i32 127
  %243 = trunc i32 %242 to i8
  %244 = xor i8 %243, -128
  store i8 %244, i8* %200, align 1
  %245 = getelementptr inbounds i8, i8* %199, i64 1
  %246 = getelementptr inbounds i8, i8* %200, i64 1
  %247 = add nuw nsw i32 %201, 1
  %248 = icmp slt i32 %247, %33
  br i1 %248, label %198, label %193

249:                                              ; preds = %53
  %250 = getelementptr inbounds i32, i32* %35, i64 %56
  %251 = load i32, i32* %250, align 4
  br label %252

252:                                              ; preds = %249, %53
  %253 = phi i32 [ %251, %249 ], [ 1, %53 ]
  %254 = mul nsw i32 %253, %55
  %255 = or i64 %46, 2
  %256 = icmp eq i64 %255, %38
  br i1 %256, label %260, label %257

257:                                              ; preds = %252
  %258 = getelementptr inbounds i32, i32* %35, i64 %255
  %259 = load i32, i32* %258, align 4
  br label %260

260:                                              ; preds = %257, %252
  %261 = phi i32 [ %259, %257 ], [ 1, %252 ]
  %262 = mul nsw i32 %261, %254
  %263 = or i64 %46, 3
  %264 = icmp eq i64 %263, %38
  br i1 %264, label %268, label %265

265:                                              ; preds = %260
  %266 = getelementptr inbounds i32, i32* %35, i64 %263
  %267 = load i32, i32* %266, align 4
  br label %268

268:                                              ; preds = %265, %260
  %269 = phi i32 [ %267, %265 ], [ 1, %260 ]
  %270 = mul nsw i32 %269, %262
  %271 = add nuw nsw i64 %46, 4
  %272 = add i64 %48, -4
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %58, label %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !17}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!21 = distinct !{!21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!24 = distinct !{!24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!27 = distinct !{!27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!30 = distinct !{!30, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!31 = distinct !{!31, !9}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!34 = distinct !{!34, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!37 = distinct !{!37, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!38 = distinct !{!38, !9}
!39 = distinct !{!39, !9}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = !{!44}
!44 = distinct !{!44, !42}
!45 = distinct !{!45, !17}
!46 = distinct !{!46, !17}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!49 = distinct !{!49, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!52 = distinct !{!52, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!55 = distinct !{!55, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!58 = distinct !{!58, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!59 = distinct !{!59, !9}
!60 = distinct !{!60, !9}
!61 = distinct !{!61, !17}
!62 = distinct !{!62, !63, !17}
!63 = !{!"llvm.loop.unroll.runtime.disable"}
!64 = distinct !{!64, !17}
!65 = distinct !{!65, !63, !17}
!66 = !{i32 0, i32 33}
!67 = distinct !{!67, !9}
!68 = distinct !{!68, !17}
!69 = distinct !{!69, !63, !17}
