; ModuleID = '../../third_party/blink/renderer/core/layout/line/inline_flow_box.cc'
source_filename = "../../third_party/blink/renderer/core/layout/line/inline_flow_box.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::InlineFlowBox" = type <{ %"class.blink::InlineBox", %"class.std::__1::unique_ptr.1603", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"*, i32, [4 x i8] }>
%"class.blink::InlineBox" = type { %"class.blink::DisplayItemClient.base", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::LineLayoutItem", %"class.blink::LayoutPoint", %"class.blink::LayoutUnit", %"class.blink::InlineBox::InlineBoxBitfields" }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::LineLayoutItem" = type { %"class.blink::LayoutObject"* }
%"class.blink::LayoutObject" = type { %"class.blink::ImageResourceObserver", %"class.blink::DisplayItemClient.base", i8, [2 x i8], %"class.blink::LayoutObject::LayoutObjectBitfields", %class.scoped_refptr, %"class.blink::UntracedMember", %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::FragmentData" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::LayoutObject::LayoutObjectBitfields" = type { [12 x i8] }
%class.scoped_refptr = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.731", %"class.std::__1::unique_ptr.733" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.443", %"class.blink::DataRef.447", %"class.blink::DataRef.647", %"class.blink::DataRef.714", %"class.blink::DataRef.718", %"class.blink::DataRef.722", %"class.blink::DataRef.726", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.1", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.1" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.3", %"class.blink::Font" }
%"class.WTF::RefCounted.3" = type { %"class.base::RefCounted.4" }
%"class.base::RefCounted.4" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.29 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.8, %class.scoped_refptr.11, %class.scoped_refptr.21, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.28 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.7 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.7 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.1601", [4 x i8] }>
%"class.WTF::RefCounted.1601" = type { %"class.base::RefCounted.1602" }
%"class.base::RefCounted.1602" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.8 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.9", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.9" = type { %"class.base::RefCounted.10" }
%"class.base::RefCounted.10" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.11 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.12", %"class.WTF::RefCounted.19", [4 x i8] }>
%"class.blink::FontSettings.12" = type { %"class.WTF::Vector.13" }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.blink::FontTagValuePair.16"*, i32, i32 }
%"class.blink::FontTagValuePair.16" = type { i32, float }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.21 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.22", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.25, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.22" = type { %"class.base::RefCounted.23" }
%"class.base::RefCounted.23" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.25 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.26", [4 x i8] }>
%"class.WTF::RefCounted.26" = type { %"class.base::RefCounted.27" }
%"class.base::RefCounted.27" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.28 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.29 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.30", %"class.WTF::Vector.32", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.30" = type { %"class.base::RefCounted.31" }
%"class.base::RefCounted.31" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34", [8 x i8] }
%"class.WTF::VectorBufferBase.34" = type { %class.scoped_refptr.35*, i32, i32 }
%class.scoped_refptr.35 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.36", [4 x i8] }>
%"class.WTF::RefCounted.36" = type { %"class.base::RefCounted.37" }
%"class.base::RefCounted.37" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.56, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.36" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.51, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.41" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.41" }>
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl.44" }
%"struct.std::__1::__cxx_atomic_impl.44" = type { %"struct.std::__1::__cxx_atomic_base_impl.45" }
%"struct.std::__1::__cxx_atomic_base_impl.45" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.51 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.54, %class.scoped_refptr.54 }
%class.scoped_refptr.54 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.56 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.57", [4 x i8] }>
%"class.WTF::RefCounted.57" = type { %"class.base::RefCounted.58" }
%"class.base::RefCounted.58" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.59", i32, [4 x i8], %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.197", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.213", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.231", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.238", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { %"struct.std::__1::__cxx_atomic_impl.98" }
%"struct.std::__1::__cxx_atomic_impl.98" = type { %"struct.std::__1::__cxx_atomic_base_impl.99" }
%"struct.std::__1::__cxx_atomic_base_impl.99" = type { i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::Worklist.106"* }
%"class.blink::Worklist.106" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist.113"* }
%"class.blink::Worklist.113" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::Worklist.120"* }
%"class.blink::Worklist.120" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::Worklist.127"* }
%"class.blink::Worklist.127" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::Worklist.134"* }
%"class.blink::Worklist.134" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::Worklist.141"* }
%"class.blink::Worklist.141" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::Worklist.148"* }
%"class.blink::Worklist.148" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.155", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.171", [4 x i8] }>
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157", %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { float }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.180", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.189" }
%"class.WTF::Vector.189" = type { %"class.WTF::VectorBuffer.190" }
%"class.WTF::VectorBuffer.190" = type { %"class.WTF::VectorBufferBase.191" }
%"class.WTF::VectorBufferBase.191" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.219" }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.106"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.113"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.120"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.127"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.134"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.1594", i64 }
%"class.std::__1::vector.1594" = type { %"class.std::__1::__vector_base.1595" }
%"class.std::__1::__vector_base.1595" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1596" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1596" = type { %"struct.std::__1::__compressed_pair_elem.1597" }
%"struct.std::__1::__compressed_pair_elem.1597" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.237 }
%class.scoped_refptr.237 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.238" = type { %"struct.std::__1::__atomic_base.239" }
%"struct.std::__1::__atomic_base.239" = type { %"struct.std::__1::__cxx_atomic_impl.240" }
%"struct.std::__1::__cxx_atomic_impl.240" = type { %"struct.std::__1::__cxx_atomic_base_impl.241" }
%"struct.std::__1::__cxx_atomic_base_impl.241" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.242 }
%class.scoped_refptr.242 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.41" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.46" }
%"class.blink::Length" = type <{ %union.anon.243, i8, i8, i8, i8 }>
%union.anon.243 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.244" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.246", [4 x i8], %"class.blink::DataRef.248", %"class.blink::DataRef.280", %"class.WTF::Vector.284", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.289, %class.scoped_refptr.298, %"class.blink::Persistent.306", %"class.blink::Persistent.308", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.246" = type { %"class.base::RefCounted.247" }
%"class.base::RefCounted.247" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.248" = type { %class.scoped_refptr.249 }
%class.scoped_refptr.249 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.250", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.252, %class.scoped_refptr.259, %"class.blink::Persistent.270", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.250" = type { %"class.base::RefCounted.251" }
%"class.base::RefCounted.251" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.252 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.253", %"class.WTF::Vector.254" }
%"class.base::RefCountedThreadSafe.253" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.259 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.260", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.260" = type { %"class.base::RefCounted.261" }
%"class.base::RefCounted.261" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1724 }
%class.scoped_refptr.1724 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.1725", %"class.WTF::Vector.630", %"class.WTF::Vector.1727", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.1725" = type { %"class.base::RefCounted.1726" }
%"class.base::RefCounted.1726" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.630" = type { %"class.WTF::VectorBuffer.631" }
%"class.WTF::VectorBuffer.631" = type { %"class.WTF::VectorBufferBase.632" }
%"class.WTF::VectorBufferBase.632" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.1727" = type { %"class.WTF::VectorBuffer.1728" }
%"class.WTF::VectorBuffer.1728" = type { %"class.WTF::VectorBufferBase.1729" }
%"class.WTF::VectorBufferBase.1729" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.1730 }
%union.anon.1730 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.264" }
%"class.blink::PersistentBase.264" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.265" }
%"class.WTF::HashMap.265" = type { %"class.WTF::HashTable.266" }
%"class.WTF::HashTable.266" = type <{ %"struct.WTF::KeyValuePair.268"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.268" = type opaque
%"class.blink::PersistentNodePtr.269" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.270" = type { %"class.blink::PersistentBase.271" }
%"class.blink::PersistentBase.271" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.274" }
%"class.WTF::Vector.274" = type { %"class.WTF::VectorBuffer.275" }
%"class.WTF::VectorBuffer.275" = type { %"class.WTF::VectorBufferBase.276" }
%"class.WTF::VectorBufferBase.276" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.280" = type { %class.scoped_refptr.281 }
%class.scoped_refptr.281 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.282", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.282" = type { %"class.base::RefCounted.283" }
%"class.base::RefCounted.283" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.289 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.290", %"class.WTF::Vector.292" }
%"class.WTF::RefCounted.290" = type { %"class.base::RefCounted.291" }
%"class.base::RefCounted.291" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.292" = type { %"class.WTF::VectorBuffer.293" }
%"class.WTF::VectorBuffer.293" = type { %"class.WTF::VectorBufferBase.294" }
%"class.WTF::VectorBufferBase.294" = type { %"struct.std::__1::pair.295"*, i32, i32 }
%"struct.std::__1::pair.295" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.298 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.299", [4 x i8], %"class.WTF::Vector.301" }
%"class.WTF::RefCounted.299" = type { %"class.base::RefCounted.300" }
%"class.base::RefCounted.300" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.301" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.303", [28 x i8] }>
%"class.WTF::VectorBufferBase.303" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Persistent.306" = type { %"class.blink::PersistentBase.307" }
%"class.blink::PersistentBase.307" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::Persistent.308" = type { %"class.blink::PersistentBase.309" }
%"class.blink::PersistentBase.309" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.312", %"class.blink::Member.441" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.314", %"class.blink::Member.326", %"class.blink::Member.320", %"class.blink::Member.328", %"class.blink::Member.328", %"class.blink::Member.372", %"class.blink::Member.374", %"class.blink::Member.376", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.381", %"class.blink::HeapVector.383" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.314" = type { %"class.blink::MemberBase.315" }
%"class.blink::MemberBase.315" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.318", %"class.blink::Member.318" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.318", %"class.blink::Member.320", %"class.blink::Member.318", %"class.blink::Member.318", %"class.blink::Member.322" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.322" = type { %"class.blink::MemberBase.323" }
%"class.blink::MemberBase.323" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.318" = type { %"class.blink::MemberBase.319" }
%"class.blink::MemberBase.319" = type { %"class.blink::Node"* }
%"class.blink::Member.326" = type { %"class.blink::MemberBase.327" }
%"class.blink::MemberBase.327" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.906", %"class.WTF::Vector.906", i8, i32, %"class.blink::Member.913", %"class.blink::Member.915", %"class.blink::Member.917", %"class.blink::Member.919", %"class.blink::Member.921", %"class.blink::Member.923", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.931", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.937", %"class.blink::Member.939", %"class.blink::Member.389", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.942", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.365", %"class.blink::Member.343", %"class.blink::Member.967", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::UserActionElementSet", %"class.blink::Member.976", double, double, i64, i64, %"class.blink::HeapHashSet.978", %"class.blink::HeapHashSet.985", i16, i8, %"class.blink::Member.992", %"class.blink::Member.994", %"class.blink::Member.1318", %"class.blink::Member.1320", %"class.blink::TextLinkColors", %"class.blink::Member.1322", i8, [7 x i8], %"class.blink::HeapHashMap.1324", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.343", %"class.WTF::Vector.1331", %"class.blink::Member.1336", %"class.blink::Member.1338", i8, %"class.blink::Member.343", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1340", %"class.blink::HeapVector.1342", %"class.std::__1::unique_ptr.1350", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1356", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1369", %"class.WTF::Vector.1371", i8, i8, %"class.std::__1::unique_ptr.1376", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.365", %"class.blink::HeapVector.1382", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1390", i8, i32, %"class.blink::Member.1392", %"class.blink::Member.1394", %"class.blink::Member.1396", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1398", %"class.WTF::HashMap.1400", %"class.blink::Member.1405", %"class.blink::Member.1407", %"class.blink::Member.1409", %"class.blink::Member.1411", %"class.blink::Member.326", %"class.blink::Member.326", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1413", i8, i32, %"class.blink::Member.1420", %"class.blink::Member.1422", i32, %"class.blink::Member.1424", %"class.blink::Member.1426", %"class.blink::Member.1428", %"class.std::__1::unique_ptr.1430", i64, %"class.std::__1::unique_ptr.1436", i32, i32, %"class.blink::Member.1447", %"class.blink::Member.1449", %"class.blink::Member.1451", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1453", %"class.WTF::Vector.1455", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1460", %"class.blink::Member.1467", %"class.std::__1::unique_ptr.1469", %"class.blink::Member.1475", i8, i8, %"class.WTF::String", %"class.blink::Member.1477", i8, [7 x i8], %"class.blink::HeapHashMap.1479", %"class.blink::HeapObserverSet", %"class.blink::Member.1493", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1495", i32, i8, i8, %"class.blink::WeakMember.1497", %"class.blink::Member.1498" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.899" }
%"class.blink::HeapHashMap.899" = type { %"class.WTF::HashMap.902" }
%"class.WTF::HashMap.902" = type { %"class.WTF::HashTable.903" }
%"class.WTF::HashTable.903" = type <{ %"struct.WTF::KeyValuePair.905"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.905" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.906" = type { %"class.WTF::VectorBuffer.907" }
%"class.WTF::VectorBuffer.907" = type { %"class.WTF::VectorBufferBase.908" }
%"class.WTF::VectorBufferBase.908" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.909 }
%class.scoped_refptr.909 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.910", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.910" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::Member.913" = type { %"class.blink::MemberBase.914" }
%"class.blink::MemberBase.914" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.915" = type { %"class.blink::MemberBase.916" }
%"class.blink::MemberBase.916" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.1522", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.1563", i32, i8, [3 x i8], %"class.blink::HeapVector.1565", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.1573", %"class.blink::Member.1575", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.1584", %"class.blink::Member.1590", %"class.blink::Member.1592", i8, [7 x i8] }>
%"class.blink::Supplementable.1522" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1523" }
%"class.blink::HeapHashMap.1523" = type { %"class.WTF::HashMap.1526" }
%"class.WTF::HashMap.1526" = type { %"class.WTF::HashTable.1527" }
%"class.WTF::HashTable.1527" = type <{ %"struct.WTF::KeyValuePair.1529"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1529" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.1538" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.1530" }
%"class.blink::HeapObserverSet.1530" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1531" }
%"class.blink::HeapHashSet.1531" = type { %"class.WTF::HashSet.1534" }
%"class.WTF::HashSet.1534" = type { %"class.WTF::HashTable.1535" }
%"class.WTF::HashTable.1535" = type <{ %"class.blink::WeakMember.1537"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1537" = type opaque
%"class.blink::Supplementable.1538" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1539" }
%"class.blink::HeapHashMap.1539" = type { %"class.WTF::HashMap.1542" }
%"class.WTF::HashMap.1542" = type { %"class.WTF::HashTable.1543" }
%"class.WTF::HashTable.1543" = type <{ %"struct.WTF::KeyValuePair.1545"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1545" = type { i8*, %"class.blink::Member.1710" }
%"class.blink::Member.1710" = type { %"class.blink::MemberBase.1711" }
%"class.blink::MemberBase.1711" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1712" }
%"class.blink::Member.1712" = type { %"class.blink::MemberBase.1713" }
%"class.blink::MemberBase.1713" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.1546, %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1553", %"class.std::__1::unique_ptr.1553", %"class.blink::Member.915", i32, [4 x i8], %"class.WTF::HashSet.1559", i32, i32 }
%class.scoped_refptr.1546 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.1547" = type { %"class.std::__1::__compressed_pair.1548" }
%"class.std::__1::__compressed_pair.1548" = type { %"struct.std::__1::__compressed_pair_elem.1549" }
%"struct.std::__1::__compressed_pair_elem.1549" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.1553" = type { %"class.std::__1::__compressed_pair.1554" }
%"class.std::__1::__compressed_pair.1554" = type { %"struct.std::__1::__compressed_pair_elem.1555" }
%"struct.std::__1::__compressed_pair_elem.1555" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.1559" = type { %"class.WTF::HashTable.1560" }
%"class.WTF::HashTable.1560" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1563" = type { %"class.blink::MemberBase.1564" }
%"class.blink::MemberBase.1564" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.1565" = type { %"class.WTF::Vector.1568" }
%"class.WTF::Vector.1568" = type { %"class.WTF::VectorBuffer.1569" }
%"class.WTF::VectorBuffer.1569" = type { %"class.WTF::VectorBufferBase.1570" }
%"class.WTF::VectorBufferBase.1570" = type { %"class.blink::Member.1571"*, i32, i32 }
%"class.blink::Member.1571" = type opaque
%"class.blink::Member.1573" = type { %"class.blink::MemberBase.1574" }
%"class.blink::MemberBase.1574" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.1575" = type { %"class.blink::MemberBase.1576" }
%"class.blink::MemberBase.1576" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.1577", i32, i32 }
%"class.blink::HeapHashMap.1577" = type { %"class.WTF::HashMap.1580" }
%"class.WTF::HashMap.1580" = type { %"class.WTF::HashTable.1581" }
%"class.WTF::HashTable.1581" = type <{ %"struct.WTF::KeyValuePair.1583"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1583" = type opaque
%"class.std::__1::unique_ptr.1584" = type { %"class.std::__1::__compressed_pair.1585" }
%"class.std::__1::__compressed_pair.1585" = type { %"struct.std::__1::__compressed_pair_elem.1586" }
%"struct.std::__1::__compressed_pair_elem.1586" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.1590" = type { %"class.blink::MemberBase.1591" }
%"class.blink::MemberBase.1591" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.1592" = type { %"class.blink::MemberBase.1593" }
%"class.blink::MemberBase.1593" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.917" = type { %"class.blink::MemberBase.918" }
%"class.blink::MemberBase.918" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.919" = type { %"class.blink::MemberBase.920" }
%"class.blink::MemberBase.920" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.921" = type { %"class.blink::MemberBase.922" }
%"class.blink::MemberBase.922" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.923" = type { %"class.blink::MemberBase.924" }
%"class.blink::MemberBase.924" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.925" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.925" = type { %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.blink::KURL"* }
%"class.blink::Member.937" = type { %"class.blink::MemberBase.938" }
%"class.blink::MemberBase.938" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.939" = type { %"class.blink::MemberBase.940" }
%"class.blink::MemberBase.940" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.389" = type { %"class.blink::MemberBase.390" }
%"class.blink::MemberBase.390" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.391", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.393, %"class.WTF::Vector.412", %"class.WTF::Vector.412", %"class.blink::Member.318", %"class.blink::Member.417", %"class.blink::HeapHashSet", %"class.blink::Member.326", %"class.WTF::HashSet.425", %"class.WTF::TextPosition", %"class.blink::Member.429", %"class.blink::HeapVector.431", %"class.blink::Member.438" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.391" = type { %"class.blink::MemberBase.392" }
%"class.blink::MemberBase.392" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.393 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.394", %"class.WTF::Vector.396" }
%"class.WTF::RefCounted.394" = type { %"class.base::RefCounted.395" }
%"class.base::RefCounted.395" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.396" = type { %"class.WTF::VectorBuffer.397" }
%"class.WTF::VectorBuffer.397" = type { %"class.WTF::VectorBufferBase.398" }
%"class.WTF::VectorBufferBase.398" = type { %"class.std::__1::unique_ptr.399"*, i32, i32 }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.402", %"class.WTF::String" }
%"class.WTF::Vector.402" = type { %"class.WTF::VectorBuffer.403" }
%"class.WTF::VectorBuffer.403" = type { %"class.WTF::VectorBufferBase.404" }
%"class.WTF::VectorBufferBase.404" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::Vector.412" = type { %"class.WTF::VectorBuffer.413" }
%"class.WTF::VectorBuffer.413" = type { %"class.WTF::VectorBufferBase.414" }
%"class.WTF::VectorBufferBase.414" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.417" = type { %"class.blink::MemberBase.418" }
%"class.blink::MemberBase.418" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.419" }
%"class.blink::Member.419" = type { %"class.blink::MemberBase.420" }
%"class.blink::MemberBase.420" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.423" }
%"class.WTF::HashTable.423" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.321" }
%"class.blink::MemberBase.321" = type { %"class.blink::TreeScope"* }
%"class.WTF::HashSet.425" = type { %"class.WTF::HashTable.426" }
%"class.WTF::HashTable.426" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.429" = type { %"class.blink::MemberBase.430" }
%"class.blink::MemberBase.430" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.393, %"class.blink::Member.389", %"class.blink::Member.417" }
%"class.blink::HeapVector.431" = type { %"class.WTF::Vector.434" }
%"class.WTF::Vector.434" = type { %"class.WTF::VectorBuffer.435" }
%"class.WTF::VectorBuffer.435" = type { %"class.WTF::VectorBufferBase.436" }
%"class.WTF::VectorBufferBase.436" = type { %"class.blink::Member.417"*, i32, i32 }
%"class.blink::Member.438" = type { %"class.blink::MemberBase.439" }
%"class.blink::MemberBase.439" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.941 }
%class.scoped_refptr.941 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.942" = type { %"class.WTF::VectorBuffer.943" }
%"class.WTF::VectorBuffer.943" = type { %"class.WTF::VectorBufferBase.944" }
%"class.WTF::VectorBufferBase.944" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.945 }
%class.scoped_refptr.945 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.946", i32, i32, %"class.blink::Persistent.948" }
%"class.WTF::RefCounted.946" = type { %"class.base::RefCounted.947" }
%"class.base::RefCounted.947" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.948" = type { %"class.blink::PersistentBase.949" }
%"class.blink::PersistentBase.949" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.952" }
%"class.blink::HeapHashMap.952" = type { %"class.WTF::HashMap.955" }
%"class.WTF::HashMap.955" = type { %"class.WTF::HashTable.956" }
%"class.WTF::HashTable.956" = type <{ %"struct.WTF::KeyValuePair.958"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.958" = type { %"class.blink::WeakMember.959", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.959" = type { %"class.blink::MemberBase.960" }
%"class.blink::MemberBase.960" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::Member.967" = type { %"class.blink::MemberBase.968" }
%"class.blink::MemberBase.968" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.326", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.318", %"class.blink::Member.318", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.969" }
%"class.blink::HeapHashMap.969" = type { %"class.WTF::HashMap.972" }
%"class.WTF::HashMap.972" = type { %"class.WTF::HashTable.973" }
%"class.WTF::HashTable.973" = type <{ %"struct.WTF::KeyValuePair.975"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.975" = type opaque
%"class.blink::Member.976" = type { %"class.blink::MemberBase.977" }
%"class.blink::MemberBase.977" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.978" = type { %"class.WTF::HashSet.981" }
%"class.WTF::HashSet.981" = type { %"class.WTF::HashTable.982" }
%"class.WTF::HashTable.982" = type <{ %"class.blink::WeakMember.984"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.984" = type opaque
%"class.blink::HeapHashSet.985" = type { %"class.WTF::HashSet.988" }
%"class.WTF::HashSet.988" = type { %"class.WTF::HashTable.989" }
%"class.WTF::HashTable.989" = type <{ %"class.blink::WeakMember.991"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.991" = type opaque
%"class.blink::Member.992" = type { %"class.blink::MemberBase.993" }
%"class.blink::MemberBase.993" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.994" = type { %"class.blink::MemberBase.995" }
%"class.blink::MemberBase.995" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type { %"class.blink::FontSelectorClient", %"class.blink::NameClient", %"class.blink::Member.326", i32, i32, i32, %"class.blink::Member.389", %"class.blink::Member.998", %"class.blink::Member.1025", %"class.blink::HeapHashMap.1027", i8, i8, i8, [5 x i8], %"class.blink::HeapHashSet.1034", %"class.blink::HeapHashSet.1034", %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, %"class.blink::Member.1040", %"class.blink::Member.1052", %"class.blink::Member.1081", %"class.blink::Member.1083", %"class.blink::Member.1089", %"class.blink::PendingInvalidations", %"class.blink::StyleInvalidationRoot", %"class.blink::StyleRecalcRoot", %"class.blink::LayoutTreeRebuildRoot", %"class.blink::HeapHashSet.1251", %"class.blink::Member.1257", %"class.blink::HeapHashMap.1259", %"class.blink::HeapHashMap.1266", %"class.std::__1::unique_ptr.1273", i32, %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1010", %"class.blink::HeapHashSet.1287", %"class.blink::HeapHashMap.1294", %"class.blink::Member.1301", %"class.blink::HeapHashMap.1303", %class.scoped_refptr.1310, %class.scoped_refptr.259, %"class.blink::Member.1215", i32, i32, %"class.blink::Color", i32, %"class.blink::Color", [4 x i8], %"class.blink::HeapHashSet.1311", %"class.blink::Member.343" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.998" = type { %"class.blink::MemberBase.999" }
%"class.blink::MemberBase.999" = type { %"class.blink::DocumentStyleSheetCollection"* }
%"class.blink::DocumentStyleSheetCollection" = type { %"class.blink::TreeScopeStyleSheetCollection" }
%"class.blink::TreeScopeStyleSheetCollection" = type { %"class.blink::StyleSheetCollection.base", %"class.blink::Member.320", %"class.blink::TreeOrderedList" }
%"class.blink::StyleSheetCollection.base" = type <{ %"class.blink::NameClient", %"class.blink::HeapVector.1002", %"class.blink::HeapVector.1010", i8 }>
%"class.blink::HeapVector.1002" = type { %"class.WTF::Vector.1005" }
%"class.WTF::Vector.1005" = type { %"class.WTF::VectorBuffer.1006" }
%"class.WTF::VectorBuffer.1006" = type { %"class.WTF::VectorBufferBase.1007" }
%"class.WTF::VectorBufferBase.1007" = type { %"class.blink::Member.1008"*, i32, i32 }
%"class.blink::Member.1008" = type opaque
%"class.blink::TreeOrderedList" = type { %"class.blink::HeapListHashSet" }
%"class.blink::HeapListHashSet" = type { %"class.WTF::ListHashSet.base", [7 x i8] }
%"class.WTF::ListHashSet.base" = type <{ %"class.WTF::HashTable.1021", %"class.blink::Member.1023", %"class.blink::Member.1023", %"struct.blink::HeapListHashSetAllocator::AllocatorProvider" }>
%"class.WTF::HashTable.1021" = type <{ %"class.blink::Member.1023"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1023" = type { %"class.blink::MemberBase.1024" }
%"class.blink::MemberBase.1024" = type { %"class.blink::HeapListHashSetNode"* }
%"class.blink::HeapListHashSetNode" = type { %"class.blink::Member.318", %"class.blink::Member.1023", %"class.blink::Member.1023" }
%"struct.blink::HeapListHashSetAllocator::AllocatorProvider" = type { i8 }
%"class.blink::Member.1025" = type { %"class.blink::MemberBase.1026" }
%"class.blink::MemberBase.1026" = type { %"class.blink::StyleRuleUsageTracker"* }
%"class.blink::StyleRuleUsageTracker" = type opaque
%"class.blink::HeapHashMap.1027" = type { %"class.WTF::HashMap.1030" }
%"class.WTF::HashMap.1030" = type { %"class.WTF::HashTable.1031" }
%"class.WTF::HashTable.1031" = type <{ %"struct.WTF::KeyValuePair.1033"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1033" = type opaque
%"class.blink::HeapHashSet.1034" = type { %"class.WTF::HashSet.1037" }
%"class.WTF::HashSet.1037" = type { %"class.WTF::HashTable.1038" }
%"class.WTF::HashTable.1038" = type <{ %"class.blink::Member.320"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1040" = type { %"class.blink::MemberBase.1041" }
%"class.blink::MemberBase.1041" = type { %"class.blink::ReferenceFilterOperation"* }
%"class.blink::ReferenceFilterOperation" = type { %"class.blink::FilterOperation.base", %"class.WTF::AtomicString", %"class.blink::Member.1042", %"class.blink::Member.1044" }
%"class.blink::FilterOperation.base" = type <{ i32 (...)**, i32 }>
%"class.blink::Member.1042" = type { %"class.blink::MemberBase.1043" }
%"class.blink::MemberBase.1043" = type { %"class.blink::SVGResource"* }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.343", %"class.blink::HeapHashMap.687" }
%"class.blink::HeapHashMap.687" = type { %"class.WTF::HashMap.690" }
%"class.WTF::HashMap.690" = type { %"class.WTF::HashTable.691" }
%"class.WTF::HashTable.691" = type <{ %"struct.WTF::KeyValuePair.693"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.693" = type opaque
%"class.blink::Member.1044" = type { %"class.blink::MemberBase.1045" }
%"class.blink::MemberBase.1045" = type { %"class.blink::Filter"* }
%"class.blink::Filter" = type { %"class.blink::FloatRect", %"class.blink::FloatRect", float, i32, %"class.blink::Member.1048", %"class.blink::Member.1050" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.1048" = type { %"class.blink::MemberBase.1049" }
%"class.blink::MemberBase.1049" = type { %"class.blink::SourceGraphic"* }
%"class.blink::SourceGraphic" = type opaque
%"class.blink::Member.1050" = type { %"class.blink::MemberBase.1051" }
%"class.blink::MemberBase.1051" = type { %"class.blink::FilterEffect"* }
%"class.blink::FilterEffect" = type { i32 (...)**, %"class.blink::HeapVector.1513", %"class.blink::Member.1044", %"class.blink::FloatRect", i8, i8, i32, [4 x %class.sk_sp.817] }
%"class.blink::HeapVector.1513" = type { %"class.WTF::Vector.1516" }
%"class.WTF::Vector.1516" = type { %"class.WTF::VectorBuffer.1517" }
%"class.WTF::VectorBuffer.1517" = type { %"class.WTF::VectorBufferBase.1518" }
%"class.WTF::VectorBufferBase.1518" = type { %"class.blink::Member.1050"*, i32, i32 }
%class.sk_sp.817 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.818, i32, %"class.absl::optional.819", i8, i32 }
%class.sk_sp.818 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.819" = type { %"class.absl::optional_internal::optional_data.820" }
%"class.absl::optional_internal::optional_data.820" = type { %"class.absl::optional_internal::optional_data_base.821" }
%"class.absl::optional_internal::optional_data_base.821" = type { %"class.absl::optional_internal::optional_data_dtor_base.822" }
%"class.absl::optional_internal::optional_data_dtor_base.822" = type { i8, %union.anon.823 }
%union.anon.823 = type { %struct.SkRect }
%"class.blink::Member.1052" = type { %"class.blink::MemberBase.1053" }
%"class.blink::MemberBase.1053" = type { %"class.blink::StyleResolver"* }
%"class.blink::StyleResolver" = type <{ %"class.blink::MatchedPropertiesCache", %"class.blink::Member.326", %class.scoped_refptr, %"class.blink::SelectorFilter", %"class.blink::Member.1025", i8, i8, [6 x i8] }>
%"class.blink::MatchedPropertiesCache" = type { %"class.blink::HeapHashMap.1056" }
%"class.blink::HeapHashMap.1056" = type { %"class.WTF::HashMap.1059" }
%"class.WTF::HashMap.1059" = type { %"class.WTF::HashTable.1060" }
%"class.WTF::HashTable.1060" = type <{ %"struct.WTF::KeyValuePair.1062"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1062" = type opaque
%"class.blink::SelectorFilter" = type { %"class.blink::HeapVector.1063", %"class.std::__1::unique_ptr.1075" }
%"class.blink::HeapVector.1063" = type { %"class.WTF::Vector.1066" }
%"class.WTF::Vector.1066" = type { %"class.WTF::VectorBuffer.1067" }
%"class.WTF::VectorBuffer.1067" = type { %"class.WTF::VectorBufferBase.1068" }
%"class.WTF::VectorBufferBase.1068" = type { %"class.blink::SelectorFilter::ParentStackFrame"*, i32, i32 }
%"class.blink::SelectorFilter::ParentStackFrame" = type { %"class.blink::Member.343", %"class.WTF::Vector.1069" }
%"class.WTF::Vector.1069" = type { %"class.WTF::VectorBuffer.1070" }
%"class.WTF::VectorBuffer.1070" = type { %"class.WTF::VectorBufferBase.1071", [16 x i8] }
%"class.WTF::VectorBufferBase.1071" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.1075" = type { %"class.std::__1::__compressed_pair.1076" }
%"class.std::__1::__compressed_pair.1076" = type { %"struct.std::__1::__compressed_pair_elem.1077" }
%"struct.std::__1::__compressed_pair_elem.1077" = type { %"class.WTF::BloomFilter"* }
%"class.WTF::BloomFilter" = type { [4096 x i8] }
%"class.blink::Member.1081" = type { %"class.blink::MemberBase.1082" }
%"class.blink::MemberBase.1082" = type { %"class.blink::ViewportStyleResolver"* }
%"class.blink::ViewportStyleResolver" = type opaque
%"class.blink::Member.1083" = type { %"class.blink::MemberBase.1084" }
%"class.blink::MemberBase.1084" = type { %"class.blink::MediaQueryEvaluator"* }
%"class.blink::MediaQueryEvaluator" = type <{ %"class.WTF::String", %"class.blink::Member.1087", i8, [7 x i8] }>
%"class.blink::Member.1087" = type { %"class.blink::MemberBase.1088" }
%"class.blink::MemberBase.1088" = type { %"class.blink::MediaValues"* }
%"class.blink::MediaValues" = type opaque
%"class.blink::Member.1089" = type { %"class.blink::MemberBase.1090" }
%"class.blink::MemberBase.1090" = type { %"class.blink::CSSGlobalRuleSet"* }
%"class.blink::CSSGlobalRuleSet" = type <{ %"class.blink::RuleFeatureSet", %"class.blink::Member.1111", i8, i8, [6 x i8] }>
%"class.blink::RuleFeatureSet" = type <{ %"struct.blink::RuleFeatureSet::FeatureMetadata", [4 x i8], %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1098", %class.scoped_refptr.1103, %class.scoped_refptr.1110, %class.scoped_refptr.1109, %"class.WTF::Vector.412", %"class.WTF::Vector.412", i8, [7 x i8] }>
%"struct.blink::RuleFeatureSet::FeatureMetadata" = type <{ i8, i8, i8, i8, i32, i8, [3 x i8] }>
%"class.WTF::HashMap.1093" = type { %"class.WTF::HashTable.1094" }
%"class.WTF::HashTable.1094" = type <{ %"struct.WTF::KeyValuePair.1097"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1097" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1738 }
%class.scoped_refptr.1738 = type { %"class.blink::InvalidationSet"* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted.1104" = type { %"class.base::RefCounted.1105" }
%"class.base::RefCounted.1105" = type { %"class.base::subtle::RefCountedBase" }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1106" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1107" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1108" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::HashMap.1098" = type { %"class.WTF::HashTable.1099" }
%"class.WTF::HashTable.1099" = type <{ %"struct.WTF::KeyValuePair.1102"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1102" = type opaque
%class.scoped_refptr.1103 = type { %"class.blink::SiblingInvalidationSet"* }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.1109, %class.scoped_refptr.1109 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.1110 = type { %"class.blink::NthSiblingInvalidationSet"* }
%"class.blink::NthSiblingInvalidationSet" = type { %"class.blink::SiblingInvalidationSet" }
%class.scoped_refptr.1109 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::Member.1111" = type { %"class.blink::MemberBase.1112" }
%"class.blink::MemberBase.1112" = type { %"class.blink::RuleSet"* }
%"class.blink::RuleSet" = type { %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::RuleFeatureSet", %"class.blink::HeapVector.1158", %"class.blink::HeapVector.1166", %"class.blink::HeapVector.1174", %"class.blink::HeapVector.1191", %"class.blink::HeapVector.1199", %"class.blink::HeapVector.1207", %"class.blink::HeapVector.1220", %"class.WTF::Vector.1227", i32, %"class.blink::Member.1233" }
%"class.blink::HeapHashMap.1115" = type { %"class.WTF::HashMap.1118" }
%"class.WTF::HashMap.1118" = type { %"class.WTF::HashTable.1119" }
%"class.WTF::HashTable.1119" = type <{ %"struct.WTF::KeyValuePair.1121"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1121" = type { %"class.WTF::AtomicString", %"class.blink::Member.1748" }
%"class.blink::Member.1748" = type { %"class.blink::MemberBase.1749" }
%"class.blink::MemberBase.1749" = type { %"class.blink::HeapVector.1122"* }
%"class.blink::HeapVector.1122" = type { %"class.WTF::Vector.1125" }
%"class.WTF::Vector.1125" = type { %"class.WTF::VectorBuffer.1126" }
%"class.WTF::VectorBuffer.1126" = type { %"class.WTF::VectorBufferBase.1127" }
%"class.WTF::VectorBufferBase.1127" = type { %"class.blink::Member.1128"*, i32, i32 }
%"class.blink::Member.1128" = type { %"class.blink::MemberBase.1129" }
%"class.blink::MemberBase.1129" = type { %"class.blink::RuleData"* }
%"class.blink::RuleData" = type { %"class.blink::Member.1132", i64, [4 x i32] }
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::StyleRule"* }
%"class.blink::StyleRule" = type { %"class.blink::StyleRuleBase", i32, %"class.blink::CSSSelectorList", %"class.blink::Member.354", %"class.blink::Member.1153" }
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.blink::Member.354" = type { %"class.blink::MemberBase.355" }
%"class.blink::MemberBase.355" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Member.1153" = type { %"class.blink::MemberBase.1154" }
%"class.blink::MemberBase.1154" = type { %"class.blink::CSSLazyPropertyParser"* }
%"class.blink::CSSLazyPropertyParser" = type { i32 (...)** }
%"class.blink::HeapVector.1158" = type { %"class.WTF::Vector.1161" }
%"class.WTF::Vector.1161" = type { %"class.WTF::VectorBuffer.1162" }
%"class.WTF::VectorBuffer.1162" = type { %"class.WTF::VectorBufferBase.1163" }
%"class.WTF::VectorBufferBase.1163" = type { %"class.blink::Member.1164"*, i32, i32 }
%"class.blink::Member.1164" = type { %"class.blink::MemberBase.1744" }
%"class.blink::MemberBase.1744" = type { %"class.blink::StyleRulePage"* }
%"class.blink::StyleRulePage" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354", %"class.blink::CSSSelectorList" }
%"class.blink::HeapVector.1166" = type { %"class.WTF::Vector.1169" }
%"class.WTF::Vector.1169" = type { %"class.WTF::VectorBuffer.1170" }
%"class.WTF::VectorBuffer.1170" = type { %"class.WTF::VectorBufferBase.1171" }
%"class.WTF::VectorBufferBase.1171" = type { %"class.blink::Member.1172"*, i32, i32 }
%"class.blink::Member.1172" = type { %"class.blink::MemberBase.1745" }
%"class.blink::MemberBase.1745" = type { %"class.blink::StyleRuleFontFace"* }
%"class.blink::StyleRuleFontFace" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354" }
%"class.blink::HeapVector.1174" = type { %"class.WTF::Vector.1177" }
%"class.WTF::Vector.1177" = type { %"class.WTF::VectorBuffer.1178" }
%"class.WTF::VectorBuffer.1178" = type { %"class.WTF::VectorBufferBase.1179" }
%"class.WTF::VectorBufferBase.1179" = type { %"class.blink::Member.1180"*, i32, i32 }
%"class.blink::Member.1180" = type { %"class.blink::MemberBase.1181" }
%"class.blink::MemberBase.1181" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.1182", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::HeapVector.1182" = type { %"class.WTF::Vector.1185" }
%"class.WTF::Vector.1185" = type { %"class.WTF::VectorBuffer.1186" }
%"class.WTF::VectorBuffer.1186" = type { %"class.WTF::VectorBufferBase.1187" }
%"class.WTF::VectorBufferBase.1187" = type { %"class.blink::Member.1188"*, i32, i32 }
%"class.blink::Member.1188" = type opaque
%"class.blink::HeapVector.1191" = type { %"class.WTF::Vector.1194" }
%"class.WTF::Vector.1194" = type { %"class.WTF::VectorBuffer.1195" }
%"class.WTF::VectorBuffer.1195" = type { %"class.WTF::VectorBufferBase.1196" }
%"class.WTF::VectorBufferBase.1196" = type { %"class.blink::Member.1197"*, i32, i32 }
%"class.blink::Member.1197" = type { %"class.blink::MemberBase.1746" }
%"class.blink::MemberBase.1746" = type { %"class.blink::StyleRuleProperty"* }
%"class.blink::StyleRuleProperty" = type { %"class.blink::StyleRuleBase", %"class.WTF::String", %"class.blink::Member.354" }
%"class.blink::HeapVector.1199" = type { %"class.WTF::Vector.1202" }
%"class.WTF::Vector.1202" = type { %"class.WTF::VectorBuffer.1203" }
%"class.WTF::VectorBuffer.1203" = type { %"class.WTF::VectorBufferBase.1204" }
%"class.WTF::VectorBufferBase.1204" = type { %"class.blink::Member.1205"*, i32, i32 }
%"class.blink::Member.1205" = type { %"class.blink::MemberBase.1747" }
%"class.blink::MemberBase.1747" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", i32, [4 x i8] }>
%"class.blink::HeapVector.1207" = type { %"class.WTF::Vector.1210" }
%"class.WTF::Vector.1210" = type { %"class.WTF::VectorBuffer.1211" }
%"class.WTF::VectorBuffer.1211" = type { %"class.WTF::VectorBufferBase.1212" }
%"class.WTF::VectorBufferBase.1212" = type { %"class.blink::Member.1213"*, i32, i32 }
%"class.blink::Member.1213" = type { %"class.blink::MemberBase.1214" }
%"class.blink::MemberBase.1214" = type { %"class.blink::StyleRuleScrollTimeline"* }
%"class.blink::StyleRuleScrollTimeline" = type { %"class.blink::StyleRuleBase", %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215" }
%"class.blink::HeapVector.1220" = type { %"class.WTF::Vector.1223" }
%"class.WTF::Vector.1223" = type { %"class.WTF::VectorBuffer.1224" }
%"class.WTF::VectorBuffer.1224" = type { %"class.WTF::VectorBufferBase.1225" }
%"class.WTF::VectorBufferBase.1225" = type { %"class.blink::MinimalRuleData"*, i32, i32 }
%"class.blink::MinimalRuleData" = type { %"class.blink::Member.1132", i32, i32 }
%"class.WTF::Vector.1227" = type { %"class.WTF::VectorBuffer.1228" }
%"class.WTF::VectorBuffer.1228" = type { %"class.WTF::VectorBufferBase.1229" }
%"class.WTF::VectorBufferBase.1229" = type { %"class.blink::MediaQuerySetResult"*, i32, i32 }
%"class.blink::MediaQuerySetResult" = type <{ %class.scoped_refptr.1230, i8, [7 x i8] }>
%class.scoped_refptr.1230 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::Member.1233" = type { %"class.blink::MemberBase.1234" }
%"class.blink::MemberBase.1234" = type { %"class.blink::RuleSet::PendingRuleMaps"* }
%"class.blink::RuleSet::PendingRuleMaps" = type { %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237" }
%"class.blink::HeapHashMap.1237" = type { %"class.WTF::HashMap.1240" }
%"class.WTF::HashMap.1240" = type { %"class.WTF::HashTable.1241" }
%"class.WTF::HashTable.1241" = type <{ %"struct.WTF::KeyValuePair.1243"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1243" = type opaque
%"class.blink::PendingInvalidations" = type { %"class.blink::HeapHashMap.1244" }
%"class.blink::HeapHashMap.1244" = type { %"class.WTF::HashMap.1247" }
%"class.WTF::HashMap.1247" = type { %"class.WTF::HashTable.1248" }
%"class.WTF::HashTable.1248" = type <{ %"struct.WTF::KeyValuePair.1250"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1250" = type { %"class.blink::Member.314", %"class.blink::NodeInvalidationSets" }
%"class.blink::NodeInvalidationSets" = type { %"class.WTF::Vector.1739", %"class.WTF::Vector.1739" }
%"class.WTF::Vector.1739" = type { %"class.WTF::VectorBuffer.1740" }
%"class.WTF::VectorBuffer.1740" = type { %"class.WTF::VectorBufferBase.1741" }
%"class.WTF::VectorBufferBase.1741" = type { %class.scoped_refptr.1738*, i32, i32 }
%"class.blink::StyleInvalidationRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::StyleTraversalRoot.base" = type <{ i32 (...)**, %"class.blink::Member.318", i32 }>
%"class.blink::StyleRecalcRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::LayoutTreeRebuildRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::HeapHashSet.1251" = type { %"class.WTF::HashSet.1254" }
%"class.WTF::HashSet.1254" = type { %"class.WTF::HashTable.1255" }
%"class.WTF::HashTable.1255" = type <{ %"class.blink::Member.343"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1257" = type { %"class.blink::MemberBase.1258" }
%"class.blink::MemberBase.1258" = type { %"class.blink::CSSFontSelector"* }
%"class.blink::CSSFontSelector" = type opaque
%"class.blink::HeapHashMap.1259" = type { %"class.WTF::HashMap.1262" }
%"class.WTF::HashMap.1262" = type { %"class.WTF::HashTable.1263" }
%"class.WTF::HashTable.1263" = type <{ %"struct.WTF::KeyValuePair.1265"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1265" = type opaque
%"class.blink::HeapHashMap.1266" = type { %"class.WTF::HashMap.1269" }
%"class.WTF::HashMap.1269" = type { %"class.WTF::HashTable.1270" }
%"class.WTF::HashTable.1270" = type <{ %"struct.WTF::KeyValuePair.1272"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1272" = type opaque
%"class.std::__1::unique_ptr.1273" = type { %"class.std::__1::__compressed_pair.1274" }
%"class.std::__1::__compressed_pair.1274" = type { %"struct.std::__1::__compressed_pair_elem.1275" }
%"struct.std::__1::__compressed_pair_elem.1275" = type { %"class.blink::StyleResolverStats"* }
%"class.blink::StyleResolverStats" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::HeapVector.1279" = type { %"class.WTF::Vector.1282" }
%"class.WTF::Vector.1282" = type { %"class.WTF::VectorBuffer.1283" }
%"class.WTF::VectorBuffer.1283" = type { %"class.WTF::VectorBufferBase.1284" }
%"class.WTF::VectorBufferBase.1284" = type { %"struct.std::__1::pair.1285"*, i32, i32 }
%"struct.std::__1::pair.1285" = type opaque
%"class.blink::HeapVector.1010" = type { %"class.WTF::Vector.1013" }
%"class.WTF::Vector.1013" = type { %"class.WTF::VectorBuffer.1014" }
%"class.WTF::VectorBuffer.1014" = type { %"class.WTF::VectorBufferBase.1015" }
%"class.WTF::VectorBufferBase.1015" = type { %"struct.std::__1::pair.1016"*, i32, i32 }
%"struct.std::__1::pair.1016" = type opaque
%"class.blink::HeapHashSet.1287" = type { %"class.WTF::HashSet.1290" }
%"class.WTF::HashSet.1290" = type { %"class.WTF::HashTable.1291" }
%"class.WTF::HashTable.1291" = type <{ %"class.blink::WeakMember.1293"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1293" = type { %"class.blink::MemberBase.390" }
%"class.blink::HeapHashMap.1294" = type { %"class.WTF::HashMap.1297" }
%"class.WTF::HashMap.1297" = type { %"class.WTF::HashTable.1298" }
%"class.WTF::HashTable.1298" = type <{ %"struct.WTF::KeyValuePair.1300"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1300" = type { %"class.WTF::AtomicString", %"class.blink::Member.1180" }
%"class.blink::Member.1301" = type { %"class.blink::MemberBase.1302" }
%"class.blink::MemberBase.1302" = type { %"class.blink::CounterStyleMap"* }
%"class.blink::CounterStyleMap" = type opaque
%"class.blink::HeapHashMap.1303" = type { %"class.WTF::HashMap.1306" }
%"class.WTF::HashMap.1306" = type { %"class.WTF::HashTable.1307" }
%"class.WTF::HashTable.1307" = type <{ %"struct.WTF::KeyValuePair.1309"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1309" = type opaque
%class.scoped_refptr.1310 = type { %"class.blink::DocumentStyleEnvironmentVariables"* }
%"class.blink::DocumentStyleEnvironmentVariables" = type opaque
%"class.blink::Member.1215" = type { %"class.blink::MemberBase.1216" }
%"class.blink::MemberBase.1216" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::HeapHashSet.1311" = type { %"class.WTF::HashSet.1314" }
%"class.WTF::HashSet.1314" = type { %"class.WTF::HashTable.1315" }
%"class.WTF::HashTable.1315" = type <{ %"class.blink::Member.1317"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1317" = type opaque
%"class.blink::Member.1318" = type { %"class.blink::MemberBase.1319" }
%"class.blink::MemberBase.1319" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.320", %"class.blink::HeapVector.383" }
%"class.blink::Member.1320" = type { %"class.blink::MemberBase.1321" }
%"class.blink::MemberBase.1321" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1322" = type { %"class.blink::MemberBase.1323" }
%"class.blink::MemberBase.1323" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1324" = type { %"class.WTF::HashMap.1327" }
%"class.WTF::HashMap.1327" = type { %"class.WTF::HashTable.1328" }
%"class.WTF::HashTable.1328" = type <{ %"struct.WTF::KeyValuePair.1330"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1330" = type opaque
%"class.WTF::Vector.1331" = type { %"class.WTF::VectorBuffer.1332" }
%"class.WTF::VectorBuffer.1332" = type { %"class.WTF::VectorBufferBase.1333" }
%"class.WTF::VectorBufferBase.1333" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1336" = type { %"class.blink::MemberBase.1337" }
%"class.blink::MemberBase.1337" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1338" = type { %"class.blink::MemberBase.1339" }
%"class.blink::MemberBase.1339" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.348" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.345 }
%class.scoped_refptr.345 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.346", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.346" = type { %"class.base::RefCounted.347" }
%"class.base::RefCounted.347" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.348" = type { %"class.blink::MemberBase.349" }
%"class.blink::MemberBase.349" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.352", %"class.blink::Member.354", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.352" = type { %"class.WTF::SingleThreadedBitField.353" }
%"class.WTF::SingleThreadedBitField.353" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.358 }
%class.scoped_refptr.358 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.359", %"class.WTF::AtomicString", %"class.WTF::Vector.361" }
%"class.WTF::RefCounted.359" = type { %"class.base::RefCounted.360" }
%"class.base::RefCounted.360" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.361" = type { %"class.WTF::VectorBuffer.362" }
%"class.WTF::VectorBuffer.362" = type { %"class.WTF::VectorBufferBase.286", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1340" = type { %"class.blink::MemberBase.1341" }
%"class.blink::MemberBase.1341" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1342" = type { %"class.WTF::Vector.1345" }
%"class.WTF::Vector.1345" = type { %"class.WTF::VectorBuffer.1346" }
%"class.WTF::VectorBuffer.1346" = type { %"class.WTF::VectorBufferBase.1347" }
%"class.WTF::VectorBufferBase.1347" = type { %"class.blink::Member.1348"*, i32, i32 }
%"class.blink::Member.1348" = type opaque
%"class.std::__1::unique_ptr.1350" = type { %"class.std::__1::__compressed_pair.1351" }
%"class.std::__1::__compressed_pair.1351" = type { %"struct.std::__1::__compressed_pair_elem.1352" }
%"struct.std::__1::__compressed_pair_elem.1352" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.1356" = type { %"class.WTF::HashSet.1359" }
%"class.WTF::HashSet.1359" = type { %"class.WTF::HashTable.1360" }
%"class.WTF::HashTable.1360" = type <{ %"class.blink::WeakMember.1362"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1362" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1363", i32, [4 x i8] }>
%"class.WTF::Vector.1363" = type { %"class.WTF::VectorBuffer.1364" }
%"class.WTF::VectorBuffer.1364" = type { %"class.WTF::VectorBufferBase.1365" }
%"class.WTF::VectorBufferBase.1365" = type { %"struct.std::__1::pair.1366"*, i32, i32 }
%"struct.std::__1::pair.1366" = type opaque
%"class.blink::Member.1369" = type { %"class.blink::MemberBase.1370" }
%"class.blink::MemberBase.1370" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1371" = type { %"class.WTF::VectorBuffer.1372" }
%"class.WTF::VectorBuffer.1372" = type { %"class.WTF::VectorBufferBase.1373" }
%"class.WTF::VectorBufferBase.1373" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::unique_ptr.1376" = type { %"class.std::__1::__compressed_pair.1377" }
%"class.std::__1::__compressed_pair.1377" = type { %"struct.std::__1::__compressed_pair_elem.1378" }
%"struct.std::__1::__compressed_pair_elem.1378" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.365" = type { %"class.WTF::Vector.368" }
%"class.WTF::Vector.368" = type { %"class.WTF::VectorBuffer.369" }
%"class.WTF::VectorBuffer.369" = type { %"class.WTF::VectorBufferBase.370" }
%"class.WTF::VectorBufferBase.370" = type { %"class.blink::Member.343"*, i32, i32 }
%"class.blink::HeapVector.1382" = type { %"class.WTF::Vector.1385" }
%"class.WTF::Vector.1385" = type { %"class.WTF::VectorBuffer.1386" }
%"class.WTF::VectorBuffer.1386" = type { %"class.WTF::VectorBufferBase.1387" }
%"class.WTF::VectorBufferBase.1387" = type { %"class.blink::Member.1388"*, i32, i32 }
%"class.blink::Member.1388" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.326" }
%"class.blink::Member.1390" = type { %"class.blink::MemberBase.1391" }
%"class.blink::MemberBase.1391" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1392" = type { %"class.blink::MemberBase.1393" }
%"class.blink::MemberBase.1393" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1394" = type { %"class.blink::MemberBase.1395" }
%"class.blink::MemberBase.1395" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1396" = type { %"class.blink::MemberBase.1397" }
%"class.blink::MemberBase.1397" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1398" = type { %"class.blink::MemberBase.1399" }
%"class.blink::MemberBase.1399" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1400" = type { %"class.WTF::HashTable.1401" }
%"class.WTF::HashTable.1401" = type <{ %"struct.WTF::KeyValuePair.1404"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1404" = type opaque
%"class.blink::Member.1405" = type { %"class.blink::MemberBase.1406" }
%"class.blink::MemberBase.1406" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1407" = type { %"class.blink::MemberBase.1408" }
%"class.blink::MemberBase.1408" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1409" = type { %"class.blink::MemberBase.1410" }
%"class.blink::MemberBase.1410" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1411" = type { %"class.blink::MemberBase.1412" }
%"class.blink::MemberBase.1412" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.966", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.963, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.963 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.964" }>
%"class.base::RefCountedThreadSafe.964" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.965 }
%class.scoped_refptr.965 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::WeakMember.966" = type { %"class.blink::MemberBase.327" }
%"class.blink::HeapHashSet.1413" = type { %"class.WTF::HashSet.1416" }
%"class.WTF::HashSet.1416" = type { %"class.WTF::HashTable.1417" }
%"class.WTF::HashTable.1417" = type <{ %"class.blink::Member.1419"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1419" = type opaque
%"class.blink::Member.1420" = type { %"class.blink::MemberBase.1421" }
%"class.blink::MemberBase.1421" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1422" = type { %"class.blink::MemberBase.1423" }
%"class.blink::MemberBase.1423" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1424" = type { %"class.blink::MemberBase.1425" }
%"class.blink::MemberBase.1425" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1426" = type { %"class.blink::MemberBase.1427" }
%"class.blink::MemberBase.1427" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1428" = type { %"class.blink::MemberBase.1429" }
%"class.blink::MemberBase.1429" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1430" = type { %"class.std::__1::__compressed_pair.1431" }
%"class.std::__1::__compressed_pair.1431" = type { %"struct.std::__1::__compressed_pair_elem.1432" }
%"struct.std::__1::__compressed_pair_elem.1432" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1436" = type { %"class.std::__1::__compressed_pair.1437" }
%"class.std::__1::__compressed_pair.1437" = type { %"struct.std::__1::__compressed_pair_elem.1438" }
%"struct.std::__1::__compressed_pair_elem.1438" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type { %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", i32, [4 x i8], %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", i64, i64, %"class.ukm::UkmRecorder"*, i64, %"class.blink::TaskRunnerTimer" }
%"class.WTF::HashMap.1439" = type { %"class.WTF::HashTable.1440" }
%"class.WTF::HashTable.1440" = type <{ %"struct.WTF::KeyValuePair.1443"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1443" = type opaque
%"class.blink::TaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::FontMatchingMetrics"*, { i64, i64 } }
%"class.blink::Member.1447" = type { %"class.blink::MemberBase.1448" }
%"class.blink::MemberBase.1448" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1449" = type { %"class.blink::MemberBase.1450" }
%"class.blink::MemberBase.1450" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1451" = type { %"class.blink::MemberBase.1452" }
%"class.blink::MemberBase.1452" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1453" = type { %"class.blink::MemberBase.1454" }
%"class.blink::MemberBase.1454" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.1455" = type { %"class.WTF::VectorBuffer.1456" }
%"class.WTF::VectorBuffer.1456" = type { %"class.WTF::VectorBufferBase.1457" }
%"class.WTF::VectorBufferBase.1457" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1460" = type { %"class.WTF::HashMap.1463" }
%"class.WTF::HashMap.1463" = type { %"class.WTF::HashTable.1464" }
%"class.WTF::HashTable.1464" = type <{ %"struct.WTF::KeyValuePair.1466"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1466" = type opaque
%"class.blink::Member.1467" = type { %"class.blink::MemberBase.1468" }
%"class.blink::MemberBase.1468" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1469" = type { %"class.std::__1::__compressed_pair.1470" }
%"class.std::__1::__compressed_pair.1470" = type { %"struct.std::__1::__compressed_pair_elem.1471" }
%"struct.std::__1::__compressed_pair_elem.1471" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1475" = type { %"class.blink::MemberBase.1476" }
%"class.blink::MemberBase.1476" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1477" = type { %"class.blink::MemberBase.1478" }
%"class.blink::MemberBase.1478" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1479" = type { %"class.WTF::HashMap.1482" }
%"class.WTF::HashMap.1482" = type { %"class.WTF::HashTable.1483" }
%"class.WTF::HashTable.1483" = type <{ %"struct.WTF::KeyValuePair.1485"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1485" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1486" }
%"class.blink::HeapHashSet.1486" = type { %"class.WTF::HashSet.1489" }
%"class.WTF::HashSet.1489" = type { %"class.WTF::HashTable.1490" }
%"class.WTF::HashTable.1490" = type <{ %"class.blink::WeakMember.1492"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1492" = type opaque
%"class.blink::Member.1493" = type { %"class.blink::MemberBase.1494" }
%"class.blink::MemberBase.1494" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1495" = type { %"class.blink::MemberBase.1496" }
%"class.blink::MemberBase.1496" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.326", %"class.blink::HeapHashSet.1502", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1509", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1502" = type { %"class.WTF::HashSet.1505" }
%"class.WTF::HashSet.1505" = type { %"class.WTF::HashTable.1506" }
%"class.WTF::HashTable.1506" = type <{ %"class.blink::Member.1508"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1508" = type opaque
%"class.blink::HeapTaskRunnerTimer.1509" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1510", { i64, i64 } }
%"class.blink::WeakMember.1510" = type { %"class.blink::MemberBase.1496" }
%"class.blink::WeakMember.1497" = type { %"class.blink::MemberBase.319" }
%"class.blink::Member.1498" = type { %"class.blink::MemberBase.1499" }
%"class.blink::MemberBase.1499" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.320" = type { %"class.blink::MemberBase.321" }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.332" }
%"class.blink::HeapHashMap.332" = type { %"class.WTF::HashMap.335" }
%"class.WTF::HashMap.335" = type { %"class.WTF::HashTable.336" }
%"class.WTF::HashTable.336" = type <{ %"struct.WTF::KeyValuePair.338"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.338" = type { %"class.WTF::AtomicString", %"class.blink::Member.339" }
%"class.blink::Member.339" = type { %"class.blink::MemberBase.340" }
%"class.blink::MemberBase.340" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.343", i32, %"class.blink::HeapVector.365" }
%"class.blink::Member.372" = type { %"class.blink::MemberBase.373" }
%"class.blink::MemberBase.373" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.374" = type { %"class.blink::MemberBase.375" }
%"class.blink::MemberBase.375" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.378" }
%"class.blink::Member.378" = type { %"class.blink::MemberBase.379" }
%"class.blink::MemberBase.379" = type { %"class.blink::HeapHashMap.380"* }
%"class.blink::HeapHashMap.380" = type opaque
%"class.blink::Member.381" = type { %"class.blink::MemberBase.382" }
%"class.blink::MemberBase.382" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.383" = type { %"class.WTF::Vector.386" }
%"class.WTF::Vector.386" = type { %"class.WTF::VectorBuffer.387" }
%"class.WTF::VectorBuffer.387" = type { %"class.WTF::VectorBufferBase.388" }
%"class.WTF::VectorBufferBase.388" = type { %"class.blink::Member.389"*, i32, i32 }
%"class.blink::Member.441" = type { %"class.blink::MemberBase.442" }
%"class.blink::MemberBase.442" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.443" = type { %class.scoped_refptr.444 }
%class.scoped_refptr.444 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.445", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.445" = type { %"class.base::RefCounted.446" }
%"class.base::RefCounted.446" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.447" = type { %class.scoped_refptr.448 }
%class.scoped_refptr.448 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.449", [4 x i8], %"class.blink::DataRef.451", %"class.blink::DataRef.517", %"class.blink::TransformOperations", %class.scoped_refptr.298, %"class.blink::Persistent.641", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.449" = type { %"class.base::RefCounted.450" }
%"class.base::RefCounted.450" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.451" = type { %class.scoped_refptr.452 }
%class.scoped_refptr.452 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.453", [4 x i8], %"class.blink::DataRef.455", %"class.blink::Persistent.493", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.453" = type { %"class.base::RefCounted.454" }
%"class.base::RefCounted.454" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.455" = type { %class.scoped_refptr.456 }
%class.scoped_refptr.456 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.457", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.475, %class.scoped_refptr.478, %class.scoped_refptr.481, %class.scoped_refptr.484, %class.scoped_refptr.485, %class.scoped_refptr.486, %"class.blink::Persistent.493", %"class.blink::Persistent.508", %"class.absl::optional.512", %"class.absl::optional.512", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.457" = type { %"class.base::RefCounted.458" }
%"class.base::RefCounted.458" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.459", %"class.std::__1::unique_ptr.464" }
%"class.WTF::Vector.459" = type { %"class.WTF::VectorBuffer.460" }
%"class.WTF::VectorBuffer.460" = type { %"class.WTF::VectorBufferBase.461" }
%"class.WTF::VectorBufferBase.461" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.467", %"class.WTF::Vector.459", i32, i32 }
%"class.WTF::Vector.467" = type { %"class.WTF::VectorBuffer.468" }
%"class.WTF::VectorBuffer.468" = type { %"class.WTF::VectorBufferBase.469" }
%"class.WTF::VectorBufferBase.469" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.475 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.476", [4 x i8] }>
%"class.WTF::RefCounted.476" = type { %"class.base::RefCounted.477" }
%"class.base::RefCounted.477" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.478 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.479", [4 x i8] }>
%"class.WTF::RefCounted.479" = type { %"class.base::RefCounted.480" }
%"class.base::RefCounted.480" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.481 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.482" }>
%"class.WTF::RefCounted.482" = type { %"class.base::RefCounted.483" }
%"class.base::RefCounted.483" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.484 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.485 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.486 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.487", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.487" = type { %"class.base::RefCounted.488" }
%"class.base::RefCounted.488" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.489" }
%"class.blink::DataRef.489" = type { %class.scoped_refptr.490 }
%class.scoped_refptr.490 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.306", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.491" }
%"class.WTF::RefCounted.491" = type { %"class.base::RefCounted.492" }
%"class.base::RefCounted.492" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.508" = type { %"class.blink::PersistentBase.509" }
%"class.blink::PersistentBase.509" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.478, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.512" = type { %"class.absl::optional_internal::optional_data.513" }
%"class.absl::optional_internal::optional_data.513" = type { %"class.absl::optional_internal::optional_data_base.514" }
%"class.absl::optional_internal::optional_data_base.514" = type { %"class.absl::optional_internal::optional_data_dtor_base.515" }
%"class.absl::optional_internal::optional_data_dtor_base.515" = type { i8, [3 x i8], %union.anon.516 }
%union.anon.516 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.493" = type { %"class.blink::PersistentBase.494" }
%"class.blink::PersistentBase.494" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.497" }
%"class.blink::HeapVector.497" = type { %"class.WTF::Vector.500" }
%"class.WTF::Vector.500" = type { %"class.WTF::VectorBuffer.501" }
%"class.WTF::VectorBuffer.501" = type { %"class.WTF::VectorBufferBase.502" }
%"class.WTF::VectorBufferBase.502" = type { %"class.blink::Member.503"*, i32, i32 }
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.517" = type { %class.scoped_refptr.518 }
%class.scoped_refptr.518 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.519", %"class.blink::DataRef.521", %"class.blink::DataRef.525", %"class.blink::DataRef.534", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.553", %"class.std::__1::unique_ptr.564", %"class.std::__1::unique_ptr.602", %"class.std::__1::unique_ptr.613", %"class.std::__1::unique_ptr.624", %"class.WTF::Vector.630", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.519" = type { %"class.base::RefCounted.520" }
%"class.base::RefCounted.520" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.521" = type { %class.scoped_refptr.522 }
%class.scoped_refptr.522 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.523", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.523" = type { %"class.base::RefCounted.524" }
%"class.base::RefCounted.524" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.525" = type { %class.scoped_refptr.526 }
%class.scoped_refptr.526 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.527", [4 x i8], %"class.WTF::Vector.529", i8, [7 x i8] }>
%"class.WTF::RefCounted.527" = type { %"class.base::RefCounted.528" }
%"class.base::RefCounted.528" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.529" = type { %"class.WTF::VectorBuffer.530" }
%"class.WTF::VectorBuffer.530" = type { %"class.WTF::VectorBufferBase.531" }
%"class.WTF::VectorBufferBase.531" = type { i32*, i32, i32 }
%"class.blink::DataRef.534" = type { %class.scoped_refptr.535 }
%class.scoped_refptr.535 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.536", [4 x i8], %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.548", %"class.WTF::Vector.459", %"class.WTF::Vector.459", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.536" = type { %"class.base::RefCounted.537" }
%"class.base::RefCounted.537" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.538" = type { %"class.WTF::HashTable.539" }
%"class.WTF::HashTable.539" = type <{ %"struct.WTF::KeyValuePair.542"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.542" = type { %"class.WTF::String", %"class.WTF::Vector.1714" }
%"class.WTF::Vector.1714" = type { %"class.WTF::VectorBuffer.1715" }
%"class.WTF::VectorBuffer.1715" = type { %"class.WTF::VectorBufferBase.1716" }
%"class.WTF::VectorBufferBase.1716" = type { i64*, i32, i32 }
%"class.WTF::HashMap.543" = type { %"class.WTF::HashTable.544" }
%"class.WTF::HashTable.544" = type <{ %"struct.WTF::KeyValuePair.547"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.547" = type { i64, %"class.WTF::Vector.630" }
%"class.WTF::HashMap.548" = type { %"class.WTF::HashTable.549" }
%"class.WTF::HashTable.549" = type <{ %"struct.WTF::KeyValuePair.552"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.552" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.553" = type { %"class.std::__1::__compressed_pair.554" }
%"class.std::__1::__compressed_pair.554" = type { %"struct.std::__1::__compressed_pair_elem.555" }
%"struct.std::__1::__compressed_pair_elem.555" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.556" }
%"class.WTF::HashMap.556" = type { %"class.WTF::HashTable.557" }
%"class.WTF::HashTable.557" = type <{ %"struct.WTF::KeyValuePair.560"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.560" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.1719", %"class.absl::optional.1719", %"class.absl::optional.1719" }
%"class.absl::optional.1719" = type { %"class.absl::optional_internal::optional_data.1720" }
%"class.absl::optional_internal::optional_data.1720" = type { %"class.absl::optional_internal::optional_data_base.1721" }
%"class.absl::optional_internal::optional_data_base.1721" = type { %"class.absl::optional_internal::optional_data_dtor_base.1722" }
%"class.absl::optional_internal::optional_data_dtor_base.1722" = type { i8, %union.anon.1723 }
%union.anon.1723 = type { i32 }
%"class.std::__1::unique_ptr.564" = type { %"class.std::__1::__compressed_pair.565" }
%"class.std::__1::__compressed_pair.565" = type { %"struct.std::__1::__compressed_pair_elem.566" }
%"struct.std::__1::__compressed_pair_elem.566" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.284", %"class.WTF::Vector.579", %"class.WTF::Vector.567", %"class.WTF::Vector.584", %"class.WTF::Vector.589", %"class.WTF::Vector.594" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.567", %"class.WTF::Vector.567", %"class.WTF::Vector.572" }
%"class.WTF::Vector.572" = type { %"class.WTF::VectorBuffer.573" }
%"class.WTF::VectorBuffer.573" = type { %"class.WTF::VectorBufferBase.574" }
%"class.WTF::VectorBufferBase.574" = type { %class.scoped_refptr.575*, i32, i32 }
%class.scoped_refptr.575 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.576" }
%"class.base::RefCountedThreadSafe.576" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.579" = type { %"class.WTF::VectorBuffer.580" }
%"class.WTF::VectorBuffer.580" = type { %"class.WTF::VectorBufferBase.581" }
%"class.WTF::VectorBufferBase.581" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.567" = type { %"class.WTF::VectorBuffer.568" }
%"class.WTF::VectorBuffer.568" = type { %"class.WTF::VectorBufferBase.569" }
%"class.WTF::VectorBufferBase.569" = type { double*, i32, i32 }
%"class.WTF::Vector.584" = type { %"class.WTF::VectorBuffer.585" }
%"class.WTF::VectorBuffer.585" = type { %"class.WTF::VectorBufferBase.586" }
%"class.WTF::VectorBufferBase.586" = type { i32*, i32, i32 }
%"class.WTF::Vector.589" = type { %"class.WTF::VectorBuffer.590" }
%"class.WTF::VectorBuffer.590" = type { %"class.WTF::VectorBufferBase.591" }
%"class.WTF::VectorBufferBase.591" = type { i32*, i32, i32 }
%"class.WTF::Vector.594" = type { %"class.WTF::VectorBuffer.595" }
%"class.WTF::VectorBuffer.595" = type { %"class.WTF::VectorBufferBase.596" }
%"class.WTF::VectorBufferBase.596" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.602" = type { %"class.std::__1::__compressed_pair.603" }
%"class.std::__1::__compressed_pair.603" = type { %"struct.std::__1::__compressed_pair_elem.604" }
%"struct.std::__1::__compressed_pair_elem.604" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.605" }
%"class.WTF::Vector.605" = type { %"class.WTF::VectorBuffer.606" }
%"class.WTF::VectorBuffer.606" = type { %"class.WTF::VectorBufferBase.607" }
%"class.WTF::VectorBufferBase.607" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.613" = type { %"class.std::__1::__compressed_pair.614" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.616" }
%"class.WTF::Vector.616" = type { %"class.WTF::VectorBuffer.617" }
%"class.WTF::VectorBuffer.617" = type { %"class.WTF::VectorBufferBase.618" }
%"class.WTF::VectorBufferBase.618" = type { %"class.blink::Persistent.306"*, i32, i32 }
%"class.std::__1::unique_ptr.624" = type { %"class.std::__1::__compressed_pair.625" }
%"class.std::__1::__compressed_pair.625" = type { %"struct.std::__1::__compressed_pair_elem.626" }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.306", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.635" }
%"class.WTF::Vector.635" = type { %"class.WTF::VectorBuffer.636" }
%"class.WTF::VectorBuffer.636" = type { %"class.WTF::VectorBufferBase.637" }
%"class.WTF::VectorBufferBase.637" = type { %class.scoped_refptr.638*, i32, i32 }
%class.scoped_refptr.638 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.482", [4 x i8] }>
%"class.blink::Persistent.641" = type { %"class.blink::PersistentBase.642" }
%"class.blink::PersistentBase.642" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.645" }
%"class.blink::Member.645" = type { %"class.blink::MemberBase.646" }
%"class.blink::MemberBase.646" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.647" = type { %class.scoped_refptr.648 }
%class.scoped_refptr.648 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.649", [4 x i8], %"class.blink::DataRef.651", %"class.blink::DataRef.655", %"class.blink::DataRef.676", %"class.blink::DataRef.694", %"class.blink::DataRef.706", %"class.blink::DataRef.710", %class.scoped_refptr.680, i32, [4 x i8] }>
%"class.WTF::RefCounted.649" = type { %"class.base::RefCounted.650" }
%"class.base::RefCounted.650" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.651" = type { %class.scoped_refptr.652 }
%class.scoped_refptr.652 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.653", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.653" = type { %"class.base::RefCounted.654" }
%"class.base::RefCounted.654" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.655" = type { %class.scoped_refptr.656 }
%class.scoped_refptr.656 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.657", %class.scoped_refptr.659, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.657" = type { %"class.base::RefCounted.658" }
%"class.base::RefCounted.658" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.659 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.660", %"class.std::__1::unique_ptr.666", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.479" }>
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.669, i32, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", i8, i8 }>
%class.sk_sp.669 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.670, %class.SkTDArray.671, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.41" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.670 = type { i8*, i32, i32 }
%class.SkTDArray.671 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.672 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.41", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.672 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.238", [3 x i8] }
%"class.blink::DataRef.676" = type { %class.scoped_refptr.677 }
%class.scoped_refptr.677 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.678", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.678" = type { %"class.base::RefCounted.679" }
%"class.base::RefCounted.679" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.680, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.694" = type { %class.scoped_refptr.695 }
%class.scoped_refptr.695 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.696", [4 x i8], %class.scoped_refptr.698, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.696" = type { %"class.base::RefCounted.697" }
%"class.base::RefCounted.697" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.698 = type { %"class.base::RefCountedData.699"* }
%"class.base::RefCountedData.699" = type { %"class.base::RefCountedThreadSafe.700", %"class.WTF::Vector.701" }
%"class.base::RefCountedThreadSafe.700" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.701" = type { %"class.WTF::VectorBuffer.702" }
%"class.WTF::VectorBuffer.702" = type { %"class.WTF::VectorBufferBase.703" }
%"class.WTF::VectorBufferBase.703" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.706" = type { %class.scoped_refptr.707 }
%class.scoped_refptr.707 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.708", %class.scoped_refptr.680, %class.scoped_refptr.680, %class.scoped_refptr.680 }
%"class.WTF::RefCounted.708" = type { %"class.base::RefCounted.709" }
%"class.base::RefCounted.709" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.710" = type { %class.scoped_refptr.711 }
%class.scoped_refptr.711 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.712", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.712" = type { %"class.base::RefCounted.713" }
%"class.base::RefCounted.713" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.680 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.681", %"class.blink::Persistent.683", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.681" = type { %"class.base::RefCounted.682" }
%"class.base::RefCounted.682" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.683" = type { %"class.blink::PersistentBase.684" }
%"class.blink::PersistentBase.684" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DataRef.714" = type { %class.scoped_refptr.715 }
%class.scoped_refptr.715 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.716", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.716" = type { %"class.base::RefCounted.717" }
%"class.base::RefCounted.717" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.718" = type { %class.scoped_refptr.719 }
%class.scoped_refptr.719 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.720", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.720" = type { %"class.base::RefCounted.721" }
%"class.base::RefCounted.721" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.722" = type { %class.scoped_refptr.723 }
%class.scoped_refptr.723 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.724", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.724" = type { %"class.base::RefCounted.725" }
%"class.base::RefCounted.725" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.726" = type { %class.scoped_refptr.727 }
%class.scoped_refptr.727 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.728", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.728" = type { %"class.base::RefCounted.729" }
%"class.base::RefCounted.729" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.730 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.897", %"class.blink::StyleVariables", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.897" = type { %"class.base::RefCounted.898" }
%"class.base::RefCounted.898" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.731" = type { %"class.base::RefCounted.732" }
%"class.base::RefCounted.732" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.733" = type { %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.735" }
%"struct.std::__1::__compressed_pair_elem.735" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.736" }
%"class.std::__1::unique_ptr.736" = type { %"class.std::__1::__compressed_pair.737" }
%"class.std::__1::__compressed_pair.737" = type { %"struct.std::__1::__compressed_pair_elem.738" }
%"struct.std::__1::__compressed_pair_elem.738" = type { %"class.WTF::Vector.739"* }
%"class.WTF::Vector.739" = type { %"class.WTF::VectorBuffer.1734" }
%"class.WTF::VectorBuffer.1734" = type { %"class.WTF::VectorBufferBase.1735", [32 x i8] }
%"class.WTF::VectorBufferBase.1735" = type { %class.scoped_refptr*, i32, i32 }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.746" }
%"class.blink::MemberBase.746" = type { %"class.blink::Node"* }
%"class.blink::FragmentData" = type { %"struct.blink::PhysicalOffset", %"class.std::__1::unique_ptr.747" }
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"struct.blink::FragmentData::RareData"* }
%"struct.blink::FragmentData::RareData" = type { %"class.std::__1::unique_ptr.750", i64, %"struct.blink::PhysicalOffset", %"class.blink::LayoutUnit", %"class.std::__1::unique_ptr.756", %"class.std::__1::unique_ptr.877", i8, %"class.absl::optional.883", %class.scoped_refptr.859, %"class.blink::CullRect", %"class.blink::CullRect", %"class.std::__1::unique_ptr.888" }
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.blink::PaintLayer"* }
%"class.blink::PaintLayer" = type opaque
%"class.std::__1::unique_ptr.756" = type { %"class.std::__1::__compressed_pair.757" }
%"class.std::__1::__compressed_pair.757" = type { %"struct.std::__1::__compressed_pair_elem.758" }
%"struct.std::__1::__compressed_pair_elem.758" = type { %"class.blink::ObjectPaintProperties"* }
%"class.blink::ObjectPaintProperties" = type { %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.794, %class.scoped_refptr.808, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.849, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.873 }
%class.scoped_refptr.759 = type { %"class.blink::TransformPaintPropertyNode"* }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.776" }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.760", i8, i8, %class.scoped_refptr.762, i32, i32 }
%"class.WTF::RefCounted.760" = type { %"class.base::RefCounted.761" }
%"class.base::RefCounted.761" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.762 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.769, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.770", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.763" }
%"class.std::__1::unique_ptr.763" = type { %"class.std::__1::__compressed_pair.764" }
%"class.std::__1::__compressed_pair.764" = type { %"struct.std::__1::__compressed_pair_elem.765" }
%"struct.std::__1::__compressed_pair_elem.765" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%class.scoped_refptr.769 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.795", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.795" = type { %"class.WTF::RefCounted.796", i8, i8, %class.scoped_refptr.769, i32, i32 }
%"class.WTF::RefCounted.796" = type { %"class.base::RefCounted.797" }
%"class.base::RefCounted.797" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.798" }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntSize" = type { i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.798" = type { %"class.absl::optional_internal::optional_data.799" }
%"class.absl::optional_internal::optional_data.799" = type { %"class.absl::optional_internal::optional_data_base.800" }
%"class.absl::optional_internal::optional_data_base.800" = type { %"class.absl::optional_internal::optional_data_dtor_base.801" }
%"class.absl::optional_internal::optional_data_dtor_base.801" = type { i8, %union.anon.802 }
%union.anon.802 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector", %"struct.cc::TargetSnapAreaElementIds" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.803" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.770" = type { %"class.std::__1::__compressed_pair.771" }
%"class.std::__1::__compressed_pair.771" = type { %"struct.std::__1::__compressed_pair_elem.772" }
%"struct.std::__1::__compressed_pair_elem.772" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.776" = type { %"class.std::__1::__compressed_pair.777" }
%"class.std::__1::__compressed_pair.777" = type { %"struct.std::__1::__compressed_pair_elem.778" }
%"struct.std::__1::__compressed_pair_elem.778" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.779", %"class.std::__1::unique_ptr.785", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%class.scoped_refptr.794 = type { %"class.blink::ScrollPaintPropertyNode"* }
%class.scoped_refptr.808 = type { %"class.blink::TransformPaintPropertyNodeAlias"* }
%"class.blink::TransformPaintPropertyNodeAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias" }
%class.scoped_refptr.809 = type { %"class.blink::EffectPaintPropertyNode"* }
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.810" }
%"class.blink::PaintPropertyNode.810" = type { %"class.WTF::RefCounted.811", i8, i8, %class.scoped_refptr.813, i32, i32 }
%"class.WTF::RefCounted.811" = type { %"class.base::RefCounted.812" }
%"class.base::RefCounted.812" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.813 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr.762, %class.scoped_refptr.814, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.836", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%class.scoped_refptr.814 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.851" }
%"class.blink::PaintPropertyNode.851" = type { %"class.WTF::RefCounted.852", i8, i8, %class.scoped_refptr.814, i32, i32 }
%"class.WTF::RefCounted.852" = type { %"class.base::RefCounted.853" }
%"class.base::RefCounted.853" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.815" }
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.831" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.817, [20 x float], i32, [4 x i8], %"class.std::__1::vector.824", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector.824" = type { %"class.std::__1::__vector_base.825" }
%"class.std::__1::__vector_base.825" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.826" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.831" = type { %"struct.std::__1::__compressed_pair_elem.832" }
%"struct.std::__1::__compressed_pair_elem.832" = type { %"class.cc::FilterOperation"* }
%"class.std::__1::unique_ptr.836" = type { %"class.std::__1::__compressed_pair.837" }
%"class.std::__1::__compressed_pair.837" = type { %"struct.std::__1::__compressed_pair_elem.838" }
%"struct.std::__1::__compressed_pair_elem.838" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.842" }
%"class.std::__1::vector.842" = type { %"class.std::__1::__vector_base.843" }
%"class.std::__1::__vector_base.843" = type { i32*, i32*, %"class.std::__1::__compressed_pair.844" }
%"class.std::__1::__compressed_pair.844" = type { %"struct.std::__1::__compressed_pair_elem.845" }
%"struct.std::__1::__compressed_pair_elem.845" = type { i32* }
%class.scoped_refptr.849 = type { %"class.blink::EffectPaintPropertyNodeAlias"* }
%"class.blink::EffectPaintPropertyNodeAlias" = type { %"class.blink::EffectPaintPropertyNodeOrAlias" }
%class.scoped_refptr.850 = type { %"class.blink::ClipPaintPropertyNode"* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.862" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr.762, %"class.absl::optional.854", %class.scoped_refptr.859, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.854" = type { %"class.absl::optional_internal::optional_data.855" }
%"class.absl::optional_internal::optional_data.855" = type { %"class.absl::optional_internal::optional_data_base.856" }
%"class.absl::optional_internal::optional_data_base.856" = type { %"class.absl::optional_internal::optional_data_dtor_base.857" }
%"class.absl::optional_internal::optional_data_dtor_base.857" = type { i8, [3 x i8], %union.anon.858 }
%union.anon.858 = type { %"class.blink::FloatClipRect" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.862" = type { %"class.std::__1::__compressed_pair.863" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.865", i32, [4 x i8] }>
%"class.WTF::Vector.865" = type { %"class.WTF::VectorBuffer.866" }
%"class.WTF::VectorBuffer.866" = type { %"class.WTF::VectorBufferBase.867" }
%"class.WTF::VectorBufferBase.867" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>
%class.scoped_refptr.873 = type { %"class.blink::ClipPaintPropertyNodeAlias"* }
%"class.blink::ClipPaintPropertyNodeAlias" = type { %"class.blink::ClipPaintPropertyNodeOrAlias" }
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"class.blink::RefCountedPropertyTreeState"* }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.762, %class.scoped_refptr.814, %class.scoped_refptr.813 }
%"class.absl::optional.883" = type { %"class.absl::optional_internal::optional_data.884" }
%"class.absl::optional_internal::optional_data.884" = type { %"class.absl::optional_internal::optional_data_base.885" }
%"class.absl::optional_internal::optional_data_base.885" = type { %"class.absl::optional_internal::optional_data_dtor_base.886" }
%"class.absl::optional_internal::optional_data_dtor_base.886" = type { i8, %union.anon.887 }
%union.anon.887 = type { %"class.blink::IntRect" }
%class.scoped_refptr.859 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.860", [4 x i8] }
%"class.WTF::RefCounted.860" = type { %"class.base::RefCounted.861" }
%"class.base::RefCounted.861" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CullRect" = type { %"class.blink::IntRect" }
%"class.std::__1::unique_ptr.888" = type { %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890" }
%"struct.std::__1::__compressed_pair_elem.890" = type { %"class.blink::FragmentData"* }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::InlineBox::InlineBoxBitfields" = type { i32 }
%"class.std::__1::unique_ptr.1603" = type { %"class.std::__1::__compressed_pair.1604" }
%"class.std::__1::__compressed_pair.1604" = type { %"struct.std::__1::__compressed_pair_elem.1605" }
%"struct.std::__1::__compressed_pair_elem.1605" = type { %"struct.blink::SimpleOverflowModel"* }
%"struct.blink::SimpleOverflowModel" = type { %"class.absl::optional.1606", %"class.absl::optional.1615" }
%"class.absl::optional.1606" = type { %"class.absl::optional_internal::optional_data.1607" }
%"class.absl::optional_internal::optional_data.1607" = type { %"class.absl::optional_internal::optional_data_base.1608" }
%"class.absl::optional_internal::optional_data_base.1608" = type { %"class.absl::optional_internal::optional_data_dtor_base.1609" }
%"class.absl::optional_internal::optional_data_dtor_base.1609" = type { i8, %union.anon.1610 }
%union.anon.1610 = type { %"class.blink::SimpleLayoutOverflowModel" }
%"class.blink::SimpleLayoutOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.absl::optional.1615" = type { %"class.absl::optional_internal::optional_data.1616" }
%"class.absl::optional_internal::optional_data.1616" = type { %"class.absl::optional_internal::optional_data_base.1617" }
%"class.absl::optional_internal::optional_data_base.1617" = type { %"class.absl::optional_internal::optional_data_dtor_base.1618" }
%"class.absl::optional_internal::optional_data_dtor_base.1618" = type { i8, %union.anon.1619 }
%union.anon.1619 = type { %"class.blink::SimpleVisualOverflowModel" }
%"class.blink::SimpleVisualOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.blink::LayoutBoxModelObject" = type { %"class.blink::LayoutObject" }
%"struct.blink::BoxOverflowModel" = type { %"class.absl::optional.1639", %"class.absl::optional.1644", %"class.absl::optional.1649" }
%"class.absl::optional.1639" = type { %"class.absl::optional_internal::optional_data.1640" }
%"class.absl::optional_internal::optional_data.1640" = type { %"class.absl::optional_internal::optional_data_base.1641" }
%"class.absl::optional_internal::optional_data_base.1641" = type { %"class.absl::optional_internal::optional_data_dtor_base.1642" }
%"class.absl::optional_internal::optional_data_dtor_base.1642" = type { i8, %union.anon.1643 }
%union.anon.1643 = type { %"class.blink::BoxLayoutOverflowModel" }
%"class.blink::BoxLayoutOverflowModel" = type { %"class.blink::LayoutRect", %"class.blink::LayoutUnit" }
%"class.absl::optional.1644" = type { %"class.absl::optional_internal::optional_data.1645" }
%"class.absl::optional_internal::optional_data.1645" = type { %"class.absl::optional_internal::optional_data_base.1646" }
%"class.absl::optional_internal::optional_data_base.1646" = type { %"class.absl::optional_internal::optional_data_dtor_base.1647" }
%"class.absl::optional_internal::optional_data_dtor_base.1647" = type { i8, [3 x i8], %union.anon.1648 }
%union.anon.1648 = type { %"class.blink::BoxVisualOverflowModel" }
%"class.blink::BoxVisualOverflowModel" = type <{ %"class.blink::LayoutRect", %"class.blink::LayoutRect", i8, [3 x i8] }>
%"class.absl::optional.1649" = type { %"class.absl::optional_internal::optional_data.1650" }
%"class.absl::optional_internal::optional_data.1650" = type { %"class.absl::optional_internal::optional_data_base.1651" }
%"class.absl::optional_internal::optional_data_base.1651" = type { %"class.absl::optional_internal::optional_data_dtor_base.1652" }
%"class.absl::optional_internal::optional_data_dtor_base.1652" = type { i8, %union.anon.1653 }
%union.anon.1653 = type { %"struct.blink::BoxOverflowModel::PreviousOverflowData" }
%"struct.blink::BoxOverflowModel::PreviousOverflowData" = type { %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::RootInlineBox" = type { %"class.blink::InlineFlowBox.base", i32, %"class.blink::LineLayoutItem", %class.scoped_refptr.1623, %"class.std::__1::unique_ptr.1624", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::InlineFlowBox.base" = type <{ %"class.blink::InlineBox", %"class.std::__1::unique_ptr.1603", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"*, i32 }>
%class.scoped_refptr.1623 = type { %"class.blink::BidiContext"* }
%"class.blink::BidiContext" = type { %"class.WTF::ThreadSafeRefCounted.1679", i16, %class.scoped_refptr.1623 }
%"class.WTF::ThreadSafeRefCounted.1679" = type { %"class.base::RefCountedThreadSafe.1680" }
%"class.base::RefCountedThreadSafe.1680" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.1624" = type { %"class.std::__1::__compressed_pair.1625" }
%"class.std::__1::__compressed_pair.1625" = type { %"struct.std::__1::__compressed_pair_elem.1626" }
%"struct.std::__1::__compressed_pair_elem.1626" = type { %"class.WTF::Vector.1627"* }
%"class.WTF::Vector.1627" = type { %"class.WTF::VectorBuffer.1628" }
%"class.WTF::VectorBuffer.1628" = type { %"class.WTF::VectorBufferBase.1629" }
%"class.WTF::VectorBufferBase.1629" = type { %"class.blink::LayoutBox"**, i32, i32 }
%"class.blink::LayoutBox" = type { %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRect", %"class.blink::LayoutSize", %"class.blink::LayoutUnit", %"struct.blink::MinMaxSizes", %"class.blink::LayoutUnit", %class.scoped_refptr.1630, %"class.WTF::Vector.1631", %"class.std::__1::unique_ptr.1636", %"struct.blink::BoxLayoutExtraInput"*, %union.anon.1657, %"class.blink::Persistent.1658" }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::MinMaxSizes" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%class.scoped_refptr.1630 = type { %"class.blink::NGLayoutResult"* }
%"class.blink::NGLayoutResult" = type opaque
%"class.WTF::Vector.1631" = type { %"class.WTF::VectorBuffer.1632" }
%"class.WTF::VectorBuffer.1632" = type { %"class.WTF::VectorBufferBase.1633", [8 x i8] }
%"class.WTF::VectorBufferBase.1633" = type { %class.scoped_refptr.1630*, i32, i32 }
%"class.std::__1::unique_ptr.1636" = type { %"class.std::__1::__compressed_pair.1637" }
%"class.std::__1::__compressed_pair.1637" = type { %"struct.std::__1::__compressed_pair_elem.1638" }
%"struct.std::__1::__compressed_pair_elem.1638" = type { %"struct.blink::BoxOverflowModel"* }
%"struct.blink::BoxLayoutExtraInput" = type opaque
%union.anon.1657 = type { %"class.blink::InlineBox"* }
%"class.blink::Persistent.1658" = type { %"class.blink::PersistentBase.1659" }
%"class.blink::PersistentBase.1659" = type { %"struct.blink::LayoutBoxRareData"*, %"class.blink::PersistentNodePtr.269" }
%"struct.blink::LayoutBoxRareData" = type { %"class.blink::LayoutMultiColumnSpannerPlaceholder"*, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i8, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutBlock"*, %"class.blink::LayoutBox"*, %"class.std::__1::unique_ptr.1662", %"struct.blink::PhysicalRect", %"class.blink::Member.1672" }
%"class.blink::LayoutMultiColumnSpannerPlaceholder" = type opaque
%"class.blink::LayoutBlock" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16, [6 x i8] }>
%"class.blink::LayoutObjectChildList" = type { %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"* }
%"class.std::__1::unique_ptr.1662" = type { %"class.std::__1::__compressed_pair.1663" }
%"class.std::__1::__compressed_pair.1663" = type { %"struct.std::__1::__compressed_pair_elem.1664" }
%"struct.std::__1::__compressed_pair_elem.1664" = type { %"class.WTF::HashSet.1665"* }
%"class.WTF::HashSet.1665" = type { %"class.WTF::HashTable.1666" }
%"class.WTF::HashTable.1666" = type <{ %"class.blink::LayoutBox"**, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1672" = type { %"class.blink::MemberBase.1673" }
%"class.blink::MemberBase.1673" = type { %"class.blink::CustomLayoutChild"* }
%"class.blink::CustomLayoutChild" = type opaque
%"class.blink::LineBoxList" = type { %"class.blink::InlineBoxList" }
%"class.blink::InlineBoxList" = type { %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"* }
%"class.blink::LayoutInline" = type { %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutObjectChildList", %union.anon.1750 }
%union.anon.1750 = type { %"class.blink::LineBoxList" }
%"class.blink::NodeRareData" = type { %"class.blink::NodeData", %"class.blink::Member.1751", %"class.blink::Member.1753", %"class.blink::Member.1755", %"class.blink::Member.1774", %"class.blink::Member.1776" }
%"class.blink::Member.1751" = type { %"class.blink::MemberBase.1752" }
%"class.blink::MemberBase.1752" = type { %"class.blink::NodeRenderingData"* }
%"class.blink::NodeRenderingData" = type { %"class.blink::NodeData", %"class.blink::LayoutObject"*, %class.scoped_refptr }
%"class.blink::Member.1753" = type { %"class.blink::MemberBase.1754" }
%"class.blink::MemberBase.1754" = type { %"class.blink::NodeListsNodeData"* }
%"class.blink::NodeListsNodeData" = type opaque
%"class.blink::Member.1755" = type { %"class.blink::MemberBase.1756" }
%"class.blink::MemberBase.1756" = type { %"class.blink::NodeMutationObserverData"* }
%"class.blink::NodeMutationObserverData" = type { %"class.blink::HeapVector.1759", %"class.blink::HeapHashSet.1768" }
%"class.blink::HeapVector.1759" = type { %"class.WTF::Vector.1762" }
%"class.WTF::Vector.1762" = type { %"class.WTF::VectorBuffer.1763" }
%"class.WTF::VectorBuffer.1763" = type { %"class.WTF::VectorBufferBase.1764" }
%"class.WTF::VectorBufferBase.1764" = type { %"class.blink::Member.1765"*, i32, i32 }
%"class.blink::Member.1765" = type { %"class.blink::MemberBase.1766" }
%"class.blink::MemberBase.1766" = type { %"class.blink::MutationObserverRegistration"* }
%"class.blink::MutationObserverRegistration" = type opaque
%"class.blink::HeapHashSet.1768" = type { %"class.WTF::HashSet.1771" }
%"class.WTF::HashSet.1771" = type { %"class.WTF::HashTable.1772" }
%"class.WTF::HashTable.1772" = type <{ %"class.blink::Member.1765"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1774" = type { %"class.blink::MemberBase.1775" }
%"class.blink::MemberBase.1775" = type { %"class.blink::FlatTreeNodeData"* }
%"class.blink::FlatTreeNodeData" = type opaque
%"class.blink::Member.1776" = type { %"class.blink::MemberBase.1777" }
%"class.blink::MemberBase.1777" = type { %"class.blink::HeapHashSet.1778"* }
%"class.blink::HeapHashSet.1778" = type opaque
%"class.blink::ComputedStyleBase" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.443", %"class.blink::DataRef.447", %"class.blink::DataRef.647", %"class.blink::DataRef.714", %"class.blink::DataRef.718", %"class.blink::DataRef.722", %"class.blink::DataRef.726", [20 x i8], [4 x i8] }>
%"class.blink::LineLayoutText" = type { %"class.blink::LineLayoutItem" }
%"class.blink::LayoutText" = type { %"class.blink::LayoutObject", i16, i32, float, float, float, float, %"class.WTF::String", %"struct.blink::LogicalOffset", %union.anon.1779 }
%"struct.blink::LogicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%union.anon.1779 = type { %"class.blink::InlineTextBoxList" }
%"class.blink::InlineTextBoxList" = type { %"class.blink::InlineBoxList.1780" }
%"class.blink::InlineBoxList.1780" = type { %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"* }
%"class.blink::InlineTextBox" = type { %"class.blink::InlineBox", %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"*, i32, i16, i16 }
%"class.WTF::HashMap.1681" = type { %"class.WTF::HashTable.1682" }
%"class.WTF::HashTable.1682" = type <{ %"struct.WTF::KeyValuePair.1685"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1685" = type { %"class.blink::InlineTextBox"*, %"struct.std::__1::pair.1686" }
%"struct.std::__1::pair.1686" = type { %"class.WTF::Vector.1687", %"struct.blink::GlyphOverflow" }
%"class.WTF::Vector.1687" = type { %"class.WTF::VectorBuffer.1688" }
%"class.WTF::VectorBuffer.1688" = type { %"class.WTF::VectorBufferBase.1689" }
%"class.WTF::VectorBufferBase.1689" = type { %"class.blink::SimpleFontData"**, i32, i32 }
%"struct.blink::GlyphOverflow" = type { float, float, float, float }
%"class.blink::VerticalPositionCache" = type opaque
%"class.blink::LayoutRubyRun" = type { %"class.blink::LayoutBlockFlow" }
%"class.blink::LayoutBlockFlow" = type { %"class.blink::LayoutBlock.base", %"class.blink::LineBoxList", %"class.blink::Persistent.1781", %"class.std::__1::unique_ptr.1791" }
%"class.blink::LayoutBlock.base" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16 }>
%"class.blink::Persistent.1781" = type { %"class.blink::PersistentBase.1782" }
%"class.blink::PersistentBase.1782" = type { %"struct.blink::LayoutBlockFlow::LayoutBlockFlowRareData"*, %"class.blink::PersistentNodePtr.269" }
%"struct.blink::LayoutBlockFlow::LayoutBlockFlowRareData" = type <{ %"class.blink::LayoutBlockFlow::MarginValues", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutMultiColumnFlowThread"*, %"class.std::__1::unique_ptr.1785", %"class.WTF::AtomicString", %"class.WTF::AtomicString", i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.blink::LayoutBlockFlow::MarginValues" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutMultiColumnFlowThread" = type opaque
%"class.std::__1::unique_ptr.1785" = type { %"class.std::__1::__compressed_pair.1786" }
%"class.std::__1::__compressed_pair.1786" = type { %"struct.std::__1::__compressed_pair_elem.1787" }
%"struct.std::__1::__compressed_pair_elem.1787" = type { %"class.blink::NGOffsetMapping"* }
%"class.blink::NGOffsetMapping" = type opaque
%"class.std::__1::unique_ptr.1791" = type { %"class.std::__1::__compressed_pair.1792" }
%"class.std::__1::__compressed_pair.1792" = type { %"struct.std::__1::__compressed_pair_elem.1793" }
%"struct.std::__1::__compressed_pair_elem.1793" = type { %"class.blink::FloatingObjects"* }
%"class.blink::FloatingObjects" = type <{ %"class.WTF::ListHashSet.1794", %"class.WTF::PODIntervalTree", i32, i32, i8, [7 x i8], %"class.blink::LayoutBlockFlow"*, [2 x %"struct.blink::FloatingObjects::FloatBottomCachedValue"], i8, [7 x i8] }>
%"class.WTF::ListHashSet.1794" = type { %"class.WTF::HashTable.1797", %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetAllocator<std::__1::unique_ptr<blink::FloatingObject, std::__1::default_delete<blink::FloatingObject> >, 4>::AllocatorProvider" }
%"class.WTF::HashTable.1797" = type <{ %"class.WTF::MallocedListHashSetNode"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::MallocedListHashSetNode" = type { %"class.std::__1::unique_ptr.1800", %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetNode"* }
%"class.std::__1::unique_ptr.1800" = type { %"class.std::__1::__compressed_pair.1801" }
%"class.std::__1::__compressed_pair.1801" = type { %"struct.std::__1::__compressed_pair_elem.1802" }
%"struct.std::__1::__compressed_pair_elem.1802" = type { %"class.blink::FloatingObject"* }
%"class.blink::FloatingObject" = type <{ %"class.blink::LayoutBox"*, %"class.blink::RootInlineBox"*, %"class.blink::LayoutRect", i8, [7 x i8] }>
%"class.WTF::MallocedListHashSetAllocator<std::__1::unique_ptr<blink::FloatingObject, std::__1::default_delete<blink::FloatingObject> >, 4>::AllocatorProvider" = type { %"struct.WTF::MallocedListHashSetAllocator"* }
%"struct.WTF::MallocedListHashSetAllocator" = type { %"class.WTF::MallocedListHashSetNode"*, i8, [7 x i8], [96 x i8] }
%"class.WTF::PODIntervalTree" = type { %"class.WTF::PODRedBlackTree.base", [7 x i8] }
%"class.WTF::PODRedBlackTree.base" = type <{ i32 (...)**, %class.scoped_refptr.1806, %"class.WTF::PODRedBlackTree<WTF::PODInterval<blink::LayoutUnit, blink::FloatingObject *> >::Node"*, i8 }>
%class.scoped_refptr.1806 = type { %"class.WTF::PODFreeListArena"* }
%"class.WTF::PODFreeListArena" = type opaque
%"class.WTF::PODRedBlackTree<WTF::PODInterval<blink::LayoutUnit, blink::FloatingObject *> >::Node" = type opaque
%"struct.blink::FloatingObjects::FloatBottomCachedValue" = type <{ %"class.blink::FloatingObject"*, i8, [7 x i8] }>
%"class.blink::LayoutRubyBase" = type { %"class.blink::LayoutBlockFlow" }
%"class.WTF::HashSet.1811" = type { %"class.WTF::HashTable.1812" }
%"class.WTF::HashTable.1812" = type <{ %"class.blink::SimpleFontData"**, i32, i32, i32, [4 x i8] }>
%"class.blink::HitTestResult" = type { %"class.blink::HitTestRequest", i8, %"class.blink::Member.318", %"class.blink::Member.318", %"class.blink::Member.343", %"class.blink::Member.318", %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset", %"class.blink::Member.343", %"class.blink::Member.1692", i8, %"class.blink::Member.1694", %"class.WTF::String" }
%"class.blink::HitTestRequest" = type { i32, %"class.blink::LayoutObject"* }
%"class.blink::Member.1692" = type { %"class.blink::MemberBase.1693" }
%"class.blink::MemberBase.1693" = type { %"class.blink::Scrollbar"* }
%"class.blink::Scrollbar" = type { %"class.blink::DisplayItemClient.base", %"class.blink::Member.1698", i32, %"class.blink::ScrollbarTheme"*, i32, i32, float, float, i32, i32, i32, float, i8, i32, i8, %"class.blink::HeapTaskRunnerTimer.1708", float, i8, i8, i8, i8, %"class.blink::IntRect", %"class.blink::Member.343" }
%"class.blink::Member.1698" = type { %"class.blink::MemberBase.1699" }
%"class.blink::MemberBase.1699" = type { %"class.blink::ScrollableArea"* }
%"class.blink::ScrollableArea" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.1700", %"class.blink::Member.1702", %"class.blink::Member.1704", %"class.blink::Member.1706", %"class.WTF::Vector.906", i16, %class.scoped_refptr.963 }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.1700" = type { %"class.blink::MemberBase.1701" }
%"class.blink::MemberBase.1701" = type { %"class.blink::MacScrollbarAnimator"* }
%"class.blink::MacScrollbarAnimator" = type opaque
%"class.blink::Member.1702" = type { %"class.blink::MemberBase.1703" }
%"class.blink::MemberBase.1703" = type { %"class.blink::ScrollAnimatorBase"* }
%"class.blink::ScrollAnimatorBase" = type opaque
%"class.blink::Member.1704" = type { %"class.blink::MemberBase.1705" }
%"class.blink::MemberBase.1705" = type { %"class.blink::ProgrammaticScrollAnimator"* }
%"class.blink::ProgrammaticScrollAnimator" = type opaque
%"class.blink::Member.1706" = type { %"class.blink::MemberBase.1707" }
%"class.blink::MemberBase.1707" = type { %"class.blink::DisallowNewWrapper"* }
%"class.blink::DisallowNewWrapper" = type opaque
%"class.blink::ScrollbarTheme" = type { i32 (...)** }
%"class.blink::HeapTaskRunnerTimer.1708" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1709", { i64, i64 } }
%"class.blink::WeakMember.1709" = type { %"class.blink::MemberBase.1693" }
%"class.blink::Member.1694" = type { %"class.blink::MemberBase.1695" }
%"class.blink::MemberBase.1695" = type { %"class.blink::HeapLinkedHashSet"* }
%"class.blink::HeapLinkedHashSet" = type opaque
%"class.blink::HitTestLocation" = type <{ %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalRect", %"class.blink::FloatPoint", %"class.blink::FloatQuad", i32, i8, i8, [2 x i8] }>
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::InlineFlowBoxPainter" = type { %"class.blink::InlineBoxPainterBase", %"class.blink::InlineFlowBox"* }
%"class.blink::InlineBoxPainterBase" = type { i32 (...)**, %"class.blink::ImageResourceObserver"*, %"class.blink::Document"*, %"class.blink::Node"*, %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"* }
%"class.blink::NGInlineCursor" = type opaque
%"struct.blink::PaintInfo" = type opaque
%"class.blink::LayoutRubyText" = type { %"class.blink::LayoutBlockFlow" }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK5blink13InlineFlowBox30MarginBorderPaddingLogicalLeftEv = comdat any

$_ZNK5blink13InlineFlowBox31MarginBorderPaddingLogicalRightEv = comdat any

$_ZNK5blink14LineLayoutItem8StyleRefEb = comdat any

$_ZNK5blink14LineLayoutItem5StyleEb = comdat any

$_ZN5blink13InlineFlowBox26AddBoxShadowVisualOverflowERNS_10LayoutRectE = comdat any

$_ZN5blink13InlineFlowBox29AddBorderOutsetVisualOverflowERNS_10LayoutRectE = comdat any

$_ZN5blink13InlineFlowBox24AddTextBoxVisualOverflowEPNS_13InlineTextBoxERN3WTF7HashMapIPKS1_NSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS5_EENS3_10HashTraitsIS6_EENSJ_ISG_EESD_EERNS_10LayoutRectE = comdat any

$_ZNK5blink13InlineFlowBox26PhysicalVisualOverflowRectENS_10LayoutUnitES1_ = comdat any

$_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv = comdat any

$_ZNK5blink9InlineBox11IsLineBreakEv = comdat any

$_ZNK5blink9InlineBox15IsInlineTextBoxEv = comdat any

$_ZNK5blink9InlineBox15IsRootInlineBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv = comdat any

$_ZNK5blink9InlineBox20VirtualLogicalHeightEv = comdat any

$_ZN5blink9InlineBox9MarkDirtyEv = comdat any

$_ZN5blink13InlineFlowBoxD2Ev = comdat any

$_ZN5blink13InlineFlowBoxD0Ev = comdat any

$_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv = comdat any

$_ZN5blink13InlineFlowBox14SetConstructedEv = comdat any

$_ZNK5blink13InlineFlowBox6IsLeafEv = comdat any

$_ZNK5blink13InlineFlowBox10IsSelectedEv = comdat any

$_ZNK5blink20BorderImageLengthBox7NonZeroEv = comdat any

$_ZNK5blink20LayoutBoxModelObject34HasInlineDirectionBordersOrPaddingEv = comdat any

$_ZNK5blink20LayoutBoxModelObject29BorderAndPaddingLogicalHeightEv = comdat any

$_ZN5blink13GlyphOverflow13SetFromBoundsERKNS_9FloatRectERKNS_4FontEf = comdat any

$_ZN3WTF12CopyToVectorINS_7HashSetIPKN5blink14SimpleFontDataENS_7PtrHashIS4_EENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEENS_6VectorIS5_Lj0ESA_EEEEvRKT_RT0_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6insertINS_17HashMapTranslatorISO_SJ_SC_EERPS2_SF_EENS_18HashTableAddResultISP_SG_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6ExpandEPSG_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E8RehashToEPSG_jSQ_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E16LookupForWritingERKS4_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm = comdat any

$_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_ = comdat any

@.str = private unnamed_addr constant [14 x i8] c"InlineFlowBox\00", align 1
@_ZTVN5blink13InlineFlowBoxE = hidden unnamed_addr constant { [39 x i8*] } { [39 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBoxD2Ev to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBoxD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox9DebugNameEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox11OwnerNodeIdEv to i8*), i8* bitcast (i8 (%"class.blink::DisplayItemClient"*)* @_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv to i8*), i8* bitcast (void (%"class.blink::InlineBox"*)* @_ZN5blink9InlineBox7DestroyEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox10DeleteLineEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox11ExtractLineEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox10AttachLineEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox11IsLineBreakEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*, %"class.blink::LayoutSize"*)* @_ZN5blink13InlineFlowBox4MoveERKNS_10LayoutSizeE to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*, %"struct.blink::PaintInfo"*, %"struct.blink::PhysicalOffset"*, i32, i32)* @_ZNK5blink13InlineFlowBox5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_ to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)* @_ZN5blink13InlineFlowBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_ to i8*), i8* bitcast (i8* (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox7BoxNameEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox15IsInlineTextBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox15IsRootInlineBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox20VirtualLogicalHeightEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox14SetConstructedEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox6IsLeafEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*, i32)* @_ZNK5blink9InlineBox16BaselinePositionENS_12FontBaselineE to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox10LineHeightEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox14CaretMinOffsetEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox14CaretMaxOffsetEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox15ClearTruncationEv to i8*), i8* bitcast (void (%"class.blink::InlineBox"*)* @_ZN5blink9InlineBox9MarkDirtyEv to i8*), i8* bitcast (void (%"class.blink::InlineBox"*)* @_ZN5blink9InlineBox14DirtyLineBoxesEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox10IsSelectedEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*, i1, i32, i32)* @_ZNK5blink13InlineFlowBox22CanAccommodateEllipsisEbNS_10LayoutUnitES1_ to i8*), i8* bitcast (i32 (%"class.blink::InlineFlowBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)* @_ZN5blink13InlineFlowBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_ to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox30ExtractLineBoxFromLayoutObjectEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox27AttachLineBoxToLayoutObjectEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox29RemoveLineBoxFromLayoutObjectEv to i8*), i8* bitcast (%"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox9LineBoxesEv to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [64 x i8] c"../../third_party/blink/renderer/core/css/css_global_rule_set.h\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"features_.IsAlive()\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"../../third_party/blink/renderer/core/layout/layout_inline.h\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"!IsInLayoutNGInlineFormattingContext()\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink13InlineTextBoxENSt3__14pairINS_6VectorIPKNS2_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS2_13GlyphOverflowEEEEEEEPKcv = private unnamed_addr constant [206 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<const blink::InlineTextBox *, std::__1::pair<WTF::Vector<const blink::SimpleFontData *, 0, WTF::PartitionAllocator>, blink::GlyphOverflow> >]\00", align 1
@.str.7 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink14SimpleFontDataEEEPKcv = private unnamed_addr constant [77 x i8] c"const char *WTF::GetStringWithTypeName() [T = const blink::SimpleFontData *]\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

; Function Attrs: nounwind
declare void @_ZN5blink9InlineBoxdlEPv(i8*) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13InlineFlowBox26GetFlowSpacingLogicalWidthEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZNK5blink13InlineFlowBox30MarginBorderPaddingLogicalLeftEv(%"class.blink::InlineFlowBox"* %0)
  %3 = tail call i32 @_ZNK5blink13InlineFlowBox31MarginBorderPaddingLogicalRightEv(%"class.blink::InlineFlowBox"* %0)
  %4 = icmp slt i32 %3, 0
  %5 = select i1 %4, i32 -2147483648, i32 2147483647
  %6 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %2, i32 %3) #11
  %7 = extractvalue { i32, i1 } %6, 1
  %8 = extractvalue { i32, i1 } %6, 0
  %9 = select i1 %7, i32 %5, i32 %8, !prof !2
  %10 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %11 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %10, align 8
  %12 = icmp eq %"class.blink::InlineBox"* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %32, %1
  %14 = phi i32 [ %9, %1 ], [ %33, %32 ]
  ret i32 %14

15:                                               ; preds = %1, %32
  %16 = phi %"class.blink::InlineBox"* [ %35, %32 ], [ %11, %1 ]
  %17 = phi i32 [ %33, %32 ], [ %9, %1 ]
  %18 = bitcast %"class.blink::InlineBox"* %16 to i1 (%"class.blink::InlineBox"*)***
  %19 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %19, i64 14
  %21 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.blink::InlineBox"* nonnull %16) #11
  br i1 %22, label %23, label %32

23:                                               ; preds = %15
  %24 = bitcast %"class.blink::InlineBox"* %16 to %"class.blink::InlineFlowBox"*
  %25 = tail call i32 @_ZN5blink13InlineFlowBox26GetFlowSpacingLogicalWidthEv(%"class.blink::InlineFlowBox"* nonnull %24)
  %26 = icmp slt i32 %25, 0
  %27 = select i1 %26, i32 -2147483648, i32 2147483647
  %28 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %17, i32 %25) #11
  %29 = extractvalue { i32, i1 } %28, 1
  %30 = extractvalue { i32, i1 } %28, 0
  %31 = select i1 %29, i32 %27, i32 %30, !prof !2
  br label %32

32:                                               ; preds = %15, %23
  %33 = phi i32 [ %31, %23 ], [ %17, %15 ]
  %34 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %16, i64 0, i32 1
  %35 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %34, align 8
  %36 = icmp eq %"class.blink::InlineBox"* %35, null
  br i1 %36, label %13, label %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink13InlineFlowBox30MarginBorderPaddingLogicalLeftEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.blink::LineLayoutItem", align 8
  %3 = alloca %"class.blink::LineLayoutItem", align 8
  %4 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 2048
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %14 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 4
  %16 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %15 to i96*
  %17 = load i96, i96* %16, align 4
  %18 = and i96 %17, 33554432
  %19 = icmp eq i96 %18, 0
  %20 = bitcast %"class.blink::LayoutObject"* %14 to %"class.blink::LayoutBoxModelObject"*
  %21 = select i1 %19, %"class.blink::LayoutBoxModelObject"* %20, %"class.blink::LayoutBoxModelObject"* null
  %22 = bitcast %"class.blink::LayoutBoxModelObject"* %21 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %23 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %22, align 8
  br i1 %12, label %28, label %24

24:                                               ; preds = %8
  %25 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %23, i64 129
  %26 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %25, align 8
  %27 = tail call i32 %26(%"class.blink::LayoutBoxModelObject"* %21) #11
  br label %32

28:                                               ; preds = %8
  %29 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %23, i64 127
  %30 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %29, align 8
  %31 = tail call i32 %30(%"class.blink::LayoutBoxModelObject"* %21) #11
  br label %32

32:                                               ; preds = %1, %24, %28
  %33 = phi i32 [ 0, %1 ], [ %27, %24 ], [ %31, %28 ]
  %34 = load i32, i32* %4, align 8
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %78, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 2048
  %41 = icmp eq i32 %40, 0
  %42 = bitcast %"class.blink::LineLayoutItem"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #11
  %43 = bitcast %"class.blink::LineLayoutItem"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #11
  %44 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %45 = bitcast %"class.blink::LayoutObject"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br i1 %41, label %60, label %47

47:                                               ; preds = %37
  %48 = bitcast %"class.blink::LineLayoutItem"* %2 to i64*
  store i64 %46, i64* %48, align 8
  %49 = and i32 %39, 1
  %50 = icmp ne i32 %49, 0
  %51 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %2, i1 zeroext %50) #11
  %52 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %51, i64 0, i32 0, i32 7, i32 0, i32 0
  %53 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %52, align 8
  %54 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %53, i64 0, i32 27
  %55 = load i16, i16* %54, align 8
  %56 = and i16 %55, 224
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %72, label %58

58:                                               ; preds = %47
  %59 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %53, i64 0, i32 24, i32 0
  br label %73

60:                                               ; preds = %37
  %61 = bitcast %"class.blink::LineLayoutItem"* %3 to i64*
  store i64 %46, i64* %61, align 8
  %62 = and i32 %39, 1
  %63 = icmp ne i32 %62, 0
  %64 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %3, i1 zeroext %63) #11
  %65 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %64, i64 0, i32 0, i32 7, i32 0, i32 0
  %66 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %66, i64 0, i32 27
  %68 = load i16, i16* %67, align 8
  %69 = icmp ult i16 %68, 8192
  br i1 %69, label %72, label %70

70:                                               ; preds = %60
  %71 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %66, i64 0, i32 26, i32 0
  br label %73

72:                                               ; preds = %47, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #11
  br label %78

73:                                               ; preds = %58, %70
  %74 = phi i32* [ %59, %58 ], [ %71, %70 ]
  %75 = load i32, i32* %74, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #11
  %76 = icmp slt i32 %75, 0
  %77 = select i1 %76, i32 -2147483648, i32 2147483647
  br label %78

78:                                               ; preds = %73, %32, %72
  %79 = phi i32 [ 0, %72 ], [ 0, %32 ], [ %75, %73 ]
  %80 = phi i32 [ 2147483647, %72 ], [ 2147483647, %32 ], [ %77, %73 ]
  %81 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %33, i32 %79) #11
  %82 = extractvalue { i32, i1 } %81, 1
  %83 = extractvalue { i32, i1 } %81, 0
  %84 = select i1 %82, i32 %80, i32 %83, !prof !2
  %85 = load i32, i32* %4, align 8
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %118, label %88

88:                                               ; preds = %78
  %89 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = and i32 %90, 2048
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %94 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %93, align 8
  %95 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %94, i64 0, i32 4
  %96 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %95 to i96*
  %97 = load i96, i96* %96, align 4
  %98 = and i96 %97, 33554432
  %99 = icmp eq i96 %98, 0
  %100 = bitcast %"class.blink::LayoutObject"* %94 to %"class.blink::LayoutBoxModelObject"*
  %101 = select i1 %99, %"class.blink::LayoutBoxModelObject"* %100, %"class.blink::LayoutBoxModelObject"* null
  %102 = bitcast %"class.blink::LayoutBoxModelObject"* %101 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %103 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %102, align 8
  br i1 %92, label %108, label %104

104:                                              ; preds = %88
  %105 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %103, i64 120
  %106 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %105, align 8
  %107 = call i32 %106(%"class.blink::LayoutBoxModelObject"* %101) #11
  br label %112

108:                                              ; preds = %88
  %109 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %103, i64 118
  %110 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %109, align 8
  %111 = call i32 %110(%"class.blink::LayoutBoxModelObject"* %101) #11
  br label %112

112:                                              ; preds = %104, %108
  %113 = phi i32 [ %107, %104 ], [ %111, %108 ]
  %114 = sdiv i32 %113, 64
  %115 = shl nsw i32 %114, 6
  %116 = icmp slt i32 %113, -63
  %117 = select i1 %116, i32 -2147483648, i32 2147483647
  br label %118

118:                                              ; preds = %112, %78
  %119 = phi i32 [ 0, %78 ], [ %115, %112 ]
  %120 = phi i32 [ 2147483647, %78 ], [ %117, %112 ]
  %121 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %84, i32 %119) #11
  %122 = extractvalue { i32, i1 } %121, 1
  %123 = extractvalue { i32, i1 } %121, 0
  %124 = select i1 %122, i32 %120, i32 %123, !prof !2
  ret i32 %124
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink13InlineFlowBox31MarginBorderPaddingLogicalRightEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.blink::LineLayoutItem", align 8
  %3 = alloca %"class.blink::LineLayoutItem", align 8
  %4 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 2048
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %14 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 4
  %16 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %15 to i96*
  %17 = load i96, i96* %16, align 4
  %18 = and i96 %17, 33554432
  %19 = icmp eq i96 %18, 0
  %20 = bitcast %"class.blink::LayoutObject"* %14 to %"class.blink::LayoutBoxModelObject"*
  %21 = select i1 %19, %"class.blink::LayoutBoxModelObject"* %20, %"class.blink::LayoutBoxModelObject"* null
  %22 = bitcast %"class.blink::LayoutBoxModelObject"* %21 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %23 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %22, align 8
  br i1 %12, label %28, label %24

24:                                               ; preds = %8
  %25 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %23, i64 130
  %26 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %25, align 8
  %27 = tail call i32 %26(%"class.blink::LayoutBoxModelObject"* %21) #11
  br label %32

28:                                               ; preds = %8
  %29 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %23, i64 128
  %30 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %29, align 8
  %31 = tail call i32 %30(%"class.blink::LayoutBoxModelObject"* %21) #11
  br label %32

32:                                               ; preds = %1, %24, %28
  %33 = phi i32 [ 0, %1 ], [ %27, %24 ], [ %31, %28 ]
  %34 = load i32, i32* %4, align 8
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %79, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 2048
  %41 = icmp eq i32 %40, 0
  %42 = bitcast %"class.blink::LineLayoutItem"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #11
  %43 = bitcast %"class.blink::LineLayoutItem"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #11
  %44 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %45 = bitcast %"class.blink::LayoutObject"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br i1 %41, label %60, label %47

47:                                               ; preds = %37
  %48 = bitcast %"class.blink::LineLayoutItem"* %2 to i64*
  store i64 %46, i64* %48, align 8
  %49 = and i32 %39, 1
  %50 = icmp ne i32 %49, 0
  %51 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %2, i1 zeroext %50) #11
  %52 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %51, i64 0, i32 0, i32 7, i32 0, i32 0
  %53 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %52, align 8
  %54 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %53, i64 0, i32 27
  %55 = load i16, i16* %54, align 8
  %56 = and i16 %55, 3584
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %73, label %58

58:                                               ; preds = %47
  %59 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %53, i64 0, i32 25, i32 0
  br label %74

60:                                               ; preds = %37
  %61 = bitcast %"class.blink::LineLayoutItem"* %3 to i64*
  store i64 %46, i64* %61, align 8
  %62 = and i32 %39, 1
  %63 = icmp ne i32 %62, 0
  %64 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %3, i1 zeroext %63) #11
  %65 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %64, i64 0, i32 0, i32 7, i32 0, i32 0
  %66 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %66, i64 0, i32 27
  %68 = load i16, i16* %67, align 8
  %69 = and i16 %68, 14
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %60
  %72 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %66, i64 0, i32 23, i32 0
  br label %74

73:                                               ; preds = %47, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #11
  br label %79

74:                                               ; preds = %58, %71
  %75 = phi i32* [ %59, %58 ], [ %72, %71 ]
  %76 = load i32, i32* %75, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #11
  %77 = icmp slt i32 %76, 0
  %78 = select i1 %77, i32 -2147483648, i32 2147483647
  br label %79

79:                                               ; preds = %74, %32, %73
  %80 = phi i32 [ 0, %73 ], [ 0, %32 ], [ %76, %74 ]
  %81 = phi i32 [ 2147483647, %73 ], [ 2147483647, %32 ], [ %78, %74 ]
  %82 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %33, i32 %80) #11
  %83 = extractvalue { i32, i1 } %82, 1
  %84 = extractvalue { i32, i1 } %82, 0
  %85 = select i1 %83, i32 %81, i32 %84, !prof !2
  %86 = load i32, i32* %4, align 8
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %119, label %89

89:                                               ; preds = %79
  %90 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = and i32 %91, 2048
  %93 = icmp eq i32 %92, 0
  %94 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %95 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %94, align 8
  %96 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %95, i64 0, i32 4
  %97 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %96 to i96*
  %98 = load i96, i96* %97, align 4
  %99 = and i96 %98, 33554432
  %100 = icmp eq i96 %99, 0
  %101 = bitcast %"class.blink::LayoutObject"* %95 to %"class.blink::LayoutBoxModelObject"*
  %102 = select i1 %100, %"class.blink::LayoutBoxModelObject"* %101, %"class.blink::LayoutBoxModelObject"* null
  %103 = bitcast %"class.blink::LayoutBoxModelObject"* %102 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %104 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %103, align 8
  br i1 %93, label %109, label %105

105:                                              ; preds = %89
  %106 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %104, i64 121
  %107 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %106, align 8
  %108 = call i32 %107(%"class.blink::LayoutBoxModelObject"* %102) #11
  br label %113

109:                                              ; preds = %89
  %110 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %104, i64 119
  %111 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %110, align 8
  %112 = call i32 %111(%"class.blink::LayoutBoxModelObject"* %102) #11
  br label %113

113:                                              ; preds = %105, %109
  %114 = phi i32 [ %108, %105 ], [ %112, %109 ]
  %115 = sdiv i32 %114, 64
  %116 = shl nsw i32 %115, 6
  %117 = icmp slt i32 %114, -63
  %118 = select i1 %117, i32 -2147483648, i32 2147483647
  br label %119

119:                                              ; preds = %113, %79
  %120 = phi i32 [ 0, %79 ], [ %116, %113 ]
  %121 = phi i32 [ 2147483647, %79 ], [ %118, %113 ]
  %122 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %85, i32 %120) #11
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 %121, i32 %124, !prof !2
  ret i32 %125
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13InlineFlowBox9FrameRectEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5
  %4 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 2048
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %10 = load i32, i32* %9, align 8
  br label %14

11:                                               ; preds = %1
  %12 = tail call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %2) #11
  %13 = load i32, i32* %4, align 4
  br label %14

14:                                               ; preds = %11, %8
  %15 = phi i32 [ %5, %8 ], [ %13, %11 ]
  %16 = phi i32 [ %10, %8 ], [ %12, %11 ]
  %17 = and i32 %15, 2048
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = tail call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %2) #11
  br label %24

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %23 = load i32, i32* %22, align 8
  br label %24

24:                                               ; preds = %19, %21
  %25 = phi i32 [ %20, %19 ], [ %23, %21 ]
  %26 = zext i32 %25 to i64
  %27 = shl nuw i64 %26, 32
  %28 = zext i32 %16 to i64
  %29 = or i64 %27, %28
  %30 = bitcast %"class.blink::LayoutPoint"* %3 to i64*
  %31 = load i64, i64* %30, align 4
  %32 = insertvalue { i64, i64 } undef, i64 %31, 0
  %33 = insertvalue { i64, i64 } %32, i64 %29, 1
  ret { i64, i64 } %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox9AddToLineEPNS_9InlineBoxE(%"class.blink::InlineFlowBox"*, %"class.blink::InlineBox"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::Length", align 4
  %4 = alloca %"class.blink::Length", align 4
  %5 = alloca %"class.blink::Length", align 4
  %6 = alloca %"class.blink::Length", align 4
  %7 = alloca %"class.blink::LineLayoutItem", align 8
  %8 = alloca %"class.blink::LineLayoutItem", align 8
  %9 = alloca %"class.blink::LineLayoutItem", align 8
  %10 = alloca %"class.blink::LineLayoutItem", align 8
  %11 = alloca %"class.blink::LineLayoutItem", align 8
  %12 = alloca %"class.blink::LineLayoutItem", align 8
  %13 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 3
  store %"class.blink::InlineFlowBox"* %0, %"class.blink::InlineFlowBox"** %13, align 8
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %15 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %14, align 8
  %16 = icmp eq %"class.blink::InlineBox"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  store %"class.blink::InlineBox"* %1, %"class.blink::InlineBox"** %14, align 8
  %18 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  br label %27

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  %21 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %21, i64 0, i32 1
  store %"class.blink::InlineBox"* %1, %"class.blink::InlineBox"** %22, align 8
  %23 = bitcast %"class.blink::InlineBox"** %20 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 2
  %26 = bitcast %"class.blink::InlineBox"** %25 to i64*
  store i64 %24, i64* %26, align 8
  br label %27

27:                                               ; preds = %19, %17
  %28 = phi %"class.blink::InlineBox"** [ %20, %19 ], [ %18, %17 ]
  store %"class.blink::InlineBox"* %1, %"class.blink::InlineBox"** %28, align 8
  %29 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = and i32 %31, 1
  %33 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 7, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, -2
  %36 = or i32 %35, %32
  store i32 %36, i32* %33, align 4
  %37 = load i32, i32* %30, align 4
  %38 = and i32 %37, 2048
  %39 = and i32 %36, -2049
  %40 = or i32 %39, %38
  store i32 %40, i32* %33, align 4
  %41 = and i32 %34, 131072
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %68, label %43

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %45 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %45, i64 0, i32 7
  %47 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %49 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %48, align 8
  %50 = icmp eq %"class.blink::LayoutObject"* %47, %49
  br i1 %50, label %51, label %55

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = or i32 %53, 4
  store i32 %54, i32* %52, align 8
  br label %55

55:                                               ; preds = %51, %43
  %56 = icmp eq %"class.blink::InlineFlowBox"* %0, null
  br i1 %56, label %93, label %57

57:                                               ; preds = %55, %63
  %58 = phi %"class.blink::InlineFlowBox"* [ %66, %63 ], [ %0, %55 ]
  %59 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %58, i64 0, i32 6
  %60 = load i32, i32* %59, align 8
  %61 = and i32 %60, 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %93

63:                                               ; preds = %57
  %64 = or i32 %60, 8
  store i32 %64, i32* %59, align 8
  %65 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %58, i64 0, i32 0, i32 3
  %66 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %65, align 8
  %67 = icmp eq %"class.blink::InlineFlowBox"* %66, null
  br i1 %67, label %93, label %57

68:                                               ; preds = %27
  %69 = bitcast %"class.blink::InlineBox"* %1 to i1 (%"class.blink::InlineBox"*)***
  %70 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %69, align 8
  %71 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %70, i64 14
  %72 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %71, align 8
  %73 = tail call zeroext i1 %72(%"class.blink::InlineBox"* %1) #11
  br i1 %73, label %74, label %93

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 1, i32 4
  %76 = bitcast %"class.blink::LineLayoutItem"* %75 to i32*
  %77 = load i32, i32* %76, align 8
  %78 = and i32 %77, 8
  %79 = icmp eq i32 %78, 0
  %80 = icmp eq %"class.blink::InlineFlowBox"* %0, null
  %81 = or i1 %80, %79
  br i1 %81, label %93, label %82

82:                                               ; preds = %74, %88
  %83 = phi %"class.blink::InlineFlowBox"* [ %91, %88 ], [ %0, %74 ]
  %84 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %83, i64 0, i32 6
  %85 = load i32, i32* %84, align 8
  %86 = and i32 %85, 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %93

88:                                               ; preds = %82
  %89 = or i32 %85, 8
  store i32 %89, i32* %84, align 8
  %90 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %83, i64 0, i32 0, i32 3
  %91 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %90, align 8
  %92 = icmp eq %"class.blink::InlineFlowBox"* %91, null
  br i1 %92, label %93, label %82

93:                                               ; preds = %63, %57, %88, %82, %74, %55, %68
  %94 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %95 = load i32, i32* %94, align 8
  %96 = and i32 %95, 16
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %369, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %100 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %99, align 8
  %101 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %100, i64 0, i32 4
  %102 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %101 to i96*
  %103 = load i96, i96* %102, align 4
  %104 = and i96 %103, 113336795588871485128704
  %105 = icmp eq i96 %104, 75557863725914323419136
  br i1 %105, label %369, label %106

106:                                              ; preds = %98
  %107 = bitcast %"class.blink::LineLayoutItem"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %107) #11
  %108 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %109 = bitcast %"class.blink::LayoutObject"** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.blink::LineLayoutItem"* %7 to i64*
  store i64 %110, i64* %111, align 8
  %112 = load i32, i32* %30, align 4
  %113 = and i32 %112, 1
  %114 = icmp ne i32 %113, 0
  %115 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %7, i1 zeroext %114)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %107) #11
  %116 = bitcast %"class.blink::LineLayoutItem"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116) #11
  %117 = bitcast %"class.blink::LayoutObject"** %99 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.blink::LineLayoutItem"* %8 to i64*
  store i64 %118, i64* %119, align 8
  %120 = load i32, i32* %30, align 4
  %121 = and i32 %120, 1
  %122 = icmp ne i32 %121, 0
  %123 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %8, i1 zeroext %122)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116) #11
  %124 = bitcast %"class.blink::InlineFlowBox"* %0 to i1 (%"class.blink::InlineBox"*)***
  %125 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %124, align 8
  %126 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %125, i64 16
  %127 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %126, align 8
  %128 = call zeroext i1 %127(%"class.blink::InlineBox"* %29) #11
  %129 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %99, align 8
  %130 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %129, i64 0, i32 4
  %131 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %130 to i96*
  %132 = load i96, i96* %131, align 4
  %133 = and i96 %132, 1073741824
  %134 = icmp eq i96 %133, 0
  br i1 %134, label %135, label %354

135:                                              ; preds = %106
  %136 = load i32, i32* %33, align 4
  %137 = and i32 %136, 131072
  %138 = icmp eq i32 %137, 0
  %139 = bitcast %"class.blink::LayoutObject"* %129 to i1 (%"class.blink::LayoutObject"*, i32)***
  %140 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %139, align 8
  %141 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %140, i64 92
  %142 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %141, align 8
  %143 = call zeroext i1 %142(%"class.blink::LayoutObject"* %129, i32 0) #11
  br i1 %138, label %229, label %144

144:                                              ; preds = %135
  br i1 %143, label %151, label %145

145:                                              ; preds = %144
  %146 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %99, align 8
  %147 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %146, i64 0, i32 7
  %148 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %147, align 8
  %149 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %108, align 8
  %150 = icmp eq %"class.blink::LayoutObject"* %148, %149
  br i1 %150, label %216, label %151

151:                                              ; preds = %145, %144
  %152 = call zeroext i1 @_ZNK5blink13ComputedStyle35HasIdenticalAscentDescentAndLineGapERKS0_(%"class.blink::ComputedStyle"* %115, %"class.blink::ComputedStyle"* dereferenceable(104) %123) #11
  br i1 %152, label %153, label %216

153:                                              ; preds = %151
  %154 = bitcast %"class.blink::Length"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %154) #11
  call void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* nonnull sret %3, %"class.blink::ComputedStyle"* %115) #11
  %155 = bitcast %"class.blink::Length"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %155) #11
  call void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* nonnull sret %4, %"class.blink::ComputedStyle"* %123) #11
  %156 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %3, i64 0, i32 2
  %157 = load i8, i8* %156, align 1
  %158 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %4, i64 0, i32 2
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %157, %159
  br i1 %160, label %161, label %205

161:                                              ; preds = %153
  %162 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %3, i64 0, i32 1
  %163 = load i8, i8* %162, align 4, !range !3
  %164 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %4, i64 0, i32 1
  %165 = load i8, i8* %164, align 4, !range !3
  %166 = icmp eq i8 %163, %165
  br i1 %166, label %167, label %202

167:                                              ; preds = %161
  %168 = icmp eq i8 %157, 12
  br i1 %168, label %189, label %169

169:                                              ; preds = %167
  %170 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %3, i64 0, i32 3
  %171 = load i8, i8* %170, align 2, !range !3
  %172 = icmp eq i8 %171, 0
  %173 = bitcast %"class.blink::Length"* %3 to float*
  %174 = load float, float* %173, align 4
  %175 = bitcast float %174 to i32
  %176 = sitofp i32 %175 to float
  %177 = select i1 %172, float %176, float %174
  %178 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %4, i64 0, i32 3
  %179 = load i8, i8* %178, align 2, !range !3
  %180 = icmp eq i8 %179, 0
  %181 = bitcast %"class.blink::Length"* %4 to float*
  %182 = load float, float* %181, align 4
  %183 = bitcast float %182 to i32
  %184 = sitofp i32 %183 to float
  %185 = select i1 %180, float %184, float %182
  %186 = fcmp oeq float %177, %185
  br i1 %186, label %189, label %187

187:                                              ; preds = %169
  %188 = call zeroext i1 @_ZNK5blink6Length17IsCalculatedEqualERKS0_(%"class.blink::Length"* nonnull %3, %"class.blink::Length"* nonnull dereferenceable(8) %4) #11
  br i1 %188, label %189, label %202

189:                                              ; preds = %167, %169, %187
  %190 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %115, i64 0, i32 0, i32 9
  %191 = bitcast [20 x i8]* %190 to i160*
  %192 = load i160, i160* %191, align 8
  %193 = and i160 %192, 276701161105643274240
  %194 = icmp eq i160 %193, 0
  %195 = or i1 %128, %194
  br i1 %195, label %196, label %202

196:                                              ; preds = %189
  %197 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 9
  %198 = bitcast [20 x i8]* %197 to i160*
  %199 = load i160, i160* %198, align 8
  %200 = and i160 %199, 276701161105643274240
  %201 = icmp eq i160 %200, 0
  br label %202

202:                                              ; preds = %187, %189, %196, %161
  %203 = phi i1 [ false, %161 ], [ %201, %196 ], [ false, %187 ], [ false, %189 ]
  %204 = load i8, i8* %158, align 1
  br label %205

205:                                              ; preds = %202, %153
  %206 = phi i8 [ %204, %202 ], [ %159, %153 ]
  %207 = phi i1 [ %203, %202 ], [ false, %153 ]
  %208 = icmp eq i8 %206, 8
  br i1 %208, label %209, label %210

209:                                              ; preds = %205
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %4) #11
  br label %210

210:                                              ; preds = %209, %205
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %155) #11
  %211 = load i8, i8* %156, align 1
  %212 = icmp eq i8 %211, 8
  br i1 %212, label %213, label %214

213:                                              ; preds = %210
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %3) #11
  br label %214

214:                                              ; preds = %210, %213
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %154) #11
  %215 = xor i1 %207, true
  br label %216

216:                                              ; preds = %145, %214, %151
  %217 = phi i1 [ false, %145 ], [ true, %151 ], [ %215, %214 ]
  %218 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 1, i32 0, i32 0
  %219 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %218, align 8
  %220 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %219, i64 0, i32 23
  %221 = bitcast [5 x i8]* %220 to i40*
  %222 = load i40, i40* %221, align 8
  %223 = and i40 %222, 4294967296
  %224 = icmp eq i40 %223, 0
  br i1 %224, label %225, label %354

225:                                              ; preds = %216
  %226 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %123) #11
  %227 = icmp ne i32 %226, 0
  %228 = or i1 %217, %227
  br i1 %228, label %354, label %369

229:                                              ; preds = %135
  br i1 %143, label %354, label %230

230:                                              ; preds = %229
  %231 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 1, i32 4
  %232 = bitcast %"class.blink::LineLayoutItem"* %231 to i32*
  %233 = load i32, i32* %232, align 8
  %234 = and i32 %233, 16
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %354, label %236

236:                                              ; preds = %230
  %237 = call zeroext i1 @_ZNK5blink13ComputedStyle35HasIdenticalAscentDescentAndLineGapERKS0_(%"class.blink::ComputedStyle"* %115, %"class.blink::ComputedStyle"* dereferenceable(104) %123) #11
  br i1 %237, label %238, label %354

238:                                              ; preds = %236
  %239 = bitcast %"class.blink::Length"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %239) #11
  call void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* nonnull sret %5, %"class.blink::ComputedStyle"* %115) #11
  %240 = bitcast %"class.blink::Length"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %240) #11
  call void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* nonnull sret %6, %"class.blink::ComputedStyle"* %123) #11
  %241 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %5, i64 0, i32 2
  %242 = load i8, i8* %241, align 1
  %243 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %6, i64 0, i32 2
  %244 = load i8, i8* %243, align 1
  %245 = icmp eq i8 %242, %244
  br i1 %245, label %246, label %290

246:                                              ; preds = %238
  %247 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %5, i64 0, i32 1
  %248 = load i8, i8* %247, align 4, !range !3
  %249 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %6, i64 0, i32 1
  %250 = load i8, i8* %249, align 4, !range !3
  %251 = icmp eq i8 %248, %250
  br i1 %251, label %252, label %287

252:                                              ; preds = %246
  %253 = icmp eq i8 %242, 12
  br i1 %253, label %274, label %254

254:                                              ; preds = %252
  %255 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %5, i64 0, i32 3
  %256 = load i8, i8* %255, align 2, !range !3
  %257 = icmp eq i8 %256, 0
  %258 = bitcast %"class.blink::Length"* %5 to float*
  %259 = load float, float* %258, align 4
  %260 = bitcast float %259 to i32
  %261 = sitofp i32 %260 to float
  %262 = select i1 %257, float %261, float %259
  %263 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %6, i64 0, i32 3
  %264 = load i8, i8* %263, align 2, !range !3
  %265 = icmp eq i8 %264, 0
  %266 = bitcast %"class.blink::Length"* %6 to float*
  %267 = load float, float* %266, align 4
  %268 = bitcast float %267 to i32
  %269 = sitofp i32 %268 to float
  %270 = select i1 %265, float %269, float %267
  %271 = fcmp oeq float %262, %270
  br i1 %271, label %274, label %272

272:                                              ; preds = %254
  %273 = call zeroext i1 @_ZNK5blink6Length17IsCalculatedEqualERKS0_(%"class.blink::Length"* nonnull %5, %"class.blink::Length"* nonnull dereferenceable(8) %6) #11
  br i1 %273, label %274, label %287

274:                                              ; preds = %252, %254, %272
  %275 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %115, i64 0, i32 0, i32 9
  %276 = bitcast [20 x i8]* %275 to i160*
  %277 = load i160, i160* %276, align 8
  %278 = and i160 %277, 276701161105643274240
  %279 = icmp eq i160 %278, 0
  %280 = or i1 %128, %279
  br i1 %280, label %281, label %287

281:                                              ; preds = %274
  %282 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 9
  %283 = bitcast [20 x i8]* %282 to i160*
  %284 = load i160, i160* %283, align 8
  %285 = and i160 %284, 276701161105643274240
  %286 = icmp eq i160 %285, 0
  br label %287

287:                                              ; preds = %272, %274, %281, %246
  %288 = phi i1 [ false, %246 ], [ %286, %281 ], [ false, %272 ], [ false, %274 ]
  %289 = load i8, i8* %243, align 1
  br label %290

290:                                              ; preds = %287, %238
  %291 = phi i8 [ %289, %287 ], [ %244, %238 ]
  %292 = phi i1 [ %288, %287 ], [ false, %238 ]
  %293 = icmp eq i8 %291, 8
  br i1 %293, label %294, label %295

294:                                              ; preds = %290
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %6) #11
  br label %295

295:                                              ; preds = %294, %290
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #11
  %296 = load i8, i8* %241, align 1
  %297 = icmp eq i8 %296, 8
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %5) #11
  br label %299

299:                                              ; preds = %295, %298
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239) #11
  br i1 %292, label %300, label %354

300:                                              ; preds = %299
  %301 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 7, i32 0, i32 0
  %302 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %301, align 8
  %303 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %302, i64 0, i32 27
  %304 = load i16, i16* %303, align 8
  %305 = and i16 %304, 224
  %306 = icmp eq i16 %305, 0
  br i1 %306, label %314, label %307

307:                                              ; preds = %300
  %308 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %302, i64 0, i32 24, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = icmp ne i32 %309, 0
  %311 = and i16 %304, 240
  %312 = icmp ne i16 %311, 0
  %313 = and i1 %312, %310
  br i1 %313, label %354, label %314

314:                                              ; preds = %307, %300
  %315 = and i16 %304, 3584
  %316 = icmp eq i16 %315, 0
  br i1 %316, label %324, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %302, i64 0, i32 25, i32 0
  %319 = load i32, i32* %318, align 4
  %320 = icmp ne i32 %319, 0
  %321 = and i16 %304, 3840
  %322 = icmp ne i16 %321, 0
  %323 = and i1 %322, %320
  br i1 %323, label %354, label %324

324:                                              ; preds = %317, %314
  %325 = icmp ult i16 %304, 8192
  br i1 %325, label %330, label %326

326:                                              ; preds = %324
  %327 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %302, i64 0, i32 26, i32 0
  %328 = load i32, i32* %327, align 4
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %354

330:                                              ; preds = %326, %324
  %331 = and i16 %304, 14
  %332 = icmp eq i16 %331, 0
  br i1 %332, label %340, label %333

333:                                              ; preds = %330
  %334 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %302, i64 0, i32 23, i32 0
  %335 = load i32, i32* %334, align 4
  %336 = icmp ne i32 %335, 0
  %337 = and i16 %304, 15
  %338 = icmp ne i16 %337, 0
  %339 = and i1 %338, %336
  br i1 %339, label %354, label %340

340:                                              ; preds = %333, %330
  %341 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 9
  %342 = bitcast [20 x i8]* %341 to i160*
  %343 = load i160, i160* %342, align 8
  %344 = and i160 %343, 89202980794122492566142873090593446023921664
  %345 = icmp eq i160 %344, 0
  br i1 %345, label %346, label %354

346:                                              ; preds = %340
  %347 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %123, i64 0, i32 0, i32 1, i32 0, i32 0
  %348 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %347, align 8
  %349 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %348, i64 0, i32 23
  %350 = bitcast [5 x i8]* %349 to i40*
  %351 = load i40, i40* %350, align 8
  %352 = and i40 %351, 4294967296
  %353 = icmp eq i40 %352, 0
  br i1 %353, label %369, label %354

354:                                              ; preds = %216, %346, %340, %230, %106, %333, %317, %307, %326, %236, %225, %299, %229
  %355 = load i32, i32* %94, align 8
  br label %356

356:                                              ; preds = %364, %354
  %357 = phi i32 [ %355, %354 ], [ %366, %364 ]
  %358 = phi %"class.blink::InlineFlowBox"* [ %0, %354 ], [ %362, %364 ]
  %359 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %358, i64 0, i32 6
  %360 = and i32 %357, -17
  store i32 %360, i32* %359, align 8
  %361 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %358, i64 0, i32 0, i32 3
  %362 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %361, align 8
  %363 = icmp eq %"class.blink::InlineFlowBox"* %362, null
  br i1 %363, label %369, label %364

364:                                              ; preds = %356
  %365 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %362, i64 0, i32 6
  %366 = load i32, i32* %365, align 8
  %367 = and i32 %366, 16
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %369, label %356

369:                                              ; preds = %364, %356, %346, %93, %225, %98
  %370 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %371 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %370, align 8
  %372 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %371, i64 0, i32 4
  %373 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %372 to i96*
  %374 = load i96, i96* %373, align 4
  %375 = and i96 %374, 113336795588871485128704
  %376 = icmp eq i96 %375, 75557863725914323419136
  br i1 %376, label %549, label %377

377:                                              ; preds = %369
  %378 = load i32, i32* %33, align 4
  %379 = and i32 %378, 131072
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %416, label %381

381:                                              ; preds = %377
  %382 = bitcast %"class.blink::LineLayoutItem"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %382) #11
  %383 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %9, i64 0, i32 0
  store %"class.blink::LayoutObject"* %371, %"class.blink::LayoutObject"** %383, align 8
  %384 = load i32, i32* %30, align 4
  %385 = and i32 %384, 1
  %386 = icmp ne i32 %385, 0
  %387 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %9, i1 zeroext %386)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %382) #11
  %388 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %387, i64 0, i32 0, i32 0, i32 0, i32 0
  %389 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %388, align 8
  %390 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %389, i64 0, i32 1, i32 0, i32 0
  %391 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %390, align 8
  %392 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %391, i64 0, i32 1, i32 0, i32 8
  %393 = load float, float* %392, align 8
  %394 = fcmp olt float %393, 0.000000e+00
  br i1 %394, label %415, label %395

395:                                              ; preds = %381
  %396 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %387, i64 0, i32 0, i32 1, i32 0, i32 0
  %397 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %396, align 8
  %398 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %397, i64 0, i32 8, i32 0
  %399 = load %"class.blink::ShadowList"*, %"class.blink::ShadowList"** %398, align 8
  %400 = icmp eq %"class.blink::ShadowList"* %399, null
  br i1 %400, label %401, label %415

401:                                              ; preds = %395
  %402 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %387) #11
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %415

404:                                              ; preds = %401
  %405 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %396, align 8
  %406 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %405, i64 0, i32 16
  %407 = load float, float* %406, align 8
  %408 = fcmp une float %407, 0.000000e+00
  br i1 %408, label %415, label %409

409:                                              ; preds = %404
  %410 = bitcast %"class.blink::InlineBox"* %1 to i1 (%"class.blink::InlineBox"*)***
  %411 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %410, align 8
  %412 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %411, i64 9
  %413 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %412, align 8
  %414 = call zeroext i1 %413(%"class.blink::InlineBox"* %1) #11
  br i1 %414, label %415, label %534

415:                                              ; preds = %401, %395, %409, %404, %381
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %1) #11
  br label %534

416:                                              ; preds = %377
  %417 = and i96 %374, 1073741824
  %418 = icmp eq i96 %417, 0
  br i1 %418, label %436, label %419

419:                                              ; preds = %416
  %420 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %371, i64 2
  %421 = bitcast %"class.blink::LayoutObject"* %420 to %"struct.blink::BoxOverflowModel"**
  %422 = load %"struct.blink::BoxOverflowModel"*, %"struct.blink::BoxOverflowModel"** %421, align 8
  %423 = icmp eq %"struct.blink::BoxOverflowModel"* %422, null
  br i1 %423, label %432, label %424

424:                                              ; preds = %419
  %425 = getelementptr inbounds %"struct.blink::BoxOverflowModel", %"struct.blink::BoxOverflowModel"* %422, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %426 = load i8, i8* %425, align 4, !range !3
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %428, label %435

428:                                              ; preds = %424
  %429 = getelementptr inbounds %"struct.blink::BoxOverflowModel", %"struct.blink::BoxOverflowModel"* %422, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %430 = load i8, i8* %429, align 4, !range !3
  %431 = icmp eq i8 %430, 0
  br i1 %431, label %432, label %435

432:                                              ; preds = %428, %419
  %433 = bitcast %"class.blink::LayoutObject"* %371 to %"class.blink::LayoutBoxModelObject"*
  %434 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %433) #11
  br i1 %434, label %435, label %534

435:                                              ; preds = %428, %424, %432
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %1) #11
  br label %534

436:                                              ; preds = %416
  %437 = bitcast %"class.blink::LayoutObject"* %371 to i1 (%"class.blink::LayoutObject"*, i32)***
  %438 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %437, align 8
  %439 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %438, i64 92
  %440 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %439, align 8
  %441 = call zeroext i1 %440(%"class.blink::LayoutObject"* %371, i32 0) #11
  %442 = bitcast %"class.blink::LineLayoutItem"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %442) #11
  %443 = bitcast %"class.blink::LineLayoutItem"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %443) #11
  %444 = bitcast %"class.blink::LineLayoutItem"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %444) #11
  br i1 %441, label %533, label %445

445:                                              ; preds = %436
  %446 = bitcast %"class.blink::LayoutObject"** %370 to i64*
  %447 = load i64, i64* %446, align 8
  %448 = bitcast %"class.blink::LineLayoutItem"* %10 to i64*
  store i64 %447, i64* %448, align 8
  %449 = load i32, i32* %30, align 4
  %450 = and i32 %449, 1
  %451 = icmp ne i32 %450, 0
  %452 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %10, i1 zeroext %451)
  %453 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %452, i64 0, i32 0, i32 3, i32 0, i32 0
  %454 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"** %453, align 8
  %455 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* %454, i64 0, i32 5, i32 0
  %456 = load %"class.blink::ShadowList"*, %"class.blink::ShadowList"** %455, align 8
  %457 = icmp eq %"class.blink::ShadowList"* %456, null
  br i1 %457, label %458, label %531

458:                                              ; preds = %445
  %459 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %370, align 8
  %460 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %459, i64 0, i32 4
  %461 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %460 to i96*
  %462 = load i96, i96* %461, align 4
  %463 = and i96 %462, 33554432
  %464 = icmp eq i96 %463, 0
  %465 = bitcast %"class.blink::LayoutObject"* %459 to %"class.blink::LayoutBoxModelObject"*
  %466 = select i1 %464, %"class.blink::LayoutBoxModelObject"* %465, %"class.blink::LayoutBoxModelObject"* null
  %467 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %466) #11
  br i1 %467, label %531, label %468

468:                                              ; preds = %458
  %469 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %370, align 8
  %470 = bitcast %"class.blink::LayoutObject"* %469 to i1 (%"class.blink::LayoutObject"*, i32)***
  %471 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %470, align 8
  %472 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %471, i64 92
  %473 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %472, align 8
  %474 = call zeroext i1 %473(%"class.blink::LayoutObject"* %469, i32 15) #11
  br i1 %474, label %485, label %475

475:                                              ; preds = %468
  %476 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %470, align 8
  %477 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %476, i64 92
  %478 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %477, align 8
  %479 = call zeroext i1 %478(%"class.blink::LayoutObject"* %469, i32 13) #11
  br i1 %479, label %485, label %480

480:                                              ; preds = %475
  %481 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %470, align 8
  %482 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %481, i64 92
  %483 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %482, align 8
  %484 = call zeroext i1 %483(%"class.blink::LayoutObject"* %469, i32 36) #11
  br i1 %484, label %485, label %488

485:                                              ; preds = %468, %475, %480
  %486 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %370, align 8
  %487 = call zeroext i1 @_ZNK5blink12LayoutObject18IsInsideListMarkerEv(%"class.blink::LayoutObject"* %486) #11
  br i1 %487, label %488, label %531

488:                                              ; preds = %485, %480
  %489 = load i64, i64* %446, align 8
  %490 = bitcast %"class.blink::LineLayoutItem"* %11 to i64*
  store i64 %489, i64* %490, align 8
  %491 = load i32, i32* %30, align 4
  %492 = and i32 %491, 1
  %493 = icmp ne i32 %492, 0
  %494 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %11, i1 zeroext %493)
  %495 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %494, i64 0, i32 0, i32 7, i32 0, i32 0
  %496 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %495, align 8
  %497 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %496, i64 0, i32 2, i32 0, i32 0, i32 0
  %498 = load %"class.blink::NinePieceImageData"*, %"class.blink::NinePieceImageData"** %497, align 8
  %499 = getelementptr inbounds %"class.blink::NinePieceImageData", %"class.blink::NinePieceImageData"* %498, i64 0, i32 2, i32 0, i32 0
  %500 = load %"class.blink::StyleImage"*, %"class.blink::StyleImage"** %499, align 8
  %501 = icmp eq %"class.blink::StyleImage"* %500, null
  br i1 %501, label %505, label %502

502:                                              ; preds = %488
  %503 = getelementptr inbounds %"class.blink::NinePieceImageData", %"class.blink::NinePieceImageData"* %498, i64 0, i32 5
  %504 = call zeroext i1 @_ZNK5blink20BorderImageLengthBox7NonZeroEv(%"class.blink::BorderImageLengthBox"* %503) #11
  br i1 %504, label %531, label %505

505:                                              ; preds = %488, %502
  %506 = load i64, i64* %446, align 8
  %507 = bitcast %"class.blink::LineLayoutItem"* %12 to i64*
  store i64 %506, i64* %507, align 8
  %508 = load i32, i32* %30, align 4
  %509 = and i32 %508, 1
  %510 = icmp ne i32 %509, 0
  %511 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %12, i1 zeroext %510)
  %512 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %511, i64 0, i32 0, i32 3, i32 0, i32 0
  %513 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"** %512, align 8
  %514 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* %513, i64 0, i32 2, i32 0, i32 0
  %515 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"** %514, align 8
  %516 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* %515, i64 0, i32 13
  %517 = bitcast [3 x i8]* %516 to i24*
  %518 = load i24, i24* %517, align 8
  %519 = and i24 %518, 1920
  %520 = icmp eq i24 %519, 0
  br i1 %520, label %527, label %521

521:                                              ; preds = %505
  %522 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* %515, i64 0, i32 8, i32 0
  %523 = load i32, i32* %522, align 4
  %524 = sitofp i32 %523 to float
  %525 = fmul float %524, 1.562500e-02
  %526 = fcmp ogt float %525, 0.000000e+00
  br i1 %526, label %528, label %527

527:                                              ; preds = %521, %505
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %444) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %443) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %442) #11
  br label %534

528:                                              ; preds = %521
  %529 = and i24 %518, 1792
  %530 = icmp eq i24 %529, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %444) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %443) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %442) #11
  br i1 %530, label %534, label %532

531:                                              ; preds = %445, %458, %485, %502
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %444) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %443) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %442) #11
  br label %532

532:                                              ; preds = %531, %528
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %1) #11
  br label %534

533:                                              ; preds = %436
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %444) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %443) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %442) #11
  br label %534

534:                                              ; preds = %528, %527, %432, %435, %533, %409, %415, %532
  %535 = load i32, i32* %30, align 4
  %536 = and i32 %535, 16384
  %537 = icmp eq i32 %536, 0
  br i1 %537, label %549, label %538

538:                                              ; preds = %534
  %539 = bitcast %"class.blink::InlineBox"* %1 to i1 (%"class.blink::InlineBox"*)***
  %540 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %539, align 8
  %541 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %540, i64 14
  %542 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %541, align 8
  %543 = call zeroext i1 %542(%"class.blink::InlineBox"* %1) #11
  br i1 %543, label %544, label %549

544:                                              ; preds = %538
  %545 = load i32, i32* %33, align 4
  %546 = and i32 %545, 16384
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %549

548:                                              ; preds = %544
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %29) #11
  br label %549

549:                                              ; preds = %544, %534, %369, %538, %548
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"*, i1 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %0, i64 0, i32 0
  %5 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %4, align 8
  br i1 %1, label %6, label %41

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 6, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %6, %10
  %11 = phi %"class.blink::LayoutObject"* [ %13, %10 ], [ %5, %6 ]
  %12 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 7
  %13 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %13, i64 0, i32 6, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %10, label %17

17:                                               ; preds = %10, %6
  %18 = phi %"class.blink::Node"* [ %8, %6 ], [ %15, %10 ]
  %19 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 3, i32 0, i32 0
  %20 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %20, i64 0, i32 2, i32 0, i32 0
  %22 = load %"class.blink::Document"*, %"class.blink::Document"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %22, i64 0, i32 59, i32 0, i32 0
  %24 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::StyleEngine", %"class.blink::StyleEngine"* %24, i64 0, i32 31, i32 0, i32 0
  %26 = load %"class.blink::CSSGlobalRuleSet"*, %"class.blink::CSSGlobalRuleSet"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 11
  %28 = load i8, i8* %27, align 8
  %29 = and i8 %28, 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %17
  %32 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #11
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %34

34:                                               ; preds = %31, %17
  %35 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 0, i32 0
  %36 = load i8, i8* %35, align 8, !range !3
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %34
  %39 = call %"class.blink::ComputedStyle"* @_ZNK5blink12LayoutObject29FirstLineStyleWithoutFallbackEv(%"class.blink::LayoutObject"* %5) #11
  %40 = icmp eq %"class.blink::ComputedStyle"* %39, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %2, %34, %38
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 5, i32 0
  %43 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %42, align 8
  br label %44

44:                                               ; preds = %41, %38
  %45 = phi %"class.blink::ComputedStyle"* [ %39, %38 ], [ %43, %41 ]
  ret %"class.blink::ComputedStyle"* %45
}

declare i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

declare void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"*, i1 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %0, i64 0, i32 0
  %5 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %4, align 8
  br i1 %1, label %6, label %41

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 6, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %6, %10
  %11 = phi %"class.blink::LayoutObject"* [ %13, %10 ], [ %5, %6 ]
  %12 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 7
  %13 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %13, i64 0, i32 6, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %10, label %17

17:                                               ; preds = %10, %6
  %18 = phi %"class.blink::Node"* [ %8, %6 ], [ %15, %10 ]
  %19 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 3, i32 0, i32 0
  %20 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %20, i64 0, i32 2, i32 0, i32 0
  %22 = load %"class.blink::Document"*, %"class.blink::Document"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %22, i64 0, i32 59, i32 0, i32 0
  %24 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::StyleEngine", %"class.blink::StyleEngine"* %24, i64 0, i32 31, i32 0, i32 0
  %26 = load %"class.blink::CSSGlobalRuleSet"*, %"class.blink::CSSGlobalRuleSet"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 11
  %28 = load i8, i8* %27, align 8
  %29 = and i8 %28, 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %17
  %32 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #11
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %34

34:                                               ; preds = %31, %17
  %35 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 0, i32 0
  %36 = load i8, i8* %35, align 8, !range !3
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %34
  %39 = call %"class.blink::ComputedStyle"* @_ZNK5blink12LayoutObject29FirstLineStyleWithoutFallbackEv(%"class.blink::LayoutObject"* %5) #11
  %40 = icmp eq %"class.blink::ComputedStyle"* %39, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %2, %34, %38
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 5, i32 0
  %43 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %42, align 8
  br label %44

44:                                               ; preds = %41, %38
  %45 = phi %"class.blink::ComputedStyle"* [ %39, %38 ], [ %43, %41 ]
  ret %"class.blink::ComputedStyle"* %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox11RemoveChildEPNS_9InlineBoxENS_13MarkLineBoxesE(%"class.blink::InlineFlowBox"*, %"class.blink::InlineBox"*, i32) local_unnamed_addr #1 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %5, label %16

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 256
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %12 = bitcast %"class.blink::InlineFlowBox"* %0 to void (%"class.blink::InlineBox"*)***
  %13 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %13, i64 29
  %15 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %14, align 8
  tail call void %15(%"class.blink::InlineBox"* %11) #11
  br label %16

16:                                               ; preds = %5, %10, %3
  %17 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %18 = tail call dereferenceable(160) %"class.blink::RootInlineBox"* @_ZN5blink9InlineBox4RootEv(%"class.blink::InlineBox"* %17) #11
  tail call void @_ZN5blink13RootInlineBox12ChildRemovedEPNS_9InlineBoxE(%"class.blink::RootInlineBox"* %18, %"class.blink::InlineBox"* %1) #11
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %20 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %19, align 8
  %21 = icmp eq %"class.blink::InlineBox"* %20, %1
  br i1 %21, label %22, label %27

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 1
  %24 = bitcast %"class.blink::InlineBox"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.blink::InlineBox"** %19 to i64*
  store i64 %25, i64* %26, align 8
  br label %27

27:                                               ; preds = %22, %16
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  %29 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %28, align 8
  %30 = icmp eq %"class.blink::InlineBox"* %29, %1
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 2
  %33 = bitcast %"class.blink::InlineBox"** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.blink::InlineBox"** %28 to i64*
  store i64 %34, i64* %35, align 8
  br label %36

36:                                               ; preds = %31, %27
  %37 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 1
  %38 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %37, align 8
  %39 = icmp eq %"class.blink::InlineBox"* %38, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 2
  %42 = bitcast %"class.blink::InlineBox"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %38, i64 0, i32 2
  %45 = bitcast %"class.blink::InlineBox"** %44 to i64*
  store i64 %43, i64* %45, align 8
  br label %46

46:                                               ; preds = %36, %40
  %47 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 2
  %48 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %47, align 8
  %49 = icmp eq %"class.blink::InlineBox"* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = bitcast %"class.blink::InlineBox"** %37 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 1
  %54 = bitcast %"class.blink::InlineBox"** %53 to i64*
  store i64 %52, i64* %54, align 8
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 3
  store %"class.blink::InlineFlowBox"* null, %"class.blink::InlineFlowBox"** %56, align 8
  ret void
}

declare dereferenceable(160) %"class.blink::RootInlineBox"* @_ZN5blink9InlineBox4RootEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

declare void @_ZN5blink13RootInlineBox12ChildRemovedEPNS_9InlineBoxE(%"class.blink::RootInlineBox"*, %"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox10DeleteLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %3 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %2, align 8
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %14, label %5

5:                                                ; preds = %1, %5
  %6 = phi %"class.blink::InlineBox"* [ %9, %5 ], [ %3, %1 ]
  %7 = bitcast %"class.blink::InlineBox"* %6 to void (%"class.blink::InlineBox"*)***
  %8 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %6, i64 0, i32 1
  %9 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %8, align 8
  %10 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %7, align 8
  %11 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %10, i64 6
  %12 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %11, align 8
  tail call void %12(%"class.blink::InlineBox"* nonnull %6) #11
  %13 = icmp eq %"class.blink::InlineBox"* %9, null
  br i1 %13, label %14, label %5

14:                                               ; preds = %5, %1
  %15 = bitcast %"class.blink::InlineFlowBox"* %0 to void (%"class.blink::InlineFlowBox"*)***
  %16 = load void (%"class.blink::InlineFlowBox"*)**, void (%"class.blink::InlineFlowBox"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %16, i64 35
  %18 = load void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %17, align 8
  tail call void %18(%"class.blink::InlineFlowBox"* %0) #11
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %20 = bitcast %"class.blink::InlineFlowBox"* %0 to void (%"class.blink::InlineBox"*)***
  %21 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %21, i64 5
  %23 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %22, align 8
  tail call void %23(%"class.blink::InlineBox"* %19) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox29RemoveLineBoxFromLayoutObjectEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::InlineFlowBox"* %0 to %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)***
  %3 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)**, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %3, i64 36
  %5 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %4, align 8
  %6 = tail call %"class.blink::LineBoxList"* %5(%"class.blink::InlineFlowBox"* %0) #11
  %7 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %6, i64 0, i32 0
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13RemoveLineBoxEPS1_(%"class.blink::InlineBoxList"* %7, %"class.blink::InlineFlowBox"* %0) #11
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13RemoveLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox11ExtractLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = bitcast %"class.blink::InlineFlowBox"* %0 to void (%"class.blink::InlineFlowBox"*)***
  %8 = load void (%"class.blink::InlineFlowBox"*)**, void (%"class.blink::InlineFlowBox"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %8, i64 33
  %10 = load void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %9, align 8
  tail call void %10(%"class.blink::InlineFlowBox"* %0) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %13 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %12, align 8
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %16, %11
  ret void

16:                                               ; preds = %11, %16
  %17 = phi %"class.blink::InlineBox"* [ %23, %16 ], [ %13, %11 ]
  %18 = bitcast %"class.blink::InlineBox"* %17 to void (%"class.blink::InlineBox"*)***
  %19 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %19, i64 7
  %21 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %20, align 8
  tail call void %21(%"class.blink::InlineBox"* nonnull %17) #11
  %22 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %17, i64 0, i32 1
  %23 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %22, align 8
  %24 = icmp eq %"class.blink::InlineBox"* %23, null
  br i1 %24, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox30ExtractLineBoxFromLayoutObjectEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::InlineFlowBox"* %0 to %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)***
  %3 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)**, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %3, i64 36
  %5 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %4, align 8
  %6 = tail call %"class.blink::LineBoxList"* %5(%"class.blink::InlineFlowBox"* %0) #11
  %7 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %6, i64 0, i32 0
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE14ExtractLineBoxEPS1_(%"class.blink::InlineBoxList"* %7, %"class.blink::InlineFlowBox"* %0) #11
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE14ExtractLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox10AttachLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.blink::InlineFlowBox"* %0 to void (%"class.blink::InlineFlowBox"*)***
  %8 = load void (%"class.blink::InlineFlowBox"*)**, void (%"class.blink::InlineFlowBox"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %8, i64 34
  %10 = load void (%"class.blink::InlineFlowBox"*)*, void (%"class.blink::InlineFlowBox"*)** %9, align 8
  tail call void %10(%"class.blink::InlineFlowBox"* %0) #11
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %13 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %12, align 8
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %16, %11
  ret void

16:                                               ; preds = %11, %16
  %17 = phi %"class.blink::InlineBox"* [ %23, %16 ], [ %13, %11 ]
  %18 = bitcast %"class.blink::InlineBox"* %17 to void (%"class.blink::InlineBox"*)***
  %19 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %19, i64 8
  %21 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %20, align 8
  tail call void %21(%"class.blink::InlineBox"* nonnull %17) #11
  %22 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %17, i64 0, i32 1
  %23 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %22, align 8
  %24 = icmp eq %"class.blink::InlineBox"* %23, null
  br i1 %24, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox27AttachLineBoxToLayoutObjectEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::InlineFlowBox"* %0 to %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)***
  %3 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)**, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %3, i64 36
  %5 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %4, align 8
  %6 = tail call %"class.blink::LineBoxList"* %5(%"class.blink::InlineFlowBox"* %0) #11
  %7 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %6, i64 0, i32 0
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13AttachLineBoxEPS1_(%"class.blink::InlineBoxList"* %7, %"class.blink::InlineFlowBox"* %0) #11
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13AttachLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  tail call void @_ZN5blink9InlineBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineBox"* %3, %"class.blink::LayoutSize"* dereferenceable(8) %1) #11
  %4 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %5 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %4, align 8
  %6 = icmp eq %"class.blink::InlineBox"* %5, null
  br i1 %6, label %7, label %15

7:                                                ; preds = %29, %2
  %8 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %8, align 8
  %10 = icmp eq %"struct.blink::SimpleOverflowModel"* %9, null
  br i1 %10, label %82, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 4, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %56, label %33

15:                                               ; preds = %2, %29
  %16 = phi %"class.blink::InlineBox"* [ %31, %29 ], [ %5, %2 ]
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %16, i64 0, i32 4, i32 0
  %18 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %18, i64 0, i32 4
  %20 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %19 to i96*
  %21 = load i96, i96* %20, align 4
  %22 = and i96 %21, 113336795588871485128704
  %23 = icmp eq i96 %22, 75557863725914323419136
  br i1 %23, label %29, label %24

24:                                               ; preds = %15
  %25 = bitcast %"class.blink::InlineBox"* %16 to void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)***
  %26 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)**, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %26, i64 10
  %28 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %27, align 8
  tail call void %28(%"class.blink::InlineBox"* nonnull %16, %"class.blink::LayoutSize"* dereferenceable(8) %1) #11
  br label %29

29:                                               ; preds = %15, %24
  %30 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %16, i64 0, i32 1
  %31 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %30, align 8
  %32 = icmp eq %"class.blink::InlineBox"* %31, null
  br i1 %32, label %7, label %15

33:                                               ; preds = %11
  %34 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %35, 0
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %39, i32 %35) #11
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44, !prof !2
  store i32 %45, i32* %38, align 4
  %46 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %37, 0
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %47, i32 %37) #11
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  store i32 %53, i32* %46, align 4
  %54 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %8, align 8
  %55 = icmp eq %"struct.blink::SimpleOverflowModel"* %54, null
  br i1 %55, label %82, label %56

56:                                               ; preds = %11, %33
  %57 = phi %"struct.blink::SimpleOverflowModel"* [ %54, %33 ], [ %9, %11 ]
  %58 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %57, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %59 = load i8, i8* %58, align 4, !range !3
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %82, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 1, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %57, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %63, 0
  %69 = select i1 %68, i32 -2147483648, i32 2147483647
  %70 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %67, i32 %63) #11
  %71 = extractvalue { i32, i1 } %70, 1
  %72 = extractvalue { i32, i1 } %70, 0
  %73 = select i1 %71, i32 %69, i32 %72, !prof !2
  store i32 %73, i32* %66, align 4
  %74 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %57, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %65, 0
  %77 = select i1 %76, i32 -2147483648, i32 2147483647
  %78 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %75, i32 %65) #11
  %79 = extractvalue { i32, i1 } %78, 1
  %80 = extractvalue { i32, i1 } %78, 0
  %81 = select i1 %79, i32 %77, i32 %80, !prof !2
  store i32 %81, i32* %74, align 4
  br label %82

82:                                               ; preds = %56, %7, %33, %61
  ret void
}

declare void @_ZN5blink9InlineBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineBox"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::LineBoxList"* @_ZNK5blink13InlineFlowBox9LineBoxesEv(%"class.blink::InlineFlowBox"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %4 = bitcast %"class.blink::LayoutObject"** %3 to %"class.blink::LayoutInline"**
  %5 = load %"class.blink::LayoutInline"*, %"class.blink::LayoutInline"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::LayoutInline", %"class.blink::LayoutInline"* %5, i64 0, i32 0, i32 0, i32 4
  %7 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %6 to i96*
  %8 = load i96, i96* %7, align 4
  %9 = and i96 %8, 268435456
  %10 = icmp eq i96 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %1
  %12 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0), i32 469, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #11
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  br label %14

14:                                               ; preds = %1, %11
  %15 = getelementptr inbounds %"class.blink::LayoutInline", %"class.blink::LayoutInline"* %5, i64 0, i32 2, i32 0
  ret %"class.blink::LineBoxList"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox28DetermineSpacingForFlowBoxesEbbNS_14LineLayoutItemE(%"class.blink::InlineFlowBox"*, i1 zeroext, i1 zeroext, %"class.blink::LayoutObject"*) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %6 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %5, align 8
  %7 = icmp eq %"class.blink::InlineFlowBox"* %6, null
  br i1 %7, label %196, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %10 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %10, i64 0, i32 5, i32 0
  %12 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %12, i64 0, i32 0, i32 9
  %14 = bitcast [20 x i8]* %13 to i160*
  %15 = load i160, i160* %14, align 8
  %16 = and i160 %15, 41538374868278621028243970633760768
  %17 = icmp eq i160 %16, 0
  %18 = bitcast %"class.blink::InlineFlowBox"* %0 to %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)***
  %19 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)**, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %19, i64 36
  %21 = load %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)*, %"class.blink::LineBoxList"* (%"class.blink::InlineFlowBox"*)** %20, align 8
  %22 = tail call %"class.blink::LineBoxList"* %21(%"class.blink::InlineFlowBox"* %0) #11
  %23 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %22, i64 0, i32 0, i32 0
  %24 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %24, i64 0, i32 0, i32 7, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %80

29:                                               ; preds = %8
  %30 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %31 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %30, i64 0, i32 4
  %32 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %31 to i96*
  %33 = load i96, i96* %32, align 4
  %34 = and i96 %33, 16777216
  %35 = icmp eq i96 %34, 0
  br i1 %35, label %36, label %61

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %30, i64 0, i32 6, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %61, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %38, i64 0, i32 6, i32 0, i32 0
  br i1 %44, label %50, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.blink::NodeData"** %45 to %"class.blink::NodeRareData"**
  %48 = load %"class.blink::NodeRareData"*, %"class.blink::NodeRareData"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::NodeRareData", %"class.blink::NodeRareData"* %48, i64 0, i32 1, i32 0, i32 0
  br label %52

50:                                               ; preds = %40
  %51 = bitcast %"class.blink::NodeData"** %45 to %"class.blink::NodeRenderingData"**
  br label %52

52:                                               ; preds = %50, %46
  %53 = phi %"class.blink::NodeRenderingData"** [ %49, %46 ], [ %51, %50 ]
  %54 = load %"class.blink::NodeRenderingData"*, %"class.blink::NodeRenderingData"** %53, align 8
  %55 = getelementptr inbounds %"class.blink::NodeRenderingData", %"class.blink::NodeRenderingData"* %54, i64 0, i32 1
  %56 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %55, align 8
  %57 = icmp ne %"class.blink::LayoutObject"* %56, %30
  %58 = and i96 %33, 134217728
  %59 = icmp ne i96 %58, 0
  %60 = and i1 %59, %57
  br i1 %60, label %80, label %61

61:                                               ; preds = %52, %29, %36
  %62 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %30, i64 0, i32 5, i32 0
  %63 = bitcast %"class.blink::ComputedStyle"** %62 to %"class.blink::ComputedStyleBase"**
  %64 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %63, align 8
  %65 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %64, i64 0, i32 5, i32 0, i32 0
  %66 = load %"class.blink::ComputedStyleBase::StyleBoxData"*, %"class.blink::ComputedStyleBase::StyleBoxData"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleBoxData", %"class.blink::ComputedStyleBase::StyleBoxData"* %66, i64 0, i32 11
  %68 = load i8, i8* %67, align 4
  %69 = and i8 %68, 1
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %80, label %71

71:                                               ; preds = %61
  br i1 %17, label %72, label %75

72:                                               ; preds = %71
  %73 = icmp eq %"class.blink::InlineFlowBox"* %24, %0
  %74 = zext i1 %73 to i8
  br label %80

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %22, i64 0, i32 0, i32 1
  %77 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %76, align 8
  %78 = icmp eq %"class.blink::InlineFlowBox"* %77, %0
  %79 = zext i1 %78 to i8
  br label %80

80:                                               ; preds = %8, %52, %72, %75, %61
  %81 = phi i8 [ 1, %61 ], [ 0, %72 ], [ %79, %75 ], [ 0, %8 ], [ 0, %52 ]
  %82 = phi i8 [ 1, %61 ], [ %74, %72 ], [ 0, %75 ], [ 0, %8 ], [ 0, %52 ]
  %83 = getelementptr inbounds %"class.blink::LineBoxList", %"class.blink::LineBoxList"* %22, i64 0, i32 0, i32 1
  %84 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %84, i64 0, i32 0, i32 7, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %196

89:                                               ; preds = %80
  %90 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %91 = icmp eq %"class.blink::LayoutObject"* %3, null
  br i1 %91, label %154, label %92

92:                                               ; preds = %89, %107
  %93 = phi %"class.blink::LayoutObject"* [ %109, %107 ], [ %3, %89 ]
  %94 = bitcast %"class.blink::LayoutObject"* %93 to i1 (%"class.blink::LayoutObject"*)***
  %95 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %94, align 8
  %96 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %95, i64 23
  %97 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %96, align 8
  %98 = tail call zeroext i1 %97(%"class.blink::LayoutObject"* nonnull %93) #11
  br i1 %98, label %99, label %105

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %93, i64 0, i32 4
  %101 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %100 to i96*
  %102 = load i96, i96* %101, align 4
  %103 = and i96 %102, 134217728
  %104 = icmp eq i96 %103, 0
  br i1 %104, label %154, label %105

105:                                              ; preds = %99, %92
  %106 = icmp eq %"class.blink::LayoutObject"* %93, %90
  br i1 %106, label %111, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %93, i64 0, i32 7
  %109 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %108, align 8
  %110 = icmp eq %"class.blink::LayoutObject"* %109, null
  br i1 %110, label %154, label %92

111:                                              ; preds = %105
  %112 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %113 = icmp eq %"class.blink::LayoutObject"* %112, %3
  br i1 %113, label %152, label %114

114:                                              ; preds = %111
  %115 = ptrtoint %"class.blink::LayoutObject"* %3 to i64
  br label %116

116:                                              ; preds = %150, %114
  %117 = phi %"class.blink::LayoutObject"* [ %122, %150 ], [ %3, %114 ]
  %118 = phi i64 [ %121, %150 ], [ %115, %114 ]
  %119 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %117, i64 0, i32 7
  %120 = bitcast %"class.blink::LayoutObject"** %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = inttoptr i64 %121 to %"class.blink::LayoutObject"*
  %123 = icmp eq i64 %121, 0
  br i1 %123, label %152, label %124

124:                                              ; preds = %116
  %125 = inttoptr i64 %121 to i1 (%"class.blink::LayoutObject"*)***
  %126 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %125, align 8
  %127 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %126, i64 23
  %128 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %127, align 8
  %129 = tail call zeroext i1 %128(%"class.blink::LayoutObject"* nonnull %122) #11
  br i1 %129, label %130, label %136

130:                                              ; preds = %124
  %131 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %122, i64 0, i32 4
  %132 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %131 to i96*
  %133 = load i96, i96* %132, align 4
  %134 = and i96 %133, 134217728
  %135 = icmp eq i96 %134, 0
  br i1 %135, label %152, label %136

136:                                              ; preds = %130, %124
  %137 = inttoptr i64 %121 to %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)***
  %138 = load %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)**, %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)*** %137, align 8
  %139 = getelementptr inbounds %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)*, %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)** %138, i64 13
  %140 = load %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)*, %"class.blink::LayoutObjectChildList"* (%"class.blink::LayoutObject"*)** %139, align 8
  %141 = tail call %"class.blink::LayoutObjectChildList"* %140(%"class.blink::LayoutObject"* nonnull %122) #11
  %142 = icmp eq %"class.blink::LayoutObjectChildList"* %141, null
  br i1 %142, label %146, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds %"class.blink::LayoutObjectChildList", %"class.blink::LayoutObjectChildList"* %141, i64 0, i32 1
  %145 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %144, align 8
  br label %146

146:                                              ; preds = %143, %136
  %147 = phi %"class.blink::LayoutObject"* [ %145, %143 ], [ null, %136 ]
  %148 = inttoptr i64 %118 to %"class.blink::LayoutObject"*
  %149 = icmp eq %"class.blink::LayoutObject"* %147, %148
  br i1 %149, label %150, label %154

150:                                              ; preds = %146
  %151 = icmp eq %"class.blink::LayoutObject"* %112, %122
  br i1 %151, label %152, label %116

152:                                              ; preds = %130, %116, %150, %111
  %153 = xor i1 %2, true
  br label %154

154:                                              ; preds = %107, %99, %146, %89, %152
  %155 = phi i1 [ %153, %152 ], [ true, %89 ], [ false, %146 ], [ true, %99 ], [ true, %107 ]
  %156 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %157 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %156, i64 0, i32 5, i32 0
  %158 = bitcast %"class.blink::ComputedStyle"** %157 to %"class.blink::ComputedStyleBase"**
  %159 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %158, align 8
  %160 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %159, i64 0, i32 5, i32 0, i32 0
  %161 = load %"class.blink::ComputedStyleBase::StyleBoxData"*, %"class.blink::ComputedStyleBase::StyleBoxData"** %160, align 8
  %162 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleBoxData", %"class.blink::ComputedStyleBase::StyleBoxData"* %161, i64 0, i32 11
  %163 = load i8, i8* %162, align 4
  %164 = and i8 %163, 1
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %196, label %166

166:                                              ; preds = %154
  br i1 %17, label %167, label %178

167:                                              ; preds = %166
  %168 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 5
  %169 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %168, align 8
  %170 = icmp eq %"class.blink::InlineFlowBox"* %169, null
  %171 = or i1 %155, %1
  %172 = and i1 %171, %170
  br i1 %172, label %173, label %196

173:                                              ; preds = %167
  %174 = bitcast %"class.blink::LayoutObject"* %90 to %"class.blink::LayoutBoxModelObject"*
  %175 = tail call %"class.blink::LayoutBoxModelObject"* @_ZNK5blink20LayoutBoxModelObject12ContinuationEv(%"class.blink::LayoutBoxModelObject"* %174) #11
  %176 = icmp eq %"class.blink::LayoutBoxModelObject"* %175, null
  %177 = select i1 %176, i8 1, i8 %81
  br label %196

178:                                              ; preds = %166
  %179 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 4
  %180 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %179, align 8
  %181 = icmp eq %"class.blink::InlineFlowBox"* %180, null
  br i1 %181, label %189, label %182

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %180, i64 0, i32 0, i32 7, i32 0
  %184 = load i32, i32* %183, align 4
  %185 = and i32 %184, 2
  %186 = icmp ne i32 %185, 0
  %187 = or i1 %155, %1
  %188 = and i1 %187, %186
  br i1 %188, label %191, label %196

189:                                              ; preds = %178
  %190 = or i1 %155, %1
  br i1 %190, label %191, label %196

191:                                              ; preds = %182, %189
  %192 = bitcast %"class.blink::LayoutObject"* %90 to %"class.blink::LayoutBoxModelObject"*
  %193 = tail call %"class.blink::LayoutBoxModelObject"* @_ZNK5blink20LayoutBoxModelObject12ContinuationEv(%"class.blink::LayoutBoxModelObject"* %192) #11
  %194 = icmp eq %"class.blink::LayoutBoxModelObject"* %193, null
  %195 = select i1 %194, i8 1, i8 %82
  br label %196

196:                                              ; preds = %80, %182, %167, %154, %189, %173, %191, %4
  %197 = phi i8 [ 0, %4 ], [ %81, %80 ], [ %81, %167 ], [ %81, %182 ], [ 1, %154 ], [ %177, %173 ], [ %81, %189 ], [ %81, %191 ]
  %198 = phi i8 [ 0, %4 ], [ %82, %80 ], [ %82, %167 ], [ %82, %182 ], [ 1, %154 ], [ %82, %173 ], [ %82, %189 ], [ %195, %191 ]
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %201 = load i32, i32* %200, align 8
  %202 = and i32 %201, -4
  %203 = shl i8 %197, 1
  %204 = and i8 %203, 2
  %205 = or i8 %204, %199
  %206 = zext i8 %205 to i32
  %207 = or i32 %202, %206
  store i32 %207, i32* %200, align 8
  %208 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %209 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %208, align 8
  %210 = icmp eq %"class.blink::InlineBox"* %209, null
  br i1 %210, label %211, label %212

211:                                              ; preds = %221, %196
  ret void

212:                                              ; preds = %196, %221
  %213 = phi %"class.blink::InlineBox"* [ %223, %221 ], [ %209, %196 ]
  %214 = bitcast %"class.blink::InlineBox"* %213 to i1 (%"class.blink::InlineBox"*)***
  %215 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %214, align 8
  %216 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %215, i64 14
  %217 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %216, align 8
  %218 = tail call zeroext i1 %217(%"class.blink::InlineBox"* nonnull %213) #11
  br i1 %218, label %219, label %221

219:                                              ; preds = %212
  %220 = bitcast %"class.blink::InlineBox"* %213 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineFlowBox28DetermineSpacingForFlowBoxesEbbNS_14LineLayoutItemE(%"class.blink::InlineFlowBox"* nonnull %220, i1 zeroext %1, i1 zeroext %2, %"class.blink::LayoutObject"* %3)
  br label %221

221:                                              ; preds = %212, %219
  %222 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %213, i64 0, i32 1
  %223 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %222, align 8
  %224 = icmp eq %"class.blink::InlineBox"* %223, null
  br i1 %224, label %211, label %212
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13InlineFlowBox27PlaceBoxesInInlineDirectionENS_10LayoutUnitERb(%"class.blink::InlineFlowBox"*, i32, i8* nocapture dereferenceable(1)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.blink::LineLayoutItem", align 8
  %5 = alloca %"class.blink::LineLayoutItem", align 8
  %6 = alloca %"class.blink::LineLayoutItem", align 8
  %7 = alloca %"class.blink::LineLayoutItem", align 8
  %8 = alloca %"class.blink::LayoutUnit", align 4
  %9 = alloca %"class.blink::LayoutUnit", align 4
  %10 = alloca %"class.blink::LayoutUnit", align 4
  %11 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %8, i64 0, i32 0
  store i32 %1, i32* %11, align 4
  %12 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 2048
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %17 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %18 = select i1 %15, i32* %17, i32* %16
  store i32 %1, i32* %18, align 4
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %90, label %23

23:                                               ; preds = %3
  %24 = bitcast %"class.blink::LineLayoutItem"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #11
  %25 = bitcast %"class.blink::LineLayoutItem"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #11
  %26 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %27 = bitcast %"class.blink::LayoutObject"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  br i1 %15, label %43, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.blink::LineLayoutItem"* %6 to i64*
  store i64 %28, i64* %30, align 8
  %31 = and i32 %13, 1
  %32 = icmp ne i32 %31, 0
  %33 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %6, i1 zeroext %32) #11
  %34 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %33, i64 0, i32 0, i32 7, i32 0, i32 0
  %35 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %35, i64 0, i32 27
  %37 = load i16, i16* %36, align 8
  %38 = and i16 %37, 224
  %39 = icmp eq i16 %38, 0
  br i1 %39, label %56, label %40

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %35, i64 0, i32 24, i32 0
  %42 = load i32, i32* %41, align 4
  br label %56

43:                                               ; preds = %23
  %44 = bitcast %"class.blink::LineLayoutItem"* %7 to i64*
  store i64 %28, i64* %44, align 8
  %45 = and i32 %13, 1
  %46 = icmp ne i32 %45, 0
  %47 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %7, i1 zeroext %46) #11
  %48 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %47, i64 0, i32 0, i32 7, i32 0, i32 0
  %49 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %48, align 8
  %50 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %49, i64 0, i32 27
  %51 = load i16, i16* %50, align 8
  %52 = icmp ult i16 %51, 8192
  br i1 %52, label %56, label %53

53:                                               ; preds = %43
  %54 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %49, i64 0, i32 26, i32 0
  %55 = load i32, i32* %54, align 4
  br label %56

56:                                               ; preds = %29, %40, %43, %53
  %57 = phi i32 [ %42, %40 ], [ 0, %29 ], [ %55, %53 ], [ 0, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #11
  %58 = load i32, i32* %19, align 8
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %90, label %61

61:                                               ; preds = %56
  %62 = load i32, i32* %12, align 4
  %63 = and i32 %62, 2048
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %66 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %66, i64 0, i32 4
  %68 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %67 to i96*
  %69 = load i96, i96* %68, align 4
  %70 = and i96 %69, 33554432
  %71 = icmp eq i96 %70, 0
  %72 = bitcast %"class.blink::LayoutObject"* %66 to %"class.blink::LayoutBoxModelObject"*
  %73 = select i1 %71, %"class.blink::LayoutBoxModelObject"* %72, %"class.blink::LayoutBoxModelObject"* null
  %74 = bitcast %"class.blink::LayoutBoxModelObject"* %73 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %75 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %74, align 8
  br i1 %64, label %80, label %76

76:                                               ; preds = %61
  %77 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %75, i64 120
  %78 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %77, align 8
  %79 = call i32 %78(%"class.blink::LayoutBoxModelObject"* %73) #11
  br label %84

80:                                               ; preds = %61
  %81 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %75, i64 118
  %82 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %81, align 8
  %83 = call i32 %82(%"class.blink::LayoutBoxModelObject"* %73) #11
  br label %84

84:                                               ; preds = %76, %80
  %85 = phi i32 [ %79, %76 ], [ %83, %80 ]
  %86 = sdiv i32 %85, 64
  %87 = shl nsw i32 %86, 6
  %88 = icmp slt i32 %85, -63
  %89 = select i1 %88, i32 -2147483648, i32 2147483647
  br label %90

90:                                               ; preds = %3, %84, %56
  %91 = phi i32 [ %57, %56 ], [ %57, %84 ], [ 0, %3 ]
  %92 = phi i32 [ 0, %56 ], [ %87, %84 ], [ 0, %3 ]
  %93 = phi i32 [ 2147483647, %56 ], [ %89, %84 ], [ 2147483647, %3 ]
  %94 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %91, i32 %92) #11
  %95 = extractvalue { i32, i1 } %94, 1
  %96 = extractvalue { i32, i1 } %94, 0
  %97 = select i1 %95, i32 %93, i32 %96, !prof !2
  %98 = load i32, i32* %11, align 4
  %99 = icmp slt i32 %97, 0
  %100 = select i1 %99, i32 -2147483648, i32 2147483647
  %101 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %98, i32 %97) #11
  %102 = extractvalue { i32, i1 } %101, 1
  %103 = extractvalue { i32, i1 } %101, 0
  %104 = select i1 %102, i32 %100, i32 %103, !prof !2
  store i32 %104, i32* %11, align 4
  %105 = bitcast %"class.blink::LayoutUnit"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %105) #11
  %106 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  store i32 %1, i32* %106, align 4
  %107 = bitcast %"class.blink::LayoutUnit"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %107) #11
  %108 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %10, i64 0, i32 0
  store i32 %104, i32* %108, align 4
  %109 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %110 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %109, align 8
  call void @_ZN5blink13InlineFlowBox30PlaceBoxRangeInInlineDirectionEPNS_9InlineBoxES2_RNS_10LayoutUnitES4_S4_Rb(%"class.blink::InlineFlowBox"* %0, %"class.blink::InlineBox"* %110, %"class.blink::InlineBox"* null, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %8, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %9, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %10, i8* dereferenceable(1) %2)
  %111 = load i32, i32* %19, align 8
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %185, label %114

114:                                              ; preds = %90
  %115 = load i32, i32* %12, align 4
  %116 = and i32 %115, 2048
  %117 = icmp eq i32 %116, 0
  %118 = bitcast %"class.blink::LineLayoutItem"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118) #11
  %119 = bitcast %"class.blink::LineLayoutItem"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #11
  %120 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %121 = bitcast %"class.blink::LayoutObject"** %120 to i64*
  %122 = load i64, i64* %121, align 8
  br i1 %117, label %137, label %123

123:                                              ; preds = %114
  %124 = bitcast %"class.blink::LineLayoutItem"* %4 to i64*
  store i64 %122, i64* %124, align 8
  %125 = and i32 %115, 1
  %126 = icmp ne i32 %125, 0
  %127 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %4, i1 zeroext %126) #11
  %128 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %127, i64 0, i32 0, i32 7, i32 0, i32 0
  %129 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %128, align 8
  %130 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %129, i64 0, i32 27
  %131 = load i16, i16* %130, align 8
  %132 = and i16 %131, 3584
  %133 = icmp eq i16 %132, 0
  br i1 %133, label %151, label %134

134:                                              ; preds = %123
  %135 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %129, i64 0, i32 25, i32 0
  %136 = load i32, i32* %135, align 4
  br label %151

137:                                              ; preds = %114
  %138 = bitcast %"class.blink::LineLayoutItem"* %5 to i64*
  store i64 %122, i64* %138, align 8
  %139 = and i32 %115, 1
  %140 = icmp ne i32 %139, 0
  %141 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %5, i1 zeroext %140) #11
  %142 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %141, i64 0, i32 0, i32 7, i32 0, i32 0
  %143 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %142, align 8
  %144 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %143, i64 0, i32 27
  %145 = load i16, i16* %144, align 8
  %146 = and i16 %145, 14
  %147 = icmp eq i16 %146, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %137
  %149 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %143, i64 0, i32 23, i32 0
  %150 = load i32, i32* %149, align 4
  br label %151

151:                                              ; preds = %123, %134, %137, %148
  %152 = phi i32 [ %136, %134 ], [ 0, %123 ], [ %150, %148 ], [ 0, %137 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #11
  %153 = load i32, i32* %19, align 8
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %185, label %156

156:                                              ; preds = %151
  %157 = load i32, i32* %12, align 4
  %158 = and i32 %157, 2048
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %161 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %160, align 8
  %162 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %161, i64 0, i32 4
  %163 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %162 to i96*
  %164 = load i96, i96* %163, align 4
  %165 = and i96 %164, 33554432
  %166 = icmp eq i96 %165, 0
  %167 = bitcast %"class.blink::LayoutObject"* %161 to %"class.blink::LayoutBoxModelObject"*
  %168 = select i1 %166, %"class.blink::LayoutBoxModelObject"* %167, %"class.blink::LayoutBoxModelObject"* null
  %169 = bitcast %"class.blink::LayoutBoxModelObject"* %168 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %170 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %169, align 8
  br i1 %159, label %175, label %171

171:                                              ; preds = %156
  %172 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %170, i64 121
  %173 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %172, align 8
  %174 = call i32 %173(%"class.blink::LayoutBoxModelObject"* %168) #11
  br label %179

175:                                              ; preds = %156
  %176 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %170, i64 119
  %177 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %176, align 8
  %178 = call i32 %177(%"class.blink::LayoutBoxModelObject"* %168) #11
  br label %179

179:                                              ; preds = %171, %175
  %180 = phi i32 [ %174, %171 ], [ %178, %175 ]
  %181 = sdiv i32 %180, 64
  %182 = shl nsw i32 %181, 6
  %183 = icmp slt i32 %180, -63
  %184 = select i1 %183, i32 -2147483648, i32 2147483647
  br label %185

185:                                              ; preds = %90, %179, %151
  %186 = phi i32 [ %152, %151 ], [ %152, %179 ], [ 0, %90 ]
  %187 = phi i32 [ 0, %151 ], [ %182, %179 ], [ 0, %90 ]
  %188 = phi i32 [ 2147483647, %151 ], [ %184, %179 ], [ 2147483647, %90 ]
  %189 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %186, i32 %187) #11
  %190 = extractvalue { i32, i1 } %189, 1
  %191 = extractvalue { i32, i1 } %189, 0
  %192 = select i1 %190, i32 %188, i32 %191, !prof !2
  %193 = load i32, i32* %11, align 4
  %194 = icmp slt i32 %192, 0
  %195 = select i1 %194, i32 -2147483648, i32 2147483647
  %196 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %193, i32 %192) #11
  %197 = extractvalue { i32, i1 } %196, 1
  %198 = extractvalue { i32, i1 } %196, 0
  %199 = select i1 %197, i32 %195, i32 %198, !prof !2
  store i32 %199, i32* %11, align 4
  %200 = load i32, i32* %106, align 4
  %201 = load i32, i32* %108, align 4
  %202 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %203 = icmp sgt i32 %1, -1
  %204 = select i1 %203, i32 -2147483648, i32 2147483647
  %205 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %199, i32 %1) #11
  %206 = extractvalue { i32, i1 } %205, 1
  %207 = extractvalue { i32, i1 } %205, 0
  %208 = select i1 %206, i32 %204, i32 %207, !prof !2
  %209 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  store i32 %208, i32* %209, align 8
  %210 = load i32, i32* %12, align 4
  %211 = and i32 %210, 16384
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %219, label %213

213:                                              ; preds = %185
  %214 = icmp slt i32 %200, %1
  %215 = icmp sgt i32 %201, %199
  %216 = or i1 %214, %215
  br i1 %216, label %217, label %219

217:                                              ; preds = %213
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %202) #11
  %218 = load i32, i32* %11, align 4
  br label %219

219:                                              ; preds = %185, %213, %217
  %220 = phi i32 [ %199, %185 ], [ %199, %213 ], [ %218, %217 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %107) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %105) #11
  ret i32 %220
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox30PlaceBoxRangeInInlineDirectionEPNS_9InlineBoxES2_RNS_10LayoutUnitES4_S4_Rb(%"class.blink::InlineFlowBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineBox"* readnone, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i8* nocapture dereferenceable(1)) local_unnamed_addr #1 align 2 {
  %8 = alloca %"class.blink::LineLayoutText", align 8
  %9 = icmp eq %"class.blink::InlineBox"* %1, null
  %10 = icmp eq %"class.blink::InlineBox"* %1, %2
  %11 = or i1 %9, %10
  br i1 %11, label %22, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.blink::LineLayoutText"* %8 to i8*
  %14 = bitcast %"class.blink::LineLayoutText"* %8 to i64*
  %15 = bitcast %"class.blink::LineLayoutText"* %8 to %"class.blink::LayoutText"**
  %16 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %8, i64 0, i32 0
  %17 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %18 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %3, i64 0, i32 0
  %19 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  %20 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  %21 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  br label %23

22:                                               ; preds = %487, %7
  ret void

23:                                               ; preds = %12, %487
  %24 = phi %"class.blink::InlineBox"* [ %1, %12 ], [ %489, %487 ]
  %25 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 4, i32 0
  %26 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %26, i64 0, i32 4
  %28 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %27 to i96*
  %29 = load i96, i96* %28, align 4
  %30 = and i96 %29, 33554432
  %31 = icmp eq i96 %30, 0
  br i1 %31, label %220, label %32

32:                                               ; preds = %23
  %33 = ptrtoint %"class.blink::LayoutObject"* %26 to i64
  %34 = bitcast %"class.blink::InlineBox"* %24 to %"class.blink::InlineTextBox"*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  store i64 %33, i64* %14, align 8
  %35 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %26, i64 1, i32 4, i32 0, i64 4
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"**
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %153, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %153, label %43

43:                                               ; preds = %39
  %44 = load i8, i8* %6, align 1, !range !3
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %97, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 1, i32 1
  %48 = bitcast %"class.blink::InlineBox"** %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = icmp ugt i32 %41, %49
  br i1 %50, label %51, label %97

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 1
  br i1 %55, label %63, label %57

57:                                               ; preds = %51
  %58 = bitcast %"class.WTF::StringImpl"* %56 to i8*
  %59 = zext i32 %49 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  br label %68

63:                                               ; preds = %51
  %64 = bitcast %"class.WTF::StringImpl"* %56 to i16*
  %65 = zext i32 %49 to i64
  %66 = getelementptr inbounds i16, i16* %64, i64 %65
  %67 = load i16, i16* %66, align 2
  br label %68

68:                                               ; preds = %57, %63
  %69 = phi i16 [ %62, %57 ], [ %67, %63 ]
  %70 = icmp ult i16 %69, 128
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = icmp ult i16 %69, 33
  br i1 %72, label %73, label %97

73:                                               ; preds = %71
  switch i16 %69, label %97 [
    i16 32, label %78
    i16 13, label %78
    i16 12, label %78
    i16 11, label %78
    i16 10, label %78
    i16 9, label %78
  ]

74:                                               ; preds = %68
  %75 = zext i16 %69 to i32
  %76 = call i32 @u_charDirection_69(i32 %75) #11
  %77 = icmp eq i32 %76, 9
  br i1 %77, label %78, label %97

78:                                               ; preds = %73, %73, %73, %73, %73, %73, %74
  %79 = load i32, i32* %17, align 4
  %80 = and i32 %79, 1
  %81 = icmp ne i32 %80, 0
  %82 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %16, i1 zeroext %81)
  %83 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %82, i64 0, i32 0, i32 0, i32 0, i32 0
  %84 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %83, align 8
  %85 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %84, i64 0, i32 1, i32 0, i32 0
  %86 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %86, i64 0, i32 1, i32 0, i32 9
  %88 = load float, float* %87, align 4
  %89 = fmul float %88, 6.400000e+01
  %90 = fcmp ult float %89, 0xC1E0000000000000
  %91 = fcmp ugt float %89, 0x41DFFFFFE0000000
  %92 = fcmp ogt float %89, 0xC1E0000000000000
  %93 = select i1 %92, float %89, float 0xC1E0000000000000
  %94 = fptosi float %93 to i32
  %95 = select i1 %90, i32 0, i32 2147483647
  %96 = select i1 %91, i32 %95, i32 %94
  br label %97

97:                                               ; preds = %43, %73, %71, %46, %74, %78
  %98 = phi i32 [ %96, %78 ], [ 0, %74 ], [ 0, %46 ], [ 0, %71 ], [ 0, %73 ], [ 0, %43 ]
  %99 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %34, i64 0, i32 4
  %100 = load i16, i16* %99, align 4
  %101 = icmp eq i16 %100, 0
  %102 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 1, i32 1
  %103 = bitcast %"class.blink::InlineBox"** %102 to i32*
  %104 = load i32, i32* %103, align 8
  %105 = zext i16 %100 to i32
  %106 = add nsw i32 %105, -1
  %107 = select i1 %101, i32 0, i32 %106
  %108 = add i32 %107, %104
  %109 = load %"class.blink::LayoutText"*, %"class.blink::LayoutText"** %15, align 8
  %110 = getelementptr inbounds %"class.blink::LayoutText", %"class.blink::LayoutText"* %109, i64 0, i32 7, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %141, label %113

113:                                              ; preds = %97
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = icmp ugt i32 %115, %108
  br i1 %116, label %117, label %141

117:                                              ; preds = %113
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load atomic i32, i32* %118 monotonic, align 4
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 1
  br i1 %121, label %129, label %123

123:                                              ; preds = %117
  %124 = bitcast %"class.WTF::StringImpl"* %122 to i8*
  %125 = zext i32 %108 to i64
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i16
  br label %134

129:                                              ; preds = %117
  %130 = bitcast %"class.WTF::StringImpl"* %122 to i16*
  %131 = zext i32 %108 to i64
  %132 = getelementptr inbounds i16, i16* %130, i64 %131
  %133 = load i16, i16* %132, align 2
  br label %134

134:                                              ; preds = %123, %129
  %135 = phi i16 [ %128, %123 ], [ %133, %129 ]
  %136 = icmp ult i16 %135, 128
  br i1 %136, label %137, label %145

137:                                              ; preds = %134
  %138 = icmp ult i16 %135, 33
  br i1 %138, label %139, label %149

139:                                              ; preds = %137
  %140 = icmp eq i16 %135, 32
  br i1 %140, label %149, label %141

141:                                              ; preds = %97, %113, %139
  %142 = phi i16 [ %135, %139 ], [ 0, %113 ], [ 0, %97 ]
  %143 = add nsw i16 %142, -9
  %144 = icmp ult i16 %143, 5
  br label %149

145:                                              ; preds = %134
  %146 = zext i16 %135 to i32
  %147 = call i32 @u_charDirection_69(i32 %146) #11
  %148 = icmp eq i32 %147, 9
  br label %149

149:                                              ; preds = %137, %139, %141, %145
  %150 = phi i1 [ %148, %145 ], [ false, %137 ], [ true, %139 ], [ %144, %141 ]
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %6, align 1
  br label %153

153:                                              ; preds = %32, %39, %149
  %154 = phi i32 [ 0, %39 ], [ %98, %149 ], [ 0, %32 ]
  %155 = load i32, i32* %17, align 4
  %156 = and i32 %155, 4
  %157 = icmp eq i32 %156, 0
  %158 = load i32, i32* %18, align 4
  br i1 %157, label %159, label %174

159:                                              ; preds = %153
  %160 = icmp slt i32 %154, 0
  %161 = select i1 %160, i32 -2147483648, i32 2147483647
  %162 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %158, i32 %154) #11
  %163 = extractvalue { i32, i1 } %162, 1
  %164 = extractvalue { i32, i1 } %162, 0
  %165 = select i1 %163, i32 %161, i32 %164, !prof !2
  store i32 %165, i32* %18, align 4
  %166 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %167 = load i32, i32* %166, align 4
  %168 = and i32 %167, 2048
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %172, label %170

170:                                              ; preds = %159
  %171 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 0, i32 0
  store i32 %165, i32* %171, align 4
  br label %189

172:                                              ; preds = %159
  %173 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 1, i32 0
  store i32 %165, i32* %173, align 4
  br label %189

174:                                              ; preds = %153
  %175 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = and i32 %176, 2048
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 0, i32 0
  %180 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 1, i32 0
  %181 = select i1 %178, i32* %180, i32* %179
  store i32 %158, i32* %181, align 4
  %182 = load i32, i32* %18, align 4
  %183 = icmp slt i32 %154, 0
  %184 = select i1 %183, i32 -2147483648, i32 2147483647
  %185 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %182, i32 %154) #11
  %186 = extractvalue { i32, i1 } %185, 1
  %187 = extractvalue { i32, i1 } %185, 0
  %188 = select i1 %186, i32 %184, i32 %187, !prof !2
  store i32 %188, i32* %18, align 4
  br label %189

189:                                              ; preds = %172, %170, %174
  %190 = load i32, i32* %17, align 4
  %191 = and i32 %190, 16384
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %200, label %193

193:                                              ; preds = %189
  %194 = load i32, i32* %19, align 4
  %195 = load i32, i32* %18, align 4
  %196 = icmp slt i32 %194, %195
  %197 = select i1 %196, %"class.blink::LayoutUnit"* %4, %"class.blink::LayoutUnit"* %3
  %198 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %197, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %19, align 4
  br label %200

200:                                              ; preds = %189, %193
  %201 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 6, i32 0
  %202 = load i32, i32* %201, align 8
  %203 = load i32, i32* %18, align 4
  %204 = icmp slt i32 %202, 0
  %205 = select i1 %204, i32 -2147483648, i32 2147483647
  %206 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %203, i32 %202) #11
  %207 = extractvalue { i32, i1 } %206, 1
  %208 = extractvalue { i32, i1 } %206, 0
  %209 = select i1 %207, i32 %205, i32 %208, !prof !2
  store i32 %209, i32* %18, align 4
  %210 = load i32, i32* %17, align 4
  %211 = and i32 %210, 16384
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %219, label %213

213:                                              ; preds = %200
  %214 = load i32, i32* %20, align 4
  %215 = icmp slt i32 %209, %214
  %216 = select i1 %215, %"class.blink::LayoutUnit"* %5, %"class.blink::LayoutUnit"* %3
  %217 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %216, i64 0, i32 0
  %218 = load i32, i32* %217, align 4
  store i32 %218, i32* %20, align 4
  br label %219

219:                                              ; preds = %200, %213
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  br label %487

220:                                              ; preds = %23
  %221 = and i96 %29, 113336795588871485128704
  %222 = icmp eq i96 %221, 75557863725914323419136
  br i1 %222, label %223, label %273

223:                                              ; preds = %220
  %224 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %26, i64 0, i32 7
  %225 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %224, align 8
  %226 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %225, i64 0, i32 5, i32 0
  %227 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %226, align 8
  %228 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %227, i64 0, i32 0, i32 9
  %229 = bitcast [20 x i8]* %228 to i160*
  %230 = load i160, i160* %229, align 8
  %231 = and i160 %230, 41538374868278621028243970633760768
  %232 = icmp eq i160 %231, 0
  br i1 %232, label %233, label %243

233:                                              ; preds = %223
  %234 = load i32, i32* %18, align 4
  %235 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %236 = load i32, i32* %235, align 4
  %237 = and i32 %236, 2048
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %241, label %239

239:                                              ; preds = %233
  %240 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 0, i32 0
  store i32 %234, i32* %240, align 4
  br label %487

241:                                              ; preds = %233
  %242 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 1, i32 0
  store i32 %234, i32* %242, align 4
  br label %487

243:                                              ; preds = %223
  %244 = call dereferenceable(160) %"class.blink::RootInlineBox"* @_ZN5blink9InlineBox4RootEv(%"class.blink::InlineBox"* %21) #11
  %245 = call %"class.blink::LayoutObject"* @_ZNK5blink13RootInlineBox5BlockEv(%"class.blink::RootInlineBox"* %244) #11
  %246 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %245, i64 0, i32 5, i32 0
  %247 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %246, align 8
  %248 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %247, i64 0, i32 0, i32 9
  %249 = bitcast [20 x i8]* %248 to i160*
  %250 = load i160, i160* %249, align 8
  %251 = and i160 %250, 15211807202738752817960438464512
  %252 = icmp eq i160 %251, 0
  %253 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %245, i64 1, i32 4, i32 0, i64 4
  %254 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %245, i64 1, i32 4, i32 0, i64 8
  %255 = select i1 %252, i8* %253, i8* %254
  %256 = bitcast i8* %255 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = load i32, i32* %18, align 4
  %259 = icmp sgt i32 %258, -1
  %260 = select i1 %259, i32 -2147483648, i32 2147483647
  %261 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %257, i32 %258) #11
  %262 = extractvalue { i32, i1 } %261, 1
  %263 = extractvalue { i32, i1 } %261, 0
  %264 = select i1 %262, i32 %260, i32 %263, !prof !2
  %265 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = and i32 %266, 2048
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %271, label %269

269:                                              ; preds = %243
  %270 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 0, i32 0
  store i32 %264, i32* %270, align 4
  br label %487

271:                                              ; preds = %243
  %272 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 1, i32 0
  store i32 %264, i32* %272, align 4
  br label %487

273:                                              ; preds = %220
  %274 = bitcast %"class.blink::LayoutObject"* %26 to i1 (%"class.blink::LayoutObject"*)***
  %275 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %274, align 8
  %276 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %275, i64 26
  %277 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %276, align 8
  %278 = call zeroext i1 %277(%"class.blink::LayoutObject"* %26) #11
  br i1 %278, label %279, label %382

279:                                              ; preds = %273
  %280 = bitcast %"class.blink::InlineBox"* %24 to %"class.blink::InlineFlowBox"*
  %281 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 1, i32 4
  %282 = bitcast %"class.blink::LineLayoutItem"* %281 to i32*
  %283 = load i32, i32* %282, align 8
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %313, label %286

286:                                              ; preds = %279
  %287 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %288 = load i32, i32* %287, align 4
  %289 = and i32 %288, 2048
  %290 = icmp eq i32 %289, 0
  %291 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %292 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %291, i64 0, i32 4
  %293 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %292 to i96*
  %294 = load i96, i96* %293, align 4
  %295 = and i96 %294, 33554432
  %296 = icmp eq i96 %295, 0
  %297 = bitcast %"class.blink::LayoutObject"* %291 to %"class.blink::LayoutBoxModelObject"*
  %298 = select i1 %296, %"class.blink::LayoutBoxModelObject"* %297, %"class.blink::LayoutBoxModelObject"* null
  %299 = bitcast %"class.blink::LayoutBoxModelObject"* %298 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %300 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %299, align 8
  br i1 %290, label %305, label %301

301:                                              ; preds = %286
  %302 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %300, i64 129
  %303 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %302, align 8
  %304 = call i32 %303(%"class.blink::LayoutBoxModelObject"* %298) #11
  br label %309

305:                                              ; preds = %286
  %306 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %300, i64 127
  %307 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %306, align 8
  %308 = call i32 %307(%"class.blink::LayoutBoxModelObject"* %298) #11
  br label %309

309:                                              ; preds = %301, %305
  %310 = phi i32 [ %304, %301 ], [ %308, %305 ]
  %311 = icmp slt i32 %310, 0
  %312 = select i1 %311, i32 -2147483648, i32 2147483647
  br label %313

313:                                              ; preds = %279, %309
  %314 = phi i32 [ %310, %309 ], [ 0, %279 ]
  %315 = phi i32 [ %312, %309 ], [ 2147483647, %279 ]
  %316 = load i32, i32* %18, align 4
  %317 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %316, i32 %314) #11
  %318 = extractvalue { i32, i1 } %317, 1
  %319 = extractvalue { i32, i1 } %317, 0
  %320 = select i1 %318, i32 %315, i32 %319, !prof !2
  store i32 %320, i32* %18, align 4
  %321 = load i32, i32* %17, align 4
  %322 = and i32 %321, 16384
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %331, label %324

324:                                              ; preds = %313
  %325 = load i32, i32* %19, align 4
  %326 = icmp slt i32 %325, %320
  %327 = select i1 %326, %"class.blink::LayoutUnit"* %4, %"class.blink::LayoutUnit"* %3
  %328 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %327, i64 0, i32 0
  %329 = load i32, i32* %328, align 4
  store i32 %329, i32* %19, align 4
  %330 = load i32, i32* %18, align 4
  br label %331

331:                                              ; preds = %313, %324
  %332 = phi i32 [ %320, %313 ], [ %330, %324 ]
  %333 = call i32 @_ZN5blink13InlineFlowBox27PlaceBoxesInInlineDirectionENS_10LayoutUnitERb(%"class.blink::InlineFlowBox"* %280, i32 %332, i8* dereferenceable(1) %6)
  store i32 %333, i32* %18, align 4
  %334 = load i32, i32* %17, align 4
  %335 = and i32 %334, 16384
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %343, label %337

337:                                              ; preds = %331
  %338 = load i32, i32* %20, align 4
  %339 = icmp slt i32 %333, %338
  %340 = select i1 %339, %"class.blink::LayoutUnit"* %5, %"class.blink::LayoutUnit"* %3
  %341 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %340, i64 0, i32 0
  %342 = load i32, i32* %341, align 4
  store i32 %342, i32* %20, align 4
  br label %343

343:                                              ; preds = %331, %337
  %344 = load i32, i32* %282, align 8
  %345 = and i32 %344, 2
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %374, label %347

347:                                              ; preds = %343
  %348 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %349 = load i32, i32* %348, align 4
  %350 = and i32 %349, 2048
  %351 = icmp eq i32 %350, 0
  %352 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %353 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %352, i64 0, i32 4
  %354 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %353 to i96*
  %355 = load i96, i96* %354, align 4
  %356 = and i96 %355, 33554432
  %357 = icmp eq i96 %356, 0
  %358 = bitcast %"class.blink::LayoutObject"* %352 to %"class.blink::LayoutBoxModelObject"*
  %359 = select i1 %357, %"class.blink::LayoutBoxModelObject"* %358, %"class.blink::LayoutBoxModelObject"* null
  %360 = bitcast %"class.blink::LayoutBoxModelObject"* %359 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %361 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %360, align 8
  br i1 %351, label %366, label %362

362:                                              ; preds = %347
  %363 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %361, i64 130
  %364 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %363, align 8
  %365 = call i32 %364(%"class.blink::LayoutBoxModelObject"* %359) #11
  br label %370

366:                                              ; preds = %347
  %367 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %361, i64 128
  %368 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %367, align 8
  %369 = call i32 %368(%"class.blink::LayoutBoxModelObject"* %359) #11
  br label %370

370:                                              ; preds = %362, %366
  %371 = phi i32 [ %365, %362 ], [ %369, %366 ]
  %372 = icmp slt i32 %371, 0
  %373 = select i1 %372, i32 -2147483648, i32 2147483647
  br label %374

374:                                              ; preds = %343, %370
  %375 = phi i32 [ %371, %370 ], [ 0, %343 ]
  %376 = phi i32 [ %373, %370 ], [ 2147483647, %343 ]
  %377 = load i32, i32* %18, align 4
  %378 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %377, i32 %375) #11
  %379 = extractvalue { i32, i1 } %378, 1
  %380 = extractvalue { i32, i1 } %378, 0
  %381 = select i1 %379, i32 %376, i32 %380, !prof !2
  store i32 %381, i32* %18, align 4
  br label %487

382:                                              ; preds = %273
  %383 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %384 = bitcast %"class.blink::LayoutObject"* %383 to i1 (%"class.blink::LayoutObject"*, i32)***
  %385 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %384, align 8
  %386 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %385, i64 92
  %387 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %386, align 8
  %388 = call zeroext i1 %387(%"class.blink::LayoutObject"* %383, i32 15) #11
  br i1 %388, label %399, label %389

389:                                              ; preds = %382
  %390 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %384, align 8
  %391 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %390, i64 92
  %392 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %391, align 8
  %393 = call zeroext i1 %392(%"class.blink::LayoutObject"* %383, i32 13) #11
  br i1 %393, label %399, label %394

394:                                              ; preds = %389
  %395 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %384, align 8
  %396 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %395, i64 92
  %397 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %396, align 8
  %398 = call zeroext i1 %397(%"class.blink::LayoutObject"* %383, i32 36) #11
  br i1 %398, label %399, label %402

399:                                              ; preds = %382, %389, %394
  %400 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %401 = call zeroext i1 @_ZNK5blink12LayoutObject18IsInsideListMarkerEv(%"class.blink::LayoutObject"* %400) #11
  br i1 %401, label %402, label %487

402:                                              ; preds = %394, %399
  %403 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %25, align 8
  %404 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %403, i64 0, i32 4
  %405 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %404 to i96*
  %406 = load i96, i96* %405, align 4
  %407 = and i96 %406, 33554432
  %408 = icmp eq i96 %407, 0
  %409 = load i32, i32* %17, align 4
  %410 = and i32 %409, 2048
  %411 = icmp eq i32 %410, 0
  %412 = bitcast %"class.blink::LayoutObject"* %403 to %"class.blink::LayoutBoxModelObject"*
  %413 = select i1 %408, %"class.blink::LayoutBoxModelObject"* %412, %"class.blink::LayoutBoxModelObject"* null
  %414 = bitcast %"class.blink::LayoutBoxModelObject"* %413 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %415 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %414, align 8
  br i1 %411, label %424, label %416

416:                                              ; preds = %402
  %417 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %415, i64 129
  %418 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %417, align 8
  %419 = call i32 %418(%"class.blink::LayoutBoxModelObject"* %413) #11
  %420 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %414, align 8
  %421 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %420, i64 130
  %422 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %421, align 8
  %423 = call i32 %422(%"class.blink::LayoutBoxModelObject"* %413) #11
  br label %432

424:                                              ; preds = %402
  %425 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %415, i64 127
  %426 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %425, align 8
  %427 = call i32 %426(%"class.blink::LayoutBoxModelObject"* %413) #11
  %428 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %414, align 8
  %429 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %428, i64 128
  %430 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %429, align 8
  %431 = call i32 %430(%"class.blink::LayoutBoxModelObject"* %413) #11
  br label %432

432:                                              ; preds = %424, %416
  %433 = phi i32 [ %419, %416 ], [ %427, %424 ]
  %434 = phi i32 [ %423, %416 ], [ %431, %424 ]
  %435 = load i32, i32* %18, align 4
  %436 = icmp slt i32 %433, 0
  %437 = select i1 %436, i32 -2147483648, i32 2147483647
  %438 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %435, i32 %433) #11
  %439 = extractvalue { i32, i1 } %438, 1
  %440 = extractvalue { i32, i1 } %438, 0
  %441 = select i1 %439, i32 %437, i32 %440, !prof !2
  store i32 %441, i32* %18, align 4
  %442 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 7, i32 0
  %443 = load i32, i32* %442, align 4
  %444 = and i32 %443, 2048
  %445 = icmp eq i32 %444, 0
  %446 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 0, i32 0
  %447 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 5, i32 1, i32 0
  %448 = select i1 %445, i32* %447, i32* %446
  store i32 %441, i32* %448, align 4
  %449 = load i32, i32* %17, align 4
  %450 = and i32 %449, 16384
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %459, label %452

452:                                              ; preds = %432
  %453 = load i32, i32* %19, align 4
  %454 = load i32, i32* %18, align 4
  %455 = icmp slt i32 %453, %454
  %456 = select i1 %455, %"class.blink::LayoutUnit"* %4, %"class.blink::LayoutUnit"* %3
  %457 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %456, i64 0, i32 0
  %458 = load i32, i32* %457, align 4
  store i32 %458, i32* %19, align 4
  br label %459

459:                                              ; preds = %432, %452
  %460 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 6, i32 0
  %461 = load i32, i32* %460, align 8
  %462 = load i32, i32* %18, align 4
  %463 = icmp slt i32 %461, 0
  %464 = select i1 %463, i32 -2147483648, i32 2147483647
  %465 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %462, i32 %461) #11
  %466 = extractvalue { i32, i1 } %465, 1
  %467 = extractvalue { i32, i1 } %465, 0
  %468 = select i1 %466, i32 %464, i32 %467, !prof !2
  store i32 %468, i32* %18, align 4
  %469 = load i32, i32* %17, align 4
  %470 = and i32 %469, 16384
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %479, label %472

472:                                              ; preds = %459
  %473 = load i32, i32* %20, align 4
  %474 = icmp slt i32 %468, %473
  %475 = select i1 %474, %"class.blink::LayoutUnit"* %5, %"class.blink::LayoutUnit"* %3
  %476 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %475, i64 0, i32 0
  %477 = load i32, i32* %476, align 4
  store i32 %477, i32* %20, align 4
  %478 = load i32, i32* %18, align 4
  br label %479

479:                                              ; preds = %459, %472
  %480 = phi i32 [ %468, %459 ], [ %478, %472 ]
  %481 = icmp slt i32 %434, 0
  %482 = select i1 %481, i32 -2147483648, i32 2147483647
  %483 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %480, i32 %434) #11
  %484 = extractvalue { i32, i1 } %483, 1
  %485 = extractvalue { i32, i1 } %483, 0
  %486 = select i1 %484, i32 %482, i32 %485, !prof !2
  store i32 %486, i32* %18, align 4
  store i8 1, i8* %6, align 1
  br label %487

487:                                              ; preds = %271, %269, %241, %239, %219, %399, %479, %374
  %488 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %24, i64 0, i32 1
  %489 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %488, align 8
  %490 = icmp eq %"class.blink::InlineBox"* %489, null
  %491 = icmp eq %"class.blink::InlineBox"* %489, %2
  %492 = or i1 %490, %491
  br i1 %492, label %22, label %23
}

declare %"class.blink::LayoutObject"* @_ZNK5blink13RootInlineBox5BlockEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13InlineFlowBox16DominantBaselineEv(%"class.blink::InlineFlowBox"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.blink::LineLayoutItem", align 8
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2048
  %6 = icmp eq i32 %5, 0
  %7 = bitcast %"class.blink::LineLayoutItem"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #11
  br i1 %6, label %8, label %25

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %10 = bitcast %"class.blink::LayoutObject"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.blink::LineLayoutItem"* %2 to i64*
  store i64 %11, i64* %12, align 8
  %13 = and i32 %4, 1
  %14 = icmp ne i32 %13, 0
  %15 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %2, i1 zeroext %14)
  %16 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %17, i64 0, i32 1, i32 0, i32 0
  %19 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %19, i64 0, i32 1, i32 0, i32 12, i32 0
  %21 = bitcast %"struct.blink::FontDescription::BitFields"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 2
  %24 = icmp eq i64 %23, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  br i1 %24, label %26, label %27

25:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #11
  br label %26

26:                                               ; preds = %8, %25
  br label %27

27:                                               ; preds = %8, %26
  %28 = phi i32 [ 0, %26 ], [ 1, %8 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox25AdjustMaxAscentAndDescentERNS_10LayoutUnitES2_ii(%"class.blink::InlineFlowBox"* nocapture readonly, %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i32, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.blink::LineLayoutItem", align 8
  %7 = alloca %"class.blink::LineLayoutItem", align 8
  %8 = alloca %"class.blink::LineLayoutItem", align 8
  %9 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %14 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %13, align 8
  %15 = icmp eq %"class.blink::InlineBox"* %14, null
  br i1 %15, label %223, label %16

16:                                               ; preds = %5
  %17 = bitcast %"class.blink::LineLayoutItem"* %7 to i8*
  %18 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %7, i64 0, i32 0
  %19 = bitcast %"class.blink::LineLayoutItem"* %6 to i8*
  %20 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %6, i64 0, i32 0
  %21 = bitcast %"class.blink::LineLayoutItem"* %8 to i8*
  %22 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %8, i64 0, i32 0
  %23 = icmp slt i32 %3, %4
  %24 = select i1 %23, i32 %4, i32 %3
  %25 = icmp sgt i32 %24, 33554431
  %26 = icmp slt i32 %24, -33554432
  %27 = shl i32 %24, 6
  %28 = select i1 %26, i32 -2147483648, i32 %27
  %29 = select i1 %25, i32 2147483647, i32 %28
  br label %30

30:                                               ; preds = %16, %219
  %31 = phi %"class.blink::InlineBox"* [ %14, %16 ], [ %221, %219 ]
  %32 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %31, i64 0, i32 4, i32 0
  %33 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %33, i64 0, i32 4
  %35 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %34 to i96*
  %36 = load i96, i96* %35, align 4
  %37 = and i96 %36, 113336795588871485128704
  %38 = icmp eq i96 %37, 75557863725914323419136
  br i1 %38, label %219, label %39

39:                                               ; preds = %30
  %40 = and i96 %36, 33554432
  %41 = icmp eq i96 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %33, i64 0, i32 7
  %44 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %43, align 8
  %45 = icmp eq %"class.blink::LayoutObject"* %44, null
  br i1 %45, label %46, label %47

46:                                               ; preds = %42, %39
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  br label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %44, i64 0, i32 4
  %49 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %48 to i96*
  %50 = load i96, i96* %49, align 4
  %51 = and i96 %50, 67108864
  %52 = icmp eq i96 %51, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  br i1 %52, label %54, label %53

53:                                               ; preds = %47
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %72

54:                                               ; preds = %46, %47
  store %"class.blink::LayoutObject"* %33, %"class.blink::LayoutObject"** %18, align 8
  %55 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %31, i64 0, i32 7, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 1
  %58 = icmp ne i32 %57, 0
  %59 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %7, i1 zeroext %58) #11
  %60 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %59, i64 0, i32 0, i32 9
  %61 = bitcast [20 x i8]* %60 to i160*
  %62 = load i160, i160* %61, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  %63 = and i160 %62, 276701161105643274240
  %64 = icmp eq i160 %63, 110680464442257309696
  br i1 %64, label %98, label %65

65:                                               ; preds = %54
  %66 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %32, align 8
  %67 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %66, i64 0, i32 4
  %68 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %67 to i96*
  %69 = load i96, i96* %68, align 4
  %70 = and i96 %69, 33554432
  %71 = icmp eq i96 %70, 0
  br i1 %71, label %77, label %72

72:                                               ; preds = %53, %65
  %73 = phi %"class.blink::LayoutObject"* [ %33, %53 ], [ %66, %65 ]
  %74 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %73, i64 0, i32 7
  %75 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %74, align 8
  %76 = icmp eq %"class.blink::LayoutObject"* %75, null
  br i1 %76, label %77, label %79

77:                                               ; preds = %72, %65
  %78 = phi %"class.blink::LayoutObject"* [ %73, %72 ], [ %66, %65 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #11
  br label %86

79:                                               ; preds = %72
  %80 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %75, i64 0, i32 4
  %81 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %80 to i96*
  %82 = load i96, i96* %81, align 4
  %83 = and i96 %82, 67108864
  %84 = icmp eq i96 %83, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #11
  br i1 %84, label %86, label %85

85:                                               ; preds = %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #11
  br label %211

86:                                               ; preds = %77, %79
  %87 = phi %"class.blink::LayoutObject"* [ %78, %77 ], [ %73, %79 ]
  store %"class.blink::LayoutObject"* %87, %"class.blink::LayoutObject"** %20, align 8
  %88 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %31, i64 0, i32 7, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 1
  %91 = icmp ne i32 %90, 0
  %92 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %6, i1 zeroext %91) #11
  %93 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %92, i64 0, i32 0, i32 9
  %94 = bitcast [20 x i8]* %93 to i160*
  %95 = load i160, i160* %94, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #11
  %96 = and i160 %95, 276701161105643274240
  %97 = icmp eq i160 %96, 129127208515966861312
  br i1 %97, label %98, label %211

98:                                               ; preds = %86, %54
  %99 = bitcast %"class.blink::InlineBox"* %31 to i32 (%"class.blink::InlineBox"*)***
  %100 = load i32 (%"class.blink::InlineBox"*)**, i32 (%"class.blink::InlineBox"*)*** %99, align 8
  %101 = getelementptr inbounds i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %100, i64 24
  %102 = load i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %101, align 8
  %103 = call i32 %102(%"class.blink::InlineBox"* nonnull %31) #11
  %104 = sdiv i32 %103, 64
  %105 = srem i32 %103, 64
  %106 = add nsw i32 %105, 32
  %107 = ashr i32 %106, 6
  %108 = add nsw i32 %107, %104
  %109 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %32, align 8
  %110 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %109, i64 0, i32 4
  %111 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %110 to i96*
  %112 = load i96, i96* %111, align 4
  %113 = and i96 %112, 33554432
  %114 = icmp eq i96 %113, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %98
  %116 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %109, i64 0, i32 7
  %117 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %116, align 8
  %118 = icmp eq %"class.blink::LayoutObject"* %117, null
  br i1 %118, label %119, label %120

119:                                              ; preds = %115, %98
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  br label %127

120:                                              ; preds = %115
  %121 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %117, i64 0, i32 4
  %122 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %121 to i96*
  %123 = load i96, i96* %122, align 4
  %124 = and i96 %123, 67108864
  %125 = icmp eq i96 %124, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  br i1 %125, label %127, label %126

126:                                              ; preds = %120
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %169

127:                                              ; preds = %119, %120
  store %"class.blink::LayoutObject"* %109, %"class.blink::LayoutObject"** %22, align 8
  %128 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %31, i64 0, i32 7, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %129, 1
  %131 = icmp ne i32 %130, 0
  %132 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %8, i1 zeroext %131) #11
  %133 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %132, i64 0, i32 0, i32 9
  %134 = bitcast [20 x i8]* %133 to i160*
  %135 = load i160, i160* %134, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  %136 = and i160 %135, 276701161105643274240
  %137 = icmp eq i160 %136, 110680464442257309696
  br i1 %137, label %138, label %169

138:                                              ; preds = %127
  %139 = load i32, i32* %9, align 4
  %140 = load i32, i32* %11, align 4
  %141 = icmp slt i32 %140, 0
  %142 = select i1 %141, i32 -2147483648, i32 2147483647
  %143 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %139, i32 %140) #11
  %144 = extractvalue { i32, i1 } %143, 1
  %145 = extractvalue { i32, i1 } %143, 0
  %146 = select i1 %144, i32 %142, i32 %145, !prof !2
  %147 = icmp sgt i32 %108, 33554431
  br i1 %147, label %152, label %148

148:                                              ; preds = %138
  %149 = icmp slt i32 %108, -33554432
  %150 = shl i32 %108, 6
  %151 = select i1 %149, i32 -2147483648, i32 %150
  br label %152

152:                                              ; preds = %138, %148
  %153 = phi i32 [ 2147483647, %138 ], [ %151, %148 ]
  %154 = icmp slt i32 %146, %153
  br i1 %154, label %155, label %200

155:                                              ; preds = %152
  br i1 %147, label %160, label %156

156:                                              ; preds = %155
  %157 = icmp slt i32 %108, -33554432
  %158 = shl i32 %108, 6
  %159 = select i1 %157, i32 -2147483648, i32 %158
  br label %160

160:                                              ; preds = %155, %156
  %161 = phi i32 [ 2147483647, %155 ], [ %159, %156 ]
  %162 = icmp sgt i32 %139, -1
  %163 = select i1 %162, i32 -2147483648, i32 2147483647
  %164 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %161, i32 %139) #11
  %165 = extractvalue { i32, i1 } %164, 1
  %166 = extractvalue { i32, i1 } %164, 0
  %167 = select i1 %165, i32 %163, i32 %166, !prof !2
  store i32 %167, i32* %11, align 4
  %168 = load i32, i32* %9, align 4
  br label %200

169:                                              ; preds = %126, %127
  %170 = load i32, i32* %9, align 4
  %171 = load i32, i32* %11, align 4
  %172 = icmp slt i32 %171, 0
  %173 = select i1 %172, i32 -2147483648, i32 2147483647
  %174 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %170, i32 %171) #11
  %175 = extractvalue { i32, i1 } %174, 1
  %176 = extractvalue { i32, i1 } %174, 0
  %177 = select i1 %175, i32 %173, i32 %176, !prof !2
  %178 = icmp sgt i32 %108, 33554431
  br i1 %178, label %183, label %179

179:                                              ; preds = %169
  %180 = icmp slt i32 %108, -33554432
  %181 = shl i32 %108, 6
  %182 = select i1 %180, i32 -2147483648, i32 %181
  br label %183

183:                                              ; preds = %169, %179
  %184 = phi i32 [ 2147483647, %169 ], [ %182, %179 ]
  %185 = icmp slt i32 %177, %184
  br i1 %185, label %186, label %200

186:                                              ; preds = %183
  br i1 %178, label %191, label %187

187:                                              ; preds = %186
  %188 = icmp slt i32 %108, -33554432
  %189 = shl i32 %108, 6
  %190 = select i1 %188, i32 -2147483648, i32 %189
  br label %191

191:                                              ; preds = %186, %187
  %192 = phi i32 [ 2147483647, %186 ], [ %190, %187 ]
  %193 = icmp sgt i32 %171, -1
  %194 = select i1 %193, i32 -2147483648, i32 2147483647
  %195 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %192, i32 %171) #11
  %196 = extractvalue { i32, i1 } %195, 1
  %197 = extractvalue { i32, i1 } %195, 0
  %198 = select i1 %196, i32 %194, i32 %197, !prof !2
  store i32 %198, i32* %9, align 4
  %199 = load i32, i32* %11, align 4
  br label %200

200:                                              ; preds = %183, %191, %152, %160
  %201 = phi i32 [ %171, %183 ], [ %199, %191 ], [ %140, %152 ], [ %167, %160 ]
  %202 = phi i32 [ %170, %183 ], [ %198, %191 ], [ %139, %152 ], [ %168, %160 ]
  %203 = icmp slt i32 %201, 0
  %204 = select i1 %203, i32 -2147483648, i32 2147483647
  %205 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %202, i32 %201) #11
  %206 = extractvalue { i32, i1 } %205, 1
  %207 = extractvalue { i32, i1 } %205, 0
  %208 = select i1 %206, i32 %204, i32 %207, !prof !2
  %209 = icmp slt i32 %208, %29
  br i1 %209, label %210, label %223

210:                                              ; preds = %200
  store i32 %10, i32* %9, align 4
  store i32 %12, i32* %11, align 4
  br label %211

211:                                              ; preds = %85, %210, %86
  %212 = bitcast %"class.blink::InlineBox"* %31 to i1 (%"class.blink::InlineBox"*)***
  %213 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %212, align 8
  %214 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %213, i64 14
  %215 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %214, align 8
  %216 = call zeroext i1 %215(%"class.blink::InlineBox"* nonnull %31) #11
  br i1 %216, label %217, label %219

217:                                              ; preds = %211
  %218 = bitcast %"class.blink::InlineBox"* %31 to %"class.blink::InlineFlowBox"*
  call void @_ZN5blink13InlineFlowBox25AdjustMaxAscentAndDescentERNS_10LayoutUnitES2_ii(%"class.blink::InlineFlowBox"* nonnull %218, %"class.blink::LayoutUnit"* dereferenceable(4) %1, %"class.blink::LayoutUnit"* dereferenceable(4) %2, i32 %3, i32 %4)
  br label %219

219:                                              ; preds = %211, %217, %30
  %220 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %31, i64 0, i32 1
  %221 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %220, align 8
  %222 = icmp eq %"class.blink::InlineBox"* %221, null
  br i1 %222, label %223, label %30

223:                                              ; preds = %219, %200, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox24ComputeLogicalBoxHeightsEPNS_13RootInlineBoxERNS_10LayoutUnitES4_S4_S4_RbS5_bRN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS6_6VectorIPKNS_14SimpleFontDataELj0ENS6_18PartitionAllocatorEEENS_13GlyphOverflowEEENS6_7PtrHashIS9_EENS6_10HashTraitsISA_EENSN_ISK_EESH_EENS_12FontBaselineERNS_21VerticalPositionCacheE(%"class.blink::InlineFlowBox"*, %"class.blink::RootInlineBox"*, %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1), i1 zeroext, %"class.WTF::HashMap.1681"* dereferenceable(24), i32, %"class.blink::VerticalPositionCache"*) local_unnamed_addr #1 align 2 {
  %13 = alloca %"class.blink::LineLayoutItem", align 8
  %14 = alloca %"class.blink::LineLayoutItem", align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca %"class.blink::LayoutUnit", align 4
  %18 = alloca %"class.blink::LayoutUnit", align 4
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca %"class.blink::LayoutUnit", align 4
  %22 = alloca %"class.blink::LayoutUnit", align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #11
  store i8 0, i8* %15, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #11
  store i8 0, i8* %16, align 1
  %23 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 16
  %26 = icmp ne i32 %25, 0
  %27 = icmp eq %"class.blink::RootInlineBox"* %1, null
  br i1 %27, label %258, label %28

28:                                               ; preds = %12
  %29 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %30 = bitcast %"class.blink::InlineFlowBox"* %0 to i1 (%"class.blink::InlineBox"*)***
  %31 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %31, i64 16
  %33 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %32, align 8
  %34 = tail call zeroext i1 %33(%"class.blink::InlineBox"* %29) #11
  br i1 %34, label %35, label %68

35:                                               ; preds = %28
  %36 = bitcast %"class.blink::LayoutUnit"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #11
  %37 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %17, i64 0, i32 0
  store i32 0, i32* %37, align 4
  %38 = bitcast %"class.blink::LayoutUnit"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #11
  %39 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %18, i64 0, i32 0
  store i32 0, i32* %39, align 4
  %40 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %1, i64 0, i32 0, i32 0
  call void @_ZNK5blink13RootInlineBox22AscentAndDescentForBoxEPNS_9InlineBoxERN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS6_EENS3_10HashTraitsIS7_EENSK_ISH_EESE_EERNS_10LayoutUnitESQ_RbSR_(%"class.blink::RootInlineBox"* nonnull %1, %"class.blink::InlineBox"* %40, %"class.WTF::HashMap.1681"* dereferenceable(24) %9, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %17, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %18, i8* nonnull dereferenceable(1) %15, i8* nonnull dereferenceable(1) %16) #11
  br i1 %8, label %49, label %41

41:                                               ; preds = %35
  %42 = load i32, i32* %23, align 8
  %43 = and i32 %42, 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = and i32 %42, 8
  %47 = icmp ne i32 %46, 0
  %48 = and i1 %26, %47
  br i1 %48, label %49, label %67

49:                                               ; preds = %41, %45, %35
  %50 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %37, align 4
  %53 = icmp slt i32 %51, %52
  %54 = load i8, i8* %6, align 1
  %55 = icmp eq i8 %54, 0
  %56 = or i1 %53, %55
  br i1 %56, label %57, label %58

57:                                               ; preds = %49
  store i32 %52, i32* %50, align 4
  store i8 1, i8* %6, align 1
  br label %58

58:                                               ; preds = %49, %57
  %59 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %39, align 4
  %62 = icmp slt i32 %60, %61
  %63 = load i8, i8* %7, align 1
  %64 = icmp eq i8 %63, 0
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %67

66:                                               ; preds = %58
  store i32 %61, i32* %59, align 4
  store i8 1, i8* %7, align 1
  br label %67

67:                                               ; preds = %58, %45, %66
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36) #11
  br label %68

68:                                               ; preds = %67, %28
  br i1 %26, label %258, label %69

69:                                               ; preds = %68
  %70 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %71 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %70, align 8
  %72 = icmp eq %"class.blink::InlineBox"* %71, null
  br i1 %72, label %258, label %73

73:                                               ; preds = %69
  %74 = bitcast %"class.blink::LayoutUnit"* %21 to i8*
  %75 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %21, i64 0, i32 0
  %76 = bitcast %"class.blink::LayoutUnit"* %22 to i8*
  %77 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %22, i64 0, i32 0
  %78 = bitcast %"class.blink::LineLayoutItem"* %13 to i8*
  %79 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %13, i64 0, i32 0
  %80 = bitcast %"class.blink::LineLayoutItem"* %14 to i8*
  %81 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %14, i64 0, i32 0
  %82 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  %83 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  %84 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %3, i64 0, i32 0
  %85 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %2, i64 0, i32 0
  br label %86

86:                                               ; preds = %73, %254
  %87 = phi %"class.blink::InlineBox"* [ %71, %73 ], [ %256, %254 ]
  %88 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 4, i32 0
  %89 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %89, i64 0, i32 4
  %91 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %90 to i96*
  %92 = load i96, i96* %91, align 4
  %93 = and i96 %92, 113336795588871485128704
  %94 = icmp eq i96 %93, 75557863725914323419136
  br i1 %94, label %254, label %95

95:                                               ; preds = %86
  %96 = bitcast %"class.blink::InlineBox"* %87 to i1 (%"class.blink::InlineBox"*)***
  %97 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %96, align 8
  %98 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %97, i64 14
  %99 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %98, align 8
  %100 = call zeroext i1 %99(%"class.blink::InlineBox"* nonnull %87) #11
  %101 = bitcast %"class.blink::InlineBox"* %87 to %"class.blink::InlineFlowBox"*
  %102 = select i1 %100, %"class.blink::InlineFlowBox"* %101, %"class.blink::InlineFlowBox"* null
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %19) #11
  store i8 0, i8* %19, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %20) #11
  store i8 0, i8* %20, align 1
  %103 = call i32 @_ZN5blink13RootInlineBox22VerticalPositionForBoxEPNS_9InlineBoxERNS_21VerticalPositionCacheE(%"class.blink::RootInlineBox"* nonnull %1, %"class.blink::InlineBox"* nonnull %87, %"class.blink::VerticalPositionCache"* %11) #11
  %104 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 7, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = and i32 %105, 2048
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 5, i32 1, i32 0
  %109 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 5, i32 0, i32 0
  %110 = select i1 %107, i32* %109, i32* %108
  store i32 %103, i32* %110, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %74) #11
  store i32 0, i32* %75, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %76) #11
  store i32 0, i32* %77, align 4
  call void @_ZNK5blink13RootInlineBox22AscentAndDescentForBoxEPNS_9InlineBoxERN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS6_EENS3_10HashTraitsIS7_EENSK_ISH_EESE_EERNS_10LayoutUnitESQ_RbSR_(%"class.blink::RootInlineBox"* nonnull %1, %"class.blink::InlineBox"* nonnull %87, %"class.WTF::HashMap.1681"* dereferenceable(24) %9, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %21, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %22, i8* nonnull dereferenceable(1) %19, i8* nonnull dereferenceable(1) %20) #11
  %111 = load i32, i32* %75, align 4
  %112 = load i32, i32* %77, align 4
  %113 = icmp slt i32 %112, 0
  %114 = select i1 %113, i32 -2147483648, i32 2147483647
  %115 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %111, i32 %112) #11
  %116 = extractvalue { i32, i1 } %115, 1
  %117 = extractvalue { i32, i1 } %115, 0
  %118 = select i1 %116, i32 %114, i32 %117, !prof !2
  %119 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %88, align 8
  %120 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %119, i64 0, i32 4
  %121 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %120 to i96*
  %122 = load i96, i96* %121, align 4
  %123 = and i96 %122, 33554432
  %124 = icmp eq i96 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %95
  %126 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %119, i64 0, i32 7
  %127 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %126, align 8
  %128 = icmp eq %"class.blink::LayoutObject"* %127, null
  br i1 %128, label %129, label %130

129:                                              ; preds = %125, %95
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #11
  br label %137

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %127, i64 0, i32 4
  %132 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %131 to i96*
  %133 = load i96, i96* %132, align 4
  %134 = and i96 %133, 67108864
  %135 = icmp eq i96 %134, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #11
  br i1 %135, label %137, label %136

136:                                              ; preds = %130
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #11
  br label %158

137:                                              ; preds = %129, %130
  store %"class.blink::LayoutObject"* %119, %"class.blink::LayoutObject"** %79, align 8
  %138 = load i32, i32* %104, align 4
  %139 = and i32 %138, 1
  %140 = icmp ne i32 %139, 0
  %141 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %13, i1 zeroext %140) #11
  %142 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %141, i64 0, i32 0, i32 9
  %143 = bitcast [20 x i8]* %142 to i160*
  %144 = load i160, i160* %143, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #11
  %145 = and i160 %144, 276701161105643274240
  %146 = icmp eq i160 %145, 110680464442257309696
  br i1 %146, label %147, label %151

147:                                              ; preds = %137
  %148 = load i32, i32* %85, align 4
  %149 = icmp slt i32 %148, %118
  br i1 %149, label %150, label %250

150:                                              ; preds = %147
  store i32 %118, i32* %85, align 4
  br label %250

151:                                              ; preds = %137
  %152 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %88, align 8
  %153 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %152, i64 0, i32 4
  %154 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %153 to i96*
  %155 = load i96, i96* %154, align 4
  %156 = and i96 %155, 33554432
  %157 = icmp eq i96 %156, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %136, %151
  %159 = phi %"class.blink::LayoutObject"* [ %119, %136 ], [ %152, %151 ]
  %160 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %159, i64 0, i32 7
  %161 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %160, align 8
  %162 = icmp eq %"class.blink::LayoutObject"* %161, null
  br i1 %162, label %163, label %165

163:                                              ; preds = %158, %151
  %164 = phi %"class.blink::LayoutObject"* [ %159, %158 ], [ %152, %151 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #11
  br label %172

165:                                              ; preds = %158
  %166 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %161, i64 0, i32 4
  %167 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %166 to i96*
  %168 = load i96, i96* %167, align 4
  %169 = and i96 %168, 67108864
  %170 = icmp eq i96 %169, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #11
  br i1 %170, label %172, label %171

171:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #11
  br label %187

172:                                              ; preds = %163, %165
  %173 = phi %"class.blink::LayoutObject"* [ %164, %163 ], [ %159, %165 ]
  store %"class.blink::LayoutObject"* %173, %"class.blink::LayoutObject"** %81, align 8
  %174 = load i32, i32* %104, align 4
  %175 = and i32 %174, 1
  %176 = icmp ne i32 %175, 0
  %177 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %14, i1 zeroext %176) #11
  %178 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %177, i64 0, i32 0, i32 9
  %179 = bitcast [20 x i8]* %178 to i160*
  %180 = load i160, i160* %179, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #11
  %181 = and i160 %180, 276701161105643274240
  %182 = icmp eq i160 %181, 129127208515966861312
  br i1 %182, label %183, label %187

183:                                              ; preds = %172
  %184 = load i32, i32* %84, align 4
  %185 = icmp slt i32 %184, %118
  br i1 %185, label %186, label %250

186:                                              ; preds = %183
  store i32 %118, i32* %84, align 4
  br label %250

187:                                              ; preds = %171, %172
  %188 = icmp eq %"class.blink::InlineFlowBox"* %102, null
  %189 = or i1 %188, %8
  br i1 %189, label %209, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %102, i64 0, i32 6
  %192 = load i32, i32* %191, align 8
  %193 = and i32 %192, 4
  %194 = icmp ne i32 %193, 0
  %195 = and i32 %192, 24
  %196 = icmp eq i32 %195, 24
  %197 = or i1 %194, %196
  br i1 %197, label %209, label %198

198:                                              ; preds = %190
  %199 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %102, i64 0, i32 0, i32 4, i32 0
  %200 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %199, align 8
  %201 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %200, i64 0, i32 4
  %202 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %201 to i96*
  %203 = load i96, i96* %202, align 4
  %204 = and i96 %203, 33554432
  %205 = icmp eq i96 %204, 0
  %206 = bitcast %"class.blink::LayoutObject"* %200 to %"class.blink::LayoutBoxModelObject"*
  %207 = select i1 %205, %"class.blink::LayoutBoxModelObject"* %206, %"class.blink::LayoutBoxModelObject"* null
  %208 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject34HasInlineDirectionBordersOrPaddingEv(%"class.blink::LayoutBoxModelObject"* %207) #11
  br i1 %208, label %209, label %252

209:                                              ; preds = %190, %187, %198
  %210 = load i32, i32* %104, align 4
  %211 = and i32 %210, 2048
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 5, i32 1, i32 0
  %214 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 5, i32 0, i32 0
  %215 = select i1 %212, i32* %214, i32* %213
  %216 = load i32, i32* %215, align 4
  %217 = load i32, i32* %75, align 4
  %218 = icmp sgt i32 %216, -1
  %219 = select i1 %218, i32 -2147483648, i32 2147483647
  %220 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %217, i32 %216) #11
  %221 = extractvalue { i32, i1 } %220, 1
  %222 = extractvalue { i32, i1 } %220, 0
  %223 = select i1 %221, i32 %219, i32 %222, !prof !2
  store i32 %223, i32* %75, align 4
  %224 = load i32, i32* %77, align 4
  %225 = icmp slt i32 %216, 0
  %226 = select i1 %225, i32 -2147483648, i32 2147483647
  %227 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %224, i32 %216) #11
  %228 = extractvalue { i32, i1 } %227, 1
  %229 = extractvalue { i32, i1 } %227, 0
  %230 = select i1 %228, i32 %226, i32 %229, !prof !2
  store i32 %230, i32* %77, align 4
  %231 = load i8, i8* %19, align 1, !range !3
  %232 = icmp eq i8 %231, 0
  br i1 %232, label %240, label %233

233:                                              ; preds = %209
  %234 = load i32, i32* %82, align 4
  %235 = icmp slt i32 %234, %223
  %236 = load i8, i8* %6, align 1
  %237 = icmp eq i8 %236, 0
  %238 = or i1 %235, %237
  br i1 %238, label %239, label %240

239:                                              ; preds = %233
  store i32 %223, i32* %82, align 4
  store i8 1, i8* %6, align 1
  br label %240

240:                                              ; preds = %233, %209, %239
  %241 = load i8, i8* %20, align 1, !range !3
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %250, label %243

243:                                              ; preds = %240
  %244 = load i32, i32* %83, align 4
  %245 = icmp slt i32 %244, %230
  %246 = load i8, i8* %7, align 1
  %247 = icmp eq i8 %246, 0
  %248 = or i1 %245, %247
  br i1 %248, label %249, label %250

249:                                              ; preds = %243
  store i32 %230, i32* %83, align 4
  store i8 1, i8* %7, align 1
  br label %250

250:                                              ; preds = %243, %240, %186, %183, %249, %147, %150
  %251 = icmp eq %"class.blink::InlineFlowBox"* %102, null
  br i1 %251, label %253, label %252

252:                                              ; preds = %198, %250
  call void @_ZN5blink13InlineFlowBox24ComputeLogicalBoxHeightsEPNS_13RootInlineBoxERNS_10LayoutUnitES4_S4_S4_RbS5_bRN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS6_6VectorIPKNS_14SimpleFontDataELj0ENS6_18PartitionAllocatorEEENS_13GlyphOverflowEEENS6_7PtrHashIS9_EENS6_10HashTraitsISA_EENSN_ISK_EESH_EENS_12FontBaselineERNS_21VerticalPositionCacheE(%"class.blink::InlineFlowBox"* nonnull %102, %"class.blink::RootInlineBox"* nonnull %1, %"class.blink::LayoutUnit"* dereferenceable(4) %2, %"class.blink::LayoutUnit"* dereferenceable(4) %3, %"class.blink::LayoutUnit"* dereferenceable(4) %4, %"class.blink::LayoutUnit"* dereferenceable(4) %5, i8* dereferenceable(1) %6, i8* dereferenceable(1) %7, i1 zeroext %8, %"class.WTF::HashMap.1681"* dereferenceable(24) %9, i32 %10, %"class.blink::VerticalPositionCache"* %11)
  br label %253

253:                                              ; preds = %250, %252
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %20) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %19) #11
  br label %254

254:                                              ; preds = %86, %253
  %255 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %87, i64 0, i32 1
  %256 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %255, align 8
  %257 = icmp eq %"class.blink::InlineBox"* %256, null
  br i1 %257, label %258, label %86

258:                                              ; preds = %254, %69, %68, %12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #11
  ret void
}

declare void @_ZNK5blink13RootInlineBox22AscentAndDescentForBoxEPNS_9InlineBoxERN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS6_EENS3_10HashTraitsIS7_EENSK_ISH_EESE_EERNS_10LayoutUnitESQ_RbSR_(%"class.blink::RootInlineBox"*, %"class.blink::InlineBox"*, %"class.WTF::HashMap.1681"* dereferenceable(24), %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), i8* dereferenceable(1), i8* dereferenceable(1)) local_unnamed_addr #3

declare i32 @_ZN5blink13RootInlineBox22VerticalPositionForBoxEPNS_9InlineBoxERNS_21VerticalPositionCacheE(%"class.blink::RootInlineBox"*, %"class.blink::InlineBox"*, %"class.blink::VerticalPositionCache"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox26PlaceBoxesInBlockDirectionENS_10LayoutUnitES1_S1_bRS1_S2_S2_RbS2_S2_S3_S3_NS_12FontBaselineE(%"class.blink::InlineFlowBox"*, i32, i32, i32, i1 zeroext, %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i8* nocapture dereferenceable(1), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1), i32) local_unnamed_addr #1 align 2 {
  %15 = alloca %"class.blink::LineLayoutItem", align 8
  %16 = alloca %"class.blink::LineLayoutItem", align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca %"class.blink::LineLayoutText", align 8
  %20 = alloca %"class.blink::LineLayoutItem", align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %"class.blink::LineLayoutItem", align 8
  %24 = alloca i32, align 4
  %25 = alloca %"class.blink::LineLayoutItem", align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %33 = bitcast %"class.blink::InlineFlowBox"* %0 to i1 (%"class.blink::InlineBox"*)***
  %34 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %33, align 8
  %35 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %34, i64 16
  %36 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %35, align 8
  %37 = tail call zeroext i1 %36(%"class.blink::InlineBox"* %32) #11
  br i1 %37, label %38, label %103

38:                                               ; preds = %14
  %39 = bitcast %"class.blink::LineLayoutItem"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #11
  %40 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %41 = bitcast %"class.blink::LayoutObject"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.blink::LineLayoutItem"* %20 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = and i32 %45, 1
  %47 = icmp ne i32 %46, 0
  %48 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %20, i1 zeroext %47)
  %49 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %48, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %50, i64 0, i32 1, i32 0, i32 0
  %52 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %52, i64 0, i32 1
  %54 = call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %53) #11
  %55 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %54, i64 0, i32 2
  %56 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %55, align 8
  %57 = icmp eq %"class.blink::SimpleFontData"* %56, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #11
  br label %63

59:                                               ; preds = %38
  %60 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %53, i64 0, i32 0
  %61 = call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %54, %"class.blink::FontDescription"* dereferenceable(80) %60) #11
  store %"class.blink::SimpleFontData"* %61, %"class.blink::SimpleFontData"** %55, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #11
  %62 = icmp eq %"class.blink::SimpleFontData"* %61, null
  br i1 %62, label %988, label %63

63:                                               ; preds = %58, %59
  %64 = phi %"class.blink::SimpleFontData"* [ %56, %58 ], [ %61, %59 ]
  %65 = icmp slt i32 %3, 0
  %66 = select i1 %65, i32 -2147483648, i32 2147483647
  %67 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %3) #11
  %68 = extractvalue { i32, i1 } %67, 1
  %69 = extractvalue { i32, i1 } %67, 0
  %70 = select i1 %68, i32 %66, i32 %69, !prof !2
  %71 = icmp eq i32 %13, 0
  %72 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %64, i64 0, i32 1, i32 9
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %80, label %74

74:                                               ; preds = %63
  %75 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %64, i64 0, i32 1, i32 10
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, %73
  %78 = sdiv i32 %77, 2
  %79 = sub nsw i32 %77, %78
  br label %80

80:                                               ; preds = %63, %74
  %81 = phi i32 [ %79, %74 ], [ %73, %63 ]
  %82 = icmp sgt i32 %81, 33554431
  br i1 %82, label %88, label %83

83:                                               ; preds = %80
  %84 = icmp slt i32 %81, -33554432
  br i1 %84, label %90, label %85

85:                                               ; preds = %83
  %86 = shl i32 %81, 6
  %87 = icmp sgt i32 %86, -1
  br i1 %87, label %88, label %90

88:                                               ; preds = %80, %85
  %89 = phi i32 [ %86, %85 ], [ 2147483647, %80 ]
  br label %90

90:                                               ; preds = %83, %85, %88
  %91 = phi i32 [ %89, %88 ], [ %86, %85 ], [ -2147483648, %83 ]
  %92 = phi i32 [ -2147483648, %88 ], [ 2147483647, %85 ], [ 2147483647, %83 ]
  %93 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %70, i32 %91) #11
  %94 = extractvalue { i32, i1 } %93, 1
  %95 = extractvalue { i32, i1 } %93, 0
  %96 = select i1 %94, i32 %92, i32 %95, !prof !2
  %97 = load i32, i32* %44, align 4
  %98 = and i32 %97, 2048
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %101 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %102 = select i1 %99, i32* %100, i32* %101
  store i32 %96, i32* %102, align 4
  br label %103

103:                                              ; preds = %90, %14
  %104 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %105 = load i32, i32* %104, align 8
  %106 = and i32 %105, 16
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %194, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %110 = load i32, i32* %109, align 4
  %111 = and i32 %110, 2048
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %114 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %115 = select i1 %112, i32* %114, i32* %113
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %118 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %117, align 8
  %119 = icmp eq %"class.blink::InlineFlowBox"* %118, null
  br i1 %119, label %194, label %120

120:                                              ; preds = %108
  %121 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %122 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %121, align 8
  %123 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %122, i64 0, i32 4
  %124 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %123 to i96*
  %125 = load i96, i96* %124, align 4
  %126 = and i96 %125, 33554432
  %127 = icmp eq i96 %126, 0
  %128 = bitcast %"class.blink::LayoutObject"* %122 to %"class.blink::LayoutBoxModelObject"*
  %129 = select i1 %127, %"class.blink::LayoutBoxModelObject"* %128, %"class.blink::LayoutBoxModelObject"* null
  %130 = getelementptr inbounds %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutBoxModelObject"* %129, i64 0, i32 0, i32 5, i32 0
  %131 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %130, align 8, !noalias !4
  %132 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %131, i64 0, i32 0, i32 9
  %133 = bitcast [20 x i8]* %132 to i160*
  %134 = load i160, i160* %133, align 8, !noalias !4
  %135 = bitcast %"class.blink::LayoutBoxModelObject"* %129 to i8*
  %136 = and i160 %134, 15211807202738752817960438464512
  %137 = icmp eq i160 %136, 0
  %138 = select i1 %137, { i64, i64 } { i64 977, i64 0 }, { i64, i64 } { i64 1001, i64 0 }
  %139 = extractvalue { i64, i64 } %138, 1
  %140 = getelementptr inbounds i8, i8* %135, i64 %139
  %141 = bitcast i8* %140 to %"class.blink::LayoutBoxModelObject"*
  %142 = extractvalue { i64, i64 } %138, 0
  %143 = and i64 %142, 1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %120
  %146 = bitcast i8* %140 to i8**
  %147 = load i8*, i8** %146, align 8
  %148 = add i64 %142, -1
  %149 = getelementptr i8, i8* %147, i64 %148
  %150 = bitcast i8* %149 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %151 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %150, align 8
  br label %154

152:                                              ; preds = %120
  %153 = inttoptr i64 %142 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %151, %145 ], [ %153, %152 ]
  %156 = call i32 %155(%"class.blink::LayoutBoxModelObject"* %141) #11
  %157 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %130, align 8, !noalias !7
  %158 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %157, i64 0, i32 0, i32 9
  %159 = bitcast [20 x i8]* %158 to i160*
  %160 = load i160, i160* %159, align 8, !noalias !7
  %161 = and i160 %160, 15211807202738752817960438464512
  %162 = icmp eq i160 %161, 0
  %163 = select i1 %162, { i64, i64 } { i64 945, i64 0 }, { i64, i64 } { i64 969, i64 0 }
  %164 = extractvalue { i64, i64 } %163, 1
  %165 = getelementptr inbounds i8, i8* %135, i64 %164
  %166 = bitcast i8* %165 to %"class.blink::LayoutBoxModelObject"*
  %167 = extractvalue { i64, i64 } %163, 0
  %168 = and i64 %167, 1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %177, label %170

170:                                              ; preds = %154
  %171 = bitcast i8* %165 to i8**
  %172 = load i8*, i8** %171, align 8
  %173 = add i64 %167, -1
  %174 = getelementptr i8, i8* %172, i64 %173
  %175 = bitcast i8* %174 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %176 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %175, align 8
  br label %179

177:                                              ; preds = %154
  %178 = inttoptr i64 %167 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %179

179:                                              ; preds = %170, %177
  %180 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %176, %170 ], [ %178, %177 ]
  %181 = call i32 %180(%"class.blink::LayoutBoxModelObject"* %166) #11
  %182 = icmp slt i32 %181, 0
  %183 = select i1 %182, i32 -2147483648, i32 2147483647
  %184 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %156, i32 %181) #11
  %185 = extractvalue { i32, i1 } %184, 1
  %186 = extractvalue { i32, i1 } %184, 0
  %187 = select i1 %185, i32 %183, i32 %186, !prof !2
  %188 = icmp slt i32 %187, 0
  %189 = select i1 %188, i32 -2147483648, i32 2147483647
  %190 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %116, i32 %187) #11
  %191 = extractvalue { i32, i1 } %190, 1
  %192 = extractvalue { i32, i1 } %190, 0
  %193 = select i1 %191, i32 %189, i32 %192, !prof !2
  br label %194

194:                                              ; preds = %103, %108, %179
  %195 = phi i32 [ %116, %108 ], [ %193, %179 ], [ 0, %103 ]
  %196 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %197 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %196, align 8
  %198 = icmp eq %"class.blink::InlineBox"* %197, null
  br i1 %198, label %244, label %199

199:                                              ; preds = %194
  %200 = bitcast i64* %17 to %"class.blink::LayoutSize"*
  %201 = bitcast i64* %17 to i8*
  %202 = zext i32 %195 to i64
  %203 = shl nuw i64 %202, 32
  %204 = bitcast %"class.blink::LineLayoutItem"* %16 to i8*
  %205 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %16, i64 0, i32 0
  %206 = bitcast %"class.blink::LineLayoutItem"* %15 to i8*
  %207 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %15, i64 0, i32 0
  %208 = xor i1 %4, true
  %209 = icmp slt i32 %1, 0
  %210 = select i1 %209, i32 -2147483648, i32 2147483647
  %211 = icmp slt i32 %2, 0
  %212 = select i1 %211, i32 -2147483648, i32 2147483647
  %213 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %2) #11
  %214 = extractvalue { i32, i1 } %213, 1
  %215 = extractvalue { i32, i1 } %213, 0
  %216 = select i1 %214, i32 %212, i32 %215
  %217 = bitcast i32* %21 to i8*
  %218 = bitcast i32* %22 to i8*
  %219 = bitcast %"class.blink::LineLayoutItem"* %23 to i8*
  %220 = bitcast %"class.blink::LineLayoutItem"* %23 to i64*
  %221 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %222 = icmp eq i32 %13, 0
  %223 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %224 = bitcast i32* %24 to i8*
  %225 = bitcast %"class.blink::LineLayoutItem"* %25 to i8*
  %226 = bitcast %"class.blink::LineLayoutItem"* %25 to i64*
  %227 = bitcast i32* %18 to i8*
  %228 = bitcast %"class.blink::LineLayoutText"* %19 to i8*
  %229 = bitcast %"class.blink::LineLayoutText"* %19 to i64*
  %230 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %19, i64 0, i32 0
  %231 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  %232 = bitcast i32* %21 to %"class.blink::LayoutUnit"*
  %233 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  %234 = bitcast i32* %22 to %"class.blink::LayoutUnit"*
  %235 = bitcast i32* %26 to i8*
  %236 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %7, i64 0, i32 0
  %237 = bitcast i32* %26 to %"class.blink::LayoutUnit"*
  %238 = bitcast i32* %27 to i8*
  %239 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %6, i64 0, i32 0
  %240 = bitcast i32* %27 to %"class.blink::LayoutUnit"*
  %241 = bitcast i32* %28 to i8*
  %242 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %10, i64 0, i32 0
  %243 = bitcast i32* %28 to %"class.blink::LayoutUnit"*
  br label %245

244:                                              ; preds = %874, %194
  br i1 %37, label %878, label %988

245:                                              ; preds = %199, %874
  %246 = phi %"class.blink::InlineBox"* [ %197, %199 ], [ %876, %874 ]
  %247 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 4, i32 0
  %248 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %249 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %248, i64 0, i32 4
  %250 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %249 to i96*
  %251 = load i96, i96* %250, align 4
  %252 = and i96 %251, 113336795588871485128704
  %253 = icmp eq i96 %252, 75557863725914323419136
  br i1 %253, label %874, label %254

254:                                              ; preds = %245
  %255 = load i32, i32* %104, align 8
  %256 = and i32 %255, 16
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %268, label %258

258:                                              ; preds = %254
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %201) #11
  %259 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 7, i32 0
  %260 = load i32, i32* %259, align 4
  %261 = and i32 %260, 2048
  %262 = icmp eq i32 %261, 0
  %263 = select i1 %262, i64 %202, i64 %203
  store i64 %263, i64* %17, align 8
  %264 = bitcast %"class.blink::InlineBox"* %246 to void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)***
  %265 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)**, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*** %264, align 8
  %266 = getelementptr inbounds void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %265, i64 10
  %267 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %266, align 8
  call void %267(%"class.blink::InlineBox"* nonnull %246, %"class.blink::LayoutSize"* nonnull dereferenceable(8) %200) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %201) #11
  br label %874

268:                                              ; preds = %254
  %269 = bitcast %"class.blink::InlineBox"* %246 to i1 (%"class.blink::InlineBox"*)***
  %270 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %269, align 8
  %271 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %270, i64 14
  %272 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %271, align 8
  %273 = call zeroext i1 %272(%"class.blink::InlineBox"* nonnull %246) #11
  %274 = bitcast %"class.blink::InlineBox"* %246 to %"class.blink::InlineFlowBox"*
  %275 = select i1 %273, %"class.blink::InlineFlowBox"* %274, %"class.blink::InlineFlowBox"* null
  %276 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %277 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %276, i64 0, i32 4
  %278 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %277 to i96*
  %279 = load i96, i96* %278, align 4
  %280 = and i96 %279, 33554432
  %281 = icmp eq i96 %280, 0
  br i1 %281, label %286, label %282

282:                                              ; preds = %268
  %283 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %276, i64 0, i32 7
  %284 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %283, align 8
  %285 = icmp eq %"class.blink::LayoutObject"* %284, null
  br i1 %285, label %286, label %287

286:                                              ; preds = %282, %268
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #11
  br label %294

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %284, i64 0, i32 4
  %289 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %288 to i96*
  %290 = load i96, i96* %289, align 4
  %291 = and i96 %290, 67108864
  %292 = icmp eq i96 %291, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #11
  br i1 %292, label %294, label %293

293:                                              ; preds = %287
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #11
  br label %320

294:                                              ; preds = %286, %287
  store %"class.blink::LayoutObject"* %276, %"class.blink::LayoutObject"** %205, align 8
  %295 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 7, i32 0
  %296 = load i32, i32* %295, align 4
  %297 = and i32 %296, 1
  %298 = icmp ne i32 %297, 0
  %299 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %16, i1 zeroext %298) #11
  %300 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %299, i64 0, i32 0, i32 9
  %301 = bitcast [20 x i8]* %300 to i160*
  %302 = load i160, i160* %301, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #11
  %303 = and i160 %302, 276701161105643274240
  %304 = icmp eq i160 %303, 110680464442257309696
  br i1 %304, label %305, label %313

305:                                              ; preds = %294
  %306 = load i32, i32* %295, align 4
  %307 = and i32 %306, 2048
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %311, label %309

309:                                              ; preds = %305
  %310 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 1, i32 0
  store i32 %1, i32* %310, align 4
  br label %419

311:                                              ; preds = %305
  %312 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 0, i32 0
  store i32 %1, i32* %312, align 4
  br label %419

313:                                              ; preds = %294
  %314 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %315 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %314, i64 0, i32 4
  %316 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %315 to i96*
  %317 = load i96, i96* %316, align 4
  %318 = and i96 %317, 33554432
  %319 = icmp eq i96 %318, 0
  br i1 %319, label %325, label %320

320:                                              ; preds = %293, %313
  %321 = phi %"class.blink::LayoutObject"* [ %276, %293 ], [ %314, %313 ]
  %322 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %321, i64 0, i32 7
  %323 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %322, align 8
  %324 = icmp eq %"class.blink::LayoutObject"* %323, null
  br i1 %324, label %325, label %327

325:                                              ; preds = %320, %313
  %326 = phi %"class.blink::LayoutObject"* [ %321, %320 ], [ %314, %313 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #11
  br label %334

327:                                              ; preds = %320
  %328 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %323, i64 0, i32 4
  %329 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %328 to i96*
  %330 = load i96, i96* %329, align 4
  %331 = and i96 %330, 67108864
  %332 = icmp eq i96 %331, 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #11
  br i1 %332, label %334, label %333

333:                                              ; preds = %327
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #11
  br label %365

334:                                              ; preds = %325, %327
  %335 = phi %"class.blink::LayoutObject"* [ %326, %325 ], [ %321, %327 ]
  store %"class.blink::LayoutObject"* %335, %"class.blink::LayoutObject"** %207, align 8
  %336 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 7, i32 0
  %337 = load i32, i32* %336, align 4
  %338 = and i32 %337, 1
  %339 = icmp ne i32 %338, 0
  %340 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %15, i1 zeroext %339) #11
  %341 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %340, i64 0, i32 0, i32 9
  %342 = bitcast [20 x i8]* %341 to i160*
  %343 = load i160, i160* %342, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #11
  %344 = and i160 %343, 276701161105643274240
  %345 = icmp eq i160 %344, 129127208515966861312
  br i1 %345, label %346, label %365

346:                                              ; preds = %334
  %347 = bitcast %"class.blink::InlineBox"* %246 to i32 (%"class.blink::InlineBox"*)***
  %348 = load i32 (%"class.blink::InlineBox"*)**, i32 (%"class.blink::InlineBox"*)*** %347, align 8
  %349 = getelementptr inbounds i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %348, i64 24
  %350 = load i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %349, align 8
  %351 = call i32 %350(%"class.blink::InlineBox"* nonnull %246) #11
  %352 = icmp sgt i32 %351, -1
  %353 = select i1 %352, i32 -2147483648, i32 2147483647
  %354 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %216, i32 %351) #11
  %355 = extractvalue { i32, i1 } %354, 1
  %356 = extractvalue { i32, i1 } %354, 0
  %357 = select i1 %355, i32 %353, i32 %356, !prof !2
  %358 = load i32, i32* %336, align 4
  %359 = and i32 %358, 2048
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %363, label %361

361:                                              ; preds = %346
  %362 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 1, i32 0
  store i32 %357, i32* %362, align 4
  br label %419

363:                                              ; preds = %346
  %364 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 0, i32 0
  store i32 %357, i32* %364, align 4
  br label %419

365:                                              ; preds = %333, %334
  %366 = and i1 %273, %208
  br i1 %366, label %367, label %386

367:                                              ; preds = %365
  %368 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %275, i64 0, i32 6
  %369 = load i32, i32* %368, align 8
  %370 = and i32 %369, 4
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %386

372:                                              ; preds = %367
  %373 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %374 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %373, i64 0, i32 4
  %375 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %374 to i96*
  %376 = load i96, i96* %375, align 4
  %377 = and i96 %376, 33554432
  %378 = icmp eq i96 %377, 0
  %379 = bitcast %"class.blink::LayoutObject"* %373 to %"class.blink::LayoutBoxModelObject"*
  %380 = select i1 %378, %"class.blink::LayoutBoxModelObject"* %379, %"class.blink::LayoutBoxModelObject"* null
  %381 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject34HasInlineDirectionBordersOrPaddingEv(%"class.blink::LayoutBoxModelObject"* %380) #11
  br i1 %381, label %386, label %382

382:                                              ; preds = %372
  %383 = load i32, i32* %368, align 8
  %384 = and i32 %383, 24
  %385 = icmp eq i32 %384, 24
  br label %386

386:                                              ; preds = %367, %382, %365, %372
  %387 = phi i1 [ true, %372 ], [ true, %367 ], [ true, %365 ], [ %385, %382 ]
  %388 = bitcast %"class.blink::InlineBox"* %246 to i32 (%"class.blink::InlineBox"*, i32)***
  %389 = load i32 (%"class.blink::InlineBox"*, i32)**, i32 (%"class.blink::InlineBox"*, i32)*** %388, align 8
  %390 = getelementptr inbounds i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %389, i64 23
  %391 = load i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %390, align 8
  %392 = call i32 %391(%"class.blink::InlineBox"* nonnull %246, i32 %13) #11
  %393 = icmp sgt i32 %392, -1
  %394 = select i1 %393, i32 -2147483648, i32 2147483647
  %395 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %392) #11
  %396 = extractvalue { i32, i1 } %395, 1
  %397 = extractvalue { i32, i1 } %395, 0
  %398 = select i1 %396, i32 %394, i32 %397, !prof !2
  %399 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 7, i32 0
  %400 = load i32, i32* %399, align 4
  %401 = and i32 %400, 2048
  %402 = icmp eq i32 %401, 0
  %403 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 1, i32 0
  %404 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 0, i32 0
  %405 = select i1 %402, i32* %404, i32* %403
  %406 = load i32, i32* %405, align 4
  %407 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %406, i32 %1) #11
  %408 = extractvalue { i32, i1 } %407, 1
  %409 = extractvalue { i32, i1 } %407, 0
  %410 = select i1 %408, i32 %210, i32 %409, !prof !2
  %411 = icmp slt i32 %398, 0
  %412 = select i1 %411, i32 -2147483648, i32 2147483647
  %413 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %410, i32 %398) #11
  %414 = extractvalue { i32, i1 } %413, 1
  %415 = extractvalue { i32, i1 } %413, 0
  %416 = select i1 %414, i32 %412, i32 %415, !prof !2
  br i1 %402, label %418, label %417

417:                                              ; preds = %386
  store i32 %416, i32* %403, align 4
  br label %419

418:                                              ; preds = %386
  store i32 %416, i32* %404, align 4
  br label %419

419:                                              ; preds = %418, %417, %363, %361, %311, %309
  %420 = phi i32 [ 0, %418 ], [ %401, %417 ], [ 0, %363 ], [ %359, %361 ], [ 0, %311 ], [ %307, %309 ]
  %421 = phi i1 [ %387, %418 ], [ %387, %417 ], [ true, %363 ], [ true, %361 ], [ true, %311 ], [ true, %309 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %217)
  store i32 -1431655766, i32* %21, align 4
  %422 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 7, i32 0
  %423 = icmp eq i32 %420, 0
  %424 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 1, i32 0
  %425 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 5, i32 0, i32 0
  %426 = select i1 %423, i32* %425, i32* %424
  %427 = load i32, i32* %426, align 4
  store i32 %427, i32* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %218)
  store i32 %427, i32* %22, align 4
  %428 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %246) #11
  %429 = load i32, i32* %422, align 4
  %430 = and i32 %429, 131072
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %432, label %437

432:                                              ; preds = %419
  %433 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %269, align 8
  %434 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %433, i64 14
  %435 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %434, align 8
  %436 = call zeroext i1 %435(%"class.blink::InlineBox"* nonnull %246) #11
  br i1 %436, label %437, label %571

437:                                              ; preds = %419, %432
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %219) #11
  %438 = bitcast %"class.blink::LayoutObject"** %247 to i64*
  %439 = load i64, i64* %438, align 8
  store i64 %439, i64* %220, align 8
  %440 = load i32, i32* %221, align 4
  %441 = and i32 %440, 1
  %442 = icmp ne i32 %441, 0
  %443 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %23, i1 zeroext %442)
  %444 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %443, i64 0, i32 0, i32 0, i32 0, i32 0
  %445 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %444, align 8
  %446 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %445, i64 0, i32 1, i32 0, i32 0
  %447 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %446, align 8
  %448 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %447, i64 0, i32 1
  %449 = call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %448) #11
  %450 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %449, i64 0, i32 2
  %451 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %450, align 8
  %452 = icmp eq %"class.blink::SimpleFontData"* %451, null
  br i1 %452, label %454, label %453

453:                                              ; preds = %437
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %219) #11
  br label %458

454:                                              ; preds = %437
  %455 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %448, i64 0, i32 0
  %456 = call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %449, %"class.blink::FontDescription"* dereferenceable(80) %455) #11
  store %"class.blink::SimpleFontData"* %456, %"class.blink::SimpleFontData"** %450, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %219) #11
  %457 = icmp eq %"class.blink::SimpleFontData"* %456, null
  br i1 %457, label %873, label %458

458:                                              ; preds = %453, %454
  %459 = phi %"class.blink::SimpleFontData"* [ %451, %453 ], [ %456, %454 ]
  %460 = bitcast %"class.blink::InlineBox"* %246 to i32 (%"class.blink::InlineBox"*, i32)***
  %461 = load i32 (%"class.blink::InlineBox"*, i32)**, i32 (%"class.blink::InlineBox"*, i32)*** %460, align 8
  %462 = getelementptr inbounds i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %461, i64 23
  %463 = load i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %462, align 8
  %464 = call i32 %463(%"class.blink::InlineBox"* nonnull %246, i32 %13) #11
  %465 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %459, i64 0, i32 1, i32 9
  %466 = load i32, i32* %465, align 4
  br i1 %222, label %473, label %467

467:                                              ; preds = %458
  %468 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %459, i64 0, i32 1, i32 10
  %469 = load i32, i32* %468, align 4
  %470 = add nsw i32 %469, %466
  %471 = sdiv i32 %470, 2
  %472 = sub nsw i32 %470, %471
  br label %473

473:                                              ; preds = %458, %467
  %474 = phi i32 [ %472, %467 ], [ %466, %458 ]
  %475 = icmp sgt i32 %474, 33554431
  br i1 %475, label %481, label %476

476:                                              ; preds = %473
  %477 = icmp slt i32 %474, -33554432
  br i1 %477, label %483, label %478

478:                                              ; preds = %476
  %479 = shl i32 %474, 6
  %480 = icmp sgt i32 %479, -1
  br i1 %480, label %481, label %483

481:                                              ; preds = %473, %478
  %482 = phi i32 [ %479, %478 ], [ 2147483647, %473 ]
  br label %483

483:                                              ; preds = %476, %478, %481
  %484 = phi i32 [ %482, %481 ], [ %479, %478 ], [ -2147483648, %476 ]
  %485 = phi i32 [ -2147483648, %481 ], [ 2147483647, %478 ], [ 2147483647, %476 ]
  %486 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %464, i32 %484) #11
  %487 = extractvalue { i32, i1 } %486, 1
  %488 = extractvalue { i32, i1 } %486, 0
  %489 = select i1 %487, i32 %485, i32 %488, !prof !2
  %490 = icmp slt i32 %489, 0
  %491 = select i1 %490, i32 -2147483648, i32 2147483647
  %492 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %427, i32 %489) #11
  %493 = extractvalue { i32, i1 } %492, 1
  %494 = extractvalue { i32, i1 } %492, 0
  %495 = select i1 %493, i32 %491, i32 %494, !prof !2
  store i32 %495, i32* %21, align 4
  %496 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %269, align 8
  %497 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %496, i64 14
  %498 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %497, align 8
  %499 = call zeroext i1 %498(%"class.blink::InlineBox"* nonnull %246) #11
  br i1 %499, label %500, label %568

500:                                              ; preds = %483
  %501 = bitcast %"class.blink::LayoutObject"** %247 to %"class.blink::LayoutBoxModelObject"**
  %502 = load %"class.blink::LayoutBoxModelObject"*, %"class.blink::LayoutBoxModelObject"** %501, align 8
  %503 = getelementptr inbounds %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutBoxModelObject"* %502, i64 0, i32 0, i32 5, i32 0
  %504 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %503, align 8, !noalias !10
  %505 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %504, i64 0, i32 0, i32 9
  %506 = bitcast [20 x i8]* %505 to i160*
  %507 = load i160, i160* %506, align 8, !noalias !10
  %508 = bitcast %"class.blink::LayoutBoxModelObject"* %502 to i8*
  %509 = and i160 %507, 15211807202738752817960438464512
  %510 = icmp eq i160 %509, 0
  %511 = select i1 %510, { i64, i64 } { i64 977, i64 0 }, { i64, i64 } { i64 1001, i64 0 }
  %512 = extractvalue { i64, i64 } %511, 1
  %513 = getelementptr inbounds i8, i8* %508, i64 %512
  %514 = bitcast i8* %513 to %"class.blink::LayoutBoxModelObject"*
  %515 = extractvalue { i64, i64 } %511, 0
  %516 = and i64 %515, 1
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %525, label %518

518:                                              ; preds = %500
  %519 = bitcast i8* %513 to i8**
  %520 = load i8*, i8** %519, align 8
  %521 = add i64 %515, -1
  %522 = getelementptr i8, i8* %520, i64 %521
  %523 = bitcast i8* %522 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %524 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %523, align 8
  br label %527

525:                                              ; preds = %500
  %526 = inttoptr i64 %515 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %527

527:                                              ; preds = %525, %518
  %528 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %524, %518 ], [ %526, %525 ]
  %529 = call i32 %528(%"class.blink::LayoutBoxModelObject"* %514) #11
  %530 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %503, align 8, !noalias !13
  %531 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %530, i64 0, i32 0, i32 9
  %532 = bitcast [20 x i8]* %531 to i160*
  %533 = load i160, i160* %532, align 8, !noalias !13
  %534 = and i160 %533, 15211807202738752817960438464512
  %535 = icmp eq i160 %534, 0
  %536 = select i1 %535, { i64, i64 } { i64 945, i64 0 }, { i64, i64 } { i64 969, i64 0 }
  %537 = extractvalue { i64, i64 } %536, 1
  %538 = getelementptr inbounds i8, i8* %508, i64 %537
  %539 = bitcast i8* %538 to %"class.blink::LayoutBoxModelObject"*
  %540 = extractvalue { i64, i64 } %536, 0
  %541 = and i64 %540, 1
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %550, label %543

543:                                              ; preds = %527
  %544 = bitcast i8* %538 to i8**
  %545 = load i8*, i8** %544, align 8
  %546 = add i64 %540, -1
  %547 = getelementptr i8, i8* %545, i64 %546
  %548 = bitcast i8* %547 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %549 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %548, align 8
  br label %552

550:                                              ; preds = %527
  %551 = inttoptr i64 %540 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %552

552:                                              ; preds = %543, %550
  %553 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %549, %543 ], [ %551, %550 ]
  %554 = call i32 %553(%"class.blink::LayoutBoxModelObject"* %539) #11
  %555 = icmp slt i32 %554, 0
  %556 = select i1 %555, i32 -2147483648, i32 2147483647
  %557 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %529, i32 %554) #11
  %558 = extractvalue { i32, i1 } %557, 1
  %559 = extractvalue { i32, i1 } %557, 0
  %560 = select i1 %558, i32 %556, i32 %559, !prof !2
  %561 = icmp sgt i32 %560, -1
  %562 = select i1 %561, i32 -2147483648, i32 2147483647
  %563 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %495, i32 %560) #11
  %564 = extractvalue { i32, i1 } %563, 1
  %565 = extractvalue { i32, i1 } %563, 0
  %566 = select i1 %564, i32 %562, i32 %565, !prof !2
  store i32 %566, i32* %21, align 4
  %567 = call i32 @_ZNK5blink20LayoutBoxModelObject29BorderAndPaddingLogicalHeightEv(%"class.blink::LayoutBoxModelObject"* %502) #11
  br label %568

568:                                              ; preds = %552, %483
  %569 = phi i32 [ %566, %552 ], [ %495, %483 ]
  %570 = phi i32 [ %567, %552 ], [ 0, %483 ]
  store i32 %569, i32* %22, align 4
  br label %629

571:                                              ; preds = %432
  %572 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %573 = bitcast %"class.blink::LayoutObject"* %572 to i1 (%"class.blink::LayoutObject"*, i32)***
  %574 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %573, align 8
  %575 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %574, i64 92
  %576 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %575, align 8
  %577 = call zeroext i1 %576(%"class.blink::LayoutObject"* %572, i32 0) #11
  br i1 %577, label %629, label %578

578:                                              ; preds = %571
  %579 = bitcast %"class.blink::LayoutObject"** %247 to i64*
  %580 = load i64, i64* %579, align 8
  store i32 %427, i32* %22, align 4
  %581 = load i32, i32* %422, align 4
  %582 = and i32 %581, 2048
  %583 = icmp eq i32 %582, 0
  %584 = inttoptr i64 %580 to %"class.blink::LayoutBoxModelObject"*
  %585 = inttoptr i64 %580 to i32 (%"class.blink::LayoutBoxModelObject"*)***
  %586 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %585, align 8
  br i1 %583, label %591, label %587

587:                                              ; preds = %578
  %588 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %586, i64 127
  %589 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %588, align 8
  %590 = call i32 %589(%"class.blink::LayoutBoxModelObject"* %584) #11
  br label %595

591:                                              ; preds = %578
  %592 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %586, i64 130
  %593 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %592, align 8
  %594 = call i32 %593(%"class.blink::LayoutBoxModelObject"* %584) #11
  br label %595

595:                                              ; preds = %591, %587
  %596 = phi i32 [ %594, %591 ], [ %590, %587 ]
  %597 = load i32, i32* %422, align 4
  %598 = and i32 %597, 2048
  %599 = icmp eq i32 %598, 0
  %600 = load i32 (%"class.blink::LayoutBoxModelObject"*)**, i32 (%"class.blink::LayoutBoxModelObject"*)*** %585, align 8
  br i1 %599, label %605, label %601

601:                                              ; preds = %595
  %602 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %600, i64 128
  %603 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %602, align 8
  %604 = call i32 %603(%"class.blink::LayoutBoxModelObject"* %584) #11
  br label %609

605:                                              ; preds = %595
  %606 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %600, i64 129
  %607 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %606, align 8
  %608 = call i32 %607(%"class.blink::LayoutBoxModelObject"* %584) #11
  br label %609

609:                                              ; preds = %605, %601
  %610 = phi i32 [ %608, %605 ], [ %604, %601 ]
  %611 = icmp slt i32 %596, 0
  %612 = select i1 %611, i32 -2147483648, i32 2147483647
  %613 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %427, i32 %596) #11
  %614 = extractvalue { i32, i1 } %613, 1
  %615 = extractvalue { i32, i1 } %613, 0
  %616 = select i1 %614, i32 %612, i32 %615, !prof !2
  store i32 %616, i32* %21, align 4
  %617 = icmp slt i32 %610, 0
  %618 = select i1 %617, i32 -2147483648, i32 2147483647
  %619 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %596, i32 %610) #11
  %620 = extractvalue { i32, i1 } %619, 1
  %621 = extractvalue { i32, i1 } %619, 0
  %622 = select i1 %620, i32 %618, i32 %621, !prof !2
  %623 = icmp slt i32 %622, 0
  %624 = select i1 %623, i32 -2147483648, i32 2147483647
  %625 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %428, i32 %622) #11
  %626 = extractvalue { i32, i1 } %625, 1
  %627 = extractvalue { i32, i1 } %625, 0
  %628 = select i1 %626, i32 %624, i32 %627, !prof !2
  br label %629

629:                                              ; preds = %568, %571, %609
  %630 = phi i32 [ %569, %568 ], [ %427, %571 ], [ %427, %609 ]
  %631 = phi i32 [ %569, %568 ], [ %427, %571 ], [ %616, %609 ]
  %632 = phi i32 [ %570, %568 ], [ 0, %571 ], [ 0, %609 ]
  %633 = phi i32 [ %428, %568 ], [ %428, %571 ], [ %628, %609 ]
  %634 = load i32, i32* %422, align 4
  %635 = and i32 %634, 2048
  %636 = icmp eq i32 %635, 0
  %637 = select i1 %636, i32* %425, i32* %424
  store i32 %631, i32* %637, align 4
  br i1 %421, label %638, label %870

638:                                              ; preds = %629
  %639 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %640 = bitcast %"class.blink::LayoutObject"* %639 to i1 (%"class.blink::LayoutObject"*, i32)***
  %641 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %640, align 8
  %642 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %641, i64 92
  %643 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %642, align 8
  %644 = call zeroext i1 %643(%"class.blink::LayoutObject"* %639, i32 42) #11
  br i1 %644, label %645, label %767

645:                                              ; preds = %638
  %646 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %223, align 8
  %647 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %646, i64 0, i32 5, i32 0
  %648 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %647, align 8
  %649 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %648, i64 0, i32 0, i32 9
  %650 = bitcast [20 x i8]* %649 to i160*
  %651 = load i160, i160* %650, align 8
  %652 = and i160 %651, 15211807202738752817960438464512
  %653 = icmp ne i160 %652, 10141204801825835211973625643008
  %654 = zext i1 %653 to i32
  %655 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %247, align 8
  %656 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %655, i64 0, i32 5, i32 0
  %657 = bitcast %"class.blink::ComputedStyle"** %656 to %"class.blink::ComputedStyleBase"**
  %658 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %657, align 8
  %659 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %658, i64 0, i32 1, i32 0, i32 0
  %660 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %659, align 8
  %661 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %660, i64 0, i32 3, i32 0, i32 0
  %662 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"** %661, align 8
  %663 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* %662, i64 0, i32 3
  %664 = load i8, i8* %663, align 2
  %665 = lshr i8 %664, 3
  %666 = and i8 %665, 1
  %667 = zext i8 %666 to i32
  %668 = icmp eq i32 %667, %654
  %669 = select i1 %668, i8* %11, i8* %12
  store i8 1, i8* %669, align 1
  %670 = bitcast %"class.blink::LayoutObject"** %247 to %"class.blink::LayoutRubyRun"**
  %671 = load %"class.blink::LayoutRubyRun"*, %"class.blink::LayoutRubyRun"** %670, align 8
  %672 = call %"class.blink::LayoutRubyBase"* @_ZNK5blink13LayoutRubyRun8RubyBaseEv(%"class.blink::LayoutRubyRun"* %671) #11
  %673 = icmp eq %"class.blink::LayoutRubyBase"* %672, null
  br i1 %673, label %767, label %674

674:                                              ; preds = %645
  %675 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %246) #11
  %676 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0
  %677 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %676, align 8
  %678 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %677, i64 0, i32 0, i32 9
  %679 = bitcast [20 x i8]* %678 to i160*
  %680 = load i160, i160* %679, align 8
  %681 = and i160 %680, 15211807202738752817960438464512
  %682 = icmp eq i160 %681, 0
  %683 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  %684 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %685 = select i1 %682, i32* %683, i32* %684
  %686 = load i32, i32* %685, align 4
  %687 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 1, i32 0
  %688 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %689 = select i1 %682, i32* %687, i32* %688
  %690 = load i32, i32* %689, align 4
  %691 = icmp slt i32 %690, 0
  %692 = select i1 %691, i32 -2147483648, i32 2147483647
  %693 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %686, i32 %690) #11
  %694 = extractvalue { i32, i1 } %693, 1
  %695 = extractvalue { i32, i1 } %693, 0
  %696 = select i1 %694, i32 %692, i32 %695, !prof !2
  %697 = icmp sgt i32 %696, -1
  %698 = select i1 %697, i32 -2147483648, i32 2147483647
  %699 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %675, i32 %696) #11
  %700 = extractvalue { i32, i1 } %699, 1
  %701 = extractvalue { i32, i1 } %699, 0
  %702 = select i1 %700, i32 %698, i32 %701, !prof !2
  %703 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %702, i32 %690) #11
  %704 = extractvalue { i32, i1 } %703, 1
  %705 = extractvalue { i32, i1 } %703, 0
  %706 = select i1 %704, i32 %692, i32 %705, !prof !2
  %707 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 1, i32 0, i32 1
  %708 = bitcast %"class.blink::InlineFlowBox"** %707 to %"class.blink::RootInlineBox"**
  %709 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %708, align 8
  %710 = icmp eq %"class.blink::RootInlineBox"* %709, null
  br i1 %710, label %715, label %711

711:                                              ; preds = %674
  %712 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %709, i64 0, i32 6, i32 0
  %713 = load i32, i32* %712, align 4
  %714 = icmp sgt i32 %713, -1
  br i1 %714, label %715, label %717

715:                                              ; preds = %674, %711
  %716 = phi i32 [ %713, %711 ], [ 0, %674 ]
  br label %717

717:                                              ; preds = %711, %715
  %718 = phi i32 [ %716, %715 ], [ %713, %711 ]
  %719 = phi i32 [ -2147483648, %715 ], [ 2147483647, %711 ]
  %720 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %706, i32 %718) #11
  %721 = extractvalue { i32, i1 } %720, 1
  %722 = extractvalue { i32, i1 } %720, 0
  %723 = select i1 %721, i32 %719, i32 %722, !prof !2
  %724 = getelementptr inbounds %"class.blink::LayoutRubyBase", %"class.blink::LayoutRubyBase"* %672, i64 0, i32 0, i32 1, i32 0, i32 0
  %725 = bitcast %"class.blink::InlineFlowBox"** %724 to %"class.blink::RootInlineBox"**
  %726 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %725, align 8
  %727 = icmp eq %"class.blink::RootInlineBox"* %726, null
  br i1 %727, label %733, label %728

728:                                              ; preds = %717
  %729 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %726, i64 0, i32 5, i32 0
  %730 = load i32, i32* %729, align 8
  %731 = icmp slt i32 %730, 0
  %732 = select i1 %731, i32 -2147483648, i32 2147483647
  br label %733

733:                                              ; preds = %728, %717
  %734 = phi i32 [ 0, %717 ], [ %730, %728 ]
  %735 = phi i32 [ 2147483647, %717 ], [ %732, %728 ]
  %736 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %686, i32 %734) #11
  %737 = extractvalue { i32, i1 } %736, 1
  %738 = extractvalue { i32, i1 } %736, 0
  %739 = select i1 %737, i32 %735, i32 %738
  %740 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %223, align 8
  %741 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %740, i64 0, i32 5, i32 0
  %742 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %741, align 8
  %743 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %742, i64 0, i32 0, i32 9
  %744 = bitcast [20 x i8]* %743 to i160*
  %745 = load i160, i160* %744, align 8
  %746 = and i160 %745, 15211807202738752817960438464512
  %747 = icmp eq i160 %746, 10141204801825835211973625643008
  %748 = select i1 %747, i32 %723, i32 %739
  %749 = icmp slt i32 %748, 0
  %750 = select i1 %749, i32 -2147483648, i32 2147483647
  %751 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %631, i32 %748) #11
  %752 = extractvalue { i32, i1 } %751, 1
  %753 = extractvalue { i32, i1 } %751, 0
  %754 = select i1 %752, i32 %750, i32 %753, !prof !2
  store i32 %754, i32* %21, align 4
  %755 = icmp slt i32 %723, 0
  %756 = select i1 %755, i32 -2147483648, i32 2147483647
  %757 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %739, i32 %723) #11
  %758 = extractvalue { i32, i1 } %757, 1
  %759 = extractvalue { i32, i1 } %757, 0
  %760 = select i1 %758, i32 %756, i32 %759, !prof !2
  %761 = icmp sgt i32 %760, -1
  %762 = select i1 %761, i32 -2147483648, i32 2147483647
  %763 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %428, i32 %760) #11
  %764 = extractvalue { i32, i1 } %763, 1
  %765 = extractvalue { i32, i1 } %763, 0
  %766 = select i1 %764, i32 %762, i32 %765, !prof !2
  br label %767

767:                                              ; preds = %645, %733, %638
  %768 = phi i32 [ %631, %638 ], [ %754, %733 ], [ %631, %645 ]
  %769 = phi i32 [ %428, %638 ], [ %766, %733 ], [ %428, %645 ]
  %770 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %269, align 8
  %771 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %770, i64 15
  %772 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %771, align 8
  %773 = call zeroext i1 %772(%"class.blink::InlineBox"* nonnull %246) #11
  br i1 %773, label %774, label %810

774:                                              ; preds = %767
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %224) #11
  store i32 -1431655766, i32* %24, align 4
  %775 = bitcast %"class.blink::InlineBox"* %246 to %"class.blink::InlineTextBox"*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #11
  %776 = bitcast %"class.blink::LayoutObject"** %247 to i64*
  %777 = load i64, i64* %776, align 8
  store i64 %777, i64* %226, align 8
  %778 = load i32, i32* %221, align 4
  %779 = and i32 %778, 1
  %780 = icmp ne i32 %779, 0
  %781 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %25, i1 zeroext %780)
  %782 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* nonnull %775, %"class.blink::ComputedStyle"* dereferenceable(104) %781, i32* nonnull dereferenceable(4) %24) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %225) #11
  br i1 %782, label %783, label %809

783:                                              ; preds = %774
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %227) #11
  store i32 -1431655766, i32* %18, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %228) #11
  %784 = load i64, i64* %776, align 8
  store i64 %784, i64* %229, align 8
  %785 = load i32, i32* %221, align 4
  %786 = and i32 %785, 1
  %787 = icmp ne i32 %786, 0
  %788 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %230, i1 zeroext %787) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #11
  %789 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* nonnull %775, %"class.blink::ComputedStyle"* dereferenceable(104) %788, i32* nonnull dereferenceable(4) %18) #11
  br i1 %789, label %791, label %790

790:                                              ; preds = %783
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %227) #11
  br label %806

791:                                              ; preds = %783
  %792 = call i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"* %788) #11
  %793 = load i32, i32* %221, align 4
  %794 = and i32 %793, 2048
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %796, label %802

796:                                              ; preds = %791
  %797 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %788, i64 0, i32 0, i32 9
  %798 = bitcast [20 x i8]* %797 to i160*
  %799 = load i160, i160* %798, align 8
  %800 = and i160 %799, 15211807202738752817960438464512
  %801 = icmp eq i160 %800, 10141204801825835211973625643008
  br i1 %801, label %804, label %802

802:                                              ; preds = %796, %791
  %803 = icmp eq i32 %792, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %227) #11
  br i1 %803, label %807, label %806

804:                                              ; preds = %796
  %805 = icmp eq i32 %792, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %227) #11
  br i1 %805, label %807, label %806

806:                                              ; preds = %802, %790, %804
  br label %807

807:                                              ; preds = %804, %802, %806
  %808 = phi i8* [ %12, %806 ], [ %11, %802 ], [ %11, %804 ]
  store i8 1, i8* %808, align 1
  br label %809

809:                                              ; preds = %807, %774
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %224) #11
  br label %810

810:                                              ; preds = %809, %767
  %811 = load i8, i8* %8, align 1, !range !3
  %812 = icmp eq i8 %811, 0
  br i1 %812, label %813, label %815

813:                                              ; preds = %810
  store i8 1, i8* %8, align 1
  store i32 %768, i32* %231, align 4
  %814 = icmp slt i32 %630, %768
  br label %827

815:                                              ; preds = %810
  %816 = load i32, i32* %231, align 4
  %817 = icmp slt i32 %768, %816
  %818 = select i1 %817, %"class.blink::LayoutUnit"* %232, %"class.blink::LayoutUnit"* %5
  %819 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %818, i64 0, i32 0
  %820 = load i32, i32* %819, align 4
  store i32 %820, i32* %231, align 4
  %821 = load i32, i32* %233, align 4
  %822 = icmp slt i32 %630, %821
  %823 = select i1 %822, %"class.blink::LayoutUnit"* %234, %"class.blink::LayoutUnit"* %9
  %824 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %823, i64 0, i32 0
  %825 = load i32, i32* %824, align 4
  %826 = icmp slt i32 %825, %820
  br label %827

827:                                              ; preds = %815, %813
  %828 = phi %"class.blink::LayoutUnit"* [ %823, %815 ], [ %234, %813 ]
  %829 = phi i1 [ %826, %815 ], [ %814, %813 ]
  %830 = select i1 %829, %"class.blink::LayoutUnit"* %828, %"class.blink::LayoutUnit"* %5
  %831 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %830, i64 0, i32 0
  %832 = load i32, i32* %831, align 4
  store i32 %832, i32* %233, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %235)
  %833 = icmp slt i32 %769, 0
  %834 = select i1 %833, i32 -2147483648, i32 2147483647
  %835 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %768, i32 %769) #11
  %836 = extractvalue { i32, i1 } %835, 1
  %837 = extractvalue { i32, i1 } %835, 0
  %838 = select i1 %836, i32 %834, i32 %837, !prof !2
  %839 = icmp sgt i32 %632, -1
  %840 = select i1 %839, i32 -2147483648, i32 2147483647
  %841 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %838, i32 %632) #11
  %842 = extractvalue { i32, i1 } %841, 1
  %843 = extractvalue { i32, i1 } %841, 0
  %844 = select i1 %842, i32 %840, i32 %843, !prof !2
  store i32 %844, i32* %26, align 4
  %845 = load i32, i32* %236, align 4
  %846 = icmp slt i32 %845, %844
  %847 = select i1 %846, %"class.blink::LayoutUnit"* %237, %"class.blink::LayoutUnit"* %7
  %848 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %847, i64 0, i32 0
  %849 = load i32, i32* %848, align 4
  store i32 %849, i32* %236, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %235)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %238)
  store i32 %838, i32* %27, align 4
  %850 = load i32, i32* %239, align 4
  %851 = icmp slt i32 %850, %838
  %852 = select i1 %851, %"class.blink::LayoutUnit"* %240, %"class.blink::LayoutUnit"* %6
  %853 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %852, i64 0, i32 0
  %854 = load i32, i32* %853, align 4
  store i32 %854, i32* %239, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %238)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %241)
  %855 = icmp slt i32 %633, 0
  %856 = select i1 %855, i32 -2147483648, i32 2147483647
  %857 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %630, i32 %633) #11
  %858 = extractvalue { i32, i1 } %857, 1
  %859 = extractvalue { i32, i1 } %857, 0
  %860 = select i1 %858, i32 %856, i32 %859, !prof !2
  store i32 %860, i32* %28, align 4
  %861 = load i32, i32* %242, align 4
  %862 = icmp slt i32 %861, %860
  %863 = select i1 %862, %"class.blink::LayoutUnit"* %243, %"class.blink::LayoutUnit"* %10
  %864 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %863, i64 0, i32 0
  %865 = load i32, i32* %864, align 4
  %866 = icmp slt i32 %854, %865
  %867 = select i1 %866, %"class.blink::LayoutUnit"* %863, %"class.blink::LayoutUnit"* %6
  %868 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %867, i64 0, i32 0
  %869 = load i32, i32* %868, align 4
  store i32 %869, i32* %242, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %241)
  br label %870

870:                                              ; preds = %827, %629
  %871 = icmp eq %"class.blink::InlineFlowBox"* %275, null
  br i1 %871, label %873, label %872

872:                                              ; preds = %870
  call void @_ZN5blink13InlineFlowBox26PlaceBoxesInBlockDirectionENS_10LayoutUnitES1_S1_bRS1_S2_S2_RbS2_S2_S3_S3_NS_12FontBaselineE(%"class.blink::InlineFlowBox"* nonnull %275, i32 %1, i32 %2, i32 %3, i1 zeroext %4, %"class.blink::LayoutUnit"* dereferenceable(4) %5, %"class.blink::LayoutUnit"* dereferenceable(4) %6, %"class.blink::LayoutUnit"* dereferenceable(4) %7, i8* dereferenceable(1) %8, %"class.blink::LayoutUnit"* dereferenceable(4) %9, %"class.blink::LayoutUnit"* dereferenceable(4) %10, i8* dereferenceable(1) %11, i8* dereferenceable(1) %12, i32 %13)
  br label %873

873:                                              ; preds = %872, %870, %454
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %218)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %217)
  br label %874

874:                                              ; preds = %873, %245, %258
  %875 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %246, i64 0, i32 1
  %876 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %875, align 8
  %877 = icmp eq %"class.blink::InlineBox"* %876, null
  br i1 %877, label %244, label %245

878:                                              ; preds = %244
  br i1 %4, label %886, label %879

879:                                              ; preds = %878
  %880 = load i32, i32* %104, align 8
  %881 = and i32 %880, 4
  %882 = icmp ne i32 %881, 0
  %883 = and i32 %880, 24
  %884 = icmp eq i32 %883, 24
  %885 = or i1 %882, %884
  br i1 %885, label %886, label %973

886:                                              ; preds = %879, %878
  %887 = load i8, i8* %8, align 1, !range !3
  %888 = icmp eq i8 %887, 0
  br i1 %888, label %889, label %900

889:                                              ; preds = %886
  store i8 1, i8* %8, align 1
  %890 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %891 = load i32, i32* %890, align 4
  %892 = and i32 %891, 2048
  %893 = icmp eq i32 %892, 0
  %894 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %895 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %896 = select i1 %893, i32* %895, i32* %894
  %897 = load i32, i32* %896, align 4
  %898 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  store i32 %897, i32* %898, align 4
  %899 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  store i32 %897, i32* %899, align 4
  br label %923

900:                                              ; preds = %886
  %901 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %901)
  %902 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %903 = load i32, i32* %902, align 4
  %904 = and i32 %903, 2048
  %905 = icmp eq i32 %904, 0
  %906 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %907 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %908 = select i1 %905, i32* %907, i32* %906
  %909 = load i32, i32* %908, align 4
  store i32 %909, i32* %29, align 4
  %910 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  %911 = load i32, i32* %910, align 4
  %912 = icmp slt i32 %909, %911
  %913 = bitcast i32* %29 to %"class.blink::LayoutUnit"*
  %914 = select i1 %912, %"class.blink::LayoutUnit"* %913, %"class.blink::LayoutUnit"* %5
  %915 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %914, i64 0, i32 0
  %916 = load i32, i32* %915, align 4
  store i32 %916, i32* %910, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %901)
  %917 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  %918 = load i32, i32* %917, align 4
  %919 = icmp slt i32 %918, %916
  %920 = select i1 %919, %"class.blink::LayoutUnit"* %9, %"class.blink::LayoutUnit"* %5
  %921 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %920, i64 0, i32 0
  %922 = load i32, i32* %921, align 4
  store i32 %922, i32* %917, align 4
  br label %923

923:                                              ; preds = %900, %889
  %924 = bitcast i32* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %924)
  %925 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %926 = load i32, i32* %925, align 4
  %927 = and i32 %926, 2048
  %928 = icmp eq i32 %927, 0
  %929 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %930 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %931 = select i1 %928, i32* %930, i32* %929
  %932 = load i32, i32* %931, align 4
  %933 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %32) #11
  %934 = icmp slt i32 %933, 0
  %935 = select i1 %934, i32 -2147483648, i32 2147483647
  %936 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %932, i32 %933) #11
  %937 = extractvalue { i32, i1 } %936, 1
  %938 = extractvalue { i32, i1 } %936, 0
  %939 = select i1 %937, i32 %935, i32 %938, !prof !2
  store i32 %939, i32* %30, align 4
  %940 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %7, i64 0, i32 0
  %941 = load i32, i32* %940, align 4
  %942 = icmp slt i32 %941, %939
  %943 = bitcast i32* %30 to %"class.blink::LayoutUnit"*
  %944 = select i1 %942, %"class.blink::LayoutUnit"* %943, %"class.blink::LayoutUnit"* %7
  %945 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %944, i64 0, i32 0
  %946 = load i32, i32* %945, align 4
  store i32 %946, i32* %940, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %924)
  %947 = bitcast i32* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %947)
  %948 = load i32, i32* %925, align 4
  %949 = and i32 %948, 2048
  %950 = icmp eq i32 %949, 0
  %951 = select i1 %950, i32* %930, i32* %929
  %952 = load i32, i32* %951, align 4
  %953 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %32) #11
  %954 = icmp slt i32 %953, 0
  %955 = select i1 %954, i32 -2147483648, i32 2147483647
  %956 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %952, i32 %953) #11
  %957 = extractvalue { i32, i1 } %956, 1
  %958 = extractvalue { i32, i1 } %956, 0
  %959 = select i1 %957, i32 %955, i32 %958, !prof !2
  store i32 %959, i32* %31, align 4
  %960 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %6, i64 0, i32 0
  %961 = load i32, i32* %960, align 4
  %962 = icmp slt i32 %961, %959
  %963 = bitcast i32* %31 to %"class.blink::LayoutUnit"*
  %964 = select i1 %962, %"class.blink::LayoutUnit"* %963, %"class.blink::LayoutUnit"* %6
  %965 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %964, i64 0, i32 0
  %966 = load i32, i32* %965, align 4
  store i32 %966, i32* %960, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %947)
  %967 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %10, i64 0, i32 0
  %968 = load i32, i32* %967, align 4
  %969 = icmp slt i32 %966, %968
  %970 = select i1 %969, %"class.blink::LayoutUnit"* %10, %"class.blink::LayoutUnit"* %6
  %971 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %970, i64 0, i32 0
  %972 = load i32, i32* %971, align 4
  store i32 %972, i32* %967, align 4
  br label %973

973:                                              ; preds = %879, %923
  %974 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %975 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %974, align 8
  %976 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %975, i64 0, i32 5, i32 0
  %977 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %976, align 8
  %978 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %977, i64 0, i32 0, i32 9
  %979 = bitcast [20 x i8]* %978 to i160*
  %980 = load i160, i160* %979, align 8
  %981 = and i160 %980, 15211807202738752817960438464512
  %982 = icmp eq i160 %981, 10141204801825835211973625643008
  br i1 %982, label %983, label %988

983:                                              ; preds = %973
  %984 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  %985 = load i32, i32* %984, align 4
  %986 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %10, i64 0, i32 0
  %987 = load i32, i32* %986, align 4
  call void @_ZN5blink13InlineFlowBox25FlipLinesInBlockDirectionENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* %0, i32 %985, i32 %987)
  br label %988

988:                                              ; preds = %244, %983, %973, %59
  ret void
}

declare i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"*, %"class.blink::ComputedStyle"* dereferenceable(104), i32* dereferenceable(4)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox25FlipLinesInBlockDirectionENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 2048
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %10 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %11 = select i1 %8, i32* %10, i32* %9
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %1, -1
  %14 = select i1 %13, i32 -2147483648, i32 2147483647
  %15 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %12, i32 %1) #11
  %16 = extractvalue { i32, i1 } %15, 1
  %17 = extractvalue { i32, i1 } %15, 0
  %18 = select i1 %16, i32 %14, i32 %17, !prof !2
  %19 = icmp sgt i32 %18, -1
  %20 = select i1 %19, i32 -2147483648, i32 2147483647
  %21 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %18) #11
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 %20, i32 %23, !prof !2
  %25 = tail call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %4) #11
  %26 = icmp sgt i32 %25, -1
  %27 = select i1 %26, i32 -2147483648, i32 2147483647
  %28 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %24, i32 %25) #11
  %29 = extractvalue { i32, i1 } %28, 1
  %30 = extractvalue { i32, i1 } %28, 0
  %31 = select i1 %29, i32 %27, i32 %30, !prof !2
  %32 = load i32, i32* %5, align 4
  %33 = and i32 %32, 2048
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32* %10, i32* %9
  store i32 %31, i32* %35, align 4
  %36 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %37 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %36, align 8
  %38 = icmp eq %"class.blink::InlineBox"* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %88, %3
  ret void

40:                                               ; preds = %3, %88
  %41 = phi %"class.blink::InlineBox"* [ %90, %88 ], [ %37, %3 ]
  %42 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %41, i64 0, i32 4, i32 0
  %43 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %43, i64 0, i32 4
  %45 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %44 to i96*
  %46 = load i96, i96* %45, align 4
  %47 = and i96 %46, 113336795588871485128704
  %48 = icmp eq i96 %47, 75557863725914323419136
  br i1 %48, label %88, label %49

49:                                               ; preds = %40
  %50 = bitcast %"class.blink::InlineBox"* %41 to i1 (%"class.blink::InlineBox"*)***
  %51 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %51, i64 14
  %53 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.blink::InlineBox"* nonnull %41) #11
  br i1 %54, label %55, label %57

55:                                               ; preds = %49
  %56 = bitcast %"class.blink::InlineBox"* %41 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineFlowBox25FlipLinesInBlockDirectionENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* nonnull %56, i32 %1, i32 %2)
  br label %88

57:                                               ; preds = %49
  %58 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %41, i64 0, i32 7, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = and i32 %59, 2048
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %41, i64 0, i32 5, i32 1, i32 0
  %63 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %41, i64 0, i32 5, i32 0, i32 0
  %64 = select i1 %61, i32* %63, i32* %62
  %65 = load i32, i32* %64, align 4
  %66 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %65, i32 %1) #11
  %67 = extractvalue { i32, i1 } %66, 1
  %68 = extractvalue { i32, i1 } %66, 0
  %69 = select i1 %67, i32 %14, i32 %68, !prof !2
  %70 = icmp sgt i32 %69, -1
  %71 = select i1 %70, i32 -2147483648, i32 2147483647
  %72 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %69) #11
  %73 = extractvalue { i32, i1 } %72, 1
  %74 = extractvalue { i32, i1 } %72, 0
  %75 = select i1 %73, i32 %71, i32 %74, !prof !2
  %76 = tail call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %41) #11
  %77 = icmp sgt i32 %76, -1
  %78 = select i1 %77, i32 -2147483648, i32 2147483647
  %79 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %75, i32 %76) #11
  %80 = extractvalue { i32, i1 } %79, 1
  %81 = extractvalue { i32, i1 } %79, 0
  %82 = select i1 %80, i32 %78, i32 %81, !prof !2
  %83 = load i32, i32* %58, align 4
  %84 = and i32 %83, 2048
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %57
  store i32 %82, i32* %62, align 4
  br label %88

87:                                               ; preds = %57
  store i32 %82, i32* %63, align 4
  br label %88

88:                                               ; preds = %87, %86, %55, %40
  %89 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %41, i64 0, i32 1
  %90 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %89, align 8
  %91 = icmp eq %"class.blink::InlineBox"* %90, null
  br i1 %91, label %39, label %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13InlineFlowBox37OverrideVisualOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16), i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  tail call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %5) #11
  %6 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %6, align 8
  %8 = icmp eq %"struct.blink::SimpleOverflowModel"* %7, null
  br i1 %8, label %20, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 4, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %15 = bitcast %"class.blink::LayoutRect"* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %7, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %18 = bitcast %"class.blink::LayoutSize"* %17 to i64*
  %19 = load i64, i64* %18, align 4
  br label %60

20:                                               ; preds = %9, %4
  %21 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 2048
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %2, -1
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !2
  br label %47

36:                                               ; preds = %20
  %37 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %2, -1
  %40 = select i1 %39, i32 -2147483648, i32 2147483647
  %41 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %40, i32 %43, !prof !2
  %45 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %46 = load i32, i32* %45, align 8
  br label %47

47:                                               ; preds = %36, %25
  %48 = phi i32 [ %2, %25 ], [ %38, %36 ]
  %49 = phi i32 [ %27, %25 ], [ %2, %36 ]
  %50 = phi i32 [ %29, %25 ], [ %44, %36 ]
  %51 = phi i32 [ %35, %25 ], [ %46, %36 ]
  %52 = zext i32 %48 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %49 to i64
  %55 = or i64 %53, %54
  %56 = zext i32 %51 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %50 to i64
  %59 = or i64 %57, %58
  br label %60

60:                                               ; preds = %13, %47
  %61 = phi i64 [ %16, %13 ], [ %55, %47 ]
  %62 = phi i64 [ %19, %13 ], [ %59, %47 ]
  tail call void @_ZN5blink13InlineFlowBox32SetVisualOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* dereferenceable(16) %1, i32 %2, i32 %3)
  %63 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %6, align 8
  %64 = icmp eq %"struct.blink::SimpleOverflowModel"* %63, null
  br i1 %64, label %76, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %63, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %67 = load i8, i8* %66, align 4, !range !3
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %63, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %71 = bitcast %"class.blink::LayoutRect"* %70 to i64*
  %72 = load i64, i64* %71, align 4
  %73 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %63, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %74 = bitcast %"class.blink::LayoutSize"* %73 to i64*
  %75 = load i64, i64* %74, align 4
  br label %116

76:                                               ; preds = %65, %60
  %77 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, 2048
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %92, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp sgt i32 %2, -1
  %87 = select i1 %86, i32 -2147483648, i32 2147483647
  %88 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %89 = extractvalue { i32, i1 } %88, 1
  %90 = extractvalue { i32, i1 } %88, 0
  %91 = select i1 %89, i32 %87, i32 %90, !prof !2
  br label %103

92:                                               ; preds = %76
  %93 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %2, -1
  %96 = select i1 %95, i32 -2147483648, i32 2147483647
  %97 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %98 = extractvalue { i32, i1 } %97, 1
  %99 = extractvalue { i32, i1 } %97, 0
  %100 = select i1 %98, i32 %96, i32 %99, !prof !2
  %101 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %102 = load i32, i32* %101, align 8
  br label %103

103:                                              ; preds = %92, %81
  %104 = phi i32 [ %2, %81 ], [ %94, %92 ]
  %105 = phi i32 [ %83, %81 ], [ %2, %92 ]
  %106 = phi i32 [ %85, %81 ], [ %100, %92 ]
  %107 = phi i32 [ %91, %81 ], [ %102, %92 ]
  %108 = zext i32 %104 to i64
  %109 = shl nuw i64 %108, 32
  %110 = zext i32 %105 to i64
  %111 = or i64 %109, %110
  %112 = zext i32 %107 to i64
  %113 = shl nuw i64 %112, 32
  %114 = zext i32 %106 to i64
  %115 = or i64 %113, %114
  br label %116

116:                                              ; preds = %69, %103
  %117 = phi i64 [ %72, %69 ], [ %111, %103 ]
  %118 = phi i64 [ %75, %69 ], [ %115, %103 ]
  %119 = trunc i64 %117 to i32
  %120 = lshr i64 %117, 32
  %121 = trunc i64 %120 to i32
  %122 = trunc i64 %61 to i32
  %123 = lshr i64 %61, 32
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %119, %122
  %126 = icmp eq i32 %121, %124
  %127 = and i1 %125, %126
  br i1 %127, label %128, label %138

128:                                              ; preds = %116
  %129 = trunc i64 %118 to i32
  %130 = trunc i64 %62 to i32
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %132, label %138

132:                                              ; preds = %128
  %133 = lshr i64 %62, 32
  %134 = trunc i64 %133 to i32
  %135 = lshr i64 %118, 32
  %136 = trunc i64 %135 to i32
  %137 = icmp ne i32 %136, %134
  br label %138

138:                                              ; preds = %116, %128, %132
  %139 = phi i1 [ true, %128 ], [ %137, %132 ], [ true, %116 ]
  ret i1 %139
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox32SetVisualOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16), i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.blink::LayoutRect"*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"class.blink::LayoutRect"*
  %9 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #11
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %11 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %12 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i32, i32* %11, align 4
  %14 = and i32 %13, 2048
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %27, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp sgt i32 %2, -1
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  br label %38

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %2, -1
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !2
  %36 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %16, %27
  %39 = phi i32 [ %2, %16 ], [ %29, %27 ]
  %40 = phi i32 [ %18, %16 ], [ %2, %27 ]
  %41 = phi i32 [ %20, %16 ], [ %35, %27 ]
  %42 = phi i32 [ %26, %16 ], [ %37, %27 ]
  %43 = zext i32 %39 to i64
  %44 = shl nuw i64 %43, 32
  %45 = zext i32 %40 to i64
  %46 = or i64 %44, %45
  %47 = zext i32 %42 to i64
  %48 = shl nuw i64 %47, 32
  %49 = zext i32 %41 to i64
  %50 = or i64 %48, %49
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %46, i64* %51, align 8
  store i64 %50, i64* %10, align 8
  %52 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #11
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast i64* %53 to i32*
  %55 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %8, i64 0, i32 1, i32 1, i32 0
  %56 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 16, i1 false)
  br i1 %15, label %59, label %57

57:                                               ; preds = %38
  %58 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 4 %58, i64 16, i1 false)
  br label %77

59:                                               ; preds = %38
  %60 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = shl nuw i64 %64, 32
  %66 = zext i32 %61 to i64
  %67 = or i64 %65, %66
  %68 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = shl nuw i64 %72, 32
  %74 = zext i32 %69 to i64
  %75 = or i64 %73, %74
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %67, i64* %76, align 8
  store i64 %75, i64* %53, align 8
  br label %77

77:                                               ; preds = %59, %57
  %78 = call zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"* nonnull %6, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %8) #11
  br i1 %78, label %113, label %79

79:                                               ; preds = %77
  %80 = load i32, i32* %54, align 8
  %81 = icmp slt i32 %80, 1
  %82 = load i32, i32* %55, align 4
  %83 = icmp slt i32 %82, 1
  %84 = or i1 %81, %83
  br i1 %84, label %113, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %87 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %86, align 8
  %88 = icmp eq %"struct.blink::SimpleOverflowModel"* %87, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %87, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 4, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %99, label %109

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1
  %95 = call i8* @_Znwm(i64 40) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %95, i8 0, i64 40, i1 false) #11
  %96 = ptrtoint i8* %95 to i64
  %97 = bitcast %"class.std::__1::unique_ptr.1603"* %94 to i64*
  store i64 %96, i64* %97, align 8
  %98 = bitcast i8* %95 to %"struct.blink::SimpleOverflowModel"*
  br label %99

99:                                               ; preds = %93, %89
  %100 = phi %"struct.blink::SimpleOverflowModel"* [ %98, %93 ], [ %87, %89 ]
  %101 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %100, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %102 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %100, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %103 = bitcast %"class.blink::SimpleVisualOverflowModel"* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* nonnull align 8 %9, i64 16, i1 false) #11
  store i8 1, i8* %101, align 4
  %104 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %86, align 8
  %105 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %104, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %106 = load i8, i8* %105, align 4, !range !3
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %109, !prof !2

108:                                              ; preds = %99
  call void @llvm.trap() #11
  unreachable

109:                                              ; preds = %99, %89
  %110 = phi %"struct.blink::SimpleOverflowModel"* [ %104, %99 ], [ %87, %89 ]
  %111 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %110, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %112 = bitcast %"class.blink::SimpleVisualOverflowModel"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %112, i8* nonnull align 8 %52, i64 16, i1 false) #11
  br label %113

113:                                              ; preds = %77, %79, %109
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox37OverrideLayoutOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16), i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  tail call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %5) #11
  tail call void @_ZN5blink13InlineFlowBox32SetLayoutOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* dereferenceable(16) %1, i32 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox32SetLayoutOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* nocapture, %"class.blink::LayoutRect"* nocapture readonly dereferenceable(16), i32, i32) local_unnamed_addr #1 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.blink::LayoutRect"*
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"class.blink::LayoutRect"*
  %9 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #11
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %11 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %12 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i32, i32* %11, align 4
  %14 = and i32 %13, 2048
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %27, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = icmp sgt i32 %2, -1
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  br label %38

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %2, -1
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #11
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !2
  %36 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %37 = load i32, i32* %36, align 8
  br label %38

38:                                               ; preds = %16, %27
  %39 = phi i32 [ %2, %16 ], [ %29, %27 ]
  %40 = phi i32 [ %18, %16 ], [ %2, %27 ]
  %41 = phi i32 [ %20, %16 ], [ %35, %27 ]
  %42 = phi i32 [ %26, %16 ], [ %37, %27 ]
  %43 = zext i32 %39 to i64
  %44 = shl nuw i64 %43, 32
  %45 = zext i32 %40 to i64
  %46 = or i64 %44, %45
  %47 = zext i32 %42 to i64
  %48 = shl nuw i64 %47, 32
  %49 = zext i32 %41 to i64
  %50 = or i64 %48, %49
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %46, i64* %51, align 8
  store i64 %50, i64* %10, align 8
  %52 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #11
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %54 = bitcast i64* %53 to i32*
  %55 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %8, i64 0, i32 1, i32 1, i32 0
  %56 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %56, i8 -86, i64 16, i1 false)
  br i1 %15, label %59, label %57

57:                                               ; preds = %38
  %58 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 4 %58, i64 16, i1 false)
  br label %77

59:                                               ; preds = %38
  %60 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 1, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  %65 = shl nuw i64 %64, 32
  %66 = zext i32 %61 to i64
  %67 = or i64 %65, %66
  %68 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  %73 = shl nuw i64 %72, 32
  %74 = zext i32 %69 to i64
  %75 = or i64 %73, %74
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 %67, i64* %76, align 8
  store i64 %75, i64* %53, align 8
  br label %77

77:                                               ; preds = %59, %57
  %78 = call zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"* nonnull %6, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %8) #11
  br i1 %78, label %113, label %79

79:                                               ; preds = %77
  %80 = load i32, i32* %54, align 8
  %81 = icmp slt i32 %80, 1
  %82 = load i32, i32* %55, align 4
  %83 = icmp slt i32 %82, 1
  %84 = or i1 %81, %83
  br i1 %84, label %113, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %87 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %86, align 8
  %88 = icmp eq %"struct.blink::SimpleOverflowModel"* %87, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 4, !range !3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %99, label %109

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1
  %95 = call i8* @_Znwm(i64 40) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %95, i8 0, i64 40, i1 false) #11
  %96 = ptrtoint i8* %95 to i64
  %97 = bitcast %"class.std::__1::unique_ptr.1603"* %94 to i64*
  store i64 %96, i64* %97, align 8
  %98 = bitcast i8* %95 to %"struct.blink::SimpleOverflowModel"*
  br label %99

99:                                               ; preds = %93, %89
  %100 = phi %"struct.blink::SimpleOverflowModel"* [ %98, %93 ], [ %87, %89 ]
  %101 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %101, align 4
  %102 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %103 = bitcast %"class.blink::SimpleLayoutOverflowModel"* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* nonnull align 8 %9, i64 16, i1 false) #11
  store i8 1, i8* %101, align 4
  %104 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %86, align 8
  %105 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %104, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = load i8, i8* %105, align 4, !range !3
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %109, !prof !2

108:                                              ; preds = %99
  call void @llvm.trap() #11
  unreachable

109:                                              ; preds = %99, %89
  %110 = phi %"struct.blink::SimpleOverflowModel"* [ %104, %99 ], [ %87, %89 ]
  %111 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %112 = bitcast %"class.blink::SimpleLayoutOverflowModel"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %112, i8* nonnull align 8 %52, i64 16, i1 false) #11
  br label %113

113:                                              ; preds = %77, %79, %109
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13InlineFlowBox28FarthestPositionForUnderlineENS_14LineLayoutItemENS_24FontVerticalPositionTypeENS_12FontBaselineENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nocapture readonly, %"class.blink::LayoutObject"*, i32, i32, i32) local_unnamed_addr #1 align 2 {
  %6 = alloca %"class.blink::LineLayoutItem", align 8
  %7 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %8 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %7, align 8
  %9 = icmp eq %"class.blink::InlineBox"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %5
  %11 = bitcast %"class.blink::LineLayoutItem"* %6 to i8*
  %12 = bitcast %"class.blink::LineLayoutItem"* %6 to i64*
  %13 = icmp eq %"class.blink::LayoutObject"* %1, null
  %14 = bitcast %"class.blink::LayoutObject"* %1 to i1 (%"class.blink::LayoutObject"*)***
  %15 = and i32 %2, -3
  %16 = icmp eq i32 %15, 0
  br label %19

17:                                               ; preds = %90, %5
  %18 = phi i32 [ %4, %5 ], [ %91, %90 ]
  ret i32 %18

19:                                               ; preds = %10, %90
  %20 = phi i32 [ %4, %10 ], [ %91, %90 ]
  %21 = phi %"class.blink::InlineBox"* [ %8, %10 ], [ %93, %90 ]
  %22 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %21, i64 0, i32 4, i32 0
  %23 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %23, i64 0, i32 4
  %25 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %24 to i96*
  %26 = load i96, i96* %25, align 4
  %27 = and i96 %26, 113336795588871485128704
  %28 = icmp eq i96 %27, 75557863725914323419136
  br i1 %28, label %90, label %29

29:                                               ; preds = %19
  %30 = ptrtoint %"class.blink::LayoutObject"* %23 to i64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #11
  store i64 %30, i64* %12, align 8
  %31 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %21, i64 0, i32 7, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 1
  %34 = icmp ne i32 %33, 0
  %35 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %6, i1 zeroext %34) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #11
  %36 = call i32 @_ZNK5blink13ComputedStyle23TextDecorationsInEffectEv(%"class.blink::ComputedStyle"* %35) #11
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %90, label %39

39:                                               ; preds = %29
  br i1 %13, label %67, label %40

40:                                               ; preds = %39
  %41 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %14, align 8
  %42 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %41, i64 26
  %43 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %42, align 8
  %44 = call zeroext i1 %43(%"class.blink::LayoutObject"* nonnull %1) #11
  br i1 %44, label %45, label %67

45:                                               ; preds = %40
  %46 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %22, align 8
  %47 = icmp eq %"class.blink::LayoutObject"* %46, null
  br i1 %47, label %90, label %48

48:                                               ; preds = %45, %63
  %49 = phi %"class.blink::LayoutObject"* [ %65, %63 ], [ %46, %45 ]
  %50 = bitcast %"class.blink::LayoutObject"* %49 to i1 (%"class.blink::LayoutObject"*)***
  %51 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %50, align 8
  %52 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %51, i64 23
  %53 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %52, align 8
  %54 = call zeroext i1 %53(%"class.blink::LayoutObject"* nonnull %49) #11
  br i1 %54, label %55, label %61

55:                                               ; preds = %48
  %56 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %49, i64 0, i32 4
  %57 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %56 to i96*
  %58 = load i96, i96* %57, align 4
  %59 = and i96 %58, 134217728
  %60 = icmp eq i96 %59, 0
  br i1 %60, label %90, label %61

61:                                               ; preds = %55, %48
  %62 = icmp eq %"class.blink::LayoutObject"* %49, %1
  br i1 %62, label %67, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %49, i64 0, i32 7
  %65 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %64, align 8
  %66 = icmp eq %"class.blink::LayoutObject"* %65, null
  br i1 %66, label %90, label %48

67:                                               ; preds = %61, %39, %40
  %68 = bitcast %"class.blink::InlineBox"* %21 to i1 (%"class.blink::InlineBox"*)***
  %69 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %68, align 8
  %70 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %69, i64 14
  %71 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %70, align 8
  %72 = call zeroext i1 %71(%"class.blink::InlineBox"* nonnull %21) #11
  br i1 %72, label %73, label %76

73:                                               ; preds = %67
  %74 = bitcast %"class.blink::InlineBox"* %21 to %"class.blink::InlineFlowBox"*
  %75 = call i32 @_ZNK5blink13InlineFlowBox28FarthestPositionForUnderlineENS_14LineLayoutItemENS_24FontVerticalPositionTypeENS_12FontBaselineENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nonnull %74, %"class.blink::LayoutObject"* %1, i32 %2, i32 %3, i32 %20)
  br label %90

76:                                               ; preds = %67
  %77 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %68, align 8
  %78 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %77, i64 15
  %79 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %78, align 8
  %80 = call zeroext i1 %79(%"class.blink::InlineBox"* nonnull %21) #11
  br i1 %80, label %81, label %90

81:                                               ; preds = %76
  %82 = bitcast %"class.blink::InlineBox"* %21 to %"class.blink::InlineTextBox"*
  %83 = call i32 @_ZNK5blink13InlineTextBox16VerticalPositionENS_24FontVerticalPositionTypeENS_12FontBaselineE(%"class.blink::InlineTextBox"* nonnull %82, i32 %2, i32 %3) #11
  br i1 %16, label %84, label %87

84:                                               ; preds = %81
  %85 = icmp slt i32 %83, %20
  %86 = select i1 %85, i32 %83, i32 %20
  br label %90

87:                                               ; preds = %81
  %88 = icmp slt i32 %20, %83
  %89 = select i1 %88, i32 %83, i32 %20
  br label %90

90:                                               ; preds = %63, %55, %84, %87, %29, %45, %73, %76, %19
  %91 = phi i32 [ %20, %29 ], [ %20, %45 ], [ %75, %73 ], [ %20, %76 ], [ %20, %19 ], [ %86, %84 ], [ %89, %87 ], [ %20, %55 ], [ %20, %63 ]
  %92 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %21, i64 0, i32 1
  %93 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %92, align 8
  %94 = icmp eq %"class.blink::InlineBox"* %93, null
  br i1 %94, label %17, label %19
}

declare i32 @_ZNK5blink13ComputedStyle23TextDecorationsInEffectEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

declare i32 @_ZNK5blink13InlineTextBox16VerticalPositionENS_24FontVerticalPositionTypeENS_12FontBaselineE(%"class.blink::InlineTextBox"*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox33AddReplacedChildrenVisualOverflowENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"*, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.blink::LayoutRect"*
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"class.blink::LayoutRect"*
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %"class.blink::LayoutRect"*
  %10 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %12, align 8
  %15 = icmp eq %"struct.blink::SimpleOverflowModel"* %14, null
  br i1 %15, label %27, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 4, !range !3
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = bitcast %"class.blink::LayoutRect"* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %25 = bitcast %"class.blink::LayoutSize"* %24 to i64*
  %26 = load i64, i64* %25, align 4
  br label %67

27:                                               ; preds = %16, %3
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 2048
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %43, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp sgt i32 %1, -1
  %38 = select i1 %37, i32 -2147483648, i32 2147483647
  %39 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 %38, i32 %41, !prof !2
  br label %54

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %1, -1
  %47 = select i1 %46, i32 -2147483648, i32 2147483647
  %48 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 %47, i32 %50, !prof !2
  %52 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %53 = load i32, i32* %52, align 8
  br label %54

54:                                               ; preds = %43, %32
  %55 = phi i32 [ %1, %32 ], [ %45, %43 ]
  %56 = phi i32 [ %34, %32 ], [ %1, %43 ]
  %57 = phi i32 [ %36, %32 ], [ %51, %43 ]
  %58 = phi i32 [ %42, %32 ], [ %53, %43 ]
  %59 = zext i32 %55 to i64
  %60 = shl nuw i64 %59, 32
  %61 = zext i32 %56 to i64
  %62 = or i64 %60, %61
  %63 = zext i32 %58 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %57 to i64
  %66 = or i64 %64, %65
  br label %67

67:                                               ; preds = %20, %54
  %68 = phi i64 [ %23, %20 ], [ %62, %54 ]
  %69 = phi i64 [ %26, %20 ], [ %66, %54 ]
  %70 = lshr i64 %68, 32
  %71 = lshr i64 %69, 32
  %72 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %73 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %72, align 8
  %74 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %73, i64 0, i32 4
  %75 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %74 to i96*
  %76 = load i96, i96* %75, align 4
  %77 = trunc i96 %76 to i32
  %78 = icmp slt i32 %77, 0
  %79 = select i1 %78, i64 %69, i64 %71
  %80 = select i1 %78, i64 %70, i64 %68
  %81 = select i1 %78, i64 %68, i64 %70
  %82 = select i1 %78, i64 %71, i64 %69
  %83 = shl i64 %80, 32
  %84 = and i64 %81, 4294967295
  %85 = or i64 %83, %84
  %86 = shl i64 %82, 32
  %87 = and i64 %79, 4294967295
  %88 = or i64 %86, %87
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  store i64 %85, i64* %89, align 8
  store i64 %88, i64* %11, align 8
  %90 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %91 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %90, align 8
  %92 = icmp eq %"class.blink::InlineBox"* %91, null
  br i1 %92, label %253, label %93

93:                                               ; preds = %67
  %94 = bitcast { i64, i64 }* %8 to i8*
  %95 = bitcast { i64, i64 }* %8 to i32*
  %96 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %9, i64 0, i32 0, i32 1, i32 0
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %98 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %99 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %100 = bitcast { i64, i64 }* %6 to i8*
  %101 = icmp sgt i32 %1, -1
  %102 = select i1 %101, i32 -2147483648, i32 2147483647
  %103 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %104 = extractvalue { i32, i1 } %103, 1
  %105 = extractvalue { i32, i1 } %103, 0
  %106 = select i1 %104, i32 %102, i32 %105
  %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %109 = bitcast { i64, i64 }* %8 to i8*
  br label %113

110:                                              ; preds = %247
  %111 = and i8 %248, 1
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %253, label %252

113:                                              ; preds = %93, %247
  %114 = phi %"class.blink::InlineBox"* [ %91, %93 ], [ %250, %247 ]
  %115 = phi i8 [ 0, %93 ], [ %248, %247 ]
  %116 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 4, i32 0
  %117 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %116, align 8
  %118 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %117, i64 0, i32 4
  %119 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %118 to i96*
  %120 = load i96, i96* %119, align 4
  %121 = and i96 %120, 113336795588871485128704
  %122 = icmp eq i96 %121, 75557863725914323419136
  %123 = and i96 %120, 33554432
  %124 = icmp ne i96 %123, 0
  %125 = or i1 %122, %124
  br i1 %125, label %247, label %126

126:                                              ; preds = %113
  %127 = bitcast %"class.blink::LayoutObject"* %117 to i1 (%"class.blink::LayoutObject"*)***
  %128 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %127, align 8
  %129 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %128, i64 26
  %130 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %129, align 8
  %131 = call zeroext i1 %130(%"class.blink::LayoutObject"* %117) #11
  br i1 %131, label %132, label %212

132:                                              ; preds = %126
  %133 = bitcast %"class.blink::InlineBox"* %114 to %"class.blink::InlineFlowBox"*
  call void @_ZN5blink13InlineFlowBox33AddReplacedChildrenVisualOverflowENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* nonnull %133, i32 %1, i32 %2)
  %134 = load i32, i32* %99, align 4
  %135 = and i32 %134, 16384
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %247

137:                                              ; preds = %132
  %138 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %116, align 8
  %139 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %138, i64 0, i32 4
  %140 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %139 to i96*
  %141 = load i96, i96* %140, align 4
  %142 = and i96 %141, 33554432
  %143 = icmp eq i96 %142, 0
  %144 = bitcast %"class.blink::LayoutObject"* %138 to %"class.blink::LayoutBoxModelObject"*
  %145 = select i1 %143, %"class.blink::LayoutBoxModelObject"* %144, %"class.blink::LayoutBoxModelObject"* null
  %146 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %145) #11
  br i1 %146, label %247, label %147

147:                                              ; preds = %137
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #11
  %148 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 1
  %149 = bitcast %"class.blink::InlineBox"* %148 to %"struct.blink::SimpleOverflowModel"**
  %150 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %149, align 8
  %151 = icmp eq %"struct.blink::SimpleOverflowModel"* %150, null
  br i1 %151, label %163, label %152

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %150, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %154 = load i8, i8* %153, align 4, !range !3
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %163, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %150, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %158 = bitcast %"class.blink::LayoutRect"* %157 to i64*
  %159 = load i64, i64* %158, align 4
  %160 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %150, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %161 = bitcast %"class.blink::LayoutSize"* %160 to i64*
  %162 = load i64, i64* %161, align 4
  br label %191

163:                                              ; preds = %152, %147
  %164 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 7, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = and i32 %165, 2048
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %173, label %168

168:                                              ; preds = %163
  %169 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 5, i32 0, i32 0
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 6, i32 0
  %172 = load i32, i32* %171, align 8
  br label %178

173:                                              ; preds = %163
  %174 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 5, i32 1, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 6, i32 0
  %177 = load i32, i32* %176, align 8
  br label %178

178:                                              ; preds = %173, %168
  %179 = phi i32 [ %1, %168 ], [ %175, %173 ]
  %180 = phi i32 [ %170, %168 ], [ %1, %173 ]
  %181 = phi i32 [ %172, %168 ], [ %106, %173 ]
  %182 = phi i32 [ %106, %168 ], [ %177, %173 ]
  %183 = zext i32 %179 to i64
  %184 = shl nuw i64 %183, 32
  %185 = zext i32 %180 to i64
  %186 = or i64 %184, %185
  %187 = zext i32 %182 to i64
  %188 = shl nuw i64 %187, 32
  %189 = zext i32 %181 to i64
  %190 = or i64 %188, %189
  br label %191

191:                                              ; preds = %156, %178
  %192 = phi i64 [ %159, %156 ], [ %186, %178 ]
  %193 = phi i64 [ %162, %156 ], [ %190, %178 ]
  %194 = lshr i64 %192, 32
  %195 = lshr i64 %193, 32
  %196 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %116, align 8
  %197 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %196, i64 0, i32 4
  %198 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %197 to i96*
  %199 = load i96, i96* %198, align 4
  %200 = trunc i96 %199 to i32
  %201 = icmp slt i32 %200, 0
  %202 = select i1 %201, i64 %193, i64 %195
  %203 = select i1 %201, i64 %194, i64 %192
  %204 = select i1 %201, i64 %192, i64 %194
  %205 = select i1 %201, i64 %195, i64 %193
  %206 = shl i64 %203, 32
  %207 = and i64 %204, 4294967295
  %208 = or i64 %206, %207
  %209 = shl i64 %205, 32
  %210 = and i64 %202, 4294967295
  %211 = or i64 %209, %210
  store i64 %208, i64* %107, align 8
  store i64 %211, i64* %108, align 8
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %5, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %7) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %100) #11
  br label %247

212:                                              ; preds = %126
  %213 = bitcast %"class.blink::LayoutObject"** %116 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = inttoptr i64 %214 to %"class.blink::LayoutBoxModelObject"*
  %216 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %215) #11
  br i1 %216, label %247, label %217

217:                                              ; preds = %212
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #11
  %218 = inttoptr i64 %214 to %"class.blink::LayoutBox"*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 -86, i64 16, i1 false)
  %219 = call { i64, i64 } @_ZNK5blink9LayoutBox39LogicalVisualOverflowRectForPropagationEv(%"class.blink::LayoutBox"* %218) #11
  %220 = extractvalue { i64, i64 } %219, 0
  %221 = extractvalue { i64, i64 } %219, 1
  store i64 %221, i64* %97, align 8
  %222 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 7, i32 0
  %223 = load i32, i32* %222, align 4
  %224 = and i32 %223, 2048
  %225 = icmp eq i32 %224, 0
  %226 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 5, i32 0, i32 0
  %227 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 5, i32 1, i32 0
  %228 = select i1 %225, i32* %227, i32* %226
  %229 = load i32, i32* %228, align 4
  %230 = select i1 %225, i32* %226, i32* %227
  %231 = load i32, i32* %230, align 4
  %232 = trunc i64 %220 to i32
  %233 = icmp slt i32 %229, 0
  %234 = select i1 %233, i32 -2147483648, i32 2147483647
  %235 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %232, i32 %229) #11
  %236 = extractvalue { i32, i1 } %235, 1
  %237 = extractvalue { i32, i1 } %235, 0
  %238 = select i1 %236, i32 %234, i32 %237, !prof !2
  store i32 %238, i32* %95, align 8
  %239 = lshr i64 %220, 32
  %240 = trunc i64 %239 to i32
  %241 = icmp slt i32 %231, 0
  %242 = select i1 %241, i32 -2147483648, i32 2147483647
  %243 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %240, i32 %231) #11
  %244 = extractvalue { i32, i1 } %243, 1
  %245 = extractvalue { i32, i1 } %243, 0
  %246 = select i1 %244, i32 %242, i32 %245, !prof !2
  store i32 %246, i32* %96, align 4
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %5, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %9) #11
  call void @_ZN5blink9InlineBox26ClearKnownToHaveNoOverflowEv(%"class.blink::InlineBox"* %98) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #11
  br label %247

247:                                              ; preds = %132, %212, %217, %191, %137, %113
  %248 = phi i8 [ %115, %113 ], [ %115, %132 ], [ 1, %191 ], [ %115, %137 ], [ %115, %212 ], [ 1, %217 ]
  %249 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %114, i64 0, i32 1
  %250 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %249, align 8
  %251 = icmp eq %"class.blink::InlineBox"* %250, null
  br i1 %251, label %110, label %113

252:                                              ; preds = %110
  call void @_ZN5blink13InlineFlowBox32SetVisualOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %5, i32 %1, i32 %2)
  br label %253

253:                                              ; preds = %67, %110, %252
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  ret void
}

declare void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox15ComputeOverflowENS_10LayoutUnitES1_RN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS2_6VectorIPKNS_14SimpleFontDataELj0ENS2_18PartitionAllocatorEEENS_13GlyphOverflowEEENS2_7PtrHashIS5_EENS2_10HashTraitsIS6_EENSJ_ISG_EESD_EE(%"class.blink::InlineFlowBox"*, i32, i32, %"class.WTF::HashMap.1681"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.blink::InlineTextBox"*, align 8
  %6 = alloca %"class.WTF::HashSet.1811", align 8
  %7 = alloca %"class.blink::FloatRect", align 4
  %8 = alloca %"struct.blink::GlyphOverflow", align 4
  %9 = alloca %"struct.std::__1::pair.1686", align 8
  %10 = alloca %"struct.blink::GlyphOverflow", align 4
  %11 = alloca %"struct.std::__1::pair.1686", align 8
  %12 = alloca %"struct.blink::GlyphOverflow", align 4
  %13 = alloca %"class.blink::LineLayoutItem", align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca %"class.blink::LayoutRect", align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = bitcast { i64, i64 }* %16 to %"class.blink::LayoutRect"*
  %18 = alloca { i64, i64 }, align 8
  %19 = bitcast { i64, i64 }* %18 to %"class.blink::LayoutRect"*
  %20 = alloca %"class.WTF::HashMap.1681", align 8
  %21 = alloca { i64, i64 }, align 8
  %22 = bitcast { i64, i64 }* %21 to %"class.blink::LayoutRect"*
  %23 = alloca { i64, i64 }, align 8
  %24 = bitcast { i64, i64 }* %23 to %"class.blink::LayoutRect"*
  %25 = alloca { i64, i64 }, align 8
  %26 = bitcast { i64, i64 }* %25 to %"class.blink::LayoutRect"*
  %27 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 16384
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %634

31:                                               ; preds = %4
  %32 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %33 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %32, align 8
  store %"struct.blink::SimpleOverflowModel"* null, %"struct.blink::SimpleOverflowModel"** %32, align 8
  %34 = icmp eq %"struct.blink::SimpleOverflowModel"* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %36) #12
  %37 = load i32, i32* %27, align 4
  br label %38

38:                                               ; preds = %31, %35
  %39 = phi i32 [ %28, %31 ], [ %37, %35 ]
  %40 = bitcast %"class.blink::LayoutRect"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #11
  %41 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 1, i32 0, i32 0
  %42 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 1, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false) #11
  %43 = bitcast { i64, i64 }* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #11
  %44 = bitcast { i64, i64 }* %16 to i32*
  %45 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %17, i64 0, i32 0, i32 1, i32 0
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i64 0, i32 1
  %47 = bitcast i64* %46 to i32*
  %48 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %17, i64 0, i32 1, i32 1, i32 0
  %49 = and i32 %39, 2048
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %52 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %53 = select i1 %50, i32* %52, i32* %51
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = icmp sgt i32 %1, -1
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  %63 = zext i32 %1 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %54 to i64
  %66 = or i64 %64, %65
  %67 = zext i32 %62 to i64
  %68 = shl nuw i64 %67, 32
  %69 = zext i32 %56 to i64
  %70 = or i64 %68, %69
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i64 0, i32 0
  store i64 %66, i64* %71, align 8
  store i64 %70, i64* %46, align 8
  call void @_ZN5blink13InlineFlowBox26AddBoxShadowVisualOverflowERNS_10LayoutRectE(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %17)
  call void @_ZN5blink13InlineFlowBox29AddBorderOutsetVisualOverflowERNS_10LayoutRectE(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %17)
  %72 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %73 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %72, align 8
  %74 = icmp eq %"class.blink::InlineFlowBox"* %73, null
  br i1 %74, label %152, label %75

75:                                               ; preds = %38
  %76 = bitcast %"class.blink::LineLayoutItem"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #11
  %77 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %78 = bitcast %"class.blink::LayoutObject"** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.blink::LineLayoutItem"* %13 to i64*
  store i64 %79, i64* %80, align 8
  %81 = load i32, i32* %27, align 4
  %82 = and i32 %81, 1
  %83 = icmp ne i32 %82, 0
  %84 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %13, i1 zeroext %83) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #11
  %85 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %84, i64 0, i32 0, i32 3, i32 0, i32 0
  %86 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* %86, i64 0, i32 2, i32 0, i32 0
  %88 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"** %87, align 8
  %89 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* %88, i64 0, i32 13
  %90 = bitcast [3 x i8]* %89 to i24*
  %91 = load i24, i24* %90, align 8
  %92 = and i24 %91, 1920
  %93 = icmp eq i24 %92, 0
  br i1 %93, label %152, label %94

94:                                               ; preds = %75
  %95 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* %88, i64 0, i32 8, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = sitofp i32 %96 to float
  %98 = fmul float %97, 1.562500e-02
  %99 = fcmp ogt float %98, 0.000000e+00
  %100 = and i24 %91, 1792
  %101 = icmp ne i24 %100, 0
  %102 = and i1 %101, %99
  br i1 %102, label %103, label %152

103:                                              ; preds = %94
  %104 = call i32 @_ZNK5blink13ComputedStyle19OutlineOutsetExtentEv(%"class.blink::ComputedStyle"* %84) #11
  %105 = icmp sgt i32 %104, 33554431
  br i1 %105, label %106, label %108

106:                                              ; preds = %103
  %107 = load i32, i32* %44, align 8
  br label %116

108:                                              ; preds = %103
  %109 = icmp slt i32 %104, -33554432
  br i1 %109, label %110, label %112

110:                                              ; preds = %108
  %111 = load i32, i32* %44, align 8
  br label %119

112:                                              ; preds = %108
  %113 = shl i32 %104, 6
  %114 = load i32, i32* %44, align 8
  %115 = icmp sgt i32 %113, -1
  br i1 %115, label %116, label %119

116:                                              ; preds = %112, %106
  %117 = phi i32 [ %107, %106 ], [ %114, %112 ]
  %118 = phi i32 [ 2147483647, %106 ], [ %113, %112 ]
  br label %119

119:                                              ; preds = %116, %112, %110
  %120 = phi i32 [ %117, %116 ], [ %114, %112 ], [ %111, %110 ]
  %121 = phi i32 [ %118, %116 ], [ %113, %112 ], [ -2147483648, %110 ]
  %122 = phi i32 [ -2147483648, %116 ], [ 2147483647, %112 ], [ 2147483647, %110 ]
  %123 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %120, i32 %121) #11
  %124 = extractvalue { i32, i1 } %123, 1
  %125 = extractvalue { i32, i1 } %123, 0
  %126 = select i1 %124, i32 %122, i32 %125, !prof !2
  store i32 %126, i32* %44, align 8
  %127 = load i32, i32* %47, align 8
  %128 = icmp slt i32 %121, 0
  %129 = select i1 %128, i32 -2147483648, i32 2147483647
  %130 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %127, i32 %121) #11
  %131 = extractvalue { i32, i1 } %130, 1
  %132 = extractvalue { i32, i1 } %130, 0
  %133 = select i1 %131, i32 %129, i32 %132, !prof !2
  %134 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %133, i32 %121) #11
  %135 = extractvalue { i32, i1 } %134, 1
  %136 = extractvalue { i32, i1 } %134, 0
  %137 = select i1 %135, i32 %129, i32 %136, !prof !2
  store i32 %137, i32* %47, align 8
  %138 = load i32, i32* %45, align 4
  %139 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %138, i32 %121) #11
  %140 = extractvalue { i32, i1 } %139, 1
  %141 = extractvalue { i32, i1 } %139, 0
  %142 = select i1 %140, i32 %122, i32 %141, !prof !2
  store i32 %142, i32* %45, align 4
  %143 = load i32, i32* %48, align 4
  %144 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %143, i32 %121) #11
  %145 = extractvalue { i32, i1 } %144, 1
  %146 = extractvalue { i32, i1 } %144, 0
  %147 = select i1 %145, i32 %129, i32 %146, !prof !2
  %148 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %147, i32 %121) #11
  %149 = extractvalue { i32, i1 } %148, 1
  %150 = extractvalue { i32, i1 } %148, 0
  %151 = select i1 %149, i32 %129, i32 %150, !prof !2
  store i32 %151, i32* %48, align 4
  br label %152

152:                                              ; preds = %38, %75, %94, %119
  %153 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %154 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %153, align 8
  %155 = icmp eq %"class.blink::InlineBox"* %154, null
  br i1 %155, label %215, label %156

156:                                              ; preds = %152
  %157 = bitcast { i64, i64 }* %18 to i8*
  %158 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i64 0, i32 1
  %159 = bitcast i64* %158 to i32*
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i64 0, i32 0
  %161 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %3, i64 0, i32 0, i32 2
  %162 = bitcast %"class.WTF::HashMap.1681"* %20 to i8*
  %163 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %20, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %20, i64 0, i32 0, i32 1
  %165 = bitcast %"class.blink::InlineTextBox"** %5 to i8*
  %166 = bitcast %"class.blink::InlineTextBox"** %5 to %"class.blink::InlineBox"**
  %167 = bitcast %"class.WTF::HashSet.1811"* %6 to i8*
  %168 = getelementptr inbounds %"class.WTF::HashSet.1811", %"class.WTF::HashSet.1811"* %6, i64 0, i32 0, i32 0
  %169 = getelementptr inbounds %"class.WTF::HashSet.1811", %"class.WTF::HashSet.1811"* %6, i64 0, i32 0, i32 2
  %170 = bitcast %"class.blink::FloatRect"* %7 to i8*
  %171 = bitcast %"struct.blink::GlyphOverflow"* %8 to i8*
  %172 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %8, i64 0, i32 0
  %173 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %8, i64 0, i32 1
  %174 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %8, i64 0, i32 2
  %175 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %8, i64 0, i32 3
  %176 = bitcast %"struct.std::__1::pair.1686"* %9 to i8*
  %177 = bitcast %"struct.blink::GlyphOverflow"* %10 to i8*
  %178 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %179 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %9, i64 0, i32 0, i32 0, i32 0, i32 2
  %180 = bitcast %"struct.std::__1::pair.1686"* %9 to i64*
  %181 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %9, i64 0, i32 1
  %182 = bitcast %"struct.blink::GlyphOverflow"* %181 to i8*
  %183 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %20, i64 0, i32 0
  %184 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %185 = bitcast %"struct.std::__1::pair.1686"* %11 to i8*
  %186 = bitcast %"struct.blink::GlyphOverflow"* %12 to i8*
  %187 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %11, i64 0, i32 0, i32 0, i32 0, i32 1
  %188 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %11, i64 0, i32 0, i32 0, i32 0, i32 2
  %189 = bitcast %"struct.std::__1::pair.1686"* %11 to i64*
  %190 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %11, i64 0, i32 1
  %191 = bitcast %"struct.blink::GlyphOverflow"* %190 to i8*
  %192 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %193 = bitcast %"class.blink::LayoutRect"* %15 to i64*
  %194 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 1
  %195 = bitcast %"class.blink::LayoutSize"* %194 to i64*
  %196 = bitcast { i64, i64 }* %14 to %"class.blink::LayoutRect"*
  %197 = bitcast { i64, i64 }* %14 to i8*
  %198 = bitcast { i64, i64 }* %14 to i32*
  %199 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %196, i64 0, i32 0, i32 1, i32 0
  %200 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 1
  %201 = bitcast { i64, i64 }* %21 to i8*
  %202 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i64 0, i32 0
  %203 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i64 0, i32 1
  %204 = bitcast { i64, i64 }* %23 to i8*
  %205 = bitcast { i64, i64 }* %23 to i32*
  %206 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %24, i64 0, i32 0, i32 1, i32 0
  %207 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i64 0, i32 1
  %208 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %23, i64 0, i32 0
  %209 = bitcast { i64, i64 }* %25 to i8*
  %210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 0
  %211 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 1
  %212 = bitcast { i64, i64 }* %18 to i8*
  %213 = bitcast %"class.WTF::HashMap.1681"* %20 to i8*
  %214 = bitcast { i64, i64 }* %23 to i8*
  br label %216

215:                                              ; preds = %630, %152
  call void @_ZN5blink13InlineFlowBox32SetLayoutOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %15, i32 %1, i32 %2)
  call void @_ZN5blink13InlineFlowBox32SetVisualOverflowFromLogicalRectERKNS_10LayoutRectENS_10LayoutUnitES4_(%"class.blink::InlineFlowBox"* %0, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %17, i32 %1, i32 %2)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #11
  br label %634

216:                                              ; preds = %156, %630
  %217 = phi %"class.blink::InlineBox"* [ %154, %156 ], [ %632, %630 ]
  %218 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 4, i32 0
  %219 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  %220 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %219, i64 0, i32 4
  %221 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %220 to i96*
  %222 = load i96, i96* %221, align 4
  %223 = and i96 %222, 113336795588871485128704
  %224 = icmp eq i96 %223, 75557863725914323419136
  br i1 %224, label %630, label %225

225:                                              ; preds = %216
  %226 = and i96 %222, 33554432
  %227 = icmp eq i96 %226, 0
  br i1 %227, label %379, label %228

228:                                              ; preds = %225
  %229 = bitcast %"class.blink::InlineBox"* %217 to %"class.blink::InlineTextBox"*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %157) #11
  %230 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 7, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %212, i8 -86, i64 16, i1 false)
  %231 = load i32, i32* %230, align 4
  %232 = and i32 %231, 2048
  %233 = icmp eq i32 %232, 0
  %234 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5
  %235 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %234, i64 0, i32 0, i32 0
  %236 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 1, i32 0
  %237 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 1, i32 0
  %238 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %234, i64 0, i32 0, i32 0
  %239 = select i1 %233, i32* %238, i32* %236
  %240 = select i1 %233, i32* %237, i32* %235
  %241 = load i32, i32* %240, align 4
  %242 = load i32, i32* %239, align 4
  %243 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 6, i32 0
  %244 = load i32, i32* %243, align 8
  %245 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %217) #11
  %246 = zext i32 %242 to i64
  %247 = shl nuw i64 %246, 32
  %248 = zext i32 %241 to i64
  %249 = or i64 %247, %248
  %250 = zext i32 %245 to i64
  %251 = shl nuw i64 %250, 32
  %252 = zext i32 %244 to i64
  %253 = or i64 %251, %252
  store i64 %249, i64* %160, align 8
  store i64 %253, i64* %158, align 8
  %254 = call zeroext i1 @_ZNK5blink13InlineTextBox11IsLineBreakEv(%"class.blink::InlineTextBox"* %229) #11
  br i1 %254, label %255, label %269

255:                                              ; preds = %228
  %256 = load i32, i32* %159, align 8
  %257 = call float @_ZNK5blink13InlineTextBox17NewlineSpaceWidthEv(%"class.blink::InlineTextBox"* %229) #11
  %258 = sitofp i32 %256 to float
  %259 = fmul float %258, 1.562500e-02
  %260 = fadd float %257, %259
  %261 = fmul float %260, 6.400000e+01
  %262 = fcmp ult float %261, 0xC1E0000000000000
  %263 = fcmp ugt float %261, 0x41DFFFFFE0000000
  %264 = fcmp ogt float %261, 0xC1E0000000000000
  %265 = select i1 %264, float %261, float 0xC1E0000000000000
  %266 = fptosi float %265 to i32
  %267 = select i1 %262, i32 0, i32 2147483647
  %268 = select i1 %263, i32 %267, i32 %266
  store i32 %268, i32* %159, align 8
  br label %378

269:                                              ; preds = %228
  %270 = load i32, i32* %161, align 4
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %377

272:                                              ; preds = %269
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %162) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %213, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %162, i8 0, i64 20, i1 false) #11
  %273 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %165)
  store %"class.blink::InlineBox"* %217, %"class.blink::InlineBox"** %166, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %167) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %167, i8 -86, i64 24, i1 false) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %167, i8 0, i64 20, i1 false) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %170) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %170, i8 0, i64 16, i1 false) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %171) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %171, i8 0, i64 16, i1 false) #11
  %274 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 1, i32 1
  %275 = bitcast %"class.blink::InlineBox"** %274 to i32*
  %276 = load i32, i32* %275, align 8
  %277 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %229, i64 0, i32 4
  %278 = load i16, i16* %277, align 4
  %279 = zext i16 %278 to i32
  %280 = load i32, i32* %230, align 4
  %281 = lshr i32 %280, 2
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = bitcast %"class.blink::LayoutObject"* %273 to %"class.blink::LayoutText"*
  %285 = bitcast %"class.blink::LayoutObject"* %273 to float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)***
  %286 = load float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)**, float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)*** %285, align 8
  %287 = getelementptr inbounds float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)*, float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)** %286, i64 112
  %288 = load float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)*, float (%"class.blink::LayoutText"*, i32, i32, i32, i8, i1, %"class.WTF::HashSet.1811"*, %"class.blink::FloatRect"*, float)** %287, align 8
  %289 = call float %288(%"class.blink::LayoutText"* %284, i32 %276, i32 %279, i32 0, i8 zeroext %283, i1 zeroext false, %"class.WTF::HashSet.1811"* nonnull %6, %"class.blink::FloatRect"* nonnull %7, float 0.000000e+00) #11
  %290 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %273, i64 0, i32 5, i32 0
  %291 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %290, align 8
  %292 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %291, i64 0, i32 0, i32 0, i32 0, i32 0
  %293 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %292, align 8
  %294 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %293, i64 0, i32 1, i32 0, i32 0
  %295 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %294, align 8
  %296 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %295, i64 0, i32 1
  call void @_ZN5blink13GlyphOverflow13SetFromBoundsERKNS_9FloatRectERKNS_4FontEf(%"struct.blink::GlyphOverflow"* nonnull %8, %"class.blink::FloatRect"* nonnull dereferenceable(16) %7, %"class.blink::Font"* dereferenceable(88) %296, float %289) #11
  %297 = load i32, i32* %169, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %312, label %299

299:                                              ; preds = %272
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %176) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %177, i8 0, i64 16, i1 false)
  store atomic i64 0, i64* %180 monotonic, align 8, !alias.scope !16
  store i32 0, i32* %178, align 8, !alias.scope !16
  store i32 0, i32* %179, align 4, !alias.scope !16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* nonnull align 4 %177, i64 16, i1 false) #11
  %300 = call { %"struct.WTF::KeyValuePair.1685"*, i8 } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6insertINS_17HashMapTranslatorISO_SJ_SC_EERPS2_SF_EENS_18HashTableAddResultISP_SG_EEOT0_OT1_(%"class.WTF::HashTable.1682"* nonnull %183, %"class.blink::InlineTextBox"** nonnull dereferenceable(8) %5, %"struct.std::__1::pair.1686"* nonnull dereferenceable(32) %9) #11
  %301 = extractvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } %300, 0
  %302 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %184, align 8
  %303 = icmp eq %"class.blink::SimpleFontData"** %302, null
  %304 = bitcast %"class.blink::SimpleFontData"** %302 to i8*
  br i1 %303, label %310, label %305, !prof !19

305:                                              ; preds = %299
  %306 = load i32, i32* %179, align 4
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %309, label %308, !prof !2

308:                                              ; preds = %305
  store i32 0, i32* %179, align 4
  br label %309

309:                                              ; preds = %308, %305
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %304) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %184, align 8
  br label %310

310:                                              ; preds = %309, %299
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %176) #11
  %311 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %301, i64 0, i32 1, i32 0
  call void @_ZN3WTF12CopyToVectorINS_7HashSetIPKN5blink14SimpleFontDataENS_7PtrHashIS4_EENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEENS_6VectorIS5_Lj0ESA_EEEEvRKT_RT0_(%"class.WTF::HashSet.1811"* nonnull dereferenceable(24) %6, %"class.WTF::Vector.1687"* dereferenceable(16) %311) #11
  br label %312

312:                                              ; preds = %310, %272
  %313 = load float, float* %172, align 4
  %314 = call float @llvm.fabs.f32(float %313) #11
  %315 = fcmp olt float %314, 6.250000e-02
  br i1 %315, label %316, label %328

316:                                              ; preds = %312
  %317 = load float, float* %173, align 4
  %318 = call float @llvm.fabs.f32(float %317) #11
  %319 = fcmp olt float %318, 6.250000e-02
  br i1 %319, label %320, label %328

320:                                              ; preds = %316
  %321 = load float, float* %174, align 4
  %322 = call float @llvm.fabs.f32(float %321) #11
  %323 = fcmp olt float %322, 6.250000e-02
  br i1 %323, label %324, label %328

324:                                              ; preds = %320
  %325 = load float, float* %175, align 4
  %326 = call float @llvm.fabs.f32(float %325) #11
  %327 = fcmp olt float %326, 6.250000e-02
  br i1 %327, label %342, label %328

328:                                              ; preds = %324, %320, %316, %312
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %185) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %186)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %186, i8 0, i64 16, i1 false)
  store atomic i64 0, i64* %189 monotonic, align 8, !alias.scope !20
  store i32 0, i32* %187, align 8, !alias.scope !20
  store i32 0, i32* %188, align 4, !alias.scope !20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %191, i8* nonnull align 4 %186, i64 16, i1 false) #11
  %329 = call { %"struct.WTF::KeyValuePair.1685"*, i8 } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6insertINS_17HashMapTranslatorISO_SJ_SC_EERPS2_SF_EENS_18HashTableAddResultISP_SG_EEOT0_OT1_(%"class.WTF::HashTable.1682"* nonnull %183, %"class.blink::InlineTextBox"** nonnull dereferenceable(8) %5, %"struct.std::__1::pair.1686"* nonnull dereferenceable(32) %11) #11
  %330 = extractvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } %329, 0
  %331 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %192, align 8
  %332 = icmp eq %"class.blink::SimpleFontData"** %331, null
  %333 = bitcast %"class.blink::SimpleFontData"** %331 to i8*
  br i1 %332, label %339, label %334, !prof !19

334:                                              ; preds = %328
  %335 = load i32, i32* %188, align 4
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %338, label %337, !prof !2

337:                                              ; preds = %334
  store i32 0, i32* %188, align 4
  br label %338

338:                                              ; preds = %337, %334
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %333) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %192, align 8
  br label %339

339:                                              ; preds = %338, %328
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %186)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %185) #11
  %340 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %330, i64 0, i32 1, i32 1
  %341 = bitcast %"struct.blink::GlyphOverflow"* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %341, i8* nonnull align 4 %171, i64 16, i1 false) #11
  br label %342

342:                                              ; preds = %339, %324
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %171) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %170) #11
  %343 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %168, align 8
  %344 = icmp eq %"class.blink::SimpleFontData"** %343, null
  br i1 %344, label %347, label %345, !prof !19

345:                                              ; preds = %342
  %346 = bitcast %"class.blink::SimpleFontData"** %343 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %346) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %168, align 8
  br label %347

347:                                              ; preds = %342, %345
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %167) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %165)
  call void @_ZN5blink13InlineFlowBox24AddTextBoxVisualOverflowEPNS_13InlineTextBoxERN3WTF7HashMapIPKS1_NSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS5_EENS3_10HashTraitsIS6_EENSJ_ISG_EESD_EERNS_10LayoutRectE(%"class.blink::InlineFlowBox"* %0, %"class.blink::InlineTextBox"* %229, %"class.WTF::HashMap.1681"* nonnull dereferenceable(24) %20, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %19)
  %348 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %163, align 8
  %349 = icmp eq %"struct.WTF::KeyValuePair.1685"* %348, null
  br i1 %349, label %376, label %350, !prof !19

350:                                              ; preds = %347
  %351 = load i32, i32* %164, align 8
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %374, label %353

353:                                              ; preds = %350
  %354 = zext i32 %351 to i64
  br label %355

355:                                              ; preds = %371, %353
  %356 = phi i64 [ 0, %353 ], [ %372, %371 ]
  %357 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %348, i64 %356, i32 0
  %358 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %357, align 8
  %359 = icmp eq %"class.blink::InlineTextBox"* %358, inttoptr (i64 -1 to %"class.blink::InlineTextBox"*)
  br i1 %359, label %371, label %360

360:                                              ; preds = %355
  %361 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %348, i64 %356, i32 1, i32 0, i32 0, i32 0, i32 0
  %362 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %361, align 8
  %363 = icmp eq %"class.blink::SimpleFontData"** %362, null
  %364 = bitcast %"class.blink::SimpleFontData"** %362 to i8*
  br i1 %363, label %371, label %365, !prof !19

365:                                              ; preds = %360
  %366 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %348, i64 %356, i32 1, i32 0, i32 0, i32 0, i32 2
  %367 = load i32, i32* %366, align 4
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %370, label %369, !prof !2

369:                                              ; preds = %365
  store i32 0, i32* %366, align 4
  br label %370

370:                                              ; preds = %369, %365
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %364) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %361, align 8
  br label %371

371:                                              ; preds = %370, %360, %355
  %372 = add nuw nsw i64 %356, 1
  %373 = icmp eq i64 %372, %354
  br i1 %373, label %374, label %355

374:                                              ; preds = %371, %350
  %375 = bitcast %"struct.WTF::KeyValuePair.1685"* %348 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %375) #11
  store %"struct.WTF::KeyValuePair.1685"* null, %"struct.WTF::KeyValuePair.1685"** %163, align 8
  br label %376

376:                                              ; preds = %347, %374
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %162) #11
  br label %378

377:                                              ; preds = %269
  call void @_ZN5blink13InlineFlowBox24AddTextBoxVisualOverflowEPNS_13InlineTextBoxERN3WTF7HashMapIPKS1_NSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS5_EENS3_10HashTraitsIS6_EENSJ_ISG_EESD_EERNS_10LayoutRectE(%"class.blink::InlineFlowBox"* %0, %"class.blink::InlineTextBox"* %229, %"class.WTF::HashMap.1681"* dereferenceable(24) %3, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %19)
  br label %378

378:                                              ; preds = %376, %377, %255
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %17, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %19) #11
  br label %628

379:                                              ; preds = %225
  %380 = bitcast %"class.blink::LayoutObject"* %219 to i1 (%"class.blink::LayoutObject"*)***
  %381 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %380, align 8
  %382 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %381, i64 26
  %383 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %382, align 8
  %384 = call zeroext i1 %383(%"class.blink::LayoutObject"* %219) #11
  br i1 %384, label %385, label %580

385:                                              ; preds = %379
  %386 = bitcast %"class.blink::InlineBox"* %217 to %"class.blink::InlineFlowBox"*
  call void @_ZN5blink13InlineFlowBox15ComputeOverflowENS_10LayoutUnitES1_RN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS2_6VectorIPKNS_14SimpleFontDataELj0ENS2_18PartitionAllocatorEEENS_13GlyphOverflowEEENS2_7PtrHashIS5_EENS2_10HashTraitsIS6_EENSJ_ISG_EESD_EE(%"class.blink::InlineFlowBox"* nonnull %386, i32 %1, i32 %2, %"class.WTF::HashMap.1681"* dereferenceable(24) %3)
  %387 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  %388 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %387, i64 0, i32 4
  %389 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %388 to i96*
  %390 = load i96, i96* %389, align 4
  %391 = and i96 %390, 33554432
  %392 = icmp eq i96 %391, 0
  %393 = bitcast %"class.blink::LayoutObject"* %387 to %"class.blink::LayoutBoxModelObject"*
  %394 = select i1 %392, %"class.blink::LayoutBoxModelObject"* %393, %"class.blink::LayoutBoxModelObject"* null
  %395 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %394) #11
  br i1 %395, label %461, label %396

396:                                              ; preds = %385
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %201) #11
  %397 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 1
  %398 = bitcast %"class.blink::InlineBox"* %397 to %"struct.blink::SimpleOverflowModel"**
  %399 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %398, align 8
  %400 = icmp eq %"struct.blink::SimpleOverflowModel"* %399, null
  br i1 %400, label %412, label %401

401:                                              ; preds = %396
  %402 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %399, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %403 = load i8, i8* %402, align 4, !range !3
  %404 = icmp eq i8 %403, 0
  br i1 %404, label %412, label %405

405:                                              ; preds = %401
  %406 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %399, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %407 = bitcast %"class.blink::LayoutRect"* %406 to i64*
  %408 = load i64, i64* %407, align 4
  %409 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %399, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %410 = bitcast %"class.blink::LayoutSize"* %409 to i64*
  %411 = load i64, i64* %410, align 4
  br label %440

412:                                              ; preds = %401, %396
  %413 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 7, i32 0
  %414 = load i32, i32* %413, align 4
  %415 = and i32 %414, 2048
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %424, label %417

417:                                              ; preds = %412
  %418 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 0, i32 0
  %419 = load i32, i32* %418, align 4
  %420 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 6, i32 0
  %421 = load i32, i32* %420, align 8
  %422 = zext i32 %419 to i64
  %423 = zext i32 %421 to i64
  br label %433

424:                                              ; preds = %412
  %425 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 1, i32 0
  %426 = load i32, i32* %425, align 4
  %427 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 6, i32 0
  %428 = load i32, i32* %427, align 8
  %429 = zext i32 %426 to i64
  %430 = shl nuw i64 %429, 32
  %431 = zext i32 %428 to i64
  %432 = shl nuw i64 %431, 32
  br label %433

433:                                              ; preds = %424, %417
  %434 = phi i64 [ %67, %424 ], [ %423, %417 ]
  %435 = phi i64 [ %432, %424 ], [ %68, %417 ]
  %436 = phi i64 [ %63, %424 ], [ %422, %417 ]
  %437 = phi i64 [ %430, %424 ], [ %64, %417 ]
  %438 = or i64 %437, %436
  %439 = or i64 %435, %434
  br label %440

440:                                              ; preds = %405, %433
  %441 = phi i64 [ %408, %405 ], [ %438, %433 ]
  %442 = phi i64 [ %411, %405 ], [ %439, %433 ]
  %443 = lshr i64 %441, 32
  %444 = lshr i64 %442, 32
  %445 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  %446 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %445, i64 0, i32 4
  %447 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %446 to i96*
  %448 = load i96, i96* %447, align 4
  %449 = trunc i96 %448 to i32
  %450 = icmp slt i32 %449, 0
  %451 = select i1 %450, i64 %442, i64 %444
  %452 = select i1 %450, i64 %443, i64 %441
  %453 = select i1 %450, i64 %441, i64 %443
  %454 = select i1 %450, i64 %444, i64 %442
  %455 = shl i64 %452, 32
  %456 = and i64 %453, 4294967295
  %457 = or i64 %455, %456
  %458 = shl i64 %454, 32
  %459 = and i64 %451, 4294967295
  %460 = or i64 %458, %459
  store i64 %457, i64* %202, align 8
  store i64 %460, i64* %203, align 8
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %17, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %22) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %201) #11
  br label %461

461:                                              ; preds = %385, %440
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %204) #11
  %462 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 1
  %463 = bitcast %"class.blink::InlineBox"* %462 to %"struct.blink::SimpleOverflowModel"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %214, i8 -86, i64 16, i1 false)
  %464 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %463, align 8
  %465 = icmp eq %"struct.blink::SimpleOverflowModel"* %464, null
  br i1 %465, label %477, label %466

466:                                              ; preds = %461
  %467 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %464, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %468 = load i8, i8* %467, align 4, !range !3
  %469 = icmp eq i8 %468, 0
  br i1 %469, label %477, label %470

470:                                              ; preds = %466
  %471 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %464, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %472 = bitcast %"class.blink::LayoutRect"* %471 to i64*
  %473 = load i64, i64* %472, align 4
  %474 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %464, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %475 = bitcast %"class.blink::LayoutSize"* %474 to i64*
  %476 = load i64, i64* %475, align 4
  br label %505

477:                                              ; preds = %466, %461
  %478 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 7, i32 0
  %479 = load i32, i32* %478, align 4
  %480 = and i32 %479, 2048
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %489, label %482

482:                                              ; preds = %477
  %483 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 0, i32 0
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 6, i32 0
  %486 = load i32, i32* %485, align 8
  %487 = zext i32 %484 to i64
  %488 = zext i32 %486 to i64
  br label %498

489:                                              ; preds = %477
  %490 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 1, i32 0
  %491 = load i32, i32* %490, align 4
  %492 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 6, i32 0
  %493 = load i32, i32* %492, align 8
  %494 = zext i32 %491 to i64
  %495 = shl nuw i64 %494, 32
  %496 = zext i32 %493 to i64
  %497 = shl nuw i64 %496, 32
  br label %498

498:                                              ; preds = %489, %482
  %499 = phi i64 [ %67, %489 ], [ %488, %482 ]
  %500 = phi i64 [ %497, %489 ], [ %68, %482 ]
  %501 = phi i64 [ %63, %489 ], [ %487, %482 ]
  %502 = phi i64 [ %495, %489 ], [ %64, %482 ]
  %503 = or i64 %502, %501
  %504 = or i64 %500, %499
  br label %505

505:                                              ; preds = %470, %498
  %506 = phi i64 [ %473, %470 ], [ %503, %498 ]
  %507 = phi i64 [ %476, %470 ], [ %504, %498 ]
  %508 = lshr i64 %506, 32
  %509 = lshr i64 %507, 32
  %510 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  %511 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %510, i64 0, i32 4
  %512 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %511 to i96*
  %513 = load i96, i96* %512, align 4
  %514 = trunc i96 %513 to i32
  %515 = icmp slt i32 %514, 0
  %516 = select i1 %515, i64 %507, i64 %509
  %517 = select i1 %515, i64 %508, i64 %506
  %518 = select i1 %515, i64 %506, i64 %508
  %519 = select i1 %515, i64 %509, i64 %507
  %520 = shl i64 %517, 32
  %521 = and i64 %518, 4294967295
  %522 = or i64 %520, %521
  %523 = shl i64 %519, 32
  %524 = and i64 %516, 4294967295
  %525 = or i64 %523, %524
  store i64 %522, i64* %208, align 8
  store i64 %525, i64* %207, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %209) #11
  %526 = load i32, i32* %27, align 4
  %527 = and i32 %526, 2048
  %528 = icmp eq i32 %527, 0
  %529 = select i1 %528, i32* %52, i32* %51
  %530 = load i32, i32* %529, align 4
  %531 = load i32, i32* %55, align 8
  %532 = zext i32 %530 to i64
  %533 = or i64 %64, %532
  %534 = zext i32 %531 to i64
  %535 = or i64 %68, %534
  store i64 %533, i64* %210, align 8
  store i64 %535, i64* %211, align 8
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %24, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %26) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %209) #11
  %536 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %218, align 8
  %537 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %536, i64 0, i32 4
  %538 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %537 to i96*
  %539 = load i96, i96* %538, align 4
  %540 = and i96 %539, 33554432
  %541 = icmp eq i96 %540, 0
  %542 = select i1 %541, %"class.blink::LayoutObject"* %536, %"class.blink::LayoutObject"* null
  %543 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %542, i64 0, i32 4
  %544 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %543 to i96*
  %545 = load i96, i96* %544, align 4
  %546 = and i96 %545, 113336795588871485128704
  %547 = icmp eq i96 %546, 37778931862957161709568
  br i1 %547, label %548, label %579

548:                                              ; preds = %505
  %549 = bitcast %"class.blink::LayoutObject"* %542 to %"class.blink::LayoutBoxModelObject"*
  %550 = call i64 @_ZNK5blink20LayoutBoxModelObject22RelativePositionOffsetEv(%"class.blink::LayoutBoxModelObject"* %549) #11
  %551 = lshr i64 %550, 32
  %552 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %542, i64 0, i32 5, i32 0
  %553 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %552, align 8
  %554 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %553, i64 0, i32 0, i32 9
  %555 = bitcast [20 x i8]* %554 to i160*
  %556 = load i160, i160* %555, align 8
  %557 = and i160 %556, 15211807202738752817960438464512
  %558 = icmp eq i160 %557, 0
  %559 = shl i64 %550, 32
  %560 = or i64 %559, %551
  %561 = select i1 %558, i64 %550, i64 %560
  %562 = trunc i64 %561 to i32
  %563 = lshr i64 %561, 32
  %564 = trunc i64 %563 to i32
  %565 = load i32, i32* %205, align 8
  %566 = icmp slt i32 %562, 0
  %567 = select i1 %566, i32 -2147483648, i32 2147483647
  %568 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %565, i32 %562) #11
  %569 = extractvalue { i32, i1 } %568, 1
  %570 = extractvalue { i32, i1 } %568, 0
  %571 = select i1 %569, i32 %567, i32 %570, !prof !2
  store i32 %571, i32* %205, align 8
  %572 = load i32, i32* %206, align 4
  %573 = icmp slt i32 %564, 0
  %574 = select i1 %573, i32 -2147483648, i32 2147483647
  %575 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %572, i32 %564) #11
  %576 = extractvalue { i32, i1 } %575, 1
  %577 = extractvalue { i32, i1 } %575, 0
  %578 = select i1 %576, i32 %574, i32 %577, !prof !2
  store i32 %578, i32* %206, align 4
  br label %579

579:                                              ; preds = %548, %505
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %15, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %24) #11
  br label %628

580:                                              ; preds = %379
  %581 = load i32, i32* %41, align 8
  %582 = icmp slt i32 %581, 1
  %583 = load i32, i32* %42, align 4
  %584 = icmp slt i32 %583, 1
  %585 = or i1 %582, %584
  br i1 %585, label %586, label %597

586:                                              ; preds = %580
  %587 = load i32, i32* %27, align 4
  %588 = and i32 %587, 2048
  %589 = icmp eq i32 %588, 0
  %590 = select i1 %589, i32* %52, i32* %51
  %591 = load i32, i32* %590, align 4
  %592 = load i32, i32* %55, align 8
  %593 = zext i32 %591 to i64
  %594 = or i64 %64, %593
  %595 = zext i32 %592 to i64
  %596 = or i64 %68, %595
  store i64 %594, i64* %193, align 8
  store i64 %596, i64* %195, align 8
  br label %597

597:                                              ; preds = %580, %586
  %598 = bitcast %"class.blink::LayoutObject"** %218 to %"class.blink::LayoutBox"**
  %599 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %598, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %197) #11
  %600 = call { i64, i64 } @_ZNK5blink9LayoutBox39LogicalLayoutOverflowRectForPropagationEPNS_12LayoutObjectE(%"class.blink::LayoutBox"* %599, %"class.blink::LayoutObject"* null) #11
  %601 = extractvalue { i64, i64 } %600, 0
  %602 = extractvalue { i64, i64 } %600, 1
  store i64 %602, i64* %200, align 8
  %603 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 7, i32 0
  %604 = load i32, i32* %603, align 4
  %605 = and i32 %604, 2048
  %606 = icmp eq i32 %605, 0
  %607 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 0, i32 0
  %608 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 5, i32 1, i32 0
  %609 = select i1 %606, i32* %608, i32* %607
  %610 = load i32, i32* %609, align 4
  %611 = select i1 %606, i32* %607, i32* %608
  %612 = load i32, i32* %611, align 4
  %613 = trunc i64 %601 to i32
  %614 = icmp slt i32 %610, 0
  %615 = select i1 %614, i32 -2147483648, i32 2147483647
  %616 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %613, i32 %610) #11
  %617 = extractvalue { i32, i1 } %616, 1
  %618 = extractvalue { i32, i1 } %616, 0
  %619 = select i1 %617, i32 %615, i32 %618, !prof !2
  store i32 %619, i32* %198, align 8
  %620 = lshr i64 %601, 32
  %621 = trunc i64 %620 to i32
  %622 = icmp slt i32 %612, 0
  %623 = select i1 %622, i32 -2147483648, i32 2147483647
  %624 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %621, i32 %612) #11
  %625 = extractvalue { i32, i1 } %624, 1
  %626 = extractvalue { i32, i1 } %624, 0
  %627 = select i1 %625, i32 %623, i32 %626, !prof !2
  store i32 %627, i32* %199, align 4
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* nonnull %15, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %196) #11
  br label %628

628:                                              ; preds = %579, %597, %378
  %629 = phi i8* [ %157, %378 ], [ %197, %597 ], [ %204, %579 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %629) #11
  br label %630

630:                                              ; preds = %628, %216
  %631 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %217, i64 0, i32 1
  %632 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %631, align 8
  %633 = icmp eq %"class.blink::InlineBox"* %632, null
  br i1 %633, label %215, label %216

634:                                              ; preds = %4, %215
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBox26AddBoxShadowVisualOverflowERNS_10LayoutRectE(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.blink::LineLayoutItem", align 8
  %4 = alloca <4 x i32>, align 16
  %5 = bitcast <4 x i32>* %4 to %"class.blink::LayoutRectOutsets"*
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"class.blink::LayoutRect"*
  %8 = bitcast %"class.blink::LineLayoutItem"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %11 = bitcast %"class.blink::LayoutObject"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.blink::LineLayoutItem"* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 1
  %17 = icmp ne i32 %16, 0
  %18 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %3, i1 zeroext %17)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %20 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %19, align 8
  %21 = icmp eq %"class.blink::InlineFlowBox"* %20, null
  br i1 %21, label %22, label %31

22:                                               ; preds = %2
  %23 = load i32, i32* %14, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %157, label %26

26:                                               ; preds = %22
  %27 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %10, align 8
  %28 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %27, i64 0, i32 5, i32 0
  %29 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %28, align 8
  %30 = icmp eq %"class.blink::ComputedStyle"* %18, %29
  br i1 %30, label %157, label %31

31:                                               ; preds = %2, %26
  %32 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 3, i32 0, i32 0
  %33 = load %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"*, %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData", %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* %33, i64 0, i32 5, i32 0
  %35 = load %"class.blink::ShadowList"*, %"class.blink::ShadowList"** %34, align 8
  %36 = icmp eq %"class.blink::ShadowList"* %35, null
  br i1 %36, label %157, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 9
  %39 = bitcast [20 x i8]* %38 to i160*
  %40 = load i160, i160* %39, align 8
  %41 = lshr i160 %40, 102
  %42 = trunc i160 %41 to i8
  %43 = and i8 %42, 3
  %44 = bitcast <4 x i32>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #11
  %45 = call { <2 x float>, <2 x float> } @_ZNK5blink10ShadowList28RectOutsetsIncludingOriginalEv(%"class.blink::ShadowList"* nonnull %35) #11
  %46 = extractvalue { <2 x float>, <2 x float> } %45, 0
  %47 = extractvalue { <2 x float>, <2 x float> } %45, 1
  %48 = shufflevector <2 x float> %46, <2 x float> %47, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = fmul <4 x float> %48, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %50 = fcmp ult <4 x float> %49, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %51 = fcmp ugt <4 x float> %49, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %52 = fcmp ogt <4 x float> %49, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %53 = select <4 x i1> %52, <4 x float> %49, <4 x float> <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %54 = fptosi <4 x float> %53 to <4 x i32>
  %55 = select <4 x i1> %50, <4 x i32> zeroinitializer, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %56 = select <4 x i1> %51, <4 x i32> %55, <4 x i32> %54
  store <4 x i32> %56, <4 x i32>* %4, align 16
  %57 = call { i64, i64 } @_ZN5blink48LineOrientationLayoutRectOutsetsWithFlippedLinesERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* nonnull dereferenceable(16) %5, i8 zeroext %43) #11
  %58 = extractvalue { i64, i64 } %57, 0
  %59 = trunc i64 %58 to i32
  %60 = lshr i64 %58, 32
  %61 = trunc i64 %60 to i32
  %62 = extractvalue { i64, i64 } %57, 1
  %63 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #11
  %64 = bitcast { i64, i64 }* %6 to i32*
  %65 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %7, i64 0, i32 0, i32 1, i32 0
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %67 = bitcast i64* %66 to i32*
  %68 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %7, i64 0, i32 1, i32 1, i32 0
  %69 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 16, i1 false)
  %70 = load i32, i32* %14, align 4
  %71 = and i32 %70, 2048
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5
  %74 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %73, i64 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %76 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %77 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %73, i64 0, i32 0, i32 0
  %78 = select i1 %72, i32* %77, i32* %75
  %79 = select i1 %72, i32* %76, i32* %74
  %80 = load i32, i32* %79, align 4
  %81 = load i32, i32* %78, align 4
  %82 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %9) #11
  %85 = zext i32 %81 to i64
  %86 = shl nuw i64 %85, 32
  %87 = zext i32 %80 to i64
  %88 = or i64 %86, %87
  %89 = zext i32 %84 to i64
  %90 = shl nuw i64 %89, 32
  %91 = zext i32 %83 to i64
  %92 = or i64 %90, %91
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %88, i64* %93, align 8
  store i64 %92, i64* %66, align 8
  %94 = lshr i64 %62, 32
  %95 = trunc i64 %94 to i32
  %96 = call i1 @llvm.is.constant.i32(i32 %95) #11
  br i1 %96, label %97, label %101

97:                                               ; preds = %37
  %98 = sub i32 0, %95
  %99 = icmp eq i32 %98, -2147483648
  %100 = select i1 %99, i32 2147483647, i32 %98
  br label %106

101:                                              ; preds = %37
  %102 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %95) #11
  %103 = extractvalue { i32, i1 } %102, 1
  %104 = extractvalue { i32, i1 } %102, 0
  %105 = select i1 %103, i32 2147483647, i32 %104
  br label %106

106:                                              ; preds = %101, %97
  %107 = phi i32 [ %100, %97 ], [ %105, %101 ]
  %108 = call i1 @llvm.is.constant.i32(i32 %59) #11
  br i1 %108, label %109, label %113

109:                                              ; preds = %106
  %110 = sub i32 0, %59
  %111 = icmp eq i32 %110, -2147483648
  %112 = select i1 %111, i32 2147483647, i32 %110
  br label %118

113:                                              ; preds = %106
  %114 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %59) #11
  %115 = extractvalue { i32, i1 } %114, 1
  %116 = extractvalue { i32, i1 } %114, 0
  %117 = select i1 %115, i32 2147483647, i32 %116
  br label %118

118:                                              ; preds = %109, %113
  %119 = phi i32 [ %112, %109 ], [ %117, %113 ]
  %120 = icmp slt i32 %107, 0
  %121 = select i1 %120, i32 -2147483648, i32 2147483647
  %122 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %80, i32 %107) #11
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 %121, i32 %124, !prof !2
  store i32 %125, i32* %64, align 8
  %126 = icmp slt i32 %119, 0
  %127 = select i1 %126, i32 -2147483648, i32 2147483647
  %128 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %81, i32 %119) #11
  %129 = extractvalue { i32, i1 } %128, 1
  %130 = extractvalue { i32, i1 } %128, 0
  %131 = select i1 %129, i32 %127, i32 %130, !prof !2
  store i32 %131, i32* %65, align 4
  %132 = icmp slt i32 %61, 0
  %133 = select i1 %132, i32 -2147483648, i32 2147483647
  %134 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %95, i32 %61) #11
  %135 = extractvalue { i32, i1 } %134, 1
  %136 = extractvalue { i32, i1 } %134, 0
  %137 = select i1 %135, i32 %133, i32 %136, !prof !2
  %138 = trunc i64 %62 to i32
  %139 = icmp slt i32 %138, 0
  %140 = select i1 %139, i32 -2147483648, i32 2147483647
  %141 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 %138) #11
  %142 = extractvalue { i32, i1 } %141, 1
  %143 = extractvalue { i32, i1 } %141, 0
  %144 = select i1 %142, i32 %140, i32 %143, !prof !2
  %145 = icmp slt i32 %137, 0
  %146 = select i1 %145, i32 -2147483648, i32 2147483647
  %147 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %83, i32 %137) #11
  %148 = extractvalue { i32, i1 } %147, 1
  %149 = extractvalue { i32, i1 } %147, 0
  %150 = select i1 %148, i32 %146, i32 %149, !prof !2
  store i32 %150, i32* %67, align 8
  %151 = icmp slt i32 %144, 0
  %152 = select i1 %151, i32 -2147483648, i32 2147483647
  %153 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %84, i32 %144) #11
  %154 = extractvalue { i32, i1 } %153, 1
  %155 = extractvalue { i32, i1 } %153, 0
  %156 = select i1 %154, i32 %152, i32 %155, !prof !2
  store i32 %156, i32* %68, align 4
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* %1, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %7) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #11
  br label %157

157:                                              ; preds = %22, %118, %31, %26
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBox29AddBorderOutsetVisualOverflowERNS_10LayoutRectE(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.blink::LineLayoutItem", align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.blink::LayoutRectOutsets"*
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"class.blink::LayoutRect"*
  %8 = bitcast %"class.blink::LineLayoutItem"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #11
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %11 = bitcast %"class.blink::LayoutObject"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.blink::LineLayoutItem"* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 1
  %17 = icmp ne i32 %16, 0
  %18 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %3, i1 zeroext %17)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #11
  %19 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %20 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %19, align 8
  %21 = icmp eq %"class.blink::InlineFlowBox"* %20, null
  br i1 %21, label %22, label %31

22:                                               ; preds = %2
  %23 = load i32, i32* %14, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %166, label %26

26:                                               ; preds = %22
  %27 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %10, align 8
  %28 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %27, i64 0, i32 5, i32 0
  %29 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %28, align 8
  %30 = icmp eq %"class.blink::ComputedStyle"* %18, %29
  br i1 %30, label %166, label %31

31:                                               ; preds = %2, %26
  %32 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 7, i32 0, i32 0
  %33 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %32, align 8
  %34 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %33, i64 0, i32 2, i32 0, i32 0, i32 0
  %35 = load %"class.blink::NinePieceImageData"*, %"class.blink::NinePieceImageData"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::NinePieceImageData", %"class.blink::NinePieceImageData"* %35, i64 0, i32 2, i32 0, i32 0
  %37 = load %"class.blink::StyleImage"*, %"class.blink::StyleImage"** %36, align 8
  %38 = icmp eq %"class.blink::StyleImage"* %37, null
  br i1 %38, label %166, label %39

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.blink::NinePieceImageData", %"class.blink::NinePieceImageData"* %35, i64 0, i32 5
  %41 = call zeroext i1 @_ZNK5blink20BorderImageLengthBox7NonZeroEv(%"class.blink::BorderImageLengthBox"* %40) #11
  br i1 %41, label %42, label %166

42:                                               ; preds = %39
  %43 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #11
  %44 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %32, align 8
  %45 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %44, i64 0, i32 2
  %46 = call { i64, i64 } @_ZNK5blink13ComputedStyle12ImageOutsetsERKNS_14NinePieceImageE(%"class.blink::ComputedStyle"* %18, %"class.blink::NinePieceImage"* dereferenceable(8) %45) #11
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %48 = extractvalue { i64, i64 } %46, 0
  store i64 %48, i64* %47, align 8
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %50 = extractvalue { i64, i64 } %46, 1
  store i64 %50, i64* %49, align 8
  %51 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %18, i64 0, i32 0, i32 9
  %52 = bitcast [20 x i8]* %51 to i160*
  %53 = load i160, i160* %52, align 8
  %54 = lshr i160 %53, 102
  %55 = trunc i160 %54 to i8
  %56 = and i8 %55, 3
  %57 = call { i64, i64 } @_ZN5blink48LineOrientationLayoutRectOutsetsWithFlippedLinesERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* nonnull dereferenceable(16) %5, i8 zeroext %56) #11
  %58 = extractvalue { i64, i64 } %57, 0
  %59 = trunc i64 %58 to i32
  %60 = lshr i64 %58, 32
  %61 = trunc i64 %60 to i32
  %62 = extractvalue { i64, i64 } %57, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #11
  %63 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %64 = load i32, i32* %63, align 8
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = and i64 %62, 4294967295
  %68 = select i1 %66, i64 %67, i64 %62
  %69 = and i32 %64, 2
  %70 = icmp eq i32 %69, 0
  %71 = select i1 %70, i32 0, i32 %61
  %72 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72) #11
  %73 = bitcast { i64, i64 }* %6 to i32*
  %74 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %7, i64 0, i32 0, i32 1, i32 0
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %76 = bitcast i64* %75 to i32*
  %77 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %7, i64 0, i32 1, i32 1, i32 0
  %78 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 -86, i64 16, i1 false)
  %79 = load i32, i32* %14, align 4
  %80 = and i32 %79, 2048
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5
  %83 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %82, i64 0, i32 0, i32 0
  %84 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %85 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %86 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %82, i64 0, i32 0, i32 0
  %87 = select i1 %81, i32* %86, i32* %84
  %88 = select i1 %81, i32* %85, i32* %83
  %89 = load i32, i32* %88, align 4
  %90 = load i32, i32* %87, align 4
  %91 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %9) #11
  %94 = zext i32 %90 to i64
  %95 = shl nuw i64 %94, 32
  %96 = zext i32 %89 to i64
  %97 = or i64 %95, %96
  %98 = zext i32 %93 to i64
  %99 = shl nuw i64 %98, 32
  %100 = zext i32 %92 to i64
  %101 = or i64 %99, %100
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %97, i64* %102, align 8
  store i64 %101, i64* %75, align 8
  %103 = lshr i64 %68, 32
  %104 = trunc i64 %103 to i32
  %105 = call i1 @llvm.is.constant.i32(i32 %104) #11
  br i1 %105, label %106, label %110

106:                                              ; preds = %42
  %107 = sub i32 0, %104
  %108 = icmp eq i32 %107, -2147483648
  %109 = select i1 %108, i32 2147483647, i32 %107
  br label %115

110:                                              ; preds = %42
  %111 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %104) #11
  %112 = extractvalue { i32, i1 } %111, 1
  %113 = extractvalue { i32, i1 } %111, 0
  %114 = select i1 %112, i32 2147483647, i32 %113
  br label %115

115:                                              ; preds = %110, %106
  %116 = phi i32 [ %109, %106 ], [ %114, %110 ]
  %117 = call i1 @llvm.is.constant.i32(i32 %59) #11
  br i1 %117, label %118, label %122

118:                                              ; preds = %115
  %119 = sub i32 0, %59
  %120 = icmp eq i32 %119, -2147483648
  %121 = select i1 %120, i32 2147483647, i32 %119
  br label %127

122:                                              ; preds = %115
  %123 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %59) #11
  %124 = extractvalue { i32, i1 } %123, 1
  %125 = extractvalue { i32, i1 } %123, 0
  %126 = select i1 %124, i32 2147483647, i32 %125
  br label %127

127:                                              ; preds = %118, %122
  %128 = phi i32 [ %121, %118 ], [ %126, %122 ]
  %129 = icmp slt i32 %116, 0
  %130 = select i1 %129, i32 -2147483648, i32 2147483647
  %131 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %89, i32 %116) #11
  %132 = extractvalue { i32, i1 } %131, 1
  %133 = extractvalue { i32, i1 } %131, 0
  %134 = select i1 %132, i32 %130, i32 %133, !prof !2
  store i32 %134, i32* %73, align 8
  %135 = icmp slt i32 %128, 0
  %136 = select i1 %135, i32 -2147483648, i32 2147483647
  %137 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %128) #11
  %138 = extractvalue { i32, i1 } %137, 1
  %139 = extractvalue { i32, i1 } %137, 0
  %140 = select i1 %138, i32 %136, i32 %139, !prof !2
  store i32 %140, i32* %74, align 4
  %141 = icmp slt i32 %71, 0
  %142 = select i1 %141, i32 -2147483648, i32 2147483647
  %143 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %104, i32 %71) #11
  %144 = extractvalue { i32, i1 } %143, 1
  %145 = extractvalue { i32, i1 } %143, 0
  %146 = select i1 %144, i32 %142, i32 %145, !prof !2
  %147 = trunc i64 %68 to i32
  %148 = icmp slt i32 %147, 0
  %149 = select i1 %148, i32 -2147483648, i32 2147483647
  %150 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %59, i32 %147) #11
  %151 = extractvalue { i32, i1 } %150, 1
  %152 = extractvalue { i32, i1 } %150, 0
  %153 = select i1 %151, i32 %149, i32 %152, !prof !2
  %154 = icmp slt i32 %146, 0
  %155 = select i1 %154, i32 -2147483648, i32 2147483647
  %156 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %92, i32 %146) #11
  %157 = extractvalue { i32, i1 } %156, 1
  %158 = extractvalue { i32, i1 } %156, 0
  %159 = select i1 %157, i32 %155, i32 %158, !prof !2
  store i32 %159, i32* %76, align 8
  %160 = icmp slt i32 %153, 0
  %161 = select i1 %160, i32 -2147483648, i32 2147483647
  %162 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %93, i32 %153) #11
  %163 = extractvalue { i32, i1 } %162, 1
  %164 = extractvalue { i32, i1 } %162, 0
  %165 = select i1 %163, i32 %161, i32 %164, !prof !2
  store i32 %165, i32* %77, align 4
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* %1, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %7) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72) #11
  br label %166

166:                                              ; preds = %22, %31, %39, %26, %127
  ret void
}

declare zeroext i1 @_ZNK5blink13InlineTextBox11IsLineBreakEv(%"class.blink::InlineTextBox"*) unnamed_addr #3

declare float @_ZNK5blink13InlineTextBox17NewlineSpaceWidthEv(%"class.blink::InlineTextBox"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBox24AddTextBoxVisualOverflowEPNS_13InlineTextBoxERN3WTF7HashMapIPKS1_NSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS5_EENS3_10HashTraitsIS6_EENSJ_ISG_EESD_EERNS_10LayoutRectE(%"class.blink::InlineFlowBox"*, %"class.blink::InlineTextBox"*, %"class.WTF::HashMap.1681"* dereferenceable(24), %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %"class.blink::LineLayoutText", align 8
  %7 = alloca %"class.blink::LineLayoutText", align 8
  %8 = alloca %"class.blink::InlineTextBox"*, align 8
  %9 = alloca i32, align 4
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %"class.blink::LayoutRectOutsets"*
  %12 = alloca <4 x i32>, align 16
  %13 = bitcast <4 x i32>* %12 to %"class.blink::LayoutRectOutsets"*
  %14 = alloca { i64, i64 }, align 8
  %15 = bitcast { i64, i64 }* %14 to %"class.blink::LayoutRect"*
  %16 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0
  %17 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 7, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 16384
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %473

21:                                               ; preds = %4
  %22 = bitcast %"class.blink::LineLayoutText"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #11
  %23 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 4, i32 0
  %24 = bitcast %"class.blink::LayoutObject"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.blink::LineLayoutText"* %7 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %7, i64 0, i32 0
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 1
  %31 = icmp ne i32 %30, 0
  %32 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %27, i1 zeroext %31)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #11
  %33 = bitcast %"class.blink::InlineTextBox"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  store %"class.blink::InlineTextBox"* %1, %"class.blink::InlineTextBox"** %8, align 8
  %34 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %2, i64 0, i32 0
  %35 = call { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_(%"class.WTF::HashTable.1682"* %34, %"class.blink::InlineTextBox"** nonnull dereferenceable(8) %8) #11
  %36 = extractvalue { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } %35, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %37 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %2, i64 0, i32 0, i32 0
  %38 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %37, align 8
  %39 = getelementptr inbounds %"class.WTF::HashMap.1681", %"class.WTF::HashMap.1681"* %2, i64 0, i32 0, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %38, i64 %41
  %43 = icmp eq %"struct.WTF::KeyValuePair.1685"* %36, %42
  br i1 %43, label %100, label %44

44:                                               ; preds = %21
  %45 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %32, i64 0, i32 0, i32 9
  %46 = bitcast [20 x i8]* %45 to i160*
  %47 = load i160, i160* %46, align 8
  %48 = and i160 %47, 15211807202738752817960438464512
  %49 = icmp eq i160 %48, 10141204801825835211973625643008
  %50 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %36, i64 0, i32 1, i32 1, i32 3
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %36, i64 0, i32 1, i32 1, i32 2
  %52 = select i1 %49, float* %50, float* %51
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %36, i64 0, i32 1, i32 1, i32 1
  %55 = load float, float* %54, align 4
  %56 = select i1 %49, float* %51, float* %50
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %36, i64 0, i32 1, i32 1, i32 0
  %59 = load float, float* %58, align 4
  %60 = fmul float %53, 6.400000e+01
  %61 = call float @llvm.ceil.f32(float %60) #11
  %62 = fcmp ult float %61, 0xC1E0000000000000
  %63 = fcmp ugt float %61, 0x41DFFFFFE0000000
  %64 = fcmp ogt float %61, 0xC1E0000000000000
  %65 = select i1 %64, float %61, float 0xC1E0000000000000
  %66 = fptosi float %65 to i32
  %67 = select i1 %62, i32 0, i32 2147483647
  %68 = select i1 %63, i32 %67, i32 %66
  %69 = fmul float %55, 6.400000e+01
  %70 = call float @llvm.ceil.f32(float %69) #11
  %71 = fcmp ult float %70, 0xC1E0000000000000
  %72 = fcmp ugt float %70, 0x41DFFFFFE0000000
  %73 = fcmp ogt float %70, 0xC1E0000000000000
  %74 = select i1 %73, float %70, float 0xC1E0000000000000
  %75 = fptosi float %74 to i32
  %76 = select i1 %71, i32 0, i32 2147483647
  %77 = select i1 %72, i32 %76, i32 %75
  %78 = fmul float %57, 6.400000e+01
  %79 = call float @llvm.ceil.f32(float %78) #11
  %80 = fcmp ult float %79, 0xC1E0000000000000
  %81 = fcmp ugt float %79, 0x41DFFFFFE0000000
  %82 = fcmp ogt float %79, 0xC1E0000000000000
  %83 = select i1 %82, float %79, float 0xC1E0000000000000
  %84 = fptosi float %83 to i32
  %85 = select i1 %80, i32 0, i32 2147483647
  %86 = select i1 %81, i32 %85, i32 %84
  %87 = fmul float %59, 6.400000e+01
  %88 = call float @llvm.ceil.f32(float %87) #11
  %89 = fcmp ult float %88, 0xC1E0000000000000
  %90 = fcmp ugt float %88, 0x41DFFFFFE0000000
  %91 = fcmp ogt float %88, 0xC1E0000000000000
  %92 = select i1 %91, float %88, float 0xC1E0000000000000
  %93 = fptosi float %92 to i32
  %94 = select i1 %89, i32 0, i32 2147483647
  %95 = select i1 %90, i32 %94, i32 %93
  %96 = zext i32 %95 to i64
  %97 = shl nuw i64 %96, 32
  %98 = zext i32 %86 to i64
  %99 = or i64 %97, %98
  br label %100

100:                                              ; preds = %21, %44
  %101 = phi i64 [ %99, %44 ], [ 0, %21 ]
  %102 = phi i32 [ %77, %44 ], [ 0, %21 ]
  %103 = phi i32 [ %68, %44 ], [ 0, %21 ]
  %104 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %32, i64 0, i32 0, i32 1, i32 0, i32 0
  %105 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %104, align 8
  %106 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %105, i64 0, i32 16
  %107 = load float, float* %106, align 8
  %108 = fcmp une float %107, 0.000000e+00
  br i1 %108, label %109, label %145

109:                                              ; preds = %100
  %110 = fmul float %107, 5.000000e-01
  %111 = fmul float %110, 6.400000e+01
  %112 = call float @llvm.ceil.f32(float %111) #11
  %113 = fcmp ult float %112, 0xC1E0000000000000
  %114 = fcmp ugt float %112, 0x41DFFFFFE0000000
  %115 = fcmp ogt float %112, 0xC1E0000000000000
  %116 = select i1 %115, float %112, float 0xC1E0000000000000
  %117 = fptosi float %116 to i32
  %118 = select i1 %113, i32 0, i32 2147483647
  %119 = select i1 %114, i32 %118, i32 %117
  %120 = icmp slt i32 %119, 0
  %121 = select i1 %120, i32 -2147483648, i32 2147483647
  %122 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %103, i32 %119) #11
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 %121, i32 %124, !prof !2
  %126 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %102, i32 %119) #11
  %127 = extractvalue { i32, i1 } %126, 1
  %128 = extractvalue { i32, i1 } %126, 0
  %129 = select i1 %127, i32 %121, i32 %128, !prof !2
  %130 = trunc i64 %101 to i32
  %131 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %130, i32 %119) #11
  %132 = extractvalue { i32, i1 } %131, 1
  %133 = extractvalue { i32, i1 } %131, 0
  %134 = select i1 %132, i32 %121, i32 %133, !prof !2
  %135 = zext i32 %134 to i64
  %136 = lshr i64 %101, 32
  %137 = trunc i64 %136 to i32
  %138 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %137, i32 %119) #11
  %139 = extractvalue { i32, i1 } %138, 1
  %140 = extractvalue { i32, i1 } %138, 0
  %141 = select i1 %139, i32 %121, i32 %140, !prof !2
  %142 = zext i32 %141 to i64
  %143 = shl nuw i64 %142, 32
  %144 = or i64 %143, %135
  br label %145

145:                                              ; preds = %109, %100
  %146 = phi i64 [ %144, %109 ], [ %101, %100 ]
  %147 = phi i32 [ %129, %109 ], [ %102, %100 ]
  %148 = phi i32 [ %125, %109 ], [ %103, %100 ]
  %149 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149) #11
  store i32 -1431655766, i32* %9, align 4
  %150 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %32) #11
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %205, label %152

152:                                              ; preds = %145
  %153 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* %1, %"class.blink::ComputedStyle"* dereferenceable(104) %32, i32* nonnull dereferenceable(4) %9) #11
  br i1 %153, label %154, label %205

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %32, i64 0, i32 0, i32 0, i32 0, i32 0
  %156 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %155, align 8
  %157 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %156, i64 0, i32 1, i32 0, i32 0
  %158 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %157, align 8
  %159 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %158, i64 0, i32 1
  %160 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %32) #11
  %161 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %159, %"class.WTF::AtomicString"* dereferenceable(8) %160) #11
  %162 = icmp sgt i32 %161, 33554431
  br i1 %162, label %167, label %163

163:                                              ; preds = %154
  %164 = icmp slt i32 %161, -33554432
  %165 = shl i32 %161, 6
  %166 = select i1 %164, i32 -2147483648, i32 %165
  br label %167

167:                                              ; preds = %163, %154
  %168 = phi i32 [ 2147483647, %154 ], [ %166, %163 ]
  %169 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %169) #11
  store i32 -1431655766, i32* %5, align 4
  %170 = bitcast %"class.blink::LineLayoutText"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %170) #11
  %171 = load i64, i64* %24, align 8
  %172 = bitcast %"class.blink::LineLayoutText"* %6 to i64*
  store i64 %171, i64* %172, align 8
  %173 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %6, i64 0, i32 0
  %174 = load i32, i32* %28, align 4
  %175 = and i32 %174, 1
  %176 = icmp ne i32 %175, 0
  %177 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %173, i1 zeroext %176) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %170) #11
  %178 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* %1, %"class.blink::ComputedStyle"* dereferenceable(104) %177, i32* nonnull dereferenceable(4) %5) #11
  br i1 %178, label %180, label %179

179:                                              ; preds = %167
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169) #11
  br label %198

180:                                              ; preds = %167
  %181 = call i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"* %177) #11
  %182 = load i32, i32* %28, align 4
  %183 = and i32 %182, 2048
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %191

185:                                              ; preds = %180
  %186 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %177, i64 0, i32 0, i32 9
  %187 = bitcast [20 x i8]* %186 to i160*
  %188 = load i160, i160* %187, align 8
  %189 = and i160 %188, 15211807202738752817960438464512
  %190 = icmp eq i160 %189, 10141204801825835211973625643008
  br i1 %190, label %193, label %191

191:                                              ; preds = %185, %180
  %192 = icmp eq i32 %181, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169) #11
  br i1 %192, label %195, label %198

193:                                              ; preds = %185
  %194 = icmp eq i32 %181, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169) #11
  br i1 %194, label %195, label %198

195:                                              ; preds = %191, %193
  %196 = icmp slt i32 %148, %168
  %197 = select i1 %196, i32 %168, i32 %148
  br label %205

198:                                              ; preds = %191, %179, %193
  %199 = trunc i64 %146 to i32
  %200 = icmp sgt i32 %168, %199
  %201 = select i1 %200, i32 %168, i32 %199
  %202 = zext i32 %201 to i64
  %203 = and i64 %146, -4294967296
  %204 = or i64 %203, %202
  br label %205

205:                                              ; preds = %195, %198, %145, %152
  %206 = phi i64 [ %146, %145 ], [ %146, %152 ], [ %146, %195 ], [ %204, %198 ]
  %207 = phi i32 [ %148, %145 ], [ %148, %152 ], [ %197, %195 ], [ %148, %198 ]
  %208 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %104, align 8
  %209 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %208, i64 0, i32 8, i32 0
  %210 = load %"class.blink::ShadowList"*, %"class.blink::ShadowList"** %209, align 8
  %211 = icmp eq %"class.blink::ShadowList"* %210, null
  br i1 %211, label %277, label %212

212:                                              ; preds = %205
  %213 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %213) #11
  %214 = bitcast { i64, i64 }* %10 to i32*
  %215 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %11, i64 0, i32 1, i32 0
  %216 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %217 = bitcast i64* %216 to i32*
  %218 = getelementptr inbounds %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRectOutsets"* %11, i64 0, i32 3, i32 0
  %219 = bitcast <4 x i32>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %219) #11
  %220 = call { <2 x float>, <2 x float> } @_ZNK5blink10ShadowList28RectOutsetsIncludingOriginalEv(%"class.blink::ShadowList"* nonnull %210) #11
  %221 = extractvalue { <2 x float>, <2 x float> } %220, 0
  %222 = extractvalue { <2 x float>, <2 x float> } %220, 1
  %223 = shufflevector <2 x float> %221, <2 x float> %222, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %224 = fmul <4 x float> %223, <float 6.400000e+01, float 6.400000e+01, float 6.400000e+01, float 6.400000e+01>
  %225 = fcmp ult <4 x float> %224, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %226 = fcmp ugt <4 x float> %224, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %227 = fcmp ogt <4 x float> %224, <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %228 = select <4 x i1> %227, <4 x float> %224, <4 x float> <float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000, float 0xC1E0000000000000>
  %229 = fptosi <4 x float> %228 to <4 x i32>
  %230 = select <4 x i1> %225, <4 x i32> zeroinitializer, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %231 = select <4 x i1> %226, <4 x i32> %230, <4 x i32> %229
  store <4 x i32> %231, <4 x i32>* %12, align 16
  %232 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %32, i64 0, i32 0, i32 9
  %233 = bitcast [20 x i8]* %232 to i160*
  %234 = load i160, i160* %233, align 8
  %235 = lshr i160 %234, 102
  %236 = trunc i160 %235 to i8
  %237 = and i8 %236, 3
  %238 = call { i64, i64 } @_ZN5blink32LineOrientationLayoutRectOutsetsERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* nonnull dereferenceable(16) %13, i8 zeroext %237) #11
  %239 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  %240 = extractvalue { i64, i64 } %238, 0
  store i64 %240, i64* %239, align 8
  %241 = extractvalue { i64, i64 } %238, 1
  store i64 %241, i64* %216, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %219) #11
  call void @_ZN5blink17LayoutRectOutsets19ClampNegativeToZeroEv(%"class.blink::LayoutRectOutsets"* nonnull %11) #11
  %242 = load i32, i32* %214, align 8
  %243 = icmp slt i32 %242, 0
  %244 = select i1 %243, i32 -2147483648, i32 2147483647
  %245 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %207, i32 %242) #11
  %246 = extractvalue { i32, i1 } %245, 1
  %247 = extractvalue { i32, i1 } %245, 0
  %248 = select i1 %246, i32 %244, i32 %247, !prof !2
  %249 = load i32, i32* %215, align 4
  %250 = icmp slt i32 %249, 0
  %251 = select i1 %250, i32 -2147483648, i32 2147483647
  %252 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %147, i32 %249) #11
  %253 = extractvalue { i32, i1 } %252, 1
  %254 = extractvalue { i32, i1 } %252, 0
  %255 = select i1 %253, i32 %251, i32 %254, !prof !2
  %256 = trunc i64 %206 to i32
  %257 = load i32, i32* %217, align 8
  %258 = icmp slt i32 %257, 0
  %259 = select i1 %258, i32 -2147483648, i32 2147483647
  %260 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %256, i32 %257) #11
  %261 = extractvalue { i32, i1 } %260, 1
  %262 = extractvalue { i32, i1 } %260, 0
  %263 = select i1 %261, i32 %259, i32 %262, !prof !2
  %264 = zext i32 %263 to i64
  %265 = lshr i64 %206, 32
  %266 = trunc i64 %265 to i32
  %267 = load i32, i32* %218, align 4
  %268 = icmp slt i32 %267, 0
  %269 = select i1 %268, i32 -2147483648, i32 2147483647
  %270 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %266, i32 %267) #11
  %271 = extractvalue { i32, i1 } %270, 1
  %272 = extractvalue { i32, i1 } %270, 0
  %273 = select i1 %271, i32 %269, i32 %272, !prof !2
  %274 = zext i32 %273 to i64
  %275 = shl nuw i64 %274, 32
  %276 = or i64 %275, %264
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %213) #11
  br label %277

277:                                              ; preds = %205, %212
  %278 = phi i64 [ %206, %205 ], [ %276, %212 ]
  %279 = phi i32 [ %147, %205 ], [ %255, %212 ]
  %280 = phi i32 [ %207, %205 ], [ %248, %212 ]
  %281 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %281) #11
  %282 = bitcast { i64, i64 }* %14 to i32*
  %283 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 0, i32 1, i32 0
  %284 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 1
  %285 = bitcast i64* %284 to i32*
  %286 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 1, i32 1, i32 0
  %287 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %287, i8 -86, i64 16, i1 false)
  %288 = load i32, i32* %17, align 4
  %289 = and i32 %288, 2048
  %290 = icmp eq i32 %289, 0
  %291 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 5
  %292 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %291, i64 0, i32 0, i32 0
  %293 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 5, i32 1, i32 0
  %294 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 5, i32 1, i32 0
  %295 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %291, i64 0, i32 0, i32 0
  %296 = select i1 %290, i32* %295, i32* %293
  %297 = select i1 %290, i32* %294, i32* %292
  %298 = load i32, i32* %297, align 4
  %299 = load i32, i32* %296, align 4
  %300 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 6, i32 0
  %301 = load i32, i32* %300, align 8
  %302 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %16) #11
  %303 = zext i32 %299 to i64
  %304 = shl nuw i64 %303, 32
  %305 = zext i32 %298 to i64
  %306 = or i64 %304, %305
  %307 = zext i32 %302 to i64
  %308 = shl nuw i64 %307, 32
  %309 = zext i32 %301 to i64
  %310 = or i64 %308, %309
  %311 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 0
  store i64 %306, i64* %311, align 8
  store i64 %310, i64* %284, align 8
  %312 = lshr i64 %278, 32
  %313 = trunc i64 %312 to i32
  %314 = call i1 @llvm.is.constant.i32(i32 %313) #11
  br i1 %314, label %315, label %319

315:                                              ; preds = %277
  %316 = sub i32 0, %313
  %317 = icmp eq i32 %316, -2147483648
  %318 = select i1 %317, i32 2147483647, i32 %316
  br label %324

319:                                              ; preds = %277
  %320 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %313) #11
  %321 = extractvalue { i32, i1 } %320, 1
  %322 = extractvalue { i32, i1 } %320, 0
  %323 = select i1 %321, i32 2147483647, i32 %322
  br label %324

324:                                              ; preds = %319, %315
  %325 = phi i32 [ %318, %315 ], [ %323, %319 ]
  %326 = call i1 @llvm.is.constant.i32(i32 %280) #11
  br i1 %326, label %327, label %331

327:                                              ; preds = %324
  %328 = sub i32 0, %280
  %329 = icmp eq i32 %328, -2147483648
  %330 = select i1 %329, i32 2147483647, i32 %328
  br label %336

331:                                              ; preds = %324
  %332 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %280) #11
  %333 = extractvalue { i32, i1 } %332, 1
  %334 = extractvalue { i32, i1 } %332, 0
  %335 = select i1 %333, i32 2147483647, i32 %334
  br label %336

336:                                              ; preds = %327, %331
  %337 = phi i32 [ %330, %327 ], [ %335, %331 ]
  %338 = icmp slt i32 %325, 0
  %339 = select i1 %338, i32 -2147483648, i32 2147483647
  %340 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %298, i32 %325) #11
  %341 = extractvalue { i32, i1 } %340, 1
  %342 = extractvalue { i32, i1 } %340, 0
  %343 = select i1 %341, i32 %339, i32 %342, !prof !2
  store i32 %343, i32* %282, align 8
  %344 = icmp slt i32 %337, 0
  %345 = select i1 %344, i32 -2147483648, i32 2147483647
  %346 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %299, i32 %337) #11
  %347 = extractvalue { i32, i1 } %346, 1
  %348 = extractvalue { i32, i1 } %346, 0
  %349 = select i1 %347, i32 %345, i32 %348, !prof !2
  store i32 %349, i32* %283, align 4
  %350 = icmp slt i32 %279, 0
  %351 = select i1 %350, i32 -2147483648, i32 2147483647
  %352 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %313, i32 %279) #11
  %353 = extractvalue { i32, i1 } %352, 1
  %354 = extractvalue { i32, i1 } %352, 0
  %355 = select i1 %353, i32 %351, i32 %354, !prof !2
  %356 = trunc i64 %278 to i32
  %357 = icmp slt i32 %356, 0
  %358 = select i1 %357, i32 -2147483648, i32 2147483647
  %359 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %280, i32 %356) #11
  %360 = extractvalue { i32, i1 } %359, 1
  %361 = extractvalue { i32, i1 } %359, 0
  %362 = select i1 %360, i32 %358, i32 %361, !prof !2
  %363 = icmp slt i32 %355, 0
  %364 = select i1 %363, i32 -2147483648, i32 2147483647
  %365 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %301, i32 %355) #11
  %366 = extractvalue { i32, i1 } %365, 1
  %367 = extractvalue { i32, i1 } %365, 0
  %368 = select i1 %366, i32 %364, i32 %367, !prof !2
  store i32 %368, i32* %285, align 8
  %369 = icmp slt i32 %362, 0
  %370 = select i1 %369, i32 -2147483648, i32 2147483647
  %371 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %302, i32 %362) #11
  %372 = extractvalue { i32, i1 } %371, 1
  %373 = extractvalue { i32, i1 } %371, 0
  %374 = select i1 %372, i32 %370, i32 %373, !prof !2
  store i32 %374, i32* %286, align 4
  %375 = load i64, i64* %311, align 8
  %376 = trunc i64 %375 to i32
  %377 = lshr i64 %375, 32
  %378 = trunc i64 %377 to i32
  %379 = icmp slt i32 %376, -2147483584
  %380 = ashr i32 %376, 6
  %381 = select i1 %379, i32 -33554432, i32 %380, !prof !2
  %382 = icmp slt i32 %378, -2147483584
  %383 = ashr i32 %378, 6
  %384 = select i1 %382, i32 -33554432, i32 %383, !prof !2
  %385 = icmp slt i32 %368, 0
  %386 = select i1 %385, i32 -2147483648, i32 2147483647
  %387 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %376, i32 %368) #11
  %388 = extractvalue { i32, i1 } %387, 1
  %389 = extractvalue { i32, i1 } %387, 0
  %390 = select i1 %388, i32 %386, i32 %389, !prof !2
  %391 = icmp slt i32 %374, 0
  %392 = select i1 %391, i32 -2147483648, i32 2147483647
  %393 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %349, i32 %374) #11
  %394 = extractvalue { i32, i1 } %393, 1
  %395 = extractvalue { i32, i1 } %393, 0
  %396 = select i1 %394, i32 %392, i32 %395, !prof !2
  %397 = icmp sgt i32 %390, 2147483583
  br i1 %397, label %405, label %398, !prof !2

398:                                              ; preds = %336
  %399 = icmp sgt i32 %390, -1
  br i1 %399, label %400, label %403

400:                                              ; preds = %398
  %401 = add nuw nsw i32 %390, 63
  %402 = sdiv i32 %401, 64
  br label %405

403:                                              ; preds = %398
  %404 = sdiv i32 %390, 64
  br label %405

405:                                              ; preds = %403, %400, %336
  %406 = phi i32 [ %402, %400 ], [ %404, %403 ], [ 33554431, %336 ]
  %407 = icmp sgt i32 %396, 2147483583
  br i1 %407, label %415, label %408, !prof !2

408:                                              ; preds = %405
  %409 = icmp sgt i32 %396, -1
  br i1 %409, label %410, label %413

410:                                              ; preds = %408
  %411 = add nuw nsw i32 %396, 63
  %412 = sdiv i32 %411, 64
  br label %415

413:                                              ; preds = %408
  %414 = sdiv i32 %396, 64
  br label %415

415:                                              ; preds = %405, %410, %413
  %416 = phi i32 [ %412, %410 ], [ %414, %413 ], [ 33554431, %405 ]
  %417 = sub nsw i32 %406, %381
  %418 = sub nsw i32 %416, %384
  %419 = shl nsw i32 %381, 6
  %420 = shl nsw i32 %384, 6
  %421 = icmp sgt i32 %417, 33554431
  br i1 %421, label %426, label %422

422:                                              ; preds = %415
  %423 = icmp slt i32 %417, -33554432
  %424 = shl i32 %417, 6
  %425 = select i1 %423, i32 -2147483648, i32 %424
  br label %426

426:                                              ; preds = %422, %415
  %427 = phi i32 [ 2147483647, %415 ], [ %425, %422 ]
  %428 = icmp sgt i32 %418, 33554431
  br i1 %428, label %433, label %429

429:                                              ; preds = %426
  %430 = icmp slt i32 %418, -33554432
  %431 = shl i32 %418, 6
  %432 = select i1 %430, i32 -2147483648, i32 %431
  br label %433

433:                                              ; preds = %429, %426
  %434 = phi i32 [ 2147483647, %426 ], [ %432, %429 ]
  store i32 %419, i32* %282, align 8
  %435 = getelementptr inbounds i8, i8* %281, i64 4
  %436 = bitcast i8* %435 to i32*
  store i32 %420, i32* %436, align 4
  store i32 %427, i32* %285, align 8
  %437 = getelementptr inbounds i8, i8* %281, i64 12
  %438 = bitcast i8* %437 to i32*
  store i32 %434, i32* %438, align 4
  call void @_ZN5blink10LayoutRect5UniteERKS0_(%"class.blink::LayoutRect"* %3, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %15) #11
  %439 = load i32, i32* %17, align 4
  %440 = and i32 %439, 2048
  %441 = icmp eq i32 %440, 0
  %442 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %291, i64 0, i32 0, i32 0
  %443 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 5, i32 1, i32 0
  %444 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 5, i32 1, i32 0
  %445 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %291, i64 0, i32 0, i32 0
  %446 = select i1 %441, i32* %445, i32* %443
  %447 = select i1 %441, i32* %444, i32* %442
  %448 = load i32, i32* %447, align 4
  %449 = load i32, i32* %446, align 4
  %450 = getelementptr inbounds %"class.blink::InlineTextBox", %"class.blink::InlineTextBox"* %1, i64 0, i32 0, i32 6, i32 0
  %451 = load i32, i32* %450, align 8
  %452 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %16) #11
  %453 = bitcast %"class.blink::LayoutRect"* %3 to i64*
  %454 = load i64, i64* %453, align 4
  %455 = trunc i64 %454 to i32
  %456 = lshr i64 %454, 32
  %457 = trunc i64 %456 to i32
  %458 = icmp eq i32 %448, %455
  %459 = icmp eq i32 %449, %457
  %460 = and i1 %458, %459
  br i1 %460, label %461, label %471

461:                                              ; preds = %433
  %462 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %3, i64 0, i32 1
  %463 = bitcast %"class.blink::LayoutSize"* %462 to i64*
  %464 = load i64, i64* %463, align 4
  %465 = trunc i64 %464 to i32
  %466 = icmp eq i32 %451, %465
  br i1 %466, label %467, label %471

467:                                              ; preds = %461
  %468 = lshr i64 %464, 32
  %469 = trunc i64 %468 to i32
  %470 = icmp eq i32 %452, %469
  br i1 %470, label %472, label %471

471:                                              ; preds = %467, %433, %461
  call void @_ZN5blink13InlineTextBox22SetLogicalOverflowRectERKNS_10LayoutRectE(%"class.blink::InlineTextBox"* %1, %"class.blink::LayoutRect"* dereferenceable(16) %3) #11
  br label %472

472:                                              ; preds = %467, %471
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %281) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149) #11
  br label %473

473:                                              ; preds = %4, %472
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox17SetLayoutOverflowERKNS_10LayoutRectES3_(%"class.blink::InlineFlowBox"* nocapture, %"class.blink::LayoutRect"* dereferenceable(16), %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %4 = tail call zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"* %2, %"class.blink::LayoutRect"* dereferenceable(16) %1) #11
  br i1 %4, label %43, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %43, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %43, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %14, align 8
  %16 = icmp eq %"struct.blink::SimpleOverflowModel"* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 4, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %27, label %38

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1
  %23 = tail call i8* @_Znwm(i64 40) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %23, i8 0, i64 40, i1 false) #11
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast %"class.std::__1::unique_ptr.1603"* %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = bitcast i8* %23 to %"struct.blink::SimpleOverflowModel"*
  br label %27

27:                                               ; preds = %21, %17
  %28 = phi %"struct.blink::SimpleOverflowModel"* [ %26, %21 ], [ %15, %17 ]
  %29 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %29, align 4
  %30 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %31 = bitcast %"class.blink::SimpleLayoutOverflowModel"* %30 to i8*
  %32 = bitcast %"class.blink::LayoutRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false) #11
  store i8 1, i8* %29, align 4
  %33 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %14, align 8
  %34 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8, i8* %34, align 4, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %38, !prof !2

37:                                               ; preds = %27
  tail call void @llvm.trap() #11
  unreachable

38:                                               ; preds = %17, %27
  %39 = phi %"struct.blink::SimpleOverflowModel"* [ %33, %27 ], [ %15, %17 ]
  %40 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %41 = bitcast %"class.blink::SimpleLayoutOverflowModel"* %40 to i8*
  %42 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 16, i1 false) #11
  br label %43

43:                                               ; preds = %5, %3, %9, %38
  ret void
}

declare zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox17SetVisualOverflowERKNS_10LayoutRectES3_(%"class.blink::InlineFlowBox"* nocapture, %"class.blink::LayoutRect"* dereferenceable(16), %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %4 = tail call zeroext i1 @_ZNK5blink10LayoutRect8ContainsERKS0_(%"class.blink::LayoutRect"* %2, %"class.blink::LayoutRect"* dereferenceable(16) %1) #11
  br i1 %4, label %43, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %43, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %1, i64 0, i32 1, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %43, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %15 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %14, align 8
  %16 = icmp eq %"struct.blink::SimpleOverflowModel"* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 4, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %27, label %38

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1
  %23 = tail call i8* @_Znwm(i64 40) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %23, i8 0, i64 40, i1 false) #11
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast %"class.std::__1::unique_ptr.1603"* %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = bitcast i8* %23 to %"struct.blink::SimpleOverflowModel"*
  br label %27

27:                                               ; preds = %21, %17
  %28 = phi %"struct.blink::SimpleOverflowModel"* [ %26, %21 ], [ %15, %17 ]
  %29 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %28, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %29, align 4
  %30 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %28, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %31 = bitcast %"class.blink::SimpleVisualOverflowModel"* %30 to i8*
  %32 = bitcast %"class.blink::LayoutRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 16, i1 false) #11
  store i8 1, i8* %29, align 4
  %33 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %14, align 8
  %34 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %33, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %35 = load i8, i8* %34, align 4, !range !3
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %38, !prof !2

37:                                               ; preds = %27
  tail call void @llvm.trap() #11
  unreachable

38:                                               ; preds = %17, %27
  %39 = phi %"struct.blink::SimpleOverflowModel"* [ %33, %27 ], [ %15, %17 ]
  %40 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %39, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %41 = bitcast %"class.blink::SimpleVisualOverflowModel"* %40 to i8*
  %42 = bitcast %"class.blink::LayoutRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 16, i1 false) #11
  br label %43

43:                                               ; preds = %5, %3, %9, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13InlineFlowBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::InlineFlowBox"*, %"class.blink::HitTestResult"* dereferenceable(112), %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #1 align 2 {
  %7 = alloca { i64, i64 }, align 8
  %8 = bitcast { i64, i64 }* %7 to %"struct.blink::PhysicalRect"*
  %9 = alloca i64, align 8
  %10 = bitcast i64* %9 to %"struct.blink::PhysicalOffset"*
  %11 = alloca { i64, i64 }, align 8
  %12 = bitcast { i64, i64 }* %11 to %"struct.blink::PhysicalRect"*
  %13 = alloca %"class.blink::FloatRoundedRect", align 4
  %14 = alloca { i64, i64 }, align 8
  %15 = bitcast { i64, i64 }* %14 to %"class.blink::LayoutRect"*
  %16 = alloca %"class.blink::InlineFlowBoxPainter", align 8
  %17 = alloca %"struct.blink::PhysicalRect", align 8
  %18 = alloca i64, align 8
  %19 = bitcast i64* %18 to %"struct.blink::PhysicalOffset"*
  %20 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #11
  %21 = bitcast { i64, i64 }* %7 to %"struct.blink::PhysicalOffset"*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %23 = tail call { i64, i64 } @_ZNK5blink13InlineFlowBox26PhysicalVisualOverflowRectENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* %0, i32 %4, i32 %5)
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  %25 = extractvalue { i64, i64 } %23, 0
  %26 = extractvalue { i64, i64 } %23, 1
  store i64 %26, i64* %22, align 8
  %27 = trunc i64 %25 to i32
  %28 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %3, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  %31 = select i1 %30, i32 -2147483648, i32 2147483647
  %32 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %29) #11
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  %35 = select i1 %33, i32 %31, i32 %34, !prof !2
  %36 = lshr i64 %25, 32
  %37 = trunc i64 %36 to i32
  %38 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %3, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %37, i32 %39) #11
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44, !prof !2
  %46 = zext i32 %45 to i64
  %47 = shl nuw i64 %46, 32
  %48 = zext i32 %35 to i64
  %49 = or i64 %47, %48
  store i64 %49, i64* %24, align 8
  %50 = call zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_12PhysicalRectE(%"class.blink::HitTestLocation"* %2, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %8) #11
  br i1 %50, label %51, label %492

51:                                               ; preds = %6
  %52 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  %53 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %52, align 8
  %54 = icmp eq %"class.blink::InlineBox"* %53, null
  br i1 %54, label %149, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  br label %57

57:                                               ; preds = %55, %147
  %58 = phi %"class.blink::InlineBox"* [ %53, %55 ], [ %60, %147 ]
  %59 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %58, i64 0, i32 2
  %60 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %59, align 8
  %61 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %58, i64 0, i32 4, i32 0
  %62 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %62, i64 0, i32 4
  %64 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %63 to i96*
  %65 = load i96, i96* %64, align 4
  %66 = and i96 %65, 33554432
  %67 = icmp ne i96 %66, 0
  %68 = icmp eq %"class.blink::LayoutObject"* %62, null
  %69 = or i1 %68, %67
  br i1 %69, label %73, label %70

70:                                               ; preds = %57
  %71 = bitcast %"class.blink::LayoutObject"* %62 to %"class.blink::LayoutBoxModelObject"*
  %72 = call zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"* %71) #11
  br i1 %72, label %108, label %73

73:                                               ; preds = %57, %70
  %74 = bitcast %"class.blink::InlineBox"* %58 to i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)***
  %75 = load i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)**, i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)*** %74, align 8
  %76 = getelementptr inbounds i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)*, i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)** %75, i64 12
  %77 = load i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)*, i1 (%"class.blink::InlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)** %76, align 8
  %78 = call zeroext i1 %77(%"class.blink::InlineBox"* nonnull %58, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalOffset"* dereferenceable(8) %3, i32 %4, i32 %5) #11
  br i1 %78, label %79, label %108

79:                                               ; preds = %73
  %80 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %56, align 8
  %81 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #11
  %82 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = load i32, i32* %28, align 4
  %85 = icmp sgt i32 %84, -1
  %86 = select i1 %85, i32 -2147483648, i32 2147483647
  %87 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %83, i32 %84) #11
  %88 = extractvalue { i32, i1 } %87, 1
  %89 = extractvalue { i32, i1 } %87, 0
  %90 = select i1 %88, i32 %86, i32 %89, !prof !2
  %91 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 1, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = load i32, i32* %38, align 4
  %94 = icmp sgt i32 %93, -1
  %95 = select i1 %94, i32 -2147483648, i32 2147483647
  %96 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %92, i32 %93) #11
  %97 = extractvalue { i32, i1 } %96, 1
  %98 = extractvalue { i32, i1 } %96, 0
  %99 = select i1 %97, i32 %95, i32 %98, !prof !2
  %100 = zext i32 %99 to i64
  %101 = shl nuw i64 %100, 32
  %102 = zext i32 %90 to i64
  %103 = or i64 %101, %102
  store i64 %103, i64* %9, align 8
  %104 = bitcast %"class.blink::LayoutObject"* %80 to void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)***
  %105 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)**, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %105, i64 62
  %107 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %106, align 8
  call void %107(%"class.blink::LayoutObject"* %80, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"struct.blink::PhysicalOffset"* nonnull dereferenceable(8) %10) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #11
  br label %492

108:                                              ; preds = %70, %73
  %109 = icmp ne %"class.blink::InlineBox"* %60, null
  %110 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %61, align 8
  br i1 %109, label %111, label %115

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %60, i64 0, i32 4, i32 0
  %113 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %112, align 8
  %114 = icmp eq %"class.blink::LayoutObject"* %110, %113
  br i1 %114, label %147, label %115

115:                                              ; preds = %108, %111
  %116 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %60, i64 0, i32 4, i32 0
  br label %117

117:                                              ; preds = %146, %115
  %118 = phi %"class.blink::LayoutObject"* [ %110, %115 ], [ %129, %146 ]
  %119 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %118, i64 0, i32 8
  %120 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %119, align 8
  %121 = icmp eq %"class.blink::LayoutObject"* %120, null
  br i1 %121, label %122, label %126

122:                                              ; preds = %117
  %123 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %118, i64 0, i32 9
  %124 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %123, align 8
  %125 = icmp ne %"class.blink::LayoutObject"* %124, null
  br label %126

126:                                              ; preds = %117, %122
  %127 = phi i1 [ true, %117 ], [ %125, %122 ]
  %128 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %118, i64 0, i32 7
  %129 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %128, align 8
  %130 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %56, align 8
  %131 = icmp eq %"class.blink::LayoutObject"* %129, %130
  br i1 %131, label %147, label %132

132:                                              ; preds = %126
  %133 = and i1 %109, %127
  br i1 %133, label %134, label %137

134:                                              ; preds = %132
  %135 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %116, align 8
  %136 = call zeroext i1 @_ZNK5blink12LayoutObject14IsDescendantOfEPKS0_(%"class.blink::LayoutObject"* %135, %"class.blink::LayoutObject"* %129) #11
  br i1 %136, label %147, label %137

137:                                              ; preds = %132, %134
  %138 = bitcast %"class.blink::LayoutObject"* %129 to i1 (%"class.blink::LayoutObject"*)***
  %139 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %138, align 8
  %140 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %139, i64 26
  %141 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %140, align 8
  %142 = call zeroext i1 %141(%"class.blink::LayoutObject"* %129) #11
  br i1 %142, label %143, label %146

143:                                              ; preds = %137
  %144 = bitcast %"class.blink::LayoutObject"* %129 to %"class.blink::LayoutInline"*
  %145 = call zeroext i1 @_ZN5blink12LayoutInline19HitTestCulledInlineERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetEPKNS_14NGInlineCursorE(%"class.blink::LayoutInline"* %144, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalOffset"* dereferenceable(8) %3, %"class.blink::NGInlineCursor"* null) #11
  br i1 %145, label %492, label %146

146:                                              ; preds = %143, %137
  br label %117

147:                                              ; preds = %126, %134, %111
  %148 = icmp eq %"class.blink::InlineBox"* %60, null
  br i1 %148, label %149, label %57

149:                                              ; preds = %147, %51
  %150 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %151 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %152 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  %153 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %152, i64 0, i32 4
  %154 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %153 to i96*
  %155 = load i96, i96* %154, align 4
  %156 = and i96 %155, 67108864
  %157 = icmp eq i96 %156, 0
  br i1 %157, label %163, label %158

158:                                              ; preds = %149
  %159 = bitcast %"class.blink::LayoutObject"* %152 to %"class.blink::LayoutBox"*
  %160 = call zeroext i1 @_ZNK5blink9LayoutBox25HitTestClippedOutByBorderERKNS_15HitTestLocationERKNS_14PhysicalOffsetE(%"class.blink::LayoutBox"* %159, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalOffset"* nonnull dereferenceable(8) %21) #11
  br i1 %160, label %492, label %161

161:                                              ; preds = %158
  %162 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  br label %163

163:                                              ; preds = %161, %149
  %164 = phi %"class.blink::LayoutObject"* [ %162, %161 ], [ %152, %149 ]
  %165 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %164, i64 0, i32 5, i32 0
  %166 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %165, align 8
  %167 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %166, i64 0, i32 0, i32 7, i32 0, i32 0
  %168 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %167, align 8
  %169 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 5, i32 0
  %170 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 5, i32 0, i32 2
  %171 = load i8, i8* %170, align 1
  %172 = icmp eq i8 %171, 8
  br i1 %172, label %236, label %173

173:                                              ; preds = %163
  %174 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 5, i32 0, i32 3
  %175 = load i8, i8* %174, align 2, !range !3
  %176 = icmp eq i8 %175, 0
  br i1 %176, label %181, label %177

177:                                              ; preds = %173
  %178 = bitcast %"class.blink::Length"* %169 to float*
  %179 = load float, float* %178, align 4
  %180 = fcmp oeq float %179, 0.000000e+00
  br i1 %180, label %185, label %236

181:                                              ; preds = %173
  %182 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %169, i64 0, i32 0, i32 0
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %236

185:                                              ; preds = %181, %177
  %186 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 6, i32 0
  %187 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 6, i32 0, i32 2
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, 8
  br i1 %189, label %236, label %190

190:                                              ; preds = %185
  %191 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 6, i32 0, i32 3
  %192 = load i8, i8* %191, align 2, !range !3
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %198, label %194

194:                                              ; preds = %190
  %195 = bitcast %"class.blink::Length"* %186 to float*
  %196 = load float, float* %195, align 4
  %197 = fcmp oeq float %196, 0.000000e+00
  br i1 %197, label %202, label %236

198:                                              ; preds = %190
  %199 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %186, i64 0, i32 0, i32 0
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %236

202:                                              ; preds = %198, %194
  %203 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 3, i32 0
  %204 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 3, i32 0, i32 2
  %205 = load i8, i8* %204, align 1
  %206 = icmp eq i8 %205, 8
  br i1 %206, label %236, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 3, i32 0, i32 3
  %209 = load i8, i8* %208, align 2, !range !3
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %215, label %211

211:                                              ; preds = %207
  %212 = bitcast %"class.blink::Length"* %203 to float*
  %213 = load float, float* %212, align 4
  %214 = fcmp oeq float %213, 0.000000e+00
  br i1 %214, label %219, label %236

215:                                              ; preds = %207
  %216 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %203, i64 0, i32 0, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %236

219:                                              ; preds = %215, %211
  %220 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 4, i32 0
  %221 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 4, i32 0, i32 2
  %222 = load i8, i8* %221, align 1
  %223 = icmp eq i8 %222, 8
  br i1 %223, label %236, label %224

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %168, i64 0, i32 4, i32 0, i32 3
  %226 = load i8, i8* %225, align 2, !range !3
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %224
  %229 = bitcast %"class.blink::Length"* %220 to float*
  %230 = load float, float* %229, align 4
  %231 = fcmp oeq float %230, 0.000000e+00
  br i1 %231, label %308, label %236

232:                                              ; preds = %224
  %233 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %220, i64 0, i32 0, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %308, label %236

236:                                              ; preds = %181, %198, %215, %177, %194, %211, %232, %228, %163, %185, %202, %219
  %237 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %237) #11
  %238 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 1
  %239 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %240 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %240, i8 -86, i64 16, i1 false)
  %241 = load i32, i32* %239, align 4
  %242 = and i32 %241, 2048
  %243 = icmp eq i32 %242, 0
  %244 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5
  %245 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %244, i64 0, i32 0, i32 0
  %246 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %247 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %248 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %244, i64 0, i32 0, i32 0
  %249 = select i1 %243, i32* %248, i32* %246
  %250 = select i1 %243, i32* %247, i32* %245
  %251 = load i32, i32* %250, align 4
  %252 = load i32, i32* %249, align 4
  %253 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %254 = load i32, i32* %253, align 8
  %255 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %150) #11
  %256 = zext i32 %255 to i64
  %257 = shl nuw i64 %256, 32
  %258 = zext i32 %254 to i64
  %259 = or i64 %257, %258
  %260 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i64 0, i32 0
  store i64 %259, i64* %238, align 8
  %261 = load i32, i32* %28, align 4
  %262 = icmp slt i32 %261, 0
  %263 = select i1 %262, i32 -2147483648, i32 2147483647
  %264 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %251, i32 %261) #11
  %265 = extractvalue { i32, i1 } %264, 1
  %266 = extractvalue { i32, i1 } %264, 0
  %267 = select i1 %265, i32 %263, i32 %266, !prof !2
  %268 = load i32, i32* %38, align 4
  %269 = icmp slt i32 %268, 0
  %270 = select i1 %269, i32 -2147483648, i32 2147483647
  %271 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %252, i32 %268) #11
  %272 = extractvalue { i32, i1 } %271, 1
  %273 = extractvalue { i32, i1 } %271, 0
  %274 = select i1 %272, i32 %270, i32 %273, !prof !2
  %275 = zext i32 %274 to i64
  %276 = shl nuw i64 %275, 32
  %277 = zext i32 %267 to i64
  %278 = or i64 %276, %277
  store i64 %278, i64* %260, align 8
  %279 = bitcast %"class.blink::FloatRoundedRect"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %279) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %279, i8 -1, i64 48, i1 false)
  %280 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  %281 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %280, i64 0, i32 5, i32 0
  %282 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %281, align 8
  %283 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 6
  %284 = load i32, i32* %283, align 8
  %285 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %282, i64 0, i32 0, i32 9
  %286 = bitcast [20 x i8]* %285 to i160*
  %287 = load i160, i160* %286, align 8
  %288 = and i160 %287, 15211807202738752817960438464512
  %289 = icmp eq i160 %288, 0
  br i1 %289, label %290, label %295

290:                                              ; preds = %236
  %291 = shl i32 %284, 24
  %292 = and i32 %291, 16777216
  %293 = shl i32 %284, 7
  %294 = and i32 %293, 256
  br label %299

295:                                              ; preds = %236
  %296 = and i32 %284, 1
  %297 = shl i32 %284, 15
  %298 = and i32 %297, 65536
  br label %299

299:                                              ; preds = %290, %295
  %300 = phi i32 [ 1, %290 ], [ %296, %295 ]
  %301 = phi i32 [ %294, %290 ], [ 256, %295 ]
  %302 = phi i32 [ 65536, %290 ], [ %298, %295 ]
  %303 = phi i32 [ %292, %290 ], [ 16777216, %295 ]
  %304 = or i32 %301, %300
  %305 = or i32 %304, %302
  %306 = or i32 %305, %303
  call void @_ZN5blink21RoundedBorderGeometry25PixelSnappedRoundedBorderERKNS_13ComputedStyleERKNS_12PhysicalRectENS_16PhysicalBoxSidesE(%"class.blink::FloatRoundedRect"* nonnull sret %13, %"class.blink::ComputedStyle"* dereferenceable(104) %282, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %12, i32 %306) #11
  %307 = call zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_16FloatRoundedRectE(%"class.blink::HitTestLocation"* %2, %"class.blink::FloatRoundedRect"* nonnull dereferenceable(48) %13) #11
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %279) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %237) #11
  br i1 %307, label %308, label %492

308:                                              ; preds = %232, %228, %299
  %309 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %309) #11
  %310 = bitcast { i64, i64 }* %14 to i32*
  %311 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 0, i32 1, i32 0
  %312 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 1
  %313 = bitcast i64* %312 to i32*
  %314 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %15, i64 0, i32 1, i32 1, i32 0
  %315 = bitcast %"class.blink::InlineFlowBoxPainter"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %315) #11
  call void @_ZN5blink20InlineFlowBoxPainterC1ERKNS_13InlineFlowBoxE(%"class.blink::InlineFlowBoxPainter"* nonnull %16, %"class.blink::InlineFlowBox"* dereferenceable(112) %0) #11
  %316 = call { i64, i64 } @_ZNK5blink20InlineFlowBoxPainter42FrameRectClampedToLineTopAndBottomIfNeededEv(%"class.blink::InlineFlowBoxPainter"* nonnull %16) #11
  %317 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i64 0, i32 0
  %318 = extractvalue { i64, i64 } %316, 0
  store i64 %318, i64* %317, align 8
  %319 = extractvalue { i64, i64 } %316, 1
  store i64 %319, i64* %312, align 8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %315) #11
  call void @_ZNK5blink9InlineBox18FlipForWritingModeERNS_10LayoutRectE(%"class.blink::InlineBox"* %150, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %15) #11
  %320 = bitcast %"struct.blink::PhysicalRect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %320) #11
  %321 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %17, i64 0, i32 0, i32 0, i32 0
  %322 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %17, i64 0, i32 0, i32 1, i32 0
  %323 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %17, i64 0, i32 1, i32 0, i32 0
  %324 = getelementptr inbounds %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect"* %17, i64 0, i32 1, i32 1, i32 0
  %325 = load i32, i32* %310, align 8
  %326 = load i32, i32* %311, align 4
  %327 = load i32, i32* %313, align 8
  %328 = load i32, i32* %314, align 4
  store i32 %327, i32* %323, align 8
  store i32 %328, i32* %324, align 4
  %329 = load i32, i32* %28, align 4
  %330 = icmp slt i32 %329, 0
  %331 = select i1 %330, i32 -2147483648, i32 2147483647
  %332 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %325, i32 %329) #11
  %333 = extractvalue { i32, i1 } %332, 1
  %334 = extractvalue { i32, i1 } %332, 0
  %335 = select i1 %333, i32 %331, i32 %334, !prof !2
  %336 = load i32, i32* %38, align 4
  %337 = icmp slt i32 %336, 0
  %338 = select i1 %337, i32 -2147483648, i32 2147483647
  %339 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %326, i32 %336) #11
  %340 = extractvalue { i32, i1 } %339, 1
  %341 = extractvalue { i32, i1 } %339, 0
  %342 = select i1 %340, i32 %338, i32 %341, !prof !2
  %343 = zext i32 %342 to i64
  %344 = shl nuw i64 %343, 32
  %345 = zext i32 %335 to i64
  %346 = or i64 %344, %345
  %347 = bitcast %"struct.blink::PhysicalRect"* %17 to i64*
  store i64 %346, i64* %347, align 8
  %348 = sdiv i32 %335, 64
  %349 = srem i32 %335, 64
  %350 = add nsw i32 %349, 32
  %351 = ashr i32 %350, 6
  %352 = add nsw i32 %351, %348
  %353 = sdiv i32 %342, 64
  %354 = srem i32 %342, 64
  %355 = add nsw i32 %354, 32
  %356 = ashr i32 %355, 6
  %357 = add nsw i32 %356, %353
  %358 = icmp slt i32 %327, 0
  %359 = select i1 %358, i32 -2147483648, i32 2147483647
  %360 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %349, i32 %327) #11
  %361 = extractvalue { i32, i1 } %360, 1
  %362 = extractvalue { i32, i1 } %360, 0
  %363 = select i1 %361, i32 %359, i32 %362, !prof !2
  %364 = sdiv i32 %363, 64
  %365 = srem i32 %363, 64
  %366 = add nsw i32 %365, 32
  %367 = ashr i32 %366, 6
  %368 = sub nsw i32 %364, %351
  %369 = add nsw i32 %367, %368
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %377

371:                                              ; preds = %308
  %372 = add i32 %327, 4
  %373 = icmp ugt i32 %372, 8
  br i1 %373, label %374, label %377, !prof !23

374:                                              ; preds = %371
  %375 = icmp sgt i32 %327, 0
  %376 = select i1 %375, i32 1, i32 -1
  br label %377

377:                                              ; preds = %374, %371, %308
  %378 = phi i32 [ %376, %374 ], [ %369, %308 ], [ 0, %371 ]
  %379 = icmp slt i32 %328, 0
  %380 = select i1 %379, i32 -2147483648, i32 2147483647
  %381 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %354, i32 %328) #11
  %382 = extractvalue { i32, i1 } %381, 1
  %383 = extractvalue { i32, i1 } %381, 0
  %384 = select i1 %382, i32 %380, i32 %383, !prof !2
  %385 = sdiv i32 %384, 64
  %386 = srem i32 %384, 64
  %387 = add nsw i32 %386, 32
  %388 = ashr i32 %387, 6
  %389 = sub nsw i32 %385, %356
  %390 = add nsw i32 %388, %389
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %398

392:                                              ; preds = %377
  %393 = add i32 %328, 4
  %394 = icmp ugt i32 %393, 8
  br i1 %394, label %395, label %398, !prof !23

395:                                              ; preds = %392
  %396 = icmp sgt i32 %328, 0
  %397 = select i1 %396, i32 1, i32 -1
  br label %398

398:                                              ; preds = %377, %392, %395
  %399 = phi i32 [ %397, %395 ], [ %390, %377 ], [ 0, %392 ]
  %400 = icmp sgt i32 %352, 33554431
  br i1 %400, label %405, label %401

401:                                              ; preds = %398
  %402 = icmp slt i32 %352, -33554432
  %403 = shl i32 %352, 6
  %404 = select i1 %402, i32 -2147483648, i32 %403
  br label %405

405:                                              ; preds = %401, %398
  %406 = phi i32 [ 2147483647, %398 ], [ %404, %401 ]
  %407 = icmp sgt i32 %357, 33554431
  br i1 %407, label %412, label %408

408:                                              ; preds = %405
  %409 = icmp slt i32 %357, -33554432
  %410 = shl i32 %357, 6
  %411 = select i1 %409, i32 -2147483648, i32 %410
  br label %412

412:                                              ; preds = %408, %405
  %413 = phi i32 [ 2147483647, %405 ], [ %411, %408 ]
  %414 = icmp sgt i32 %378, 33554431
  br i1 %414, label %419, label %415

415:                                              ; preds = %412
  %416 = icmp slt i32 %378, -33554432
  %417 = shl i32 %378, 6
  %418 = select i1 %416, i32 -2147483648, i32 %417
  br label %419

419:                                              ; preds = %415, %412
  %420 = phi i32 [ 2147483647, %412 ], [ %418, %415 ]
  %421 = icmp sgt i32 %399, 33554431
  br i1 %421, label %426, label %422

422:                                              ; preds = %419
  %423 = icmp slt i32 %399, -33554432
  %424 = shl i32 %399, 6
  %425 = select i1 %423, i32 -2147483648, i32 %424
  br label %426

426:                                              ; preds = %422, %419
  %427 = phi i32 [ 2147483647, %419 ], [ %425, %422 ]
  store i32 %406, i32* %321, align 8
  store i32 %413, i32* %322, align 4
  store i32 %420, i32* %323, align 8
  store i32 %427, i32* %324, align 4
  %428 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  %429 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %428, i64 0, i32 5, i32 0
  %430 = bitcast %"class.blink::ComputedStyle"** %429 to %"class.blink::ComputedStyleBase"**
  %431 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %430, align 8
  %432 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %431, i64 0, i32 9
  %433 = bitcast [20 x i8]* %432 to i160*
  %434 = load i160, i160* %433, align 8
  %435 = and i160 %434, 3802951800684688204490109616128
  %436 = icmp eq i160 %435, 1267650600228229401496703205376
  br i1 %436, label %437, label %489

437:                                              ; preds = %426
  %438 = getelementptr inbounds %"class.blink::HitTestResult", %"class.blink::HitTestResult"* %1, i64 0, i32 0, i32 0
  %439 = load i32, i32* %438, align 8
  %440 = and i32 %439, 1024
  %441 = icmp ne i32 %440, 0
  %442 = and i160 %434, 16888498602639360
  %443 = icmp ne i160 %442, 0
  %444 = or i1 %443, %441
  br i1 %444, label %445, label %489

445:                                              ; preds = %437
  %446 = call zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_12PhysicalRectE(%"class.blink::HitTestLocation"* %2, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %17) #11
  br i1 %446, label %447, label %489

447:                                              ; preds = %445
  %448 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  %449 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %449) #11
  %450 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 0, i32 0
  %451 = load i32, i32* %450, align 4
  %452 = load i32, i32* %28, align 4
  %453 = icmp sgt i32 %452, -1
  %454 = select i1 %453, i32 -2147483648, i32 2147483647
  %455 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %451, i32 %452) #11
  %456 = extractvalue { i32, i1 } %455, 1
  %457 = extractvalue { i32, i1 } %455, 0
  %458 = select i1 %456, i32 %454, i32 %457, !prof !2
  %459 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 1, i32 0
  %460 = load i32, i32* %459, align 4
  %461 = load i32, i32* %38, align 4
  %462 = icmp sgt i32 %461, -1
  %463 = select i1 %462, i32 -2147483648, i32 2147483647
  %464 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %460, i32 %461) #11
  %465 = extractvalue { i32, i1 } %464, 1
  %466 = extractvalue { i32, i1 } %464, 0
  %467 = select i1 %465, i32 %463, i32 %466, !prof !2
  %468 = zext i32 %467 to i64
  %469 = shl nuw i64 %468, 32
  %470 = zext i32 %458 to i64
  %471 = or i64 %469, %470
  store i64 %471, i64* %18, align 8
  %472 = bitcast %"class.blink::LayoutObject"* %448 to void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)***
  %473 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)**, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*** %472, align 8
  %474 = getelementptr inbounds void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %473, i64 62
  %475 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %474, align 8
  call void %475(%"class.blink::LayoutObject"* %448, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"struct.blink::PhysicalOffset"* nonnull dereferenceable(8) %19) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %449) #11
  %476 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %151, align 8
  %477 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %476, i64 0, i32 4
  %478 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %477 to i96*
  %479 = load i96, i96* %478, align 4
  %480 = and i96 %479, 16777216
  %481 = icmp eq i96 %480, 0
  br i1 %481, label %482, label %485

482:                                              ; preds = %447
  %483 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %476, i64 0, i32 6, i32 0, i32 0
  %484 = load %"class.blink::Node"*, %"class.blink::Node"** %483, align 8
  br label %485

485:                                              ; preds = %447, %482
  %486 = phi %"class.blink::Node"* [ %484, %482 ], [ null, %447 ]
  %487 = call i32 @_ZN5blink13HitTestResult28AddNodeToListBasedTestResultEPNS_4NodeERKNS_15HitTestLocationERKNS_12PhysicalRectE(%"class.blink::HitTestResult"* %1, %"class.blink::Node"* %486, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalRect"* nonnull dereferenceable(16) %17) #11
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %490, label %489

489:                                              ; preds = %437, %426, %485, %445
  br label %490

490:                                              ; preds = %485, %489
  %491 = phi i1 [ false, %489 ], [ true, %485 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %320) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %309) #11
  br label %492

492:                                              ; preds = %143, %79, %490, %299, %158, %6
  %493 = phi i1 [ false, %6 ], [ %491, %490 ], [ false, %299 ], [ false, %158 ], [ true, %79 ], [ true, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #11
  ret i1 %493
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNK5blink13InlineFlowBox26PhysicalVisualOverflowRectENS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"*, i32, i32) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %"class.blink::LayoutRect"*
  %6 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #11
  %7 = bitcast { i64, i64 }* %4 to i32*
  %8 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %5, i64 0, i32 0, i32 1, i32 0
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %10 = bitcast i64* %9 to i32*
  %11 = getelementptr inbounds %"class.blink::LayoutRect", %"class.blink::LayoutRect"* %5, i64 0, i32 1, i32 1, i32 0
  %12 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %12, align 8
  %15 = icmp eq %"struct.blink::SimpleOverflowModel"* %14, null
  br i1 %15, label %27, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 4, !range !3
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = bitcast %"class.blink::LayoutRect"* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %14, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %25 = bitcast %"class.blink::LayoutSize"* %24 to i64*
  %26 = load i64, i64* %25, align 4
  br label %67

27:                                               ; preds = %16, %3
  %28 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 2048
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %43, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp sgt i32 %1, -1
  %38 = select i1 %37, i32 -2147483648, i32 2147483647
  %39 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 %38, i32 %41, !prof !2
  br label %54

43:                                               ; preds = %27
  %44 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 5, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %1, -1
  %47 = select i1 %46, i32 -2147483648, i32 2147483647
  %48 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %1) #11
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 %47, i32 %50, !prof !2
  %52 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 6, i32 0
  %53 = load i32, i32* %52, align 8
  br label %54

54:                                               ; preds = %43, %32
  %55 = phi i32 [ %1, %32 ], [ %45, %43 ]
  %56 = phi i32 [ %34, %32 ], [ %1, %43 ]
  %57 = phi i32 [ %36, %32 ], [ %51, %43 ]
  %58 = phi i32 [ %42, %32 ], [ %53, %43 ]
  %59 = zext i32 %55 to i64
  %60 = shl nuw i64 %59, 32
  %61 = zext i32 %56 to i64
  %62 = or i64 %60, %61
  %63 = zext i32 %58 to i64
  %64 = shl nuw i64 %63, 32
  %65 = zext i32 %57 to i64
  %66 = or i64 %64, %65
  br label %67

67:                                               ; preds = %20, %54
  %68 = phi i64 [ %23, %20 ], [ %62, %54 ]
  %69 = phi i64 [ %26, %20 ], [ %66, %54 ]
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  store i64 %68, i64* %70, align 8
  store i64 %69, i64* %9, align 8
  %71 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  call void @_ZNK5blink9InlineBox18FlipForWritingModeERNS_10LayoutRectE(%"class.blink::InlineBox"* %71, %"class.blink::LayoutRect"* nonnull dereferenceable(16) %5) #11
  %72 = load i32, i32* %7, align 8
  %73 = load i32, i32* %8, align 4
  %74 = load i32, i32* %10, align 8
  %75 = load i32, i32* %11, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #11
  %76 = zext i32 %73 to i64
  %77 = shl nuw i64 %76, 32
  %78 = zext i32 %72 to i64
  %79 = or i64 %77, %78
  %80 = insertvalue { i64, i64 } undef, i64 %79, 0
  %81 = zext i32 %75 to i64
  %82 = shl nuw i64 %81, 32
  %83 = zext i32 %74 to i64
  %84 = or i64 %82, %83
  %85 = insertvalue { i64, i64 } %80, i64 %84, 1
  ret { i64, i64 } %85
}

declare zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_12PhysicalRectE(%"class.blink::HitTestLocation"*, %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink9LayoutBox25HitTestClippedOutByBorderERKNS_15HitTestLocationERKNS_14PhysicalOffsetE(%"class.blink::LayoutBox"*, %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN5blink21RoundedBorderGeometry25PixelSnappedRoundedBorderERKNS_13ComputedStyleERKNS_12PhysicalRectENS_16PhysicalBoxSidesE(%"class.blink::FloatRoundedRect"* sret, %"class.blink::ComputedStyle"* dereferenceable(104), %"struct.blink::PhysicalRect"* dereferenceable(16), i32) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink15HitTestLocation10IntersectsERKNS_16FloatRoundedRectE(%"class.blink::HitTestLocation"*, %"class.blink::FloatRoundedRect"* dereferenceable(48)) local_unnamed_addr #3

declare void @_ZN5blink20InlineFlowBoxPainterC1ERKNS_13InlineFlowBoxE(%"class.blink::InlineFlowBoxPainter"*, %"class.blink::InlineFlowBox"* dereferenceable(112)) unnamed_addr #3

declare { i64, i64 } @_ZNK5blink20InlineFlowBoxPainter42FrameRectClampedToLineTopAndBottomIfNeededEv(%"class.blink::InlineFlowBoxPainter"*) local_unnamed_addr #3

declare void @_ZNK5blink9InlineBox18FlipForWritingModeERNS_10LayoutRectE(%"class.blink::InlineBox"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #3

declare i32 @_ZN5blink13HitTestResult28AddNodeToListBasedTestResultEPNS_4NodeERKNS_15HitTestLocationERKNS_12PhysicalRectE(%"class.blink::HitTestResult"*, %"class.blink::Node"*, %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13InlineFlowBox5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::InlineFlowBox"*, %"struct.blink::PaintInfo"*, %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #1 align 2 {
  %6 = alloca %"class.blink::InlineFlowBoxPainter", align 8
  %7 = bitcast %"class.blink::InlineFlowBoxPainter"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %7) #11
  call void @_ZN5blink20InlineFlowBoxPainterC1ERKNS_13InlineFlowBoxE(%"class.blink::InlineFlowBoxPainter"* nonnull %6, %"class.blink::InlineFlowBox"* dereferenceable(112) %0) #11
  call void @_ZN5blink20InlineFlowBoxPainter5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::InlineFlowBoxPainter"* nonnull %6, %"struct.blink::PaintInfo"* %1, %"struct.blink::PhysicalOffset"* dereferenceable(8) %2, i32 %3, i32 %4) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %7) #11
  ret void
}

declare void @_ZN5blink20InlineFlowBoxPainter5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::InlineFlowBoxPainter"*, %"struct.blink::PaintInfo"*, %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink13InlineFlowBox33BoxShadowCanBeAppliedToBackgroundERKNS_9FillLayerE(%"class.blink::InlineFlowBox"* nocapture readonly, %"class.blink::FillLayer"* nocapture readonly dereferenceable(64)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::FillLayer", %"class.blink::FillLayer"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::StyleImage"*, %"class.blink::StyleImage"** %3, align 8
  %5 = icmp eq %"class.blink::StyleImage"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.blink::StyleImage"* %4 to i1 (%"class.blink::StyleImage"*)***
  %8 = load i1 (%"class.blink::StyleImage"*)**, i1 (%"class.blink::StyleImage"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.blink::StyleImage"*)*, i1 (%"class.blink::StyleImage"*)** %8, i64 4
  %10 = load i1 (%"class.blink::StyleImage"*)*, i1 (%"class.blink::StyleImage"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.blink::StyleImage"* nonnull %4) #11
  br i1 %11, label %86, label %12

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 4, i32 0
  %14 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 5, i32 0
  %16 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %16, i64 0, i32 0, i32 7, i32 0, i32 0
  %18 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 5, i32 0
  %20 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 5, i32 0, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 8
  br i1 %22, label %86, label %23

23:                                               ; preds = %12
  %24 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 5, i32 0, i32 3
  %25 = load i8, i8* %24, align 2, !range !3
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = bitcast %"class.blink::Length"* %19 to float*
  %29 = load float, float* %28, align 4
  %30 = fcmp oeq float %29, 0.000000e+00
  br i1 %30, label %35, label %86

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %19, i64 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %86

35:                                               ; preds = %31, %27
  %36 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 6, i32 0
  %37 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 6, i32 0, i32 2
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 8
  br i1 %39, label %86, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 6, i32 0, i32 3
  %42 = load i8, i8* %41, align 2, !range !3
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = bitcast %"class.blink::Length"* %36 to float*
  %46 = load float, float* %45, align 4
  %47 = fcmp oeq float %46, 0.000000e+00
  br i1 %47, label %52, label %86

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %36, i64 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %86

52:                                               ; preds = %48, %44
  %53 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 3, i32 0
  %54 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 3, i32 0, i32 2
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 8
  br i1 %56, label %86, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 3, i32 0, i32 3
  %59 = load i8, i8* %58, align 2, !range !3
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %57
  %62 = bitcast %"class.blink::Length"* %53 to float*
  %63 = load float, float* %62, align 4
  %64 = fcmp oeq float %63, 0.000000e+00
  br i1 %64, label %69, label %86

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %53, i64 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %86

69:                                               ; preds = %65, %61
  %70 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 4, i32 0
  %71 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 4, i32 0, i32 2
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 8
  br i1 %73, label %86, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %18, i64 0, i32 4, i32 0, i32 3
  %76 = load i8, i8* %75, align 2, !range !3
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %74
  %79 = bitcast %"class.blink::Length"* %70 to float*
  %80 = load float, float* %79, align 4
  %81 = fcmp oeq float %80, 0.000000e+00
  br i1 %81, label %98, label %86

82:                                               ; preds = %74
  %83 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %70, i64 0, i32 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %98, label %86

86:                                               ; preds = %69, %52, %35, %12, %78, %82, %61, %44, %27, %65, %48, %31, %6
  %87 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 4
  %88 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %87, align 8
  %89 = icmp eq %"class.blink::InlineFlowBox"* %88, null
  br i1 %89, label %90, label %94

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 5
  %92 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %91, align 8
  %93 = icmp eq %"class.blink::InlineFlowBox"* %92, null
  br i1 %93, label %98, label %94

94:                                               ; preds = %90, %86
  %95 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 3
  %96 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %95, align 8
  %97 = icmp eq %"class.blink::InlineFlowBox"* %96, null
  br label %98

98:                                               ; preds = %82, %78, %90, %94
  %99 = phi i1 [ true, %90 ], [ %97, %94 ], [ true, %78 ], [ true, %82 ]
  ret i1 %99
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %3 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %2, align 8
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %7, %14, %1
  %6 = phi %"class.blink::InlineBox"* [ null, %1 ], [ %8, %7 ], [ %16, %14 ]
  ret %"class.blink::InlineBox"* %6

7:                                                ; preds = %1, %14
  %8 = phi %"class.blink::InlineBox"* [ %18, %14 ], [ %3, %1 ]
  %9 = bitcast %"class.blink::InlineBox"* %8 to i1 (%"class.blink::InlineBox"*)***
  %10 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %10, i64 22
  %12 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.blink::InlineBox"* nonnull %8) #11
  br i1 %13, label %5, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.blink::InlineBox"* %8 to %"class.blink::InlineFlowBox"*
  %16 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* nonnull %15)
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %8, i64 0, i32 1
  %18 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %17, align 8
  %19 = icmp ne %"class.blink::InlineBox"* %18, null
  %20 = icmp eq %"class.blink::InlineBox"* %16, null
  %21 = and i1 %20, %19
  br i1 %21, label %7, label %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox13LastLeafChildEv(%"class.blink::InlineFlowBox"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  %3 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %2, align 8
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %7, %14, %1
  %6 = phi %"class.blink::InlineBox"* [ null, %1 ], [ %8, %7 ], [ %16, %14 ]
  ret %"class.blink::InlineBox"* %6

7:                                                ; preds = %1, %14
  %8 = phi %"class.blink::InlineBox"* [ %18, %14 ], [ %3, %1 ]
  %9 = bitcast %"class.blink::InlineBox"* %8 to i1 (%"class.blink::InlineBox"*)***
  %10 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %10, i64 22
  %12 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.blink::InlineBox"* nonnull %8) #11
  br i1 %13, label %5, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.blink::InlineBox"* %8 to %"class.blink::InlineFlowBox"*
  %16 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox13LastLeafChildEv(%"class.blink::InlineFlowBox"* nonnull %15)
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %8, i64 0, i32 2
  %18 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %17, align 8
  %19 = icmp ne %"class.blink::InlineBox"* %18, null
  %20 = icmp eq %"class.blink::InlineBox"* %16, null
  %21 = and i1 %20, %19
  br i1 %21, label %7, label %5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink13InlineFlowBox22CanAccommodateEllipsisEbNS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* nocapture readonly, i1 zeroext, i32, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %6 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %5, align 8
  %7 = icmp eq %"class.blink::InlineBox"* %6, null
  br i1 %7, label %19, label %12

8:                                                ; preds = %12
  %9 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %13, i64 0, i32 1
  %10 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %9, align 8
  %11 = icmp eq %"class.blink::InlineBox"* %10, null
  br i1 %11, label %19, label %12

12:                                               ; preds = %4, %8
  %13 = phi %"class.blink::InlineBox"* [ %10, %8 ], [ %6, %4 ]
  %14 = bitcast %"class.blink::InlineBox"* %13 to i1 (%"class.blink::InlineBox"*, i1, i32, i32)***
  %15 = load i1 (%"class.blink::InlineBox"*, i1, i32, i32)**, i1 (%"class.blink::InlineBox"*, i1, i32, i32)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.blink::InlineBox"*, i1, i32, i32)*, i1 (%"class.blink::InlineBox"*, i1, i32, i32)** %15, i64 31
  %17 = load i1 (%"class.blink::InlineBox"*, i1, i32, i32)*, i1 (%"class.blink::InlineBox"*, i1, i32, i32)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.blink::InlineBox"* nonnull %13, i1 zeroext %1, i32 %2, i32 %3) #11
  br i1 %18, label %8, label %19

19:                                               ; preds = %12, %8, %4
  %20 = phi i1 [ true, %4 ], [ true, %8 ], [ false, %12 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13InlineFlowBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_(%"class.blink::InlineFlowBox"*, i1 zeroext, i32, i32, i32, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::InlineBox"**, i32) unnamed_addr #1 align 2 {
  %9 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 3
  %11 = select i1 %1, %"class.blink::InlineBox"** %9, %"class.blink::InlineBox"** %10
  %12 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %11, align 8
  %13 = icmp eq %"class.blink::InlineBox"* %12, null
  br i1 %13, label %87, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0
  %16 = bitcast %"class.blink::InlineFlowBox"* %0 to i1 (%"class.blink::InlineBox"*)***
  br label %17

17:                                               ; preds = %14, %81
  %18 = phi %"class.blink::InlineBox"* [ %12, %14 ], [ %85, %81 ]
  %19 = phi i32 [ -64, %14 ], [ %42, %81 ]
  %20 = phi i32 [ %3, %14 ], [ %83, %81 ]
  %21 = phi i32 [ %2, %14 ], [ %82, %81 ]
  %22 = bitcast %"class.blink::InlineBox"* %18 to i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)***
  %23 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %6, align 8
  %24 = load i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)**, i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)*** %22, align 8
  %25 = getelementptr inbounds i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)*, i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)** %24, i64 32
  %26 = load i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)*, i32 (%"class.blink::InlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)** %25, align 8
  %27 = tail call i32 %26(%"class.blink::InlineBox"* nonnull %18, i1 zeroext %1, i32 %21, i32 %20, i32 %4, %"class.blink::LayoutUnit"* dereferenceable(4) %5, %"class.blink::InlineBox"** %6, i32 %7) #11
  %28 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %16, align 8
  %29 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %28, i64 16
  %30 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %29, align 8
  %31 = tail call zeroext i1 %30(%"class.blink::InlineBox"* %15) #11
  br i1 %31, label %32, label %38

32:                                               ; preds = %17
  %33 = icmp ne %"class.blink::InlineBox"* %23, null
  %34 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %6, align 8
  %35 = icmp eq %"class.blink::InlineBox"* %34, null
  %36 = or i1 %33, %35
  br i1 %36, label %38, label %37

37:                                               ; preds = %32
  store %"class.blink::InlineBox"* %18, %"class.blink::InlineBox"** %6, align 8
  br label %38

38:                                               ; preds = %32, %37, %17
  %39 = icmp ne i32 %27, -64
  %40 = icmp eq i32 %19, -64
  %41 = and i1 %40, %39
  %42 = select i1 %41, i32 %27, i32 %19
  %43 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %18, i64 0, i32 4, i32 0
  %44 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %43, align 8
  %45 = bitcast %"class.blink::LayoutObject"* %44 to i1 (%"class.blink::LayoutObject"*, i32)***
  %46 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %45, align 8
  %47 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %46, i64 92
  %48 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %47, align 8
  %49 = tail call zeroext i1 %48(%"class.blink::LayoutObject"* %44, i32 15) #11
  br i1 %49, label %63, label %50

50:                                               ; preds = %38
  %51 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %45, align 8
  %52 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %51, i64 92
  %53 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %52, align 8
  %54 = tail call zeroext i1 %53(%"class.blink::LayoutObject"* %44, i32 13) #11
  br i1 %54, label %63, label %55

55:                                               ; preds = %50
  %56 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %45, align 8
  %57 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %56, i64 92
  %58 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %57, align 8
  %59 = tail call zeroext i1 %58(%"class.blink::LayoutObject"* %44, i32 36) #11
  br i1 %59, label %63, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %18, i64 0, i32 6, i32 0
  %62 = load i32, i32* %61, align 8
  br label %63

63:                                               ; preds = %38, %50, %55, %60
  %64 = phi i32 [ %62, %60 ], [ 0, %55 ], [ 0, %50 ], [ 0, %38 ]
  br i1 %1, label %65, label %73

65:                                               ; preds = %63
  %66 = icmp slt i32 %64, 0
  %67 = select i1 %66, i32 -2147483648, i32 2147483647
  %68 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %21, i32 %64) #11
  %69 = extractvalue { i32, i1 } %68, 1
  %70 = extractvalue { i32, i1 } %68, 0
  %71 = select i1 %69, i32 %67, i32 %70, !prof !2
  %72 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %18, i64 0, i32 1
  br label %81

73:                                               ; preds = %63
  %74 = icmp sgt i32 %64, -1
  %75 = select i1 %74, i32 -2147483648, i32 2147483647
  %76 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %20, i32 %64) #11
  %77 = extractvalue { i32, i1 } %76, 1
  %78 = extractvalue { i32, i1 } %76, 0
  %79 = select i1 %77, i32 %75, i32 %78, !prof !2
  %80 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %18, i64 0, i32 2
  br label %81

81:                                               ; preds = %73, %65
  %82 = phi i32 [ %71, %65 ], [ %21, %73 ]
  %83 = phi i32 [ %20, %65 ], [ %79, %73 ]
  %84 = phi %"class.blink::InlineBox"** [ %72, %65 ], [ %80, %73 ]
  %85 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %84, align 8
  %86 = icmp eq %"class.blink::InlineBox"* %85, null
  br i1 %86, label %87, label %17

87:                                               ; preds = %81, %8
  %88 = phi i32 [ -64, %8 ], [ %42, %81 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13InlineFlowBox15ClearTruncationEv(%"class.blink::InlineFlowBox"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %3 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %2, align 8
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %6, %1
  ret void

6:                                                ; preds = %1, %6
  %7 = phi %"class.blink::InlineBox"* [ %13, %6 ], [ %3, %1 ]
  %8 = bitcast %"class.blink::InlineBox"* %7 to void (%"class.blink::InlineBox"*)***
  %9 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %9, i64 27
  %11 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %10, align 8
  tail call void %11(%"class.blink::InlineBox"* nonnull %7) #11
  %12 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %7, i64 0, i32 1
  %13 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %12, align 8
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %5, label %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::LineLayoutText", align 8
  %4 = alloca i32, align 4
  %5 = alloca %"class.blink::LineLayoutItem", align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %8 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %7, align 8
  %9 = icmp eq %"class.blink::InlineBox"* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %2
  %11 = icmp sgt i32 %1, -1
  %12 = select i1 %11, i32 -2147483648, i32 2147483647
  %13 = bitcast %"class.blink::LineLayoutItem"* %5 to i8*
  %14 = bitcast %"class.blink::LineLayoutItem"* %5 to i64*
  %15 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %16 = bitcast i32* %6 to i8*
  %17 = bitcast %"class.blink::LineLayoutText"* %3 to i8*
  %18 = bitcast %"class.blink::LineLayoutText"* %3 to i64*
  %19 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %3, i64 0, i32 0
  %20 = bitcast i32* %4 to i8*
  br label %23

21:                                               ; preds = %290, %2
  %22 = phi i32 [ 0, %2 ], [ %291, %290 ]
  ret i32 %22

23:                                               ; preds = %10, %290
  %24 = phi i32 [ 0, %10 ], [ %291, %290 ]
  %25 = phi %"class.blink::InlineBox"* [ %8, %10 ], [ %293, %290 ]
  %26 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 4, i32 0
  %27 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %27, i64 0, i32 4
  %29 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %28 to i96*
  %30 = load i96, i96* %29, align 4
  %31 = and i96 %30, 113336795588871485128704
  %32 = icmp eq i96 %31, 75557863725914323419136
  br i1 %32, label %290, label %33

33:                                               ; preds = %23
  %34 = bitcast %"class.blink::InlineBox"* %25 to i1 (%"class.blink::InlineBox"*)***
  %35 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %34, align 8
  %36 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %35, i64 14
  %37 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %36, align 8
  %38 = call zeroext i1 %37(%"class.blink::InlineBox"* nonnull %25) #11
  br i1 %38, label %39, label %44

39:                                               ; preds = %33
  %40 = bitcast %"class.blink::InlineBox"* %25 to %"class.blink::InlineFlowBox"*
  %41 = call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nonnull %40, i32 %1)
  %42 = icmp slt i32 %24, %41
  %43 = select i1 %42, i32 %41, i32 %24
  br label %44

44:                                               ; preds = %39, %33
  %45 = phi i32 [ %43, %39 ], [ %24, %33 ]
  %46 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %26, align 8
  %47 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %46, i64 0, i32 4
  %48 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %47 to i96*
  %49 = load i96, i96* %48, align 4
  %50 = and i96 %49, 1073741824
  %51 = icmp eq i96 %50, 0
  br i1 %51, label %174, label %52

52:                                               ; preds = %44
  %53 = bitcast %"class.blink::LayoutObject"* %46 to i1 (%"class.blink::LayoutObject"*, i32)***
  %54 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %53, align 8
  %55 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %54, i64 92
  %56 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %55, align 8
  %57 = call zeroext i1 %56(%"class.blink::LayoutObject"* %46, i32 42) #11
  br i1 %57, label %58, label %174

58:                                               ; preds = %52
  %59 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %26, align 8
  %60 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %59, i64 0, i32 5, i32 0
  %61 = bitcast %"class.blink::ComputedStyle"** %60 to %"class.blink::ComputedStyleBase"**
  %62 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %62, i64 0, i32 1, i32 0, i32 0
  %64 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %63, align 8
  %65 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %64, i64 0, i32 3, i32 0, i32 0
  %66 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"** %65, align 8
  %67 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* %66, i64 0, i32 3
  %68 = load i8, i8* %67, align 2
  %69 = and i8 %68, 8
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %174, label %71

71:                                               ; preds = %58
  %72 = bitcast %"class.blink::LayoutObject"* %59 to %"class.blink::LayoutRubyRun"*
  %73 = call %"class.blink::LayoutRubyText"* @_ZNK5blink13LayoutRubyRun8RubyTextEv(%"class.blink::LayoutRubyRun"* %72) #11
  %74 = icmp eq %"class.blink::LayoutRubyText"* %73, null
  br i1 %74, label %290, label %75

75:                                               ; preds = %71
  %76 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %60, align 8
  %77 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %76, i64 0, i32 0, i32 9
  %78 = bitcast [20 x i8]* %77 to i160*
  %79 = load i160, i160* %78, align 8
  %80 = and i160 %79, 15211807202738752817960438464512
  %81 = icmp eq i160 %80, 10141204801825835211973625643008
  %82 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0
  %83 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %82, align 8
  %84 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %83, i64 0, i32 0, i32 9
  %85 = bitcast [20 x i8]* %84 to i160*
  %86 = load i160, i160* %85, align 8
  %87 = and i160 %86, 15211807202738752817960438464512
  %88 = icmp eq i160 %87, 0
  %89 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  %90 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %91 = select i1 %88, i32* %89, i32* %90
  %92 = load i32, i32* %91, align 4
  br i1 %81, label %134, label %93

93:                                               ; preds = %75
  %94 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 1, i32 0, i32 0
  %95 = bitcast %"class.blink::InlineFlowBox"** %94 to %"class.blink::RootInlineBox"**
  %96 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %95, align 8
  %97 = icmp eq %"class.blink::RootInlineBox"* %96, null
  br i1 %97, label %103, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %96, i64 0, i32 5, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp slt i32 %100, 0
  %102 = select i1 %101, i32 -2147483648, i32 2147483647
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i32 [ 0, %93 ], [ %100, %98 ]
  %105 = phi i32 [ 2147483647, %93 ], [ %102, %98 ]
  %106 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %92, i32 %104) #11
  %107 = extractvalue { i32, i1 } %106, 1
  %108 = extractvalue { i32, i1 } %106, 0
  %109 = select i1 %107, i32 %105, i32 %108, !prof !2
  %110 = icmp sgt i32 %109, -1
  br i1 %110, label %290, label %111

111:                                              ; preds = %103
  %112 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 7, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = and i32 %113, 2048
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 1, i32 0
  %117 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 0, i32 0
  %118 = select i1 %115, i32* %117, i32* %116
  %119 = load i32, i32* %118, align 4
  %120 = icmp slt i32 %119, 0
  %121 = select i1 %120, i32 -2147483648, i32 2147483647
  %122 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %109, i32 %119) #11
  %123 = extractvalue { i32, i1 } %122, 1
  %124 = extractvalue { i32, i1 } %122, 0
  %125 = select i1 %123, i32 %121, i32 %124, !prof !2
  %126 = icmp sgt i32 %125, -1
  %127 = select i1 %126, i32 -2147483648, i32 2147483647
  %128 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %125) #11
  %129 = extractvalue { i32, i1 } %128, 1
  %130 = extractvalue { i32, i1 } %128, 0
  %131 = select i1 %129, i32 %127, i32 %130, !prof !2
  %132 = icmp slt i32 %45, %131
  %133 = select i1 %132, i32 %131, i32 %45
  br label %174

134:                                              ; preds = %75
  %135 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 1, i32 0, i32 1
  %136 = bitcast %"class.blink::InlineFlowBox"** %135 to %"class.blink::RootInlineBox"**
  %137 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %136, align 8
  %138 = icmp eq %"class.blink::RootInlineBox"* %137, null
  %139 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 1, i32 0
  %140 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %73, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %141 = select i1 %88, i32* %139, i32* %140
  %142 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %137, i64 0, i32 6, i32 0
  %143 = select i1 %138, i32* %141, i32* %142
  %144 = load i32, i32* %143, align 4
  %145 = icmp slt i32 %144, 0
  %146 = select i1 %145, i32 -2147483648, i32 2147483647
  %147 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %92, i32 %144) #11
  %148 = extractvalue { i32, i1 } %147, 1
  %149 = extractvalue { i32, i1 } %147, 0
  %150 = select i1 %148, i32 %146, i32 %149, !prof !2
  %151 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %25) #11
  %152 = icmp sgt i32 %150, %151
  br i1 %152, label %153, label %290

153:                                              ; preds = %134
  %154 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 7, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = and i32 %155, 2048
  %157 = icmp eq i32 %156, 0
  %158 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 1, i32 0
  %159 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 0, i32 0
  %160 = select i1 %157, i32* %159, i32* %158
  %161 = load i32, i32* %160, align 4
  %162 = icmp slt i32 %161, 0
  %163 = select i1 %162, i32 -2147483648, i32 2147483647
  %164 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %150, i32 %161) #11
  %165 = extractvalue { i32, i1 } %164, 1
  %166 = extractvalue { i32, i1 } %164, 0
  %167 = select i1 %165, i32 %163, i32 %166, !prof !2
  %168 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %167, i32 %1) #11
  %169 = extractvalue { i32, i1 } %168, 1
  %170 = extractvalue { i32, i1 } %168, 0
  %171 = select i1 %169, i32 %12, i32 %170, !prof !2
  %172 = icmp slt i32 %45, %171
  %173 = select i1 %172, i32 %171, i32 %45
  br label %174

174:                                              ; preds = %58, %44, %52, %153, %111
  %175 = phi i32 [ %45, %58 ], [ %45, %44 ], [ %45, %52 ], [ %173, %153 ], [ %133, %111 ]
  %176 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %34, align 8
  %177 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %176, i64 15
  %178 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %177, align 8
  %179 = call zeroext i1 %178(%"class.blink::InlineBox"* nonnull %25) #11
  br i1 %179, label %180, label %290

180:                                              ; preds = %174
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  %181 = bitcast %"class.blink::LayoutObject"** %26 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %14, align 8
  %183 = load i32, i32* %15, align 4
  %184 = and i32 %183, 1
  %185 = icmp ne i32 %184, 0
  %186 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %5, i1 zeroext %185)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #11
  store i32 -1431655766, i32* %6, align 4
  %187 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %186) #11
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %288, label %189

189:                                              ; preds = %180
  %190 = bitcast %"class.blink::InlineBox"* %25 to %"class.blink::InlineTextBox"*
  %191 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* nonnull %190, %"class.blink::ComputedStyle"* dereferenceable(104) %186, i32* nonnull dereferenceable(4) %6) #11
  br i1 %191, label %192, label %288

192:                                              ; preds = %189
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  %193 = load i64, i64* %181, align 8
  store i64 %193, i64* %18, align 8
  %194 = load i32, i32* %15, align 4
  %195 = and i32 %194, 1
  %196 = icmp ne i32 %195, 0
  %197 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %19, i1 zeroext %196) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #11
  store i32 -1431655766, i32* %4, align 4
  %198 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* nonnull %190, %"class.blink::ComputedStyle"* dereferenceable(104) %197, i32* nonnull dereferenceable(4) %4) #11
  br i1 %198, label %200, label %199

199:                                              ; preds = %192
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #11
  br label %288

200:                                              ; preds = %192
  %201 = call i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"* %197) #11
  %202 = icmp eq i32 %201, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #11
  br i1 %202, label %203, label %288

203:                                              ; preds = %200
  %204 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %186, i64 0, i32 0, i32 9
  %205 = bitcast [20 x i8]* %204 to i160*
  %206 = load i160, i160* %205, align 8
  %207 = and i160 %206, 15211807202738752817960438464512
  %208 = icmp eq i160 %207, 10141204801825835211973625643008
  %209 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 7, i32 0
  %210 = load i32, i32* %209, align 4
  %211 = and i32 %210, 2048
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 1, i32 0
  %214 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 5, i32 0, i32 0
  %215 = select i1 %212, i32* %214, i32* %213
  %216 = load i32, i32* %215, align 4
  br i1 %208, label %250, label %217

217:                                              ; preds = %203
  %218 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %186, i64 0, i32 0, i32 0, i32 0, i32 0
  %219 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %218, align 8
  %220 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %219, i64 0, i32 1, i32 0, i32 0
  %221 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %220, align 8
  %222 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %221, i64 0, i32 1
  %223 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %186) #11
  %224 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %222, %"class.WTF::AtomicString"* dereferenceable(8) %223) #11
  %225 = icmp sgt i32 %224, 33554431
  br i1 %225, label %231, label %226

226:                                              ; preds = %217
  %227 = icmp slt i32 %224, -33554432
  br i1 %227, label %233, label %228

228:                                              ; preds = %226
  %229 = shl i32 %224, 6
  %230 = icmp sgt i32 %229, -1
  br i1 %230, label %231, label %233

231:                                              ; preds = %217, %228
  %232 = phi i32 [ %229, %228 ], [ 2147483647, %217 ]
  br label %233

233:                                              ; preds = %226, %228, %231
  %234 = phi i32 [ %232, %231 ], [ %229, %228 ], [ -2147483648, %226 ]
  %235 = phi i32 [ -2147483648, %231 ], [ 2147483647, %228 ], [ 2147483647, %226 ]
  %236 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %216, i32 %234) #11
  %237 = extractvalue { i32, i1 } %236, 1
  %238 = extractvalue { i32, i1 } %236, 0
  %239 = select i1 %237, i32 %235, i32 %238, !prof !2
  %240 = sdiv i32 %239, 64
  %241 = shl nsw i32 %240, 6
  %242 = icmp sgt i32 %239, -64
  %243 = select i1 %242, i32 -2147483648, i32 2147483647
  %244 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %241) #11
  %245 = extractvalue { i32, i1 } %244, 1
  %246 = extractvalue { i32, i1 } %244, 0
  %247 = select i1 %245, i32 %243, i32 %246, !prof !2
  %248 = icmp slt i32 %175, %247
  %249 = select i1 %248, i32 %247, i32 %175
  br label %288

250:                                              ; preds = %203
  %251 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %25) #11
  %252 = icmp slt i32 %251, 0
  %253 = select i1 %252, i32 -2147483648, i32 2147483647
  %254 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %216, i32 %251) #11
  %255 = extractvalue { i32, i1 } %254, 1
  %256 = extractvalue { i32, i1 } %254, 0
  %257 = select i1 %255, i32 %253, i32 %256, !prof !2
  %258 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %186, i64 0, i32 0, i32 0, i32 0, i32 0
  %259 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %258, align 8
  %260 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %259, i64 0, i32 1, i32 0, i32 0
  %261 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %260, align 8
  %262 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %261, i64 0, i32 1
  %263 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %186) #11
  %264 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %262, %"class.WTF::AtomicString"* dereferenceable(8) %263) #11
  %265 = icmp sgt i32 %264, 33554431
  br i1 %265, label %273, label %266

266:                                              ; preds = %250
  %267 = icmp slt i32 %264, -33554432
  br i1 %267, label %271, label %268

268:                                              ; preds = %266
  %269 = shl i32 %264, 6
  %270 = icmp slt i32 %269, 0
  br i1 %270, label %271, label %273

271:                                              ; preds = %266, %268
  %272 = phi i32 [ %269, %268 ], [ -2147483648, %266 ]
  br label %273

273:                                              ; preds = %250, %268, %271
  %274 = phi i32 [ %272, %271 ], [ %269, %268 ], [ 2147483647, %250 ]
  %275 = phi i32 [ -2147483648, %271 ], [ 2147483647, %268 ], [ 2147483647, %250 ]
  %276 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %257, i32 %274) #11
  %277 = extractvalue { i32, i1 } %276, 1
  %278 = extractvalue { i32, i1 } %276, 0
  %279 = select i1 %277, i32 %275, i32 %278, !prof !2
  %280 = sdiv i32 %279, 64
  %281 = shl nsw i32 %280, 6
  %282 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %281, i32 %1) #11
  %283 = extractvalue { i32, i1 } %282, 1
  %284 = extractvalue { i32, i1 } %282, 0
  %285 = select i1 %283, i32 %12, i32 %284, !prof !2
  %286 = icmp slt i32 %175, %285
  %287 = select i1 %286, i32 %285, i32 %175
  br label %288

288:                                              ; preds = %199, %180, %233, %273, %200, %189
  %289 = phi i32 [ %175, %199 ], [ %175, %180 ], [ %249, %233 ], [ %287, %273 ], [ %175, %200 ], [ %175, %189 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #11
  br label %290

290:                                              ; preds = %134, %71, %103, %174, %288, %23
  %291 = phi i32 [ %45, %134 ], [ %45, %71 ], [ %45, %103 ], [ %175, %174 ], [ %289, %288 ], [ %24, %23 ]
  %292 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %25, i64 0, i32 1
  %293 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %292, align 8
  %294 = icmp eq %"class.blink::InlineBox"* %293, null
  br i1 %294, label %21, label %23
}

declare i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #3

declare dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.blink::LineLayoutText", align 8
  %4 = alloca i32, align 4
  %5 = alloca %"class.blink::LineLayoutItem", align 8
  %6 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %7 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %6, align 8
  %8 = icmp eq %"class.blink::InlineBox"* %7, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %2
  %10 = icmp sgt i32 %1, -1
  %11 = select i1 %10, i32 -2147483648, i32 2147483647
  %12 = bitcast %"class.blink::LineLayoutItem"* %5 to i8*
  %13 = bitcast %"class.blink::LineLayoutItem"* %5 to i64*
  %14 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %15 = bitcast %"class.blink::LineLayoutText"* %3 to i8*
  %16 = bitcast %"class.blink::LineLayoutText"* %3 to i64*
  %17 = getelementptr inbounds %"class.blink::LineLayoutText", %"class.blink::LineLayoutText"* %3, i64 0, i32 0
  %18 = bitcast i32* %4 to i8*
  br label %21

19:                                               ; preds = %280, %2
  %20 = phi i32 [ 0, %2 ], [ %281, %280 ]
  ret i32 %20

21:                                               ; preds = %9, %280
  %22 = phi i32 [ 0, %9 ], [ %281, %280 ]
  %23 = phi %"class.blink::InlineBox"* [ %7, %9 ], [ %283, %280 ]
  %24 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 4, i32 0
  %25 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %25, i64 0, i32 4
  %27 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %26 to i96*
  %28 = load i96, i96* %27, align 4
  %29 = and i96 %28, 113336795588871485128704
  %30 = icmp eq i96 %29, 75557863725914323419136
  br i1 %30, label %280, label %31

31:                                               ; preds = %21
  %32 = bitcast %"class.blink::InlineBox"* %23 to i1 (%"class.blink::InlineBox"*)***
  %33 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %32, align 8
  %34 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %33, i64 14
  %35 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %34, align 8
  %36 = call zeroext i1 %35(%"class.blink::InlineBox"* nonnull %23) #11
  br i1 %36, label %37, label %42

37:                                               ; preds = %31
  %38 = bitcast %"class.blink::InlineBox"* %23 to %"class.blink::InlineFlowBox"*
  %39 = call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nonnull %38, i32 %1)
  %40 = icmp slt i32 %22, %39
  %41 = select i1 %40, i32 %39, i32 %22
  br label %42

42:                                               ; preds = %37, %31
  %43 = phi i32 [ %41, %37 ], [ %22, %31 ]
  %44 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %24, align 8
  %45 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %44, i64 0, i32 4
  %46 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %45 to i96*
  %47 = load i96, i96* %46, align 4
  %48 = and i96 %47, 1073741824
  %49 = icmp eq i96 %48, 0
  br i1 %49, label %172, label %50

50:                                               ; preds = %42
  %51 = bitcast %"class.blink::LayoutObject"* %44 to i1 (%"class.blink::LayoutObject"*, i32)***
  %52 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %51, align 8
  %53 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %52, i64 92
  %54 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %53, align 8
  %55 = call zeroext i1 %54(%"class.blink::LayoutObject"* %44, i32 42) #11
  br i1 %55, label %56, label %172

56:                                               ; preds = %50
  %57 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %24, align 8
  %58 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %57, i64 0, i32 5, i32 0
  %59 = bitcast %"class.blink::ComputedStyle"** %58 to %"class.blink::ComputedStyleBase"**
  %60 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %59, align 8
  %61 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %60, i64 0, i32 1, i32 0, i32 0
  %62 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %61, align 8
  %63 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %62, i64 0, i32 3, i32 0, i32 0
  %64 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"** %63, align 8
  %65 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* %64, i64 0, i32 3
  %66 = load i8, i8* %65, align 2
  %67 = and i8 %66, 8
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %172

69:                                               ; preds = %56
  %70 = bitcast %"class.blink::LayoutObject"* %57 to %"class.blink::LayoutRubyRun"*
  %71 = call %"class.blink::LayoutRubyText"* @_ZNK5blink13LayoutRubyRun8RubyTextEv(%"class.blink::LayoutRubyRun"* %70) #11
  %72 = icmp eq %"class.blink::LayoutRubyText"* %71, null
  br i1 %72, label %280, label %73

73:                                               ; preds = %69
  %74 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %58, align 8
  %75 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %74, i64 0, i32 0, i32 9
  %76 = bitcast [20 x i8]* %75 to i160*
  %77 = load i160, i160* %76, align 8
  %78 = and i160 %77, 15211807202738752817960438464512
  %79 = icmp eq i160 %78, 10141204801825835211973625643008
  %80 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0
  %81 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %80, align 8
  %82 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %81, i64 0, i32 0, i32 9
  %83 = bitcast [20 x i8]* %82 to i160*
  %84 = load i160, i160* %83, align 8
  %85 = and i160 %84, 15211807202738752817960438464512
  %86 = icmp eq i160 %85, 0
  %87 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1, i32 0
  %88 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %89 = select i1 %86, i32* %87, i32* %88
  %90 = load i32, i32* %89, align 4
  br i1 %79, label %91, label %132

91:                                               ; preds = %73
  %92 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 1, i32 0, i32 0
  %93 = bitcast %"class.blink::InlineFlowBox"** %92 to %"class.blink::RootInlineBox"**
  %94 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %93, align 8
  %95 = icmp eq %"class.blink::RootInlineBox"* %94, null
  br i1 %95, label %101, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %94, i64 0, i32 5, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = icmp slt i32 %98, 0
  %100 = select i1 %99, i32 -2147483648, i32 2147483647
  br label %101

101:                                              ; preds = %96, %91
  %102 = phi i32 [ 0, %91 ], [ %98, %96 ]
  %103 = phi i32 [ 2147483647, %91 ], [ %100, %96 ]
  %104 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %102) #11
  %105 = extractvalue { i32, i1 } %104, 1
  %106 = extractvalue { i32, i1 } %104, 0
  %107 = select i1 %105, i32 %103, i32 %106, !prof !2
  %108 = icmp sgt i32 %107, -1
  br i1 %108, label %280, label %109

109:                                              ; preds = %101
  %110 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 7, i32 0
  %111 = load i32, i32* %110, align 4
  %112 = and i32 %111, 2048
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 1, i32 0
  %115 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 0, i32 0
  %116 = select i1 %113, i32* %115, i32* %114
  %117 = load i32, i32* %116, align 4
  %118 = icmp slt i32 %117, 0
  %119 = select i1 %118, i32 -2147483648, i32 2147483647
  %120 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %107, i32 %117) #11
  %121 = extractvalue { i32, i1 } %120, 1
  %122 = extractvalue { i32, i1 } %120, 0
  %123 = select i1 %121, i32 %119, i32 %122, !prof !2
  %124 = icmp sgt i32 %123, -1
  %125 = select i1 %124, i32 -2147483648, i32 2147483647
  %126 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %123) #11
  %127 = extractvalue { i32, i1 } %126, 1
  %128 = extractvalue { i32, i1 } %126, 0
  %129 = select i1 %127, i32 %125, i32 %128, !prof !2
  %130 = icmp slt i32 %43, %129
  %131 = select i1 %130, i32 %129, i32 %43
  br label %172

132:                                              ; preds = %73
  %133 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 1, i32 0, i32 1
  %134 = bitcast %"class.blink::InlineFlowBox"** %133 to %"class.blink::RootInlineBox"**
  %135 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %134, align 8
  %136 = icmp eq %"class.blink::RootInlineBox"* %135, null
  %137 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 1, i32 0
  %138 = getelementptr inbounds %"class.blink::LayoutRubyText", %"class.blink::LayoutRubyText"* %71, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %139 = select i1 %86, i32* %137, i32* %138
  %140 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %135, i64 0, i32 6, i32 0
  %141 = select i1 %136, i32* %139, i32* %140
  %142 = load i32, i32* %141, align 4
  %143 = icmp slt i32 %142, 0
  %144 = select i1 %143, i32 -2147483648, i32 2147483647
  %145 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %90, i32 %142) #11
  %146 = extractvalue { i32, i1 } %145, 1
  %147 = extractvalue { i32, i1 } %145, 0
  %148 = select i1 %146, i32 %144, i32 %147, !prof !2
  %149 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %23) #11
  %150 = icmp sgt i32 %148, %149
  br i1 %150, label %151, label %280

151:                                              ; preds = %132
  %152 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 7, i32 0
  %153 = load i32, i32* %152, align 4
  %154 = and i32 %153, 2048
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 1, i32 0
  %157 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 0, i32 0
  %158 = select i1 %155, i32* %157, i32* %156
  %159 = load i32, i32* %158, align 4
  %160 = icmp slt i32 %159, 0
  %161 = select i1 %160, i32 -2147483648, i32 2147483647
  %162 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %148, i32 %159) #11
  %163 = extractvalue { i32, i1 } %162, 1
  %164 = extractvalue { i32, i1 } %162, 0
  %165 = select i1 %163, i32 %161, i32 %164, !prof !2
  %166 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %165, i32 %1) #11
  %167 = extractvalue { i32, i1 } %166, 1
  %168 = extractvalue { i32, i1 } %166, 0
  %169 = select i1 %167, i32 %11, i32 %168, !prof !2
  %170 = icmp slt i32 %43, %169
  %171 = select i1 %170, i32 %169, i32 %43
  br label %172

172:                                              ; preds = %42, %50, %151, %109, %56
  %173 = phi i32 [ %43, %42 ], [ %43, %50 ], [ %171, %151 ], [ %131, %109 ], [ %43, %56 ]
  %174 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %32, align 8
  %175 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %174, i64 15
  %176 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %175, align 8
  %177 = call zeroext i1 %176(%"class.blink::InlineBox"* nonnull %23) #11
  br i1 %177, label %178, label %280

178:                                              ; preds = %172
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  %179 = bitcast %"class.blink::LayoutObject"** %24 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %13, align 8
  %181 = load i32, i32* %14, align 4
  %182 = and i32 %181, 1
  %183 = icmp ne i32 %182, 0
  %184 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %5, i1 zeroext %183)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  %185 = call i32 @_ZNK5blink13ComputedStyle19GetTextEmphasisMarkEv(%"class.blink::ComputedStyle"* %184) #11
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %280, label %187

187:                                              ; preds = %178
  %188 = bitcast %"class.blink::InlineBox"* %23 to %"class.blink::InlineTextBox"*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11
  %189 = load i64, i64* %179, align 8
  store i64 %189, i64* %16, align 8
  %190 = load i32, i32* %14, align 4
  %191 = and i32 %190, 1
  %192 = icmp ne i32 %191, 0
  %193 = call dereferenceable(104) %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem8StyleRefEb(%"class.blink::LineLayoutItem"* nonnull %17, i1 zeroext %192) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #11
  store i32 -1431655766, i32* %4, align 4
  %194 = call zeroext i1 @_ZNK5blink13InlineTextBox23GetEmphasisMarkPositionERKNS_13ComputedStyleERNS_20TextEmphasisPositionE(%"class.blink::InlineTextBox"* nonnull %188, %"class.blink::ComputedStyle"* dereferenceable(104) %193, i32* nonnull dereferenceable(4) %4) #11
  br i1 %194, label %196, label %195

195:                                              ; preds = %187
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #11
  br label %280

196:                                              ; preds = %187
  %197 = call i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"* %193) #11
  %198 = icmp eq i32 %197, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #11
  br i1 %198, label %199, label %280

199:                                              ; preds = %196
  %200 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %184, i64 0, i32 0, i32 9
  %201 = bitcast [20 x i8]* %200 to i160*
  %202 = load i160, i160* %201, align 8
  %203 = and i160 %202, 15211807202738752817960438464512
  %204 = icmp eq i160 %203, 10141204801825835211973625643008
  %205 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 7, i32 0
  %206 = load i32, i32* %205, align 4
  %207 = and i32 %206, 2048
  %208 = icmp eq i32 %207, 0
  %209 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 1, i32 0
  %210 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 5, i32 0, i32 0
  %211 = select i1 %208, i32* %210, i32* %209
  %212 = load i32, i32* %211, align 4
  br i1 %204, label %249, label %213

213:                                              ; preds = %199
  %214 = call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* nonnull %23) #11
  %215 = icmp slt i32 %214, 0
  %216 = select i1 %215, i32 -2147483648, i32 2147483647
  %217 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %212, i32 %214) #11
  %218 = extractvalue { i32, i1 } %217, 1
  %219 = extractvalue { i32, i1 } %217, 0
  %220 = select i1 %218, i32 %216, i32 %219, !prof !2
  %221 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %184, i64 0, i32 0, i32 0, i32 0, i32 0
  %222 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %221, align 8
  %223 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %222, i64 0, i32 1, i32 0, i32 0
  %224 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %223, align 8
  %225 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %224, i64 0, i32 1
  %226 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %184) #11
  %227 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %225, %"class.WTF::AtomicString"* dereferenceable(8) %226) #11
  %228 = icmp sgt i32 %227, 33554431
  br i1 %228, label %236, label %229

229:                                              ; preds = %213
  %230 = icmp slt i32 %227, -33554432
  br i1 %230, label %234, label %231

231:                                              ; preds = %229
  %232 = shl i32 %227, 6
  %233 = icmp slt i32 %232, 0
  br i1 %233, label %234, label %236

234:                                              ; preds = %229, %231
  %235 = phi i32 [ %232, %231 ], [ -2147483648, %229 ]
  br label %236

236:                                              ; preds = %213, %231, %234
  %237 = phi i32 [ %235, %234 ], [ %232, %231 ], [ 2147483647, %213 ]
  %238 = phi i32 [ -2147483648, %234 ], [ 2147483647, %231 ], [ 2147483647, %213 ]
  %239 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %220, i32 %237) #11
  %240 = extractvalue { i32, i1 } %239, 1
  %241 = extractvalue { i32, i1 } %239, 0
  %242 = select i1 %240, i32 %238, i32 %241, !prof !2
  %243 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %242, i32 %1) #11
  %244 = extractvalue { i32, i1 } %243, 1
  %245 = extractvalue { i32, i1 } %243, 0
  %246 = select i1 %244, i32 %11, i32 %245, !prof !2
  %247 = icmp slt i32 %173, %246
  %248 = select i1 %247, i32 %246, i32 %173
  br label %280

249:                                              ; preds = %199
  %250 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %184, i64 0, i32 0, i32 0, i32 0, i32 0
  %251 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %250, align 8
  %252 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %251, i64 0, i32 1, i32 0, i32 0
  %253 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %252, align 8
  %254 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %253, i64 0, i32 1
  %255 = call dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13ComputedStyle22TextEmphasisMarkStringEv(%"class.blink::ComputedStyle"* %184) #11
  %256 = call i32 @_ZNK5blink4Font18EmphasisMarkHeightERKN3WTF12AtomicStringE(%"class.blink::Font"* %254, %"class.WTF::AtomicString"* dereferenceable(8) %255) #11
  %257 = icmp sgt i32 %256, 33554431
  br i1 %257, label %263, label %258

258:                                              ; preds = %249
  %259 = icmp slt i32 %256, -33554432
  br i1 %259, label %265, label %260

260:                                              ; preds = %258
  %261 = shl i32 %256, 6
  %262 = icmp sgt i32 %261, -1
  br i1 %262, label %263, label %265

263:                                              ; preds = %249, %260
  %264 = phi i32 [ %261, %260 ], [ 2147483647, %249 ]
  br label %265

265:                                              ; preds = %258, %260, %263
  %266 = phi i32 [ %264, %263 ], [ %261, %260 ], [ -2147483648, %258 ]
  %267 = phi i32 [ -2147483648, %263 ], [ 2147483647, %260 ], [ 2147483647, %258 ]
  %268 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %212, i32 %266) #11
  %269 = extractvalue { i32, i1 } %268, 1
  %270 = extractvalue { i32, i1 } %268, 0
  %271 = select i1 %269, i32 %267, i32 %270, !prof !2
  %272 = icmp sgt i32 %271, -1
  %273 = select i1 %272, i32 -2147483648, i32 2147483647
  %274 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %1, i32 %271) #11
  %275 = extractvalue { i32, i1 } %274, 1
  %276 = extractvalue { i32, i1 } %274, 0
  %277 = select i1 %275, i32 %273, i32 %276, !prof !2
  %278 = icmp slt i32 %173, %277
  %279 = select i1 %278, i32 %277, i32 %173
  br label %280

280:                                              ; preds = %132, %69, %101, %195, %196, %265, %236, %178, %172, %21
  %281 = phi i32 [ %43, %132 ], [ %43, %69 ], [ %43, %101 ], [ %173, %195 ], [ %173, %196 ], [ %279, %265 ], [ %248, %236 ], [ %173, %178 ], [ %173, %172 ], [ %22, %21 ]
  %282 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %23, i64 0, i32 1
  %283 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %282, align 8
  %284 = icmp eq %"class.blink::InlineBox"* %283, null
  br i1 %284, label %19, label %21
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK5blink13InlineFlowBox7BoxNameEv(%"class.blink::InlineFlowBox"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0)
}

declare %"class.WTF::StringImpl"* @_ZNK5blink9InlineBox9DebugNameEv(%"class.blink::InlineBox"*) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox11OwnerNodeIdEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv(%"class.blink::DisplayItemClient"*) unnamed_addr #1 comdat align 2 {
  ret i8 0
}

declare void @_ZN5blink9InlineBox7DestroyEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox11IsLineBreakEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox15IsInlineTextBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox15IsRootInlineBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink9InlineBox20VirtualLogicalHeightEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i32 0
}

declare i32 @_ZNK5blink9InlineBox16BaselinePositionENS_12FontBaselineE(%"class.blink::InlineBox"*, i32) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox10LineHeightEv(%"class.blink::InlineBox"*) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox14CaretMinOffsetEv(%"class.blink::InlineBox"*) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox14CaretMaxOffsetEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9InlineBox9MarkDirtyEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %0, i64 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 256
  store i32 %4, i32* %2, align 4
  ret void
}

declare void @_ZN5blink9InlineBox14DirtyLineBoxesEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBoxD2Ev(%"class.blink::InlineFlowBox"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13InlineFlowBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %3, align 8
  store %"struct.blink::SimpleOverflowModel"* null, %"struct.blink::SimpleOverflowModel"** %3, align 8
  %5 = icmp eq %"struct.blink::SimpleOverflowModel"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBoxD0Ev(%"class.blink::InlineFlowBox"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13InlineFlowBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %3, align 8
  store %"struct.blink::SimpleOverflowModel"* null, %"struct.blink::SimpleOverflowModel"** %3, align 8
  %5 = icmp eq %"struct.blink::SimpleOverflowModel"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %"class.blink::InlineFlowBox"* %0 to i8*
  tail call void @_ZN5blink9InlineBoxdlEPv(i8* %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBox14SetConstructedEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 2
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %6 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %5, align 8
  %7 = icmp eq %"class.blink::InlineBox"* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %9, %1
  ret void

9:                                                ; preds = %1, %9
  %10 = phi %"class.blink::InlineBox"* [ %16, %9 ], [ %6, %1 ]
  %11 = bitcast %"class.blink::InlineBox"* %10 to void (%"class.blink::InlineBox"*)***
  %12 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %12, i64 21
  %14 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %13, align 8
  tail call void %14(%"class.blink::InlineBox"* nonnull %10) #11
  %15 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %10, i64 0, i32 1
  %16 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %15, align 8
  %17 = icmp eq %"class.blink::InlineBox"* %16, null
  br i1 %17, label %8, label %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13InlineFlowBox6IsLeafEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13InlineFlowBox10IsSelectedEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #7

declare %"class.blink::ComputedStyle"* @_ZNK5blink12LayoutObject29FirstLineStyleWithoutFallbackEv(%"class.blink::LayoutObject"*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #0

declare zeroext i1 @_ZNK5blink13ComputedStyle35HasIdenticalAscentDescentAndLineGapERKS0_(%"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"* dereferenceable(104)) local_unnamed_addr #3

declare void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* sret, %"class.blink::ComputedStyle"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink6Length17IsCalculatedEqualERKS0_(%"class.blink::Length"*, %"class.blink::Length"* dereferenceable(8)) local_unnamed_addr #3

declare void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink20LayoutBoxModelObject20HasSelfPaintingLayerEv(%"class.blink::LayoutBoxModelObject"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink12LayoutObject18IsInsideListMarkerEv(%"class.blink::LayoutObject"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink20BorderImageLengthBox7NonZeroEv(%"class.blink::BorderImageLengthBox"*) local_unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %17

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 8
  br i1 %8, label %103, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 0, i32 0, i32 3
  %11 = load i8, i8* %10, align 2, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.blink::BorderImageLengthBox"* %0 to float*
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %15, 0.000000e+00
  br i1 %16, label %25, label %103

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 0, i32 1
  %19 = load double, double* %18, align 8
  %20 = fcmp oeq double %19, 0.000000e+00
  br i1 %20, label %25, label %103

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %103

25:                                               ; preds = %13, %17, %21
  %26 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 1, i32 0, i32 2
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 8
  br i1 %33, label %103, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 1, i32 0, i32 3
  %36 = load i8, i8* %35, align 2, !range !3
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.blink::BorderImageLength"* %26 to float*
  %40 = load float, float* %39, align 4
  %41 = fcmp oeq float %40, 0.000000e+00
  br i1 %41, label %50, label %103

42:                                               ; preds = %25
  %43 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 1, i32 1
  %44 = load double, double* %43, align 8
  %45 = fcmp oeq double %44, 0.000000e+00
  br i1 %45, label %50, label %103

46:                                               ; preds = %34
  %47 = getelementptr inbounds %"class.blink::BorderImageLength", %"class.blink::BorderImageLength"* %26, i64 0, i32 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %103

50:                                               ; preds = %38, %42, %46
  %51 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 2
  %52 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 2, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %67

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 2, i32 0, i32 2
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 8
  br i1 %58, label %103, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 2, i32 0, i32 3
  %61 = load i8, i8* %60, align 2, !range !3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %71, label %63

63:                                               ; preds = %59
  %64 = bitcast %"class.blink::BorderImageLength"* %51 to float*
  %65 = load float, float* %64, align 4
  %66 = fcmp oeq float %65, 0.000000e+00
  br i1 %66, label %75, label %103

67:                                               ; preds = %50
  %68 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 2, i32 1
  %69 = load double, double* %68, align 8
  %70 = fcmp oeq double %69, 0.000000e+00
  br i1 %70, label %75, label %103

71:                                               ; preds = %59
  %72 = getelementptr inbounds %"class.blink::BorderImageLength", %"class.blink::BorderImageLength"* %51, i64 0, i32 0, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %103

75:                                               ; preds = %63, %67, %71
  %76 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 3
  %77 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 3, i32 2
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %96

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 3, i32 0, i32 2
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 8
  br i1 %83, label %100, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 3, i32 0, i32 3
  %86 = load i8, i8* %85, align 2, !range !3
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = bitcast %"class.blink::BorderImageLength"* %76 to float*
  %90 = load float, float* %89, align 4
  %91 = fcmp oeq float %90, 0.000000e+00
  br label %100

92:                                               ; preds = %84
  %93 = getelementptr inbounds %"class.blink::BorderImageLength", %"class.blink::BorderImageLength"* %76, i64 0, i32 0, i32 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br label %100

96:                                               ; preds = %75
  %97 = getelementptr inbounds %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox"* %0, i64 0, i32 3, i32 1
  %98 = load double, double* %97, align 8
  %99 = fcmp oeq double %98, 0.000000e+00
  br label %100

100:                                              ; preds = %80, %88, %92, %96
  %101 = phi i1 [ %99, %96 ], [ false, %80 ], [ %91, %88 ], [ %95, %92 ]
  %102 = xor i1 %101, true
  br label %103

103:                                              ; preds = %55, %30, %5, %63, %67, %38, %42, %13, %17, %100, %71, %46, %21
  %104 = phi i1 [ true, %71 ], [ true, %46 ], [ true, %21 ], [ %102, %100 ], [ true, %17 ], [ true, %13 ], [ true, %42 ], [ true, %38 ], [ true, %67 ], [ true, %63 ], [ true, %5 ], [ true, %30 ], [ true, %55 ]
  ret i1 %104
}

declare %"class.blink::LayoutBoxModelObject"* @_ZNK5blink20LayoutBoxModelObject12ContinuationEv(%"class.blink::LayoutBoxModelObject"*) local_unnamed_addr #3

declare i32 @u_charDirection_69(i32) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink20LayoutBoxModelObject34HasInlineDirectionBordersOrPaddingEv(%"class.blink::LayoutBoxModelObject"*) local_unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutBoxModelObject"* %0, i64 0, i32 0, i32 5, i32 0
  %3 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !24
  %4 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %3, i64 0, i32 0, i32 9
  %5 = bitcast [20 x i8]* %4 to i160*
  %6 = load i160, i160* %5, align 8, !noalias !24
  %7 = bitcast %"class.blink::LayoutBoxModelObject"* %0 to i8*
  %8 = and i160 %6, 15211807202738752817960438464512
  %9 = icmp eq i160 %8, 0
  %10 = and i160 %6, 41538374868278621028243970633760768
  %11 = icmp eq i160 %10, 0
  %12 = select i1 %11, { i64, i64 } { i64 977, i64 0 }, { i64, i64 } { i64 985, i64 0 }
  %13 = select i1 %11, { i64, i64 } { i64 993, i64 0 }, { i64, i64 } { i64 1001, i64 0 }
  %14 = select i1 %9, { i64, i64 } %13, { i64, i64 } %12
  %15 = select i1 %9, { i64, i64 } %13, { i64, i64 } %12
  %16 = extractvalue { i64, i64 } %14, 0
  %17 = extractvalue { i64, i64 } %15, 1
  %18 = getelementptr inbounds i8, i8* %7, i64 %17
  %19 = bitcast i8* %18 to %"class.blink::LayoutBoxModelObject"*
  %20 = and i64 %16, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %29, label %22

22:                                               ; preds = %1
  %23 = bitcast i8* %18 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = add i64 %16, -1
  %26 = getelementptr i8, i8* %24, i64 %25
  %27 = bitcast i8* %26 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %28 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %27, align 8
  br label %31

29:                                               ; preds = %1
  %30 = inttoptr i64 %16 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %31

31:                                               ; preds = %22, %29
  %32 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %28, %22 ], [ %30, %29 ]
  %33 = tail call i32 %32(%"class.blink::LayoutBoxModelObject"* %19) #11
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %131

35:                                               ; preds = %31
  %36 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !27
  %37 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %36, i64 0, i32 0, i32 9
  %38 = bitcast [20 x i8]* %37 to i160*
  %39 = load i160, i160* %38, align 8, !noalias !27
  %40 = and i160 %39, 15211807202738752817960438464512
  %41 = icmp eq i160 %40, 0
  %42 = and i160 %39, 41538374868278621028243970633760768
  %43 = icmp eq i160 %42, 0
  %44 = select i1 %43, { i64, i64 } { i64 985, i64 0 }, { i64, i64 } { i64 977, i64 0 }
  %45 = select i1 %43, { i64, i64 } { i64 1001, i64 0 }, { i64, i64 } { i64 993, i64 0 }
  %46 = select i1 %41, { i64, i64 } %45, { i64, i64 } %44
  %47 = select i1 %41, { i64, i64 } %45, { i64, i64 } %44
  %48 = extractvalue { i64, i64 } %46, 0
  %49 = extractvalue { i64, i64 } %47, 1
  %50 = getelementptr inbounds i8, i8* %7, i64 %49
  %51 = bitcast i8* %50 to %"class.blink::LayoutBoxModelObject"*
  %52 = and i64 %48, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %35
  %55 = bitcast i8* %50 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = add i64 %48, -1
  %58 = getelementptr i8, i8* %56, i64 %57
  %59 = bitcast i8* %58 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %60 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %59, align 8
  br label %63

61:                                               ; preds = %35
  %62 = inttoptr i64 %48 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %63

63:                                               ; preds = %54, %61
  %64 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %60, %54 ], [ %62, %61 ]
  %65 = tail call i32 %64(%"class.blink::LayoutBoxModelObject"* %51) #11
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %131

67:                                               ; preds = %63
  %68 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !30
  %69 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %68, i64 0, i32 0, i32 9
  %70 = bitcast [20 x i8]* %69 to i160*
  %71 = load i160, i160* %70, align 8, !noalias !30
  %72 = and i160 %71, 15211807202738752817960438464512
  %73 = icmp eq i160 %72, 0
  %74 = and i160 %71, 41538374868278621028243970633760768
  %75 = icmp eq i160 %74, 0
  %76 = select i1 %75, { i64, i64 } { i64 945, i64 0 }, { i64, i64 } { i64 953, i64 0 }
  %77 = select i1 %75, { i64, i64 } { i64 961, i64 0 }, { i64, i64 } { i64 969, i64 0 }
  %78 = select i1 %73, { i64, i64 } %77, { i64, i64 } %76
  %79 = select i1 %73, { i64, i64 } %77, { i64, i64 } %76
  %80 = extractvalue { i64, i64 } %78, 0
  %81 = extractvalue { i64, i64 } %79, 1
  %82 = getelementptr inbounds i8, i8* %7, i64 %81
  %83 = bitcast i8* %82 to %"class.blink::LayoutBoxModelObject"*
  %84 = and i64 %80, 1
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %93, label %86

86:                                               ; preds = %67
  %87 = bitcast i8* %82 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = add i64 %80, -1
  %90 = getelementptr i8, i8* %88, i64 %89
  %91 = bitcast i8* %90 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %92 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %91, align 8
  br label %95

93:                                               ; preds = %67
  %94 = inttoptr i64 %80 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %95

95:                                               ; preds = %86, %93
  %96 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %92, %86 ], [ %94, %93 ]
  %97 = tail call i32 %96(%"class.blink::LayoutBoxModelObject"* %83) #11
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %131

99:                                               ; preds = %95
  %100 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !33
  %101 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %100, i64 0, i32 0, i32 9
  %102 = bitcast [20 x i8]* %101 to i160*
  %103 = load i160, i160* %102, align 8, !noalias !33
  %104 = and i160 %103, 15211807202738752817960438464512
  %105 = icmp eq i160 %104, 0
  %106 = and i160 %103, 41538374868278621028243970633760768
  %107 = icmp eq i160 %106, 0
  %108 = select i1 %107, { i64, i64 } { i64 953, i64 0 }, { i64, i64 } { i64 945, i64 0 }
  %109 = select i1 %107, { i64, i64 } { i64 969, i64 0 }, { i64, i64 } { i64 961, i64 0 }
  %110 = select i1 %105, { i64, i64 } %109, { i64, i64 } %108
  %111 = select i1 %105, { i64, i64 } %109, { i64, i64 } %108
  %112 = extractvalue { i64, i64 } %110, 0
  %113 = extractvalue { i64, i64 } %111, 1
  %114 = getelementptr inbounds i8, i8* %7, i64 %113
  %115 = bitcast i8* %114 to %"class.blink::LayoutBoxModelObject"*
  %116 = and i64 %112, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %125, label %118

118:                                              ; preds = %99
  %119 = bitcast i8* %114 to i8**
  %120 = load i8*, i8** %119, align 8
  %121 = add i64 %112, -1
  %122 = getelementptr i8, i8* %120, i64 %121
  %123 = bitcast i8* %122 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %124 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %123, align 8
  br label %127

125:                                              ; preds = %99
  %126 = inttoptr i64 %112 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %127

127:                                              ; preds = %118, %125
  %128 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %124, %118 ], [ %126, %125 ]
  %129 = tail call i32 %128(%"class.blink::LayoutBoxModelObject"* %115) #11
  %130 = icmp ne i32 %129, 0
  br label %131

131:                                              ; preds = %95, %63, %31, %127
  %132 = phi i1 [ true, %95 ], [ true, %63 ], [ true, %31 ], [ %130, %127 ]
  ret i1 %132
}

declare %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"*) local_unnamed_addr #3

declare %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"*, %"class.blink::FontDescription"* dereferenceable(80)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink20LayoutBoxModelObject29BorderAndPaddingLogicalHeightEv(%"class.blink::LayoutBoxModelObject"*) local_unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutBoxModelObject"* %0, i64 0, i32 0, i32 5, i32 0
  %3 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %3, i64 0, i32 0, i32 7, i32 0, i32 0
  %5 = load %"class.blink::ComputedStyleBase::StyleSurroundData"*, %"class.blink::ComputedStyleBase::StyleSurroundData"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %5, i64 0, i32 27
  %7 = load i16, i16* %6, align 8
  %8 = and i16 %7, 224
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %5, i64 0, i32 24, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  %14 = and i16 %7, 240
  %15 = icmp ne i16 %14, 0
  %16 = and i1 %15, %13
  br i1 %16, label %49, label %17

17:                                               ; preds = %10, %1
  %18 = and i16 %7, 3584
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %5, i64 0, i32 25, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  %24 = and i16 %7, 3840
  %25 = icmp ne i16 %24, 0
  %26 = and i1 %25, %23
  br i1 %26, label %49, label %27

27:                                               ; preds = %20, %17
  %28 = icmp ult i16 %7, 8192
  br i1 %28, label %33, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %5, i64 0, i32 26, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %29, %27
  %34 = and i16 %7, 14
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleSurroundData", %"class.blink::ComputedStyleBase::StyleSurroundData"* %5, i64 0, i32 23, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 0
  %40 = and i16 %7, 15
  %41 = icmp ne i16 %40, 0
  %42 = and i1 %41, %39
  br i1 %42, label %49, label %43

43:                                               ; preds = %36, %33
  %44 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %3, i64 0, i32 0, i32 9
  %45 = bitcast [20 x i8]* %44 to i160*
  %46 = load i160, i160* %45, align 8
  %47 = and i160 %46, 89202980794122492566142873090593446023921664
  %48 = icmp eq i160 %47, 0
  br i1 %48, label %196, label %49

49:                                               ; preds = %43, %36, %20, %10, %29
  %50 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %3, i64 0, i32 0, i32 9
  %51 = bitcast [20 x i8]* %50 to i160*
  %52 = load i160, i160* %51, align 8, !noalias !36
  %53 = lshr i160 %52, 102
  %54 = trunc i160 %53 to i8
  %55 = and i8 %54, 3
  %56 = bitcast %"class.blink::LayoutBoxModelObject"* %0 to i8*
  switch i8 %55, label %57 [
    i8 0, label %66
    i8 1, label %58
  ]

57:                                               ; preds = %49
  br label %58

58:                                               ; preds = %57, %49
  %59 = phi { i64, i64 } [ { i64 993, i64 0 }, %57 ], [ { i64 1001, i64 0 }, %49 ]
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %59, 1
  %62 = getelementptr inbounds i8, i8* %56, i64 %61
  %63 = bitcast i8* %62 to %"class.blink::LayoutBoxModelObject"*
  %64 = and i64 %60, 1
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %76, label %66

66:                                               ; preds = %58, %49
  %67 = phi %"class.blink::LayoutBoxModelObject"* [ %63, %58 ], [ %0, %49 ]
  %68 = phi i8* [ %62, %58 ], [ %56, %49 ]
  %69 = phi i64 [ %60, %58 ], [ 977, %49 ]
  %70 = bitcast i8* %68 to i8**
  %71 = load i8*, i8** %70, align 8
  %72 = add i64 %69, -1
  %73 = getelementptr i8, i8* %71, i64 %72
  %74 = bitcast i8* %73 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %75 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %74, align 8
  br label %78

76:                                               ; preds = %58
  %77 = inttoptr i64 %60 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %78

78:                                               ; preds = %76, %66
  %79 = phi %"class.blink::LayoutBoxModelObject"* [ %67, %66 ], [ %63, %76 ]
  %80 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %75, %66 ], [ %77, %76 ]
  %81 = tail call i32 %80(%"class.blink::LayoutBoxModelObject"* %79) #11
  %82 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !39
  %83 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %82, i64 0, i32 0, i32 9
  %84 = bitcast [20 x i8]* %83 to i160*
  %85 = load i160, i160* %84, align 8, !noalias !39
  %86 = lshr i160 %85, 102
  %87 = trunc i160 %86 to i8
  %88 = and i8 %87, 3
  switch i8 %88, label %89 [
    i8 0, label %98
    i8 1, label %90
  ]

89:                                               ; preds = %78
  br label %90

90:                                               ; preds = %89, %78
  %91 = phi { i64, i64 } [ { i64 961, i64 0 }, %89 ], [ { i64 969, i64 0 }, %78 ]
  %92 = extractvalue { i64, i64 } %91, 0
  %93 = extractvalue { i64, i64 } %91, 1
  %94 = getelementptr inbounds i8, i8* %56, i64 %93
  %95 = bitcast i8* %94 to %"class.blink::LayoutBoxModelObject"*
  %96 = and i64 %92, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %90, %78
  %99 = phi %"class.blink::LayoutBoxModelObject"* [ %95, %90 ], [ %0, %78 ]
  %100 = phi i8* [ %94, %90 ], [ %56, %78 ]
  %101 = phi i64 [ %92, %90 ], [ 945, %78 ]
  %102 = bitcast i8* %100 to i8**
  %103 = load i8*, i8** %102, align 8
  %104 = add i64 %101, -1
  %105 = getelementptr i8, i8* %103, i64 %104
  %106 = bitcast i8* %105 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %107 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %106, align 8
  br label %110

108:                                              ; preds = %90
  %109 = inttoptr i64 %92 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %110

110:                                              ; preds = %98, %108
  %111 = phi %"class.blink::LayoutBoxModelObject"* [ %99, %98 ], [ %95, %108 ]
  %112 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %107, %98 ], [ %109, %108 ]
  %113 = tail call i32 %112(%"class.blink::LayoutBoxModelObject"* %111) #11
  %114 = icmp slt i32 %113, 0
  %115 = select i1 %114, i32 -2147483648, i32 2147483647
  %116 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %81, i32 %113) #11
  %117 = extractvalue { i32, i1 } %116, 1
  %118 = extractvalue { i32, i1 } %116, 0
  %119 = select i1 %117, i32 %115, i32 %118, !prof !2
  %120 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !42
  %121 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %120, i64 0, i32 0, i32 9
  %122 = bitcast [20 x i8]* %121 to i160*
  %123 = load i160, i160* %122, align 8, !noalias !42
  %124 = lshr i160 %123, 102
  %125 = trunc i160 %124 to i8
  %126 = and i8 %125, 3
  switch i8 %126, label %127 [
    i8 0, label %136
    i8 1, label %128
  ]

127:                                              ; preds = %110
  br label %128

128:                                              ; preds = %127, %110
  %129 = phi { i64, i64 } [ { i64 1001, i64 0 }, %127 ], [ { i64 993, i64 0 }, %110 ]
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = extractvalue { i64, i64 } %129, 1
  %132 = getelementptr inbounds i8, i8* %56, i64 %131
  %133 = bitcast i8* %132 to %"class.blink::LayoutBoxModelObject"*
  %134 = and i64 %130, 1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %146, label %136

136:                                              ; preds = %128, %110
  %137 = phi %"class.blink::LayoutBoxModelObject"* [ %133, %128 ], [ %0, %110 ]
  %138 = phi i8* [ %132, %128 ], [ %56, %110 ]
  %139 = phi i64 [ %130, %128 ], [ 985, %110 ]
  %140 = bitcast i8* %138 to i8**
  %141 = load i8*, i8** %140, align 8
  %142 = add i64 %139, -1
  %143 = getelementptr i8, i8* %141, i64 %142
  %144 = bitcast i8* %143 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %145 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %144, align 8
  br label %148

146:                                              ; preds = %128
  %147 = inttoptr i64 %130 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %148

148:                                              ; preds = %146, %136
  %149 = phi %"class.blink::LayoutBoxModelObject"* [ %137, %136 ], [ %133, %146 ]
  %150 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %145, %136 ], [ %147, %146 ]
  %151 = tail call i32 %150(%"class.blink::LayoutBoxModelObject"* %149) #11
  %152 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %2, align 8, !noalias !45
  %153 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %152, i64 0, i32 0, i32 9
  %154 = bitcast [20 x i8]* %153 to i160*
  %155 = load i160, i160* %154, align 8, !noalias !45
  %156 = lshr i160 %155, 102
  %157 = trunc i160 %156 to i8
  %158 = and i8 %157, 3
  switch i8 %158, label %159 [
    i8 0, label %168
    i8 1, label %160
  ]

159:                                              ; preds = %148
  br label %160

160:                                              ; preds = %159, %148
  %161 = phi { i64, i64 } [ { i64 969, i64 0 }, %159 ], [ { i64 961, i64 0 }, %148 ]
  %162 = extractvalue { i64, i64 } %161, 0
  %163 = extractvalue { i64, i64 } %161, 1
  %164 = getelementptr inbounds i8, i8* %56, i64 %163
  %165 = bitcast i8* %164 to %"class.blink::LayoutBoxModelObject"*
  %166 = and i64 %162, 1
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %160, %148
  %169 = phi %"class.blink::LayoutBoxModelObject"* [ %165, %160 ], [ %0, %148 ]
  %170 = phi i8* [ %164, %160 ], [ %56, %148 ]
  %171 = phi i64 [ %162, %160 ], [ 953, %148 ]
  %172 = bitcast i8* %170 to i8**
  %173 = load i8*, i8** %172, align 8
  %174 = add i64 %171, -1
  %175 = getelementptr i8, i8* %173, i64 %174
  %176 = bitcast i8* %175 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %177 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %176, align 8
  br label %180

178:                                              ; preds = %160
  %179 = inttoptr i64 %162 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %180

180:                                              ; preds = %168, %178
  %181 = phi %"class.blink::LayoutBoxModelObject"* [ %169, %168 ], [ %165, %178 ]
  %182 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %177, %168 ], [ %179, %178 ]
  %183 = tail call i32 %182(%"class.blink::LayoutBoxModelObject"* %181) #11
  %184 = icmp slt i32 %183, 0
  %185 = select i1 %184, i32 -2147483648, i32 2147483647
  %186 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %151, i32 %183) #11
  %187 = extractvalue { i32, i1 } %186, 1
  %188 = extractvalue { i32, i1 } %186, 0
  %189 = select i1 %187, i32 %185, i32 %188, !prof !2
  %190 = icmp slt i32 %189, 0
  %191 = select i1 %190, i32 -2147483648, i32 2147483647
  %192 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %119, i32 %189) #11
  %193 = extractvalue { i32, i1 } %192, 1
  %194 = extractvalue { i32, i1 } %192, 0
  %195 = select i1 %193, i32 %191, i32 %194, !prof !2
  br label %196

196:                                              ; preds = %43, %180
  %197 = phi i32 [ %195, %180 ], [ 0, %43 ]
  ret i32 %197
}

declare %"class.blink::LayoutRubyBase"* @_ZNK5blink13LayoutRubyRun8RubyBaseEv(%"class.blink::LayoutRubyRun"*) local_unnamed_addr #3

declare i32 @_ZNK5blink13ComputedStyle30GetTextEmphasisLineLogicalSideEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

declare { i64, i64 } @_ZNK5blink9LayoutBox39LogicalVisualOverflowRectForPropagationEv(%"class.blink::LayoutBox"*) local_unnamed_addr #3

declare { <2 x float>, <2 x float> } @_ZNK5blink10ShadowList28RectOutsetsIncludingOriginalEv(%"class.blink::ShadowList"*) local_unnamed_addr #3

declare { i64, i64 } @_ZN5blink48LineOrientationLayoutRectOutsetsWithFlippedLinesERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* dereferenceable(16), i8 zeroext) local_unnamed_addr #3

declare { i64, i64 } @_ZNK5blink13ComputedStyle12ImageOutsetsERKNS_14NinePieceImageE(%"class.blink::ComputedStyle"*, %"class.blink::NinePieceImage"* dereferenceable(8)) local_unnamed_addr #3

declare i32 @_ZNK5blink13ComputedStyle19OutlineOutsetExtentEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13GlyphOverflow13SetFromBoundsERKNS_9FloatRectERKNS_4FontEf(%"struct.blink::GlyphOverflow"*, %"class.blink::FloatRect"* dereferenceable(16), %"class.blink::Font"* dereferenceable(88), float) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = tail call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %2) #11
  %14 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %13, i64 0, i32 2
  %15 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %14, align 8
  %16 = icmp eq %"class.blink::SimpleFontData"* %15, null
  br i1 %16, label %17, label %21

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %2, i64 0, i32 0
  %19 = tail call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %13, %"class.blink::FontDescription"* dereferenceable(80) %18) #11
  store %"class.blink::SimpleFontData"* %19, %"class.blink::SimpleFontData"** %14, align 8
  %20 = icmp eq %"class.blink::SimpleFontData"* %19, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %4, %17
  %22 = phi %"class.blink::SimpleFontData"* [ %19, %17 ], [ %15, %4 ]
  %23 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %22, i64 0, i32 1, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %22, i64 0, i32 1, i32 2
  %26 = load float, float* %25, align 4
  br label %27

27:                                               ; preds = %17, %21
  %28 = phi float [ %24, %21 ], [ 0.000000e+00, %17 ]
  %29 = phi float [ %26, %21 ], [ 0.000000e+00, %17 ]
  %30 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30)
  store float 0.000000e+00, float* %5, align 4
  %31 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31)
  %32 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fsub float -0.000000e+00, %33
  %35 = fsub float %34, %28
  store float %35, float* %6, align 4
  %36 = fcmp ogt float %35, 0.000000e+00
  %37 = select i1 %36, float* %6, float* %5
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %0, i64 0, i32 2
  %41 = bitcast float* %40 to i32*
  store i32 %39, i32* %41, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30)
  %42 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42)
  store float 0.000000e+00, float* %7, align 4
  %43 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43)
  %44 = load float, float* %32, align 4
  %45 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %46 = load float, float* %45, align 4
  %47 = fadd float %44, %46
  %48 = fsub float %47, %29
  store float %48, float* %8, align 4
  %49 = fcmp ogt float %48, 0.000000e+00
  %50 = select i1 %49, float* %8, float* %7
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %0, i64 0, i32 3
  %54 = bitcast float* %53 to i32*
  store i32 %52, i32* %54, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42)
  %55 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 0.000000e+00, float* %9, align 4
  %56 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56)
  %57 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = fsub float -0.000000e+00, %58
  store float %59, float* %10, align 4
  %60 = fcmp olt float %58, 0.000000e+00
  %61 = select i1 %60, float* %10, float* %9
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = bitcast %"struct.blink::GlyphOverflow"* %0 to i32*
  store i32 %63, i32* %64, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  %65 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65)
  store float 0.000000e+00, float* %11, align 4
  %66 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66)
  %67 = load float, float* %57, align 4
  %68 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %69 = load float, float* %68, align 4
  %70 = fadd float %67, %69
  %71 = fsub float %70, %3
  store float %71, float* %12, align 4
  %72 = fcmp ogt float %71, 0.000000e+00
  %73 = select i1 %72, float* %12, float* %11
  %74 = bitcast float* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %"struct.blink::GlyphOverflow", %"struct.blink::GlyphOverflow"* %0, i64 0, i32 1
  %77 = bitcast float* %76 to i32*
  store i32 %75, i32* %77, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12CopyToVectorINS_7HashSetIPKN5blink14SimpleFontDataENS_7PtrHashIS4_EENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEENS_6VectorIS5_Lj0ESA_EEEEvRKT_RT0_(%"class.WTF::HashSet.1811"* dereferenceable(24), %"class.WTF::Vector.1687"* dereferenceable(16)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::HashSet.1811", %"class.WTF::HashSet.1811"* %0, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %1, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %6, %4
  br i1 %7, label %8, label %63

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %10, %4
  br i1 %11, label %12, label %51

12:                                               ; preds = %8
  %13 = lshr i32 %10, 2
  %14 = add nuw i32 %10, 1
  %15 = add i32 %14, %13
  %16 = icmp ugt i32 %15, 4
  %17 = select i1 %16, i32 %15, i32 4
  %18 = icmp ugt i32 %17, %4
  %19 = select i1 %18, i32 %17, i32 %4
  %20 = icmp ult i32 %10, %19
  br i1 %20, label %21, label %51, !prof !19

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %1, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %22, align 8
  %24 = icmp eq %"class.blink::SimpleFontData"** %23, null
  %25 = zext i32 %19 to i64
  %26 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm(i64 %25) #11
  %27 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %26, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink14SimpleFontDataEEEPKcv, i64 0, i64 0)) #11
  br i1 %24, label %28, label %33

28:                                               ; preds = %21
  %29 = ptrtoint i8* %27 to i64
  %30 = bitcast %"class.WTF::Vector.1687"* %1 to i64*
  store atomic i64 %29, i64* %30 monotonic, align 8
  %31 = lshr i64 %26, 3
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %9, align 8
  br label %51

33:                                               ; preds = %21
  %34 = lshr i64 %26, 3
  %35 = ptrtoint i8* %27 to i64
  %36 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %22, align 8
  %37 = icmp ne i8* %27, null
  %38 = icmp ne %"class.blink::SimpleFontData"** %36, null
  %39 = and i1 %37, %38
  %40 = bitcast %"class.blink::SimpleFontData"** %36 to i8*
  br i1 %39, label %41, label %47, !prof !19

41:                                               ; preds = %33
  %42 = load i32, i32* %5, align 4
  %43 = zext i32 %42 to i64
  %44 = shl nuw nsw i64 %43, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %27, i8* nonnull align 8 %40, i64 %44, i1 false) #11
  %45 = bitcast %"class.WTF::Vector.1687"* %1 to i8**
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %41, %33
  %48 = phi i8* [ %46, %41 ], [ %40, %33 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %48) #11
  %49 = bitcast %"class.WTF::Vector.1687"* %1 to i64*
  store atomic i64 %35, i64* %49 monotonic, align 8
  %50 = trunc i64 %34 to i32
  store i32 %50, i32* %9, align 8
  br label %51

51:                                               ; preds = %47, %28, %12, %8
  %52 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %1, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %52, align 8
  %54 = load i32, i32* %5, align 4
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %53, i64 %55
  %57 = zext i32 %4 to i64
  %58 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %53, i64 %57
  %59 = bitcast %"class.blink::SimpleFontData"** %56 to i8*
  %60 = ptrtoint %"class.blink::SimpleFontData"** %58 to i64
  %61 = ptrtoint %"class.blink::SimpleFontData"** %56 to i64
  %62 = sub i64 %60, %61
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false) #11
  br label %63

63:                                               ; preds = %2, %51
  store i32 %4, i32* %5, align 4
  %64 = load i32, i32* %3, align 4
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::HashSet.1811", %"class.WTF::HashSet.1811"* %0, i64 0, i32 0, i32 0
  %67 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %66, align 8
  %68 = getelementptr inbounds %"class.WTF::HashSet.1811", %"class.WTF::HashSet.1811"* %0, i64 0, i32 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %67, i64 %70
  br i1 %65, label %84, label %72

72:                                               ; preds = %63
  %73 = icmp eq i32 %69, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %72, %78
  %75 = phi %"class.blink::SimpleFontData"** [ %79, %78 ], [ %67, %72 ]
  %76 = bitcast %"class.blink::SimpleFontData"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  switch i64 %77, label %81 [
    i64 -1, label %78
    i64 0, label %78
  ]

78:                                               ; preds = %74, %74
  %79 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %75, i64 1
  %80 = icmp eq %"class.blink::SimpleFontData"** %79, %71
  br i1 %80, label %84, label %74

81:                                               ; preds = %74, %72
  %82 = phi %"class.blink::SimpleFontData"** [ %67, %72 ], [ %75, %74 ]
  %83 = icmp eq %"class.blink::SimpleFontData"** %82, %71
  br i1 %83, label %84, label %85

84:                                               ; preds = %78, %85, %101, %98, %63, %81
  ret void

85:                                               ; preds = %81, %101
  %86 = phi i32 [ %102, %101 ], [ 0, %81 ]
  %87 = phi %"class.blink::SimpleFontData"** [ %95, %101 ], [ %82, %81 ]
  %88 = bitcast %"class.blink::SimpleFontData"** %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = tail call dereferenceable(8) %"class.blink::SimpleFontData"** @_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1687"* %1, i32 %86) #11
  %91 = bitcast %"class.blink::SimpleFontData"** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %87, i64 1
  %93 = icmp eq %"class.blink::SimpleFontData"** %92, %71
  br i1 %93, label %84, label %94

94:                                               ; preds = %85, %98
  %95 = phi %"class.blink::SimpleFontData"** [ %99, %98 ], [ %92, %85 ]
  %96 = bitcast %"class.blink::SimpleFontData"** %95 to i64*
  %97 = load i64, i64* %96, align 8
  switch i64 %97, label %101 [
    i64 -1, label %98
    i64 0, label %98
  ]

98:                                               ; preds = %94, %94
  %99 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %95, i64 1
  %100 = icmp eq %"class.blink::SimpleFontData"** %99, %71
  br i1 %100, label %84, label %94

101:                                              ; preds = %94
  %102 = add i32 %86, 1
  %103 = icmp eq %"class.blink::SimpleFontData"** %95, %71
  br i1 %103, label %84, label %85
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1685"*, i8 } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6insertINS_17HashMapTranslatorISO_SJ_SC_EERPS2_SF_EENS_18HashTableAddResultISP_SG_EEOT0_OT1_(%"class.WTF::HashTable.1682"*, %"class.blink::InlineTextBox"** dereferenceable(8), %"struct.std::__1::pair.1686"* dereferenceable(32)) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"struct.blink::GlyphOverflow", align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 0
  %6 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair.1685"* %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = tail call %"struct.WTF::KeyValuePair.1685"* @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6ExpandEPSG_(%"class.WTF::HashTable.1682"* %0, %"struct.WTF::KeyValuePair.1685"* null)
  %10 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %5, align 8
  br label %11

11:                                               ; preds = %3, %8
  %12 = phi %"struct.WTF::KeyValuePair.1685"* [ %6, %3 ], [ %10, %8 ]
  %13 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  %16 = zext i32 %15 to i64
  %17 = bitcast %"class.blink::InlineTextBox"** %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = shl i64 %18, 32
  %20 = xor i64 %19, -1
  %21 = add i64 %18, %20
  %22 = lshr i64 %21, 22
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 13
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 8
  %28 = xor i64 %27, %26
  %29 = mul i64 %28, 9
  %30 = lshr i64 %29, 15
  %31 = xor i64 %30, %29
  %32 = shl i64 %31, 27
  %33 = xor i64 %32, -1
  %34 = add i64 %31, %33
  %35 = lshr i64 %34, 31
  %36 = xor i64 %35, %34
  %37 = trunc i64 %36 to i32
  %38 = and i32 %15, %37
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %12, i64 %39
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %40, i64 0, i32 0
  %42 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %41, align 8
  %43 = icmp eq %"class.blink::InlineTextBox"* %42, null
  %44 = inttoptr i64 %18 to %"class.blink::InlineTextBox"*
  br i1 %43, label %79, label %45

45:                                               ; preds = %11
  %46 = xor i32 %37, -1
  %47 = lshr i32 %37, 23
  %48 = add i32 %47, %46
  %49 = shl i32 %48, 12
  %50 = xor i32 %49, %48
  %51 = lshr i32 %50, 7
  %52 = xor i32 %51, %50
  %53 = shl i32 %52, 2
  %54 = xor i32 %53, %52
  %55 = lshr i32 %54, 20
  %56 = xor i32 %55, %54
  %57 = or i32 %56, 1
  %58 = zext i32 %57 to i64
  br label %59

59:                                               ; preds = %45, %66
  %60 = phi %"class.blink::InlineTextBox"* [ %42, %45 ], [ %75, %66 ]
  %61 = phi %"struct.WTF::KeyValuePair.1685"* [ %40, %45 ], [ %73, %66 ]
  %62 = phi %"struct.WTF::KeyValuePair.1685"* [ null, %45 ], [ %68, %66 ]
  %63 = phi i64 [ %39, %45 ], [ %72, %66 ]
  %64 = phi i64 [ 0, %45 ], [ %70, %66 ]
  %65 = icmp eq %"class.blink::InlineTextBox"* %60, %44
  br i1 %65, label %130, label %66

66:                                               ; preds = %59
  %67 = icmp eq %"class.blink::InlineTextBox"* %60, inttoptr (i64 -1 to %"class.blink::InlineTextBox"*)
  %68 = select i1 %67, %"struct.WTF::KeyValuePair.1685"* %61, %"struct.WTF::KeyValuePair.1685"* %62
  %69 = icmp eq i64 %64, 0
  %70 = select i1 %69, i64 %58, i64 %64
  %71 = add i64 %70, %63
  %72 = and i64 %71, %16
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %12, i64 %72
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %73, i64 0, i32 0
  %75 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %74, align 8
  %76 = icmp eq %"class.blink::InlineTextBox"* %75, null
  br i1 %76, label %77, label %59

77:                                               ; preds = %66
  %78 = icmp eq %"struct.WTF::KeyValuePair.1685"* %68, null
  br i1 %78, label %79, label %82

79:                                               ; preds = %11, %77
  %80 = phi %"struct.WTF::KeyValuePair.1685"* [ %73, %77 ], [ %40, %11 ]
  %81 = bitcast %"struct.WTF::KeyValuePair.1685"* %80 to i64*
  br label %98

82:                                               ; preds = %77
  %83 = bitcast %"struct.blink::GlyphOverflow"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %83)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %83, i8 0, i64 16, i1 false)
  %84 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %68, i64 0, i32 1
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %68, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %68, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %87 = bitcast %"struct.std::__1::pair.1686"* %84 to i64*
  %88 = bitcast %"struct.WTF::KeyValuePair.1685"* %68 to i64*
  store i64 0, i64* %88, align 8
  store atomic i64 0, i64* %87 monotonic, align 8
  store i32 0, i32* %85, align 4
  store i32 0, i32* %86, align 4
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %68, i64 0, i32 1, i32 1
  %90 = bitcast %"struct.blink::GlyphOverflow"* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* nonnull align 8 %83, i64 16, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %83)
  %91 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 3
  %92 = load i32, i32* %91, align 8
  %93 = add i32 %92, 2147483647
  %94 = and i32 %93, 2147483647
  %95 = and i32 %92, -2147483648
  %96 = or i32 %94, %95
  store i32 %96, i32* %91, align 8
  %97 = load i64, i64* %17, align 8
  br label %98

98:                                               ; preds = %79, %82
  %99 = phi i64* [ %81, %79 ], [ %88, %82 ]
  %100 = phi i64 [ %18, %79 ], [ %97, %82 ]
  %101 = phi %"struct.WTF::KeyValuePair.1685"* [ %80, %79 ], [ %68, %82 ]
  store i64 %100, i64* %99, align 8
  %102 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %101, i64 0, i32 1
  %103 = bitcast %"struct.std::__1::pair.1686"* %2 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.std::__1::pair.1686"* %102 to i64*
  %106 = load i64, i64* %105, align 8
  store atomic i64 %106, i64* %103 monotonic, align 8
  store atomic i64 %104, i64* %105 monotonic, align 8
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %101, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %108 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %109 = load i32, i32* %107, align 4
  %110 = load i32, i32* %108, align 4
  store i32 %110, i32* %107, align 4
  store i32 %109, i32* %108, align 4
  %111 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %101, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %112 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %113 = load i32, i32* %111, align 4
  %114 = load i32, i32* %112, align 4
  store i32 %114, i32* %111, align 4
  store i32 %113, i32* %112, align 4
  %115 = getelementptr inbounds %"struct.std::__1::pair.1686", %"struct.std::__1::pair.1686"* %2, i64 0, i32 1
  %116 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %101, i64 0, i32 1, i32 1
  %117 = bitcast %"struct.blink::GlyphOverflow"* %116 to i8*
  %118 = bitcast %"struct.blink::GlyphOverflow"* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 4 %118, i64 16, i1 false) #11
  %119 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, 1
  store i32 %121, i32* %119, align 4
  %122 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 3
  %123 = load i32, i32* %122, align 8
  %124 = add i32 %123, %121
  %125 = shl i32 %124, 1
  %126 = load i32, i32* %13, align 8
  %127 = icmp ult i32 %125, %126
  br i1 %127, label %130, label %128

128:                                              ; preds = %98
  %129 = tail call %"struct.WTF::KeyValuePair.1685"* @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6ExpandEPSG_(%"class.WTF::HashTable.1682"* %0, %"struct.WTF::KeyValuePair.1685"* %101)
  br label %130

130:                                              ; preds = %59, %98, %128
  %131 = phi i8 [ 1, %98 ], [ 1, %128 ], [ 0, %59 ]
  %132 = phi %"struct.WTF::KeyValuePair.1685"* [ %101, %98 ], [ %129, %128 ], [ %61, %59 ]
  %133 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } undef, %"struct.WTF::KeyValuePair.1685"* %132, 0
  %134 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } %133, i8 %131, 1
  ret { %"struct.WTF::KeyValuePair.1685"*, i8 } %134
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1685"* @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E6ExpandEPSG_(%"class.WTF::HashTable.1682"*, %"struct.WTF::KeyValuePair.1685"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"struct.blink::GlyphOverflow", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %32, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %32, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #11
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %23, i8* %24) #11
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #11
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  br label %31

31:                                               ; preds = %21, %22, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %32

32:                                               ; preds = %10, %2, %31
  %33 = phi i32 [ %14, %31 ], [ 8, %2 ], [ %8, %10 ]
  %34 = zext i32 %33 to i64
  %35 = mul nuw nsw i64 %34, 40
  %36 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([206 x i8], [206 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink13InlineTextBoxENSt3__14pairINS_6VectorIPKNS2_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS2_13GlyphOverflowEEEEEEEPKcv, i64 0, i64 0)) #11
  %37 = bitcast i8* %36 to %"struct.WTF::KeyValuePair.1685"*
  %38 = icmp eq i32 %33, 0
  br i1 %38, label %53, label %39

39:                                               ; preds = %32
  %40 = bitcast %"struct.blink::GlyphOverflow"* %4 to i8*
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %51, %41 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %37, i64 %42
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false)
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %37, i64 %42, i32 1
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %37, i64 %42, i32 1, i32 0, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %37, i64 %42, i32 1, i32 0, i32 0, i32 0, i32 2
  %47 = bitcast %"struct.std::__1::pair.1686"* %44 to i64*
  %48 = bitcast %"struct.WTF::KeyValuePair.1685"* %43 to i64*
  store i64 0, i64* %48, align 8
  store atomic i64 0, i64* %47 monotonic, align 8
  store i32 0, i32* %45, align 4
  store i32 0, i32* %46, align 4
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %37, i64 %42, i32 1, i32 1
  %50 = bitcast %"struct.blink::GlyphOverflow"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* nonnull align 8 %40, i64 16, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40)
  %51 = add nuw nsw i64 %42, 1
  %52 = icmp eq i64 %51, %34
  br i1 %52, label %53, label %41

53:                                               ; preds = %41, %32
  %54 = call %"struct.WTF::KeyValuePair.1685"* @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E8RehashToEPSG_jSQ_(%"class.WTF::HashTable.1682"* %0, %"struct.WTF::KeyValuePair.1685"* %37, i32 %33, %"struct.WTF::KeyValuePair.1685"* %1) #11
  ret %"struct.WTF::KeyValuePair.1685"* %54
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1685"* @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E8RehashToEPSG_jSQ_(%"class.WTF::HashTable.1682"*, %"struct.WTF::KeyValuePair.1685"*, i32, %"struct.WTF::KeyValuePair.1685"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.1682", align 8
  %6 = bitcast %"class.WTF::HashTable.1682"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.1682"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.1685"* %1, %"struct.WTF::KeyValuePair.1685"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.1682"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.1682"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %22 to i64
  br label %66

24:                                               ; preds = %117
  %25 = bitcast %"class.WTF::HashTable.1682"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.1682"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %118, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.1685"* [ null, %16 ], [ %121, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %119, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair.1685"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %62, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %60, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %57, %39
  %42 = phi i64 [ 0, %39 ], [ %58, %57 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %35, i64 %42, i32 0
  %44 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %43, align 8
  %45 = icmp eq %"class.blink::InlineTextBox"* %44, inttoptr (i64 -1 to %"class.blink::InlineTextBox"*)
  br i1 %45, label %57, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %35, i64 %42, i32 1, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %47, align 8
  %49 = icmp eq %"class.blink::SimpleFontData"** %48, null
  %50 = bitcast %"class.blink::SimpleFontData"** %48 to i8*
  br i1 %49, label %57, label %51, !prof !19

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %35, i64 %42, i32 1, i32 0, i32 0, i32 0, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55, !prof !2

55:                                               ; preds = %51
  store i32 0, i32* %52, align 4
  br label %56

56:                                               ; preds = %55, %51
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %50) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %47, align 8
  br label %57

57:                                               ; preds = %56, %46, %41
  %58 = add nuw nsw i64 %42, 1
  %59 = icmp eq i64 %58, %40
  br i1 %59, label %60, label %41

60:                                               ; preds = %57, %37
  %61 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %61) #11
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %62

62:                                               ; preds = %28, %60
  %63 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = and i32 %64, -2147483648
  store i32 %65, i32* %63, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret %"struct.WTF::KeyValuePair.1685"* %33

66:                                               ; preds = %21, %117
  %67 = phi i64 [ %118, %117 ], [ %23, %21 ]
  %68 = phi i32 [ %119, %117 ], [ %13, %21 ]
  %69 = phi %"struct.WTF::KeyValuePair.1685"* [ %120, %117 ], [ %22, %21 ]
  %70 = phi %"struct.WTF::KeyValuePair.1685"* [ %121, %117 ], [ null, %21 ]
  %71 = phi i32 [ %122, %117 ], [ 0, %21 ]
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %69, i64 %72
  %74 = bitcast %"struct.WTF::KeyValuePair.1685"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  switch i64 %75, label %76 [
    i64 -1, label %117
    i64 0, label %117
  ]

76:                                               ; preds = %66
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %73, i64 0, i32 0
  %78 = call { %"struct.WTF::KeyValuePair.1685"*, i8 } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E16LookupForWritingERKS4_(%"class.WTF::HashTable.1682"* nonnull %5, %"class.blink::InlineTextBox"** dereferenceable(8) %77) #11
  %79 = extractvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } %78, 0
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %81 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %80, align 8
  %82 = icmp eq %"class.blink::SimpleFontData"** %81, null
  %83 = bitcast %"class.blink::SimpleFontData"** %81 to i8*
  br i1 %82, label %90, label %84, !prof !19

84:                                               ; preds = %76
  %85 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %89, label %88, !prof !2

88:                                               ; preds = %84
  store i32 0, i32* %85, align 4
  br label %89

89:                                               ; preds = %88, %84
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %83) #11
  store %"class.blink::SimpleFontData"** null, %"class.blink::SimpleFontData"*** %80, align 8
  br label %90

90:                                               ; preds = %76, %89
  %91 = load i64, i64* %74, align 8
  %92 = bitcast %"struct.WTF::KeyValuePair.1685"* %79 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %69, i64 %72, i32 1
  %95 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %97 = bitcast %"struct.std::__1::pair.1686"* %94 to i64*
  %98 = bitcast %"struct.std::__1::pair.1686"* %93 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 16, i1 false) #11
  %99 = load i64, i64* %97, align 8
  %100 = bitcast %"struct.std::__1::pair.1686"* %93 to i64*
  store atomic i64 0, i64* %97 monotonic, align 8
  store atomic i64 %99, i64* %100 monotonic, align 8
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %69, i64 %72, i32 1, i32 0, i32 0, i32 0, i32 1
  %102 = load i32, i32* %95, align 4
  %103 = load i32, i32* %101, align 4
  store i32 %103, i32* %95, align 4
  store i32 %102, i32* %101, align 4
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %69, i64 %72, i32 1, i32 0, i32 0, i32 0, i32 2
  %105 = load i32, i32* %96, align 4
  %106 = load i32, i32* %104, align 4
  store i32 %106, i32* %96, align 4
  store i32 %105, i32* %104, align 4
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %79, i64 0, i32 1, i32 1
  %108 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %69, i64 %72, i32 1, i32 1
  %109 = bitcast %"struct.blink::GlyphOverflow"* %107 to i8*
  %110 = bitcast %"struct.blink::GlyphOverflow"* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #11
  %111 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %15, align 8
  %112 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %111, i64 %72
  %113 = icmp eq %"struct.WTF::KeyValuePair.1685"* %112, %3
  %114 = select i1 %113, %"struct.WTF::KeyValuePair.1685"* %79, %"struct.WTF::KeyValuePair.1685"* %70
  %115 = load i32, i32* %12, align 8
  %116 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %111 to i64
  br label %117

117:                                              ; preds = %66, %66, %90
  %118 = phi i64 [ %67, %66 ], [ %116, %90 ], [ %67, %66 ]
  %119 = phi i32 [ %68, %66 ], [ %115, %90 ], [ %68, %66 ]
  %120 = phi %"struct.WTF::KeyValuePair.1685"* [ %69, %66 ], [ %111, %90 ], [ %69, %66 ]
  %121 = phi %"struct.WTF::KeyValuePair.1685"* [ %70, %66 ], [ %114, %90 ], [ %70, %66 ]
  %122 = add i32 %71, 1
  %123 = icmp eq i32 %122, %119
  br i1 %123, label %24, label %66
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1685"*, i8 } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E16LookupForWritingERKS4_(%"class.WTF::HashTable.1682"*, %"class.blink::InlineTextBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::InlineTextBox"** %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %32, i64 0, i32 0
  %35 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %34, align 8
  %36 = icmp eq %"class.blink::InlineTextBox"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::InlineTextBox"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %68
  %53 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %75 to i64
  %54 = inttoptr i64 %70 to %"struct.WTF::KeyValuePair.1685"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.1685"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.1685"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %80

61:                                               ; preds = %68, %38
  %62 = phi i64 [ 0, %38 ], [ %70, %68 ]
  %63 = phi %"class.blink::InlineTextBox"* [ %35, %38 ], [ %78, %68 ]
  %64 = phi i64 [ %33, %38 ], [ %76, %68 ]
  %65 = phi i64 [ %31, %38 ], [ %74, %68 ]
  %66 = phi i64 [ 0, %38 ], [ %72, %68 ]
  %67 = icmp eq %"class.blink::InlineTextBox"* %63, %37
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = icmp eq %"class.blink::InlineTextBox"* %63, inttoptr (i64 -1 to %"class.blink::InlineTextBox"*)
  %70 = select i1 %69, i64 %64, i64 %62
  %71 = icmp eq i64 %66, 0
  %72 = select i1 %71, i64 %51, i64 %66
  %73 = add i64 %72, %65
  %74 = and i64 %73, %8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %74
  %76 = ptrtoint %"struct.WTF::KeyValuePair.1685"* %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %75, i64 0, i32 0
  %78 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %77, align 8
  %79 = icmp eq %"class.blink::InlineTextBox"* %78, null
  br i1 %79, label %52, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %82 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %83 = inttoptr i64 %81 to %"struct.WTF::KeyValuePair.1685"*
  %84 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } undef, %"struct.WTF::KeyValuePair.1685"* %83, 0
  %85 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, i8 } %84, i8 %82, 1
  ret { %"struct.WTF::KeyValuePair.1685"*, i8 } %85
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::SimpleFontData"** @_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1687"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #11
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* %14, i8* %15) #11
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #11
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #11
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  %23 = getelementptr inbounds %"class.WTF::Vector.1687", %"class.WTF::Vector.1687"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %24, i64 %25
  ret %"class.blink::SimpleFontData"** %26
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

declare { i64, i64 } @_ZN5blink32LineOrientationLayoutRectOutsetsERKNS_17LayoutRectOutsetsENS_11WritingModeE(%"class.blink::LayoutRectOutsets"* dereferenceable(16), i8 zeroext) local_unnamed_addr #3

declare void @_ZN5blink17LayoutRectOutsets19ClampNegativeToZeroEv(%"class.blink::LayoutRectOutsets"*) local_unnamed_addr #3

declare void @_ZN5blink13InlineTextBox22SetLogicalOverflowRectERKNS_10LayoutRectE(%"class.blink::InlineTextBox"*, %"class.blink::LayoutRect"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_(%"class.WTF::HashTable.1682"*, %"class.blink::InlineTextBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.1685"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashTable.1682", %"class.WTF::HashTable.1682"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %70, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = bitcast %"class.blink::InlineTextBox"** %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = shl i64 %12, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %12, %14
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %9, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %34, i64 0, i32 0
  %36 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %35, align 8
  %37 = inttoptr i64 %12 to %"class.blink::InlineTextBox"*
  %38 = icmp eq %"class.blink::InlineTextBox"* %36, %37
  br i1 %38, label %67, label %39

39:                                               ; preds = %8
  %40 = xor i32 %31, -1
  %41 = lshr i32 %31, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %58, %39
  %54 = phi %"class.blink::InlineTextBox"* [ %36, %39 ], [ %65, %58 ]
  %55 = phi i64 [ %33, %39 ], [ %62, %58 ]
  %56 = phi i64 [ 0, %39 ], [ %60, %58 ]
  %57 = icmp eq %"class.blink::InlineTextBox"* %54, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %53
  %59 = icmp eq i64 %56, 0
  %60 = select i1 %59, i64 %52, i64 %56
  %61 = add i64 %60, %55
  %62 = and i64 %61, %10
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %62
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %63, i64 0, i32 0
  %65 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %64, align 8
  %66 = icmp eq %"class.blink::InlineTextBox"* %65, %37
  br i1 %66, label %67, label %53

67:                                               ; preds = %58, %8
  %68 = phi %"struct.WTF::KeyValuePair.1685"* [ %34, %8 ], [ %63, %58 ]
  %69 = icmp eq %"struct.WTF::KeyValuePair.1685"* %68, null
  br i1 %69, label %70, label %73

70:                                               ; preds = %53, %67, %2
  %71 = zext i32 %7 to i64
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %71
  br label %76

73:                                               ; preds = %67
  %74 = zext i32 %7 to i64
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.1685", %"struct.WTF::KeyValuePair.1685"* %4, i64 %74
  br label %76

76:                                               ; preds = %70, %73
  %77 = phi %"struct.WTF::KeyValuePair.1685"* [ %68, %73 ], [ %72, %70 ]
  %78 = phi %"struct.WTF::KeyValuePair.1685"* [ %75, %73 ], [ %72, %70 ]
  %79 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } undef, %"struct.WTF::KeyValuePair.1685"* %77, 0
  %80 = insertvalue { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } %79, %"struct.WTF::KeyValuePair.1685"* %78, 1
  ret { %"struct.WTF::KeyValuePair.1685"*, %"struct.WTF::KeyValuePair.1685"* } %80
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

declare i64 @_ZNK5blink20LayoutBoxModelObject22RelativePositionOffsetEv(%"class.blink::LayoutBoxModelObject"*) local_unnamed_addr #3

declare { i64, i64 } @_ZNK5blink9LayoutBox39LogicalLayoutOverflowRectForPropagationEPNS_12LayoutObjectE(%"class.blink::LayoutBox"*, %"class.blink::LayoutObject"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink12LayoutObject14IsDescendantOfEPKS0_(%"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink12LayoutInline19HitTestCulledInlineERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetEPKNS_14NGInlineCursorE(%"class.blink::LayoutInline"*, %"class.blink::HitTestResult"* dereferenceable(112), %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8), %"class.blink::NGInlineCursor"*) local_unnamed_addr #3

declare %"class.blink::LayoutRubyText"* @_ZNK5blink13LayoutRubyRun8RubyTextEv(%"class.blink::LayoutRubyRun"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind readnone }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!6 = distinct !{!6, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!9 = distinct !{!9, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!12 = distinct !{!12, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!15 = distinct !{!15, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZNSt3__19make_pairIN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS1_18PartitionAllocatorEEENS3_13GlyphOverflowEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_: argument 0"}
!18 = distinct !{!18, !"_ZNSt3__19make_pairIN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS1_18PartitionAllocatorEEENS3_13GlyphOverflowEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_"}
!19 = !{!"branch_weights", i32 2000, i32 1}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNSt3__19make_pairIN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS1_18PartitionAllocatorEEENS3_13GlyphOverflowEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_: argument 0"}
!22 = distinct !{!22, !"_ZNSt3__19make_pairIN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS1_18PartitionAllocatorEEENS3_13GlyphOverflowEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSB_IT0_E4typeEEEOSC_OSF_"}
!23 = !{!"branch_weights", i32 4001, i32 4000000}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!26 = distinct !{!26, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!29 = distinct !{!29, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!32 = distinct !{!32, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!35 = distinct !{!35, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!38 = distinct !{!38, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!41 = distinct !{!41, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!44 = distinct !{!44, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv: argument 0"}
!47 = distinct !{!47, !"_ZNK5blink20LayoutBoxModelObject24PhysicalPaddingToLogicalEv"}
