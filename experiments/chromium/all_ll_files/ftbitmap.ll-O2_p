; ModuleID = '../../third_party/freetype/src/src/base/ftbitmap.c'
source_filename = "../../third_party/freetype/src/src/base/ftbitmap.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_LibraryRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i32, [32 x %struct.FT_ModuleRec_*], %struct.FT_ListRec_, %struct.FT_RendererRec_*, %struct.FT_ModuleRec_*, [4 x i32 (i8*)*], [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_RendererRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Renderer_Class_*, i32, %struct.FT_Glyph_Class_, %struct.FT_RasterRec_*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)* }
%struct.FT_ModuleRec_ = type { %struct.FT_Module_Class_*, %struct.FT_LibraryRec_*, %struct.FT_MemoryRec_* }
%struct.FT_Module_Class_ = type { i64, i64, i8*, i64, i64, i8*, i32 (%struct.FT_ModuleRec_*)*, void (%struct.FT_ModuleRec_*)*, i8* (%struct.FT_ModuleRec_*, i8*)* }
%struct.FT_Renderer_Class_ = type { %struct.FT_Module_Class_, i32, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_RendererRec_*, i64, i8*)*, %struct.FT_Raster_Funcs_* }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type { i8*, i32, %struct.FT_Size_Metrics_ }
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Driver_ClassRec_*, %struct.FT_ListRec_, %struct.FT_GlyphLoaderRec_* }
%struct.FT_Driver_ClassRec_ = type { %struct.FT_Module_Class_, i64, i64, i64, i32 (%struct.FT_StreamRec_*, %struct.FT_FaceRec_*, i32, i32, %struct.FT_Parameter_*)*, void (%struct.FT_FaceRec_*)*, i32 (%struct.FT_SizeRec_*)*, void (%struct.FT_SizeRec_*)*, i32 (%struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphSlotRec_*)*, i32 (%struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, i32, i32)*, i32 (%struct.FT_FaceRec_*, i32, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_FaceRec_*, %struct.FT_StreamRec_*)*, i32 (%struct.FT_FaceRec_*, i32, i32, i32, i64*)*, i32 (%struct.FT_SizeRec_*, %struct.FT_Size_RequestRec_*)*, i32 (%struct.FT_SizeRec_*, i64)* }
%struct.FT_Parameter_ = type { i64, i8* }
%struct.FT_Size_RequestRec_ = type { i32, i64, i64, i32, i32 }
%struct.FT_GlyphLoaderRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i8, %struct.FT_GlyphLoadRec_, %struct.FT_GlyphLoadRec_, i8* }
%struct.FT_GlyphLoadRec_ = type { %struct.FT_Outline_, %struct.FT_Vector_*, %struct.FT_Vector_*, i32, %struct.FT_SubGlyphRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_Face_InternalRec_ = type { %struct.FT_Matrix_, %struct.FT_Vector_, i32, %struct.FT_ServiceCacheRec_, %struct.FT_Incremental_InterfaceRec_*, i8, i32, [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_Matrix_ = type { i64, i64, i64, i64 }
%struct.FT_ServiceCacheRec_ = type { i8*, i8*, i8*, i8*, i8*, i8* }
%struct.FT_Incremental_InterfaceRec_ = type { %struct.FT_Incremental_FuncsRec_*, %struct.FT_IncrementalRec_* }
%struct.FT_Incremental_FuncsRec_ = type { i32 (%struct.FT_IncrementalRec_*, i32, %struct.FT_Data_*)*, void (%struct.FT_IncrementalRec_*, %struct.FT_Data_*)*, i32 (%struct.FT_IncrementalRec_*, i32, i8, %struct.FT_Incremental_MetricsRec_*)* }
%struct.FT_Data_ = type { i8*, i32 }
%struct.FT_Incremental_MetricsRec_ = type { i64, i64, i64, i64 }
%struct.FT_IncrementalRec_ = type opaque
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type { i32, i16, i32, i32, %struct.FT_Matrix_ }
%struct.FT_Slot_InternalRec_ = type { %struct.FT_GlyphLoaderRec_*, i32, i8, %struct.FT_Matrix_, %struct.FT_Vector_, i8*, i32 }
%struct.FT_Raster_Funcs_ = type { i32, i32 (i8*, %struct.FT_RasterRec_**)*, void (%struct.FT_RasterRec_*, i8*, i64)*, i32 (%struct.FT_RasterRec_*, i64, i8*)*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, void (%struct.FT_RasterRec_*)* }
%struct.FT_Glyph_Class_ = type { i64, i32, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphRec_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphRec_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)* }
%struct.FT_GlyphRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_Glyph_Class_*, i32, %struct.FT_Vector_ }
%struct.FT_RasterRec_ = type opaque
%struct.FT_Raster_Params_ = type { %struct.FT_Bitmap_*, i8*, i32, void (i32, i32, %struct.FT_Span_*, i8*)*, void (i32, i32, %struct.FT_Span_*, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i8*)*, i8*, %struct.FT_BBox_ }
%struct.FT_Span_ = type { i16, i16, i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @FT_Bitmap_Init(%struct.FT_Bitmap_*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.FT_Bitmap_* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.FT_Bitmap_* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 40, i1 false)
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @FT_Bitmap_New(%struct.FT_Bitmap_*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.FT_Bitmap_* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %struct.FT_Bitmap_* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 40, i1 false)
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Bitmap_Copy(%struct.FT_LibraryRec_* readonly, %struct.FT_Bitmap_* readonly, %struct.FT_Bitmap_*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #3
  store i32 0, i32* %4, align 4
  %6 = icmp eq %struct.FT_LibraryRec_* %0, null
  br i1 %6, label %113, label %7

7:                                                ; preds = %3
  %8 = icmp ne %struct.FT_Bitmap_* %1, null
  %9 = icmp ne %struct.FT_Bitmap_* %2, null
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %113

11:                                               ; preds = %7
  %12 = icmp eq %struct.FT_Bitmap_* %1, %2
  br i1 %12, label %113, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %15, 0
  %17 = select i1 %16, i32 -1, i32 1
  %18 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %19, 0
  %21 = select i1 %20, i32 -1, i32 1
  %22 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %32

25:                                               ; preds = %13
  %26 = bitcast %struct.FT_Bitmap_* %2 to i8*
  %27 = bitcast %struct.FT_Bitmap_* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %27, i64 40, i1 false)
  %28 = icmp eq i32 %17, %21
  br i1 %28, label %113, label %29

29:                                               ; preds = %25
  %30 = load i32, i32* %18, align 8
  %31 = sub nsw i32 0, %30
  store i32 %31, i32* %18, align 8
  br label %113

32:                                               ; preds = %13
  %33 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %34 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %33, align 8
  %35 = sub nsw i32 0, %15
  %36 = select i1 %16, i32 %35, i32 %15
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = mul nuw nsw i64 %40, %37
  %42 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 3
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %56, label %45

45:                                               ; preds = %32
  %46 = sub nsw i32 0, %19
  %47 = select i1 %20, i32 %46, i32 %19
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = zext i32 %50 to i64
  %52 = mul nuw nsw i64 %51, %48
  %53 = icmp eq i64 %52, %41
  br i1 %53, label %60, label %54

54:                                               ; preds = %45
  %55 = call i8* @ft_mem_qrealloc(%struct.FT_MemoryRec_* %34, i64 1, i64 %52, i64 %41, i8* nonnull %43, i32* nonnull %4) #3
  br label %58

56:                                               ; preds = %32
  %57 = call i8* @ft_mem_qalloc(%struct.FT_MemoryRec_* %34, i64 %41, i32* nonnull %4) #3
  br label %58

58:                                               ; preds = %56, %54
  %59 = phi i8* [ %55, %54 ], [ %57, %56 ]
  store i8* %59, i8** %42, align 8
  br label %60

60:                                               ; preds = %58, %45
  %61 = phi i8* [ %43, %45 ], [ %59, %58 ]
  %62 = load i32, i32* %4, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %111

64:                                               ; preds = %60
  %65 = bitcast %struct.FT_Bitmap_* %2 to i8*
  %66 = bitcast %struct.FT_Bitmap_* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* nonnull align 8 %66, i64 40, i1 false)
  store i8* %61, i8** %42, align 8
  %67 = icmp eq i32 %17, %21
  %68 = load i8*, i8** %22, align 8
  br i1 %67, label %69, label %70

69:                                               ; preds = %64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %68, i64 %41, i1 false)
  br label %111

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %111, label %74

74:                                               ; preds = %70
  %75 = add i32 %72, -1
  %76 = zext i32 %75 to i64
  %77 = mul nuw nsw i64 %76, %37
  %78 = getelementptr inbounds i8, i8* %61, i64 %77
  %79 = sub nsw i64 0, %37
  %80 = and i32 %72, 3
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %74, %82
  %83 = phi i8* [ %88, %82 ], [ %78, %74 ]
  %84 = phi i8* [ %87, %82 ], [ %68, %74 ]
  %85 = phi i32 [ %89, %82 ], [ %72, %74 ]
  %86 = phi i32 [ %90, %82 ], [ %80, %74 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %83, i8* align 1 %84, i64 %37, i1 false)
  %87 = getelementptr inbounds i8, i8* %84, i64 %37
  %88 = getelementptr inbounds i8, i8* %83, i64 %79
  %89 = add i32 %85, -1
  %90 = add i32 %86, -1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %82, !llvm.loop !2

92:                                               ; preds = %82, %74
  %93 = phi i8* [ %78, %74 ], [ %88, %82 ]
  %94 = phi i8* [ %68, %74 ], [ %87, %82 ]
  %95 = phi i32 [ %72, %74 ], [ %89, %82 ]
  %96 = icmp ult i32 %75, 3
  br i1 %96, label %111, label %97

97:                                               ; preds = %92, %97
  %98 = phi i8* [ %108, %97 ], [ %93, %92 ]
  %99 = phi i8* [ %107, %97 ], [ %94, %92 ]
  %100 = phi i32 [ %109, %97 ], [ %95, %92 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %98, i8* align 1 %99, i64 %37, i1 false)
  %101 = getelementptr inbounds i8, i8* %99, i64 %37
  %102 = getelementptr inbounds i8, i8* %98, i64 %79
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %102, i8* align 1 %101, i64 %37, i1 false)
  %103 = getelementptr inbounds i8, i8* %101, i64 %37
  %104 = getelementptr inbounds i8, i8* %102, i64 %79
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %103, i64 %37, i1 false)
  %105 = getelementptr inbounds i8, i8* %103, i64 %37
  %106 = getelementptr inbounds i8, i8* %104, i64 %79
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %105, i64 %37, i1 false)
  %107 = getelementptr inbounds i8, i8* %105, i64 %37
  %108 = getelementptr inbounds i8, i8* %106, i64 %79
  %109 = add i32 %100, -4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %97

111:                                              ; preds = %92, %97, %70, %69, %60
  %112 = load i32, i32* %4, align 4
  br label %113

113:                                              ; preds = %29, %25, %11, %7, %3, %111
  %114 = phi i32 [ %112, %111 ], [ 33, %3 ], [ 6, %7 ], [ 0, %11 ], [ 0, %25 ], [ 0, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #3
  ret i32 %114
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare hidden i8* @ft_mem_qrealloc(%struct.FT_MemoryRec_*, i64, i64, i64, i8*, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare hidden i8* @ft_mem_qalloc(%struct.FT_MemoryRec_*, i64, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Bitmap_Embolden(%struct.FT_LibraryRec_* readonly, %struct.FT_Bitmap_*, i64, i64) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.FT_Bitmap_, align 8
  %7 = icmp eq %struct.FT_LibraryRec_* %0, null
  br i1 %7, label %460, label %8

8:                                                ; preds = %4
  %9 = icmp eq %struct.FT_Bitmap_* %1, null
  br i1 %9, label %460, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %460, label %14

14:                                               ; preds = %10
  %15 = add nsw i64 %2, 32
  %16 = icmp sgt i64 %15, 137438953471
  br i1 %16, label %460, label %17

17:                                               ; preds = %14
  %18 = add nsw i64 %3, 32
  %19 = icmp sgt i64 %18, 137438953471
  br i1 %19, label %460, label %20

20:                                               ; preds = %17
  %21 = trunc i64 %15 to i32
  %22 = ashr i32 %21, 6
  %23 = trunc i64 %18 to i32
  %24 = ashr i32 %23, 6
  %25 = or i32 %24, %22
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %460, label %27

27:                                               ; preds = %20
  %28 = or i64 %18, %15
  %29 = trunc i64 %28 to i32
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %460, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 5
  %33 = load i8, i8* %32, align 2
  switch i8 %33, label %52 [
    i8 3, label %34
    i8 4, label %34
    i8 1, label %45
    i8 5, label %48
    i8 6, label %50
    i8 7, label %460
  ]

34:                                               ; preds = %31, %31
  %35 = bitcast %struct.FT_Bitmap_* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %35) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 40, i1 false) #3
  %36 = call i32 @FT_Bitmap_Convert(%struct.FT_LibraryRec_* nonnull %0, %struct.FT_Bitmap_* nonnull %1, %struct.FT_Bitmap_* nonnull %6, i32 1)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %40 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %39, align 8
  %41 = load i8*, i8** %11, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %40, i8* %41) #3
  %42 = bitcast %struct.FT_Bitmap_* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %42, i8* nonnull align 8 %35, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %35) #3
  %43 = load i8, i8* %32, align 2
  br label %52

44:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %35) #3
  br label %460

45:                                               ; preds = %31
  %46 = icmp sgt i32 %21, 575
  %47 = select i1 %46, i32 8, i32 %22
  br label %52

48:                                               ; preds = %31
  %49 = mul nsw i32 %22, 3
  br label %52

50:                                               ; preds = %31
  %51 = mul nsw i32 %24, 3
  br label %52

52:                                               ; preds = %45, %38, %31, %50, %48
  %53 = phi i8 [ %33, %31 ], [ 6, %50 ], [ 5, %48 ], [ %43, %38 ], [ 1, %45 ]
  %54 = phi i32 [ %22, %31 ], [ %22, %50 ], [ %49, %48 ], [ %22, %38 ], [ %47, %45 ]
  %55 = phi i32 [ %24, %31 ], [ %51, %50 ], [ %24, %48 ], [ %24, %38 ], [ %24, %45 ]
  %56 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %57 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %56, align 8
  %58 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #3
  store i32 -1431655766, i32* %5, align 4
  %59 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp slt i32 %64, 0
  %66 = sub nsw i32 0, %64
  %67 = select i1 %65, i32 %66, i32 %64
  switch i8 %53, label %205 [
    i8 1, label %68
    i8 3, label %72
    i8 4, label %76
    i8 2, label %80
    i8 5, label %80
    i8 6, label %80
  ]

68:                                               ; preds = %52
  %69 = add i32 %60, %54
  %70 = add i32 %69, 7
  %71 = lshr i32 %70, 3
  br label %82

72:                                               ; preds = %52
  %73 = add i32 %60, %54
  %74 = add i32 %73, 3
  %75 = lshr i32 %74, 2
  br label %82

76:                                               ; preds = %52
  %77 = add i32 %60, %54
  %78 = add i32 %77, 1
  %79 = lshr i32 %78, 1
  br label %82

80:                                               ; preds = %52, %52, %52
  %81 = add i32 %60, %54
  br label %82

82:                                               ; preds = %80, %76, %72, %68
  %83 = phi i32 [ %81, %80 ], [ %79, %76 ], [ %75, %72 ], [ %71, %68 ]
  %84 = phi i32 [ 8, %80 ], [ 4, %76 ], [ 2, %72 ], [ 1, %68 ]
  %85 = icmp ne i32 %55, 0
  %86 = icmp ugt i32 %83, %67
  %87 = or i1 %85, %86
  br i1 %87, label %147, label %88

88:                                               ; preds = %82
  %89 = shl i32 %67, 3
  %90 = add i32 %60, %54
  %91 = mul i32 %84, %90
  %92 = icmp ult i32 %91, %89
  br i1 %92, label %93, label %209

93:                                               ; preds = %88
  %94 = load i8*, i8** %11, align 8
  %95 = zext i32 %67 to i64
  %96 = and i32 %91, 7
  %97 = icmp eq i32 %62, 0
  br i1 %97, label %209, label %98

98:                                               ; preds = %93
  %99 = lshr i32 65280, %96
  %100 = lshr i32 %91, 3
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %94, i64 %101
  %103 = icmp eq i32 %96, 0
  %104 = trunc i32 %99 to i8
  %105 = and i32 %62, 1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %123, label %107

107:                                              ; preds = %98
  %108 = getelementptr inbounds i8, i8* %94, i64 %95
  br i1 %103, label %113, label %109

109:                                              ; preds = %107
  %110 = load i8, i8* %102, align 1
  %111 = and i8 %110, %104
  store i8 %111, i8* %102, align 1
  %112 = getelementptr inbounds i8, i8* %102, i64 1
  br label %113

113:                                              ; preds = %109, %107
  %114 = phi i8* [ %112, %109 ], [ %102, %107 ]
  %115 = icmp ult i8* %114, %108
  br i1 %115, label %116, label %120

116:                                              ; preds = %113
  %117 = ptrtoint i8* %108 to i64
  %118 = ptrtoint i8* %114 to i64
  %119 = sub i64 %117, %118
  call void @llvm.memset.p0i8.i64(i8* align 1 %114, i8 0, i64 %119, i1 false) #3
  br label %120

120:                                              ; preds = %116, %113
  %121 = add i32 %62, -1
  %122 = getelementptr inbounds i8, i8* %102, i64 %95
  br label %123

123:                                              ; preds = %98, %120
  %124 = phi i8* [ %94, %98 ], [ %108, %120 ]
  %125 = phi i32 [ %62, %98 ], [ %121, %120 ]
  %126 = phi i8* [ %102, %98 ], [ %122, %120 ]
  %127 = icmp eq i32 %62, 1
  br i1 %127, label %207, label %128

128:                                              ; preds = %123, %473
  %129 = phi i8* [ %146, %473 ], [ %124, %123 ]
  %130 = phi i32 [ %474, %473 ], [ %125, %123 ]
  %131 = phi i8* [ %475, %473 ], [ %126, %123 ]
  %132 = getelementptr inbounds i8, i8* %129, i64 %95
  br i1 %103, label %137, label %133

133:                                              ; preds = %128
  %134 = load i8, i8* %131, align 1
  %135 = and i8 %134, %104
  store i8 %135, i8* %131, align 1
  %136 = getelementptr inbounds i8, i8* %131, i64 1
  br label %137

137:                                              ; preds = %133, %128
  %138 = phi i8* [ %136, %133 ], [ %131, %128 ]
  %139 = icmp ult i8* %138, %132
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = ptrtoint i8* %132 to i64
  %142 = ptrtoint i8* %138 to i64
  %143 = sub i64 %141, %142
  call void @llvm.memset.p0i8.i64(i8* align 1 %138, i8 0, i64 %143, i1 false) #3
  br label %144

144:                                              ; preds = %140, %137
  %145 = getelementptr inbounds i8, i8* %131, i64 %95
  %146 = getelementptr inbounds i8, i8* %132, i64 %95
  br i1 %103, label %466, label %462

147:                                              ; preds = %82
  %148 = zext i32 %83 to i64
  %149 = add i32 %62, %55
  %150 = zext i32 %149 to i64
  %151 = call i8* @ft_mem_qrealloc(%struct.FT_MemoryRec_* %57, i64 %148, i64 0, i64 %150, i8* null, i32* nonnull %5) #3
  %152 = load i32, i32* %5, align 4
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %205

154:                                              ; preds = %147
  %155 = load i32, i32* %63, align 8
  %156 = icmp sgt i32 %155, 0
  %157 = mul i32 %84, %60
  %158 = add i32 %157, 7
  %159 = lshr i32 %158, 3
  %160 = load i8*, i8** %11, align 8
  %161 = load i32, i32* %61, align 8
  %162 = mul i32 %161, %67
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %160, i64 %163
  %165 = sub i32 %83, %159
  br i1 %156, label %172, label %166

166:                                              ; preds = %154
  %167 = icmp eq i32 %162, 0
  br i1 %167, label %195, label %168

168:                                              ; preds = %166
  %169 = zext i32 %159 to i64
  %170 = zext i32 %67 to i64
  %171 = zext i32 %165 to i64
  br label %188

172:                                              ; preds = %154
  %173 = mul i32 %83, %55
  %174 = zext i32 %173 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %151, i8 0, i64 %174, i1 false) #3
  %175 = icmp eq i32 %162, 0
  br i1 %175, label %199, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, i8* %151, i64 %174
  %178 = zext i32 %159 to i64
  %179 = zext i32 %67 to i64
  %180 = zext i32 %165 to i64
  br label %181

181:                                              ; preds = %181, %176
  %182 = phi i8* [ %177, %176 ], [ %186, %181 ]
  %183 = phi i8* [ %160, %176 ], [ %184, %181 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %182, i8* align 1 %183, i64 %178, i1 false) #3
  %184 = getelementptr inbounds i8, i8* %183, i64 %179
  %185 = getelementptr inbounds i8, i8* %182, i64 %178
  call void @llvm.memset.p0i8.i64(i8* align 1 %185, i8 0, i64 %180, i1 false) #3
  %186 = getelementptr inbounds i8, i8* %185, i64 %180
  %187 = icmp ult i8* %184, %164
  br i1 %187, label %181, label %199

188:                                              ; preds = %188, %168
  %189 = phi i8* [ %151, %168 ], [ %193, %188 ]
  %190 = phi i8* [ %160, %168 ], [ %191, %188 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %189, i8* align 1 %190, i64 %169, i1 false) #3
  %191 = getelementptr inbounds i8, i8* %190, i64 %170
  %192 = getelementptr inbounds i8, i8* %189, i64 %169
  call void @llvm.memset.p0i8.i64(i8* align 1 %192, i8 0, i64 %171, i1 false) #3
  %193 = getelementptr inbounds i8, i8* %192, i64 %171
  %194 = icmp ult i8* %191, %164
  br i1 %194, label %188, label %195

195:                                              ; preds = %188, %166
  %196 = phi i8* [ %151, %166 ], [ %193, %188 ]
  %197 = mul i32 %83, %55
  %198 = zext i32 %197 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %196, i8 0, i64 %198, i1 false) #3
  br label %199

199:                                              ; preds = %181, %195, %172
  %200 = load i8*, i8** %11, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %57, i8* %200) #3
  store i8* %151, i8** %11, align 8
  %201 = load i32, i32* %63, align 8
  %202 = icmp slt i32 %201, 0
  %203 = sub nsw i32 0, %83
  %204 = select i1 %202, i32 %203, i32 %83
  store i32 %204, i32* %63, align 8
  br label %209

205:                                              ; preds = %52, %147
  %206 = phi i32 [ 18, %52 ], [ %152, %147 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #3
  br label %460

207:                                              ; preds = %473, %123
  %208 = load i32, i32* %63, align 8
  br label %209

209:                                              ; preds = %88, %93, %207, %199
  %210 = phi i32 [ %204, %199 ], [ %208, %207 ], [ %64, %93 ], [ %64, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #3
  %211 = icmp sgt i32 %210, 0
  br i1 %211, label %212, label %218

212:                                              ; preds = %209
  %213 = load i8*, i8** %11, align 8
  %214 = mul nsw i32 %210, %55
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i8, i8* %213, i64 %215
  %217 = load i32, i32* %61, align 8
  br label %226

218:                                              ; preds = %209
  %219 = sub nsw i32 0, %210
  %220 = load i8*, i8** %11, align 8
  %221 = load i32, i32* %61, align 8
  %222 = add i32 %221, -1
  %223 = mul i32 %222, %219
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %220, i64 %224
  br label %226

226:                                              ; preds = %218, %212
  %227 = phi i32 [ %217, %212 ], [ %221, %218 ]
  %228 = phi i8* [ %216, %212 ], [ %225, %218 ]
  %229 = phi i32 [ %210, %212 ], [ %219, %218 ]
  %230 = icmp eq i32 %227, 0
  br i1 %230, label %455, label %231

231:                                              ; preds = %226
  %232 = icmp sgt i32 %229, 0
  %233 = icmp slt i32 %54, 1
  %234 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 4
  %235 = icmp slt i32 %55, 1
  %236 = add nsw i32 %54, 1
  %237 = sext i32 %229 to i64
  %238 = zext i32 %236 to i64
  %239 = zext i32 %229 to i64
  %240 = and i64 %239, 4294967264
  %241 = add nsw i64 %240, -32
  %242 = lshr exact i64 %241, 5
  %243 = add nuw nsw i64 %242, 1
  %244 = icmp ult i32 %229, 32
  %245 = and i64 %239, 4294967264
  %246 = and i64 %243, 1
  %247 = icmp eq i64 %241, 0
  %248 = sub nuw nsw i64 %243, %246
  %249 = icmp eq i64 %246, 0
  %250 = icmp eq i64 %245, %239
  %251 = and i64 %239, 3
  %252 = icmp eq i64 %251, 0
  br label %253

253:                                              ; preds = %231, %447
  %254 = phi i32 [ %210, %231 ], [ %448, %447 ]
  %255 = phi i32 [ %210, %231 ], [ %449, %447 ]
  %256 = phi i32 [ 0, %231 ], [ %452, %447 ]
  %257 = phi i8* [ %228, %231 ], [ %451, %447 ]
  br i1 %232, label %266, label %260

258:                                              ; preds = %320
  %259 = load i32, i32* %63, align 8
  br label %260

260:                                              ; preds = %258, %253
  %261 = phi i32 [ %259, %258 ], [ %254, %253 ]
  %262 = phi i32 [ %259, %258 ], [ %255, %253 ]
  br i1 %235, label %447, label %263

263:                                              ; preds = %260
  %264 = getelementptr i8, i8* %257, i64 %239
  %265 = getelementptr i8, i8* %257, i64 %239
  br label %322

266:                                              ; preds = %253, %320
  %267 = phi i64 [ %268, %320 ], [ %237, %253 ]
  %268 = add nsw i64 %267, -1
  %269 = getelementptr inbounds i8, i8* %257, i64 %268
  br i1 %233, label %320, label %270

270:                                              ; preds = %266
  %271 = load i8, i8* %269, align 1
  %272 = zext i8 %271 to i32
  %273 = icmp sgt i64 %268, 0
  %274 = add nsw i64 %267, -2
  %275 = getelementptr inbounds i8, i8* %257, i64 %274
  br label %276

276:                                              ; preds = %316, %270
  %277 = phi i8 [ %317, %316 ], [ %271, %270 ]
  %278 = phi i64 [ %318, %316 ], [ 1, %270 ]
  %279 = load i8, i8* %32, align 2
  %280 = icmp eq i8 %279, 1
  br i1 %280, label %281, label %294

281:                                              ; preds = %276
  %282 = trunc i64 %278 to i32
  %283 = lshr i32 %272, %282
  %284 = trunc i32 %283 to i8
  %285 = or i8 %277, %284
  store i8 %285, i8* %269, align 1
  br i1 %273, label %286, label %316

286:                                              ; preds = %281
  %287 = load i8, i8* %275, align 1
  %288 = zext i8 %287 to i32
  %289 = trunc i64 %278 to i32
  %290 = sub i32 8, %289
  %291 = shl i32 %288, %290
  %292 = trunc i32 %291 to i8
  %293 = or i8 %285, %292
  store i8 %293, i8* %269, align 1
  br label %316

294:                                              ; preds = %276
  %295 = sub nsw i64 %268, %278
  %296 = icmp sgt i64 %295, -1
  br i1 %296, label %297, label %320

297:                                              ; preds = %294
  %298 = zext i8 %277 to i32
  %299 = getelementptr inbounds i8, i8* %257, i64 %295
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = add nuw nsw i32 %301, %298
  %303 = load i16, i16* %234, align 8
  %304 = zext i16 %303 to i32
  %305 = icmp ult i32 %302, %304
  br i1 %305, label %309, label %306

306:                                              ; preds = %297
  %307 = trunc i16 %303 to i8
  %308 = add i8 %307, -1
  store i8 %308, i8* %269, align 1
  br label %320

309:                                              ; preds = %297
  %310 = trunc i32 %302 to i8
  store i8 %310, i8* %269, align 1
  %311 = and i32 %302, 255
  %312 = load i16, i16* %234, align 8
  %313 = zext i16 %312 to i32
  %314 = add nsw i32 %313, -1
  %315 = icmp eq i32 %311, %314
  br i1 %315, label %320, label %316

316:                                              ; preds = %286, %281, %309
  %317 = phi i8 [ %293, %286 ], [ %285, %281 ], [ %310, %309 ]
  %318 = add nuw nsw i64 %278, 1
  %319 = icmp eq i64 %318, %238
  br i1 %319, label %320, label %276

320:                                              ; preds = %309, %294, %316, %266, %306
  %321 = icmp sgt i64 %268, 0
  br i1 %321, label %266, label %258

322:                                              ; preds = %263, %443
  %323 = phi i32 [ %444, %443 ], [ %261, %263 ]
  %324 = phi i32 [ %444, %443 ], [ %262, %263 ]
  %325 = phi i32 [ %445, %443 ], [ 1, %263 ]
  %326 = mul nsw i32 %324, %325
  %327 = sext i32 %326 to i64
  %328 = sub nsw i64 0, %327
  %329 = getelementptr inbounds i8, i8* %257, i64 %328
  br i1 %232, label %330, label %443

330:                                              ; preds = %322
  br i1 %244, label %396, label %331

331:                                              ; preds = %330
  %332 = getelementptr i8, i8* %264, i64 %328
  %333 = icmp ult i8* %329, %265
  %334 = icmp ult i8* %257, %332
  %335 = and i1 %333, %334
  br i1 %335, label %396, label %336

336:                                              ; preds = %331
  br i1 %247, label %376, label %337

337:                                              ; preds = %336, %337
  %338 = phi i64 [ %373, %337 ], [ 0, %336 ]
  %339 = phi i64 [ %374, %337 ], [ %248, %336 ]
  %340 = getelementptr inbounds i8, i8* %257, i64 %338
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !4
  %343 = getelementptr inbounds i8, i8* %340, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !4
  %346 = getelementptr inbounds i8, i8* %329, i64 %338
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !7, !noalias !4
  %349 = getelementptr inbounds i8, i8* %346, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1, !alias.scope !7, !noalias !4
  %352 = or <16 x i8> %348, %342
  %353 = or <16 x i8> %351, %345
  %354 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %352, <16 x i8>* %354, align 1, !alias.scope !7, !noalias !4
  %355 = bitcast i8* %349 to <16 x i8>*
  store <16 x i8> %353, <16 x i8>* %355, align 1, !alias.scope !7, !noalias !4
  %356 = or i64 %338, 32
  %357 = getelementptr inbounds i8, i8* %257, i64 %356
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !4
  %360 = getelementptr inbounds i8, i8* %357, i64 16
  %361 = bitcast i8* %360 to <16 x i8>*
  %362 = load <16 x i8>, <16 x i8>* %361, align 1, !alias.scope !4
  %363 = getelementptr inbounds i8, i8* %329, i64 %356
  %364 = bitcast i8* %363 to <16 x i8>*
  %365 = load <16 x i8>, <16 x i8>* %364, align 1, !alias.scope !7, !noalias !4
  %366 = getelementptr inbounds i8, i8* %363, i64 16
  %367 = bitcast i8* %366 to <16 x i8>*
  %368 = load <16 x i8>, <16 x i8>* %367, align 1, !alias.scope !7, !noalias !4
  %369 = or <16 x i8> %365, %359
  %370 = or <16 x i8> %368, %362
  %371 = bitcast i8* %363 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %371, align 1, !alias.scope !7, !noalias !4
  %372 = bitcast i8* %366 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %372, align 1, !alias.scope !7, !noalias !4
  %373 = add i64 %338, 64
  %374 = add i64 %339, -2
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %376, label %337, !llvm.loop !9

376:                                              ; preds = %337, %336
  %377 = phi i64 [ 0, %336 ], [ %373, %337 ]
  br i1 %249, label %395, label %378

378:                                              ; preds = %376
  %379 = getelementptr inbounds i8, i8* %257, i64 %377
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1, !alias.scope !4
  %382 = getelementptr inbounds i8, i8* %379, i64 16
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1, !alias.scope !4
  %385 = getelementptr inbounds i8, i8* %329, i64 %377
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !alias.scope !7, !noalias !4
  %388 = getelementptr inbounds i8, i8* %385, i64 16
  %389 = bitcast i8* %388 to <16 x i8>*
  %390 = load <16 x i8>, <16 x i8>* %389, align 1, !alias.scope !7, !noalias !4
  %391 = or <16 x i8> %387, %381
  %392 = or <16 x i8> %390, %384
  %393 = bitcast i8* %385 to <16 x i8>*
  store <16 x i8> %391, <16 x i8>* %393, align 1, !alias.scope !7, !noalias !4
  %394 = bitcast i8* %388 to <16 x i8>*
  store <16 x i8> %392, <16 x i8>* %394, align 1, !alias.scope !7, !noalias !4
  br label %395

395:                                              ; preds = %376, %378
  br i1 %250, label %441, label %396

396:                                              ; preds = %395, %331, %330
  %397 = phi i64 [ 0, %331 ], [ 0, %330 ], [ %245, %395 ]
  %398 = xor i64 %397, -1
  %399 = add nsw i64 %398, %239
  br i1 %252, label %411, label %400

400:                                              ; preds = %396, %400
  %401 = phi i64 [ %408, %400 ], [ %397, %396 ]
  %402 = phi i64 [ %409, %400 ], [ %251, %396 ]
  %403 = getelementptr inbounds i8, i8* %257, i64 %401
  %404 = load i8, i8* %403, align 1
  %405 = getelementptr inbounds i8, i8* %329, i64 %401
  %406 = load i8, i8* %405, align 1
  %407 = or i8 %406, %404
  store i8 %407, i8* %405, align 1
  %408 = add nuw nsw i64 %401, 1
  %409 = add i64 %402, -1
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %411, label %400, !llvm.loop !11

411:                                              ; preds = %400, %396
  %412 = phi i64 [ %397, %396 ], [ %408, %400 ]
  %413 = icmp ult i64 %399, 3
  br i1 %413, label %441, label %414

414:                                              ; preds = %411, %414
  %415 = phi i64 [ %439, %414 ], [ %412, %411 ]
  %416 = getelementptr inbounds i8, i8* %257, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = getelementptr inbounds i8, i8* %329, i64 %415
  %419 = load i8, i8* %418, align 1
  %420 = or i8 %419, %417
  store i8 %420, i8* %418, align 1
  %421 = add nuw nsw i64 %415, 1
  %422 = getelementptr inbounds i8, i8* %257, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = getelementptr inbounds i8, i8* %329, i64 %421
  %425 = load i8, i8* %424, align 1
  %426 = or i8 %425, %423
  store i8 %426, i8* %424, align 1
  %427 = add nuw nsw i64 %415, 2
  %428 = getelementptr inbounds i8, i8* %257, i64 %427
  %429 = load i8, i8* %428, align 1
  %430 = getelementptr inbounds i8, i8* %329, i64 %427
  %431 = load i8, i8* %430, align 1
  %432 = or i8 %431, %429
  store i8 %432, i8* %430, align 1
  %433 = add nuw nsw i64 %415, 3
  %434 = getelementptr inbounds i8, i8* %257, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = getelementptr inbounds i8, i8* %329, i64 %433
  %437 = load i8, i8* %436, align 1
  %438 = or i8 %437, %435
  store i8 %438, i8* %436, align 1
  %439 = add nuw nsw i64 %415, 4
  %440 = icmp eq i64 %439, %239
  br i1 %440, label %441, label %414, !llvm.loop !12

441:                                              ; preds = %411, %414, %395
  %442 = load i32, i32* %63, align 8
  br label %443

443:                                              ; preds = %441, %322
  %444 = phi i32 [ %442, %441 ], [ %323, %322 ]
  %445 = add nuw nsw i32 %325, 1
  %446 = icmp eq i32 %325, %55
  br i1 %446, label %447, label %322

447:                                              ; preds = %443, %260
  %448 = phi i32 [ %261, %260 ], [ %444, %443 ]
  %449 = phi i32 [ %262, %260 ], [ %444, %443 ]
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* %257, i64 %450
  %452 = add nuw i32 %256, 1
  %453 = load i32, i32* %61, align 8
  %454 = icmp ult i32 %452, %453
  br i1 %454, label %253, label %455

455:                                              ; preds = %447, %226
  %456 = phi i32 [ 0, %226 ], [ %453, %447 ]
  %457 = load i32, i32* %59, align 4
  %458 = add i32 %457, %54
  store i32 %458, i32* %59, align 4
  %459 = add i32 %456, %55
  store i32 %459, i32* %61, align 8
  br label %460

460:                                              ; preds = %205, %31, %44, %27, %20, %14, %17, %8, %10, %4, %455
  %461 = phi i32 [ 0, %455 ], [ %36, %44 ], [ 33, %4 ], [ 6, %10 ], [ 6, %8 ], [ 6, %17 ], [ 6, %14 ], [ 0, %20 ], [ 6, %27 ], [ 0, %31 ], [ %206, %205 ]
  ret i32 %461

462:                                              ; preds = %144
  %463 = load i8, i8* %145, align 1
  %464 = and i8 %463, %104
  store i8 %464, i8* %145, align 1
  %465 = getelementptr inbounds i8, i8* %145, i64 1
  br label %466

466:                                              ; preds = %462, %144
  %467 = phi i8* [ %465, %462 ], [ %145, %144 ]
  %468 = icmp ult i8* %467, %146
  br i1 %468, label %469, label %473

469:                                              ; preds = %466
  %470 = ptrtoint i8* %146 to i64
  %471 = ptrtoint i8* %467 to i64
  %472 = sub i64 %470, %471
  call void @llvm.memset.p0i8.i64(i8* align 1 %467, i8 0, i64 %472, i1 false) #3
  br label %473

473:                                              ; preds = %469, %466
  %474 = add i32 %130, -2
  %475 = getelementptr inbounds i8, i8* %145, i64 %95
  %476 = icmp eq i32 %474, 0
  br i1 %476, label %207, label %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Bitmap_Convert(%struct.FT_LibraryRec_* readonly, %struct.FT_Bitmap_* readonly, %struct.FT_Bitmap_*, i32) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #3
  store i32 0, i32* %5, align 4
  %7 = icmp eq %struct.FT_LibraryRec_* %0, null
  br i1 %7, label %677, label %8

8:                                                ; preds = %4
  %9 = icmp ne %struct.FT_Bitmap_* %1, null
  %10 = icmp ne %struct.FT_Bitmap_* %2, null
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %677

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %14 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %13, align 8
  %15 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 5
  %16 = load i8, i8* %15, align 2
  %17 = zext i8 %16 to i32
  %18 = add nsw i32 %17, -1
  %19 = icmp ult i32 %18, 7
  br i1 %19, label %20, label %65

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %22, 0
  %24 = sub nsw i32 0, %22
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = mul i32 %25, %27
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 5
  store i8 2, i8* %30, align 2
  %31 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  store i32 %32, i32* %26, align 8
  %33 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 1
  store i32 %34, i32* %35, align 4
  %36 = icmp sgt i32 %3, 0
  %37 = load i32, i32* %33, align 4
  br i1 %36, label %38, label %43

38:                                               ; preds = %20
  %39 = srem i32 %37, %3
  %40 = icmp eq i32 %39, 0
  %41 = sub nsw i32 %3, %39
  %42 = select i1 %40, i32 0, i32 %41
  br label %43

43:                                               ; preds = %20, %38
  %44 = phi i32 [ %42, %38 ], [ 0, %20 ]
  %45 = add nsw i32 %37, %44
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %43
  %48 = zext i32 %32 to i64
  %49 = sext i32 %45 to i64
  %50 = udiv i64 -1, %49
  %51 = icmp ult i64 %50, %48
  br i1 %51, label %677, label %52

52:                                               ; preds = %47, %43
  %53 = mul i32 %45, %32
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = call i8* @ft_mem_qrealloc(%struct.FT_MemoryRec_* %14, i64 1, i64 %29, i64 %54, i8* %56, i32* nonnull %5) #3
  store i8* %57, i8** %55, align 8
  %58 = load i32, i32* %5, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %677

60:                                               ; preds = %52
  %61 = load i32, i32* %21, align 8
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %45
  %64 = select i1 %62, i32 %63, i32 %45
  store i32 %64, i32* %21, align 8
  br label %68

65:                                               ; preds = %12
  store i32 6, i32* %5, align 4
  %66 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 3
  %67 = load i8*, i8** %66, align 8
  br label %68

68:                                               ; preds = %60, %65
  %69 = phi i8* [ %57, %60 ], [ %67, %65 ]
  %70 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 3
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 2
  %73 = load i32, i32* %72, align 8
  %74 = icmp slt i32 %73, 0
  br i1 %74, label %75, label %83

75:                                               ; preds = %68
  %76 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = add i32 %77, -1
  %79 = mul nsw i32 %78, %73
  %80 = sext i32 %79 to i64
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, i8* %71, i64 %81
  br label %83

83:                                               ; preds = %75, %68
  %84 = phi i8* [ %82, %75 ], [ %71, %68 ]
  %85 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 2
  %86 = load i32, i32* %85, align 8
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %96

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = add i32 %90, -1
  %92 = mul nsw i32 %91, %86
  %93 = sext i32 %92 to i64
  %94 = sub nsw i64 0, %93
  %95 = getelementptr inbounds i8, i8* %69, i64 %94
  br label %96

96:                                               ; preds = %88, %83
  %97 = phi i8* [ %95, %88 ], [ %69, %83 ]
  %98 = load i8, i8* %15, align 2
  switch i8 %98, label %675 [
    i8 1, label %99
    i8 2, label %226
    i8 5, label %226
    i8 6, label %226
    i8 3, label %268
    i8 4, label %450
    i8 7, label %614
  ]

99:                                               ; preds = %96
  %100 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 4
  store i16 2, i16* %100, align 8
  %101 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %675, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  br label %106

106:                                              ; preds = %104, %217
  %107 = phi i8* [ %84, %104 ], [ %220, %217 ]
  %108 = phi i32 [ %102, %104 ], [ %224, %217 ]
  %109 = phi i8* [ %97, %104 ], [ %223, %217 ]
  %110 = load i32, i32* %105, align 4
  %111 = lshr i32 %110, 3
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %207, label %113

113:                                              ; preds = %106
  %114 = add nsw i32 %111, -1
  %115 = zext i32 %114 to i64
  %116 = add nuw nsw i64 %115, 1
  %117 = icmp ult i64 %116, 16
  br i1 %117, label %169, label %118

118:                                              ; preds = %113
  %119 = getelementptr i8, i8* %109, i64 8
  %120 = add nsw i32 %111, -1
  %121 = zext i32 %120 to i64
  %122 = shl nuw nsw i64 %121, 3
  %123 = getelementptr i8, i8* %119, i64 %122
  %124 = getelementptr i8, i8* %107, i64 1
  %125 = getelementptr i8, i8* %124, i64 %121
  %126 = icmp ult i8* %109, %125
  %127 = icmp ult i8* %107, %123
  %128 = and i1 %126, %127
  br i1 %128, label %169, label %129

129:                                              ; preds = %118
  %130 = and i64 %116, 8589934576
  %131 = trunc i64 %130 to i32
  %132 = sub i32 %111, %131
  %133 = shl nuw nsw i64 %130, 3
  %134 = getelementptr i8, i8* %109, i64 %133
  %135 = getelementptr i8, i8* %107, i64 %130
  br label %136

136:                                              ; preds = %136, %129
  %137 = phi i64 [ 0, %129 ], [ %165, %136 ]
  %138 = shl i64 %137, 3
  %139 = getelementptr i8, i8* %107, i64 %137
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1, !alias.scope !13
  %142 = lshr <16 x i8> %141, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %143 = lshr <16 x i8> %141, <i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6>
  %144 = and <16 x i8> %143, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %145 = lshr <16 x i8> %141, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %146 = and <16 x i8> %145, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %147 = lshr <16 x i8> %141, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %148 = and <16 x i8> %147, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %149 = lshr <16 x i8> %141, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %150 = and <16 x i8> %149, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %151 = lshr <16 x i8> %141, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %152 = and <16 x i8> %151, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %153 = lshr <16 x i8> %141, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %154 = and <16 x i8> %153, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %155 = and <16 x i8> %141, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %156 = getelementptr inbounds i8, i8* %109, i64 %138
  %157 = bitcast i8* %156 to <128 x i8>*
  %158 = shufflevector <16 x i8> %142, <16 x i8> %144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %159 = shufflevector <16 x i8> %146, <16 x i8> %148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %160 = shufflevector <16 x i8> %150, <16 x i8> %152, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %161 = shufflevector <16 x i8> %154, <16 x i8> %155, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %162 = shufflevector <32 x i8> %158, <32 x i8> %159, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %163 = shufflevector <32 x i8> %160, <32 x i8> %161, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %164 = shufflevector <64 x i8> %162, <64 x i8> %163, <128 x i32> <i32 0, i32 16, i32 32, i32 48, i32 64, i32 80, i32 96, i32 112, i32 1, i32 17, i32 33, i32 49, i32 65, i32 81, i32 97, i32 113, i32 2, i32 18, i32 34, i32 50, i32 66, i32 82, i32 98, i32 114, i32 3, i32 19, i32 35, i32 51, i32 67, i32 83, i32 99, i32 115, i32 4, i32 20, i32 36, i32 52, i32 68, i32 84, i32 100, i32 116, i32 5, i32 21, i32 37, i32 53, i32 69, i32 85, i32 101, i32 117, i32 6, i32 22, i32 38, i32 54, i32 70, i32 86, i32 102, i32 118, i32 7, i32 23, i32 39, i32 55, i32 71, i32 87, i32 103, i32 119, i32 8, i32 24, i32 40, i32 56, i32 72, i32 88, i32 104, i32 120, i32 9, i32 25, i32 41, i32 57, i32 73, i32 89, i32 105, i32 121, i32 10, i32 26, i32 42, i32 58, i32 74, i32 90, i32 106, i32 122, i32 11, i32 27, i32 43, i32 59, i32 75, i32 91, i32 107, i32 123, i32 12, i32 28, i32 44, i32 60, i32 76, i32 92, i32 108, i32 124, i32 13, i32 29, i32 45, i32 61, i32 77, i32 93, i32 109, i32 125, i32 14, i32 30, i32 46, i32 62, i32 78, i32 94, i32 110, i32 126, i32 15, i32 31, i32 47, i32 63, i32 79, i32 95, i32 111, i32 127>
  store <128 x i8> %164, <128 x i8>* %157, align 1
  %165 = add i64 %137, 16
  %166 = icmp eq i64 %165, %130
  br i1 %166, label %167, label %136, !llvm.loop !16

167:                                              ; preds = %136
  %168 = icmp eq i64 %116, %130
  br i1 %168, label %203, label %169

169:                                              ; preds = %167, %118, %113
  %170 = phi i32 [ %111, %118 ], [ %111, %113 ], [ %132, %167 ]
  %171 = phi i8* [ %109, %118 ], [ %109, %113 ], [ %134, %167 ]
  %172 = phi i8* [ %107, %118 ], [ %107, %113 ], [ %135, %167 ]
  br label %173

173:                                              ; preds = %169, %173
  %174 = phi i32 [ %201, %173 ], [ %170, %169 ]
  %175 = phi i8* [ %199, %173 ], [ %171, %169 ]
  %176 = phi i8* [ %200, %173 ], [ %172, %169 ]
  %177 = load i8, i8* %176, align 1
  %178 = lshr i8 %177, 7
  store i8 %178, i8* %175, align 1
  %179 = lshr i8 %177, 6
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds i8, i8* %175, i64 1
  store i8 %180, i8* %181, align 1
  %182 = lshr i8 %177, 5
  %183 = and i8 %182, 1
  %184 = getelementptr inbounds i8, i8* %175, i64 2
  store i8 %183, i8* %184, align 1
  %185 = lshr i8 %177, 4
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds i8, i8* %175, i64 3
  store i8 %186, i8* %187, align 1
  %188 = lshr i8 %177, 3
  %189 = and i8 %188, 1
  %190 = getelementptr inbounds i8, i8* %175, i64 4
  store i8 %189, i8* %190, align 1
  %191 = lshr i8 %177, 2
  %192 = and i8 %191, 1
  %193 = getelementptr inbounds i8, i8* %175, i64 5
  store i8 %192, i8* %193, align 1
  %194 = lshr i8 %177, 1
  %195 = and i8 %194, 1
  %196 = getelementptr inbounds i8, i8* %175, i64 6
  store i8 %195, i8* %196, align 1
  %197 = and i8 %177, 1
  %198 = getelementptr inbounds i8, i8* %175, i64 7
  store i8 %197, i8* %198, align 1
  %199 = getelementptr inbounds i8, i8* %175, i64 8
  %200 = getelementptr inbounds i8, i8* %176, i64 1
  %201 = add nsw i32 %174, -1
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %173, !llvm.loop !17

203:                                              ; preds = %173, %167
  %204 = phi i8* [ %134, %167 ], [ %199, %173 ]
  %205 = phi i8* [ %135, %167 ], [ %200, %173 ]
  %206 = load i32, i32* %105, align 4
  br label %207

207:                                              ; preds = %203, %106
  %208 = phi i32 [ %110, %106 ], [ %206, %203 ]
  %209 = phi i8* [ %107, %106 ], [ %205, %203 ]
  %210 = phi i8* [ %109, %106 ], [ %204, %203 ]
  %211 = and i32 %208, 7
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %217, label %213

213:                                              ; preds = %207
  %214 = load i8, i8* %209, align 1
  %215 = lshr i8 %214, 7
  store i8 %215, i8* %210, align 1
  %216 = icmp eq i32 %211, 1
  br i1 %216, label %217, label %679

217:                                              ; preds = %213, %679, %684, %689, %694, %699, %704, %207
  %218 = load i32, i32* %72, align 8
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8, i8* %107, i64 %219
  %221 = load i32, i32* %85, align 8
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i8, i8* %109, i64 %222
  %224 = add i32 %108, -1
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %675, label %106

226:                                              ; preds = %96, %96, %96
  %227 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 4
  store i16 256, i16* %229, align 8
  %230 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %231 = load i32, i32* %230, align 8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %675, label %233

233:                                              ; preds = %226
  %234 = zext i32 %228 to i64
  %235 = and i32 %231, 1
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %245, label %237

237:                                              ; preds = %233
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %97, i8* align 1 %84, i64 %234, i1 false)
  %238 = load i32, i32* %72, align 8
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %84, i64 %239
  %241 = load i32, i32* %85, align 8
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i8, i8* %97, i64 %242
  %244 = add i32 %231, -1
  br label %245

245:                                              ; preds = %233, %237
  %246 = phi i32 [ %231, %233 ], [ %244, %237 ]
  %247 = phi i8* [ %84, %233 ], [ %240, %237 ]
  %248 = phi i8* [ %97, %233 ], [ %243, %237 ]
  %249 = icmp eq i32 %231, 1
  br i1 %249, label %675, label %250

250:                                              ; preds = %245, %250
  %251 = phi i32 [ %266, %250 ], [ %246, %245 ]
  %252 = phi i8* [ %262, %250 ], [ %247, %245 ]
  %253 = phi i8* [ %265, %250 ], [ %248, %245 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %253, i8* align 1 %252, i64 %234, i1 false)
  %254 = load i32, i32* %72, align 8
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %252, i64 %255
  %257 = load i32, i32* %85, align 8
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %253, i64 %258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %259, i8* align 1 %256, i64 %234, i1 false)
  %260 = load i32, i32* %72, align 8
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %256, i64 %261
  %263 = load i32, i32* %85, align 8
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i8, i8* %259, i64 %264
  %266 = add i32 %251, -2
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %675, label %250

268:                                              ; preds = %96
  %269 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 4
  store i16 4, i16* %269, align 8
  %270 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %675, label %273

273:                                              ; preds = %268
  %274 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  br label %275

275:                                              ; preds = %273, %441
  %276 = phi i32 [ %271, %273 ], [ %448, %441 ]
  %277 = phi i8* [ %84, %273 ], [ %444, %441 ]
  %278 = phi i8* [ %97, %273 ], [ %447, %441 ]
  %279 = load i32, i32* %274, align 4
  %280 = lshr i32 %279, 2
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %431, label %282

282:                                              ; preds = %275
  %283 = add nsw i32 %280, -1
  %284 = zext i32 %283 to i64
  %285 = add nuw nsw i64 %284, 1
  %286 = icmp ult i64 %285, 16
  br i1 %286, label %370, label %287

287:                                              ; preds = %282
  %288 = getelementptr i8, i8* %278, i64 4
  %289 = add nsw i32 %280, -1
  %290 = zext i32 %289 to i64
  %291 = shl nuw nsw i64 %290, 2
  %292 = getelementptr i8, i8* %288, i64 %291
  %293 = getelementptr i8, i8* %277, i64 1
  %294 = getelementptr i8, i8* %293, i64 %290
  %295 = icmp ult i8* %278, %294
  %296 = icmp ult i8* %277, %292
  %297 = and i1 %295, %296
  br i1 %297, label %370, label %298

298:                                              ; preds = %287
  %299 = and i64 %285, 8589934576
  %300 = trunc i64 %299 to i32
  %301 = sub i32 %280, %300
  %302 = shl nuw nsw i64 %299, 2
  %303 = getelementptr i8, i8* %278, i64 %302
  %304 = getelementptr i8, i8* %277, i64 %299
  %305 = add nsw i64 %299, -16
  %306 = lshr exact i64 %305, 4
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 1
  %309 = icmp eq i64 %305, 0
  br i1 %309, label %349, label %310

310:                                              ; preds = %298
  %311 = sub nuw nsw i64 %307, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %346, %312 ]
  %314 = phi i64 [ %311, %310 ], [ %347, %312 ]
  %315 = shl i64 %313, 2
  %316 = getelementptr i8, i8* %277, i64 %313
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !18
  %319 = lshr <16 x i8> %318, <i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6>
  %320 = lshr <16 x i8> %318, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %321 = and <16 x i8> %320, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %322 = lshr <16 x i8> %318, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %323 = and <16 x i8> %322, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %324 = and <16 x i8> %318, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %325 = getelementptr inbounds i8, i8* %278, i64 %315
  %326 = bitcast i8* %325 to <64 x i8>*
  %327 = shufflevector <16 x i8> %319, <16 x i8> %321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %328 = shufflevector <16 x i8> %323, <16 x i8> %324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %329 = shufflevector <32 x i8> %327, <32 x i8> %328, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %329, <64 x i8>* %326, align 1
  %330 = or i64 %313, 16
  %331 = shl i64 %330, 2
  %332 = getelementptr i8, i8* %277, i64 %330
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !18
  %335 = lshr <16 x i8> %334, <i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6>
  %336 = lshr <16 x i8> %334, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %337 = and <16 x i8> %336, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %338 = lshr <16 x i8> %334, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %339 = and <16 x i8> %338, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %340 = and <16 x i8> %334, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %341 = getelementptr inbounds i8, i8* %278, i64 %331
  %342 = bitcast i8* %341 to <64 x i8>*
  %343 = shufflevector <16 x i8> %335, <16 x i8> %337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %344 = shufflevector <16 x i8> %339, <16 x i8> %340, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %345 = shufflevector <32 x i8> %343, <32 x i8> %344, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %345, <64 x i8>* %342, align 1
  %346 = add i64 %313, 32
  %347 = add i64 %314, -2
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %312, !llvm.loop !21

349:                                              ; preds = %312, %298
  %350 = phi i64 [ 0, %298 ], [ %346, %312 ]
  %351 = icmp eq i64 %308, 0
  br i1 %351, label %368, label %352

352:                                              ; preds = %349
  %353 = shl i64 %350, 2
  %354 = getelementptr i8, i8* %277, i64 %350
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !18
  %357 = lshr <16 x i8> %356, <i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6, i8 6>
  %358 = lshr <16 x i8> %356, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %359 = and <16 x i8> %358, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %360 = lshr <16 x i8> %356, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %361 = and <16 x i8> %360, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %362 = and <16 x i8> %356, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %363 = getelementptr inbounds i8, i8* %278, i64 %353
  %364 = bitcast i8* %363 to <64 x i8>*
  %365 = shufflevector <16 x i8> %357, <16 x i8> %359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %366 = shufflevector <16 x i8> %361, <16 x i8> %362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %367 = shufflevector <32 x i8> %365, <32 x i8> %366, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %367, <64 x i8>* %364, align 1
  br label %368

368:                                              ; preds = %349, %352
  %369 = icmp eq i64 %285, %299
  br i1 %369, label %427, label %370

370:                                              ; preds = %368, %287, %282
  %371 = phi i32 [ %280, %287 ], [ %280, %282 ], [ %301, %368 ]
  %372 = phi i8* [ %278, %287 ], [ %278, %282 ], [ %303, %368 ]
  %373 = phi i8* [ %277, %287 ], [ %277, %282 ], [ %304, %368 ]
  %374 = and i32 %371, 1
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %390, label %376

376:                                              ; preds = %370
  %377 = load i8, i8* %373, align 1
  %378 = lshr i8 %377, 6
  store i8 %378, i8* %372, align 1
  %379 = lshr i8 %377, 4
  %380 = and i8 %379, 3
  %381 = getelementptr inbounds i8, i8* %372, i64 1
  store i8 %380, i8* %381, align 1
  %382 = lshr i8 %377, 2
  %383 = and i8 %382, 3
  %384 = getelementptr inbounds i8, i8* %372, i64 2
  store i8 %383, i8* %384, align 1
  %385 = and i8 %377, 3
  %386 = getelementptr inbounds i8, i8* %372, i64 3
  store i8 %385, i8* %386, align 1
  %387 = getelementptr inbounds i8, i8* %373, i64 1
  %388 = getelementptr inbounds i8, i8* %372, i64 4
  %389 = add nsw i32 %371, -1
  br label %390

390:                                              ; preds = %376, %370
  %391 = phi i8* [ %387, %376 ], [ undef, %370 ]
  %392 = phi i8* [ %388, %376 ], [ undef, %370 ]
  %393 = phi i32 [ %389, %376 ], [ %371, %370 ]
  %394 = phi i8* [ %388, %376 ], [ %372, %370 ]
  %395 = phi i8* [ %387, %376 ], [ %373, %370 ]
  %396 = icmp eq i32 %371, 1
  br i1 %396, label %427, label %397

397:                                              ; preds = %390, %397
  %398 = phi i32 [ %425, %397 ], [ %393, %390 ]
  %399 = phi i8* [ %424, %397 ], [ %394, %390 ]
  %400 = phi i8* [ %423, %397 ], [ %395, %390 ]
  %401 = load i8, i8* %400, align 1
  %402 = lshr i8 %401, 6
  store i8 %402, i8* %399, align 1
  %403 = lshr i8 %401, 4
  %404 = and i8 %403, 3
  %405 = getelementptr inbounds i8, i8* %399, i64 1
  store i8 %404, i8* %405, align 1
  %406 = lshr i8 %401, 2
  %407 = and i8 %406, 3
  %408 = getelementptr inbounds i8, i8* %399, i64 2
  store i8 %407, i8* %408, align 1
  %409 = and i8 %401, 3
  %410 = getelementptr inbounds i8, i8* %399, i64 3
  store i8 %409, i8* %410, align 1
  %411 = getelementptr inbounds i8, i8* %400, i64 1
  %412 = getelementptr inbounds i8, i8* %399, i64 4
  %413 = load i8, i8* %411, align 1
  %414 = lshr i8 %413, 6
  store i8 %414, i8* %412, align 1
  %415 = lshr i8 %413, 4
  %416 = and i8 %415, 3
  %417 = getelementptr inbounds i8, i8* %399, i64 5
  store i8 %416, i8* %417, align 1
  %418 = lshr i8 %413, 2
  %419 = and i8 %418, 3
  %420 = getelementptr inbounds i8, i8* %399, i64 6
  store i8 %419, i8* %420, align 1
  %421 = and i8 %413, 3
  %422 = getelementptr inbounds i8, i8* %399, i64 7
  store i8 %421, i8* %422, align 1
  %423 = getelementptr inbounds i8, i8* %400, i64 2
  %424 = getelementptr inbounds i8, i8* %399, i64 8
  %425 = add nsw i32 %398, -2
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %427, label %397, !llvm.loop !22

427:                                              ; preds = %390, %397, %368
  %428 = phi i8* [ %304, %368 ], [ %391, %390 ], [ %423, %397 ]
  %429 = phi i8* [ %303, %368 ], [ %392, %390 ], [ %424, %397 ]
  %430 = load i32, i32* %274, align 4
  br label %431

431:                                              ; preds = %427, %275
  %432 = phi i32 [ %279, %275 ], [ %430, %427 ]
  %433 = phi i8* [ %277, %275 ], [ %428, %427 ]
  %434 = phi i8* [ %278, %275 ], [ %429, %427 ]
  %435 = and i32 %432, 3
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %441, label %437

437:                                              ; preds = %431
  %438 = load i8, i8* %433, align 1
  %439 = lshr i8 %438, 6
  store i8 %439, i8* %434, align 1
  %440 = icmp eq i32 %435, 1
  br i1 %440, label %441, label %708

441:                                              ; preds = %437, %708, %713, %431
  %442 = load i32, i32* %72, align 8
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i8, i8* %277, i64 %443
  %445 = load i32, i32* %85, align 8
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %278, i64 %446
  %448 = add i32 %276, -1
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %675, label %275

450:                                              ; preds = %96
  %451 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 4
  store i16 16, i16* %451, align 8
  %452 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %453 = load i32, i32* %452, align 8
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %675, label %455

455:                                              ; preds = %450
  %456 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  br label %457

457:                                              ; preds = %455, %605
  %458 = phi i32 [ %453, %455 ], [ %612, %605 ]
  %459 = phi i8* [ %84, %455 ], [ %608, %605 ]
  %460 = phi i8* [ %97, %455 ], [ %611, %605 ]
  %461 = load i32, i32* %456, align 4
  %462 = lshr i32 %461, 1
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %596, label %464

464:                                              ; preds = %457
  %465 = add nsw i32 %462, -1
  %466 = zext i32 %465 to i64
  %467 = add nuw nsw i64 %466, 1
  %468 = icmp ult i64 %467, 16
  br i1 %468, label %534, label %469

469:                                              ; preds = %464
  %470 = getelementptr i8, i8* %460, i64 2
  %471 = add nsw i32 %462, -1
  %472 = zext i32 %471 to i64
  %473 = shl nuw nsw i64 %472, 1
  %474 = getelementptr i8, i8* %470, i64 %473
  %475 = getelementptr i8, i8* %459, i64 1
  %476 = getelementptr i8, i8* %475, i64 %472
  %477 = icmp ult i8* %460, %476
  %478 = icmp ult i8* %459, %474
  %479 = and i1 %477, %478
  br i1 %479, label %534, label %480

480:                                              ; preds = %469
  %481 = and i64 %467, 8589934576
  %482 = trunc i64 %481 to i32
  %483 = sub i32 %462, %482
  %484 = shl nuw nsw i64 %481, 1
  %485 = getelementptr i8, i8* %460, i64 %484
  %486 = getelementptr i8, i8* %459, i64 %481
  %487 = add nsw i64 %481, -16
  %488 = lshr exact i64 %487, 4
  %489 = add nuw nsw i64 %488, 1
  %490 = and i64 %489, 1
  %491 = icmp eq i64 %487, 0
  br i1 %491, label %519, label %492

492:                                              ; preds = %480
  %493 = sub nuw nsw i64 %489, %490
  br label %494

494:                                              ; preds = %494, %492
  %495 = phi i64 [ 0, %492 ], [ %516, %494 ]
  %496 = phi i64 [ %493, %492 ], [ %517, %494 ]
  %497 = shl i64 %495, 1
  %498 = getelementptr i8, i8* %459, i64 %495
  %499 = bitcast i8* %498 to <16 x i8>*
  %500 = load <16 x i8>, <16 x i8>* %499, align 1, !alias.scope !23
  %501 = lshr <16 x i8> %500, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %502 = and <16 x i8> %500, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %503 = getelementptr inbounds i8, i8* %460, i64 %497
  %504 = bitcast i8* %503 to <32 x i8>*
  %505 = shufflevector <16 x i8> %501, <16 x i8> %502, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %505, <32 x i8>* %504, align 1
  %506 = or i64 %495, 16
  %507 = shl i64 %506, 1
  %508 = getelementptr i8, i8* %459, i64 %506
  %509 = bitcast i8* %508 to <16 x i8>*
  %510 = load <16 x i8>, <16 x i8>* %509, align 1, !alias.scope !23
  %511 = lshr <16 x i8> %510, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %512 = and <16 x i8> %510, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %513 = getelementptr inbounds i8, i8* %460, i64 %507
  %514 = bitcast i8* %513 to <32 x i8>*
  %515 = shufflevector <16 x i8> %511, <16 x i8> %512, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %515, <32 x i8>* %514, align 1
  %516 = add i64 %495, 32
  %517 = add i64 %496, -2
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %519, label %494, !llvm.loop !26

519:                                              ; preds = %494, %480
  %520 = phi i64 [ 0, %480 ], [ %516, %494 ]
  %521 = icmp eq i64 %490, 0
  br i1 %521, label %532, label %522

522:                                              ; preds = %519
  %523 = shl i64 %520, 1
  %524 = getelementptr i8, i8* %459, i64 %520
  %525 = bitcast i8* %524 to <16 x i8>*
  %526 = load <16 x i8>, <16 x i8>* %525, align 1, !alias.scope !23
  %527 = lshr <16 x i8> %526, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %528 = and <16 x i8> %526, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %529 = getelementptr inbounds i8, i8* %460, i64 %523
  %530 = bitcast i8* %529 to <32 x i8>*
  %531 = shufflevector <16 x i8> %527, <16 x i8> %528, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %531, <32 x i8>* %530, align 1
  br label %532

532:                                              ; preds = %519, %522
  %533 = icmp eq i64 %467, %481
  br i1 %533, label %592, label %534

534:                                              ; preds = %532, %469, %464
  %535 = phi i32 [ %462, %469 ], [ %462, %464 ], [ %483, %532 ]
  %536 = phi i8* [ %460, %469 ], [ %460, %464 ], [ %485, %532 ]
  %537 = phi i8* [ %459, %469 ], [ %459, %464 ], [ %486, %532 ]
  %538 = add nsw i32 %535, -1
  %539 = and i32 %535, 3
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %555, label %541

541:                                              ; preds = %534, %541
  %542 = phi i32 [ %552, %541 ], [ %535, %534 ]
  %543 = phi i8* [ %551, %541 ], [ %536, %534 ]
  %544 = phi i8* [ %550, %541 ], [ %537, %534 ]
  %545 = phi i32 [ %553, %541 ], [ %539, %534 ]
  %546 = load i8, i8* %544, align 1
  %547 = lshr i8 %546, 4
  store i8 %547, i8* %543, align 1
  %548 = and i8 %546, 15
  %549 = getelementptr inbounds i8, i8* %543, i64 1
  store i8 %548, i8* %549, align 1
  %550 = getelementptr inbounds i8, i8* %544, i64 1
  %551 = getelementptr inbounds i8, i8* %543, i64 2
  %552 = add nsw i32 %542, -1
  %553 = add i32 %545, -1
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %541, !llvm.loop !27

555:                                              ; preds = %541, %534
  %556 = phi i8* [ undef, %534 ], [ %550, %541 ]
  %557 = phi i8* [ undef, %534 ], [ %551, %541 ]
  %558 = phi i32 [ %535, %534 ], [ %552, %541 ]
  %559 = phi i8* [ %536, %534 ], [ %551, %541 ]
  %560 = phi i8* [ %537, %534 ], [ %550, %541 ]
  %561 = icmp ult i32 %538, 3
  br i1 %561, label %592, label %562

562:                                              ; preds = %555, %562
  %563 = phi i32 [ %590, %562 ], [ %558, %555 ]
  %564 = phi i8* [ %589, %562 ], [ %559, %555 ]
  %565 = phi i8* [ %588, %562 ], [ %560, %555 ]
  %566 = load i8, i8* %565, align 1
  %567 = lshr i8 %566, 4
  store i8 %567, i8* %564, align 1
  %568 = and i8 %566, 15
  %569 = getelementptr inbounds i8, i8* %564, i64 1
  store i8 %568, i8* %569, align 1
  %570 = getelementptr inbounds i8, i8* %565, i64 1
  %571 = getelementptr inbounds i8, i8* %564, i64 2
  %572 = load i8, i8* %570, align 1
  %573 = lshr i8 %572, 4
  store i8 %573, i8* %571, align 1
  %574 = and i8 %572, 15
  %575 = getelementptr inbounds i8, i8* %564, i64 3
  store i8 %574, i8* %575, align 1
  %576 = getelementptr inbounds i8, i8* %565, i64 2
  %577 = getelementptr inbounds i8, i8* %564, i64 4
  %578 = load i8, i8* %576, align 1
  %579 = lshr i8 %578, 4
  store i8 %579, i8* %577, align 1
  %580 = and i8 %578, 15
  %581 = getelementptr inbounds i8, i8* %564, i64 5
  store i8 %580, i8* %581, align 1
  %582 = getelementptr inbounds i8, i8* %565, i64 3
  %583 = getelementptr inbounds i8, i8* %564, i64 6
  %584 = load i8, i8* %582, align 1
  %585 = lshr i8 %584, 4
  store i8 %585, i8* %583, align 1
  %586 = and i8 %584, 15
  %587 = getelementptr inbounds i8, i8* %564, i64 7
  store i8 %586, i8* %587, align 1
  %588 = getelementptr inbounds i8, i8* %565, i64 4
  %589 = getelementptr inbounds i8, i8* %564, i64 8
  %590 = add nsw i32 %563, -4
  %591 = icmp eq i32 %590, 0
  br i1 %591, label %592, label %562, !llvm.loop !28

592:                                              ; preds = %555, %562, %532
  %593 = phi i8* [ %486, %532 ], [ %556, %555 ], [ %588, %562 ]
  %594 = phi i8* [ %485, %532 ], [ %557, %555 ], [ %589, %562 ]
  %595 = load i32, i32* %456, align 4
  br label %596

596:                                              ; preds = %592, %457
  %597 = phi i32 [ %461, %457 ], [ %595, %592 ]
  %598 = phi i8* [ %459, %457 ], [ %593, %592 ]
  %599 = phi i8* [ %460, %457 ], [ %594, %592 ]
  %600 = and i32 %597, 1
  %601 = icmp eq i32 %600, 0
  br i1 %601, label %605, label %602

602:                                              ; preds = %596
  %603 = load i8, i8* %598, align 1
  %604 = lshr i8 %603, 4
  store i8 %604, i8* %599, align 1
  br label %605

605:                                              ; preds = %596, %602
  %606 = load i32, i32* %72, align 8
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i8, i8* %459, i64 %607
  %609 = load i32, i32* %85, align 8
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i8, i8* %460, i64 %610
  %612 = add i32 %458, -1
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %675, label %457

614:                                              ; preds = %96
  %615 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %2, i64 0, i32 4
  store i16 256, i16* %615, align 8
  %616 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %617 = load i32, i32* %616, align 8
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %675, label %619

619:                                              ; preds = %614
  %620 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  br label %621

621:                                              ; preds = %619, %666
  %622 = phi i32 [ %86, %619 ], [ %667, %666 ]
  %623 = phi i32 [ %617, %619 ], [ %673, %666 ]
  %624 = phi i8* [ %84, %619 ], [ %670, %666 ]
  %625 = phi i8* [ %97, %619 ], [ %672, %666 ]
  %626 = load i32, i32* %620, align 4
  %627 = icmp eq i32 %626, 0
  br i1 %627, label %666, label %628

628:                                              ; preds = %621, %658
  %629 = phi i32 [ %662, %658 ], [ %626, %621 ]
  %630 = phi i8* [ %661, %658 ], [ %625, %621 ]
  %631 = phi i8* [ %660, %658 ], [ %624, %621 ]
  %632 = getelementptr inbounds i8, i8* %631, i64 3
  %633 = load i8, i8* %632, align 1
  %634 = icmp eq i8 %633, 0
  br i1 %634, label %658, label %635

635:                                              ; preds = %628
  %636 = load i8, i8* %631, align 1
  %637 = zext i8 %636 to i64
  %638 = mul nuw nsw i64 %637, 4732
  %639 = mul nuw nsw i64 %638, %637
  %640 = getelementptr inbounds i8, i8* %631, i64 1
  %641 = load i8, i8* %640, align 1
  %642 = zext i8 %641 to i64
  %643 = mul nuw nsw i64 %642, 46871
  %644 = mul nuw nsw i64 %643, %642
  %645 = add nuw nsw i64 %644, %639
  %646 = getelementptr inbounds i8, i8* %631, i64 2
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i64
  %649 = mul nuw nsw i64 %648, 13933
  %650 = mul nuw nsw i64 %649, %648
  %651 = add nuw nsw i64 %645, %650
  %652 = lshr i64 %651, 16
  %653 = trunc i64 %652 to i16
  %654 = zext i8 %633 to i16
  %655 = udiv i16 %653, %654
  %656 = trunc i16 %655 to i8
  %657 = sub i8 %633, %656
  br label %658

658:                                              ; preds = %628, %635
  %659 = phi i8 [ %657, %635 ], [ 0, %628 ]
  store i8 %659, i8* %630, align 1
  %660 = getelementptr inbounds i8, i8* %631, i64 4
  %661 = getelementptr inbounds i8, i8* %630, i64 1
  %662 = add i32 %629, -1
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %664, label %628

664:                                              ; preds = %658
  %665 = load i32, i32* %85, align 8
  br label %666

666:                                              ; preds = %664, %621
  %667 = phi i32 [ %665, %664 ], [ %622, %621 ]
  %668 = load i32, i32* %72, align 8
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i8, i8* %624, i64 %669
  %671 = sext i32 %667 to i64
  %672 = getelementptr inbounds i8, i8* %625, i64 %671
  %673 = add i32 %623, -1
  %674 = icmp eq i32 %673, 0
  br i1 %674, label %675, label %621

675:                                              ; preds = %666, %605, %441, %245, %250, %217, %614, %450, %268, %226, %99, %96
  %676 = load i32, i32* %5, align 4
  br label %677

677:                                              ; preds = %52, %47, %8, %4, %675
  %678 = phi i32 [ %676, %675 ], [ 33, %4 ], [ 6, %8 ], [ %58, %52 ], [ 6, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #3
  ret i32 %678

679:                                              ; preds = %213
  %680 = getelementptr inbounds i8, i8* %210, i64 1
  %681 = lshr i8 %214, 6
  %682 = and i8 %681, 1
  store i8 %682, i8* %680, align 1
  %683 = icmp eq i32 %211, 2
  br i1 %683, label %217, label %684

684:                                              ; preds = %679
  %685 = getelementptr inbounds i8, i8* %210, i64 2
  %686 = lshr i8 %214, 5
  %687 = and i8 %686, 1
  store i8 %687, i8* %685, align 1
  %688 = icmp eq i32 %211, 3
  br i1 %688, label %217, label %689

689:                                              ; preds = %684
  %690 = getelementptr inbounds i8, i8* %210, i64 3
  %691 = lshr i8 %214, 4
  %692 = and i8 %691, 1
  store i8 %692, i8* %690, align 1
  %693 = icmp eq i32 %211, 4
  br i1 %693, label %217, label %694

694:                                              ; preds = %689
  %695 = getelementptr inbounds i8, i8* %210, i64 4
  %696 = lshr i8 %214, 3
  %697 = and i8 %696, 1
  store i8 %697, i8* %695, align 1
  %698 = icmp eq i32 %211, 5
  br i1 %698, label %217, label %699

699:                                              ; preds = %694
  %700 = getelementptr inbounds i8, i8* %210, i64 5
  %701 = lshr i8 %214, 2
  %702 = and i8 %701, 1
  store i8 %702, i8* %700, align 1
  %703 = icmp eq i32 %211, 6
  br i1 %703, label %217, label %704

704:                                              ; preds = %699
  %705 = getelementptr inbounds i8, i8* %210, i64 6
  %706 = lshr i8 %214, 1
  %707 = and i8 %706, 1
  store i8 %707, i8* %705, align 1
  br label %217

708:                                              ; preds = %437
  %709 = getelementptr inbounds i8, i8* %434, i64 1
  %710 = lshr i8 %438, 4
  %711 = and i8 %710, 3
  store i8 %711, i8* %709, align 1
  %712 = icmp eq i32 %435, 2
  br i1 %712, label %441, label %713

713:                                              ; preds = %708
  %714 = getelementptr inbounds i8, i8* %434, i64 2
  %715 = lshr i8 %438, 2
  %716 = and i8 %715, 3
  store i8 %716, i8* %714, align 1
  br label %441
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Bitmap_Done(%struct.FT_LibraryRec_* readonly, %struct.FT_Bitmap_*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.FT_LibraryRec_* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = icmp eq %struct.FT_Bitmap_* %1, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %8 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %7, align 8
  %9 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  tail call void @ft_mem_free(%struct.FT_MemoryRec_* %8, i8* %10) #3
  %11 = bitcast %struct.FT_Bitmap_* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 40, i1 false)
  br label %12

12:                                               ; preds = %4, %2, %6
  %13 = phi i32 [ 0, %6 ], [ 33, %2 ], [ 6, %4 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Bitmap_Blend(%struct.FT_LibraryRec_*, %struct.FT_Bitmap_*, i64, i64, %struct.FT_Bitmap_*, %struct.FT_Vector_*, i32) local_unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.FT_Bitmap_, align 8
  %10 = lshr i32 %6, 8
  %11 = lshr i32 %6, 16
  %12 = lshr i32 %6, 24
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #3
  store i32 0, i32* %8, align 4
  %14 = bitcast %struct.FT_Bitmap_* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false)
  %15 = icmp ne %struct.FT_LibraryRec_* %0, null
  %16 = icmp ne %struct.FT_Bitmap_* %4, null
  %17 = and i1 %15, %16
  %18 = icmp ne %struct.FT_Bitmap_* %1, null
  %19 = and i1 %18, %17
  %20 = icmp ne %struct.FT_Vector_* %5, null
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %344

22:                                               ; preds = %7
  %23 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %24 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %23, align 8
  %25 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 5
  %26 = load i8, i8* %25, align 2
  switch i8 %26, label %344 [
    i8 0, label %31
    i8 7, label %27
  ]

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  %29 = load i8*, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %344, label %31

31:                                               ; preds = %22, %27
  %32 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 5
  %33 = load i8, i8* %32, align 2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %344, label %35

35:                                               ; preds = %31
  %36 = icmp eq i8 %26, 7
  br i1 %36, label %37, label %44

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = xor i32 %41, %39
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %344, label %44

44:                                               ; preds = %37, %35
  %45 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %344, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %1, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %344, label %52

52:                                               ; preds = %48
  %53 = and i64 %2, -64
  %54 = and i64 %3, -64
  %55 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %5, i64 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, -64
  %58 = getelementptr inbounds %struct.FT_Vector_, %struct.FT_Vector_* %5, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, -64
  %61 = shl i32 %50, 6
  %62 = zext i32 %61 to i64
  %63 = or i64 %62, -9223372036854775808
  %64 = add nuw nsw i64 %63, 64
  %65 = icmp sgt i64 %64, %54
  br i1 %65, label %344, label %66

66:                                               ; preds = %52
  %67 = sub nsw i64 %54, %62
  %68 = shl i32 %46, 6
  %69 = zext i32 %68 to i64
  %70 = sub nuw nsw i64 9223372036854775743, %69
  %71 = icmp slt i64 %70, %53
  br i1 %71, label %344, label %72

72:                                               ; preds = %66
  %73 = add nsw i64 %53, %69
  %74 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %94, label %81

81:                                               ; preds = %77
  %82 = shl i32 %79, 6
  %83 = zext i32 %82 to i64
  %84 = or i64 %83, -9223372036854775808
  %85 = icmp sgt i64 %84, %60
  br i1 %85, label %344, label %86

86:                                               ; preds = %81
  %87 = shl i32 %75, 6
  %88 = zext i32 %87 to i64
  %89 = xor i64 %88, 9223372036854775807
  %90 = icmp slt i64 %89, %57
  br i1 %90, label %344, label %91

91:                                               ; preds = %86
  %92 = sub nsw i64 %60, %83
  %93 = add nsw i64 %57, %88
  br label %94

94:                                               ; preds = %72, %77, %91
  %95 = phi i64 [ %57, %91 ], [ 9223372036854775807, %77 ], [ 9223372036854775807, %72 ]
  %96 = phi i64 [ %92, %91 ], [ 9223372036854775807, %77 ], [ 9223372036854775807, %72 ]
  %97 = phi i64 [ %93, %91 ], [ -9223372036854775808, %77 ], [ -9223372036854775808, %72 ]
  %98 = phi i64 [ %60, %91 ], [ -9223372036854775808, %77 ], [ -9223372036854775808, %72 ]
  %99 = icmp slt i64 %53, %95
  %100 = select i1 %99, i64 %53, i64 %95
  %101 = icmp slt i64 %67, %96
  %102 = select i1 %101, i64 %67, i64 %96
  %103 = icmp sgt i64 %73, %97
  %104 = select i1 %103, i64 %73, i64 %97
  %105 = icmp sgt i64 %54, %98
  %106 = select i1 %105, i64 %54, i64 %98
  %107 = sub nsw i64 %104, %100
  %108 = lshr i64 %107, 6
  %109 = trunc i64 %108 to i32
  %110 = sub nsw i64 %106, %102
  %111 = lshr i64 %110, 6
  %112 = trunc i64 %111 to i32
  %113 = icmp ne i32 %109, 0
  %114 = icmp ne i32 %112, 0
  %115 = and i1 %113, %114
  br i1 %115, label %116, label %344

116:                                              ; preds = %94
  %117 = sub nsw i64 %53, %100
  %118 = sub nsw i64 %67, %102
  br i1 %76, label %126, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  %121 = load i32, i32* %120, align 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %126, label %123

123:                                              ; preds = %119
  %124 = sub nsw i64 %95, %100
  %125 = sub nsw i64 %96, %102
  br label %126

126:                                              ; preds = %119, %116, %123
  %127 = phi i64 [ %124, %123 ], [ %95, %119 ], [ %95, %116 ]
  %128 = phi i64 [ %125, %123 ], [ %96, %119 ], [ %96, %116 ]
  %129 = icmp eq i8 %26, 0
  br i1 %129, label %130, label %149

130:                                              ; preds = %126
  store i32 %109, i32* %74, align 4
  %131 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  store i32 %112, i32* %131, align 8
  store i8 7, i8* %25, align 2
  %132 = shl nuw nsw i64 %108, 2
  %133 = trunc i64 %132 to i32
  %134 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 2
  store i32 %133, i32* %134, align 8
  %135 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 4
  store i16 256, i16* %135, align 8
  %136 = shl i64 %108, 34
  %137 = ashr exact i64 %136, 32
  %138 = sdiv i64 9223372036854775807, %137
  %139 = shl i64 %111, 32
  %140 = ashr exact i64 %139, 32
  %141 = icmp slt i64 %138, %140
  br i1 %141, label %344, label %142

142:                                              ; preds = %130
  %143 = mul i64 %136, %111
  %144 = ashr exact i64 %143, 32
  %145 = call i8* @ft_mem_alloc(%struct.FT_MemoryRec_* %24, i64 %144, i32* nonnull %8) #3
  %146 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  store i8* %145, i8** %146, align 8
  %147 = load i32, i32* %8, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %213, label %344

149:                                              ; preds = %126
  %150 = icmp eq i32 %75, %109
  br i1 %150, label %151, label %155

151:                                              ; preds = %149
  %152 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  %153 = load i32, i32* %152, align 8
  %154 = icmp eq i32 %153, %112
  br i1 %154, label %213, label %155

155:                                              ; preds = %151, %149
  %156 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 2
  %157 = load i32, i32* %156, align 8
  %158 = icmp slt i32 %157, 0
  %159 = sub nsw i32 0, %157
  %160 = select i1 %158, i32 %159, i32 %157
  %161 = shl nuw nsw i64 %108, 2
  %162 = trunc i64 %161 to i32
  %163 = shl i64 %108, 34
  %164 = ashr exact i64 %163, 32
  %165 = sdiv i64 9223372036854775807, %164
  %166 = shl i64 %111, 32
  %167 = ashr exact i64 %166, 32
  %168 = icmp slt i64 %165, %167
  br i1 %168, label %344, label %169

169:                                              ; preds = %155
  %170 = mul i64 %166, %161
  %171 = ashr exact i64 %170, 32
  %172 = call i8* @ft_mem_alloc(%struct.FT_MemoryRec_* %24, i64 %171, i32* nonnull %8) #3
  %173 = load i32, i32* %8, align 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %342

175:                                              ; preds = %169
  %176 = load i32, i32* %156, align 8
  %177 = icmp slt i32 %176, 0
  br i1 %177, label %205, label %178

178:                                              ; preds = %175
  %179 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  %180 = load i8*, i8** %179, align 8
  %181 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  %182 = load i32, i32* %181, align 8
  %183 = mul nsw i32 %182, %160
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %180, i64 %184
  %186 = icmp sgt i32 %183, 0
  br i1 %186, label %187, label %205

187:                                              ; preds = %178
  %188 = and i64 %111, 4294967295
  %189 = ashr i64 %128, 6
  %190 = sub nsw i64 %188, %189
  %191 = zext i32 %182 to i64
  %192 = sub nsw i64 %190, %191
  %193 = mul nsw i64 %192, %164
  %194 = getelementptr inbounds i8, i8* %172, i64 %193
  %195 = ashr i64 %127, 6
  %196 = shl nsw i64 %195, 2
  %197 = getelementptr inbounds i8, i8* %194, i64 %196
  %198 = zext i32 %160 to i64
  br label %199

199:                                              ; preds = %187, %199
  %200 = phi i8* [ %197, %187 ], [ %203, %199 ]
  %201 = phi i8* [ %180, %187 ], [ %202, %199 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %201, i64 %198, i1 false)
  %202 = getelementptr inbounds i8, i8* %201, i64 %198
  %203 = getelementptr inbounds i8, i8* %200, i64 %164
  %204 = icmp ult i8* %202, %185
  br i1 %204, label %199, label %205

205:                                              ; preds = %199, %178, %175
  %206 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  %207 = load i8*, i8** %206, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %24, i8* %207) #3
  store i32 %109, i32* %74, align 4
  %208 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  store i32 %112, i32* %208, align 8
  %209 = load i32, i32* %156, align 8
  %210 = icmp slt i32 %209, 0
  %211 = sub nsw i32 0, %162
  %212 = select i1 %210, i32 %211, i32 %162
  store i32 %212, i32* %156, align 8
  store i8* %172, i8** %206, align 8
  br label %213

213:                                              ; preds = %205, %142, %151
  %214 = phi i8 [ 0, %151 ], [ 1, %142 ], [ 0, %205 ]
  %215 = load i8, i8* %32, align 2
  %216 = icmp eq i8 %215, 2
  br i1 %216, label %220, label %217

217:                                              ; preds = %213
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 40, i1 false) #3
  %218 = call i32 @FT_Bitmap_Convert(%struct.FT_LibraryRec_* nonnull %0, %struct.FT_Bitmap_* nonnull %1, %struct.FT_Bitmap_* nonnull %9, i32 1)
  store i32 %218, i32* %8, align 4
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %325

220:                                              ; preds = %213, %217
  %221 = phi i8 [ 1, %217 ], [ 0, %213 ]
  %222 = phi %struct.FT_Bitmap_* [ %9, %217 ], [ %1, %213 ]
  %223 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 2
  %224 = load i32, i32* %223, align 8
  %225 = icmp slt i32 %224, 0
  br i1 %225, label %321, label %226

226:                                              ; preds = %220
  %227 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %222, i64 0, i32 3
  %228 = load i8*, i8** %227, align 8
  %229 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %222, i64 0, i32 0
  %230 = load i32, i32* %229, align 8
  %231 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %222, i64 0, i32 2
  %232 = load i32, i32* %231, align 8
  %233 = mul nsw i32 %232, %230
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %228, i64 %234
  %236 = icmp sgt i32 %233, 0
  br i1 %236, label %237, label %321

237:                                              ; preds = %226
  %238 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  %239 = load i8*, i8** %238, align 8
  %240 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 0
  %241 = load i32, i32* %240, align 8
  %242 = zext i32 %241 to i64
  %243 = ashr i64 %118, 6
  %244 = sub nsw i64 %242, %243
  %245 = zext i32 %230 to i64
  %246 = sub nsw i64 %244, %245
  %247 = sext i32 %224 to i64
  %248 = mul nsw i64 %246, %247
  %249 = getelementptr inbounds i8, i8* %239, i64 %248
  %250 = ashr i64 %117, 6
  %251 = shl nsw i64 %250, 2
  %252 = getelementptr inbounds i8, i8* %249, i64 %251
  %253 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %222, i64 0, i32 1
  %254 = and i32 %6, 255
  %255 = and i32 %10, 255
  %256 = and i32 %11, 255
  br label %257

257:                                              ; preds = %237, %313
  %258 = phi i32 [ %224, %237 ], [ %314, %313 ]
  %259 = phi i32 [ %232, %237 ], [ %315, %313 ]
  %260 = phi i8* [ %252, %237 ], [ %319, %313 ]
  %261 = phi i8* [ %228, %237 ], [ %317, %313 ]
  %262 = load i32, i32* %253, align 4
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %261, i64 %263
  %265 = icmp eq i32 %262, 0
  br i1 %265, label %313, label %266

266:                                              ; preds = %257, %266
  %267 = phi i8* [ %308, %266 ], [ %260, %257 ]
  %268 = phi i8* [ %269, %266 ], [ %261, %257 ]
  %269 = getelementptr inbounds i8, i8* %268, i64 1
  %270 = load i8, i8* %268, align 1
  %271 = zext i8 %270 to i32
  %272 = mul nuw nsw i32 %12, %271
  %273 = udiv i32 %272, 255
  %274 = mul nuw nsw i32 %273, %254
  %275 = udiv i32 %274, 255
  %276 = mul nuw nsw i32 %273, %255
  %277 = udiv i32 %276, 255
  %278 = mul nuw nsw i32 %273, %256
  %279 = udiv i32 %278, 255
  %280 = sub nsw i32 255, %273
  %281 = load i8, i8* %267, align 1
  %282 = zext i8 %281 to i32
  %283 = getelementptr inbounds i8, i8* %267, i64 1
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = getelementptr inbounds i8, i8* %267, i64 2
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = getelementptr inbounds i8, i8* %267, i64 3
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i32
  %292 = mul nsw i32 %280, %282
  %293 = sdiv i32 %292, 255
  %294 = add nsw i32 %293, %275
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %267, align 1
  %296 = mul nsw i32 %280, %285
  %297 = sdiv i32 %296, 255
  %298 = add nsw i32 %297, %277
  %299 = trunc i32 %298 to i8
  store i8 %299, i8* %283, align 1
  %300 = mul nsw i32 %280, %288
  %301 = sdiv i32 %300, 255
  %302 = add nsw i32 %301, %279
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %286, align 1
  %304 = mul nsw i32 %280, %291
  %305 = sdiv i32 %304, 255
  %306 = add nsw i32 %305, %273
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds i8, i8* %267, i64 4
  store i8 %307, i8* %289, align 1
  %309 = icmp ult i8* %269, %264
  br i1 %309, label %266, label %310

310:                                              ; preds = %266
  %311 = load i32, i32* %231, align 8
  %312 = load i32, i32* %223, align 8
  br label %313

313:                                              ; preds = %310, %257
  %314 = phi i32 [ %312, %310 ], [ %258, %257 ]
  %315 = phi i32 [ %311, %310 ], [ %259, %257 ]
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %261, i64 %316
  %318 = sext i32 %314 to i64
  %319 = getelementptr inbounds i8, i8* %260, i64 %318
  %320 = icmp ult i8* %317, %235
  br i1 %320, label %257, label %321

321:                                              ; preds = %313, %226, %220
  store i64 %100, i64* %55, align 8
  %322 = and i64 %110, 4294967232
  %323 = add nsw i64 %322, %102
  store i64 %323, i64* %58, align 8
  %324 = load i32, i32* %8, align 4
  br label %325

325:                                              ; preds = %217, %321
  %326 = phi i32 [ %218, %217 ], [ %324, %321 ]
  %327 = phi i8 [ 0, %217 ], [ %221, %321 ]
  %328 = icmp eq i32 %326, 0
  %329 = icmp eq i8 %214, 0
  %330 = or i1 %329, %328
  br i1 %330, label %336, label %331

331:                                              ; preds = %325
  %332 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %23, align 8
  %333 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %4, i64 0, i32 3
  %334 = load i8*, i8** %333, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %332, i8* %334) #3
  %335 = bitcast %struct.FT_Bitmap_* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %335, i8 0, i64 40, i1 false) #3
  br label %336

336:                                              ; preds = %325, %331
  %337 = icmp eq i8 %327, 0
  br i1 %337, label %342, label %338

338:                                              ; preds = %336
  %339 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %23, align 8
  %340 = getelementptr inbounds %struct.FT_Bitmap_, %struct.FT_Bitmap_* %9, i64 0, i32 3
  %341 = load i8*, i8** %340, align 8
  call void @ft_mem_free(%struct.FT_MemoryRec_* %339, i8* %341) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 40, i1 false) #3
  br label %342

342:                                              ; preds = %169, %336, %338
  %343 = load i32, i32* %8, align 4
  br label %344

344:                                              ; preds = %155, %142, %130, %94, %86, %81, %66, %52, %44, %48, %37, %31, %27, %22, %7, %342
  %345 = phi i32 [ %343, %342 ], [ 6, %7 ], [ 6, %22 ], [ 6, %27 ], [ 0, %31 ], [ 6, %37 ], [ 0, %48 ], [ 0, %44 ], [ 6, %52 ], [ 6, %66 ], [ 6, %81 ], [ 6, %86 ], [ 0, %94 ], [ 6, %130 ], [ %147, %142 ], [ 6, %155 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #3
  ret i32 %345
}

declare hidden i8* @ft_mem_alloc(%struct.FT_MemoryRec_*, i64, i32*) local_unnamed_addr #2

declare hidden void @ft_mem_free(%struct.FT_MemoryRec_*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_GlyphSlot_Own_Bitmap(%struct.FT_GlyphSlotRec_*) local_unnamed_addr #0 {
  %2 = alloca %struct.FT_Bitmap_, align 8
  %3 = icmp eq %struct.FT_GlyphSlotRec_* %0, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %0, i64 0, i32 9
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1651078259
  br i1 %7, label %8, label %29

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %0, i64 0, i32 21
  %10 = load %struct.FT_Slot_InternalRec_*, %struct.FT_Slot_InternalRec_** %9, align 8
  %11 = getelementptr inbounds %struct.FT_Slot_InternalRec_, %struct.FT_Slot_InternalRec_* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %29

15:                                               ; preds = %8
  %16 = bitcast %struct.FT_Bitmap_* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 40, i1 false) #3
  %17 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %0, i64 0, i32 0
  %18 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %17, align 8
  %19 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %0, i64 0, i32 10
  %20 = call i32 @FT_Bitmap_Copy(%struct.FT_LibraryRec_* %18, %struct.FT_Bitmap_* %19, %struct.FT_Bitmap_* nonnull %2)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %15
  %23 = bitcast %struct.FT_Bitmap_* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 8 %16, i64 40, i1 false)
  %24 = load %struct.FT_Slot_InternalRec_*, %struct.FT_Slot_InternalRec_** %9, align 8
  %25 = getelementptr inbounds %struct.FT_Slot_InternalRec_, %struct.FT_Slot_InternalRec_* %24, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = or i32 %26, 1
  store i32 %27, i32* %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #3
  br label %29

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #3
  br label %29

29:                                               ; preds = %4, %1, %8, %22, %28
  %30 = phi i32 [ %20, %28 ], [ 0, %22 ], [ 0, %8 ], [ 0, %1 ], [ 0, %4 ]
  ret i32 %30
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !10}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = distinct !{!16, !10}
!17 = distinct !{!17, !10}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !10}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !10}
