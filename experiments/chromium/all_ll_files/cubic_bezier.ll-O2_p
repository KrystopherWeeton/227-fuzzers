; ModuleID = '../../ui/gfx/geometry/cubic_bezier.cc'
source_filename = "../../ui/gfx/geometry/cubic_bezier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }

@_ZN3gfx11CubicBezierC1Edddd = hidden unnamed_addr alias void (%"class.gfx::CubicBezier"*, double, double, double, double), void (%"class.gfx::CubicBezier"*, double, double, double, double)* @_ZN3gfx11CubicBezierC2Edddd
@_ZN3gfx11CubicBezierC1ERKS0_ = hidden unnamed_addr alias void (%"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"*), void (%"class.gfx::CubicBezier"*, %"class.gfx::CubicBezier"*)* @_ZN3gfx11CubicBezierC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx11CubicBezierC2Edddd(%"class.gfx::CubicBezier"*, double, double, double, double) unnamed_addr #0 align 2 {
  %6 = fmul double %1, 3.000000e+00
  %7 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  store double %6, double* %7, align 8
  %8 = fsub double %3, %1
  %9 = fmul double %8, 3.000000e+00
  %10 = fsub double %9, %6
  %11 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  store double %10, double* %11, align 8
  %12 = fsub double 1.000000e+00, %6
  %13 = fsub double %12, %10
  %14 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  store double %13, double* %14, align 8
  %15 = fmul double %2, 3.000000e+00
  %16 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  store double %15, double* %16, align 8
  %17 = fsub double %4, %2
  %18 = fmul double %17, 3.000000e+00
  %19 = fsub double %18, %15
  %20 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  store double %19, double* %20, align 8
  %21 = fsub double 1.000000e+00, %15
  %22 = fsub double %21, %19
  %23 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  store double %22, double* %23, align 8
  %24 = fcmp ogt double %1, 0.000000e+00
  br i1 %24, label %25, label %28

25:                                               ; preds = %5
  %26 = fdiv double %2, %1
  %27 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  store double %26, double* %27, align 8
  br label %42

28:                                               ; preds = %5
  %29 = fcmp oeq double %2, 0.000000e+00
  %30 = fcmp ogt double %3, 0.000000e+00
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  %33 = fdiv double %4, %3
  %34 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  store double %33, double* %34, align 8
  br label %42

35:                                               ; preds = %28
  %36 = fcmp une double %2, 0.000000e+00
  %37 = fcmp une double %4, 0.000000e+00
  %38 = or i1 %36, %37
  %39 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  br i1 %38, label %41, label %40

40:                                               ; preds = %35
  store double 1.000000e+00, double* %39, align 8
  br label %42

41:                                               ; preds = %35
  store double 0.000000e+00, double* %39, align 8
  br label %42

42:                                               ; preds = %41, %40, %32, %25
  %43 = fcmp olt double %3, 1.000000e+00
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = fadd double %4, -1.000000e+00
  %46 = fadd double %3, -1.000000e+00
  %47 = fdiv double %45, %46
  %48 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  store double %47, double* %48, align 8
  br label %64

49:                                               ; preds = %42
  %50 = fcmp oeq double %4, 1.000000e+00
  %51 = fcmp olt double %1, 1.000000e+00
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = fadd double %2, -1.000000e+00
  %55 = fadd double %1, -1.000000e+00
  %56 = fdiv double %54, %55
  %57 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  store double %56, double* %57, align 8
  br label %64

58:                                               ; preds = %49
  %59 = fcmp oeq double %2, 1.000000e+00
  %60 = and i1 %59, %50
  %61 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  br i1 %60, label %62, label %63

62:                                               ; preds = %58
  store double 1.000000e+00, double* %61, align 8
  br label %64

63:                                               ; preds = %58
  store double 0.000000e+00, double* %61, align 8
  br label %64

64:                                               ; preds = %44, %53, %62, %63
  tail call void @_ZN3gfx11CubicBezier9InitRangeEdd(%"class.gfx::CubicBezier"* %0, double %2, double %4)
  %65 = load double, double* %14, align 8
  %66 = load double, double* %11, align 8
  %67 = load double, double* %7, align 8
  %68 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 0
  %69 = insertelement <2 x double> undef, double %65, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul <2 x double> %70, <double 0.000000e+00, double 1.000000e-01>
  %72 = insertelement <2 x double> undef, double %66, i32 0
  %73 = shufflevector <2 x double> %72, <2 x double> undef, <2 x i32> zeroinitializer
  %74 = fadd <2 x double> %71, %73
  %75 = fmul <2 x double> %74, <double 0.000000e+00, double 1.000000e-01>
  %76 = insertelement <2 x double> undef, double %67, i32 0
  %77 = shufflevector <2 x double> %76, <2 x double> undef, <2 x i32> zeroinitializer
  %78 = fadd <2 x double> %77, %75
  %79 = fmul <2 x double> %78, <double 0.000000e+00, double 1.000000e-01>
  %80 = bitcast double* %68 to <2 x double>*
  store <2 x double> %79, <2 x double>* %80, align 8
  %81 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 2
  %82 = fmul <2 x double> %70, <double 2.000000e-01, double 0x3FD3333333333334>
  %83 = fadd <2 x double> %82, %73
  %84 = fmul <2 x double> %83, <double 2.000000e-01, double 0x3FD3333333333334>
  %85 = fadd <2 x double> %77, %84
  %86 = fmul <2 x double> %85, <double 2.000000e-01, double 0x3FD3333333333334>
  %87 = bitcast double* %81 to <2 x double>*
  store <2 x double> %86, <2 x double>* %87, align 8
  %88 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 4
  %89 = fmul <2 x double> %70, <double 4.000000e-01, double 5.000000e-01>
  %90 = fadd <2 x double> %89, %73
  %91 = fmul <2 x double> %90, <double 4.000000e-01, double 5.000000e-01>
  %92 = fadd <2 x double> %77, %91
  %93 = fmul <2 x double> %92, <double 4.000000e-01, double 5.000000e-01>
  %94 = bitcast double* %88 to <2 x double>*
  store <2 x double> %93, <2 x double>* %94, align 8
  %95 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 6
  %96 = fmul <2 x double> %70, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %97 = fadd <2 x double> %96, %73
  %98 = fmul <2 x double> %97, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %99 = fadd <2 x double> %77, %98
  %100 = fmul <2 x double> %99, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %101 = bitcast double* %95 to <2 x double>*
  store <2 x double> %100, <2 x double>* %101, align 8
  %102 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 8
  %103 = fmul <2 x double> %70, <double 8.000000e-01, double 9.000000e-01>
  %104 = fadd <2 x double> %103, %73
  %105 = fmul <2 x double> %104, <double 8.000000e-01, double 9.000000e-01>
  %106 = fadd <2 x double> %77, %105
  %107 = fmul <2 x double> %106, <double 8.000000e-01, double 9.000000e-01>
  %108 = bitcast double* %102 to <2 x double>*
  store <2 x double> %107, <2 x double>* %108, align 8
  %109 = fadd double %65, %66
  %110 = fadd double %67, %109
  %111 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 10
  store double %110, double* %111, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx11CubicBezier16InitCoefficientsEdddd(%"class.gfx::CubicBezier"* nocapture, double, double, double, double) local_unnamed_addr #1 align 2 {
  %6 = fmul double %1, 3.000000e+00
  %7 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  store double %6, double* %7, align 8
  %8 = fsub double %3, %1
  %9 = fmul double %8, 3.000000e+00
  %10 = fsub double %9, %6
  %11 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  store double %10, double* %11, align 8
  %12 = fsub double 1.000000e+00, %6
  %13 = fsub double %12, %10
  %14 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  store double %13, double* %14, align 8
  %15 = fmul double %2, 3.000000e+00
  %16 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  store double %15, double* %16, align 8
  %17 = fsub double %4, %2
  %18 = fmul double %17, 3.000000e+00
  %19 = fsub double %18, %15
  %20 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  store double %19, double* %20, align 8
  %21 = fsub double 1.000000e+00, %15
  %22 = fsub double %21, %19
  %23 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  store double %22, double* %23, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3gfx11CubicBezier13InitGradientsEdddd(%"class.gfx::CubicBezier"* nocapture, double, double, double, double) local_unnamed_addr #1 align 2 {
  %6 = fcmp ogt double %1, 0.000000e+00
  br i1 %6, label %7, label %10

7:                                                ; preds = %5
  %8 = fdiv double %2, %1
  %9 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  store double %8, double* %9, align 8
  br label %24

10:                                               ; preds = %5
  %11 = fcmp oeq double %2, 0.000000e+00
  %12 = fcmp ogt double %3, 0.000000e+00
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  %15 = fdiv double %4, %3
  %16 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  store double %15, double* %16, align 8
  br label %24

17:                                               ; preds = %10
  %18 = fcmp une double %2, 0.000000e+00
  %19 = fcmp une double %4, 0.000000e+00
  %20 = or i1 %18, %19
  %21 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  br i1 %20, label %23, label %22

22:                                               ; preds = %17
  store double 1.000000e+00, double* %21, align 8
  br label %24

23:                                               ; preds = %17
  store double 0.000000e+00, double* %21, align 8
  br label %24

24:                                               ; preds = %14, %23, %22, %7
  %25 = fcmp olt double %3, 1.000000e+00
  br i1 %25, label %26, label %31

26:                                               ; preds = %24
  %27 = fadd double %4, -1.000000e+00
  %28 = fadd double %3, -1.000000e+00
  %29 = fdiv double %27, %28
  %30 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  store double %29, double* %30, align 8
  br label %46

31:                                               ; preds = %24
  %32 = fcmp oeq double %4, 1.000000e+00
  %33 = fcmp olt double %1, 1.000000e+00
  %34 = and i1 %33, %32
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = fadd double %2, -1.000000e+00
  %37 = fadd double %1, -1.000000e+00
  %38 = fdiv double %36, %37
  %39 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  store double %38, double* %39, align 8
  br label %46

40:                                               ; preds = %31
  %41 = fcmp oeq double %2, 1.000000e+00
  %42 = and i1 %41, %32
  %43 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  br i1 %42, label %44, label %45

44:                                               ; preds = %40
  store double 1.000000e+00, double* %43, align 8
  br label %46

45:                                               ; preds = %40
  store double 0.000000e+00, double* %43, align 8
  br label %46

46:                                               ; preds = %35, %45, %44, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx11CubicBezier9InitRangeEdd(%"class.gfx::CubicBezier"* nocapture, double, double) local_unnamed_addr #0 align 2 {
  %4 = alloca [3 x double], align 8
  %5 = alloca [3 x double], align 8
  %6 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 8
  %7 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 9
  %8 = bitcast double* %6 to <2 x double>*
  store <2 x double> <double 0.000000e+00, double 1.000000e+00>, <2 x double>* %8, align 8
  %9 = fcmp oge double %1, 0.000000e+00
  %10 = fcmp olt double %1, 1.000000e+00
  %11 = and i1 %9, %10
  %12 = fcmp oge double %2, 0.000000e+00
  %13 = and i1 %11, %12
  %14 = fcmp ole double %2, 1.000000e+00
  %15 = and i1 %14, %13
  br i1 %15, label %122, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  %18 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  %19 = bitcast double* %17 to <2 x double>*
  %20 = load <2 x double>, <2 x double>* %19, align 8
  %21 = fmul <2 x double> %20, <double 3.000000e+00, double 2.000000e+00>
  %22 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %23 = load double, double* %22, align 8
  %24 = extractelement <2 x double> %21, i32 0
  %25 = tail call double @llvm.fabs.f64(double %24) #9
  %26 = fcmp olt double %25, 0x3E7AD7F29ABCAF48
  br i1 %26, label %27, label %36

27:                                               ; preds = %16
  %28 = extractelement <2 x double> %21, i32 1
  %29 = tail call double @llvm.fabs.f64(double %28) #9
  %30 = fcmp olt double %29, 0x3E7AD7F29ABCAF48
  br i1 %30, label %122, label %31

31:                                               ; preds = %27
  %32 = fsub double -0.000000e+00, %23
  %33 = extractelement <2 x double> %21, i32 1
  %34 = fdiv double %32, %33
  %35 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %34, i32 1
  br label %56

36:                                               ; preds = %16
  %37 = insertelement <2 x double> %21, double 4.000000e+00, i32 0
  %38 = fmul <2 x double> %21, %37
  %39 = extractelement <2 x double> %38, i32 0
  %40 = fmul double %39, %23
  %41 = extractelement <2 x double> %38, i32 1
  %42 = fsub double %41, %40
  %43 = fcmp olt double %42, 0.000000e+00
  br i1 %43, label %122, label %44

44:                                               ; preds = %36
  %45 = tail call double @sqrt(double %42) #9
  %46 = extractelement <2 x double> %21, i32 1
  %47 = fsub double -0.000000e+00, %46
  %48 = fmul double %24, 2.000000e+00
  %49 = insertelement <2 x double> undef, double %47, i32 0
  %50 = insertelement <2 x double> %49, double %45, i32 1
  %51 = insertelement <2 x double> %21, double %45, i32 0
  %52 = fsub <2 x double> %50, %51
  %53 = insertelement <2 x double> undef, double %48, i32 0
  %54 = shufflevector <2 x double> %53, <2 x double> undef, <2 x i32> zeroinitializer
  %55 = fdiv <2 x double> %52, %54
  br label %56

56:                                               ; preds = %44, %31
  %57 = phi <2 x double> [ %35, %31 ], [ %55, %44 ]
  %58 = extractelement <2 x double> %57, i32 1
  %59 = fcmp ogt double %58, 0.000000e+00
  %60 = fcmp olt double %58, 1.000000e+00
  %61 = and i1 %59, %60
  br i1 %61, label %62, label %71

62:                                               ; preds = %56
  %63 = load double, double* %17, align 8
  %64 = fmul double %58, %63
  %65 = load double, double* %18, align 8
  %66 = fadd double %64, %65
  %67 = fmul double %58, %66
  %68 = load double, double* %22, align 8
  %69 = fadd double %68, %67
  %70 = fmul double %58, %69
  br label %71

71:                                               ; preds = %62, %56
  %72 = phi double [ %70, %62 ], [ 0.000000e+00, %56 ]
  %73 = extractelement <2 x double> %57, i32 0
  %74 = fcmp ogt double %73, 0.000000e+00
  %75 = fcmp olt double %73, 1.000000e+00
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %86

77:                                               ; preds = %71
  %78 = load double, double* %17, align 8
  %79 = fmul double %73, %78
  %80 = load double, double* %18, align 8
  %81 = fadd double %79, %80
  %82 = fmul double %73, %81
  %83 = load double, double* %22, align 8
  %84 = fadd double %83, %82
  %85 = fmul double %73, %84
  br label %86

86:                                               ; preds = %77, %71
  %87 = phi double [ %85, %77 ], [ 0.000000e+00, %71 ]
  %88 = bitcast [3 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %88) #9
  %89 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 0
  %90 = bitcast double* %6 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast [3 x double]* %4 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 1
  store double %72, double* %93, align 8
  %94 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 2
  store double %87, double* %94, align 8
  %95 = bitcast i64 %91 to double
  %96 = fcmp olt double %72, %95
  %97 = select i1 %96, double* %93, double* %89
  %98 = getelementptr inbounds [3 x double], [3 x double]* %4, i64 0, i64 2
  %99 = load double, double* %97, align 8
  %100 = fcmp olt double %87, %99
  %101 = select i1 %100, double* %98, double* %97
  %102 = bitcast double* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast double* %6 to i64*
  store i64 %103, i64* %104, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %88) #9
  %105 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %105) #9
  %106 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 0
  %107 = bitcast double* %7 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast [3 x double]* %5 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 1
  store double %72, double* %110, align 8
  %111 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 2
  store double %87, double* %111, align 8
  %112 = bitcast i64 %108 to double
  %113 = fcmp ogt double %72, %112
  %114 = select i1 %113, double* %110, double* %106
  %115 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 2
  %116 = load double, double* %114, align 8
  %117 = fcmp olt double %116, %87
  %118 = select i1 %117, double* %115, double* %114
  %119 = bitcast double* %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = bitcast double* %7 to i64*
  store i64 %120, i64* %121, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %105) #9
  br label %122

122:                                              ; preds = %36, %27, %86, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3gfx11CubicBezier10InitSplineEv(%"class.gfx::CubicBezier"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %6 = load double, double* %4, align 8
  %7 = load double, double* %5, align 8
  %8 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 0
  %9 = insertelement <2 x double> undef, double %3, i32 0
  %10 = shufflevector <2 x double> %9, <2 x double> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x double> %10, <double 0.000000e+00, double 1.000000e-01>
  %12 = insertelement <2 x double> undef, double %6, i32 0
  %13 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> zeroinitializer
  %14 = fadd <2 x double> %11, %13
  %15 = fmul <2 x double> %14, <double 0.000000e+00, double 1.000000e-01>
  %16 = insertelement <2 x double> undef, double %7, i32 0
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> zeroinitializer
  %18 = fadd <2 x double> %17, %15
  %19 = fmul <2 x double> %18, <double 0.000000e+00, double 1.000000e-01>
  %20 = bitcast double* %8 to <2 x double>*
  store <2 x double> %19, <2 x double>* %20, align 8
  %21 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 2
  %22 = fmul <2 x double> %10, <double 2.000000e-01, double 0x3FD3333333333334>
  %23 = fadd <2 x double> %22, %13
  %24 = fmul <2 x double> %23, <double 2.000000e-01, double 0x3FD3333333333334>
  %25 = fadd <2 x double> %17, %24
  %26 = fmul <2 x double> %25, <double 2.000000e-01, double 0x3FD3333333333334>
  %27 = bitcast double* %21 to <2 x double>*
  store <2 x double> %26, <2 x double>* %27, align 8
  %28 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 4
  %29 = fmul <2 x double> %10, <double 4.000000e-01, double 5.000000e-01>
  %30 = fadd <2 x double> %29, %13
  %31 = fmul <2 x double> %30, <double 4.000000e-01, double 5.000000e-01>
  %32 = fadd <2 x double> %17, %31
  %33 = fmul <2 x double> %32, <double 4.000000e-01, double 5.000000e-01>
  %34 = bitcast double* %28 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 8
  %35 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 6
  %36 = fmul <2 x double> %10, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %37 = fadd <2 x double> %36, %13
  %38 = fmul <2 x double> %37, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %39 = fadd <2 x double> %17, %38
  %40 = fmul <2 x double> %39, <double 0x3FE3333333333334, double 0x3FE6666666666667>
  %41 = bitcast double* %35 to <2 x double>*
  store <2 x double> %40, <2 x double>* %41, align 8
  %42 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 8
  %43 = fmul <2 x double> %10, <double 8.000000e-01, double 9.000000e-01>
  %44 = fadd <2 x double> %43, %13
  %45 = fmul <2 x double> %44, <double 8.000000e-01, double 9.000000e-01>
  %46 = fadd <2 x double> %17, %45
  %47 = fmul <2 x double> %46, <double 8.000000e-01, double 9.000000e-01>
  %48 = bitcast double* %42 to <2 x double>*
  store <2 x double> %47, <2 x double>* %48, align 8
  %49 = fadd double %3, %6
  %50 = fadd double %7, %49
  %51 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 10
  store double %50, double* %51, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx11CubicBezierC2ERKS0_(%"class.gfx::CubicBezier"* nocapture, %"class.gfx::CubicBezier"* nocapture readonly dereferenceable(168)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gfx::CubicBezier"* %0 to i8*
  %4 = bitcast %"class.gfx::CubicBezier"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 168, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @_ZN3gfx11CubicBezier17GetDefaultEpsilonEv() local_unnamed_addr #5 align 2 {
  ret double 0x3E7AD7F29ABCAF48
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"* nocapture readonly, double, double) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 1
  %5 = load double, double* %4, align 8
  %6 = fcmp ult double %5, %1
  br i1 %6, label %23, label %7

7:                                                ; preds = %168, %164, %160, %156, %152, %148, %144, %140, %23, %3
  %8 = phi i32 [ 1, %3 ], [ 2, %23 ], [ 3, %140 ], [ 4, %144 ], [ 5, %148 ], [ 6, %152 ], [ 7, %156 ], [ 8, %160 ], [ 9, %164 ], [ 10, %168 ]
  %9 = phi double [ %5, %3 ], [ %25, %23 ], [ %142, %140 ], [ %146, %144 ], [ %150, %148 ], [ %154, %152 ], [ %158, %156 ], [ %162, %160 ], [ %166, %164 ], [ %170, %168 ]
  %10 = sitofp i32 %8 to double
  %11 = fmul double %10, 1.000000e-01
  %12 = fadd double %11, -1.000000e-01
  %13 = fsub double %11, %12
  %14 = add nsw i32 %8, -1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fsub double %1, %17
  %19 = fmul double %13, %18
  %20 = fsub double %9, %17
  %21 = fdiv double %19, %20
  %22 = fadd double %12, %21
  br label %27

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 2
  %25 = load double, double* %24, align 8
  %26 = fcmp ult double %25, %1
  br i1 %26, label %140, label %7

27:                                               ; preds = %168, %7
  %28 = phi double [ %12, %7 ], [ 0xFFFFFFFFFFFFFFFF, %168 ]
  %29 = phi double [ %11, %7 ], [ 0xFFFFFFFFFFFFFFFF, %168 ]
  %30 = phi double [ %22, %7 ], [ %1, %168 ]
  %31 = fcmp olt double %2, 0x3E7AD7F29ABCAF48
  %32 = select i1 %31, double %2, double 0x3E7AD7F29ABCAF48
  %33 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  %34 = load double, double* %33, align 8
  %35 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  %36 = load double, double* %35, align 8
  %37 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %38 = load double, double* %37, align 8
  %39 = fmul double %34, 3.000000e+00
  %40 = fmul double %36, 2.000000e+00
  %41 = fmul double %30, %34
  %42 = fadd double %41, %36
  %43 = fmul double %30, %42
  %44 = fadd double %38, %43
  %45 = fmul double %30, %44
  %46 = fsub double %45, %1
  %47 = tail call double @llvm.fabs.f64(double %46)
  %48 = fcmp olt double %47, %32
  br i1 %48, label %92, label %49

49:                                               ; preds = %27
  %50 = fmul double %30, %39
  %51 = fadd double %50, %40
  %52 = fmul double %30, %51
  %53 = fadd double %38, %52
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = fcmp olt double %54, 0x3E7AD7F29ABCAF48
  br i1 %55, label %67, label %56

56:                                               ; preds = %49
  %57 = fdiv double %46, %53
  %58 = fsub double %30, %57
  %59 = fmul double %58, %34
  %60 = fadd double %59, %36
  %61 = fmul double %58, %60
  %62 = fadd double %38, %61
  %63 = fmul double %58, %62
  %64 = fsub double %63, %1
  %65 = tail call double @llvm.fabs.f64(double %64)
  %66 = fcmp olt double %65, %32
  br i1 %66, label %92, label %94

67:                                               ; preds = %137, %130, %112, %94, %49
  %68 = phi double [ %128, %137 ], [ %128, %130 ], [ %110, %112 ], [ %65, %94 ], [ %47, %49 ]
  %69 = phi double [ %139, %137 ], [ %121, %130 ], [ %103, %112 ], [ %58, %94 ], [ %30, %49 ]
  %70 = fcmp uge double %68, %2
  %71 = fcmp olt double %28, %29
  %72 = and i1 %70, %71
  br i1 %72, label %73, label %92

73:                                               ; preds = %67, %85
  %74 = phi double [ %90, %85 ], [ %69, %67 ]
  %75 = phi double [ %88, %85 ], [ %29, %67 ]
  %76 = phi double [ %87, %85 ], [ %28, %67 ]
  %77 = fmul double %74, %34
  %78 = fadd double %77, %36
  %79 = fmul double %74, %78
  %80 = fadd double %38, %79
  %81 = fmul double %74, %80
  %82 = fsub double %81, %1
  %83 = tail call double @llvm.fabs.f64(double %82)
  %84 = fcmp olt double %83, %2
  br i1 %84, label %92, label %85

85:                                               ; preds = %73
  %86 = fcmp olt double %81, %1
  %87 = select i1 %86, double %74, double %76
  %88 = select i1 %86, double %75, double %74
  %89 = fadd double %88, %87
  %90 = fmul double %89, 5.000000e-01
  %91 = fcmp olt double %87, %88
  br i1 %91, label %73, label %92

92:                                               ; preds = %73, %85, %67, %27, %56, %101, %119
  %93 = phi double [ %69, %67 ], [ %30, %27 ], [ %58, %56 ], [ %103, %101 ], [ %121, %119 ], [ %74, %73 ], [ %90, %85 ]
  ret double %93

94:                                               ; preds = %56
  %95 = fmul double %58, %39
  %96 = fadd double %95, %40
  %97 = fmul double %58, %96
  %98 = fadd double %38, %97
  %99 = tail call double @llvm.fabs.f64(double %98)
  %100 = fcmp olt double %99, 0x3E7AD7F29ABCAF48
  br i1 %100, label %67, label %101

101:                                              ; preds = %94
  %102 = fdiv double %64, %98
  %103 = fsub double %58, %102
  %104 = fmul double %103, %34
  %105 = fadd double %104, %36
  %106 = fmul double %103, %105
  %107 = fadd double %38, %106
  %108 = fmul double %103, %107
  %109 = fsub double %108, %1
  %110 = tail call double @llvm.fabs.f64(double %109)
  %111 = fcmp olt double %110, %32
  br i1 %111, label %92, label %112

112:                                              ; preds = %101
  %113 = fmul double %103, %39
  %114 = fadd double %113, %40
  %115 = fmul double %103, %114
  %116 = fadd double %38, %115
  %117 = tail call double @llvm.fabs.f64(double %116)
  %118 = fcmp olt double %117, 0x3E7AD7F29ABCAF48
  br i1 %118, label %67, label %119

119:                                              ; preds = %112
  %120 = fdiv double %109, %116
  %121 = fsub double %103, %120
  %122 = fmul double %121, %34
  %123 = fadd double %122, %36
  %124 = fmul double %121, %123
  %125 = fadd double %38, %124
  %126 = fmul double %121, %125
  %127 = fsub double %126, %1
  %128 = tail call double @llvm.fabs.f64(double %127)
  %129 = fcmp olt double %128, %32
  br i1 %129, label %92, label %130

130:                                              ; preds = %119
  %131 = fmul double %121, %39
  %132 = fadd double %131, %40
  %133 = fmul double %121, %132
  %134 = fadd double %38, %133
  %135 = tail call double @llvm.fabs.f64(double %134)
  %136 = fcmp olt double %135, 0x3E7AD7F29ABCAF48
  br i1 %136, label %67, label %137

137:                                              ; preds = %130
  %138 = fdiv double %127, %134
  %139 = fsub double %121, %138
  br label %67

140:                                              ; preds = %23
  %141 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 3
  %142 = load double, double* %141, align 8
  %143 = fcmp ult double %142, %1
  br i1 %143, label %144, label %7

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 4
  %146 = load double, double* %145, align 8
  %147 = fcmp ult double %146, %1
  br i1 %147, label %148, label %7

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 5
  %150 = load double, double* %149, align 8
  %151 = fcmp ult double %150, %1
  br i1 %151, label %152, label %7

152:                                              ; preds = %148
  %153 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 6
  %154 = load double, double* %153, align 8
  %155 = fcmp ult double %154, %1
  br i1 %155, label %156, label %7

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 7
  %158 = load double, double* %157, align 8
  %159 = fcmp ult double %158, %1
  br i1 %159, label %160, label %7

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 8
  %162 = load double, double* %161, align 8
  %163 = fcmp ult double %162, %1
  br i1 %163, label %164, label %7

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 9
  %166 = load double, double* %165, align 8
  %167 = fcmp ult double %166, %1
  br i1 %167, label %168, label %7

168:                                              ; preds = %164
  %169 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 10, i64 10
  %170 = load double, double* %169, align 8
  %171 = fcmp ult double %170, %1
  br i1 %171, label %27, label %7
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5SolveEd(%"class.gfx::CubicBezier"* nocapture readonly, double) local_unnamed_addr #6 align 2 {
  %3 = fcmp olt double %1, 0.000000e+00
  br i1 %3, label %4, label %9

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 6
  %6 = load double, double* %5, align 8
  %7 = fmul double %6, %1
  %8 = fadd double %7, 0.000000e+00
  br label %30

9:                                                ; preds = %2
  %10 = fcmp ogt double %1, 1.000000e+00
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 7
  %13 = load double, double* %12, align 8
  %14 = fadd double %1, -1.000000e+00
  %15 = fmul double %14, %13
  %16 = fadd double %15, 1.000000e+00
  br label %30

17:                                               ; preds = %9
  %18 = tail call double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"* %0, double %1, double 0x3E7AD7F29ABCAF48) #9
  %19 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  %20 = load double, double* %19, align 8
  %21 = fmul double %18, %20
  %22 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  %23 = load double, double* %22, align 8
  %24 = fadd double %21, %23
  %25 = fmul double %18, %24
  %26 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %27 = load double, double* %26, align 8
  %28 = fadd double %27, %25
  %29 = fmul double %18, %28
  br label %30

30:                                               ; preds = %4, %11, %17
  %31 = phi double [ %8, %4 ], [ %16, %11 ], [ %29, %17 ]
  ret double %31
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier16SlopeWithEpsilonEdd(%"class.gfx::CubicBezier"* nocapture readonly, double, double) local_unnamed_addr #6 align 2 {
  %4 = fcmp olt double %1, 0.000000e+00
  %5 = select i1 %4, double 0.000000e+00, double %1
  %6 = fcmp ogt double %5, 1.000000e+00
  %7 = select i1 %6, double 1.000000e+00, double %5
  %8 = tail call double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"* %0, double %7, double %2)
  %9 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %14 = load double, double* %13, align 8
  %15 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  %16 = load double, double* %15, align 8
  %17 = insertelement <2 x double> undef, double %16, i32 0
  %18 = insertelement <2 x double> %17, double %10, i32 1
  %19 = fmul <2 x double> %18, <double 3.000000e+00, double 3.000000e+00>
  %20 = insertelement <2 x double> undef, double %8, i32 0
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> zeroinitializer
  %22 = fmul <2 x double> %21, %19
  %23 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  %24 = load double, double* %23, align 8
  %25 = insertelement <2 x double> undef, double %24, i32 0
  %26 = insertelement <2 x double> %25, double %12, i32 1
  %27 = fmul <2 x double> %26, <double 2.000000e+00, double 2.000000e+00>
  %28 = fadd <2 x double> %22, %27
  %29 = fmul <2 x double> %21, %28
  %30 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %31 = load double, double* %30, align 8
  %32 = insertelement <2 x double> undef, double %31, i32 0
  %33 = insertelement <2 x double> %32, double %14, i32 1
  %34 = fadd <2 x double> %33, %29
  %35 = extractelement <2 x double> %34, i32 0
  %36 = extractelement <2 x double> %34, i32 1
  %37 = fdiv double %35, %36
  ret double %37
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5SlopeEd(%"class.gfx::CubicBezier"* nocapture readonly, double) local_unnamed_addr #6 align 2 {
  %3 = fcmp olt double %1, 0.000000e+00
  %4 = select i1 %3, double 0.000000e+00, double %1
  %5 = fcmp ogt double %4, 1.000000e+00
  %6 = select i1 %5, double 1.000000e+00, double %4
  %7 = tail call double @_ZNK3gfx11CubicBezier11SolveCurveXEdd(%"class.gfx::CubicBezier"* %0, double %6, double 0x3E7AD7F29ABCAF48) #9
  %8 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 3
  %15 = load double, double* %14, align 8
  %16 = insertelement <2 x double> undef, double %15, i32 0
  %17 = insertelement <2 x double> %16, double %9, i32 1
  %18 = fmul <2 x double> %17, <double 3.000000e+00, double 3.000000e+00>
  %19 = insertelement <2 x double> undef, double %7, i32 0
  %20 = shufflevector <2 x double> %19, <2 x double> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x double> %20, %18
  %22 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  %23 = load double, double* %22, align 8
  %24 = insertelement <2 x double> undef, double %23, i32 0
  %25 = insertelement <2 x double> %24, double %11, i32 1
  %26 = fmul <2 x double> %25, <double 2.000000e+00, double 2.000000e+00>
  %27 = fadd <2 x double> %21, %26
  %28 = fmul <2 x double> %20, %27
  %29 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %30 = load double, double* %29, align 8
  %31 = insertelement <2 x double> undef, double %30, i32 0
  %32 = insertelement <2 x double> %31, double %13, i32 1
  %33 = fadd <2 x double> %32, %28
  %34 = extractelement <2 x double> %33, i32 0
  %35 = extractelement <2 x double> %33, i32 1
  %36 = fdiv double %34, %35
  ret double %36
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5GetX1Ev(%"class.gfx::CubicBezier"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %3 = load double, double* %2, align 8
  %4 = fdiv double %3, 3.000000e+00
  ret double %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5GetY1Ev(%"class.gfx::CubicBezier"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %3 = load double, double* %2, align 8
  %4 = fdiv double %3, 3.000000e+00
  ret double %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5GetX2Ev(%"class.gfx::CubicBezier"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 2
  %5 = load double, double* %4, align 8
  %6 = fadd double %3, %5
  %7 = insertelement <2 x double> undef, double %5, i32 0
  %8 = insertelement <2 x double> %7, double %6, i32 1
  %9 = fdiv <2 x double> %8, <double 3.000000e+00, double 3.000000e+00>
  %10 = extractelement <2 x double> %9, i32 0
  %11 = extractelement <2 x double> %9, i32 1
  %12 = fadd double %10, %11
  ret double %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK3gfx11CubicBezier5GetY2Ev(%"class.gfx::CubicBezier"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 4
  %3 = load double, double* %2, align 8
  %4 = getelementptr inbounds %"class.gfx::CubicBezier", %"class.gfx::CubicBezier"* %0, i64 0, i32 5
  %5 = load double, double* %4, align 8
  %6 = fadd double %3, %5
  %7 = insertelement <2 x double> undef, double %5, i32 0
  %8 = insertelement <2 x double> %7, double %6, i32 1
  %9 = fdiv <2 x double> %8, <double 3.000000e+00, double 3.000000e+00>
  %10 = extractelement <2 x double> %9, i32 0
  %11 = extractelement <2 x double> %9, i32 1
  %12 = fadd double %10, %11
  ret double %12
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
