; ModuleID = '../../third_party/skia/src/gpu/tessellate/GrStrokeShader.cpp'
source_filename = "../../third_party/skia/src/gpu/tessellate/GrStrokeShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrStrokeShaderImpl = type { %class.GrGLSLGeometryProcessor, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.SkString }
%class.GrGLSLGeometryProcessor = type { i32 (...)**, %class.SkTArray }
%class.SkTArray = type { %"struct.GrGLSLGeometryProcessor::TransformInfo"*, i64 }
%"struct.GrGLSLGeometryProcessor::TransformInfo" = type { %class.GrShaderVar, %class.GrShaderVar, %class.GrFragmentProcessor* }
%class.GrShaderVar = type { i32, i32, i32, %class.SkString, %class.SkString, %class.SkString }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.1 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.1 = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.GrResourceHandle = type { i32 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.GrStrokeShader = type <{ %class.GrPathShader.base, i32, i32, %class.SkStrokeRec, %struct.SkRGBA4f, [4 x i8], %class.SkSTArray.3, float, [4 x i8] }>
%class.GrPathShader.base = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32 }
%class.GrGeometryProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32 }>
%class.GrNonAtomicRef = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkStrokeRec = type { float, float, float, i32 }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkSTArray.3 = type { %class.SkAlignedSTStorage.4, %class.SkTArray.5 }
%class.SkAlignedSTStorage.4 = type { [80 x i8] }
%class.SkTArray.5 = type { %"class.GrGeometryProcessor::Attribute"*, i64 }
%"struct.GrGLSLGeometryProcessor::GrGPArgs" = type { %class.GrShaderVar, %class.GrShaderVar }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.GrGLSLGeometryProcessor::EmitArgs" = type { %class.GrGLSLVertexBuilder*, %class.GrGLSLGeometryBuilder*, %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLVaryingHandler*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrGeometryProcessor*, i8*, i8*, %class.GrResourceHandle.25*, %"class.GrGLSLGeometryProcessor::FPCoordTransformHandler"* }
%class.GrGLSLVertexBuilder = type { %class.GrGLSLVertexGeoBuilder.base, [12 x i8] }
%class.GrGLSLVertexGeoBuilder.base = type { %class.GrGLSLShaderBuilder.base }
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.9, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.12, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.21], i32, i8, [3 x i8], i32 }>
%class.GrGLSLProgramBuilder = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkSTArray.9 = type { %class.SkAlignedSTStorage.10, %class.SkTArray.11 }
%class.SkAlignedSTStorage.10 = type { [120 x i8] }
%class.SkTArray.11 = type { %class.SkString*, i64 }
%class.SkSTArray.12 = type { %class.SkAlignedSTStorage.13, %class.SkTArray.14 }
%class.SkAlignedSTStorage.13 = type { [16 x i8] }
%class.SkTArray.14 = type { %"class.std::__1::unique_ptr.15"*, i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.21 = type { %class.SkAlignedSTStorage.22, %class.SkTArray.11 }
%class.SkAlignedSTStorage.22 = type { [8 x i8] }
%class.GrGLSLGeometryBuilder = type { %class.GrGLSLVertexGeoBuilder.base, i32, [8 x i8] }
%class.GrGLSLFPFragmentBuilder = type <{ i32 (...)**, [4 x i8], [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLVaryingHandler = type { i32 (...)**, [8 x i8], %class.GrTBlockList.23, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrGLSLProgramBuilder*, i8* }
%class.GrTBlockList.23 = type { %class.GrSBlockAllocator.24 }
%class.GrSBlockAllocator.24 = type { [80 x i8] }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrResourceHandle.25 = type { i32 }
%"class.GrGLSLGeometryProcessor::FPCoordTransformHandler" = type { %"class.GrFragmentProcessor::CIter", %class.SkTArray.29* }
%"class.GrFragmentProcessor::CIter" = type { %class.SkSTArray.26 }
%class.SkSTArray.26 = type { %class.SkAlignedSTStorage.27, %class.SkTArray.28 }
%class.SkAlignedSTStorage.27 = type { [32 x i8] }
%class.SkTArray.28 = type { %class.GrFragmentProcessor**, i64 }
%class.SkTArray.29 = type { %class.GrShaderVar*, i64 }
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.9, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.12, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.21], i32, i8, [3 x i8], i32, [12 x i8] }>
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%class.GrGLSLProgramDataManager = type { i32 (...)** }
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray.30*, i32, i32 }
%class.SkTArray.30 = type { i32*, i64 }
%"class.GrGeometryProcessor::TextureSampler" = type <{ %class.GrSamplerState, [4 x i8], %class.GrBackendFormat, %class.GrSwizzle, i8, [5 x i8] }>
%class.GrSamplerState = type { [2 x i8], i32, i32 }
%class.GrBackendFormat = type { i32, i8, %union.anon.31, i32, [4 x i8] }
%union.anon.31 = type { %struct.anon.32 }
%struct.anon.32 = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.GrSwizzle = type { i16 }

$_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz = comdat any

$_ZN14GrStrokeShaderD2Ev = comdat any

$_ZN14GrStrokeShaderD0Ev = comdat any

$_ZNK14GrStrokeShader4nameEv = comdat any

$_ZNK19GrGeometryProcessor16onTextureSamplerEi = comdat any

$_ZN18GrStrokeShaderImplD2Ev = comdat any

$_ZN18GrStrokeShaderImplD0Ev = comdat any

$_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZN23GrGLSLGeometryProcessorD2Ev = comdat any

$_ZN23GrGLSLGeometryProcessorD0Ev = comdat any

$_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev = comdat any

$_ZTV23GrGLSLGeometryProcessor = comdat any

@.str = private unnamed_addr constant [174 x i8] c"\0Afloat atan2(float2 v) {\0A    float bias = 0.0;\0A    if (abs(v.y) > abs(v.x)) {\0A        v = float2(v.y, -v.x);\0A        bias = PI/2.0;\0A    }\0A    return atan(v.y, v.x) + bias;\0A}\00", align 1
@_ZN18GrStrokeShaderImpl8kAtan2FnE = hidden local_unnamed_addr global i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [219 x i8] c"\0Afloat cosine_between_vectors(float2 a, float2 b) {\0A    float ab_cosTheta = dot(a,b);\0A    float ab_pow2 = dot(a,a) * dot(b,b);\0A    return (ab_pow2 == 0.0) ? 1.0 : clamp(ab_cosTheta * inversesqrt(ab_pow2), -1.0, 1.0);\0A}\00", align 1
@_ZN18GrStrokeShaderImpl23kCosineBetweenVectorsFnE = hidden local_unnamed_addr global i8* getelementptr inbounds ([219 x i8], [219 x i8]* @.str.1, i64 0, i64 0), align 8
@.str.2 = private unnamed_addr constant [171 x i8] c"\0Afloat miter_extent(float cosTheta, float miterLimit) {\0A    float x = fma(cosTheta, .5, .5);\0A    return (x * miterLimit * miterLimit >= 1.0) ? inversesqrt(x) : sqrt(x);\0A}\00", align 1
@_ZN18GrStrokeShaderImpl14kMiterExtentFnE = hidden local_unnamed_addr global i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.2, i64 0, i64 0), align 8
@.str.3 = private unnamed_addr constant [170 x i8] c"\0Afloat num_radial_segments_per_radian(float parametricPrecision, float strokeRadius) {\0A    return .5 / acos(max(1.0 - 1.0/(parametricPrecision * strokeRadius), -1.0));\0A}\00", align 1
@_ZN18GrStrokeShaderImpl29kNumRadialSegmentsPerRadianFnE = hidden local_unnamed_addr global i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.3, i64 0, i64 0), align 8
@.str.4 = private unnamed_addr constant [256 x i8] c"\0Afloat unchecked_mix(float a, float b, float T) {\0A    return fma(b - a, T, a);\0A}\0Afloat2 unchecked_mix(float2 a, float2 b, float T) {\0A    return fma(b - a, float2(T), a);\0A}\0Afloat4 unchecked_mix(float4 a, float4 b, float4 T) {\0A    return fma(b - a, T, a);\0A}\00", align 1
@_ZN18GrStrokeShaderImpl15kUncheckedMixFnE = hidden local_unnamed_addr global i8* getelementptr inbounds ([256 x i8], [256 x i8]* @.str.4, i64 0, i64 0), align 8
@.str.5 = private unnamed_addr constant [7140 x i8] c"\0A    float2 tangent, strokeCoord;\0A    if (combinedEdgeID != 0 && !isFinalEdge) {\0A        // Compute the location and tangent direction of the stroke edge with the integral id\0A        // \22combinedEdgeID\22, where combinedEdgeID is the sorted-order index of parametric and radial\0A        // edges. Start by finding the tangent function's power basis coefficients. These define a\0A        // tangent direction (scaled by some uniform value) as:\0A        //                                                 |T^2|\0A        //     Tangent_Direction(T) = dx,dy = |A  2B  C| * |T  |\0A        //                                    |.   .  .|   |1  |\0A        float2 A, B, C = P[1] - P[0];\0A        float2 D = P[3] - P[0];\0A        if (w >= 0.0) {\0A            // P0..P2 represent a conic and P3==P2. The derivative of a conic has a cumbersome\0A            // order-4 denominator. However, this isn't necessary if we are only interested in a\0A            // vector in the same *direction* as a given tangent line. Since the denominator scales\0A            // dx and dy uniformly, we can throw it out completely after evaluating the derivative\0A            // with the standard quotient rule. This leaves us with a simpler quadratic function\0A            // that we use to find a tangent.\0A            C *= w;\0A            B = .5*D - C;\0A            A = (w - 1.0) * D;\0A            P[1] *= w;\0A        } else {\0A            float2 E = P[2] - P[1];\0A            B = E - C;\0A            A = fma(float2(-3), E, D);\0A        }\0A\0A        // Now find the coefficients that give a tangent direction from a parametric edge ID:\0A        //\0A        //                                                                 |parametricEdgeID^2|\0A        //     Tangent_Direction(parametricEdgeID) = dx,dy = |A  B_  C_| * |parametricEdgeID  |\0A        //                                                   |.   .   .|   |1                 |\0A        //\0A        float2 B_ = B * (numParametricSegments * 2.0);\0A        float2 C_ = C * (numParametricSegments * numParametricSegments);\0A\0A        // Run a binary search to determine the highest parametric edge that is located on or before\0A        // the combinedEdgeID. A combined ID is determined by the sum of complete parametric and\0A        // radial segments behind it. i.e., find the highest parametric edge where:\0A        //\0A        //    parametricEdgeID + floor(numRadialSegmentsAtParametricT) <= combinedEdgeID\0A        //\0A        float lastParametricEdgeID = 0.0;\0A        float maxParametricEdgeID = min(numParametricSegments - 1.0, combinedEdgeID);\0A        float2 tan0norm = normalize(tan0);\0A        float negAbsRadsPerSegment = -abs(radsPerSegment);\0A        float maxRotation0 = (1.0 + combinedEdgeID) * abs(radsPerSegment);\0A        for (int exp = MAX_PARAMETRIC_SEGMENTS_LOG2 - 1; exp >= 0; --exp) {\0A            // Test the parametric edge at lastParametricEdgeID + 2^exp.\0A            float testParametricID = lastParametricEdgeID + float(1 << exp);\0A            if (testParametricID <= maxParametricEdgeID) {\0A                float2 testTan = fma(float2(testParametricID), A, B_);\0A                testTan = fma(float2(testParametricID), testTan, C_);\0A                float cosRotation = dot(normalize(testTan), tan0norm);\0A                float maxRotation = fma(testParametricID, negAbsRadsPerSegment, maxRotation0);\0A                maxRotation = min(maxRotation, PI);\0A                // Is rotation <= maxRotation? (i.e., is the number of complete radial segments\0A                // behind testT, + testParametricID <= combinedEdgeID?)\0A                if (cosRotation >= cos(maxRotation)) {\0A                    // testParametricID is on or before the combinedEdgeID. Keep it!\0A                    lastParametricEdgeID = testParametricID;\0A                }\0A            }\0A        }\0A\0A        // Find the T value of the parametric edge at lastParametricEdgeID.\0A        float parametricT = lastParametricEdgeID / numParametricSegments;\0A\0A        // Now that we've identified the highest parametric edge on or before the\0A        // combinedEdgeID, the highest radial edge is easy:\0A        float lastRadialEdgeID = combinedEdgeID - lastParametricEdgeID;\0A\0A        // Find the tangent vector on the edge at lastRadialEdgeID.\0A        float radialAngle = fma(lastRadialEdgeID, radsPerSegment, angle0);\0A        tangent = float2(cos(radialAngle), sin(radialAngle));\0A        float2 norm = float2(-tangent.y, tangent.x);\0A\0A        // Find the T value where the tangent is orthogonal to norm. This is a quadratic:\0A        //\0A        //     dot(norm, Tangent_Direction(T)) == 0\0A        //\0A        //                         |T^2|\0A        //     norm * |A  2B  C| * |T  | == 0\0A        //            |.   .  .|   |1  |\0A        //\0A        float3 coeffs = norm * float3x2(A,B,C);\0A        float a=coeffs.x, b_over_2=coeffs.y, c=coeffs.z;\0A        float discr_over_4 = max(b_over_2*b_over_2 - a*c, 0.0);\0A        float q = sqrt(discr_over_4);\0A        if (b_over_2 > 0.0) {\0A            q = -q;\0A        }\0A        q -= b_over_2;\0A\0A        // Roots are q/a and c/q. Since each curve section does not inflect or rotate more than 180\0A        // degrees, there can only be one tangent orthogonal to \22norm\22 inside 0..1. Pick the root\0A        // nearest .5.\0A        float _5qa = -.5*q*a;\0A        float2 root = (abs(fma(q,q,_5qa)) < abs(fma(a,c,_5qa))) ? float2(q,a) : float2(c,q);\0A        float radialT = (root.t != 0.0) ? root.s / root.t : 0.0;\0A        radialT = clamp(radialT, 0.0, 1.0);\0A\0A        if (lastRadialEdgeID == 0.0) {\0A            // The root finder above can become unstable when lastRadialEdgeID == 0 (e.g., if\0A            // there are roots at exatly 0 and 1 both). radialT should always == 0 in this case.\0A            radialT = 0.0;\0A        }\0A\0A        // Now that we've identified the T values of the last parametric and radial edges, our final\0A        // T value for combinedEdgeID is whichever is larger.\0A        float T = max(parametricT, radialT);\0A\0A        // Evaluate the cubic at T. Use De Casteljau's for its accuracy and stability.\0A        float2 ab = unchecked_mix(P[0], P[1], T);\0A        float2 bc = unchecked_mix(P[1], P[2], T);\0A        float2 cd = unchecked_mix(P[2], P[3], T);\0A        float2 abc = unchecked_mix(ab, bc, T);\0A        float2 bcd = unchecked_mix(bc, cd, T);\0A        float2 abcd = unchecked_mix(abc, bcd, T);\0A\0A        // Evaluate the conic weight at T.\0A        float u = unchecked_mix(1.0, w, T);\0A        float v = w + 1 - u;  // == mix(w, 1, T)\0A        float uv = unchecked_mix(u, v, T);\0A\0A        // If we went with T=parametricT, then update the tangent. Otherwise leave it at the radial\0A        // tangent found previously. (In the event that parametricT == radialT, we keep the radial\0A        // tangent.)\0A        if (T != radialT) {\0A            tangent = (w >= 0.0) ? bc*u - ab*v : bcd - abc;\0A        }\0A\0A        strokeCoord = (w >= 0.0) ? abc/uv : abcd;\0A    } else {\0A        // Edges at the beginning and end of the strip use exact endpoints and tangents. This\0A        // ensures crack-free seaming between instances.\0A        tangent = (combinedEdgeID == 0) ? tan0 : tan1;\0A        strokeCoord = (combinedEdgeID == 0) ? P[0] : P[3];\0A    }\00", align 1
@.str.6 = private unnamed_addr constant [121 x i8] c"\0A    float2 ortho = normalize(float2(tangent.y, -tangent.x));\0A    strokeCoord += ortho * (STROKE_RADIUS * strokeOutset);\00", align 1
@.str.7 = private unnamed_addr constant [68 x i8] c"\0A        float2 devCoord = AFFINE_MATRIX * strokeCoord + TRANSLATE;\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"devCoord\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"strokeCoord\00", align 1
@.str.10 = private unnamed_addr constant [118 x i8] c"\0A        float2 devCoord = strokeCoord + TRANSLATE;\0A        float2 localCoord = inverse(AFFINE_MATRIX) * strokeCoord;\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"localCoord\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"half4 %s = %s;\00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c"const half4 %s = half4(1);\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@_ZTV14GrStrokeShader = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrStrokeShader*)* @_ZN14GrStrokeShaderD2Ev to i8*), i8* bitcast (void (%class.GrStrokeShader*)* @_ZN14GrStrokeShaderD0Ev to i8*), i8* bitcast (i8* (%class.GrStrokeShader*)* @_ZNK14GrStrokeShader4nameEv to i8*), i8* bitcast (void (%class.GrStrokeShader*, %class.GrShaderCaps*, %class.GrProcessorKeyBuilder*)* @_ZNK14GrStrokeShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder to i8*), i8* bitcast (%class.GrGLSLGeometryProcessor* (%class.GrStrokeShader*, %class.GrShaderCaps*)* @_ZNK14GrStrokeShader18createGLSLInstanceERK12GrShaderCaps to i8*), i8* bitcast (%"class.GrGeometryProcessor::TextureSampler"* (%class.GrGeometryProcessor*, i32)* @_ZNK19GrGeometryProcessor16onTextureSamplerEi to i8*)] }, align 8
@_ZTV18GrStrokeShaderImpl = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrStrokeShaderImpl*)* @_ZN18GrStrokeShaderImplD2Ev to i8*), i8* bitcast (void (%class.GrStrokeShaderImpl*)* @_ZN18GrStrokeShaderImplD0Ev to i8*), i8* bitcast (void (%class.GrStrokeShaderImpl*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN18GrStrokeShaderImpl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTV30GrStrokeTessellationShaderImpl = external unnamed_addr constant { [8 x i8*] }, align 8
@_ZTV23GrGLSLGeometryProcessor = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTV27GrStrokeInstancedShaderImpl = external unnamed_addr constant { [8 x i8*] }, align 8
@.str.17 = private unnamed_addr constant [15 x i8] c"GrStrokeShader\00", align 1
@.str.18 = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/gpu/GrGeometryProcessor.h\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"Illegal texture sampler index\00", align 1
@.str.20 = private unnamed_addr constant [62 x i8] c"../../third_party/skia/src/gpu/glsl/GrGLSLGeometryProcessor.h\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"Not implemented.\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18GrStrokeShaderImpl20emitTessellationCodeERK14GrStrokeShaderP8SkStringPN23GrGLSLGeometryProcessor8GrGPArgsERK12GrShaderCaps(%class.GrStrokeShaderImpl* nocapture readnone, %class.GrStrokeShader* dereferenceable(272), %class.SkString*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %2, i64 -1, i8* getelementptr inbounds ([7140 x i8], [7140 x i8]* @.str.5, i64 0, i64 0)) #7
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %2, i64 -1, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.6, i64 0, i64 0)) #7
  %6 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %1, i64 0, i32 3
  %7 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %6) #7
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.7, i64 0, i64 0)
  %10 = select i1 %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0)
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %2, i64 -1, i8* %9) #7
  %11 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %3, i64 0, i32 0, i32 0
  store i32 22, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %3, i64 0, i32 0, i32 3
  %13 = tail call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0)) #7
  %14 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %3, i64 0, i32 1, i32 0
  store i32 22, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %3, i64 0, i32 1, i32 3
  %16 = tail call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %15, i8* %10) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18GrStrokeShaderImpl16emitFragmentCodeERK14GrStrokeShaderRKN23GrGLSLGeometryProcessor8EmitArgsE(%class.GrStrokeShaderImpl* nocapture, %class.GrStrokeShader* nocapture readonly dereferenceable(272), %"struct.GrGLSLGeometryProcessor::EmitArgs"* nocapture readonly dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %4 = alloca i8*, align 8
  %5 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %32

9:                                                ; preds = %3
  %10 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #7
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %11 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 4
  %12 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %11, align 8
  %13 = bitcast %class.GrGLSLUniformHandler* %12 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %14 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %13, align 8
  %15 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %14, i64 13
  %16 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %15, align 8
  %17 = call i32 %16(%class.GrGLSLUniformHandler* %12, %class.GrFragmentProcessor* null, i32 16, i32 31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %4) #7
  %18 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 5, i32 0
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 2
  %20 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %19, align 8
  %21 = bitcast %class.GrGLSLFPFragmentBuilder* %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr i8, i8* %22, i64 -24
  %24 = bitcast i8* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %class.GrGLSLFPFragmentBuilder* %20 to i8*
  %27 = getelementptr inbounds i8, i8* %26, i64 %25
  %28 = bitcast i8* %27 to %class.GrGLSLShaderBuilder*
  %29 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 7
  %30 = load i8*, i8** %29, align 8
  %31 = load i8*, i8** %4, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %28, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0), i8* %30, i8* %31)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #7
  br label %48

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 2
  %34 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %33, align 8
  %35 = bitcast %class.GrGLSLFPFragmentBuilder* %34 to i8**
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr i8, i8* %36, i64 -24
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %class.GrGLSLFPFragmentBuilder* %34 to i8*
  %41 = getelementptr inbounds i8, i8* %40, i64 %39
  %42 = bitcast i8* %41 to %class.GrGLSLShaderBuilder*
  %43 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 7
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 6, i32 0, i32 0
  %46 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %45, align 8
  %47 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %46, i64 0, i32 2
  tail call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0), i8* %44, i8* %47)
  br label %48

48:                                               ; preds = %32, %9
  %49 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 2
  %50 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %49, align 8
  %51 = bitcast %class.GrGLSLFPFragmentBuilder* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr i8, i8* %52, i64 -24
  %54 = bitcast i8* %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %class.GrGLSLFPFragmentBuilder* %50 to i8*
  %57 = getelementptr inbounds i8, i8* %56, i64 %55
  %58 = bitcast i8* %57 to %class.GrGLSLShaderBuilder*
  %59 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %2, i64 0, i32 8
  %60 = load i8*, i8** %59, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %58, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.14, i64 0, i64 0), i8* %60)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder*, i8*, ...) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %8 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %class.SkString**
  %11 = load %class.SkString*, %class.SkString** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %11, i64 %12
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %13, i8* %1, %struct.__va_list_tag* nonnull %5) #7
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18GrStrokeShaderImpl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor(%class.GrStrokeShaderImpl* nocapture readonly, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrShaderCaps* nocapture readnone dereferenceable(144), %class.GrGeometryProcessor* dereferenceable(80)) unnamed_addr #2 align 2 {
  %5 = bitcast %class.GrGeometryProcessor* %3 to %class.GrStrokeShader*
  %6 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %5, i64 0, i32 3
  %7 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 1, i32 4
  %8 = bitcast %"class.GrGeometryProcessor::AttributeSet"* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %64

12:                                               ; preds = %4
  %13 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %6) #7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 0, i32 6
  %17 = bitcast [4 x i8]* %16 to %class.SkMatrix*
  %18 = tail call float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix* %17) #7
  %19 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 1, i32 4, i32 1
  %20 = bitcast i32* %19 to float*
  %21 = load float, float* %20, align 4
  %22 = fmul float %18, 4.000000e+00
  %23 = insertelement <2 x float> undef, float %22, i32 0
  %24 = fmul float %22, %21
  %25 = fdiv float 2.000000e+00, %24
  %26 = fsub float 1.000000e+00, %25
  %27 = fcmp olt float %26, -1.000000e+00
  %28 = select i1 %27, float -1.000000e+00, float %26
  %29 = tail call float @acosf(float %28) #7
  %30 = fdiv float 5.000000e-01, %29
  %31 = insertelement <2 x float> %23, float %30, i32 1
  br label %32

32:                                               ; preds = %12, %15
  %33 = phi <2 x float> [ %31, %15 ], [ <float 4.000000e+00, float 0x3FDE8EC8A0000000>, %12 ]
  %34 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %6) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 1, i32 4, i32 1
  %38 = bitcast i32* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fmul float %39, 5.000000e-01
  br label %41

41:                                               ; preds = %32, %36
  %42 = phi float [ %40, %36 ], [ 5.000000e-01, %32 ]
  %43 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 1, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = extractelement <2 x float> %33, i32 0
  %46 = extractelement <2 x float> %33, i32 1
  %47 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 1, i32 4, i32 3
  %48 = bitcast i64* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i8
  switch i8 %51, label %57 [
    i8 1, label %58
    i8 2, label %52
    i8 0, label %53
  ]

52:                                               ; preds = %41
  br label %58

53:                                               ; preds = %41
  %54 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 1, i32 4, i32 2
  %55 = bitcast i32* %54 to float*
  %56 = load float, float* %55, align 4
  br label %58

57:                                               ; preds = %41
  tail call void @llvm.trap() #7
  unreachable

58:                                               ; preds = %41, %52, %53
  %59 = phi float [ %56, %53 ], [ 0.000000e+00, %52 ], [ -1.000000e+00, %41 ]
  %60 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)***
  %61 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)**, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*** %60, align 8
  %62 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %61, i64 16
  %63 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %62, align 8
  tail call void %63(%class.GrGLSLProgramDataManager* %1, i32 %44, float %45, float %46, float %59, float %42) #7
  br label %75

64:                                               ; preds = %4
  %65 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 0, i32 6
  %66 = bitcast [4 x i8]* %65 to %class.SkMatrix*
  %67 = tail call float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix* %66) #7
  %68 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 1, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = fmul float %67, 4.000000e+00
  %71 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float)***
  %72 = load void (%class.GrGLSLProgramDataManager*, i32, float)**, void (%class.GrGLSLProgramDataManager*, i32, float)*** %71, align 8
  %73 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %72, i64 4
  %74 = load void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %73, align 8
  tail call void %74(%class.GrGLSLProgramDataManager* %1, i32 %69, float %70) #7
  br label %75

75:                                               ; preds = %64, %58
  %76 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %5, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %79, label %89

79:                                               ; preds = %75
  %80 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 4, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 3, i32 3
  %83 = bitcast %"class.GrGeometryProcessor::AttributeSet"* %82 to float*
  %84 = load float, float* %83, align 8
  %85 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float)***
  %86 = load void (%class.GrGLSLProgramDataManager*, i32, float)**, void (%class.GrGLSLProgramDataManager*, i32, float)*** %85, align 8
  %87 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %86, i64 4
  %88 = load void (%class.GrGLSLProgramDataManager*, i32, float)*, void (%class.GrGLSLProgramDataManager*, i32, float)** %87, align 8
  tail call void %88(%class.GrGLSLProgramDataManager* %1, i32 %81, float %84) #7
  br label %89

89:                                               ; preds = %79, %75
  %90 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %3, i64 0, i32 6
  %91 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 2, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 2
  %94 = bitcast [4 x i8]* %93 to float*
  %95 = load float, float* %94, align 4
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 5
  %97 = bitcast [4 x i8]* %96 to float*
  %98 = load float, float* %97, align 4
  %99 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float, float)***
  %100 = load void (%class.GrGLSLProgramDataManager*, i32, float, float)**, void (%class.GrGLSLProgramDataManager*, i32, float, float)*** %99, align 8
  %101 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float)** %100, i64 8
  %102 = load void (%class.GrGLSLProgramDataManager*, i32, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float)** %101, align 8
  tail call void %102(%class.GrGLSLProgramDataManager* %1, i32 %92, float %95, float %98) #7
  %103 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 3, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = bitcast [4 x i8]* %90 to float*
  %106 = load float, float* %105, align 4
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 3
  %108 = bitcast [4 x i8]* %107 to float*
  %109 = load float, float* %108, align 4
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 1
  %111 = bitcast [4 x i8]* %110 to float*
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 4
  %114 = bitcast [4 x i8]* %113 to float*
  %115 = load float, float* %114, align 4
  %116 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)***
  %117 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)**, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*** %116, align 8
  %118 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %117, i64 16
  %119 = load void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)*, void (%class.GrGLSLProgramDataManager*, i32, float, float, float, float)** %118, align 8
  tail call void %119(%class.GrGLSLProgramDataManager* %1, i32 %104, float %106, float %109, float %112, float %115) #7
  %120 = load i32, i32* %8, align 8
  %121 = and i32 %120, 4
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %89
  %124 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 5, i32 0
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %5, i64 0, i32 4, i32 0
  %127 = bitcast %class.GrGLSLProgramDataManager* %1 to void (%class.GrGLSLProgramDataManager*, i32, i32, float*)***
  %128 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)**, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*** %127, align 8
  %129 = getelementptr inbounds void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %128, i64 17
  %130 = load void (%class.GrGLSLProgramDataManager*, i32, i32, float*)*, void (%class.GrGLSLProgramDataManager*, i32, i32, float*)** %129, align 8
  tail call void %130(%class.GrGLSLProgramDataManager* %1, i32 %125, i32 1, float* %126) #7
  br label %131

131:                                              ; preds = %89, %123
  ret void
}

declare float @_ZNK8SkMatrix11getMaxScaleEv(%class.SkMatrix*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14GrStrokeShader19getGLSLProcessorKeyERK12GrShaderCapsP21GrProcessorKeyBuilder(%class.GrStrokeShader*, %class.GrShaderCaps* nocapture readnone dereferenceable(144), %class.GrProcessorKeyBuilder*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  br i1 %6, label %9, label %12

9:                                                ; preds = %3
  %10 = shl i32 %8, 4
  %11 = and i32 %10, -32
  br label %24

12:                                               ; preds = %3
  %13 = and i32 %8, 2
  %14 = icmp eq i32 %13, 0
  %15 = shl i32 %8, 2
  %16 = and i32 %15, 1073741816
  %17 = or i32 %16, %5
  %18 = shl i32 %17, 2
  br i1 %14, label %19, label %24

19:                                               ; preds = %12
  %20 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 3, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = lshr i32 %21, 16
  %23 = and i32 %22, 255
  br label %24

24:                                               ; preds = %9, %12, %19
  %25 = phi i32 [ %18, %19 ], [ %18, %12 ], [ %11, %9 ]
  %26 = phi i32 [ %23, %19 ], [ 0, %12 ], [ 0, %9 ]
  %27 = or i32 %26, %25
  %28 = shl i32 %27, 1
  %29 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 3
  %30 = tail call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %29) #7
  %31 = icmp eq i32 %30, 0
  %32 = zext i1 %31 to i32
  %33 = or i32 %28, %32
  %34 = bitcast %class.GrProcessorKeyBuilder* %2 to void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)***
  %35 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %34, align 8
  %36 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %35, i64 2
  %37 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %36, align 8
  tail call void %37(%class.GrProcessorKeyBuilder* %2, i32 32, i32 %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0)) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.GrGLSLGeometryProcessor* @_ZNK14GrStrokeShader18createGLSLInstanceERK12GrShaderCaps(%class.GrStrokeShader* nocapture readonly, %class.GrShaderCaps* nocapture readnone dereferenceable(144)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %25 [
    i32 0, label %5
    i32 1, label %15
    i32 2, label %15
  ]

5:                                                ; preds = %2
  %6 = tail call i8* @_Znwm(i64 56) #11
  %7 = bitcast i8* %6 to i32 (...)***
  %8 = getelementptr inbounds i8, i8* %6, i64 16
  %9 = bitcast i8* %8 to i64*
  %10 = getelementptr inbounds i8, i8* %6, i64 8
  %11 = bitcast i8* %10 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %11, align 8
  store i64 1, i64* %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV18GrStrokeShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %12 = getelementptr inbounds i8, i8* %6, i64 24
  %13 = getelementptr inbounds i8, i8* %6, i64 48
  %14 = bitcast i8* %13 to %class.SkString*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 -1, i64 20, i1 false) #7
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %14) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV30GrStrokeTessellationShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  br label %26

15:                                               ; preds = %2, %2
  %16 = tail call i8* @_Znwm(i64 56) #11
  %17 = bitcast i8* %16 to i32 (...)***
  %18 = getelementptr inbounds i8, i8* %16, i64 16
  %19 = bitcast i8* %18 to i64*
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to %"struct.GrGLSLGeometryProcessor::TransformInfo"**
  store %"struct.GrGLSLGeometryProcessor::TransformInfo"* null, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %21, align 8
  store i64 1, i64* %19, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV18GrStrokeShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %22 = getelementptr inbounds i8, i8* %16, i64 24
  %23 = getelementptr inbounds i8, i8* %16, i64 48
  %24 = bitcast i8* %23 to %class.SkString*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 -1, i64 20, i1 false) #7
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %24) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV27GrStrokeInstancedShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  br label %26

25:                                               ; preds = %2
  tail call void @llvm.trap()
  unreachable

26:                                               ; preds = %15, %5
  %27 = phi i8* [ %16, %15 ], [ %6, %5 ]
  %28 = bitcast i8* %27 to %class.GrGLSLGeometryProcessor*
  ret %class.GrGLSLGeometryProcessor* %28
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14GrStrokeShaderD2Ev(%class.GrStrokeShader*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 80
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #7
  br label %12

12:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14GrStrokeShaderD0Ev(%class.GrStrokeShader*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV14GrStrokeShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 88
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %0, i64 0, i32 6, i32 0, i32 0, i64 80
  %10 = bitcast i8* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_Z7sk_freePv(i8* %11) #7
  br label %12

12:                                               ; preds = %1, %8
  %13 = bitcast %class.GrStrokeShader* %0 to i8*
  tail call void @_ZN11GrProcessordlEPv(i8* %13) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK14GrStrokeShader4nameEv(%class.GrStrokeShader*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(96) %"class.GrGeometryProcessor::TextureSampler"* @_ZNK19GrGeometryProcessor16onTextureSamplerEi(%class.GrGeometryProcessor*, i32) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.18, i64 0, i64 0), i32 304, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18GrStrokeShaderImplD2Ev(%class.GrStrokeShaderImpl*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV18GrStrokeShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 6
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %3) #7
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 1, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %4, i64 0, i32 0
  br label %15

11:                                               ; preds = %15, %1
  %12 = phi i64 [ %6, %1 ], [ %25, %15 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %32, label %29

15:                                               ; preds = %15, %9
  %16 = phi i64 [ 0, %9 ], [ %24, %15 ]
  %17 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %10, align 8
  %18 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %18) #7
  %19 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %19) #7
  %20 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %20) #7
  %21 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %21) #7
  %22 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %22) #7
  %23 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %23) #7
  %24 = add nuw nsw i64 %16, 1
  %25 = load i64, i64* %5, align 8
  %26 = lshr i64 %25, 1
  %27 = and i64 %26, 2147483647
  %28 = icmp ult i64 %24, %27
  br i1 %28, label %15, label %11

29:                                               ; preds = %11
  %30 = bitcast %class.SkTArray* %4 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @_Z7sk_freePv(i8* %31) #7
  br label %32

32:                                               ; preds = %11, %29
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18GrStrokeShaderImplD0Ev(%class.GrStrokeShaderImpl*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.20, i64 0, i64 0), i32 139, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.20, i64 0, i64 0), i32 145, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i64 0, i64 0)) #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #3

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #3

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #7

declare void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString*, i8*, %struct.__va_list_tag*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #7

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #8

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %14, %1
  %11 = phi i64 [ %5, %1 ], [ %19, %14 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %26, label %23

14:                                               ; preds = %14, %8
  %15 = phi i64 [ 0, %8 ], [ %18, %14 ]
  %16 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %9, align 8
  %17 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15
  tail call void @_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev(%"struct.GrGLSLGeometryProcessor::TransformInfo"* %17) #7
  %18 = add nuw nsw i64 %15, 1
  %19 = load i64, i64* %4, align 8
  %20 = lshr i64 %19, 1
  %21 = and i64 %20, 2147483647
  %22 = icmp ult i64 %18, %21
  br i1 %22, label %14, label %10

23:                                               ; preds = %10
  %24 = bitcast %class.SkTArray* %3 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @_Z7sk_freePv(i8* %25) #7
  br label %26

26:                                               ; preds = %10, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD0Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev(%"struct.GrGLSLGeometryProcessor::TransformInfo"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %2) #7
  %3 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %3) #7
  %4 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %4) #7
  %5 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %5) #7
  %6 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %6) #7
  %7 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %7) #7
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZN11GrProcessordlEPv(i8*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
