; ModuleID = '../../third_party/libwebp/src/utils/huffman_encode_utils.c'
source_filename = "../../third_party/libwebp/src/utils/huffman_encode_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.HuffmanTreeCode = type { i32, i8*, i16* }
%struct.HuffmanTreeToken = type { i8, i8 }
%struct.HuffmanTree = type { i32, i32, i32, i32 }

@kReversedBits = internal unnamed_addr constant [16 x i8] c"\00\08\04\0C\02\0A\06\0E\01\09\05\0D\03\0B\07\0F", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LCreateCompressedHuffmanTree(%struct.HuffmanTreeCode* nocapture readonly, %struct.HuffmanTreeToken*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %142

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %0, i64 0, i32 1
  %9 = sext i32 %5 to i64
  br label %10

10:                                               ; preds = %7, %138
  %11 = phi i32 [ 0, %7 ], [ %28, %138 ]
  %12 = phi i32 [ 8, %7 ], [ %140, %138 ]
  %13 = phi %struct.HuffmanTreeToken* [ %1, %7 ], [ %139, %138 ]
  %14 = load i8*, i8** %8, align 8
  %15 = sext i32 %11 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  br label %19

19:                                               ; preds = %23, %10
  %20 = phi i64 [ %21, %23 ], [ %15, %10 ]
  %21 = add nsw i64 %20, 1
  %22 = icmp slt i64 %21, %9
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = getelementptr inbounds i8, i8* %14, i64 %21
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, %17
  br i1 %26, label %19, label %27

27:                                               ; preds = %19, %23
  %28 = trunc i64 %21 to i32
  %29 = sub nsw i32 %28, %11
  %30 = icmp eq i8 %17, 0
  br i1 %30, label %31, label %68

31:                                               ; preds = %27
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %138

33:                                               ; preds = %31
  %34 = icmp slt i32 %29, 3
  br i1 %34, label %35, label %45

35:                                               ; preds = %63, %33
  %36 = phi %struct.HuffmanTreeToken* [ %13, %33 ], [ %65, %63 ]
  %37 = phi i32 [ %29, %33 ], [ %66, %63 ]
  %38 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %36, i64 0, i32 0
  %39 = zext i32 %37 to i64
  %40 = shl nuw nsw i64 %39, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 0, i64 %40, i1 false) #5
  %41 = add nsw i32 %37, -1
  %42 = zext i32 %41 to i64
  %43 = getelementptr %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %36, i64 1
  %44 = getelementptr %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %43, i64 %42
  br label %138

45:                                               ; preds = %33, %63
  %46 = phi i32 [ %66, %63 ], [ %29, %33 ]
  %47 = phi %struct.HuffmanTreeToken* [ %65, %63 ], [ %13, %33 ]
  %48 = icmp slt i32 %46, 11
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 0, i32 0
  store i8 17, i8* %50, align 1
  %51 = trunc i32 %46 to i8
  %52 = add nsw i8 %51, -3
  %53 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 0, i32 1
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 1
  br label %138

55:                                               ; preds = %45
  %56 = icmp slt i32 %46, 139
  %57 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 0, i32 0
  store i8 18, i8* %57, align 1
  br i1 %56, label %58, label %63

58:                                               ; preds = %55
  %59 = trunc i32 %46 to i8
  %60 = add i8 %59, -11
  %61 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 0, i32 1
  store i8 %60, i8* %61, align 1
  %62 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 1
  br label %138

63:                                               ; preds = %55
  %64 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 0, i32 1
  store i8 127, i8* %64, align 1
  %65 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %47, i64 1
  %66 = add nsw i32 %46, -138
  %67 = icmp slt i32 %66, 3
  br i1 %67, label %35, label %45

68:                                               ; preds = %27
  %69 = icmp eq i32 %12, %18
  br i1 %69, label %75, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %13, i64 0, i32 0
  store i8 %17, i8* %71, align 1
  %72 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %13, i64 0, i32 1
  store i8 0, i8* %72, align 1
  %73 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %13, i64 1
  %74 = add nsw i32 %29, -1
  br label %75

75:                                               ; preds = %70, %68
  %76 = phi %struct.HuffmanTreeToken* [ %73, %70 ], [ %13, %68 ]
  %77 = phi i32 [ %74, %70 ], [ %29, %68 ]
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %138

79:                                               ; preds = %75
  %80 = icmp slt i32 %77, 3
  br i1 %80, label %81, label %111

81:                                               ; preds = %121, %79
  %82 = phi i32 [ %77, %79 ], [ %124, %121 ]
  %83 = phi %struct.HuffmanTreeToken* [ %76, %79 ], [ %123, %121 ]
  %84 = add i32 %82, -1
  %85 = and i32 %82, 7
  %86 = icmp ult i32 %84, 7
  br i1 %86, label %126, label %87

87:                                               ; preds = %81
  %88 = sub i32 %82, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi %struct.HuffmanTreeToken* [ %83, %87 ], [ %108, %89 ]
  %91 = phi i32 [ %88, %87 ], [ %109, %89 ]
  %92 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 0, i32 0
  store i8 %17, i8* %92, align 1
  %93 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 0, i32 1
  store i8 0, i8* %93, align 1
  %94 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 1, i32 0
  store i8 %17, i8* %94, align 1
  %95 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 1, i32 1
  store i8 0, i8* %95, align 1
  %96 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 2, i32 0
  store i8 %17, i8* %96, align 1
  %97 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 2, i32 1
  store i8 0, i8* %97, align 1
  %98 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 3, i32 0
  store i8 %17, i8* %98, align 1
  %99 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 3, i32 1
  store i8 0, i8* %99, align 1
  %100 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 4, i32 0
  store i8 %17, i8* %100, align 1
  %101 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 4, i32 1
  store i8 0, i8* %101, align 1
  %102 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 5, i32 0
  store i8 %17, i8* %102, align 1
  %103 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 5, i32 1
  store i8 0, i8* %103, align 1
  %104 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 6, i32 0
  store i8 %17, i8* %104, align 1
  %105 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 6, i32 1
  store i8 0, i8* %105, align 1
  %106 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 7, i32 0
  store i8 %17, i8* %106, align 1
  %107 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 7, i32 1
  store i8 0, i8* %107, align 1
  %108 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %90, i64 8
  %109 = add i32 %91, -8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %126, label %89

111:                                              ; preds = %79, %121
  %112 = phi %struct.HuffmanTreeToken* [ %123, %121 ], [ %76, %79 ]
  %113 = phi i32 [ %124, %121 ], [ %77, %79 ]
  %114 = icmp slt i32 %113, 7
  %115 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %112, i64 0, i32 0
  store i8 16, i8* %115, align 1
  br i1 %114, label %116, label %121

116:                                              ; preds = %111
  %117 = trunc i32 %113 to i8
  %118 = add nsw i8 %117, -3
  %119 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %112, i64 0, i32 1
  store i8 %118, i8* %119, align 1
  %120 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %112, i64 1
  br label %138

121:                                              ; preds = %111
  %122 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %112, i64 0, i32 1
  store i8 3, i8* %122, align 1
  %123 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %112, i64 1
  %124 = add nsw i32 %113, -6
  %125 = icmp slt i32 %124, 3
  br i1 %125, label %81, label %111

126:                                              ; preds = %89, %81
  %127 = phi %struct.HuffmanTreeToken* [ undef, %81 ], [ %108, %89 ]
  %128 = phi %struct.HuffmanTreeToken* [ %83, %81 ], [ %108, %89 ]
  %129 = icmp eq i32 %85, 0
  br i1 %129, label %138, label %130

130:                                              ; preds = %126, %130
  %131 = phi %struct.HuffmanTreeToken* [ %135, %130 ], [ %128, %126 ]
  %132 = phi i32 [ %136, %130 ], [ %85, %126 ]
  %133 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %131, i64 0, i32 0
  store i8 %17, i8* %133, align 1
  %134 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %131, i64 0, i32 1
  store i8 0, i8* %134, align 1
  %135 = getelementptr inbounds %struct.HuffmanTreeToken, %struct.HuffmanTreeToken* %131, i64 1
  %136 = add i32 %132, -1
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %130, !llvm.loop !2

138:                                              ; preds = %126, %130, %35, %116, %75, %58, %49, %31
  %139 = phi %struct.HuffmanTreeToken* [ %54, %49 ], [ %62, %58 ], [ %13, %31 ], [ %120, %116 ], [ %76, %75 ], [ %44, %35 ], [ %127, %126 ], [ %135, %130 ]
  %140 = phi i32 [ %12, %49 ], [ %12, %58 ], [ %12, %31 ], [ %18, %116 ], [ %18, %75 ], [ %12, %35 ], [ %18, %130 ], [ %18, %126 ]
  %141 = icmp sgt i32 %5, %28
  br i1 %141, label %10, label %142

142:                                              ; preds = %138, %3
  %143 = phi %struct.HuffmanTreeToken* [ %1, %3 ], [ %139, %138 ]
  %144 = ptrtoint %struct.HuffmanTreeToken* %143 to i64
  %145 = ptrtoint %struct.HuffmanTreeToken* %1 to i64
  %146 = sub i64 %144, %145
  %147 = lshr exact i64 %146, 1
  %148 = trunc i64 %147 to i32
  ret i32 %148
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LCreateHuffmanTree(i32* nocapture, i32, i8* nocapture, %struct.HuffmanTree*, %struct.HuffmanTreeCode* nocapture readonly) local_unnamed_addr #0 {
  %6 = alloca [16 x i32], align 16
  %7 = alloca [16 x i32], align 16
  %8 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %4, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = sext i32 %9 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 %10, i1 false)
  br label %11

11:                                               ; preds = %16, %5
  %12 = phi i64 [ %17, %16 ], [ %10, %5 ]
  %13 = icmp sgt i64 %12, -1
  br i1 %13, label %14, label %21

14:                                               ; preds = %11
  %15 = icmp eq i64 %12, 0
  br i1 %15, label %197, label %16

16:                                               ; preds = %14
  %17 = add nsw i64 %12, -1
  %18 = getelementptr inbounds i32, i32* %0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %11, label %21

21:                                               ; preds = %16, %11
  %22 = trunc i64 %12 to i32
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %197, label %24

24:                                               ; preds = %21
  %25 = load i32, i32* %0, align 4
  %26 = and i64 %12, 4294967295
  %27 = add i64 %12, 1
  %28 = and i64 %27, 4294967295
  br label %29

29:                                               ; preds = %60, %24
  %30 = phi i64 [ 0, %24 ], [ %63, %60 ]
  %31 = phi i32 [ 0, %24 ], [ %62, %60 ]
  %32 = phi i32 [ %25, %24 ], [ %61, %60 ]
  %33 = add nsw i64 %30, -1
  %34 = getelementptr i8, i8* %2, i64 %33
  %35 = icmp eq i64 %30, %26
  br i1 %35, label %40, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds i32, i32* %0, i64 %30
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %32
  br i1 %39, label %58, label %40

40:                                               ; preds = %36, %29
  %41 = icmp eq i32 %32, 0
  %42 = icmp sgt i32 %31, 4
  %43 = and i1 %42, %41
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = icmp ne i32 %32, 0
  %46 = icmp sgt i32 %31, 6
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %54

48:                                               ; preds = %44, %40
  %49 = add nsw i32 %31, -1
  %50 = zext i32 %49 to i64
  %51 = sub nsw i64 0, %50
  %52 = getelementptr i8, i8* %34, i64 %51
  %53 = zext i32 %31 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 1, i64 %53, i1 false) #5
  br label %54

54:                                               ; preds = %48, %44
  br i1 %35, label %60, label %55

55:                                               ; preds = %54
  %56 = getelementptr inbounds i32, i32* %0, i64 %30
  %57 = load i32, i32* %56, align 4
  br label %60

58:                                               ; preds = %36
  %59 = add nsw i32 %31, 1
  br label %60

60:                                               ; preds = %58, %55, %54
  %61 = phi i32 [ %57, %55 ], [ %32, %54 ], [ %32, %58 ]
  %62 = phi i32 [ 1, %55 ], [ 1, %54 ], [ %59, %58 ]
  %63 = add nuw nsw i64 %30, 1
  %64 = icmp eq i64 %63, %28
  br i1 %64, label %65, label %29

65:                                               ; preds = %60
  %66 = load i32, i32* %0, align 4
  %67 = shl i64 %12, 32
  %68 = add i64 %67, -12884901888
  %69 = ashr exact i64 %68, 32
  %70 = ashr exact i64 %67, 32
  br label %71

71:                                               ; preds = %191, %65
  %72 = phi i64 [ %195, %191 ], [ 0, %65 ]
  %73 = phi i32 [ %194, %191 ], [ 0, %65 ]
  %74 = phi i32 [ %193, %191 ], [ %66, %65 ]
  %75 = phi i32 [ %192, %191 ], [ 0, %65 ]
  %76 = icmp eq i64 %72, %26
  br i1 %76, label %96, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds i8, i8* %2, i64 %72
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %96

81:                                               ; preds = %77
  %82 = icmp eq i64 %72, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %81
  %84 = add nsw i64 %72, -1
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %96

88:                                               ; preds = %83, %81
  %89 = getelementptr inbounds i32, i32* %0, i64 %72
  %90 = load i32, i32* %89, align 4
  %91 = sub nsw i32 %90, %74
  %92 = icmp slt i32 %91, 0
  %93 = sub nsw i32 0, %91
  %94 = select i1 %92, i32 %93, i32 %91
  %95 = icmp sgt i32 %94, 3
  br i1 %95, label %96, label %183

96:                                               ; preds = %88, %83, %77, %71
  %97 = icmp ugt i32 %75, 3
  br i1 %97, label %102, label %98

98:                                               ; preds = %96
  %99 = icmp eq i32 %75, 3
  %100 = icmp eq i32 %73, 0
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %151

102:                                              ; preds = %98, %96
  %103 = lshr i32 %75, 1
  %104 = add i32 %103, %73
  %105 = udiv i32 %104, %75
  %106 = icmp ugt i32 %75, %104
  %107 = select i1 %106, i32 1, i32 %105
  %108 = icmp eq i32 %73, 0
  %109 = select i1 %108, i32 0, i32 %107
  %110 = zext i32 %75 to i64
  %111 = add nsw i64 %110, -1
  %112 = and i64 %110, 3
  %113 = icmp ult i64 %111, 3
  br i1 %113, label %138, label %114

114:                                              ; preds = %102
  %115 = sub nsw i64 %110, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %135, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %136, %116 ]
  %119 = xor i64 %117, 4294967295
  %120 = add nuw i64 %119, %72
  %121 = and i64 %120, 4294967295
  %122 = getelementptr inbounds i32, i32* %0, i64 %121
  store i32 %109, i32* %122, align 4
  %123 = xor i64 %117, 4294967294
  %124 = add nuw i64 %123, %72
  %125 = and i64 %124, 4294967295
  %126 = getelementptr inbounds i32, i32* %0, i64 %125
  store i32 %109, i32* %126, align 4
  %127 = xor i64 %117, 4294967293
  %128 = add nuw i64 %127, %72
  %129 = and i64 %128, 4294967295
  %130 = getelementptr inbounds i32, i32* %0, i64 %129
  store i32 %109, i32* %130, align 4
  %131 = xor i64 %117, 4294967292
  %132 = add nuw i64 %131, %72
  %133 = and i64 %132, 4294967295
  %134 = getelementptr inbounds i32, i32* %0, i64 %133
  store i32 %109, i32* %134, align 4
  %135 = add nuw nsw i64 %117, 4
  %136 = add i64 %118, -4
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %116

138:                                              ; preds = %116, %102
  %139 = phi i64 [ 0, %102 ], [ %135, %116 ]
  %140 = icmp eq i64 %112, 0
  br i1 %140, label %151, label %141

141:                                              ; preds = %138, %141
  %142 = phi i64 [ %148, %141 ], [ %139, %138 ]
  %143 = phi i64 [ %149, %141 ], [ %112, %138 ]
  %144 = xor i64 %142, 4294967295
  %145 = add nuw i64 %144, %72
  %146 = and i64 %145, 4294967295
  %147 = getelementptr inbounds i32, i32* %0, i64 %146
  store i32 %109, i32* %147, align 4
  %148 = add nuw nsw i64 %142, 1
  %149 = add i64 %143, -1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %141, !llvm.loop !4

151:                                              ; preds = %138, %141, %98
  %152 = icmp slt i64 %72, %69
  br i1 %152, label %153, label %173

153:                                              ; preds = %151
  %154 = getelementptr inbounds i32, i32* %0, i64 %72
  %155 = load i32, i32* %154, align 4
  %156 = add nuw nsw i64 %72, 1
  %157 = and i64 %156, 4294967295
  %158 = getelementptr inbounds i32, i32* %0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = add nuw i64 %72, 2
  %161 = and i64 %160, 4294967295
  %162 = getelementptr inbounds i32, i32* %0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = add nuw i64 %72, 3
  %165 = and i64 %164, 4294967295
  %166 = getelementptr inbounds i32, i32* %0, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = add i32 %155, 2
  %169 = add i32 %168, %159
  %170 = add i32 %169, %163
  %171 = add i32 %170, %167
  %172 = lshr i32 %171, 2
  br label %178

173:                                              ; preds = %151
  %174 = icmp slt i64 %72, %70
  br i1 %174, label %175, label %178

175:                                              ; preds = %173
  %176 = getelementptr inbounds i32, i32* %0, i64 %72
  %177 = load i32, i32* %176, align 4
  br label %178

178:                                              ; preds = %175, %173, %153
  %179 = phi i32 [ %172, %153 ], [ %177, %175 ], [ 0, %173 ]
  br i1 %76, label %191, label %180

180:                                              ; preds = %178
  %181 = getelementptr inbounds i32, i32* %0, i64 %72
  %182 = load i32, i32* %181, align 4
  br label %191

183:                                              ; preds = %88
  %184 = add i32 %75, 1
  %185 = add i32 %90, %73
  %186 = icmp ugt i32 %184, 3
  br i1 %186, label %187, label %191

187:                                              ; preds = %183
  %188 = lshr i32 %184, 1
  %189 = add i32 %185, %188
  %190 = udiv i32 %189, %184
  br label %191

191:                                              ; preds = %187, %183, %180, %178
  %192 = phi i32 [ %184, %187 ], [ %184, %183 ], [ 1, %178 ], [ 1, %180 ]
  %193 = phi i32 [ %190, %187 ], [ %74, %183 ], [ %179, %178 ], [ %179, %180 ]
  %194 = phi i32 [ %185, %187 ], [ %185, %183 ], [ 0, %178 ], [ %182, %180 ]
  %195 = add nuw nsw i64 %72, 1
  %196 = icmp eq i64 %195, %28
  br i1 %196, label %197, label %71

197:                                              ; preds = %14, %191, %21
  %198 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %4, i64 0, i32 1
  %199 = load i8*, i8** %198, align 8
  %200 = icmp sgt i32 %9, 0
  br i1 %200, label %201, label %486

201:                                              ; preds = %197
  %202 = zext i32 %9 to i64
  %203 = icmp ult i32 %9, 8
  br i1 %203, label %276, label %204

204:                                              ; preds = %201
  %205 = and i64 %202, 4294967288
  %206 = add nsw i64 %205, -8
  %207 = lshr exact i64 %206, 3
  %208 = add nuw nsw i64 %207, 1
  %209 = and i64 %208, 1
  %210 = icmp eq i64 %206, 0
  br i1 %210, label %246, label %211

211:                                              ; preds = %204
  %212 = sub nuw nsw i64 %208, %209
  br label %213

213:                                              ; preds = %213, %211
  %214 = phi i64 [ 0, %211 ], [ %243, %213 ]
  %215 = phi <4 x i32> [ zeroinitializer, %211 ], [ %241, %213 ]
  %216 = phi <4 x i32> [ zeroinitializer, %211 ], [ %242, %213 ]
  %217 = phi i64 [ %212, %211 ], [ %244, %213 ]
  %218 = getelementptr inbounds i32, i32* %0, i64 %214
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4
  %221 = getelementptr inbounds i32, i32* %218, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 4
  %224 = icmp ne <4 x i32> %220, zeroinitializer
  %225 = icmp ne <4 x i32> %223, zeroinitializer
  %226 = zext <4 x i1> %224 to <4 x i32>
  %227 = zext <4 x i1> %225 to <4 x i32>
  %228 = add nuw nsw <4 x i32> %215, %226
  %229 = add nuw nsw <4 x i32> %216, %227
  %230 = or i64 %214, 8
  %231 = getelementptr inbounds i32, i32* %0, i64 %230
  %232 = bitcast i32* %231 to <4 x i32>*
  %233 = load <4 x i32>, <4 x i32>* %232, align 4
  %234 = getelementptr inbounds i32, i32* %231, i64 4
  %235 = bitcast i32* %234 to <4 x i32>*
  %236 = load <4 x i32>, <4 x i32>* %235, align 4
  %237 = icmp ne <4 x i32> %233, zeroinitializer
  %238 = icmp ne <4 x i32> %236, zeroinitializer
  %239 = zext <4 x i1> %237 to <4 x i32>
  %240 = zext <4 x i1> %238 to <4 x i32>
  %241 = add nuw nsw <4 x i32> %228, %239
  %242 = add nuw nsw <4 x i32> %229, %240
  %243 = add i64 %214, 16
  %244 = add i64 %217, -2
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %246, label %213, !llvm.loop !5

246:                                              ; preds = %213, %204
  %247 = phi <4 x i32> [ undef, %204 ], [ %241, %213 ]
  %248 = phi <4 x i32> [ undef, %204 ], [ %242, %213 ]
  %249 = phi i64 [ 0, %204 ], [ %243, %213 ]
  %250 = phi <4 x i32> [ zeroinitializer, %204 ], [ %241, %213 ]
  %251 = phi <4 x i32> [ zeroinitializer, %204 ], [ %242, %213 ]
  %252 = icmp eq i64 %209, 0
  br i1 %252, label %266, label %253

253:                                              ; preds = %246
  %254 = getelementptr inbounds i32, i32* %0, i64 %249
  %255 = getelementptr inbounds i32, i32* %254, i64 4
  %256 = bitcast i32* %255 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4
  %258 = icmp ne <4 x i32> %257, zeroinitializer
  %259 = zext <4 x i1> %258 to <4 x i32>
  %260 = add nuw nsw <4 x i32> %251, %259
  %261 = bitcast i32* %254 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 4
  %263 = icmp ne <4 x i32> %262, zeroinitializer
  %264 = zext <4 x i1> %263 to <4 x i32>
  %265 = add nuw nsw <4 x i32> %250, %264
  br label %266

266:                                              ; preds = %246, %253
  %267 = phi <4 x i32> [ %247, %246 ], [ %265, %253 ]
  %268 = phi <4 x i32> [ %248, %246 ], [ %260, %253 ]
  %269 = add nuw <4 x i32> %268, %267
  %270 = shufflevector <4 x i32> %269, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %271 = add <4 x i32> %269, %270
  %272 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %273 = add <4 x i32> %271, %272
  %274 = extractelement <4 x i32> %273, i32 0
  %275 = icmp eq i64 %205, %202
  br i1 %275, label %289, label %276

276:                                              ; preds = %266, %201
  %277 = phi i64 [ 0, %201 ], [ %205, %266 ]
  %278 = phi i32 [ 0, %201 ], [ %274, %266 ]
  br label %279

279:                                              ; preds = %276, %279
  %280 = phi i64 [ %287, %279 ], [ %277, %276 ]
  %281 = phi i32 [ %286, %279 ], [ %278, %276 ]
  %282 = getelementptr inbounds i32, i32* %0, i64 %280
  %283 = load i32, i32* %282, align 4
  %284 = icmp ne i32 %283, 0
  %285 = zext i1 %284 to i32
  %286 = add nuw nsw i32 %281, %285
  %287 = add nuw nsw i64 %280, 1
  %288 = icmp eq i64 %287, %202
  br i1 %288, label %289, label %279, !llvm.loop !7

289:                                              ; preds = %279, %266
  %290 = phi i32 [ %274, %266 ], [ %286, %279 ]
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %486, label %292

292:                                              ; preds = %289
  %293 = zext i32 %290 to i64
  %294 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %293
  %295 = bitcast %struct.HuffmanTree* %3 to i8*
  %296 = icmp eq i32 %290, 1
  %297 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 0, i32 1
  %298 = icmp sgt i32 %9, 1
  %299 = add nsw i32 %290, -2
  %300 = zext i32 %299 to i64
  %301 = add nsw i64 %202, -1
  %302 = add nsw i64 %202, -9
  %303 = lshr i64 %302, 3
  %304 = add nuw nsw i64 %303, 1
  %305 = icmp ult i64 %301, 8
  %306 = and i64 %301, -8
  %307 = or i64 %306, 1
  %308 = and i64 %304, 1
  %309 = icmp eq i64 %303, 0
  %310 = sub nuw nsw i64 %304, %308
  %311 = icmp eq i64 %308, 0
  %312 = icmp eq i64 %301, %306
  br label %313

313:                                              ; preds = %482, %292
  %314 = phi i32 [ 1, %292 ], [ %485, %482 ]
  br label %315

315:                                              ; preds = %313, %331
  %316 = phi i64 [ %333, %331 ], [ 0, %313 ]
  %317 = phi i32 [ %332, %331 ], [ 0, %313 ]
  %318 = getelementptr inbounds i32, i32* %0, i64 %316
  %319 = load i32, i32* %318, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %331, label %321

321:                                              ; preds = %315
  %322 = icmp ult i32 %319, %314
  %323 = select i1 %322, i32 %314, i32 %319
  %324 = sext i32 %317 to i64
  %325 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %324, i32 0
  store i32 %323, i32* %325, align 4
  %326 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %324, i32 1
  %327 = trunc i64 %316 to i32
  store i32 %327, i32* %326, align 4
  %328 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %324, i32 2
  store i32 -1, i32* %328, align 4
  %329 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %324, i32 3
  store i32 -1, i32* %329, align 4
  %330 = add nsw i32 %317, 1
  br label %331

331:                                              ; preds = %321, %315
  %332 = phi i32 [ %330, %321 ], [ %317, %315 ]
  %333 = add nuw nsw i64 %316, 1
  %334 = icmp eq i64 %333, %202
  br i1 %334, label %335, label %315

335:                                              ; preds = %331
  tail call void @qsort(i8* %295, i64 %293, i64 16, i32 (i8*, i8*)* nonnull @CompareHuffmanTrees) #5
  br i1 %296, label %392, label %336

336:                                              ; preds = %335, %370
  %337 = phi i64 [ %342, %370 ], [ %293, %335 ]
  %338 = phi i64 [ %346, %370 ], [ 0, %335 ]
  %339 = phi i64 [ %390, %370 ], [ %300, %335 ]
  %340 = or i64 %338, 1
  %341 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %294, i64 %338
  %342 = add nsw i64 %337, -1
  %343 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %342
  %344 = bitcast %struct.HuffmanTree* %341 to i8*
  %345 = bitcast %struct.HuffmanTree* %343 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %344, i8* align 4 %345, i64 16, i1 false) #5
  %346 = add nuw nsw i64 %338, 2
  %347 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %294, i64 %340
  %348 = add nsw i64 %337, -2
  %349 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %348
  %350 = bitcast %struct.HuffmanTree* %347 to i8*
  %351 = bitcast %struct.HuffmanTree* %349 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %350, i8* align 4 %351, i64 16, i1 false) #5
  %352 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %347, i64 0, i32 0
  %353 = load i32, i32* %352, align 4
  %354 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %341, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = add i32 %355, %353
  %357 = icmp sgt i64 %348, 0
  br i1 %357, label %358, label %370

358:                                              ; preds = %336, %364
  %359 = phi i64 [ %365, %364 ], [ 0, %336 ]
  %360 = phi i32 [ %366, %364 ], [ 0, %336 ]
  %361 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %359, i32 0
  %362 = load i32, i32* %361, align 4
  %363 = icmp ugt i32 %362, %356
  br i1 %363, label %364, label %368

364:                                              ; preds = %358
  %365 = add nuw nsw i64 %359, 1
  %366 = add nuw nsw i32 %360, 1
  %367 = icmp eq i64 %365, %339
  br i1 %367, label %370, label %358

368:                                              ; preds = %358
  %369 = trunc i64 %359 to i32
  br label %370

370:                                              ; preds = %364, %368, %336
  %371 = phi i32 [ 0, %336 ], [ %369, %368 ], [ %366, %364 ]
  %372 = add nuw nsw i32 %371, 1
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %373
  %375 = bitcast %struct.HuffmanTree* %374 to i8*
  %376 = zext i32 %371 to i64
  %377 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %376
  %378 = bitcast %struct.HuffmanTree* %377 to i8*
  %379 = trunc i64 %348 to i32
  %380 = sub nsw i32 %379, %371
  %381 = sext i32 %380 to i64
  %382 = shl nsw i64 %381, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %375, i8* align 4 %378, i64 %382, i1 false) #5
  %383 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %377, i64 0, i32 0
  store i32 %356, i32* %383, align 4
  %384 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %376, i32 1
  store i32 -1, i32* %384, align 4
  %385 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %376, i32 2
  %386 = trunc i64 %340 to i32
  store i32 %386, i32* %385, align 4
  %387 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 %376, i32 3
  %388 = trunc i64 %338 to i32
  store i32 %388, i32* %387, align 4
  %389 = icmp sgt i64 %342, 1
  %390 = add nsw i64 %339, -1
  br i1 %389, label %336, label %391

391:                                              ; preds = %370
  tail call fastcc void @SetBitDepths(%struct.HuffmanTree* %3, %struct.HuffmanTree* %294, i8* %199, i32 0) #5
  br label %396

392:                                              ; preds = %335
  %393 = load i32, i32* %297, align 4
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %199, i64 %394
  store i8 1, i8* %395, align 1
  br label %396

396:                                              ; preds = %392, %391
  %397 = load i8, i8* %199, align 1
  %398 = zext i8 %397 to i32
  br i1 %298, label %399, label %482

399:                                              ; preds = %396
  br i1 %305, label %469, label %400

400:                                              ; preds = %399
  %401 = insertelement <4 x i32> undef, i32 %398, i32 0
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %309, label %437, label %403

403:                                              ; preds = %400, %403
  %404 = phi i64 [ %434, %403 ], [ 0, %400 ]
  %405 = phi <4 x i32> [ %432, %403 ], [ %402, %400 ]
  %406 = phi <4 x i32> [ %433, %403 ], [ %402, %400 ]
  %407 = phi i64 [ %435, %403 ], [ %310, %400 ]
  %408 = or i64 %404, 1
  %409 = getelementptr inbounds i8, i8* %199, i64 %408
  %410 = bitcast i8* %409 to <4 x i8>*
  %411 = load <4 x i8>, <4 x i8>* %410, align 1
  %412 = getelementptr inbounds i8, i8* %409, i64 4
  %413 = bitcast i8* %412 to <4 x i8>*
  %414 = load <4 x i8>, <4 x i8>* %413, align 1
  %415 = zext <4 x i8> %411 to <4 x i32>
  %416 = zext <4 x i8> %414 to <4 x i32>
  %417 = icmp ult <4 x i32> %405, %415
  %418 = icmp ult <4 x i32> %406, %416
  %419 = select <4 x i1> %417, <4 x i32> %415, <4 x i32> %405
  %420 = select <4 x i1> %418, <4 x i32> %416, <4 x i32> %406
  %421 = or i64 %404, 9
  %422 = getelementptr inbounds i8, i8* %199, i64 %421
  %423 = bitcast i8* %422 to <4 x i8>*
  %424 = load <4 x i8>, <4 x i8>* %423, align 1
  %425 = getelementptr inbounds i8, i8* %422, i64 4
  %426 = bitcast i8* %425 to <4 x i8>*
  %427 = load <4 x i8>, <4 x i8>* %426, align 1
  %428 = zext <4 x i8> %424 to <4 x i32>
  %429 = zext <4 x i8> %427 to <4 x i32>
  %430 = icmp ult <4 x i32> %419, %428
  %431 = icmp ult <4 x i32> %420, %429
  %432 = select <4 x i1> %430, <4 x i32> %428, <4 x i32> %419
  %433 = select <4 x i1> %431, <4 x i32> %429, <4 x i32> %420
  %434 = add i64 %404, 16
  %435 = add i64 %407, -2
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %437, label %403, !llvm.loop !9

437:                                              ; preds = %403, %400
  %438 = phi <4 x i32> [ undef, %400 ], [ %432, %403 ]
  %439 = phi <4 x i32> [ undef, %400 ], [ %433, %403 ]
  %440 = phi i64 [ 0, %400 ], [ %434, %403 ]
  %441 = phi <4 x i32> [ %402, %400 ], [ %432, %403 ]
  %442 = phi <4 x i32> [ %402, %400 ], [ %433, %403 ]
  br i1 %311, label %457, label %443

443:                                              ; preds = %437
  %444 = or i64 %440, 1
  %445 = getelementptr inbounds i8, i8* %199, i64 %444
  %446 = bitcast i8* %445 to <4 x i8>*
  %447 = load <4 x i8>, <4 x i8>* %446, align 1
  %448 = getelementptr inbounds i8, i8* %445, i64 4
  %449 = bitcast i8* %448 to <4 x i8>*
  %450 = load <4 x i8>, <4 x i8>* %449, align 1
  %451 = zext <4 x i8> %447 to <4 x i32>
  %452 = zext <4 x i8> %450 to <4 x i32>
  %453 = icmp ult <4 x i32> %442, %452
  %454 = select <4 x i1> %453, <4 x i32> %452, <4 x i32> %442
  %455 = icmp ult <4 x i32> %441, %451
  %456 = select <4 x i1> %455, <4 x i32> %451, <4 x i32> %441
  br label %457

457:                                              ; preds = %437, %443
  %458 = phi <4 x i32> [ %438, %437 ], [ %456, %443 ]
  %459 = phi <4 x i32> [ %439, %437 ], [ %454, %443 ]
  %460 = icmp ugt <4 x i32> %458, %459
  %461 = select <4 x i1> %460, <4 x i32> %458, <4 x i32> %459
  %462 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %463 = icmp ugt <4 x i32> %461, %462
  %464 = select <4 x i1> %463, <4 x i32> %461, <4 x i32> %462
  %465 = shufflevector <4 x i32> %464, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %466 = icmp ugt <4 x i32> %464, %465
  %467 = select <4 x i1> %466, <4 x i32> %464, <4 x i32> %465
  %468 = extractelement <4 x i32> %467, i32 0
  br i1 %312, label %482, label %469

469:                                              ; preds = %457, %399
  %470 = phi i64 [ 1, %399 ], [ %307, %457 ]
  %471 = phi i32 [ %398, %399 ], [ %468, %457 ]
  br label %472

472:                                              ; preds = %469, %472
  %473 = phi i64 [ %480, %472 ], [ %470, %469 ]
  %474 = phi i32 [ %479, %472 ], [ %471, %469 ]
  %475 = getelementptr inbounds i8, i8* %199, i64 %473
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = icmp ult i32 %474, %477
  %479 = select i1 %478, i32 %477, i32 %474
  %480 = add nuw nsw i64 %473, 1
  %481 = icmp eq i64 %480, %202
  br i1 %481, label %482, label %472, !llvm.loop !10

482:                                              ; preds = %472, %457, %396
  %483 = phi i32 [ %398, %396 ], [ %468, %457 ], [ %479, %472 ]
  %484 = icmp sgt i32 %483, %1
  %485 = shl i32 %314, 1
  br i1 %484, label %313, label %486

486:                                              ; preds = %482, %197, %289
  %487 = bitcast [16 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %487) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %487, i8 -86, i64 64, i1 false) #5
  %488 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %488) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %488, i8 0, i64 64, i1 false) #5
  %489 = load i32, i32* %8, align 8
  %490 = icmp sgt i32 %489, 0
  br i1 %490, label %491, label %577

491:                                              ; preds = %486
  %492 = load i8*, i8** %198, align 8
  %493 = zext i32 %489 to i64
  %494 = add nsw i64 %493, -1
  %495 = and i64 %493, 3
  %496 = icmp ult i64 %494, 3
  br i1 %496, label %532, label %497

497:                                              ; preds = %491
  %498 = sub nsw i64 %493, %495
  br label %499

499:                                              ; preds = %499, %497
  %500 = phi i64 [ 0, %497 ], [ %529, %499 ]
  %501 = phi i64 [ %498, %497 ], [ %530, %499 ]
  %502 = getelementptr inbounds i8, i8* %492, i64 %500
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i64
  %505 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %504
  %506 = load i32, i32* %505, align 4
  %507 = add nsw i32 %506, 1
  store i32 %507, i32* %505, align 4
  %508 = or i64 %500, 1
  %509 = getelementptr inbounds i8, i8* %492, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i64
  %512 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = add nsw i32 %513, 1
  store i32 %514, i32* %512, align 4
  %515 = or i64 %500, 2
  %516 = getelementptr inbounds i8, i8* %492, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i64
  %519 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %518
  %520 = load i32, i32* %519, align 4
  %521 = add nsw i32 %520, 1
  store i32 %521, i32* %519, align 4
  %522 = or i64 %500, 3
  %523 = getelementptr inbounds i8, i8* %492, i64 %522
  %524 = load i8, i8* %523, align 1
  %525 = zext i8 %524 to i64
  %526 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %525
  %527 = load i32, i32* %526, align 4
  %528 = add nsw i32 %527, 1
  store i32 %528, i32* %526, align 4
  %529 = add nuw nsw i64 %500, 4
  %530 = add i64 %501, -4
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %532, label %499

532:                                              ; preds = %499, %491
  %533 = phi i64 [ 0, %491 ], [ %529, %499 ]
  %534 = icmp eq i64 %495, 0
  br i1 %534, label %547, label %535

535:                                              ; preds = %532, %535
  %536 = phi i64 [ %544, %535 ], [ %533, %532 ]
  %537 = phi i64 [ %545, %535 ], [ %495, %532 ]
  %538 = getelementptr inbounds i8, i8* %492, i64 %536
  %539 = load i8, i8* %538, align 1
  %540 = zext i8 %539 to i64
  %541 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 %540
  %542 = load i32, i32* %541, align 4
  %543 = add nsw i32 %542, 1
  store i32 %543, i32* %541, align 4
  %544 = add nuw nsw i64 %536, 1
  %545 = add i64 %537, -1
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %547, label %535, !llvm.loop !11

547:                                              ; preds = %535, %532
  %548 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 1
  %549 = load i32, i32* %548, align 4
  %550 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 2
  %551 = load i32, i32* %550, align 8
  %552 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 3
  %553 = load i32, i32* %552, align 4
  %554 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 4
  %555 = load i32, i32* %554, align 16
  %556 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 5
  %557 = load i32, i32* %556, align 4
  %558 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 6
  %559 = load i32, i32* %558, align 8
  %560 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 7
  %561 = load i32, i32* %560, align 4
  %562 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 8
  %563 = load i32, i32* %562, align 16
  %564 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 9
  %565 = load i32, i32* %564, align 4
  %566 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 10
  %567 = load i32, i32* %566, align 8
  %568 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 11
  %569 = load i32, i32* %568, align 4
  %570 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 12
  %571 = load i32, i32* %570, align 16
  %572 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 13
  %573 = load i32, i32* %572, align 4
  %574 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 14
  %575 = load i32, i32* %574, align 8
  %576 = shl i32 %549, 1
  br label %577

577:                                              ; preds = %547, %486
  %578 = phi i32 [ %575, %547 ], [ 0, %486 ]
  %579 = phi i32 [ %573, %547 ], [ 0, %486 ]
  %580 = phi i32 [ %571, %547 ], [ 0, %486 ]
  %581 = phi i32 [ %569, %547 ], [ 0, %486 ]
  %582 = phi i32 [ %567, %547 ], [ 0, %486 ]
  %583 = phi i32 [ %565, %547 ], [ 0, %486 ]
  %584 = phi i32 [ %563, %547 ], [ 0, %486 ]
  %585 = phi i32 [ %561, %547 ], [ 0, %486 ]
  %586 = phi i32 [ %559, %547 ], [ 0, %486 ]
  %587 = phi i32 [ %557, %547 ], [ 0, %486 ]
  %588 = phi i32 [ %555, %547 ], [ 0, %486 ]
  %589 = phi i32 [ %553, %547 ], [ 0, %486 ]
  %590 = phi i32 [ %551, %547 ], [ 0, %486 ]
  %591 = phi i32 [ %576, %547 ], [ 0, %486 ]
  %592 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  store i32 0, i32* %592, align 16
  %593 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 0
  store i32 0, i32* %593, align 16
  %594 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %594, align 4
  %595 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 2
  store i32 %591, i32* %595, align 8
  %596 = add i32 %591, %590
  %597 = shl i32 %596, 1
  %598 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 3
  store i32 %597, i32* %598, align 4
  %599 = add i32 %597, %589
  %600 = shl i32 %599, 1
  %601 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 4
  store i32 %600, i32* %601, align 16
  %602 = add i32 %600, %588
  %603 = shl i32 %602, 1
  %604 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 5
  store i32 %603, i32* %604, align 4
  %605 = add i32 %603, %587
  %606 = shl i32 %605, 1
  %607 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 6
  store i32 %606, i32* %607, align 8
  %608 = add i32 %606, %586
  %609 = shl i32 %608, 1
  %610 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 7
  store i32 %609, i32* %610, align 4
  %611 = add i32 %609, %585
  %612 = shl i32 %611, 1
  %613 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 8
  store i32 %612, i32* %613, align 16
  %614 = add i32 %612, %584
  %615 = shl i32 %614, 1
  %616 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 9
  store i32 %615, i32* %616, align 4
  %617 = add i32 %615, %583
  %618 = shl i32 %617, 1
  %619 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 10
  store i32 %618, i32* %619, align 8
  %620 = add i32 %618, %582
  %621 = shl i32 %620, 1
  %622 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 11
  store i32 %621, i32* %622, align 4
  %623 = add i32 %621, %581
  %624 = shl i32 %623, 1
  %625 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 12
  store i32 %624, i32* %625, align 16
  %626 = add i32 %624, %580
  %627 = shl i32 %626, 1
  %628 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 13
  store i32 %627, i32* %628, align 4
  %629 = add i32 %627, %579
  %630 = shl i32 %629, 1
  %631 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 14
  store i32 %630, i32* %631, align 8
  %632 = add i32 %630, %578
  %633 = shl i32 %632, 1
  %634 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 15
  store i32 %633, i32* %634, align 4
  br i1 %490, label %635, label %707

635:                                              ; preds = %577
  %636 = getelementptr inbounds %struct.HuffmanTreeCode, %struct.HuffmanTreeCode* %4, i64 0, i32 2
  %637 = zext i32 %489 to i64
  br label %638

638:                                              ; preds = %698, %635
  %639 = phi i64 [ 0, %635 ], [ %705, %698 ]
  %640 = load i8*, i8** %198, align 8
  %641 = getelementptr inbounds i8, i8* %640, i64 %639
  %642 = load i8, i8* %641, align 1
  %643 = zext i8 %642 to i32
  %644 = zext i8 %642 to i64
  %645 = getelementptr inbounds [16 x i32], [16 x i32]* %6, i64 0, i64 %644
  %646 = load i32, i32* %645, align 4
  %647 = add i32 %646, 1
  store i32 %647, i32* %645, align 4
  %648 = icmp eq i8 %642, 0
  br i1 %648, label %698, label %649

649:                                              ; preds = %638
  %650 = add nsw i32 %643, -1
  %651 = lshr i32 %650, 2
  %652 = add nuw nsw i32 %651, 1
  %653 = and i32 %652, 1
  %654 = icmp eq i32 %651, 0
  br i1 %654, label %683, label %655

655:                                              ; preds = %649
  %656 = sub nuw nsw i32 %652, %653
  br label %657

657:                                              ; preds = %657, %655
  %658 = phi i32 [ 0, %655 ], [ %671, %657 ]
  %659 = phi i32 [ 0, %655 ], [ %679, %657 ]
  %660 = phi i32 [ %646, %655 ], [ %680, %657 ]
  %661 = phi i32 [ %656, %655 ], [ %681, %657 ]
  %662 = and i32 %660, 15
  %663 = zext i32 %662 to i64
  %664 = getelementptr inbounds [16 x i8], [16 x i8]* @kReversedBits, i64 0, i64 %663
  %665 = load i8, i8* %664, align 1
  %666 = zext i8 %665 to i32
  %667 = sub nsw i32 12, %658
  %668 = shl i32 %666, %667
  %669 = or i32 %668, %659
  %670 = lshr i32 %660, 4
  %671 = add nuw nsw i32 %658, 8
  %672 = and i32 %670, 15
  %673 = zext i32 %672 to i64
  %674 = getelementptr inbounds [16 x i8], [16 x i8]* @kReversedBits, i64 0, i64 %673
  %675 = load i8, i8* %674, align 1
  %676 = zext i8 %675 to i32
  %677 = sub nsw i32 8, %658
  %678 = shl i32 %676, %677
  %679 = or i32 %678, %669
  %680 = lshr i32 %660, 8
  %681 = add i32 %661, -2
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %683, label %657

683:                                              ; preds = %657, %649
  %684 = phi i32 [ undef, %649 ], [ %679, %657 ]
  %685 = phi i32 [ 0, %649 ], [ %671, %657 ]
  %686 = phi i32 [ 0, %649 ], [ %679, %657 ]
  %687 = phi i32 [ %646, %649 ], [ %680, %657 ]
  %688 = icmp eq i32 %653, 0
  br i1 %688, label %698, label %689

689:                                              ; preds = %683
  %690 = and i32 %687, 15
  %691 = zext i32 %690 to i64
  %692 = getelementptr inbounds [16 x i8], [16 x i8]* @kReversedBits, i64 0, i64 %691
  %693 = load i8, i8* %692, align 1
  %694 = zext i8 %693 to i32
  %695 = sub nsw i32 12, %685
  %696 = shl i32 %694, %695
  %697 = or i32 %696, %686
  br label %698

698:                                              ; preds = %689, %683, %638
  %699 = phi i32 [ 0, %638 ], [ %684, %683 ], [ %697, %689 ]
  %700 = sub nsw i32 16, %643
  %701 = lshr i32 %699, %700
  %702 = trunc i32 %701 to i16
  %703 = load i16*, i16** %636, align 8
  %704 = getelementptr inbounds i16, i16* %703, i64 %639
  store i16 %702, i16* %704, align 2
  %705 = add nuw nsw i64 %639, 1
  %706 = icmp eq i64 %705, %637
  br i1 %706, label %707, label %638

707:                                              ; preds = %698, %577
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %488) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %487) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @CompareHuffmanTrees(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast i8* %1 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %4, %6
  br i1 %7, label %19, label %8

8:                                                ; preds = %2
  %9 = icmp ult i32 %4, %6
  br i1 %9, label %19, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i8, i8* %1, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %13, %16
  %18 = select i1 %17, i32 -1, i32 1
  br label %19

19:                                               ; preds = %8, %2, %10
  %20 = phi i32 [ %18, %10 ], [ -1, %2 ], [ 1, %8 ]
  ret i32 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @SetBitDepths(%struct.HuffmanTree* nocapture readonly, %struct.HuffmanTree* readonly, i8*, i32) unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, -1
  br i1 %7, label %8, label %22

8:                                                ; preds = %4, %8
  %9 = phi i32 [ %20, %8 ], [ %6, %4 ]
  %10 = phi i32 [ %14, %8 ], [ %3, %4 ]
  %11 = phi %struct.HuffmanTree* [ %18, %8 ], [ %0, %4 ]
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %12
  %14 = add nsw i32 %10, 1
  tail call fastcc void @SetBitDepths(%struct.HuffmanTree* %13, %struct.HuffmanTree* %1, i8* %2, i32 %14)
  %15 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %17
  %19 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i64 %17, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %8, label %22

22:                                               ; preds = %8, %4
  %23 = phi %struct.HuffmanTree* [ %0, %4 ], [ %18, %8 ]
  %24 = phi i32 [ %3, %4 ], [ %14, %8 ]
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %23, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %2, i64 %28
  store i8 %25, i8* %29, align 1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8, !6}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !8, !6}
!11 = distinct !{!11, !3}
