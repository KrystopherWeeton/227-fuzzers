; ModuleID = '../../third_party/skia/src/shaders/SkComposeShader.cpp'
source_filename = "../../third_party/skia/src/shaders/SkComposeShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.98", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.140", %"class.std::__1::unique_ptr.146" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.97 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.97 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.101, %class.SkTHashMap.103, %class.SkTHashMap.112, %class.SkTArray.121, %class.SkTArray.123, i32, i8, [3 x i8] }>
%class.SkTArray.101 = type { %"class.std::__1::unique_ptr.102"*, i64 }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.123, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.2 }
%class.sk_sp.2 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap.103 = type { %class.SkTHashTable.104 }
%class.SkTHashTable.104 = type { i32, i32, %class.SkAutoTArray.105 }
%class.SkAutoTArray.105 = type { %"class.std::__1::unique_ptr.106" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.157" }
%"struct.std::__1::pair.157" = type { i32, i32 }
%class.SkTHashMap.112 = type { %class.SkTHashTable.113 }
%class.SkTHashTable.113 = type { i32, i32, %class.SkAutoTArray.114 }
%class.SkAutoTArray.114 = type { %"class.std::__1::unique_ptr.115" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.158" }
%"struct.std::__1::pair.158" = type { i32, %class.SkTArray.159* }
%class.SkTArray.159 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.121 = type { %"class.std::__1::unique_ptr.122"*, i64 }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.159, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.123 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.133" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.136 }
%class.SkFibBlockSizes.136 = type { i32 }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%class.SkMatrixProvider = type opaque
%class.GrColorInfo = type opaque
%class.SkMatrix = type { [9 x float], i32 }
%class.sk_sp = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.sk_sp.1 = type { %class.SkRuntimeEffect* }
%class.SkRuntimeEffect = type <{ %class.SkRefCnt.base, i32, %class.SkString, %"class.std::__1::unique_ptr", %"class.SkSL::FunctionDefinition"*, %"class.std::__1::vector", %"class.std::__1::vector.7", %"class.std::__1::vector.14", %"class.std::__1::unique_ptr.21", i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkSL::Program"* }
%"struct.SkSL::Program" = type opaque
%"class.SkSL::FunctionDefinition" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.SkRuntimeEffect::Uniform"*, %"struct.SkRuntimeEffect::Uniform"*, %"class.std::__1::__compressed_pair.4" }
%"struct.SkRuntimeEffect::Uniform" = type <{ %class.SkString, i64, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.SkRuntimeEffect::Uniform"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"struct.SkRuntimeEffect::Child"*, %"struct.SkRuntimeEffect::Child"*, %"class.std::__1::__compressed_pair.9" }
%"struct.SkRuntimeEffect::Child" = type { %class.SkString, i32, i32 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.SkRuntimeEffect::Child"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"struct.SkSL::SampleUsage"*, %"struct.SkSL::SampleUsage"*, %"class.std::__1::__compressed_pair.16" }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.SkSL::SampleUsage"* }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.SkFilterColorProgram* }
%class.SkFilterColorProgram = type <{ %"class.skvm::Program", %"class.std::__1::vector.30", i8, [7 x i8] }>
%"class.skvm::Program" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.skvm::Program::Impl"* }
%"struct.skvm::Program::Impl" = type opaque
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.SkFilterColorProgram::SampleCall"*, %"struct.SkFilterColorProgram::SampleCall"*, %"class.std::__1::__compressed_pair.32" }
%"struct.SkFilterColorProgram::SampleCall" = type { i32, i32, %union.anon }
%union.anon = type { %struct.SkRGBA4f }
%struct.SkRGBA4f = type { float, float, float, float }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.SkFilterColorProgram::SampleCall"* }
%class.sk_sp.40 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.SkRuntimeEffect::Result" = type { %class.sk_sp.1, %class.SkString }
%"struct.SkRuntimeEffect::Options" = type { i8, i8 }
%class.sk_sp.55 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.47*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.41" }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.55*, %class.SkReadBuffer*)* }
%class.sk_sp.47 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.48" }
%"struct.std::__1::atomic.48" = type { %"struct.std::__1::__atomic_base.49" }
%"struct.std::__1::__atomic_base.49" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl.51" }
%"struct.std::__1::__cxx_atomic_impl.51" = type { %"struct.std::__1::__cxx_atomic_base_impl.52" }
%"struct.std::__1::__cxx_atomic_base_impl.52" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.47*, i8*, i64, i8*)*, i8* }
%class.SkShader_Blend = type <{ %class.SkShaderBase.base, [4 x i8], %class.sk_sp, %class.sk_sp, i32, [4 x i8] }>
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.40*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.40*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.40*, %class.SkTypeface*, i8*)*, i8* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.56", [7 x i8] }>
%"struct.std::__1::atomic.56" = type { %"struct.std::__1::__atomic_base.57" }
%"struct.std::__1::__atomic_base.57" = type { %"struct.std::__1::__cxx_atomic_impl.58" }
%"struct.std::__1::__cxx_atomic_impl.58" = type { %"struct.std::__1::__cxx_atomic_base_impl.59" }
%"struct.std::__1::__cxx_atomic_base_impl.59" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.60, i32, i32 }
%class.sk_sp.60 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.61, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.61 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkPaint = type <{ %class.sk_sp.62, %class.sk_sp, %class.sk_sp.63, %class.sk_sp.64, %class.sk_sp.65, %struct.SkRGBA4f.66, float, float, %union.anon.67, [4 x i8] }>
%class.sk_sp.62 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.63 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.64 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.65 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f.66 = type { float, float, float, float }
%union.anon.67 = type { %struct.anon }
%struct.anon = type { i32 }
%"struct.(anonymous namespace)::LocalMatrixStageRec" = type { %struct.SkStageRec, %class.SkMatrix }
%"class.skvm::Builder" = type <{ %class.SkTHashMap.68, %"class.std::__1::vector.77", %"class.std::__1::vector.84", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.68 = type { %class.SkTHashTable.69 }
%class.SkTHashTable.69 = type { i32, i32, %class.SkAutoTArray.70 }
%class.SkAutoTArray.70 = type { %"class.std::__1::unique_ptr.71" }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.79" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { i32*, i32*, %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.84" }
%"struct.skvm::Ptr" = type { i32 }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr.91"*, i64 }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %class.GrFragmentProcessor* }
%struct.GrFPArgs = type { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, %class.GrColorInfo* }
%"class.GrFPArgs::WithPreLocalMatrix" = type { %struct.GrFPArgs, %class.SkMatrix }
%"struct.SkShader::GradientInfo" = type { i32, i32*, float*, [2 x %struct.SkPoint], [2 x float], i32, i32 }
%struct.SkPoint = type { float, float }
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%class.SkStageUpdater = type { i32 (...)** }

$_ZN15SkRuntimeEffect13MakeForShaderE8SkString = comdat any

$_ZN8GrFPArgs18WithPreLocalMatrixC2ERKS_RK8SkMatrix = comdat any

$_ZN14SkShader_BlendD2Ev = comdat any

$_ZN14SkShader_BlendD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK14SkShader_Blend10getFactoryEv = comdat any

$_ZNK14SkShader_Blend11getTypeNameEv = comdat any

$_ZNK12SkShaderBase18getFlattenableTypeEv = comdat any

$_ZNK8SkShader8isOpaqueEv = comdat any

$_ZNK12SkShaderBase10isConstantEv = comdat any

$_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode = comdat any

$_ZNK12SkShaderBase15asRuntimeEffectEv = comdat any

$_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase18onAsLuminanceColorEPj = comdat any

$_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec = comdat any

@.str = private unnamed_addr constant [120 x i8] c"uniform shader a;uniform shader b;uniform half w;half4 main(float2 xy) { return mix(sample(a, xy), sample(b, xy), w); }\00", align 1
@__const._ZNK14SkShader_Blend19asFragmentProcessorERK8GrFPArgs.args = private unnamed_addr constant { { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, [7 x i8], %class.GrColorInfo* }, %class.SkMatrix } { { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, [7 x i8], %class.GrColorInfo* } { %class.GrRecordingContext* inttoptr (i64 -6148914691236517206 to %class.GrRecordingContext*), %class.SkMatrixProvider* inttoptr (i64 -6148914691236517206 to %class.SkMatrixProvider*), %class.SkMatrix* inttoptr (i64 -6148914691236517206 to %class.SkMatrix*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %class.GrColorInfo* inttoptr (i64 -6148914691236517206 to %class.GrColorInfo*) }, %class.SkMatrix { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 } }, align 8
@_ZTV14SkShader_Blend = hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkShader_Blend*)* @_ZN14SkShader_BlendD2Ev to i8*), i8* bitcast (void (%class.SkShader_Blend*)* @_ZN14SkShader_BlendD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.55*, %class.SkReadBuffer*)* (%class.SkShader_Blend*)* @_ZNK14SkShader_Blend10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkShader_Blend*)* @_ZNK14SkShader_Blend11getTypeNameEv to i8*), i8* bitcast (void (%class.SkShader_Blend*, %class.SkWriteBuffer*)* @_ZNK14SkShader_Blend7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkShader*)* @_ZNK8SkShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.SkShader_Blend*, %struct.GrFPArgs*)* @_ZNK14SkShader_Blend19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkShaderBase*, i32*)* @_ZNK12SkShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkShader_Blend*, %struct.SkStageRec*)* @_ZNK14SkShader_Blend14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkShader_Blend*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK14SkShader_Blend9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"SkShader_Blend\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkShaders5BlendE11SkBlendMode5sk_spI8SkShaderES3_(%class.sk_sp* noalias sret, i32, %class.sk_sp* nocapture, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %16 [
    i32 0, label %5
    i32 2, label %6
    i32 1, label %11
  ]

5:                                                ; preds = %4
  tail call void @_ZN9SkShaders5ColorEj(%class.sk_sp* sret %0, i32 0) #7
  br label %33

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %8 = bitcast %class.sk_sp* %2 to i64*
  %9 = load i64, i64* %8, align 8
  store %class.SkShader* null, %class.SkShader** %7, align 8
  %10 = bitcast %class.sk_sp* %0 to i64*
  store i64 %9, i64* %10, align 8
  br label %33

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %13 = bitcast %class.sk_sp* %3 to i64*
  %14 = load i64, i64* %13, align 8
  store %class.SkShader* null, %class.SkShader** %12, align 8
  %15 = bitcast %class.sk_sp* %0 to i64*
  store i64 %14, i64* %15, align 8
  br label %33

16:                                               ; preds = %4
  %17 = tail call i8* @_Znwm(i64 80) #8
  %18 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %19 = bitcast %class.sk_sp* %2 to i64*
  %20 = load i64, i64* %19, align 8
  store %class.SkShader* null, %class.SkShader** %18, align 8
  %21 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %22 = bitcast %class.sk_sp* %3 to i64*
  %23 = load i64, i64* %22, align 8
  store %class.SkShader* null, %class.SkShader** %21, align 8
  %24 = bitcast i8* %17 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* nonnull %24, %class.SkMatrix* null) #7
  %25 = bitcast i8* %17 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds i8, i8* %17, i64 56
  %27 = bitcast i8* %26 to i64*
  store i64 %20, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %17, i64 64
  %29 = bitcast i8* %28 to i64*
  store i64 %23, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %17, i64 72
  %31 = bitcast i8* %30 to i32*
  store i32 %1, i32* %31, align 8
  %32 = bitcast %class.sk_sp* %0 to i8**
  store i8* %17, i8** %32, align 8
  br label %33

33:                                               ; preds = %16, %11, %6, %5
  ret void
}

declare void @_ZN9SkShaders5ColorEj(%class.sk_sp* sret, i32) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkShaders4LerpEf5sk_spI8SkShaderES2_(%class.sk_sp* noalias sret, float, %class.sk_sp* nocapture, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkString, align 8
  %6 = alloca float, align 4
  %7 = alloca %class.sk_sp.1, align 8
  %8 = alloca [2 x %class.sk_sp], align 16
  %9 = alloca %class.sk_sp.40, align 8
  store float %1, float* %6, align 4
  %10 = fcmp uno float %1, 0.000000e+00
  br i1 %10, label %11, label %13

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %12, align 8
  br label %90

13:                                               ; preds = %4
  %14 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %15 = load %class.SkShader*, %class.SkShader** %14, align 8
  %16 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %17 = load %class.SkShader*, %class.SkShader** %16, align 8
  %18 = icmp eq %class.SkShader* %15, %17
  %19 = fcmp ole float %1, 0.000000e+00
  %20 = or i1 %19, %18
  %21 = ptrtoint %class.SkShader* %17 to i64
  br i1 %20, label %22, label %25

22:                                               ; preds = %13
  %23 = ptrtoint %class.SkShader* %15 to i64
  store %class.SkShader* null, %class.SkShader** %14, align 8
  %24 = bitcast %class.sk_sp* %0 to i64*
  store i64 %23, i64* %24, align 8
  br label %90

25:                                               ; preds = %13
  %26 = fcmp ult float %1, 1.000000e+00
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  store %class.SkShader* null, %class.SkShader** %16, align 8
  %28 = bitcast %class.sk_sp* %0 to i64*
  store i64 %21, i64* %28, align 8
  br label %90

29:                                               ; preds = %25
  %30 = bitcast %class.sk_sp.1* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7
  %31 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %7, i64 0, i32 0
  store %class.SkRuntimeEffect* inttoptr (i64 -6148914691236517206 to %class.SkRuntimeEffect*), %class.SkRuntimeEffect** %31, align 8
  %32 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %5, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str, i64 0, i64 0)) #7, !noalias !2
  call void @_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringES1_(%class.sk_sp.1* nonnull sret %7, void (%"struct.SkRuntimeEffect::Result"*, %class.SkString*)* nonnull @_ZN15SkRuntimeEffect13MakeForShaderE8SkString, %class.SkString* nonnull %5) #7
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32)
  %33 = bitcast [2 x %class.sk_sp]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #7
  %34 = getelementptr inbounds [2 x %class.sk_sp], [2 x %class.sk_sp]* %8, i64 0, i64 0
  %35 = getelementptr inbounds [2 x %class.sk_sp], [2 x %class.sk_sp]* %8, i64 0, i64 0, i32 0
  %36 = getelementptr inbounds [2 x %class.sk_sp], [2 x %class.sk_sp]* %8, i64 0, i64 1, i32 0
  %37 = bitcast [2 x %class.sk_sp]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 16, i1 false)
  %38 = load %class.SkShader*, %class.SkShader** %14, align 8
  %39 = icmp eq %class.SkShader* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %29
  %41 = getelementptr inbounds %class.SkShader, %class.SkShader* %38, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 1 monotonic
  br label %43

43:                                               ; preds = %29, %40
  store %class.SkShader* %38, %class.SkShader** %35, align 16
  %44 = load %class.SkShader*, %class.SkShader** %16, align 8
  %45 = icmp eq %class.SkShader* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %class.SkShader, %class.SkShader* %44, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i32* %47, i32 1 monotonic
  br label %49

49:                                               ; preds = %43, %46
  store %class.SkShader* %44, %class.SkShader** %36, align 8
  %50 = load %class.SkRuntimeEffect*, %class.SkRuntimeEffect** %31, align 8
  %51 = bitcast float* %6 to i8*
  call void @_ZN6SkData12MakeWithCopyEPKvm(%class.sk_sp.40* nonnull sret %9, i8* nonnull %51, i64 4) #7
  call void @_ZNK15SkRuntimeEffect10makeShaderE5sk_spI6SkDataEPS0_I8SkShaderEmPK8SkMatrixb(%class.sk_sp* sret %0, %class.SkRuntimeEffect* %50, %class.sk_sp.40* nonnull %9, %class.sk_sp* nonnull %34, i64 2, %class.SkMatrix* null, i1 zeroext false) #7
  %52 = getelementptr inbounds %class.sk_sp.40, %class.sk_sp.40* %9, i64 0, i32 0
  %53 = load %class.SkData*, %class.SkData** %52, align 8
  %54 = icmp eq %class.SkData* %53, null
  br i1 %54, label %61, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %class.SkData, %class.SkData* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw add i32* %56, i32 -1 acq_rel
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %61

59:                                               ; preds = %55
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %53) #7
  %60 = bitcast %class.SkData* %53 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %60) #7
  br label %61

61:                                               ; preds = %49, %55, %59
  %62 = getelementptr inbounds [2 x %class.sk_sp], [2 x %class.sk_sp]* %8, i64 0, i64 1, i32 0
  %63 = load %class.SkShader*, %class.SkShader** %62, align 8
  %64 = icmp eq %class.SkShader* %63, null
  br i1 %64, label %75, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.SkShader, %class.SkShader* %63, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 -1 acq_rel
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %75

69:                                               ; preds = %65
  %70 = bitcast %class.SkShader* %63 to %class.SkRefCntBase*
  %71 = bitcast %class.SkShader* %63 to void (%class.SkRefCntBase*)***
  %72 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %71, align 8
  %73 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %72, i64 2
  %74 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %73, align 8
  call void %74(%class.SkRefCntBase* nonnull %70) #7
  br label %75

75:                                               ; preds = %61, %65, %69
  %76 = getelementptr inbounds [2 x %class.sk_sp], [2 x %class.sk_sp]* %8, i64 0, i64 0, i32 0
  %77 = load %class.SkShader*, %class.SkShader** %76, align 16
  %78 = icmp eq %class.SkShader* %77, null
  br i1 %78, label %101, label %91

79:                                               ; preds = %101
  %80 = getelementptr inbounds %class.SkRuntimeEffect, %class.SkRuntimeEffect* %102, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = atomicrmw add i32* %80, i32 -1 acq_rel
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %89

83:                                               ; preds = %79
  %84 = bitcast %class.SkRuntimeEffect* %102 to %class.SkRefCntBase*
  %85 = bitcast %class.SkRuntimeEffect* %102 to void (%class.SkRefCntBase*)***
  %86 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %85, align 8
  %87 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %86, i64 2
  %88 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %87, align 8
  call void %88(%class.SkRefCntBase* nonnull %84) #7
  br label %89

89:                                               ; preds = %101, %79, %83
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  br label %90

90:                                               ; preds = %89, %27, %22, %11
  ret void

91:                                               ; preds = %75
  %92 = getelementptr inbounds %class.SkShader, %class.SkShader* %77, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = atomicrmw add i32* %92, i32 -1 acq_rel
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %101

95:                                               ; preds = %91
  %96 = bitcast %class.SkShader* %77 to %class.SkRefCntBase*
  %97 = bitcast %class.SkShader* %77 to void (%class.SkRefCntBase*)***
  %98 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %97, align 8
  %99 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %98, i64 2
  %100 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %99, align 8
  call void %100(%class.SkRefCntBase* nonnull %96) #7
  br label %101

101:                                              ; preds = %95, %91, %75
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #7
  %102 = load %class.SkRuntimeEffect*, %class.SkRuntimeEffect** %31, align 8
  %103 = icmp eq %class.SkRuntimeEffect* %102, null
  br i1 %103, label %89, label %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkRuntimeEffect13MakeForShaderE8SkString(%"struct.SkRuntimeEffect::Result"* noalias sret, %class.SkString*) #0 comdat align 2 {
  %3 = alloca %class.SkString, align 8
  %4 = alloca %"struct.SkRuntimeEffect::Options", align 1
  call void @_ZN8SkStringC1EOS_(%class.SkString* nonnull %3, %class.SkString* dereferenceable(8) %1) #7
  %5 = getelementptr inbounds %"struct.SkRuntimeEffect::Options", %"struct.SkRuntimeEffect::Options"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %5) #7
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.SkRuntimeEffect::Options", %"struct.SkRuntimeEffect::Options"* %4, i64 0, i32 1
  store i8 1, i8* %6, align 1
  call void @_ZN15SkRuntimeEffect13MakeForShaderE8SkStringRKNS_7OptionsE(%"struct.SkRuntimeEffect::Result"* sret %0, %class.SkString* nonnull %3, %"struct.SkRuntimeEffect::Options"* nonnull dereferenceable(2) %4) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %5) #7
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %3) #7
  ret void
}

declare void @_ZNK15SkRuntimeEffect10makeShaderE5sk_spI6SkDataEPS0_I8SkShaderEmPK8SkMatrixb(%class.sk_sp* sret, %class.SkRuntimeEffect*, %class.sk_sp.40*, %class.sk_sp*, i64, %class.SkMatrix*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN6SkData12MakeWithCopyEPKvm(%class.sk_sp.40* sret, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkShader_Blend10CreateProcER12SkReadBuffer(%class.sk_sp.55* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %class.sk_sp, align 8
  %4 = tail call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* %1, i32 8) #7, !noalias !5
  %5 = ptrtoint %class.SkFlattenable* %4 to i64
  %6 = tail call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* %1, i32 8) #7, !noalias !10
  %7 = ptrtoint %class.SkFlattenable* %6 to i64
  %8 = tail call i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer* %1) #7
  %9 = icmp ult i32 %8, 29
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #7
  br label %11

11:                                               ; preds = %2, %10
  %12 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %13 = load i8, i8* %12, align 8, !range !15
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %72

15:                                               ; preds = %11
  %16 = bitcast %class.sk_sp* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
  switch i32 %8, label %24 [
    i32 0, label %17
    i32 2, label %20
    i32 1, label %22
  ]

17:                                               ; preds = %15
  call void @_ZN9SkShaders5ColorEj(%class.sk_sp* nonnull sret %3, i32 0) #7
  %18 = bitcast %class.sk_sp* %3 to i64*
  %19 = load i64, i64* %18, align 8
  br label %41

20:                                               ; preds = %15
  %21 = bitcast %class.sk_sp* %3 to i64*
  store i64 %5, i64* %21, align 8, !alias.scope !16
  br label %41

22:                                               ; preds = %15
  %23 = bitcast %class.sk_sp* %3 to i64*
  store i64 %7, i64* %23, align 8, !alias.scope !16
  br label %36

24:                                               ; preds = %15
  %25 = tail call i8* @_Znwm(i64 80) #8
  %26 = bitcast i8* %25 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase* nonnull %26, %class.SkMatrix* null) #7
  %27 = bitcast i8* %25 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %27, align 8, !noalias !16
  %28 = getelementptr inbounds i8, i8* %25, i64 56
  %29 = bitcast i8* %28 to i64*
  store i64 %5, i64* %29, align 8, !noalias !16
  %30 = getelementptr inbounds i8, i8* %25, i64 64
  %31 = bitcast i8* %30 to i64*
  store i64 %7, i64* %31, align 8, !noalias !16
  %32 = getelementptr inbounds i8, i8* %25, i64 72
  %33 = bitcast i8* %32 to i32*
  store i32 %8, i32* %33, align 8, !noalias !16
  %34 = bitcast %class.sk_sp* %3 to i8**
  store i8* %25, i8** %34, align 8, !alias.scope !16
  %35 = ptrtoint i8* %25 to i64
  br label %36

36:                                               ; preds = %24, %22
  %37 = phi i64 [ %7, %22 ], [ %35, %24 ]
  %38 = phi i64 [ %5, %22 ], [ 0, %24 ]
  %39 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %39, align 8
  %40 = bitcast %class.sk_sp.55* %0 to i64*
  store i64 %37, i64* %40, align 8
  br label %57

41:                                               ; preds = %20, %17
  %42 = phi i64 [ %5, %20 ], [ %19, %17 ]
  %43 = phi i64 [ 0, %20 ], [ %5, %17 ]
  %44 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %44, align 8
  %45 = bitcast %class.sk_sp.55* %0 to i64*
  store i64 %42, i64* %45, align 8
  %46 = icmp eq %class.SkFlattenable* %6, null
  br i1 %46, label %57, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw add i32* %48, i32 -1 acq_rel
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %57

51:                                               ; preds = %47
  %52 = bitcast %class.SkFlattenable* %6 to %class.SkRefCntBase*
  %53 = bitcast %class.SkFlattenable* %6 to void (%class.SkRefCntBase*)***
  %54 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %53, align 8
  %55 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %54, i64 2
  %56 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, align 8
  call void %56(%class.SkRefCntBase* nonnull %52) #7
  br label %57

57:                                               ; preds = %36, %41, %47, %51
  %58 = phi i64 [ %38, %36 ], [ %43, %41 ], [ %43, %47 ], [ %43, %51 ]
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %71, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %58 to %class.SkShader*
  %62 = getelementptr inbounds %class.SkShader, %class.SkShader* %61, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = atomicrmw add i32* %62, i32 -1 acq_rel
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %71

65:                                               ; preds = %60
  %66 = inttoptr i64 %58 to %class.SkRefCntBase*
  %67 = inttoptr i64 %58 to void (%class.SkRefCntBase*)***
  %68 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %67, align 8
  %69 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %68, i64 2
  %70 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %69, align 8
  call void %70(%class.SkRefCntBase* nonnull %66) #7
  br label %71

71:                                               ; preds = %57, %60, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  br label %97

72:                                               ; preds = %11
  %73 = getelementptr inbounds %class.sk_sp.55, %class.sk_sp.55* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %73, align 8
  %74 = icmp eq %class.SkFlattenable* %6, null
  br i1 %74, label %85, label %75

75:                                               ; preds = %72
  %76 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = atomicrmw add i32* %76, i32 -1 acq_rel
  %78 = icmp eq i32 %77, 1
  br i1 %78, label %79, label %85

79:                                               ; preds = %75
  %80 = bitcast %class.SkFlattenable* %6 to %class.SkRefCntBase*
  %81 = bitcast %class.SkFlattenable* %6 to void (%class.SkRefCntBase*)***
  %82 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %81, align 8
  %83 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %82, i64 2
  %84 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %83, align 8
  tail call void %84(%class.SkRefCntBase* nonnull %80) #7
  br label %85

85:                                               ; preds = %72, %75, %79
  %86 = icmp eq %class.SkFlattenable* %4, null
  br i1 %86, label %97, label %87

87:                                               ; preds = %85
  %88 = getelementptr inbounds %class.SkFlattenable, %class.SkFlattenable* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw add i32* %88, i32 -1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %97

91:                                               ; preds = %87
  %92 = bitcast %class.SkFlattenable* %4 to %class.SkRefCntBase*
  %93 = bitcast %class.SkFlattenable* %4 to void (%class.SkRefCntBase*)***
  %94 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %93, align 8
  %95 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %94, i64 2
  %96 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %95, align 8
  tail call void %96(%class.SkRefCntBase* nonnull %92) #7
  br label %97

97:                                               ; preds = %71, %85, %87, %91
  ret void
}

declare i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14SkShader_Blend7flattenER13SkWriteBuffer(%class.SkShader_Blend* nocapture readonly, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 2, i32 0
  %4 = bitcast %class.SkShader** %3 to %class.SkFlattenable**
  %5 = load %class.SkFlattenable*, %class.SkFlattenable** %4, align 8
  %6 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkFlattenable*)***
  %7 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkWriteBuffer*, %class.SkFlattenable*)*** %6, align 8
  %8 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %7, i64 11
  %9 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %8, align 8
  tail call void %9(%class.SkWriteBuffer* %1, %class.SkFlattenable* %5) #7
  %10 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 3, i32 0
  %11 = bitcast %class.SkShader** %10 to %class.SkFlattenable**
  %12 = load %class.SkFlattenable*, %class.SkFlattenable** %11, align 8
  %13 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkWriteBuffer*, %class.SkFlattenable*)*** %6, align 8
  %14 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %13, i64 11
  %15 = load void (%class.SkWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkWriteBuffer*, %class.SkFlattenable*)** %14, align 8
  tail call void %15(%class.SkWriteBuffer* %1, %class.SkFlattenable* %12) #7
  %16 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %19 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %19, i64 7
  %21 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %20, align 8
  tail call void %21(%class.SkWriteBuffer* %1, i32 %17) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14SkShader_Blend14onAppendStagesERK10SkStageRec(%class.SkShader_Blend*, %struct.SkStageRec* nocapture readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = alloca %"struct.(anonymous namespace)::LocalMatrixStageRec", align 8
  %6 = bitcast %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %6) #7
  %7 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 0, i32 1
  %8 = bitcast %struct.SkStageRec* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %8, i64 56, i1 false) #7
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 1
  %10 = bitcast %class.SkMatrix* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %10, align 8
  %11 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 1, i32 0, i64 4
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %12, align 8
  %13 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 1, i32 0, i64 8
  store float 1.000000e+00, float* %13, align 8
  %14 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 1, i32 1
  store i32 16, i32* %14, align 4
  %15 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = trunc i32 %16 to i8
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %7) #7
  %21 = zext i8 %20 to i32
  store i32 %21, i32* %15, align 4
  br label %22

22:                                               ; preds = %19, %2
  %23 = phi i32 [ %21, %19 ], [ %16, %2 ]
  %24 = and i32 %23, 15
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %45, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 5
  %28 = load %class.SkMatrix*, %class.SkMatrix** %27, align 8
  %29 = icmp eq %class.SkMatrix* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %26
  %31 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %9, %class.SkMatrix* dereferenceable(40) %7, %class.SkMatrix* nonnull dereferenceable(40) %28) #7
  %32 = load i32, i32* %14, align 4
  %33 = trunc i32 %32 to i8
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %9) #7
  %37 = zext i8 %36 to i32
  store i32 %37, i32* %14, align 4
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i32 [ %37, %35 ], [ %32, %30 ]
  %40 = and i32 %39, 15
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, %class.SkMatrix* null, %class.SkMatrix* %9
  br label %43

43:                                               ; preds = %26, %38
  %44 = phi %class.SkMatrix* [ %42, %38 ], [ %7, %26 ]
  store %class.SkMatrix* %44, %class.SkMatrix** %27, align 8
  br label %45

45:                                               ; preds = %43, %22
  %46 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 2, i32 0
  %48 = load %class.SkShader*, %class.SkShader** %47, align 8
  %49 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 3, i32 0
  %50 = load %class.SkShader*, %class.SkShader** %49, align 8
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 1
  %52 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %51, align 8
  %53 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %52, i64 0, i32 1
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 0, %55
  %57 = and i64 %56, 3
  %58 = or i64 %57, 256
  %59 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %52, i64 0, i32 2
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %55
  %63 = icmp ugt i64 %58, %62
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %52, i32 256, i32 4) #7
  %65 = load i64, i64* %54, align 8
  %66 = sub i64 0, %65
  %67 = and i64 %66, 3
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i64 [ %65, %64 ], [ %55, %45 ]
  %70 = phi i64 [ %67, %64 ], [ %57, %45 ]
  %71 = inttoptr i64 %69 to i8*
  %72 = getelementptr inbounds i8, i8* %71, i64 %70
  %73 = getelementptr inbounds i8, i8* %72, i64 256
  store i8* %73, i8** %53, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 256, i1 false) #7
  %74 = icmp eq %class.SkShader* %48, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %68
  %76 = bitcast %class.SkShader* %48 to %class.SkShaderBase*
  %77 = call zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase* nonnull %76, %struct.SkStageRec* nonnull dereferenceable(56) %46) #7
  br i1 %77, label %100, label %137

78:                                               ; preds = %68
  %79 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 0
  %80 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %79, align 8
  %81 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %51, align 8
  %82 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %82) #7
  %83 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 4
  %84 = load %class.SkPaint*, %class.SkPaint** %83, align 8
  %85 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %84, i64 0, i32 5
  %86 = bitcast %struct.SkRGBA4f.66* %85 to <2 x float>*
  %87 = load <2 x float>, <2 x float>* %86, align 8
  %88 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %84, i64 0, i32 5, i32 2
  %89 = bitcast float* %88 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 8
  %91 = extractelement <2 x float> %90, i32 1
  %92 = shufflevector <2 x float> %90, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %93 = fmul <2 x float> %87, %92
  %94 = extractelement <2 x float> %90, i32 0
  %95 = fmul float %91, %94
  %96 = insertelement <2 x float> %90, float %95, i32 0
  %97 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  store <2 x float> %93, <2 x float>* %97, align 8
  %98 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  store <2 x float> %96, <2 x float>* %98, align 8
  %99 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0, i64 0
  call void @_ZN16SkRasterPipeline21append_constant_colorEP12SkArenaAllocPKf(%class.SkRasterPipeline* %80, %class.SkArenaAlloc* %81, float* nonnull %99) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %82) #7
  br label %100

100:                                              ; preds = %78, %75
  %101 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 0
  %102 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %101, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %102, i32 85, i8* %72) #7
  %103 = icmp eq %class.SkShader* %50, null
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = bitcast %class.SkShader* %50 to %class.SkShaderBase*
  %106 = call zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase* nonnull %105, %struct.SkStageRec* nonnull dereferenceable(56) %46) #7
  %107 = xor i1 %106, true
  %108 = icmp eq i8* %72, null
  %109 = or i1 %108, %107
  br i1 %109, label %137, label %132

110:                                              ; preds = %100
  %111 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %101, align 8
  %112 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %51, align 8
  %113 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %113) #7
  %114 = getelementptr inbounds %"struct.(anonymous namespace)::LocalMatrixStageRec", %"struct.(anonymous namespace)::LocalMatrixStageRec"* %5, i64 0, i32 0, i32 4
  %115 = load %class.SkPaint*, %class.SkPaint** %114, align 8
  %116 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %115, i64 0, i32 5
  %117 = bitcast %struct.SkRGBA4f.66* %116 to <2 x float>*
  %118 = load <2 x float>, <2 x float>* %117, align 8
  %119 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %115, i64 0, i32 5, i32 2
  %120 = bitcast float* %119 to <2 x float>*
  %121 = load <2 x float>, <2 x float>* %120, align 8
  %122 = extractelement <2 x float> %121, i32 1
  %123 = shufflevector <2 x float> %121, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %124 = fmul <2 x float> %118, %123
  %125 = extractelement <2 x float> %121, i32 0
  %126 = fmul float %122, %125
  %127 = insertelement <2 x float> %121, float %126, i32 0
  %128 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  store <2 x float> %124, <2 x float>* %128, align 8
  %129 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  store <2 x float> %127, <2 x float>* %129, align 8
  %130 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0, i64 0
  call void @_ZN16SkRasterPipeline21append_constant_colorEP12SkArenaAllocPKf(%class.SkRasterPipeline* %111, %class.SkArenaAlloc* %112, float* nonnull %130) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %113) #7
  %131 = icmp eq i8* %72, null
  br i1 %131, label %137, label %132

132:                                              ; preds = %104, %110
  %133 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %101, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %133, i32 87, i8* nonnull %72) #7
  %134 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 4
  %135 = load i32, i32* %134, align 8
  %136 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %101, align 8
  call void @_Z24SkBlendMode_AppendStages11SkBlendModeP16SkRasterPipeline(i32 %135, %class.SkRasterPipeline* %136) #7
  br label %137

137:                                              ; preds = %104, %75, %110, %132
  %138 = phi i1 [ true, %132 ], [ false, %110 ], [ false, %75 ], [ false, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %6) #7
  ret i1 %138
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #1

declare void @_Z24SkBlendMode_AppendStages11SkBlendModeP16SkRasterPipeline(i32, %class.SkRasterPipeline*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14SkShader_Blend9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias sret, %class.SkShader_Blend* nocapture readonly, %"class.skvm::Builder"*, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readonly byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo* dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) unnamed_addr #0 align 2 {
  %12 = alloca %"struct.skvm::Color", align 8
  %13 = alloca %"struct.skvm::Color", align 8
  %14 = alloca %"struct.skvm::Coord", align 8
  %15 = alloca %"struct.skvm::Coord", align 8
  %16 = alloca %"struct.skvm::Color", align 8
  %17 = alloca %"struct.skvm::Color", align 8
  %18 = alloca %"struct.skvm::Coord", align 8
  %19 = alloca %"struct.skvm::Coord", align 8
  %20 = alloca %"struct.skvm::Color", align 8
  %21 = alloca %"struct.skvm::Color", align 8
  %22 = alloca %"struct.skvm::Color", align 8
  %23 = alloca %"struct.skvm::Color", align 8
  %24 = bitcast %"struct.skvm::Color"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %24) #7
  %25 = bitcast %"struct.skvm::Coord"* %3 to i8*
  %26 = bitcast %"struct.skvm::Coord"* %4 to i8*
  %27 = bitcast %"struct.skvm::Color"* %5 to i8*
  %28 = bitcast %"struct.skvm::Coord"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28)
  %29 = bitcast %"struct.skvm::Coord"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29)
  %30 = bitcast %"struct.skvm::Color"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %30)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %30, i8* nonnull align 8 %27, i64 64, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* nonnull align 8 %26, i64 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %25, i64 32, i1 false)
  %31 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %1, i64 0, i32 2, i32 0
  %32 = load %class.SkShader*, %class.SkShader** %31, align 8, !noalias !19
  %33 = icmp eq %class.SkShader* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %11
  %35 = bitcast %class.SkShader* %32 to %class.SkShaderBase*
  call void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* nonnull sret %20, %class.SkShaderBase* nonnull %35, %"class.skvm::Builder"* %2, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %15, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %14, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %13, %class.SkMatrixProvider* %6, %class.SkMatrix* %7, %class.SkColorInfo* dereferenceable(16) %8, %"struct.skvm::Uniforms"* %9, %class.SkArenaAlloc* %10) #7
  br label %45

36:                                               ; preds = %11
  %37 = bitcast %"struct.skvm::Color"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %37) #7, !noalias !19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* nonnull align 8 %30, i64 64, i1 false) #7, !noalias !19
  %38 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 0
  %39 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 1
  %40 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 2
  %41 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 0
  %42 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %41, align 8, !noalias !22
  %43 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %12, i64 0, i32 3, i32 1
  %44 = load i32, i32* %43, align 8, !noalias !22
  call void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"* %2, %"struct.skvm::F32"* nonnull %38, %"struct.skvm::F32"* %39, %"struct.skvm::F32"* %40, %"class.skvm::Builder"* %42, i32 %44) #7, !noalias !25
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* nonnull align 8 %37, i64 64, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %37) #7, !noalias !19
  br label %45

45:                                               ; preds = %34, %36
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %30)
  %46 = bitcast %"struct.skvm::Color"* %20 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 0, i32 2
  %51 = bitcast [4 x i8]* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 1, i32 0
  %54 = bitcast %"class.skvm::Builder"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 1, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 1, i32 2
  %59 = bitcast [4 x i8]* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 2, i32 0
  %62 = bitcast %"class.skvm::Builder"** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 2, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 2, i32 2
  %67 = bitcast [4 x i8]* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 3, i32 0
  %70 = bitcast %"class.skvm::Builder"** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 3, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %20, i64 0, i32 3, i32 2
  %75 = bitcast [4 x i8]* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %49, -1
  %78 = icmp eq i32 %57, -1
  %79 = or i1 %77, %78
  %80 = icmp eq i32 %65, -1
  %81 = or i1 %79, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %45
  %83 = bitcast %"struct.skvm::Color"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %83) #7
  br label %185

84:                                               ; preds = %45
  %85 = icmp eq i32 %73, -1
  %86 = bitcast %"struct.skvm::Color"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %86) #7
  br i1 %85, label %185, label %87

87:                                               ; preds = %84
  %88 = bitcast %"struct.skvm::Coord"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %88)
  %89 = bitcast %"struct.skvm::Coord"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89)
  %90 = bitcast %"struct.skvm::Color"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %90)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %27, i64 64, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %89, i8* nonnull align 8 %26, i64 32, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* nonnull align 8 %25, i64 32, i1 false)
  %91 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %1, i64 0, i32 3, i32 0
  %92 = load %class.SkShader*, %class.SkShader** %91, align 8, !noalias !26
  %93 = icmp eq %class.SkShader* %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = bitcast %class.SkShader* %92 to %class.SkShaderBase*
  call void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* nonnull sret %21, %class.SkShaderBase* nonnull %95, %"class.skvm::Builder"* %2, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %19, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %18, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %17, %class.SkMatrixProvider* %6, %class.SkMatrix* %7, %class.SkColorInfo* dereferenceable(16) %8, %"struct.skvm::Uniforms"* %9, %class.SkArenaAlloc* %10) #7
  br label %105

96:                                               ; preds = %87
  %97 = bitcast %"struct.skvm::Color"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %97) #7, !noalias !26
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %97, i8* nonnull align 8 %90, i64 64, i1 false) #7, !noalias !26
  %98 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %16, i64 0, i32 0
  %99 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %16, i64 0, i32 1
  %100 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %16, i64 0, i32 2
  %101 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %16, i64 0, i32 3, i32 0
  %102 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %101, align 8, !noalias !29
  %103 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %16, i64 0, i32 3, i32 1
  %104 = load i32, i32* %103, align 8, !noalias !29
  call void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"* %2, %"struct.skvm::F32"* nonnull %98, %"struct.skvm::F32"* %99, %"struct.skvm::F32"* %100, %"class.skvm::Builder"* %102, i32 %104) #7, !noalias !32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %86, i8* nonnull align 8 %97, i64 64, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %97) #7, !noalias !26
  br label %105

105:                                              ; preds = %94, %96
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %88)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %90)
  %106 = bitcast %"struct.skvm::Color"* %21 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 0, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 0, i32 2
  %111 = bitcast [4 x i8]* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 1, i32 0
  %114 = bitcast %"class.skvm::Builder"** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 1, i32 1
  %117 = load i32, i32* %116, align 8
  %118 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 1, i32 2
  %119 = bitcast [4 x i8]* %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 2, i32 0
  %122 = bitcast %"class.skvm::Builder"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 2, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 2, i32 2
  %127 = bitcast [4 x i8]* %126 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 3, i32 0
  %130 = bitcast %"class.skvm::Builder"** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 3, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %21, i64 0, i32 3, i32 2
  %135 = bitcast [4 x i8]* %134 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %109, -1
  %138 = icmp eq i32 %117, -1
  %139 = or i1 %137, %138
  %140 = icmp eq i32 %125, -1
  %141 = or i1 %139, %140
  br i1 %141, label %185, label %142

142:                                              ; preds = %105
  %143 = icmp eq i32 %133, -1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %86) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #7
  br i1 %143, label %187, label %144

144:                                              ; preds = %142
  %145 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %1, i64 0, i32 4
  %146 = load i32, i32* %145, align 8
  %147 = bitcast %"struct.skvm::Color"* %22 to i64*
  store i64 %107, i64* %147, align 8
  %148 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 0, i32 1
  store i32 %109, i32* %148, align 8
  %149 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 0, i32 2
  %150 = bitcast [4 x i8]* %149 to i32*
  store i32 %112, i32* %150, align 4
  %151 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 1, i32 0
  %152 = bitcast %"class.skvm::Builder"** %151 to i64*
  store i64 %115, i64* %152, align 8
  %153 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 1, i32 1
  store i32 %117, i32* %153, align 8
  %154 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 1, i32 2
  %155 = bitcast [4 x i8]* %154 to i32*
  store i32 %120, i32* %155, align 4
  %156 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 2, i32 0
  %157 = bitcast %"class.skvm::Builder"** %156 to i64*
  store i64 %123, i64* %157, align 8
  %158 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 2, i32 1
  store i32 %125, i32* %158, align 8
  %159 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 2, i32 2
  %160 = bitcast [4 x i8]* %159 to i32*
  store i32 %128, i32* %160, align 4
  %161 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 3, i32 0
  %162 = bitcast %"class.skvm::Builder"** %161 to i64*
  store i64 %131, i64* %162, align 8
  %163 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 3, i32 1
  store i32 %133, i32* %163, align 8
  %164 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %22, i64 0, i32 3, i32 2
  %165 = bitcast [4 x i8]* %164 to i32*
  store i32 %136, i32* %165, align 4
  %166 = bitcast %"struct.skvm::Color"* %23 to i64*
  store i64 %47, i64* %166, align 8
  %167 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 0, i32 1
  store i32 %49, i32* %167, align 8
  %168 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 0, i32 2
  %169 = bitcast [4 x i8]* %168 to i32*
  store i32 %52, i32* %169, align 4
  %170 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 1, i32 0
  %171 = bitcast %"class.skvm::Builder"** %170 to i64*
  store i64 %55, i64* %171, align 8
  %172 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 1, i32 1
  store i32 %57, i32* %172, align 8
  %173 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 1, i32 2
  %174 = bitcast [4 x i8]* %173 to i32*
  store i32 %60, i32* %174, align 4
  %175 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 2, i32 0
  %176 = bitcast %"class.skvm::Builder"** %175 to i64*
  store i64 %63, i64* %176, align 8
  %177 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 2, i32 1
  store i32 %65, i32* %177, align 8
  %178 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 2, i32 2
  %179 = bitcast [4 x i8]* %178 to i32*
  store i32 %68, i32* %179, align 4
  %180 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 3, i32 0
  %181 = bitcast %"class.skvm::Builder"** %180 to i64*
  store i64 %71, i64* %181, align 8
  %182 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 3, i32 1
  store i32 %73, i32* %182, align 8
  %183 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %23, i64 0, i32 3, i32 2
  %184 = bitcast [4 x i8]* %183 to i32*
  store i32 %76, i32* %184, align 4
  call void @_ZN4skvm7Builder5blendE11SkBlendModeNS_5ColorES2_(%"struct.skvm::Color"* sret %0, %"class.skvm::Builder"* %2, i32 %146, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %22, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %23) #7
  br label %196

185:                                              ; preds = %82, %84, %105
  %186 = phi i8* [ %86, %105 ], [ %83, %82 ], [ %86, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %186) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #7
  br label %187

187:                                              ; preds = %185, %142
  %188 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %188, align 8
  %189 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %189, align 8
  %190 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %190, align 8
  %191 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %191, align 8
  %192 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %192, align 8
  %193 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %193, align 8
  %194 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %194, align 8
  %195 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %195, align 8
  br label %196

196:                                              ; preds = %187, %144
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN4skvm7Builder5blendE11SkBlendModeNS_5ColorES2_(%"struct.skvm::Color"* sret, %"class.skvm::Builder"*, i32, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZNK14SkShader_Blend19asFragmentProcessorERK8GrFPArgs(%class.SkShader_Blend*, %struct.GrFPArgs* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.GrFPArgs::WithPreLocalMatrix", align 8
  %4 = bitcast %"class.GrFPArgs::WithPreLocalMatrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 bitcast ({ { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, [7 x i8], %class.GrColorInfo* }, %class.SkMatrix }* @__const._ZNK14SkShader_Blend19asFragmentProcessorERK8GrFPArgs.args to i8*), i64 80, i1 false)
  %5 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 0, i32 1
  call void @_ZN8GrFPArgs18WithPreLocalMatrixC2ERKS_RK8SkMatrix(%"class.GrFPArgs::WithPreLocalMatrix"* nonnull %3, %struct.GrFPArgs* dereferenceable(40) %1, %class.SkMatrix* dereferenceable(40) %5)
  %6 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 2, i32 0
  %8 = load %class.SkShader*, %class.SkShader** %7, align 8
  %9 = icmp eq %class.SkShader* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %2
  %11 = bitcast %class.SkShader* %8 to %class.SkShaderBase*
  %12 = bitcast %class.SkShader* %8 to %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)***
  %13 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)**, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*** %12, align 8
  %14 = getelementptr inbounds %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %13, i64 10
  %15 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %14, align 8
  %16 = call %class.GrFragmentProcessor* %15(%class.SkShaderBase* nonnull %11, %struct.GrFPArgs* nonnull dereferenceable(40) %6) #7
  br label %17

17:                                               ; preds = %2, %10
  %18 = phi %class.GrFragmentProcessor* [ %16, %10 ], [ null, %2 ]
  %19 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 3, i32 0
  %20 = load %class.SkShader*, %class.SkShader** %19, align 8
  %21 = icmp eq %class.SkShader* %20, null
  br i1 %21, label %29, label %22

22:                                               ; preds = %17
  %23 = bitcast %class.SkShader* %20 to %class.SkShaderBase*
  %24 = bitcast %class.SkShader* %20 to %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)***
  %25 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)**, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*** %24, align 8
  %26 = getelementptr inbounds %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %25, i64 10
  %27 = load %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)*, %class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)** %26, align 8
  %28 = call %class.GrFragmentProcessor* %27(%class.SkShaderBase* nonnull %23, %struct.GrFPArgs* nonnull dereferenceable(40) %6) #7
  br label %29

29:                                               ; preds = %17, %22
  %30 = phi %class.GrFragmentProcessor* [ %28, %22 ], [ null, %17 ]
  %31 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = call %class.GrFragmentProcessor* @_ZN24GrBlendFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEES5_11SkBlendModeNS_13BlendBehaviorE(%class.GrFragmentProcessor* %30, %class.GrFragmentProcessor* %18, i32 %32, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #7
  ret %class.GrFragmentProcessor* %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8GrFPArgs18WithPreLocalMatrixC2ERKS_RK8SkMatrix(%"class.GrFPArgs::WithPreLocalMatrix"*, %struct.GrFPArgs* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.GrFPArgs::WithPreLocalMatrix"* %0 to i8*
  %5 = bitcast %struct.GrFPArgs* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 40, i1 false)
  %6 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %0, i64 0, i32 1
  %7 = bitcast %class.SkMatrix* %6 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %7, align 4
  %8 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %0, i64 0, i32 1, i32 0, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %9, align 4
  %10 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %0, i64 0, i32 1, i32 0, i64 8
  store float 1.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %0, i64 0, i32 1, i32 1
  store i32 16, i32* %11, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = trunc i32 %13 to i8
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #7
  %18 = zext i8 %17 to i32
  store i32 %18, i32* %12, align 4
  br label %19

19:                                               ; preds = %3, %16
  %20 = phi i32 [ %18, %16 ], [ %13, %3 ]
  %21 = and i32 %20, 15
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %42, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.GrFPArgs::WithPreLocalMatrix", %"class.GrFPArgs::WithPreLocalMatrix"* %0, i64 0, i32 0, i32 2
  %25 = load %class.SkMatrix*, %class.SkMatrix** %24, align 8
  %26 = icmp eq %class.SkMatrix* %25, null
  br i1 %26, label %40, label %27

27:                                               ; preds = %23
  %28 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %6, %class.SkMatrix* dereferenceable(40) %2, %class.SkMatrix* nonnull dereferenceable(40) %25) #7
  %29 = load i32, i32* %11, align 4
  %30 = trunc i32 %29 to i8
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %6) #7
  %34 = zext i8 %33 to i32
  store i32 %34, i32* %11, align 4
  br label %35

35:                                               ; preds = %27, %32
  %36 = phi i32 [ %34, %32 ], [ %29, %27 ]
  %37 = and i32 %36, 15
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %38, %class.SkMatrix* null, %class.SkMatrix* %6
  br label %40

40:                                               ; preds = %23, %35
  %41 = phi %class.SkMatrix* [ %39, %35 ], [ %2, %23 ]
  store %class.SkMatrix* %41, %class.SkMatrix** %24, align 8
  br label %42

42:                                               ; preds = %40, %19
  ret void
}

declare %class.GrFragmentProcessor* @_ZN24GrBlendFragmentProcessor4MakeENSt3__110unique_ptrI19GrFragmentProcessorNS0_14default_deleteIS2_EEEES5_11SkBlendModeNS_13BlendBehaviorE(%class.GrFragmentProcessor*, %class.GrFragmentProcessor*, i32, i32) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14SkShader_BlendD2Ev(%class.SkShader_Blend*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkShader*, %class.SkShader** %3, align 8
  %5 = icmp eq %class.SkShader* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkShader, %class.SkShader* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkShader* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkShader* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #7
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 2, i32 0
  %18 = load %class.SkShader*, %class.SkShader** %17, align 8
  %19 = icmp eq %class.SkShader* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkShader, %class.SkShader* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkShader* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkShader* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #7
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = bitcast %class.SkShader_Blend* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %31) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14SkShader_BlendD0Ev(%class.SkShader_Blend*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV14SkShader_Blend, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 3, i32 0
  %4 = load %class.SkShader*, %class.SkShader** %3, align 8
  %5 = icmp eq %class.SkShader* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkShader, %class.SkShader* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkShader* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkShader* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #7
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %class.SkShader_Blend, %class.SkShader_Blend* %0, i64 0, i32 2, i32 0
  %18 = load %class.SkShader*, %class.SkShader** %17, align 8
  %19 = icmp eq %class.SkShader* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkShader, %class.SkShader* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkShader* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkShader* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #7
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = bitcast %class.SkShader_Blend* %0 to %class.SkShaderBase*
  tail call void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* %31) #7
  %32 = bitcast %class.SkShader_Blend* %0 to i8*
  tail call void @_ZdlPv(i8* %32) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #7
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.55*, %class.SkReadBuffer*)* @_ZNK14SkShader_Blend10getFactoryEv(%class.SkShader_Blend*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.55*, %class.SkReadBuffer*)* @_ZN14SkShader_Blend10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK14SkShader_Blend11getTypeNameEv(%class.SkShader_Blend*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase18getFlattenableTypeEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i32 8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkShader8isOpaqueEv(%class.SkShader*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare i32 @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE(%class.SkShader*, %"struct.SkShader::GradientInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase10isConstantEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkImage* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode(%class.SkShaderBase*, %class.SkMatrix*, i32*) unnamed_addr #0 comdat align 2 {
  ret %class.SkImage* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkRuntimeEffect* @_ZNK12SkShaderBase15asRuntimeEffectEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret %class.SkRuntimeEffect* null
}

declare void @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix(%class.sk_sp* sret, %class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #0 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase18onAsLuminanceColorEPj(%class.SkShaderBase*, i32*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkStageUpdater* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret %class.SkStageUpdater* null
}

declare void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase*, %class.SkMatrix*) unnamed_addr #1

declare void @_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringES1_(%class.sk_sp.1* sret, void (%"struct.SkRuntimeEffect::Result"*, %class.SkString*)*, %class.SkString*) local_unnamed_addr #1

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #5

declare void @_ZN15SkRuntimeEffect13MakeForShaderE8SkStringRKNS_7OptionsE(%"struct.SkRuntimeEffect::Result"* sret, %class.SkString*, %"struct.SkRuntimeEffect::Options"* dereferenceable(2)) local_unnamed_addr #1

declare void @_ZN8SkStringC1EOS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #1

declare %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer*, i32) local_unnamed_addr #1

declare void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer*) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #1

declare zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) local_unnamed_addr #1

declare void @_ZN16SkRasterPipeline21append_constant_colorEP12SkArenaAllocPKf(%class.SkRasterPipeline*, %class.SkArenaAlloc*, float*) local_unnamed_addr #1

declare void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* sret, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo* dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) local_unnamed_addr #1

declare void @_ZN4skvm7Builder6premulEPNS_3F32ES2_S2_S1_(%"class.skvm::Builder"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"struct.skvm::F32"*, %"class.skvm::Builder"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringEPKc: argument 0"}
!4 = distinct !{!4, !"_Z25SkMakeCachedRuntimeEffectPFN15SkRuntimeEffect6ResultE8SkStringEPKc"}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev: argument 0"}
!7 = distinct !{!7, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev"}
!8 = distinct !{!8, !9, !"_ZN12SkReadBuffer10readShaderEv: argument 0"}
!9 = distinct !{!9, !"_ZN12SkReadBuffer10readShaderEv"}
!10 = !{!11, !13}
!11 = distinct !{!11, !12, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev: argument 0"}
!12 = distinct !{!12, !"_ZN12SkReadBuffer15readFlattenableI12SkShaderBaseEE5sk_spIT_Ev"}
!13 = distinct !{!13, !14, !"_ZN12SkReadBuffer10readShaderEv: argument 0"}
!14 = distinct !{!14, !"_ZN12SkReadBuffer10readShaderEv"}
!15 = !{i8 0, i8 2}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN9SkShaders5BlendE11SkBlendMode5sk_spI8SkShaderES3_: argument 0"}
!18 = distinct !{!18, !"_ZN9SkShaders5BlendE11SkBlendMode5sk_spI8SkShaderES3_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZL16program_or_paintRK5sk_spI8SkShaderEPN4skvm7BuilderENS4_5CoordES7_NS4_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS4_8UniformsEP12SkArenaAlloc: argument 0"}
!21 = distinct !{!21, !"_ZL16program_or_paintRK5sk_spI8SkShaderEPN4skvm7BuilderENS4_5CoordES7_NS4_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS4_8UniformsEP12SkArenaAlloc"}
!22 = !{!23, !20}
!23 = distinct !{!23, !24, !"_ZN4skvm7Builder6premulENS_5ColorE: argument 0"}
!24 = distinct !{!24, !"_ZN4skvm7Builder6premulENS_5ColorE"}
!25 = !{!23}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZL16program_or_paintRK5sk_spI8SkShaderEPN4skvm7BuilderENS4_5CoordES7_NS4_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS4_8UniformsEP12SkArenaAlloc: argument 0"}
!28 = distinct !{!28, !"_ZL16program_or_paintRK5sk_spI8SkShaderEPN4skvm7BuilderENS4_5CoordES7_NS4_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS4_8UniformsEP12SkArenaAlloc"}
!29 = !{!30, !27}
!30 = distinct !{!30, !31, !"_ZN4skvm7Builder6premulENS_5ColorE: argument 0"}
!31 = distinct !{!31, !"_ZN4skvm7Builder6premulENS_5ColorE"}
!32 = !{!30}
