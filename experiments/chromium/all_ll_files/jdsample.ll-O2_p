; ModuleID = '../../third_party/libjpeg_turbo/jdsample.c'
source_filename = "../../third_party/libjpeg_turbo/jdsample.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_upsampler = type { %struct.jpeg_upsampler, [10 x i8**], [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)*], i32, i32, [10 x i32], [10 x i8], [10 x i8] }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_upsampler(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  %3 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %3, i64 0, i32 7
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %22

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %9 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %9, i64 0, i32 0
  %11 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %10, align 8
  %12 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %13 = tail call i8* %11(%struct.jpeg_common_struct* %12, i32 1, i64 256) #5
  %14 = bitcast i8* %13 to %struct.my_upsampler*
  %15 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %16 = bitcast %struct.jpeg_upsampler** %15 to i8**
  store i8* %13, i8** %16, align 8
  %17 = bitcast i8* %13 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @start_pass_upsample, void (%struct.jpeg_decompress_struct*)** %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 8
  %19 = bitcast i8* %18 to void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)**
  store void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* @sep_upsample, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)** %19, align 8
  %20 = getelementptr inbounds i8, i8* %13, i64 16
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 8
  br label %26

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %24 = bitcast %struct.jpeg_upsampler** %23 to %struct.my_upsampler**
  %25 = load %struct.my_upsampler*, %struct.my_upsampler** %24, align 8
  br label %26

26:                                               ; preds = %22, %7
  %27 = phi %struct.my_upsampler* [ %25, %22 ], [ %14, %7 ]
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 59
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %39, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 5
  store i32 25, i32* %34, align 8
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %32, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 0
  %37 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %36, align 8
  %38 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %37(%struct.jpeg_common_struct* %38) #5
  br label %39

39:                                               ; preds = %26, %31
  %40 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 18
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %45 = load i32, i32* %44, align 8
  %46 = icmp sgt i32 %45, 1
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi i1 [ false, %39 ], [ %46, %43 ]
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %50 = load i32, i32* %49, align 8
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %182

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %54 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %53, align 8
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 61
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %59 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %60 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 0, i32 2
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %62 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  br label %63

63:                                               ; preds = %52, %176
  %64 = phi i64 [ 0, %52 ], [ %177, %176 ]
  %65 = phi %struct.jpeg_component_info* [ %54, %52 ], [ %178, %176 ]
  %66 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 2
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 9
  %69 = load i32, i32* %68, align 4
  %70 = mul nsw i32 %69, %67
  %71 = load i32, i32* %55, align 8
  %72 = sdiv i32 %70, %71
  %73 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = mul nsw i32 %74, %69
  %76 = sdiv i32 %75, %71
  %77 = load i32, i32* %56, align 8
  %78 = load i32, i32* %57, align 4
  %79 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 5, i64 %64
  store i32 %76, i32* %79, align 4
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 12
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %63
  %84 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @noop_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %84, align 8
  br label %176

85:                                               ; preds = %63
  %86 = icmp eq i32 %72, %77
  %87 = icmp eq i32 %76, %78
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @fullsize_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %90, align 8
  br label %176

91:                                               ; preds = %85
  %92 = shl nsw i32 %72, 1
  %93 = icmp eq i32 %92, %77
  %94 = and i1 %93, %87
  br i1 %94, label %95, label %112

95:                                               ; preds = %91
  br i1 %48, label %96, label %106

96:                                               ; preds = %95
  %97 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 10
  %98 = load i32, i32* %97, align 8
  %99 = icmp ugt i32 %98, 2
  br i1 %99, label %100, label %106

100:                                              ; preds = %96
  %101 = tail call i32 @jsimd_can_h2v1_fancy_upsample() #5
  %102 = icmp eq i32 %101, 0
  %103 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  br i1 %102, label %105, label %104

104:                                              ; preds = %100
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @jsimd_h2v1_fancy_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %103, align 8
  br label %158

105:                                              ; preds = %100
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @h2v1_fancy_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %103, align 8
  br label %158

106:                                              ; preds = %96, %95
  %107 = tail call i32 @jsimd_can_h2v1_upsample() #5
  %108 = icmp eq i32 %107, 0
  %109 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  br i1 %108, label %111, label %110

110:                                              ; preds = %106
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @jsimd_h2v1_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %109, align 8
  br label %158

111:                                              ; preds = %106
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @h2v1_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %109, align 8
  br label %158

112:                                              ; preds = %91
  %113 = shl nsw i32 %76, 1
  %114 = icmp eq i32 %113, %78
  %115 = and i1 %48, %114
  %116 = and i1 %86, %115
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @h1v2_fancy_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %118, align 8
  store i32 1, i32* %60, align 8
  br label %158

119:                                              ; preds = %112
  %120 = icmp eq i32 %113, %78
  %121 = and i1 %93, %120
  br i1 %121, label %122, label %138

122:                                              ; preds = %119
  br i1 %48, label %123, label %132

123:                                              ; preds = %122
  %124 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 0, i32 10
  %125 = load i32, i32* %124, align 8
  %126 = icmp ugt i32 %125, 2
  br i1 %126, label %127, label %132

127:                                              ; preds = %123
  %128 = tail call i32 @jsimd_can_h2v2_fancy_upsample() #5
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  %131 = select i1 %129, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @h2v2_fancy_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @jsimd_h2v2_fancy_upsample
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* %131, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %130, align 8
  store i32 1, i32* %60, align 8
  br label %158

132:                                              ; preds = %123, %122
  %133 = tail call i32 @jsimd_can_h2v2_upsample() #5
  %134 = icmp eq i32 %133, 0
  %135 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  br i1 %134, label %137, label %136

136:                                              ; preds = %132
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @jsimd_h2v2_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %135, align 8
  br label %158

137:                                              ; preds = %132
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @h2v2_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %135, align 8
  br label %158

138:                                              ; preds = %119
  %139 = srem i32 %77, %72
  %140 = sdiv i32 %77, %72
  %141 = icmp eq i32 %139, 0
  br i1 %141, label %142, label %152

142:                                              ; preds = %138
  %143 = srem i32 %78, %76
  %144 = sdiv i32 %78, %76
  %145 = icmp eq i32 %143, 0
  br i1 %145, label %146, label %152

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 2, i64 %64
  store void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)* @int_upsample, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %147, align 8
  %148 = trunc i32 %140 to i8
  %149 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 6, i64 %64
  store i8 %148, i8* %149, align 1
  %150 = trunc i32 %144 to i8
  %151 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 7, i64 %64
  store i8 %150, i8* %151, align 1
  br label %158

152:                                              ; preds = %142, %138
  %153 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %58, align 8
  %154 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %153, i64 0, i32 5
  store i32 38, i32* %154, align 8
  %155 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %58, align 8
  %156 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %155, i64 0, i32 0
  %157 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %156, align 8
  tail call void %157(%struct.jpeg_common_struct* %59) #5
  br label %158

158:                                              ; preds = %152, %146, %137, %136, %127, %117, %111, %110, %105, %104
  %159 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %2, align 8
  %160 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %159, i64 0, i32 7
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %176

163:                                              ; preds = %158
  %164 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %61, align 8
  %165 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %164, i64 0, i32 2
  %166 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %165, align 8
  %167 = load i32, i32* %62, align 8
  %168 = zext i32 %167 to i64
  %169 = load i32, i32* %56, align 8
  %170 = sext i32 %169 to i64
  %171 = tail call i64 @jround_up(i64 %168, i64 %170) #5
  %172 = trunc i64 %171 to i32
  %173 = load i32, i32* %57, align 4
  %174 = tail call i8** %166(%struct.jpeg_common_struct* %59, i32 1, i32 %172, i32 %173) #5
  %175 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %27, i64 0, i32 1, i64 %64
  store i8** %174, i8*** %175, align 8
  br label %176

176:                                              ; preds = %83, %89, %158, %163
  %177 = add nuw nsw i64 %64, 1
  %178 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %65, i64 1
  %179 = load i32, i32* %49, align 8
  %180 = sext i32 %179 to i64
  %181 = icmp slt i64 %177, %180
  br i1 %181, label %63, label %182

182:                                              ; preds = %176, %47
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @start_pass_upsample(%struct.jpeg_decompress_struct* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %3 = bitcast %struct.jpeg_upsampler** %2 to %struct.my_upsampler**
  %4 = load %struct.my_upsampler*, %struct.my_upsampler** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %4, i64 0, i32 3
  store i32 %6, i32* %7, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 28
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %4, i64 0, i32 4
  store i32 %9, i32* %10, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @sep_upsample(%struct.jpeg_decompress_struct*, i8*** nocapture readonly, i32* nocapture, i32, i8**, i32* nocapture, i32) #0 {
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %9 = bitcast %struct.jpeg_upsampler** %8 to %struct.my_upsampler**
  %10 = load %struct.my_upsampler*, %struct.my_upsampler** %9, align 8
  %11 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %44, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %22 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %21, align 8
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i64 [ 0, %20 ], [ %37, %23 ]
  %25 = phi %struct.jpeg_component_info* [ %22, %20 ], [ %38, %23 ]
  %26 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 2, i64 %24
  %27 = load void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)*, void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***)** %26, align 8
  %28 = getelementptr inbounds i8**, i8*** %1, i64 %24
  %29 = load i8**, i8*** %28, align 8
  %30 = load i32, i32* %2, align 4
  %31 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 5, i64 %24
  %32 = load i32, i32* %31, align 4
  %33 = mul i32 %32, %30
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8*, i8** %29, i64 %34
  %36 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 1, i64 %24
  tail call void %27(%struct.jpeg_decompress_struct* %0, %struct.jpeg_component_info* %25, i8** %35, i8*** %36) #5
  %37 = add nuw nsw i64 %24, 1
  %38 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %25, i64 1
  %39 = load i32, i32* %17, align 8
  %40 = sext i32 %39 to i64
  %41 = icmp slt i64 %37, %40
  br i1 %41, label %23, label %42

42:                                               ; preds = %23, %16
  store i32 0, i32* %11, align 8
  %43 = load i32, i32* %13, align 4
  br label %44

44:                                               ; preds = %7, %42
  %45 = phi i32 [ %12, %7 ], [ 0, %42 ]
  %46 = phi i32 [ %14, %7 ], [ %43, %42 ]
  %47 = sub nsw i32 %46, %45
  %48 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 4
  %49 = load i32, i32* %48, align 4
  %50 = icmp ugt i32 %47, %49
  %51 = select i1 %50, i32 %49, i32 %47
  %52 = load i32, i32* %5, align 4
  %53 = sub i32 %6, %52
  %54 = icmp ugt i32 %51, %53
  %55 = select i1 %54, i32 %53, i32 %51
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 86
  %57 = load %struct.jpeg_color_deconverter*, %struct.jpeg_color_deconverter** %56, align 8
  %58 = getelementptr inbounds %struct.jpeg_color_deconverter, %struct.jpeg_color_deconverter* %57, i64 0, i32 1
  %59 = load void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)** %58, align 8
  %60 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %10, i64 0, i32 1, i64 0
  %61 = zext i32 %52 to i64
  %62 = getelementptr inbounds i8*, i8** %4, i64 %61
  tail call void %59(%struct.jpeg_decompress_struct* %0, i8*** %60, i32 %45, i8** %62, i32 %55) #5
  %63 = load i32, i32* %5, align 4
  %64 = add i32 %63, %55
  store i32 %64, i32* %5, align 4
  %65 = load i32, i32* %48, align 4
  %66 = sub i32 %65, %55
  store i32 %66, i32* %48, align 4
  %67 = load i32, i32* %11, align 8
  %68 = add i32 %67, %55
  store i32 %68, i32* %11, align 8
  %69 = load i32, i32* %13, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %74, label %71

71:                                               ; preds = %44
  %72 = load i32, i32* %2, align 4
  %73 = add i32 %72, 1
  store i32 %73, i32* %2, align 4
  br label %74

74:                                               ; preds = %44, %71
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @noop_upsample(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readnone, i8** nocapture readnone, i8*** nocapture) #2 {
  store i8** null, i8*** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @fullsize_upsample(%struct.jpeg_decompress_struct* nocapture readnone, %struct.jpeg_component_info* nocapture readnone, i8**, i8*** nocapture) #2 {
  store i8** %2, i8*** %3, align 8
  ret void
}

declare i32 @jsimd_can_h2v1_fancy_upsample() local_unnamed_addr #3

declare void @jsimd_h2v1_fancy_upsample(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @h2v1_fancy_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly) #1 {
  %5 = load i8**, i8*** %3, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %190

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 10
  br label %11

11:                                               ; preds = %9, %171
  %12 = phi i64 [ 0, %9 ], [ %186, %171 ]
  %13 = getelementptr inbounds i8*, i8** %2, i64 %12
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8*, i8** %5, i64 %12
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  %18 = load i8, i8* %14, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %18, i8* %16, align 1
  %21 = mul nuw nsw i32 %19, 3
  %22 = load i8, i8* %17, align 1
  %23 = zext i8 %22 to i32
  %24 = add nuw nsw i32 %21, 2
  %25 = add nuw nsw i32 %24, %23
  %26 = lshr i32 %25, 2
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %20, align 1
  %28 = load i32, i32* %10, align 8
  %29 = add i32 %28, -2
  %30 = getelementptr inbounds i8, i8* %16, i64 2
  %31 = icmp eq i32 %29, 0
  br i1 %31, label %171, label %32

32:                                               ; preds = %11
  %33 = add i32 %28, -3
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %34, 1
  %36 = icmp ult i64 %35, 16
  br i1 %36, label %91, label %37

37:                                               ; preds = %32
  %38 = getelementptr i8, i8* %16, i64 4
  %39 = add i32 %28, -3
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 1
  %42 = getelementptr i8, i8* %38, i64 %41
  %43 = getelementptr i8, i8* %14, i64 3
  %44 = getelementptr i8, i8* %43, i64 %40
  %45 = icmp ult i8* %30, %44
  %46 = icmp ult i8* %14, %42
  %47 = and i1 %45, %46
  br i1 %47, label %91, label %48

48:                                               ; preds = %37
  %49 = and i64 %35, 8589934576
  %50 = shl nuw nsw i64 %49, 1
  %51 = getelementptr i8, i8* %30, i64 %50
  %52 = trunc i64 %49 to i32
  %53 = sub i32 %29, %52
  %54 = shl nuw nsw i64 %49, 1
  %55 = getelementptr i8, i8* %16, i64 %54
  %56 = getelementptr i8, i8* %17, i64 %49
  %57 = getelementptr inbounds i8, i8* %16, i64 2
  br label %58

58:                                               ; preds = %58, %48
  %59 = phi i64 [ 0, %48 ], [ %85, %58 ]
  %60 = shl i64 %59, 1
  %61 = getelementptr i8, i8* %17, i64 %59
  %62 = getelementptr inbounds i8, i8* %61, i64 1
  %63 = bitcast i8* %61 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !2
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = mul nuw nsw <16 x i32> %65, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %67 = getelementptr inbounds i8, i8* %61, i64 -1
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !2
  %70 = zext <16 x i8> %69 to <16 x i32>
  %71 = add nuw nsw <16 x i32> %70, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %72 = add nuw nsw <16 x i32> %71, %66
  %73 = lshr <16 x i32> %72, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %74 = trunc <16 x i32> %73 to <16 x i8>
  %75 = bitcast i8* %62 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !2
  %77 = zext <16 x i8> %76 to <16 x i32>
  %78 = add nuw nsw <16 x i32> %66, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %79 = add nuw nsw <16 x i32> %78, %77
  %80 = lshr <16 x i32> %79, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %81 = trunc <16 x i32> %80 to <16 x i8>
  %82 = getelementptr inbounds i8, i8* %57, i64 %60
  %83 = bitcast i8* %82 to <32 x i8>*
  %84 = shufflevector <16 x i8> %74, <16 x i8> %81, <32 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <32 x i8> %84, <32 x i8>* %83, align 1
  %85 = add i64 %59, 16
  %86 = icmp eq i64 %85, %49
  br i1 %86, label %87, label %58, !llvm.loop !5

87:                                               ; preds = %58
  %88 = icmp eq i64 %35, %49
  %89 = shl nuw nsw i64 %49, 1
  %90 = getelementptr i8, i8* %16, i64 %89
  br i1 %88, label %171, label %91

91:                                               ; preds = %87, %37, %32
  %92 = phi i8* [ %30, %37 ], [ %30, %32 ], [ %51, %87 ]
  %93 = phi i32 [ %29, %37 ], [ %29, %32 ], [ %53, %87 ]
  %94 = phi i8* [ %16, %37 ], [ %16, %32 ], [ %55, %87 ]
  %95 = phi i8* [ %17, %37 ], [ %17, %32 ], [ %56, %87 ]
  %96 = and i32 %93, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %119, label %98

98:                                               ; preds = %91
  %99 = getelementptr inbounds i8, i8* %95, i64 1
  %100 = load i8, i8* %95, align 1
  %101 = zext i8 %100 to i32
  %102 = mul nuw nsw i32 %101, 3
  %103 = getelementptr inbounds i8, i8* %95, i64 -1
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i32 %105, 1
  %107 = add nuw nsw i32 %106, %102
  %108 = lshr i32 %107, 2
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds i8, i8* %94, i64 3
  store i8 %109, i8* %92, align 1
  %111 = load i8, i8* %99, align 1
  %112 = zext i8 %111 to i32
  %113 = add nuw nsw i32 %102, 2
  %114 = add nuw nsw i32 %113, %112
  %115 = lshr i32 %114, 2
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %110, align 1
  %117 = add i32 %93, -1
  %118 = getelementptr inbounds i8, i8* %92, i64 2
  br label %119

119:                                              ; preds = %98, %91
  %120 = phi i8* [ %99, %98 ], [ undef, %91 ]
  %121 = phi i8* [ %118, %98 ], [ undef, %91 ]
  %122 = phi i8* [ %118, %98 ], [ %92, %91 ]
  %123 = phi i32 [ %117, %98 ], [ %93, %91 ]
  %124 = phi i8* [ %92, %98 ], [ %94, %91 ]
  %125 = phi i8* [ %99, %98 ], [ %95, %91 ]
  %126 = icmp eq i32 %93, 1
  br i1 %126, label %171, label %127

127:                                              ; preds = %119, %127
  %128 = phi i8* [ %169, %127 ], [ %122, %119 ]
  %129 = phi i32 [ %168, %127 ], [ %123, %119 ]
  %130 = phi i8* [ %150, %127 ], [ %124, %119 ]
  %131 = phi i8* [ %151, %127 ], [ %125, %119 ]
  %132 = getelementptr inbounds i8, i8* %131, i64 1
  %133 = load i8, i8* %131, align 1
  %134 = zext i8 %133 to i32
  %135 = mul nuw nsw i32 %134, 3
  %136 = getelementptr inbounds i8, i8* %131, i64 -1
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nuw nsw i32 %138, 1
  %140 = add nuw nsw i32 %139, %135
  %141 = lshr i32 %140, 2
  %142 = trunc i32 %141 to i8
  %143 = getelementptr inbounds i8, i8* %130, i64 3
  store i8 %142, i8* %128, align 1
  %144 = load i8, i8* %132, align 1
  %145 = zext i8 %144 to i32
  %146 = add nuw nsw i32 %135, 2
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 2
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %143, align 1
  %150 = getelementptr inbounds i8, i8* %128, i64 2
  %151 = getelementptr inbounds i8, i8* %131, i64 2
  %152 = load i8, i8* %132, align 1
  %153 = zext i8 %152 to i32
  %154 = mul nuw nsw i32 %153, 3
  %155 = load i8, i8* %131, align 1
  %156 = zext i8 %155 to i32
  %157 = add nuw nsw i32 %156, 1
  %158 = add nuw nsw i32 %157, %154
  %159 = lshr i32 %158, 2
  %160 = trunc i32 %159 to i8
  %161 = getelementptr inbounds i8, i8* %128, i64 3
  store i8 %160, i8* %150, align 1
  %162 = load i8, i8* %151, align 1
  %163 = zext i8 %162 to i32
  %164 = add nuw nsw i32 %154, 2
  %165 = add nuw nsw i32 %164, %163
  %166 = lshr i32 %165, 2
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* %161, align 1
  %168 = add i32 %129, -2
  %169 = getelementptr inbounds i8, i8* %128, i64 4
  %170 = icmp eq i32 %168, 0
  br i1 %170, label %171, label %127, !llvm.loop !7

171:                                              ; preds = %119, %127, %87, %11
  %172 = phi i8* [ %17, %11 ], [ %56, %87 ], [ %120, %119 ], [ %151, %127 ]
  %173 = phi i8* [ %16, %11 ], [ %90, %87 ], [ %92, %119 ], [ %150, %127 ]
  %174 = phi i8* [ %30, %11 ], [ %51, %87 ], [ %121, %119 ], [ %169, %127 ]
  %175 = load i8, i8* %172, align 1
  %176 = zext i8 %175 to i32
  %177 = mul nuw nsw i32 %176, 3
  %178 = getelementptr inbounds i8, i8* %172, i64 -1
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = add nuw nsw i32 %180, 1
  %182 = add nuw nsw i32 %181, %177
  %183 = lshr i32 %182, 2
  %184 = trunc i32 %183 to i8
  %185 = getelementptr inbounds i8, i8* %173, i64 3
  store i8 %184, i8* %174, align 1
  store i8 %175, i8* %185, align 1
  %186 = add nuw nsw i64 %12, 1
  %187 = load i32, i32* %6, align 4
  %188 = sext i32 %187 to i64
  %189 = icmp slt i64 %186, %188
  br i1 %189, label %11, label %190

190:                                              ; preds = %171, %4
  ret void
}

declare i32 @jsimd_can_h2v1_upsample() local_unnamed_addr #3

declare void @jsimd_h2v1_upsample(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @h2v1_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readnone, i8** nocapture readonly, i8*** nocapture readonly) #1 {
  %5 = load i8**, i8*** %3, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %38

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  br label %11

11:                                               ; preds = %9, %33
  %12 = phi i32 [ %7, %9 ], [ %34, %33 ]
  %13 = phi i64 [ 0, %9 ], [ %35, %33 ]
  %14 = getelementptr inbounds i8*, i8** %5, i64 %13
  %15 = load i8*, i8** %14, align 8
  %16 = load i32, i32* %10, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = icmp eq i32 %16, 0
  br i1 %19, label %33, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds i8*, i8** %2, i64 %13
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %23
  %24 = phi i8* [ %29, %23 ], [ %15, %20 ]
  %25 = phi i8* [ %26, %23 ], [ %22, %20 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %27, i8* %24, align 1
  %29 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %27, i8* %28, align 1
  %30 = icmp ult i8* %29, %18
  br i1 %30, label %23, label %31

31:                                               ; preds = %23
  %32 = load i32, i32* %6, align 4
  br label %33

33:                                               ; preds = %31, %11
  %34 = phi i32 [ %32, %31 ], [ %12, %11 ]
  %35 = add nuw nsw i64 %13, 1
  %36 = sext i32 %34 to i64
  %37 = icmp slt i64 %35, %36
  br i1 %37, label %11, label %38

38:                                               ; preds = %33, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @h1v2_fancy_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly) #1 {
  %5 = load i8**, i8*** %3, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %57

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  br label %12

12:                                               ; preds = %9, %83
  %13 = phi i32 [ %11, %9 ], [ %84, %83 ]
  %14 = phi i64 [ 0, %9 ], [ %17, %83 ]
  %15 = phi i64 [ 0, %9 ], [ %55, %83 ]
  %16 = getelementptr inbounds i8*, i8** %2, i64 %14
  %17 = add nuw i64 %14, 1
  %18 = and i64 %17, 4294967295
  %19 = shl i64 %15, 32
  %20 = ashr exact i64 %19, 32
  %21 = load i8*, i8** %16, align 8
  %22 = add nsw i64 %20, 1
  %23 = icmp eq i32 %13, 0
  br i1 %23, label %52, label %24

24:                                               ; preds = %12
  %25 = getelementptr inbounds i8*, i8** %5, i64 %20
  %26 = load i8*, i8** %25, align 8
  %27 = add nsw i64 %14, -1
  %28 = getelementptr inbounds i8*, i8** %2, i64 %27
  %29 = load i8*, i8** %28, align 8
  br label %30

30:                                               ; preds = %24, %30
  %31 = phi i32 [ %47, %30 ], [ 0, %24 ]
  %32 = phi i8* [ %46, %30 ], [ %26, %24 ]
  %33 = phi i8* [ %39, %30 ], [ %29, %24 ]
  %34 = phi i8* [ %35, %30 ], [ %21, %24 ]
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  %36 = load i8, i8* %34, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, 3
  %39 = getelementptr inbounds i8, i8* %33, i64 1
  %40 = load i8, i8* %33, align 1
  %41 = zext i8 %40 to i32
  %42 = add nuw nsw i32 %41, 1
  %43 = add nuw nsw i32 %42, %38
  %44 = lshr i32 %43, 2
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %32, i64 1
  store i8 %45, i8* %32, align 1
  %47 = add nuw i32 %31, 1
  %48 = load i32, i32* %10, align 8
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %30, label %50

50:                                               ; preds = %30
  %51 = load i8*, i8** %16, align 8
  br label %52

52:                                               ; preds = %50, %12
  %53 = phi i32 [ %48, %50 ], [ %13, %12 ]
  %54 = phi i8* [ %51, %50 ], [ %21, %12 ]
  %55 = add nsw i64 %20, 2
  %56 = icmp eq i32 %53, 0
  br i1 %56, label %83, label %58

57:                                               ; preds = %83, %4
  ret void

58:                                               ; preds = %52
  %59 = getelementptr inbounds i8*, i8** %5, i64 %22
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds i8*, i8** %2, i64 %18
  %62 = load i8*, i8** %61, align 8
  br label %63

63:                                               ; preds = %63, %58
  %64 = phi i32 [ %80, %63 ], [ 0, %58 ]
  %65 = phi i8* [ %79, %63 ], [ %60, %58 ]
  %66 = phi i8* [ %72, %63 ], [ %62, %58 ]
  %67 = phi i8* [ %68, %63 ], [ %54, %58 ]
  %68 = getelementptr inbounds i8, i8* %67, i64 1
  %69 = load i8, i8* %67, align 1
  %70 = zext i8 %69 to i32
  %71 = mul nuw nsw i32 %70, 3
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  %73 = load i8, i8* %66, align 1
  %74 = zext i8 %73 to i32
  %75 = add nuw nsw i32 %74, 2
  %76 = add nuw nsw i32 %75, %71
  %77 = lshr i32 %76, 2
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %78, i8* %65, align 1
  %80 = add nuw i32 %64, 1
  %81 = load i32, i32* %10, align 8
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %63, label %83

83:                                               ; preds = %63, %52
  %84 = phi i32 [ 0, %52 ], [ %81, %63 ]
  %85 = trunc i64 %55 to i32
  %86 = load i32, i32* %6, align 4
  %87 = icmp sgt i32 %86, %85
  br i1 %87, label %12, label %57
}

declare i32 @jsimd_can_h2v2_fancy_upsample() local_unnamed_addr #3

declare void @jsimd_h2v2_fancy_upsample(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @h2v2_fancy_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly) #1 {
  %5 = load i8**, i8*** %3, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %135

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 10
  br label %11

11:                                               ; preds = %9, %168
  %12 = phi i64 [ 0, %9 ], [ %16, %168 ]
  %13 = phi i64 [ 0, %9 ], [ %104, %168 ]
  %14 = getelementptr inbounds i8*, i8** %2, i64 %12
  %15 = add nsw i64 %12, -1
  %16 = add nuw i64 %12, 1
  %17 = and i64 %16, 4294967295
  %18 = shl i64 %13, 32
  %19 = ashr exact i64 %18, 32
  %20 = load i8*, i8** %14, align 8
  %21 = getelementptr inbounds i8*, i8** %2, i64 %15
  %22 = load i8*, i8** %21, align 8
  %23 = add nsw i64 %19, 1
  %24 = getelementptr inbounds i8*, i8** %5, i64 %19
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds i8, i8* %20, i64 1
  %27 = load i8, i8* %20, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nuw nsw i32 %28, 3
  %30 = getelementptr inbounds i8, i8* %22, i64 1
  %31 = load i8, i8* %22, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %29, %32
  %34 = load i8, i8* %26, align 1
  %35 = zext i8 %34 to i32
  %36 = mul nuw nsw i32 %35, 3
  %37 = load i8, i8* %30, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %36, %38
  %40 = shl nuw nsw i32 %33, 2
  %41 = add nuw nsw i32 %40, 8
  %42 = lshr i32 %41, 4
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %43, i8* %25, align 1
  %45 = mul nuw nsw i32 %33, 3
  %46 = add nuw nsw i32 %45, 7
  %47 = add nuw nsw i32 %46, %39
  %48 = lshr i32 %47, 4
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %44, align 1
  %50 = load i32, i32* %10, align 8
  %51 = add i32 %50, -2
  %52 = getelementptr inbounds i8, i8* %25, i64 2
  %53 = icmp eq i32 %51, 0
  br i1 %53, label %86, label %54

54:                                               ; preds = %11
  %55 = getelementptr inbounds i8, i8* %22, i64 2
  %56 = getelementptr inbounds i8, i8* %20, i64 2
  br label %57

57:                                               ; preds = %54, %57
  %58 = phi i8* [ %84, %57 ], [ %52, %54 ]
  %59 = phi i32 [ %83, %57 ], [ %51, %54 ]
  %60 = phi i32 [ %61, %57 ], [ %33, %54 ]
  %61 = phi i32 [ %72, %57 ], [ %39, %54 ]
  %62 = phi i8* [ %58, %57 ], [ %25, %54 ]
  %63 = phi i8* [ %69, %57 ], [ %55, %54 ]
  %64 = phi i8* [ %65, %57 ], [ %56, %54 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  %66 = load i8, i8* %64, align 1
  %67 = zext i8 %66 to i32
  %68 = mul nuw nsw i32 %67, 3
  %69 = getelementptr inbounds i8, i8* %63, i64 1
  %70 = load i8, i8* %63, align 1
  %71 = zext i8 %70 to i32
  %72 = add nuw nsw i32 %68, %71
  %73 = mul nuw nsw i32 %61, 3
  %74 = add nuw nsw i32 %60, 8
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds i8, i8* %62, i64 3
  store i8 %77, i8* %58, align 1
  %79 = add nuw nsw i32 %73, 7
  %80 = add nuw nsw i32 %79, %72
  %81 = lshr i32 %80, 4
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %78, align 1
  %83 = add i32 %59, -1
  %84 = getelementptr inbounds i8, i8* %58, i64 2
  %85 = icmp eq i32 %83, 0
  br i1 %85, label %86, label %57

86:                                               ; preds = %57, %11
  %87 = phi i8* [ %25, %11 ], [ %58, %57 ]
  %88 = phi i32 [ %39, %11 ], [ %72, %57 ]
  %89 = phi i32 [ %33, %11 ], [ %61, %57 ]
  %90 = phi i8* [ %52, %11 ], [ %84, %57 ]
  %91 = mul nsw i32 %88, 3
  %92 = add nuw nsw i32 %89, 8
  %93 = add nuw nsw i32 %92, %91
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %87, i64 3
  store i8 %95, i8* %90, align 1
  %97 = shl nsw i32 %88, 2
  %98 = add nuw nsw i32 %97, 7
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %96, align 1
  %101 = load i8*, i8** %14, align 8
  %102 = getelementptr inbounds i8*, i8** %2, i64 %17
  %103 = load i8*, i8** %102, align 8
  %104 = add nsw i64 %19, 2
  %105 = getelementptr inbounds i8*, i8** %5, i64 %23
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds i8, i8* %101, i64 1
  %108 = load i8, i8* %101, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, 3
  %111 = getelementptr inbounds i8, i8* %103, i64 1
  %112 = load i8, i8* %103, align 1
  %113 = zext i8 %112 to i32
  %114 = add nuw nsw i32 %110, %113
  %115 = load i8, i8* %107, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nuw nsw i32 %116, 3
  %118 = load i8, i8* %111, align 1
  %119 = zext i8 %118 to i32
  %120 = add nuw nsw i32 %117, %119
  %121 = shl nuw nsw i32 %114, 2
  %122 = add nuw nsw i32 %121, 8
  %123 = lshr i32 %122, 4
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %106, i64 1
  store i8 %124, i8* %106, align 1
  %126 = mul nuw nsw i32 %114, 3
  %127 = add nuw nsw i32 %126, 7
  %128 = add nuw nsw i32 %127, %120
  %129 = lshr i32 %128, 4
  %130 = trunc i32 %129 to i8
  store i8 %130, i8* %125, align 1
  %131 = load i32, i32* %10, align 8
  %132 = add i32 %131, -2
  %133 = getelementptr inbounds i8, i8* %106, i64 2
  %134 = icmp eq i32 %132, 0
  br i1 %134, label %168, label %136

135:                                              ; preds = %168, %4
  ret void

136:                                              ; preds = %86
  %137 = getelementptr inbounds i8, i8* %103, i64 2
  %138 = getelementptr inbounds i8, i8* %101, i64 2
  br label %139

139:                                              ; preds = %139, %136
  %140 = phi i8* [ %166, %139 ], [ %133, %136 ]
  %141 = phi i32 [ %165, %139 ], [ %132, %136 ]
  %142 = phi i32 [ %143, %139 ], [ %114, %136 ]
  %143 = phi i32 [ %154, %139 ], [ %120, %136 ]
  %144 = phi i8* [ %140, %139 ], [ %106, %136 ]
  %145 = phi i8* [ %151, %139 ], [ %137, %136 ]
  %146 = phi i8* [ %147, %139 ], [ %138, %136 ]
  %147 = getelementptr inbounds i8, i8* %146, i64 1
  %148 = load i8, i8* %146, align 1
  %149 = zext i8 %148 to i32
  %150 = mul nuw nsw i32 %149, 3
  %151 = getelementptr inbounds i8, i8* %145, i64 1
  %152 = load i8, i8* %145, align 1
  %153 = zext i8 %152 to i32
  %154 = add nuw nsw i32 %150, %153
  %155 = mul nuw nsw i32 %143, 3
  %156 = add nuw nsw i32 %142, 8
  %157 = add nuw nsw i32 %156, %155
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = getelementptr inbounds i8, i8* %144, i64 3
  store i8 %159, i8* %140, align 1
  %161 = add nuw nsw i32 %155, 7
  %162 = add nuw nsw i32 %161, %154
  %163 = lshr i32 %162, 4
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %160, align 1
  %165 = add i32 %141, -1
  %166 = getelementptr inbounds i8, i8* %140, i64 2
  %167 = icmp eq i32 %165, 0
  br i1 %167, label %168, label %139

168:                                              ; preds = %139, %86
  %169 = phi i8* [ %106, %86 ], [ %140, %139 ]
  %170 = phi i32 [ %120, %86 ], [ %154, %139 ]
  %171 = phi i32 [ %114, %86 ], [ %143, %139 ]
  %172 = phi i8* [ %133, %86 ], [ %166, %139 ]
  %173 = mul nsw i32 %170, 3
  %174 = add nuw nsw i32 %171, 8
  %175 = add nuw nsw i32 %174, %173
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = getelementptr inbounds i8, i8* %169, i64 3
  store i8 %177, i8* %172, align 1
  %179 = shl nsw i32 %170, 2
  %180 = add nuw nsw i32 %179, 7
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  store i8 %182, i8* %178, align 1
  %183 = trunc i64 %104 to i32
  %184 = load i32, i32* %6, align 4
  %185 = icmp sgt i32 %184, %183
  br i1 %185, label %11, label %135
}

declare i32 @jsimd_can_h2v2_upsample() local_unnamed_addr #3

declare void @jsimd_h2v2_upsample(%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i8**, i8***) #3

; Function Attrs: nounwind ssp uwtable
define internal void @h2v2_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readnone, i8** nocapture readonly, i8*** nocapture readonly) #0 {
  %5 = load i8**, i8*** %3, align 8
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %44

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  br label %11

11:                                               ; preds = %9, %34
  %12 = phi i64 [ 0, %9 ], [ %38, %34 ]
  %13 = phi i64 [ 0, %9 ], [ %39, %34 ]
  %14 = phi i32 [ 0, %9 ], [ %40, %34 ]
  %15 = getelementptr inbounds i8*, i8** %5, i64 %13
  %16 = load i8*, i8** %15, align 8
  %17 = load i32, i32* %10, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %34, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds i8*, i8** %2, i64 %12
  %23 = load i8*, i8** %22, align 8
  br label %24

24:                                               ; preds = %21, %24
  %25 = phi i8* [ %30, %24 ], [ %16, %21 ]
  %26 = phi i8* [ %27, %24 ], [ %23, %21 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  %28 = load i8, i8* %26, align 1
  %29 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %28, i8* %25, align 1
  %30 = getelementptr inbounds i8, i8* %25, i64 2
  store i8 %28, i8* %29, align 1
  %31 = icmp ult i8* %30, %19
  br i1 %31, label %24, label %32

32:                                               ; preds = %24
  %33 = load i32, i32* %10, align 8
  br label %34

34:                                               ; preds = %32, %11
  %35 = phi i32 [ %33, %32 ], [ 0, %11 ]
  %36 = or i32 %14, 1
  %37 = trunc i64 %13 to i32
  tail call void @jcopy_sample_rows(i8** %5, i32 %37, i8** %5, i32 %36, i32 1, i32 %35) #5
  %38 = add nuw i64 %12, 1
  %39 = add nuw i64 %13, 2
  %40 = add nuw nsw i32 %14, 2
  %41 = load i32, i32* %6, align 4
  %42 = trunc i64 %39 to i32
  %43 = icmp sgt i32 %41, %42
  br i1 %43, label %11, label %44

44:                                               ; preds = %34, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @int_upsample(%struct.jpeg_decompress_struct* nocapture readonly, %struct.jpeg_component_info* nocapture readonly, i8** nocapture readonly, i8*** nocapture readonly) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 85
  %6 = bitcast %struct.jpeg_upsampler** %5 to %struct.my_upsampler**
  %7 = load %struct.my_upsampler*, %struct.my_upsampler** %6, align 8
  %8 = load i8**, i8*** %3, align 8
  %9 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %7, i64 0, i32 6, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds %struct.my_upsampler, %struct.my_upsampler* %7, i64 0, i32 7, i64 %11
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 0
  br i1 %20, label %21, label %84

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %23 = icmp eq i8 %13, 0
  %24 = icmp ugt i8 %16, 1
  %25 = add nsw i32 %17, -1
  %26 = zext i8 %13 to i64
  %27 = zext i8 %16 to i64
  %28 = add nsw i32 %14, -1
  %29 = and i32 %14, 7
  %30 = icmp eq i32 %29, 0
  %31 = icmp ult i32 %28, 7
  br label %32

32:                                               ; preds = %21, %77
  %33 = phi i64 [ 0, %21 ], [ %78, %77 ]
  %34 = phi i64 [ 0, %21 ], [ %79, %77 ]
  %35 = phi i32 [ 0, %21 ], [ %80, %77 ]
  %36 = getelementptr inbounds i8*, i8** %8, i64 %34
  %37 = load i8*, i8** %36, align 8
  %38 = load i32, i32* %22, align 8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = icmp eq i32 %38, 0
  br i1 %41, label %72, label %42

42:                                               ; preds = %32
  %43 = getelementptr inbounds i8*, i8** %2, i64 %33
  %44 = load i8*, i8** %43, align 8
  br label %48

45:                                               ; preds = %62, %66, %48
  %46 = phi i8* [ %49, %48 ], [ %65, %62 ], [ %69, %66 ]
  %47 = icmp ult i8* %46, %40
  br i1 %47, label %48, label %72

48:                                               ; preds = %42, %45
  %49 = phi i8* [ %46, %45 ], [ %37, %42 ]
  %50 = phi i8* [ %51, %45 ], [ %44, %42 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  br i1 %23, label %45, label %52

52:                                               ; preds = %48
  %53 = load i8, i8* %50, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %53, i64 %26, i1 false)
  br i1 %30, label %62, label %54

54:                                               ; preds = %52, %54
  %55 = phi i32 [ %59, %54 ], [ %14, %52 ]
  %56 = phi i8* [ %58, %54 ], [ %49, %52 ]
  %57 = phi i32 [ %60, %54 ], [ %29, %52 ]
  %58 = getelementptr inbounds i8, i8* %56, i64 1
  %59 = add nsw i32 %55, -1
  %60 = add i32 %57, -1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %54, !llvm.loop !8

62:                                               ; preds = %54, %52
  %63 = phi i32 [ %14, %52 ], [ %59, %54 ]
  %64 = phi i8* [ %49, %52 ], [ %58, %54 ]
  %65 = phi i8* [ undef, %52 ], [ %58, %54 ]
  br i1 %31, label %45, label %66

66:                                               ; preds = %62, %66
  %67 = phi i32 [ %70, %66 ], [ %63, %62 ]
  %68 = phi i8* [ %69, %66 ], [ %64, %62 ]
  %69 = getelementptr inbounds i8, i8* %68, i64 8
  %70 = add nsw i32 %67, -8
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %66, label %45

72:                                               ; preds = %45, %32
  br i1 %24, label %73, label %77

73:                                               ; preds = %72
  %74 = add nuw nsw i32 %35, 1
  %75 = load i32, i32* %22, align 8
  %76 = trunc i64 %34 to i32
  tail call void @jcopy_sample_rows(i8** %8, i32 %76, i8** %8, i32 %74, i32 %25, i32 %75) #5
  br label %77

77:                                               ; preds = %73, %72
  %78 = add nuw i64 %33, 1
  %79 = add i64 %34, %27
  %80 = add nuw nsw i32 %35, %17
  %81 = load i32, i32* %18, align 4
  %82 = trunc i64 %79 to i32
  %83 = icmp sgt i32 %81, %82
  br i1 %83, label %32, label %84

84:                                               ; preds = %77, %4
  ret void
}

declare i64 @jround_up(i64, i64) local_unnamed_addr #3

declare void @jcopy_sample_rows(i8**, i32, i8**, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
