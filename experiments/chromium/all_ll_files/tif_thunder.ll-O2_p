; ModuleID = '../../third_party/pdfium/third_party/libtiff/tif_thunder.c'
source_filename = "../../third_party/pdfium/third_party/libtiff/tif_thunder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.tiff = type { i8*, i32, i32, i32, i64, i64, i64*, i16, i16, %struct.TIFFDirectory, %struct.TIFFDirectory, %union.anon.0, i16, i32, i16, i32, i64, i64, i16, i64, i32, i32, i64, i32, i32 (%struct.tiff*)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32, i32 (%struct.tiff*, i16)*, i32 (%struct.tiff*)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, i32 (%struct.tiff*, i8*, i64, i16)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*)*, i32 (%struct.tiff*, i32)*, void (%struct.tiff*, i32*, i32*)*, i8*, i64, i64, i8*, i64, i64, i64, i8*, i64, i8*, i64, i32 (i8*, i8**, i64*)*, void (i8*, i8*, i64)*, i8*, i64 (i8*, i8*, i64)*, i64 (i8*, i8*, i64)*, i64 (i8*, i64, i32)*, i32 (i8*)*, i64 (i8*)*, void (%struct.tiff*, i8*, i64)*, %struct._TIFFField**, i64, %struct._TIFFField*, %struct.TIFFTagMethods, %struct.client_info*, %struct._TIFFFieldArray*, i64 }
%struct.TIFFDirectory = type { [4 x i64], i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, double*, double*, float, float, i16, i16, float, float, [2 x i16], [3 x i16*], [2 x i16], i16, i16*, i32, i32, i64*, i64*, i32, %struct.TIFFDirEntry, %struct.TIFFDirEntry, i16, i64*, [2 x i16], i16, [3 x i16*], float*, i32, i8*, i32, %struct.TIFFTagValue*, i8 }
%struct.TIFFDirEntry = type { i16, i16, i64, %union.anon, i8 }
%union.anon = type { i64 }
%struct.TIFFTagValue = type { %struct._TIFFField*, i32, i8* }
%union.anon.0 = type { %struct.TIFFHeaderBig }
%struct.TIFFHeaderBig = type { i16, i16, i16, i16, i64 }
%struct._TIFFField = type { i32, i16, i16, i32, i32, i32, i32, i16, i8, i8, i8*, %struct._TIFFFieldArray* }
%struct.TIFFTagMethods = type { i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, i32 (%struct.tiff*, i32, %struct.__va_list_tag*)*, void (%struct.tiff*, %struct._IO_FILE*, i64)* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.client_info = type { %struct.client_info*, i8*, i8* }
%struct._TIFFFieldArray = type { i32, i32, i32, %struct._TIFFField* }

@ThunderSetupDecode.module = internal constant [19 x i8] c"ThunderSetupDecode\00", align 16
@.str = private unnamed_addr constant [80 x i8] c"Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample.\00", align 1
@ThunderDecodeRow.module = internal constant [17 x i8] c"ThunderDecodeRow\00", align 16
@.str.1 = private unnamed_addr constant [36 x i8] c"Fractional scanlines cannot be read\00", align 1
@ThunderDecode.module = internal constant [14 x i8] c"ThunderDecode\00", align 1
@twobitdeltas = internal unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 0, i32 -1], align 16
@threebitdeltas = internal unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 -3, i32 -2, i32 -1], align 16
@.str.2 = private unnamed_addr constant [39 x i8] c"%s data at scanline %lu (%llu != %llu)\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"Not enough\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"Too much\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @TIFFInitThunderScan(%struct.tiff* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 25
  store i32 (%struct.tiff*)* @ThunderSetupDecode, i32 (%struct.tiff*)** %3, align 8
  %4 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 31
  store i32 (%struct.tiff*, i8*, i64, i16)* @ThunderDecodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %4, align 8
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 33
  store i32 (%struct.tiff*, i8*, i64, i16)* @ThunderDecodeRow, i32 (%struct.tiff*, i8*, i64, i16)** %5, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ThunderSetupDecode(%struct.tiff* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 8
  %3 = load i16, i16* %2, align 4
  %4 = icmp eq i16 %3, 4
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i16 %3 to i32
  %7 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %8 = load i8*, i8** %7, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @ThunderSetupDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str, i64 0, i64 0), i32 %6) #4
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i32 [ 0, %5 ], [ 1, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ThunderDecodeRow(%struct.tiff* nocapture, i8*, i64, i16 zeroext) #1 {
  %5 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 43
  %6 = load i64, i64* %5, align 8
  %7 = srem i64 %2, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = icmp sgt i64 %2, 0
  br i1 %10, label %11, label %252

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 9, i32 1
  %13 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 49
  %14 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 50
  %15 = load i8*, i8** %13, align 8
  %16 = load i64, i64* %14, align 8
  br label %20

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %19 = load i8*, i8** %18, align 8
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %19, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @ThunderDecodeRow.module, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %252

20:                                               ; preds = %11, %247
  %21 = phi i64 [ %16, %11 ], [ %235, %247 ]
  %22 = phi i8* [ %15, %11 ], [ %234, %247 ]
  %23 = phi i8* [ %1, %11 ], [ %250, %247 ]
  %24 = phi i64 [ %2, %11 ], [ %249, %247 ]
  %25 = load i32, i32* %12, align 8
  %26 = zext i32 %25 to i64
  %27 = icmp sgt i64 %21, 0
  %28 = icmp ne i32 %25, 0
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %233

30:                                               ; preds = %20, %226
  %31 = phi i64 [ %229, %226 ], [ 0, %20 ]
  %32 = phi i32 [ %228, %226 ], [ 0, %20 ]
  %33 = phi i64 [ %39, %226 ], [ %21, %20 ]
  %34 = phi i8* [ %36, %226 ], [ %22, %20 ]
  %35 = phi i8* [ %227, %226 ], [ %23, %20 ]
  %36 = getelementptr inbounds i8, i8* %34, i64 1
  %37 = load i8, i8* %34, align 1
  %38 = zext i8 %37 to i32
  %39 = add nsw i64 %33, -1
  %40 = lshr i32 %38, 6
  switch i32 %40, label %225 [
    i32 0, label %41
    i32 1, label %89
    i32 2, label %164
    i32 3, label %213
  ]

41:                                               ; preds = %30
  %42 = and i64 %31, 1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %52, label %44

44:                                               ; preds = %41
  %45 = load i8, i8* %35, align 1
  %46 = trunc i32 %32 to i8
  %47 = or i8 %45, %46
  store i8 %47, i8* %35, align 1
  %48 = getelementptr inbounds i8, i8* %35, i64 1
  %49 = zext i8 %47 to i32
  %50 = add nsw i64 %31, 1
  %51 = add nsw i32 %38, -1
  br label %55

52:                                               ; preds = %41
  %53 = shl i32 %32, 4
  %54 = or i32 %53, %32
  br label %55

55:                                               ; preds = %52, %44
  %56 = phi i8* [ %48, %44 ], [ %35, %52 ]
  %57 = phi i32 [ %49, %44 ], [ %54, %52 ]
  %58 = phi i64 [ %50, %44 ], [ %31, %52 ]
  %59 = phi i32 [ %51, %44 ], [ %38, %52 ]
  %60 = sext i32 %59 to i64
  %61 = add nsw i64 %58, %60
  %62 = icmp slt i64 %61, %26
  %63 = icmp sgt i32 %59, 0
  %64 = and i1 %63, %62
  br i1 %64, label %65, label %78

65:                                               ; preds = %55
  %66 = trunc i32 %57 to i8
  %67 = add nsw i32 %59, -1
  %68 = lshr i32 %67, 1
  %69 = add nuw nsw i32 %68, 1
  %70 = zext i32 %69 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %56, i8 %66, i64 %70, i1 false) #4
  %71 = lshr i32 %67, 1
  %72 = zext i32 %71 to i64
  %73 = and i32 %67, -2
  %74 = getelementptr i8, i8* %56, i64 1
  %75 = getelementptr i8, i8* %74, i64 %72
  %76 = add nsw i32 %59, -2
  %77 = sub nsw i32 %76, %73
  br label %78

78:                                               ; preds = %65, %55
  %79 = phi i8* [ %56, %55 ], [ %75, %65 ]
  %80 = phi i32 [ %59, %55 ], [ %77, %65 ]
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %82, label %86

82:                                               ; preds = %78
  %83 = getelementptr inbounds i8, i8* %79, i64 -1
  %84 = load i8, i8* %83, align 1
  %85 = and i8 %84, -16
  store i8 %85, i8* %83, align 1
  br label %86

86:                                               ; preds = %82, %78
  %87 = phi i8* [ %83, %82 ], [ %79, %78 ]
  %88 = and i32 %57, 15
  br label %226

89:                                               ; preds = %30
  %90 = lshr i32 %38, 4
  %91 = and i32 %90, 3
  %92 = icmp eq i32 %91, 2
  br i1 %92, label %113, label %93

93:                                               ; preds = %89
  %94 = zext i32 %91 to i64
  %95 = getelementptr inbounds [4 x i32], [4 x i32]* @twobitdeltas, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i32 %96, %32
  %98 = and i32 %97, 15
  %99 = add nsw i64 %31, 1
  %100 = and i64 %31, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %107, label %102

102:                                              ; preds = %93
  %103 = getelementptr inbounds i8, i8* %35, i64 1
  %104 = load i8, i8* %35, align 1
  %105 = trunc i32 %98 to i8
  %106 = or i8 %104, %105
  br label %110

107:                                              ; preds = %93
  %108 = trunc i32 %97 to i8
  %109 = shl i8 %108, 4
  br label %110

110:                                              ; preds = %102, %107
  %111 = phi i8 [ %109, %107 ], [ %106, %102 ]
  %112 = phi i8* [ %35, %107 ], [ %103, %102 ]
  store i8 %111, i8* %35, align 1
  br label %113

113:                                              ; preds = %110, %89
  %114 = phi i8* [ %35, %89 ], [ %112, %110 ]
  %115 = phi i32 [ %32, %89 ], [ %98, %110 ]
  %116 = phi i64 [ %31, %89 ], [ %99, %110 ]
  %117 = lshr i32 %38, 2
  %118 = and i32 %117, 3
  %119 = icmp eq i32 %118, 2
  br i1 %119, label %139, label %120

120:                                              ; preds = %113
  %121 = zext i32 %118 to i64
  %122 = getelementptr inbounds [4 x i32], [4 x i32]* @twobitdeltas, i64 0, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = add nsw i32 %123, %115
  %125 = and i32 %124, 15
  %126 = icmp slt i64 %116, %26
  br i1 %126, label %127, label %139

127:                                              ; preds = %120
  %128 = add nsw i64 %116, 1
  %129 = and i64 %116, 1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %136, label %131

131:                                              ; preds = %127
  %132 = getelementptr inbounds i8, i8* %114, i64 1
  %133 = load i8, i8* %114, align 1
  %134 = trunc i32 %125 to i8
  %135 = or i8 %133, %134
  store i8 %135, i8* %114, align 1
  br label %139

136:                                              ; preds = %127
  %137 = trunc i32 %124 to i8
  %138 = shl i8 %137, 4
  store i8 %138, i8* %114, align 1
  br label %139

139:                                              ; preds = %136, %131, %120, %113
  %140 = phi i8* [ %132, %131 ], [ %114, %136 ], [ %114, %120 ], [ %114, %113 ]
  %141 = phi i32 [ %125, %131 ], [ %125, %136 ], [ %125, %120 ], [ %115, %113 ]
  %142 = phi i64 [ %128, %131 ], [ %128, %136 ], [ %116, %120 ], [ %116, %113 ]
  %143 = and i32 %38, 3
  %144 = icmp eq i32 %143, 2
  br i1 %144, label %226, label %145

145:                                              ; preds = %139
  %146 = zext i32 %143 to i64
  %147 = getelementptr inbounds [4 x i32], [4 x i32]* @twobitdeltas, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = add nsw i32 %148, %141
  %150 = and i32 %149, 15
  %151 = icmp slt i64 %142, %26
  br i1 %151, label %152, label %226

152:                                              ; preds = %145
  %153 = add nsw i64 %142, 1
  %154 = and i64 %142, 1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %161, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds i8, i8* %140, i64 1
  %158 = load i8, i8* %140, align 1
  %159 = trunc i32 %150 to i8
  %160 = or i8 %158, %159
  store i8 %160, i8* %140, align 1
  br label %226

161:                                              ; preds = %152
  %162 = trunc i32 %149 to i8
  %163 = shl i8 %162, 4
  store i8 %163, i8* %140, align 1
  br label %226

164:                                              ; preds = %30
  %165 = lshr i32 %38, 3
  %166 = and i32 %165, 7
  %167 = icmp eq i32 %166, 4
  br i1 %167, label %188, label %168

168:                                              ; preds = %164
  %169 = zext i32 %166 to i64
  %170 = getelementptr inbounds [8 x i32], [8 x i32]* @threebitdeltas, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = add nsw i32 %171, %32
  %173 = and i32 %172, 15
  %174 = add nsw i64 %31, 1
  %175 = and i64 %31, 1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %182, label %177

177:                                              ; preds = %168
  %178 = getelementptr inbounds i8, i8* %35, i64 1
  %179 = load i8, i8* %35, align 1
  %180 = trunc i32 %173 to i8
  %181 = or i8 %179, %180
  br label %185

182:                                              ; preds = %168
  %183 = trunc i32 %172 to i8
  %184 = shl i8 %183, 4
  br label %185

185:                                              ; preds = %177, %182
  %186 = phi i8 [ %184, %182 ], [ %181, %177 ]
  %187 = phi i8* [ %35, %182 ], [ %178, %177 ]
  store i8 %186, i8* %35, align 1
  br label %188

188:                                              ; preds = %185, %164
  %189 = phi i8* [ %35, %164 ], [ %187, %185 ]
  %190 = phi i32 [ %32, %164 ], [ %173, %185 ]
  %191 = phi i64 [ %31, %164 ], [ %174, %185 ]
  %192 = and i32 %38, 7
  %193 = icmp eq i32 %192, 4
  br i1 %193, label %226, label %194

194:                                              ; preds = %188
  %195 = zext i32 %192 to i64
  %196 = getelementptr inbounds [8 x i32], [8 x i32]* @threebitdeltas, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, %190
  %199 = and i32 %198, 15
  %200 = icmp slt i64 %191, %26
  br i1 %200, label %201, label %226

201:                                              ; preds = %194
  %202 = add nsw i64 %191, 1
  %203 = and i64 %191, 1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %210, label %205

205:                                              ; preds = %201
  %206 = getelementptr inbounds i8, i8* %189, i64 1
  %207 = load i8, i8* %189, align 1
  %208 = trunc i32 %199 to i8
  %209 = or i8 %207, %208
  store i8 %209, i8* %189, align 1
  br label %226

210:                                              ; preds = %201
  %211 = trunc i32 %198 to i8
  %212 = shl i8 %211, 4
  store i8 %212, i8* %189, align 1
  br label %226

213:                                              ; preds = %30
  %214 = and i32 %38, 15
  %215 = add nsw i64 %31, 1
  %216 = and i64 %31, 1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %223, label %218

218:                                              ; preds = %213
  %219 = getelementptr inbounds i8, i8* %35, i64 1
  %220 = load i8, i8* %35, align 1
  %221 = trunc i32 %214 to i8
  %222 = or i8 %220, %221
  store i8 %222, i8* %35, align 1
  br label %226

223:                                              ; preds = %213
  %224 = shl i8 %37, 4
  store i8 %224, i8* %35, align 1
  br label %226

225:                                              ; preds = %30
  unreachable

226:                                              ; preds = %223, %218, %210, %205, %194, %188, %161, %156, %145, %139, %86
  %227 = phi i8* [ %219, %218 ], [ %35, %223 ], [ %206, %205 ], [ %189, %210 ], [ %189, %194 ], [ %189, %188 ], [ %157, %156 ], [ %140, %161 ], [ %140, %145 ], [ %140, %139 ], [ %87, %86 ]
  %228 = phi i32 [ %214, %218 ], [ %214, %223 ], [ %199, %205 ], [ %199, %210 ], [ %199, %194 ], [ %190, %188 ], [ %150, %156 ], [ %150, %161 ], [ %150, %145 ], [ %141, %139 ], [ %88, %86 ]
  %229 = phi i64 [ %215, %218 ], [ %215, %223 ], [ %202, %205 ], [ %202, %210 ], [ %191, %194 ], [ %191, %188 ], [ %153, %156 ], [ %153, %161 ], [ %142, %145 ], [ %142, %139 ], [ %61, %86 ]
  %230 = icmp sgt i64 %39, 0
  %231 = icmp slt i64 %229, %26
  %232 = and i1 %230, %231
  br i1 %232, label %30, label %233

233:                                              ; preds = %226, %20
  %234 = phi i8* [ %22, %20 ], [ %36, %226 ]
  %235 = phi i64 [ %21, %20 ], [ %39, %226 ]
  %236 = phi i64 [ 0, %20 ], [ %229, %226 ]
  %237 = phi i1 [ %28, %20 ], [ %231, %226 ]
  store i8* %234, i8** %13, align 8
  store i64 %235, i64* %14, align 8
  %238 = icmp eq i64 %236, %26
  br i1 %238, label %247, label %239

239:                                              ; preds = %233
  %240 = zext i32 %25 to i64
  %241 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 55
  %242 = load i8*, i8** %241, align 8
  %243 = select i1 %237, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0)
  %244 = getelementptr inbounds %struct.tiff, %struct.tiff* %0, i64 0, i32 13
  %245 = load i32, i32* %244, align 4
  %246 = zext i32 %245 to i64
  tail call void (i8*, i8*, i8*, ...) @TIFFErrorExt(i8* %242, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @ThunderDecode.module, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i8* %243, i64 %246, i64 %236, i64 %240) #4
  br label %252

247:                                              ; preds = %233
  %248 = load i64, i64* %5, align 8
  %249 = sub nsw i64 %24, %248
  %250 = getelementptr inbounds i8, i8* %23, i64 %248
  %251 = icmp sgt i64 %249, 0
  br i1 %251, label %20, label %252

252:                                              ; preds = %247, %9, %239, %17
  %253 = phi i32 [ 0, %17 ], [ 0, %239 ], [ 1, %9 ], [ 1, %247 ]
  ret i32 %253
}

declare void @TIFFErrorExt(i8*, i8*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
