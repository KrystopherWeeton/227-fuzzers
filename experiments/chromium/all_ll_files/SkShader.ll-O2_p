; ModuleID = '../../third_party/skia/src/shaders/SkShader.cpp'
source_filename = "../../third_party/skia/src/shaders/SkShader.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkMatrix = type { [9 x float], i32 }
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1", [7 x i8] }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.5, i32, i32 }
%class.sk_sp.5 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.6, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.6 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkTCopyOnFirstWrite = type { %class.SkMatrix*, %class.SkTLazy }
%class.SkTLazy = type { [40 x i8], %class.SkMatrix* }
%"struct.SkShaderBase::ContextRec" = type <{ %class.SkMatrix*, %class.SkMatrix*, i32, [4 x i8], %class.SkColorSpace*, i8, i8, [6 x i8] }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%struct.SkColorSpaceXformSteps = type { %"struct.SkColorSpaceXformSteps::Flags", %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }
%"struct.SkColorSpaceXformSteps::Flags" = type { i8, i8, i8, i8, i8 }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%"struct.SkShader::GradientInfo" = type { i32, i32*, float*, [2 x %struct.SkPoint], [2 x float], i32, i32 }
%struct.SkPoint = type { float, float }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.GrFPArgs = type { %class.GrRecordingContext*, %class.SkMatrixProvider*, %class.SkMatrix*, i8, %class.GrColorInfo* }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.14", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.60" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.13 }
%class.sk_sp.13 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray.17, %class.SkTHashMap, %class.SkTHashMap.25, %class.SkTArray.34, %class.SkTArray.36, i32, i8, [3 x i8] }>
%class.SkTArray.17 = type { %"class.std::__1::unique_ptr.18"*, i64 }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.36, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.37 }
%class.sk_sp.37 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.19" }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.122" }
%"struct.std::__1::pair.122" = type { i32, i32 }
%class.SkTHashMap.25 = type { %class.SkTHashTable.26 }
%class.SkTHashTable.26 = type { i32, i32, %class.SkAutoTArray.27 }
%class.SkAutoTArray.27 = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.123" }
%"struct.std::__1::pair.123" = type { i32, %class.SkTArray.124* }
%class.SkTArray.124 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.34 = type { %"class.std::__1::unique_ptr.35"*, i64 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.124, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.36 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.47" }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %class.SkArenaAlloc* }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.50 }
%class.SkFibBlockSizes.50 = type { i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkM44 = type { [16 x float] }
%class.GrColorInfo = type opaque
%class.sk_sp.66 = type { %class.SkShader* }
%class.SkColorShader = type { %class.SkShaderBase.base, i32 }
%class.SkShaderBase.base = type { %class.SkShader.base, %class.SkMatrix }
%class.SkBitmap = type { %class.sk_sp.69, %class.SkPixmap, %class.sk_sp.75 }
%class.sk_sp.69 = type { %class.SkPixelRef* }
%class.SkPixelRef = type <{ %class.SkRefCnt.base, i32, i32, [4 x i8], i8*, i64, %"struct.std::__1::atomic.70", [4 x i8], %"class.SkIDChangeListener::List", %"struct.std::__1::atomic.1", i8, [6 x i8] }>
%"struct.std::__1::atomic.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__atomic_base.72" }
%"struct.std::__1::__atomic_base.72" = type { %"struct.std::__1::__cxx_atomic_impl.73" }
%"struct.std::__1::__cxx_atomic_impl.73" = type { %"struct.std::__1::__cxx_atomic_base_impl.74" }
%"struct.std::__1::__cxx_atomic_base_impl.74" = type { i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.1", [3 x i8] }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.75 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%struct.SkSamplingOptions = type { i8, %struct.SkCubicResampler, i32, i32 }
%struct.SkCubicResampler = type { float, float }
%class.sk_sp.76 = type { %class.SkImage* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%struct.SkStageRec = type { %class.SkRasterPipeline*, %class.SkArenaAlloc*, i32, %class.SkColorSpace*, %class.SkPaint*, %class.SkMatrix*, %class.SkMatrixProvider* }
%class.SkRasterPipeline = type { %class.SkArenaAlloc*, %"struct.SkRasterPipeline::StageList"*, i32, i32 }
%"struct.SkRasterPipeline::StageList" = type { %"struct.SkRasterPipeline::StageList"*, i32, i8* }
%class.SkPaint = type <{ %class.sk_sp.77, %class.sk_sp.66, %class.sk_sp.78, %class.sk_sp.79, %class.sk_sp.80, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.77 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.78 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.79 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.80 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkTCopyOnFirstWrite.81 = type { %class.SkPaint*, %class.SkTLazy.82 }
%class.SkTLazy.82 = type { [72 x i8], %class.SkPaint* }
%struct.SkRasterPipeline_CallbackCtx = type { void (%struct.SkRasterPipeline_CallbackCtx*, i32)*, [64 x float], float* }
%"class.skvm::Builder" = type <{ %class.SkTHashMap.85, %"class.std::__1::vector", %"class.std::__1::vector.97", %"struct.skvm::Features", [6 x i8] }>
%class.SkTHashMap.85 = type { %class.SkTHashTable.86 }
%class.SkTHashTable.86 = type { i32, i32, %class.SkAutoTArray.87 }
%class.SkAutoTArray.87 = type { %"class.std::__1::unique_ptr.88" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair, skvm::Instruction, SkTHashMap<skvm::Instruction, int, skvm::InstructionHash>::Pair>::Slot" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skvm::Instruction"*, %"struct.skvm::Instruction"*, %"class.std::__1::__compressed_pair.94" }
%"struct.skvm::Instruction" = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.skvm::Instruction"* }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { i32*, i32*, %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { i32* }
%"struct.skvm::Features" = type { i8, i8 }
%"struct.skvm::Coord" = type { %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::F32" = type <{ %"class.skvm::Builder"*, i32, [4 x i8] }>
%"struct.skvm::Color" = type { %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32", %"struct.skvm::F32" }
%"struct.skvm::Uniforms" = type { %"struct.skvm::Ptr", %"class.std::__1::vector.97" }
%"struct.skvm::Ptr" = type { i32 }
%class.anon.104 = type { %"struct.skvm::F32", %"struct.skvm::F32", %"class.skvm::Builder"**, %"struct.skvm::Uniforms"**, %class.SkMatrix* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.SkEmptyShader = type { %class.SkShaderBase.base, [4 x i8] }
%class.sk_sp.116 = type { %class.SkFlattenable* }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap.105, i32, [4 x i8], %class.sk_sp.114*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap.105 = type { %class.SkTHashTable.106 }
%class.SkTHashTable.106 = type { i32, i32, %class.SkAutoTArray.107 }
%class.SkAutoTArray.107 = type { %"class.std::__1::unique_ptr.108" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.116*, %class.SkReadBuffer*)* }
%class.sk_sp.114 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { void (%class.sk_sp.115*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.76*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.114*, i8*, i64, i8*)*, i8* }
%class.sk_sp.115 = type { %class.SkPicture* }
%class.SkRuntimeEffect = type opaque
%class.SkStageUpdater = type { i32 (...)** }

$_ZNK13SkFlattenable7flattenER13SkWriteBuffer = comdat any

$_ZN4skvm8Uniforms5pushFEf = comdat any

$_ZN13SkEmptyShaderD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK13SkEmptyShader10getFactoryEv = comdat any

$_ZNK13SkEmptyShader11getTypeNameEv = comdat any

$_ZNK13SkEmptyShader7flattenER13SkWriteBuffer = comdat any

$_ZNK12SkShaderBase18getFlattenableTypeEv = comdat any

$_ZNK8SkShader8isOpaqueEv = comdat any

$_ZNK12SkShaderBase10isConstantEv = comdat any

$_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode = comdat any

$_ZNK12SkShaderBase15asRuntimeEffectEv = comdat any

$_ZNK13SkEmptyShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase18onAsLuminanceColorEPj = comdat any

$_ZNK13SkEmptyShader14onAppendStagesERK10SkStageRec = comdat any

$_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec = comdat any

$_ZN8SkShaderD0Ev = comdat any

$_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc = comdat any

$_ZNK12SkShaderBase7Context8getFlagsEv = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZTV12SkShaderBase = hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkShaderBase*)* @_ZN12SkShaderBaseD2Ev to i8*), i8* bitcast (void (%class.SkShaderBase*)* @_ZN12SkShaderBaseD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkShaderBase*, %class.SkWriteBuffer*)* @_ZNK12SkShaderBase7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkShader*)* @_ZNK8SkShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)* @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp.66*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkShaderBase*, i32*)* @_ZNK12SkShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN12SkShaderBase7ContextE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkShaderBase::Context"*)* @_ZN12SkShaderBase7ContextD2Ev to i8*), i8* bitcast (void (%"class.SkShaderBase::Context"*)* @_ZN12SkShaderBase7ContextD0Ev to i8*), i8* bitcast (i32 (%"class.SkShaderBase::Context"*)* @_ZNK12SkShaderBase7Context8getFlagsEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTV13SkEmptyShader = hidden unnamed_addr constant { [21 x i8*] } { [21 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkShaderBase*)* @_ZN12SkShaderBaseD2Ev to i8*), i8* bitcast (void (%class.SkEmptyShader*)* @_ZN13SkEmptyShaderD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.116*, %class.SkReadBuffer*)* (%class.SkEmptyShader*)* @_ZNK13SkEmptyShader10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkEmptyShader*)* @_ZNK13SkEmptyShader11getTypeNameEv to i8*), i8* bitcast (void (%class.SkEmptyShader*, %class.SkWriteBuffer*)* @_ZNK13SkEmptyShader7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkShaderBase*)* @_ZNK12SkShaderBase18getFlattenableTypeEv to i8*), i8* bitcast (i1 (%class.SkShader*)* @_ZNK8SkShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*), i8* bitcast (i1 (%class.SkShaderBase*)* @_ZNK12SkShaderBase10isConstantEv to i8*), i8* bitcast (%class.GrFragmentProcessor* (%class.SkShaderBase*, %struct.GrFPArgs*)* @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (%class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode to i8*), i8* bitcast (%class.SkRuntimeEffect* (%class.SkShaderBase*)* @_ZNK12SkShaderBase15asRuntimeEffectEv to i8*), i8* bitcast (void (%class.sk_sp.66*, %class.SkShaderBase*, %class.SkMatrix*)* @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix to i8*), i8* bitcast (%"class.SkShaderBase::Context"* (%class.SkEmptyShader*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)* @_ZNK13SkEmptyShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc to i8*), i8* bitcast (i1 (%class.SkShaderBase*, i32*)* @_ZNK12SkShaderBase18onAsLuminanceColorEPj to i8*), i8* bitcast (i1 (%class.SkEmptyShader*, %struct.SkStageRec*)* @_ZNK13SkEmptyShader14onAppendStagesERK10SkStageRec to i8*), i8* bitcast (%class.SkStageUpdater* (%class.SkShaderBase*, %struct.SkStageRec*)* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec to i8*), i8* bitcast (void (%"struct.skvm::Color"*, %class.SkEmptyShader*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)* @_ZNK13SkEmptyShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc to i8*)] }, align 8
@_ZTV8SkShader = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkShader*)* @_ZN8SkShaderD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkFlattenable*, %class.SkWriteBuffer*)* @_ZNK13SkFlattenable7flattenER13SkWriteBuffer to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%class.SkShader*)* @_ZNK8SkShader8isOpaqueEv to i8*), i8* bitcast (i32 (%class.SkShader*, %"struct.SkShader::GradientInfo"*)* @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [14 x i8] c"SkEmptyShader\00", align 1

@_ZN12SkShaderBaseD1Ev = hidden unnamed_addr alias void (%class.SkShaderBase*), void (%class.SkShaderBase*)* @_ZN12SkShaderBaseD2Ev
@_ZN12SkShaderBase7ContextD1Ev = hidden unnamed_addr alias void (%"class.SkShaderBase::Context"*), void (%"class.SkShaderBase::Context"*)* @_ZN12SkShaderBase7ContextD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkShaderBaseC2EPK8SkMatrix(%class.SkShaderBase*, %class.SkMatrix* readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV12SkShaderBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1
  %6 = icmp eq %class.SkMatrix* %1, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #14
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi %class.SkMatrix* [ %8, %7 ], [ %1, %2 ]
  %11 = bitcast %class.SkMatrix* %5 to i8*
  %12 = bitcast %class.SkMatrix* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 40, i1 false)
  %13 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = trunc i32 %14 to i8
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %9
  %18 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %5) #14
  %19 = zext i8 %18 to i32
  store i32 %19, i32* %13, align 4
  br label %20

20:                                               ; preds = %9, %17
  ret void
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN12SkShaderBaseD0Ev(%class.SkShaderBase* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkShaderBase7flattenER13SkWriteBuffer(%class.SkShaderBase*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %3) #14
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %4, align 4
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i32 [ %10, %8 ], [ %5, %2 ]
  %13 = and i32 %12, 15
  %14 = icmp eq i32 %13, 0
  %15 = xor i1 %14, true
  %16 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i1)***
  %17 = load void (%class.SkWriteBuffer*, i1)**, void (%class.SkWriteBuffer*, i1)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %17, i64 4
  %19 = load void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %18, align 8
  tail call void %19(%class.SkWriteBuffer* %1, i1 zeroext %15) #14
  br i1 %14, label %25, label %20

20:                                               ; preds = %11
  %21 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, %class.SkMatrix*)***
  %22 = load void (%class.SkWriteBuffer*, %class.SkMatrix*)**, void (%class.SkWriteBuffer*, %class.SkMatrix*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkWriteBuffer*, %class.SkMatrix*)*, void (%class.SkWriteBuffer*, %class.SkMatrix*)** %22, i64 20
  %24 = load void (%class.SkWriteBuffer*, %class.SkMatrix*)*, void (%class.SkWriteBuffer*, %class.SkMatrix*)** %23, align 8
  tail call void %24(%class.SkWriteBuffer* %1, %class.SkMatrix* dereferenceable(40) %3) #14
  br label %25

25:                                               ; preds = %11, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13SkFlattenable7flattenER13SkWriteBuffer(%class.SkFlattenable*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkShaderBase16totalLocalMatrixEPK8SkMatrix(%class.SkTCopyOnFirstWrite* noalias sret, %class.SkShaderBase*, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %0, i64 0, i32 1, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 40, i1 false)
  %5 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %1, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %0, i64 0, i32 0
  store %class.SkMatrix* %5, %class.SkMatrix** %6, align 8
  %7 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %0, i64 0, i32 1, i32 1
  store %class.SkMatrix* null, %class.SkMatrix** %7, align 8
  %8 = icmp eq %class.SkMatrix* %2, null
  br i1 %8, label %18, label %9

9:                                                ; preds = %3
  %10 = bitcast %class.SkMatrix* %5 to i8*
  %11 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %0, i64 0, i32 1
  %12 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %11, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 4 %10, i64 40, i1 false) #14
  %13 = bitcast %class.SkMatrix** %7 to %class.SkTLazy**
  store %class.SkTLazy* %11, %class.SkTLazy** %13, align 8
  %14 = ptrtoint %class.SkTLazy* %11 to i64
  %15 = bitcast %class.SkTCopyOnFirstWrite* %0 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast %class.SkTLazy* %11 to %class.SkMatrix*
  %17 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* %16, %class.SkMatrix* nonnull dereferenceable(40) %2) #14
  br label %18

18:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %class.SkTCopyOnFirstWrite, align 8
  %7 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #14
  %8 = bitcast %class.SkTCopyOnFirstWrite* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %8) #14
  %9 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %6, i64 0, i32 1, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 -86, i64 40, i1 false) #14, !alias.scope !2
  %10 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %6, i64 0, i32 0
  store %class.SkMatrix* %10, %class.SkMatrix** %11, align 8, !alias.scope !2
  %12 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %6, i64 0, i32 1, i32 1
  store %class.SkMatrix* null, %class.SkMatrix** %12, align 8, !alias.scope !2
  %13 = icmp eq %class.SkMatrix* %2, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %4
  %15 = bitcast %class.SkMatrix* %10 to i8*
  %16 = getelementptr inbounds %class.SkTCopyOnFirstWrite, %class.SkTCopyOnFirstWrite* %6, i64 0, i32 1
  %17 = getelementptr inbounds %class.SkTLazy, %class.SkTLazy* %16, i64 0, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 4 %15, i64 40, i1 false) #14
  %18 = bitcast %class.SkMatrix** %12 to %class.SkTLazy**
  store %class.SkTLazy* %16, %class.SkTLazy** %18, align 8, !alias.scope !2
  %19 = ptrtoint %class.SkTLazy* %16 to i64
  %20 = bitcast %class.SkTCopyOnFirstWrite* %6 to i64*
  store i64 %19, i64* %20, align 8, !alias.scope !2
  %21 = bitcast %class.SkTLazy* %16 to %class.SkMatrix*
  %22 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* %21, %class.SkMatrix* nonnull dereferenceable(40) %2) #14
  %23 = load %class.SkMatrix*, %class.SkMatrix** %11, align 8
  br label %24

24:                                               ; preds = %4, %14
  %25 = phi %class.SkMatrix* [ %10, %4 ], [ %23, %14 ]
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %27 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %27, align 16, !alias.scope !5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %29 = bitcast float* %28 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %29, align 16, !alias.scope !5
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %30, align 16, !alias.scope !5
  store i32 16, i32* %26, align 4, !alias.scope !5
  %31 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* nonnull %5, %class.SkMatrix* dereferenceable(40) %1, %class.SkMatrix* dereferenceable(40) %25) #14
  %32 = load i32, i32* %26, align 4
  %33 = trunc i32 %32 to i8
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %24
  %36 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %5) #14
  %37 = zext i8 %36 to i32
  store i32 %37, i32* %26, align 4
  br label %38

38:                                               ; preds = %35, %24
  %39 = phi i32 [ %37, %35 ], [ %32, %24 ]
  %40 = and i32 %39, 15
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = icmp eq %class.SkMatrix* %3, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %42
  %45 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %3) #14
  br label %48

46:                                               ; preds = %38
  %47 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %5, %class.SkMatrix* %3) #14
  br label %48

48:                                               ; preds = %42, %44, %46
  %49 = phi i1 [ %47, %46 ], [ true, %42 ], [ true, %44 ]
  %50 = load %class.SkMatrix*, %class.SkMatrix** %12, align 8
  %51 = icmp eq %class.SkMatrix* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  store %class.SkMatrix* null, %class.SkMatrix** %12, align 8
  br label %53

53:                                               ; preds = %48, %52
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #14
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkShaderBase16asLuminanceColorEPj(%class.SkShaderBase*, i32*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #14
  store i32 -1431655766, i32* %3, align 4
  %5 = icmp eq i32* %1, null
  %6 = select i1 %5, i32* %3, i32* %1
  %7 = bitcast %class.SkShaderBase* %0 to i1 (%class.SkShaderBase*, i32*)***
  %8 = load i1 (%class.SkShaderBase*, i32*)**, i1 (%class.SkShaderBase*, i32*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.SkShaderBase*, i32*)*, i1 (%class.SkShaderBase*, i32*)** %8, i64 15
  %10 = load i1 (%class.SkShaderBase*, i32*)*, i1 (%class.SkShaderBase*, i32*)** %9, align 8
  %11 = call zeroext i1 %10(%class.SkShaderBase* %0, i32* %6) #14
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = load i32, i32* %6, align 4
  %14 = or i32 %13, -16777216
  store i32 %14, i32* %6, align 4
  br label %15

15:                                               ; preds = %2, %12
  %16 = phi i1 [ true, %12 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #14
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase11makeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %1, i64 0, i32 0
  %5 = load %class.SkMatrix*, %class.SkMatrix** %4, align 8
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 192
  %9 = icmp eq i32 %8, 128
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %5) #14
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %6, align 4
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi i32 [ %12, %10 ], [ %7, %3 ]
  %15 = and i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %58

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 192
  %21 = icmp eq i32 %20, 128
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 1
  %24 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %23) #14
  %25 = zext i8 %24 to i32
  store i32 %25, i32* %18, align 4
  br label %26

26:                                               ; preds = %17, %22
  %27 = phi i32 [ %25, %22 ], [ %19, %17 ]
  %28 = and i32 %27, 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %58

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %1, i64 0, i32 1
  %32 = load %class.SkMatrix*, %class.SkMatrix** %31, align 8
  %33 = icmp eq %class.SkMatrix* %32, null
  br i1 %33, label %48, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %32, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 192
  %38 = icmp eq i32 %37, 128
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* nonnull %32) #14
  %41 = zext i8 %40 to i32
  store i32 %41, i32* %35, align 4
  br label %42

42:                                               ; preds = %34, %39
  %43 = phi i32 [ %41, %39 ], [ %36, %34 ]
  %44 = and i32 %43, 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %42
  %47 = load %class.SkMatrix*, %class.SkMatrix** %31, align 8
  br label %48

48:                                               ; preds = %46, %30
  %49 = phi %class.SkMatrix* [ %47, %46 ], [ null, %30 ]
  %50 = load %class.SkMatrix*, %class.SkMatrix** %4, align 8
  %51 = tail call zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase* %0, %class.SkMatrix* dereferenceable(40) %50, %class.SkMatrix* %49, %class.SkMatrix* null)
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %class.SkShaderBase* %0 to %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)***
  %54 = load %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)**, %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)*** %53, align 8
  %55 = getelementptr inbounds %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)*, %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)** %54, i64 14
  %56 = load %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)*, %"class.SkShaderBase::Context"* (%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"*, %class.SkArenaAlloc*)** %55, align 8
  %57 = tail call %"class.SkShaderBase::Context"* %56(%class.SkShaderBase* %0, %"struct.SkShaderBase::ContextRec"* dereferenceable(40) %1, %class.SkArenaAlloc* %2) #14
  br label %58

58:                                               ; preds = %42, %26, %13, %48, %52
  %59 = phi %"class.SkShaderBase::Context"* [ %57, %52 ], [ null, %48 ], [ null, %42 ], [ null, %26 ], [ null, %13 ]
  ret %"class.SkShaderBase::Context"* %59
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkShaderBase7ContextC2ERKS_RKNS_10ContextRecE(%"class.SkShaderBase::Context"*, %class.SkShaderBase* dereferenceable(56), %"struct.SkShaderBase::ContextRec"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12SkShaderBase7ContextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 1
  store %class.SkShaderBase* %1, %class.SkShaderBase** %5, align 8
  %6 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %2, i64 0, i32 0
  %8 = bitcast %"struct.SkShaderBase::ContextRec"* %2 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast %class.SkMatrix* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 4 %9, i64 40, i1 false)
  %11 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 3
  %12 = bitcast %class.SkMatrix* %11 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %12, align 4
  %13 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 3, i32 0, i64 4
  %14 = bitcast float* %13 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %14, align 4
  %15 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 3, i32 0, i64 8
  store float 1.000000e+00, float* %15, align 4
  %16 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 3, i32 1
  store i32 16, i32* %16, align 4
  %17 = load %class.SkMatrix*, %class.SkMatrix** %7, align 8
  %18 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %2, i64 0, i32 1
  %19 = load %class.SkMatrix*, %class.SkMatrix** %18, align 8
  %20 = tail call zeroext i1 @_ZNK12SkShaderBase19computeTotalInverseERK8SkMatrixPS1_PS0_(%class.SkShaderBase* %1, %class.SkMatrix* dereferenceable(40) %17, %class.SkMatrix* %19, %class.SkMatrix* %11)
  %21 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %2, i64 0, i32 5
  %22 = load i8, i8* %21, align 8
  %23 = getelementptr inbounds %"class.SkShaderBase::Context", %"class.SkShaderBase::Context"* %0, i64 0, i32 4
  store i8 %22, i8* %23, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12SkShaderBase7ContextD2Ev(%"class.SkShaderBase::Context"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN12SkShaderBase7ContextD0Ev(%"class.SkShaderBase::Context"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkShaderBase10ContextRec18isLegacyCompatibleEP12SkColorSpace(%"struct.SkShaderBase::ContextRec"* nocapture readonly, %class.SkColorSpace*) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkColorSpaceXformSteps, align 4
  %4 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %3, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %0, i64 0, i32 4
  %6 = load %class.SkColorSpace*, %class.SkColorSpace** %5, align 8
  call void @_ZN22SkColorSpaceXformStepsC1EPK12SkColorSpace11SkAlphaTypeS2_S3_(%struct.SkColorSpaceXformSteps* nonnull %3, %class.SkColorSpace* %1, i32 2, %class.SkColorSpace* %6, i32 2) #14
  %7 = load i8, i8* %4, align 4, !range !8
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds %struct.SkColorSpaceXformSteps, %struct.SkColorSpaceXformSteps* %3, i64 0, i32 0, i32 1
  %10 = bitcast i8* %9 to <4 x i8>*
  %11 = load <4 x i8>, <4 x i8>* %10, align 1
  %12 = icmp eq <4 x i8> %11, zeroinitializer
  %13 = select <4 x i1> %12, <4 x i32> zeroinitializer, <4 x i32> <i32 2, i32 4, i32 8, i32 16>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %15 = or <4 x i32> %13, %14
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %17 = or <4 x i32> %15, %16
  %18 = extractelement <4 x i32> %17, i32 0
  %19 = or i32 %18, %8
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %4) #14
  ret i1 %20
}

declare void @_ZN22SkColorSpaceXformStepsC1EPK12SkColorSpace11SkAlphaTypeS2_S3_(%struct.SkColorSpaceXformSteps*, %class.SkColorSpace*, i32, %class.SkColorSpace*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkImage* @_ZNK8SkShader8isAImageEP8SkMatrixP10SkTileMode(%class.SkShader*, %class.SkMatrix*, i32*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %class.SkShader* %0 to %class.SkShaderBase*
  %5 = bitcast %class.SkShader* %0 to %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)***
  %6 = load %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)**, %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)*** %5, align 8
  %7 = getelementptr inbounds %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)*, %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)** %6, i64 11
  %8 = load %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)*, %class.SkImage* (%class.SkShaderBase*, %class.SkMatrix*, i32*)** %7, align 8
  %9 = tail call %class.SkImage* %8(%class.SkShaderBase* %4, %class.SkMatrix* %1, i32* %2) #14
  ret %class.SkImage* %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK8SkShader11asAGradientEPNS_12GradientInfoE(%class.SkShader* nocapture readnone, %"struct.SkShader::GradientInfo"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.GrFragmentProcessor* @_ZNK12SkShaderBase19asFragmentProcessorERK8GrFPArgs(%class.SkShaderBase* nocapture readnone, %struct.GrFPArgs* nocapture readnone dereferenceable(40)) unnamed_addr #5 align 2 {
  ret %class.GrFragmentProcessor* null
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK12SkShaderBase24makeAsALocalMatrixShaderEP8SkMatrix(%class.sk_sp.66* noalias nocapture sret, %class.SkShaderBase* nocapture readnone, %class.SkMatrix* nocapture readnone) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.sk_sp.66, %class.sk_sp.66* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkShaders5EmptyEv(%class.sk_sp.66* noalias nocapture sret) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 56) #16, !noalias !9
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 1, i32* %4, align 4, !noalias !9
  %5 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV12SkShaderBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !noalias !9
  %6 = getelementptr inbounds i8, i8* %2, i64 12
  %7 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #14, !noalias !9
  %8 = bitcast %class.SkMatrix* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %8, i64 40, i1 false) #14, !noalias !9
  %9 = getelementptr inbounds i8, i8* %2, i64 48
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !9
  %12 = trunc i32 %11 to i8
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %1
  %15 = bitcast i8* %6 to %class.SkMatrix*
  %16 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %15) #14, !noalias !9
  %17 = zext i8 %16 to i32
  store i32 %17, i32* %10, align 4, !noalias !9
  br label %18

18:                                               ; preds = %14, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV13SkEmptyShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !noalias !9
  %19 = ptrtoint i8* %2 to i64
  %20 = bitcast %class.sk_sp.66* %0 to i64*
  store i64 %19, i64* %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkShaders5ColorEj(%class.sk_sp.66* noalias nocapture sret, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 56) #16, !noalias !12
  %4 = bitcast i8* %3 to %class.SkColorShader*
  tail call void @_ZN13SkColorShaderC1Ej(%class.SkColorShader* nonnull %4, i32 %1) #14, !noalias !12
  %5 = ptrtoint i8* %3 to i64
  %6 = bitcast %class.sk_sp.66* %0 to i64*
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkBitmap10makeShaderE10SkTileModeS0_RK17SkSamplingOptionsPK8SkMatrix(%class.sk_sp.66* noalias sret, %class.SkBitmap*, i32, i32, %struct.SkSamplingOptions* dereferenceable(20), %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %7 = alloca %class.sk_sp.76, align 8
  %8 = icmp eq %class.SkMatrix* %5, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = trunc i32 %11 to i8
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %5) #14
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %10, align 4
  br label %17

17:                                               ; preds = %14, %9
  %18 = phi i32 [ %16, %14 ], [ %11, %9 ]
  %19 = and i32 %18, 15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = tail call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %5, %class.SkMatrix* null) #14
  br i1 %22, label %25, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %class.sk_sp.66, %class.sk_sp.66* %0, i64 0, i32 0
  store %class.SkShader* null, %class.SkShader** %24, align 8
  br label %39

25:                                               ; preds = %17, %6, %21
  call void @_Z27SkMakeImageFromRasterBitmapRK8SkBitmap16SkCopyPixelsMode(%class.sk_sp.76* nonnull sret %7, %class.SkBitmap* dereferenceable(56) %1, i32 0) #14
  call void @_ZN13SkImageShader4MakeE5sk_spI7SkImageE10SkTileModeS3_RK17SkSamplingOptionsPK8SkMatrixb(%class.sk_sp.66* sret %0, %class.sk_sp.76* nonnull %7, i32 %2, i32 %3, %struct.SkSamplingOptions* dereferenceable(20) %4, %class.SkMatrix* %5, i1 zeroext false) #14
  %26 = getelementptr inbounds %class.sk_sp.76, %class.sk_sp.76* %7, i64 0, i32 0
  %27 = load %class.SkImage*, %class.SkImage** %26, align 8
  %28 = icmp eq %class.SkImage* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.SkImage, %class.SkImage* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = atomicrmw add i32* %30, i32 -1 acq_rel
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = bitcast %class.SkImage* %27 to %class.SkRefCntBase*
  %35 = bitcast %class.SkImage* %27 to void (%class.SkRefCntBase*)***
  %36 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %35, align 8
  %37 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %36, i64 2
  %38 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, align 8
  call void %38(%class.SkRefCntBase* nonnull %34) #14
  br label %39

39:                                               ; preds = %33, %29, %25, %23
  ret void
}

declare void @_ZN13SkImageShader4MakeE5sk_spI7SkImageE10SkTileModeS3_RK17SkSamplingOptionsPK8SkMatrixb(%class.sk_sp.66* sret, %class.sk_sp.76*, i32, i32, %struct.SkSamplingOptions* dereferenceable(20), %class.SkMatrix*, i1 zeroext) local_unnamed_addr #1

declare void @_Z27SkMakeImageFromRasterBitmapRK8SkBitmap16SkCopyPixelsMode(%class.sk_sp.76* sret, %class.SkBitmap* dereferenceable(56), i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkShaderBase12appendStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkShaderBase* %0 to i1 (%class.SkShaderBase*, %struct.SkStageRec*)***
  %4 = load i1 (%class.SkShaderBase*, %struct.SkStageRec*)**, i1 (%class.SkShaderBase*, %struct.SkStageRec*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%class.SkShaderBase*, %struct.SkStageRec*)*, i1 (%class.SkShaderBase*, %struct.SkStageRec*)** %4, i64 16
  %6 = load i1 (%class.SkShaderBase*, %struct.SkStageRec*)*, i1 (%class.SkShaderBase*, %struct.SkStageRec*)** %5, align 8
  %7 = tail call zeroext i1 %6(%class.SkShaderBase* %0, %struct.SkStageRec* dereferenceable(56) %1) #14
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkShaderBase14onAppendStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* nocapture readonly dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = alloca %class.SkTCopyOnFirstWrite.81, align 8
  %4 = alloca %"struct.SkShaderBase::ContextRec", align 8
  %5 = bitcast %class.SkTCopyOnFirstWrite.81* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %5) #14
  %6 = getelementptr inbounds %class.SkTCopyOnFirstWrite.81, %class.SkTCopyOnFirstWrite.81* %3, i64 0, i32 1, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 72, i1 false)
  %7 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 4
  %8 = load %class.SkPaint*, %class.SkPaint** %7, align 8
  %9 = getelementptr inbounds %class.SkTCopyOnFirstWrite.81, %class.SkTCopyOnFirstWrite.81* %3, i64 0, i32 0
  store %class.SkPaint* %8, %class.SkPaint** %9, align 8
  %10 = getelementptr inbounds %class.SkTCopyOnFirstWrite.81, %class.SkTCopyOnFirstWrite.81* %3, i64 0, i32 1, i32 1
  store %class.SkPaint* null, %class.SkPaint** %10, align 8
  %11 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %8, i64 0, i32 5, i32 3
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 2.550000e+02
  %14 = fadd float %13, 5.000000e-01
  %15 = tail call float @llvm.floor.f32(float %14) #14
  %16 = fcmp olt float %15, 0x41DFFFFFE0000000
  %17 = select i1 %16, float %15, float 0x41DFFFFFE0000000
  %18 = fcmp ogt float %17, 0xC1DFFFFFE0000000
  %19 = select i1 %18, float %17, float 0xC1DFFFFFE0000000
  %20 = fptosi float %19 to i32
  %21 = trunc i32 %20 to i8
  %22 = icmp eq i8 %21, -1
  br i1 %22, label %30, label %23

23:                                               ; preds = %2
  %24 = getelementptr inbounds %class.SkTCopyOnFirstWrite.81, %class.SkTCopyOnFirstWrite.81* %3, i64 0, i32 1
  %25 = bitcast %class.SkTLazy.82* %24 to %class.SkPaint*
  call void @_ZN7SkPaintC1ERKS_(%class.SkPaint* %25, %class.SkPaint* dereferenceable(72) %8) #14
  %26 = bitcast %class.SkPaint** %10 to %class.SkTLazy.82**
  store %class.SkTLazy.82* %24, %class.SkTLazy.82** %26, align 8
  %27 = ptrtoint %class.SkTLazy.82* %24 to i64
  %28 = bitcast %class.SkTCopyOnFirstWrite.81* %3 to i64*
  store i64 %27, i64* %28, align 8
  call void @_ZN7SkPaint9setAlphafEf(%class.SkPaint* %25, float 1.000000e+00) #14
  %29 = load %class.SkPaint*, %class.SkPaint** %9, align 8
  br label %30

30:                                               ; preds = %2, %23
  %31 = phi %class.SkPaint* [ %8, %2 ], [ %29, %23 ]
  %32 = bitcast %"struct.SkShaderBase::ContextRec"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %32) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 40, i1 false)
  %33 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 6
  %34 = load %class.SkMatrixProvider*, %class.SkMatrixProvider** %33, align 8
  %35 = getelementptr inbounds %class.SkMatrixProvider, %class.SkMatrixProvider* %34, i64 0, i32 2
  %36 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 5
  %37 = bitcast %class.SkMatrix** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = call %class.SkColorSpace* @_Z17sk_srgb_singletonv() #14
  %42 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 0
  store %class.SkMatrix* %35, %class.SkMatrix** %42, align 8
  %43 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 1
  %44 = bitcast %class.SkMatrix** %43 to i64*
  store i64 %38, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 2
  store i32 %40, i32* %45, align 8
  %46 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 4
  store %class.SkColorSpace* %41, %class.SkColorSpace** %46, align 8
  %47 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %31, i64 0, i32 5, i32 3
  %48 = load float, float* %47, align 4
  %49 = fmul float %48, 2.550000e+02
  %50 = fadd float %49, 5.000000e-01
  %51 = call float @llvm.floor.f32(float %50) #14
  %52 = fcmp olt float %51, 0x41DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0x41DFFFFFE0000000
  %54 = fcmp ogt float %53, 0xC1DFFFFFE0000000
  %55 = select i1 %54, float %53, float 0xC1DFFFFFE0000000
  %56 = fptosi float %55 to i32
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 5
  store i8 %57, i8* %58, align 8
  %59 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %31, i64 0, i32 8, i32 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %"struct.SkShaderBase::ContextRec", %"struct.SkShaderBase::ContextRec"* %4, i64 0, i32 6
  %62 = lshr i32 %60, 1
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  store i8 %64, i8* %61, align 1
  %65 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 1
  %66 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %65, align 8
  %67 = call i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc* %66, i32 297, i32 8) #14
  %68 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %66, i64 0, i32 1
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = ptrtoint i8* %67 to i64
  %72 = sub i64 %71, %70
  %73 = trunc i64 %72 to i32
  %74 = getelementptr inbounds i8, i8* %67, i64 288
  store i8* %74, i8** %68, align 8
  call void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc* %66, i8* (i8*)* nonnull @_ZZN12SkArenaAlloc4makeIZNS_4makeIZNK12SkShaderBase14onAppendStagesERK10SkStageRecE11CallbackCtxJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_, i32 %73) #14
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 288, i1 false) #14
  %75 = getelementptr inbounds i8, i8* %67, i64 264
  %76 = getelementptr inbounds i8, i8* %67, i64 8
  %77 = bitcast i8* %75 to i8**
  store i8* %76, i8** %77, align 8
  %78 = getelementptr inbounds i8, i8* %67, i64 272
  %79 = bitcast i8* %78 to %class.SkShader**
  store %class.SkShader* null, %class.SkShader** %79, align 8
  %80 = icmp eq %class.SkShaderBase* %0, null
  br i1 %80, label %81, label %84

81:                                               ; preds = %30
  %82 = ptrtoint %class.SkShaderBase* %0 to i64
  %83 = bitcast i8* %78 to i64*
  store i64 %82, i64* %83, align 8
  br label %101

84:                                               ; preds = %30
  %85 = getelementptr inbounds %class.SkShaderBase, %class.SkShaderBase* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = atomicrmw add i32* %85, i32 1 monotonic, !noalias !15
  %87 = load %class.SkShader*, %class.SkShader** %79, align 8
  %88 = bitcast %class.SkShader* %87 to %class.SkRefCntBase*
  %89 = ptrtoint %class.SkShaderBase* %0 to i64
  %90 = bitcast i8* %78 to i64*
  store i64 %89, i64* %90, align 8
  %91 = icmp eq %class.SkShader* %87, null
  br i1 %91, label %101, label %92

92:                                               ; preds = %84
  %93 = getelementptr inbounds %class.SkShader, %class.SkShader* %87, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = atomicrmw add i32* %93, i32 -1 acq_rel
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %96, label %101

96:                                               ; preds = %92
  %97 = bitcast %class.SkShader* %87 to void (%class.SkRefCntBase*)***
  %98 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %97, align 8
  %99 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %98, i64 2
  %100 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %99, align 8
  call void %100(%class.SkRefCntBase* nonnull %88) #14
  br label %101

101:                                              ; preds = %81, %96, %92, %84
  %102 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %65, align 8
  %103 = call %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase11makeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase* %0, %"struct.SkShaderBase::ContextRec"* nonnull dereferenceable(40) %4, %class.SkArenaAlloc* %102)
  %104 = getelementptr inbounds i8, i8* %67, i64 280
  %105 = bitcast i8* %104 to %"class.SkShaderBase::Context"**
  store %"class.SkShaderBase::Context"* %103, %"class.SkShaderBase::Context"** %105, align 8
  %106 = bitcast i8* %67 to void (%struct.SkRasterPipeline_CallbackCtx*, i32)**
  store void (%struct.SkRasterPipeline_CallbackCtx*, i32)* @"_ZZNK12SkShaderBase14onAppendStagesERK10SkStageRecEN3$_08__invokeEP28SkRasterPipeline_CallbackCtxi", void (%struct.SkRasterPipeline_CallbackCtx*, i32)** %106, align 8
  %107 = icmp eq %"class.SkShaderBase::Context"* %103, null
  br i1 %107, label %139, label %108

108:                                              ; preds = %101
  %109 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 0
  %110 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %109, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %110, i32 21, i8* null) #14
  %111 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %109, align 8
  call void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline* %111, i32 0, i8* %67) #14
  %112 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %65, align 8
  %113 = call %class.SkColorSpace* @_Z17sk_srgb_singletonv() #14
  %114 = getelementptr inbounds %struct.SkStageRec, %struct.SkStageRec* %1, i64 0, i32 3
  %115 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %112, i64 0, i32 1
  %116 = bitcast i8** %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 0, %117
  %119 = and i64 %118, 3
  %120 = or i64 %119, 100
  %121 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %112, i64 0, i32 2
  %122 = bitcast i8** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %123, %117
  %125 = icmp ugt i64 %120, %124
  br i1 %125, label %126, label %130

126:                                              ; preds = %108
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %112, i32 100, i32 4) #14
  %127 = load i64, i64* %116, align 8
  %128 = sub i64 0, %127
  %129 = and i64 %128, 3
  br label %130

130:                                              ; preds = %108, %126
  %131 = phi i64 [ %127, %126 ], [ %117, %108 ]
  %132 = phi i64 [ %129, %126 ], [ %119, %108 ]
  %133 = inttoptr i64 %131 to i8*
  %134 = getelementptr inbounds i8, i8* %133, i64 %132
  %135 = getelementptr inbounds i8, i8* %134, i64 100
  store i8* %135, i8** %115, align 8
  %136 = bitcast i8* %134 to %struct.SkColorSpaceXformSteps*
  %137 = load %class.SkColorSpace*, %class.SkColorSpace** %114, align 8
  call void @_ZN22SkColorSpaceXformStepsC1EPK12SkColorSpace11SkAlphaTypeS2_S3_(%struct.SkColorSpaceXformSteps* %136, %class.SkColorSpace* %113, i32 2, %class.SkColorSpace* %137, i32 2) #14
  %138 = load %class.SkRasterPipeline*, %class.SkRasterPipeline** %109, align 8
  call void @_ZNK22SkColorSpaceXformSteps5applyEP16SkRasterPipeline(%struct.SkColorSpaceXformSteps* %136, %class.SkRasterPipeline* %138) #14
  br label %139

139:                                              ; preds = %101, %130
  %140 = phi i1 [ true, %130 ], [ false, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %32) #14
  %141 = load %class.SkPaint*, %class.SkPaint** %10, align 8
  %142 = icmp eq %class.SkPaint* %141, null
  br i1 %142, label %144, label %143

143:                                              ; preds = %139
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %141) #14
  store %class.SkPaint* null, %class.SkPaint** %10, align 8
  br label %144

144:                                              ; preds = %139, %143
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %5) #14
  ret i1 %140
}

declare %class.SkColorSpace* @_Z17sk_srgb_singletonv() local_unnamed_addr #1

declare void @_ZN16SkRasterPipeline6appendENS_10StockStageEPv(%class.SkRasterPipeline*, i32, i8*) local_unnamed_addr #1

declare void @_ZNK22SkColorSpaceXformSteps5applyEP16SkRasterPipeline(%struct.SkColorSpaceXformSteps*, %class.SkRasterPipeline*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkShaderBase7programEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias sret, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readonly byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider* dereferenceable(112), %class.SkMatrix*, %class.SkColorInfo* nocapture readonly dereferenceable(16), %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*) local_unnamed_addr #0 align 2 {
  %12 = alloca %class.SkColorInfo, align 8
  %13 = bitcast %class.SkColorInfo* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #14
  %14 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %12, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %12, i64 0, i32 1
  %16 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %12, i64 0, i32 2
  %17 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 2
  %18 = bitcast %class.SkColorInfo* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 16, i1 false)
  %19 = load i32, i32* %17, align 4
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %33

21:                                               ; preds = %11
  %22 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 1
  %23 = load i32, i32* %22, align 8, !noalias !18
  %24 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 0, i32 0
  %25 = load %class.SkColorSpace*, %class.SkColorSpace** %24, align 8, !noalias !21
  %26 = icmp eq %class.SkColorSpace* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 1 monotonic, !noalias !21
  br label %30

30:                                               ; preds = %21, %27
  %31 = ptrtoint %class.SkColorSpace* %25 to i64
  %32 = bitcast %class.SkColorInfo* %12 to i64*
  store i64 %31, i64* %32, align 8, !alias.scope !18
  store i32 %23, i32* %15, align 8, !alias.scope !18
  store i32 2, i32* %16, align 4, !alias.scope !18
  br label %45

33:                                               ; preds = %11
  %34 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 0, i32 0
  %35 = load %class.SkColorSpace*, %class.SkColorSpace** %34, align 8
  %36 = icmp eq %class.SkColorSpace* %35, null
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = atomicrmw add i32* %38, i32 1 monotonic
  br label %40

40:                                               ; preds = %33, %37
  store %class.SkColorSpace* %35, %class.SkColorSpace** %14, align 8
  %41 = getelementptr inbounds %class.SkColorInfo, %class.SkColorInfo* %8, i64 0, i32 1
  %42 = bitcast i32* %41 to i64*
  %43 = bitcast i32* %15 to i64*
  %44 = load i64, i64* %42, align 8
  store i64 %44, i64* %43, align 8
  br label %45

45:                                               ; preds = %40, %30
  %46 = bitcast %"struct.skvm::Color"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 -86, i64 64, i1 false)
  %47 = bitcast %class.SkShaderBase* %1 to void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)***
  %48 = load void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)**, void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)*** %47, align 8
  %49 = getelementptr inbounds void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)*, void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)** %48, i64 18
  %50 = load void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)*, void (%"struct.skvm::Color"*, %class.SkShaderBase*, %"class.skvm::Builder"*, %"struct.skvm::Coord"*, %"struct.skvm::Coord"*, %"struct.skvm::Color"*, %class.SkMatrixProvider*, %class.SkMatrix*, %class.SkColorInfo*, %"struct.skvm::Uniforms"*, %class.SkArenaAlloc*)** %49, align 8
  call void %50(%"struct.skvm::Color"* sret %0, %class.SkShaderBase* %1, %"class.skvm::Builder"* %2, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %3, %"struct.skvm::Coord"* nonnull byval(%"struct.skvm::Coord") align 8 %4, %"struct.skvm::Color"* nonnull byval(%"struct.skvm::Color") align 8 %5, %class.SkMatrixProvider* dereferenceable(112) %6, %class.SkMatrix* %7, %class.SkColorInfo* nonnull dereferenceable(16) %12, %"struct.skvm::Uniforms"* %9, %class.SkArenaAlloc* %10) #14
  %51 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %78, label %54

54:                                               ; preds = %45
  %55 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %78, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %78, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %78, label %66

66:                                               ; preds = %62
  %67 = bitcast %class.SkShaderBase* %1 to %class.SkShader*
  %68 = bitcast %class.SkShaderBase* %1 to i1 (%class.SkShader*)***
  %69 = load i1 (%class.SkShader*)**, i1 (%class.SkShader*)*** %68, align 8
  %70 = getelementptr inbounds i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %69, i64 7
  %71 = load i1 (%class.SkShader*)*, i1 (%class.SkShader*)** %70, align 8
  %72 = call zeroext i1 %71(%class.SkShader* %67) #14
  br i1 %72, label %73, label %86

73:                                               ; preds = %66
  %74 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %2, i32 1065353216) #14
  %75 = extractvalue { %"class.skvm::Builder"*, i32 } %74, 0
  %76 = extractvalue { %"class.skvm::Builder"*, i32 } %74, 1
  %77 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* %75, %"class.skvm::Builder"** %77, align 8
  store i32 %76, i32* %63, align 8
  br label %86

78:                                               ; preds = %62, %45, %54, %58
  %79 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %79, align 8
  store i32 -1, i32* %51, align 8
  %80 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %80, align 8
  %81 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %81, align 8
  %82 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %82, align 8
  %83 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %83, align 8
  %84 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %84, align 8
  %85 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %85, align 8
  br label %86

86:                                               ; preds = %66, %73, %78
  %87 = load %class.SkColorSpace*, %class.SkColorSpace** %14, align 8
  %88 = icmp eq %class.SkColorSpace* %87, null
  br i1 %88, label %95, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = atomicrmw add i32* %90, i32 -1 acq_rel
  %92 = icmp eq i32 %91, 1
  br i1 %92, label %93, label %95

93:                                               ; preds = %89
  %94 = bitcast %class.SkColorSpace* %87 to i8*
  call void @_ZdlPv(i8* %94) #16
  br label %95

95:                                               ; preds = %86, %89, %93
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkShaderBase15makeInvertAlphaEv(%class.sk_sp.66* noalias sret, %class.SkShaderBase*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.79, align 8
  %4 = bitcast %class.SkShaderBase* %1 to %class.SkShader*
  call void @_ZN14SkColorFilters5BlendEj11SkBlendMode(%class.sk_sp.79* nonnull sret %3, i32 -1, i32 7) #14
  call void @_ZNK8SkShader19makeWithColorFilterE5sk_spI13SkColorFilterE(%class.sk_sp.66* sret %0, %class.SkShader* %4, %class.sk_sp.79* nonnull %3) #14
  %5 = getelementptr inbounds %class.sk_sp.79, %class.sk_sp.79* %3, i64 0, i32 0
  %6 = load %class.SkColorFilter*, %class.SkColorFilter** %5, align 8
  %7 = icmp eq %class.SkColorFilter* %6, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.SkColorFilter, %class.SkColorFilter* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 -1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = bitcast %class.SkColorFilter* %6 to %class.SkRefCntBase*
  %14 = bitcast %class.SkColorFilter* %6 to void (%class.SkRefCntBase*)***
  %15 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %14, align 8
  %16 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, i64 2
  %17 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %16, align 8
  call void %17(%class.SkRefCntBase* nonnull %13) #14
  br label %18

18:                                               ; preds = %2, %8, %12
  ret void
}

declare void @_ZNK8SkShader19makeWithColorFilterE5sk_spI13SkColorFilterE(%class.sk_sp.66* sret, %class.SkShader*, %class.sk_sp.79*) local_unnamed_addr #1

declare void @_ZN14SkColorFilters5BlendEj11SkBlendMode(%class.sk_sp.79* sret, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsE(%"struct.skvm::Coord"* noalias nocapture sret, %"class.skvm::Builder"*, %class.SkMatrix* dereferenceable(40), %"struct.skvm::Coord"* nocapture readonly byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Uniforms"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.skvm::Builder"*, align 8
  %7 = alloca %"struct.skvm::Uniforms"*, align 8
  %8 = alloca %class.anon.104, align 8
  store %"class.skvm::Builder"* %1, %"class.skvm::Builder"** %6, align 8
  store %"struct.skvm::Uniforms"* %4, %"struct.skvm::Uniforms"** %7, align 8
  %9 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 0, i32 0
  %10 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %9, align 8
  %11 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 1, i32 0
  %14 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %13, align 8
  %15 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %3, i64 0, i32 1, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = trunc i32 %18 to i8
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %5
  %22 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #14
  %23 = zext i8 %22 to i32
  store i32 %23, i32* %17, align 4
  br label %24

24:                                               ; preds = %5, %21
  %25 = phi i32 [ %23, %21 ], [ %18, %5 ]
  %26 = and i32 %25, 15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %177, label %28

28:                                               ; preds = %24
  %29 = trunc i32 %25 to i8
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %28
  %32 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #14
  %33 = zext i8 %32 to i32
  store i32 %33, i32* %17, align 4
  br label %34

34:                                               ; preds = %28, %31
  %35 = phi i32 [ %33, %31 ], [ %25, %28 ]
  %36 = and i32 %35, 14
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %63

38:                                               ; preds = %34
  %39 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %40 = load float, float* %39, align 4
  %41 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %40)
  %42 = trunc i64 %41 to i32
  %43 = lshr i64 %41, 32
  %44 = trunc i64 %43 to i32
  %45 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %42, i32 %44) #14
  %46 = extractvalue { %"class.skvm::Builder"*, i32 } %45, 0
  %47 = extractvalue { %"class.skvm::Builder"*, i32 } %45, 1
  %48 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %10, i32 %12, %"class.skvm::Builder"* %46, i32 %47) #14
  %49 = extractvalue { %"class.skvm::Builder"*, i32 } %48, 0
  %50 = extractvalue { %"class.skvm::Builder"*, i32 } %48, 1
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %52 = load float, float* %51, align 4
  %53 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %52)
  %54 = trunc i64 %53 to i32
  %55 = lshr i64 %53, 32
  %56 = trunc i64 %55 to i32
  %57 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %54, i32 %56) #14
  %58 = extractvalue { %"class.skvm::Builder"*, i32 } %57, 0
  %59 = extractvalue { %"class.skvm::Builder"*, i32 } %57, 1
  %60 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %14, i32 %16, %"class.skvm::Builder"* %58, i32 %59) #14
  %61 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 0
  %62 = extractvalue { %"class.skvm::Builder"*, i32 } %60, 1
  br label %177

63:                                               ; preds = %34
  %64 = trunc i32 %35 to i8
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %2) #14
  %68 = zext i8 %67 to i32
  store i32 %68, i32* %17, align 4
  br label %69

69:                                               ; preds = %63, %66
  %70 = phi i32 [ %68, %66 ], [ %35, %63 ]
  %71 = and i32 %70, 12
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %122

73:                                               ; preds = %69
  %74 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  %75 = load float, float* %74, align 4
  %76 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %75)
  %77 = trunc i64 %76 to i32
  %78 = lshr i64 %76, 32
  %79 = trunc i64 %78 to i32
  %80 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %77, i32 %79) #14
  %81 = extractvalue { %"class.skvm::Builder"*, i32 } %80, 0
  %82 = extractvalue { %"class.skvm::Builder"*, i32 } %80, 1
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %84 = load float, float* %83, align 4
  %85 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %84)
  %86 = trunc i64 %85 to i32
  %87 = lshr i64 %85, 32
  %88 = trunc i64 %87 to i32
  %89 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %86, i32 %88) #14
  %90 = extractvalue { %"class.skvm::Builder"*, i32 } %89, 0
  %91 = extractvalue { %"class.skvm::Builder"*, i32 } %89, 1
  %92 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %10, i32 %12, %"class.skvm::Builder"* %81, i32 %82) #14
  %93 = extractvalue { %"class.skvm::Builder"*, i32 } %92, 0
  %94 = extractvalue { %"class.skvm::Builder"*, i32 } %92, 1
  %95 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %93, i32 %94, %"class.skvm::Builder"* %90, i32 %91) #14
  %96 = extractvalue { %"class.skvm::Builder"*, i32 } %95, 0
  %97 = extractvalue { %"class.skvm::Builder"*, i32 } %95, 1
  %98 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %99 = load float, float* %98, align 4
  %100 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %99)
  %101 = trunc i64 %100 to i32
  %102 = lshr i64 %100, 32
  %103 = trunc i64 %102 to i32
  %104 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %101, i32 %103) #14
  %105 = extractvalue { %"class.skvm::Builder"*, i32 } %104, 0
  %106 = extractvalue { %"class.skvm::Builder"*, i32 } %104, 1
  %107 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %108 = load float, float* %107, align 4
  %109 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %4, float %108)
  %110 = trunc i64 %109 to i32
  %111 = lshr i64 %109, 32
  %112 = trunc i64 %111 to i32
  %113 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %1, i32 %110, i32 %112) #14
  %114 = extractvalue { %"class.skvm::Builder"*, i32 } %113, 0
  %115 = extractvalue { %"class.skvm::Builder"*, i32 } %113, 1
  %116 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %14, i32 %16, %"class.skvm::Builder"* %105, i32 %106) #14
  %117 = extractvalue { %"class.skvm::Builder"*, i32 } %116, 0
  %118 = extractvalue { %"class.skvm::Builder"*, i32 } %116, 1
  %119 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %1, %"class.skvm::Builder"* %117, i32 %118, %"class.skvm::Builder"* %114, i32 %115) #14
  %120 = extractvalue { %"class.skvm::Builder"*, i32 } %119, 0
  %121 = extractvalue { %"class.skvm::Builder"*, i32 } %119, 1
  br label %177

122:                                              ; preds = %69
  %123 = bitcast %class.anon.104* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %123) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 -86, i64 32, i1 false)
  %124 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %10, %"class.skvm::Builder"** %124, align 8
  %125 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 0, i32 1
  store i32 %12, i32* %125, align 8
  %126 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %14, %"class.skvm::Builder"** %126, align 8
  %127 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 1, i32 1
  store i32 %16, i32* %127, align 8
  %128 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 2
  store %"class.skvm::Builder"** %6, %"class.skvm::Builder"*** %128, align 8
  %129 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 3
  store %"struct.skvm::Uniforms"** %7, %"struct.skvm::Uniforms"*** %129, align 8
  %130 = getelementptr inbounds %class.anon.104, %class.anon.104* %8, i64 0, i32 4
  store %class.SkMatrix* %2, %class.SkMatrix** %130, align 8
  %131 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsEENK3$_1clEi"(%class.anon.104* nonnull %8, i32 0)
  %132 = extractvalue { %"class.skvm::Builder"*, i32 } %131, 0
  %133 = extractvalue { %"class.skvm::Builder"*, i32 } %131, 1
  %134 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsEENK3$_1clEi"(%class.anon.104* nonnull %8, i32 1)
  %135 = extractvalue { %"class.skvm::Builder"*, i32 } %134, 0
  %136 = extractvalue { %"class.skvm::Builder"*, i32 } %134, 1
  %137 = load i32, i32* %17, align 4
  %138 = and i32 %137, 192
  %139 = icmp eq i32 %138, 128
  br i1 %139, label %140, label %143

140:                                              ; preds = %122
  %141 = call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #14
  %142 = zext i8 %141 to i32
  store i32 %142, i32* %17, align 4
  br label %143

143:                                              ; preds = %122, %140
  %144 = phi i32 [ %142, %140 ], [ %137, %122 ]
  %145 = and i32 %144, 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %172, label %147

147:                                              ; preds = %143
  %148 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsEENK3$_1clEi"(%class.anon.104* nonnull %8, i32 2)
  %149 = extractvalue { %"class.skvm::Builder"*, i32 } %148, 0
  %150 = extractvalue { %"class.skvm::Builder"*, i32 } %148, 1
  %151 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %149, i32 1065353216) #14
  %152 = extractvalue { %"class.skvm::Builder"*, i32 } %151, 0
  %153 = extractvalue { %"class.skvm::Builder"*, i32 } %151, 1
  %154 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %149, %"class.skvm::Builder"* %152, i32 %153, %"class.skvm::Builder"* %149, i32 %150) #14
  %155 = extractvalue { %"class.skvm::Builder"*, i32 } %154, 0
  %156 = extractvalue { %"class.skvm::Builder"*, i32 } %154, 1
  %157 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %132, %"class.skvm::Builder"* %132, i32 %133, %"class.skvm::Builder"* %155, i32 %156) #14
  %158 = extractvalue { %"class.skvm::Builder"*, i32 } %157, 0
  %159 = extractvalue { %"class.skvm::Builder"*, i32 } %157, 1
  %160 = call fastcc { %"class.skvm::Builder"*, i32 } @"_ZZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsEENK3$_1clEi"(%class.anon.104* nonnull %8, i32 2)
  %161 = extractvalue { %"class.skvm::Builder"*, i32 } %160, 0
  %162 = extractvalue { %"class.skvm::Builder"*, i32 } %160, 1
  %163 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"* %161, i32 1065353216) #14
  %164 = extractvalue { %"class.skvm::Builder"*, i32 } %163, 0
  %165 = extractvalue { %"class.skvm::Builder"*, i32 } %163, 1
  %166 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"* %161, %"class.skvm::Builder"* %164, i32 %165, %"class.skvm::Builder"* %161, i32 %162) #14
  %167 = extractvalue { %"class.skvm::Builder"*, i32 } %166, 0
  %168 = extractvalue { %"class.skvm::Builder"*, i32 } %166, 1
  %169 = call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %135, %"class.skvm::Builder"* %135, i32 %136, %"class.skvm::Builder"* %167, i32 %168) #14
  %170 = extractvalue { %"class.skvm::Builder"*, i32 } %169, 0
  %171 = extractvalue { %"class.skvm::Builder"*, i32 } %169, 1
  br label %172

172:                                              ; preds = %143, %147
  %173 = phi %"class.skvm::Builder"* [ %170, %147 ], [ %135, %143 ]
  %174 = phi i32 [ %171, %147 ], [ %136, %143 ]
  %175 = phi %"class.skvm::Builder"* [ %158, %147 ], [ %132, %143 ]
  %176 = phi i32 [ %159, %147 ], [ %133, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %123) #14
  br label %177

177:                                              ; preds = %38, %172, %73, %24
  %178 = phi %"class.skvm::Builder"* [ %14, %24 ], [ %61, %38 ], [ %120, %73 ], [ %173, %172 ]
  %179 = phi i32 [ %16, %24 ], [ %62, %38 ], [ %121, %73 ], [ %174, %172 ]
  %180 = phi %"class.skvm::Builder"* [ %10, %24 ], [ %49, %38 ], [ %96, %73 ], [ %175, %172 ]
  %181 = phi i32 [ %12, %24 ], [ %50, %38 ], [ %97, %73 ], [ %176, %172 ]
  %182 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* %180, %"class.skvm::Builder"** %182, align 8
  %183 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %0, i64 0, i32 0, i32 1
  store i32 %181, i32* %183, align 8
  %184 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* %178, %"class.skvm::Builder"** %184, align 8
  %185 = getelementptr inbounds %"struct.skvm::Coord", %"struct.skvm::Coord"* %0, i64 0, i32 1, i32 1
  store i32 %179, i32* %185, align 8
  ret void
}

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"*, float) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  br i1 %8, label %16, label %10

10:                                               ; preds = %2
  %11 = bitcast i32* %5 to float*
  store float %1, float* %11, align 4
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = bitcast %"class.std::__1::vector.97"* %3 to i64*
  br label %74

16:                                               ; preds = %2
  %17 = ptrtoint i32* %5 to i64
  %18 = bitcast i32** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.97"* %3 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector.97"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #15
  unreachable

27:                                               ; preds = %16
  %28 = bitcast i32** %6 to i64*
  %29 = sub i64 %9, %20
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2305843009213693951
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 1
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 4611686018427387903
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 4611686018427387903, %27 ]
  %42 = shl i64 %41, 2
  %43 = tail call i8* @_Znwm(i64 %42) #16
  %44 = bitcast i8* %43 to i32*
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi i32* [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %22
  %49 = getelementptr inbounds i32, i32* %47, i64 %46
  %50 = ptrtoint i32* %49 to i64
  %51 = bitcast i32* %48 to float*
  store float %1, float* %51, align 4
  %52 = getelementptr inbounds i32, i32* %48, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.97", %"class.std::__1::vector.97"* %3, i64 0, i32 0, i32 0
  %55 = load i32*, i32** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint i32* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 2
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds i32, i32* %48, i64 %60
  %62 = ptrtoint i32* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast i32* %61 to i8*
  %66 = bitcast i32* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #14
  %67 = load i32*, i32** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi i32* [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #16
  %73 = load i64, i64* %18, align 8
  br label %74

74:                                               ; preds = %10, %68, %71
  %75 = phi i64* [ %15, %10 ], [ %19, %68 ], [ %19, %71 ]
  %76 = phi i64 [ %13, %10 ], [ %53, %68 ], [ %73, %71 ]
  %77 = getelementptr inbounds %"struct.skvm::Uniforms", %"struct.skvm::Uniforms"* %0, i64 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = load i64, i64* %75, align 8
  %80 = sub i64 %76, %79
  %81 = shl i64 %80, 32
  %82 = add i64 %81, -17179869184
  %83 = zext i32 %78 to i64
  %84 = or i64 %82, %83
  ret i64 %84
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc { %"class.skvm::Builder"*, i32 } @"_ZZN12SkShaderBase11ApplyMatrixEPN4skvm7BuilderERK8SkMatrixNS0_5CoordEPNS0_8UniformsEENK3$_1clEi"(%class.anon.104* nocapture readonly, i32) unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 2
  %4 = load %"class.skvm::Builder"**, %"class.skvm::Builder"*** %3, align 8
  %5 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %4, align 8
  %6 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 0, i32 0
  %7 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %6, align 8
  %8 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 3
  %11 = load %"struct.skvm::Uniforms"**, %"struct.skvm::Uniforms"*** %10, align 8
  %12 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %11, align 8
  %13 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 4
  %14 = load %class.SkMatrix*, %class.SkMatrix** %13, align 8
  %15 = mul nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %14, i64 0, i32 0, i64 %16
  %18 = load float, float* %17, align 4
  %19 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %12, float %18)
  %20 = trunc i64 %19 to i32
  %21 = lshr i64 %19, 32
  %22 = trunc i64 %21 to i32
  %23 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %5, i32 %20, i32 %22) #14
  %24 = extractvalue { %"class.skvm::Builder"*, i32 } %23, 0
  %25 = extractvalue { %"class.skvm::Builder"*, i32 } %23, 1
  %26 = load %"class.skvm::Builder"**, %"class.skvm::Builder"*** %3, align 8
  %27 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %26, align 8
  %28 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 1, i32 0
  %29 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %28, align 8
  %30 = getelementptr inbounds %class.anon.104, %class.anon.104* %0, i64 0, i32 1, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = load %"struct.skvm::Uniforms"**, %"struct.skvm::Uniforms"*** %10, align 8
  %33 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %32, align 8
  %34 = load %class.SkMatrix*, %class.SkMatrix** %13, align 8
  %35 = add nsw i32 %15, 1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %34, i64 0, i32 0, i64 %36
  %38 = load float, float* %37, align 4
  %39 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %33, float %38)
  %40 = trunc i64 %39 to i32
  %41 = lshr i64 %39, 32
  %42 = trunc i64 %41 to i32
  %43 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %27, i32 %40, i32 %42) #14
  %44 = extractvalue { %"class.skvm::Builder"*, i32 } %43, 0
  %45 = extractvalue { %"class.skvm::Builder"*, i32 } %43, 1
  %46 = load %"class.skvm::Builder"**, %"class.skvm::Builder"*** %3, align 8
  %47 = load %"class.skvm::Builder"*, %"class.skvm::Builder"** %46, align 8
  %48 = load %"struct.skvm::Uniforms"**, %"struct.skvm::Uniforms"*** %10, align 8
  %49 = load %"struct.skvm::Uniforms"*, %"struct.skvm::Uniforms"** %48, align 8
  %50 = load %class.SkMatrix*, %class.SkMatrix** %13, align 8
  %51 = add nsw i32 %15, 2
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %50, i64 0, i32 0, i64 %52
  %54 = load float, float* %53, align 4
  %55 = tail call i64 @_ZN4skvm8Uniforms5pushFEf(%"struct.skvm::Uniforms"* %49, float %54)
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %55, 32
  %58 = trunc i64 %57 to i32
  %59 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"* %47, i32 %56, i32 %58) #14
  %60 = extractvalue { %"class.skvm::Builder"*, i32 } %59, 0
  %61 = extractvalue { %"class.skvm::Builder"*, i32 } %59, 1
  %62 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %27, %"class.skvm::Builder"* %29, i32 %31, %"class.skvm::Builder"* %44, i32 %45) #14
  %63 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 0
  %64 = extractvalue { %"class.skvm::Builder"*, i32 } %62, 1
  %65 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %27, %"class.skvm::Builder"* %63, i32 %64, %"class.skvm::Builder"* %60, i32 %61) #14
  %66 = extractvalue { %"class.skvm::Builder"*, i32 } %65, 0
  %67 = extractvalue { %"class.skvm::Builder"*, i32 } %65, 1
  %68 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"* %5, %"class.skvm::Builder"* %7, i32 %9, %"class.skvm::Builder"* %24, i32 %25) #14
  %69 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 0
  %70 = extractvalue { %"class.skvm::Builder"*, i32 } %68, 1
  %71 = tail call { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3addENS_3F32ES1_(%"class.skvm::Builder"* %5, %"class.skvm::Builder"* %69, i32 %70, %"class.skvm::Builder"* %66, i32 %67) #14
  ret { %"class.skvm::Builder"*, i32 } %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK13SkEmptyShader9onProgramEPN4skvm7BuilderENS0_5CoordES3_NS0_5ColorERK16SkMatrixProviderPK8SkMatrixRK11SkColorInfoPNS0_8UniformsEP12SkArenaAlloc(%"struct.skvm::Color"* noalias nocapture sret, %class.SkEmptyShader* nocapture readnone, %"class.skvm::Builder"* nocapture readnone, %"struct.skvm::Coord"* nocapture readnone byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Coord"* nocapture readnone byval(%"struct.skvm::Coord") align 8, %"struct.skvm::Color"* nocapture readnone byval(%"struct.skvm::Color") align 8, %class.SkMatrixProvider* nocapture readnone dereferenceable(112), %class.SkMatrix* nocapture readnone, %class.SkColorInfo* nocapture readnone dereferenceable(16), %"struct.skvm::Uniforms"* nocapture readnone, %class.SkArenaAlloc* nocapture readnone) unnamed_addr #6 align 2 {
  %12 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %12, align 8
  %13 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 0, i32 1
  store i32 -1, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %14, align 8
  %15 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 1, i32 1
  store i32 -1, i32* %15, align 8
  %16 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %16, align 8
  %17 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 2, i32 1
  store i32 -1, i32* %17, align 8
  %18 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 0
  store %"class.skvm::Builder"* null, %"class.skvm::Builder"** %18, align 8
  %19 = getelementptr inbounds %"struct.skvm::Color", %"struct.skvm::Color"* %0, i64 0, i32 3, i32 1
  store i32 -1, i32* %19, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkEmptyShader10CreateProcER12SkReadBuffer(%class.sk_sp.116* noalias nocapture sret, %class.SkReadBuffer* nocapture readnone dereferenceable(136)) #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 56) #16, !noalias !24
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = bitcast i8* %4 to i32*
  store i32 1, i32* %5, align 4, !noalias !24
  %6 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV12SkShaderBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !noalias !24
  %7 = getelementptr inbounds i8, i8* %3, i64 12
  %8 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix1IEv() #14, !noalias !24
  %9 = bitcast %class.SkMatrix* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %9, i64 40, i1 false) #14, !noalias !24
  %10 = getelementptr inbounds i8, i8* %3, i64 48
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4, !noalias !24
  %13 = trunc i32 %12 to i8
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = bitcast i8* %7 to %class.SkMatrix*
  %17 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %16) #14, !noalias !24
  %18 = zext i8 %17 to i32
  store i32 %18, i32* %11, align 4, !noalias !24
  br label %19

19:                                               ; preds = %15, %2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [21 x i8*] }, { [21 x i8*] }* @_ZTV13SkEmptyShader, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !noalias !24
  %20 = ptrtoint i8* %3 to i64
  %21 = bitcast %class.sk_sp.116* %0 to i64*
  store i64 %20, i64* %21, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12SkShaderBaseD2Ev(%class.SkShaderBase* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkEmptyShaderD0Ev(%class.SkEmptyShader*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %class.SkEmptyShader* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #14
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.116*, %class.SkReadBuffer*)* @_ZNK13SkEmptyShader10getFactoryEv(%class.SkEmptyShader*) unnamed_addr #0 comdat align 2 {
  ret void (%class.sk_sp.116*, %class.SkReadBuffer*)* @_ZN13SkEmptyShader10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK13SkEmptyShader11getTypeNameEv(%class.SkEmptyShader*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13SkEmptyShader7flattenER13SkWriteBuffer(%class.SkEmptyShader*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase18getFlattenableTypeEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i32 8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkShader8isOpaqueEv(%class.SkShader*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase10isConstantEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkImage* @_ZNK12SkShaderBase10onIsAImageEP8SkMatrixP10SkTileMode(%class.SkShaderBase*, %class.SkMatrix*, i32*) unnamed_addr #0 comdat align 2 {
  ret %class.SkImage* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkRuntimeEffect* @_ZNK12SkShaderBase15asRuntimeEffectEv(%class.SkShaderBase*) unnamed_addr #0 comdat align 2 {
  ret %class.SkRuntimeEffect* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK13SkEmptyShader13onMakeContextERKN12SkShaderBase10ContextRecEP12SkArenaAlloc(%class.SkEmptyShader*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #0 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK12SkShaderBase18onAsLuminanceColorEPj(%class.SkShaderBase*, i32*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK13SkEmptyShader14onAppendStagesERK10SkStageRec(%class.SkEmptyShader*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkStageUpdater* @_ZNK12SkShaderBase23onAppendUpdatableStagesERK10SkStageRec(%class.SkShaderBase*, %struct.SkStageRec* dereferenceable(56)) unnamed_addr #0 comdat align 2 {
  ret %class.SkStageUpdater* null
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkShaderD0Ev(%class.SkShader*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #15
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkShaderBase::Context"* @_ZNK12SkShaderBase13onMakeContextERKNS_10ContextRecEP12SkArenaAlloc(%class.SkShaderBase*, %"struct.SkShaderBase::ContextRec"* dereferenceable(40), %class.SkArenaAlloc*) unnamed_addr #0 comdat align 2 {
  ret %"class.SkShaderBase::Context"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkShaderBase7Context8getFlagsEv(%"class.SkShaderBase::Context"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #1

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

declare void @_ZN7SkPaint9setAlphafEf(%class.SkPaint*, float) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZNK12SkShaderBase14onAppendStagesERK10SkStageRecEN3$_08__invokeEP28SkRasterPipeline_CallbackCtxi"(%struct.SkRasterPipeline_CallbackCtx* nocapture, i32) #7 align 2 {
  %3 = alloca [16 x i32], align 16
  %4 = getelementptr inbounds %struct.SkRasterPipeline_CallbackCtx, %struct.SkRasterPipeline_CallbackCtx* %0, i64 0, i32 1, i64 0
  %5 = load float, float* %4, align 8
  %6 = fptosi float %5 to i32
  %7 = getelementptr inbounds %struct.SkRasterPipeline_CallbackCtx, %struct.SkRasterPipeline_CallbackCtx* %0, i64 0, i32 1, i64 1
  %8 = load float, float* %7, align 4
  %9 = fptosi float %8 to i32
  %10 = bitcast [16 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %10) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 64, i1 false) #14
  %11 = getelementptr inbounds %struct.SkRasterPipeline_CallbackCtx, %struct.SkRasterPipeline_CallbackCtx* %0, i64 1, i32 1
  %12 = bitcast [64 x float]* %11 to %"class.SkShaderBase::Context"**
  %13 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %12, align 8
  %14 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 0
  %15 = bitcast %"class.SkShaderBase::Context"* %13 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %16 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %16, i64 3
  %18 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %17, align 8
  call void %18(%"class.SkShaderBase::Context"* %13, i32 %6, i32 %9, i32* nonnull %14, i32 %1) #14
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %37

20:                                               ; preds = %2
  %21 = zext i32 %1 to i64
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %35, %22 ]
  %24 = getelementptr inbounds [16 x i32], [16 x i32]* %3, i64 0, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = call { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType2EE11FromPMColorEj(i32 %25) #14
  %27 = extractvalue { <2 x float>, <2 x float> } %26, 0
  %28 = extractvalue { <2 x float>, <2 x float> } %26, 1
  %29 = shl i64 %23, 2
  %30 = and i64 %29, 4294967292
  %31 = getelementptr inbounds %struct.SkRasterPipeline_CallbackCtx, %struct.SkRasterPipeline_CallbackCtx* %0, i64 0, i32 1, i64 %30
  %32 = bitcast float* %31 to <2 x float>*
  store <2 x float> %27, <2 x float>* %32, align 4
  %33 = getelementptr inbounds float, float* %31, i64 2
  %34 = bitcast float* %33 to <2 x float>*
  store <2 x float> %28, <2 x float>* %34, align 4
  %35 = add nuw nsw i64 %23, 1
  %36 = icmp eq i64 %35, %21
  br i1 %36, label %37, label %22

37:                                               ; preds = %22, %2
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %10) #14
  ret void
}

declare { <2 x float>, <2 x float> } @_ZN8SkRGBA4fIL11SkAlphaType2EE11FromPMColorEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #10

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder5splatEi(%"class.skvm::Builder"*, i32) local_unnamed_addr #1

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder9uniform32ENS_3PtrEi(%"class.skvm::Builder"*, i32, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3mulENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #1

declare { %"class.skvm::Builder"*, i32 } @_ZN4skvm7Builder3divENS_3F32ES1_(%"class.skvm::Builder"*, %"class.skvm::Builder"*, i32, %"class.skvm::Builder"*, i32) local_unnamed_addr #1

declare void @_ZN13SkColorShaderC1Ej(%class.SkColorShader*, i32) unnamed_addr #1

declare void @_ZN7SkPaintC1ERKS_(%class.SkPaint*, %class.SkPaint* dereferenceable(72)) unnamed_addr #1

declare i8* @_ZN12SkArenaAlloc21allocObjectWithFooterEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #1

declare void @_ZN12SkArenaAlloc13installFooterEPFPcS0_Ej(%class.SkArenaAlloc*, i8* (i8*)*, i32) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i8* @_ZZN12SkArenaAlloc4makeIZNS_4makeIZNK12SkShaderBase14onAppendStagesERK10SkStageRecE11CallbackCtxJEEEPT_DpOT0_EUlPvE_EEDTclfp_LDnEEEOS7_ENUlPcE_8__invokeESG_(i8* readonly) #7 align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -297
  %3 = getelementptr inbounds i8, i8* %0, i64 -25
  %4 = bitcast i8* %3 to %class.SkShader**
  %5 = load %class.SkShader*, %class.SkShader** %4, align 8
  %6 = icmp eq %class.SkShader* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.SkShader, %class.SkShader* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = bitcast %class.SkShader* %5 to %class.SkRefCntBase*
  %13 = bitcast %class.SkShader* %5 to void (%class.SkRefCntBase*)***
  %14 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, i64 2
  %16 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %15, align 8
  tail call void %16(%class.SkRefCntBase* nonnull %12) #14
  br label %17

17:                                               ; preds = %1, %7, %11
  ret i8* %2
}

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK12SkShaderBase16totalLocalMatrixEPK8SkMatrix: argument 0"}
!4 = distinct !{!4, !"_ZNK12SkShaderBase16totalLocalMatrixEPK8SkMatrix"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN8SkMatrix6ConcatERKS_S1_: argument 0"}
!7 = distinct !{!7, !"_ZN8SkMatrix6ConcatERKS_S1_"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_Z10sk_make_spI13SkEmptyShaderJEE5sk_spIT_EDpOT0_: argument 0"}
!11 = distinct !{!11, !"_Z10sk_make_spI13SkEmptyShaderJEE5sk_spIT_EDpOT0_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_Z10sk_make_spI13SkColorShaderJRjEE5sk_spIT_EDpOT0_: argument 0"}
!14 = distinct !{!14, !"_Z10sk_make_spI13SkColorShaderJRjEE5sk_spIT_EDpOT0_"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_Z9sk_ref_spI12SkShaderBaseE5sk_spIT_EPKS2_: argument 0"}
!17 = distinct !{!17, !"_Z9sk_ref_spI12SkShaderBaseE5sk_spIT_EPKS2_"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!20 = distinct !{!20, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!21 = !{!22, !19}
!22 = distinct !{!22, !23, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!23 = distinct !{!23, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!24 = !{!25, !27}
!25 = distinct !{!25, !26, !"_Z10sk_make_spI13SkEmptyShaderJEE5sk_spIT_EDpOT0_: argument 0"}
!26 = distinct !{!26, !"_Z10sk_make_spI13SkEmptyShaderJEE5sk_spIT_EDpOT0_"}
!27 = distinct !{!27, !28, !"_ZN9SkShaders5EmptyEv: argument 0"}
!28 = distinct !{!28, !"_ZN9SkShaders5EmptyEv"}
