; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/rnn_fc.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/rnn_fc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::rnn_vad::FullyConnectedLayer" = type { i32, i32, %"class.std::__1::vector", %"class.std::__1::vector", %"class.webrtc::rnn_vad::VectorMath", %"class.rtc::FunctionView", %"struct.std::__1::array" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.webrtc::rnn_vad::VectorMath" = type { %"struct.webrtc::AvailableCpuFeatures" }
%"struct.webrtc::AvailableCpuFeatures" = type { i8, i8, i8 }
%"class.rtc::FunctionView" = type { %"union.rtc::FunctionView<float (float)>::VoidUnion", float (i8*, float)* }
%"union.rtc::FunctionView<float (float)>::VoidUnion" = type { i8* }
%"struct.std::__1::array" = type { [24 x float] }
%"class.rtc::ArrayView" = type { %"class.rtc::impl::ArrayViewBase" }
%"class.rtc::impl::ArrayViewBase" = type { i8*, i64 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN7rnnoise18TansigApproximatedEf = comdat any

$_ZN7rnnoise19SigmoidApproximatedEf = comdat any

$_ZN3rtc12FunctionViewIFffEE10CallFunPtrIRS1_EEfNS2_9VoidUnionEf = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t = comdat any

$_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable = comdat any

@.str.1 = private unnamed_addr constant [43 x i8] c"../../third_party/webrtc/rtc_base/checks.h\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"a % b == 0\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c" is not evenly divisible by \00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t = linkonce_odr hidden constant [7 x i8] c"\0D\01\01\01\09\01\00", comdat, align 1
@_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable = linkonce_odr hidden local_unnamed_addr constant [201 x float] [float 0.000000e+00, float 0x3FA47820A0000000, float 0x3FB46FBD20000000, float 0x3FBE92C4A0000000, float 0x3FC44E9C40000000, float 0x3FC9439580000000, float 0x3FCE24BBA0000000, float 0x3FD1774680000000, float 0x3FD3CEF680000000, float 0x3FD617FC80000000, float 0x3FD85115A0000000, float 0x3FDA7924A0000000, float 0x3FDC8F4300000000, float 0x3FDE92A300000000, float 0x3FE0415900000000, float 0x3FE12F8380000000, float 0x3FE213A920000000, float 0x3FE2EDB940000000, float 0x3FE3BDB800000000, float 0x3FE483B3E0000000, float 0x3FE53FCA80000000, float 0x3FE5F225C0000000, float 0x3FE69AFC00000000, float 0x3FE73A8C60000000, float 0x3FE7D11E00000000, float 0x3FE85EFA60000000, float 0x3FE8E47560000000, float 0x3FE961E2E0000000, float 0x3FE9D79B00000000, float 0x3FEA45F5A0000000, float 0x3FEAAD4D40000000, float 0x3FEB0DF9C0000000, float 0x3FEB685340000000, float 0x3FEBBCB1C0000000, float 0x3FEC0B6960000000, float 0x3FEC54CDC0000000, float 0x3FEC992C80000000, float 0x3FECD8D360000000, float 0x3FED140DE0000000, float 0x3FED4B1EE0000000, float 0x3FED7E5000000000, float 0x3FEDADDBE0000000, float 0x3FEDDA0160000000, float 0x3FEE02F940000000, float 0x3FEE28FC00000000, float 0x3FEE4C3C20000000, float 0x3FEE6CE9A0000000, float 0x3FEE8B32C0000000, float 0x3FEEA74180000000, float 0x3FEEC13FE0000000, float 0x3FEED95140000000, float 0x3FEEEF9760000000, float 0x3FEF043800000000, float 0x3FEF174C40000000, float 0x3FEF28F3A0000000, float 0x3FEF394960000000, float 0x3FEF486480000000, float 0x3FEF565E40000000, float 0x3FEF634760000000, float 0x3FEF6F3900000000, float 0x3FEF7A4400000000, float 0x3FEF847900000000, float 0x3FEF8DE6E0000000, float 0x3FEF969E40000000, float 0x3FEF9EABC0000000, float 0x3FEFA61C00000000, float 0x3FEFACFD80000000, float 0x3FEFB356E0000000, float 0x3FEFB93680000000, float 0x3FEFBEA0C0000000, float 0x3FEFC3A220000000, float 0x3FEFC84300000000, float 0x3FEFCC89C0000000, float 0x3FEFD07A60000000, float 0x3FEFD41FA0000000, float 0x3FEFD77DA0000000, float 0x3FEFDA9860000000, float 0x3FEFDD7660000000, float 0x3FEFE01DE0000000, float 0x3FEFE290E0000000, float 0x3FEFE4D1A0000000, float 0x3FEFE6E860000000, float 0x3FEFE8D540000000, float 0x3FEFEA9C60000000, float 0x3FEFEC41E0000000, float 0x3FEFEDC5E0000000, float 0x3FEFEF2C80000000, float 0x3FEFF077C0000000, float 0x3FEFF1A7E0000000, float 0x3FEFF2C300000000, float 0x3FEFF3C700000000, float 0x3FEFF4B840000000, float 0x3FEFF59460000000, float 0x3FEFF66200000000, float 0x3FEFF71EA0000000, float 0x3FEFF7CEE0000000, float 0x3FEFF86E40000000, float 0x3FEFF90320000000, float 0x3FEFF98D80000000, float 0x3FEFFA0B60000000, float 0x3FEFFA80C0000000, float 0x3FEFFAEDE0000000, float 0x3FEFFB5060000000, float 0x3FEFFBACC0000000, float 0x3FEFFC02A0000000, float 0x3FEFFC5040000000, float 0x3FEFFC99A0000000, float 0x3FEFFCDCC0000000, float 0x3FEFFD19A0000000, float 0x3FEFFD5240000000, float 0x3FEFFD88C0000000, float 0x3FEFFDB900000000, float 0x3FEFFDE500000000, float 0x3FEFFE0F00000000, float 0x3FEFFE34C0000000, float 0x3FEFFE5860000000, float 0x3FEFFE77E0000000, float 0x3FEFFE9740000000, float 0x3FEFFEB280000000, float 0x3FEFFECBC0000000, float 0x3FEFFEE4E0000000, float 0x3FEFFEF9E0000000, float 0x3FEFFF0EE0000000, float 0x3FEFFF1FA0000000, float 0x3FEFFF3280000000, float 0x3FEFFF4120000000, float 0x3FEFFF4FE0000000, float 0x3FEFFF5E80000000, float 0x3FEFFF6B20000000, float 0x3FEFFF75A0000000, float 0x3FEFFF8020000000, float 0x3FEFFF8A80000000, float 0x3FEFFF9300000000, float 0x3FEFFF9B60000000, float 0x3FEFFFA3C0000000, float 0x3FEFFFAA00000000, float 0x3FEFFFB040000000, float 0x3FEFFFB6A0000000, float 0x3FEFFFBCE0000000, float 0x3FEFFFC120000000, float 0x3FEFFFC760000000, float 0x3FEFFFCBA0000000, float 0x3FEFFFCFC0000000, float 0x3FEFFFD1E0000000, float 0x3FEFFFD600000000, float 0x3FEFFFDA40000000, float 0x3FEFFFDC60000000, float 0x3FEFFFDE80000000, float 0x3FEFFFE2A0000000, float 0x3FEFFFE4C0000000, float 0x3FEFFFE6E0000000, float 0x3FEFFFE8E0000000, float 0x3FEFFFEB00000000, float 0x3FEFFFEB00000000, float 0x3FEFFFED20000000, float 0x3FEFFFEF40000000, float 0x3FEFFFEF40000000, float 0x3FEFFFF160000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF580000000, float 0x3FEFFFF580000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], comdat, align 16

@_ZN6webrtc7rnn_vad19FullyConnectedLayerC1EiiN3rtc9ArrayViewIKaLln4711EEES5_NS0_18ActivationFunctionERKNS_20AvailableCpuFeaturesEN4absl11string_viewE = hidden unnamed_addr alias void (%"class.webrtc::rnn_vad::FullyConnectedLayer"*, i32, i32, i8*, i64, %"class.rtc::ArrayView"*, i32, %"struct.webrtc::AvailableCpuFeatures"*, %"class.absl::string_view"*), void (%"class.webrtc::rnn_vad::FullyConnectedLayer"*, i32, i32, i8*, i64, %"class.rtc::ArrayView"*, i32, %"struct.webrtc::AvailableCpuFeatures"*, %"class.absl::string_view"*)* @_ZN6webrtc7rnn_vad19FullyConnectedLayerC2EiiN3rtc9ArrayViewIKaLln4711EEES5_NS0_18ActivationFunctionERKNS_20AvailableCpuFeaturesEN4absl11string_viewE
@_ZN6webrtc7rnn_vad19FullyConnectedLayerD1Ev = hidden unnamed_addr alias void (%"class.webrtc::rnn_vad::FullyConnectedLayer"*), void (%"class.webrtc::rnn_vad::FullyConnectedLayer"*)* @_ZN6webrtc7rnn_vad19FullyConnectedLayerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19FullyConnectedLayerC2EiiN3rtc9ArrayViewIKaLln4711EEES5_NS0_18ActivationFunctionERKNS_20AvailableCpuFeaturesEN4absl11string_viewE(%"class.webrtc::rnn_vad::FullyConnectedLayer"*, i32, i32, i8* readonly, i64, %"class.rtc::ArrayView"* nocapture readonly byval(%"class.rtc::ArrayView") align 8, i32, %"struct.webrtc::AvailableCpuFeatures"* nocapture readonly dereferenceable(3), %"class.absl::string_view"* nocapture readnone byval(%"class.absl::string_view") align 8) unnamed_addr #0 align 2 {
  %10 = alloca %"class.std::__1::vector", align 8
  %11 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 0
  store i32 %1, i32* %11, align 8
  %12 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 1
  store i32 %2, i32* %12, align 4
  %13 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2, i32 0, i32 1
  %15 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::vector"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #9, !alias.scope !2
  %17 = icmp eq i64 %4, 0
  br i1 %17, label %117, label %18

18:                                               ; preds = %9
  %19 = icmp ugt i64 %4, 4611686018427387903
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %21) #10
  unreachable

22:                                               ; preds = %18
  %23 = shl i64 %4, 2
  %24 = tail call i8* @_Znwm(i64 %23) #11
  %25 = bitcast i8* %24 to float*
  %26 = bitcast %"class.std::__1::vector"* %13 to i8**
  store i8* %24, i8** %26, align 8, !alias.scope !2
  %27 = getelementptr inbounds float, float* %25, i64 %4
  store float* %27, float** %15, align 8, !alias.scope !2
  %28 = bitcast float** %14 to i64*
  %29 = ptrtoint i8* %24 to i64
  %30 = add nsw i64 %4, -1
  %31 = getelementptr float, float* %25, i64 %30
  %32 = ptrtoint float* %31 to i64
  %33 = sub i64 4, %29
  %34 = add i64 %33, %32
  %35 = and i64 %34, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %24, i8 0, i64 %35, i1 false) #9, !noalias !2
  %36 = ptrtoint float* %27 to i64
  store i64 %36, i64* %28, align 8, !alias.scope !2
  %37 = getelementptr inbounds i8, i8* %3, i64 %4
  %38 = icmp ult i64 %4, 8
  br i1 %38, label %105, label %39

39:                                               ; preds = %22
  %40 = and i64 %4, -8
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = getelementptr float, float* %25, i64 %40
  %43 = add i64 %40, -8
  %44 = lshr exact i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %43, 0
  br i1 %47, label %85, label %48

48:                                               ; preds = %39
  %49 = sub nuw nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %82, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %83, %50 ]
  %53 = getelementptr i8, i8* %3, i64 %51
  %54 = getelementptr float, float* %25, i64 %51
  %55 = bitcast i8* %53 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1, !noalias !2
  %57 = getelementptr i8, i8* %53, i64 4
  %58 = bitcast i8* %57 to <4 x i8>*
  %59 = load <4 x i8>, <4 x i8>* %58, align 1, !noalias !2
  %60 = sitofp <4 x i8> %56 to <4 x float>
  %61 = sitofp <4 x i8> %59 to <4 x float>
  %62 = fmul <4 x float> %60, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %63 = fmul <4 x float> %61, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %64 = bitcast float* %54 to <4 x float>*
  store <4 x float> %62, <4 x float>* %64, align 4, !noalias !2
  %65 = getelementptr float, float* %54, i64 4
  %66 = bitcast float* %65 to <4 x float>*
  store <4 x float> %63, <4 x float>* %66, align 4, !noalias !2
  %67 = or i64 %51, 8
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = getelementptr float, float* %25, i64 %67
  %70 = bitcast i8* %68 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1, !noalias !2
  %72 = getelementptr i8, i8* %68, i64 4
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !noalias !2
  %75 = sitofp <4 x i8> %71 to <4 x float>
  %76 = sitofp <4 x i8> %74 to <4 x float>
  %77 = fmul <4 x float> %75, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %78 = fmul <4 x float> %76, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %79 = bitcast float* %69 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 4, !noalias !2
  %80 = getelementptr float, float* %69, i64 4
  %81 = bitcast float* %80 to <4 x float>*
  store <4 x float> %78, <4 x float>* %81, align 4, !noalias !2
  %82 = add i64 %51, 16
  %83 = add i64 %52, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %50, !llvm.loop !5

85:                                               ; preds = %50, %39
  %86 = phi i64 [ 0, %39 ], [ %82, %50 ]
  %87 = icmp eq i64 %46, 0
  br i1 %87, label %103, label %88

88:                                               ; preds = %85
  %89 = getelementptr i8, i8* %3, i64 %86
  %90 = getelementptr float, float* %25, i64 %86
  %91 = bitcast i8* %89 to <4 x i8>*
  %92 = load <4 x i8>, <4 x i8>* %91, align 1, !noalias !2
  %93 = getelementptr i8, i8* %89, i64 4
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 1, !noalias !2
  %96 = sitofp <4 x i8> %92 to <4 x float>
  %97 = sitofp <4 x i8> %95 to <4 x float>
  %98 = fmul <4 x float> %96, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %99 = fmul <4 x float> %97, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %100 = bitcast float* %90 to <4 x float>*
  store <4 x float> %98, <4 x float>* %100, align 4, !noalias !2
  %101 = getelementptr float, float* %90, i64 4
  %102 = bitcast float* %101 to <4 x float>*
  store <4 x float> %99, <4 x float>* %102, align 4, !noalias !2
  br label %103

103:                                              ; preds = %85, %88
  %104 = icmp eq i64 %40, %4
  br i1 %104, label %117, label %105

105:                                              ; preds = %103, %22
  %106 = phi i8* [ %3, %22 ], [ %41, %103 ]
  %107 = phi float* [ %25, %22 ], [ %42, %103 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i8* [ %114, %108 ], [ %106, %105 ]
  %110 = phi float* [ %115, %108 ], [ %107, %105 ]
  %111 = load i8, i8* %109, align 1, !noalias !2
  %112 = sitofp i8 %111 to float
  %113 = fmul float %112, 3.906250e-03
  store float %113, float* %110, align 4, !noalias !2
  %114 = getelementptr inbounds i8, i8* %109, i64 1
  %115 = getelementptr inbounds float, float* %110, i64 1
  %116 = icmp eq i8* %114, %37
  br i1 %116, label %117, label %108, !llvm.loop !7

117:                                              ; preds = %108, %103, %9
  %118 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3
  %119 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %5, i64 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = ptrtoint i8* %120 to i64
  %122 = getelementptr inbounds %"class.rtc::ArrayView", %"class.rtc::ArrayView"* %5, i64 0, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i32 %2, 1
  br i1 %124, label %125, label %241

125:                                              ; preds = %117
  %126 = icmp eq i64 %123, 0
  %127 = select i1 %126, i8* null, i8* %120
  %128 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %129 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %130 = bitcast %"class.std::__1::vector"* %118 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %130, i8 0, i64 24, i1 false) #9, !alias.scope !9
  br i1 %126, label %343, label %131

131:                                              ; preds = %125
  %132 = icmp ugt i64 %123, 4611686018427387903
  br i1 %132, label %133, label %135

133:                                              ; preds = %131
  %134 = bitcast %"class.std::__1::vector"* %118 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %134) #10
  unreachable

135:                                              ; preds = %131
  %136 = shl i64 %123, 2
  %137 = tail call i8* @_Znwm(i64 %136) #11
  %138 = bitcast i8* %137 to float*
  %139 = bitcast %"class.std::__1::vector"* %118 to i8**
  store i8* %137, i8** %139, align 8, !alias.scope !9
  %140 = getelementptr inbounds float, float* %138, i64 %123
  store float* %140, float** %129, align 8, !alias.scope !9
  %141 = bitcast float** %128 to i64*
  %142 = ptrtoint i8* %137 to i64
  %143 = add nsw i64 %123, -1
  %144 = getelementptr float, float* %138, i64 %143
  %145 = ptrtoint float* %144 to i64
  %146 = sub i64 4, %142
  %147 = add i64 %146, %145
  %148 = and i64 %147, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %137, i8 0, i64 %148, i1 false) #9, !noalias !9
  %149 = ptrtoint float* %140 to i64
  store i64 %149, i64* %141, align 8, !alias.scope !9
  %150 = getelementptr inbounds i8, i8* %127, i64 %123
  %151 = sub i64 %123, %121
  %152 = getelementptr i8, i8* %127, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 8 to i8*)
  br i1 %154, label %229, label %155

155:                                              ; preds = %135
  %156 = ptrtoint i8* %150 to i64
  %157 = sub i64 %156, %121
  %158 = shl i64 %157, 2
  %159 = getelementptr i8, i8* %137, i64 %158
  %160 = icmp ult i8* %137, %150
  %161 = icmp ult i8* %120, %159
  %162 = and i1 %160, %161
  br i1 %162, label %229, label %163

163:                                              ; preds = %155
  %164 = and i64 %153, -8
  %165 = getelementptr i8, i8* %120, i64 %164
  %166 = getelementptr float, float* %138, i64 %164
  %167 = add i64 %164, -8
  %168 = lshr exact i64 %167, 3
  %169 = add nuw nsw i64 %168, 1
  %170 = and i64 %169, 1
  %171 = icmp eq i64 %167, 0
  br i1 %171, label %209, label %172

172:                                              ; preds = %163
  %173 = sub nuw nsw i64 %169, %170
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %206, %174 ]
  %176 = phi i64 [ %173, %172 ], [ %207, %174 ]
  %177 = getelementptr i8, i8* %120, i64 %175
  %178 = getelementptr float, float* %138, i64 %175
  %179 = bitcast i8* %177 to <4 x i8>*
  %180 = load <4 x i8>, <4 x i8>* %179, align 1, !alias.scope !14, !noalias !9
  %181 = getelementptr i8, i8* %177, i64 4
  %182 = bitcast i8* %181 to <4 x i8>*
  %183 = load <4 x i8>, <4 x i8>* %182, align 1, !alias.scope !14, !noalias !9
  %184 = sitofp <4 x i8> %180 to <4 x float>
  %185 = sitofp <4 x i8> %183 to <4 x float>
  %186 = fmul <4 x float> %184, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %187 = fmul <4 x float> %185, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %188 = bitcast float* %178 to <4 x float>*
  store <4 x float> %186, <4 x float>* %188, align 4, !alias.scope !17, !noalias !19
  %189 = getelementptr float, float* %178, i64 4
  %190 = bitcast float* %189 to <4 x float>*
  store <4 x float> %187, <4 x float>* %190, align 4, !alias.scope !17, !noalias !19
  %191 = or i64 %175, 8
  %192 = getelementptr i8, i8* %120, i64 %191
  %193 = getelementptr float, float* %138, i64 %191
  %194 = bitcast i8* %192 to <4 x i8>*
  %195 = load <4 x i8>, <4 x i8>* %194, align 1, !alias.scope !14, !noalias !9
  %196 = getelementptr i8, i8* %192, i64 4
  %197 = bitcast i8* %196 to <4 x i8>*
  %198 = load <4 x i8>, <4 x i8>* %197, align 1, !alias.scope !14, !noalias !9
  %199 = sitofp <4 x i8> %195 to <4 x float>
  %200 = sitofp <4 x i8> %198 to <4 x float>
  %201 = fmul <4 x float> %199, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %202 = fmul <4 x float> %200, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %203 = bitcast float* %193 to <4 x float>*
  store <4 x float> %201, <4 x float>* %203, align 4, !alias.scope !17, !noalias !19
  %204 = getelementptr float, float* %193, i64 4
  %205 = bitcast float* %204 to <4 x float>*
  store <4 x float> %202, <4 x float>* %205, align 4, !alias.scope !17, !noalias !19
  %206 = add i64 %175, 16
  %207 = add i64 %176, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %174, !llvm.loop !20

209:                                              ; preds = %174, %163
  %210 = phi i64 [ 0, %163 ], [ %206, %174 ]
  %211 = icmp eq i64 %170, 0
  br i1 %211, label %227, label %212

212:                                              ; preds = %209
  %213 = getelementptr i8, i8* %120, i64 %210
  %214 = getelementptr float, float* %138, i64 %210
  %215 = bitcast i8* %213 to <4 x i8>*
  %216 = load <4 x i8>, <4 x i8>* %215, align 1, !alias.scope !14, !noalias !9
  %217 = getelementptr i8, i8* %213, i64 4
  %218 = bitcast i8* %217 to <4 x i8>*
  %219 = load <4 x i8>, <4 x i8>* %218, align 1, !alias.scope !14, !noalias !9
  %220 = sitofp <4 x i8> %216 to <4 x float>
  %221 = sitofp <4 x i8> %219 to <4 x float>
  %222 = fmul <4 x float> %220, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %223 = fmul <4 x float> %221, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %224 = bitcast float* %214 to <4 x float>*
  store <4 x float> %222, <4 x float>* %224, align 4, !alias.scope !17, !noalias !19
  %225 = getelementptr float, float* %214, i64 4
  %226 = bitcast float* %225 to <4 x float>*
  store <4 x float> %223, <4 x float>* %226, align 4, !alias.scope !17, !noalias !19
  br label %227

227:                                              ; preds = %209, %212
  %228 = icmp eq i64 %164, %153
  br i1 %228, label %343, label %229

229:                                              ; preds = %227, %155, %135
  %230 = phi i8* [ %120, %155 ], [ %120, %135 ], [ %165, %227 ]
  %231 = phi float* [ %138, %155 ], [ %138, %135 ], [ %166, %227 ]
  br label %232

232:                                              ; preds = %229, %232
  %233 = phi i8* [ %238, %232 ], [ %230, %229 ]
  %234 = phi float* [ %239, %232 ], [ %231, %229 ]
  %235 = load i8, i8* %233, align 1, !noalias !9
  %236 = sitofp i8 %235 to float
  %237 = fmul float %236, 3.906250e-03
  store float %237, float* %234, align 4, !noalias !9
  %238 = getelementptr inbounds i8, i8* %233, i64 1
  %239 = getelementptr inbounds float, float* %234, i64 1
  %240 = icmp eq i8* %238, %150
  br i1 %240, label %343, label %232, !llvm.loop !21

241:                                              ; preds = %117
  %242 = trunc i64 %123 to i32
  %243 = srem i32 %242, %2
  %244 = sdiv i32 %242, %2
  %245 = icmp eq i32 %243, 0
  br i1 %245, label %247, label %246

246:                                              ; preds = %241
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0), i32 466, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_S6_NS4_ILS5_9EPKcEES6_EEEvS8_iS8_DpRKT_E1t, i64 0, i64 0), i32 %243, i32 0, i32 %242, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i32 %2) #10
  unreachable

247:                                              ; preds = %241
  %248 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %248) #9, !noalias !22
  %249 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %250 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %251 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %248, i8 0, i64 24, i1 false) #9, !noalias !22
  %252 = icmp eq i64 %123, 0
  br i1 %252, label %272, label %253

253:                                              ; preds = %247
  %254 = icmp ugt i64 %123, 4611686018427387903
  br i1 %254, label %255, label %257

255:                                              ; preds = %253
  %256 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %256) #10
  unreachable

257:                                              ; preds = %253
  %258 = shl i64 %123, 2
  %259 = tail call i8* @_Znwm(i64 %258) #11
  %260 = bitcast i8* %259 to float*
  %261 = bitcast %"class.std::__1::vector"* %10 to i8**
  store i8* %259, i8** %261, align 8, !noalias !22
  %262 = getelementptr inbounds float, float* %260, i64 %123
  store float* %262, float** %251, align 8, !noalias !22
  %263 = bitcast float** %250 to i64*
  %264 = ptrtoint i8* %259 to i64
  %265 = add nsw i64 %123, -1
  %266 = getelementptr float, float* %260, i64 %265
  %267 = ptrtoint float* %266 to i64
  %268 = sub i64 4, %264
  %269 = add i64 %268, %267
  %270 = and i64 %269, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %259, i8 0, i64 %270, i1 false) #9, !noalias !22
  %271 = ptrtoint float* %262 to i64
  store i64 %271, i64* %263, align 8, !noalias !22
  br label %272

272:                                              ; preds = %257, %247
  %273 = phi i64 [ 0, %247 ], [ %271, %257 ]
  %274 = phi i64 [ 0, %247 ], [ %264, %257 ]
  %275 = icmp sgt i32 %2, 0
  %276 = insertelement <2 x i64> undef, i64 %273, i32 0
  %277 = shufflevector <2 x i64> %276, <2 x i64> undef, <2 x i32> zeroinitializer
  br i1 %275, label %278, label %297

278:                                              ; preds = %272
  %279 = icmp sgt i32 %244, 0
  %280 = sext i32 %2 to i64
  %281 = sext i32 %244 to i64
  %282 = zext i32 %2 to i64
  %283 = zext i32 %244 to i64
  %284 = and i64 %283, 1
  %285 = icmp eq i32 %244, 1
  %286 = sub nsw i64 %283, %284
  %287 = icmp eq i64 %284, 0
  br label %288

288:                                              ; preds = %315, %278
  %289 = phi i64 [ 0, %278 ], [ %316, %315 ]
  br i1 %279, label %290, label %315

290:                                              ; preds = %288
  %291 = mul nsw i64 %289, %281
  br i1 %285, label %303, label %318

292:                                              ; preds = %315
  %293 = bitcast %"class.std::__1::vector"* %10 to i64*
  %294 = load i64, i64* %293, align 8, !noalias !22
  %295 = bitcast float** %250 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !noalias !22
  br label %297

297:                                              ; preds = %292, %272
  %298 = phi i64 [ %294, %292 ], [ %274, %272 ]
  %299 = phi <2 x i64> [ %296, %292 ], [ %277, %272 ]
  %300 = bitcast %"class.std::__1::vector"* %118 to i64*
  store i64 %298, i64* %300, align 8, !alias.scope !22
  %301 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %302 = bitcast float** %301 to <2 x i64>*
  store <2 x i64> %299, <2 x i64>* %302, align 8, !alias.scope !22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %248) #9, !noalias !22
  br label %343

303:                                              ; preds = %318, %290
  %304 = phi i64 [ 0, %290 ], [ %340, %318 ]
  br i1 %287, label %315, label %305

305:                                              ; preds = %303
  %306 = mul nsw i64 %304, %280
  %307 = add nsw i64 %306, %289
  %308 = getelementptr inbounds i8, i8* %120, i64 %307
  %309 = load i8, i8* %308, align 1, !noalias !22
  %310 = sitofp i8 %309 to float
  %311 = fmul float %310, 3.906250e-03
  %312 = add nsw i64 %304, %291
  %313 = load float*, float** %249, align 8, !noalias !22
  %314 = getelementptr inbounds float, float* %313, i64 %312
  store float %311, float* %314, align 4
  br label %315

315:                                              ; preds = %305, %303, %288
  %316 = add nuw nsw i64 %289, 1
  %317 = icmp eq i64 %316, %282
  br i1 %317, label %292, label %288

318:                                              ; preds = %290, %318
  %319 = phi i64 [ %340, %318 ], [ 0, %290 ]
  %320 = phi i64 [ %341, %318 ], [ %286, %290 ]
  %321 = mul nsw i64 %319, %280
  %322 = add nsw i64 %321, %289
  %323 = getelementptr inbounds i8, i8* %120, i64 %322
  %324 = load i8, i8* %323, align 1, !noalias !22
  %325 = sitofp i8 %324 to float
  %326 = fmul float %325, 3.906250e-03
  %327 = add nsw i64 %319, %291
  %328 = load float*, float** %249, align 8, !noalias !22
  %329 = getelementptr inbounds float, float* %328, i64 %327
  store float %326, float* %329, align 4
  %330 = or i64 %319, 1
  %331 = mul nsw i64 %330, %280
  %332 = add nsw i64 %331, %289
  %333 = getelementptr inbounds i8, i8* %120, i64 %332
  %334 = load i8, i8* %333, align 1, !noalias !22
  %335 = sitofp i8 %334 to float
  %336 = fmul float %335, 3.906250e-03
  %337 = add nsw i64 %330, %291
  %338 = load float*, float** %249, align 8, !noalias !22
  %339 = getelementptr inbounds float, float* %338, i64 %337
  store float %336, float* %339, align 4
  %340 = add nuw nsw i64 %319, 2
  %341 = add i64 %320, -2
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %303, label %318

343:                                              ; preds = %232, %227, %125, %297
  %344 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 4
  %345 = bitcast %"struct.webrtc::AvailableCpuFeatures"* %7 to i24*
  %346 = load i24, i24* %345, align 1
  %347 = bitcast %"class.webrtc::rnn_vad::VectorMath"* %344 to i24*
  store i24 %346, i24* %347, align 1
  %348 = icmp eq i32 %6, 0
  %349 = select i1 %348, i8* bitcast (float (float)* @_ZN7rnnoise18TansigApproximatedEf to i8*), i8* bitcast (float (float)* @_ZN7rnnoise19SigmoidApproximatedEf to i8*)
  %350 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 5, i32 0, i32 0
  store i8* %349, i8** %350, align 8
  %351 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 5, i32 1
  store float (i8*, float)* @_ZN3rtc12FunctionViewIFffEE10CallFunPtrIRS1_EEfNS2_9VoidUnionEf, float (i8*, float)** %351, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19FullyConnectedLayerD2Ev(%"class.webrtc::rnn_vad::FullyConnectedLayer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  %4 = icmp eq float* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint float* %3 to i64
  %7 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast float** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast float* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint float* %12 to i64
  %16 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2, i32 0, i32 1
  %17 = bitcast float** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast float* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #11
  br label %19

19:                                               ; preds = %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad19FullyConnectedLayer13ComputeOutputEN3rtc9ArrayViewIKfLln4711EEE(%"class.webrtc::rnn_vad::FullyConnectedLayer"*, float*, i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 3, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = ptrtoint float* %5 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 0
  %13 = select i1 %12, float* null, float* %5
  %14 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %59

17:                                               ; preds = %3
  %18 = ptrtoint float* %1 to i64
  %19 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 4
  %21 = icmp eq i64 %2, 0
  %22 = select i1 %21, float* null, float* %1
  %23 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 0
  %24 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 4, i32 0, i32 1
  %25 = getelementptr inbounds %"class.webrtc::rnn_vad::VectorMath", %"class.webrtc::rnn_vad::VectorMath"* %20, i64 0, i32 0, i32 0
  %26 = trunc i64 %2 to i32
  %27 = and i32 %26, -4
  %28 = icmp sgt i32 %27, 0
  %29 = sext i32 %27 to i64
  %30 = icmp slt i32 %27, %26
  %31 = shl i64 %2, 32
  %32 = ashr exact i64 %31, 32
  %33 = getelementptr inbounds float, float* %22, i64 %2
  %34 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 5, i32 1
  %35 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 5, i32 0, i32 0
  %36 = add nsw i64 %29, -1
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = shl i64 %2, 32
  %40 = ashr exact i64 %39, 32
  %41 = xor i64 %29, -1
  %42 = add nsw i64 %40, %41
  %43 = add i64 %2, -1
  %44 = getelementptr float, float* %22, i64 %43
  %45 = ptrtoint float* %44 to i64
  %46 = sub i64 %45, %18
  %47 = lshr i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %38, 3
  %50 = icmp ult i64 %36, 12
  %51 = sub nsw i64 %38, %49
  %52 = icmp eq i64 %49, 0
  %53 = and i64 %40, 3
  %54 = icmp eq i64 %53, 0
  %55 = icmp ult i64 %42, 3
  %56 = and i64 %48, 3
  %57 = icmp eq i64 %56, 0
  %58 = icmp ult i64 %46, 12
  br label %60

59:                                               ; preds = %259, %3
  ret void

60:                                               ; preds = %17, %259
  %61 = phi i64 [ 0, %17 ], [ %266, %259 ]
  %62 = load float*, float** %19, align 8
  %63 = getelementptr inbounds float, float* %62, i64 %61
  %64 = load float, float* %63, align 4
  %65 = load i32, i32* %23, align 8
  %66 = trunc i64 %61 to i32
  %67 = mul nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  %69 = sext i32 %65 to i64
  %70 = icmp ugt i64 %11, %68
  br i1 %70, label %71, label %78

71:                                               ; preds = %60
  %72 = getelementptr inbounds float, float* %13, i64 %68
  %73 = sub nsw i64 %11, %68
  %74 = icmp ult i64 %73, %69
  %75 = select i1 %74, i64 %73, i64 %69
  %76 = icmp eq i64 %75, 0
  %77 = select i1 %76, float* null, float* %72
  br label %78

78:                                               ; preds = %60, %71
  %79 = phi i64 [ %75, %71 ], [ 0, %60 ]
  %80 = phi float* [ %77, %71 ], [ null, %60 ]
  %81 = load i8, i8* %24, align 1, !range !23
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = icmp eq i64 %79, 0
  %85 = select i1 %84, float* null, float* %80
  %86 = tail call float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* %20, float* %22, i64 %2, float* %85, i64 %79) #9
  br label %259

87:                                               ; preds = %78
  %88 = load i8, i8* %25, align 1, !range !23
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %210, label %90

90:                                               ; preds = %87
  br i1 %28, label %91, label %111

91:                                               ; preds = %90
  br i1 %50, label %92, label %136

92:                                               ; preds = %136, %91
  %93 = phi <4 x float> [ undef, %91 ], [ %174, %136 ]
  %94 = phi i64 [ 0, %91 ], [ %175, %136 ]
  %95 = phi <4 x float> [ zeroinitializer, %91 ], [ %174, %136 ]
  br i1 %52, label %111, label %96

96:                                               ; preds = %92, %96
  %97 = phi i64 [ %108, %96 ], [ %94, %92 ]
  %98 = phi <4 x float> [ %107, %96 ], [ %95, %92 ]
  %99 = phi i64 [ %109, %96 ], [ %49, %92 ]
  %100 = getelementptr inbounds float, float* %22, i64 %97
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = getelementptr inbounds float, float* %80, i64 %97
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 1
  %106 = fmul <4 x float> %102, %105
  %107 = fadd <4 x float> %98, %106
  %108 = add nuw nsw i64 %97, 4
  %109 = add i64 %99, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %96, !llvm.loop !24

111:                                              ; preds = %92, %96, %90
  %112 = phi <4 x float> [ zeroinitializer, %90 ], [ %93, %92 ], [ %107, %96 ]
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %114 = fadd <4 x float> %112, %113
  %115 = shufflevector <4 x float> %114, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %116 = fadd <4 x float> %114, %115
  %117 = extractelement <4 x float> %116, i32 0
  br i1 %30, label %118, label %259

118:                                              ; preds = %111
  br i1 %54, label %132, label %119

119:                                              ; preds = %118, %119
  %120 = phi i64 [ %129, %119 ], [ %29, %118 ]
  %121 = phi float [ %128, %119 ], [ %117, %118 ]
  %122 = phi i64 [ %130, %119 ], [ %53, %118 ]
  %123 = getelementptr inbounds float, float* %22, i64 %120
  %124 = load float, float* %123, align 4
  %125 = getelementptr inbounds float, float* %80, i64 %120
  %126 = load float, float* %125, align 4
  %127 = fmul float %124, %126
  %128 = fadd float %121, %127
  %129 = add nsw i64 %120, 1
  %130 = add i64 %122, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %119, !llvm.loop !26

132:                                              ; preds = %119, %118
  %133 = phi float [ undef, %118 ], [ %128, %119 ]
  %134 = phi i64 [ %29, %118 ], [ %129, %119 ]
  %135 = phi float [ %117, %118 ], [ %128, %119 ]
  br i1 %55, label %259, label %178

136:                                              ; preds = %91, %136
  %137 = phi i64 [ %175, %136 ], [ 0, %91 ]
  %138 = phi <4 x float> [ %174, %136 ], [ zeroinitializer, %91 ]
  %139 = phi i64 [ %176, %136 ], [ %51, %91 ]
  %140 = getelementptr inbounds float, float* %22, i64 %137
  %141 = bitcast float* %140 to <4 x float>*
  %142 = load <4 x float>, <4 x float>* %141, align 1
  %143 = getelementptr inbounds float, float* %80, i64 %137
  %144 = bitcast float* %143 to <4 x float>*
  %145 = load <4 x float>, <4 x float>* %144, align 1
  %146 = fmul <4 x float> %142, %145
  %147 = fadd <4 x float> %138, %146
  %148 = or i64 %137, 4
  %149 = getelementptr inbounds float, float* %22, i64 %148
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 1
  %152 = getelementptr inbounds float, float* %80, i64 %148
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 1
  %155 = fmul <4 x float> %151, %154
  %156 = fadd <4 x float> %147, %155
  %157 = or i64 %137, 8
  %158 = getelementptr inbounds float, float* %22, i64 %157
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 1
  %161 = getelementptr inbounds float, float* %80, i64 %157
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1
  %164 = fmul <4 x float> %160, %163
  %165 = fadd <4 x float> %156, %164
  %166 = or i64 %137, 12
  %167 = getelementptr inbounds float, float* %22, i64 %166
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 1
  %170 = getelementptr inbounds float, float* %80, i64 %166
  %171 = bitcast float* %170 to <4 x float>*
  %172 = load <4 x float>, <4 x float>* %171, align 1
  %173 = fmul <4 x float> %169, %172
  %174 = fadd <4 x float> %165, %173
  %175 = add nuw nsw i64 %137, 16
  %176 = add i64 %139, -4
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %92, label %136

178:                                              ; preds = %132, %178
  %179 = phi i64 [ %208, %178 ], [ %134, %132 ]
  %180 = phi float [ %207, %178 ], [ %135, %132 ]
  %181 = getelementptr inbounds float, float* %22, i64 %179
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds float, float* %80, i64 %179
  %184 = load float, float* %183, align 4
  %185 = fmul float %182, %184
  %186 = fadd float %180, %185
  %187 = add nsw i64 %179, 1
  %188 = getelementptr inbounds float, float* %22, i64 %187
  %189 = load float, float* %188, align 4
  %190 = getelementptr inbounds float, float* %80, i64 %187
  %191 = load float, float* %190, align 4
  %192 = fmul float %189, %191
  %193 = fadd float %186, %192
  %194 = add nsw i64 %179, 2
  %195 = getelementptr inbounds float, float* %22, i64 %194
  %196 = load float, float* %195, align 4
  %197 = getelementptr inbounds float, float* %80, i64 %194
  %198 = load float, float* %197, align 4
  %199 = fmul float %196, %198
  %200 = fadd float %193, %199
  %201 = add nsw i64 %179, 3
  %202 = getelementptr inbounds float, float* %22, i64 %201
  %203 = load float, float* %202, align 4
  %204 = getelementptr inbounds float, float* %80, i64 %201
  %205 = load float, float* %204, align 4
  %206 = fmul float %203, %205
  %207 = fadd float %200, %206
  %208 = add nsw i64 %179, 4
  %209 = icmp eq i64 %208, %32
  br i1 %209, label %259, label %178

210:                                              ; preds = %87
  br i1 %21, label %259, label %211

211:                                              ; preds = %210
  br i1 %57, label %225, label %212

212:                                              ; preds = %211, %212
  %213 = phi float [ %220, %212 ], [ 0.000000e+00, %211 ]
  %214 = phi float* [ %222, %212 ], [ %80, %211 ]
  %215 = phi float* [ %221, %212 ], [ %1, %211 ]
  %216 = phi i64 [ %223, %212 ], [ %56, %211 ]
  %217 = load float, float* %215, align 4
  %218 = load float, float* %214, align 4
  %219 = fmul float %217, %218
  %220 = fadd float %213, %219
  %221 = getelementptr inbounds float, float* %215, i64 1
  %222 = getelementptr inbounds float, float* %214, i64 1
  %223 = add i64 %216, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %212, !llvm.loop !27

225:                                              ; preds = %212, %211
  %226 = phi float [ undef, %211 ], [ %220, %212 ]
  %227 = phi float [ 0.000000e+00, %211 ], [ %220, %212 ]
  %228 = phi float* [ %80, %211 ], [ %222, %212 ]
  %229 = phi float* [ %1, %211 ], [ %221, %212 ]
  br i1 %58, label %259, label %230

230:                                              ; preds = %225, %230
  %231 = phi float [ %255, %230 ], [ %227, %225 ]
  %232 = phi float* [ %257, %230 ], [ %228, %225 ]
  %233 = phi float* [ %256, %230 ], [ %229, %225 ]
  %234 = load float, float* %233, align 4
  %235 = load float, float* %232, align 4
  %236 = fmul float %234, %235
  %237 = fadd float %231, %236
  %238 = getelementptr inbounds float, float* %233, i64 1
  %239 = getelementptr inbounds float, float* %232, i64 1
  %240 = load float, float* %238, align 4
  %241 = load float, float* %239, align 4
  %242 = fmul float %240, %241
  %243 = fadd float %237, %242
  %244 = getelementptr inbounds float, float* %233, i64 2
  %245 = getelementptr inbounds float, float* %232, i64 2
  %246 = load float, float* %244, align 4
  %247 = load float, float* %245, align 4
  %248 = fmul float %246, %247
  %249 = fadd float %243, %248
  %250 = getelementptr inbounds float, float* %233, i64 3
  %251 = getelementptr inbounds float, float* %232, i64 3
  %252 = load float, float* %250, align 4
  %253 = load float, float* %251, align 4
  %254 = fmul float %252, %253
  %255 = fadd float %249, %254
  %256 = getelementptr inbounds float, float* %233, i64 4
  %257 = getelementptr inbounds float, float* %232, i64 4
  %258 = icmp eq float* %256, %33
  br i1 %258, label %259, label %230

259:                                              ; preds = %132, %178, %225, %230, %83, %111, %210
  %260 = phi float [ %86, %83 ], [ 0.000000e+00, %210 ], [ %117, %111 ], [ %226, %225 ], [ %255, %230 ], [ %133, %132 ], [ %207, %178 ]
  %261 = fadd float %64, %260
  %262 = load float (i8*, float)*, float (i8*, float)** %34, align 8
  %263 = load i8*, i8** %35, align 8
  %264 = tail call float %262(i8* %263, float %261) #9
  %265 = getelementptr inbounds %"class.webrtc::rnn_vad::FullyConnectedLayer", %"class.webrtc::rnn_vad::FullyConnectedLayer"* %0, i64 0, i32 6, i32 0, i64 %61
  store float %264, float* %265, align 4
  %266 = add nuw nsw i64 %61, 1
  %267 = load i32, i32* %14, align 4
  %268 = sext i32 %267 to i64
  %269 = icmp slt i64 %266, %268
  br i1 %269, label %60, label %59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden float @_ZN7rnnoise18TansigApproximatedEf(float) #5 comdat {
  %2 = fcmp olt float %0, 8.000000e+00
  br i1 %2, label %3, label %28

3:                                                ; preds = %1
  %4 = fcmp ogt float %0, -8.000000e+00
  br i1 %4, label %5, label %28

5:                                                ; preds = %3
  %6 = fcmp olt float %0, 0.000000e+00
  %7 = fsub float -0.000000e+00, %0
  %8 = select i1 %6, float -1.000000e+00, float 1.000000e+00
  %9 = select i1 %6, float %7, float %0
  %10 = fmul float %9, 2.500000e+01
  %11 = fadd float %10, 5.000000e-01
  %12 = tail call float @llvm.floor.f32(float %11) #9
  %13 = fptosi float %12 to i32
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [201 x float], [201 x float]* @_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable, i64 0, i64 %14
  %16 = load float, float* %15, align 4
  %17 = sitofp i32 %13 to float
  %18 = fmul float %17, 0x3FA47AE140000000
  %19 = fsub float %9, %18
  %20 = fmul float %16, %16
  %21 = fsub float 1.000000e+00, %20
  %22 = fmul float %19, %21
  %23 = fmul float %19, %16
  %24 = fsub float 1.000000e+00, %23
  %25 = fmul float %24, %22
  %26 = fadd float %16, %25
  %27 = fmul float %8, %26
  br label %28

28:                                               ; preds = %3, %1, %5
  %29 = phi float [ %27, %5 ], [ 1.000000e+00, %1 ], [ -1.000000e+00, %3 ]
  ret float %29
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden float @_ZN7rnnoise19SigmoidApproximatedEf(float) #5 comdat {
  %2 = fmul float %0, 5.000000e-01
  %3 = fcmp olt float %2, 8.000000e+00
  br i1 %3, label %4, label %31

4:                                                ; preds = %1
  %5 = fcmp ogt float %2, -8.000000e+00
  br i1 %5, label %6, label %31

6:                                                ; preds = %4
  %7 = fcmp olt float %2, 0.000000e+00
  %8 = fsub float -0.000000e+00, %2
  %9 = select i1 %7, float -1.000000e+00, float 1.000000e+00
  %10 = select i1 %7, float %8, float %2
  %11 = fmul float %10, 2.500000e+01
  %12 = fadd float %11, 5.000000e-01
  %13 = tail call float @llvm.floor.f32(float %12) #9
  %14 = fptosi float %13 to i32
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [201 x float], [201 x float]* @_ZZN7rnnoise18TansigApproximatedEfE12kTansigTable, i64 0, i64 %15
  %17 = load float, float* %16, align 4
  %18 = sitofp i32 %14 to float
  %19 = fmul float %18, 0x3FA47AE140000000
  %20 = fsub float %10, %19
  %21 = fmul float %17, %17
  %22 = fsub float 1.000000e+00, %21
  %23 = fmul float %20, %22
  %24 = fmul float %20, %17
  %25 = fsub float 1.000000e+00, %24
  %26 = fmul float %25, %23
  %27 = fadd float %17, %26
  %28 = fmul float %9, %27
  %29 = fmul float %28, 5.000000e-01
  %30 = fadd float %29, 5.000000e-01
  br label %31

31:                                               ; preds = %1, %4, %6
  %32 = phi float [ %30, %6 ], [ 1.000000e+00, %1 ], [ 0.000000e+00, %4 ]
  ret float %32
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZN3rtc12FunctionViewIFffEE10CallFunPtrIRS1_EEfNS2_9VoidUnionEf(i8*, float) #0 comdat align 2 {
  %3 = bitcast i8* %0 to void ()*
  %4 = bitcast void ()* %3 to float (float)*
  %5 = tail call float %4(float %1) #9
  ret float %5
}

declare float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"*, float*, i64, float*, i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_115GetScaledParamsEN3rtc9ArrayViewIKaLln4711EEE: argument 0"}
!4 = distinct !{!4, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_115GetScaledParamsEN3rtc9ArrayViewIKaLln4711EEE"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8, !6}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_115GetScaledParamsEN3rtc9ArrayViewIKaLln4711EEE: argument 0"}
!11 = distinct !{!11, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_115GetScaledParamsEN3rtc9ArrayViewIKaLln4711EEE"}
!12 = distinct !{!12, !13, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_117PreprocessWeightsEN3rtc9ArrayViewIKaLln4711EEEi: argument 0"}
!13 = distinct !{!13, !"_ZN6webrtc7rnn_vad12_GLOBAL__N_117PreprocessWeightsEN3rtc9ArrayViewIKaLln4711EEEi"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = !{!10, !12, !15}
!20 = distinct !{!20, !6}
!21 = distinct !{!21, !6}
!22 = !{!12}
!23 = !{i8 0, i8 2}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.unroll.disable"}
!26 = distinct !{!26, !25}
!27 = distinct !{!27, !25}
