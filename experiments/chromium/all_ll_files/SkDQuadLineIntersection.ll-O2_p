; ModuleID = '../../third_party/skia/src/pathops/SkDQuadLineIntersection.cpp'
source_filename = "../../third_party/skia/src/pathops/SkDQuadLineIntersection.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%class.LineQuadraticIntersections = type <{ %struct.SkDQuad*, %struct.SkDLine*, %class.SkIntersections*, i8, [7 x i8] }>
%struct.SkPoint = type { float, float }
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }

$_ZN26LineQuadraticIntersections19horizontalIntersectEdddb = comdat any

$_ZN26LineQuadraticIntersections17verticalIntersectEdddb = comdat any

$_ZN26LineQuadraticIntersections9intersectEv = comdat any

$_ZN26LineQuadraticIntersections26addNearHorizontalEndPointsEddd = comdat any

$_ZN26LineQuadraticIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE = comdat any

$_ZN26LineQuadraticIntersections15checkCoincidentEv = comdat any

$_ZN26LineQuadraticIntersections20addLineNearEndPointsEv = comdat any

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZN26LineQuadraticIntersections24addNearVerticalEndPointsEddd = comdat any

$_ZN26LineQuadraticIntersections16addNearEndPointsEv = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections10horizontalERK7SkDQuaddddb(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDLine, align 8
  %8 = alloca %class.LineQuadraticIntersections, align 8
  %9 = bitcast %struct.SkDLine* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 0
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 1
  store double %2, double* %10, align 8
  store double %4, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  %14 = bitcast %class.LineQuadraticIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #6
  %15 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 0
  %16 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 1
  %17 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 2
  %18 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 3
  %19 = bitcast %class.LineQuadraticIntersections* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  store %struct.SkDQuad* %1, %struct.SkDQuad** %15, align 8
  store %struct.SkDLine* %7, %struct.SkDLine** %16, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %17, align 8
  store i8 1, i8* %18, align 8
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 5, i8* %20, align 1
  %21 = call i32 @_ZN26LineQuadraticIntersections19horizontalIntersectEdddb(%class.LineQuadraticIntersections* nonnull %8, double %4, double %2, double %3, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN26LineQuadraticIntersections19horizontalIntersectEdddb(%class.LineQuadraticIntersections*, double, double, double, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %struct.SkDPoint, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca double, align 8
  %11 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %12 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %13 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %14 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %13, i64 0, i32 0, i64 0
  %15 = tail call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %14, double %2, double %3, double %1) #6
  %16 = fcmp olt double %15, 0.000000e+00
  br i1 %16, label %22, label %17

17:                                               ; preds = %5
  %18 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %19 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %20 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %19, i64 0, i32 0, i64 0
  %21 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %18, double 0.000000e+00, double %15, %struct.SkDPoint* dereferenceable(16) %20) #6
  br label %22

22:                                               ; preds = %17, %5
  %23 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %24 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %23, i64 0, i32 0, i64 2
  %25 = tail call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %24, double %2, double %3, double %1) #6
  %26 = fcmp olt double %25, 0.000000e+00
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %29 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %30 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %29, i64 0, i32 0, i64 2
  %31 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %28, double 1.000000e+00, double %25, %struct.SkDPoint* dereferenceable(16) %30) #6
  br label %32

32:                                               ; preds = %22, %27
  %33 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN26LineQuadraticIntersections26addNearHorizontalEndPointsEddd(%class.LineQuadraticIntersections* %0, double %2, double %3, double %1)
  br label %37

37:                                               ; preds = %32, %36
  %38 = bitcast [2 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #6
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = bitcast [2 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 16, i1 false)
  %41 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %42 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 2, i32 1
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 1, i32 1
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 0, i32 1
  %47 = load double, double* %46, align 8
  %48 = fmul double %45, 2.000000e+00
  %49 = fsub double %47, %48
  %50 = fadd double %43, %49
  %51 = fsub double %45, %47
  %52 = fsub double %47, %1
  %53 = fmul double %51, 2.000000e+00
  %54 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %50, double %53, double %52, double* nonnull %39) #6
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %69

56:                                               ; preds = %37
  %57 = bitcast double* %8 to i8*
  %58 = bitcast double* %8 to i64*
  %59 = bitcast %struct.SkDPoint* %9 to i8*
  %60 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %61 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %62 = bitcast double* %10 to i8*
  %63 = fsub double %3, %2
  %64 = bitcast %struct.SkDPoint* %6 to i8*
  %65 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %66 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %67 = zext i32 %54 to i64
  %68 = bitcast %struct.SkDPoint* %9 to i8*
  br label %70

69:                                               ; preds = %129, %37
  br i1 %4, label %132, label %134

70:                                               ; preds = %129, %56
  %71 = phi i64 [ 0, %56 ], [ %130, %129 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #6
  %72 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 %71
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %58, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %68, i8 -1, i64 16, i1 false)
  %75 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %76 = bitcast i64 %74 to double
  %77 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %75, double %76) #6
  %78 = extractvalue { double, double } %77, 0
  store double %78, double* %60, align 8
  %79 = extractvalue { double, double } %77, 1
  store double %79, double* %61, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #6
  %80 = fsub double %78, %2
  %81 = fdiv double %80, %63
  store double %81, double* %10, align 8
  %82 = call zeroext i1 @_ZN26LineQuadraticIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineQuadraticIntersections* %0, double* nonnull %8, double* nonnull %10, %struct.SkDPoint* nonnull %9, i32 1)
  br i1 %82, label %83, label %129

83:                                               ; preds = %70
  %84 = load double, double* %8, align 8
  %85 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %86 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %85, i64 0, i32 5
  %87 = load i8, i8* %86, align 2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %124, label %89

89:                                               ; preds = %83, %115
  %90 = phi %class.SkIntersections* [ %116, %115 ], [ %85, %83 ]
  %91 = phi i64 [ %117, %115 ], [ 0, %83 ]
  %92 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 0, i64 %91, i32 0
  %93 = load double, double* %92, align 8
  %94 = load double, double* %60, align 8
  %95 = fcmp une double %93, %94
  br i1 %95, label %115, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 0, i64 %91, i32 1
  %98 = load double, double* %97, align 8
  %99 = load double, double* %61, align 8
  %100 = fcmp une double %98, %99
  br i1 %100, label %115, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 2, i64 0, i64 %91
  %103 = load double, double* %102, align 8
  %104 = fcmp oeq double %103, %84
  br i1 %104, label %129, label %105

105:                                              ; preds = %101
  %106 = fadd double %84, %103
  %107 = fmul double %106, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -1, i64 16, i1 false) #6
  %108 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %109 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %108, double %107) #6
  %110 = extractvalue { double, double } %109, 0
  store double %110, double* %65, align 8
  %111 = extractvalue { double, double } %109, 1
  store double %111, double* %66, align 8
  %112 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %6, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #6
  br i1 %112, label %129, label %113

113:                                              ; preds = %105
  %114 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  br label %115

115:                                              ; preds = %113, %96, %89
  %116 = phi %class.SkIntersections* [ %114, %113 ], [ %90, %89 ], [ %90, %96 ]
  %117 = add nuw nsw i64 %91, 1
  %118 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %116, i64 0, i32 5
  %119 = load i8, i8* %118, align 2
  %120 = zext i8 %119 to i64
  %121 = icmp ult i64 %117, %120
  br i1 %121, label %89, label %122

122:                                              ; preds = %115
  %123 = load double, double* %8, align 8
  br label %124

124:                                              ; preds = %122, %83
  %125 = phi double [ %123, %122 ], [ %84, %83 ]
  %126 = phi %class.SkIntersections* [ %116, %122 ], [ %85, %83 ]
  %127 = load double, double* %10, align 8
  %128 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %126, double %125, double %127, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  br label %129

129:                                              ; preds = %105, %101, %124, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #6
  %130 = add nuw nsw i64 %71, 1
  %131 = icmp eq i64 %130, %67
  br i1 %131, label %69, label %70

132:                                              ; preds = %69
  %133 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  call void @_ZN15SkIntersections4flipEv(%class.SkIntersections* %133) #6
  br label %134

134:                                              ; preds = %132, %69
  call void @_ZN26LineQuadraticIntersections15checkCoincidentEv(%class.LineQuadraticIntersections* %0)
  %135 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %136 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %135, i64 0, i32 5
  %137 = load i8, i8* %136, align 2
  %138 = zext i8 %137 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #6
  ret i32 %138
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections8verticalERK7SkDQuaddddb(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDLine, align 8
  %8 = alloca %class.LineQuadraticIntersections, align 8
  %9 = bitcast %struct.SkDLine* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 0
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 1
  store double %4, double* %10, align 8
  store double %2, double* %11, align 8
  store double %4, double* %12, align 8
  store double %3, double* %13, align 8
  %14 = bitcast %class.LineQuadraticIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #6
  %15 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 0
  %16 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 1
  %17 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 2
  %18 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %8, i64 0, i32 3
  %19 = bitcast %class.LineQuadraticIntersections* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  store %struct.SkDQuad* %1, %struct.SkDQuad** %15, align 8
  store %struct.SkDLine* %7, %struct.SkDLine** %16, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %17, align 8
  store i8 1, i8* %18, align 8
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 5, i8* %20, align 1
  %21 = call i32 @_ZN26LineQuadraticIntersections17verticalIntersectEdddb(%class.LineQuadraticIntersections* nonnull %8, double %4, double %2, double %3, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN26LineQuadraticIntersections17verticalIntersectEdddb(%class.LineQuadraticIntersections*, double, double, double, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %struct.SkDPoint, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca double, align 8
  %11 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %12 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %13 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %14 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %13, i64 0, i32 0, i64 0
  %15 = tail call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %14, double %2, double %3, double %1) #6
  %16 = fcmp olt double %15, 0.000000e+00
  br i1 %16, label %22, label %17

17:                                               ; preds = %5
  %18 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %19 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %20 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %19, i64 0, i32 0, i64 0
  %21 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %18, double 0.000000e+00, double %15, %struct.SkDPoint* dereferenceable(16) %20) #6
  br label %22

22:                                               ; preds = %17, %5
  %23 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %24 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %23, i64 0, i32 0, i64 2
  %25 = tail call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %24, double %2, double %3, double %1) #6
  %26 = fcmp olt double %25, 0.000000e+00
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %29 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %30 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %29, i64 0, i32 0, i64 2
  %31 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %28, double 1.000000e+00, double %25, %struct.SkDPoint* dereferenceable(16) %30) #6
  br label %32

32:                                               ; preds = %22, %27
  %33 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN26LineQuadraticIntersections24addNearVerticalEndPointsEddd(%class.LineQuadraticIntersections* %0, double %2, double %3, double %1)
  br label %37

37:                                               ; preds = %32, %36
  %38 = bitcast [2 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #6
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = bitcast [2 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 16, i1 false)
  %41 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %42 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 2, i32 0
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 1, i32 0
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %41, i64 0, i32 0, i64 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = fmul double %45, 2.000000e+00
  %49 = fsub double %47, %48
  %50 = fadd double %43, %49
  %51 = fsub double %45, %47
  %52 = fsub double %47, %1
  %53 = fmul double %51, 2.000000e+00
  %54 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %50, double %53, double %52, double* nonnull %39) #6
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %69

56:                                               ; preds = %37
  %57 = bitcast double* %8 to i8*
  %58 = bitcast double* %8 to i64*
  %59 = bitcast %struct.SkDPoint* %9 to i8*
  %60 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %61 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %62 = bitcast double* %10 to i8*
  %63 = fsub double %3, %2
  %64 = bitcast %struct.SkDPoint* %6 to i8*
  %65 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %66 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %67 = zext i32 %54 to i64
  %68 = bitcast %struct.SkDPoint* %9 to i8*
  br label %70

69:                                               ; preds = %129, %37
  br i1 %4, label %132, label %134

70:                                               ; preds = %129, %56
  %71 = phi i64 [ 0, %56 ], [ %130, %129 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #6
  %72 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 %71
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %58, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %68, i8 -1, i64 16, i1 false)
  %75 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %76 = bitcast i64 %74 to double
  %77 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %75, double %76) #6
  %78 = extractvalue { double, double } %77, 0
  store double %78, double* %60, align 8
  %79 = extractvalue { double, double } %77, 1
  store double %79, double* %61, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #6
  %80 = fsub double %79, %2
  %81 = fdiv double %80, %63
  store double %81, double* %10, align 8
  %82 = call zeroext i1 @_ZN26LineQuadraticIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineQuadraticIntersections* %0, double* nonnull %8, double* nonnull %10, %struct.SkDPoint* nonnull %9, i32 1)
  br i1 %82, label %83, label %129

83:                                               ; preds = %70
  %84 = load double, double* %8, align 8
  %85 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %86 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %85, i64 0, i32 5
  %87 = load i8, i8* %86, align 2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %124, label %89

89:                                               ; preds = %83, %115
  %90 = phi %class.SkIntersections* [ %116, %115 ], [ %85, %83 ]
  %91 = phi i64 [ %117, %115 ], [ 0, %83 ]
  %92 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 0, i64 %91, i32 0
  %93 = load double, double* %92, align 8
  %94 = load double, double* %60, align 8
  %95 = fcmp une double %93, %94
  br i1 %95, label %115, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 0, i64 %91, i32 1
  %98 = load double, double* %97, align 8
  %99 = load double, double* %61, align 8
  %100 = fcmp une double %98, %99
  br i1 %100, label %115, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %90, i64 0, i32 2, i64 0, i64 %91
  %103 = load double, double* %102, align 8
  %104 = fcmp oeq double %103, %84
  br i1 %104, label %129, label %105

105:                                              ; preds = %101
  %106 = fadd double %84, %103
  %107 = fmul double %106, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %64) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -1, i64 16, i1 false) #6
  %108 = load %struct.SkDQuad*, %struct.SkDQuad** %11, align 8
  %109 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %108, double %107) #6
  %110 = extractvalue { double, double } %109, 0
  store double %110, double* %65, align 8
  %111 = extractvalue { double, double } %109, 1
  store double %111, double* %66, align 8
  %112 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %6, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %64) #6
  br i1 %112, label %129, label %113

113:                                              ; preds = %105
  %114 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  br label %115

115:                                              ; preds = %113, %96, %89
  %116 = phi %class.SkIntersections* [ %114, %113 ], [ %90, %89 ], [ %90, %96 ]
  %117 = add nuw nsw i64 %91, 1
  %118 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %116, i64 0, i32 5
  %119 = load i8, i8* %118, align 2
  %120 = zext i8 %119 to i64
  %121 = icmp ult i64 %117, %120
  br i1 %121, label %89, label %122

122:                                              ; preds = %115
  %123 = load double, double* %8, align 8
  br label %124

124:                                              ; preds = %122, %83
  %125 = phi double [ %123, %122 ], [ %84, %83 ]
  %126 = phi %class.SkIntersections* [ %116, %122 ], [ %85, %83 ]
  %127 = load double, double* %10, align 8
  %128 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %126, double %125, double %127, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  br label %129

129:                                              ; preds = %105, %101, %124, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #6
  %130 = add nuw nsw i64 %71, 1
  %131 = icmp eq i64 %130, %67
  br i1 %131, label %69, label %70

132:                                              ; preds = %69
  %133 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  call void @_ZN15SkIntersections4flipEv(%class.SkIntersections* %133) #6
  br label %134

134:                                              ; preds = %132, %69
  call void @_ZN26LineQuadraticIntersections15checkCoincidentEv(%class.LineQuadraticIntersections* %0)
  %135 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %136 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %135, i64 0, i32 5
  %137 = load i8, i8* %136, align 2
  %138 = zext i8 %137 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #6
  ret i32 %138
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.LineQuadraticIntersections, align 8
  %5 = bitcast %class.LineQuadraticIntersections* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #6
  %6 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %4, i64 0, i32 0
  %7 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %4, i64 0, i32 1
  %8 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %4, i64 0, i32 2
  %9 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %4, i64 0, i32 3
  %10 = bitcast %class.LineQuadraticIntersections* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  store %struct.SkDQuad* %1, %struct.SkDQuad** %6, align 8
  store %struct.SkDLine* %2, %struct.SkDLine** %7, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %8, align 8
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 5, i8* %11, align 1
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  %13 = load i8, i8* %12, align 8, !range !2
  store i8 %13, i8* %9, align 8
  %14 = call i32 @_ZN26LineQuadraticIntersections9intersectEv(%class.LineQuadraticIntersections* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #6
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN26LineQuadraticIntersections9intersectEv(%class.LineQuadraticIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.SkDPoint, align 8
  %3 = alloca [2 x double], align 16
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca %struct.SkDPoint, align 8
  %7 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %10 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %11 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %12 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %11, i64 0, i32 0, i64 0
  %13 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %10, %struct.SkDPoint* dereferenceable(16) %12) #6
  %14 = fcmp olt double %13, 0.000000e+00
  br i1 %14, label %20, label %15

15:                                               ; preds = %1
  %16 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %17 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %18 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %17, i64 0, i32 0, i64 0
  %19 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %16, double 0.000000e+00, double %13, %struct.SkDPoint* dereferenceable(16) %18) #6
  br label %20

20:                                               ; preds = %15, %1
  %21 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %22 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %23 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %22, i64 0, i32 0, i64 2
  %24 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %21, %struct.SkDPoint* dereferenceable(16) %23) #6
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %28 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %29 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %28, i64 0, i32 0, i64 2
  %30 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %27, double 1.000000e+00, double %24, %struct.SkDPoint* dereferenceable(16) %29) #6
  br label %31

31:                                               ; preds = %20, %26
  %32 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 3
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN26LineQuadraticIntersections16addNearEndPointsEv(%class.LineQuadraticIntersections* %0)
  br label %36

36:                                               ; preds = %31, %35
  %37 = bitcast [2 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #6
  %38 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 0
  %39 = bitcast [2 x double]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -1, i64 16, i1 false)
  %40 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %41 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %40, i64 0, i32 0, i64 1, i32 0
  %42 = bitcast double* %41 to <2 x double>*
  %43 = load <2 x double>, <2 x double>* %42, align 8
  %44 = bitcast %struct.SkDLine* %40 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fsub <2 x double> %43, %45
  %47 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %48 = bitcast %struct.SkDQuad* %47 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = fsub <2 x double> %49, %45
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %52 = fmul <2 x double> %46, %51
  %53 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %47, i64 0, i32 0, i64 1, i32 0
  %54 = bitcast double* %53 to <2 x double>*
  %55 = load <2 x double>, <2 x double>* %54, align 8
  %56 = fsub <2 x double> %55, %45
  %57 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %58 = fmul <2 x double> %57, %56
  %59 = shufflevector <2 x double> %52, <2 x double> %58, <2 x i32> <i32 0, i32 3>
  %60 = shufflevector <2 x double> %52, <2 x double> %58, <2 x i32> <i32 1, i32 2>
  %61 = fsub <2 x double> %59, %60
  %62 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %47, i64 0, i32 0, i64 2, i32 0
  %63 = bitcast double* %62 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 8
  %65 = fsub <2 x double> %64, %45
  %66 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %67 = fmul <2 x double> %66, %65
  %68 = extractelement <2 x double> %67, i32 0
  %69 = extractelement <2 x double> %67, i32 1
  %70 = fsub double %69, %68
  %71 = extractelement <2 x double> %61, i32 1
  %72 = fmul double %71, 2.000000e+00
  %73 = extractelement <2 x double> %61, i32 0
  %74 = fsub double %73, %72
  %75 = fadd double %70, %74
  %76 = fsub double %71, %73
  %77 = fmul double %76, 2.000000e+00
  %78 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %75, double %77, double %73, double* nonnull %38) #6
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %92

80:                                               ; preds = %36
  %81 = bitcast double* %4 to i8*
  %82 = bitcast double* %4 to i64*
  %83 = bitcast double* %5 to i8*
  %84 = bitcast %struct.SkDPoint* %6 to i8*
  %85 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %86 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %87 = bitcast %struct.SkDPoint* %2 to i8*
  %88 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %89 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %90 = zext i32 %78 to i64
  %91 = bitcast %struct.SkDPoint* %6 to i8*
  br label %97

92:                                               ; preds = %174, %36
  call void @_ZN26LineQuadraticIntersections15checkCoincidentEv(%class.LineQuadraticIntersections* %0)
  %93 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %94 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %93, i64 0, i32 5
  %95 = load i8, i8* %94, align 2
  %96 = zext i8 %95 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #6
  ret i32 %96

97:                                               ; preds = %174, %80
  %98 = phi i64 [ 0, %80 ], [ %175, %174 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #6
  %99 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 %98
  %100 = bitcast double* %99 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %82, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %5, align 8
  %102 = bitcast i64 %101 to double
  %103 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %104 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %103, double %102) #6
  %105 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %106 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %105, i64 0, i32 0, i64 1, i32 0
  %107 = bitcast double* %106 to <2 x double>*
  %108 = load <2 x double>, <2 x double>* %107, align 8
  %109 = bitcast %struct.SkDLine* %105 to <2 x double>*
  %110 = load <2 x double>, <2 x double>* %109, align 8
  %111 = fsub <2 x double> %108, %110
  %112 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %111)
  %113 = extractelement <2 x double> %112, i32 0
  %114 = extractelement <2 x double> %112, i32 1
  %115 = fcmp ogt double %113, %114
  %116 = extractvalue { double, double } %104, 0
  %117 = extractelement <2 x double> %110, i32 0
  %118 = fsub double %116, %117
  %119 = extractvalue { double, double } %104, 1
  %120 = extractelement <2 x double> %110, i32 1
  %121 = fsub double %119, %120
  %122 = extractelement <2 x double> %111, i32 0
  %123 = extractelement <2 x double> %111, i32 1
  %124 = select i1 %115, double %122, double %123
  %125 = select i1 %115, double %118, double %121
  %126 = fdiv double %125, %124
  store double %126, double* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %84) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 -1, i64 16, i1 false)
  %127 = call zeroext i1 @_ZN26LineQuadraticIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineQuadraticIntersections* %0, double* nonnull %4, double* nonnull %5, %struct.SkDPoint* nonnull %6, i32 0)
  br i1 %127, label %128, label %174

128:                                              ; preds = %97
  %129 = load double, double* %4, align 8
  %130 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %131 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %130, i64 0, i32 5
  %132 = load i8, i8* %131, align 2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %169, label %134

134:                                              ; preds = %128, %160
  %135 = phi %class.SkIntersections* [ %161, %160 ], [ %130, %128 ]
  %136 = phi i64 [ %162, %160 ], [ 0, %128 ]
  %137 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %135, i64 0, i32 0, i64 %136, i32 0
  %138 = load double, double* %137, align 8
  %139 = load double, double* %85, align 8
  %140 = fcmp une double %138, %139
  br i1 %140, label %160, label %141

141:                                              ; preds = %134
  %142 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %135, i64 0, i32 0, i64 %136, i32 1
  %143 = load double, double* %142, align 8
  %144 = load double, double* %86, align 8
  %145 = fcmp une double %143, %144
  br i1 %145, label %160, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %135, i64 0, i32 2, i64 0, i64 %136
  %148 = load double, double* %147, align 8
  %149 = fcmp oeq double %148, %129
  br i1 %149, label %174, label %150

150:                                              ; preds = %146
  %151 = fadd double %129, %148
  %152 = fmul double %151, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %87, i8 -1, i64 16, i1 false) #6
  %153 = load %struct.SkDQuad*, %struct.SkDQuad** %8, align 8
  %154 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %153, double %152) #6
  %155 = extractvalue { double, double } %154, 0
  store double %155, double* %88, align 8
  %156 = extractvalue { double, double } %154, 1
  store double %156, double* %89, align 8
  %157 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %2, %struct.SkDPoint* nonnull dereferenceable(16) %6) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #6
  br i1 %157, label %174, label %158

158:                                              ; preds = %150
  %159 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  br label %160

160:                                              ; preds = %158, %141, %134
  %161 = phi %class.SkIntersections* [ %159, %158 ], [ %135, %134 ], [ %135, %141 ]
  %162 = add nuw nsw i64 %136, 1
  %163 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %161, i64 0, i32 5
  %164 = load i8, i8* %163, align 2
  %165 = zext i8 %164 to i64
  %166 = icmp ult i64 %162, %165
  br i1 %166, label %134, label %167

167:                                              ; preds = %160
  %168 = load double, double* %4, align 8
  br label %169

169:                                              ; preds = %167, %128
  %170 = phi double [ %168, %167 ], [ %129, %128 ]
  %171 = phi %class.SkIntersections* [ %161, %167 ], [ %130, %128 ]
  %172 = load double, double* %5, align 8
  %173 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %171, double %170, double %172, %struct.SkDPoint* nonnull dereferenceable(16) %6) #6
  br label %174

174:                                              ; preds = %150, %146, %169, %97
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #6
  %175 = add nuw nsw i64 %98, 1
  %176 = icmp eq i64 %175, %90
  br i1 %176, label %92, label %97
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections12intersectRayERK7SkDQuadRK7SkDLine(%class.SkIntersections*, %struct.SkDQuad* dereferenceable(48), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 5, i8* %4, align 1
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = bitcast %struct.SkDLine* %2 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fsub <2 x double> %8, %10
  %12 = bitcast %struct.SkDQuad* %1 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fsub <2 x double> %13, %10
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %16 = fmul <2 x double> %11, %15
  %17 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 1, i32 0
  %18 = bitcast double* %17 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = fsub <2 x double> %19, %10
  %21 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %22 = fmul <2 x double> %21, %20
  %23 = shufflevector <2 x double> %16, <2 x double> %22, <2 x i32> <i32 0, i32 3>
  %24 = shufflevector <2 x double> %16, <2 x double> %22, <2 x i32> <i32 1, i32 2>
  %25 = fsub <2 x double> %23, %24
  %26 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 0
  %27 = bitcast double* %26 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %28, %10
  %30 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %31 = fmul <2 x double> %30, %29
  %32 = extractelement <2 x double> %31, i32 0
  %33 = extractelement <2 x double> %31, i32 1
  %34 = fsub double %33, %32
  %35 = extractelement <2 x double> %25, i32 1
  %36 = fmul double %35, 2.000000e+00
  %37 = extractelement <2 x double> %25, i32 0
  %38 = fsub double %37, %36
  %39 = fadd double %34, %38
  %40 = fsub double %35, %37
  %41 = fmul double %40, 2.000000e+00
  %42 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %39, double %41, double %37, double* %5) #6
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 %43, i8* %44, align 2
  %45 = and i32 %42, 255
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %49, label %51

47:                                               ; preds = %51
  %48 = zext i8 %61 to i32
  br label %49

49:                                               ; preds = %3, %47
  %50 = phi i32 [ %48, %47 ], [ 0, %3 ]
  ret i32 %50

51:                                               ; preds = %3, %51
  %52 = phi i64 [ %60, %51 ], [ 0, %3 ]
  %53 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %52
  %54 = load double, double* %53, align 8
  %55 = tail call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %1, double %54) #6
  %56 = extractvalue { double, double } %55, 0
  %57 = extractvalue { double, double } %55, 1
  %58 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %52, i32 0
  store double %56, double* %58, align 8
  %59 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %52, i32 1
  store double %57, double* %59, align 8
  %60 = add nuw nsw i64 %52, 1
  %61 = load i8, i8* %44, align 2
  %62 = zext i8 %61 to i64
  %63 = icmp ult i64 %60, %62
  br i1 %63, label %51, label %47
}

declare { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad*, double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections19HorizontalInterceptERK7SkDQuadfPd(%struct.SkDQuad* dereferenceable(48), float, double*) local_unnamed_addr #0 align 2 {
  %4 = fpext float %1 to double
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fmul double %8, 2.000000e+00
  %12 = fsub double %10, %11
  %13 = fadd double %6, %12
  %14 = fsub double %8, %10
  %15 = fsub double %10, %4
  %16 = fmul double %14, 2.000000e+00
  %17 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %13, double %16, double %15, double* %2) #6
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections17VerticalInterceptERK7SkDQuadfPd(%struct.SkDQuad* dereferenceable(48), float, double*) local_unnamed_addr #0 align 2 {
  %4 = fpext float %1 to double
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fmul double %8, 2.000000e+00
  %12 = fsub double %10, %11
  %13 = fadd double %6, %12
  %14 = fsub double %8, %10
  %15 = fsub double %10, %4
  %16 = fmul double %14, 2.000000e+00
  %17 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %13, double %16, double %15, double* %2) #6
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkDQuad19horizontalIntersectEdPd(%struct.SkDQuad* nocapture readonly, double, double*) local_unnamed_addr #0 align 2 {
  %4 = fptrunc double %1 to float
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, 2.000000e+00
  %13 = fsub double %11, %12
  %14 = fadd double %7, %13
  %15 = fsub double %9, %11
  %16 = fsub double %11, %5
  %17 = fmul double %15, 2.000000e+00
  %18 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %14, double %17, double %16, double* %2) #6
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkDQuad17verticalIntersectEdPd(%struct.SkDQuad* nocapture readonly, double, double*) local_unnamed_addr #0 align 2 {
  %4 = fptrunc double %1 to float
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 2, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 1, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %0, i64 0, i32 0, i64 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = fmul double %9, 2.000000e+00
  %13 = fsub double %11, %12
  %14 = fadd double %7, %13
  %15 = fsub double %9, %11
  %16 = fsub double %11, %5
  %17 = fmul double %15, 2.000000e+00
  %18 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %14, double %17, double %16, double* %2) #6
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26LineQuadraticIntersections26addNearHorizontalEndPointsEddd(%class.LineQuadraticIntersections*, double, double, double) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %7 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %25, label %15

15:                                               ; preds = %4, %11
  %16 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %17 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %16, i64 0, i32 0, i64 0
  %18 = tail call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %17, double %1, double %2, double %3) #6
  %19 = fcmp olt double %18, 0.000000e+00
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %22 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %23 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %22, i64 0, i32 0, i64 0
  %24 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %21, double 0.000000e+00, double %18, %struct.SkDPoint* dereferenceable(16) %23) #6
  br label %25

25:                                               ; preds = %11, %20, %15
  %26 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 5
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = zext i8 %28 to i64
  %32 = add nsw i64 %31, -1
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 2, i64 0, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 1.000000e+00
  br i1 %35, label %46, label %36

36:                                               ; preds = %30, %25
  %37 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %38 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %37, i64 0, i32 0, i64 2
  %39 = tail call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %38, double %1, double %2, double %3) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %43 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %43, i64 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %36, %30
  tail call void @_ZN26LineQuadraticIntersections20addLineNearEndPointsEv(%class.LineQuadraticIntersections* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN26LineQuadraticIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineQuadraticIntersections*, double*, double*, %struct.SkDPoint*, i32) local_unnamed_addr #3 comdat align 2 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %struct.SkPoint*
  %12 = load double, double* %2, align 8
  %13 = fcmp olt double %12, 0x3FF0000040000000
  %14 = fcmp ogt double %12, 0xBE90000000000000
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %145

16:                                               ; preds = %5
  %17 = load double, double* %1, align 8
  %18 = fcmp olt double %17, 0x3CD0000000000000
  %19 = fcmp ogt double %17, 0x3FEFFFFFFFFFFFF8
  %20 = select i1 %19, double 1.000000e+00, double %17
  %21 = select i1 %18, double 0.000000e+00, double %20
  store double %21, double* %1, align 8
  %22 = load double, double* %2, align 8
  %23 = fcmp olt double %22, 0x3CD0000000000000
  %24 = fcmp ogt double %22, 0x3FEFFFFFFFFFFFF8
  %25 = select i1 %24, double 1.000000e+00, double %22
  %26 = select i1 %23, double 0.000000e+00, double %25
  store double %26, double* %2, align 8
  %27 = fcmp oeq double %26, 0.000000e+00
  %28 = fcmp oeq double %26, 1.000000e+00
  %29 = or i1 %27, %28
  br i1 %29, label %36, label %30

30:                                               ; preds = %16
  %31 = icmp eq i32 %4, 0
  %32 = fcmp une double %21, 0.000000e+00
  %33 = and i1 %31, %32
  %34 = fcmp une double %21, 1.000000e+00
  %35 = and i1 %34, %33
  br i1 %35, label %36, label %44

36:                                               ; preds = %30, %16
  %37 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %38 = load %struct.SkDLine*, %struct.SkDLine** %37, align 8
  %39 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %38, double %26) #6
  %40 = extractvalue { double, double } %39, 0
  %41 = extractvalue { double, double } %39, 1
  %42 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  store double %40, double* %42, align 8
  %43 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  store double %41, double* %43, align 8
  br label %58

44:                                               ; preds = %30
  br i1 %31, label %50, label %45

45:                                               ; preds = %44
  %46 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  %49 = load double, double* %48, align 8
  br label %58

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %52 = load %struct.SkDQuad*, %struct.SkDQuad** %51, align 8
  %53 = tail call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %52, double %21) #6
  %54 = extractvalue { double, double } %53, 0
  %55 = extractvalue { double, double } %53, 1
  %56 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  store double %54, double* %56, align 8
  %57 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  store double %55, double* %57, align 8
  br label %58

58:                                               ; preds = %45, %50, %36
  %59 = phi double [ %49, %45 ], [ %55, %50 ], [ %41, %36 ]
  %60 = phi double [ %47, %45 ], [ %54, %50 ], [ %40, %36 ]
  %61 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #6
  %62 = getelementptr inbounds <2 x float>, <2 x float>* %6, i64 0, i64 0
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %7, i64 0, i32 1
  %64 = fptrunc double %60 to float
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = fptrunc double %59 to float
  %67 = insertelement <2 x float> %65, float %66, i32 1
  store <2 x float> %67, <2 x float>* %6, align 8
  %68 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #6
  %69 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %70 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %71 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %70, i64 0, i32 0, i64 0, i32 0
  %72 = load double, double* %71, align 8
  %73 = fptrunc double %72 to float
  %74 = insertelement <2 x float> undef, float %73, i32 0
  %75 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %70, i64 0, i32 0, i64 0, i32 1
  %76 = load double, double* %75, align 8
  %77 = fptrunc double %76 to float
  %78 = insertelement <2 x float> %74, float %77, i32 1
  store <2 x float> %78, <2 x float>* %8, align 8
  %79 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %7, %struct.SkPoint* nonnull dereferenceable(8) %9)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #6
  br i1 %79, label %80, label %83

80:                                               ; preds = %58
  %81 = bitcast %struct.SkDLine** %69 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %95

83:                                               ; preds = %58
  %84 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #6
  %85 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %86 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %85, i64 0, i32 0, i64 1, i32 0
  %87 = bitcast double* %86 to <2 x double>*
  %88 = load <2 x double>, <2 x double>* %87, align 8
  %89 = fptrunc <2 x double> %88 to <2 x float>
  store <2 x float> %89, <2 x float>* %10, align 8
  %90 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %7, %struct.SkPoint* nonnull dereferenceable(8) %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #6
  br i1 %90, label %91, label %99

91:                                               ; preds = %83
  %92 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %93 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %92, i64 0, i32 0, i64 1
  %94 = bitcast %struct.SkDPoint* %93 to i8*
  br label %95

95:                                               ; preds = %80, %91
  %96 = phi i8* [ %94, %91 ], [ %82, %80 ]
  %97 = phi double [ 1.000000e+00, %91 ], [ 0.000000e+00, %80 ]
  %98 = bitcast %struct.SkDPoint* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %96, i64 16, i1 false)
  store double %97, double* %2, align 8
  br label %99

99:                                               ; preds = %95, %83
  %100 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %101 = load %class.SkIntersections*, %class.SkIntersections** %100, align 8
  %102 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %101, i64 0, i32 5
  %103 = load i8, i8* %102, align 2
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %101, i64 0, i32 2, i64 1, i64 0
  %107 = load double, double* %106, align 8
  %108 = load double, double* %2, align 8
  %109 = fsub double %107, %108
  %110 = call double @llvm.fabs.f64(double %109) #6
  %111 = fcmp olt double %110, 0x3E80000000000000
  br i1 %111, label %143, label %112

112:                                              ; preds = %99, %105
  %113 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %114 = load %struct.SkDQuad*, %struct.SkDQuad** %113, align 8
  %115 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %114, i64 0, i32 0, i64 0, i32 0
  %116 = load double, double* %115, align 8
  %117 = fptrunc double %116 to float
  %118 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %114, i64 0, i32 0, i64 0, i32 1
  %119 = load double, double* %118, align 8
  %120 = fptrunc double %119 to float
  %121 = load float, float* %62, align 8
  %122 = fcmp oeq float %121, %117
  %123 = load float, float* %63, align 4
  %124 = fcmp oeq float %123, %120
  %125 = and i1 %122, %124
  br i1 %125, label %126, label %129

126:                                              ; preds = %112
  %127 = bitcast %struct.SkDPoint* %3 to i8*
  %128 = bitcast %struct.SkDQuad* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false)
  store double 0.000000e+00, double* %1, align 8
  br label %143

129:                                              ; preds = %112
  %130 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %114, i64 0, i32 0, i64 2
  %131 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %130, i64 0, i32 0
  %132 = load double, double* %131, align 8
  %133 = fptrunc double %132 to float
  %134 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %114, i64 0, i32 0, i64 2, i32 1
  %135 = load double, double* %134, align 8
  %136 = fptrunc double %135 to float
  %137 = fcmp oeq float %121, %133
  %138 = fcmp oeq float %123, %136
  %139 = and i1 %137, %138
  br i1 %139, label %140, label %143

140:                                              ; preds = %129
  %141 = bitcast %struct.SkDPoint* %3 to i8*
  %142 = bitcast %struct.SkDPoint* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 16, i1 false)
  store double 1.000000e+00, double* %1, align 8
  br label %143

143:                                              ; preds = %129, %126, %140, %105
  %144 = phi i1 [ false, %105 ], [ true, %140 ], [ true, %126 ], [ true, %129 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #6
  br label %145

145:                                              ; preds = %5, %143
  %146 = phi i1 [ %144, %143 ], [ false, %5 ]
  ret i1 %146
}

declare i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN15SkIntersections4flipEv(%class.SkIntersections*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26LineQuadraticIntersections15checkCoincidentEv(%class.LineQuadraticIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.SkDPoint, align 8
  %3 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %4 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 5
  %6 = load i8, i8* %5, align 2
  %7 = zext i8 %6 to i32
  %8 = add nsw i32 %7, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %1
  %11 = bitcast %struct.SkDPoint* %2 to i8*
  %12 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %14 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %15 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %16 = bitcast %struct.SkDPoint* %2 to i8*
  br label %18

17:                                               ; preds = %59, %1
  ret void

18:                                               ; preds = %63, %10
  %19 = phi %class.SkIntersections* [ %4, %10 ], [ %64, %63 ]
  %20 = phi i32 [ %8, %10 ], [ %61, %63 ]
  %21 = phi i32 [ 0, %10 ], [ %60, %63 ]
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %19, i64 0, i32 2, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  %25 = add nsw i32 %21, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %19, i64 0, i32 2, i64 0, i64 %26
  %28 = load double, double* %27, align 8
  %29 = fadd double %24, %28
  %30 = fmul double %29, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 16, i1 false)
  %31 = load %struct.SkDQuad*, %struct.SkDQuad** %14, align 8
  %32 = call { double, double } @_ZNK7SkDQuad5ptAtTEd(%struct.SkDQuad* %31, double %30) #6
  %33 = extractvalue { double, double } %32, 0
  store double %33, double* %12, align 8
  %34 = extractvalue { double, double } %32, 1
  store double %34, double* %13, align 8
  %35 = load %struct.SkDLine*, %struct.SkDLine** %15, align 8
  %36 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %35, %struct.SkDPoint* nonnull dereferenceable(16) %2, i8* null) #6
  %37 = fcmp olt double %36, 0.000000e+00
  br i1 %37, label %59, label %38

38:                                               ; preds = %18
  %39 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  %40 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %39, i64 0, i32 3, i64 0
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = shl i32 1, %21
  %44 = and i32 %43, %42
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %38
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %39, i32 %21) #6
  %47 = add nsw i32 %20, -1
  br label %55

48:                                               ; preds = %38
  %49 = shl i32 1, %25
  %50 = and i32 %49, %42
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %39, i32 %25) #6
  %53 = add nsw i32 %20, -1
  br label %55

54:                                               ; preds = %48
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %39, i32 %21) #6
  br label %55

55:                                               ; preds = %52, %54, %46
  %56 = phi i32 [ %21, %46 ], [ %21, %52 ], [ %25, %54 ]
  %57 = phi i32 [ %47, %46 ], [ %53, %52 ], [ %20, %54 ]
  %58 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %58, i32 %56) #6
  br label %59

59:                                               ; preds = %18, %55
  %60 = phi i32 [ %56, %55 ], [ %25, %18 ]
  %61 = phi i32 [ %57, %55 ], [ %20, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #6
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %17

63:                                               ; preds = %59
  %64 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  br label %18
}

declare double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

declare double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26LineQuadraticIntersections20addLineNearEndPointsEv(%class.LineQuadraticIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %3 = bitcast %class.LineQuadraticIntersections* %0 to %struct.SkDCurve**
  %4 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %5 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = zext i8 %7 to i64
  %9 = icmp eq i8 %7, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 1, i64 0
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %12, 0.000000e+00
  br i1 %13, label %31, label %14

14:                                               ; preds = %10
  %15 = add nsw i64 %8, -1
  %16 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 1, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %31, label %19

19:                                               ; preds = %1, %14
  %20 = load %struct.SkDCurve*, %struct.SkDCurve** %3, align 8
  %21 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %22 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %21, i64 0, i32 0, i64 0
  %23 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %21, i64 0, i32 0, i64 1
  %24 = tail call double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve* %20, i32 2, %struct.SkDPoint* dereferenceable(16) %22, %struct.SkDPoint* dereferenceable(16) %23) #6
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %28 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %29 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %28, i64 0, i32 0, i64 0
  %30 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %27, double %24, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %29) #6
  br label %31

31:                                               ; preds = %10, %26, %19, %14
  %32 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 5
  %34 = load i8, i8* %33, align 2
  %35 = zext i8 %34 to i64
  %36 = icmp eq i8 %34, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 2, i64 1, i64 0
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 1.000000e+00
  br i1 %40, label %58, label %41

41:                                               ; preds = %37
  %42 = add nsw i64 %35, -1
  %43 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 2, i64 1, i64 %42
  %44 = load double, double* %43, align 8
  %45 = fcmp oeq double %44, 1.000000e+00
  br i1 %45, label %58, label %46

46:                                               ; preds = %41, %31
  %47 = load %struct.SkDCurve*, %struct.SkDCurve** %3, align 8
  %48 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %49 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %48, i64 0, i32 0, i64 1
  %50 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %48, i64 0, i32 0, i64 0
  %51 = tail call double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve* %47, i32 2, %struct.SkDPoint* dereferenceable(16) %49, %struct.SkDPoint* dereferenceable(16) %50) #6
  %52 = fcmp olt double %51, 0.000000e+00
  br i1 %52, label %58, label %53

53:                                               ; preds = %46
  %54 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %55 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %56 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %55, i64 0, i32 0, i64 1
  %57 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %54, double %51, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %56) #6
  br label %58

58:                                               ; preds = %53, %46, %41, %37
  ret void
}

declare double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve*, i32, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #6
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #6
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #6
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #6
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #6
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #6
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #2

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #6
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #6
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #6
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #6
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #6
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #6
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #2

declare double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16), i8*) local_unnamed_addr #2

declare void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections*, i32) local_unnamed_addr #2

declare void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26LineQuadraticIntersections24addNearVerticalEndPointsEddd(%class.LineQuadraticIntersections*, double, double, double) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %7 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %25, label %15

15:                                               ; preds = %4, %11
  %16 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %17 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %16, i64 0, i32 0, i64 0
  %18 = tail call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %17, double %1, double %2, double %3) #6
  %19 = fcmp olt double %18, 0.000000e+00
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %22 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %23 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %22, i64 0, i32 0, i64 0
  %24 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %21, double 0.000000e+00, double %18, %struct.SkDPoint* dereferenceable(16) %23) #6
  br label %25

25:                                               ; preds = %11, %20, %15
  %26 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 5
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = zext i8 %28 to i64
  %32 = add nsw i64 %31, -1
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 2, i64 0, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 1.000000e+00
  br i1 %35, label %46, label %36

36:                                               ; preds = %30, %25
  %37 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %38 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %37, i64 0, i32 0, i64 2
  %39 = tail call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %38, double %1, double %2, double %3) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %43 = load %struct.SkDQuad*, %struct.SkDQuad** %6, align 8
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %43, i64 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %36, %30
  tail call void @_ZN26LineQuadraticIntersections20addLineNearEndPointsEv(%class.LineQuadraticIntersections* %0)
  ret void
}

declare double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

declare double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN26LineQuadraticIntersections16addNearEndPointsEv(%class.LineQuadraticIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.LineQuadraticIntersections, %class.LineQuadraticIntersections* %0, i64 0, i32 0
  %5 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %24, label %13

13:                                               ; preds = %1, %9
  %14 = load %struct.SkDLine*, %struct.SkDLine** %3, align 8
  %15 = load %struct.SkDQuad*, %struct.SkDQuad** %4, align 8
  %16 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %15, i64 0, i32 0, i64 0
  %17 = tail call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %14, %struct.SkDPoint* dereferenceable(16) %16, i8* null) #6
  %18 = fcmp olt double %17, 0.000000e+00
  br i1 %18, label %24, label %19

19:                                               ; preds = %13
  %20 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %21 = load %struct.SkDQuad*, %struct.SkDQuad** %4, align 8
  %22 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %21, i64 0, i32 0, i64 0
  %23 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %20, double 0.000000e+00, double %17, %struct.SkDPoint* dereferenceable(16) %22) #6
  br label %24

24:                                               ; preds = %9, %19, %13
  %25 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %26 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %25, i64 0, i32 5
  %27 = load i8, i8* %26, align 2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = zext i8 %27 to i64
  %31 = add nsw i64 %30, -1
  %32 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %25, i64 0, i32 2, i64 0, i64 %31
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 1.000000e+00
  br i1 %34, label %46, label %35

35:                                               ; preds = %29, %24
  %36 = load %struct.SkDLine*, %struct.SkDLine** %3, align 8
  %37 = load %struct.SkDQuad*, %struct.SkDQuad** %4, align 8
  %38 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %37, i64 0, i32 0, i64 2
  %39 = tail call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %36, %struct.SkDPoint* dereferenceable(16) %38, i8* null) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %35
  %42 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %43 = load %struct.SkDQuad*, %struct.SkDQuad** %4, align 8
  %44 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %43, i64 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %35, %29
  tail call void @_ZN26LineQuadraticIntersections20addLineNearEndPointsEv(%class.LineQuadraticIntersections* %0)
  ret void
}

declare double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare i32 @_ZN7SkDQuad11RootsValidTEdddPd(double, double, double, double*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
