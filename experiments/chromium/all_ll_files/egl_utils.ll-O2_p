; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/egl/egl_utils.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/egl/egl_utils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i32* }
%"class.egl::AttributeMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx10native_egl16TrimAttributeMapERKN3egl12AttributeMapEPKim(%"class.std::__1::vector"* noalias sret, %"class.egl::AttributeMap"* dereferenceable(24), i32* nocapture readonly, i64) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #7
  %8 = icmp eq i64 %3, 0
  br i1 %8, label %126, label %9

9:                                                ; preds = %4
  %10 = bitcast i32** %5 to i64*
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = bitcast i32** %6 to i64*
  br label %13

13:                                               ; preds = %123, %9
  %14 = phi i64 [ 0, %9 ], [ %124, %123 ]
  %15 = getelementptr inbounds i32, i32* %2, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = tail call zeroext i1 @_ZNK3egl12AttributeMap8containsEl(%"class.egl::AttributeMap"* %1, i64 %17) #7
  br i1 %18, label %19, label %123

19:                                               ; preds = %13
  %20 = load i32*, i32** %5, align 8
  %21 = load i32*, i32** %6, align 8
  %22 = icmp eq i32* %20, %21
  %23 = ptrtoint i32* %21 to i64
  br i1 %22, label %27, label %24

24:                                               ; preds = %19
  store i32 %16, i32* %20, align 4
  %25 = getelementptr inbounds i32, i32* %20, i64 1
  %26 = ptrtoint i32* %25 to i64
  store i64 %26, i64* %10, align 8
  br label %70

27:                                               ; preds = %19
  %28 = ptrtoint i32* %20 to i64
  %29 = load i64, i64* %11, align 8
  %30 = sub i64 %28, %29
  %31 = ashr exact i64 %30, 2
  %32 = add nsw i64 %31, 1
  %33 = icmp ugt i64 %32, 4611686018427387903
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #8
  unreachable

36:                                               ; preds = %27
  %37 = sub i64 %23, %29
  %38 = ashr exact i64 %37, 2
  %39 = icmp ult i64 %38, 2305843009213693951
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = ashr exact i64 %37, 1
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %40
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @abort() #8
  unreachable

48:                                               ; preds = %45, %36
  %49 = phi i64 [ %43, %45 ], [ 4611686018427387903, %36 ]
  %50 = shl i64 %49, 2
  %51 = tail call i8* @_Znwm(i64 %50) #9
  %52 = bitcast i8* %51 to i32*
  br label %53

53:                                               ; preds = %48, %40
  %54 = phi i64 [ %49, %48 ], [ 0, %40 ]
  %55 = phi i8* [ %51, %48 ], [ null, %40 ]
  %56 = phi i32* [ %52, %48 ], [ null, %40 ]
  %57 = getelementptr inbounds i32, i32* %56, i64 %31
  %58 = getelementptr inbounds i32, i32* %56, i64 %54
  %59 = ptrtoint i32* %58 to i64
  store i32 %16, i32* %57, align 4
  %60 = getelementptr inbounds i32, i32* %57, i64 1
  %61 = ptrtoint i32* %60 to i64
  %62 = ptrtoint i32* %56 to i64
  %63 = icmp sgt i64 %30, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %53
  %65 = inttoptr i64 %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %65, i64 %30, i1 false) #7
  br label %66

66:                                               ; preds = %64, %53
  store i64 %62, i64* %11, align 8
  store i64 %61, i64* %10, align 8
  store i64 %59, i64* %12, align 8
  %67 = icmp eq i64 %29, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %66
  %69 = inttoptr i64 %29 to i8*
  tail call void @_ZdlPv(i8* %69) #9
  br label %70

70:                                               ; preds = %24, %66, %68
  %71 = tail call i64 @_ZNK3egl12AttributeMap3getEl(%"class.egl::AttributeMap"* %1, i64 %17) #7
  %72 = trunc i64 %71 to i32
  %73 = load i32*, i32** %5, align 8
  %74 = load i32*, i32** %6, align 8
  %75 = icmp ult i32* %73, %74
  %76 = ptrtoint i32* %74 to i64
  br i1 %75, label %77, label %80

77:                                               ; preds = %70
  store i32 %72, i32* %73, align 4
  %78 = getelementptr inbounds i32, i32* %73, i64 1
  %79 = ptrtoint i32* %78 to i64
  store i64 %79, i64* %10, align 8
  br label %123

80:                                               ; preds = %70
  %81 = ptrtoint i32* %73 to i64
  %82 = load i64, i64* %11, align 8
  %83 = sub i64 %81, %82
  %84 = ashr exact i64 %83, 2
  %85 = add nsw i64 %84, 1
  %86 = icmp ugt i64 %85, 4611686018427387903
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #8
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %76, %82
  %91 = ashr exact i64 %90, 2
  %92 = icmp ult i64 %91, 2305843009213693951
  br i1 %92, label %93, label %101

93:                                               ; preds = %89
  %94 = ashr exact i64 %90, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %106, label %98

98:                                               ; preds = %93
  %99 = icmp ugt i64 %96, 4611686018427387903
  br i1 %99, label %100, label %101

100:                                              ; preds = %98
  tail call void @abort() #8
  unreachable

101:                                              ; preds = %98, %89
  %102 = phi i64 [ %96, %98 ], [ 4611686018427387903, %89 ]
  %103 = shl i64 %102, 2
  %104 = tail call i8* @_Znwm(i64 %103) #9
  %105 = bitcast i8* %104 to i32*
  br label %106

106:                                              ; preds = %101, %93
  %107 = phi i64 [ %102, %101 ], [ 0, %93 ]
  %108 = phi i8* [ %104, %101 ], [ null, %93 ]
  %109 = phi i32* [ %105, %101 ], [ null, %93 ]
  %110 = getelementptr inbounds i32, i32* %109, i64 %84
  %111 = getelementptr inbounds i32, i32* %109, i64 %107
  %112 = ptrtoint i32* %111 to i64
  store i32 %72, i32* %110, align 4
  %113 = getelementptr inbounds i32, i32* %110, i64 1
  %114 = ptrtoint i32* %113 to i64
  %115 = ptrtoint i32* %109 to i64
  %116 = icmp sgt i64 %83, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %106
  %118 = inttoptr i64 %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %118, i64 %83, i1 false) #7
  br label %119

119:                                              ; preds = %117, %106
  store i64 %115, i64* %11, align 8
  store i64 %114, i64* %10, align 8
  store i64 %112, i64* %12, align 8
  %120 = icmp eq i64 %82, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %82 to i8*
  tail call void @_ZdlPv(i8* %122) #9
  br label %123

123:                                              ; preds = %121, %119, %77, %13
  %124 = add nuw i64 %14, 1
  %125 = icmp eq i64 %124, %3
  br i1 %125, label %126, label %13

126:                                              ; preds = %123, %4
  ret void
}

declare zeroext i1 @_ZNK3egl12AttributeMap8containsEl(%"class.egl::AttributeMap"*, i64) local_unnamed_addr #1

declare i64 @_ZNK3egl12AttributeMap3getEl(%"class.egl::AttributeMap"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx10native_egl23FinalizeAttributeVectorEPNSt3__16vectorIiNS1_9allocatorIiEEEE(%"class.std::__1::vector"*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = icmp ult i32* %3, %5
  %7 = ptrtoint i32* %5 to i64
  br i1 %6, label %8, label %12

8:                                                ; preds = %1
  store i32 12344, i32* %3, align 4
  %9 = getelementptr inbounds i32, i32* %3, i64 1
  %10 = ptrtoint i32* %9 to i64
  %11 = bitcast i32** %2 to i64*
  store i64 %10, i64* %11, align 8
  br label %68

12:                                               ; preds = %1
  %13 = ptrtoint i32* %3 to i64
  %14 = bitcast i32** %2 to i64*
  %15 = bitcast %"class.std::__1::vector"* %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = ashr exact i64 %17, 2
  %19 = add nsw i64 %18, 1
  %20 = icmp ugt i64 %19, 4611686018427387903
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #8
  unreachable

23:                                               ; preds = %12
  %24 = bitcast i32** %4 to i64*
  %25 = sub i64 %7, %16
  %26 = ashr exact i64 %25, 2
  %27 = icmp ult i64 %26, 2305843009213693951
  br i1 %27, label %28, label %36

28:                                               ; preds = %23
  %29 = ashr exact i64 %25, 1
  %30 = icmp ult i64 %29, %19
  %31 = select i1 %30, i64 %19, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %28
  %34 = icmp ugt i64 %31, 4611686018427387903
  br i1 %34, label %35, label %36

35:                                               ; preds = %33
  tail call void @abort() #8
  unreachable

36:                                               ; preds = %33, %23
  %37 = phi i64 [ %31, %33 ], [ 4611686018427387903, %23 ]
  %38 = shl i64 %37, 2
  %39 = tail call i8* @_Znwm(i64 %38) #9
  %40 = bitcast i8* %39 to i32*
  br label %41

41:                                               ; preds = %36, %28
  %42 = phi i64 [ %37, %36 ], [ 0, %28 ]
  %43 = phi i32* [ %40, %36 ], [ null, %28 ]
  %44 = getelementptr inbounds i32, i32* %43, i64 %18
  %45 = getelementptr inbounds i32, i32* %43, i64 %42
  %46 = ptrtoint i32* %45 to i64
  store i32 12344, i32* %44, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 1
  %48 = ptrtoint i32* %47 to i64
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = load i64, i64* %14, align 8
  %52 = ptrtoint i32* %50 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 2
  %55 = sub nsw i64 0, %54
  %56 = getelementptr inbounds i32, i32* %44, i64 %55
  %57 = ptrtoint i32* %56 to i64
  %58 = icmp sgt i64 %53, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %41
  %60 = bitcast i32* %56 to i8*
  %61 = bitcast i32* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %61, i64 %53, i1 false) #7
  %62 = load i32*, i32** %49, align 8
  br label %63

63:                                               ; preds = %59, %41
  %64 = phi i32* [ %50, %41 ], [ %62, %59 ]
  store i64 %57, i64* %15, align 8
  store i64 %48, i64* %14, align 8
  store i64 %46, i64* %24, align 8
  %65 = icmp eq i32* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = bitcast i32* %64 to i8*
  tail call void @_ZdlPv(i8* %67) #9
  br label %68

68:                                               ; preds = %8, %63, %66
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
