; ModuleID = '../../chrome/browser/vr/model/assets.cc'
source_filename = "../../chrome/browser/vr/model/assets.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.vr::Assets" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9", %"class.std::__1::unique_ptr.9", %"class.base::Version" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkBitmap* }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Version" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i32* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN2vr6AssetsC1Ev = hidden unnamed_addr alias void (%"struct.vr::Assets"*), void (%"struct.vr::Assets"*)* @_ZN2vr6AssetsC2Ev
@_ZN2vr6AssetsD1Ev = hidden unnamed_addr alias void (%"struct.vr::Assets"*), void (%"struct.vr::Assets"*)* @_ZN2vr6AssetsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr6AssetsC2Ev(%"struct.vr::Assets"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 8
  %3 = bitcast %"struct.vr::Assets"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 64, i1 false)
  tail call void @_ZN4base7VersionC1Ev(%"class.base::Version"* %2) #5
  ret void
}

declare void @_ZN4base7VersionC1Ev(%"class.base::Version"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr6AssetsD2Ev(%"struct.vr::Assets"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 8
  tail call void @_ZN4base7VersionD1Ev(%"class.base::Version"* %2) #5
  %3 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  store %"class.std::__1::basic_string"* null, %"class.std::__1::basic_string"** %3, align 8
  %5 = icmp eq %"class.std::__1::basic_string"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #6
  br label %14

14:                                               ; preds = %11, %6
  %15 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  tail call void @_ZdlPv(i8* %15) #6
  br label %16

16:                                               ; preds = %1, %14
  %17 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %18 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %17, align 8
  store %"class.std::__1::basic_string"* null, %"class.std::__1::basic_string"** %17, align 8
  %19 = icmp eq %"class.std::__1::basic_string"* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #6
  br label %28

28:                                               ; preds = %25, %20
  %29 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  tail call void @_ZdlPv(i8* %29) #6
  br label %30

30:                                               ; preds = %16, %28
  %31 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %32 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %31, align 8
  store %"class.std::__1::basic_string"* null, %"class.std::__1::basic_string"** %31, align 8
  %33 = icmp eq %"class.std::__1::basic_string"* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %30
  %35 = bitcast %"class.std::__1::basic_string"* %32 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  tail call void @_ZdlPv(i8* %41) #6
  br label %42

42:                                               ; preds = %39, %34
  %43 = bitcast %"class.std::__1::basic_string"* %32 to i8*
  tail call void @_ZdlPv(i8* %43) #6
  br label %44

44:                                               ; preds = %30, %42
  %45 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %46 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %45, align 8
  store %"class.std::__1::basic_string"* null, %"class.std::__1::basic_string"** %45, align 8
  %47 = icmp eq %"class.std::__1::basic_string"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #6
  br label %56

56:                                               ; preds = %53, %48
  %57 = bitcast %"class.std::__1::basic_string"* %46 to i8*
  tail call void @_ZdlPv(i8* %57) #6
  br label %58

58:                                               ; preds = %44, %56
  %59 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %60 = load %class.SkBitmap*, %class.SkBitmap** %59, align 8
  store %class.SkBitmap* null, %class.SkBitmap** %59, align 8
  %61 = icmp eq %class.SkBitmap* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %58
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %60) #5
  %63 = bitcast %class.SkBitmap* %60 to i8*
  tail call void @_ZdlPv(i8* %63) #6
  br label %64

64:                                               ; preds = %58, %62
  %65 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %66 = load %class.SkBitmap*, %class.SkBitmap** %65, align 8
  store %class.SkBitmap* null, %class.SkBitmap** %65, align 8
  %67 = icmp eq %class.SkBitmap* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %64
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %66) #5
  %69 = bitcast %class.SkBitmap* %66 to i8*
  tail call void @_ZdlPv(i8* %69) #6
  br label %70

70:                                               ; preds = %64, %68
  %71 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %72 = load %class.SkBitmap*, %class.SkBitmap** %71, align 8
  store %class.SkBitmap* null, %class.SkBitmap** %71, align 8
  %73 = icmp eq %class.SkBitmap* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %72) #5
  %75 = bitcast %class.SkBitmap* %72 to i8*
  tail call void @_ZdlPv(i8* %75) #6
  br label %76

76:                                               ; preds = %70, %74
  %77 = getelementptr inbounds %"struct.vr::Assets", %"struct.vr::Assets"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = load %class.SkBitmap*, %class.SkBitmap** %77, align 8
  store %class.SkBitmap* null, %class.SkBitmap** %77, align 8
  %79 = icmp eq %class.SkBitmap* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %76
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %78) #5
  %81 = bitcast %class.SkBitmap* %78 to i8*
  tail call void @_ZdlPv(i8* %81) #6
  br label %82

82:                                               ; preds = %76, %80
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base7VersionD1Ev(%"class.base::Version"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
