; ModuleID = '../../third_party/swiftshader/src/Device/ASTC_Decoder.cpp'
source_filename = "../../third_party/swiftshader/src/Device/ASTC_Decoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block_size_descriptor = type { i32, i32, i32, i32, i32, [87 x %struct.decimation_table*], [2048 x %struct.block_mode], [3073 x %struct.partition_info] }
%struct.decimation_table = type { i32, [216 x i8], [216 x [4 x i8]], [216 x [4 x i8]] }
%struct.block_mode = type { i8, i8, i8, i8 }
%struct.partition_info = type { i32, [216 x i8] }
%struct.imageblock = type { [864 x float], [216 x float], [216 x float], [216 x float], [216 x float], [216 x i8], [216 x i8], [216 x i8], float, float, float, float, float, float, float, float, i32, i32, i32, i32 }
%struct.symbolic_compressed_block = type { i32, i32, i32, i32, [4 x i32], i32, [4 x [12 x i32]], i32, [64 x i8], [64 x i8], i32, [4 x i32] }

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN12ASTC_Decoder6DecodeEPKhPhiiiiiiiiiiiib(i8* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  tail call void @_Z29build_quantization_mode_tablev() #4
  %16 = select i1 %14, i32 1, i32 2
  %17 = tail call i8* @_Znwm(i64 684976) #5
  %18 = bitcast i8* %17 to %struct.block_size_descriptor*
  tail call void @_Z26init_block_size_descriptoriiiP21block_size_descriptor(i32 %8, i32 %9, i32 %10, %struct.block_size_descriptor* nonnull %18) #4
  %19 = tail call i8* @_Znwm(i64 7608) #5
  %20 = bitcast i8* %19 to %struct.imageblock*
  %21 = tail call i8* @_Znwm(i64 380) #5
  %22 = bitcast i8* %21 to %struct.symbolic_compressed_block*
  %23 = icmp sgt i32 %13, 0
  br i1 %23, label %24, label %56

24:                                               ; preds = %15
  %25 = icmp sgt i32 %12, 0
  %26 = icmp sgt i32 %11, 0
  %27 = icmp sgt i32 %10, 0
  %28 = getelementptr inbounds i8, i8* %19, i64 7344
  %29 = bitcast i8* %19 to float*
  %30 = icmp sgt i32 %9, 0
  %31 = icmp sgt i32 %8, 0
  %32 = sext i32 %2 to i64
  %33 = sext i32 %5 to i64
  %34 = add i32 %8, -1
  %35 = zext i32 %34 to i64
  %36 = add nuw nsw i64 %35, 1
  %37 = sext i32 %3 to i64
  %38 = sext i32 %6 to i64
  %39 = sext i32 %4 to i64
  %40 = sext i32 %7 to i64
  %41 = zext i32 %10 to i64
  %42 = zext i32 %9 to i64
  %43 = zext i32 %8 to i64
  %44 = sext i32 %8 to i64
  %45 = sext i32 %9 to i64
  %46 = sext i32 %10 to i64
  %47 = zext i32 %13 to i64
  %48 = zext i32 %12 to i64
  %49 = zext i32 %11 to i64
  br label %50

50:                                               ; preds = %63, %24
  %51 = phi i64 [ 0, %24 ], [ %65, %63 ]
  %52 = phi i8* [ %0, %24 ], [ %64, %63 ]
  br i1 %25, label %53, label %63

53:                                               ; preds = %50
  %54 = mul nsw i64 %51, %46
  %55 = trunc i64 %54 to i32
  br label %57

56:                                               ; preds = %63, %15
  tail call void @_Z26term_block_size_descriptorP21block_size_descriptor(%struct.block_size_descriptor* nonnull %18) #4
  tail call void @_ZdlPv(i8* nonnull %21) #5
  tail call void @_ZdlPv(i8* nonnull %19) #5
  tail call void @_ZdlPv(i8* nonnull %17) #5
  ret void

57:                                               ; preds = %67, %53
  %58 = phi i64 [ 0, %53 ], [ %69, %67 ]
  %59 = phi i8* [ %52, %53 ], [ %68, %67 ]
  br i1 %26, label %60, label %67

60:                                               ; preds = %57
  %61 = mul nsw i64 %58, %45
  %62 = trunc i64 %61 to i32
  br label %71

63:                                               ; preds = %67, %50
  %64 = phi i8* [ %52, %50 ], [ %68, %67 ]
  %65 = add nuw nsw i64 %51, 1
  %66 = icmp eq i64 %65, %47
  br i1 %66, label %56, label %50

67:                                               ; preds = %200, %57
  %68 = phi i8* [ %59, %57 ], [ %202, %200 ]
  %69 = add nuw nsw i64 %58, 1
  %70 = icmp eq i64 %69, %48
  br i1 %70, label %63, label %57

71:                                               ; preds = %200, %60
  %72 = phi i64 [ 0, %60 ], [ %201, %200 ]
  %73 = phi i8* [ %59, %60 ], [ %202, %200 ]
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %73, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  tail call void @_Z20physical_to_symbolicPK21block_size_descriptor25physical_compressed_blockP25symbolic_compressed_block(%struct.block_size_descriptor* nonnull %18, i64 %75, i64 %78, %struct.symbolic_compressed_block* nonnull %22) #4
  %79 = mul nsw i64 %72, %44
  %80 = trunc i64 %79 to i32
  tail call void @_Z25decompress_symbolic_block16astc_decode_modePK21block_size_descriptoriiiPK25symbolic_compressed_blockP10imageblock(i32 %16, %struct.block_size_descriptor* nonnull %18, i32 %80, i32 %62, i32 %55, %struct.symbolic_compressed_block* nonnull %22, %struct.imageblock* nonnull %20) #4
  br i1 %27, label %81, label %200

81:                                               ; preds = %71, %99
  %82 = phi i64 [ %102, %99 ], [ 0, %71 ]
  %83 = phi float* [ %101, %99 ], [ %29, %71 ]
  %84 = phi i8* [ %100, %99 ], [ %28, %71 ]
  br i1 %30, label %85, label %99

85:                                               ; preds = %81
  %86 = add nsw i64 %82, %54
  %87 = icmp slt i64 %86, %39
  %88 = mul nsw i64 %86, %40
  br label %89

89:                                               ; preds = %106, %85
  %90 = phi i64 [ 0, %85 ], [ %109, %106 ]
  %91 = phi float* [ %83, %85 ], [ %108, %106 ]
  %92 = phi i8* [ %84, %85 ], [ %107, %106 ]
  br i1 %31, label %93, label %106

93:                                               ; preds = %89
  %94 = add nsw i64 %90, %61
  %95 = or i64 %94, %86
  %96 = icmp slt i64 %94, %37
  %97 = mul nsw i64 %94, %38
  %98 = add nsw i64 %97, %88
  br label %111

99:                                               ; preds = %106, %81
  %100 = phi i8* [ %84, %81 ], [ %107, %106 ]
  %101 = phi float* [ %83, %81 ], [ %108, %106 ]
  %102 = add nuw nsw i64 %82, 1
  %103 = icmp eq i64 %102, %41
  br i1 %103, label %200, label %81

104:                                              ; preds = %195
  %105 = getelementptr i8, i8* %92, i64 %36
  br label %106

106:                                              ; preds = %104, %89
  %107 = phi i8* [ %92, %89 ], [ %105, %104 ]
  %108 = phi float* [ %91, %89 ], [ %196, %104 ]
  %109 = add nuw nsw i64 %90, 1
  %110 = icmp eq i64 %109, %42
  br i1 %110, label %99, label %89

111:                                              ; preds = %195, %93
  %112 = phi i64 [ 0, %93 ], [ %198, %195 ]
  %113 = phi float* [ %91, %93 ], [ %196, %195 ]
  %114 = phi i8* [ %92, %93 ], [ %197, %195 ]
  %115 = add nsw i64 %112, %79
  %116 = or i64 %95, %115
  %117 = trunc i64 %116 to i32
  %118 = icmp sgt i32 %117, -1
  %119 = icmp slt i64 %115, %32
  %120 = and i1 %119, %118
  %121 = and i1 %96, %120
  %122 = and i1 %87, %121
  br i1 %122, label %123, label %195

123:                                              ; preds = %111
  %124 = mul nsw i64 %115, %33
  %125 = add nsw i64 %98, %124
  %126 = getelementptr inbounds i8, i8* %1, i64 %125
  %127 = load i8, i8* %114, align 1
  %128 = icmp ne i8 %127, 0
  br i1 %14, label %129, label %173

129:                                              ; preds = %123
  br i1 %128, label %130, label %134

130:                                              ; preds = %129
  store i8 -1, i8* %126, align 1
  %131 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 0, i8* %131, align 1
  %132 = getelementptr inbounds i8, i8* %126, i64 2
  store i8 -1, i8* %132, align 1
  %133 = getelementptr inbounds i8, i8* %126, i64 3
  store i8 -1, i8* %133, align 1
  br label %195

134:                                              ; preds = %129
  %135 = load float, float* %113, align 4
  %136 = fcmp olt float %135, 0.000000e+00
  %137 = select i1 %136, float 0.000000e+00, float %135
  %138 = fcmp ogt float %137, 1.000000e+00
  %139 = select i1 %138, float 1.000000e+00, float %137
  %140 = fmul float %139, 2.550000e+02
  %141 = fadd float %140, 5.000000e-01
  %142 = fptoui float %141 to i8
  store i8 %142, i8* %126, align 1
  %143 = getelementptr inbounds float, float* %113, i64 1
  %144 = load float, float* %143, align 4
  %145 = fcmp olt float %144, 0.000000e+00
  %146 = select i1 %145, float 0.000000e+00, float %144
  %147 = fcmp ogt float %146, 1.000000e+00
  %148 = select i1 %147, float 1.000000e+00, float %146
  %149 = fmul float %148, 2.550000e+02
  %150 = fadd float %149, 5.000000e-01
  %151 = fptoui float %150 to i8
  %152 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %151, i8* %152, align 1
  %153 = getelementptr inbounds float, float* %113, i64 2
  %154 = load float, float* %153, align 4
  %155 = fcmp olt float %154, 0.000000e+00
  %156 = select i1 %155, float 0.000000e+00, float %154
  %157 = fcmp ogt float %156, 1.000000e+00
  %158 = select i1 %157, float 1.000000e+00, float %156
  %159 = fmul float %158, 2.550000e+02
  %160 = fadd float %159, 5.000000e-01
  %161 = fptoui float %160 to i8
  %162 = getelementptr inbounds i8, i8* %126, i64 2
  store i8 %161, i8* %162, align 1
  %163 = getelementptr inbounds float, float* %113, i64 3
  %164 = load float, float* %163, align 4
  %165 = fcmp olt float %164, 0.000000e+00
  %166 = select i1 %165, float 0.000000e+00, float %164
  %167 = fcmp ogt float %166, 1.000000e+00
  %168 = select i1 %167, float 1.000000e+00, float %166
  %169 = fmul float %168, 2.550000e+02
  %170 = fadd float %169, 5.000000e-01
  %171 = fptoui float %170 to i8
  %172 = getelementptr inbounds i8, i8* %126, i64 3
  store i8 %171, i8* %172, align 1
  br label %195

173:                                              ; preds = %123
  br i1 %128, label %174, label %176

174:                                              ; preds = %173
  %175 = bitcast i8* %126 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %175, align 4
  br label %195

176:                                              ; preds = %173
  %177 = bitcast float* %113 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = bitcast i8* %126 to i32*
  store i32 %178, i32* %179, align 4
  %180 = getelementptr inbounds float, float* %113, i64 1
  %181 = bitcast float* %180 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds i8, i8* %126, i64 4
  %184 = bitcast i8* %183 to i32*
  store i32 %182, i32* %184, align 4
  %185 = getelementptr inbounds float, float* %113, i64 2
  %186 = bitcast float* %185 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = getelementptr inbounds i8, i8* %126, i64 8
  %189 = bitcast i8* %188 to i32*
  store i32 %187, i32* %189, align 4
  %190 = getelementptr inbounds float, float* %113, i64 3
  %191 = bitcast float* %190 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds i8, i8* %126, i64 12
  %194 = bitcast i8* %193 to i32*
  store i32 %192, i32* %194, align 4
  br label %195

195:                                              ; preds = %176, %174, %134, %130, %111
  %196 = getelementptr inbounds float, float* %113, i64 4
  %197 = getelementptr inbounds i8, i8* %114, i64 1
  %198 = add nuw nsw i64 %112, 1
  %199 = icmp eq i64 %198, %43
  br i1 %199, label %104, label %111

200:                                              ; preds = %99, %71
  %201 = add nuw nsw i64 %72, 1
  %202 = getelementptr inbounds i8, i8* %73, i64 16
  %203 = icmp eq i64 %201, %49
  br i1 %203, label %67, label %71
}

; Function Attrs: optsize
declare void @_Z29build_quantization_mode_tablev() local_unnamed_addr #1

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_Z26init_block_size_descriptoriiiP21block_size_descriptor(i32, i32, i32, %struct.block_size_descriptor*) local_unnamed_addr #1

; Function Attrs: optsize
declare void @_Z20physical_to_symbolicPK21block_size_descriptor25physical_compressed_blockP25symbolic_compressed_block(%struct.block_size_descriptor*, i64, i64, %struct.symbolic_compressed_block*) local_unnamed_addr #1

; Function Attrs: optsize
declare void @_Z25decompress_symbolic_block16astc_decode_modePK21block_size_descriptoriiiPK25symbolic_compressed_blockP10imageblock(i32, %struct.block_size_descriptor*, i32, i32, i32, %struct.symbolic_compressed_block*, %struct.imageblock*) local_unnamed_addr #1

; Function Attrs: optsize
declare void @_Z26term_block_size_descriptorP21block_size_descriptor(%struct.block_size_descriptor*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize }
attributes #5 = { builtin nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
