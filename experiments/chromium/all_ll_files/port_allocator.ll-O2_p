; ModuleID = '../../third_party/blink/renderer/platform/p2p/port_allocator.cc'
source_filename = "../../third_party/blink/renderer/platform/p2p/port_allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::P2PPortAllocator" = type { %"class.cricket::BasicPortAllocator", %"class.std::__1::unique_ptr.64", %"struct.blink::P2PPortAllocator::Config", %class.GURL }
%"class.cricket::BasicPortAllocator" = type { %"class.cricket::PortAllocator.base", %"class.rtc::NetworkManager"*, %"class.rtc::PacketSocketFactory"*, i32, %"class.cricket::RelayPortFactoryInterface"*, %"class.std::__1::unique_ptr.58" }
%"class.cricket::PortAllocator.base" = type <{ %"class.sigslot::has_slots", %"class.sigslot::signal_with_thread_policy", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"struct.rtc::ProxyInfo", i32, i32, i32, i32, i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.webrtc::SequenceChecker", [7 x i8], %"class.std::__1::set.18", %"class.std::__1::vector", i32, [4 x i8], %"class.std::__1::vector.47", i8, [3 x i8], i32, %"class.webrtc::TurnCustomizer"*, %"class.absl::optional", i8 }>
%"class.sigslot::has_slots" = type { %"class.sigslot::has_slots_interface", %"class.std::__1::set" }
%"class.sigslot::has_slots_interface" = type { i32 (...)**, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::_signal_base_interface" = type { void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.sigslot::signal_with_thread_policy" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::_signal_base.base" = type <{ %"class.sigslot::_signal_base_interface", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.4" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"struct.rtc::ProxyInfo" = type { i32, [4 x i8], %"class.rtc::SocketAddress", %"class.std::__1::basic_string", i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.rtc::CryptString" }
%"class.rtc::SocketAddress" = type <{ %"class.std::__1::basic_string", %"class.rtc::IPAddress", i16, [2 x i8], i32, i8, [7 x i8] }>
%"class.rtc::IPAddress" = type <{ i32 (...)**, i32, %union.anon.13, [4 x i8] }>
%union.anon.13 = type { %struct.in6_addr }
%struct.in6_addr = type { %union.anon.14 }
%union.anon.14 = type { [4 x i32] }
%"class.rtc::CryptString" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.rtc::CryptStringImpl"* }
%"class.rtc::CryptStringImpl" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::SequenceChecker" = type { i8 }
%"class.std::__1::set.18" = type { %"class.std::__1::__tree.19" }
%"class.std::__1::__tree.19" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cricket::RelayServerConfig"*, %"struct.cricket::RelayServerConfig"*, %"class.std::__1::__compressed_pair.42" }
%"struct.cricket::RelayServerConfig" = type { %"class.std::__1::vector.28", %"struct.cricket::RelayCredentials", i32, i32, %"class.std::__1::vector.35", %"class.std::__1::vector.35", %"class.rtc::SSLCertificateVerifier"*, %"class.std::__1::basic_string" }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"struct.cricket::ProtocolAddress"*, %"struct.cricket::ProtocolAddress"*, %"class.std::__1::__compressed_pair.30" }
%"struct.cricket::ProtocolAddress" = type { %"class.rtc::SocketAddress", i32, [4 x i8] }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.cricket::ProtocolAddress"* }
%"struct.cricket::RelayCredentials" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::basic_string"* }
%"class.rtc::SSLCertificateVerifier" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.cricket::RelayServerConfig"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"class.std::__1::unique_ptr.49"*, %"class.std::__1::unique_ptr.49"*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::unique_ptr.49" = type opaque
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::unique_ptr.49"* }
%"class.webrtc::TurnCustomizer" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.55 }
%union.anon.55 = type { i32 }
%"class.cricket::RelayPortFactoryInterface" = type { i32 (...)** }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.cricket::RelayPortFactoryInterface"* }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.rtc::NetworkManager"* }
%"struct.blink::P2PPortAllocator::Config" = type { i8, i8, i8 }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.70" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %class.GURL* }
%"class.rtc::NetworkManager" = type { %"class.rtc::DefaultLocalAddressProvider", %"class.rtc::MdnsResponderProvider", %"class.sigslot::signal_with_thread_policy.56", %"class.sigslot::signal_with_thread_policy.56" }
%"class.rtc::DefaultLocalAddressProvider" = type { i32 (...)** }
%"class.rtc::MdnsResponderProvider" = type { i32 (...)** }
%"class.sigslot::signal_with_thread_policy.56" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.rtc::PacketSocketFactory" = type { i32 (...)** }
%"class.blink::Platform" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.cricket::PortAllocator" = type <{ %"class.sigslot::has_slots", %"class.sigslot::signal_with_thread_policy", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"struct.rtc::ProxyInfo", i32, i32, i32, i32, i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.webrtc::SequenceChecker", [7 x i8], %"class.std::__1::set.18", %"class.std::__1::vector", i32, [4 x i8], %"class.std::__1::vector.47", i8, [3 x i8], i32, %"class.webrtc::TurnCustomizer"*, %"class.absl::optional", i8, [7 x i8] }>
%"class.std::__1::vector.76" = type opaque
%"class.cricket::PortAllocatorSession" = type <{ %"class.sigslot::has_slots", %"class.sigslot::signal_with_thread_policy.77", %"class.sigslot::signal_with_thread_policy.79", %"class.sigslot::signal_with_thread_policy.81", %"class.sigslot::signal_with_thread_policy.83", %"class.sigslot::signal_with_thread_policy.81", %"class.sigslot::signal_with_thread_policy.85", %"class.sigslot::signal_with_thread_policy.87", %"class.sigslot::signal_with_thread_policy.85", i32, i32, %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.sigslot::signal_with_thread_policy.77" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.79" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.83" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.81" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.87" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.85" = type { %"class.sigslot::_signal_base.base", [7 x i8] }

@_ZTVN5blink16P2PPortAllocatorE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::P2PPortAllocator"*)* @_ZN5blink16P2PPortAllocatorD2Ev to i8*), i8* bitcast (void (%"class.blink::P2PPortAllocator"*)* @_ZN5blink16P2PPortAllocatorD0Ev to i8*), i8* bitcast (void (%"class.blink::P2PPortAllocator"*)* @_ZN5blink16P2PPortAllocator10InitializeEv to i8*), i8* bitcast (void (%"class.cricket::PortAllocator"*, i1)* @_ZN7cricket13PortAllocator35set_restrict_ice_credentials_changeEb to i8*), i8* bitcast (void (%"class.cricket::BasicPortAllocator"*, i32)* @_ZN7cricket18BasicPortAllocator20SetNetworkIgnoreMaskEi to i8*), i8* bitcast (void (%"class.cricket::PortAllocator"*, %"class.std::__1::vector.76"*)* @_ZN7cricket13PortAllocator35GetCandidateStatsFromPooledSessionsEPNSt3__16vectorINS_14CandidateStatsENS1_9allocatorIS3_EEEE to i8*), i8* bitcast (%"class.cricket::PortAllocatorSession"* (%"class.cricket::BasicPortAllocator"*, %"class.std::__1::basic_string"*, i32, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*)* @_ZN7cricket18BasicPortAllocator21CreateSessionInternalERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_S9_ to i8*), i8* bitcast (i1 (%"class.cricket::BasicPortAllocator"*)* @_ZNK7cricket18BasicPortAllocator22MdnsObfuscationEnabledEv to i8*)] }, align 8

@_ZN5blink16P2PPortAllocatorC1ENSt3__110unique_ptrIN3rtc14NetworkManagerENS1_14default_deleteIS4_EEEEPNS3_19PacketSocketFactoryERKNS0_6ConfigERK4GURL = hidden unnamed_addr alias void (%"class.blink::P2PPortAllocator"*, %"class.rtc::NetworkManager"*, %"class.rtc::PacketSocketFactory"*, %"struct.blink::P2PPortAllocator::Config"*, %class.GURL*), void (%"class.blink::P2PPortAllocator"*, %"class.rtc::NetworkManager"*, %"class.rtc::PacketSocketFactory"*, %"struct.blink::P2PPortAllocator::Config"*, %class.GURL*)* @_ZN5blink16P2PPortAllocatorC2ENSt3__110unique_ptrIN3rtc14NetworkManagerENS1_14default_deleteIS4_EEEEPNS3_19PacketSocketFactoryERKNS0_6ConfigERK4GURL
@_ZN5blink16P2PPortAllocatorD1Ev = hidden unnamed_addr alias void (%"class.blink::P2PPortAllocator"*), void (%"class.blink::P2PPortAllocator"*)* @_ZN5blink16P2PPortAllocatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16P2PPortAllocatorC2ENSt3__110unique_ptrIN3rtc14NetworkManagerENS1_14default_deleteIS4_EEEEPNS3_19PacketSocketFactoryERKNS0_6ConfigERK4GURL(%"class.blink::P2PPortAllocator"*, %"class.rtc::NetworkManager"*, %"class.rtc::PacketSocketFactory"*, %"struct.blink::P2PPortAllocator::Config"* nocapture readonly dereferenceable(3), %class.GURL* dereferenceable(120)) unnamed_addr #0 align 2 {
  %6 = ptrtoint %"class.rtc::NetworkManager"* %1 to i64
  %7 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0
  tail call void @_ZN7cricket18BasicPortAllocatorC2EPN3rtc14NetworkManagerEPNS1_19PacketSocketFactoryEPN6webrtc14TurnCustomizerEPNS_25RelayPortFactoryInterfaceE(%"class.cricket::BasicPortAllocator"* %7, %"class.rtc::NetworkManager"* %1, %"class.rtc::PacketSocketFactory"* %2, %"class.webrtc::TurnCustomizer"* null, %"class.cricket::RelayPortFactoryInterface"* null) #5
  %8 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink16P2PPortAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 1
  %10 = bitcast %"class.std::__1::unique_ptr.64"* %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 2, i32 0
  %12 = getelementptr inbounds %"struct.blink::P2PPortAllocator::Config", %"struct.blink::P2PPortAllocator::Config"* %3, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 %12, i64 3, i1 false)
  %13 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 3
  tail call void @_ZN4GURLC1ERKS_(%class.GURL* %13, %class.GURL* dereferenceable(120) %4) #5
  %14 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 2, i32 1
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i32 1024, i32 0
  %18 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 2, i32 2
  %19 = load i8, i8* %18, align 2, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = or i32 %17, 2048
  %22 = select i1 %20, i32 %21, i32 %17
  %23 = load i8, i8* %11, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = or i32 %22, 4099
  %26 = select i1 %24, i32 %25, i32 %22
  %27 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 4
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 11
  store i8 0, i8* %28, align 8
  %29 = tail call %"class.blink::Platform"* @_ZN5blink8Platform7CurrentEv() #5
  %30 = bitcast %"class.blink::Platform"* %29 to i1 (%"class.blink::Platform"*)***
  %31 = load i1 (%"class.blink::Platform"*)**, i1 (%"class.blink::Platform"*)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.blink::Platform"*)*, i1 (%"class.blink::Platform"*)** %31, i64 74
  %33 = load i1 (%"class.blink::Platform"*)*, i1 (%"class.blink::Platform"*)** %32, align 8
  %34 = tail call zeroext i1 %33(%"class.blink::Platform"* %29) #5
  br i1 %34, label %35, label %68

35:                                               ; preds = %5
  %36 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL* %13) #5
  %37 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 14
  %38 = icmp eq %"class.std::__1::basic_string"* %37, %36
  br i1 %38, label %68, label %39

39:                                               ; preds = %35
  %40 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  %44 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %43, label %58, label %48

48:                                               ; preds = %39
  br i1 %47, label %52, label %49

49:                                               ; preds = %48
  %50 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %51 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 24, i1 false) #5
  br label %68

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %37, i8* %54, i64 %56) #5
  br label %68

58:                                               ; preds = %39
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  %64 = zext i8 %46 to i64
  %65 = select i1 %47, i8* %60, i8* %63
  %66 = select i1 %47, i64 %62, i64 %64
  %67 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %37, i8* %65, i64 %66) #5
  br label %68

68:                                               ; preds = %5, %35, %49, %52, %58
  ret void
}

declare void @_ZN7cricket18BasicPortAllocatorC2EPN3rtc14NetworkManagerEPNS1_19PacketSocketFactoryEPN6webrtc14TurnCustomizerEPNS_25RelayPortFactoryInterfaceE(%"class.cricket::BasicPortAllocator"*, %"class.rtc::NetworkManager"*, %"class.rtc::PacketSocketFactory"*, %"class.webrtc::TurnCustomizer"*, %"class.cricket::RelayPortFactoryInterface"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN4GURLC1ERKS_(%class.GURL*, %class.GURL* dereferenceable(120)) unnamed_addr #1

declare %"class.blink::Platform"* @_ZN5blink8Platform7CurrentEv() local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4GURL4specEv(%class.GURL*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16P2PPortAllocatorD2Ev(%"class.blink::P2PPortAllocator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink16P2PPortAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 3
  tail call void @_ZN4GURLD1Ev(%class.GURL* %3) #5
  %4 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.rtc::NetworkManager"*, %"class.rtc::NetworkManager"** %4, align 8
  store %"class.rtc::NetworkManager"* null, %"class.rtc::NetworkManager"** %4, align 8
  %6 = icmp eq %"class.rtc::NetworkManager"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.rtc::NetworkManager"* %5 to void (%"class.rtc::NetworkManager"*)***
  %9 = load void (%"class.rtc::NetworkManager"*)**, void (%"class.rtc::NetworkManager"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %9, i64 1
  %11 = load void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %10, align 8
  tail call void %11(%"class.rtc::NetworkManager"* nonnull %5) #5
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0
  tail call void @_ZN7cricket18BasicPortAllocatorD2Ev(%"class.cricket::BasicPortAllocator"* %13) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4GURLD1Ev(%class.GURL*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7cricket18BasicPortAllocatorD2Ev(%"class.cricket::BasicPortAllocator"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16P2PPortAllocatorD0Ev(%"class.blink::P2PPortAllocator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink16P2PPortAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 3
  tail call void @_ZN4GURLD1Ev(%class.GURL* %3) #5
  %4 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.rtc::NetworkManager"*, %"class.rtc::NetworkManager"** %4, align 8
  store %"class.rtc::NetworkManager"* null, %"class.rtc::NetworkManager"** %4, align 8
  %6 = icmp eq %"class.rtc::NetworkManager"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.rtc::NetworkManager"* %5 to void (%"class.rtc::NetworkManager"*)***
  %9 = load void (%"class.rtc::NetworkManager"*)**, void (%"class.rtc::NetworkManager"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %9, i64 1
  %11 = load void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %10, align 8
  tail call void %11(%"class.rtc::NetworkManager"* nonnull %5) #5
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 0
  tail call void @_ZN7cricket18BasicPortAllocatorD2Ev(%"class.cricket::BasicPortAllocator"* %13) #5
  %14 = bitcast %"class.blink::P2PPortAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16P2PPortAllocator10InitializeEv(%"class.blink::P2PPortAllocator"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::P2PPortAllocator"* %0 to %"class.cricket::PortAllocator"*
  tail call void @_ZN7cricket13PortAllocator10InitializeEv(%"class.cricket::PortAllocator"* %2) #5
  %3 = getelementptr inbounds %"class.blink::P2PPortAllocator", %"class.blink::P2PPortAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.rtc::NetworkManager"*, %"class.rtc::NetworkManager"** %3, align 8
  %5 = bitcast %"class.rtc::NetworkManager"* %4 to void (%"class.rtc::NetworkManager"*)***
  %6 = load void (%"class.rtc::NetworkManager"*)**, void (%"class.rtc::NetworkManager"*)*** %5, align 8
  %7 = getelementptr inbounds void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %6, i64 3
  %8 = load void (%"class.rtc::NetworkManager"*)*, void (%"class.rtc::NetworkManager"*)** %7, align 8
  tail call void %8(%"class.rtc::NetworkManager"* %4) #5
  ret void
}

declare void @_ZN7cricket13PortAllocator10InitializeEv(%"class.cricket::PortAllocator"*) unnamed_addr #1

declare void @_ZN7cricket13PortAllocator35set_restrict_ice_credentials_changeEb(%"class.cricket::PortAllocator"*, i1 zeroext) unnamed_addr #1

declare void @_ZN7cricket18BasicPortAllocator20SetNetworkIgnoreMaskEi(%"class.cricket::BasicPortAllocator"*, i32) unnamed_addr #1

declare void @_ZN7cricket13PortAllocator35GetCandidateStatsFromPooledSessionsEPNSt3__16vectorINS_14CandidateStatsENS1_9allocatorIS3_EEEE(%"class.cricket::PortAllocator"*, %"class.std::__1::vector.76"*) unnamed_addr #1

declare %"class.cricket::PortAllocatorSession"* @_ZN7cricket18BasicPortAllocator21CreateSessionInternalERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiS9_S9_(%"class.cricket::BasicPortAllocator"*, %"class.std::__1::basic_string"* dereferenceable(24), i32, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1

declare zeroext i1 @_ZNK7cricket18BasicPortAllocator22MdnsObfuscationEnabledEv(%"class.cricket::BasicPortAllocator"*) unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
