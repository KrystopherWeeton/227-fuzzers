; ModuleID = '../../third_party/ffmpeg/libavformat/rawdec.c'
source_filename = "../../third_party/ffmpeg/libavformat/rawdec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, {}*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, {}*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.FFRawDemuxerContext = type { %struct.AVClass*, i32 }
%struct.FFRawVideoDemuxerContext = type { %struct.AVClass*, i32, i8*, i8*, %struct.AVRational }

@.str = private unnamed_addr constant [10 x i8] c"framerate\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"25\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"raw_packet_size\00", align 1
@ff_rawvideo_options = hidden local_unnamed_addr constant <{ { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* }, %struct.AVOption, %struct.AVOption }> <{ { i8*, i8*, i32, i32, { i8* }, double, double, i32, i8* } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 32, i32 14, { i8* } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0) }, double 0.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 8, i32 1, %union.anon { i64 1024 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption zeroinitializer }>, align 16
@ff_raw_options = hidden local_unnamed_addr constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 8, i32 1, %union.anon { i64 1024 }, double 1.000000e+00, double 0x41DFFFFFFFC00000, i32 2, i8* null }, %struct.AVOption zeroinitializer], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_raw_read_partial_packet(%struct.AVFormatContext* nocapture readonly, %struct.AVPacket*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.FFRawDemuxerContext**
  %5 = load %struct.FFRawDemuxerContext*, %struct.FFRawDemuxerContext** %4, align 8
  %6 = getelementptr inbounds %struct.FFRawDemuxerContext, %struct.FFRawDemuxerContext* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = tail call i32 @av_new_packet(%struct.AVPacket* %1, i32 %7) #2
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 4
  %12 = load %struct.AVIOContext*, %struct.AVIOContext** %11, align 8
  %13 = tail call i64 @avio_seek(%struct.AVIOContext* %12, i64 0, i32 1) #2
  %14 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 10
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 5
  store i32 0, i32* %15, align 4
  %16 = load %struct.AVIOContext*, %struct.AVIOContext** %11, align 8
  %17 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %1, i64 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = tail call i32 @avio_read_partial(%struct.AVIOContext* %16, i8* %18, i32 %7) #2
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %10
  tail call void @av_packet_unref(%struct.AVPacket* %1) #2
  br label %23

22:                                               ; preds = %10
  tail call void @av_shrink_packet(%struct.AVPacket* %1, i32 %19) #2
  br label %23

23:                                               ; preds = %2, %22, %21
  %24 = phi i32 [ %19, %21 ], [ %19, %22 ], [ %8, %2 ]
  ret i32 %24
}

declare i32 @av_new_packet(%struct.AVPacket*, i32) local_unnamed_addr #1

declare i32 @avio_read_partial(%struct.AVIOContext*, i8*, i32) local_unnamed_addr #1

declare void @av_packet_unref(%struct.AVPacket*) local_unnamed_addr #1

declare void @av_shrink_packet(%struct.AVPacket*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_raw_audio_read_header(%struct.AVFormatContext*) local_unnamed_addr #0 {
  %2 = tail call %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext* %0, %struct.AVCodec* null) #2
  %3 = icmp eq %struct.AVStream* %2, null
  br i1 %3, label %16, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 19
  %6 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %7 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %6, i64 0, i32 0
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 1
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %8, align 8
  %10 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %9, i64 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %13 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %12, i64 0, i32 1
  store i32 %11, i32* %13, align 4
  %14 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 28
  store i32 5, i32* %14, align 4
  %15 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 5
  store i64 0, i64* %15, align 8
  br label %16

16:                                               ; preds = %1, %4
  %17 = phi i32 [ 0, %4 ], [ -12, %1 ]
  ret i32 %17
}

declare %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext*, %struct.AVCodec*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_raw_video_read_header(%struct.AVFormatContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to %struct.FFRawVideoDemuxerContext**
  %4 = load %struct.FFRawVideoDemuxerContext*, %struct.FFRawVideoDemuxerContext** %3, align 8
  %5 = tail call %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext* %0, %struct.AVCodec* null) #2
  %6 = icmp eq %struct.AVStream* %5, null
  br i1 %6, label %27, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %5, i64 0, i32 19
  %9 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %8, align 8
  %10 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %9, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 1
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %11, align 8
  %13 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %12, i64 0, i32 8
  %14 = load i32, i32* %13, align 8
  %15 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %8, align 8
  %16 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %15, i64 0, i32 1
  store i32 %14, i32* %16, align 4
  %17 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %5, i64 0, i32 28
  store i32 5, i32* %17, align 4
  %18 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %5, i64 0, i32 40
  %19 = load %struct.AVStreamInternal*, %struct.AVStreamInternal** %18, align 8
  %20 = getelementptr inbounds %struct.AVStreamInternal, %struct.AVStreamInternal* %19, i64 0, i32 3
  %21 = load %struct.AVCodecContext*, %struct.AVCodecContext** %20, align 8
  %22 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %21, i64 0, i32 163
  %23 = getelementptr inbounds %struct.FFRawVideoDemuxerContext, %struct.FFRawVideoDemuxerContext* %4, i64 0, i32 4
  %24 = bitcast %struct.AVRational* %23 to i64*
  %25 = bitcast %struct.AVRational* %22 to i64*
  %26 = load i64, i64* %24, align 8
  store i64 %26, i64* %25, align 8
  tail call void @avpriv_set_pts_info(%struct.AVStream* nonnull %5, i32 64, i32 1, i32 1200000) #2
  br label %27

27:                                               ; preds = %1, %7
  %28 = phi i32 [ 0, %7 ], [ -12, %1 ]
  ret i32 %28
}

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_raw_subtitle_read_header(%struct.AVFormatContext*) local_unnamed_addr #0 {
  %2 = tail call %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext* %0, %struct.AVCodec* null) #2
  %3 = icmp eq %struct.AVStream* %2, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 19
  %6 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %7 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %6, i64 0, i32 0
  store i32 3, i32* %7, align 8
  %8 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 1
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %8, align 8
  %10 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %9, i64 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %13 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %12, i64 0, i32 1
  store i32 %11, i32* %13, align 4
  %14 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 5
  store i64 0, i64* %14, align 8
  br label %15

15:                                               ; preds = %1, %4
  %16 = phi i32 [ 0, %4 ], [ -12, %1 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_raw_data_read_header(%struct.AVFormatContext*) local_unnamed_addr #0 {
  %2 = tail call %struct.AVStream* @avformat_new_stream(%struct.AVFormatContext* %0, %struct.AVCodec* null) #2
  %3 = icmp eq %struct.AVStream* %2, null
  br i1 %3, label %15, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 19
  %6 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %7 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %6, i64 0, i32 0
  store i32 2, i32* %7, align 8
  %8 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 1
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %8, align 8
  %10 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %9, i64 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %5, align 8
  %13 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %12, i64 0, i32 1
  store i32 %11, i32* %13, align 4
  %14 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %2, i64 0, i32 5
  store i64 0, i64* %14, align 8
  br label %15

15:                                               ; preds = %1, %4
  %16 = phi i32 [ 0, %4 ], [ -12, %1 ]
  ret i32 %16
}

declare i64 @avio_seek(%struct.AVIOContext*, i64, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
