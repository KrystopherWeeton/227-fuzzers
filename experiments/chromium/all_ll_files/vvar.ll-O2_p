; ModuleID = '../../third_party/ots/src/src/vvar.cc'
source_filename = "../../third_party/ots/src/src/vvar.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeVVAR" = type { %"class.ots::Table.base", i8*, i64 }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.std::__1::vector" = type opaque
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN3ots5TableD2Ev = comdat any

$_ZN3ots12OpenTypeVVARD0Ev = comdat any

@.str = private unnamed_addr constant [28 x i8] c"Failed to read table header\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Unknown table version\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Invalid subtable offset\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"Failed to parse item variation store\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"Failed to parse advance height mappings\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"Failed to parse TSB mappings\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Failed to parse BSB mappings\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"Failed to parse vOrg mappings\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"Failed to write VVAR table\00", align 1
@_ZTVN3ots12OpenTypeVVARE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::Table"*)* @_ZN3ots5TableD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeVVAR"*)* @_ZN3ots12OpenTypeVVARD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeVVAR"*, i8*, i64)* @_ZN3ots12OpenTypeVVAR5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeVVAR"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeVVAR9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::Table"*)* @_ZN3ots5Table15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeVVAR5ParseEPKhm(%"class.ots::OpenTypeVVAR"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = icmp ult i64 %2, 2
  br i1 %4, label %33, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %1 to i16*
  %7 = load i16, i16* %6, align 1
  %8 = icmp ult i64 %2, 8
  br i1 %8, label %33, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %1, i64 4
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = tail call i32 @llvm.bswap.i32(i32 %12) #6
  %14 = icmp ult i64 %2, 12
  br i1 %14, label %33, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds i8, i8* %1, i64 8
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = tail call i32 @llvm.bswap.i32(i32 %18) #6
  %20 = icmp ult i64 %2, 16
  br i1 %20, label %33, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds i8, i8* %1, i64 12
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = tail call i32 @llvm.bswap.i32(i32 %24) #6
  %26 = icmp ult i64 %2, 20
  br i1 %26, label %33, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds i8, i8* %1, i64 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = tail call i32 @llvm.bswap.i32(i32 %30) #6
  %32 = icmp ult i64 %2, 24
  br i1 %32, label %33, label %36

33:                                               ; preds = %5, %27, %21, %15, %9, %3
  %34 = bitcast %"class.ots::OpenTypeVVAR"* %0 to %"class.ots::Table"*
  %35 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %34, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0)) #6
  br label %111

36:                                               ; preds = %27
  %37 = getelementptr inbounds i8, i8* %1, i64 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = tail call i32 @llvm.bswap.i32(i32 %39) #6
  %41 = icmp eq i16 %7, 256
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = bitcast %"class.ots::OpenTypeVVAR"* %0 to %"class.ots::Table"*
  %44 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %43, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %111

45:                                               ; preds = %36
  %46 = zext i32 %13 to i64
  %47 = icmp ugt i64 %46, %2
  br i1 %47, label %60, label %48

48:                                               ; preds = %45
  %49 = zext i32 %19 to i64
  %50 = icmp ugt i64 %49, %2
  br i1 %50, label %60, label %51

51:                                               ; preds = %48
  %52 = zext i32 %25 to i64
  %53 = icmp ugt i64 %52, %2
  br i1 %53, label %60, label %54

54:                                               ; preds = %51
  %55 = zext i32 %31 to i64
  %56 = icmp ugt i64 %55, %2
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = zext i32 %40 to i64
  %59 = icmp ugt i64 %58, %2
  br i1 %59, label %60, label %63

60:                                               ; preds = %57, %54, %51, %48, %45
  %61 = bitcast %"class.ots::OpenTypeVVAR"* %0 to %"class.ots::Table"*
  %62 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %61, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %111

63:                                               ; preds = %57
  %64 = bitcast %"class.ots::OpenTypeVVAR"* %0 to %"class.ots::Table"*
  %65 = getelementptr inbounds %"class.ots::OpenTypeVVAR", %"class.ots::OpenTypeVVAR"* %0, i64 0, i32 0, i32 3
  %66 = load %"struct.ots::Font"*, %"struct.ots::Font"** %65, align 8
  %67 = getelementptr inbounds i8, i8* %1, i64 %46
  %68 = sub i64 %2, %46
  %69 = tail call zeroext i1 @_ZN3ots23ParseItemVariationStoreEPKNS_4FontEPKhmPNSt3__16vectorItNS5_9allocatorItEEEE(%"struct.ots::Font"* %66, i8* %67, i64 %68, %"class.std::__1::vector"* null) #6
  br i1 %69, label %72, label %70

70:                                               ; preds = %63
  %71 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %64, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %111

72:                                               ; preds = %63
  %73 = icmp eq i32 %18, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %72
  %75 = load %"struct.ots::Font"*, %"struct.ots::Font"** %65, align 8
  %76 = getelementptr inbounds i8, i8* %1, i64 %49
  %77 = sub i64 %2, %49
  %78 = tail call zeroext i1 @_ZN3ots21ParseDeltaSetIndexMapEPKNS_4FontEPKhm(%"struct.ots::Font"* %75, i8* %76, i64 %77) #6
  br i1 %78, label %81, label %79

79:                                               ; preds = %74
  %80 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %64, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %111

81:                                               ; preds = %72, %74
  %82 = icmp eq i32 %24, 0
  br i1 %82, label %90, label %83

83:                                               ; preds = %81
  %84 = load %"struct.ots::Font"*, %"struct.ots::Font"** %65, align 8
  %85 = getelementptr inbounds i8, i8* %1, i64 %52
  %86 = sub i64 %2, %52
  %87 = tail call zeroext i1 @_ZN3ots21ParseDeltaSetIndexMapEPKNS_4FontEPKhm(%"struct.ots::Font"* %84, i8* %85, i64 %86) #6
  br i1 %87, label %90, label %88

88:                                               ; preds = %83
  %89 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %64, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0)) #6
  br label %111

90:                                               ; preds = %81, %83
  %91 = icmp eq i32 %30, 0
  br i1 %91, label %99, label %92

92:                                               ; preds = %90
  %93 = load %"struct.ots::Font"*, %"struct.ots::Font"** %65, align 8
  %94 = getelementptr inbounds i8, i8* %1, i64 %55
  %95 = sub i64 %2, %55
  %96 = tail call zeroext i1 @_ZN3ots21ParseDeltaSetIndexMapEPKNS_4FontEPKhm(%"struct.ots::Font"* %93, i8* %94, i64 %95) #6
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %64, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0)) #6
  br label %111

99:                                               ; preds = %90, %92
  %100 = icmp eq i32 %39, 0
  br i1 %100, label %108, label %101

101:                                              ; preds = %99
  %102 = load %"struct.ots::Font"*, %"struct.ots::Font"** %65, align 8
  %103 = getelementptr inbounds i8, i8* %1, i64 %58
  %104 = sub i64 %2, %58
  %105 = tail call zeroext i1 @_ZN3ots21ParseDeltaSetIndexMapEPKNS_4FontEPKhm(%"struct.ots::Font"* %102, i8* %103, i64 %104) #6
  br i1 %105, label %108, label %106

106:                                              ; preds = %101
  %107 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"* %64, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %111

108:                                              ; preds = %99, %101
  %109 = getelementptr inbounds %"class.ots::OpenTypeVVAR", %"class.ots::OpenTypeVVAR"* %0, i64 0, i32 1
  store i8* %1, i8** %109, align 8
  %110 = getelementptr inbounds %"class.ots::OpenTypeVVAR", %"class.ots::OpenTypeVVAR"* %0, i64 0, i32 2
  store i64 %2, i64* %110, align 8
  br label %111

111:                                              ; preds = %108, %106, %97, %88, %79, %70, %60, %42, %33
  %112 = phi i1 [ %44, %42 ], [ %62, %60 ], [ true, %108 ], [ %107, %106 ], [ %98, %97 ], [ %89, %88 ], [ %80, %79 ], [ %71, %70 ], [ %35, %33 ]
  ret i1 %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3ots5Table14DropVariationsEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots23ParseItemVariationStoreEPKNS_4FontEPKhmPNSt3__16vectorItNS5_9allocatorItEEEE(%"struct.ots::Font"*, i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots21ParseDeltaSetIndexMapEPKNS_4FontEPKhm(%"struct.ots::Font"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeVVAR9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeVVAR"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.ots::OpenTypeVVAR", %"class.ots::OpenTypeVVAR"* %0, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.ots::OpenTypeVVAR", %"class.ots::OpenTypeVVAR"* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %113, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %12 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %11, align 8
  %13 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %12, i64 4
  %14 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %13, align 8
  %15 = tail call i64 %14(%"class.ots::OTSStream"* %1) #6
  %16 = and i64 %15, 3
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %10
  %19 = sub nuw nsw i64 4, %16
  %20 = icmp ult i64 %19, %8
  %21 = select i1 %20, i64 %19, i64 %8
  %22 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #6
  store i32 0, i32* %3, align 4
  %23 = getelementptr inbounds i8, i8* %22, i64 %16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %6, i64 %21, i1 false) #6
  %24 = load i32, i32* %3, align 4
  %25 = tail call i32 @llvm.bswap.i32(i32 %24) #6
  %26 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, %25
  store i32 %28, i32* %26, align 8
  %29 = sub i64 %8, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #6
  br label %30

30:                                               ; preds = %18, %10
  %31 = phi i64 [ %8, %10 ], [ %29, %18 ]
  %32 = phi i64 [ 0, %10 ], [ %21, %18 ]
  %33 = icmp ugt i64 %31, 3
  br i1 %33, label %34, label %95

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = add i64 %31, -4
  %38 = lshr i64 %37, 2
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %34, %42
  %43 = phi i32 [ %51, %42 ], [ %36, %34 ]
  %44 = phi i64 [ %53, %42 ], [ %32, %34 ]
  %45 = phi i64 [ %52, %42 ], [ %31, %34 ]
  %46 = phi i64 [ %54, %42 ], [ %40, %34 ]
  %47 = getelementptr inbounds i8, i8* %6, i64 %44
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 1
  %50 = tail call i32 @llvm.bswap.i32(i32 %49) #6
  %51 = add i32 %50, %43
  store i32 %51, i32* %35, align 8
  %52 = add i64 %45, -4
  %53 = add i64 %44, 4
  %54 = add i64 %46, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %42, !llvm.loop !2

56:                                               ; preds = %42, %34
  %57 = phi i32 [ %36, %34 ], [ %51, %42 ]
  %58 = phi i64 [ %32, %34 ], [ %53, %42 ]
  %59 = phi i64 [ %31, %34 ], [ %52, %42 ]
  %60 = phi i64 [ undef, %34 ], [ %53, %42 ]
  %61 = icmp ult i64 %37, 12
  br i1 %61, label %92, label %62

62:                                               ; preds = %56, %62
  %63 = phi i32 [ %88, %62 ], [ %57, %56 ]
  %64 = phi i64 [ %90, %62 ], [ %58, %56 ]
  %65 = phi i64 [ %89, %62 ], [ %59, %56 ]
  %66 = getelementptr inbounds i8, i8* %6, i64 %64
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = tail call i32 @llvm.bswap.i32(i32 %68) #6
  %70 = add i32 %69, %63
  store i32 %70, i32* %35, align 8
  %71 = add i64 %64, 4
  %72 = getelementptr inbounds i8, i8* %6, i64 %71
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 1
  %75 = tail call i32 @llvm.bswap.i32(i32 %74) #6
  %76 = add i32 %75, %70
  store i32 %76, i32* %35, align 8
  %77 = add i64 %64, 8
  %78 = getelementptr inbounds i8, i8* %6, i64 %77
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 1
  %81 = tail call i32 @llvm.bswap.i32(i32 %80) #6
  %82 = add i32 %81, %76
  store i32 %82, i32* %35, align 8
  %83 = add i64 %64, 12
  %84 = getelementptr inbounds i8, i8* %6, i64 %83
  %85 = bitcast i8* %84 to i32*
  %86 = load i32, i32* %85, align 1
  %87 = tail call i32 @llvm.bswap.i32(i32 %86) #6
  %88 = add i32 %87, %82
  store i32 %88, i32* %35, align 8
  %89 = add i64 %65, -16
  %90 = add i64 %64, 16
  %91 = icmp ugt i64 %89, 3
  br i1 %91, label %62, label %92

92:                                               ; preds = %62, %56
  %93 = phi i64 [ %60, %56 ], [ %90, %62 ]
  %94 = and i64 %31, 3
  br label %95

95:                                               ; preds = %92, %30
  %96 = phi i64 [ %31, %30 ], [ %94, %92 ]
  %97 = phi i64 [ %32, %30 ], [ %93, %92 ]
  %98 = icmp eq i64 %96, 0
  br i1 %98, label %107, label %99

99:                                               ; preds = %95
  %100 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %100)
  store i32 0, i32* %4, align 4
  %101 = getelementptr inbounds i8, i8* %6, i64 %97
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %100, i8* align 1 %101, i64 %96, i1 false) #6
  %102 = load i32, i32* %4, align 4
  %103 = tail call i32 @llvm.bswap.i32(i32 %102) #6
  %104 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %105 = load i32, i32* %104, align 8
  %106 = add i32 %105, %103
  store i32 %106, i32* %104, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %100)
  br label %107

107:                                              ; preds = %95, %99
  %108 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  %109 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %108, align 8
  %110 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %109, i64 2
  %111 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %110, align 8
  %112 = tail call zeroext i1 %111(%"class.ots::OTSStream"* %1, i8* %6, i64 %8) #6
  br i1 %112, label %116, label %113

113:                                              ; preds = %2, %107
  %114 = bitcast %"class.ots::OpenTypeVVAR"* %0 to %"class.ots::Table"*
  %115 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %114, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %116

116:                                              ; preds = %107, %113
  %117 = phi i1 [ %115, %113 ], [ true, %107 ]
  ret i1 %117
}

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots5TableD2Ev(%"class.ots::Table"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeVVARD0Ev(%"class.ots::OpenTypeVVAR"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.ots::OpenTypeVVAR"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
