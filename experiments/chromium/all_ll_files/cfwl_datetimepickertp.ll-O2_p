; ModuleID = '../../third_party/pdfium/xfa/fwl/theme/cfwl_datetimepickertp.cpp'
source_filename = "../../third_party/pdfium/xfa/fwl/theme/cfwl_datetimepickertp.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFWL_DateTimePickerTP = type { %class.CFWL_WidgetTP }
%class.CFWL_WidgetTP = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.5" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFDE_TextOut* }
%class.CFDE_TextOut = type opaque
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFGAS_GEFont* }
%class.CFGAS_GEFont = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.CFWL_WidgetTP::CColorData"* }
%"struct.CFWL_WidgetTP::CColorData" = type { [4 x i32], [4 x i32], [4 x i32], [4 x i32] }
%class.CFWL_ThemeBackground = type { %class.CFWL_ThemePart, %"class.fxcrt::UnownedPtr.17", %"class.fxcrt::UnownedPtr.21" }
%class.CFWL_ThemePart = type { %class.CFX_Matrix, %class.CFX_RectF, %"class.fxcrt::UnownedPtr", i32, i8, i8, i8, %"class.fxcrt::UnownedPtr.11" }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_RectF = type { float, float, float, float }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_RectF* }
%"class.fxcrt::UnownedPtr.11" = type { %class.CFWL_Widget* }
%class.CFWL_Widget = type { %class.IFWL_WidgetDelegate, %"class.CFWL_Widget::Properties", %class.CFX_RectF, i32, i64, %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember.13", %"class.cppgc::internal::BasicMember.14", %"class.cppgc::internal::BasicMember.15", %"class.cppgc::internal::BasicMember.16" }
%class.IFWL_WidgetDelegate = type { %"class.cppgc::GarbageCollectedMixin" }
%"class.cppgc::GarbageCollectedMixin" = type { i32 (...)** }
%"class.CFWL_Widget::Properties" = type { i32, i32, i32 }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.cppgc::internal::BasicMember.13" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.14" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.15" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.16" = type { %"class.cppgc::internal::MemberBase" }
%"class.fxcrt::UnownedPtr.17" = type { %class.CFGAS_GEPath* }
%class.CFGAS_GEPath = type { %class.CFX_PathData }
%class.CFX_PathData = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair.18" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %class.FX_PATHPOINT* }
%"class.fxcrt::UnownedPtr.21" = type { %class.CFGAS_GEGraphics* }
%class.CFGAS_GEGraphics = type { %"class.fxcrt::UnownedPtr.22", %"struct.CFGAS_GEGraphics::TInfo", %"class.std::__1::vector.32" }
%"class.fxcrt::UnownedPtr.22" = type { %class.CFX_RenderDevice* }
%class.CFX_RenderDevice = type opaque
%"struct.CFGAS_GEGraphics::TInfo" = type { %class.CFX_GraphStateData, %class.CFX_Matrix, i8, %class.CFGAS_GEColor, %class.CFGAS_GEColor }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.23" }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { float*, float*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { float* }
%class.CFGAS_GEColor = type { i32, i32, %"class.fxcrt::UnownedPtr.30", %"class.fxcrt::UnownedPtr.31" }
%"class.fxcrt::UnownedPtr.30" = type { %class.CFGAS_GEPattern* }
%class.CFGAS_GEPattern = type opaque
%"class.fxcrt::UnownedPtr.31" = type { %class.CFGAS_GEShading* }
%class.CFGAS_GEShading = type opaque
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.std::__1::unique_ptr.34"*, %"class.std::__1::unique_ptr.34"*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::unique_ptr.34" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::unique_ptr.34"* }
%class.CFWL_ThemeText = type opaque

@_ZTV21CFWL_DateTimePickerTP = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFWL_DateTimePickerTP*)* @_ZN21CFWL_DateTimePickerTPD2Ev to i8*), i8* bitcast (void (%class.CFWL_DateTimePickerTP*)* @_ZN21CFWL_DateTimePickerTPD0Ev to i8*), i8* bitcast (void (%class.CFWL_DateTimePickerTP*, %class.CFWL_ThemeBackground*)* @_ZN21CFWL_DateTimePickerTP14DrawBackgroundERK20CFWL_ThemeBackground to i8*), i8* bitcast (void (%class.CFWL_WidgetTP*, %class.CFWL_ThemeText*)* @_ZN13CFWL_WidgetTP8DrawTextERK14CFWL_ThemeText to i8*)] }, align 8

@_ZN21CFWL_DateTimePickerTPC1Ev = hidden unnamed_addr alias void (%class.CFWL_DateTimePickerTP*), void (%class.CFWL_DateTimePickerTP*)* @_ZN21CFWL_DateTimePickerTPC2Ev
@_ZN21CFWL_DateTimePickerTPD1Ev = hidden unnamed_addr alias void (%class.CFWL_DateTimePickerTP*), void (%class.CFWL_DateTimePickerTP*)* @_ZN21CFWL_DateTimePickerTPD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CFWL_DateTimePickerTPC2Ev(%class.CFWL_DateTimePickerTP*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  tail call void @_ZN13CFWL_WidgetTPC2Ev(%class.CFWL_WidgetTP* %2) #3
  %3 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV21CFWL_DateTimePickerTP, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN13CFWL_WidgetTPC2Ev(%class.CFWL_WidgetTP*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CFWL_WidgetTPD2Ev(%class.CFWL_WidgetTP*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CFWL_DateTimePickerTPD2Ev(%class.CFWL_DateTimePickerTP*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  tail call void @_ZN13CFWL_WidgetTPD2Ev(%class.CFWL_WidgetTP* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CFWL_DateTimePickerTPD0Ev(%class.CFWL_DateTimePickerTP*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  tail call void @_ZN13CFWL_WidgetTPD2Ev(%class.CFWL_WidgetTP* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CFWL_DateTimePickerTP14DrawBackgroundERK20CFWL_ThemeBackground(%class.CFWL_DateTimePickerTP*, %class.CFWL_ThemeBackground* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 4
  %4 = load i8, i8* %3, align 4
  switch i8 %4, label %17 [
    i8 3, label %5
    i8 14, label %11
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 2, i32 0
  %8 = load %class.CFGAS_GEGraphics*, %class.CFGAS_GEGraphics** %7, align 8
  %9 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 0
  tail call void @_ZN13CFWL_WidgetTP10DrawBorderEP16CFGAS_GEGraphicsRK9CFX_RectFRK10CFX_Matrix(%class.CFWL_WidgetTP* %6, %class.CFGAS_GEGraphics* %8, %class.CFX_RectF* dereferenceable(16) %9, %class.CFX_Matrix* dereferenceable(24) %10) #3
  br label %17

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  %14 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 2, i32 0
  %15 = load %class.CFGAS_GEGraphics*, %class.CFGAS_GEGraphics** %14, align 8
  %16 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 1
  tail call void @_ZN13CFWL_WidgetTP12DrawArrowBtnEP16CFGAS_GEGraphicsRK9CFX_RectF18FWLTHEME_DIRECTION14FWLTHEME_STATERK10CFX_Matrix(%class.CFWL_WidgetTP* %13, %class.CFGAS_GEGraphics* %15, %class.CFX_RectF* dereferenceable(16) %16, i32 1, i32 1, %class.CFX_Matrix* dereferenceable(24) %12) #3
  br label %17

17:                                               ; preds = %2, %11, %5
  ret void
}

declare void @_ZN13CFWL_WidgetTP10DrawBorderEP16CFGAS_GEGraphicsRK9CFX_RectFRK10CFX_Matrix(%class.CFWL_WidgetTP*, %class.CFGAS_GEGraphics*, %class.CFX_RectF* dereferenceable(16), %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21CFWL_DateTimePickerTP18DrawDropDownButtonERK20CFWL_ThemeBackgroundRK10CFX_Matrix(%class.CFWL_DateTimePickerTP*, %class.CFWL_ThemeBackground* dereferenceable(80), %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFWL_DateTimePickerTP, %class.CFWL_DateTimePickerTP* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 2, i32 0
  %6 = load %class.CFGAS_GEGraphics*, %class.CFGAS_GEGraphics** %5, align 8
  %7 = getelementptr inbounds %class.CFWL_ThemeBackground, %class.CFWL_ThemeBackground* %1, i64 0, i32 0, i32 1
  tail call void @_ZN13CFWL_WidgetTP12DrawArrowBtnEP16CFGAS_GEGraphicsRK9CFX_RectF18FWLTHEME_DIRECTION14FWLTHEME_STATERK10CFX_Matrix(%class.CFWL_WidgetTP* %4, %class.CFGAS_GEGraphics* %6, %class.CFX_RectF* dereferenceable(16) %7, i32 1, i32 1, %class.CFX_Matrix* dereferenceable(24) %2) #3
  ret void
}

declare void @_ZN13CFWL_WidgetTP12DrawArrowBtnEP16CFGAS_GEGraphicsRK9CFX_RectF18FWLTHEME_DIRECTION14FWLTHEME_STATERK10CFX_Matrix(%class.CFWL_WidgetTP*, %class.CFGAS_GEGraphics*, %class.CFX_RectF* dereferenceable(16), i32, i32, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #1

declare void @_ZN13CFWL_WidgetTP8DrawTextERK14CFWL_ThemeText(%class.CFWL_WidgetTP*, %class.CFWL_ThemeText*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
