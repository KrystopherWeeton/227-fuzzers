; ModuleID = '../../chrome/browser/devtools/devtools_toggle_action.cc'
source_filename = "../../chrome/browser/devtools/devtools_toggle_action.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.DevToolsToggleAction::RevealParams" = type { %"class.std::__1::basic_string", i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%struct.DevToolsToggleAction = type { i32, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.DevToolsToggleAction::RevealParams"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZN20DevToolsToggleAction12RevealParamsC1ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEmm = hidden unnamed_addr alias void (%"struct.DevToolsToggleAction::RevealParams"*, %"class.std::__1::basic_string"*, i64, i64), void (%"struct.DevToolsToggleAction::RevealParams"*, %"class.std::__1::basic_string"*, i64, i64)* @_ZN20DevToolsToggleAction12RevealParamsC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEmm
@_ZN20DevToolsToggleAction12RevealParamsD1Ev = hidden unnamed_addr alias void (%"struct.DevToolsToggleAction::RevealParams"*), void (%"struct.DevToolsToggleAction::RevealParams"*)* @_ZN20DevToolsToggleAction12RevealParamsD2Ev
@_ZN20DevToolsToggleActionC1ENS_4TypeE = hidden unnamed_addr alias void (%struct.DevToolsToggleAction*, i32), void (%struct.DevToolsToggleAction*, i32)* @_ZN20DevToolsToggleActionC2ENS_4TypeE
@_ZN20DevToolsToggleActionC1EPNS_12RevealParamsE = hidden unnamed_addr alias void (%struct.DevToolsToggleAction*, %"struct.DevToolsToggleAction::RevealParams"*), void (%struct.DevToolsToggleAction*, %"struct.DevToolsToggleAction::RevealParams"*)* @_ZN20DevToolsToggleActionC2EPNS_12RevealParamsE
@_ZN20DevToolsToggleActionC1ERKS_ = hidden unnamed_addr alias void (%struct.DevToolsToggleAction*, %struct.DevToolsToggleAction*), void (%struct.DevToolsToggleAction*, %struct.DevToolsToggleAction*)* @_ZN20DevToolsToggleActionC2ERKS_
@_ZN20DevToolsToggleActionD1Ev = hidden unnamed_addr alias void (%struct.DevToolsToggleAction*), void (%struct.DevToolsToggleAction*)* @_ZN20DevToolsToggleActionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleAction12RevealParamsC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEmm(%"struct.DevToolsToggleAction::RevealParams"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64, i64) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to i8*
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false) #7
  br label %187

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, 11
  br i1 %17, label %18, label %23

18:                                               ; preds = %12
  %19 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to i16*
  %20 = trunc i64 %16 to i8
  %21 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  store i8 %20, i8* %22, align 1
  br label %40

23:                                               ; preds = %12
  %24 = icmp ugt i64 %16, 9223372036854775791
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %26) #8
  unreachable

27:                                               ; preds = %23
  %28 = add nuw nsw i64 %16, 8
  %29 = and i64 %28, -8
  %30 = icmp slt i64 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %27
  tail call void @abort() #8
  unreachable

32:                                               ; preds = %27
  %33 = shl i64 %29, 1
  %34 = tail call i8* @_Znwm(i64 %33) #9
  %35 = bitcast i8* %34 to i16*
  %36 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to i8**
  store i8* %34, i8** %36, align 8
  %37 = or i64 %29, -9223372036854775808
  %38 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %39, align 8
  br label %40

40:                                               ; preds = %32, %18
  %41 = phi i16* [ %19, %18 ], [ %35, %32 ]
  %42 = add nuw nsw i64 %16, 1
  %43 = add i64 %16, 1
  %44 = icmp ult i64 %43, 16
  br i1 %44, label %134, label %45

45:                                               ; preds = %40
  %46 = add i64 %16, 1
  %47 = getelementptr i16, i16* %41, i64 %46
  %48 = getelementptr i16, i16* %14, i64 %46
  %49 = icmp ult i16* %41, %48
  %50 = icmp ult i16* %14, %47
  %51 = and i1 %49, %50
  br i1 %51, label %134, label %52

52:                                               ; preds = %45
  %53 = and i64 %43, -16
  %54 = sub i64 %42, %53
  %55 = getelementptr i16, i16* %14, i64 %53
  %56 = getelementptr i16, i16* %41, i64 %53
  %57 = add i64 %53, -16
  %58 = lshr exact i64 %57, 4
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 48
  br i1 %61, label %113, label %62

62:                                               ; preds = %52
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr i16, i16* %14, i64 %65
  %68 = getelementptr i16, i16* %41, i64 %65
  %69 = bitcast i16* %67 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !2
  %71 = getelementptr i16, i16* %67, i64 8
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !2
  %74 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %74, align 2, !alias.scope !5, !noalias !2
  %75 = getelementptr i16, i16* %68, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %76, align 2, !alias.scope !5, !noalias !2
  %77 = or i64 %65, 16
  %78 = getelementptr i16, i16* %14, i64 %77
  %79 = getelementptr i16, i16* %41, i64 %77
  %80 = bitcast i16* %78 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !2
  %82 = getelementptr i16, i16* %78, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !2
  %85 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %85, align 2, !alias.scope !5, !noalias !2
  %86 = getelementptr i16, i16* %79, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %87, align 2, !alias.scope !5, !noalias !2
  %88 = or i64 %65, 32
  %89 = getelementptr i16, i16* %14, i64 %88
  %90 = getelementptr i16, i16* %41, i64 %88
  %91 = bitcast i16* %89 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !2
  %93 = getelementptr i16, i16* %89, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !2
  %96 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %96, align 2, !alias.scope !5, !noalias !2
  %97 = getelementptr i16, i16* %90, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 2, !alias.scope !5, !noalias !2
  %99 = or i64 %65, 48
  %100 = getelementptr i16, i16* %14, i64 %99
  %101 = getelementptr i16, i16* %41, i64 %99
  %102 = bitcast i16* %100 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !2
  %104 = getelementptr i16, i16* %100, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !2
  %107 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %107, align 2, !alias.scope !5, !noalias !2
  %108 = getelementptr i16, i16* %101, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %109, align 2, !alias.scope !5, !noalias !2
  %110 = add i64 %65, 64
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !7

113:                                              ; preds = %64, %52
  %114 = phi i64 [ 0, %52 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr i16, i16* %14, i64 %117
  %120 = getelementptr i16, i16* %41, i64 %117
  %121 = bitcast i16* %119 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !2
  %123 = getelementptr i16, i16* %119, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !2
  %126 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %126, align 2, !alias.scope !5, !noalias !2
  %127 = getelementptr i16, i16* %120, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %128, align 2, !alias.scope !5, !noalias !2
  %129 = add i64 %117, 16
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !9

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %43, %53
  br i1 %133, label %187, label %134

134:                                              ; preds = %132, %45, %40
  %135 = phi i64 [ %42, %45 ], [ %42, %40 ], [ %54, %132 ]
  %136 = phi i16* [ %14, %45 ], [ %14, %40 ], [ %55, %132 ]
  %137 = phi i16* [ %41, %45 ], [ %41, %40 ], [ %56, %132 ]
  %138 = add i64 %135, -1
  %139 = and i64 %135, 7
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %152, label %141

141:                                              ; preds = %134, %141
  %142 = phi i64 [ %147, %141 ], [ %135, %134 ]
  %143 = phi i16* [ %149, %141 ], [ %136, %134 ]
  %144 = phi i16* [ %148, %141 ], [ %137, %134 ]
  %145 = phi i64 [ %150, %141 ], [ %139, %134 ]
  %146 = load i16, i16* %143, align 2
  store i16 %146, i16* %144, align 2
  %147 = add i64 %142, -1
  %148 = getelementptr inbounds i16, i16* %144, i64 1
  %149 = getelementptr inbounds i16, i16* %143, i64 1
  %150 = add i64 %145, -1
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %141, !llvm.loop !11

152:                                              ; preds = %141, %134
  %153 = phi i64 [ %135, %134 ], [ %147, %141 ]
  %154 = phi i16* [ %136, %134 ], [ %149, %141 ]
  %155 = phi i16* [ %137, %134 ], [ %148, %141 ]
  %156 = icmp ult i64 %138, 7
  br i1 %156, label %187, label %157

157:                                              ; preds = %152, %157
  %158 = phi i64 [ %183, %157 ], [ %153, %152 ]
  %159 = phi i16* [ %185, %157 ], [ %154, %152 ]
  %160 = phi i16* [ %184, %157 ], [ %155, %152 ]
  %161 = load i16, i16* %159, align 2
  store i16 %161, i16* %160, align 2
  %162 = getelementptr inbounds i16, i16* %160, i64 1
  %163 = getelementptr inbounds i16, i16* %159, i64 1
  %164 = load i16, i16* %163, align 2
  store i16 %164, i16* %162, align 2
  %165 = getelementptr inbounds i16, i16* %160, i64 2
  %166 = getelementptr inbounds i16, i16* %159, i64 2
  %167 = load i16, i16* %166, align 2
  store i16 %167, i16* %165, align 2
  %168 = getelementptr inbounds i16, i16* %160, i64 3
  %169 = getelementptr inbounds i16, i16* %159, i64 3
  %170 = load i16, i16* %169, align 2
  store i16 %170, i16* %168, align 2
  %171 = getelementptr inbounds i16, i16* %160, i64 4
  %172 = getelementptr inbounds i16, i16* %159, i64 4
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %160, i64 5
  %175 = getelementptr inbounds i16, i16* %159, i64 5
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %160, i64 6
  %178 = getelementptr inbounds i16, i16* %159, i64 6
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %160, i64 7
  %181 = getelementptr inbounds i16, i16* %159, i64 7
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = add i64 %158, -8
  %184 = getelementptr inbounds i16, i16* %160, i64 8
  %185 = getelementptr inbounds i16, i16* %159, i64 8
  %186 = icmp eq i64 %183, 0
  br i1 %186, label %187, label %157, !llvm.loop !12

187:                                              ; preds = %152, %157, %132, %9
  %188 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %0, i64 0, i32 1
  store i64 %2, i64* %188, align 8
  %189 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %0, i64 0, i32 2
  store i64 %3, i64* %189, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleAction12RevealParamsD2Ev(%"struct.DevToolsToggleAction::RevealParams"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %2, i64 0, i32 1, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %0 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #9
  br label %9

9:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleActionC2ENS_4TypeE(%struct.DevToolsToggleAction* nocapture, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 0, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleActionC2EPNS_12RevealParamsE(%struct.DevToolsToggleAction* nocapture, %"struct.DevToolsToggleAction::RevealParams"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 6, i32* %3, align 8
  %4 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %5 = ptrtoint %"struct.DevToolsToggleAction::RevealParams"* %1 to i64
  %6 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleActionC2ERKS_(%struct.DevToolsToggleAction* nocapture, %struct.DevToolsToggleAction* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"struct.DevToolsToggleAction::RevealParams"*, %"struct.DevToolsToggleAction::RevealParams"** %7, align 8
  %9 = icmp eq %"struct.DevToolsToggleAction::RevealParams"* %8, null
  br i1 %9, label %202, label %10

10:                                               ; preds = %2
  %11 = tail call i8* @_Znwm(i64 40) #9
  %12 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* nonnull align 8 %17, i64 24, i1 false) #7
  br label %197

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  %21 = bitcast i16* %20 to i8*
  %22 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ult i64 %23, 11
  br i1 %24, label %25, label %28

25:                                               ; preds = %18
  %26 = trunc i64 %23 to i8
  %27 = getelementptr inbounds i8, i8* %11, i64 23
  store i8 %26, i8* %27, align 1
  br label %46

28:                                               ; preds = %18
  %29 = icmp ugt i64 %23, 9223372036854775791
  br i1 %29, label %30, label %32

30:                                               ; preds = %28
  %31 = bitcast i8* %11 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %31) #8
  unreachable

32:                                               ; preds = %28
  %33 = add nuw nsw i64 %23, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #8
  unreachable

37:                                               ; preds = %32
  %38 = shl i64 %34, 1
  %39 = tail call i8* @_Znwm(i64 %38) #9
  %40 = bitcast i8* %11 to i8**
  store i8* %39, i8** %40, align 8
  %41 = or i64 %34, -9223372036854775808
  %42 = getelementptr inbounds i8, i8* %11, i64 16
  %43 = bitcast i8* %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds i8, i8* %11, i64 8
  %45 = bitcast i8* %44 to i64*
  store i64 %23, i64* %45, align 8
  br label %46

46:                                               ; preds = %37, %25
  %47 = phi i8* [ %11, %25 ], [ %39, %37 ]
  %48 = bitcast i8* %47 to i16*
  %49 = add nuw nsw i64 %23, 1
  %50 = add i64 %23, 1
  %51 = icmp ult i64 %50, 16
  br i1 %51, label %144, label %52

52:                                               ; preds = %46
  %53 = shl i64 %23, 1
  %54 = add i64 %53, 2
  %55 = getelementptr i8, i8* %47, i64 %54
  %56 = add i64 %23, 1
  %57 = getelementptr i16, i16* %20, i64 %56
  %58 = bitcast i16* %57 to i8*
  %59 = icmp ult i8* %47, %58
  %60 = icmp ugt i8* %55, %21
  %61 = and i1 %59, %60
  br i1 %61, label %144, label %62

62:                                               ; preds = %52
  %63 = and i64 %50, -16
  %64 = sub i64 %49, %63
  %65 = getelementptr i16, i16* %20, i64 %63
  %66 = getelementptr i16, i16* %48, i64 %63
  %67 = add i64 %63, -16
  %68 = lshr exact i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp ult i64 %67, 48
  br i1 %71, label %123, label %72

72:                                               ; preds = %62
  %73 = sub nsw i64 %69, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %120, %74 ]
  %76 = phi i64 [ %73, %72 ], [ %121, %74 ]
  %77 = getelementptr i16, i16* %20, i64 %75
  %78 = getelementptr i16, i16* %48, i64 %75
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !13
  %81 = getelementptr i16, i16* %77, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !13
  %84 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !16, !noalias !13
  %85 = getelementptr i16, i16* %78, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !16, !noalias !13
  %87 = or i64 %75, 16
  %88 = getelementptr i16, i16* %20, i64 %87
  %89 = getelementptr i16, i16* %48, i64 %87
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !13
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !13
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !16, !noalias !13
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !16, !noalias !13
  %98 = or i64 %75, 32
  %99 = getelementptr i16, i16* %20, i64 %98
  %100 = getelementptr i16, i16* %48, i64 %98
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !13
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !13
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !16, !noalias !13
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !16, !noalias !13
  %109 = or i64 %75, 48
  %110 = getelementptr i16, i16* %20, i64 %109
  %111 = getelementptr i16, i16* %48, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !13
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !13
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !16, !noalias !13
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !16, !noalias !13
  %120 = add i64 %75, 64
  %121 = add i64 %76, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %74, !llvm.loop !18

123:                                              ; preds = %74, %62
  %124 = phi i64 [ 0, %62 ], [ %120, %74 ]
  %125 = icmp eq i64 %70, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %139, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %140, %126 ], [ %70, %123 ]
  %129 = getelementptr i16, i16* %20, i64 %127
  %130 = getelementptr i16, i16* %48, i64 %127
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !13
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !13
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !16, !noalias !13
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !16, !noalias !13
  %139 = add i64 %127, 16
  %140 = add i64 %128, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %126, !llvm.loop !19

142:                                              ; preds = %126, %123
  %143 = icmp eq i64 %50, %63
  br i1 %143, label %197, label %144

144:                                              ; preds = %142, %52, %46
  %145 = phi i64 [ %49, %52 ], [ %49, %46 ], [ %64, %142 ]
  %146 = phi i16* [ %20, %52 ], [ %20, %46 ], [ %65, %142 ]
  %147 = phi i16* [ %48, %52 ], [ %48, %46 ], [ %66, %142 ]
  %148 = add i64 %145, -1
  %149 = and i64 %145, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %144, %151
  %152 = phi i64 [ %157, %151 ], [ %145, %144 ]
  %153 = phi i16* [ %159, %151 ], [ %146, %144 ]
  %154 = phi i16* [ %158, %151 ], [ %147, %144 ]
  %155 = phi i64 [ %160, %151 ], [ %149, %144 ]
  %156 = load i16, i16* %153, align 2
  store i16 %156, i16* %154, align 2
  %157 = add i64 %152, -1
  %158 = getelementptr inbounds i16, i16* %154, i64 1
  %159 = getelementptr inbounds i16, i16* %153, i64 1
  %160 = add i64 %155, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !20

162:                                              ; preds = %151, %144
  %163 = phi i64 [ %145, %144 ], [ %157, %151 ]
  %164 = phi i16* [ %146, %144 ], [ %159, %151 ]
  %165 = phi i16* [ %147, %144 ], [ %158, %151 ]
  %166 = icmp ult i64 %148, 7
  br i1 %166, label %197, label %167

167:                                              ; preds = %162, %167
  %168 = phi i64 [ %193, %167 ], [ %163, %162 ]
  %169 = phi i16* [ %195, %167 ], [ %164, %162 ]
  %170 = phi i16* [ %194, %167 ], [ %165, %162 ]
  %171 = load i16, i16* %169, align 2
  store i16 %171, i16* %170, align 2
  %172 = getelementptr inbounds i16, i16* %170, i64 1
  %173 = getelementptr inbounds i16, i16* %169, i64 1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %170, i64 2
  %176 = getelementptr inbounds i16, i16* %169, i64 2
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %170, i64 3
  %179 = getelementptr inbounds i16, i16* %169, i64 3
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %170, i64 4
  %182 = getelementptr inbounds i16, i16* %169, i64 4
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %170, i64 5
  %185 = getelementptr inbounds i16, i16* %169, i64 5
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %170, i64 6
  %188 = getelementptr inbounds i16, i16* %169, i64 6
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %170, i64 7
  %191 = getelementptr inbounds i16, i16* %169, i64 7
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = add i64 %168, -8
  %194 = getelementptr inbounds i16, i16* %170, i64 8
  %195 = getelementptr inbounds i16, i16* %169, i64 8
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %197, label %167, !llvm.loop !21

197:                                              ; preds = %162, %167, %142, %16
  %198 = getelementptr inbounds i8, i8* %11, i64 24
  %199 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %8, i64 0, i32 1
  %200 = bitcast i64* %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %200, i64 16, i1 false) #7
  %201 = ptrtoint i8* %11 to i64
  br label %202

202:                                              ; preds = %2, %197
  %203 = phi i64 [ %201, %197 ], [ 0, %2 ]
  %204 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 %203, i64* %204, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleActionaSERKS_(%struct.DevToolsToggleAction* nocapture, %struct.DevToolsToggleAction* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"struct.DevToolsToggleAction::RevealParams"*, %"struct.DevToolsToggleAction::RevealParams"** %6, align 8
  %8 = icmp eq %"struct.DevToolsToggleAction::RevealParams"* %7, null
  br i1 %8, label %216, label %9

9:                                                ; preds = %2
  %10 = tail call i8* @_Znwm(i64 40) #9
  %11 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %11, i64 0, i32 1, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %9
  %16 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %16, i64 24, i1 false) #7
  br label %196

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = trunc i64 %22 to i8
  %26 = getelementptr inbounds i8, i8* %10, i64 23
  store i8 %25, i8* %26, align 1
  br label %45

27:                                               ; preds = %17
  %28 = icmp ugt i64 %22, 9223372036854775791
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = bitcast i8* %10 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %30) #8
  unreachable

31:                                               ; preds = %27
  %32 = add nuw nsw i64 %22, 8
  %33 = and i64 %32, -8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @abort() #8
  unreachable

36:                                               ; preds = %31
  %37 = shl i64 %33, 1
  %38 = tail call i8* @_Znwm(i64 %37) #9
  %39 = bitcast i8* %10 to i8**
  store i8* %38, i8** %39, align 8
  %40 = or i64 %33, -9223372036854775808
  %41 = getelementptr inbounds i8, i8* %10, i64 16
  %42 = bitcast i8* %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %10, i64 8
  %44 = bitcast i8* %43 to i64*
  store i64 %22, i64* %44, align 8
  br label %45

45:                                               ; preds = %36, %24
  %46 = phi i8* [ %10, %24 ], [ %38, %36 ]
  %47 = bitcast i8* %46 to i16*
  %48 = add nuw nsw i64 %22, 1
  %49 = add i64 %22, 1
  %50 = icmp ult i64 %49, 16
  br i1 %50, label %143, label %51

51:                                               ; preds = %45
  %52 = shl i64 %22, 1
  %53 = add i64 %52, 2
  %54 = getelementptr i8, i8* %46, i64 %53
  %55 = add i64 %22, 1
  %56 = getelementptr i16, i16* %19, i64 %55
  %57 = bitcast i16* %56 to i8*
  %58 = icmp ult i8* %46, %57
  %59 = icmp ugt i8* %54, %20
  %60 = and i1 %58, %59
  br i1 %60, label %143, label %61

61:                                               ; preds = %51
  %62 = and i64 %49, -16
  %63 = sub i64 %48, %62
  %64 = getelementptr i16, i16* %19, i64 %62
  %65 = getelementptr i16, i16* %47, i64 %62
  %66 = add i64 %62, -16
  %67 = lshr exact i64 %66, 4
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 48
  br i1 %70, label %122, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i16, i16* %19, i64 %74
  %77 = getelementptr i16, i16* %47, i64 %74
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !22
  %80 = getelementptr i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !22
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !25, !noalias !22
  %84 = getelementptr i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !25, !noalias !22
  %86 = or i64 %74, 16
  %87 = getelementptr i16, i16* %19, i64 %86
  %88 = getelementptr i16, i16* %47, i64 %86
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !22
  %91 = getelementptr i16, i16* %87, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !22
  %94 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !25, !noalias !22
  %95 = getelementptr i16, i16* %88, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !25, !noalias !22
  %97 = or i64 %74, 32
  %98 = getelementptr i16, i16* %19, i64 %97
  %99 = getelementptr i16, i16* %47, i64 %97
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !22
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !22
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !25, !noalias !22
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !25, !noalias !22
  %108 = or i64 %74, 48
  %109 = getelementptr i16, i16* %19, i64 %108
  %110 = getelementptr i16, i16* %47, i64 %108
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !22
  %113 = getelementptr i16, i16* %109, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !22
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !25, !noalias !22
  %117 = getelementptr i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !25, !noalias !22
  %119 = add i64 %74, 64
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !27

122:                                              ; preds = %73, %61
  %123 = phi i64 [ 0, %61 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i16, i16* %19, i64 %126
  %129 = getelementptr i16, i16* %47, i64 %126
  %130 = bitcast i16* %128 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !22
  %132 = getelementptr i16, i16* %128, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !22
  %135 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !25, !noalias !22
  %136 = getelementptr i16, i16* %129, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !25, !noalias !22
  %138 = add i64 %126, 16
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !28

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %49, %62
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %51, %45
  %144 = phi i64 [ %48, %51 ], [ %48, %45 ], [ %63, %141 ]
  %145 = phi i16* [ %19, %51 ], [ %19, %45 ], [ %64, %141 ]
  %146 = phi i16* [ %47, %51 ], [ %47, %45 ], [ %65, %141 ]
  %147 = add i64 %144, -1
  %148 = and i64 %144, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143, %150
  %151 = phi i64 [ %156, %150 ], [ %144, %143 ]
  %152 = phi i16* [ %158, %150 ], [ %145, %143 ]
  %153 = phi i16* [ %157, %150 ], [ %146, %143 ]
  %154 = phi i64 [ %159, %150 ], [ %148, %143 ]
  %155 = load i16, i16* %152, align 2
  store i16 %155, i16* %153, align 2
  %156 = add i64 %151, -1
  %157 = getelementptr inbounds i16, i16* %153, i64 1
  %158 = getelementptr inbounds i16, i16* %152, i64 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %150, !llvm.loop !29

161:                                              ; preds = %150, %143
  %162 = phi i64 [ %144, %143 ], [ %156, %150 ]
  %163 = phi i16* [ %145, %143 ], [ %158, %150 ]
  %164 = phi i16* [ %146, %143 ], [ %157, %150 ]
  %165 = icmp ult i64 %147, 7
  br i1 %165, label %196, label %166

166:                                              ; preds = %161, %166
  %167 = phi i64 [ %192, %166 ], [ %162, %161 ]
  %168 = phi i16* [ %194, %166 ], [ %163, %161 ]
  %169 = phi i16* [ %193, %166 ], [ %164, %161 ]
  %170 = load i16, i16* %168, align 2
  store i16 %170, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %169, i64 1
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %169, i64 2
  %175 = getelementptr inbounds i16, i16* %168, i64 2
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %169, i64 3
  %178 = getelementptr inbounds i16, i16* %168, i64 3
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %169, i64 4
  %181 = getelementptr inbounds i16, i16* %168, i64 4
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %169, i64 5
  %184 = getelementptr inbounds i16, i16* %168, i64 5
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %169, i64 6
  %187 = getelementptr inbounds i16, i16* %168, i64 6
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %169, i64 7
  %190 = getelementptr inbounds i16, i16* %168, i64 7
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = add i64 %167, -8
  %193 = getelementptr inbounds i16, i16* %169, i64 8
  %194 = getelementptr inbounds i16, i16* %168, i64 8
  %195 = icmp eq i64 %192, 0
  br i1 %195, label %196, label %166, !llvm.loop !30

196:                                              ; preds = %161, %166, %141, %15
  %197 = getelementptr inbounds i8, i8* %10, i64 24
  %198 = getelementptr inbounds %"struct.DevToolsToggleAction::RevealParams", %"struct.DevToolsToggleAction::RevealParams"* %7, i64 0, i32 1
  %199 = bitcast i64* %198 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %197, i8* align 8 %199, i64 16, i1 false) #7
  %200 = ptrtoint i8* %10 to i64
  %201 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %201, i64 0, i32 0, i32 0, i32 0
  %203 = load %"struct.DevToolsToggleAction::RevealParams"*, %"struct.DevToolsToggleAction::RevealParams"** %202, align 8
  %204 = bitcast %"class.std::__1::unique_ptr"* %201 to i64*
  store i64 %200, i64* %204, align 8
  %205 = icmp eq %"struct.DevToolsToggleAction::RevealParams"* %203, null
  br i1 %205, label %216, label %206

206:                                              ; preds = %196
  %207 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %203 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %208 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %207, i64 0, i32 1, i32 1
  %209 = load i8, i8* %208, align 1
  %210 = icmp slt i8 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %206
  %212 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %203 to i8**
  %213 = load i8*, i8** %212, align 8
  tail call void @_ZdlPv(i8* %213) #9
  br label %214

214:                                              ; preds = %211, %206
  %215 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %203 to i8*
  tail call void @_ZdlPv(i8* %215) #9
  br label %216

216:                                              ; preds = %196, %214, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleActionD2Ev(%struct.DevToolsToggleAction* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"struct.DevToolsToggleAction::RevealParams"*, %"struct.DevToolsToggleAction::RevealParams"** %2, align 8
  store %"struct.DevToolsToggleAction::RevealParams"* null, %"struct.DevToolsToggleAction::RevealParams"** %2, align 8
  %4 = icmp eq %"struct.DevToolsToggleAction::RevealParams"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %3 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #9
  br label %13

13:                                               ; preds = %10, %5
  %14 = bitcast %"struct.DevToolsToggleAction::RevealParams"* %3 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %1, %13
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction4ShowEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction16ShowConsolePanelEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 1, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction17ShowElementsPanelEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 2, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction15PauseInDebuggerEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 3, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction7InspectEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 4, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction6ToggleEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 5, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20DevToolsToggleAction6RevealERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEEmm(%struct.DevToolsToggleAction* noalias nocapture sret, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64, i64) local_unnamed_addr #0 align 2 {
  %5 = tail call i8* @_Znwm(i64 40) #9
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %11, i64 24, i1 false) #7
  br label %191

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i16*, i16** %13, align 8
  %15 = bitcast i16* %14 to i8*
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, 11
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = trunc i64 %17 to i8
  %21 = getelementptr inbounds i8, i8* %5, i64 23
  store i8 %20, i8* %21, align 1
  br label %40

22:                                               ; preds = %12
  %23 = icmp ugt i64 %17, 9223372036854775791
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = bitcast i8* %5 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %25) #8
  unreachable

26:                                               ; preds = %22
  %27 = add nuw nsw i64 %17, 8
  %28 = and i64 %27, -8
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  tail call void @abort() #8
  unreachable

31:                                               ; preds = %26
  %32 = shl i64 %28, 1
  %33 = tail call i8* @_Znwm(i64 %32) #9
  %34 = bitcast i8* %5 to i8**
  store i8* %33, i8** %34, align 8
  %35 = or i64 %28, -9223372036854775808
  %36 = getelementptr inbounds i8, i8* %5, i64 16
  %37 = bitcast i8* %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %5, i64 8
  %39 = bitcast i8* %38 to i64*
  store i64 %17, i64* %39, align 8
  br label %40

40:                                               ; preds = %31, %19
  %41 = phi i8* [ %5, %19 ], [ %33, %31 ]
  %42 = bitcast i8* %41 to i16*
  %43 = add nuw nsw i64 %17, 1
  %44 = add i64 %17, 1
  %45 = icmp ult i64 %44, 16
  br i1 %45, label %138, label %46

46:                                               ; preds = %40
  %47 = shl i64 %17, 1
  %48 = add i64 %47, 2
  %49 = getelementptr i8, i8* %41, i64 %48
  %50 = add i64 %17, 1
  %51 = getelementptr i16, i16* %14, i64 %50
  %52 = bitcast i16* %51 to i8*
  %53 = icmp ult i8* %41, %52
  %54 = icmp ugt i8* %49, %15
  %55 = and i1 %53, %54
  br i1 %55, label %138, label %56

56:                                               ; preds = %46
  %57 = and i64 %44, -16
  %58 = sub i64 %43, %57
  %59 = getelementptr i16, i16* %14, i64 %57
  %60 = getelementptr i16, i16* %42, i64 %57
  %61 = add i64 %57, -16
  %62 = lshr exact i64 %61, 4
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 3
  %65 = icmp ult i64 %61, 48
  br i1 %65, label %117, label %66

66:                                               ; preds = %56
  %67 = sub nsw i64 %63, %64
  br label %68

68:                                               ; preds = %68, %66
  %69 = phi i64 [ 0, %66 ], [ %114, %68 ]
  %70 = phi i64 [ %67, %66 ], [ %115, %68 ]
  %71 = getelementptr i16, i16* %14, i64 %69
  %72 = getelementptr i16, i16* %42, i64 %69
  %73 = bitcast i16* %71 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !31
  %75 = getelementptr i16, i16* %71, i64 8
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !31
  %78 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %78, align 2, !alias.scope !34, !noalias !31
  %79 = getelementptr i16, i16* %72, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !alias.scope !34, !noalias !31
  %81 = or i64 %69, 16
  %82 = getelementptr i16, i16* %14, i64 %81
  %83 = getelementptr i16, i16* %42, i64 %81
  %84 = bitcast i16* %82 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !31
  %86 = getelementptr i16, i16* %82, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !31
  %89 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %89, align 2, !alias.scope !34, !noalias !31
  %90 = getelementptr i16, i16* %83, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %91, align 2, !alias.scope !34, !noalias !31
  %92 = or i64 %69, 32
  %93 = getelementptr i16, i16* %14, i64 %92
  %94 = getelementptr i16, i16* %42, i64 %92
  %95 = bitcast i16* %93 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !31
  %97 = getelementptr i16, i16* %93, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !31
  %100 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 2, !alias.scope !34, !noalias !31
  %101 = getelementptr i16, i16* %94, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %102, align 2, !alias.scope !34, !noalias !31
  %103 = or i64 %69, 48
  %104 = getelementptr i16, i16* %14, i64 %103
  %105 = getelementptr i16, i16* %42, i64 %103
  %106 = bitcast i16* %104 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !31
  %108 = getelementptr i16, i16* %104, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !31
  %111 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %111, align 2, !alias.scope !34, !noalias !31
  %112 = getelementptr i16, i16* %105, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %113, align 2, !alias.scope !34, !noalias !31
  %114 = add i64 %69, 64
  %115 = add i64 %70, -4
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %68, !llvm.loop !36

117:                                              ; preds = %68, %56
  %118 = phi i64 [ 0, %56 ], [ %114, %68 ]
  %119 = icmp eq i64 %64, 0
  br i1 %119, label %136, label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %133, %120 ], [ %118, %117 ]
  %122 = phi i64 [ %134, %120 ], [ %64, %117 ]
  %123 = getelementptr i16, i16* %14, i64 %121
  %124 = getelementptr i16, i16* %42, i64 %121
  %125 = bitcast i16* %123 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !31
  %127 = getelementptr i16, i16* %123, i64 8
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !31
  %130 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %130, align 2, !alias.scope !34, !noalias !31
  %131 = getelementptr i16, i16* %124, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %132, align 2, !alias.scope !34, !noalias !31
  %133 = add i64 %121, 16
  %134 = add i64 %122, -1
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %136, label %120, !llvm.loop !37

136:                                              ; preds = %120, %117
  %137 = icmp eq i64 %44, %57
  br i1 %137, label %191, label %138

138:                                              ; preds = %136, %46, %40
  %139 = phi i64 [ %43, %46 ], [ %43, %40 ], [ %58, %136 ]
  %140 = phi i16* [ %14, %46 ], [ %14, %40 ], [ %59, %136 ]
  %141 = phi i16* [ %42, %46 ], [ %42, %40 ], [ %60, %136 ]
  %142 = add i64 %139, -1
  %143 = and i64 %139, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %138, %145
  %146 = phi i64 [ %151, %145 ], [ %139, %138 ]
  %147 = phi i16* [ %153, %145 ], [ %140, %138 ]
  %148 = phi i16* [ %152, %145 ], [ %141, %138 ]
  %149 = phi i64 [ %154, %145 ], [ %143, %138 ]
  %150 = load i16, i16* %147, align 2
  store i16 %150, i16* %148, align 2
  %151 = add i64 %146, -1
  %152 = getelementptr inbounds i16, i16* %148, i64 1
  %153 = getelementptr inbounds i16, i16* %147, i64 1
  %154 = add i64 %149, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !38

156:                                              ; preds = %145, %138
  %157 = phi i64 [ %139, %138 ], [ %151, %145 ]
  %158 = phi i16* [ %140, %138 ], [ %153, %145 ]
  %159 = phi i16* [ %141, %138 ], [ %152, %145 ]
  %160 = icmp ult i64 %142, 7
  br i1 %160, label %191, label %161

161:                                              ; preds = %156, %161
  %162 = phi i64 [ %187, %161 ], [ %157, %156 ]
  %163 = phi i16* [ %189, %161 ], [ %158, %156 ]
  %164 = phi i16* [ %188, %161 ], [ %159, %156 ]
  %165 = load i16, i16* %163, align 2
  store i16 %165, i16* %164, align 2
  %166 = getelementptr inbounds i16, i16* %164, i64 1
  %167 = getelementptr inbounds i16, i16* %163, i64 1
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %164, i64 2
  %170 = getelementptr inbounds i16, i16* %163, i64 2
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %164, i64 3
  %173 = getelementptr inbounds i16, i16* %163, i64 3
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %164, i64 4
  %176 = getelementptr inbounds i16, i16* %163, i64 4
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %164, i64 5
  %179 = getelementptr inbounds i16, i16* %163, i64 5
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %164, i64 6
  %182 = getelementptr inbounds i16, i16* %163, i64 6
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %164, i64 7
  %185 = getelementptr inbounds i16, i16* %163, i64 7
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = add i64 %162, -8
  %188 = getelementptr inbounds i16, i16* %164, i64 8
  %189 = getelementptr inbounds i16, i16* %163, i64 8
  %190 = icmp eq i64 %187, 0
  br i1 %190, label %191, label %161, !llvm.loop !39

191:                                              ; preds = %156, %161, %136, %10
  %192 = getelementptr inbounds i8, i8* %5, i64 24
  %193 = bitcast i8* %192 to i64*
  store i64 %2, i64* %193, align 8
  %194 = getelementptr inbounds i8, i8* %5, i64 32
  %195 = bitcast i8* %194 to i64*
  store i64 %3, i64* %195, align 8
  %196 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 6, i32* %196, align 8
  %197 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %198 = ptrtoint i8* %5 to i64
  %199 = bitcast %"class.std::__1::unique_ptr"* %197 to i64*
  store i64 %198, i64* %199, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN20DevToolsToggleAction4NoOpEv(%struct.DevToolsToggleAction* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 0
  store i32 7, i32* %2, align 8
  %3 = getelementptr inbounds %struct.DevToolsToggleAction, %struct.DevToolsToggleAction* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !8}
