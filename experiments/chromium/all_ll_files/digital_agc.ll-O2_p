; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc/legacy/digital_agc.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc/legacy/digital_agc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.webrtc::DigitalAgc" = type { i32, i32, i32, [32 x i32], i16, i16, %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad" }
%"struct.webrtc::AgcVad" = type { [8 x i32], i16, i16, i16, i16, i32, i16, i16, i32, i16 }

@_ZN6webrtc12_GLOBAL__N_113kGenFuncTableE = internal unnamed_addr constant [128 x i16] [i16 256, i16 485, i16 786, i16 1126, i16 1484, i16 1849, i16 2217, i16 2586, i16 2955, i16 3324, i16 3693, i16 4063, i16 4432, i16 4801, i16 5171, i16 5540, i16 5909, i16 6279, i16 6648, i16 7017, i16 7387, i16 7756, i16 8125, i16 8495, i16 8864, i16 9233, i16 9603, i16 9972, i16 10341, i16 10711, i16 11080, i16 11449, i16 11819, i16 12188, i16 12557, i16 12927, i16 13296, i16 13665, i16 14035, i16 14404, i16 14773, i16 15143, i16 15512, i16 15881, i16 16251, i16 16620, i16 16989, i16 17359, i16 17728, i16 18097, i16 18466, i16 18836, i16 19205, i16 19574, i16 19944, i16 20313, i16 20682, i16 21052, i16 21421, i16 21790, i16 22160, i16 22529, i16 22898, i16 23268, i16 23637, i16 24006, i16 24376, i16 24745, i16 25114, i16 25484, i16 25853, i16 26222, i16 26592, i16 26961, i16 27330, i16 27700, i16 28069, i16 28438, i16 28808, i16 29177, i16 29546, i16 29916, i16 30285, i16 30654, i16 31024, i16 31393, i16 31762, i16 32132, i16 32501, i16 -32666, i16 -32296, i16 -31927, i16 -31558, i16 -31188, i16 -30819, i16 -30450, i16 -30080, i16 -29711, i16 -29342, i16 -28972, i16 -28603, i16 -28234, i16 -27864, i16 -27495, i16 -27126, i16 -26756, i16 -26387, i16 -26018, i16 -25648, i16 -25279, i16 -24910, i16 -24540, i16 -24171, i16 -23802, i16 -23432, i16 -23063, i16 -22694, i16 -22324, i16 -21955, i16 -21586, i16 -21216, i16 -20847, i16 -20478, i16 -20108, i16 -19739, i16 -19370, i16 -19000, i16 -18631], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc28WebRtcAgc_CalculateGainTableEPisshs(i32* nocapture, i16 signext, i16 signext, i8 zeroext, i16 signext) local_unnamed_addr #0 {
  %6 = sext i16 %1 to i32
  %7 = sext i16 %4 to i32
  %8 = sub nsw i32 %6, %7
  %9 = shl nsw i32 %8, 1
  %10 = sext i16 %2 to i32
  %11 = sub nsw i32 %7, %10
  %12 = or i32 %9, 1
  %13 = tail call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %12, i16 signext 3) #5
  %14 = trunc i32 %11 to i16
  %15 = add i16 %13, %14
  %16 = sext i16 %15 to i32
  %17 = icmp slt i32 %11, %16
  %18 = select i1 %17, i32 %16, i32 %11
  %19 = shl i32 %18, 16
  %20 = ashr exact i32 %19, 16
  %21 = mul nsw i32 %20, 3
  %22 = add nsw i32 %21, 1
  %23 = tail call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %22, i16 signext 2) #5
  %24 = icmp ne i8 %3, 0
  %25 = shl nsw i32 %6, 1
  %26 = or i32 %25, 1
  %27 = tail call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %26, i16 signext 3) #5
  %28 = sext i16 %27 to i32
  %29 = icmp ugt i16 %27, 127
  br i1 %29, label %200, label %30

30:                                               ; preds = %5
  %31 = shl nsw i32 %7, 13
  %32 = tail call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %31, i16 signext 24660) #5
  %33 = add i16 %32, 2
  %34 = tail call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 1, i16 signext 3) #5
  %35 = sext i16 %34 to i32
  %36 = add nsw i32 %35, %10
  %37 = sext i16 %27 to i64
  %38 = getelementptr inbounds [128 x i16], [128 x i16]* @_ZN6webrtc12_GLOBAL__N_113kGenFuncTableE, i64 0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = mul nuw nsw i32 %40, 20
  %42 = shl nsw i32 %28, 14
  %43 = ashr exact i32 %19, 10
  %44 = mul i32 %43, %40
  %45 = lshr i32 %41, 8
  %46 = tail call i32 @llvm.ctlz.i32(i32 %41, i1 false) #5, !range !2
  %47 = add nuw nsw i32 %46, 7
  %48 = shl nsw i32 %36, 14
  %49 = sub nsw i32 10, %48
  %50 = sext i16 %33 to i64
  br label %51

51:                                               ; preds = %195, %30
  %52 = phi i64 [ 0, %30 ], [ %198, %195 ]
  %53 = trunc i64 %52 to i32
  %54 = add nsw i32 %53, -1
  %55 = trunc i32 %54 to i16
  %56 = shl i16 %55, 1
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, 49321
  %59 = or i32 %58, 1
  %60 = tail call i32 @WebRtcSpl_DivW32W16(i32 %59, i16 signext 3) #5
  %61 = sub nsw i32 %42, %60
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = lshr i32 %64, 14
  %66 = and i32 %64, 16383
  %67 = and i32 %65, 65535
  %68 = add nuw nsw i32 %67, 1
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [128 x i16], [128 x i16]* @_ZN6webrtc12_GLOBAL__N_113kGenFuncTableE, i64 0, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = zext i32 %67 to i64
  %73 = getelementptr inbounds [128 x i16], [128 x i16]* @_ZN6webrtc12_GLOBAL__N_113kGenFuncTableE, i64 0, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = sub i16 %71, %74
  %77 = zext i16 %76 to i32
  %78 = mul nuw nsw i32 %66, %77
  %79 = shl nuw nsw i32 %75, 14
  %80 = add nuw nsw i32 %78, %79
  %81 = lshr i32 %80, 8
  br i1 %62, label %82, label %113

82:                                               ; preds = %51
  %83 = icmp eq i32 %64, 0
  br i1 %83, label %93, label %84

84:                                               ; preds = %82
  %85 = tail call i32 @llvm.ctlz.i32(i32 %64, i1 false) #5, !range !3
  %86 = trunc i32 %85 to i16
  %87 = icmp ult i16 %86, 15
  br i1 %87, label %88, label %101

88:                                               ; preds = %84
  %89 = sub nsw i32 15, %85
  %90 = lshr i32 %64, %89
  %91 = mul i32 %90, 23637
  %92 = icmp ult i16 %86, 9
  br i1 %92, label %93, label %98

93:                                               ; preds = %82, %88
  %94 = phi i32 [ %91, %88 ], [ 0, %82 ]
  %95 = phi i32 [ %85, %88 ], [ 0, %82 ]
  %96 = sub nsw i32 9, %95
  %97 = lshr i32 %80, %96
  br label %104

98:                                               ; preds = %88
  %99 = add nsw i32 %85, -9
  %100 = lshr i32 %91, %99
  br label %104

101:                                              ; preds = %84
  %102 = mul i32 %64, 23637
  %103 = lshr i32 %102, 6
  br label %104

104:                                              ; preds = %93, %98, %101
  %105 = phi i32 [ %94, %93 ], [ %100, %98 ], [ %103, %101 ]
  %106 = phi i32 [ %97, %93 ], [ %80, %98 ], [ %80, %101 ]
  %107 = phi i32 [ %96, %93 ], [ 0, %98 ], [ 0, %101 ]
  %108 = icmp ugt i32 %106, %105
  br i1 %108, label %109, label %113

109:                                              ; preds = %104
  %110 = sub i32 %106, %105
  %111 = sub nsw i32 8, %107
  %112 = lshr i32 %110, %111
  br label %113

113:                                              ; preds = %104, %109, %51
  %114 = phi i32 [ %112, %109 ], [ 0, %104 ], [ %81, %51 ]
  %115 = mul nsw i32 %114, %28
  %116 = sub nsw i32 %44, %115
  %117 = icmp sgt i32 %116, %45
  %118 = sub nsw i32 0, %116
  %119 = icmp slt i32 %45, %118
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %128

121:                                              ; preds = %113
  %122 = icmp eq i32 %116, 0
  br i1 %122, label %128, label %123

123:                                              ; preds = %121
  %124 = ashr i32 %116, 31
  %125 = xor i32 %124, %116
  %126 = tail call i32 @llvm.ctlz.i32(i32 %125, i1 false) #5, !range !3
  %127 = add nsw i32 %126, -1
  br label %128

128:                                              ; preds = %113, %123, %121
  %129 = phi i32 [ %127, %123 ], [ 0, %121 ], [ %47, %113 ]
  %130 = shl i32 %116, %129
  %131 = add nsw i32 %129, -9
  %132 = icmp sgt i32 %131, -1
  %133 = shl i32 %41, %131
  %134 = sub nsw i32 9, %129
  %135 = lshr i32 %41, %134
  %136 = select i1 %132, i32 %133, i32 %135
  %137 = sdiv i32 %130, %136
  %138 = icmp sgt i32 %137, -1
  br i1 %138, label %139, label %142

139:                                              ; preds = %128
  %140 = add nuw nsw i32 %137, 1
  %141 = ashr i32 %140, 1
  br label %146

142:                                              ; preds = %128
  %143 = sub i32 1, %137
  %144 = ashr i32 %143, 1
  %145 = sub nsw i32 0, %144
  br label %146

146:                                              ; preds = %142, %139
  %147 = phi i32 [ %141, %139 ], [ %145, %142 ]
  %148 = icmp slt i64 %52, %50
  %149 = and i1 %24, %148
  br i1 %149, label %150, label %154

150:                                              ; preds = %146
  %151 = mul nsw i32 %54, 49321
  %152 = add i32 %49, %151
  %153 = tail call i32 @WebRtcSpl_DivW32W16(i32 %152, i16 signext 20) #5
  br label %154

154:                                              ; preds = %150, %146
  %155 = phi i32 [ %153, %150 ], [ %147, %146 ]
  %156 = icmp sgt i32 %155, 39000
  br i1 %156, label %157, label %162

157:                                              ; preds = %154
  %158 = lshr i32 %155, 1
  %159 = mul nsw i32 %158, 54426
  %160 = add nuw nsw i32 %159, 4096
  %161 = lshr i32 %160, 13
  br label %166

162:                                              ; preds = %154
  %163 = mul nsw i32 %155, 54426
  %164 = add nsw i32 %163, 8192
  %165 = ashr i32 %164, 14
  br label %166

166:                                              ; preds = %162, %157
  %167 = phi i32 [ %161, %157 ], [ %165, %162 ]
  %168 = add nsw i32 %167, 262144
  %169 = icmp sgt i32 %168, 0
  br i1 %169, label %170, label %195

170:                                              ; preds = %166
  %171 = lshr i32 %168, 14
  %172 = and i32 %168, 16383
  %173 = and i32 %168, 8192
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %180, label %175

175:                                              ; preds = %170
  %176 = sub nuw nsw i32 16384, %172
  %177 = mul nuw nsw i32 %176, 9951
  %178 = lshr i32 %177, 13
  %179 = sub nsw i32 16384, %178
  br label %183

180:                                              ; preds = %170
  %181 = mul nuw nsw i32 %172, 6433
  %182 = lshr i32 %181, 13
  br label %183

183:                                              ; preds = %180, %175
  %184 = phi i32 [ %179, %175 ], [ %182, %180 ]
  %185 = and i32 %171, 65535
  %186 = shl i32 1, %185
  %187 = add nsw i32 %185, -14
  %188 = icmp sgt i32 %187, -1
  %189 = and i32 %184, 65535
  %190 = shl i32 %189, %187
  %191 = sub nsw i32 14, %185
  %192 = lshr i32 %189, %191
  %193 = select i1 %188, i32 %190, i32 %192
  %194 = add nsw i32 %193, %186
  br label %195

195:                                              ; preds = %166, %183
  %196 = phi i32 [ %194, %183 ], [ 0, %166 ]
  %197 = getelementptr inbounds i32, i32* %0, i64 %52
  store i32 %196, i32* %197, align 4
  %198 = add nuw nsw i64 %52, 1
  %199 = icmp eq i64 %198, 32
  br i1 %199, label %200, label %51

200:                                              ; preds = %195, %5
  %201 = phi i32 [ -1, %5 ], [ 0, %195 ]
  ret i32 %201
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare signext i16 @WebRtcSpl_DivW32W16ResW16(i32, i16 signext) local_unnamed_addr #2

declare i32 @WebRtcSpl_DivW32W16(i32, i16 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc21WebRtcAgc_InitDigitalEPNS_10DigitalAgcEs(%"struct.webrtc::DigitalAgc"* nocapture, i16 signext) local_unnamed_addr #0 {
  %3 = icmp eq i16 %1, 3
  %4 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 0
  %5 = select i1 %3, i32 0, i32 134217728
  store i32 %5, i32* %4, align 4
  %6 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 2
  store i32 65536, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 4
  store i16 0, i16* %8, align 4
  %9 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 5
  store i16 %1, i16* %9, align 2
  %10 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6
  %11 = bitcast %"struct.webrtc::AgcVad"* %10 to i8*
  %12 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 1
  store i16 0, i16* %12, align 4
  %13 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 3
  store i16 0, i16* %13, align 4
  %14 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 4
  store i16 15360, i16* %14, align 2
  %15 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 5
  store i32 128000, i32* %15, align 4
  %16 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 6
  store i16 0, i16* %16, align 4
  %17 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 7
  store i16 15360, i16* %17, align 2
  %18 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 8
  store i32 128000, i32* %18, align 4
  %19 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 9
  store i16 0, i16* %19, align 4
  %20 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 2
  store i16 3, i16* %20, align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 32, i1 false) #5
  %21 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7
  %22 = bitcast %"struct.webrtc::AgcVad"* %21 to i8*
  %23 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 1
  store i16 0, i16* %23, align 4
  %24 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 3
  store i16 0, i16* %24, align 4
  %25 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 4
  store i16 15360, i16* %25, align 2
  %26 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 5
  store i32 128000, i32* %26, align 4
  %27 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 6
  store i16 0, i16* %27, align 4
  %28 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 7
  store i16 15360, i16* %28, align 2
  %29 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 8
  store i32 128000, i32* %29, align 4
  %30 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 9
  store i16 0, i16* %30, align 4
  %31 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 2
  store i16 3, i16* %31, align 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %22, i8 0, i64 32, i1 false) #5
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc17WebRtcAgc_InitVadEPNS_6AgcVadE(%"struct.webrtc::AgcVad"* nocapture) local_unnamed_addr #3 {
  %2 = bitcast %"struct.webrtc::AgcVad"* %0 to i8*
  %3 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 1
  store i16 0, i16* %3, align 4
  %4 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 3
  store i16 0, i16* %4, align 4
  %5 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 4
  store i16 15360, i16* %5, align 2
  %6 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 5
  store i32 128000, i32* %6, align 4
  %7 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 6
  store i16 0, i16* %7, align 4
  %8 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 7
  store i16 15360, i16* %8, align 2
  %9 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 8
  store i32 128000, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 9
  store i16 0, i16* %10, align 4
  %11 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 2
  store i16 3, i16* %11, align 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc28WebRtcAgc_AddFarendToDigitalEPNS_10DigitalAgcEPKsm(%"struct.webrtc::DigitalAgc"*, i16*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7
  %5 = tail call signext i16 @_ZN6webrtc20WebRtcAgc_ProcessVadEPNS_6AgcVadEPKsm(%"struct.webrtc::AgcVad"* %4, i16* %1, i64 %2)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @_ZN6webrtc20WebRtcAgc_ProcessVadEPNS_6AgcVadEPKsm(%"struct.webrtc::AgcVad"*, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca [8 x i16], align 16
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to [4 x i16]*
  %7 = bitcast [8 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 0
  %9 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 1
  %10 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 2
  %11 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 3
  %12 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 4
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 5
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 6
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 0, i64 7
  %16 = bitcast i64* %5 to i8*
  %17 = bitcast [8 x i16]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  %18 = bitcast i64* %5 to i16*
  %19 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %20 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %21 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %22 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 1
  store i64 -6148914691236517206, i64* %5, align 8
  %23 = load i16, i16* %22, align 4
  %24 = icmp eq i64 %2, 160
  %25 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 0, i64 0
  br label %26

26:                                               ; preds = %106, %3
  %27 = phi i16 [ %23, %3 ], [ %160, %106 ]
  %28 = phi i16 [ 0, %3 ], [ %168, %106 ]
  %29 = phi i32 [ 0, %3 ], [ %167, %106 ]
  %30 = phi i16* [ %1, %3 ], [ %107, %106 ]
  br i1 %24, label %31, label %104

31:                                               ; preds = %26
  %32 = load i16, i16* %30, align 2
  %33 = sext i16 %32 to i32
  %34 = getelementptr inbounds i16, i16* %30, i64 1
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = add nsw i32 %36, %33
  %38 = lshr i32 %37, 1
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %8, align 16
  %40 = getelementptr inbounds i16, i16* %30, i64 2
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = getelementptr inbounds i16, i16* %30, i64 3
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = add nsw i32 %45, %42
  %47 = lshr i32 %46, 1
  %48 = trunc i32 %47 to i16
  store i16 %48, i16* %9, align 2
  %49 = getelementptr inbounds i16, i16* %30, i64 4
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = getelementptr inbounds i16, i16* %30, i64 5
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = add nsw i32 %54, %51
  %56 = lshr i32 %55, 1
  %57 = trunc i32 %56 to i16
  store i16 %57, i16* %10, align 4
  %58 = getelementptr inbounds i16, i16* %30, i64 6
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds i16, i16* %30, i64 7
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = add nsw i32 %63, %60
  %65 = lshr i32 %64, 1
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %11, align 2
  %67 = getelementptr inbounds i16, i16* %30, i64 8
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = getelementptr inbounds i16, i16* %30, i64 9
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = add nsw i32 %72, %69
  %74 = lshr i32 %73, 1
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %12, align 8
  %76 = getelementptr inbounds i16, i16* %30, i64 10
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = getelementptr inbounds i16, i16* %30, i64 11
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = add nsw i32 %81, %78
  %83 = lshr i32 %82, 1
  %84 = trunc i32 %83 to i16
  store i16 %84, i16* %13, align 2
  %85 = getelementptr inbounds i16, i16* %30, i64 12
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = getelementptr inbounds i16, i16* %30, i64 13
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = add nsw i32 %90, %87
  %92 = lshr i32 %91, 1
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %14, align 4
  %94 = getelementptr inbounds i16, i16* %30, i64 14
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = getelementptr inbounds i16, i16* %30, i64 15
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  %100 = add nsw i32 %99, %96
  %101 = lshr i32 %100, 1
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %15, align 2
  %103 = getelementptr inbounds i16, i16* %30, i64 16
  call void @WebRtcSpl_DownsampleBy2(i16* nonnull %8, i64 8, i16* nonnull %18, i32* %25) #5
  br label %106

104:                                              ; preds = %26
  call void @WebRtcSpl_DownsampleBy2(i16* %30, i64 8, i16* nonnull %18, i32* %25) #5
  %105 = getelementptr inbounds i16, i16* %30, i64 8
  br label %106

106:                                              ; preds = %104, %31
  %107 = phi i16* [ %103, %31 ], [ %105, %104 ]
  %108 = load i16, i16* %18, align 8
  %109 = sext i16 %108 to i32
  %110 = sext i16 %27 to i32
  %111 = add nsw i32 %109, %110
  %112 = mul nsw i32 %111, 600
  %113 = lshr i32 %112, 10
  %114 = trunc i32 %113 to i16
  %115 = sub i16 %114, %108
  %116 = sdiv i32 %111, 64
  %117 = mul nsw i32 %116, %111
  %118 = add i32 %117, %29
  %119 = srem i32 %111, 64
  %120 = mul nsw i32 %119, %111
  %121 = sdiv i32 %120, 64
  %122 = add i32 %118, %121
  %123 = load i16, i16* %19, align 2
  %124 = sext i16 %123 to i32
  %125 = sext i16 %115 to i32
  %126 = add nsw i32 %124, %125
  %127 = mul nsw i32 %126, 600
  %128 = lshr i32 %127, 10
  %129 = trunc i32 %128 to i16
  %130 = sub i16 %129, %123
  %131 = sdiv i32 %126, 64
  %132 = mul nsw i32 %131, %126
  %133 = add i32 %132, %122
  %134 = srem i32 %126, 64
  %135 = mul nsw i32 %134, %126
  %136 = sdiv i32 %135, 64
  %137 = add i32 %133, %136
  %138 = load i16, i16* %20, align 4
  %139 = sext i16 %138 to i32
  %140 = sext i16 %130 to i32
  %141 = add nsw i32 %139, %140
  %142 = mul nsw i32 %141, 600
  %143 = lshr i32 %142, 10
  %144 = trunc i32 %143 to i16
  %145 = sub i16 %144, %138
  %146 = sdiv i32 %141, 64
  %147 = mul nsw i32 %146, %141
  %148 = add i32 %147, %137
  %149 = srem i32 %141, 64
  %150 = mul nsw i32 %149, %141
  %151 = sdiv i32 %150, 64
  %152 = add i32 %148, %151
  %153 = load i16, i16* %21, align 2
  %154 = sext i16 %153 to i32
  %155 = sext i16 %145 to i32
  %156 = add nsw i32 %154, %155
  %157 = mul nsw i32 %156, 600
  %158 = lshr i32 %157, 10
  %159 = trunc i32 %158 to i16
  %160 = sub i16 %159, %153
  %161 = sdiv i32 %156, 64
  %162 = mul nsw i32 %161, %156
  %163 = add i32 %162, %152
  %164 = srem i32 %156, 64
  %165 = mul nsw i32 %164, %156
  %166 = sdiv i32 %165, 64
  %167 = add i32 %163, %166
  %168 = add nuw nsw i16 %28, 1
  %169 = icmp eq i16 %168, 10
  br i1 %169, label %170, label %26

170:                                              ; preds = %106
  store i16 %160, i16* %22, align 4
  %171 = icmp ugt i32 %167, 65535
  %172 = select i1 %171, i16 0, i16 16
  %173 = zext i16 %172 to i32
  %174 = shl i32 %167, %173
  %175 = icmp ugt i32 %174, 16777215
  %176 = or i16 %172, 8
  %177 = select i1 %175, i16 %172, i16 %176
  %178 = zext i16 %177 to i32
  %179 = shl i32 %167, %178
  %180 = icmp ugt i32 %179, 268435455
  %181 = or i16 %177, 4
  %182 = select i1 %180, i16 %177, i16 %181
  %183 = zext i16 %182 to i32
  %184 = shl i32 %167, %183
  %185 = icmp ugt i32 %184, 1073741823
  %186 = or i16 %182, 2
  %187 = select i1 %185, i16 %182, i16 %186
  %188 = sext i16 %187 to i32
  %189 = shl i32 %167, %188
  %190 = lshr i32 %189, 31
  %191 = trunc i32 %190 to i16
  %192 = xor i16 %191, 1
  %193 = add i16 %192, %187
  %194 = shl i16 %193, 11
  %195 = sub i16 30720, %194
  %196 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 2
  %197 = load i16, i16* %196, align 2
  %198 = icmp slt i16 %197, 250
  br i1 %198, label %199, label %201

199:                                              ; preds = %170
  %200 = add nsw i16 %197, 1
  store i16 %200, i16* %196, align 2
  br label %201

201:                                              ; preds = %199, %170
  %202 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 7
  %203 = load i16, i16* %202, align 2
  %204 = sext i16 %203 to i32
  %205 = mul nsw i32 %204, 15
  %206 = sext i16 %195 to i32
  %207 = add nsw i32 %205, %206
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i16
  store i16 %209, i16* %202, align 2
  %210 = mul nsw i32 %206, %206
  %211 = lshr exact i32 %210, 12
  %212 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 8
  %213 = load i32, i32* %212, align 4
  %214 = mul nsw i32 %213, 15
  %215 = add nsw i32 %214, %211
  %216 = sdiv i32 %215, 16
  store i32 %216, i32* %212, align 4
  %217 = shl i32 %208, 16
  %218 = ashr exact i32 %217, 16
  %219 = mul nsw i32 %218, %218
  %220 = shl i32 %216, 12
  %221 = sub nsw i32 %220, %219
  %222 = call i32 @WebRtcSpl_Sqrt(i32 %221) #5
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 9
  store i16 %223, i16* %224, align 4
  %225 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 4
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i32
  %228 = load i16, i16* %196, align 2
  %229 = sext i16 %228 to i32
  %230 = mul nsw i32 %229, %227
  %231 = add nsw i32 %230, %206
  %232 = add i16 %228, 1
  %233 = icmp eq i16 %228, 32767
  %234 = select i1 %233, i16 32767, i16 %232
  %235 = call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %231, i16 signext %234) #5
  store i16 %235, i16* %225, align 2
  %236 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 5
  %237 = load i32, i32* %236, align 4
  %238 = load i16, i16* %196, align 2
  %239 = sext i16 %238 to i32
  %240 = mul nsw i32 %237, %239
  %241 = add nsw i32 %240, %211
  %242 = add i16 %238, 1
  %243 = icmp eq i16 %238, 32767
  %244 = select i1 %243, i16 32767, i16 %242
  %245 = call i32 @WebRtcSpl_DivW32W16(i32 %241, i16 signext %244) #5
  store i32 %245, i32* %236, align 4
  %246 = load i16, i16* %225, align 2
  %247 = sext i16 %246 to i32
  %248 = mul nsw i32 %247, %247
  %249 = shl i32 %245, 12
  %250 = sub nsw i32 %249, %248
  %251 = call i32 @WebRtcSpl_Sqrt(i32 %250) #5
  %252 = trunc i32 %251 to i16
  %253 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 6
  store i16 %252, i16* %253, align 4
  %254 = load i16, i16* %225, align 2
  %255 = sub i16 %195, %254
  %256 = sext i16 %255 to i32
  %257 = mul nsw i32 %256, 12288
  %258 = call i32 @WebRtcSpl_DivW32W16(i32 %257, i16 signext %252) #5
  %259 = getelementptr inbounds %"struct.webrtc::AgcVad", %"struct.webrtc::AgcVad"* %0, i64 0, i32 3
  %260 = load i16, i16* %259, align 4
  %261 = sext i16 %260 to i32
  %262 = mul nsw i32 %261, 53248
  %263 = sext i32 %258 to i64
  %264 = ashr exact i32 %262, 10
  %265 = sext i32 %264 to i64
  %266 = add nsw i64 %265, %263
  %267 = icmp sgt i64 %266, 131135
  br i1 %267, label %273, label %268

268:                                              ; preds = %201
  %269 = lshr i64 %266, 6
  %270 = icmp slt i64 %266, -131072
  %271 = select i1 %270, i64 63488, i64 %269
  %272 = trunc i64 %271 to i16
  br label %273

273:                                              ; preds = %268, %201
  %274 = phi i16 [ 2048, %201 ], [ %272, %268 ]
  store i16 %274, i16* %259, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  ret i16 %274
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc29WebRtcAgc_ComputeDigitalGainsEPNS_10DigitalAgcEPKPKsmjsPi(%"struct.webrtc::DigitalAgc"*, i16** nocapture readonly, i64, i32, i16 signext, i32* nocapture) local_unnamed_addr #0 {
  %7 = alloca [10 x i32], align 16
  %8 = bitcast [10 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 40, i1 false)
  switch i32 %3, label %411 [
    i32 8000, label %10
    i32 48000, label %9
    i32 32000, label %9
    i32 16000, label %9
  ]

9:                                                ; preds = %6, %6, %6
  br label %10

10:                                               ; preds = %6, %9
  %11 = phi i64 [ 8, %6 ], [ 16, %9 ]
  %12 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6
  %13 = load i16*, i16** %1, align 8
  %14 = mul nuw nsw i64 %11, 10
  %15 = tail call signext i16 @_ZN6webrtc20WebRtcAgc_ProcessVadEPNS_6AgcVadEPKsm(%"struct.webrtc::AgcVad"* %12, i16* %13, i64 %14)
  %16 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 2
  %17 = load i16, i16* %16, align 2
  %18 = icmp sgt i16 %17, 10
  br i1 %18, label %19, label %28

19:                                               ; preds = %10
  %20 = sext i16 %15 to i32
  %21 = mul nsw i32 %20, 3
  %22 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 7, i32 3
  %23 = load i16, i16* %22, align 4
  %24 = sext i16 %23 to i32
  %25 = sub nsw i32 %21, %24
  %26 = lshr i32 %25, 2
  %27 = trunc i32 %26 to i16
  br label %28

28:                                               ; preds = %19, %10
  %29 = phi i16 [ %27, %19 ], [ %15, %10 ]
  %30 = sext i16 %29 to i32
  %31 = icmp sgt i16 %29, 1024
  br i1 %31, label %38, label %32

32:                                               ; preds = %28
  %33 = icmp slt i16 %29, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %32
  %35 = mul nsw i32 %30, -65
  %36 = ashr i32 %35, 10
  %37 = trunc i32 %36 to i16
  br label %38

38:                                               ; preds = %32, %28, %34
  %39 = phi i16 [ %37, %34 ], [ -65, %28 ], [ 0, %32 ]
  %40 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 5
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %41, 3
  br i1 %42, label %60, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 6
  %45 = load i16, i16* %44, align 4
  %46 = sext i16 %45 to i32
  %47 = icmp slt i16 %45, 4000
  br i1 %47, label %56, label %48

48:                                               ; preds = %43
  %49 = icmp slt i16 %45, 8096
  br i1 %49, label %50, label %56

50:                                               ; preds = %48
  %51 = add nsw i32 %46, -4000
  %52 = sext i16 %39 to i32
  %53 = mul nsw i32 %51, %52
  %54 = lshr i32 %53, 12
  %55 = trunc i32 %54 to i16
  br label %56

56:                                               ; preds = %43, %48, %50
  %57 = phi i16 [ %55, %50 ], [ %39, %48 ], [ 0, %43 ]
  %58 = icmp eq i16 %4, 0
  %59 = select i1 %58, i16 %57, i16 0
  br label %60

60:                                               ; preds = %56, %38
  %61 = phi i16 [ %39, %38 ], [ %59, %56 ]
  %62 = load i16*, i16** %1, align 8
  %63 = bitcast i16* %62 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2
  %65 = getelementptr inbounds i16, i16* %62, i64 4
  %66 = bitcast i16* %65 to <4 x i16>*
  %67 = load <4 x i16>, <4 x i16>* %66, align 2
  %68 = sext <4 x i16> %64 to <4 x i32>
  %69 = sext <4 x i16> %67 to <4 x i32>
  %70 = mul nsw <4 x i32> %68, %68
  %71 = mul nsw <4 x i32> %69, %69
  %72 = icmp eq i64 %11, 8
  br i1 %72, label %73, label %788, !llvm.loop !4

73:                                               ; preds = %788, %60
  %74 = phi <4 x i32> [ %70, %60 ], [ %801, %788 ]
  %75 = phi <4 x i32> [ %71, %60 ], [ %802, %788 ]
  %76 = icmp sgt <4 x i32> %74, %75
  %77 = select <4 x i1> %76, <4 x i32> %74, <4 x i32> %75
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %79 = icmp sgt <4 x i32> %77, %78
  %80 = select <4 x i1> %79, <4 x i32> %77, <4 x i32> %78
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = icmp sgt <4 x i32> %80, %81
  %83 = select <4 x i1> %82, <4 x i32> %80, <4 x i32> %81
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 0
  store i32 %84, i32* %85, align 16
  %86 = getelementptr inbounds i16, i16* %62, i64 %11
  %87 = bitcast i16* %86 to <4 x i16>*
  %88 = load <4 x i16>, <4 x i16>* %87, align 2
  %89 = getelementptr inbounds i16, i16* %86, i64 4
  %90 = bitcast i16* %89 to <4 x i16>*
  %91 = load <4 x i16>, <4 x i16>* %90, align 2
  %92 = sext <4 x i16> %88 to <4 x i32>
  %93 = sext <4 x i16> %91 to <4 x i32>
  %94 = mul nsw <4 x i32> %92, %92
  %95 = mul nsw <4 x i32> %93, %93
  %96 = icmp eq i64 %11, 8
  br i1 %96, label %97, label %772, !llvm.loop !6

97:                                               ; preds = %772, %73
  %98 = phi <4 x i32> [ %94, %73 ], [ %786, %772 ]
  %99 = phi <4 x i32> [ %95, %73 ], [ %787, %772 ]
  %100 = icmp sgt <4 x i32> %98, %99
  %101 = select <4 x i1> %100, <4 x i32> %98, <4 x i32> %99
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %103 = icmp sgt <4 x i32> %101, %102
  %104 = select <4 x i1> %103, <4 x i32> %101, <4 x i32> %102
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %106 = icmp sgt <4 x i32> %104, %105
  %107 = select <4 x i1> %106, <4 x i32> %104, <4 x i32> %105
  %108 = extractelement <4 x i32> %107, i32 0
  %109 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 1
  store i32 %108, i32* %109, align 4
  %110 = shl nuw nsw i64 %11, 1
  %111 = getelementptr inbounds i16, i16* %62, i64 %110
  %112 = bitcast i16* %111 to <4 x i16>*
  %113 = load <4 x i16>, <4 x i16>* %112, align 2
  %114 = getelementptr inbounds i16, i16* %111, i64 4
  %115 = bitcast i16* %114 to <4 x i16>*
  %116 = load <4 x i16>, <4 x i16>* %115, align 2
  %117 = sext <4 x i16> %113 to <4 x i32>
  %118 = sext <4 x i16> %116 to <4 x i32>
  %119 = mul nsw <4 x i32> %117, %117
  %120 = mul nsw <4 x i32> %118, %118
  %121 = icmp eq i64 %11, 8
  br i1 %121, label %450, label %756, !llvm.loop !7

122:                                              ; preds = %187, %625
  %123 = phi i32 [ %84, %625 ], [ %189, %187 ]
  %124 = phi i64 [ 0, %625 ], [ %183, %187 ]
  %125 = phi i32 [ %641, %625 ], [ %185, %187 ]
  %126 = ashr i32 %125, 16
  %127 = mul nsw i32 %126, -1000
  %128 = add nsw i32 %127, %125
  %129 = and i32 %125, 65535
  %130 = mul nsw i32 %129, -1000
  %131 = ashr i32 %130, 16
  %132 = add nsw i32 %128, %131
  %133 = icmp sgt i32 %123, %132
  %134 = select i1 %133, i32 %123, i32 %132
  store i32 %134, i32* %640, align 4
  %135 = load i32, i32* %642, align 4
  %136 = icmp sgt i32 %123, %135
  br i1 %136, label %137, label %146

137:                                              ; preds = %122
  %138 = sub nsw i32 %123, %135
  %139 = ashr i32 %138, 16
  %140 = mul nsw i32 %139, 500
  %141 = add nsw i32 %140, %135
  %142 = and i32 %138, 65535
  %143 = mul nuw nsw i32 %142, 500
  %144 = lshr i32 %143, 16
  %145 = add nsw i32 %141, %144
  br label %154

146:                                              ; preds = %122
  %147 = ashr i32 %135, 16
  %148 = mul nsw i32 %147, %643
  %149 = add nsw i32 %148, %135
  %150 = and i32 %135, 65535
  %151 = mul nsw i32 %150, %643
  %152 = ashr i32 %151, 16
  %153 = add nsw i32 %149, %152
  br label %154

154:                                              ; preds = %146, %137
  %155 = phi i32 [ %153, %146 ], [ %145, %137 ]
  store i32 %155, i32* %642, align 4
  %156 = icmp sgt i32 %134, %155
  %157 = select i1 %156, i32 %134, i32 %155
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %162, label %159

159:                                              ; preds = %154
  %160 = tail call i32 @llvm.ctlz.i32(i32 %157, i1 false) #5, !range !3
  %161 = trunc i32 %160 to i16
  br label %162

162:                                              ; preds = %154, %159
  %163 = phi i16 [ %161, %159 ], [ 0, %154 ]
  %164 = select i1 %158, i16 31, i16 %163
  %165 = sext i16 %164 to i32
  %166 = shl i32 %157, %165
  %167 = lshr i32 %166, 19
  %168 = and i32 %167, 4095
  %169 = zext i32 %168 to i64
  %170 = add nsw i32 %165, -1
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 3, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = sext i16 %164 to i64
  %175 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 3, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = sub nsw i32 %173, %176
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %169, %178
  %180 = lshr i64 %179, 12
  %181 = trunc i64 %180 to i32
  %182 = add nsw i32 %176, %181
  %183 = add nuw nsw i64 %124, 1
  %184 = getelementptr inbounds i32, i32* %5, i64 %183
  store i32 %182, i32* %184, align 4
  %185 = load i32, i32* %640, align 4
  %186 = icmp eq i64 %183, 10
  br i1 %186, label %190, label %187

187:                                              ; preds = %162
  %188 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 %183
  %189 = load i32, i32* %188, align 4
  br label %122

190:                                              ; preds = %162
  %191 = shl nsw i32 %165, 9
  %192 = lshr i32 %168, 3
  %193 = icmp eq i32 %185, 0
  %194 = tail call i32 @llvm.ctlz.i32(i32 %185, i1 true) #5, !range !3
  %195 = select i1 %193, i32 31, i32 %194
  %196 = shl i32 %185, %195
  %197 = shl nuw nsw i32 %195, 9
  %198 = lshr i32 %196, 22
  %199 = and i32 %198, 511
  %200 = sub nsw i32 1000, %191
  %201 = add nsw i32 %200, %192
  %202 = add nsw i32 %201, %197
  %203 = sub nsw i32 %202, %199
  %204 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 6, i32 9
  %205 = load i16, i16* %204, align 4
  %206 = trunc i32 %203 to i16
  %207 = sub i16 %206, %205
  %208 = icmp slt i16 %207, 0
  %209 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 4
  br i1 %208, label %210, label %211

210:                                              ; preds = %190
  store i16 0, i16* %209, align 4
  br label %341

211:                                              ; preds = %190
  %212 = sext i16 %207 to i32
  %213 = load i16, i16* %209, align 4
  %214 = sext i16 %213 to i32
  %215 = mul nsw i32 %214, 7
  %216 = add nsw i32 %215, %212
  %217 = lshr i32 %216, 3
  %218 = trunc i32 %217 to i16
  store i16 %218, i16* %209, align 4
  %219 = shl i32 %217, 16
  %220 = ashr exact i32 %219, 16
  %221 = icmp sgt i16 %218, 0
  br i1 %221, label %222, label %341

222:                                              ; preds = %211
  %223 = icmp slt i16 %218, 2500
  br i1 %223, label %224, label %228

224:                                              ; preds = %222
  %225 = sub nsw i32 2500, %220
  %226 = ashr i32 %225, 5
  %227 = add nsw i32 %226, 178
  br label %228

228:                                              ; preds = %222, %224
  %229 = phi i32 [ %227, %224 ], [ 178, %222 ]
  %230 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 3, i64 0
  %231 = getelementptr inbounds i32, i32* %5, i64 1
  %232 = load i32, i32* %231, align 4
  %233 = load i32, i32* %230, align 4
  %234 = sub nsw i32 %232, %233
  %235 = icmp sgt i32 %234, 8388608
  %236 = ashr i32 %234, 8
  %237 = mul nsw i32 %236, %229
  %238 = mul nsw i32 %234, %229
  %239 = ashr i32 %238, 8
  %240 = select i1 %235, i32 %237, i32 %239
  %241 = add nsw i32 %240, %233
  store i32 %241, i32* %231, align 4
  %242 = getelementptr inbounds i32, i32* %5, i64 2
  %243 = load i32, i32* %242, align 4
  %244 = load i32, i32* %230, align 4
  %245 = sub nsw i32 %243, %244
  %246 = icmp sgt i32 %245, 8388608
  %247 = ashr i32 %245, 8
  %248 = mul nsw i32 %247, %229
  %249 = mul nsw i32 %245, %229
  %250 = ashr i32 %249, 8
  %251 = select i1 %246, i32 %248, i32 %250
  %252 = add nsw i32 %251, %244
  store i32 %252, i32* %242, align 4
  %253 = getelementptr inbounds i32, i32* %5, i64 3
  %254 = load i32, i32* %253, align 4
  %255 = load i32, i32* %230, align 4
  %256 = sub nsw i32 %254, %255
  %257 = icmp sgt i32 %256, 8388608
  %258 = ashr i32 %256, 8
  %259 = mul nsw i32 %258, %229
  %260 = mul nsw i32 %256, %229
  %261 = ashr i32 %260, 8
  %262 = select i1 %257, i32 %259, i32 %261
  %263 = add nsw i32 %262, %255
  store i32 %263, i32* %253, align 4
  %264 = getelementptr inbounds i32, i32* %5, i64 4
  %265 = load i32, i32* %264, align 4
  %266 = load i32, i32* %230, align 4
  %267 = sub nsw i32 %265, %266
  %268 = icmp sgt i32 %267, 8388608
  %269 = ashr i32 %267, 8
  %270 = mul nsw i32 %269, %229
  %271 = mul nsw i32 %267, %229
  %272 = ashr i32 %271, 8
  %273 = select i1 %268, i32 %270, i32 %272
  %274 = add nsw i32 %273, %266
  store i32 %274, i32* %264, align 4
  %275 = getelementptr inbounds i32, i32* %5, i64 5
  %276 = load i32, i32* %275, align 4
  %277 = load i32, i32* %230, align 4
  %278 = sub nsw i32 %276, %277
  %279 = icmp sgt i32 %278, 8388608
  %280 = ashr i32 %278, 8
  %281 = mul nsw i32 %280, %229
  %282 = mul nsw i32 %278, %229
  %283 = ashr i32 %282, 8
  %284 = select i1 %279, i32 %281, i32 %283
  %285 = add nsw i32 %284, %277
  store i32 %285, i32* %275, align 4
  %286 = getelementptr inbounds i32, i32* %5, i64 6
  %287 = load i32, i32* %286, align 4
  %288 = load i32, i32* %230, align 4
  %289 = sub nsw i32 %287, %288
  %290 = icmp sgt i32 %289, 8388608
  %291 = ashr i32 %289, 8
  %292 = mul nsw i32 %291, %229
  %293 = mul nsw i32 %289, %229
  %294 = ashr i32 %293, 8
  %295 = select i1 %290, i32 %292, i32 %294
  %296 = add nsw i32 %295, %288
  store i32 %296, i32* %286, align 4
  %297 = getelementptr inbounds i32, i32* %5, i64 7
  %298 = load i32, i32* %297, align 4
  %299 = load i32, i32* %230, align 4
  %300 = sub nsw i32 %298, %299
  %301 = icmp sgt i32 %300, 8388608
  %302 = ashr i32 %300, 8
  %303 = mul nsw i32 %302, %229
  %304 = mul nsw i32 %300, %229
  %305 = ashr i32 %304, 8
  %306 = select i1 %301, i32 %303, i32 %305
  %307 = add nsw i32 %306, %299
  store i32 %307, i32* %297, align 4
  %308 = getelementptr inbounds i32, i32* %5, i64 8
  %309 = load i32, i32* %308, align 4
  %310 = load i32, i32* %230, align 4
  %311 = sub nsw i32 %309, %310
  %312 = icmp sgt i32 %311, 8388608
  %313 = ashr i32 %311, 8
  %314 = mul nsw i32 %313, %229
  %315 = mul nsw i32 %311, %229
  %316 = ashr i32 %315, 8
  %317 = select i1 %312, i32 %314, i32 %316
  %318 = add nsw i32 %317, %310
  store i32 %318, i32* %308, align 4
  %319 = getelementptr inbounds i32, i32* %5, i64 9
  %320 = load i32, i32* %319, align 4
  %321 = load i32, i32* %230, align 4
  %322 = sub nsw i32 %320, %321
  %323 = icmp sgt i32 %322, 8388608
  %324 = ashr i32 %322, 8
  %325 = mul nsw i32 %324, %229
  %326 = mul nsw i32 %322, %229
  %327 = ashr i32 %326, 8
  %328 = select i1 %323, i32 %325, i32 %327
  %329 = add nsw i32 %328, %321
  store i32 %329, i32* %319, align 4
  %330 = getelementptr inbounds i32, i32* %5, i64 10
  %331 = load i32, i32* %330, align 4
  %332 = load i32, i32* %230, align 4
  %333 = sub nsw i32 %331, %332
  %334 = icmp sgt i32 %333, 8388608
  %335 = ashr i32 %333, 8
  %336 = mul nsw i32 %335, %229
  %337 = mul nsw i32 %333, %229
  %338 = ashr i32 %337, 8
  %339 = select i1 %334, i32 %336, i32 %338
  %340 = add nsw i32 %339, %332
  store i32 %340, i32* %330, align 4
  br label %341

341:                                              ; preds = %228, %210, %211
  br label %342

342:                                              ; preds = %341, %398
  %343 = phi i64 [ %344, %398 ], [ 0, %341 ]
  %344 = add nuw nsw i64 %343, 1
  %345 = getelementptr inbounds i32, i32* %5, i64 %344
  %346 = load i32, i32* %345, align 4
  %347 = icmp sgt i32 %346, 47452159
  br i1 %347, label %348, label %353

348:                                              ; preds = %342
  %349 = lshr i32 %346, 31
  %350 = xor i32 %349, %346
  %351 = tail call i32 @llvm.ctlz.i32(i32 %350, i1 false) #5, !range !3
  %352 = sub nsw i32 17, %351
  br label %353

353:                                              ; preds = %348, %342
  %354 = phi i32 [ %352, %348 ], [ 10, %342 ]
  %355 = ashr i32 %346, %354
  %356 = add nsw i32 %355, 1
  %357 = mul nsw i32 %356, %356
  %358 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 %343
  %359 = load i32, i32* %358, align 4
  %360 = ashr i32 %359, 12
  %361 = add nsw i32 %360, 1
  %362 = shl nsw i32 %354, 1
  %363 = sub nsw i32 22, %362
  %364 = icmp slt i32 %354, 12
  %365 = shl i32 32767, %363
  %366 = add nsw i32 %362, -22
  %367 = lshr i32 32767, %366
  %368 = select i1 %364, i32 %365, i32 %367
  %369 = lshr i32 %357, 13
  %370 = mul nsw i32 %361, %369
  %371 = and i32 %357, 8191
  %372 = mul nsw i32 %361, %371
  %373 = ashr i32 %372, 13
  %374 = add nsw i32 %373, %370
  %375 = icmp sgt i32 %374, %368
  br i1 %375, label %376, label %398

376:                                              ; preds = %353, %385
  %377 = phi i32 [ %386, %385 ], [ %346, %353 ]
  %378 = icmp sgt i32 %377, 8388607
  br i1 %378, label %379, label %382

379:                                              ; preds = %376
  %380 = lshr i32 %377, 8
  %381 = mul nuw nsw i32 %380, 253
  br label %385

382:                                              ; preds = %376
  %383 = mul nsw i32 %377, 253
  %384 = sdiv i32 %383, 256
  br label %385

385:                                              ; preds = %382, %379
  %386 = phi i32 [ %384, %382 ], [ %381, %379 ]
  %387 = ashr i32 %386, %354
  %388 = add nsw i32 %387, 1
  %389 = mul nsw i32 %388, %388
  %390 = lshr i32 %389, 13
  %391 = mul nsw i32 %361, %390
  %392 = and i32 %389, 8191
  %393 = mul nsw i32 %361, %392
  %394 = ashr i32 %393, 13
  %395 = add nsw i32 %394, %391
  %396 = icmp sgt i32 %395, %368
  br i1 %396, label %376, label %397

397:                                              ; preds = %385
  store i32 %386, i32* %345, align 4
  br label %398

398:                                              ; preds = %397, %353
  %399 = icmp eq i64 %344, 10
  br i1 %399, label %400, label %342

400:                                              ; preds = %398
  %401 = getelementptr inbounds i32, i32* %5, i64 1
  %402 = load i32, i32* %401, align 4
  %403 = getelementptr inbounds i32, i32* %5, i64 2
  %404 = load i32, i32* %403, align 4
  %405 = icmp sgt i32 %402, %404
  br i1 %405, label %406, label %407

406:                                              ; preds = %400
  store i32 %404, i32* %401, align 4
  br label %407

407:                                              ; preds = %400, %406
  %408 = getelementptr inbounds i32, i32* %5, i64 3
  %409 = load i32, i32* %408, align 4
  %410 = icmp sgt i32 %404, %409
  br i1 %410, label %413, label %414

411:                                              ; preds = %6, %449
  %412 = phi i32 [ 0, %449 ], [ -1, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #5
  ret i32 %412

413:                                              ; preds = %407
  store i32 %409, i32* %403, align 4
  br label %414

414:                                              ; preds = %413, %407
  %415 = getelementptr inbounds i32, i32* %5, i64 4
  %416 = load i32, i32* %415, align 4
  %417 = icmp sgt i32 %409, %416
  br i1 %417, label %418, label %419

418:                                              ; preds = %414
  store i32 %416, i32* %408, align 4
  br label %419

419:                                              ; preds = %418, %414
  %420 = getelementptr inbounds i32, i32* %5, i64 5
  %421 = load i32, i32* %420, align 4
  %422 = icmp sgt i32 %416, %421
  br i1 %422, label %423, label %424

423:                                              ; preds = %419
  store i32 %421, i32* %415, align 4
  br label %424

424:                                              ; preds = %423, %419
  %425 = getelementptr inbounds i32, i32* %5, i64 6
  %426 = load i32, i32* %425, align 4
  %427 = icmp sgt i32 %421, %426
  br i1 %427, label %428, label %429

428:                                              ; preds = %424
  store i32 %426, i32* %420, align 4
  br label %429

429:                                              ; preds = %428, %424
  %430 = getelementptr inbounds i32, i32* %5, i64 7
  %431 = load i32, i32* %430, align 4
  %432 = icmp sgt i32 %426, %431
  br i1 %432, label %433, label %434

433:                                              ; preds = %429
  store i32 %431, i32* %425, align 4
  br label %434

434:                                              ; preds = %433, %429
  %435 = getelementptr inbounds i32, i32* %5, i64 8
  %436 = load i32, i32* %435, align 4
  %437 = icmp sgt i32 %431, %436
  br i1 %437, label %438, label %439

438:                                              ; preds = %434
  store i32 %436, i32* %430, align 4
  br label %439

439:                                              ; preds = %438, %434
  %440 = getelementptr inbounds i32, i32* %5, i64 9
  %441 = load i32, i32* %440, align 4
  %442 = icmp sgt i32 %436, %441
  br i1 %442, label %443, label %444

443:                                              ; preds = %439
  store i32 %441, i32* %435, align 4
  br label %444

444:                                              ; preds = %443, %439
  %445 = getelementptr inbounds i32, i32* %5, i64 10
  %446 = load i32, i32* %445, align 4
  %447 = icmp sgt i32 %441, %446
  br i1 %447, label %448, label %449

448:                                              ; preds = %444
  store i32 %446, i32* %440, align 4
  br label %449

449:                                              ; preds = %448, %444
  store i32 %446, i32* %638, align 4
  br label %411

450:                                              ; preds = %756, %97
  %451 = phi <4 x i32> [ %119, %97 ], [ %770, %756 ]
  %452 = phi <4 x i32> [ %120, %97 ], [ %771, %756 ]
  %453 = icmp sgt <4 x i32> %451, %452
  %454 = select <4 x i1> %453, <4 x i32> %451, <4 x i32> %452
  %455 = shufflevector <4 x i32> %454, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %456 = icmp sgt <4 x i32> %454, %455
  %457 = select <4 x i1> %456, <4 x i32> %454, <4 x i32> %455
  %458 = shufflevector <4 x i32> %457, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %459 = icmp sgt <4 x i32> %457, %458
  %460 = select <4 x i1> %459, <4 x i32> %457, <4 x i32> %458
  %461 = extractelement <4 x i32> %460, i32 0
  %462 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 2
  store i32 %461, i32* %462, align 8
  %463 = mul nuw nsw i64 %11, 3
  %464 = getelementptr inbounds i16, i16* %62, i64 %463
  %465 = bitcast i16* %464 to <4 x i16>*
  %466 = load <4 x i16>, <4 x i16>* %465, align 2
  %467 = getelementptr inbounds i16, i16* %464, i64 4
  %468 = bitcast i16* %467 to <4 x i16>*
  %469 = load <4 x i16>, <4 x i16>* %468, align 2
  %470 = sext <4 x i16> %466 to <4 x i32>
  %471 = sext <4 x i16> %469 to <4 x i32>
  %472 = mul nsw <4 x i32> %470, %470
  %473 = mul nsw <4 x i32> %471, %471
  %474 = icmp eq i64 %11, 8
  br i1 %474, label %475, label %740, !llvm.loop !8

475:                                              ; preds = %740, %450
  %476 = phi <4 x i32> [ %472, %450 ], [ %754, %740 ]
  %477 = phi <4 x i32> [ %473, %450 ], [ %755, %740 ]
  %478 = icmp sgt <4 x i32> %476, %477
  %479 = select <4 x i1> %478, <4 x i32> %476, <4 x i32> %477
  %480 = shufflevector <4 x i32> %479, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %481 = icmp sgt <4 x i32> %479, %480
  %482 = select <4 x i1> %481, <4 x i32> %479, <4 x i32> %480
  %483 = shufflevector <4 x i32> %482, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %484 = icmp sgt <4 x i32> %482, %483
  %485 = select <4 x i1> %484, <4 x i32> %482, <4 x i32> %483
  %486 = extractelement <4 x i32> %485, i32 0
  %487 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 3
  store i32 %486, i32* %487, align 4
  %488 = shl nuw nsw i64 %11, 2
  %489 = getelementptr inbounds i16, i16* %62, i64 %488
  %490 = bitcast i16* %489 to <4 x i16>*
  %491 = load <4 x i16>, <4 x i16>* %490, align 2
  %492 = getelementptr inbounds i16, i16* %489, i64 4
  %493 = bitcast i16* %492 to <4 x i16>*
  %494 = load <4 x i16>, <4 x i16>* %493, align 2
  %495 = sext <4 x i16> %491 to <4 x i32>
  %496 = sext <4 x i16> %494 to <4 x i32>
  %497 = mul nsw <4 x i32> %495, %495
  %498 = mul nsw <4 x i32> %496, %496
  %499 = icmp eq i64 %11, 8
  br i1 %499, label %500, label %724, !llvm.loop !9

500:                                              ; preds = %724, %475
  %501 = phi <4 x i32> [ %497, %475 ], [ %738, %724 ]
  %502 = phi <4 x i32> [ %498, %475 ], [ %739, %724 ]
  %503 = icmp sgt <4 x i32> %501, %502
  %504 = select <4 x i1> %503, <4 x i32> %501, <4 x i32> %502
  %505 = shufflevector <4 x i32> %504, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %506 = icmp sgt <4 x i32> %504, %505
  %507 = select <4 x i1> %506, <4 x i32> %504, <4 x i32> %505
  %508 = shufflevector <4 x i32> %507, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %509 = icmp sgt <4 x i32> %507, %508
  %510 = select <4 x i1> %509, <4 x i32> %507, <4 x i32> %508
  %511 = extractelement <4 x i32> %510, i32 0
  %512 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 4
  store i32 %511, i32* %512, align 16
  %513 = mul nuw nsw i64 %11, 5
  %514 = getelementptr inbounds i16, i16* %62, i64 %513
  %515 = bitcast i16* %514 to <4 x i16>*
  %516 = load <4 x i16>, <4 x i16>* %515, align 2
  %517 = getelementptr inbounds i16, i16* %514, i64 4
  %518 = bitcast i16* %517 to <4 x i16>*
  %519 = load <4 x i16>, <4 x i16>* %518, align 2
  %520 = sext <4 x i16> %516 to <4 x i32>
  %521 = sext <4 x i16> %519 to <4 x i32>
  %522 = mul nsw <4 x i32> %520, %520
  %523 = mul nsw <4 x i32> %521, %521
  %524 = icmp eq i64 %11, 8
  br i1 %524, label %525, label %708, !llvm.loop !10

525:                                              ; preds = %708, %500
  %526 = phi <4 x i32> [ %522, %500 ], [ %722, %708 ]
  %527 = phi <4 x i32> [ %523, %500 ], [ %723, %708 ]
  %528 = icmp sgt <4 x i32> %526, %527
  %529 = select <4 x i1> %528, <4 x i32> %526, <4 x i32> %527
  %530 = shufflevector <4 x i32> %529, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %531 = icmp sgt <4 x i32> %529, %530
  %532 = select <4 x i1> %531, <4 x i32> %529, <4 x i32> %530
  %533 = shufflevector <4 x i32> %532, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %534 = icmp sgt <4 x i32> %532, %533
  %535 = select <4 x i1> %534, <4 x i32> %532, <4 x i32> %533
  %536 = extractelement <4 x i32> %535, i32 0
  %537 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 5
  store i32 %536, i32* %537, align 4
  %538 = mul nuw nsw i64 %11, 6
  %539 = getelementptr inbounds i16, i16* %62, i64 %538
  %540 = bitcast i16* %539 to <4 x i16>*
  %541 = load <4 x i16>, <4 x i16>* %540, align 2
  %542 = getelementptr inbounds i16, i16* %539, i64 4
  %543 = bitcast i16* %542 to <4 x i16>*
  %544 = load <4 x i16>, <4 x i16>* %543, align 2
  %545 = sext <4 x i16> %541 to <4 x i32>
  %546 = sext <4 x i16> %544 to <4 x i32>
  %547 = mul nsw <4 x i32> %545, %545
  %548 = mul nsw <4 x i32> %546, %546
  %549 = icmp eq i64 %11, 8
  br i1 %549, label %550, label %692, !llvm.loop !11

550:                                              ; preds = %692, %525
  %551 = phi <4 x i32> [ %547, %525 ], [ %706, %692 ]
  %552 = phi <4 x i32> [ %548, %525 ], [ %707, %692 ]
  %553 = icmp sgt <4 x i32> %551, %552
  %554 = select <4 x i1> %553, <4 x i32> %551, <4 x i32> %552
  %555 = shufflevector <4 x i32> %554, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %556 = icmp sgt <4 x i32> %554, %555
  %557 = select <4 x i1> %556, <4 x i32> %554, <4 x i32> %555
  %558 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %559 = icmp sgt <4 x i32> %557, %558
  %560 = select <4 x i1> %559, <4 x i32> %557, <4 x i32> %558
  %561 = extractelement <4 x i32> %560, i32 0
  %562 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 6
  store i32 %561, i32* %562, align 8
  %563 = mul nuw nsw i64 %11, 7
  %564 = getelementptr inbounds i16, i16* %62, i64 %563
  %565 = bitcast i16* %564 to <4 x i16>*
  %566 = load <4 x i16>, <4 x i16>* %565, align 2
  %567 = getelementptr inbounds i16, i16* %564, i64 4
  %568 = bitcast i16* %567 to <4 x i16>*
  %569 = load <4 x i16>, <4 x i16>* %568, align 2
  %570 = sext <4 x i16> %566 to <4 x i32>
  %571 = sext <4 x i16> %569 to <4 x i32>
  %572 = mul nsw <4 x i32> %570, %570
  %573 = mul nsw <4 x i32> %571, %571
  %574 = icmp eq i64 %11, 8
  br i1 %574, label %575, label %676, !llvm.loop !12

575:                                              ; preds = %676, %550
  %576 = phi <4 x i32> [ %572, %550 ], [ %690, %676 ]
  %577 = phi <4 x i32> [ %573, %550 ], [ %691, %676 ]
  %578 = icmp sgt <4 x i32> %576, %577
  %579 = select <4 x i1> %578, <4 x i32> %576, <4 x i32> %577
  %580 = shufflevector <4 x i32> %579, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %581 = icmp sgt <4 x i32> %579, %580
  %582 = select <4 x i1> %581, <4 x i32> %579, <4 x i32> %580
  %583 = shufflevector <4 x i32> %582, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %584 = icmp sgt <4 x i32> %582, %583
  %585 = select <4 x i1> %584, <4 x i32> %582, <4 x i32> %583
  %586 = extractelement <4 x i32> %585, i32 0
  %587 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 7
  store i32 %586, i32* %587, align 4
  %588 = shl nuw nsw i64 %11, 3
  %589 = getelementptr inbounds i16, i16* %62, i64 %588
  %590 = bitcast i16* %589 to <4 x i16>*
  %591 = load <4 x i16>, <4 x i16>* %590, align 2
  %592 = getelementptr inbounds i16, i16* %589, i64 4
  %593 = bitcast i16* %592 to <4 x i16>*
  %594 = load <4 x i16>, <4 x i16>* %593, align 2
  %595 = sext <4 x i16> %591 to <4 x i32>
  %596 = sext <4 x i16> %594 to <4 x i32>
  %597 = mul nsw <4 x i32> %595, %595
  %598 = mul nsw <4 x i32> %596, %596
  %599 = icmp eq i64 %11, 8
  br i1 %599, label %600, label %660, !llvm.loop !13

600:                                              ; preds = %660, %575
  %601 = phi <4 x i32> [ %597, %575 ], [ %674, %660 ]
  %602 = phi <4 x i32> [ %598, %575 ], [ %675, %660 ]
  %603 = icmp sgt <4 x i32> %601, %602
  %604 = select <4 x i1> %603, <4 x i32> %601, <4 x i32> %602
  %605 = shufflevector <4 x i32> %604, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %606 = icmp sgt <4 x i32> %604, %605
  %607 = select <4 x i1> %606, <4 x i32> %604, <4 x i32> %605
  %608 = shufflevector <4 x i32> %607, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %609 = icmp sgt <4 x i32> %607, %608
  %610 = select <4 x i1> %609, <4 x i32> %607, <4 x i32> %608
  %611 = extractelement <4 x i32> %610, i32 0
  %612 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 8
  store i32 %611, i32* %612, align 16
  %613 = mul nuw nsw i64 %11, 9
  %614 = getelementptr inbounds i16, i16* %62, i64 %613
  %615 = bitcast i16* %614 to <4 x i16>*
  %616 = load <4 x i16>, <4 x i16>* %615, align 2
  %617 = getelementptr inbounds i16, i16* %614, i64 4
  %618 = bitcast i16* %617 to <4 x i16>*
  %619 = load <4 x i16>, <4 x i16>* %618, align 2
  %620 = sext <4 x i16> %616 to <4 x i32>
  %621 = sext <4 x i16> %619 to <4 x i32>
  %622 = mul nsw <4 x i32> %620, %620
  %623 = mul nsw <4 x i32> %621, %621
  %624 = icmp eq i64 %11, 8
  br i1 %624, label %625, label %644, !llvm.loop !14

625:                                              ; preds = %644, %600
  %626 = phi <4 x i32> [ %622, %600 ], [ %658, %644 ]
  %627 = phi <4 x i32> [ %623, %600 ], [ %659, %644 ]
  %628 = icmp sgt <4 x i32> %626, %627
  %629 = select <4 x i1> %628, <4 x i32> %626, <4 x i32> %627
  %630 = shufflevector <4 x i32> %629, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %631 = icmp sgt <4 x i32> %629, %630
  %632 = select <4 x i1> %631, <4 x i32> %629, <4 x i32> %630
  %633 = shufflevector <4 x i32> %632, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %634 = icmp sgt <4 x i32> %632, %633
  %635 = select <4 x i1> %634, <4 x i32> %632, <4 x i32> %633
  %636 = extractelement <4 x i32> %635, i32 0
  %637 = getelementptr inbounds [10 x i32], [10 x i32]* %7, i64 0, i64 9
  store i32 %636, i32* %637, align 4
  %638 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 2
  %639 = load i32, i32* %638, align 4
  store i32 %639, i32* %5, align 4
  %640 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 1
  %641 = load i32, i32* %640, align 4
  %642 = getelementptr inbounds %"struct.webrtc::DigitalAgc", %"struct.webrtc::DigitalAgc"* %0, i64 0, i32 0
  %643 = sext i16 %61 to i32
  br label %122

644:                                              ; preds = %600
  %645 = add nuw nsw i64 %613, 8
  %646 = getelementptr inbounds i16, i16* %62, i64 %645
  %647 = bitcast i16* %646 to <4 x i16>*
  %648 = load <4 x i16>, <4 x i16>* %647, align 2
  %649 = getelementptr inbounds i16, i16* %646, i64 4
  %650 = bitcast i16* %649 to <4 x i16>*
  %651 = load <4 x i16>, <4 x i16>* %650, align 2
  %652 = sext <4 x i16> %648 to <4 x i32>
  %653 = sext <4 x i16> %651 to <4 x i32>
  %654 = mul nsw <4 x i32> %652, %652
  %655 = mul nsw <4 x i32> %653, %653
  %656 = icmp ugt <4 x i32> %654, %622
  %657 = icmp ugt <4 x i32> %655, %623
  %658 = select <4 x i1> %656, <4 x i32> %654, <4 x i32> %622
  %659 = select <4 x i1> %657, <4 x i32> %655, <4 x i32> %623
  br label %625

660:                                              ; preds = %575
  %661 = or i64 %588, 8
  %662 = getelementptr inbounds i16, i16* %62, i64 %661
  %663 = bitcast i16* %662 to <4 x i16>*
  %664 = load <4 x i16>, <4 x i16>* %663, align 2
  %665 = getelementptr inbounds i16, i16* %662, i64 4
  %666 = bitcast i16* %665 to <4 x i16>*
  %667 = load <4 x i16>, <4 x i16>* %666, align 2
  %668 = sext <4 x i16> %664 to <4 x i32>
  %669 = sext <4 x i16> %667 to <4 x i32>
  %670 = mul nsw <4 x i32> %668, %668
  %671 = mul nsw <4 x i32> %669, %669
  %672 = icmp ugt <4 x i32> %670, %597
  %673 = icmp ugt <4 x i32> %671, %598
  %674 = select <4 x i1> %672, <4 x i32> %670, <4 x i32> %597
  %675 = select <4 x i1> %673, <4 x i32> %671, <4 x i32> %598
  br label %600

676:                                              ; preds = %550
  %677 = add nuw nsw i64 %563, 8
  %678 = getelementptr inbounds i16, i16* %62, i64 %677
  %679 = bitcast i16* %678 to <4 x i16>*
  %680 = load <4 x i16>, <4 x i16>* %679, align 2
  %681 = getelementptr inbounds i16, i16* %678, i64 4
  %682 = bitcast i16* %681 to <4 x i16>*
  %683 = load <4 x i16>, <4 x i16>* %682, align 2
  %684 = sext <4 x i16> %680 to <4 x i32>
  %685 = sext <4 x i16> %683 to <4 x i32>
  %686 = mul nsw <4 x i32> %684, %684
  %687 = mul nsw <4 x i32> %685, %685
  %688 = icmp ugt <4 x i32> %686, %572
  %689 = icmp ugt <4 x i32> %687, %573
  %690 = select <4 x i1> %688, <4 x i32> %686, <4 x i32> %572
  %691 = select <4 x i1> %689, <4 x i32> %687, <4 x i32> %573
  br label %575

692:                                              ; preds = %525
  %693 = or i64 %538, 8
  %694 = getelementptr inbounds i16, i16* %62, i64 %693
  %695 = bitcast i16* %694 to <4 x i16>*
  %696 = load <4 x i16>, <4 x i16>* %695, align 2
  %697 = getelementptr inbounds i16, i16* %694, i64 4
  %698 = bitcast i16* %697 to <4 x i16>*
  %699 = load <4 x i16>, <4 x i16>* %698, align 2
  %700 = sext <4 x i16> %696 to <4 x i32>
  %701 = sext <4 x i16> %699 to <4 x i32>
  %702 = mul nsw <4 x i32> %700, %700
  %703 = mul nsw <4 x i32> %701, %701
  %704 = icmp ugt <4 x i32> %702, %547
  %705 = icmp ugt <4 x i32> %703, %548
  %706 = select <4 x i1> %704, <4 x i32> %702, <4 x i32> %547
  %707 = select <4 x i1> %705, <4 x i32> %703, <4 x i32> %548
  br label %550

708:                                              ; preds = %500
  %709 = add nuw nsw i64 %513, 8
  %710 = getelementptr inbounds i16, i16* %62, i64 %709
  %711 = bitcast i16* %710 to <4 x i16>*
  %712 = load <4 x i16>, <4 x i16>* %711, align 2
  %713 = getelementptr inbounds i16, i16* %710, i64 4
  %714 = bitcast i16* %713 to <4 x i16>*
  %715 = load <4 x i16>, <4 x i16>* %714, align 2
  %716 = sext <4 x i16> %712 to <4 x i32>
  %717 = sext <4 x i16> %715 to <4 x i32>
  %718 = mul nsw <4 x i32> %716, %716
  %719 = mul nsw <4 x i32> %717, %717
  %720 = icmp ugt <4 x i32> %718, %522
  %721 = icmp ugt <4 x i32> %719, %523
  %722 = select <4 x i1> %720, <4 x i32> %718, <4 x i32> %522
  %723 = select <4 x i1> %721, <4 x i32> %719, <4 x i32> %523
  br label %525

724:                                              ; preds = %475
  %725 = or i64 %488, 8
  %726 = getelementptr inbounds i16, i16* %62, i64 %725
  %727 = bitcast i16* %726 to <4 x i16>*
  %728 = load <4 x i16>, <4 x i16>* %727, align 2
  %729 = getelementptr inbounds i16, i16* %726, i64 4
  %730 = bitcast i16* %729 to <4 x i16>*
  %731 = load <4 x i16>, <4 x i16>* %730, align 2
  %732 = sext <4 x i16> %728 to <4 x i32>
  %733 = sext <4 x i16> %731 to <4 x i32>
  %734 = mul nsw <4 x i32> %732, %732
  %735 = mul nsw <4 x i32> %733, %733
  %736 = icmp ugt <4 x i32> %734, %497
  %737 = icmp ugt <4 x i32> %735, %498
  %738 = select <4 x i1> %736, <4 x i32> %734, <4 x i32> %497
  %739 = select <4 x i1> %737, <4 x i32> %735, <4 x i32> %498
  br label %500

740:                                              ; preds = %450
  %741 = add nuw nsw i64 %463, 8
  %742 = getelementptr inbounds i16, i16* %62, i64 %741
  %743 = bitcast i16* %742 to <4 x i16>*
  %744 = load <4 x i16>, <4 x i16>* %743, align 2
  %745 = getelementptr inbounds i16, i16* %742, i64 4
  %746 = bitcast i16* %745 to <4 x i16>*
  %747 = load <4 x i16>, <4 x i16>* %746, align 2
  %748 = sext <4 x i16> %744 to <4 x i32>
  %749 = sext <4 x i16> %747 to <4 x i32>
  %750 = mul nsw <4 x i32> %748, %748
  %751 = mul nsw <4 x i32> %749, %749
  %752 = icmp ugt <4 x i32> %750, %472
  %753 = icmp ugt <4 x i32> %751, %473
  %754 = select <4 x i1> %752, <4 x i32> %750, <4 x i32> %472
  %755 = select <4 x i1> %753, <4 x i32> %751, <4 x i32> %473
  br label %475

756:                                              ; preds = %97
  %757 = or i64 %110, 8
  %758 = getelementptr inbounds i16, i16* %62, i64 %757
  %759 = bitcast i16* %758 to <4 x i16>*
  %760 = load <4 x i16>, <4 x i16>* %759, align 2
  %761 = getelementptr inbounds i16, i16* %758, i64 4
  %762 = bitcast i16* %761 to <4 x i16>*
  %763 = load <4 x i16>, <4 x i16>* %762, align 2
  %764 = sext <4 x i16> %760 to <4 x i32>
  %765 = sext <4 x i16> %763 to <4 x i32>
  %766 = mul nsw <4 x i32> %764, %764
  %767 = mul nsw <4 x i32> %765, %765
  %768 = icmp ugt <4 x i32> %766, %119
  %769 = icmp ugt <4 x i32> %767, %120
  %770 = select <4 x i1> %768, <4 x i32> %766, <4 x i32> %119
  %771 = select <4 x i1> %769, <4 x i32> %767, <4 x i32> %120
  br label %450

772:                                              ; preds = %73
  %773 = add nuw nsw i64 %11, 8
  %774 = getelementptr inbounds i16, i16* %62, i64 %773
  %775 = bitcast i16* %774 to <4 x i16>*
  %776 = load <4 x i16>, <4 x i16>* %775, align 2
  %777 = getelementptr inbounds i16, i16* %774, i64 4
  %778 = bitcast i16* %777 to <4 x i16>*
  %779 = load <4 x i16>, <4 x i16>* %778, align 2
  %780 = sext <4 x i16> %776 to <4 x i32>
  %781 = sext <4 x i16> %779 to <4 x i32>
  %782 = mul nsw <4 x i32> %780, %780
  %783 = mul nsw <4 x i32> %781, %781
  %784 = icmp ugt <4 x i32> %782, %94
  %785 = icmp ugt <4 x i32> %783, %95
  %786 = select <4 x i1> %784, <4 x i32> %782, <4 x i32> %94
  %787 = select <4 x i1> %785, <4 x i32> %783, <4 x i32> %95
  br label %97

788:                                              ; preds = %60
  %789 = getelementptr inbounds i16, i16* %62, i64 8
  %790 = bitcast i16* %789 to <4 x i16>*
  %791 = load <4 x i16>, <4 x i16>* %790, align 2
  %792 = getelementptr inbounds i16, i16* %62, i64 12
  %793 = bitcast i16* %792 to <4 x i16>*
  %794 = load <4 x i16>, <4 x i16>* %793, align 2
  %795 = sext <4 x i16> %791 to <4 x i32>
  %796 = sext <4 x i16> %794 to <4 x i32>
  %797 = mul nsw <4 x i32> %795, %795
  %798 = mul nsw <4 x i32> %796, %796
  %799 = icmp ugt <4 x i32> %797, %70
  %800 = icmp ugt <4 x i32> %798, %71
  %801 = select <4 x i1> %799, <4 x i32> %797, <4 x i32> %70
  %802 = select <4 x i1> %800, <4 x i32> %798, <4 x i32> %71
  br label %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc27WebRtcAgc_ApplyDigitalGainsEPKimjPKPKsPKPs(i32* nocapture readonly, i64, i32, i16** nocapture readonly, i16** nocapture readonly) local_unnamed_addr #0 {
  switch i32 %2, label %163 [
    i32 8000, label %7
    i32 48000, label %6
    i32 32000, label %6
    i32 16000, label %6
  ]

6:                                                ; preds = %5, %5, %5
  br label %7

7:                                                ; preds = %5, %6
  %8 = phi i64 [ 8, %5 ], [ 16, %6 ]
  %9 = phi i32 [ 1, %5 ], [ 0, %6 ]
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %29, label %11

11:                                               ; preds = %7
  %12 = mul nuw nsw i64 %8, 20
  %13 = and i64 %1, 1
  %14 = icmp eq i64 %1, 1
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  %16 = sub i64 %1, %13
  br label %36

17:                                               ; preds = %168, %11
  %18 = phi i64 [ 0, %11 ], [ %169, %168 ]
  %19 = icmp eq i64 %13, 0
  br i1 %19, label %29, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds i16*, i16** %3, i64 %18
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds i16*, i16** %4, i64 %18
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i16* %22, %24
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = bitcast i16* %24 to i8*
  %28 = bitcast i16* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %27, i8* align 2 %28, i64 %12, i1 false)
  br label %29

29:                                               ; preds = %17, %20, %26, %7
  %30 = getelementptr inbounds i32, i32* %0, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %0, align 4
  %33 = sub nsw i32 %31, %32
  %34 = shl i32 %33, %9
  %35 = shl nsw i32 %32, 4
  br label %54

36:                                               ; preds = %168, %15
  %37 = phi i64 [ 0, %15 ], [ %169, %168 ]
  %38 = phi i64 [ %16, %15 ], [ %170, %168 ]
  %39 = getelementptr inbounds i16*, i16** %3, i64 %37
  %40 = load i16*, i16** %39, align 8
  %41 = getelementptr inbounds i16*, i16** %4, i64 %37
  %42 = load i16*, i16** %41, align 8
  %43 = icmp eq i16* %40, %42
  br i1 %43, label %47, label %44

44:                                               ; preds = %36
  %45 = bitcast i16* %42 to i8*
  %46 = bitcast i16* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %45, i8* align 2 %46, i64 %12, i1 false)
  br label %47

47:                                               ; preds = %36, %44
  %48 = or i64 %37, 1
  %49 = getelementptr inbounds i16*, i16** %3, i64 %48
  %50 = load i16*, i16** %49, align 8
  %51 = getelementptr inbounds i16*, i16** %4, i64 %48
  %52 = load i16*, i16** %51, align 8
  %53 = icmp eq i16* %50, %52
  br i1 %53, label %168, label %165

54:                                               ; preds = %63, %29
  %55 = phi i64 [ 0, %29 ], [ %65, %63 ]
  %56 = phi i32 [ %35, %29 ], [ %64, %63 ]
  br i1 %10, label %63, label %57

57:                                               ; preds = %54
  %58 = add nsw i32 %56, 127
  %59 = ashr i32 %58, 7
  %60 = sext i32 %59 to i64
  %61 = ashr i32 %56, 4
  %62 = sext i32 %61 to i64
  br label %72

63:                                               ; preds = %89, %54
  %64 = add nsw i32 %56, %34
  %65 = add nuw nsw i64 %55, 1
  %66 = icmp eq i64 %65, %8
  br i1 %66, label %67, label %54

67:                                               ; preds = %63
  %68 = and i64 %1, 1
  %69 = icmp eq i64 %1, 1
  %70 = sub i64 %1, %68
  %71 = icmp eq i64 %68, 0
  br label %95

72:                                               ; preds = %89, %57
  %73 = phi i64 [ 0, %57 ], [ %91, %89 ]
  %74 = getelementptr inbounds i16*, i16** %4, i64 %73
  %75 = load i16*, i16** %74, align 8
  %76 = getelementptr inbounds i16, i16* %75, i64 %55
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i64
  %79 = mul nsw i64 %78, %60
  %80 = ashr i64 %79, 16
  %81 = trunc i64 %80 to i32
  %82 = icmp sgt i32 %81, 4095
  br i1 %82, label %89, label %83

83:                                               ; preds = %72
  %84 = icmp slt i32 %81, -4096
  br i1 %84, label %89, label %85

85:                                               ; preds = %83
  %86 = mul nsw i64 %78, %62
  %87 = lshr i64 %86, 16
  %88 = trunc i64 %87 to i16
  br label %89

89:                                               ; preds = %83, %72, %85
  %90 = phi i16 [ %88, %85 ], [ 32767, %72 ], [ -32768, %83 ]
  store i16 %90, i16* %76, align 2
  %91 = add nuw i64 %73, 1
  %92 = icmp eq i64 %91, %1
  br i1 %92, label %63, label %72

93:                                               ; preds = %128
  %94 = icmp eq i64 %97, 10
  br i1 %94, label %163, label %95

95:                                               ; preds = %67, %93
  %96 = phi i64 [ %97, %93 ], [ 1, %67 ]
  %97 = add nuw nsw i64 %96, 1
  %98 = getelementptr inbounds i32, i32* %0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds i32, i32* %0, i64 %96
  %101 = load i32, i32* %100, align 4
  %102 = sub nsw i32 %99, %101
  %103 = shl i32 %102, %9
  %104 = shl nsw i32 %101, 4
  %105 = mul nuw nsw i64 %8, %96
  br label %106

106:                                              ; preds = %128, %95
  %107 = phi i64 [ 0, %95 ], [ %130, %128 ]
  %108 = phi i32 [ %104, %95 ], [ %129, %128 ]
  br i1 %10, label %128, label %109

109:                                              ; preds = %106
  %110 = add nuw nsw i64 %107, %105
  %111 = ashr i32 %108, 4
  %112 = sext i32 %111 to i64
  br i1 %69, label %113, label %132

113:                                              ; preds = %132, %109
  %114 = phi i64 [ 0, %109 ], [ %160, %132 ]
  br i1 %71, label %128, label %115

115:                                              ; preds = %113
  %116 = getelementptr inbounds i16*, i16** %4, i64 %114
  %117 = load i16*, i16** %116, align 8
  %118 = getelementptr inbounds i16, i16* %117, i64 %110
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i64
  %121 = mul nsw i64 %120, %112
  %122 = lshr i64 %121, 16
  %123 = icmp sgt i64 %121, 2147483647
  %124 = icmp slt i64 %121, -2147483648
  %125 = trunc i64 %122 to i16
  %126 = select i1 %124, i16 -32768, i16 %125
  %127 = select i1 %123, i16 32767, i16 %126
  store i16 %127, i16* %118, align 2
  br label %128

128:                                              ; preds = %115, %113, %106
  %129 = add nsw i32 %108, %103
  %130 = add nuw nsw i64 %107, 1
  %131 = icmp eq i64 %130, %8
  br i1 %131, label %93, label %106

132:                                              ; preds = %109, %132
  %133 = phi i64 [ %160, %132 ], [ 0, %109 ]
  %134 = phi i64 [ %161, %132 ], [ %70, %109 ]
  %135 = getelementptr inbounds i16*, i16** %4, i64 %133
  %136 = load i16*, i16** %135, align 8
  %137 = getelementptr inbounds i16, i16* %136, i64 %110
  %138 = load i16, i16* %137, align 2
  %139 = sext i16 %138 to i64
  %140 = mul nsw i64 %139, %112
  %141 = lshr i64 %140, 16
  %142 = icmp sgt i64 %140, 2147483647
  %143 = icmp slt i64 %140, -2147483648
  %144 = trunc i64 %141 to i16
  %145 = select i1 %143, i16 -32768, i16 %144
  %146 = select i1 %142, i16 32767, i16 %145
  store i16 %146, i16* %137, align 2
  %147 = or i64 %133, 1
  %148 = getelementptr inbounds i16*, i16** %4, i64 %147
  %149 = load i16*, i16** %148, align 8
  %150 = getelementptr inbounds i16, i16* %149, i64 %110
  %151 = load i16, i16* %150, align 2
  %152 = sext i16 %151 to i64
  %153 = mul nsw i64 %152, %112
  %154 = lshr i64 %153, 16
  %155 = icmp sgt i64 %153, 2147483647
  %156 = icmp slt i64 %153, -2147483648
  %157 = trunc i64 %154 to i16
  %158 = select i1 %156, i16 -32768, i16 %157
  %159 = select i1 %155, i16 32767, i16 %158
  store i16 %159, i16* %150, align 2
  %160 = add nuw i64 %133, 2
  %161 = add i64 %134, -2
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %113, label %132

163:                                              ; preds = %93, %5
  %164 = phi i32 [ -1, %5 ], [ 0, %93 ]
  ret i32 %164

165:                                              ; preds = %47
  %166 = bitcast i16* %52 to i8*
  %167 = bitcast i16* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %166, i8* align 2 %167, i64 %12, i1 false)
  br label %168

168:                                              ; preds = %165, %47
  %169 = add nuw i64 %37, 2
  %170 = add i64 %38, -2
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %17, label %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @WebRtcSpl_DownsampleBy2(i16*, i64, i16*, i32*) local_unnamed_addr #2

declare i32 @WebRtcSpl_Sqrt(i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 11, i32 33}
!3 = !{i32 0, i32 33}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
