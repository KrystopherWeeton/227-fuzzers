; ModuleID = '../../extensions/renderer/script_injection_callback.cc'
source_filename = "../../extensions/renderer/script_injection_callback.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::ScriptInjectionCallback" = type { %"class.blink::WebScriptExecutionCallback", %"class.base::OnceCallback" }
%"class.blink::WebScriptExecutionCallback" = type { i32 (...)** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::Local"*, %"class.v8::Local"*, %"class.std::__1::__compressed_pair" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.v8::Value" = type { i8 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::Local"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN5blink26WebScriptExecutionCallback11WillExecuteEv = comdat any

@_ZTVN10extensions23ScriptInjectionCallbackE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::ScriptInjectionCallback"*)* @_ZN10extensions23ScriptInjectionCallbackD2Ev to i8*), i8* bitcast (void (%"class.extensions::ScriptInjectionCallback"*)* @_ZN10extensions23ScriptInjectionCallbackD0Ev to i8*), i8* bitcast (void (%"class.blink::WebScriptExecutionCallback"*)* @_ZN5blink26WebScriptExecutionCallback11WillExecuteEv to i8*), i8* bitcast (void (%"class.extensions::ScriptInjectionCallback"*, %"class.blink::WebVector"*)* @_ZN10extensions23ScriptInjectionCallback9CompletedERKN5blink9WebVectorIN2v85LocalINS3_5ValueEEEEE to i8*)] }, align 8

@_ZN10extensions23ScriptInjectionCallbackC1EN4base12OnceCallbackIFvRKNSt3__16vectorIN2v85LocalINS5_5ValueEEENS3_9allocatorIS8_EEEEEEE = hidden unnamed_addr alias void (%"class.extensions::ScriptInjectionCallback"*, %"class.base::OnceCallback"*), void (%"class.extensions::ScriptInjectionCallback"*, %"class.base::OnceCallback"*)* @_ZN10extensions23ScriptInjectionCallbackC2EN4base12OnceCallbackIFvRKNSt3__16vectorIN2v85LocalINS5_5ValueEEENS3_9allocatorIS8_EEEEEEE
@_ZN10extensions23ScriptInjectionCallbackD1Ev = hidden unnamed_addr alias void (%"class.extensions::ScriptInjectionCallback"*), void (%"class.extensions::ScriptInjectionCallback"*)* @_ZN10extensions23ScriptInjectionCallbackD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10extensions23ScriptInjectionCallbackC2EN4base12OnceCallbackIFvRKNSt3__16vectorIN2v85LocalINS5_5ValueEEENS3_9allocatorIS8_EEEEEEE(%"class.extensions::ScriptInjectionCallback"* nocapture, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN10extensions23ScriptInjectionCallbackE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::OnceCallback"* %4 to i64*
  store i64 %7, i64* %8, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23ScriptInjectionCallbackD2Ev(%"class.extensions::ScriptInjectionCallback"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN10extensions23ScriptInjectionCallbackE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23ScriptInjectionCallbackD0Ev(%"class.extensions::ScriptInjectionCallback"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN10extensions23ScriptInjectionCallbackE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #7
  %4 = bitcast %"class.extensions::ScriptInjectionCallback"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions23ScriptInjectionCallback9CompletedERKN5blink9WebVectorIN2v85LocalINS3_5ValueEEEEE(%"class.extensions::ScriptInjectionCallback"*, %"class.blink::WebVector"* nocapture readonly dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.v8::Local"*, %"class.v8::Local"** %9, align 8
  %11 = bitcast %"class.v8::Local"* %10 to i8*
  %12 = ptrtoint %"class.v8::Local"* %10 to i64
  %13 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load %"class.v8::Local"*, %"class.v8::Local"** %13, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #7
  %15 = ptrtoint %"class.v8::Local"* %14 to i64
  %16 = sub i64 %15, %12
  %17 = ashr exact i64 %16, 3
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %210, label %19

19:                                               ; preds = %2
  %20 = icmp ugt i64 %17, 2305843009213693951
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #9
  unreachable

23:                                               ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %16) #8
  %25 = bitcast i8* %24 to %"class.v8::Local"*
  %26 = bitcast %"class.v8::Local"** %7 to i8**
  store i8* %24, i8** %26, align 8
  %27 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %24, i8** %27, align 8
  %28 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %25, i64 %17
  store %"class.v8::Local"* %28, %"class.v8::Local"** %8, align 8
  %29 = bitcast %"class.v8::Local"** %7 to i64*
  %30 = ptrtoint i8* %24 to i64
  %31 = icmp eq %"class.v8::Local"* %10, %14
  br i1 %31, label %208, label %32

32:                                               ; preds = %23
  %33 = getelementptr %"class.v8::Local", %"class.v8::Local"* %14, i64 -1, i32 0
  %34 = ptrtoint %"class.v8::Value"** %33 to i64
  %35 = sub i64 %34, %12
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %32
  %40 = getelementptr %"class.v8::Local", %"class.v8::Local"* %14, i64 -1, i32 0
  %41 = ptrtoint %"class.v8::Value"** %40 to i64
  %42 = sub i64 %41, %12
  %43 = lshr i64 %42, 3
  %44 = add i64 %42, 8
  %45 = and i64 %44, -8
  %46 = getelementptr i8, i8* %24, i64 %45
  %47 = add nuw nsw i64 %43, 1
  %48 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %47
  %49 = bitcast %"class.v8::Local"* %48 to i8*
  %50 = icmp ult i8* %24, %49
  %51 = icmp ugt i8* %46, %11
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %54
  %56 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %65
  %68 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %65
  %69 = bitcast %"class.v8::Local"* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !2
  %71 = getelementptr %"class.v8::Local", %"class.v8::Local"* %68, i64 2
  %72 = bitcast %"class.v8::Local"* %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !2
  %74 = bitcast %"class.v8::Local"* %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !5, !noalias !2
  %75 = getelementptr %"class.v8::Local", %"class.v8::Local"* %67, i64 2
  %76 = bitcast %"class.v8::Local"* %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !5, !noalias !2
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %77
  %79 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %77
  %80 = bitcast %"class.v8::Local"* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !2
  %82 = getelementptr %"class.v8::Local", %"class.v8::Local"* %79, i64 2
  %83 = bitcast %"class.v8::Local"* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !2
  %85 = bitcast %"class.v8::Local"* %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !5, !noalias !2
  %86 = getelementptr %"class.v8::Local", %"class.v8::Local"* %78, i64 2
  %87 = bitcast %"class.v8::Local"* %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !5, !noalias !2
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %88
  %90 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %88
  %91 = bitcast %"class.v8::Local"* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !2
  %93 = getelementptr %"class.v8::Local", %"class.v8::Local"* %90, i64 2
  %94 = bitcast %"class.v8::Local"* %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !2
  %96 = bitcast %"class.v8::Local"* %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !5, !noalias !2
  %97 = getelementptr %"class.v8::Local", %"class.v8::Local"* %89, i64 2
  %98 = bitcast %"class.v8::Local"* %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !5, !noalias !2
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %99
  %101 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %99
  %102 = bitcast %"class.v8::Local"* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !2
  %104 = getelementptr %"class.v8::Local", %"class.v8::Local"* %101, i64 2
  %105 = bitcast %"class.v8::Local"* %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !2
  %107 = bitcast %"class.v8::Local"* %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !5, !noalias !2
  %108 = getelementptr %"class.v8::Local", %"class.v8::Local"* %100, i64 2
  %109 = bitcast %"class.v8::Local"* %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !5, !noalias !2
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !7

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.v8::Local", %"class.v8::Local"* %25, i64 %117
  %120 = getelementptr %"class.v8::Local", %"class.v8::Local"* %10, i64 %117
  %121 = bitcast %"class.v8::Local"* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !2
  %123 = getelementptr %"class.v8::Local", %"class.v8::Local"* %120, i64 2
  %124 = bitcast %"class.v8::Local"* %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !2
  %126 = bitcast %"class.v8::Local"* %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !5, !noalias !2
  %127 = getelementptr %"class.v8::Local", %"class.v8::Local"* %119, i64 2
  %128 = bitcast %"class.v8::Local"* %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !5, !noalias !2
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !9

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %32
  %135 = phi %"class.v8::Local"* [ %25, %39 ], [ %25, %32 ], [ %55, %132 ]
  %136 = phi %"class.v8::Local"* [ %10, %39 ], [ %10, %32 ], [ %56, %132 ]
  %137 = ptrtoint %"class.v8::Local"* %136 to i64
  %138 = getelementptr %"class.v8::Local", %"class.v8::Local"* %14, i64 -1, i32 0
  %139 = ptrtoint %"class.v8::Value"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.v8::Local"* [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.v8::Local"* [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.v8::Local"* %146 to i64*
  %150 = bitcast %"class.v8::Local"* %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %147, i64 1
  %153 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !11

156:                                              ; preds = %145, %134
  %157 = phi %"class.v8::Local"* [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.v8::Local"* [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.v8::Local"* [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.v8::Local"* [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.v8::Local"* [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.v8::Local"* %162 to i64*
  %165 = bitcast %"class.v8::Local"* %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 1
  %168 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 1
  %169 = bitcast %"class.v8::Local"* %168 to i64*
  %170 = bitcast %"class.v8::Local"* %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 2
  %173 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 2
  %174 = bitcast %"class.v8::Local"* %173 to i64*
  %175 = bitcast %"class.v8::Local"* %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 3
  %178 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 3
  %179 = bitcast %"class.v8::Local"* %178 to i64*
  %180 = bitcast %"class.v8::Local"* %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 4
  %183 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 4
  %184 = bitcast %"class.v8::Local"* %183 to i64*
  %185 = bitcast %"class.v8::Local"* %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 5
  %188 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 5
  %189 = bitcast %"class.v8::Local"* %188 to i64*
  %190 = bitcast %"class.v8::Local"* %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 6
  %193 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 6
  %194 = bitcast %"class.v8::Local"* %193 to i64*
  %195 = bitcast %"class.v8::Local"* %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 7
  %198 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 7
  %199 = bitcast %"class.v8::Local"* %198 to i64*
  %200 = bitcast %"class.v8::Local"* %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %163, i64 8
  %203 = getelementptr inbounds %"class.v8::Local", %"class.v8::Local"* %162, i64 8
  %204 = icmp eq %"class.v8::Local"* %202, %14
  br i1 %204, label %205, label %161, !llvm.loop !12

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.v8::Local"* [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.v8::Local"* %206 to i64
  br label %208

208:                                              ; preds = %205, %23
  %209 = phi i64 [ %30, %23 ], [ %207, %205 ]
  store i64 %209, i64* %29, align 8
  br label %210

210:                                              ; preds = %2, %208
  %211 = getelementptr inbounds %"class.extensions::ScriptInjectionCallback", %"class.extensions::ScriptInjectionCallback"* %0, i64 0, i32 1
  %212 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %212) #7
  %213 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %211, i64 0, i32 0, i32 0, i32 0
  %214 = bitcast %"class.base::OnceCallback"* %211 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %215, i64* %216, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %213, align 8
  %217 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %218 = inttoptr i64 %215 to %"class.base::internal::BindStateBase"*
  %219 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %218, i64 0, i32 1
  %220 = bitcast void ()** %219 to void (%"class.base::internal::BindStateBase"*, %"class.std::__1::vector"*)**
  %221 = load void (%"class.base::internal::BindStateBase"*, %"class.std::__1::vector"*)*, void (%"class.base::internal::BindStateBase"*, %"class.std::__1::vector"*)** %220, align 8
  call void %221(%"class.base::internal::BindStateBase"* %218, %"class.std::__1::vector"* nonnull dereferenceable(24) %4) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %217) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %212) #7
  %222 = icmp eq %"class.extensions::ScriptInjectionCallback"* %0, null
  br i1 %222, label %228, label %223

223:                                              ; preds = %210
  %224 = bitcast %"class.extensions::ScriptInjectionCallback"* %0 to void (%"class.extensions::ScriptInjectionCallback"*)***
  %225 = load void (%"class.extensions::ScriptInjectionCallback"*)**, void (%"class.extensions::ScriptInjectionCallback"*)*** %224, align 8
  %226 = getelementptr inbounds void (%"class.extensions::ScriptInjectionCallback"*)*, void (%"class.extensions::ScriptInjectionCallback"*)** %225, i64 1
  %227 = load void (%"class.extensions::ScriptInjectionCallback"*)*, void (%"class.extensions::ScriptInjectionCallback"*)** %226, align 8
  call void %227(%"class.extensions::ScriptInjectionCallback"* nonnull %0) #7
  br label %228

228:                                              ; preds = %223, %210
  %229 = load %"class.v8::Local"*, %"class.v8::Local"** %6, align 8
  %230 = icmp eq %"class.v8::Local"* %229, null
  br i1 %230, label %235, label %231

231:                                              ; preds = %228
  %232 = ptrtoint %"class.v8::Local"* %229 to i64
  %233 = bitcast %"class.v8::Local"** %7 to i64*
  store i64 %232, i64* %233, align 8
  %234 = bitcast %"class.v8::Local"* %229 to i8*
  call void @_ZdlPv(i8* %234) #8
  br label %235

235:                                              ; preds = %228, %231
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink26WebScriptExecutionCallback11WillExecuteEv(%"class.blink::WebScriptExecutionCallback"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
