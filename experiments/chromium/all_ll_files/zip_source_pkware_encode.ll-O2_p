; ModuleID = '../../third_party/libzip/src/lib/zip_source_pkware_encode.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_pkware_encode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_buffer = type { i8, i8, i8*, i64, i64 }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct._zip_pkware_keys = type { [3 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_pkware_encode(%struct.zip*, %struct.zip_source*, i16 zeroext, i32, i8* readonly) local_unnamed_addr #0 {
  %6 = icmp ne i8* %4, null
  %7 = icmp ne %struct.zip_source* %1, null
  %8 = and i1 %7, %6
  %9 = icmp eq i16 %2, 1
  %10 = and i1 %9, %8
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %12, i32 18, i32 0) #6
  br label %37

13:                                               ; preds = %5
  %14 = and i32 %3, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  br i1 %15, label %17, label %18

17:                                               ; preds = %13
  tail call void @zip_error_set(%struct.zip_error* %16, i32 24, i32 0) #6
  br label %37

18:                                               ; preds = %13
  %19 = tail call noalias i8* @malloc(i64 56) #6
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @zip_error_set(%struct.zip_error* %16, i32 14, i32 0) #6
  br label %37

22:                                               ; preds = %18
  %23 = tail call noalias i8* @strdup(i8* nonnull %4) #6
  %24 = bitcast i8* %19 to i8**
  store i8* %23, i8** %24, align 8
  %25 = icmp eq i8* %23, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @zip_error_set(%struct.zip_error* %16, i32 14, i32 0) #6
  tail call void @free(i8* nonnull %19) #6
  br label %37

27:                                               ; preds = %22
  %28 = getelementptr inbounds i8, i8* %19, i64 24
  %29 = bitcast i8* %28 to %struct.zip_buffer**
  store %struct.zip_buffer* null, %struct.zip_buffer** %29, align 8
  %30 = getelementptr inbounds i8, i8* %19, i64 40
  %31 = bitcast i8* %30 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* %31) #6
  %32 = tail call %struct.zip_source* @zip_source_layered(%struct.zip* %0, %struct.zip_source* nonnull %1, i64 (%struct.zip_source*, i8*, i8*, i64, i32)* nonnull @pkware_encrypt, i8* nonnull %19) #6
  %33 = icmp eq %struct.zip_source* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %27
  %35 = load i8*, i8** %24, align 8
  tail call void @free(i8* %35) #6
  %36 = load %struct.zip_buffer*, %struct.zip_buffer** %29, align 8
  tail call void @_zip_buffer_free(%struct.zip_buffer* %36) #6
  tail call void @zip_error_fini(%struct.zip_error* %31) #6
  tail call void @free(i8* nonnull %19) #6
  br label %37

37:                                               ; preds = %26, %21, %27, %34, %17, %11
  %38 = phi %struct.zip_source* [ null, %11 ], [ null, %34 ], [ null, %17 ], [ %32, %27 ], [ null, %21 ], [ null, %26 ]
  ret %struct.zip_source* %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_layered(%struct.zip*, %struct.zip_source*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @pkware_encrypt(%struct.zip_source*, i8*, i8*, i64, i32) #0 {
  %6 = alloca %struct.zip_stat, align 8
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  switch i32 %4, label %124 [
    i32 0, label %9
    i32 1, label %48
    i32 2, label %81
    i32 3, label %85
    i32 19, label %98
    i32 14, label %108
    i32 4, label %110
    i32 5, label %114
  ]

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds i8, i8* %1, i64 8
  %12 = bitcast i8* %11 to %struct._zip_pkware_keys*
  tail call void @_zip_pkware_keys_reset(%struct._zip_pkware_keys* %12) #6
  %13 = bitcast i8* %1 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i64 @strlen(i8* %14) #7
  tail call void @_zip_pkware_encrypt(%struct._zip_pkware_keys* %12, i8* null, i8* %14, i64 %15) #6
  %16 = bitcast %struct.zip_stat* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 64, i1 false) #6
  %17 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %17) #6
  store i16 -21846, i16* %7, align 2
  %18 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %18) #6
  store i16 -21846, i16* %8, align 2
  %19 = call i32 @zip_source_stat(%struct.zip_source* %0, %struct.zip_stat* nonnull %6) #6
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %9
  %22 = getelementptr inbounds i8, i8* %1, i64 40
  %23 = bitcast i8* %22 to %struct.zip_error*
  call void @_zip_error_set_from_source(%struct.zip_error* %23, %struct.zip_source* %0) #6
  br label %46

24:                                               ; preds = %9
  %25 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %6, i64 0, i32 5
  %26 = load i64, i64* %25, align 8
  call void @_zip_u2d_time(i64 %26, i16* nonnull %7, i16* nonnull %8) #6
  %27 = call %struct.zip_buffer* @_zip_buffer_new(i8* null, i64 12) #6
  %28 = getelementptr inbounds i8, i8* %1, i64 24
  %29 = bitcast i8* %28 to %struct.zip_buffer**
  store %struct.zip_buffer* %27, %struct.zip_buffer** %29, align 8
  %30 = icmp eq %struct.zip_buffer* %27, null
  br i1 %30, label %31, label %34

31:                                               ; preds = %24
  %32 = getelementptr inbounds i8, i8* %1, i64 40
  %33 = bitcast i8* %32 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %33, i32 14, i32 0) #6
  br label %46

34:                                               ; preds = %24
  %35 = call i8* @_zip_buffer_data(%struct.zip_buffer* nonnull %27) #6
  %36 = call zeroext i1 @zip_secure_random(i8* %35, i16 zeroext 11) #6
  br i1 %36, label %41, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %1, i64 40
  %39 = bitcast i8* %38 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %39, i32 20, i32 0) #6
  %40 = load %struct.zip_buffer*, %struct.zip_buffer** %29, align 8
  call void @_zip_buffer_free(%struct.zip_buffer* %40) #6
  store %struct.zip_buffer* null, %struct.zip_buffer** %29, align 8
  br label %46

41:                                               ; preds = %34
  %42 = load i16, i16* %7, align 2
  %43 = lshr i16 %42, 8
  %44 = trunc i16 %43 to i8
  %45 = getelementptr inbounds i8, i8* %35, i64 11
  store i8 %44, i8* %45, align 1
  call void @_zip_pkware_encrypt(%struct._zip_pkware_keys* %12, i8* %35, i8* %35, i64 12) #6
  br label %46

46:                                               ; preds = %21, %31, %37, %41
  %47 = phi i64 [ -1, %21 ], [ -1, %31 ], [ 0, %41 ], [ -1, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %16) #6
  ret i64 %47

48:                                               ; preds = %5
  %49 = getelementptr inbounds i8, i8* %1, i64 24
  %50 = bitcast i8* %49 to %struct.zip_buffer**
  %51 = load %struct.zip_buffer*, %struct.zip_buffer** %50, align 8
  %52 = icmp eq %struct.zip_buffer* %51, null
  br i1 %52, label %61, label %53

53:                                               ; preds = %48
  %54 = tail call i64 @_zip_buffer_read(%struct.zip_buffer* nonnull %51, i8* %2, i64 %3) #6
  %55 = getelementptr inbounds i8, i8* %2, i64 %54
  %56 = sub i64 %3, %54
  %57 = load %struct.zip_buffer*, %struct.zip_buffer** %50, align 8
  %58 = tail call zeroext i1 @_zip_buffer_eof(%struct.zip_buffer* %57) #6
  br i1 %58, label %59, label %61

59:                                               ; preds = %53
  %60 = load %struct.zip_buffer*, %struct.zip_buffer** %50, align 8
  tail call void @_zip_buffer_free(%struct.zip_buffer* %60) #6
  store %struct.zip_buffer* null, %struct.zip_buffer** %50, align 8
  br label %61

61:                                               ; preds = %48, %53, %59
  %62 = phi i8* [ %55, %59 ], [ %55, %53 ], [ %2, %48 ]
  %63 = phi i64 [ %56, %59 ], [ %56, %53 ], [ %3, %48 ]
  %64 = phi i64 [ %54, %59 ], [ %54, %53 ], [ 0, %48 ]
  %65 = getelementptr inbounds i8, i8* %1, i64 32
  %66 = load i8, i8* %65, align 8, !range !2
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %127

68:                                               ; preds = %61
  %69 = tail call i64 @zip_source_read(%struct.zip_source* %0, i8* %62, i64 %63) #6
  %70 = icmp slt i64 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = getelementptr inbounds i8, i8* %1, i64 40
  %73 = bitcast i8* %72 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %73, %struct.zip_source* %0) #6
  br label %127

74:                                               ; preds = %68
  %75 = getelementptr inbounds i8, i8* %1, i64 8
  %76 = bitcast i8* %75 to %struct._zip_pkware_keys*
  tail call void @_zip_pkware_encrypt(%struct._zip_pkware_keys* %76, i8* %62, i8* %62, i64 %69) #6
  %77 = icmp ult i64 %69, %63
  br i1 %77, label %78, label %79

78:                                               ; preds = %74
  store i8 1, i8* %65, align 8
  br label %79

79:                                               ; preds = %78, %74
  %80 = add nsw i64 %69, %64
  br label %127

81:                                               ; preds = %5
  %82 = getelementptr inbounds i8, i8* %1, i64 24
  %83 = bitcast i8* %82 to %struct.zip_buffer**
  %84 = load %struct.zip_buffer*, %struct.zip_buffer** %83, align 8
  tail call void @_zip_buffer_free(%struct.zip_buffer* %84) #6
  store %struct.zip_buffer* null, %struct.zip_buffer** %83, align 8
  br label %127

85:                                               ; preds = %5
  %86 = getelementptr inbounds i8, i8* %2, i64 54
  %87 = bitcast i8* %86 to i16*
  store i16 1, i16* %87, align 2
  %88 = bitcast i8* %2 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = or i64 %89, 128
  store i64 %90, i64* %88, align 8
  %91 = and i64 %89, 8
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %127, label %93

93:                                               ; preds = %85
  %94 = getelementptr inbounds i8, i8* %2, i64 32
  %95 = bitcast i8* %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 12
  store i64 %97, i64* %95, align 8
  br label %127

98:                                               ; preds = %5
  %99 = icmp ult i64 %3, 24
  br i1 %99, label %100, label %103

100:                                              ; preds = %98
  %101 = getelementptr inbounds i8, i8* %1, i64 40
  %102 = bitcast i8* %101 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %102, i32 18, i32 0) #6
  br label %127

103:                                              ; preds = %98
  %104 = bitcast i8* %2 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = or i64 %105, 4
  store i64 %106, i64* %104, align 8
  %107 = getelementptr inbounds i8, i8* %2, i64 11
  store i8 20, i8* %107, align 1
  br label %127

108:                                              ; preds = %5
  %109 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 19, i32 -1) #6
  br label %127

110:                                              ; preds = %5
  %111 = getelementptr inbounds i8, i8* %1, i64 40
  %112 = bitcast i8* %111 to %struct.zip_error*
  %113 = tail call i64 @zip_error_to_data(%struct.zip_error* %112, i8* %2, i64 %3) #6
  br label %127

114:                                              ; preds = %5
  %115 = icmp eq i8* %1, null
  br i1 %115, label %127, label %116

116:                                              ; preds = %114
  %117 = bitcast i8* %1 to i8**
  %118 = load i8*, i8** %117, align 8
  tail call void @free(i8* %118) #6
  %119 = getelementptr inbounds i8, i8* %1, i64 24
  %120 = bitcast i8* %119 to %struct.zip_buffer**
  %121 = load %struct.zip_buffer*, %struct.zip_buffer** %120, align 8
  tail call void @_zip_buffer_free(%struct.zip_buffer* %121) #6
  %122 = getelementptr inbounds i8, i8* %1, i64 40
  %123 = bitcast i8* %122 to %struct.zip_error*
  tail call void @zip_error_fini(%struct.zip_error* %123) #6
  tail call void @free(i8* nonnull %1) #6
  br label %127

124:                                              ; preds = %5
  %125 = getelementptr inbounds i8, i8* %1, i64 40
  %126 = bitcast i8* %125 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %126, i32 18, i32 0) #6
  br label %127

127:                                              ; preds = %116, %114, %100, %103, %93, %85, %61, %124, %110, %108, %81, %79, %71
  %128 = phi i64 [ -1, %124 ], [ %113, %110 ], [ %109, %108 ], [ 0, %81 ], [ -1, %71 ], [ %80, %79 ], [ %64, %61 ], [ 0, %85 ], [ 0, %93 ], [ -1, %100 ], [ 0, %103 ], [ 0, %114 ], [ 0, %116 ]
  ret i64 %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_zip_pkware_keys_reset(%struct._zip_pkware_keys*) local_unnamed_addr #2

declare void @_zip_pkware_encrypt(%struct._zip_pkware_keys*, i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

declare i64 @_zip_buffer_read(%struct.zip_buffer*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_zip_buffer_eof(%struct.zip_buffer*) local_unnamed_addr #2

declare void @_zip_buffer_free(%struct.zip_buffer*) local_unnamed_addr #2

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #2

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #2

declare void @_zip_u2d_time(i64, i16*, i16*) local_unnamed_addr #2

declare %struct.zip_buffer* @_zip_buffer_new(i8*, i64) local_unnamed_addr #2

declare i8* @_zip_buffer_data(%struct.zip_buffer*) local_unnamed_addr #2

declare zeroext i1 @zip_secure_random(i8*, i16 zeroext) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @strdup(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
