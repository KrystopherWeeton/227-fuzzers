; ModuleID = '../../third_party/opus/src/silk/float/schur_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/schur_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [60 x i8] c"assertion failed: order >= 0 && order <= SILK_MAX_ORDER_LPC\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"../../third_party/opus/src/silk/float/schur_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden float @silk_schur_FLP(float* nocapture, float* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = alloca [25 x [2 x double]], align 16
  %5 = bitcast [25 x [2 x double]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 400, i1 false)
  %6 = icmp ult i32 %2, 25
  br i1 %6, label %7, label %40

7:                                                ; preds = %3
  %8 = sext i32 %2 to i64
  %9 = icmp sgt i64 %8, 0
  %10 = select i1 %9, i64 %8, i64 0
  %11 = add nuw nsw i64 %10, 1
  %12 = icmp ult i64 %11, 4
  br i1 %12, label %13, label %15

13:                                               ; preds = %38, %7
  %14 = phi i64 [ 0, %7 ], [ %16, %38 ]
  br label %41

15:                                               ; preds = %7
  %16 = and i64 %11, 9223372036854775804
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %36, %17 ]
  %19 = or i64 %18, 2
  %20 = getelementptr inbounds float, float* %1, i64 %18
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = getelementptr inbounds float, float* %20, i64 2
  %24 = bitcast float* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fpext <2 x float> %22 to <2 x double>
  %27 = fpext <2 x float> %25 to <2 x double>
  %28 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %18, i64 0
  %29 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %19, i64 0
  %30 = bitcast double* %28 to <4 x double>*
  %31 = bitcast double* %29 to <4 x double>*
  %32 = shufflevector <2 x double> %26, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %33 = shufflevector <4 x double> %32, <4 x double> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %33, <4 x double>* %30, align 16
  %34 = shufflevector <2 x double> %27, <2 x double> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %35 = shufflevector <4 x double> %34, <4 x double> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %35, <4 x double>* %31, align 16
  %36 = add i64 %18, 4
  %37 = icmp eq i64 %36, %16
  br i1 %37, label %38, label %17, !llvm.loop !2

38:                                               ; preds = %17
  %39 = icmp eq i64 %11, %16
  br i1 %39, label %50, label %13

40:                                               ; preds = %3
  tail call void @celt_fatal(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 44) #4
  unreachable

41:                                               ; preds = %13, %41
  %42 = phi i64 [ %48, %41 ], [ %14, %13 ]
  %43 = getelementptr inbounds float, float* %1, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %42, i64 1
  store double %45, double* %46, align 8
  %47 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %42, i64 0
  store double %45, double* %47, align 16
  %48 = add nuw nsw i64 %42, 1
  %49 = icmp slt i64 %42, %8
  br i1 %49, label %41, label %50, !llvm.loop !4

50:                                               ; preds = %41, %38
  %51 = icmp sgt i32 %2, 0
  br i1 %51, label %52, label %97

52:                                               ; preds = %50
  %53 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 0, i64 1
  %54 = zext i32 %2 to i64
  %55 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 0, i64 1
  br label %59

56:                                               ; preds = %83, %74, %59
  %57 = add i32 %61, -1
  %58 = icmp eq i64 %62, %54
  br i1 %58, label %97, label %59

59:                                               ; preds = %56, %52
  %60 = phi i64 [ 0, %52 ], [ %62, %56 ]
  %61 = phi i32 [ %2, %52 ], [ %57, %56 ]
  %62 = add nuw nsw i64 %60, 1
  %63 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %62, i64 0
  %64 = load double, double* %63, align 16
  %65 = fsub double -0.000000e+00, %64
  %66 = load double, double* %53, align 8
  %67 = fcmp ogt double %66, 0x3E112E0BE0000000
  %68 = select i1 %67, double %66, double 0x3E112E0BE0000000
  %69 = fdiv double %65, %68
  %70 = fptrunc double %69 to float
  %71 = getelementptr inbounds float, float* %0, i64 %60
  store float %70, float* %71, align 4
  %72 = trunc i64 %60 to i32
  %73 = icmp slt i32 %72, %2
  br i1 %73, label %74, label %56

74:                                               ; preds = %59
  %75 = zext i32 %61 to i64
  %76 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %62, i64 0
  %77 = load double, double* %76, align 16
  %78 = fmul double %69, %66
  %79 = fadd double %77, %78
  store double %79, double* %76, align 16
  %80 = fmul double %69, %77
  %81 = fadd double %66, %80
  store double %81, double* %55, align 8
  %82 = icmp eq i32 %61, 1
  br i1 %82, label %56, label %83

83:                                               ; preds = %74, %83
  %84 = phi i64 [ %95, %83 ], [ 1, %74 ]
  %85 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %84, i64 1
  %86 = load double, double* %85, align 8
  %87 = add nuw nsw i64 %62, %84
  %88 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %87, i64 0
  %89 = load double, double* %88, align 16
  %90 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 %84, i64 1
  %91 = fmul double %69, %86
  %92 = fadd double %89, %91
  store double %92, double* %88, align 16
  %93 = fmul double %69, %89
  %94 = fadd double %86, %93
  store double %94, double* %90, align 8
  %95 = add nuw nsw i64 %84, 1
  %96 = icmp eq i64 %95, %75
  br i1 %96, label %56, label %83

97:                                               ; preds = %56, %50
  %98 = getelementptr inbounds [25 x [2 x double]], [25 x [2 x double]]* %4, i64 0, i64 0, i64 1
  %99 = load double, double* %98, align 8
  %100 = fptrunc double %99 to float
  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %5) #3
  ret float %100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
