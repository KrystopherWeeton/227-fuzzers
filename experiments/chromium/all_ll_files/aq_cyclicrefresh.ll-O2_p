; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/aq_cyclicrefresh.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/aq_cyclicrefresh.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16

; Function Attrs: nounwind ssp uwtable
define hidden %struct.CYCLIC_REFRESH* @av1_cyclic_refresh_alloc(i32, i32) local_unnamed_addr #0 {
  %3 = tail call i8* @aom_calloc(i64 1, i64 120) #6
  %4 = bitcast i8* %3 to %struct.CYCLIC_REFRESH*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = mul nsw i32 %1, %0
  %8 = sext i32 %7 to i64
  %9 = tail call i8* @aom_calloc(i64 %8, i64 1) #6
  %10 = getelementptr inbounds i8, i8* %3, i64 40
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %6
  tail call void @aom_free(i8* null) #6
  %14 = getelementptr inbounds i8, i8* %3, i64 48
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @aom_free(i8* %16) #6
  tail call void @aom_free(i8* nonnull %3) #6
  br label %26

17:                                               ; preds = %6
  %18 = tail call i8* @aom_malloc(i64 %8) #6
  %19 = getelementptr inbounds i8, i8* %3, i64 48
  %20 = bitcast i8* %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = icmp eq i8* %18, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load i8*, i8** %11, align 8
  tail call void @aom_free(i8* %23) #6
  %24 = load i8*, i8** %20, align 8
  tail call void @aom_free(i8* %24) #6
  tail call void @aom_free(i8* nonnull %3) #6
  br label %26

25:                                               ; preds = %17
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 -1, i64 %8, i1 false)
  br label %26

26:                                               ; preds = %2, %25, %22, %13
  %27 = phi %struct.CYCLIC_REFRESH* [ null, %13 ], [ null, %22 ], [ %4, %25 ], [ null, %2 ]
  ret %struct.CYCLIC_REFRESH* %27
}

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_free(%struct.CYCLIC_REFRESH*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.CYCLIC_REFRESH* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 9
  %5 = load i8*, i8** %4, align 8
  tail call void @aom_free(i8* %5) #6
  %6 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 10
  %7 = load i8*, i8** %6, align 8
  tail call void @aom_free(i8* %7) #6
  %8 = bitcast %struct.CYCLIC_REFRESH* %0 to i8*
  tail call void @aom_free(i8* nonnull %8) #6
  br label %9

9:                                                ; preds = %1, %3
  ret void
}

declare i8* @aom_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @aom_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_cyclic_refresh_estimate_bits_at_q(%struct.AV1_COMP* nocapture readonly, double) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %4 = load i8, i8* %3, align 16
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %6 = load i32, i32* %5, align 16
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 25
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %12 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %11, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = shl i32 %14, 4
  %16 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %12, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = sitofp i32 %17 to double
  %19 = sitofp i32 %15 to double
  %20 = fdiv double %18, %19
  %21 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %12, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = sitofp i32 %22 to double
  %24 = fdiv double %23, %19
  %25 = fsub double 1.000000e+00, %20
  %26 = fsub double %25, %24
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 70
  %28 = load i32, i32* %27, align 4
  %29 = tail call i32 @av1_estimate_bits_at_q(i8 zeroext %4, i32 %6, i32 %14, double %1, i32 %10, i32 %28) #6
  %30 = sitofp i32 %29 to double
  %31 = fmul double %26, %30
  %32 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %12, i64 0, i32 16, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, %6
  %35 = load i32, i32* %27, align 4
  %36 = tail call i32 @av1_estimate_bits_at_q(i8 zeroext %4, i32 %34, i32 %14, double %1, i32 %10, i32 %35) #6
  %37 = sitofp i32 %36 to double
  %38 = fmul double %20, %37
  %39 = fadd double %31, %38
  %40 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %12, i64 0, i32 16, i64 2
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, %6
  %43 = load i32, i32* %27, align 4
  %44 = tail call i32 @av1_estimate_bits_at_q(i8 zeroext %4, i32 %42, i32 %14, double %1, i32 %10, i32 %43) #6
  %45 = sitofp i32 %44 to double
  %46 = fmul double %24, %45
  %47 = fadd double %39, %46
  %48 = fptosi double %47 to i32
  ret i32 %48
}

declare i32 @av1_estimate_bits_at_q(i8 zeroext, i32, i32, double, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_cyclic_refresh_rc_bits_per_mb(%struct.AV1_COMP*, i32, double) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %5 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %4, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 4
  %9 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, %10
  %14 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 6
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %13, %15
  %17 = ashr i32 %16, 1
  %18 = sitofp i32 %17 to double
  %19 = sitofp i32 %8 to double
  %20 = fdiv double %18, %19
  %21 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 14
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %25 = load i8, i8* %24, align 16
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 70
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %29 = load %struct.SequenceHeader*, %struct.SequenceHeader** %28, align 16
  %30 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %29, i64 0, i32 25
  %31 = load i32, i32* %30, align 8
  %32 = tail call i32 @av1_compute_qdelta_by_rate(%struct.RATE_CONTROL* %23, i8 zeroext %25, i32 %1, double %22, i32 %27, i32 %31) #6
  %33 = sub nsw i32 0, %32
  %34 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = mul i32 %35, %1
  %37 = sdiv i32 %36, 100
  %38 = icmp slt i32 %37, %33
  br i1 %38, label %39, label %42

39:                                               ; preds = %3
  %40 = sub i32 0, %36
  %41 = sdiv i32 %40, 100
  br label %42

42:                                               ; preds = %3, %39
  %43 = phi i32 [ %41, %39 ], [ %32, %3 ]
  %44 = fsub double 1.000000e+00, %20
  %45 = load i8, i8* %24, align 16
  %46 = load %struct.SequenceHeader*, %struct.SequenceHeader** %28, align 16
  %47 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %46, i64 0, i32 25
  %48 = load i32, i32* %47, align 8
  %49 = load i32, i32* %26, align 4
  %50 = tail call i32 @av1_rc_bits_per_mb(i8 zeroext %45, i32 %1, double %2, i32 %48, i32 %49) #6
  %51 = sitofp i32 %50 to double
  %52 = fmul double %44, %51
  %53 = load i8, i8* %24, align 16
  %54 = add nsw i32 %43, %1
  %55 = load %struct.SequenceHeader*, %struct.SequenceHeader** %28, align 16
  %56 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %55, i64 0, i32 25
  %57 = load i32, i32* %56, align 8
  %58 = load i32, i32* %26, align 4
  %59 = tail call i32 @av1_rc_bits_per_mb(i8 zeroext %53, i32 %54, double %2, i32 %57, i32 %58) #6
  %60 = sitofp i32 %59 to double
  %61 = fmul double %20, %60
  %62 = fadd double %52, %61
  %63 = fptosi double %62 to i32
  ret i32 %63
}

declare i32 @av1_rc_bits_per_mb(i8 zeroext, i32, double, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cyclic_reset_segment_skip(%struct.AV1_COMP* nocapture readonly, %struct.macroblock* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %7 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %6, align 8
  %8 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %7, align 8
  %9 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %8, i64 0, i32 28
  %10 = load i16, i16* %9, align 1
  %11 = and i16 %10, 7
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 0
  %13 = load i32, i32* %12, align 16
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %17 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %16, align 16
  %18 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %17, i64 0, i32 6
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 7
  %21 = load i8, i8* %20, align 16, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 8
  %24 = load i8, i8* %23, align 1, !range !2
  br i1 %22, label %61, label %25

25:                                               ; preds = %5
  %26 = icmp eq i8 %24, 0
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %30 = load i32, i32* %29, align 4
  br i1 %26, label %46, label %31

31:                                               ; preds = %25
  %32 = icmp sge i32 %30, %13
  %33 = icmp sge i32 %28, %15
  %34 = and i1 %33, %32
  br i1 %34, label %35, label %46

35:                                               ; preds = %31
  %36 = add nsw i32 %15, -1
  %37 = add nsw i32 %13, -1
  %38 = mul i32 %28, %37
  %39 = add i32 %36, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %19, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = icmp ult i32 %43, 8
  %45 = select i1 %44, i32 %43, i32 8
  br label %46

46:                                               ; preds = %35, %31, %25
  %47 = phi i32 [ %45, %35 ], [ 8, %31 ], [ -1, %25 ]
  %48 = icmp sge i32 %30, %13
  %49 = icmp sgt i32 %28, %15
  %50 = and i1 %49, %48
  br i1 %50, label %51, label %61

51:                                               ; preds = %46
  %52 = add nsw i32 %13, -1
  %53 = mul i32 %28, %52
  %54 = add i32 %53, %15
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %19, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp ult i32 %58, 8
  %60 = select i1 %59, i32 %58, i32 8
  br label %61

61:                                               ; preds = %51, %46, %5
  %62 = phi i32 [ %47, %46 ], [ %47, %51 ], [ -1, %5 ]
  %63 = phi i32 [ 8, %46 ], [ %60, %51 ], [ -1, %5 ]
  %64 = icmp eq i8 %24, 0
  br i1 %64, label %83, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, %13
  %71 = icmp sge i32 %67, %15
  %72 = and i1 %71, %70
  br i1 %72, label %73, label %83

73:                                               ; preds = %65
  %74 = add nsw i32 %15, -1
  %75 = mul i32 %67, %13
  %76 = add i32 %74, %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %19, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp ult i32 %80, 8
  %82 = select i1 %81, i32 %80, i32 8
  br label %83

83:                                               ; preds = %73, %65, %61
  %84 = phi i32 [ -1, %61 ], [ 8, %65 ], [ %82, %73 ]
  %85 = icmp eq i32 %63, -1
  %86 = icmp eq i32 %84, -1
  br i1 %85, label %87, label %89

87:                                               ; preds = %83
  %88 = select i1 %86, i32 0, i32 %84
  br label %93

89:                                               ; preds = %83
  br i1 %86, label %93, label %90

90:                                               ; preds = %89
  %91 = icmp eq i32 %62, %63
  %92 = select i1 %91, i32 %63, i32 %84
  br label %93

93:                                               ; preds = %87, %89, %90
  %94 = phi i32 [ %88, %87 ], [ %92, %90 ], [ %63, %89 ]
  %95 = trunc i32 %94 to i16
  %96 = and i16 %95, 7
  %97 = and i16 %10, -8
  %98 = or i16 %96, %97
  store i16 %98, i16* %9, align 1
  %99 = icmp eq i16 %11, %96
  br i1 %99, label %179, label %100

100:                                              ; preds = %93
  %101 = zext i8 %4 to i64
  %102 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %101
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %109 = load i32, i32* %108, align 16
  %110 = sub nsw i32 %109, %3
  %111 = icmp slt i32 %110, %104
  %112 = select i1 %111, i32 %110, i32 %104
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = sub nsw i32 %114, %2
  %116 = icmp slt i32 %115, %107
  %117 = select i1 %116, i32 %115, i32 %107
  %118 = mul nsw i32 %109, %2
  %119 = add nsw i32 %118, %3
  %120 = icmp sgt i32 %117, 0
  br i1 %120, label %121, label %129

121:                                              ; preds = %100
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %123 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %122, align 8
  %124 = icmp sgt i32 %112, 0
  %125 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %123, i64 0, i32 9
  %126 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  br label %127

127:                                              ; preds = %121, %130
  %128 = phi i32 [ 0, %121 ], [ %131, %130 ]
  br i1 %124, label %133, label %130

129:                                              ; preds = %130, %100
  switch i16 %11, label %166 [
    i16 1, label %156
    i16 2, label %161
  ]

130:                                              ; preds = %133, %127
  %131 = add nuw nsw i32 %128, 1
  %132 = icmp slt i32 %131, %117
  br i1 %132, label %127, label %129

133:                                              ; preds = %127, %133
  %134 = phi i32 [ %154, %133 ], [ 0, %127 ]
  %135 = load i32, i32* %108, align 16
  %136 = mul nsw i32 %135, %128
  %137 = add i32 %119, %134
  %138 = add i32 %137, %136
  %139 = load i8*, i8** %125, align 8
  %140 = sext i32 %138 to i64
  %141 = getelementptr inbounds i8, i8* %139, i64 %140
  store i8 0, i8* %141, align 1
  %142 = load i16, i16* %9, align 1
  %143 = trunc i16 %142 to i8
  %144 = and i8 %143, 7
  %145 = load i8*, i8** %126, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 %140
  store i8 %144, i8* %146, align 1
  %147 = load i16, i16* %9, align 1
  %148 = trunc i16 %147 to i8
  %149 = and i8 %148, 7
  %150 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %16, align 16
  %151 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %150, i64 0, i32 6
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 %140
  store i8 %149, i8* %153, align 1
  %154 = add nuw nsw i32 %134, 1
  %155 = icmp slt i32 %154, %112
  br i1 %155, label %133, label %130

156:                                              ; preds = %129
  %157 = mul nsw i32 %117, %112
  %158 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 27
  %159 = load i32, i32* %158, align 4
  %160 = sub nsw i32 %159, %157
  store i32 %160, i32* %158, align 4
  br label %166

161:                                              ; preds = %129
  %162 = mul nsw i32 %117, %112
  %163 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 28
  %164 = load i32, i32* %163, align 16
  %165 = sub nsw i32 %164, %162
  store i32 %165, i32* %163, align 16
  br label %166

166:                                              ; preds = %129, %161, %156
  %167 = load i16, i16* %9, align 1
  %168 = and i16 %167, 7
  switch i16 %168, label %179 [
    i16 1, label %169
    i16 2, label %174
  ]

169:                                              ; preds = %166
  %170 = mul nsw i32 %117, %112
  %171 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 27
  %172 = load i32, i32* %171, align 4
  %173 = add nsw i32 %172, %170
  store i32 %173, i32* %171, align 4
  br label %179

174:                                              ; preds = %166
  %175 = mul nsw i32 %117, %112
  %176 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 28
  %177 = load i32, i32* %176, align 16
  %178 = add nsw i32 %177, %175
  store i32 %178, i32* %176, align 16
  br label %179

179:                                              ; preds = %166, %169, %174, %93
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_update_segment(%struct.AV1_COMP* nocapture readonly, %struct.macroblock* nocapture, i32, i32, i8 zeroext, i64, i64, i32, i8 zeroext) local_unnamed_addr #3 {
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %11 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %10, align 8
  %12 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %11, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %14 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %13, align 8
  %15 = zext i8 %4 to i64
  %16 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %15
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %23 = load i32, i32* %22, align 16
  %24 = sub nsw i32 %23, %3
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = sub nsw i32 %28, %2
  %30 = icmp slt i32 %29, %21
  %31 = select i1 %30, i32 %29, i32 %21
  %32 = mul nsw i32 %23, %2
  %33 = add nsw i32 %32, %3
  %34 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 5, i64 0
  %35 = bitcast %union.int_mv* %34 to %struct.mv*
  %36 = getelementptr inbounds %struct.mv, %struct.mv* %35, i64 0, i32 1
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 12
  %39 = load i64, i64* %38, align 8
  %40 = icmp slt i64 %39, %6
  br i1 %40, label %41, label %66

41:                                               ; preds = %9
  %42 = bitcast %union.int_mv* %34 to i16*
  %43 = load i16, i16* %42, align 8
  %44 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 13
  %45 = load i16, i16* %44, align 8
  %46 = icmp sgt i16 %43, %45
  br i1 %46, label %90, label %47

47:                                               ; preds = %41
  %48 = sext i16 %45 to i32
  %49 = sext i16 %43 to i32
  %50 = sub nsw i32 0, %48
  %51 = icmp slt i32 %49, %50
  %52 = icmp sgt i16 %37, %45
  %53 = or i1 %52, %51
  %54 = sext i16 %37 to i32
  %55 = icmp slt i32 %54, %50
  %56 = or i1 %55, %53
  br i1 %56, label %90, label %57

57:                                               ; preds = %47
  %58 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 28
  %59 = load i16, i16* %58, align 1
  %60 = trunc i16 %59 to i8
  %61 = icmp sgt i8 %60, -1
  br i1 %61, label %62, label %66

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 6, i64 0
  %64 = load i8, i8* %63, align 8
  %65 = icmp slt i8 %64, 1
  br i1 %65, label %90, label %66

66:                                               ; preds = %62, %57, %9
  %67 = icmp ugt i8 %4, 5
  br i1 %67, label %68, label %89

68:                                               ; preds = %66
  %69 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 11
  %70 = load i64, i64* %69, align 8
  %71 = icmp sgt i64 %70, %5
  br i1 %71, label %72, label %89

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 28
  %74 = load i16, i16* %73, align 1
  %75 = trunc i16 %74 to i8
  %76 = icmp sgt i8 %75, -1
  br i1 %76, label %77, label %81

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 6, i64 0
  %79 = load i8, i8* %78, align 8
  %80 = icmp slt i8 %79, 1
  br i1 %80, label %89, label %81

81:                                               ; preds = %77, %72
  %82 = getelementptr inbounds %union.int_mv, %union.int_mv* %34, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 15
  %87 = load i32, i32* %86, align 8
  %88 = icmp sgt i32 %87, 10
  br i1 %88, label %90, label %89

89:                                               ; preds = %85, %81, %77, %68, %66
  br label %90

90:                                               ; preds = %41, %47, %62, %85, %89
  %91 = phi i32 [ 1, %89 ], [ 0, %62 ], [ 0, %47 ], [ 0, %41 ], [ 2, %85 ]
  %92 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 9
  %93 = load i8*, i8** %92, align 8
  %94 = sext i32 %33 to i64
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 28
  %98 = load i16, i16* %97, align 1
  %99 = and i16 %98, 7
  %100 = zext i16 %99 to i32
  %101 = add nsw i32 %100, -1
  %102 = icmp ugt i32 %101, 1
  br i1 %102, label %111, label %103

103:                                              ; preds = %90
  %104 = trunc i32 %91 to i16
  %105 = and i16 %98, -8
  %106 = icmp eq i32 %7, 0
  %107 = select i1 %106, i16 %104, i16 0
  %108 = or i16 %105, %107
  store i16 %108, i16* %97, align 1
  %109 = zext i16 %107 to i32
  %110 = add nsw i32 %109, -1
  br label %111

111:                                              ; preds = %103, %90
  %112 = phi i32 [ %110, %103 ], [ %101, %90 ]
  %113 = icmp ugt i32 %112, 1
  br i1 %113, label %118, label %114

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %14, i64 0, i32 3
  %116 = load i32, i32* %115, align 4
  %117 = sub nsw i32 0, %116
  br label %127

118:                                              ; preds = %111
  %119 = icmp eq i32 %91, 0
  br i1 %119, label %127, label %120

120:                                              ; preds = %118
  %121 = load i8*, i8** %92, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %94
  %123 = load i8, i8* %122, align 1
  %124 = icmp eq i8 %123, 1
  %125 = select i1 %124, i8 0, i8 %96
  %126 = sext i8 %125 to i32
  br label %127

127:                                              ; preds = %120, %118, %114
  %128 = phi i32 [ %117, %114 ], [ %126, %120 ], [ 1, %118 ]
  %129 = icmp sgt i32 %31, 0
  br i1 %129, label %130, label %137

130:                                              ; preds = %127
  %131 = icmp sgt i32 %26, 0
  %132 = trunc i32 %128 to i8
  %133 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  br label %135

135:                                              ; preds = %130, %139
  %136 = phi i32 [ 0, %130 ], [ %140, %139 ]
  br i1 %131, label %142, label %139

137:                                              ; preds = %139, %127
  %138 = icmp eq i8 %8, 0
  br i1 %138, label %165, label %178

139:                                              ; preds = %142, %135
  %140 = add nuw nsw i32 %136, 1
  %141 = icmp slt i32 %140, %31
  br i1 %141, label %135, label %137

142:                                              ; preds = %135, %142
  %143 = phi i32 [ %163, %142 ], [ 0, %135 ]
  %144 = load i32, i32* %22, align 16
  %145 = mul nsw i32 %144, %136
  %146 = add i32 %143, %33
  %147 = add i32 %146, %145
  %148 = load i8*, i8** %92, align 8
  %149 = sext i32 %147 to i64
  %150 = getelementptr inbounds i8, i8* %148, i64 %149
  store i8 %132, i8* %150, align 1
  %151 = load i16, i16* %97, align 1
  %152 = trunc i16 %151 to i8
  %153 = and i8 %152, 7
  %154 = load i8*, i8** %133, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 %149
  store i8 %153, i8* %155, align 1
  %156 = load i16, i16* %97, align 1
  %157 = trunc i16 %156 to i8
  %158 = and i8 %157, 7
  %159 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %134, align 16
  %160 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %159, i64 0, i32 6
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 %149
  store i8 %158, i8* %162, align 1
  %163 = add nuw nsw i32 %143, 1
  %164 = icmp slt i32 %163, %26
  br i1 %164, label %142, label %139

165:                                              ; preds = %137
  %166 = load i16, i16* %97, align 1
  %167 = and i16 %166, 7
  switch i16 %167, label %178 [
    i16 1, label %168
    i16 2, label %173
  ]

168:                                              ; preds = %165
  %169 = mul nsw i32 %31, %26
  %170 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 27
  %171 = load i32, i32* %170, align 4
  %172 = add nsw i32 %171, %169
  store i32 %172, i32* %170, align 4
  br label %178

173:                                              ; preds = %165
  %174 = mul nsw i32 %31, %26
  %175 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 28
  %176 = load i32, i32* %175, align 16
  %177 = add nsw i32 %176, %174
  store i32 %177, i32* %175, align 16
  br label %178

178:                                              ; preds = %165, %137, %168, %173
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @av1_init_cyclic_refresh_counters(%struct.macroblock* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 27
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 28
  store i32 0, i32* %3, align 16
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 29
  store i32 0, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_accumulate_cyclic_refresh_counters(%struct.CYCLIC_REFRESH* nocapture, %struct.macroblock* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 27
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, %4
  store i32 %7, i32* %5, align 4
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 28
  %9 = load i32, i32* %8, align 16
  %10 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, %9
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 8
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, %14
  store i32 %17, i32* %15, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_postencode(%struct.AV1_COMP* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75
  %5 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 8
  %6 = load i32, i32* %5, align 8
  %7 = mul nsw i32 %6, 100
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = mul nsw i32 %11, %9
  %13 = sdiv i32 %7, %12
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %15 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %16 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 16
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %1
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %22, i32 21
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %71

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.SVC, %struct.SVC* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 16
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, -1
  %32 = icmp eq i32 %28, %31
  br i1 %32, label %33, label %71

33:                                               ; preds = %1, %26
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 50
  %35 = load i32, i32* %34, align 8
  %36 = mul nsw i32 %35, 3
  %37 = add nsw i32 %36, %13
  %38 = sdiv i32 %37, 4
  store i32 %38, i32* %34, align 8
  %39 = load i32, i32* %16, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %71, label %41

41:                                               ; preds = %33
  %42 = getelementptr inbounds %struct.SVC, %struct.SVC* %4, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = add nsw i32 %45, -1
  %47 = icmp eq i32 %43, %46
  %48 = icmp sgt i32 %45, 1
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %71

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %52 to i64
  %56 = sext i32 %54 to i64
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %56, i32 0, i32 50
  store i32 %38, i32* %57, align 8
  %58 = load i32, i32* %44, align 8
  %59 = icmp sgt i32 %58, 2
  br i1 %59, label %60, label %71

60:                                               ; preds = %50, %60
  %61 = phi i64 [ %66, %60 ], [ 1, %50 ]
  %62 = load i32, i32* %34, align 8
  %63 = mul nsw i64 %61, %55
  %64 = add nsw i64 %63, %56
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 21, i64 %64, i32 0, i32 50
  store i32 %62, i32* %65, align 8
  %66 = add nuw nsw i64 %61, 1
  %67 = load i32, i32* %44, align 8
  %68 = add nsw i32 %67, -1
  %69 = sext i32 %68 to i64
  %70 = icmp slt i64 %66, %69
  br i1 %70, label %60, label %71

71:                                               ; preds = %60, %50, %19, %33, %41, %26
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_set_golden_update(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %3 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %2, align 16
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %5 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %4, align 8
  %6 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = udiv i32 100, %7
  %11 = icmp slt i32 %10, 20
  %12 = shl nuw nsw i32 %10, 1
  %13 = select i1 %11, i32 %12, i32 40
  br label %14

14:                                               ; preds = %1, %9
  %15 = phi i32 [ %13, %9 ], [ 20, %1 ]
  %16 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %3, i64 0, i32 13, i32 9
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 50
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, 40
  %20 = select i1 %19, i32 8, i32 %15
  store i32 %20, i32* %16, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_update_parameters(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = shl i32 %5, 4
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 43
  %8 = load i32, i32* %7, align 4
  %9 = shl i32 %8, 1
  %10 = icmp slt i32 %9, 20
  %11 = select i1 %10, i32 %9, i32 20
  %12 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 18
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %14 = load i8, i8* %13, align 16
  %15 = and i8 %14, -3
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %45, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 13
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 12
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %21, %17
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %45, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 28, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %11
  br i1 %32, label %45, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 15
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, 20
  %37 = icmp sgt i32 %31, 235
  %38 = and i1 %37, %36
  br i1 %38, label %45, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 50
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 %41, 45
  %43 = icmp sgt i32 %35, 40
  %44 = and i1 %43, %42
  br i1 %44, label %45, label %46

45:                                               ; preds = %21, %1, %39, %33, %29, %25
  store i32 0, i32* %12, align 8
  br label %104

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 0
  store i32 10, i32* %47, align 8
  %48 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 1
  store i32 60, i32* %48, align 4
  %49 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 3
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 13
  store i16 32, i16* %50, align 8
  %51 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 15
  store i32 15, i32* %51, align 8
  %52 = load i32, i32* %34, align 4
  %53 = icmp slt i32 %52, 40
  %54 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 14
  %55 = select i1 %53, double 3.000000e+00, double 2.000000e+00
  store double %55, double* %54, align 8
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %57 = load i32, i32* %56, align 16
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = mul nsw i32 %59, %57
  %61 = icmp slt i32 %60, 101377
  br i1 %61, label %62, label %69

62:                                               ; preds = %46
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 21
  %64 = load i32, i32* %63, align 8
  %65 = icmp slt i32 %64, 3000
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  store i16 16, i16* %50, align 8
  store i32 13, i32* %51, align 8
  br label %69

67:                                               ; preds = %62
  store i32 70, i32* %48, align 4
  %68 = select i1 %53, double 3.000000e+00, double 2.500000e+00
  store double %68, double* %54, align 8
  br label %69

69:                                               ; preds = %66, %67, %46
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %69
  store i32 10, i32* %47, align 8
  store double 1.500000e+00, double* %54, align 8
  store i32 10, i32* %51, align 8
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  %75 = load i8, i8* %74, align 16, !range !2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %73
  store i32 0, i32* %47, align 8
  store double 1.000000e+00, double* %54, align 8
  br label %78

78:                                               ; preds = %73, %77, %69
  %79 = phi i32 [ 10, %73 ], [ 0, %77 ], [ 10, %69 ]
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = mul nsw i32 %81, %79
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %84 = load i32, i32* %83, align 16
  %85 = mul nsw i32 %82, %84
  %86 = sdiv i32 %85, 100
  %87 = sitofp i32 %86 to double
  %88 = sitofp i32 %6 to double
  %89 = fdiv double %87, %88
  %90 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %86, %91
  %93 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 6
  %94 = load i32, i32* %93, align 8
  %95 = add nsw i32 %92, %94
  %96 = ashr i32 %95, 1
  %97 = sitofp i32 %96 to double
  %98 = fdiv double %97, %88
  %99 = fmul double %98, 7.000000e+00
  %100 = fmul double %99, 1.250000e-01
  %101 = fcmp olt double %89, %100
  %102 = select i1 %101, double %89, double %98
  %103 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 17
  store double %102, double* %103, align 8
  br label %104

104:                                              ; preds = %78, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_setup(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 11
  %6 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %5, align 8
  %7 = icmp eq %struct.RefCntBuffer* %6, null
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %6, i64 0, i32 10
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %6, i64 0, i32 11
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %32, label %20

20:                                               ; preds = %14, %8
  %21 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 9
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %26 = load i32, i32* %25, align 16
  %27 = mul nsw i32 %26, %24
  %28 = sext i32 %27 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %28, i1 false) #6
  %29 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 2
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  store i8 1, i8* %30, align 16
  %31 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 18
  store i32 0, i32* %31, align 8
  br label %32

32:                                               ; preds = %14, %1, %20
  %33 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 18
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %56

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %42 = load i32, i32* %41, align 16
  %43 = mul nsw i32 %42, %40
  %44 = sext i32 %43 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 0, i64 %44, i1 false)
  tail call void @av1_disable_segmentation(%struct.segmentation* %4) #6
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %46 = load i8, i8* %45, align 16
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %302

48:                                               ; preds = %36
  %49 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 10
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %39, align 4
  %52 = load i32, i32* %41, align 16
  %53 = mul nsw i32 %52, %51
  %54 = sext i32 %53 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 -1, i64 %54, i1 false)
  %55 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 2
  store i32 0, i32* %55, align 8
  br label %302

56:                                               ; preds = %32
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 0
  %58 = load i32, i32* %57, align 16
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %60 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %61 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %60, i64 0, i32 25
  %62 = load i32, i32* %61, align 8
  %63 = tail call double @av1_convert_qindex_to_q(i32 %58, i32 %62) #6
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 4
  %65 = load i32, i32* %64, align 8
  %66 = sext i32 %65 to i64
  %67 = shl nsw i64 %66, 10
  %68 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 11
  store i64 %67, i64* %68, align 8
  %69 = fmul double %63, %63
  %70 = fptosi double %69 to i64
  %71 = shl i64 %70, 2
  %72 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 12
  store i64 %71, i64* %72, align 8
  tail call void @av1_enable_segmentation(%struct.segmentation* %4) #6
  tail call void @av1_clearall_segfeatures(%struct.segmentation* %4) #6
  tail call void @av1_disable_segfeature(%struct.segmentation* %4, i32 0, i8 zeroext 0) #6
  tail call void @av1_enable_segfeature(%struct.segmentation* %4, i32 1, i8 zeroext 0) #6
  tail call void @av1_enable_segfeature(%struct.segmentation* %4, i32 2, i8 zeroext 0) #6
  %73 = load i32, i32* %57, align 8
  %74 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 14
  %75 = load double, double* %74, align 8
  %76 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %79 = load i8, i8* %78, align 16
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 70
  %81 = load i32, i32* %80, align 4
  %82 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %83 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %82, i64 0, i32 25
  %84 = load i32, i32* %83, align 8
  %85 = tail call i32 @av1_compute_qdelta_by_rate(%struct.RATE_CONTROL* %77, i8 zeroext %79, i32 %73, double %75, i32 %81, i32 %84) #6
  %86 = sub nsw i32 0, %85
  %87 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %76, i64 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = mul i32 %88, %73
  %90 = sdiv i32 %89, 100
  %91 = icmp slt i32 %90, %86
  br i1 %91, label %92, label %95

92:                                               ; preds = %56
  %93 = sub i32 0, %89
  %94 = sdiv i32 %93, 100
  br label %95

95:                                               ; preds = %56, %92
  %96 = phi i32 [ %94, %92 ], [ %85, %56 ]
  %97 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 16, i64 1
  store i32 %96, i32* %97, align 4
  %98 = load i32, i32* %57, align 8
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = add i32 %98, %96
  %102 = add i32 %101, %100
  %103 = icmp slt i32 %102, 255
  %104 = select i1 %103, i32 %102, i32 255
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = tail call i32 @av1_compute_rd_mult(%struct.AV1_COMP* %0, i32 %106) #6
  %108 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 7
  store i32 %107, i32* %108, align 4
  tail call void @av1_set_segdata(%struct.segmentation* %4, i32 1, i8 zeroext 0, i32 %96) #6
  %109 = load i32, i32* %57, align 8
  %110 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 15
  %111 = load i32, i32* %110, align 8
  %112 = sitofp i32 %111 to double
  %113 = fmul double %112, 1.000000e-01
  %114 = load double, double* %74, align 8
  %115 = fmul double %114, %113
  %116 = fcmp ogt double %115, 4.000000e+00
  %117 = select i1 %116, double 4.000000e+00, double %115
  %118 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %119 = load i8, i8* %78, align 16
  %120 = load i32, i32* %80, align 4
  %121 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %122 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %121, i64 0, i32 25
  %123 = load i32, i32* %122, align 8
  %124 = tail call i32 @av1_compute_qdelta_by_rate(%struct.RATE_CONTROL* %77, i8 zeroext %119, i32 %109, double %117, i32 %120, i32 %123) #6
  %125 = sub nsw i32 0, %124
  %126 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %118, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = mul i32 %127, %109
  %129 = sdiv i32 %128, 100
  %130 = icmp slt i32 %129, %125
  br i1 %130, label %131, label %134

131:                                              ; preds = %95
  %132 = sub i32 0, %128
  %133 = sdiv i32 %132, 100
  br label %134

134:                                              ; preds = %95, %131
  %135 = phi i32 [ %133, %131 ], [ %124, %95 ]
  %136 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 16, i64 2
  store i32 %135, i32* %136, align 4
  tail call void @av1_set_segdata(%struct.segmentation* %4, i32 2, i8 zeroext 0, i32 %135) #6
  %137 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %143 = load i32, i32* %142, align 8
  %144 = mul nsw i32 %143, %141
  %145 = sext i32 %144 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 0, i64 %145, i1 false) #6
  %146 = load i32, i32* %142, align 8
  %147 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %148 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %147, i64 0, i32 8
  %149 = load i32, i32* %148, align 8
  %150 = add i32 %149, -1
  %151 = add i32 %150, %146
  %152 = sdiv i32 %151, %149
  %153 = load i32, i32* %140, align 4
  %154 = add i32 %153, %150
  %155 = sdiv i32 %154, %149
  %156 = mul nsw i32 %155, %152
  %157 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %137, i64 0, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = mul i32 %153, %146
  %160 = mul i32 %159, %158
  %161 = sdiv i32 %160, 100
  %162 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %137, i64 0, i32 2
  %163 = load i32, i32* %162, align 8
  %164 = icmp slt i32 %163, %156
  br i1 %164, label %166, label %165

165:                                              ; preds = %134
  store i32 0, i32* %162, align 8
  br label %166

166:                                              ; preds = %165, %134
  %167 = phi i32 [ %163, %134 ], [ 0, %165 ]
  %168 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %137, i64 0, i32 4
  store i32 0, i32* %168, align 8
  %169 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 12, i32 3
  %170 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %137, i64 0, i32 9
  %171 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %137, i64 0, i32 10
  br label %172

172:                                              ; preds = %298, %166
  %173 = phi i32 [ %167, %166 ], [ %296, %298 ]
  %174 = sdiv i32 %173, %152
  %175 = mul nsw i32 %174, %152
  %176 = sub nsw i32 %173, %175
  %177 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %178 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %177, i64 0, i32 8
  %179 = load i32, i32* %178, align 8
  %180 = mul nsw i32 %179, %174
  %181 = mul nsw i32 %176, %179
  %182 = load i32, i32* %169, align 4
  %183 = icmp eq i32 %182, 1
  br i1 %183, label %184, label %190

184:                                              ; preds = %172
  %185 = load i32, i32* %57, align 16
  %186 = tail call i32 @av1_get_qindex(%struct.segmentation* %4, i32 2, i32 %185) #6
  %187 = load %struct.SequenceHeader*, %struct.SequenceHeader** %59, align 16
  %188 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %187, i64 0, i32 8
  %189 = load i32, i32* %188, align 8
  br label %190

190:                                              ; preds = %184, %172
  %191 = phi i32 [ %189, %184 ], [ %179, %172 ]
  %192 = phi i32 [ %186, %184 ], [ 0, %172 ]
  %193 = load i32, i32* %142, align 8
  %194 = mul nsw i32 %193, %180
  %195 = add nsw i32 %194, %181
  %196 = sub nsw i32 %193, %181
  %197 = icmp slt i32 %196, %191
  %198 = select i1 %197, i32 %196, i32 %191
  %199 = load i32, i32* %140, align 4
  %200 = sub nsw i32 %199, %180
  %201 = icmp slt i32 %200, %191
  %202 = select i1 %201, i32 %200, i32 %191
  %203 = icmp sgt i32 %202, 0
  br i1 %203, label %204, label %241

204:                                              ; preds = %190
  %205 = icmp sgt i32 %198, 0
  br label %206

206:                                              ; preds = %237, %204
  %207 = phi i32 [ 0, %204 ], [ %238, %237 ]
  %208 = phi i32 [ 0, %204 ], [ %239, %237 ]
  br i1 %205, label %209, label %237

209:                                              ; preds = %206, %233
  %210 = phi i32 [ %234, %233 ], [ %207, %206 ]
  %211 = phi i32 [ %235, %233 ], [ 0, %206 ]
  %212 = load i32, i32* %142, align 8
  %213 = mul nsw i32 %212, %208
  %214 = add i32 %211, %195
  %215 = add i32 %214, %213
  %216 = load i8*, i8** %170, align 8
  %217 = sext i32 %215 to i64
  %218 = getelementptr inbounds i8, i8* %216, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %221, label %229

221:                                              ; preds = %209
  %222 = load i8*, i8** %171, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 %217
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = icmp slt i32 %192, %225
  %227 = add nsw i32 %210, 4
  %228 = select i1 %226, i32 %227, i32 %210
  br label %233

229:                                              ; preds = %209
  %230 = icmp slt i8 %219, 0
  br i1 %230, label %231, label %233

231:                                              ; preds = %229
  %232 = add nsw i8 %219, 1
  store i8 %232, i8* %218, align 1
  br label %233

233:                                              ; preds = %231, %229, %221
  %234 = phi i32 [ %210, %231 ], [ %210, %229 ], [ %228, %221 ]
  %235 = add nuw nsw i32 %211, 2
  %236 = icmp slt i32 %235, %198
  br i1 %236, label %209, label %237

237:                                              ; preds = %233, %206
  %238 = phi i32 [ %207, %206 ], [ %234, %233 ]
  %239 = add nuw nsw i32 %208, 2
  %240 = icmp slt i32 %239, %202
  br i1 %240, label %206, label %241

241:                                              ; preds = %237, %190
  %242 = phi i32 [ 0, %190 ], [ %238, %237 ]
  %243 = mul nsw i32 %202, %198
  %244 = ashr i32 %243, 1
  %245 = icmp slt i32 %242, %244
  br i1 %245, label %246, label %248

246:                                              ; preds = %241
  %247 = load i32, i32* %168, align 8
  br label %292

248:                                              ; preds = %241
  br i1 %203, label %249, label %289

249:                                              ; preds = %248
  %250 = icmp sgt i32 %198, 0
  %251 = and i32 %198, 1
  %252 = icmp eq i32 %198, 1
  %253 = sub i32 %198, %251
  %254 = icmp eq i32 %251, 0
  br label %255

255:                                              ; preds = %286, %249
  %256 = phi i32 [ 0, %249 ], [ %287, %286 ]
  br i1 %250, label %257, label %286

257:                                              ; preds = %255
  br i1 %252, label %277, label %258

258:                                              ; preds = %257, %258
  %259 = phi i32 [ %274, %258 ], [ 0, %257 ]
  %260 = phi i32 [ %275, %258 ], [ %253, %257 ]
  %261 = load i32, i32* %142, align 8
  %262 = mul nsw i32 %261, %256
  %263 = add i32 %259, %195
  %264 = add i32 %263, %262
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i8, i8* %139, i64 %265
  store i8 1, i8* %266, align 1
  %267 = or i32 %259, 1
  %268 = load i32, i32* %142, align 8
  %269 = mul nsw i32 %268, %256
  %270 = add i32 %267, %195
  %271 = add i32 %270, %269
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %139, i64 %272
  store i8 1, i8* %273, align 1
  %274 = add nuw nsw i32 %259, 2
  %275 = add i32 %260, -2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %258

277:                                              ; preds = %258, %257
  %278 = phi i32 [ 0, %257 ], [ %274, %258 ]
  br i1 %254, label %286, label %279

279:                                              ; preds = %277
  %280 = load i32, i32* %142, align 8
  %281 = mul nsw i32 %280, %256
  %282 = add i32 %278, %195
  %283 = add i32 %282, %281
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i8, i8* %139, i64 %284
  store i8 1, i8* %285, align 1
  br label %286

286:                                              ; preds = %279, %277, %255
  %287 = add nuw nsw i32 %256, 1
  %288 = icmp slt i32 %287, %202
  br i1 %288, label %255, label %289

289:                                              ; preds = %286, %248
  %290 = load i32, i32* %168, align 8
  %291 = add nsw i32 %290, %243
  store i32 %291, i32* %168, align 8
  br label %292

292:                                              ; preds = %289, %246
  %293 = phi i32 [ %247, %246 ], [ %291, %289 ]
  %294 = add nsw i32 %173, 1
  %295 = icmp eq i32 %294, %156
  %296 = select i1 %295, i32 0, i32 %294
  %297 = icmp slt i32 %293, %161
  br i1 %297, label %298, label %301

298:                                              ; preds = %292
  %299 = load i32, i32* %162, align 8
  %300 = icmp eq i32 %296, %299
  br i1 %300, label %301, label %172

301:                                              ; preds = %292, %298
  store i32 %296, i32* %162, align 8
  br label %302

302:                                              ; preds = %36, %48, %301
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_cyclic_refresh_reset_resize(%struct.AV1_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 44
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 9
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %9 = load i32, i32* %8, align 16
  %10 = mul nsw i32 %9, %7
  %11 = sext i32 %10 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 %11, i1 false)
  %12 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 2
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  store i8 1, i8* %13, align 16
  %14 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 18
  store i32 0, i32* %14, align 8
  ret void
}

declare void @av1_disable_segmentation(%struct.segmentation*) local_unnamed_addr #1

declare double @av1_convert_qindex_to_q(i32, i32) local_unnamed_addr #1

declare void @av1_enable_segmentation(%struct.segmentation*) local_unnamed_addr #1

declare void @av1_clearall_segfeatures(%struct.segmentation*) local_unnamed_addr #1

declare void @av1_disable_segfeature(%struct.segmentation*, i32, i8 zeroext) local_unnamed_addr #1

declare void @av1_enable_segfeature(%struct.segmentation*, i32, i8 zeroext) local_unnamed_addr #1

declare i32 @av1_compute_rd_mult(%struct.AV1_COMP*, i32) local_unnamed_addr #1

declare void @av1_set_segdata(%struct.segmentation*, i32, i8 zeroext, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_cyclic_refresh_get_rdmult(%struct.CYCLIC_REFRESH* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

declare i32 @av1_compute_qdelta_by_rate(%struct.RATE_CONTROL*, i8 zeroext, i32, double, i32, i32) local_unnamed_addr #1

declare i32 @av1_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
