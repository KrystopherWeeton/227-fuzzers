; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_entropy_coder.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_entropy_coder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.1"] }
%"class.jxl::Plane.1" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.2" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.jxl::Token"* }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.5"], %"class.std::__1::vector.12", %"class.std::__1::vector.19", i64, i64 }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { i32*, i32*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i32* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { i32*, i32*, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i32* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { i8*, i8*, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@.ref.tmp = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@.ref.tmp.1 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@.ref.tmp.2 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes = internal unnamed_addr constant <{ i32, i32, i32, i32, [284 x i32] }> <{ i32 -1, i32 -1, i32 -1, i32 -1, [284 x i32] zeroinitializer }>, align 64
@.ref.tmp.3 = private constant [3 x i32] [i32 1, i32 0, i32 2], align 4
@_ZN3jxlL40TokenizeCoefficientsHighwayDispatchTableE = internal unnamed_addr constant [12 x void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*] [void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* @_ZN3hwy13FunctionCacheIvJPKjRKN3jxl4RectEPrPKiRKNS3_15AcStrategyImageENS3_22YCbCrChromaSubsamplingEPNS3_6Image3IiEEPNSt3__16vectorINS3_5TokenENSI_9allocatorISK_EEEERKNS3_5PlaneIhEERKNSP_IiEERKNS3_11BlockCtxMapEEE13ChooseAndCallIXadL_ZNS3_L40TokenizeCoefficientsHighwayDispatchTableEEEEEvS2_S6_SA_SD_SE_SH_SO_SS_SV_SY_, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* @_ZN3jxl6N_AVX320TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* @_ZN3jxl6N_AVX220TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* @_ZN3jxl6N_SSE420TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* null, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)* @_ZN3jxl8N_SCALAR20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxlL17kCoeffOrderOffsetE = internal unnamed_addr constant [40 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 10, i64 14, i64 18, i64 34, i64 50, i64 66, i64 68, i64 70, i64 72, i64 76, i64 80, i64 84, i64 92, i64 100, i64 108, i64 172, i64 236, i64 300, i64 332, i64 364, i64 396, i64 652, i64 908, i64 1164, i64 1292, i64 1420, i64 1548, i64 2572, i64 3596, i64 4620, i64 5132, i64 5644, i64 6156], align 16
@_ZN3jxlL23kCoeffNumNonzeroContextE = internal unnamed_addr constant [64 x i16] [i16 2989, i16 0, i16 31, i16 62, i16 62, i16 93, i16 93, i16 93, i16 93, i16 123, i16 123, i16 123, i16 123, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 152, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 180, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206, i16 206], align 16
@_ZN3jxlL17kCoeffFreqContextE = internal unnamed_addr constant [64 x i16] [i16 2989, i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 15, i16 16, i16 16, i16 17, i16 17, i16 18, i16 18, i16 19, i16 19, i16 20, i16 20, i16 21, i16 21, i16 22, i16 22, i16 23, i16 23, i16 23, i16 23, i16 24, i16 24, i16 24, i16 24, i16 25, i16 25, i16 25, i16 25, i16 26, i16 26, i16 26, i16 26, i16 27, i16 27, i16 27, i16 27, i16 28, i16 28, i16 28, i16 28, i16 29, i16 29, i16 29, i16 29, i16 30, i16 30, i16 30, i16 30], align 16
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = external local_unnamed_addr constant [4 x i8], align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = external local_unnamed_addr constant [4 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_SSE419NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi(i64, i64, i64, i64, i64, i32* noalias nocapture readonly, i64, i32* noalias nocapture) local_unnamed_addr #0 {
  %9 = sub i64 0, %0
  %10 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %9
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %8
  %13 = shl i64 %0, 3
  %14 = icmp eq i64 %13, 0
  %15 = add i64 %13, -1
  %16 = lshr i64 %15, 2
  %17 = add nuw nsw i64 %16, 1
  br label %18

18:                                               ; preds = %37, %12
  %19 = phi i64 [ 0, %12 ], [ %39, %37 ]
  %20 = phi <4 x i32> [ zeroinitializer, %12 ], [ %38, %37 ]
  br i1 %14, label %37, label %21

21:                                               ; preds = %18
  %22 = mul i64 %13, %19
  br label %41

23:                                               ; preds = %37, %8
  %24 = phi <4 x i32> [ zeroinitializer, %8 ], [ %38, %37 ]
  %25 = shl i64 %1, 3
  %26 = icmp ugt i64 %25, %1
  br i1 %26, label %27, label %80

27:                                               ; preds = %23
  %28 = shl i64 %0, 3
  %29 = icmp eq i64 %28, 0
  %30 = add i64 %28, -1
  %31 = lshr i64 %30, 2
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 2
  %34 = icmp ult i64 %30, 12
  %35 = sub nsw i64 %32, %33
  %36 = icmp eq i64 %33, 0
  br label %75

37:                                               ; preds = %41, %18
  %38 = phi <4 x i32> [ %20, %18 ], [ %71, %41 ]
  %39 = add nuw i64 %19, 1
  %40 = icmp eq i64 %39, %1
  br i1 %40, label %23, label %18

41:                                               ; preds = %41, %21
  %42 = phi i64 [ 0, %21 ], [ %72, %41 ]
  %43 = phi <4 x i32> [ %20, %21 ], [ %71, %41 ]
  %44 = phi i64 [ %17, %21 ], [ %73, %41 ]
  %45 = getelementptr inbounds i32, i32* %10, i64 %42
  %46 = bitcast i32* %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 4, !alias.scope !2
  %48 = add i64 %42, %22
  %49 = getelementptr inbounds i32, i32* %5, i64 %48
  %50 = bitcast i32* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 16, !alias.scope !5
  %52 = xor <2 x i64> %47, <i64 -1, i64 -1>
  %53 = and <2 x i64> %51, %52
  %54 = bitcast <2 x i64> %53 to <4 x i32>
  %55 = icmp eq <4 x i32> %54, zeroinitializer
  %56 = zext <4 x i1> %55 to <4 x i32>
  %57 = sub <4 x i32> %43, %56
  %58 = or i64 %42, 4
  %59 = getelementptr inbounds i32, i32* %10, i64 %58
  %60 = bitcast i32* %59 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 4, !alias.scope !2
  %62 = add i64 %58, %22
  %63 = getelementptr inbounds i32, i32* %5, i64 %62
  %64 = bitcast i32* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 16, !alias.scope !5
  %66 = xor <2 x i64> %61, <i64 -1, i64 -1>
  %67 = and <2 x i64> %65, %66
  %68 = bitcast <2 x i64> %67 to <4 x i32>
  %69 = icmp eq <4 x i32> %68, zeroinitializer
  %70 = zext <4 x i1> %69 to <4 x i32>
  %71 = sub <4 x i32> %57, %70
  %72 = add nuw i64 %42, 8
  %73 = add i64 %44, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %37, label %41

75:                                               ; preds = %138, %27
  %76 = phi i64 [ %1, %27 ], [ %140, %138 ]
  %77 = phi <4 x i32> [ %24, %27 ], [ %139, %138 ]
  br i1 %29, label %138, label %78

78:                                               ; preds = %75
  %79 = mul i64 %28, %76
  br i1 %34, label %120, label %142

80:                                               ; preds = %138, %23
  %81 = phi <4 x i32> [ %24, %23 ], [ %139, %138 ]
  %82 = mul i64 %1, %0
  %83 = trunc i64 %82 to i32
  %84 = shl i32 %83, 6
  %85 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %86 = add <4 x i32> %85, %81
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %87, %86
  %89 = extractelement <4 x i32> %88, i32 0
  %90 = add nsw i32 %89, %84
  %91 = sext i32 %90 to i64
  %92 = add i64 %3, -1
  %93 = add i64 %92, %91
  %94 = lshr i64 %93, %4
  %95 = trunc i64 %94 to i32
  %96 = and i64 %2, 4294967295
  %97 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %96
  %98 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %96
  %99 = load i8, i8* %97, align 1
  %100 = zext i8 %99 to i64
  %101 = load i8, i8* %98, align 1
  %102 = zext i8 %101 to i64
  %103 = icmp ugt i64 %102, 1
  %104 = select i1 %103, i64 %102, i64 1
  %105 = and i64 %104, 248
  %106 = add nsw i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = icmp ult i64 %104, 8
  %110 = and i64 %104, 248
  %111 = insertelement <4 x i32> undef, i32 %95, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = insertelement <4 x i32> undef, i32 %95, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = and i64 %108, 3
  %116 = icmp ult i64 %106, 24
  %117 = sub nsw i64 %108, %115
  %118 = icmp eq i64 %115, 0
  %119 = icmp eq i64 %104, %110
  br label %180

120:                                              ; preds = %142, %78
  %121 = phi <4 x i32> [ undef, %78 ], [ %176, %142 ]
  %122 = phi i64 [ 0, %78 ], [ %177, %142 ]
  %123 = phi <4 x i32> [ %77, %78 ], [ %176, %142 ]
  br i1 %36, label %138, label %124

124:                                              ; preds = %120, %124
  %125 = phi i64 [ %135, %124 ], [ %122, %120 ]
  %126 = phi <4 x i32> [ %134, %124 ], [ %123, %120 ]
  %127 = phi i64 [ %136, %124 ], [ %33, %120 ]
  %128 = add i64 %125, %79
  %129 = getelementptr inbounds i32, i32* %5, i64 %128
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 16, !alias.scope !8
  %132 = icmp eq <4 x i32> %131, zeroinitializer
  %133 = zext <4 x i1> %132 to <4 x i32>
  %134 = sub <4 x i32> %126, %133
  %135 = add nuw i64 %125, 4
  %136 = add i64 %127, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %124, !llvm.loop !11

138:                                              ; preds = %120, %124, %75
  %139 = phi <4 x i32> [ %77, %75 ], [ %121, %120 ], [ %134, %124 ]
  %140 = add nuw i64 %76, 1
  %141 = icmp eq i64 %140, %25
  br i1 %141, label %80, label %75

142:                                              ; preds = %78, %142
  %143 = phi i64 [ %177, %142 ], [ 0, %78 ]
  %144 = phi <4 x i32> [ %176, %142 ], [ %77, %78 ]
  %145 = phi i64 [ %178, %142 ], [ %35, %78 ]
  %146 = add i64 %143, %79
  %147 = getelementptr inbounds i32, i32* %5, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 16, !alias.scope !8
  %150 = icmp eq <4 x i32> %149, zeroinitializer
  %151 = zext <4 x i1> %150 to <4 x i32>
  %152 = sub <4 x i32> %144, %151
  %153 = or i64 %143, 4
  %154 = add i64 %153, %79
  %155 = getelementptr inbounds i32, i32* %5, i64 %154
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16, !alias.scope !8
  %158 = icmp eq <4 x i32> %157, zeroinitializer
  %159 = zext <4 x i1> %158 to <4 x i32>
  %160 = sub <4 x i32> %152, %159
  %161 = or i64 %143, 8
  %162 = add i64 %161, %79
  %163 = getelementptr inbounds i32, i32* %5, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 16, !alias.scope !8
  %166 = icmp eq <4 x i32> %165, zeroinitializer
  %167 = zext <4 x i1> %166 to <4 x i32>
  %168 = sub <4 x i32> %160, %167
  %169 = or i64 %143, 12
  %170 = add i64 %169, %79
  %171 = getelementptr inbounds i32, i32* %5, i64 %170
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 16, !alias.scope !8
  %174 = icmp eq <4 x i32> %173, zeroinitializer
  %175 = zext <4 x i1> %174 to <4 x i32>
  %176 = sub <4 x i32> %168, %175
  %177 = add nuw i64 %143, 16
  %178 = add i64 %145, -4
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %120, label %142

180:                                              ; preds = %230, %80
  %181 = phi i64 [ 0, %80 ], [ %231, %230 ]
  %182 = mul i64 %181, %6
  br i1 %109, label %183, label %185

183:                                              ; preds = %228, %180
  %184 = phi i64 [ 0, %180 ], [ %110, %228 ]
  br label %233

185:                                              ; preds = %180
  br i1 %116, label %215, label %186

186:                                              ; preds = %185, %186
  %187 = phi i64 [ %212, %186 ], [ 0, %185 ]
  %188 = phi i64 [ %213, %186 ], [ %117, %185 ]
  %189 = add i64 %187, %182
  %190 = getelementptr inbounds i32, i32* %7, i64 %189
  %191 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %191, align 4
  %192 = getelementptr inbounds i32, i32* %190, i64 4
  %193 = bitcast i32* %192 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %193, align 4
  %194 = or i64 %187, 8
  %195 = add i64 %194, %182
  %196 = getelementptr inbounds i32, i32* %7, i64 %195
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %197, align 4
  %198 = getelementptr inbounds i32, i32* %196, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %199, align 4
  %200 = or i64 %187, 16
  %201 = add i64 %200, %182
  %202 = getelementptr inbounds i32, i32* %7, i64 %201
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %203, align 4
  %204 = getelementptr inbounds i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %205, align 4
  %206 = or i64 %187, 24
  %207 = add i64 %206, %182
  %208 = getelementptr inbounds i32, i32* %7, i64 %207
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %209, align 4
  %210 = getelementptr inbounds i32, i32* %208, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %211, align 4
  %212 = add i64 %187, 32
  %213 = add i64 %188, -4
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %186, !llvm.loop !13

215:                                              ; preds = %186, %185
  %216 = phi i64 [ 0, %185 ], [ %212, %186 ]
  br i1 %118, label %228, label %217

217:                                              ; preds = %215, %217
  %218 = phi i64 [ %225, %217 ], [ %216, %215 ]
  %219 = phi i64 [ %226, %217 ], [ %115, %215 ]
  %220 = add i64 %218, %182
  %221 = getelementptr inbounds i32, i32* %7, i64 %220
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %222, align 4
  %223 = getelementptr inbounds i32, i32* %221, i64 4
  %224 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %224, align 4
  %225 = add i64 %218, 8
  %226 = add i64 %219, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %217, !llvm.loop !15

228:                                              ; preds = %217, %215
  br i1 %119, label %230, label %183

229:                                              ; preds = %230
  ret i32 %90

230:                                              ; preds = %233, %228
  %231 = add nuw nsw i64 %181, 1
  %232 = icmp ult i64 %231, %100
  br i1 %232, label %180, label %229

233:                                              ; preds = %183, %233
  %234 = phi i64 [ %237, %233 ], [ %184, %183 ]
  %235 = add i64 %234, %182
  %236 = getelementptr inbounds i32, i32* %7, i64 %235
  store i32 %95, i32* %236, align 4
  %237 = add nuw nsw i64 %234, 1
  %238 = icmp ult i64 %237, %102
  br i1 %238, label %233, label %230, !llvm.loop !16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_SSE421NumNonZero8x8ExceptDCEPKiPi(i32* noalias nocapture readonly, i32* noalias nocapture) local_unnamed_addr #0 {
  %3 = bitcast i32* %0 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16, !alias.scope !18
  %5 = and <4 x i32> %4, <i32 0, i32 -1, i32 -1, i32 -1>
  %6 = icmp eq <4 x i32> %5, zeroinitializer
  %7 = sext <4 x i1> %6 to <4 x i32>
  %8 = getelementptr inbounds i32, i32* %0, i64 4
  %9 = bitcast i32* %8 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 16, !alias.scope !18
  %11 = icmp eq <4 x i32> %10, zeroinitializer
  %12 = zext <4 x i1> %11 to <4 x i32>
  %13 = sub nsw <4 x i32> %7, %12
  %14 = getelementptr inbounds i32, i32* %0, i64 8
  %15 = bitcast i32* %14 to <4 x i32>*
  %16 = load <4 x i32>, <4 x i32>* %15, align 16, !alias.scope !21
  %17 = icmp eq <4 x i32> %16, zeroinitializer
  %18 = zext <4 x i1> %17 to <4 x i32>
  %19 = sub nsw <4 x i32> %13, %18
  %20 = getelementptr inbounds i32, i32* %0, i64 12
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16, !alias.scope !21
  %23 = icmp eq <4 x i32> %22, zeroinitializer
  %24 = zext <4 x i1> %23 to <4 x i32>
  %25 = sub nsw <4 x i32> %19, %24
  %26 = getelementptr inbounds i32, i32* %0, i64 16
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16, !alias.scope !21
  %29 = icmp eq <4 x i32> %28, zeroinitializer
  %30 = zext <4 x i1> %29 to <4 x i32>
  %31 = sub nsw <4 x i32> %25, %30
  %32 = getelementptr inbounds i32, i32* %0, i64 20
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16, !alias.scope !21
  %35 = icmp eq <4 x i32> %34, zeroinitializer
  %36 = zext <4 x i1> %35 to <4 x i32>
  %37 = sub nsw <4 x i32> %31, %36
  %38 = getelementptr inbounds i32, i32* %0, i64 24
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16, !alias.scope !21
  %41 = icmp eq <4 x i32> %40, zeroinitializer
  %42 = zext <4 x i1> %41 to <4 x i32>
  %43 = sub nsw <4 x i32> %37, %42
  %44 = getelementptr inbounds i32, i32* %0, i64 28
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16, !alias.scope !21
  %47 = icmp eq <4 x i32> %46, zeroinitializer
  %48 = zext <4 x i1> %47 to <4 x i32>
  %49 = sub <4 x i32> %43, %48
  %50 = getelementptr inbounds i32, i32* %0, i64 32
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16, !alias.scope !21
  %53 = icmp eq <4 x i32> %52, zeroinitializer
  %54 = zext <4 x i1> %53 to <4 x i32>
  %55 = sub <4 x i32> %49, %54
  %56 = getelementptr inbounds i32, i32* %0, i64 36
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 16, !alias.scope !21
  %59 = icmp eq <4 x i32> %58, zeroinitializer
  %60 = zext <4 x i1> %59 to <4 x i32>
  %61 = sub <4 x i32> %55, %60
  %62 = getelementptr inbounds i32, i32* %0, i64 40
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16, !alias.scope !21
  %65 = icmp eq <4 x i32> %64, zeroinitializer
  %66 = zext <4 x i1> %65 to <4 x i32>
  %67 = sub <4 x i32> %61, %66
  %68 = getelementptr inbounds i32, i32* %0, i64 44
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16, !alias.scope !21
  %71 = icmp eq <4 x i32> %70, zeroinitializer
  %72 = zext <4 x i1> %71 to <4 x i32>
  %73 = sub <4 x i32> %67, %72
  %74 = getelementptr inbounds i32, i32* %0, i64 48
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16, !alias.scope !21
  %77 = icmp eq <4 x i32> %76, zeroinitializer
  %78 = zext <4 x i1> %77 to <4 x i32>
  %79 = sub <4 x i32> %73, %78
  %80 = getelementptr inbounds i32, i32* %0, i64 52
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 16, !alias.scope !21
  %83 = icmp eq <4 x i32> %82, zeroinitializer
  %84 = zext <4 x i1> %83 to <4 x i32>
  %85 = sub <4 x i32> %79, %84
  %86 = getelementptr inbounds i32, i32* %0, i64 56
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 16, !alias.scope !21
  %89 = icmp eq <4 x i32> %88, zeroinitializer
  %90 = zext <4 x i1> %89 to <4 x i32>
  %91 = sub <4 x i32> %85, %90
  %92 = getelementptr inbounds i32, i32* %0, i64 60
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 16, !alias.scope !21
  %95 = icmp eq <4 x i32> %94, zeroinitializer
  %96 = zext <4 x i1> %95 to <4 x i32>
  %97 = sub <4 x i32> %91, %96
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %99 = add <4 x i32> %98, %97
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %101 = add <4 x i32> %100, %99
  %102 = extractelement <4 x i32> %101, i32 0
  %103 = add nsw i32 %102, 64
  store i32 %103, i32* %1, align 4
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE420TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE(i32* noalias nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i32** noalias nocapture readonly, %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"* noalias nocapture readonly, %"class.std::__1::vector"* noalias, %"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"class.jxl::Plane.1"* nocapture readonly dereferenceable(32), %"struct.jxl::BlockCtxMap"* nocapture readonly dereferenceable(136)) #0 {
  %11 = alloca [3 x i64], align 16
  %12 = alloca [3 x i64], align 16
  %13 = alloca [3 x i32*], align 16
  %14 = alloca [3 x i32*], align 16
  %15 = alloca [3 x i64], align 16
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %21 = bitcast %"struct.jxl::Token"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %6 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 3
  %27 = mul i64 %17, 192
  %28 = mul i64 %27, %19
  %29 = add i64 %26, %28
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::Token"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, %29
  br i1 %35, label %36, label %55

36:                                               ; preds = %10
  %37 = icmp ugt i64 %29, 2305843009213693951
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #13
  unreachable

39:                                               ; preds = %36
  %40 = shl i64 %29, 3
  %41 = tail call i8* @_Znwm(i64 %40) #14
  %42 = bitcast i8* %41 to %"struct.jxl::Token"*
  %43 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %26
  %44 = ptrtoint %"struct.jxl::Token"* %43 to i64
  %45 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %29
  %46 = ptrtoint %"struct.jxl::Token"* %45 to i64
  %47 = ptrtoint i8* %41 to i64
  %48 = icmp sgt i64 %25, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = inttoptr i64 %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %50, i64 %25, i1 false) #9
  br label %51

51:                                               ; preds = %49, %39
  store i64 %47, i64* %23, align 8
  store i64 %44, i64* %21, align 8
  store i64 %46, i64* %31, align 8
  %52 = icmp eq i64 %24, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %24 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %10, %51, %53
  %56 = bitcast [3 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false)
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 2
  %60 = icmp eq i64 %19, 0
  br i1 %60, label %103, label %61

61:                                               ; preds = %55
  %62 = bitcast [3 x i64]* %12 to i8*
  %63 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 0
  %64 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 1
  %65 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 2
  %66 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 3
  %67 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 1
  %69 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 2
  %70 = bitcast [3 x i32*]* %13 to i8*
  %71 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 1
  %72 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 2
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = bitcast [3 x i32*]* %13 to i8**
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = bitcast i32** %71 to i8**
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = bitcast i32** %72 to i8**
  %79 = bitcast [3 x i32*]* %14 to i8*
  %80 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 0
  %81 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 1
  %82 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 2
  %83 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %86 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 4
  %89 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 4
  %91 = icmp eq i64 %17, 0
  %92 = bitcast [3 x i64]* %15 to i8*
  %93 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 0
  %94 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 1
  %95 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 2
  %96 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 2
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 4
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 2, i32 0, i32 0
  %101 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 3
  %102 = bitcast [3 x i32*]* %14 to i8*
  br label %104

103:                                              ; preds = %217, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #9
  ret void

104:                                              ; preds = %217, %61
  %105 = phi i64 [ 0, %61 ], [ %218, %217 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #9
  %106 = load i8, i8* %66, align 1
  %107 = zext i8 %106 to i64
  %108 = load i32, i32* %67, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = sub nsw i64 %107, %112
  %114 = lshr i64 %105, %113
  store i64 %114, i64* %63, align 16
  %115 = load i32, i32* %68, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i64
  %120 = sub nsw i64 %107, %119
  %121 = lshr i64 %105, %120
  store i64 %121, i64* %64, align 8
  %122 = load i32, i32* %69, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i64
  %127 = sub nsw i64 %107, %126
  %128 = lshr i64 %105, %127
  store i64 %128, i64* %65, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #9
  %129 = mul i64 %114, %58
  %130 = load i8*, i8** %73, align 8
  %131 = ptrtoint i8* %130 to i64
  %132 = and i64 %131, 63
  %133 = icmp eq i64 %132, 0
  tail call void @llvm.assume(i1 %133) #9
  %134 = getelementptr inbounds i8, i8* %130, i64 %129
  %135 = ptrtoint i8* %134 to i64
  %136 = and i64 %135, 63
  %137 = icmp eq i64 %136, 0
  tail call void @llvm.assume(i1 %137) #9
  store i8* %134, i8** %74, align 16
  %138 = mul i64 %121, %58
  %139 = load i8*, i8** %75, align 8
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #9
  %143 = getelementptr inbounds i8, i8* %139, i64 %138
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  tail call void @llvm.assume(i1 %146) #9
  store i8* %143, i8** %76, align 8
  %147 = mul i64 %128, %58
  %148 = load i8*, i8** %77, align 8
  %149 = ptrtoint i8* %148 to i64
  %150 = and i64 %149, 63
  %151 = icmp eq i64 %150, 0
  tail call void @llvm.assume(i1 %151) #9
  %152 = getelementptr inbounds i8, i8* %148, i64 %147
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  tail call void @llvm.assume(i1 %155) #9
  store i8* %152, i8** %78, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #9
  %156 = icmp eq i64 %114, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %102, i8 -86, i64 24, i1 false)
  br i1 %156, label %165, label %157

157:                                              ; preds = %104
  %158 = add i64 %114, -1
  %159 = mul i64 %158, %58
  %160 = getelementptr inbounds i8, i8* %130, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  tail call void @llvm.assume(i1 %163) #9
  %164 = bitcast i8* %160 to i32*
  br label %165

165:                                              ; preds = %104, %157
  %166 = phi i32* [ %164, %157 ], [ null, %104 ]
  store i32* %166, i32** %80, align 16
  %167 = icmp eq i64 %121, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %165
  %169 = add i64 %121, -1
  %170 = mul i64 %169, %58
  %171 = getelementptr inbounds i8, i8* %139, i64 %170
  %172 = ptrtoint i8* %171 to i64
  %173 = and i64 %172, 63
  %174 = icmp eq i64 %173, 0
  tail call void @llvm.assume(i1 %174) #9
  %175 = bitcast i8* %171 to i32*
  br label %176

176:                                              ; preds = %165, %168
  %177 = phi i32* [ %175, %168 ], [ null, %165 ]
  store i32* %177, i32** %81, align 8
  %178 = icmp eq i64 %128, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176
  %180 = add i64 %128, -1
  %181 = mul i64 %180, %58
  %182 = getelementptr inbounds i8, i8* %148, i64 %181
  %183 = ptrtoint i8* %182 to i64
  %184 = and i64 %183, 63
  %185 = icmp eq i64 %184, 0
  tail call void @llvm.assume(i1 %185) #9
  %186 = bitcast i8* %182 to i32*
  br label %187

187:                                              ; preds = %176, %179
  %188 = phi i32* [ %186, %179 ], [ null, %176 ]
  store i32* %188, i32** %82, align 16
  %189 = load i64, i64* %83, align 8
  %190 = add i64 %189, %105
  %191 = load i8*, i8** %84, align 8
  %192 = load i64, i64* %85, align 8
  %193 = mul i64 %192, %190
  %194 = getelementptr inbounds i8, i8* %191, i64 %193
  %195 = ptrtoint i8* %194 to i64
  %196 = and i64 %195, 63
  %197 = icmp eq i64 %196, 0
  tail call void @llvm.assume(i1 %197) #9
  %198 = load i64, i64* %86, align 8
  %199 = getelementptr inbounds i8, i8* %194, i64 %198
  %200 = load i8*, i8** %87, align 8
  %201 = load i64, i64* %88, align 8
  %202 = mul i64 %201, %190
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  tail call void @llvm.assume(i1 %206) #9
  %207 = bitcast i8* %203 to i32*
  %208 = getelementptr inbounds i32, i32* %207, i64 %198
  %209 = load i8*, i8** %89, align 8
  %210 = load i64, i64* %90, align 8
  %211 = mul i64 %210, %190
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = ptrtoint i8* %212 to i64
  %214 = and i64 %213, 63
  %215 = icmp eq i64 %214, 0
  tail call void @llvm.assume(i1 %215) #9
  %216 = getelementptr inbounds i8, i8* %212, i64 %198
  br i1 %91, label %217, label %220

217:                                              ; preds = %883, %187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #9
  %218 = add nuw i64 %105, 1
  %219 = icmp eq i64 %218, %19
  br i1 %219, label %103, label %104

220:                                              ; preds = %187, %883
  %221 = phi i64 [ %884, %883 ], [ 0, %187 ]
  %222 = getelementptr inbounds i8, i8* %216, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = and i8 %223, 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %883, label %226

226:                                              ; preds = %220
  %227 = lshr i8 %223, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #9
  %228 = load i8, i8* %96, align 4
  %229 = zext i8 %228 to i64
  %230 = load i32, i32* %67, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = sub nsw i64 %229, %234
  %236 = lshr i64 %221, %235
  store i64 %236, i64* %93, align 16
  %237 = load i32, i32* %68, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = sub nsw i64 %229, %241
  %243 = lshr i64 %221, %242
  store i64 %243, i64* %94, align 8
  %244 = load i32, i32* %69, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = sub nsw i64 %229, %248
  %250 = lshr i64 %221, %249
  store i64 %250, i64* %95, align 16
  %251 = zext i8 %227 to i64
  %252 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %251
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = mul nuw nsw i64 %257, %254
  %259 = tail call i64 @llvm.cttz.i64(i64 %258, i1 true) #9, !range !24
  %260 = shl nuw nsw i64 %258, 6
  %261 = icmp ult i8 %256, %253
  %262 = select i1 %261, i8 %256, i8 %253
  %263 = zext i8 %262 to i64
  %264 = icmp ugt i8 %256, %253
  %265 = select i1 %264, i8 %256, i8 %253
  %266 = zext i8 %265 to i64
  %267 = icmp eq i64 %258, 1
  %268 = sub nsw i64 0, %266
  %269 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %268
  %270 = icmp eq i8 %262, 0
  %271 = shl nuw nsw i64 %266, 3
  %272 = icmp eq i8 %265, 0
  %273 = shl nuw nsw i64 %263, 3
  %274 = icmp ugt i64 %273, %263
  %275 = mul nuw nsw i64 %263, %266
  %276 = trunc i64 %275 to i32
  %277 = shl nuw nsw i32 %276, 6
  %278 = add nsw i64 %258, -1
  %279 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %251
  %280 = getelementptr inbounds i8, i8* %199, i64 %221
  %281 = shl nuw nsw i64 %258, 2
  %282 = icmp ult i64 %258, %260
  %283 = mul nuw nsw i64 %263, 7
  %284 = and i64 %283, 1
  %285 = icmp eq i64 %284, 0
  %286 = mul nuw nsw i64 %271, %263
  %287 = add nuw nsw i64 %263, 1
  %288 = icmp eq i64 %283, 1
  br label %290

289:                                              ; preds = %878
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #9
  br label %883

290:                                              ; preds = %881, %226
  %291 = phi i8 [ %228, %226 ], [ %882, %881 ]
  %292 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp, i64 0, i64 0), %226 ], [ %879, %881 ]
  %293 = load i32, i32* %292, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 %294
  %296 = load i64, i64* %295, align 8
  %297 = zext i8 %291 to i64
  %298 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 %294
  %299 = load i32, i32* %298, align 4
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %300
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i64
  %304 = sub nsw i64 %297, %303
  %305 = shl i64 %296, %304
  %306 = icmp eq i64 %305, %221
  br i1 %306, label %307, label %878

307:                                              ; preds = %290
  %308 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 %294
  %309 = load i64, i64* %308, align 8
  %310 = load i8, i8* %66, align 1
  %311 = zext i8 %310 to i64
  %312 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %300
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i64
  %315 = sub nsw i64 %311, %314
  %316 = shl i64 %309, %315
  %317 = icmp eq i64 %316, %105
  br i1 %317, label %318, label %878

318:                                              ; preds = %307
  %319 = getelementptr inbounds i32*, i32** %2, i64 %294
  %320 = load i32*, i32** %319, align 8
  %321 = getelementptr inbounds [3 x i64], [3 x i64]* %11, i64 0, i64 %294
  %322 = load i64, i64* %321, align 8
  %323 = getelementptr inbounds i32, i32* %320, i64 %322
  %324 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 %294
  %325 = load i32*, i32** %324, align 8
  %326 = getelementptr inbounds i32, i32* %325, i64 %296
  br i1 %267, label %327, label %430

327:                                              ; preds = %318
  %328 = bitcast i32* %323 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16, !alias.scope !25, !noalias !30
  %330 = and <4 x i32> %329, <i32 0, i32 -1, i32 -1, i32 -1>
  %331 = icmp eq <4 x i32> %330, zeroinitializer
  %332 = sext <4 x i1> %331 to <4 x i32>
  %333 = getelementptr inbounds i32, i32* %323, i64 4
  %334 = bitcast i32* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 16, !alias.scope !25, !noalias !30
  %336 = icmp eq <4 x i32> %335, zeroinitializer
  %337 = zext <4 x i1> %336 to <4 x i32>
  %338 = sub nsw <4 x i32> %332, %337
  %339 = getelementptr inbounds i32, i32* %323, i64 8
  %340 = bitcast i32* %339 to <4 x i32>*
  %341 = load <4 x i32>, <4 x i32>* %340, align 16, !alias.scope !32, !noalias !30
  %342 = icmp eq <4 x i32> %341, zeroinitializer
  %343 = zext <4 x i1> %342 to <4 x i32>
  %344 = sub nsw <4 x i32> %338, %343
  %345 = getelementptr inbounds i32, i32* %323, i64 12
  %346 = bitcast i32* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 16, !alias.scope !32, !noalias !30
  %348 = icmp eq <4 x i32> %347, zeroinitializer
  %349 = zext <4 x i1> %348 to <4 x i32>
  %350 = sub nsw <4 x i32> %344, %349
  %351 = getelementptr inbounds i32, i32* %323, i64 16
  %352 = bitcast i32* %351 to <4 x i32>*
  %353 = load <4 x i32>, <4 x i32>* %352, align 16, !alias.scope !32, !noalias !30
  %354 = icmp eq <4 x i32> %353, zeroinitializer
  %355 = zext <4 x i1> %354 to <4 x i32>
  %356 = sub nsw <4 x i32> %350, %355
  %357 = getelementptr inbounds i32, i32* %323, i64 20
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 16, !alias.scope !32, !noalias !30
  %360 = icmp eq <4 x i32> %359, zeroinitializer
  %361 = zext <4 x i1> %360 to <4 x i32>
  %362 = sub nsw <4 x i32> %356, %361
  %363 = getelementptr inbounds i32, i32* %323, i64 24
  %364 = bitcast i32* %363 to <4 x i32>*
  %365 = load <4 x i32>, <4 x i32>* %364, align 16, !alias.scope !32, !noalias !30
  %366 = icmp eq <4 x i32> %365, zeroinitializer
  %367 = zext <4 x i1> %366 to <4 x i32>
  %368 = sub nsw <4 x i32> %362, %367
  %369 = getelementptr inbounds i32, i32* %323, i64 28
  %370 = bitcast i32* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 16, !alias.scope !32, !noalias !30
  %372 = icmp eq <4 x i32> %371, zeroinitializer
  %373 = zext <4 x i1> %372 to <4 x i32>
  %374 = sub <4 x i32> %368, %373
  %375 = getelementptr inbounds i32, i32* %323, i64 32
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 16, !alias.scope !32, !noalias !30
  %378 = icmp eq <4 x i32> %377, zeroinitializer
  %379 = zext <4 x i1> %378 to <4 x i32>
  %380 = sub <4 x i32> %374, %379
  %381 = getelementptr inbounds i32, i32* %323, i64 36
  %382 = bitcast i32* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 16, !alias.scope !32, !noalias !30
  %384 = icmp eq <4 x i32> %383, zeroinitializer
  %385 = zext <4 x i1> %384 to <4 x i32>
  %386 = sub <4 x i32> %380, %385
  %387 = getelementptr inbounds i32, i32* %323, i64 40
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 16, !alias.scope !32, !noalias !30
  %390 = icmp eq <4 x i32> %389, zeroinitializer
  %391 = zext <4 x i1> %390 to <4 x i32>
  %392 = sub <4 x i32> %386, %391
  %393 = getelementptr inbounds i32, i32* %323, i64 44
  %394 = bitcast i32* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 16, !alias.scope !32, !noalias !30
  %396 = icmp eq <4 x i32> %395, zeroinitializer
  %397 = zext <4 x i1> %396 to <4 x i32>
  %398 = sub <4 x i32> %392, %397
  %399 = getelementptr inbounds i32, i32* %323, i64 48
  %400 = bitcast i32* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 16, !alias.scope !32, !noalias !30
  %402 = icmp eq <4 x i32> %401, zeroinitializer
  %403 = zext <4 x i1> %402 to <4 x i32>
  %404 = sub <4 x i32> %398, %403
  %405 = getelementptr inbounds i32, i32* %323, i64 52
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 16, !alias.scope !32, !noalias !30
  %408 = icmp eq <4 x i32> %407, zeroinitializer
  %409 = zext <4 x i1> %408 to <4 x i32>
  %410 = sub <4 x i32> %404, %409
  %411 = getelementptr inbounds i32, i32* %323, i64 56
  %412 = bitcast i32* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 16, !alias.scope !32, !noalias !30
  %414 = icmp eq <4 x i32> %413, zeroinitializer
  %415 = zext <4 x i1> %414 to <4 x i32>
  %416 = sub <4 x i32> %410, %415
  %417 = getelementptr inbounds i32, i32* %323, i64 60
  %418 = bitcast i32* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 16, !alias.scope !32, !noalias !30
  %420 = icmp eq <4 x i32> %419, zeroinitializer
  %421 = zext <4 x i1> %420 to <4 x i32>
  %422 = sub <4 x i32> %416, %421
  %423 = shufflevector <4 x i32> %422, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %424 = add <4 x i32> %423, %422
  %425 = shufflevector <4 x i32> %424, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %426 = add <4 x i32> %425, %424
  %427 = extractelement <4 x i32> %426, i32 0
  %428 = add nsw i32 %427, 64
  store i32 %428, i32* %326, align 4, !alias.scope !30, !noalias !35
  %429 = load i32*, i32** %324, align 8
  br label %591

430:                                              ; preds = %318
  br i1 %270, label %436, label %431

431:                                              ; preds = %430, %458
  %432 = phi i64 [ %460, %458 ], [ 0, %430 ]
  %433 = phi <4 x i32> [ %459, %458 ], [ zeroinitializer, %430 ]
  br i1 %272, label %458, label %434

434:                                              ; preds = %431
  %435 = mul nuw nsw i64 %432, %271
  br label %462

436:                                              ; preds = %458, %430
  %437 = phi <4 x i32> [ zeroinitializer, %430 ], [ %459, %458 ]
  br i1 %274, label %438, label %485

438:                                              ; preds = %436
  %439 = or i1 %285, %272
  %440 = select i1 %285, <4 x i32> undef, <4 x i32> %437
  %441 = select i1 %285, i64 %263, i64 %287
  br i1 %439, label %454, label %442

442:                                              ; preds = %438, %442
  %443 = phi i64 [ %452, %442 ], [ 0, %438 ]
  %444 = phi <4 x i32> [ %451, %442 ], [ %437, %438 ]
  %445 = add nuw i64 %443, %286
  %446 = getelementptr inbounds i32, i32* %323, i64 %445
  %447 = bitcast i32* %446 to <4 x i32>*
  %448 = load <4 x i32>, <4 x i32>* %447, align 16, !alias.scope !36, !noalias !41
  %449 = icmp eq <4 x i32> %448, zeroinitializer
  %450 = zext <4 x i1> %449 to <4 x i32>
  %451 = sub <4 x i32> %444, %450
  %452 = add nuw nsw i64 %443, 4
  %453 = icmp ult i64 %452, %271
  br i1 %453, label %442, label %454

454:                                              ; preds = %438, %442
  %455 = phi <4 x i32> [ %440, %438 ], [ %451, %442 ]
  %456 = phi i64 [ %441, %438 ], [ %287, %442 ]
  %457 = phi <4 x i32> [ %437, %438 ], [ %451, %442 ]
  br i1 %288, label %485, label %480

458:                                              ; preds = %462, %431
  %459 = phi <4 x i32> [ %433, %431 ], [ %477, %462 ]
  %460 = add nuw nsw i64 %432, 1
  %461 = icmp eq i64 %460, %263
  br i1 %461, label %436, label %431

462:                                              ; preds = %462, %434
  %463 = phi i64 [ 0, %434 ], [ %478, %462 ]
  %464 = phi <4 x i32> [ %433, %434 ], [ %477, %462 ]
  %465 = getelementptr inbounds i32, i32* %269, i64 %463
  %466 = bitcast i32* %465 to <2 x i64>*
  %467 = load <2 x i64>, <2 x i64>* %466, align 4, !alias.scope !43, !noalias !46
  %468 = add nuw nsw i64 %463, %435
  %469 = getelementptr inbounds i32, i32* %323, i64 %468
  %470 = bitcast i32* %469 to <2 x i64>*
  %471 = load <2 x i64>, <2 x i64>* %470, align 16, !alias.scope !47, !noalias !41
  %472 = xor <2 x i64> %467, <i64 -1, i64 -1>
  %473 = and <2 x i64> %471, %472
  %474 = bitcast <2 x i64> %473 to <4 x i32>
  %475 = icmp eq <4 x i32> %474, zeroinitializer
  %476 = zext <4 x i1> %475 to <4 x i32>
  %477 = sub <4 x i32> %464, %476
  %478 = add nuw nsw i64 %463, 4
  %479 = icmp ult i64 %478, %271
  br i1 %479, label %462, label %458

480:                                              ; preds = %454, %901
  %481 = phi i64 [ %903, %901 ], [ %456, %454 ]
  %482 = phi <4 x i32> [ %902, %901 ], [ %457, %454 ]
  br i1 %272, label %519, label %483

483:                                              ; preds = %480
  %484 = mul i64 %481, %271
  br label %521

485:                                              ; preds = %454, %901, %436
  %486 = phi <4 x i32> [ %437, %436 ], [ %455, %454 ], [ %902, %901 ]
  %487 = shufflevector <4 x i32> %486, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %488 = add <4 x i32> %487, %486
  %489 = shufflevector <4 x i32> %488, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %490 = add <4 x i32> %489, %488
  %491 = extractelement <4 x i32> %490, i32 0
  %492 = add nsw i32 %491, %277
  %493 = sext i32 %492 to i64
  %494 = add nsw i64 %278, %493
  %495 = lshr i64 %494, %259
  %496 = trunc i64 %495 to i32
  %497 = load i8, i8* %255, align 1, !noalias !46
  %498 = zext i8 %497 to i64
  %499 = load i8, i8* %252, align 1, !noalias !46
  %500 = zext i8 %499 to i64
  %501 = zext i8 %499 to i64
  %502 = icmp ugt i64 %501, 1
  %503 = select i1 %502, i64 %501, i64 1
  %504 = and i64 %503, 248
  %505 = add nsw i64 %504, -8
  %506 = lshr exact i64 %505, 3
  %507 = add nuw nsw i64 %506, 1
  %508 = icmp ult i64 %503, 8
  %509 = and i64 %503, 248
  %510 = insertelement <4 x i32> undef, i32 %496, i32 0
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> zeroinitializer
  %512 = insertelement <4 x i32> undef, i32 %496, i32 0
  %513 = shufflevector <4 x i32> %512, <4 x i32> undef, <4 x i32> zeroinitializer
  %514 = and i64 %507, 3
  %515 = icmp ult i64 %505, 24
  %516 = sub nsw i64 %507, %514
  %517 = icmp eq i64 %514, 0
  %518 = icmp eq i64 %503, %509
  br label %533

519:                                              ; preds = %521, %480
  %520 = phi <4 x i32> [ %482, %480 ], [ %530, %521 ]
  br i1 %272, label %901, label %886

521:                                              ; preds = %521, %483
  %522 = phi i64 [ 0, %483 ], [ %531, %521 ]
  %523 = phi <4 x i32> [ %482, %483 ], [ %530, %521 ]
  %524 = add i64 %522, %484
  %525 = getelementptr inbounds i32, i32* %323, i64 %524
  %526 = bitcast i32* %525 to <4 x i32>*
  %527 = load <4 x i32>, <4 x i32>* %526, align 16, !alias.scope !36, !noalias !41
  %528 = icmp eq <4 x i32> %527, zeroinitializer
  %529 = zext <4 x i1> %528 to <4 x i32>
  %530 = sub <4 x i32> %523, %529
  %531 = add nuw nsw i64 %522, 4
  %532 = icmp ult i64 %531, %271
  br i1 %532, label %521, label %519

533:                                              ; preds = %582, %485
  %534 = phi i64 [ 0, %485 ], [ %583, %582 ]
  %535 = mul i64 %534, %59
  br i1 %508, label %536, label %538

536:                                              ; preds = %581, %533
  %537 = phi i64 [ 0, %533 ], [ %509, %581 ]
  br label %585

538:                                              ; preds = %533
  br i1 %515, label %568, label %539

539:                                              ; preds = %538, %539
  %540 = phi i64 [ %565, %539 ], [ 0, %538 ]
  %541 = phi i64 [ %566, %539 ], [ %516, %538 ]
  %542 = add i64 %540, %535
  %543 = getelementptr inbounds i32, i32* %326, i64 %542
  %544 = bitcast i32* %543 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %544, align 4, !alias.scope !41, !noalias !50
  %545 = getelementptr inbounds i32, i32* %543, i64 4
  %546 = bitcast i32* %545 to <4 x i32>*
  store <4 x i32> %513, <4 x i32>* %546, align 4, !alias.scope !41, !noalias !50
  %547 = or i64 %540, 8
  %548 = add i64 %547, %535
  %549 = getelementptr inbounds i32, i32* %326, i64 %548
  %550 = bitcast i32* %549 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %550, align 4, !alias.scope !41, !noalias !50
  %551 = getelementptr inbounds i32, i32* %549, i64 4
  %552 = bitcast i32* %551 to <4 x i32>*
  store <4 x i32> %513, <4 x i32>* %552, align 4, !alias.scope !41, !noalias !50
  %553 = or i64 %540, 16
  %554 = add i64 %553, %535
  %555 = getelementptr inbounds i32, i32* %326, i64 %554
  %556 = bitcast i32* %555 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %556, align 4, !alias.scope !41, !noalias !50
  %557 = getelementptr inbounds i32, i32* %555, i64 4
  %558 = bitcast i32* %557 to <4 x i32>*
  store <4 x i32> %513, <4 x i32>* %558, align 4, !alias.scope !41, !noalias !50
  %559 = or i64 %540, 24
  %560 = add i64 %559, %535
  %561 = getelementptr inbounds i32, i32* %326, i64 %560
  %562 = bitcast i32* %561 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %562, align 4, !alias.scope !41, !noalias !50
  %563 = getelementptr inbounds i32, i32* %561, i64 4
  %564 = bitcast i32* %563 to <4 x i32>*
  store <4 x i32> %513, <4 x i32>* %564, align 4, !alias.scope !41, !noalias !50
  %565 = add i64 %540, 32
  %566 = add i64 %541, -4
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %568, label %539, !llvm.loop !51

568:                                              ; preds = %539, %538
  %569 = phi i64 [ 0, %538 ], [ %565, %539 ]
  br i1 %517, label %581, label %570

570:                                              ; preds = %568, %570
  %571 = phi i64 [ %578, %570 ], [ %569, %568 ]
  %572 = phi i64 [ %579, %570 ], [ %514, %568 ]
  %573 = add i64 %571, %535
  %574 = getelementptr inbounds i32, i32* %326, i64 %573
  %575 = bitcast i32* %574 to <4 x i32>*
  store <4 x i32> %511, <4 x i32>* %575, align 4, !alias.scope !41, !noalias !50
  %576 = getelementptr inbounds i32, i32* %574, i64 4
  %577 = bitcast i32* %576 to <4 x i32>*
  store <4 x i32> %513, <4 x i32>* %577, align 4, !alias.scope !41, !noalias !50
  %578 = add i64 %571, 8
  %579 = add i64 %572, -1
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %570, !llvm.loop !52

581:                                              ; preds = %570, %568
  br i1 %518, label %582, label %536

582:                                              ; preds = %585, %581
  %583 = add nuw nsw i64 %534, 1
  %584 = icmp ult i64 %583, %498
  br i1 %584, label %533, label %591

585:                                              ; preds = %536, %585
  %586 = phi i64 [ %589, %585 ], [ %537, %536 ]
  %587 = add i64 %586, %535
  %588 = getelementptr inbounds i32, i32* %326, i64 %587
  store i32 %496, i32* %588, align 4, !alias.scope !41, !noalias !50
  %589 = add nuw nsw i64 %586, 1
  %590 = icmp ult i64 %589, %500
  br i1 %590, label %585, label %582, !llvm.loop !53

591:                                              ; preds = %582, %327
  %592 = phi i32* [ %429, %327 ], [ %325, %582 ]
  %593 = phi i32 [ %428, %327 ], [ %492, %582 ]
  %594 = load i8, i8* %279, align 1
  %595 = zext i8 %594 to i64
  %596 = mul nuw nsw i64 %595, 3
  %597 = add nsw i64 %596, %294
  %598 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %597
  %599 = load i64, i64* %598, align 8
  %600 = shl i64 %599, 6
  %601 = getelementptr inbounds i32, i32* %0, i64 %600
  %602 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 %294
  %603 = load i32*, i32** %602, align 8
  %604 = icmp eq i64 %296, 0
  %605 = icmp eq i32* %603, null
  br i1 %604, label %606, label %609

606:                                              ; preds = %591
  br i1 %605, label %623, label %607

607:                                              ; preds = %606
  %608 = load i32, i32* %603, align 4, !alias.scope !54, !noalias !57
  br label %623

609:                                              ; preds = %591
  br i1 %605, label %610, label %614

610:                                              ; preds = %609
  %611 = add i64 %296, -1
  %612 = getelementptr inbounds i32, i32* %592, i64 %611
  %613 = load i32, i32* %612, align 4, !alias.scope !57, !noalias !54
  br label %623

614:                                              ; preds = %609
  %615 = getelementptr inbounds i32, i32* %603, i64 %296
  %616 = load i32, i32* %615, align 4, !alias.scope !54, !noalias !57
  %617 = add i64 %296, -1
  %618 = getelementptr inbounds i32, i32* %592, i64 %617
  %619 = load i32, i32* %618, align 4, !alias.scope !57, !noalias !54
  %620 = add i32 %616, 1
  %621 = add i32 %620, %619
  %622 = sdiv i32 %621, 2
  br label %623

623:                                              ; preds = %606, %607, %610, %614
  %624 = phi i32 [ %613, %610 ], [ %622, %614 ], [ %608, %607 ], [ 32, %606 ]
  %625 = load i8, i8* %280, align 1
  %626 = getelementptr inbounds i32, i32* %208, i64 %296
  %627 = load i32, i32* %626, align 4
  %628 = load i32*, i32** %97, align 8
  %629 = ptrtoint i32* %628 to i64
  %630 = load i32*, i32** %98, align 8
  %631 = icmp eq i32* %628, %630
  %632 = ptrtoint i32* %630 to i64
  br i1 %631, label %685, label %633

633:                                              ; preds = %623
  %634 = getelementptr i32, i32* %630, i64 -1
  %635 = ptrtoint i32* %634 to i64
  %636 = sub i64 %635, %629
  %637 = lshr i64 %636, 2
  %638 = add nuw nsw i64 %637, 1
  %639 = and i64 %638, 3
  %640 = icmp ult i64 %636, 12
  br i1 %640, label %669, label %641

641:                                              ; preds = %633
  %642 = sub nsw i64 %638, %639
  br label %643

643:                                              ; preds = %643, %641
  %644 = phi i64 [ 0, %641 ], [ %665, %643 ]
  %645 = phi i32* [ %628, %641 ], [ %666, %643 ]
  %646 = phi i64 [ %642, %641 ], [ %667, %643 ]
  %647 = load i32, i32* %645, align 4
  %648 = icmp ult i32 %647, %627
  %649 = zext i1 %648 to i64
  %650 = add i64 %644, %649
  %651 = getelementptr inbounds i32, i32* %645, i64 1
  %652 = load i32, i32* %651, align 4
  %653 = icmp ult i32 %652, %627
  %654 = zext i1 %653 to i64
  %655 = add i64 %650, %654
  %656 = getelementptr inbounds i32, i32* %645, i64 2
  %657 = load i32, i32* %656, align 4
  %658 = icmp ult i32 %657, %627
  %659 = zext i1 %658 to i64
  %660 = add i64 %655, %659
  %661 = getelementptr inbounds i32, i32* %645, i64 3
  %662 = load i32, i32* %661, align 4
  %663 = icmp ult i32 %662, %627
  %664 = zext i1 %663 to i64
  %665 = add i64 %660, %664
  %666 = getelementptr inbounds i32, i32* %645, i64 4
  %667 = add i64 %646, -4
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %643

669:                                              ; preds = %643, %633
  %670 = phi i64 [ undef, %633 ], [ %665, %643 ]
  %671 = phi i64 [ 0, %633 ], [ %665, %643 ]
  %672 = phi i32* [ %628, %633 ], [ %666, %643 ]
  %673 = icmp eq i64 %639, 0
  br i1 %673, label %685, label %674

674:                                              ; preds = %669, %674
  %675 = phi i64 [ %681, %674 ], [ %671, %669 ]
  %676 = phi i32* [ %682, %674 ], [ %672, %669 ]
  %677 = phi i64 [ %683, %674 ], [ %639, %669 ]
  %678 = load i32, i32* %676, align 4
  %679 = icmp ult i32 %678, %627
  %680 = zext i1 %679 to i64
  %681 = add i64 %675, %680
  %682 = getelementptr inbounds i32, i32* %676, i64 1
  %683 = add i64 %677, -1
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %685, label %674, !llvm.loop !59

685:                                              ; preds = %669, %674, %623
  %686 = phi i64 [ 0, %623 ], [ %670, %669 ], [ %681, %674 ]
  %687 = icmp ult i32 %293, 2
  %688 = xor i64 %294, 1
  %689 = mul nsw i64 %688, 13
  %690 = select i1 %687, i64 %689, i64 26
  %691 = add nsw i64 %690, %595
  %692 = sub i64 %632, %629
  %693 = ashr exact i64 %692, 2
  %694 = add nsw i64 %693, 1
  %695 = mul i64 %694, %691
  %696 = add i64 %686, %695
  %697 = load i64, i64* %99, align 8
  %698 = mul i64 %696, %697
  %699 = zext i8 %625 to i64
  %700 = add i64 %698, %699
  %701 = load i8*, i8** %100, align 8
  %702 = getelementptr inbounds i8, i8* %701, i64 %700
  %703 = load i8, i8* %702, align 1
  %704 = zext i8 %703 to i32
  %705 = icmp ult i32 %624, 64
  %706 = select i1 %705, i32 %624, i32 64
  %707 = icmp ult i32 %706, 8
  %708 = lshr i32 %706, 1
  %709 = add nuw nsw i32 %708, 4
  %710 = select i1 %707, i32 %706, i32 %709
  %711 = load i64, i64* %101, align 8
  %712 = trunc i64 %711 to i32
  %713 = mul i32 %710, %712
  %714 = add i32 %713, %704
  %715 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %716 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %717 = icmp ult %"struct.jxl::Token"* %715, %716
  %718 = ptrtoint %"struct.jxl::Token"* %716 to i64
  br i1 %717, label %719, label %725

719:                                              ; preds = %685
  %720 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %715, i64 0, i32 0
  %721 = shl i32 %714, 1
  store i32 %721, i32* %720, align 4
  %722 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %715, i64 0, i32 1
  store i32 %593, i32* %722, align 4
  %723 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %715, i64 1
  %724 = ptrtoint %"struct.jxl::Token"* %723 to i64
  store i64 %724, i64* %21, align 8
  br label %771

725:                                              ; preds = %685
  %726 = ptrtoint %"struct.jxl::Token"* %715 to i64
  %727 = load i64, i64* %23, align 8
  %728 = sub i64 %726, %727
  %729 = ashr exact i64 %728, 3
  %730 = add nsw i64 %729, 1
  %731 = icmp ugt i64 %730, 2305843009213693951
  br i1 %731, label %732, label %734

732:                                              ; preds = %725
  %733 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %733) #13
  unreachable

734:                                              ; preds = %725
  %735 = sub i64 %718, %727
  %736 = ashr exact i64 %735, 3
  %737 = icmp ult i64 %736, 1152921504606846975
  br i1 %737, label %738, label %746

738:                                              ; preds = %734
  %739 = ashr exact i64 %735, 2
  %740 = icmp ult i64 %739, %730
  %741 = select i1 %740, i64 %730, i64 %739
  %742 = icmp eq i64 %741, 0
  br i1 %742, label %751, label %743

743:                                              ; preds = %738
  %744 = icmp ugt i64 %741, 2305843009213693951
  br i1 %744, label %745, label %746

745:                                              ; preds = %743
  tail call void @abort() #13
  unreachable

746:                                              ; preds = %743, %734
  %747 = phi i64 [ %741, %743 ], [ 2305843009213693951, %734 ]
  %748 = shl i64 %747, 3
  %749 = tail call i8* @_Znwm(i64 %748) #14
  %750 = bitcast i8* %749 to %"struct.jxl::Token"*
  br label %751

751:                                              ; preds = %746, %738
  %752 = phi i64 [ %747, %746 ], [ 0, %738 ]
  %753 = phi i8* [ %749, %746 ], [ null, %738 ]
  %754 = phi %"struct.jxl::Token"* [ %750, %746 ], [ null, %738 ]
  %755 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %754, i64 %729
  %756 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %754, i64 %752
  %757 = ptrtoint %"struct.jxl::Token"* %756 to i64
  %758 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %755, i64 0, i32 0
  %759 = shl i32 %714, 1
  store i32 %759, i32* %758, align 4
  %760 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %754, i64 %729, i32 1
  store i32 %593, i32* %760, align 4
  %761 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %755, i64 1
  %762 = ptrtoint %"struct.jxl::Token"* %761 to i64
  %763 = ptrtoint %"struct.jxl::Token"* %754 to i64
  %764 = icmp sgt i64 %728, 0
  br i1 %764, label %765, label %767

765:                                              ; preds = %751
  %766 = inttoptr i64 %727 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %753, i8* align 4 %766, i64 %728, i1 false) #9
  br label %767

767:                                              ; preds = %765, %751
  store i64 %763, i64* %23, align 8
  store i64 %762, i64* %21, align 8
  store i64 %757, i64* %31, align 8
  %768 = icmp eq i64 %727, 0
  br i1 %768, label %771, label %769

769:                                              ; preds = %767
  %770 = inttoptr i64 %727 to i8*
  tail call void @_ZdlPv(i8* %770) #14
  br label %771

771:                                              ; preds = %719, %767, %769
  %772 = load i64, i64* %101, align 8
  %773 = mul nuw nsw i32 %704, 458
  %774 = trunc i64 %772 to i32
  %775 = mul i32 %774, 37
  %776 = add i32 %775, %773
  %777 = zext i32 %776 to i64
  %778 = icmp ne i32 %593, 0
  %779 = and i1 %778, %282
  br i1 %779, label %780, label %783

780:                                              ; preds = %771
  %781 = sext i32 %593 to i64
  %782 = icmp sge i64 %281, %781
  br label %785

783:                                              ; preds = %870, %771
  %784 = add i64 %322, %260
  store i64 %784, i64* %321, align 8
  br label %878

785:                                              ; preds = %780, %870
  %786 = phi i64 [ %874, %870 ], [ %258, %780 ]
  %787 = phi i1 [ %871, %870 ], [ %782, %780 ]
  %788 = phi i32 [ %873, %870 ], [ %593, %780 ]
  %789 = zext i1 %787 to i64
  %790 = getelementptr inbounds i32, i32* %601, i64 %786
  %791 = load i32, i32* %790, align 4
  %792 = zext i32 %791 to i64
  %793 = getelementptr inbounds i32, i32* %323, i64 %792
  %794 = load i32, i32* %793, align 4
  %795 = sext i32 %788 to i64
  %796 = add nsw i64 %278, %795
  %797 = lshr i64 %796, %259
  %798 = lshr i64 %786, %259
  %799 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL23kCoeffNumNonzeroContextE, i64 0, i64 %797
  %800 = load i16, i16* %799, align 2
  %801 = zext i16 %800 to i64
  %802 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL17kCoeffFreqContextE, i64 0, i64 %798
  %803 = load i16, i16* %802, align 2
  %804 = zext i16 %803 to i64
  %805 = add nuw nsw i64 %804, %801
  %806 = shl nuw nsw i64 %805, 1
  %807 = or i64 %806, %789
  %808 = add nuw nsw i64 %807, %777
  %809 = shl i32 %794, 1
  %810 = ashr i32 %794, 31
  %811 = xor i32 %809, %810
  %812 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %813 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %814 = icmp ult %"struct.jxl::Token"* %812, %813
  %815 = ptrtoint %"struct.jxl::Token"* %813 to i64
  br i1 %814, label %816, label %823

816:                                              ; preds = %785
  %817 = trunc i64 %808 to i32
  %818 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %812, i64 0, i32 0
  %819 = shl i32 %817, 1
  store i32 %819, i32* %818, align 4
  %820 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %812, i64 0, i32 1
  store i32 %811, i32* %820, align 4
  %821 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %812, i64 1
  %822 = ptrtoint %"struct.jxl::Token"* %821 to i64
  store i64 %822, i64* %21, align 8
  br label %870

823:                                              ; preds = %785
  %824 = ptrtoint %"struct.jxl::Token"* %812 to i64
  %825 = load i64, i64* %23, align 8
  %826 = sub i64 %824, %825
  %827 = ashr exact i64 %826, 3
  %828 = add nsw i64 %827, 1
  %829 = icmp ugt i64 %828, 2305843009213693951
  br i1 %829, label %830, label %832

830:                                              ; preds = %823
  %831 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %831) #13
  unreachable

832:                                              ; preds = %823
  %833 = sub i64 %815, %825
  %834 = ashr exact i64 %833, 3
  %835 = icmp ult i64 %834, 1152921504606846975
  br i1 %835, label %836, label %844

836:                                              ; preds = %832
  %837 = ashr exact i64 %833, 2
  %838 = icmp ult i64 %837, %828
  %839 = select i1 %838, i64 %828, i64 %837
  %840 = icmp eq i64 %839, 0
  br i1 %840, label %849, label %841

841:                                              ; preds = %836
  %842 = icmp ugt i64 %839, 2305843009213693951
  br i1 %842, label %843, label %844

843:                                              ; preds = %841
  tail call void @abort() #13
  unreachable

844:                                              ; preds = %841, %832
  %845 = phi i64 [ %839, %841 ], [ 2305843009213693951, %832 ]
  %846 = shl i64 %845, 3
  %847 = tail call i8* @_Znwm(i64 %846) #14
  %848 = bitcast i8* %847 to %"struct.jxl::Token"*
  br label %849

849:                                              ; preds = %844, %836
  %850 = phi i64 [ %845, %844 ], [ 0, %836 ]
  %851 = phi i8* [ %847, %844 ], [ null, %836 ]
  %852 = phi %"struct.jxl::Token"* [ %848, %844 ], [ null, %836 ]
  %853 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %852, i64 %827
  %854 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %852, i64 %850
  %855 = ptrtoint %"struct.jxl::Token"* %854 to i64
  %856 = trunc i64 %808 to i32
  %857 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %853, i64 0, i32 0
  %858 = shl i32 %856, 1
  store i32 %858, i32* %857, align 4
  %859 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %852, i64 %827, i32 1
  store i32 %811, i32* %859, align 4
  %860 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %853, i64 1
  %861 = ptrtoint %"struct.jxl::Token"* %860 to i64
  %862 = ptrtoint %"struct.jxl::Token"* %852 to i64
  %863 = icmp sgt i64 %826, 0
  br i1 %863, label %864, label %866

864:                                              ; preds = %849
  %865 = inttoptr i64 %825 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %851, i8* align 4 %865, i64 %826, i1 false) #9
  br label %866

866:                                              ; preds = %864, %849
  store i64 %862, i64* %23, align 8
  store i64 %861, i64* %21, align 8
  store i64 %855, i64* %31, align 8
  %867 = icmp eq i64 %825, 0
  br i1 %867, label %870, label %868

868:                                              ; preds = %866
  %869 = inttoptr i64 %825 to i8*
  tail call void @_ZdlPv(i8* %869) #14
  br label %870

870:                                              ; preds = %816, %866, %868
  %871 = icmp ne i32 %794, 0
  %872 = zext i1 %871 to i32
  %873 = sub nuw i32 %788, %872
  %874 = add nuw nsw i64 %786, 1
  %875 = icmp ult i64 %874, %260
  %876 = icmp ne i32 %873, 0
  %877 = and i1 %876, %875
  br i1 %877, label %785, label %783

878:                                              ; preds = %307, %290, %783
  %879 = getelementptr inbounds i32, i32* %292, i64 1
  %880 = icmp eq i32* %879, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp, i64 1, i64 0)
  br i1 %880, label %289, label %881

881:                                              ; preds = %878
  %882 = load i8, i8* %96, align 4
  br label %290

883:                                              ; preds = %220, %289
  %884 = add nuw i64 %221, 1
  %885 = icmp eq i64 %884, %17
  br i1 %885, label %217, label %220

886:                                              ; preds = %519
  %887 = add nuw i64 %481, 1
  %888 = mul i64 %887, %271
  br label %889

889:                                              ; preds = %889, %886
  %890 = phi i64 [ 0, %886 ], [ %899, %889 ]
  %891 = phi <4 x i32> [ %520, %886 ], [ %898, %889 ]
  %892 = add i64 %890, %888
  %893 = getelementptr inbounds i32, i32* %323, i64 %892
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 16, !alias.scope !36, !noalias !41
  %896 = icmp eq <4 x i32> %895, zeroinitializer
  %897 = zext <4 x i1> %896 to <4 x i32>
  %898 = sub <4 x i32> %891, %897
  %899 = add nuw nsw i64 %890, 4
  %900 = icmp ult i64 %899, %271
  br i1 %900, label %889, label %901

901:                                              ; preds = %889, %519
  %902 = phi <4 x i32> [ %520, %519 ], [ %898, %889 ]
  %903 = add nuw i64 %481, 2
  %904 = icmp eq i64 %903, %273
  br i1 %904, label %485, label %480
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX219NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi(i64, i64, i64, i64, i64, i32* noalias nocapture readonly, i64, i32* noalias nocapture) local_unnamed_addr #2 {
  %9 = sub i64 0, %0
  %10 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %9
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %8
  %13 = shl i64 %0, 3
  %14 = icmp eq i64 %13, 0
  %15 = add i64 %13, -1
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %16, 0
  %20 = sub nuw nsw i64 %17, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %64, %12
  %23 = phi i64 [ 0, %12 ], [ %67, %64 ]
  %24 = phi <4 x i64> [ zeroinitializer, %12 ], [ %66, %64 ]
  %25 = phi <8 x i32> [ zeroinitializer, %12 ], [ %65, %64 ]
  br i1 %14, label %64, label %26

26:                                               ; preds = %22
  %27 = mul i64 %13, %23
  br i1 %19, label %43, label %69

28:                                               ; preds = %64, %8
  %29 = phi <8 x i32> [ zeroinitializer, %8 ], [ %65, %64 ]
  %30 = phi <4 x i64> [ zeroinitializer, %8 ], [ %66, %64 ]
  %31 = shl i64 %1, 3
  %32 = icmp ugt i64 %31, %1
  br i1 %32, label %33, label %109

33:                                               ; preds = %28
  %34 = shl i64 %0, 3
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %34, -1
  %37 = lshr i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 3
  %40 = icmp ult i64 %36, 24
  %41 = sub nsw i64 %38, %39
  %42 = icmp eq i64 %39, 0
  br label %103

43:                                               ; preds = %69, %26
  %44 = phi <8 x i32> [ undef, %26 ], [ %99, %69 ]
  %45 = phi i64 [ 0, %26 ], [ %100, %69 ]
  %46 = phi <8 x i32> [ %25, %26 ], [ %99, %69 ]
  br i1 %21, label %61, label %47

47:                                               ; preds = %43
  %48 = add i64 %45, %27
  %49 = getelementptr inbounds i32, i32* %5, i64 %48
  %50 = bitcast i32* %49 to <4 x i64>*
  %51 = load <4 x i64>, <4 x i64>* %50, align 32, !alias.scope !60, !noalias !63
  %52 = getelementptr inbounds i32, i32* %10, i64 %45
  %53 = bitcast i32* %52 to <4 x i64>*
  %54 = load <4 x i64>, <4 x i64>* %53, align 4, !alias.scope !65, !noalias !68
  %55 = xor <4 x i64> %54, <i64 -1, i64 -1, i64 -1, i64 -1>
  %56 = and <4 x i64> %51, %55
  %57 = bitcast <4 x i64> %56 to <8 x i32>
  %58 = icmp eq <8 x i32> %57, zeroinitializer
  %59 = zext <8 x i1> %58 to <8 x i32>
  %60 = sub <8 x i32> %46, %59
  br label %61

61:                                               ; preds = %43, %47
  %62 = phi <8 x i32> [ %44, %43 ], [ %60, %47 ]
  %63 = bitcast <8 x i32> %62 to <4 x i64>
  br label %64

64:                                               ; preds = %22, %61
  %65 = phi <8 x i32> [ %62, %61 ], [ %25, %22 ]
  %66 = phi <4 x i64> [ %63, %61 ], [ %24, %22 ]
  %67 = add nuw i64 %23, 1
  %68 = icmp eq i64 %67, %1
  br i1 %68, label %28, label %22

69:                                               ; preds = %26, %69
  %70 = phi i64 [ %100, %69 ], [ 0, %26 ]
  %71 = phi <8 x i32> [ %99, %69 ], [ %25, %26 ]
  %72 = phi i64 [ %101, %69 ], [ %20, %26 ]
  %73 = getelementptr inbounds i32, i32* %10, i64 %70
  %74 = bitcast i32* %73 to <4 x i64>*
  %75 = load <4 x i64>, <4 x i64>* %74, align 4, !alias.scope !65, !noalias !68
  %76 = add i64 %70, %27
  %77 = getelementptr inbounds i32, i32* %5, i64 %76
  %78 = bitcast i32* %77 to <4 x i64>*
  %79 = load <4 x i64>, <4 x i64>* %78, align 32, !alias.scope !60, !noalias !63
  %80 = xor <4 x i64> %75, <i64 -1, i64 -1, i64 -1, i64 -1>
  %81 = and <4 x i64> %79, %80
  %82 = bitcast <4 x i64> %81 to <8 x i32>
  %83 = icmp eq <8 x i32> %82, zeroinitializer
  %84 = zext <8 x i1> %83 to <8 x i32>
  %85 = sub <8 x i32> %71, %84
  %86 = or i64 %70, 8
  %87 = getelementptr inbounds i32, i32* %10, i64 %86
  %88 = bitcast i32* %87 to <4 x i64>*
  %89 = load <4 x i64>, <4 x i64>* %88, align 4, !alias.scope !65, !noalias !68
  %90 = add i64 %86, %27
  %91 = getelementptr inbounds i32, i32* %5, i64 %90
  %92 = bitcast i32* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 32, !alias.scope !60, !noalias !63
  %94 = xor <4 x i64> %89, <i64 -1, i64 -1, i64 -1, i64 -1>
  %95 = and <4 x i64> %93, %94
  %96 = bitcast <4 x i64> %95 to <8 x i32>
  %97 = icmp eq <8 x i32> %96, zeroinitializer
  %98 = zext <8 x i1> %97 to <8 x i32>
  %99 = sub <8 x i32> %85, %98
  %100 = add nuw i64 %70, 16
  %101 = add i64 %72, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %43, label %69

103:                                              ; preds = %181, %33
  %104 = phi i64 [ %1, %33 ], [ %184, %181 ]
  %105 = phi <4 x i64> [ %30, %33 ], [ %183, %181 ]
  %106 = phi <8 x i32> [ %29, %33 ], [ %182, %181 ]
  br i1 %35, label %181, label %107

107:                                              ; preds = %103
  %108 = mul i64 %34, %104
  br i1 %40, label %160, label %186

109:                                              ; preds = %181, %28
  %110 = phi <8 x i32> [ %29, %28 ], [ %182, %181 ]
  %111 = phi <4 x i64> [ %30, %28 ], [ %183, %181 ]
  %112 = mul i64 %1, %0
  %113 = trunc i64 %112 to i32
  %114 = shl i32 %113, 6
  %115 = shufflevector <4 x i64> %111, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = add <8 x i32> %110, %116
  %118 = shufflevector <8 x i32> %117, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %119 = add <8 x i32> %118, %117
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = add <8 x i32> %120, %119
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %124 = bitcast <2 x i64> %123 to <4 x i32>
  %125 = extractelement <4 x i32> %124, i32 0
  %126 = add nsw i32 %125, %114
  %127 = sext i32 %126 to i64
  %128 = add i64 %3, -1
  %129 = add i64 %128, %127
  %130 = lshr i64 %129, %4
  %131 = trunc i64 %130 to i32
  %132 = and i64 %2, 4294967295
  %133 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %132
  %134 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %132
  %135 = load i8, i8* %133, align 1
  %136 = zext i8 %135 to i64
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i64
  %139 = icmp ugt i64 %138, 1
  %140 = select i1 %139, i64 %138, i64 1
  %141 = and i64 %140, 224
  %142 = add nsw i64 %141, -32
  %143 = lshr exact i64 %142, 5
  %144 = add nuw nsw i64 %143, 1
  %145 = icmp ult i64 %140, 32
  %146 = and i64 %140, 224
  %147 = insertelement <8 x i32> undef, i32 %131, i32 0
  %148 = shufflevector <8 x i32> %147, <8 x i32> undef, <8 x i32> zeroinitializer
  %149 = insertelement <8 x i32> undef, i32 %131, i32 0
  %150 = shufflevector <8 x i32> %149, <8 x i32> undef, <8 x i32> zeroinitializer
  %151 = insertelement <8 x i32> undef, i32 %131, i32 0
  %152 = shufflevector <8 x i32> %151, <8 x i32> undef, <8 x i32> zeroinitializer
  %153 = insertelement <8 x i32> undef, i32 %131, i32 0
  %154 = shufflevector <8 x i32> %153, <8 x i32> undef, <8 x i32> zeroinitializer
  %155 = and i64 %144, 3
  %156 = icmp ult i64 %142, 96
  %157 = sub nsw i64 %144, %155
  %158 = icmp eq i64 %155, 0
  %159 = icmp eq i64 %140, %146
  br label %224

160:                                              ; preds = %186, %107
  %161 = phi <8 x i32> [ undef, %107 ], [ %220, %186 ]
  %162 = phi i64 [ 0, %107 ], [ %221, %186 ]
  %163 = phi <8 x i32> [ %106, %107 ], [ %220, %186 ]
  br i1 %42, label %178, label %164

164:                                              ; preds = %160, %164
  %165 = phi i64 [ %175, %164 ], [ %162, %160 ]
  %166 = phi <8 x i32> [ %174, %164 ], [ %163, %160 ]
  %167 = phi i64 [ %176, %164 ], [ %39, %160 ]
  %168 = add i64 %165, %108
  %169 = getelementptr inbounds i32, i32* %5, i64 %168
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 32, !alias.scope !70, !noalias !73
  %172 = icmp eq <8 x i32> %171, zeroinitializer
  %173 = zext <8 x i1> %172 to <8 x i32>
  %174 = sub <8 x i32> %166, %173
  %175 = add nuw i64 %165, 8
  %176 = add i64 %167, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %164, !llvm.loop !75

178:                                              ; preds = %164, %160
  %179 = phi <8 x i32> [ %161, %160 ], [ %174, %164 ]
  %180 = bitcast <8 x i32> %179 to <4 x i64>
  br label %181

181:                                              ; preds = %103, %178
  %182 = phi <8 x i32> [ %179, %178 ], [ %106, %103 ]
  %183 = phi <4 x i64> [ %180, %178 ], [ %105, %103 ]
  %184 = add nuw i64 %104, 1
  %185 = icmp eq i64 %184, %31
  br i1 %185, label %109, label %103

186:                                              ; preds = %107, %186
  %187 = phi i64 [ %221, %186 ], [ 0, %107 ]
  %188 = phi <8 x i32> [ %220, %186 ], [ %106, %107 ]
  %189 = phi i64 [ %222, %186 ], [ %41, %107 ]
  %190 = add i64 %187, %108
  %191 = getelementptr inbounds i32, i32* %5, i64 %190
  %192 = bitcast i32* %191 to <8 x i32>*
  %193 = load <8 x i32>, <8 x i32>* %192, align 32, !alias.scope !70, !noalias !73
  %194 = icmp eq <8 x i32> %193, zeroinitializer
  %195 = zext <8 x i1> %194 to <8 x i32>
  %196 = sub <8 x i32> %188, %195
  %197 = or i64 %187, 8
  %198 = add i64 %197, %108
  %199 = getelementptr inbounds i32, i32* %5, i64 %198
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 32, !alias.scope !70, !noalias !73
  %202 = icmp eq <8 x i32> %201, zeroinitializer
  %203 = zext <8 x i1> %202 to <8 x i32>
  %204 = sub <8 x i32> %196, %203
  %205 = or i64 %187, 16
  %206 = add i64 %205, %108
  %207 = getelementptr inbounds i32, i32* %5, i64 %206
  %208 = bitcast i32* %207 to <8 x i32>*
  %209 = load <8 x i32>, <8 x i32>* %208, align 32, !alias.scope !70, !noalias !73
  %210 = icmp eq <8 x i32> %209, zeroinitializer
  %211 = zext <8 x i1> %210 to <8 x i32>
  %212 = sub <8 x i32> %204, %211
  %213 = or i64 %187, 24
  %214 = add i64 %213, %108
  %215 = getelementptr inbounds i32, i32* %5, i64 %214
  %216 = bitcast i32* %215 to <8 x i32>*
  %217 = load <8 x i32>, <8 x i32>* %216, align 32, !alias.scope !70, !noalias !73
  %218 = icmp eq <8 x i32> %217, zeroinitializer
  %219 = zext <8 x i1> %218 to <8 x i32>
  %220 = sub <8 x i32> %212, %219
  %221 = add nuw i64 %187, 32
  %222 = add i64 %189, -4
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %160, label %186

224:                                              ; preds = %294, %109
  %225 = phi i64 [ 0, %109 ], [ %295, %294 ]
  %226 = mul i64 %225, %6
  br i1 %145, label %227, label %229

227:                                              ; preds = %292, %224
  %228 = phi i64 [ 0, %224 ], [ %146, %292 ]
  br label %297

229:                                              ; preds = %224
  br i1 %156, label %275, label %230

230:                                              ; preds = %229, %230
  %231 = phi i64 [ %272, %230 ], [ 0, %229 ]
  %232 = phi i64 [ %273, %230 ], [ %157, %229 ]
  %233 = add i64 %231, %226
  %234 = getelementptr inbounds i32, i32* %7, i64 %233
  %235 = bitcast i32* %234 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %235, align 4
  %236 = getelementptr inbounds i32, i32* %234, i64 8
  %237 = bitcast i32* %236 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %237, align 4
  %238 = getelementptr inbounds i32, i32* %234, i64 16
  %239 = bitcast i32* %238 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %239, align 4
  %240 = getelementptr inbounds i32, i32* %234, i64 24
  %241 = bitcast i32* %240 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %241, align 4
  %242 = or i64 %231, 32
  %243 = add i64 %242, %226
  %244 = getelementptr inbounds i32, i32* %7, i64 %243
  %245 = bitcast i32* %244 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %245, align 4
  %246 = getelementptr inbounds i32, i32* %244, i64 8
  %247 = bitcast i32* %246 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %247, align 4
  %248 = getelementptr inbounds i32, i32* %244, i64 16
  %249 = bitcast i32* %248 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %249, align 4
  %250 = getelementptr inbounds i32, i32* %244, i64 24
  %251 = bitcast i32* %250 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %251, align 4
  %252 = or i64 %231, 64
  %253 = add i64 %252, %226
  %254 = getelementptr inbounds i32, i32* %7, i64 %253
  %255 = bitcast i32* %254 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %255, align 4
  %256 = getelementptr inbounds i32, i32* %254, i64 8
  %257 = bitcast i32* %256 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %257, align 4
  %258 = getelementptr inbounds i32, i32* %254, i64 16
  %259 = bitcast i32* %258 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %259, align 4
  %260 = getelementptr inbounds i32, i32* %254, i64 24
  %261 = bitcast i32* %260 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %261, align 4
  %262 = or i64 %231, 96
  %263 = add i64 %262, %226
  %264 = getelementptr inbounds i32, i32* %7, i64 %263
  %265 = bitcast i32* %264 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %265, align 4
  %266 = getelementptr inbounds i32, i32* %264, i64 8
  %267 = bitcast i32* %266 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %267, align 4
  %268 = getelementptr inbounds i32, i32* %264, i64 16
  %269 = bitcast i32* %268 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %269, align 4
  %270 = getelementptr inbounds i32, i32* %264, i64 24
  %271 = bitcast i32* %270 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %271, align 4
  %272 = add i64 %231, 128
  %273 = add i64 %232, -4
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %230, !llvm.loop !76

275:                                              ; preds = %230, %229
  %276 = phi i64 [ 0, %229 ], [ %272, %230 ]
  br i1 %158, label %292, label %277

277:                                              ; preds = %275, %277
  %278 = phi i64 [ %289, %277 ], [ %276, %275 ]
  %279 = phi i64 [ %290, %277 ], [ %155, %275 ]
  %280 = add i64 %278, %226
  %281 = getelementptr inbounds i32, i32* %7, i64 %280
  %282 = bitcast i32* %281 to <8 x i32>*
  store <8 x i32> %148, <8 x i32>* %282, align 4
  %283 = getelementptr inbounds i32, i32* %281, i64 8
  %284 = bitcast i32* %283 to <8 x i32>*
  store <8 x i32> %150, <8 x i32>* %284, align 4
  %285 = getelementptr inbounds i32, i32* %281, i64 16
  %286 = bitcast i32* %285 to <8 x i32>*
  store <8 x i32> %152, <8 x i32>* %286, align 4
  %287 = getelementptr inbounds i32, i32* %281, i64 24
  %288 = bitcast i32* %287 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %288, align 4
  %289 = add i64 %278, 32
  %290 = add i64 %279, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %277, !llvm.loop !77

292:                                              ; preds = %277, %275
  br i1 %159, label %294, label %227

293:                                              ; preds = %294
  ret i32 %126

294:                                              ; preds = %297, %292
  %295 = add nuw nsw i64 %225, 1
  %296 = icmp ult i64 %295, %136
  br i1 %296, label %224, label %293

297:                                              ; preds = %227, %297
  %298 = phi i64 [ %301, %297 ], [ %228, %227 ]
  %299 = add i64 %298, %226
  %300 = getelementptr inbounds i32, i32* %7, i64 %299
  store i32 %131, i32* %300, align 4
  %301 = add nuw nsw i64 %298, 1
  %302 = icmp ult i64 %301, %138
  br i1 %302, label %297, label %294, !llvm.loop !78
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX221NumNonZero8x8ExceptDCEPKiPi(i32* noalias nocapture readonly, i32* noalias nocapture) local_unnamed_addr #2 {
  %3 = bitcast i32* %0 to <8 x i32>*
  %4 = load <8 x i32>, <8 x i32>* %3, align 32, !alias.scope !79, !noalias !82
  %5 = and <8 x i32> %4, <i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %6 = icmp eq <8 x i32> %5, zeroinitializer
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = getelementptr inbounds i32, i32* %0, i64 8
  %9 = bitcast i32* %8 to <8 x i32>*
  %10 = load <8 x i32>, <8 x i32>* %9, align 32, !alias.scope !84, !noalias !87
  %11 = icmp eq <8 x i32> %10, zeroinitializer
  %12 = zext <8 x i1> %11 to <8 x i32>
  %13 = sub nsw <8 x i32> %7, %12
  %14 = getelementptr inbounds i32, i32* %0, i64 16
  %15 = bitcast i32* %14 to <8 x i32>*
  %16 = load <8 x i32>, <8 x i32>* %15, align 32, !alias.scope !84, !noalias !87
  %17 = icmp eq <8 x i32> %16, zeroinitializer
  %18 = zext <8 x i1> %17 to <8 x i32>
  %19 = sub nsw <8 x i32> %13, %18
  %20 = getelementptr inbounds i32, i32* %0, i64 24
  %21 = bitcast i32* %20 to <8 x i32>*
  %22 = load <8 x i32>, <8 x i32>* %21, align 32, !alias.scope !84, !noalias !87
  %23 = icmp eq <8 x i32> %22, zeroinitializer
  %24 = zext <8 x i1> %23 to <8 x i32>
  %25 = sub nsw <8 x i32> %19, %24
  %26 = getelementptr inbounds i32, i32* %0, i64 32
  %27 = bitcast i32* %26 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 32, !alias.scope !84, !noalias !87
  %29 = icmp eq <8 x i32> %28, zeroinitializer
  %30 = zext <8 x i1> %29 to <8 x i32>
  %31 = sub nsw <8 x i32> %25, %30
  %32 = getelementptr inbounds i32, i32* %0, i64 40
  %33 = bitcast i32* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 32, !alias.scope !84, !noalias !87
  %35 = icmp eq <8 x i32> %34, zeroinitializer
  %36 = zext <8 x i1> %35 to <8 x i32>
  %37 = sub nsw <8 x i32> %31, %36
  %38 = getelementptr inbounds i32, i32* %0, i64 48
  %39 = bitcast i32* %38 to <8 x i32>*
  %40 = load <8 x i32>, <8 x i32>* %39, align 32, !alias.scope !84, !noalias !87
  %41 = icmp eq <8 x i32> %40, zeroinitializer
  %42 = zext <8 x i1> %41 to <8 x i32>
  %43 = sub nsw <8 x i32> %37, %42
  %44 = getelementptr inbounds i32, i32* %0, i64 56
  %45 = bitcast i32* %44 to <8 x i32>*
  %46 = load <8 x i32>, <8 x i32>* %45, align 32, !alias.scope !84, !noalias !87
  %47 = icmp eq <8 x i32> %46, zeroinitializer
  %48 = zext <8 x i1> %47 to <8 x i32>
  %49 = sub <8 x i32> %43, %48
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = add <8 x i32> %49, %52
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %55 = add <8 x i32> %54, %53
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add <8 x i32> %56, %55
  %58 = bitcast <8 x i32> %57 to <4 x i64>
  %59 = shufflevector <4 x i64> %58, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %60 = bitcast <2 x i64> %59 to <4 x i32>
  %61 = extractelement <4 x i32> %60, i32 0
  %62 = add nsw i32 %61, 64
  store i32 %62, i32* %1, align 4
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX220TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE(i32* noalias nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i32** noalias nocapture readonly, %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"* noalias nocapture readonly, %"class.std::__1::vector"* noalias, %"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"class.jxl::Plane.1"* nocapture readonly dereferenceable(32), %"struct.jxl::BlockCtxMap"* nocapture readonly dereferenceable(136)) #2 {
  %11 = alloca [3 x i64], align 16
  %12 = alloca [3 x i64], align 16
  %13 = alloca [3 x i32*], align 16
  %14 = alloca [3 x i32*], align 16
  %15 = alloca [3 x i64], align 16
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %21 = bitcast %"struct.jxl::Token"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %6 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 3
  %27 = mul i64 %17, 192
  %28 = mul i64 %27, %19
  %29 = add i64 %26, %28
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::Token"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, %29
  br i1 %35, label %36, label %55

36:                                               ; preds = %10
  %37 = icmp ugt i64 %29, 2305843009213693951
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #13
  unreachable

39:                                               ; preds = %36
  %40 = shl i64 %29, 3
  %41 = tail call i8* @_Znwm(i64 %40) #14
  %42 = bitcast i8* %41 to %"struct.jxl::Token"*
  %43 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %26
  %44 = ptrtoint %"struct.jxl::Token"* %43 to i64
  %45 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %29
  %46 = ptrtoint %"struct.jxl::Token"* %45 to i64
  %47 = ptrtoint i8* %41 to i64
  %48 = icmp sgt i64 %25, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = inttoptr i64 %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %50, i64 %25, i1 false) #9
  br label %51

51:                                               ; preds = %49, %39
  store i64 %47, i64* %23, align 8
  store i64 %44, i64* %21, align 8
  store i64 %46, i64* %31, align 8
  %52 = icmp eq i64 %24, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %24 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %10, %51, %53
  %56 = bitcast [3 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false)
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 2
  %60 = icmp eq i64 %19, 0
  br i1 %60, label %115, label %61

61:                                               ; preds = %55
  %62 = bitcast [3 x i64]* %12 to i8*
  %63 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 0
  %64 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 1
  %65 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 2
  %66 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 3
  %67 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 1
  %69 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 2
  %70 = bitcast [3 x i32*]* %13 to i8*
  %71 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 1
  %72 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 2
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = bitcast [3 x i32*]* %13 to i8**
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = bitcast i32** %71 to i8**
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = bitcast i32** %72 to i8**
  %79 = bitcast [3 x i32*]* %14 to i8*
  %80 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 0
  %81 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 1
  %82 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 2
  %83 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %86 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 4
  %89 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 4
  %91 = icmp eq i64 %17, 0
  %92 = bitcast [3 x i64]* %15 to i8*
  %93 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 0
  %94 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 1
  %95 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 2
  %96 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 2
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 4
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 2, i32 0, i32 0
  %101 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 3
  %102 = load i8*, i8** %73, align 8
  %103 = load i8*, i8** %75, align 8
  %104 = load i8*, i8** %77, align 8
  %105 = ptrtoint i8* %102 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #9
  %108 = ptrtoint i8* %103 to i64
  %109 = and i64 %108, 63
  %110 = icmp eq i64 %109, 0
  tail call void @llvm.assume(i1 %110) #9
  %111 = ptrtoint i8* %104 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #9
  %114 = bitcast [3 x i32*]* %14 to i8*
  br label %116

115:                                              ; preds = %217, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #9
  ret void

116:                                              ; preds = %217, %61
  %117 = phi i64 [ 0, %61 ], [ %218, %217 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #9
  %118 = load i8, i8* %66, align 1
  %119 = zext i8 %118 to i64
  %120 = load i32, i32* %67, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = sub nsw i64 %119, %124
  %126 = lshr i64 %117, %125
  store i64 %126, i64* %63, align 16
  %127 = load i32, i32* %68, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = sub nsw i64 %119, %131
  %133 = lshr i64 %117, %132
  store i64 %133, i64* %64, align 8
  %134 = load i32, i32* %69, align 4
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = sub nsw i64 %119, %138
  %140 = lshr i64 %117, %139
  store i64 %140, i64* %65, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #9
  %141 = mul i64 %126, %58
  %142 = getelementptr inbounds i8, i8* %102, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9
  store i8* %142, i8** %74, align 16
  %146 = mul i64 %133, %58
  %147 = getelementptr inbounds i8, i8* %103, i64 %146
  %148 = ptrtoint i8* %147 to i64
  %149 = and i64 %148, 63
  %150 = icmp eq i64 %149, 0
  tail call void @llvm.assume(i1 %150) #9
  store i8* %147, i8** %76, align 8
  %151 = mul i64 %140, %58
  %152 = getelementptr inbounds i8, i8* %104, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  tail call void @llvm.assume(i1 %155) #9
  store i8* %152, i8** %78, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #9
  %156 = icmp eq i64 %126, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %114, i8 -86, i64 24, i1 false)
  br i1 %156, label %165, label %157

157:                                              ; preds = %116
  %158 = add i64 %126, -1
  %159 = mul i64 %158, %58
  %160 = getelementptr inbounds i8, i8* %102, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  tail call void @llvm.assume(i1 %163) #9
  %164 = bitcast i8* %160 to i32*
  br label %165

165:                                              ; preds = %116, %157
  %166 = phi i32* [ %164, %157 ], [ null, %116 ]
  store i32* %166, i32** %80, align 16
  %167 = icmp eq i64 %133, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %165
  %169 = add i64 %133, -1
  %170 = mul i64 %169, %58
  %171 = getelementptr inbounds i8, i8* %103, i64 %170
  %172 = ptrtoint i8* %171 to i64
  %173 = and i64 %172, 63
  %174 = icmp eq i64 %173, 0
  tail call void @llvm.assume(i1 %174) #9
  %175 = bitcast i8* %171 to i32*
  br label %176

176:                                              ; preds = %165, %168
  %177 = phi i32* [ %175, %168 ], [ null, %165 ]
  store i32* %177, i32** %81, align 8
  %178 = icmp eq i64 %140, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176
  %180 = add i64 %140, -1
  %181 = mul i64 %180, %58
  %182 = getelementptr inbounds i8, i8* %104, i64 %181
  %183 = ptrtoint i8* %182 to i64
  %184 = and i64 %183, 63
  %185 = icmp eq i64 %184, 0
  tail call void @llvm.assume(i1 %185) #9
  %186 = bitcast i8* %182 to i32*
  br label %187

187:                                              ; preds = %176, %179
  %188 = phi i32* [ %186, %179 ], [ null, %176 ]
  store i32* %188, i32** %82, align 16
  %189 = load i64, i64* %83, align 8
  %190 = add i64 %189, %117
  %191 = load i8*, i8** %84, align 8
  %192 = load i64, i64* %85, align 8
  %193 = mul i64 %192, %190
  %194 = getelementptr inbounds i8, i8* %191, i64 %193
  %195 = ptrtoint i8* %194 to i64
  %196 = and i64 %195, 63
  %197 = icmp eq i64 %196, 0
  tail call void @llvm.assume(i1 %197) #9
  %198 = load i64, i64* %86, align 8
  %199 = getelementptr inbounds i8, i8* %194, i64 %198
  %200 = load i8*, i8** %87, align 8
  %201 = load i64, i64* %88, align 8
  %202 = mul i64 %201, %190
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  tail call void @llvm.assume(i1 %206) #9
  %207 = bitcast i8* %203 to i32*
  %208 = getelementptr inbounds i32, i32* %207, i64 %198
  %209 = load i8*, i8** %89, align 8
  %210 = load i64, i64* %90, align 8
  %211 = mul i64 %210, %190
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = ptrtoint i8* %212 to i64
  %214 = and i64 %213, 63
  %215 = icmp eq i64 %214, 0
  tail call void @llvm.assume(i1 %215) #9
  %216 = getelementptr inbounds i8, i8* %212, i64 %198
  br i1 %91, label %217, label %220

217:                                              ; preds = %872, %187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #9
  %218 = add nuw i64 %117, 1
  %219 = icmp eq i64 %218, %19
  br i1 %219, label %115, label %116

220:                                              ; preds = %187, %872
  %221 = phi i64 [ %873, %872 ], [ 0, %187 ]
  %222 = getelementptr inbounds i8, i8* %216, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = and i8 %223, 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %872, label %226

226:                                              ; preds = %220
  %227 = lshr i8 %223, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #9
  %228 = load i8, i8* %96, align 4
  %229 = zext i8 %228 to i64
  %230 = load i32, i32* %67, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = sub nsw i64 %229, %234
  %236 = lshr i64 %221, %235
  store i64 %236, i64* %93, align 16
  %237 = load i32, i32* %68, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = sub nsw i64 %229, %241
  %243 = lshr i64 %221, %242
  store i64 %243, i64* %94, align 8
  %244 = load i32, i32* %69, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = sub nsw i64 %229, %248
  %250 = lshr i64 %221, %249
  store i64 %250, i64* %95, align 16
  %251 = zext i8 %227 to i64
  %252 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %251
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = mul nuw nsw i64 %257, %254
  %259 = tail call i64 @llvm.cttz.i64(i64 %258, i1 true) #9, !range !24
  %260 = shl nuw nsw i64 %258, 6
  %261 = icmp ult i8 %256, %253
  %262 = select i1 %261, i8 %256, i8 %253
  %263 = zext i8 %262 to i64
  %264 = icmp ugt i8 %256, %253
  %265 = select i1 %264, i8 %256, i8 %253
  %266 = zext i8 %265 to i64
  %267 = icmp eq i64 %258, 1
  %268 = sub nsw i64 0, %266
  %269 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %268
  %270 = icmp eq i8 %262, 0
  %271 = shl nuw nsw i64 %266, 3
  %272 = icmp eq i8 %265, 0
  %273 = shl nuw nsw i64 %263, 3
  %274 = icmp ugt i64 %273, %263
  %275 = mul nuw nsw i64 %263, %266
  %276 = trunc i64 %275 to i32
  %277 = shl nuw nsw i32 %276, 6
  %278 = add nsw i64 %258, -1
  %279 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %251
  %280 = getelementptr inbounds i8, i8* %199, i64 %221
  %281 = shl nuw nsw i64 %258, 2
  %282 = icmp ult i64 %258, %260
  %283 = zext i8 %253 to i64
  %284 = icmp ugt i64 %283, 1
  %285 = select i1 %284, i64 %283, i64 1
  %286 = and i64 %285, 224
  %287 = add nsw i64 %286, -32
  %288 = lshr exact i64 %287, 5
  %289 = add nuw nsw i64 %288, 1
  %290 = icmp ult i64 %285, 32
  %291 = and i64 %285, 224
  %292 = and i64 %289, 3
  %293 = icmp ult i64 %287, 96
  %294 = sub nsw i64 %289, %292
  %295 = icmp eq i64 %292, 0
  %296 = icmp eq i64 %285, %291
  br label %298

297:                                              ; preds = %867
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #9
  br label %872

298:                                              ; preds = %870, %226
  %299 = phi i8 [ %228, %226 ], [ %871, %870 ]
  %300 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.1, i64 0, i64 0), %226 ], [ %868, %870 ]
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = zext i8 %299 to i64
  %306 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 %302
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i64
  %312 = sub nsw i64 %305, %311
  %313 = shl i64 %304, %312
  %314 = icmp eq i64 %313, %221
  br i1 %314, label %315, label %867

315:                                              ; preds = %298
  %316 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 %302
  %317 = load i64, i64* %316, align 8
  %318 = load i8, i8* %66, align 1
  %319 = zext i8 %318 to i64
  %320 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %308
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i64
  %323 = sub nsw i64 %319, %322
  %324 = shl i64 %317, %323
  %325 = icmp eq i64 %324, %117
  br i1 %325, label %326, label %867

326:                                              ; preds = %315
  %327 = getelementptr inbounds i32*, i32** %2, i64 %302
  %328 = load i32*, i32** %327, align 8
  %329 = getelementptr inbounds [3 x i64], [3 x i64]* %11, i64 0, i64 %302
  %330 = load i64, i64* %329, align 8
  %331 = getelementptr inbounds i32, i32* %328, i64 %330
  %332 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 %302
  %333 = load i32*, i32** %332, align 8
  %334 = getelementptr inbounds i32, i32* %333, i64 %304
  br i1 %267, label %335, label %396

335:                                              ; preds = %326
  %336 = bitcast i32* %331 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32, !alias.scope !89, !noalias !94
  %338 = and <8 x i32> %337, <i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %339 = icmp eq <8 x i32> %338, zeroinitializer
  %340 = sext <8 x i1> %339 to <8 x i32>
  %341 = getelementptr inbounds i32, i32* %331, i64 8
  %342 = bitcast i32* %341 to <8 x i32>*
  %343 = load <8 x i32>, <8 x i32>* %342, align 32, !alias.scope !97, !noalias !100
  %344 = icmp eq <8 x i32> %343, zeroinitializer
  %345 = zext <8 x i1> %344 to <8 x i32>
  %346 = sub nsw <8 x i32> %340, %345
  %347 = getelementptr inbounds i32, i32* %331, i64 16
  %348 = bitcast i32* %347 to <8 x i32>*
  %349 = load <8 x i32>, <8 x i32>* %348, align 32, !alias.scope !97, !noalias !100
  %350 = icmp eq <8 x i32> %349, zeroinitializer
  %351 = zext <8 x i1> %350 to <8 x i32>
  %352 = sub nsw <8 x i32> %346, %351
  %353 = getelementptr inbounds i32, i32* %331, i64 24
  %354 = bitcast i32* %353 to <8 x i32>*
  %355 = load <8 x i32>, <8 x i32>* %354, align 32, !alias.scope !97, !noalias !100
  %356 = icmp eq <8 x i32> %355, zeroinitializer
  %357 = zext <8 x i1> %356 to <8 x i32>
  %358 = sub nsw <8 x i32> %352, %357
  %359 = getelementptr inbounds i32, i32* %331, i64 32
  %360 = bitcast i32* %359 to <8 x i32>*
  %361 = load <8 x i32>, <8 x i32>* %360, align 32, !alias.scope !97, !noalias !100
  %362 = icmp eq <8 x i32> %361, zeroinitializer
  %363 = zext <8 x i1> %362 to <8 x i32>
  %364 = sub nsw <8 x i32> %358, %363
  %365 = getelementptr inbounds i32, i32* %331, i64 40
  %366 = bitcast i32* %365 to <8 x i32>*
  %367 = load <8 x i32>, <8 x i32>* %366, align 32, !alias.scope !97, !noalias !100
  %368 = icmp eq <8 x i32> %367, zeroinitializer
  %369 = zext <8 x i1> %368 to <8 x i32>
  %370 = sub nsw <8 x i32> %364, %369
  %371 = getelementptr inbounds i32, i32* %331, i64 48
  %372 = bitcast i32* %371 to <8 x i32>*
  %373 = load <8 x i32>, <8 x i32>* %372, align 32, !alias.scope !97, !noalias !100
  %374 = icmp eq <8 x i32> %373, zeroinitializer
  %375 = zext <8 x i1> %374 to <8 x i32>
  %376 = sub nsw <8 x i32> %370, %375
  %377 = getelementptr inbounds i32, i32* %331, i64 56
  %378 = bitcast i32* %377 to <8 x i32>*
  %379 = load <8 x i32>, <8 x i32>* %378, align 32, !alias.scope !97, !noalias !100
  %380 = icmp eq <8 x i32> %379, zeroinitializer
  %381 = zext <8 x i1> %380 to <8 x i32>
  %382 = sub <8 x i32> %376, %381
  %383 = bitcast <8 x i32> %382 to <4 x i64>
  %384 = shufflevector <4 x i64> %383, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %385 = bitcast <4 x i64> %384 to <8 x i32>
  %386 = add <8 x i32> %382, %385
  %387 = shufflevector <8 x i32> %386, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %388 = add <8 x i32> %387, %386
  %389 = shufflevector <8 x i32> %388, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %390 = add <8 x i32> %389, %388
  %391 = bitcast <8 x i32> %390 to <4 x i64>
  %392 = shufflevector <4 x i64> %391, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %393 = bitcast <2 x i64> %392 to <4 x i32>
  %394 = extractelement <4 x i32> %393, i32 0
  %395 = add nsw i32 %394, 64
  store i32 %395, i32* %334, align 4, !alias.scope !102, !noalias !103
  br label %561

396:                                              ; preds = %326
  br i1 %270, label %403, label %397

397:                                              ; preds = %396, %408
  %398 = phi i64 [ %411, %408 ], [ 0, %396 ]
  %399 = phi <4 x i64> [ %410, %408 ], [ zeroinitializer, %396 ]
  %400 = phi <8 x i32> [ %409, %408 ], [ zeroinitializer, %396 ]
  br i1 %272, label %408, label %401

401:                                              ; preds = %397
  %402 = mul nuw nsw i64 %398, %271
  br label %413

403:                                              ; preds = %408, %396
  %404 = phi <8 x i32> [ zeroinitializer, %396 ], [ %409, %408 ]
  %405 = phi <4 x i64> [ zeroinitializer, %396 ], [ %410, %408 ]
  br i1 %274, label %431, label %437

406:                                              ; preds = %413
  %407 = bitcast <8 x i32> %428 to <4 x i64>
  br label %408

408:                                              ; preds = %406, %397
  %409 = phi <8 x i32> [ %428, %406 ], [ %400, %397 ]
  %410 = phi <4 x i64> [ %407, %406 ], [ %399, %397 ]
  %411 = add nuw nsw i64 %398, 1
  %412 = icmp eq i64 %411, %263
  br i1 %412, label %403, label %397

413:                                              ; preds = %413, %401
  %414 = phi i64 [ 0, %401 ], [ %429, %413 ]
  %415 = phi <8 x i32> [ %400, %401 ], [ %428, %413 ]
  %416 = getelementptr inbounds i32, i32* %269, i64 %414
  %417 = bitcast i32* %416 to <4 x i64>*
  %418 = load <4 x i64>, <4 x i64>* %417, align 4, !alias.scope !104, !noalias !107
  %419 = add nuw nsw i64 %414, %402
  %420 = getelementptr inbounds i32, i32* %331, i64 %419
  %421 = bitcast i32* %420 to <4 x i64>*
  %422 = load <4 x i64>, <4 x i64>* %421, align 32, !alias.scope !112, !noalias !115
  %423 = xor <4 x i64> %418, <i64 -1, i64 -1, i64 -1, i64 -1>
  %424 = and <4 x i64> %422, %423
  %425 = bitcast <4 x i64> %424 to <8 x i32>
  %426 = icmp eq <8 x i32> %425, zeroinitializer
  %427 = zext <8 x i1> %426 to <8 x i32>
  %428 = sub <8 x i32> %415, %427
  %429 = add nuw nsw i64 %414, 8
  %430 = icmp ult i64 %429, %271
  br i1 %430, label %413, label %406

431:                                              ; preds = %403, %466
  %432 = phi i64 [ %469, %466 ], [ %263, %403 ]
  %433 = phi <4 x i64> [ %468, %466 ], [ %405, %403 ]
  %434 = phi <8 x i32> [ %467, %466 ], [ %404, %403 ]
  br i1 %272, label %466, label %435

435:                                              ; preds = %431
  %436 = mul i64 %432, %271
  br label %471

437:                                              ; preds = %466, %403
  %438 = phi <8 x i32> [ %404, %403 ], [ %467, %466 ]
  %439 = phi <4 x i64> [ %405, %403 ], [ %468, %466 ]
  %440 = shufflevector <4 x i64> %439, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %441 = bitcast <4 x i64> %440 to <8 x i32>
  %442 = add <8 x i32> %438, %441
  %443 = shufflevector <8 x i32> %442, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %444 = add <8 x i32> %443, %442
  %445 = shufflevector <8 x i32> %444, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %446 = add <8 x i32> %445, %444
  %447 = bitcast <8 x i32> %446 to <4 x i64>
  %448 = shufflevector <4 x i64> %447, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %449 = bitcast <2 x i64> %448 to <4 x i32>
  %450 = extractelement <4 x i32> %449, i32 0
  %451 = add nsw i32 %450, %277
  %452 = sext i32 %451 to i64
  %453 = add nsw i64 %278, %452
  %454 = lshr i64 %453, %259
  %455 = trunc i64 %454 to i32
  %456 = insertelement <8 x i32> undef, i32 %455, i32 0
  %457 = shufflevector <8 x i32> %456, <8 x i32> undef, <8 x i32> zeroinitializer
  %458 = insertelement <8 x i32> undef, i32 %455, i32 0
  %459 = shufflevector <8 x i32> %458, <8 x i32> undef, <8 x i32> zeroinitializer
  %460 = insertelement <8 x i32> undef, i32 %455, i32 0
  %461 = shufflevector <8 x i32> %460, <8 x i32> undef, <8 x i32> zeroinitializer
  %462 = insertelement <8 x i32> undef, i32 %455, i32 0
  %463 = shufflevector <8 x i32> %462, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %483

464:                                              ; preds = %471
  %465 = bitcast <8 x i32> %480 to <4 x i64>
  br label %466

466:                                              ; preds = %464, %431
  %467 = phi <8 x i32> [ %480, %464 ], [ %434, %431 ]
  %468 = phi <4 x i64> [ %465, %464 ], [ %433, %431 ]
  %469 = add nuw i64 %432, 1
  %470 = icmp eq i64 %469, %273
  br i1 %470, label %437, label %431

471:                                              ; preds = %471, %435
  %472 = phi i64 [ 0, %435 ], [ %481, %471 ]
  %473 = phi <8 x i32> [ %434, %435 ], [ %480, %471 ]
  %474 = add i64 %472, %436
  %475 = getelementptr inbounds i32, i32* %331, i64 %474
  %476 = bitcast i32* %475 to <8 x i32>*
  %477 = load <8 x i32>, <8 x i32>* %476, align 32, !alias.scope !117, !noalias !120
  %478 = icmp eq <8 x i32> %477, zeroinitializer
  %479 = zext <8 x i1> %478 to <8 x i32>
  %480 = sub <8 x i32> %473, %479
  %481 = add nuw nsw i64 %472, 8
  %482 = icmp ult i64 %481, %271
  br i1 %482, label %471, label %464

483:                                              ; preds = %552, %437
  %484 = phi i64 [ 0, %437 ], [ %553, %552 ]
  %485 = mul i64 %484, %59
  br i1 %290, label %486, label %488

486:                                              ; preds = %551, %483
  %487 = phi i64 [ 0, %483 ], [ %291, %551 ]
  br label %555

488:                                              ; preds = %483
  br i1 %293, label %534, label %489

489:                                              ; preds = %488, %489
  %490 = phi i64 [ %531, %489 ], [ 0, %488 ]
  %491 = phi i64 [ %532, %489 ], [ %294, %488 ]
  %492 = add i64 %490, %485
  %493 = getelementptr inbounds i32, i32* %334, i64 %492
  %494 = bitcast i32* %493 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %494, align 4, !alias.scope !122, !noalias !123
  %495 = getelementptr inbounds i32, i32* %493, i64 8
  %496 = bitcast i32* %495 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %496, align 4, !alias.scope !122, !noalias !123
  %497 = getelementptr inbounds i32, i32* %493, i64 16
  %498 = bitcast i32* %497 to <8 x i32>*
  store <8 x i32> %461, <8 x i32>* %498, align 4, !alias.scope !122, !noalias !123
  %499 = getelementptr inbounds i32, i32* %493, i64 24
  %500 = bitcast i32* %499 to <8 x i32>*
  store <8 x i32> %463, <8 x i32>* %500, align 4, !alias.scope !122, !noalias !123
  %501 = or i64 %490, 32
  %502 = add i64 %501, %485
  %503 = getelementptr inbounds i32, i32* %334, i64 %502
  %504 = bitcast i32* %503 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %504, align 4, !alias.scope !122, !noalias !123
  %505 = getelementptr inbounds i32, i32* %503, i64 8
  %506 = bitcast i32* %505 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %506, align 4, !alias.scope !122, !noalias !123
  %507 = getelementptr inbounds i32, i32* %503, i64 16
  %508 = bitcast i32* %507 to <8 x i32>*
  store <8 x i32> %461, <8 x i32>* %508, align 4, !alias.scope !122, !noalias !123
  %509 = getelementptr inbounds i32, i32* %503, i64 24
  %510 = bitcast i32* %509 to <8 x i32>*
  store <8 x i32> %463, <8 x i32>* %510, align 4, !alias.scope !122, !noalias !123
  %511 = or i64 %490, 64
  %512 = add i64 %511, %485
  %513 = getelementptr inbounds i32, i32* %334, i64 %512
  %514 = bitcast i32* %513 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %514, align 4, !alias.scope !122, !noalias !123
  %515 = getelementptr inbounds i32, i32* %513, i64 8
  %516 = bitcast i32* %515 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %516, align 4, !alias.scope !122, !noalias !123
  %517 = getelementptr inbounds i32, i32* %513, i64 16
  %518 = bitcast i32* %517 to <8 x i32>*
  store <8 x i32> %461, <8 x i32>* %518, align 4, !alias.scope !122, !noalias !123
  %519 = getelementptr inbounds i32, i32* %513, i64 24
  %520 = bitcast i32* %519 to <8 x i32>*
  store <8 x i32> %463, <8 x i32>* %520, align 4, !alias.scope !122, !noalias !123
  %521 = or i64 %490, 96
  %522 = add i64 %521, %485
  %523 = getelementptr inbounds i32, i32* %334, i64 %522
  %524 = bitcast i32* %523 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %524, align 4, !alias.scope !122, !noalias !123
  %525 = getelementptr inbounds i32, i32* %523, i64 8
  %526 = bitcast i32* %525 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %526, align 4, !alias.scope !122, !noalias !123
  %527 = getelementptr inbounds i32, i32* %523, i64 16
  %528 = bitcast i32* %527 to <8 x i32>*
  store <8 x i32> %461, <8 x i32>* %528, align 4, !alias.scope !122, !noalias !123
  %529 = getelementptr inbounds i32, i32* %523, i64 24
  %530 = bitcast i32* %529 to <8 x i32>*
  store <8 x i32> %463, <8 x i32>* %530, align 4, !alias.scope !122, !noalias !123
  %531 = add i64 %490, 128
  %532 = add i64 %491, -4
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %489, !llvm.loop !124

534:                                              ; preds = %489, %488
  %535 = phi i64 [ 0, %488 ], [ %531, %489 ]
  br i1 %295, label %551, label %536

536:                                              ; preds = %534, %536
  %537 = phi i64 [ %548, %536 ], [ %535, %534 ]
  %538 = phi i64 [ %549, %536 ], [ %292, %534 ]
  %539 = add i64 %537, %485
  %540 = getelementptr inbounds i32, i32* %334, i64 %539
  %541 = bitcast i32* %540 to <8 x i32>*
  store <8 x i32> %457, <8 x i32>* %541, align 4, !alias.scope !122, !noalias !123
  %542 = getelementptr inbounds i32, i32* %540, i64 8
  %543 = bitcast i32* %542 to <8 x i32>*
  store <8 x i32> %459, <8 x i32>* %543, align 4, !alias.scope !122, !noalias !123
  %544 = getelementptr inbounds i32, i32* %540, i64 16
  %545 = bitcast i32* %544 to <8 x i32>*
  store <8 x i32> %461, <8 x i32>* %545, align 4, !alias.scope !122, !noalias !123
  %546 = getelementptr inbounds i32, i32* %540, i64 24
  %547 = bitcast i32* %546 to <8 x i32>*
  store <8 x i32> %463, <8 x i32>* %547, align 4, !alias.scope !122, !noalias !123
  %548 = add i64 %537, 32
  %549 = add i64 %538, -1
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %536, !llvm.loop !125

551:                                              ; preds = %536, %534
  br i1 %296, label %552, label %486

552:                                              ; preds = %555, %551
  %553 = add nuw nsw i64 %484, 1
  %554 = icmp ult i64 %553, %257
  br i1 %554, label %483, label %561

555:                                              ; preds = %486, %555
  %556 = phi i64 [ %559, %555 ], [ %487, %486 ]
  %557 = add i64 %556, %485
  %558 = getelementptr inbounds i32, i32* %334, i64 %557
  store i32 %455, i32* %558, align 4, !alias.scope !122, !noalias !123
  %559 = add nuw nsw i64 %556, 1
  %560 = icmp ult i64 %559, %254
  br i1 %560, label %555, label %552, !llvm.loop !126

561:                                              ; preds = %552, %335
  %562 = phi i32 [ %395, %335 ], [ %451, %552 ]
  %563 = load i8, i8* %279, align 1
  %564 = zext i8 %563 to i64
  %565 = mul nuw nsw i64 %564, 3
  %566 = add nsw i64 %565, %302
  %567 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %566
  %568 = load i64, i64* %567, align 8
  %569 = shl i64 %568, 6
  %570 = getelementptr inbounds i32, i32* %0, i64 %569
  %571 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 %302
  %572 = load i32*, i32** %571, align 8
  %573 = icmp eq i64 %304, 0
  %574 = icmp eq i32* %572, null
  br i1 %573, label %575, label %578

575:                                              ; preds = %561
  br i1 %574, label %592, label %576

576:                                              ; preds = %575
  %577 = load i32, i32* %572, align 4, !alias.scope !127, !noalias !130
  br label %592

578:                                              ; preds = %561
  br i1 %574, label %579, label %583

579:                                              ; preds = %578
  %580 = add i64 %304, -1
  %581 = getelementptr inbounds i32, i32* %333, i64 %580
  %582 = load i32, i32* %581, align 4, !alias.scope !130, !noalias !127
  br label %592

583:                                              ; preds = %578
  %584 = getelementptr inbounds i32, i32* %572, i64 %304
  %585 = load i32, i32* %584, align 4, !alias.scope !127, !noalias !130
  %586 = add i64 %304, -1
  %587 = getelementptr inbounds i32, i32* %333, i64 %586
  %588 = load i32, i32* %587, align 4, !alias.scope !130, !noalias !127
  %589 = add i32 %585, 1
  %590 = add i32 %589, %588
  %591 = sdiv i32 %590, 2
  br label %592

592:                                              ; preds = %575, %576, %579, %583
  %593 = phi i32 [ %582, %579 ], [ %591, %583 ], [ %577, %576 ], [ 32, %575 ]
  %594 = load i8, i8* %280, align 1
  %595 = getelementptr inbounds i32, i32* %208, i64 %304
  %596 = load i32, i32* %595, align 4
  %597 = load i32*, i32** %97, align 8
  %598 = ptrtoint i32* %597 to i64
  %599 = load i32*, i32** %98, align 8
  %600 = icmp eq i32* %597, %599
  %601 = ptrtoint i32* %599 to i64
  br i1 %600, label %674, label %602

602:                                              ; preds = %592
  %603 = getelementptr i32, i32* %599, i64 -1
  %604 = ptrtoint i32* %603 to i64
  %605 = sub i64 %604, %598
  %606 = lshr i64 %605, 2
  %607 = add nuw nsw i64 %606, 1
  %608 = icmp ult i64 %607, 16
  br i1 %608, label %662, label %609

609:                                              ; preds = %602
  %610 = and i64 %607, 9223372036854775792
  %611 = getelementptr i32, i32* %597, i64 %610
  %612 = insertelement <4 x i32> undef, i32 %596, i32 0
  %613 = shufflevector <4 x i32> %612, <4 x i32> undef, <4 x i32> zeroinitializer
  %614 = insertelement <4 x i32> undef, i32 %596, i32 0
  %615 = shufflevector <4 x i32> %614, <4 x i32> undef, <4 x i32> zeroinitializer
  %616 = insertelement <4 x i32> undef, i32 %596, i32 0
  %617 = shufflevector <4 x i32> %616, <4 x i32> undef, <4 x i32> zeroinitializer
  %618 = insertelement <4 x i32> undef, i32 %596, i32 0
  %619 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %620

620:                                              ; preds = %620, %609
  %621 = phi i64 [ 0, %609 ], [ %650, %620 ]
  %622 = phi <4 x i64> [ zeroinitializer, %609 ], [ %646, %620 ]
  %623 = phi <4 x i64> [ zeroinitializer, %609 ], [ %647, %620 ]
  %624 = phi <4 x i64> [ zeroinitializer, %609 ], [ %648, %620 ]
  %625 = phi <4 x i64> [ zeroinitializer, %609 ], [ %649, %620 ]
  %626 = getelementptr i32, i32* %597, i64 %621
  %627 = bitcast i32* %626 to <4 x i32>*
  %628 = load <4 x i32>, <4 x i32>* %627, align 4
  %629 = getelementptr i32, i32* %626, i64 4
  %630 = bitcast i32* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 4
  %632 = getelementptr i32, i32* %626, i64 8
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4
  %635 = getelementptr i32, i32* %626, i64 12
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4
  %638 = icmp ult <4 x i32> %628, %613
  %639 = icmp ult <4 x i32> %631, %615
  %640 = icmp ult <4 x i32> %634, %617
  %641 = icmp ult <4 x i32> %637, %619
  %642 = zext <4 x i1> %638 to <4 x i64>
  %643 = zext <4 x i1> %639 to <4 x i64>
  %644 = zext <4 x i1> %640 to <4 x i64>
  %645 = zext <4 x i1> %641 to <4 x i64>
  %646 = add <4 x i64> %622, %642
  %647 = add <4 x i64> %623, %643
  %648 = add <4 x i64> %624, %644
  %649 = add <4 x i64> %625, %645
  %650 = add i64 %621, 16
  %651 = icmp eq i64 %650, %610
  br i1 %651, label %652, label %620, !llvm.loop !132

652:                                              ; preds = %620
  %653 = add <4 x i64> %647, %646
  %654 = add <4 x i64> %648, %653
  %655 = add <4 x i64> %649, %654
  %656 = shufflevector <4 x i64> %655, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %657 = add <4 x i64> %655, %656
  %658 = shufflevector <4 x i64> %657, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %659 = add <4 x i64> %657, %658
  %660 = extractelement <4 x i64> %659, i32 0
  %661 = icmp eq i64 %607, %610
  br i1 %661, label %674, label %662

662:                                              ; preds = %652, %602
  %663 = phi i64 [ 0, %602 ], [ %660, %652 ]
  %664 = phi i32* [ %597, %602 ], [ %611, %652 ]
  br label %665

665:                                              ; preds = %662, %665
  %666 = phi i64 [ %671, %665 ], [ %663, %662 ]
  %667 = phi i32* [ %672, %665 ], [ %664, %662 ]
  %668 = load i32, i32* %667, align 4
  %669 = icmp ult i32 %668, %596
  %670 = zext i1 %669 to i64
  %671 = add i64 %666, %670
  %672 = getelementptr inbounds i32, i32* %667, i64 1
  %673 = icmp eq i32* %672, %599
  br i1 %673, label %674, label %665, !llvm.loop !133

674:                                              ; preds = %665, %652, %592
  %675 = phi i64 [ 0, %592 ], [ %660, %652 ], [ %671, %665 ]
  %676 = icmp ult i32 %301, 2
  %677 = xor i64 %302, 1
  %678 = mul nsw i64 %677, 13
  %679 = select i1 %676, i64 %678, i64 26
  %680 = add nsw i64 %679, %564
  %681 = sub i64 %601, %598
  %682 = ashr exact i64 %681, 2
  %683 = add nsw i64 %682, 1
  %684 = mul i64 %683, %680
  %685 = add i64 %675, %684
  %686 = load i64, i64* %99, align 8
  %687 = mul i64 %685, %686
  %688 = zext i8 %594 to i64
  %689 = add i64 %687, %688
  %690 = load i8*, i8** %100, align 8
  %691 = getelementptr inbounds i8, i8* %690, i64 %689
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = icmp ult i32 %593, 64
  %695 = select i1 %694, i32 %593, i32 64
  %696 = icmp ult i32 %695, 8
  %697 = lshr i32 %695, 1
  %698 = add nuw nsw i32 %697, 4
  %699 = select i1 %696, i32 %695, i32 %698
  %700 = load i64, i64* %101, align 8
  %701 = trunc i64 %700 to i32
  %702 = mul i32 %699, %701
  %703 = add i32 %702, %693
  %704 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %705 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %706 = icmp ult %"struct.jxl::Token"* %704, %705
  %707 = ptrtoint %"struct.jxl::Token"* %705 to i64
  br i1 %706, label %708, label %714

708:                                              ; preds = %674
  %709 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 0, i32 0
  %710 = shl i32 %703, 1
  store i32 %710, i32* %709, align 4
  %711 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 0, i32 1
  store i32 %562, i32* %711, align 4
  %712 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 1
  %713 = ptrtoint %"struct.jxl::Token"* %712 to i64
  store i64 %713, i64* %21, align 8
  br label %760

714:                                              ; preds = %674
  %715 = ptrtoint %"struct.jxl::Token"* %704 to i64
  %716 = load i64, i64* %23, align 8
  %717 = sub i64 %715, %716
  %718 = ashr exact i64 %717, 3
  %719 = add nsw i64 %718, 1
  %720 = icmp ugt i64 %719, 2305843009213693951
  br i1 %720, label %721, label %723

721:                                              ; preds = %714
  %722 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %722) #13
  unreachable

723:                                              ; preds = %714
  %724 = sub i64 %707, %716
  %725 = ashr exact i64 %724, 3
  %726 = icmp ult i64 %725, 1152921504606846975
  br i1 %726, label %727, label %735

727:                                              ; preds = %723
  %728 = ashr exact i64 %724, 2
  %729 = icmp ult i64 %728, %719
  %730 = select i1 %729, i64 %719, i64 %728
  %731 = icmp eq i64 %730, 0
  br i1 %731, label %740, label %732

732:                                              ; preds = %727
  %733 = icmp ugt i64 %730, 2305843009213693951
  br i1 %733, label %734, label %735

734:                                              ; preds = %732
  tail call void @abort() #13
  unreachable

735:                                              ; preds = %732, %723
  %736 = phi i64 [ %730, %732 ], [ 2305843009213693951, %723 ]
  %737 = shl i64 %736, 3
  %738 = tail call i8* @_Znwm(i64 %737) #14
  %739 = bitcast i8* %738 to %"struct.jxl::Token"*
  br label %740

740:                                              ; preds = %735, %727
  %741 = phi i64 [ %736, %735 ], [ 0, %727 ]
  %742 = phi i8* [ %738, %735 ], [ null, %727 ]
  %743 = phi %"struct.jxl::Token"* [ %739, %735 ], [ null, %727 ]
  %744 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %718
  %745 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %741
  %746 = ptrtoint %"struct.jxl::Token"* %745 to i64
  %747 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %744, i64 0, i32 0
  %748 = shl i32 %703, 1
  store i32 %748, i32* %747, align 4
  %749 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %718, i32 1
  store i32 %562, i32* %749, align 4
  %750 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %744, i64 1
  %751 = ptrtoint %"struct.jxl::Token"* %750 to i64
  %752 = ptrtoint %"struct.jxl::Token"* %743 to i64
  %753 = icmp sgt i64 %717, 0
  br i1 %753, label %754, label %756

754:                                              ; preds = %740
  %755 = inttoptr i64 %716 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %742, i8* align 4 %755, i64 %717, i1 false) #9
  br label %756

756:                                              ; preds = %754, %740
  store i64 %752, i64* %23, align 8
  store i64 %751, i64* %21, align 8
  store i64 %746, i64* %31, align 8
  %757 = icmp eq i64 %716, 0
  br i1 %757, label %760, label %758

758:                                              ; preds = %756
  %759 = inttoptr i64 %716 to i8*
  tail call void @_ZdlPv(i8* %759) #14
  br label %760

760:                                              ; preds = %708, %756, %758
  %761 = load i64, i64* %101, align 8
  %762 = mul nuw nsw i32 %693, 458
  %763 = trunc i64 %761 to i32
  %764 = mul i32 %763, 37
  %765 = add i32 %764, %762
  %766 = zext i32 %765 to i64
  %767 = icmp ne i32 %562, 0
  %768 = and i1 %767, %282
  br i1 %768, label %769, label %772

769:                                              ; preds = %760
  %770 = sext i32 %562 to i64
  %771 = icmp sge i64 %281, %770
  br label %774

772:                                              ; preds = %859, %760
  %773 = add i64 %330, %260
  store i64 %773, i64* %329, align 8
  br label %867

774:                                              ; preds = %769, %859
  %775 = phi i64 [ %863, %859 ], [ %258, %769 ]
  %776 = phi i1 [ %860, %859 ], [ %771, %769 ]
  %777 = phi i32 [ %862, %859 ], [ %562, %769 ]
  %778 = zext i1 %776 to i64
  %779 = getelementptr inbounds i32, i32* %570, i64 %775
  %780 = load i32, i32* %779, align 4
  %781 = zext i32 %780 to i64
  %782 = getelementptr inbounds i32, i32* %331, i64 %781
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %777 to i64
  %785 = add nsw i64 %278, %784
  %786 = lshr i64 %785, %259
  %787 = lshr i64 %775, %259
  %788 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL23kCoeffNumNonzeroContextE, i64 0, i64 %786
  %789 = load i16, i16* %788, align 2
  %790 = zext i16 %789 to i64
  %791 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL17kCoeffFreqContextE, i64 0, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = add nuw nsw i64 %793, %790
  %795 = shl nuw nsw i64 %794, 1
  %796 = or i64 %795, %778
  %797 = add nuw nsw i64 %796, %766
  %798 = shl i32 %783, 1
  %799 = ashr i32 %783, 31
  %800 = xor i32 %798, %799
  %801 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %802 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %803 = icmp ult %"struct.jxl::Token"* %801, %802
  %804 = ptrtoint %"struct.jxl::Token"* %802 to i64
  br i1 %803, label %805, label %812

805:                                              ; preds = %774
  %806 = trunc i64 %797 to i32
  %807 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 0, i32 0
  %808 = shl i32 %806, 1
  store i32 %808, i32* %807, align 4
  %809 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 0, i32 1
  store i32 %800, i32* %809, align 4
  %810 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 1
  %811 = ptrtoint %"struct.jxl::Token"* %810 to i64
  store i64 %811, i64* %21, align 8
  br label %859

812:                                              ; preds = %774
  %813 = ptrtoint %"struct.jxl::Token"* %801 to i64
  %814 = load i64, i64* %23, align 8
  %815 = sub i64 %813, %814
  %816 = ashr exact i64 %815, 3
  %817 = add nsw i64 %816, 1
  %818 = icmp ugt i64 %817, 2305843009213693951
  br i1 %818, label %819, label %821

819:                                              ; preds = %812
  %820 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %820) #13
  unreachable

821:                                              ; preds = %812
  %822 = sub i64 %804, %814
  %823 = ashr exact i64 %822, 3
  %824 = icmp ult i64 %823, 1152921504606846975
  br i1 %824, label %825, label %833

825:                                              ; preds = %821
  %826 = ashr exact i64 %822, 2
  %827 = icmp ult i64 %826, %817
  %828 = select i1 %827, i64 %817, i64 %826
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %838, label %830

830:                                              ; preds = %825
  %831 = icmp ugt i64 %828, 2305843009213693951
  br i1 %831, label %832, label %833

832:                                              ; preds = %830
  tail call void @abort() #13
  unreachable

833:                                              ; preds = %830, %821
  %834 = phi i64 [ %828, %830 ], [ 2305843009213693951, %821 ]
  %835 = shl i64 %834, 3
  %836 = tail call i8* @_Znwm(i64 %835) #14
  %837 = bitcast i8* %836 to %"struct.jxl::Token"*
  br label %838

838:                                              ; preds = %833, %825
  %839 = phi i64 [ %834, %833 ], [ 0, %825 ]
  %840 = phi i8* [ %836, %833 ], [ null, %825 ]
  %841 = phi %"struct.jxl::Token"* [ %837, %833 ], [ null, %825 ]
  %842 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %816
  %843 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %839
  %844 = ptrtoint %"struct.jxl::Token"* %843 to i64
  %845 = trunc i64 %797 to i32
  %846 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %842, i64 0, i32 0
  %847 = shl i32 %845, 1
  store i32 %847, i32* %846, align 4
  %848 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %816, i32 1
  store i32 %800, i32* %848, align 4
  %849 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %842, i64 1
  %850 = ptrtoint %"struct.jxl::Token"* %849 to i64
  %851 = ptrtoint %"struct.jxl::Token"* %841 to i64
  %852 = icmp sgt i64 %815, 0
  br i1 %852, label %853, label %855

853:                                              ; preds = %838
  %854 = inttoptr i64 %814 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %840, i8* align 4 %854, i64 %815, i1 false) #9
  br label %855

855:                                              ; preds = %853, %838
  store i64 %851, i64* %23, align 8
  store i64 %850, i64* %21, align 8
  store i64 %844, i64* %31, align 8
  %856 = icmp eq i64 %814, 0
  br i1 %856, label %859, label %857

857:                                              ; preds = %855
  %858 = inttoptr i64 %814 to i8*
  tail call void @_ZdlPv(i8* %858) #14
  br label %859

859:                                              ; preds = %805, %855, %857
  %860 = icmp ne i32 %783, 0
  %861 = zext i1 %860 to i32
  %862 = sub nuw i32 %777, %861
  %863 = add nuw nsw i64 %775, 1
  %864 = icmp ult i64 %863, %260
  %865 = icmp ne i32 %862, 0
  %866 = and i1 %865, %864
  br i1 %866, label %774, label %772

867:                                              ; preds = %315, %298, %772
  %868 = getelementptr inbounds i32, i32* %300, i64 1
  %869 = icmp eq i32* %868, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.1, i64 1, i64 0)
  br i1 %869, label %297, label %870

870:                                              ; preds = %867
  %871 = load i8, i8* %96, align 4
  br label %298

872:                                              ; preds = %220, %297
  %873 = add nuw i64 %221, 1
  %874 = icmp eq i64 %873, %17
  br i1 %874, label %217, label %220
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX319NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi(i64, i64, i64, i64, i64, i32* noalias nocapture readonly, i64, i32* noalias nocapture) local_unnamed_addr #3 {
  %9 = sub i64 0, %0
  %10 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %9
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %8
  %13 = shl i64 %0, 3
  %14 = icmp eq i64 %13, 0
  %15 = add i64 %13, -1
  %16 = lshr i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %16, 0
  %20 = sub nuw nsw i64 %17, %18
  %21 = icmp eq i64 %18, 0
  br label %22

22:                                               ; preds = %64, %12
  %23 = phi i64 [ 0, %12 ], [ %67, %64 ]
  %24 = phi <4 x i64> [ zeroinitializer, %12 ], [ %66, %64 ]
  %25 = phi <8 x i32> [ zeroinitializer, %12 ], [ %65, %64 ]
  br i1 %14, label %64, label %26

26:                                               ; preds = %22
  %27 = mul i64 %13, %23
  br i1 %19, label %43, label %69

28:                                               ; preds = %64, %8
  %29 = phi <8 x i32> [ zeroinitializer, %8 ], [ %65, %64 ]
  %30 = phi <4 x i64> [ zeroinitializer, %8 ], [ %66, %64 ]
  %31 = shl i64 %1, 3
  %32 = icmp ugt i64 %31, %1
  br i1 %32, label %33, label %109

33:                                               ; preds = %28
  %34 = shl i64 %0, 3
  %35 = icmp eq i64 %34, 0
  %36 = add i64 %34, -1
  %37 = lshr i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 3
  %40 = icmp ult i64 %36, 24
  %41 = sub nsw i64 %38, %39
  %42 = icmp eq i64 %39, 0
  br label %103

43:                                               ; preds = %69, %26
  %44 = phi <8 x i32> [ undef, %26 ], [ %99, %69 ]
  %45 = phi i64 [ 0, %26 ], [ %100, %69 ]
  %46 = phi <8 x i32> [ %25, %26 ], [ %99, %69 ]
  br i1 %21, label %61, label %47

47:                                               ; preds = %43
  %48 = add i64 %45, %27
  %49 = getelementptr inbounds i32, i32* %5, i64 %48
  %50 = bitcast i32* %49 to <4 x i64>*
  %51 = load <4 x i64>, <4 x i64>* %50, align 32, !alias.scope !134, !noalias !137
  %52 = getelementptr inbounds i32, i32* %10, i64 %45
  %53 = bitcast i32* %52 to <4 x i64>*
  %54 = load <4 x i64>, <4 x i64>* %53, align 4, !alias.scope !139, !noalias !142
  %55 = xor <4 x i64> %54, <i64 -1, i64 -1, i64 -1, i64 -1>
  %56 = and <4 x i64> %51, %55
  %57 = bitcast <4 x i64> %56 to <8 x i32>
  %58 = icmp eq <8 x i32> %57, zeroinitializer
  %59 = zext <8 x i1> %58 to <8 x i32>
  %60 = sub <8 x i32> %46, %59
  br label %61

61:                                               ; preds = %43, %47
  %62 = phi <8 x i32> [ %44, %43 ], [ %60, %47 ]
  %63 = bitcast <8 x i32> %62 to <4 x i64>
  br label %64

64:                                               ; preds = %22, %61
  %65 = phi <8 x i32> [ %62, %61 ], [ %25, %22 ]
  %66 = phi <4 x i64> [ %63, %61 ], [ %24, %22 ]
  %67 = add nuw i64 %23, 1
  %68 = icmp eq i64 %67, %1
  br i1 %68, label %28, label %22

69:                                               ; preds = %26, %69
  %70 = phi i64 [ %100, %69 ], [ 0, %26 ]
  %71 = phi <8 x i32> [ %99, %69 ], [ %25, %26 ]
  %72 = phi i64 [ %101, %69 ], [ %20, %26 ]
  %73 = getelementptr inbounds i32, i32* %10, i64 %70
  %74 = bitcast i32* %73 to <4 x i64>*
  %75 = load <4 x i64>, <4 x i64>* %74, align 4, !alias.scope !139, !noalias !142
  %76 = add i64 %70, %27
  %77 = getelementptr inbounds i32, i32* %5, i64 %76
  %78 = bitcast i32* %77 to <4 x i64>*
  %79 = load <4 x i64>, <4 x i64>* %78, align 32, !alias.scope !134, !noalias !137
  %80 = xor <4 x i64> %75, <i64 -1, i64 -1, i64 -1, i64 -1>
  %81 = and <4 x i64> %79, %80
  %82 = bitcast <4 x i64> %81 to <8 x i32>
  %83 = icmp eq <8 x i32> %82, zeroinitializer
  %84 = zext <8 x i1> %83 to <8 x i32>
  %85 = sub <8 x i32> %71, %84
  %86 = or i64 %70, 8
  %87 = getelementptr inbounds i32, i32* %10, i64 %86
  %88 = bitcast i32* %87 to <4 x i64>*
  %89 = load <4 x i64>, <4 x i64>* %88, align 4, !alias.scope !139, !noalias !142
  %90 = add i64 %86, %27
  %91 = getelementptr inbounds i32, i32* %5, i64 %90
  %92 = bitcast i32* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 32, !alias.scope !134, !noalias !137
  %94 = xor <4 x i64> %89, <i64 -1, i64 -1, i64 -1, i64 -1>
  %95 = and <4 x i64> %93, %94
  %96 = bitcast <4 x i64> %95 to <8 x i32>
  %97 = icmp eq <8 x i32> %96, zeroinitializer
  %98 = zext <8 x i1> %97 to <8 x i32>
  %99 = sub <8 x i32> %85, %98
  %100 = add nuw i64 %70, 16
  %101 = add i64 %72, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %43, label %69

103:                                              ; preds = %181, %33
  %104 = phi i64 [ %1, %33 ], [ %184, %181 ]
  %105 = phi <4 x i64> [ %30, %33 ], [ %183, %181 ]
  %106 = phi <8 x i32> [ %29, %33 ], [ %182, %181 ]
  br i1 %35, label %181, label %107

107:                                              ; preds = %103
  %108 = mul i64 %34, %104
  br i1 %40, label %160, label %186

109:                                              ; preds = %181, %28
  %110 = phi <8 x i32> [ %29, %28 ], [ %182, %181 ]
  %111 = phi <4 x i64> [ %30, %28 ], [ %183, %181 ]
  %112 = mul i64 %1, %0
  %113 = trunc i64 %112 to i32
  %114 = shl i32 %113, 6
  %115 = shufflevector <4 x i64> %111, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = add <8 x i32> %110, %116
  %118 = shufflevector <8 x i32> %117, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %119 = add <8 x i32> %118, %117
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = add <8 x i32> %120, %119
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %124 = bitcast <2 x i64> %123 to <4 x i32>
  %125 = extractelement <4 x i32> %124, i32 0
  %126 = add nsw i32 %125, %114
  %127 = sext i32 %126 to i64
  %128 = add i64 %3, -1
  %129 = add i64 %128, %127
  %130 = lshr i64 %129, %4
  %131 = trunc i64 %130 to i32
  %132 = and i64 %2, 4294967295
  %133 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %132
  %134 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %132
  %135 = load i8, i8* %133, align 1
  %136 = zext i8 %135 to i64
  %137 = load i8, i8* %134, align 1
  %138 = zext i8 %137 to i64
  %139 = icmp ugt i64 %138, 1
  %140 = select i1 %139, i64 %138, i64 1
  %141 = and i64 %140, 192
  %142 = add nsw i64 %141, -64
  %143 = lshr exact i64 %142, 6
  %144 = add nuw nsw i64 %143, 1
  %145 = icmp ult i64 %140, 64
  %146 = and i64 %140, 192
  %147 = insertelement <16 x i32> undef, i32 %131, i32 0
  %148 = shufflevector <16 x i32> %147, <16 x i32> undef, <16 x i32> zeroinitializer
  %149 = insertelement <16 x i32> undef, i32 %131, i32 0
  %150 = shufflevector <16 x i32> %149, <16 x i32> undef, <16 x i32> zeroinitializer
  %151 = insertelement <16 x i32> undef, i32 %131, i32 0
  %152 = shufflevector <16 x i32> %151, <16 x i32> undef, <16 x i32> zeroinitializer
  %153 = insertelement <16 x i32> undef, i32 %131, i32 0
  %154 = shufflevector <16 x i32> %153, <16 x i32> undef, <16 x i32> zeroinitializer
  %155 = and i64 %144, 3
  %156 = icmp ult i64 %142, 192
  %157 = sub nsw i64 %144, %155
  %158 = icmp eq i64 %155, 0
  %159 = icmp eq i64 %140, %146
  br label %224

160:                                              ; preds = %186, %107
  %161 = phi <8 x i32> [ undef, %107 ], [ %220, %186 ]
  %162 = phi i64 [ 0, %107 ], [ %221, %186 ]
  %163 = phi <8 x i32> [ %106, %107 ], [ %220, %186 ]
  br i1 %42, label %178, label %164

164:                                              ; preds = %160, %164
  %165 = phi i64 [ %175, %164 ], [ %162, %160 ]
  %166 = phi <8 x i32> [ %174, %164 ], [ %163, %160 ]
  %167 = phi i64 [ %176, %164 ], [ %39, %160 ]
  %168 = add i64 %165, %108
  %169 = getelementptr inbounds i32, i32* %5, i64 %168
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 32, !alias.scope !144, !noalias !147
  %172 = icmp eq <8 x i32> %171, zeroinitializer
  %173 = zext <8 x i1> %172 to <8 x i32>
  %174 = sub <8 x i32> %166, %173
  %175 = add nuw i64 %165, 8
  %176 = add i64 %167, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %164, !llvm.loop !149

178:                                              ; preds = %164, %160
  %179 = phi <8 x i32> [ %161, %160 ], [ %174, %164 ]
  %180 = bitcast <8 x i32> %179 to <4 x i64>
  br label %181

181:                                              ; preds = %103, %178
  %182 = phi <8 x i32> [ %179, %178 ], [ %106, %103 ]
  %183 = phi <4 x i64> [ %180, %178 ], [ %105, %103 ]
  %184 = add nuw i64 %104, 1
  %185 = icmp eq i64 %184, %31
  br i1 %185, label %109, label %103

186:                                              ; preds = %107, %186
  %187 = phi i64 [ %221, %186 ], [ 0, %107 ]
  %188 = phi <8 x i32> [ %220, %186 ], [ %106, %107 ]
  %189 = phi i64 [ %222, %186 ], [ %41, %107 ]
  %190 = add i64 %187, %108
  %191 = getelementptr inbounds i32, i32* %5, i64 %190
  %192 = bitcast i32* %191 to <8 x i32>*
  %193 = load <8 x i32>, <8 x i32>* %192, align 32, !alias.scope !144, !noalias !147
  %194 = icmp eq <8 x i32> %193, zeroinitializer
  %195 = zext <8 x i1> %194 to <8 x i32>
  %196 = sub <8 x i32> %188, %195
  %197 = or i64 %187, 8
  %198 = add i64 %197, %108
  %199 = getelementptr inbounds i32, i32* %5, i64 %198
  %200 = bitcast i32* %199 to <8 x i32>*
  %201 = load <8 x i32>, <8 x i32>* %200, align 32, !alias.scope !144, !noalias !147
  %202 = icmp eq <8 x i32> %201, zeroinitializer
  %203 = zext <8 x i1> %202 to <8 x i32>
  %204 = sub <8 x i32> %196, %203
  %205 = or i64 %187, 16
  %206 = add i64 %205, %108
  %207 = getelementptr inbounds i32, i32* %5, i64 %206
  %208 = bitcast i32* %207 to <8 x i32>*
  %209 = load <8 x i32>, <8 x i32>* %208, align 32, !alias.scope !144, !noalias !147
  %210 = icmp eq <8 x i32> %209, zeroinitializer
  %211 = zext <8 x i1> %210 to <8 x i32>
  %212 = sub <8 x i32> %204, %211
  %213 = or i64 %187, 24
  %214 = add i64 %213, %108
  %215 = getelementptr inbounds i32, i32* %5, i64 %214
  %216 = bitcast i32* %215 to <8 x i32>*
  %217 = load <8 x i32>, <8 x i32>* %216, align 32, !alias.scope !144, !noalias !147
  %218 = icmp eq <8 x i32> %217, zeroinitializer
  %219 = zext <8 x i1> %218 to <8 x i32>
  %220 = sub <8 x i32> %212, %219
  %221 = add nuw i64 %187, 32
  %222 = add i64 %189, -4
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %160, label %186

224:                                              ; preds = %294, %109
  %225 = phi i64 [ 0, %109 ], [ %295, %294 ]
  %226 = mul i64 %225, %6
  br i1 %145, label %227, label %229

227:                                              ; preds = %292, %224
  %228 = phi i64 [ 0, %224 ], [ %146, %292 ]
  br label %297

229:                                              ; preds = %224
  br i1 %156, label %275, label %230

230:                                              ; preds = %229, %230
  %231 = phi i64 [ %272, %230 ], [ 0, %229 ]
  %232 = phi i64 [ %273, %230 ], [ %157, %229 ]
  %233 = add i64 %231, %226
  %234 = getelementptr inbounds i32, i32* %7, i64 %233
  %235 = bitcast i32* %234 to <16 x i32>*
  store <16 x i32> %148, <16 x i32>* %235, align 4
  %236 = getelementptr inbounds i32, i32* %234, i64 16
  %237 = bitcast i32* %236 to <16 x i32>*
  store <16 x i32> %150, <16 x i32>* %237, align 4
  %238 = getelementptr inbounds i32, i32* %234, i64 32
  %239 = bitcast i32* %238 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %239, align 4
  %240 = getelementptr inbounds i32, i32* %234, i64 48
  %241 = bitcast i32* %240 to <16 x i32>*
  store <16 x i32> %154, <16 x i32>* %241, align 4
  %242 = or i64 %231, 64
  %243 = add i64 %242, %226
  %244 = getelementptr inbounds i32, i32* %7, i64 %243
  %245 = bitcast i32* %244 to <16 x i32>*
  store <16 x i32> %148, <16 x i32>* %245, align 4
  %246 = getelementptr inbounds i32, i32* %244, i64 16
  %247 = bitcast i32* %246 to <16 x i32>*
  store <16 x i32> %150, <16 x i32>* %247, align 4
  %248 = getelementptr inbounds i32, i32* %244, i64 32
  %249 = bitcast i32* %248 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %249, align 4
  %250 = getelementptr inbounds i32, i32* %244, i64 48
  %251 = bitcast i32* %250 to <16 x i32>*
  store <16 x i32> %154, <16 x i32>* %251, align 4
  %252 = or i64 %231, 128
  %253 = add i64 %252, %226
  %254 = getelementptr inbounds i32, i32* %7, i64 %253
  %255 = bitcast i32* %254 to <16 x i32>*
  store <16 x i32> %148, <16 x i32>* %255, align 4
  %256 = getelementptr inbounds i32, i32* %254, i64 16
  %257 = bitcast i32* %256 to <16 x i32>*
  store <16 x i32> %150, <16 x i32>* %257, align 4
  %258 = getelementptr inbounds i32, i32* %254, i64 32
  %259 = bitcast i32* %258 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %259, align 4
  %260 = getelementptr inbounds i32, i32* %254, i64 48
  %261 = bitcast i32* %260 to <16 x i32>*
  store <16 x i32> %154, <16 x i32>* %261, align 4
  %262 = or i64 %231, 192
  %263 = add i64 %262, %226
  %264 = getelementptr inbounds i32, i32* %7, i64 %263
  %265 = bitcast i32* %264 to <16 x i32>*
  store <16 x i32> %148, <16 x i32>* %265, align 4
  %266 = getelementptr inbounds i32, i32* %264, i64 16
  %267 = bitcast i32* %266 to <16 x i32>*
  store <16 x i32> %150, <16 x i32>* %267, align 4
  %268 = getelementptr inbounds i32, i32* %264, i64 32
  %269 = bitcast i32* %268 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %269, align 4
  %270 = getelementptr inbounds i32, i32* %264, i64 48
  %271 = bitcast i32* %270 to <16 x i32>*
  store <16 x i32> %154, <16 x i32>* %271, align 4
  %272 = add i64 %231, 256
  %273 = add i64 %232, -4
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %230, !llvm.loop !150

275:                                              ; preds = %230, %229
  %276 = phi i64 [ 0, %229 ], [ %272, %230 ]
  br i1 %158, label %292, label %277

277:                                              ; preds = %275, %277
  %278 = phi i64 [ %289, %277 ], [ %276, %275 ]
  %279 = phi i64 [ %290, %277 ], [ %155, %275 ]
  %280 = add i64 %278, %226
  %281 = getelementptr inbounds i32, i32* %7, i64 %280
  %282 = bitcast i32* %281 to <16 x i32>*
  store <16 x i32> %148, <16 x i32>* %282, align 4
  %283 = getelementptr inbounds i32, i32* %281, i64 16
  %284 = bitcast i32* %283 to <16 x i32>*
  store <16 x i32> %150, <16 x i32>* %284, align 4
  %285 = getelementptr inbounds i32, i32* %281, i64 32
  %286 = bitcast i32* %285 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %286, align 4
  %287 = getelementptr inbounds i32, i32* %281, i64 48
  %288 = bitcast i32* %287 to <16 x i32>*
  store <16 x i32> %154, <16 x i32>* %288, align 4
  %289 = add i64 %278, 64
  %290 = add i64 %279, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %277, !llvm.loop !151

292:                                              ; preds = %277, %275
  br i1 %159, label %294, label %227

293:                                              ; preds = %294
  ret i32 %126

294:                                              ; preds = %297, %292
  %295 = add nuw nsw i64 %225, 1
  %296 = icmp ult i64 %295, %136
  br i1 %296, label %224, label %293

297:                                              ; preds = %227, %297
  %298 = phi i64 [ %301, %297 ], [ %228, %227 ]
  %299 = add i64 %298, %226
  %300 = getelementptr inbounds i32, i32* %7, i64 %299
  store i32 %131, i32* %300, align 4
  %301 = add nuw nsw i64 %298, 1
  %302 = icmp ult i64 %301, %138
  br i1 %302, label %297, label %294, !llvm.loop !152
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6N_AVX321NumNonZero8x8ExceptDCEPKiPi(i32* noalias nocapture readonly, i32* noalias nocapture) local_unnamed_addr #3 {
  %3 = bitcast i32* %0 to <8 x i32>*
  %4 = load <8 x i32>, <8 x i32>* %3, align 32, !alias.scope !153, !noalias !156
  %5 = and <8 x i32> %4, <i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %6 = icmp eq <8 x i32> %5, zeroinitializer
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = getelementptr inbounds i32, i32* %0, i64 8
  %9 = bitcast i32* %8 to <8 x i32>*
  %10 = load <8 x i32>, <8 x i32>* %9, align 32, !alias.scope !158, !noalias !161
  %11 = icmp eq <8 x i32> %10, zeroinitializer
  %12 = zext <8 x i1> %11 to <8 x i32>
  %13 = sub nsw <8 x i32> %7, %12
  %14 = getelementptr inbounds i32, i32* %0, i64 16
  %15 = bitcast i32* %14 to <8 x i32>*
  %16 = load <8 x i32>, <8 x i32>* %15, align 32, !alias.scope !158, !noalias !161
  %17 = icmp eq <8 x i32> %16, zeroinitializer
  %18 = zext <8 x i1> %17 to <8 x i32>
  %19 = sub nsw <8 x i32> %13, %18
  %20 = getelementptr inbounds i32, i32* %0, i64 24
  %21 = bitcast i32* %20 to <8 x i32>*
  %22 = load <8 x i32>, <8 x i32>* %21, align 32, !alias.scope !158, !noalias !161
  %23 = icmp eq <8 x i32> %22, zeroinitializer
  %24 = zext <8 x i1> %23 to <8 x i32>
  %25 = sub nsw <8 x i32> %19, %24
  %26 = getelementptr inbounds i32, i32* %0, i64 32
  %27 = bitcast i32* %26 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 32, !alias.scope !158, !noalias !161
  %29 = icmp eq <8 x i32> %28, zeroinitializer
  %30 = zext <8 x i1> %29 to <8 x i32>
  %31 = sub nsw <8 x i32> %25, %30
  %32 = getelementptr inbounds i32, i32* %0, i64 40
  %33 = bitcast i32* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 32, !alias.scope !158, !noalias !161
  %35 = icmp eq <8 x i32> %34, zeroinitializer
  %36 = zext <8 x i1> %35 to <8 x i32>
  %37 = sub nsw <8 x i32> %31, %36
  %38 = getelementptr inbounds i32, i32* %0, i64 48
  %39 = bitcast i32* %38 to <8 x i32>*
  %40 = load <8 x i32>, <8 x i32>* %39, align 32, !alias.scope !158, !noalias !161
  %41 = icmp eq <8 x i32> %40, zeroinitializer
  %42 = zext <8 x i1> %41 to <8 x i32>
  %43 = sub nsw <8 x i32> %37, %42
  %44 = getelementptr inbounds i32, i32* %0, i64 56
  %45 = bitcast i32* %44 to <8 x i32>*
  %46 = load <8 x i32>, <8 x i32>* %45, align 32, !alias.scope !158, !noalias !161
  %47 = icmp eq <8 x i32> %46, zeroinitializer
  %48 = zext <8 x i1> %47 to <8 x i32>
  %49 = sub <8 x i32> %43, %48
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = add <8 x i32> %49, %52
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %55 = add <8 x i32> %54, %53
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = add <8 x i32> %56, %55
  %58 = bitcast <8 x i32> %57 to <4 x i64>
  %59 = shufflevector <4 x i64> %58, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %60 = bitcast <2 x i64> %59 to <4 x i32>
  %61 = extractelement <4 x i32> %60, i32 0
  %62 = add nsw i32 %61, 64
  store i32 %62, i32* %1, align 4
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX320TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE(i32* noalias nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i32** noalias nocapture readonly, %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"* noalias nocapture readonly, %"class.std::__1::vector"* noalias, %"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"class.jxl::Plane.1"* nocapture readonly dereferenceable(32), %"struct.jxl::BlockCtxMap"* nocapture readonly dereferenceable(136)) #3 {
  %11 = alloca [3 x i64], align 16
  %12 = alloca [3 x i64], align 16
  %13 = alloca [3 x i32*], align 16
  %14 = alloca [3 x i32*], align 16
  %15 = alloca [3 x i64], align 16
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %21 = bitcast %"struct.jxl::Token"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %6 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 3
  %27 = mul i64 %17, 192
  %28 = mul i64 %27, %19
  %29 = add i64 %26, %28
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::Token"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, %29
  br i1 %35, label %36, label %55

36:                                               ; preds = %10
  %37 = icmp ugt i64 %29, 2305843009213693951
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #13
  unreachable

39:                                               ; preds = %36
  %40 = shl i64 %29, 3
  %41 = tail call i8* @_Znwm(i64 %40) #14
  %42 = bitcast i8* %41 to %"struct.jxl::Token"*
  %43 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %26
  %44 = ptrtoint %"struct.jxl::Token"* %43 to i64
  %45 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %29
  %46 = ptrtoint %"struct.jxl::Token"* %45 to i64
  %47 = ptrtoint i8* %41 to i64
  %48 = icmp sgt i64 %25, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = inttoptr i64 %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %50, i64 %25, i1 false) #9
  br label %51

51:                                               ; preds = %49, %39
  store i64 %47, i64* %23, align 8
  store i64 %44, i64* %21, align 8
  store i64 %46, i64* %31, align 8
  %52 = icmp eq i64 %24, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %24 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %10, %51, %53
  %56 = bitcast [3 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false)
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 2
  %60 = icmp eq i64 %19, 0
  br i1 %60, label %115, label %61

61:                                               ; preds = %55
  %62 = bitcast [3 x i64]* %12 to i8*
  %63 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 0
  %64 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 1
  %65 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 2
  %66 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 3
  %67 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 1
  %69 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 2
  %70 = bitcast [3 x i32*]* %13 to i8*
  %71 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 1
  %72 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 2
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = bitcast [3 x i32*]* %13 to i8**
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = bitcast i32** %71 to i8**
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = bitcast i32** %72 to i8**
  %79 = bitcast [3 x i32*]* %14 to i8*
  %80 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 0
  %81 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 1
  %82 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 2
  %83 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %86 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 4
  %89 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 4
  %91 = icmp eq i64 %17, 0
  %92 = bitcast [3 x i64]* %15 to i8*
  %93 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 0
  %94 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 1
  %95 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 2
  %96 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 2
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 4
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 2, i32 0, i32 0
  %101 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 3
  %102 = load i8*, i8** %73, align 8
  %103 = load i8*, i8** %75, align 8
  %104 = load i8*, i8** %77, align 8
  %105 = ptrtoint i8* %102 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #9
  %108 = ptrtoint i8* %103 to i64
  %109 = and i64 %108, 63
  %110 = icmp eq i64 %109, 0
  tail call void @llvm.assume(i1 %110) #9
  %111 = ptrtoint i8* %104 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #9
  %114 = bitcast [3 x i32*]* %14 to i8*
  br label %116

115:                                              ; preds = %217, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #9
  ret void

116:                                              ; preds = %217, %61
  %117 = phi i64 [ 0, %61 ], [ %218, %217 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #9
  %118 = load i8, i8* %66, align 1
  %119 = zext i8 %118 to i64
  %120 = load i32, i32* %67, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = sub nsw i64 %119, %124
  %126 = lshr i64 %117, %125
  store i64 %126, i64* %63, align 16
  %127 = load i32, i32* %68, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = sub nsw i64 %119, %131
  %133 = lshr i64 %117, %132
  store i64 %133, i64* %64, align 8
  %134 = load i32, i32* %69, align 4
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = sub nsw i64 %119, %138
  %140 = lshr i64 %117, %139
  store i64 %140, i64* %65, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #9
  %141 = mul i64 %126, %58
  %142 = getelementptr inbounds i8, i8* %102, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9
  store i8* %142, i8** %74, align 16
  %146 = mul i64 %133, %58
  %147 = getelementptr inbounds i8, i8* %103, i64 %146
  %148 = ptrtoint i8* %147 to i64
  %149 = and i64 %148, 63
  %150 = icmp eq i64 %149, 0
  tail call void @llvm.assume(i1 %150) #9
  store i8* %147, i8** %76, align 8
  %151 = mul i64 %140, %58
  %152 = getelementptr inbounds i8, i8* %104, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  tail call void @llvm.assume(i1 %155) #9
  store i8* %152, i8** %78, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #9
  %156 = icmp eq i64 %126, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %114, i8 -86, i64 24, i1 false)
  br i1 %156, label %165, label %157

157:                                              ; preds = %116
  %158 = add i64 %126, -1
  %159 = mul i64 %158, %58
  %160 = getelementptr inbounds i8, i8* %102, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  tail call void @llvm.assume(i1 %163) #9
  %164 = bitcast i8* %160 to i32*
  br label %165

165:                                              ; preds = %116, %157
  %166 = phi i32* [ %164, %157 ], [ null, %116 ]
  store i32* %166, i32** %80, align 16
  %167 = icmp eq i64 %133, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %165
  %169 = add i64 %133, -1
  %170 = mul i64 %169, %58
  %171 = getelementptr inbounds i8, i8* %103, i64 %170
  %172 = ptrtoint i8* %171 to i64
  %173 = and i64 %172, 63
  %174 = icmp eq i64 %173, 0
  tail call void @llvm.assume(i1 %174) #9
  %175 = bitcast i8* %171 to i32*
  br label %176

176:                                              ; preds = %165, %168
  %177 = phi i32* [ %175, %168 ], [ null, %165 ]
  store i32* %177, i32** %81, align 8
  %178 = icmp eq i64 %140, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176
  %180 = add i64 %140, -1
  %181 = mul i64 %180, %58
  %182 = getelementptr inbounds i8, i8* %104, i64 %181
  %183 = ptrtoint i8* %182 to i64
  %184 = and i64 %183, 63
  %185 = icmp eq i64 %184, 0
  tail call void @llvm.assume(i1 %185) #9
  %186 = bitcast i8* %182 to i32*
  br label %187

187:                                              ; preds = %176, %179
  %188 = phi i32* [ %186, %179 ], [ null, %176 ]
  store i32* %188, i32** %82, align 16
  %189 = load i64, i64* %83, align 8
  %190 = add i64 %189, %117
  %191 = load i8*, i8** %84, align 8
  %192 = load i64, i64* %85, align 8
  %193 = mul i64 %192, %190
  %194 = getelementptr inbounds i8, i8* %191, i64 %193
  %195 = ptrtoint i8* %194 to i64
  %196 = and i64 %195, 63
  %197 = icmp eq i64 %196, 0
  tail call void @llvm.assume(i1 %197) #9
  %198 = load i64, i64* %86, align 8
  %199 = getelementptr inbounds i8, i8* %194, i64 %198
  %200 = load i8*, i8** %87, align 8
  %201 = load i64, i64* %88, align 8
  %202 = mul i64 %201, %190
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  tail call void @llvm.assume(i1 %206) #9
  %207 = bitcast i8* %203 to i32*
  %208 = getelementptr inbounds i32, i32* %207, i64 %198
  %209 = load i8*, i8** %89, align 8
  %210 = load i64, i64* %90, align 8
  %211 = mul i64 %210, %190
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = ptrtoint i8* %212 to i64
  %214 = and i64 %213, 63
  %215 = icmp eq i64 %214, 0
  tail call void @llvm.assume(i1 %215) #9
  %216 = getelementptr inbounds i8, i8* %212, i64 %198
  br i1 %91, label %217, label %220

217:                                              ; preds = %872, %187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #9
  %218 = add nuw i64 %117, 1
  %219 = icmp eq i64 %218, %19
  br i1 %219, label %115, label %116

220:                                              ; preds = %187, %872
  %221 = phi i64 [ %873, %872 ], [ 0, %187 ]
  %222 = getelementptr inbounds i8, i8* %216, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = and i8 %223, 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %872, label %226

226:                                              ; preds = %220
  %227 = lshr i8 %223, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #9
  %228 = load i8, i8* %96, align 4
  %229 = zext i8 %228 to i64
  %230 = load i32, i32* %67, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = sub nsw i64 %229, %234
  %236 = lshr i64 %221, %235
  store i64 %236, i64* %93, align 16
  %237 = load i32, i32* %68, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = sub nsw i64 %229, %241
  %243 = lshr i64 %221, %242
  store i64 %243, i64* %94, align 8
  %244 = load i32, i32* %69, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = sub nsw i64 %229, %248
  %250 = lshr i64 %221, %249
  store i64 %250, i64* %95, align 16
  %251 = zext i8 %227 to i64
  %252 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %251
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = mul nuw nsw i64 %257, %254
  %259 = tail call i64 @llvm.cttz.i64(i64 %258, i1 true) #9, !range !24
  %260 = shl nuw nsw i64 %258, 6
  %261 = icmp ult i8 %256, %253
  %262 = select i1 %261, i8 %256, i8 %253
  %263 = zext i8 %262 to i64
  %264 = icmp ugt i8 %256, %253
  %265 = select i1 %264, i8 %256, i8 %253
  %266 = zext i8 %265 to i64
  %267 = icmp eq i64 %258, 1
  %268 = sub nsw i64 0, %266
  %269 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %268
  %270 = icmp eq i8 %262, 0
  %271 = shl nuw nsw i64 %266, 3
  %272 = icmp eq i8 %265, 0
  %273 = shl nuw nsw i64 %263, 3
  %274 = icmp ugt i64 %273, %263
  %275 = mul nuw nsw i64 %263, %266
  %276 = trunc i64 %275 to i32
  %277 = shl nuw nsw i32 %276, 6
  %278 = add nsw i64 %258, -1
  %279 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %251
  %280 = getelementptr inbounds i8, i8* %199, i64 %221
  %281 = shl nuw nsw i64 %258, 2
  %282 = icmp ult i64 %258, %260
  %283 = zext i8 %253 to i64
  %284 = icmp ugt i64 %283, 1
  %285 = select i1 %284, i64 %283, i64 1
  %286 = and i64 %285, 192
  %287 = add nsw i64 %286, -64
  %288 = lshr exact i64 %287, 6
  %289 = add nuw nsw i64 %288, 1
  %290 = icmp ult i64 %285, 64
  %291 = and i64 %285, 192
  %292 = and i64 %289, 3
  %293 = icmp ult i64 %287, 192
  %294 = sub nsw i64 %289, %292
  %295 = icmp eq i64 %292, 0
  %296 = icmp eq i64 %285, %291
  br label %298

297:                                              ; preds = %867
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #9
  br label %872

298:                                              ; preds = %870, %226
  %299 = phi i8 [ %228, %226 ], [ %871, %870 ]
  %300 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.2, i64 0, i64 0), %226 ], [ %868, %870 ]
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 %302
  %304 = load i64, i64* %303, align 8
  %305 = zext i8 %299 to i64
  %306 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 %302
  %307 = load i32, i32* %306, align 4
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i64
  %312 = sub nsw i64 %305, %311
  %313 = shl i64 %304, %312
  %314 = icmp eq i64 %313, %221
  br i1 %314, label %315, label %867

315:                                              ; preds = %298
  %316 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 %302
  %317 = load i64, i64* %316, align 8
  %318 = load i8, i8* %66, align 1
  %319 = zext i8 %318 to i64
  %320 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %308
  %321 = load i8, i8* %320, align 1
  %322 = zext i8 %321 to i64
  %323 = sub nsw i64 %319, %322
  %324 = shl i64 %317, %323
  %325 = icmp eq i64 %324, %117
  br i1 %325, label %326, label %867

326:                                              ; preds = %315
  %327 = getelementptr inbounds i32*, i32** %2, i64 %302
  %328 = load i32*, i32** %327, align 8
  %329 = getelementptr inbounds [3 x i64], [3 x i64]* %11, i64 0, i64 %302
  %330 = load i64, i64* %329, align 8
  %331 = getelementptr inbounds i32, i32* %328, i64 %330
  %332 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 %302
  %333 = load i32*, i32** %332, align 8
  %334 = getelementptr inbounds i32, i32* %333, i64 %304
  br i1 %267, label %335, label %396

335:                                              ; preds = %326
  %336 = bitcast i32* %331 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32, !alias.scope !163, !noalias !168
  %338 = and <8 x i32> %337, <i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %339 = icmp eq <8 x i32> %338, zeroinitializer
  %340 = sext <8 x i1> %339 to <8 x i32>
  %341 = getelementptr inbounds i32, i32* %331, i64 8
  %342 = bitcast i32* %341 to <8 x i32>*
  %343 = load <8 x i32>, <8 x i32>* %342, align 32, !alias.scope !171, !noalias !174
  %344 = icmp eq <8 x i32> %343, zeroinitializer
  %345 = zext <8 x i1> %344 to <8 x i32>
  %346 = sub nsw <8 x i32> %340, %345
  %347 = getelementptr inbounds i32, i32* %331, i64 16
  %348 = bitcast i32* %347 to <8 x i32>*
  %349 = load <8 x i32>, <8 x i32>* %348, align 32, !alias.scope !171, !noalias !174
  %350 = icmp eq <8 x i32> %349, zeroinitializer
  %351 = zext <8 x i1> %350 to <8 x i32>
  %352 = sub nsw <8 x i32> %346, %351
  %353 = getelementptr inbounds i32, i32* %331, i64 24
  %354 = bitcast i32* %353 to <8 x i32>*
  %355 = load <8 x i32>, <8 x i32>* %354, align 32, !alias.scope !171, !noalias !174
  %356 = icmp eq <8 x i32> %355, zeroinitializer
  %357 = zext <8 x i1> %356 to <8 x i32>
  %358 = sub nsw <8 x i32> %352, %357
  %359 = getelementptr inbounds i32, i32* %331, i64 32
  %360 = bitcast i32* %359 to <8 x i32>*
  %361 = load <8 x i32>, <8 x i32>* %360, align 32, !alias.scope !171, !noalias !174
  %362 = icmp eq <8 x i32> %361, zeroinitializer
  %363 = zext <8 x i1> %362 to <8 x i32>
  %364 = sub nsw <8 x i32> %358, %363
  %365 = getelementptr inbounds i32, i32* %331, i64 40
  %366 = bitcast i32* %365 to <8 x i32>*
  %367 = load <8 x i32>, <8 x i32>* %366, align 32, !alias.scope !171, !noalias !174
  %368 = icmp eq <8 x i32> %367, zeroinitializer
  %369 = zext <8 x i1> %368 to <8 x i32>
  %370 = sub nsw <8 x i32> %364, %369
  %371 = getelementptr inbounds i32, i32* %331, i64 48
  %372 = bitcast i32* %371 to <8 x i32>*
  %373 = load <8 x i32>, <8 x i32>* %372, align 32, !alias.scope !171, !noalias !174
  %374 = icmp eq <8 x i32> %373, zeroinitializer
  %375 = zext <8 x i1> %374 to <8 x i32>
  %376 = sub nsw <8 x i32> %370, %375
  %377 = getelementptr inbounds i32, i32* %331, i64 56
  %378 = bitcast i32* %377 to <8 x i32>*
  %379 = load <8 x i32>, <8 x i32>* %378, align 32, !alias.scope !171, !noalias !174
  %380 = icmp eq <8 x i32> %379, zeroinitializer
  %381 = zext <8 x i1> %380 to <8 x i32>
  %382 = sub <8 x i32> %376, %381
  %383 = bitcast <8 x i32> %382 to <4 x i64>
  %384 = shufflevector <4 x i64> %383, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %385 = bitcast <4 x i64> %384 to <8 x i32>
  %386 = add <8 x i32> %382, %385
  %387 = shufflevector <8 x i32> %386, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %388 = add <8 x i32> %387, %386
  %389 = shufflevector <8 x i32> %388, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %390 = add <8 x i32> %389, %388
  %391 = bitcast <8 x i32> %390 to <4 x i64>
  %392 = shufflevector <4 x i64> %391, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %393 = bitcast <2 x i64> %392 to <4 x i32>
  %394 = extractelement <4 x i32> %393, i32 0
  %395 = add nsw i32 %394, 64
  store i32 %395, i32* %334, align 4, !alias.scope !176, !noalias !177
  br label %561

396:                                              ; preds = %326
  br i1 %270, label %403, label %397

397:                                              ; preds = %396, %408
  %398 = phi i64 [ %411, %408 ], [ 0, %396 ]
  %399 = phi <4 x i64> [ %410, %408 ], [ zeroinitializer, %396 ]
  %400 = phi <8 x i32> [ %409, %408 ], [ zeroinitializer, %396 ]
  br i1 %272, label %408, label %401

401:                                              ; preds = %397
  %402 = mul nuw nsw i64 %398, %271
  br label %413

403:                                              ; preds = %408, %396
  %404 = phi <8 x i32> [ zeroinitializer, %396 ], [ %409, %408 ]
  %405 = phi <4 x i64> [ zeroinitializer, %396 ], [ %410, %408 ]
  br i1 %274, label %431, label %437

406:                                              ; preds = %413
  %407 = bitcast <8 x i32> %428 to <4 x i64>
  br label %408

408:                                              ; preds = %406, %397
  %409 = phi <8 x i32> [ %428, %406 ], [ %400, %397 ]
  %410 = phi <4 x i64> [ %407, %406 ], [ %399, %397 ]
  %411 = add nuw nsw i64 %398, 1
  %412 = icmp eq i64 %411, %263
  br i1 %412, label %403, label %397

413:                                              ; preds = %413, %401
  %414 = phi i64 [ 0, %401 ], [ %429, %413 ]
  %415 = phi <8 x i32> [ %400, %401 ], [ %428, %413 ]
  %416 = getelementptr inbounds i32, i32* %269, i64 %414
  %417 = bitcast i32* %416 to <4 x i64>*
  %418 = load <4 x i64>, <4 x i64>* %417, align 4, !alias.scope !178, !noalias !181
  %419 = add nuw nsw i64 %414, %402
  %420 = getelementptr inbounds i32, i32* %331, i64 %419
  %421 = bitcast i32* %420 to <4 x i64>*
  %422 = load <4 x i64>, <4 x i64>* %421, align 32, !alias.scope !186, !noalias !189
  %423 = xor <4 x i64> %418, <i64 -1, i64 -1, i64 -1, i64 -1>
  %424 = and <4 x i64> %422, %423
  %425 = bitcast <4 x i64> %424 to <8 x i32>
  %426 = icmp eq <8 x i32> %425, zeroinitializer
  %427 = zext <8 x i1> %426 to <8 x i32>
  %428 = sub <8 x i32> %415, %427
  %429 = add nuw nsw i64 %414, 8
  %430 = icmp ult i64 %429, %271
  br i1 %430, label %413, label %406

431:                                              ; preds = %403, %466
  %432 = phi i64 [ %469, %466 ], [ %263, %403 ]
  %433 = phi <4 x i64> [ %468, %466 ], [ %405, %403 ]
  %434 = phi <8 x i32> [ %467, %466 ], [ %404, %403 ]
  br i1 %272, label %466, label %435

435:                                              ; preds = %431
  %436 = mul i64 %432, %271
  br label %471

437:                                              ; preds = %466, %403
  %438 = phi <8 x i32> [ %404, %403 ], [ %467, %466 ]
  %439 = phi <4 x i64> [ %405, %403 ], [ %468, %466 ]
  %440 = shufflevector <4 x i64> %439, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %441 = bitcast <4 x i64> %440 to <8 x i32>
  %442 = add <8 x i32> %438, %441
  %443 = shufflevector <8 x i32> %442, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %444 = add <8 x i32> %443, %442
  %445 = shufflevector <8 x i32> %444, <8 x i32> undef, <8 x i32> <i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %446 = add <8 x i32> %445, %444
  %447 = bitcast <8 x i32> %446 to <4 x i64>
  %448 = shufflevector <4 x i64> %447, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %449 = bitcast <2 x i64> %448 to <4 x i32>
  %450 = extractelement <4 x i32> %449, i32 0
  %451 = add nsw i32 %450, %277
  %452 = sext i32 %451 to i64
  %453 = add nsw i64 %278, %452
  %454 = lshr i64 %453, %259
  %455 = trunc i64 %454 to i32
  %456 = insertelement <16 x i32> undef, i32 %455, i32 0
  %457 = shufflevector <16 x i32> %456, <16 x i32> undef, <16 x i32> zeroinitializer
  %458 = insertelement <16 x i32> undef, i32 %455, i32 0
  %459 = shufflevector <16 x i32> %458, <16 x i32> undef, <16 x i32> zeroinitializer
  %460 = insertelement <16 x i32> undef, i32 %455, i32 0
  %461 = shufflevector <16 x i32> %460, <16 x i32> undef, <16 x i32> zeroinitializer
  %462 = insertelement <16 x i32> undef, i32 %455, i32 0
  %463 = shufflevector <16 x i32> %462, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %483

464:                                              ; preds = %471
  %465 = bitcast <8 x i32> %480 to <4 x i64>
  br label %466

466:                                              ; preds = %464, %431
  %467 = phi <8 x i32> [ %480, %464 ], [ %434, %431 ]
  %468 = phi <4 x i64> [ %465, %464 ], [ %433, %431 ]
  %469 = add nuw i64 %432, 1
  %470 = icmp eq i64 %469, %273
  br i1 %470, label %437, label %431

471:                                              ; preds = %471, %435
  %472 = phi i64 [ 0, %435 ], [ %481, %471 ]
  %473 = phi <8 x i32> [ %434, %435 ], [ %480, %471 ]
  %474 = add i64 %472, %436
  %475 = getelementptr inbounds i32, i32* %331, i64 %474
  %476 = bitcast i32* %475 to <8 x i32>*
  %477 = load <8 x i32>, <8 x i32>* %476, align 32, !alias.scope !191, !noalias !194
  %478 = icmp eq <8 x i32> %477, zeroinitializer
  %479 = zext <8 x i1> %478 to <8 x i32>
  %480 = sub <8 x i32> %473, %479
  %481 = add nuw nsw i64 %472, 8
  %482 = icmp ult i64 %481, %271
  br i1 %482, label %471, label %464

483:                                              ; preds = %552, %437
  %484 = phi i64 [ 0, %437 ], [ %553, %552 ]
  %485 = mul i64 %484, %59
  br i1 %290, label %486, label %488

486:                                              ; preds = %551, %483
  %487 = phi i64 [ 0, %483 ], [ %291, %551 ]
  br label %555

488:                                              ; preds = %483
  br i1 %293, label %534, label %489

489:                                              ; preds = %488, %489
  %490 = phi i64 [ %531, %489 ], [ 0, %488 ]
  %491 = phi i64 [ %532, %489 ], [ %294, %488 ]
  %492 = add i64 %490, %485
  %493 = getelementptr inbounds i32, i32* %334, i64 %492
  %494 = bitcast i32* %493 to <16 x i32>*
  store <16 x i32> %457, <16 x i32>* %494, align 4, !alias.scope !196, !noalias !197
  %495 = getelementptr inbounds i32, i32* %493, i64 16
  %496 = bitcast i32* %495 to <16 x i32>*
  store <16 x i32> %459, <16 x i32>* %496, align 4, !alias.scope !196, !noalias !197
  %497 = getelementptr inbounds i32, i32* %493, i64 32
  %498 = bitcast i32* %497 to <16 x i32>*
  store <16 x i32> %461, <16 x i32>* %498, align 4, !alias.scope !196, !noalias !197
  %499 = getelementptr inbounds i32, i32* %493, i64 48
  %500 = bitcast i32* %499 to <16 x i32>*
  store <16 x i32> %463, <16 x i32>* %500, align 4, !alias.scope !196, !noalias !197
  %501 = or i64 %490, 64
  %502 = add i64 %501, %485
  %503 = getelementptr inbounds i32, i32* %334, i64 %502
  %504 = bitcast i32* %503 to <16 x i32>*
  store <16 x i32> %457, <16 x i32>* %504, align 4, !alias.scope !196, !noalias !197
  %505 = getelementptr inbounds i32, i32* %503, i64 16
  %506 = bitcast i32* %505 to <16 x i32>*
  store <16 x i32> %459, <16 x i32>* %506, align 4, !alias.scope !196, !noalias !197
  %507 = getelementptr inbounds i32, i32* %503, i64 32
  %508 = bitcast i32* %507 to <16 x i32>*
  store <16 x i32> %461, <16 x i32>* %508, align 4, !alias.scope !196, !noalias !197
  %509 = getelementptr inbounds i32, i32* %503, i64 48
  %510 = bitcast i32* %509 to <16 x i32>*
  store <16 x i32> %463, <16 x i32>* %510, align 4, !alias.scope !196, !noalias !197
  %511 = or i64 %490, 128
  %512 = add i64 %511, %485
  %513 = getelementptr inbounds i32, i32* %334, i64 %512
  %514 = bitcast i32* %513 to <16 x i32>*
  store <16 x i32> %457, <16 x i32>* %514, align 4, !alias.scope !196, !noalias !197
  %515 = getelementptr inbounds i32, i32* %513, i64 16
  %516 = bitcast i32* %515 to <16 x i32>*
  store <16 x i32> %459, <16 x i32>* %516, align 4, !alias.scope !196, !noalias !197
  %517 = getelementptr inbounds i32, i32* %513, i64 32
  %518 = bitcast i32* %517 to <16 x i32>*
  store <16 x i32> %461, <16 x i32>* %518, align 4, !alias.scope !196, !noalias !197
  %519 = getelementptr inbounds i32, i32* %513, i64 48
  %520 = bitcast i32* %519 to <16 x i32>*
  store <16 x i32> %463, <16 x i32>* %520, align 4, !alias.scope !196, !noalias !197
  %521 = or i64 %490, 192
  %522 = add i64 %521, %485
  %523 = getelementptr inbounds i32, i32* %334, i64 %522
  %524 = bitcast i32* %523 to <16 x i32>*
  store <16 x i32> %457, <16 x i32>* %524, align 4, !alias.scope !196, !noalias !197
  %525 = getelementptr inbounds i32, i32* %523, i64 16
  %526 = bitcast i32* %525 to <16 x i32>*
  store <16 x i32> %459, <16 x i32>* %526, align 4, !alias.scope !196, !noalias !197
  %527 = getelementptr inbounds i32, i32* %523, i64 32
  %528 = bitcast i32* %527 to <16 x i32>*
  store <16 x i32> %461, <16 x i32>* %528, align 4, !alias.scope !196, !noalias !197
  %529 = getelementptr inbounds i32, i32* %523, i64 48
  %530 = bitcast i32* %529 to <16 x i32>*
  store <16 x i32> %463, <16 x i32>* %530, align 4, !alias.scope !196, !noalias !197
  %531 = add i64 %490, 256
  %532 = add i64 %491, -4
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %489, !llvm.loop !198

534:                                              ; preds = %489, %488
  %535 = phi i64 [ 0, %488 ], [ %531, %489 ]
  br i1 %295, label %551, label %536

536:                                              ; preds = %534, %536
  %537 = phi i64 [ %548, %536 ], [ %535, %534 ]
  %538 = phi i64 [ %549, %536 ], [ %292, %534 ]
  %539 = add i64 %537, %485
  %540 = getelementptr inbounds i32, i32* %334, i64 %539
  %541 = bitcast i32* %540 to <16 x i32>*
  store <16 x i32> %457, <16 x i32>* %541, align 4, !alias.scope !196, !noalias !197
  %542 = getelementptr inbounds i32, i32* %540, i64 16
  %543 = bitcast i32* %542 to <16 x i32>*
  store <16 x i32> %459, <16 x i32>* %543, align 4, !alias.scope !196, !noalias !197
  %544 = getelementptr inbounds i32, i32* %540, i64 32
  %545 = bitcast i32* %544 to <16 x i32>*
  store <16 x i32> %461, <16 x i32>* %545, align 4, !alias.scope !196, !noalias !197
  %546 = getelementptr inbounds i32, i32* %540, i64 48
  %547 = bitcast i32* %546 to <16 x i32>*
  store <16 x i32> %463, <16 x i32>* %547, align 4, !alias.scope !196, !noalias !197
  %548 = add i64 %537, 64
  %549 = add i64 %538, -1
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %536, !llvm.loop !199

551:                                              ; preds = %536, %534
  br i1 %296, label %552, label %486

552:                                              ; preds = %555, %551
  %553 = add nuw nsw i64 %484, 1
  %554 = icmp ult i64 %553, %257
  br i1 %554, label %483, label %561

555:                                              ; preds = %486, %555
  %556 = phi i64 [ %559, %555 ], [ %487, %486 ]
  %557 = add i64 %556, %485
  %558 = getelementptr inbounds i32, i32* %334, i64 %557
  store i32 %455, i32* %558, align 4, !alias.scope !196, !noalias !197
  %559 = add nuw nsw i64 %556, 1
  %560 = icmp ult i64 %559, %254
  br i1 %560, label %555, label %552, !llvm.loop !200

561:                                              ; preds = %552, %335
  %562 = phi i32 [ %395, %335 ], [ %451, %552 ]
  %563 = load i8, i8* %279, align 1
  %564 = zext i8 %563 to i64
  %565 = mul nuw nsw i64 %564, 3
  %566 = add nsw i64 %565, %302
  %567 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %566
  %568 = load i64, i64* %567, align 8
  %569 = shl i64 %568, 6
  %570 = getelementptr inbounds i32, i32* %0, i64 %569
  %571 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 %302
  %572 = load i32*, i32** %571, align 8
  %573 = icmp eq i64 %304, 0
  %574 = icmp eq i32* %572, null
  br i1 %573, label %575, label %578

575:                                              ; preds = %561
  br i1 %574, label %592, label %576

576:                                              ; preds = %575
  %577 = load i32, i32* %572, align 4, !alias.scope !201, !noalias !204
  br label %592

578:                                              ; preds = %561
  br i1 %574, label %579, label %583

579:                                              ; preds = %578
  %580 = add i64 %304, -1
  %581 = getelementptr inbounds i32, i32* %333, i64 %580
  %582 = load i32, i32* %581, align 4, !alias.scope !204, !noalias !201
  br label %592

583:                                              ; preds = %578
  %584 = getelementptr inbounds i32, i32* %572, i64 %304
  %585 = load i32, i32* %584, align 4, !alias.scope !201, !noalias !204
  %586 = add i64 %304, -1
  %587 = getelementptr inbounds i32, i32* %333, i64 %586
  %588 = load i32, i32* %587, align 4, !alias.scope !204, !noalias !201
  %589 = add i32 %585, 1
  %590 = add i32 %589, %588
  %591 = sdiv i32 %590, 2
  br label %592

592:                                              ; preds = %575, %576, %579, %583
  %593 = phi i32 [ %582, %579 ], [ %591, %583 ], [ %577, %576 ], [ 32, %575 ]
  %594 = load i8, i8* %280, align 1
  %595 = getelementptr inbounds i32, i32* %208, i64 %304
  %596 = load i32, i32* %595, align 4
  %597 = load i32*, i32** %97, align 8
  %598 = ptrtoint i32* %597 to i64
  %599 = load i32*, i32** %98, align 8
  %600 = icmp eq i32* %597, %599
  %601 = ptrtoint i32* %599 to i64
  br i1 %600, label %674, label %602

602:                                              ; preds = %592
  %603 = getelementptr i32, i32* %599, i64 -1
  %604 = ptrtoint i32* %603 to i64
  %605 = sub i64 %604, %598
  %606 = lshr i64 %605, 2
  %607 = add nuw nsw i64 %606, 1
  %608 = icmp ult i64 %607, 16
  br i1 %608, label %662, label %609

609:                                              ; preds = %602
  %610 = and i64 %607, 9223372036854775792
  %611 = getelementptr i32, i32* %597, i64 %610
  %612 = insertelement <4 x i32> undef, i32 %596, i32 0
  %613 = shufflevector <4 x i32> %612, <4 x i32> undef, <4 x i32> zeroinitializer
  %614 = insertelement <4 x i32> undef, i32 %596, i32 0
  %615 = shufflevector <4 x i32> %614, <4 x i32> undef, <4 x i32> zeroinitializer
  %616 = insertelement <4 x i32> undef, i32 %596, i32 0
  %617 = shufflevector <4 x i32> %616, <4 x i32> undef, <4 x i32> zeroinitializer
  %618 = insertelement <4 x i32> undef, i32 %596, i32 0
  %619 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %620

620:                                              ; preds = %620, %609
  %621 = phi i64 [ 0, %609 ], [ %650, %620 ]
  %622 = phi <4 x i64> [ zeroinitializer, %609 ], [ %646, %620 ]
  %623 = phi <4 x i64> [ zeroinitializer, %609 ], [ %647, %620 ]
  %624 = phi <4 x i64> [ zeroinitializer, %609 ], [ %648, %620 ]
  %625 = phi <4 x i64> [ zeroinitializer, %609 ], [ %649, %620 ]
  %626 = getelementptr i32, i32* %597, i64 %621
  %627 = bitcast i32* %626 to <4 x i32>*
  %628 = load <4 x i32>, <4 x i32>* %627, align 4
  %629 = getelementptr i32, i32* %626, i64 4
  %630 = bitcast i32* %629 to <4 x i32>*
  %631 = load <4 x i32>, <4 x i32>* %630, align 4
  %632 = getelementptr i32, i32* %626, i64 8
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4
  %635 = getelementptr i32, i32* %626, i64 12
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4
  %638 = icmp ult <4 x i32> %628, %613
  %639 = icmp ult <4 x i32> %631, %615
  %640 = icmp ult <4 x i32> %634, %617
  %641 = icmp ult <4 x i32> %637, %619
  %642 = zext <4 x i1> %638 to <4 x i64>
  %643 = zext <4 x i1> %639 to <4 x i64>
  %644 = zext <4 x i1> %640 to <4 x i64>
  %645 = zext <4 x i1> %641 to <4 x i64>
  %646 = add <4 x i64> %622, %642
  %647 = add <4 x i64> %623, %643
  %648 = add <4 x i64> %624, %644
  %649 = add <4 x i64> %625, %645
  %650 = add i64 %621, 16
  %651 = icmp eq i64 %650, %610
  br i1 %651, label %652, label %620, !llvm.loop !206

652:                                              ; preds = %620
  %653 = add <4 x i64> %647, %646
  %654 = add <4 x i64> %648, %653
  %655 = add <4 x i64> %649, %654
  %656 = shufflevector <4 x i64> %655, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %657 = add <4 x i64> %655, %656
  %658 = shufflevector <4 x i64> %657, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %659 = add <4 x i64> %657, %658
  %660 = extractelement <4 x i64> %659, i32 0
  %661 = icmp eq i64 %607, %610
  br i1 %661, label %674, label %662

662:                                              ; preds = %652, %602
  %663 = phi i64 [ 0, %602 ], [ %660, %652 ]
  %664 = phi i32* [ %597, %602 ], [ %611, %652 ]
  br label %665

665:                                              ; preds = %662, %665
  %666 = phi i64 [ %671, %665 ], [ %663, %662 ]
  %667 = phi i32* [ %672, %665 ], [ %664, %662 ]
  %668 = load i32, i32* %667, align 4
  %669 = icmp ult i32 %668, %596
  %670 = zext i1 %669 to i64
  %671 = add i64 %666, %670
  %672 = getelementptr inbounds i32, i32* %667, i64 1
  %673 = icmp eq i32* %672, %599
  br i1 %673, label %674, label %665, !llvm.loop !207

674:                                              ; preds = %665, %652, %592
  %675 = phi i64 [ 0, %592 ], [ %660, %652 ], [ %671, %665 ]
  %676 = icmp ult i32 %301, 2
  %677 = xor i64 %302, 1
  %678 = mul nsw i64 %677, 13
  %679 = select i1 %676, i64 %678, i64 26
  %680 = add nsw i64 %679, %564
  %681 = sub i64 %601, %598
  %682 = ashr exact i64 %681, 2
  %683 = add nsw i64 %682, 1
  %684 = mul i64 %683, %680
  %685 = add i64 %675, %684
  %686 = load i64, i64* %99, align 8
  %687 = mul i64 %685, %686
  %688 = zext i8 %594 to i64
  %689 = add i64 %687, %688
  %690 = load i8*, i8** %100, align 8
  %691 = getelementptr inbounds i8, i8* %690, i64 %689
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = icmp ult i32 %593, 64
  %695 = select i1 %694, i32 %593, i32 64
  %696 = icmp ult i32 %695, 8
  %697 = lshr i32 %695, 1
  %698 = add nuw nsw i32 %697, 4
  %699 = select i1 %696, i32 %695, i32 %698
  %700 = load i64, i64* %101, align 8
  %701 = trunc i64 %700 to i32
  %702 = mul i32 %699, %701
  %703 = add i32 %702, %693
  %704 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %705 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %706 = icmp ult %"struct.jxl::Token"* %704, %705
  %707 = ptrtoint %"struct.jxl::Token"* %705 to i64
  br i1 %706, label %708, label %714

708:                                              ; preds = %674
  %709 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 0, i32 0
  %710 = shl i32 %703, 1
  store i32 %710, i32* %709, align 4
  %711 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 0, i32 1
  store i32 %562, i32* %711, align 4
  %712 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %704, i64 1
  %713 = ptrtoint %"struct.jxl::Token"* %712 to i64
  store i64 %713, i64* %21, align 8
  br label %760

714:                                              ; preds = %674
  %715 = ptrtoint %"struct.jxl::Token"* %704 to i64
  %716 = load i64, i64* %23, align 8
  %717 = sub i64 %715, %716
  %718 = ashr exact i64 %717, 3
  %719 = add nsw i64 %718, 1
  %720 = icmp ugt i64 %719, 2305843009213693951
  br i1 %720, label %721, label %723

721:                                              ; preds = %714
  %722 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %722) #13
  unreachable

723:                                              ; preds = %714
  %724 = sub i64 %707, %716
  %725 = ashr exact i64 %724, 3
  %726 = icmp ult i64 %725, 1152921504606846975
  br i1 %726, label %727, label %735

727:                                              ; preds = %723
  %728 = ashr exact i64 %724, 2
  %729 = icmp ult i64 %728, %719
  %730 = select i1 %729, i64 %719, i64 %728
  %731 = icmp eq i64 %730, 0
  br i1 %731, label %740, label %732

732:                                              ; preds = %727
  %733 = icmp ugt i64 %730, 2305843009213693951
  br i1 %733, label %734, label %735

734:                                              ; preds = %732
  tail call void @abort() #13
  unreachable

735:                                              ; preds = %732, %723
  %736 = phi i64 [ %730, %732 ], [ 2305843009213693951, %723 ]
  %737 = shl i64 %736, 3
  %738 = tail call i8* @_Znwm(i64 %737) #14
  %739 = bitcast i8* %738 to %"struct.jxl::Token"*
  br label %740

740:                                              ; preds = %735, %727
  %741 = phi i64 [ %736, %735 ], [ 0, %727 ]
  %742 = phi i8* [ %738, %735 ], [ null, %727 ]
  %743 = phi %"struct.jxl::Token"* [ %739, %735 ], [ null, %727 ]
  %744 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %718
  %745 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %741
  %746 = ptrtoint %"struct.jxl::Token"* %745 to i64
  %747 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %744, i64 0, i32 0
  %748 = shl i32 %703, 1
  store i32 %748, i32* %747, align 4
  %749 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %743, i64 %718, i32 1
  store i32 %562, i32* %749, align 4
  %750 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %744, i64 1
  %751 = ptrtoint %"struct.jxl::Token"* %750 to i64
  %752 = ptrtoint %"struct.jxl::Token"* %743 to i64
  %753 = icmp sgt i64 %717, 0
  br i1 %753, label %754, label %756

754:                                              ; preds = %740
  %755 = inttoptr i64 %716 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %742, i8* align 4 %755, i64 %717, i1 false) #9
  br label %756

756:                                              ; preds = %754, %740
  store i64 %752, i64* %23, align 8
  store i64 %751, i64* %21, align 8
  store i64 %746, i64* %31, align 8
  %757 = icmp eq i64 %716, 0
  br i1 %757, label %760, label %758

758:                                              ; preds = %756
  %759 = inttoptr i64 %716 to i8*
  tail call void @_ZdlPv(i8* %759) #14
  br label %760

760:                                              ; preds = %708, %756, %758
  %761 = load i64, i64* %101, align 8
  %762 = mul nuw nsw i32 %693, 458
  %763 = trunc i64 %761 to i32
  %764 = mul i32 %763, 37
  %765 = add i32 %764, %762
  %766 = zext i32 %765 to i64
  %767 = icmp ne i32 %562, 0
  %768 = and i1 %767, %282
  br i1 %768, label %769, label %772

769:                                              ; preds = %760
  %770 = sext i32 %562 to i64
  %771 = icmp sge i64 %281, %770
  br label %774

772:                                              ; preds = %859, %760
  %773 = add i64 %330, %260
  store i64 %773, i64* %329, align 8
  br label %867

774:                                              ; preds = %769, %859
  %775 = phi i64 [ %863, %859 ], [ %258, %769 ]
  %776 = phi i1 [ %860, %859 ], [ %771, %769 ]
  %777 = phi i32 [ %862, %859 ], [ %562, %769 ]
  %778 = zext i1 %776 to i64
  %779 = getelementptr inbounds i32, i32* %570, i64 %775
  %780 = load i32, i32* %779, align 4
  %781 = zext i32 %780 to i64
  %782 = getelementptr inbounds i32, i32* %331, i64 %781
  %783 = load i32, i32* %782, align 4
  %784 = sext i32 %777 to i64
  %785 = add nsw i64 %278, %784
  %786 = lshr i64 %785, %259
  %787 = lshr i64 %775, %259
  %788 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL23kCoeffNumNonzeroContextE, i64 0, i64 %786
  %789 = load i16, i16* %788, align 2
  %790 = zext i16 %789 to i64
  %791 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL17kCoeffFreqContextE, i64 0, i64 %787
  %792 = load i16, i16* %791, align 2
  %793 = zext i16 %792 to i64
  %794 = add nuw nsw i64 %793, %790
  %795 = shl nuw nsw i64 %794, 1
  %796 = or i64 %795, %778
  %797 = add nuw nsw i64 %796, %766
  %798 = shl i32 %783, 1
  %799 = ashr i32 %783, 31
  %800 = xor i32 %798, %799
  %801 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %802 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %803 = icmp ult %"struct.jxl::Token"* %801, %802
  %804 = ptrtoint %"struct.jxl::Token"* %802 to i64
  br i1 %803, label %805, label %812

805:                                              ; preds = %774
  %806 = trunc i64 %797 to i32
  %807 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 0, i32 0
  %808 = shl i32 %806, 1
  store i32 %808, i32* %807, align 4
  %809 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 0, i32 1
  store i32 %800, i32* %809, align 4
  %810 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %801, i64 1
  %811 = ptrtoint %"struct.jxl::Token"* %810 to i64
  store i64 %811, i64* %21, align 8
  br label %859

812:                                              ; preds = %774
  %813 = ptrtoint %"struct.jxl::Token"* %801 to i64
  %814 = load i64, i64* %23, align 8
  %815 = sub i64 %813, %814
  %816 = ashr exact i64 %815, 3
  %817 = add nsw i64 %816, 1
  %818 = icmp ugt i64 %817, 2305843009213693951
  br i1 %818, label %819, label %821

819:                                              ; preds = %812
  %820 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %820) #13
  unreachable

821:                                              ; preds = %812
  %822 = sub i64 %804, %814
  %823 = ashr exact i64 %822, 3
  %824 = icmp ult i64 %823, 1152921504606846975
  br i1 %824, label %825, label %833

825:                                              ; preds = %821
  %826 = ashr exact i64 %822, 2
  %827 = icmp ult i64 %826, %817
  %828 = select i1 %827, i64 %817, i64 %826
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %838, label %830

830:                                              ; preds = %825
  %831 = icmp ugt i64 %828, 2305843009213693951
  br i1 %831, label %832, label %833

832:                                              ; preds = %830
  tail call void @abort() #13
  unreachable

833:                                              ; preds = %830, %821
  %834 = phi i64 [ %828, %830 ], [ 2305843009213693951, %821 ]
  %835 = shl i64 %834, 3
  %836 = tail call i8* @_Znwm(i64 %835) #14
  %837 = bitcast i8* %836 to %"struct.jxl::Token"*
  br label %838

838:                                              ; preds = %833, %825
  %839 = phi i64 [ %834, %833 ], [ 0, %825 ]
  %840 = phi i8* [ %836, %833 ], [ null, %825 ]
  %841 = phi %"struct.jxl::Token"* [ %837, %833 ], [ null, %825 ]
  %842 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %816
  %843 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %839
  %844 = ptrtoint %"struct.jxl::Token"* %843 to i64
  %845 = trunc i64 %797 to i32
  %846 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %842, i64 0, i32 0
  %847 = shl i32 %845, 1
  store i32 %847, i32* %846, align 4
  %848 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %841, i64 %816, i32 1
  store i32 %800, i32* %848, align 4
  %849 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %842, i64 1
  %850 = ptrtoint %"struct.jxl::Token"* %849 to i64
  %851 = ptrtoint %"struct.jxl::Token"* %841 to i64
  %852 = icmp sgt i64 %815, 0
  br i1 %852, label %853, label %855

853:                                              ; preds = %838
  %854 = inttoptr i64 %814 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %840, i8* align 4 %854, i64 %815, i1 false) #9
  br label %855

855:                                              ; preds = %853, %838
  store i64 %851, i64* %23, align 8
  store i64 %850, i64* %21, align 8
  store i64 %844, i64* %31, align 8
  %856 = icmp eq i64 %814, 0
  br i1 %856, label %859, label %857

857:                                              ; preds = %855
  %858 = inttoptr i64 %814 to i8*
  tail call void @_ZdlPv(i8* %858) #14
  br label %859

859:                                              ; preds = %805, %855, %857
  %860 = icmp ne i32 %783, 0
  %861 = zext i1 %860 to i32
  %862 = sub nuw i32 %777, %861
  %863 = add nuw nsw i64 %775, 1
  %864 = icmp ult i64 %863, %260
  %865 = icmp ne i32 %862, 0
  %866 = and i1 %865, %864
  br i1 %866, label %774, label %772

867:                                              ; preds = %315, %298, %772
  %868 = getelementptr inbounds i32, i32* %300, i64 1
  %869 = icmp eq i32* %868, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.2, i64 1, i64 0)
  br i1 %869, label %297, label %870

870:                                              ; preds = %867
  %871 = load i8, i8* %96, align 4
  br label %298

872:                                              ; preds = %220, %297
  %873 = add nuw i64 %221, 1
  %874 = icmp eq i64 %873, %17
  br i1 %874, label %217, label %220
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi(i64, i64, i64, i64, i64, i32* noalias nocapture readonly, i64, i32* noalias nocapture) local_unnamed_addr #4 {
  %9 = sub i64 0, %0
  %10 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %9
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %57, label %12

12:                                               ; preds = %8
  %13 = shl i64 %0, 3
  %14 = icmp eq i64 %13, 0
  br label %15

15:                                               ; preds = %71, %12
  %16 = phi i64 [ 0, %12 ], [ %73, %71 ]
  %17 = phi i32 [ 0, %12 ], [ %72, %71 ]
  br i1 %14, label %71, label %18

18:                                               ; preds = %15
  %19 = mul i64 %13, %16
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %17, i32 0
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ 0, %18 ], [ %48, %21 ]
  %23 = phi <4 x i32> [ %20, %18 ], [ %46, %21 ]
  %24 = phi <4 x i32> [ zeroinitializer, %18 ], [ %47, %21 ]
  %25 = getelementptr inbounds i32, i32* %10, i64 %22
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 4, !alias.scope !208
  %28 = getelementptr inbounds i32, i32* %25, i64 4
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 4, !alias.scope !208
  %31 = add i64 %22, %19
  %32 = getelementptr inbounds i32, i32* %5, i64 %31
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4, !alias.scope !213
  %35 = getelementptr inbounds i32, i32* %32, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4, !alias.scope !213
  %38 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %39 = xor <4 x i32> %30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %40 = and <4 x i32> %34, %38
  %41 = and <4 x i32> %37, %39
  %42 = icmp eq <4 x i32> %40, zeroinitializer
  %43 = icmp eq <4 x i32> %41, zeroinitializer
  %44 = zext <4 x i1> %42 to <4 x i32>
  %45 = zext <4 x i1> %43 to <4 x i32>
  %46 = sub <4 x i32> %23, %44
  %47 = sub <4 x i32> %24, %45
  %48 = add i64 %22, 8
  %49 = icmp eq i64 %48, %13
  br i1 %49, label %50, label %21, !llvm.loop !216

50:                                               ; preds = %21
  %51 = add <4 x i32> %47, %46
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %53 = add <4 x i32> %51, %52
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %55 = add <4 x i32> %53, %54
  %56 = extractelement <4 x i32> %55, i32 0
  br label %71

57:                                               ; preds = %71, %8
  %58 = phi i32 [ 0, %8 ], [ %72, %71 ]
  %59 = shl i64 %1, 3
  %60 = icmp ugt i64 %59, %1
  br i1 %60, label %61, label %145

61:                                               ; preds = %57
  %62 = shl i64 %0, 3
  %63 = icmp eq i64 %62, 0
  %64 = add i64 %62, -8
  %65 = lshr exact i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 1
  %68 = icmp eq i64 %64, 0
  %69 = sub nuw nsw i64 %66, %67
  %70 = icmp eq i64 %67, 0
  br label %75

71:                                               ; preds = %50, %15
  %72 = phi i32 [ %17, %15 ], [ %56, %50 ]
  %73 = add nuw i64 %16, 1
  %74 = icmp eq i64 %73, %1
  br i1 %74, label %57, label %15

75:                                               ; preds = %180, %61
  %76 = phi i64 [ %1, %61 ], [ %182, %180 ]
  %77 = phi i32 [ %58, %61 ], [ %181, %180 ]
  br i1 %63, label %180, label %78

78:                                               ; preds = %75
  %79 = mul i64 %62, %76
  %80 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %77, i32 0
  br i1 %68, label %116, label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ %113, %81 ], [ 0, %78 ]
  %83 = phi <4 x i32> [ %111, %81 ], [ %80, %78 ]
  %84 = phi <4 x i32> [ %112, %81 ], [ zeroinitializer, %78 ]
  %85 = phi i64 [ %114, %81 ], [ %69, %78 ]
  %86 = add i64 %82, %79
  %87 = getelementptr inbounds i32, i32* %5, i64 %86
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !217
  %90 = getelementptr inbounds i32, i32* %87, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !217
  %93 = icmp eq <4 x i32> %89, zeroinitializer
  %94 = icmp eq <4 x i32> %92, zeroinitializer
  %95 = zext <4 x i1> %93 to <4 x i32>
  %96 = zext <4 x i1> %94 to <4 x i32>
  %97 = sub <4 x i32> %83, %95
  %98 = sub <4 x i32> %84, %96
  %99 = or i64 %82, 8
  %100 = add i64 %99, %79
  %101 = getelementptr inbounds i32, i32* %5, i64 %100
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !217
  %104 = getelementptr inbounds i32, i32* %101, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !217
  %107 = icmp eq <4 x i32> %103, zeroinitializer
  %108 = icmp eq <4 x i32> %106, zeroinitializer
  %109 = zext <4 x i1> %107 to <4 x i32>
  %110 = zext <4 x i1> %108 to <4 x i32>
  %111 = sub <4 x i32> %97, %109
  %112 = sub <4 x i32> %98, %110
  %113 = add i64 %82, 16
  %114 = add i64 %85, -2
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %81, !llvm.loop !220

116:                                              ; preds = %81, %78
  %117 = phi <4 x i32> [ undef, %78 ], [ %111, %81 ]
  %118 = phi <4 x i32> [ undef, %78 ], [ %112, %81 ]
  %119 = phi i64 [ 0, %78 ], [ %113, %81 ]
  %120 = phi <4 x i32> [ %80, %78 ], [ %111, %81 ]
  %121 = phi <4 x i32> [ zeroinitializer, %78 ], [ %112, %81 ]
  br i1 %70, label %136, label %122

122:                                              ; preds = %116
  %123 = add i64 %119, %79
  %124 = getelementptr inbounds i32, i32* %5, i64 %123
  %125 = getelementptr inbounds i32, i32* %124, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !217
  %128 = icmp eq <4 x i32> %127, zeroinitializer
  %129 = zext <4 x i1> %128 to <4 x i32>
  %130 = sub <4 x i32> %121, %129
  %131 = bitcast i32* %124 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !217
  %133 = icmp eq <4 x i32> %132, zeroinitializer
  %134 = zext <4 x i1> %133 to <4 x i32>
  %135 = sub <4 x i32> %120, %134
  br label %136

136:                                              ; preds = %116, %122
  %137 = phi <4 x i32> [ %117, %116 ], [ %135, %122 ]
  %138 = phi <4 x i32> [ %118, %116 ], [ %130, %122 ]
  %139 = add <4 x i32> %138, %137
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %141 = add <4 x i32> %139, %140
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %143 = add <4 x i32> %141, %142
  %144 = extractelement <4 x i32> %143, i32 0
  br label %180

145:                                              ; preds = %180, %57
  %146 = phi i32 [ %58, %57 ], [ %181, %180 ]
  %147 = mul i64 %1, %0
  %148 = trunc i64 %147 to i32
  %149 = shl i32 %148, 6
  %150 = add nsw i32 %146, %149
  %151 = sext i32 %150 to i64
  %152 = add i64 %3, -1
  %153 = add i64 %152, %151
  %154 = lshr i64 %153, %4
  %155 = trunc i64 %154 to i32
  %156 = and i64 %2, 4294967295
  %157 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %156
  %158 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %156
  %159 = load i8, i8* %157, align 1
  %160 = zext i8 %159 to i64
  %161 = load i8, i8* %158, align 1
  %162 = zext i8 %161 to i64
  %163 = icmp ugt i64 %162, 1
  %164 = select i1 %163, i64 %162, i64 1
  %165 = and i64 %164, 248
  %166 = add nsw i64 %165, -8
  %167 = lshr exact i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = icmp ult i64 %164, 8
  %170 = and i64 %164, 248
  %171 = insertelement <4 x i32> undef, i32 %155, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> zeroinitializer
  %173 = insertelement <4 x i32> undef, i32 %155, i32 0
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> zeroinitializer
  %175 = and i64 %168, 3
  %176 = icmp ult i64 %166, 24
  %177 = sub nsw i64 %168, %175
  %178 = icmp eq i64 %175, 0
  %179 = icmp eq i64 %164, %170
  br label %184

180:                                              ; preds = %136, %75
  %181 = phi i32 [ %77, %75 ], [ %144, %136 ]
  %182 = add nuw i64 %76, 1
  %183 = icmp eq i64 %182, %59
  br i1 %183, label %145, label %75

184:                                              ; preds = %234, %145
  %185 = phi i64 [ 0, %145 ], [ %235, %234 ]
  %186 = mul i64 %185, %6
  br i1 %169, label %187, label %189

187:                                              ; preds = %232, %184
  %188 = phi i64 [ 0, %184 ], [ %170, %232 ]
  br label %237

189:                                              ; preds = %184
  br i1 %176, label %219, label %190

190:                                              ; preds = %189, %190
  %191 = phi i64 [ %216, %190 ], [ 0, %189 ]
  %192 = phi i64 [ %217, %190 ], [ %177, %189 ]
  %193 = add i64 %191, %186
  %194 = getelementptr inbounds i32, i32* %7, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %195, align 4
  %196 = getelementptr inbounds i32, i32* %194, i64 4
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %197, align 4
  %198 = or i64 %191, 8
  %199 = add i64 %198, %186
  %200 = getelementptr inbounds i32, i32* %7, i64 %199
  %201 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %201, align 4
  %202 = getelementptr inbounds i32, i32* %200, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %203, align 4
  %204 = or i64 %191, 16
  %205 = add i64 %204, %186
  %206 = getelementptr inbounds i32, i32* %7, i64 %205
  %207 = bitcast i32* %206 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %207, align 4
  %208 = getelementptr inbounds i32, i32* %206, i64 4
  %209 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %209, align 4
  %210 = or i64 %191, 24
  %211 = add i64 %210, %186
  %212 = getelementptr inbounds i32, i32* %7, i64 %211
  %213 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %213, align 4
  %214 = getelementptr inbounds i32, i32* %212, i64 4
  %215 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %215, align 4
  %216 = add i64 %191, 32
  %217 = add i64 %192, -4
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %190, !llvm.loop !221

219:                                              ; preds = %190, %189
  %220 = phi i64 [ 0, %189 ], [ %216, %190 ]
  br i1 %178, label %232, label %221

221:                                              ; preds = %219, %221
  %222 = phi i64 [ %229, %221 ], [ %220, %219 ]
  %223 = phi i64 [ %230, %221 ], [ %175, %219 ]
  %224 = add i64 %222, %186
  %225 = getelementptr inbounds i32, i32* %7, i64 %224
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %226, align 4
  %227 = getelementptr inbounds i32, i32* %225, i64 4
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %228, align 4
  %229 = add i64 %222, 8
  %230 = add i64 %223, -1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %221, !llvm.loop !222

232:                                              ; preds = %221, %219
  br i1 %179, label %234, label %187

233:                                              ; preds = %234
  ret i32 %150

234:                                              ; preds = %237, %232
  %235 = add nuw nsw i64 %185, 1
  %236 = icmp ult i64 %235, %160
  br i1 %236, label %184, label %233

237:                                              ; preds = %187, %237
  %238 = phi i64 [ %241, %237 ], [ %188, %187 ]
  %239 = add i64 %238, %186
  %240 = getelementptr inbounds i32, i32* %7, i64 %239
  store i32 %155, i32* %240, align 4
  %241 = add nuw nsw i64 %238, 1
  %242 = icmp ult i64 %241, %162
  br i1 %242, label %237, label %234, !llvm.loop !223
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl8N_SCALAR21NumNonZero8x8ExceptDCEPKiPi(i32* noalias nocapture readonly, i32* noalias nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds i32, i32* %0, i64 1
  %4 = load i32, i32* %3, align 4, !alias.scope !224
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i32
  %7 = xor i32 %6, -1
  %8 = getelementptr inbounds i32, i32* %0, i64 2
  %9 = load i32, i32* %8, align 4, !alias.scope !224
  %10 = icmp eq i32 %9, 0
  %11 = zext i1 %10 to i32
  %12 = sub nuw nsw i32 %7, %11
  %13 = getelementptr inbounds i32, i32* %0, i64 3
  %14 = load i32, i32* %13, align 4, !alias.scope !224
  %15 = icmp eq i32 %14, 0
  %16 = zext i1 %15 to i32
  %17 = sub nuw nsw i32 %12, %16
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4, !alias.scope !224
  %20 = icmp eq i32 %19, 0
  %21 = zext i1 %20 to i32
  %22 = sub nuw nsw i32 %17, %21
  %23 = getelementptr inbounds i32, i32* %0, i64 5
  %24 = load i32, i32* %23, align 4, !alias.scope !224
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  %27 = sub nuw nsw i32 %22, %26
  %28 = getelementptr inbounds i32, i32* %0, i64 6
  %29 = load i32, i32* %28, align 4, !alias.scope !224
  %30 = icmp eq i32 %29, 0
  %31 = zext i1 %30 to i32
  %32 = sub nuw nsw i32 %27, %31
  %33 = getelementptr inbounds i32, i32* %0, i64 7
  %34 = load i32, i32* %33, align 4, !alias.scope !224
  %35 = icmp eq i32 %34, 0
  %36 = zext i1 %35 to i32
  %37 = sub i32 %32, %36
  br label %38

38:                                               ; preds = %38, %2
  %39 = phi i64 [ %89, %38 ], [ 1, %2 ]
  %40 = phi i32 [ %88, %38 ], [ %37, %2 ]
  %41 = shl i64 %39, 3
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = load i32, i32* %42, align 4, !alias.scope !227
  %44 = icmp eq i32 %43, 0
  %45 = zext i1 %44 to i32
  %46 = sub i32 %40, %45
  %47 = or i64 %41, 1
  %48 = getelementptr inbounds i32, i32* %0, i64 %47
  %49 = load i32, i32* %48, align 4, !alias.scope !227
  %50 = icmp eq i32 %49, 0
  %51 = zext i1 %50 to i32
  %52 = sub i32 %46, %51
  %53 = or i64 %41, 2
  %54 = getelementptr inbounds i32, i32* %0, i64 %53
  %55 = load i32, i32* %54, align 4, !alias.scope !227
  %56 = icmp eq i32 %55, 0
  %57 = zext i1 %56 to i32
  %58 = sub i32 %52, %57
  %59 = or i64 %41, 3
  %60 = getelementptr inbounds i32, i32* %0, i64 %59
  %61 = load i32, i32* %60, align 4, !alias.scope !227
  %62 = icmp eq i32 %61, 0
  %63 = zext i1 %62 to i32
  %64 = sub i32 %58, %63
  %65 = or i64 %41, 4
  %66 = getelementptr inbounds i32, i32* %0, i64 %65
  %67 = load i32, i32* %66, align 4, !alias.scope !227
  %68 = icmp eq i32 %67, 0
  %69 = zext i1 %68 to i32
  %70 = sub i32 %64, %69
  %71 = or i64 %41, 5
  %72 = getelementptr inbounds i32, i32* %0, i64 %71
  %73 = load i32, i32* %72, align 4, !alias.scope !227
  %74 = icmp eq i32 %73, 0
  %75 = zext i1 %74 to i32
  %76 = sub i32 %70, %75
  %77 = or i64 %41, 6
  %78 = getelementptr inbounds i32, i32* %0, i64 %77
  %79 = load i32, i32* %78, align 4, !alias.scope !227
  %80 = icmp eq i32 %79, 0
  %81 = zext i1 %80 to i32
  %82 = sub i32 %76, %81
  %83 = or i64 %41, 7
  %84 = getelementptr inbounds i32, i32* %0, i64 %83
  %85 = load i32, i32* %84, align 4, !alias.scope !227
  %86 = icmp eq i32 %85, 0
  %87 = zext i1 %86 to i32
  %88 = sub i32 %82, %87
  %89 = add nuw nsw i64 %39, 1
  %90 = icmp eq i64 %89, 8
  br i1 %90, label %91, label %38

91:                                               ; preds = %38
  %92 = add nsw i32 %88, 64
  store i32 %92, i32* %1, align 4
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSH_9allocatorISJ_EEEERKNS_5PlaneIhEERKNSO_IiEERKNS_11BlockCtxMapE(i32* noalias nocapture readonly, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), i32** noalias nocapture readonly, %"class.jxl::AcStrategyImage"* nocapture readonly dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"* noalias nocapture readonly, %"class.std::__1::vector"* noalias, %"class.jxl::Plane"* nocapture readonly dereferenceable(32), %"class.jxl::Plane.1"* nocapture readonly dereferenceable(32), %"struct.jxl::BlockCtxMap"* nocapture readonly dereferenceable(136)) #4 {
  %11 = alloca [3 x i64], align 16
  %12 = alloca [3 x i64], align 16
  %13 = alloca [3 x i32*], align 16
  %14 = alloca [3 x i32*], align 16
  %15 = alloca [3 x i64], align 16
  %16 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %21 = bitcast %"struct.jxl::Token"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %6 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 3
  %27 = mul i64 %17, 192
  %28 = mul i64 %27, %19
  %29 = add i64 %26, %28
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::Token"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %32, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, %29
  br i1 %35, label %36, label %55

36:                                               ; preds = %10
  %37 = icmp ugt i64 %29, 2305843009213693951
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #13
  unreachable

39:                                               ; preds = %36
  %40 = shl i64 %29, 3
  %41 = tail call i8* @_Znwm(i64 %40) #14
  %42 = bitcast i8* %41 to %"struct.jxl::Token"*
  %43 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %26
  %44 = ptrtoint %"struct.jxl::Token"* %43 to i64
  %45 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %42, i64 %29
  %46 = ptrtoint %"struct.jxl::Token"* %45 to i64
  %47 = ptrtoint i8* %41 to i64
  %48 = icmp sgt i64 %25, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39
  %50 = inttoptr i64 %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %50, i64 %25, i1 false) #9
  br label %51

51:                                               ; preds = %49, %39
  store i64 %47, i64* %23, align 8
  store i64 %44, i64* %21, align 8
  store i64 %46, i64* %31, align 8
  %52 = icmp eq i64 %24, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %24 to i8*
  tail call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %10, %51, %53
  %56 = bitcast [3 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false)
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %58 = load i64, i64* %57, align 8
  %59 = lshr i64 %58, 2
  %60 = icmp eq i64 %19, 0
  br i1 %60, label %115, label %61

61:                                               ; preds = %55
  %62 = bitcast [3 x i64]* %12 to i8*
  %63 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 0
  %64 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 1
  %65 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 2
  %66 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 3
  %67 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 1
  %69 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 2
  %70 = bitcast [3 x i32*]* %13 to i8*
  %71 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 1
  %72 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 2
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = bitcast [3 x i32*]* %13 to i8**
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = bitcast i32** %71 to i8**
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = bitcast i32** %72 to i8**
  %79 = bitcast [3 x i32*]* %14 to i8*
  %80 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 0
  %81 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 1
  %82 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 2
  %83 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 4
  %86 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %87 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.jxl::Plane.1", %"class.jxl::Plane.1"* %8, i64 0, i32 0, i32 4
  %89 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %3, i64 0, i32 0, i32 0, i32 4
  %91 = icmp eq i64 %17, 0
  %92 = bitcast [3 x i64]* %15 to i8*
  %93 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 0
  %94 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 1
  %95 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 2
  %96 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 2
  %97 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 0
  %98 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 1, i32 0, i32 1
  %99 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 4
  %100 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 2, i32 0, i32 0
  %101 = getelementptr inbounds %"struct.jxl::BlockCtxMap", %"struct.jxl::BlockCtxMap"* %9, i64 0, i32 3
  %102 = load i8*, i8** %73, align 8
  %103 = load i8*, i8** %75, align 8
  %104 = load i8*, i8** %77, align 8
  %105 = ptrtoint i8* %102 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #9
  %108 = ptrtoint i8* %103 to i64
  %109 = and i64 %108, 63
  %110 = icmp eq i64 %109, 0
  tail call void @llvm.assume(i1 %110) #9
  %111 = ptrtoint i8* %104 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #9
  %114 = bitcast [3 x i32*]* %14 to i8*
  br label %116

115:                                              ; preds = %217, %55
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #9
  ret void

116:                                              ; preds = %217, %61
  %117 = phi i64 [ 0, %61 ], [ %218, %217 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #9
  %118 = load i8, i8* %66, align 1
  %119 = zext i8 %118 to i64
  %120 = load i32, i32* %67, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i64
  %125 = sub nsw i64 %119, %124
  %126 = lshr i64 %117, %125
  store i64 %126, i64* %63, align 16
  %127 = load i32, i32* %68, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = sub nsw i64 %119, %131
  %133 = lshr i64 %117, %132
  store i64 %133, i64* %64, align 8
  %134 = load i32, i32* %69, align 4
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = sub nsw i64 %119, %138
  %140 = lshr i64 %117, %139
  store i64 %140, i64* %65, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #9
  %141 = mul i64 %126, %58
  %142 = getelementptr inbounds i8, i8* %102, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9
  store i8* %142, i8** %74, align 16
  %146 = mul i64 %133, %58
  %147 = getelementptr inbounds i8, i8* %103, i64 %146
  %148 = ptrtoint i8* %147 to i64
  %149 = and i64 %148, 63
  %150 = icmp eq i64 %149, 0
  tail call void @llvm.assume(i1 %150) #9
  store i8* %147, i8** %76, align 8
  %151 = mul i64 %140, %58
  %152 = getelementptr inbounds i8, i8* %104, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = and i64 %153, 63
  %155 = icmp eq i64 %154, 0
  tail call void @llvm.assume(i1 %155) #9
  store i8* %152, i8** %78, align 16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #9
  %156 = icmp eq i64 %126, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %114, i8 -86, i64 24, i1 false)
  br i1 %156, label %165, label %157

157:                                              ; preds = %116
  %158 = add i64 %126, -1
  %159 = mul i64 %158, %58
  %160 = getelementptr inbounds i8, i8* %102, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = and i64 %161, 63
  %163 = icmp eq i64 %162, 0
  tail call void @llvm.assume(i1 %163) #9
  %164 = bitcast i8* %160 to i32*
  br label %165

165:                                              ; preds = %116, %157
  %166 = phi i32* [ %164, %157 ], [ null, %116 ]
  store i32* %166, i32** %80, align 16
  %167 = icmp eq i64 %133, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %165
  %169 = add i64 %133, -1
  %170 = mul i64 %169, %58
  %171 = getelementptr inbounds i8, i8* %103, i64 %170
  %172 = ptrtoint i8* %171 to i64
  %173 = and i64 %172, 63
  %174 = icmp eq i64 %173, 0
  tail call void @llvm.assume(i1 %174) #9
  %175 = bitcast i8* %171 to i32*
  br label %176

176:                                              ; preds = %165, %168
  %177 = phi i32* [ %175, %168 ], [ null, %165 ]
  store i32* %177, i32** %81, align 8
  %178 = icmp eq i64 %140, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %176
  %180 = add i64 %140, -1
  %181 = mul i64 %180, %58
  %182 = getelementptr inbounds i8, i8* %104, i64 %181
  %183 = ptrtoint i8* %182 to i64
  %184 = and i64 %183, 63
  %185 = icmp eq i64 %184, 0
  tail call void @llvm.assume(i1 %185) #9
  %186 = bitcast i8* %182 to i32*
  br label %187

187:                                              ; preds = %176, %179
  %188 = phi i32* [ %186, %179 ], [ null, %176 ]
  store i32* %188, i32** %82, align 16
  %189 = load i64, i64* %83, align 8
  %190 = add i64 %189, %117
  %191 = load i8*, i8** %84, align 8
  %192 = load i64, i64* %85, align 8
  %193 = mul i64 %192, %190
  %194 = getelementptr inbounds i8, i8* %191, i64 %193
  %195 = ptrtoint i8* %194 to i64
  %196 = and i64 %195, 63
  %197 = icmp eq i64 %196, 0
  tail call void @llvm.assume(i1 %197) #9
  %198 = load i64, i64* %86, align 8
  %199 = getelementptr inbounds i8, i8* %194, i64 %198
  %200 = load i8*, i8** %87, align 8
  %201 = load i64, i64* %88, align 8
  %202 = mul i64 %201, %190
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = ptrtoint i8* %203 to i64
  %205 = and i64 %204, 63
  %206 = icmp eq i64 %205, 0
  tail call void @llvm.assume(i1 %206) #9
  %207 = bitcast i8* %203 to i32*
  %208 = getelementptr inbounds i32, i32* %207, i64 %198
  %209 = load i8*, i8** %89, align 8
  %210 = load i64, i64* %90, align 8
  %211 = mul i64 %210, %190
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = ptrtoint i8* %212 to i64
  %214 = and i64 %213, 63
  %215 = icmp eq i64 %214, 0
  tail call void @llvm.assume(i1 %215) #9
  %216 = getelementptr inbounds i8, i8* %212, i64 %198
  br i1 %91, label %217, label %220

217:                                              ; preds = %827, %187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #9
  %218 = add nuw i64 %117, 1
  %219 = icmp eq i64 %218, %19
  br i1 %219, label %115, label %116

220:                                              ; preds = %187, %827
  %221 = phi i64 [ %828, %827 ], [ 0, %187 ]
  %222 = getelementptr inbounds i8, i8* %216, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = and i8 %223, 1
  %225 = icmp eq i8 %224, 0
  br i1 %225, label %827, label %226

226:                                              ; preds = %220
  %227 = lshr i8 %223, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #9
  %228 = load i8, i8* %96, align 4
  %229 = zext i8 %228 to i64
  %230 = load i32, i32* %67, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i64
  %235 = sub nsw i64 %229, %234
  %236 = lshr i64 %221, %235
  store i64 %236, i64* %93, align 16
  %237 = load i32, i32* %68, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = sub nsw i64 %229, %241
  %243 = lshr i64 %221, %242
  store i64 %243, i64* %94, align 8
  %244 = load i32, i32* %69, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i64
  %249 = sub nsw i64 %229, %248
  %250 = lshr i64 %221, %249
  store i64 %250, i64* %95, align 16
  %251 = zext i8 %227 to i64
  %252 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %251
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i64
  %258 = mul nuw nsw i64 %257, %254
  %259 = tail call i64 @llvm.cttz.i64(i64 %258, i1 true) #9, !range !24
  %260 = shl nuw nsw i64 %258, 6
  %261 = icmp ult i8 %256, %253
  %262 = select i1 %261, i8 %256, i8 %253
  %263 = zext i8 %262 to i64
  %264 = icmp ugt i8 %256, %253
  %265 = select i1 %264, i8 %256, i8 %253
  %266 = zext i8 %265 to i64
  %267 = icmp eq i64 %258, 1
  %268 = sub nsw i64 0, %266
  %269 = getelementptr inbounds i32, i32* getelementptr inbounds (<{ i32, i32, i32, i32, [284 x i32] }>, <{ i32, i32, i32, i32, [284 x i32] }>* @_ZZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPiE14llf_mask_lanes, i64 0, i32 4, i64 28), i64 %268
  %270 = icmp eq i8 %262, 0
  %271 = shl nuw nsw i64 %266, 3
  %272 = icmp eq i8 %265, 0
  %273 = shl nuw nsw i64 %263, 3
  %274 = icmp ugt i64 %273, %263
  %275 = mul nuw nsw i64 %263, %266
  %276 = trunc i64 %275 to i32
  %277 = shl nuw nsw i32 %276, 6
  %278 = add nsw i64 %258, -1
  %279 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %251
  %280 = getelementptr inbounds i8, i8* %199, i64 %221
  %281 = shl nuw nsw i64 %258, 2
  %282 = icmp ult i64 %258, %260
  %283 = zext i8 %253 to i64
  %284 = icmp ugt i64 %283, 1
  %285 = select i1 %284, i64 %283, i64 1
  %286 = add nsw i64 %271, -8
  %287 = lshr exact i64 %286, 3
  %288 = add nuw nsw i64 %287, 1
  %289 = and i64 %285, 248
  %290 = add nsw i64 %289, -8
  %291 = lshr exact i64 %290, 3
  %292 = add nuw nsw i64 %291, 1
  %293 = and i64 %288, 1
  %294 = icmp eq i64 %286, 0
  %295 = sub nuw nsw i64 %288, %293
  %296 = icmp eq i64 %293, 0
  %297 = icmp ult i64 %285, 8
  %298 = and i64 %285, 248
  %299 = and i64 %292, 3
  %300 = icmp ult i64 %290, 24
  %301 = sub nsw i64 %292, %299
  %302 = icmp eq i64 %299, 0
  %303 = icmp eq i64 %285, %298
  br label %305

304:                                              ; preds = %822
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #9
  br label %827

305:                                              ; preds = %825, %226
  %306 = phi i8 [ %228, %226 ], [ %826, %825 ]
  %307 = phi i32* [ getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.3, i64 0, i64 0), %226 ], [ %823, %825 ]
  %308 = load i32, i32* %307, align 4
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [3 x i64], [3 x i64]* %15, i64 0, i64 %309
  %311 = load i64, i64* %310, align 8
  %312 = zext i8 %306 to i64
  %313 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1, i64 %309
  %314 = load i32, i32* %313, align 4
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = zext i8 %317 to i64
  %319 = sub nsw i64 %312, %318
  %320 = shl i64 %311, %319
  %321 = icmp eq i64 %320, %221
  br i1 %321, label %322, label %822

322:                                              ; preds = %305
  %323 = getelementptr inbounds [3 x i64], [3 x i64]* %12, i64 0, i64 %309
  %324 = load i64, i64* %323, align 8
  %325 = load i8, i8* %66, align 1
  %326 = zext i8 %325 to i64
  %327 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %315
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i64
  %330 = sub nsw i64 %326, %329
  %331 = shl i64 %324, %330
  %332 = icmp eq i64 %331, %117
  br i1 %332, label %333, label %822

333:                                              ; preds = %322
  %334 = getelementptr inbounds i32*, i32** %2, i64 %309
  %335 = load i32*, i32** %334, align 8
  %336 = getelementptr inbounds [3 x i64], [3 x i64]* %11, i64 0, i64 %309
  %337 = load i64, i64* %336, align 8
  %338 = getelementptr inbounds i32, i32* %335, i64 %337
  %339 = getelementptr inbounds [3 x i32*], [3 x i32*]* %13, i64 0, i64 %309
  %340 = load i32*, i32** %339, align 8
  %341 = getelementptr inbounds i32, i32* %340, i64 %311
  br i1 %267, label %342, label %344

342:                                              ; preds = %333
  %343 = tail call i32 @_ZN3jxl8N_SCALAR21NumNonZero8x8ExceptDCEPKiPi(i32* %338, i32* %341)
  br label %536

344:                                              ; preds = %333
  br i1 %270, label %387, label %345

345:                                              ; preds = %344, %389
  %346 = phi i64 [ %391, %389 ], [ 0, %344 ]
  %347 = phi i32 [ %390, %389 ], [ 0, %344 ]
  br i1 %272, label %389, label %348

348:                                              ; preds = %345
  %349 = mul nuw nsw i64 %346, %271
  %350 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %347, i32 0
  br label %351

351:                                              ; preds = %351, %348
  %352 = phi i64 [ 0, %348 ], [ %378, %351 ]
  %353 = phi <4 x i32> [ %350, %348 ], [ %376, %351 ]
  %354 = phi <4 x i32> [ zeroinitializer, %348 ], [ %377, %351 ]
  %355 = getelementptr inbounds i32, i32* %269, i64 %352
  %356 = bitcast i32* %355 to <4 x i32>*
  %357 = load <4 x i32>, <4 x i32>* %356, align 4, !alias.scope !230, !noalias !235
  %358 = getelementptr inbounds i32, i32* %355, i64 4
  %359 = bitcast i32* %358 to <4 x i32>*
  %360 = load <4 x i32>, <4 x i32>* %359, align 4, !alias.scope !230, !noalias !235
  %361 = add i64 %352, %349
  %362 = getelementptr inbounds i32, i32* %338, i64 %361
  %363 = bitcast i32* %362 to <4 x i32>*
  %364 = load <4 x i32>, <4 x i32>* %363, align 4, !alias.scope !239, !noalias !242
  %365 = getelementptr inbounds i32, i32* %362, i64 4
  %366 = bitcast i32* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 4, !alias.scope !239, !noalias !242
  %368 = xor <4 x i32> %357, <i32 -1, i32 -1, i32 -1, i32 -1>
  %369 = xor <4 x i32> %360, <i32 -1, i32 -1, i32 -1, i32 -1>
  %370 = and <4 x i32> %364, %368
  %371 = and <4 x i32> %367, %369
  %372 = icmp eq <4 x i32> %370, zeroinitializer
  %373 = icmp eq <4 x i32> %371, zeroinitializer
  %374 = zext <4 x i1> %372 to <4 x i32>
  %375 = zext <4 x i1> %373 to <4 x i32>
  %376 = sub <4 x i32> %353, %374
  %377 = sub <4 x i32> %354, %375
  %378 = add i64 %352, 8
  %379 = icmp eq i64 %378, %271
  br i1 %379, label %380, label %351, !llvm.loop !243

380:                                              ; preds = %351
  %381 = add <4 x i32> %377, %376
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  br label %389

387:                                              ; preds = %389, %344
  %388 = phi i32 [ 0, %344 ], [ %390, %389 ]
  br i1 %274, label %393, label %463

389:                                              ; preds = %380, %345
  %390 = phi i32 [ %347, %345 ], [ %386, %380 ]
  %391 = add nuw nsw i64 %346, 1
  %392 = icmp eq i64 %391, %263
  br i1 %392, label %387, label %345

393:                                              ; preds = %387, %474
  %394 = phi i64 [ %476, %474 ], [ %263, %387 ]
  %395 = phi i32 [ %475, %474 ], [ %388, %387 ]
  br i1 %272, label %474, label %396

396:                                              ; preds = %393
  %397 = mul i64 %394, %271
  %398 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %395, i32 0
  br i1 %294, label %434, label %399

399:                                              ; preds = %396, %399
  %400 = phi i64 [ %431, %399 ], [ 0, %396 ]
  %401 = phi <4 x i32> [ %429, %399 ], [ %398, %396 ]
  %402 = phi <4 x i32> [ %430, %399 ], [ zeroinitializer, %396 ]
  %403 = phi i64 [ %432, %399 ], [ %295, %396 ]
  %404 = add i64 %400, %397
  %405 = getelementptr inbounds i32, i32* %338, i64 %404
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4, !alias.scope !244, !noalias !242
  %408 = getelementptr inbounds i32, i32* %405, i64 4
  %409 = bitcast i32* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 4, !alias.scope !244, !noalias !242
  %411 = icmp eq <4 x i32> %407, zeroinitializer
  %412 = icmp eq <4 x i32> %410, zeroinitializer
  %413 = zext <4 x i1> %411 to <4 x i32>
  %414 = zext <4 x i1> %412 to <4 x i32>
  %415 = sub <4 x i32> %401, %413
  %416 = sub <4 x i32> %402, %414
  %417 = or i64 %400, 8
  %418 = add i64 %417, %397
  %419 = getelementptr inbounds i32, i32* %338, i64 %418
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 4, !alias.scope !244, !noalias !242
  %422 = getelementptr inbounds i32, i32* %419, i64 4
  %423 = bitcast i32* %422 to <4 x i32>*
  %424 = load <4 x i32>, <4 x i32>* %423, align 4, !alias.scope !244, !noalias !242
  %425 = icmp eq <4 x i32> %421, zeroinitializer
  %426 = icmp eq <4 x i32> %424, zeroinitializer
  %427 = zext <4 x i1> %425 to <4 x i32>
  %428 = zext <4 x i1> %426 to <4 x i32>
  %429 = sub <4 x i32> %415, %427
  %430 = sub <4 x i32> %416, %428
  %431 = add i64 %400, 16
  %432 = add i64 %403, -2
  %433 = icmp eq i64 %432, 0
  br i1 %433, label %434, label %399, !llvm.loop !247

434:                                              ; preds = %399, %396
  %435 = phi <4 x i32> [ undef, %396 ], [ %429, %399 ]
  %436 = phi <4 x i32> [ undef, %396 ], [ %430, %399 ]
  %437 = phi i64 [ 0, %396 ], [ %431, %399 ]
  %438 = phi <4 x i32> [ %398, %396 ], [ %429, %399 ]
  %439 = phi <4 x i32> [ zeroinitializer, %396 ], [ %430, %399 ]
  br i1 %296, label %454, label %440

440:                                              ; preds = %434
  %441 = add i64 %437, %397
  %442 = getelementptr inbounds i32, i32* %338, i64 %441
  %443 = getelementptr inbounds i32, i32* %442, i64 4
  %444 = bitcast i32* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4, !alias.scope !244, !noalias !242
  %446 = icmp eq <4 x i32> %445, zeroinitializer
  %447 = zext <4 x i1> %446 to <4 x i32>
  %448 = sub <4 x i32> %439, %447
  %449 = bitcast i32* %442 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 4, !alias.scope !244, !noalias !242
  %451 = icmp eq <4 x i32> %450, zeroinitializer
  %452 = zext <4 x i1> %451 to <4 x i32>
  %453 = sub <4 x i32> %438, %452
  br label %454

454:                                              ; preds = %434, %440
  %455 = phi <4 x i32> [ %435, %434 ], [ %453, %440 ]
  %456 = phi <4 x i32> [ %436, %434 ], [ %448, %440 ]
  %457 = add <4 x i32> %456, %455
  %458 = shufflevector <4 x i32> %457, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %459 = add <4 x i32> %457, %458
  %460 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %461 = add <4 x i32> %459, %460
  %462 = extractelement <4 x i32> %461, i32 0
  br label %474

463:                                              ; preds = %474, %387
  %464 = phi i32 [ %388, %387 ], [ %475, %474 ]
  %465 = add nsw i32 %464, %277
  %466 = sext i32 %465 to i64
  %467 = add nsw i64 %278, %466
  %468 = lshr i64 %467, %259
  %469 = trunc i64 %468 to i32
  %470 = insertelement <4 x i32> undef, i32 %469, i32 0
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> zeroinitializer
  %472 = insertelement <4 x i32> undef, i32 %469, i32 0
  %473 = shufflevector <4 x i32> %472, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %478

474:                                              ; preds = %454, %393
  %475 = phi i32 [ %395, %393 ], [ %462, %454 ]
  %476 = add nuw i64 %394, 1
  %477 = icmp eq i64 %476, %273
  br i1 %477, label %463, label %393

478:                                              ; preds = %527, %463
  %479 = phi i64 [ 0, %463 ], [ %528, %527 ]
  %480 = mul i64 %479, %59
  br i1 %297, label %481, label %483

481:                                              ; preds = %526, %478
  %482 = phi i64 [ 0, %478 ], [ %298, %526 ]
  br label %530

483:                                              ; preds = %478
  br i1 %300, label %513, label %484

484:                                              ; preds = %483, %484
  %485 = phi i64 [ %510, %484 ], [ 0, %483 ]
  %486 = phi i64 [ %511, %484 ], [ %301, %483 ]
  %487 = add i64 %485, %480
  %488 = getelementptr inbounds i32, i32* %341, i64 %487
  %489 = bitcast i32* %488 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %489, align 4, !alias.scope !242, !noalias !248
  %490 = getelementptr inbounds i32, i32* %488, i64 4
  %491 = bitcast i32* %490 to <4 x i32>*
  store <4 x i32> %473, <4 x i32>* %491, align 4, !alias.scope !242, !noalias !248
  %492 = or i64 %485, 8
  %493 = add i64 %492, %480
  %494 = getelementptr inbounds i32, i32* %341, i64 %493
  %495 = bitcast i32* %494 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %495, align 4, !alias.scope !242, !noalias !248
  %496 = getelementptr inbounds i32, i32* %494, i64 4
  %497 = bitcast i32* %496 to <4 x i32>*
  store <4 x i32> %473, <4 x i32>* %497, align 4, !alias.scope !242, !noalias !248
  %498 = or i64 %485, 16
  %499 = add i64 %498, %480
  %500 = getelementptr inbounds i32, i32* %341, i64 %499
  %501 = bitcast i32* %500 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %501, align 4, !alias.scope !242, !noalias !248
  %502 = getelementptr inbounds i32, i32* %500, i64 4
  %503 = bitcast i32* %502 to <4 x i32>*
  store <4 x i32> %473, <4 x i32>* %503, align 4, !alias.scope !242, !noalias !248
  %504 = or i64 %485, 24
  %505 = add i64 %504, %480
  %506 = getelementptr inbounds i32, i32* %341, i64 %505
  %507 = bitcast i32* %506 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %507, align 4, !alias.scope !242, !noalias !248
  %508 = getelementptr inbounds i32, i32* %506, i64 4
  %509 = bitcast i32* %508 to <4 x i32>*
  store <4 x i32> %473, <4 x i32>* %509, align 4, !alias.scope !242, !noalias !248
  %510 = add i64 %485, 32
  %511 = add i64 %486, -4
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %484, !llvm.loop !249

513:                                              ; preds = %484, %483
  %514 = phi i64 [ 0, %483 ], [ %510, %484 ]
  br i1 %302, label %526, label %515

515:                                              ; preds = %513, %515
  %516 = phi i64 [ %523, %515 ], [ %514, %513 ]
  %517 = phi i64 [ %524, %515 ], [ %299, %513 ]
  %518 = add i64 %516, %480
  %519 = getelementptr inbounds i32, i32* %341, i64 %518
  %520 = bitcast i32* %519 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %520, align 4, !alias.scope !242, !noalias !248
  %521 = getelementptr inbounds i32, i32* %519, i64 4
  %522 = bitcast i32* %521 to <4 x i32>*
  store <4 x i32> %473, <4 x i32>* %522, align 4, !alias.scope !242, !noalias !248
  %523 = add i64 %516, 8
  %524 = add i64 %517, -1
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %515, !llvm.loop !250

526:                                              ; preds = %515, %513
  br i1 %303, label %527, label %481

527:                                              ; preds = %530, %526
  %528 = add nuw nsw i64 %479, 1
  %529 = icmp ult i64 %528, %257
  br i1 %529, label %478, label %536

530:                                              ; preds = %481, %530
  %531 = phi i64 [ %534, %530 ], [ %482, %481 ]
  %532 = add i64 %531, %480
  %533 = getelementptr inbounds i32, i32* %341, i64 %532
  store i32 %469, i32* %533, align 4, !alias.scope !242, !noalias !248
  %534 = add nuw nsw i64 %531, 1
  %535 = icmp ult i64 %534, %254
  br i1 %535, label %530, label %527, !llvm.loop !251

536:                                              ; preds = %527, %342
  %537 = phi i32 [ %343, %342 ], [ %465, %527 ]
  %538 = load i8, i8* %279, align 1
  %539 = zext i8 %538 to i64
  %540 = mul nuw nsw i64 %539, 3
  %541 = add nsw i64 %540, %309
  %542 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %541
  %543 = load i64, i64* %542, align 8
  %544 = shl i64 %543, 6
  %545 = getelementptr inbounds i32, i32* %0, i64 %544
  %546 = getelementptr inbounds [3 x i32*], [3 x i32*]* %14, i64 0, i64 %309
  %547 = load i32*, i32** %546, align 8
  %548 = icmp eq i64 %311, 0
  %549 = icmp eq i32* %547, null
  br i1 %548, label %550, label %553

550:                                              ; preds = %536
  br i1 %549, label %567, label %551

551:                                              ; preds = %550
  %552 = load i32, i32* %547, align 4, !alias.scope !252, !noalias !255
  br label %567

553:                                              ; preds = %536
  br i1 %549, label %554, label %558

554:                                              ; preds = %553
  %555 = add i64 %311, -1
  %556 = getelementptr inbounds i32, i32* %340, i64 %555
  %557 = load i32, i32* %556, align 4, !alias.scope !255, !noalias !252
  br label %567

558:                                              ; preds = %553
  %559 = getelementptr inbounds i32, i32* %547, i64 %311
  %560 = load i32, i32* %559, align 4, !alias.scope !252, !noalias !255
  %561 = add i64 %311, -1
  %562 = getelementptr inbounds i32, i32* %340, i64 %561
  %563 = load i32, i32* %562, align 4, !alias.scope !255, !noalias !252
  %564 = add i32 %560, 1
  %565 = add i32 %564, %563
  %566 = sdiv i32 %565, 2
  br label %567

567:                                              ; preds = %550, %551, %554, %558
  %568 = phi i32 [ %557, %554 ], [ %566, %558 ], [ %552, %551 ], [ 32, %550 ]
  %569 = load i8, i8* %280, align 1
  %570 = getelementptr inbounds i32, i32* %208, i64 %311
  %571 = load i32, i32* %570, align 4
  %572 = load i32*, i32** %97, align 8
  %573 = ptrtoint i32* %572 to i64
  %574 = load i32*, i32** %98, align 8
  %575 = icmp eq i32* %572, %574
  %576 = ptrtoint i32* %574 to i64
  br i1 %575, label %629, label %577

577:                                              ; preds = %567
  %578 = getelementptr i32, i32* %574, i64 -1
  %579 = ptrtoint i32* %578 to i64
  %580 = sub i64 %579, %573
  %581 = lshr i64 %580, 2
  %582 = add nuw nsw i64 %581, 1
  %583 = and i64 %582, 3
  %584 = icmp ult i64 %580, 12
  br i1 %584, label %613, label %585

585:                                              ; preds = %577
  %586 = sub nsw i64 %582, %583
  br label %587

587:                                              ; preds = %587, %585
  %588 = phi i64 [ 0, %585 ], [ %609, %587 ]
  %589 = phi i32* [ %572, %585 ], [ %610, %587 ]
  %590 = phi i64 [ %586, %585 ], [ %611, %587 ]
  %591 = load i32, i32* %589, align 4
  %592 = icmp ult i32 %591, %571
  %593 = zext i1 %592 to i64
  %594 = add i64 %588, %593
  %595 = getelementptr inbounds i32, i32* %589, i64 1
  %596 = load i32, i32* %595, align 4
  %597 = icmp ult i32 %596, %571
  %598 = zext i1 %597 to i64
  %599 = add i64 %594, %598
  %600 = getelementptr inbounds i32, i32* %589, i64 2
  %601 = load i32, i32* %600, align 4
  %602 = icmp ult i32 %601, %571
  %603 = zext i1 %602 to i64
  %604 = add i64 %599, %603
  %605 = getelementptr inbounds i32, i32* %589, i64 3
  %606 = load i32, i32* %605, align 4
  %607 = icmp ult i32 %606, %571
  %608 = zext i1 %607 to i64
  %609 = add i64 %604, %608
  %610 = getelementptr inbounds i32, i32* %589, i64 4
  %611 = add i64 %590, -4
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %587

613:                                              ; preds = %587, %577
  %614 = phi i64 [ undef, %577 ], [ %609, %587 ]
  %615 = phi i64 [ 0, %577 ], [ %609, %587 ]
  %616 = phi i32* [ %572, %577 ], [ %610, %587 ]
  %617 = icmp eq i64 %583, 0
  br i1 %617, label %629, label %618

618:                                              ; preds = %613, %618
  %619 = phi i64 [ %625, %618 ], [ %615, %613 ]
  %620 = phi i32* [ %626, %618 ], [ %616, %613 ]
  %621 = phi i64 [ %627, %618 ], [ %583, %613 ]
  %622 = load i32, i32* %620, align 4
  %623 = icmp ult i32 %622, %571
  %624 = zext i1 %623 to i64
  %625 = add i64 %619, %624
  %626 = getelementptr inbounds i32, i32* %620, i64 1
  %627 = add i64 %621, -1
  %628 = icmp eq i64 %627, 0
  br i1 %628, label %629, label %618, !llvm.loop !257

629:                                              ; preds = %613, %618, %567
  %630 = phi i64 [ 0, %567 ], [ %614, %613 ], [ %625, %618 ]
  %631 = icmp ult i32 %308, 2
  %632 = xor i64 %309, 1
  %633 = mul nsw i64 %632, 13
  %634 = select i1 %631, i64 %633, i64 26
  %635 = add nsw i64 %634, %539
  %636 = sub i64 %576, %573
  %637 = ashr exact i64 %636, 2
  %638 = add nsw i64 %637, 1
  %639 = mul i64 %638, %635
  %640 = add i64 %630, %639
  %641 = load i64, i64* %99, align 8
  %642 = mul i64 %640, %641
  %643 = zext i8 %569 to i64
  %644 = add i64 %642, %643
  %645 = load i8*, i8** %100, align 8
  %646 = getelementptr inbounds i8, i8* %645, i64 %644
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i32
  %649 = icmp ult i32 %568, 64
  %650 = select i1 %649, i32 %568, i32 64
  %651 = icmp ult i32 %650, 8
  %652 = lshr i32 %650, 1
  %653 = add nuw nsw i32 %652, 4
  %654 = select i1 %651, i32 %650, i32 %653
  %655 = load i64, i64* %101, align 8
  %656 = trunc i64 %655 to i32
  %657 = mul i32 %654, %656
  %658 = add i32 %657, %648
  %659 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %660 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %661 = icmp ult %"struct.jxl::Token"* %659, %660
  %662 = ptrtoint %"struct.jxl::Token"* %660 to i64
  br i1 %661, label %663, label %669

663:                                              ; preds = %629
  %664 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %659, i64 0, i32 0
  %665 = shl i32 %658, 1
  store i32 %665, i32* %664, align 4
  %666 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %659, i64 0, i32 1
  store i32 %537, i32* %666, align 4
  %667 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %659, i64 1
  %668 = ptrtoint %"struct.jxl::Token"* %667 to i64
  store i64 %668, i64* %21, align 8
  br label %715

669:                                              ; preds = %629
  %670 = ptrtoint %"struct.jxl::Token"* %659 to i64
  %671 = load i64, i64* %23, align 8
  %672 = sub i64 %670, %671
  %673 = ashr exact i64 %672, 3
  %674 = add nsw i64 %673, 1
  %675 = icmp ugt i64 %674, 2305843009213693951
  br i1 %675, label %676, label %678

676:                                              ; preds = %669
  %677 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %677) #13
  unreachable

678:                                              ; preds = %669
  %679 = sub i64 %662, %671
  %680 = ashr exact i64 %679, 3
  %681 = icmp ult i64 %680, 1152921504606846975
  br i1 %681, label %682, label %690

682:                                              ; preds = %678
  %683 = ashr exact i64 %679, 2
  %684 = icmp ult i64 %683, %674
  %685 = select i1 %684, i64 %674, i64 %683
  %686 = icmp eq i64 %685, 0
  br i1 %686, label %695, label %687

687:                                              ; preds = %682
  %688 = icmp ugt i64 %685, 2305843009213693951
  br i1 %688, label %689, label %690

689:                                              ; preds = %687
  tail call void @abort() #13
  unreachable

690:                                              ; preds = %687, %678
  %691 = phi i64 [ %685, %687 ], [ 2305843009213693951, %678 ]
  %692 = shl i64 %691, 3
  %693 = tail call i8* @_Znwm(i64 %692) #14
  %694 = bitcast i8* %693 to %"struct.jxl::Token"*
  br label %695

695:                                              ; preds = %690, %682
  %696 = phi i64 [ %691, %690 ], [ 0, %682 ]
  %697 = phi i8* [ %693, %690 ], [ null, %682 ]
  %698 = phi %"struct.jxl::Token"* [ %694, %690 ], [ null, %682 ]
  %699 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %698, i64 %673
  %700 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %698, i64 %696
  %701 = ptrtoint %"struct.jxl::Token"* %700 to i64
  %702 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %699, i64 0, i32 0
  %703 = shl i32 %658, 1
  store i32 %703, i32* %702, align 4
  %704 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %698, i64 %673, i32 1
  store i32 %537, i32* %704, align 4
  %705 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %699, i64 1
  %706 = ptrtoint %"struct.jxl::Token"* %705 to i64
  %707 = ptrtoint %"struct.jxl::Token"* %698 to i64
  %708 = icmp sgt i64 %672, 0
  br i1 %708, label %709, label %711

709:                                              ; preds = %695
  %710 = inttoptr i64 %671 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %697, i8* align 4 %710, i64 %672, i1 false) #9
  br label %711

711:                                              ; preds = %709, %695
  store i64 %707, i64* %23, align 8
  store i64 %706, i64* %21, align 8
  store i64 %701, i64* %31, align 8
  %712 = icmp eq i64 %671, 0
  br i1 %712, label %715, label %713

713:                                              ; preds = %711
  %714 = inttoptr i64 %671 to i8*
  tail call void @_ZdlPv(i8* %714) #14
  br label %715

715:                                              ; preds = %663, %711, %713
  %716 = load i64, i64* %101, align 8
  %717 = mul nuw nsw i32 %648, 458
  %718 = trunc i64 %716 to i32
  %719 = mul i32 %718, 37
  %720 = add i32 %719, %717
  %721 = zext i32 %720 to i64
  %722 = icmp ne i32 %537, 0
  %723 = and i1 %722, %282
  br i1 %723, label %724, label %727

724:                                              ; preds = %715
  %725 = sext i32 %537 to i64
  %726 = icmp sge i64 %281, %725
  br label %729

727:                                              ; preds = %814, %715
  %728 = add i64 %337, %260
  store i64 %728, i64* %336, align 8
  br label %822

729:                                              ; preds = %724, %814
  %730 = phi i64 [ %818, %814 ], [ %258, %724 ]
  %731 = phi i1 [ %815, %814 ], [ %726, %724 ]
  %732 = phi i32 [ %817, %814 ], [ %537, %724 ]
  %733 = zext i1 %731 to i64
  %734 = getelementptr inbounds i32, i32* %545, i64 %730
  %735 = load i32, i32* %734, align 4
  %736 = zext i32 %735 to i64
  %737 = getelementptr inbounds i32, i32* %338, i64 %736
  %738 = load i32, i32* %737, align 4
  %739 = sext i32 %732 to i64
  %740 = add nsw i64 %278, %739
  %741 = lshr i64 %740, %259
  %742 = lshr i64 %730, %259
  %743 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL23kCoeffNumNonzeroContextE, i64 0, i64 %741
  %744 = load i16, i16* %743, align 2
  %745 = zext i16 %744 to i64
  %746 = getelementptr inbounds [64 x i16], [64 x i16]* @_ZN3jxlL17kCoeffFreqContextE, i64 0, i64 %742
  %747 = load i16, i16* %746, align 2
  %748 = zext i16 %747 to i64
  %749 = add nuw nsw i64 %748, %745
  %750 = shl nuw nsw i64 %749, 1
  %751 = or i64 %750, %733
  %752 = add nuw nsw i64 %751, %721
  %753 = shl i32 %738, 1
  %754 = ashr i32 %738, 31
  %755 = xor i32 %753, %754
  %756 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %20, align 8
  %757 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %30, align 8
  %758 = icmp ult %"struct.jxl::Token"* %756, %757
  %759 = ptrtoint %"struct.jxl::Token"* %757 to i64
  br i1 %758, label %760, label %767

760:                                              ; preds = %729
  %761 = trunc i64 %752 to i32
  %762 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %756, i64 0, i32 0
  %763 = shl i32 %761, 1
  store i32 %763, i32* %762, align 4
  %764 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %756, i64 0, i32 1
  store i32 %755, i32* %764, align 4
  %765 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %756, i64 1
  %766 = ptrtoint %"struct.jxl::Token"* %765 to i64
  store i64 %766, i64* %21, align 8
  br label %814

767:                                              ; preds = %729
  %768 = ptrtoint %"struct.jxl::Token"* %756 to i64
  %769 = load i64, i64* %23, align 8
  %770 = sub i64 %768, %769
  %771 = ashr exact i64 %770, 3
  %772 = add nsw i64 %771, 1
  %773 = icmp ugt i64 %772, 2305843009213693951
  br i1 %773, label %774, label %776

774:                                              ; preds = %767
  %775 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %775) #13
  unreachable

776:                                              ; preds = %767
  %777 = sub i64 %759, %769
  %778 = ashr exact i64 %777, 3
  %779 = icmp ult i64 %778, 1152921504606846975
  br i1 %779, label %780, label %788

780:                                              ; preds = %776
  %781 = ashr exact i64 %777, 2
  %782 = icmp ult i64 %781, %772
  %783 = select i1 %782, i64 %772, i64 %781
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %793, label %785

785:                                              ; preds = %780
  %786 = icmp ugt i64 %783, 2305843009213693951
  br i1 %786, label %787, label %788

787:                                              ; preds = %785
  tail call void @abort() #13
  unreachable

788:                                              ; preds = %785, %776
  %789 = phi i64 [ %783, %785 ], [ 2305843009213693951, %776 ]
  %790 = shl i64 %789, 3
  %791 = tail call i8* @_Znwm(i64 %790) #14
  %792 = bitcast i8* %791 to %"struct.jxl::Token"*
  br label %793

793:                                              ; preds = %788, %780
  %794 = phi i64 [ %789, %788 ], [ 0, %780 ]
  %795 = phi i8* [ %791, %788 ], [ null, %780 ]
  %796 = phi %"struct.jxl::Token"* [ %792, %788 ], [ null, %780 ]
  %797 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %796, i64 %771
  %798 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %796, i64 %794
  %799 = ptrtoint %"struct.jxl::Token"* %798 to i64
  %800 = trunc i64 %752 to i32
  %801 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %797, i64 0, i32 0
  %802 = shl i32 %800, 1
  store i32 %802, i32* %801, align 4
  %803 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %796, i64 %771, i32 1
  store i32 %755, i32* %803, align 4
  %804 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %797, i64 1
  %805 = ptrtoint %"struct.jxl::Token"* %804 to i64
  %806 = ptrtoint %"struct.jxl::Token"* %796 to i64
  %807 = icmp sgt i64 %770, 0
  br i1 %807, label %808, label %810

808:                                              ; preds = %793
  %809 = inttoptr i64 %769 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %795, i8* align 4 %809, i64 %770, i1 false) #9
  br label %810

810:                                              ; preds = %808, %793
  store i64 %806, i64* %23, align 8
  store i64 %805, i64* %21, align 8
  store i64 %799, i64* %31, align 8
  %811 = icmp eq i64 %769, 0
  br i1 %811, label %814, label %812

812:                                              ; preds = %810
  %813 = inttoptr i64 %769 to i8*
  tail call void @_ZdlPv(i8* %813) #14
  br label %814

814:                                              ; preds = %760, %810, %812
  %815 = icmp ne i32 %738, 0
  %816 = zext i1 %815 to i32
  %817 = sub nuw i32 %732, %816
  %818 = add nuw nsw i64 %730, 1
  %819 = icmp ult i64 %818, %260
  %820 = icmp ne i32 %817, 0
  %821 = and i1 %820, %819
  br i1 %821, label %729, label %727

822:                                              ; preds = %322, %305, %727
  %823 = getelementptr inbounds i32, i32* %307, i64 1
  %824 = icmp eq i32* %823, getelementptr inbounds ([3 x i32], [3 x i32]* @.ref.tmp.3, i64 1, i64 0)
  br i1 %824, label %304, label %825

825:                                              ; preds = %822
  %826 = load i8, i8* %96, align 4
  br label %305

827:                                              ; preds = %220, %304
  %828 = add nuw i64 %221, 1
  %829 = icmp eq i64 %828, %17
  br i1 %829, label %217, label %220
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl20TokenizeCoefficientsEPKjRKNS_4RectEPrPKiRKNS_15AcStrategyImageENS_22YCbCrChromaSubsamplingEPNS_6Image3IiEEPNSt3__16vectorINS_5TokenENSG_9allocatorISI_EEEERKNS_5PlaneIhEERKNSN_IiEERKNS_11BlockCtxMapE(i32* noalias, %"class.jxl::Rect"* dereferenceable(32), i32** noalias, %"class.jxl::AcStrategyImage"* dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"* noalias, %"class.std::__1::vector"* noalias, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane.1"* dereferenceable(32), %"struct.jxl::BlockCtxMap"* dereferenceable(136)) local_unnamed_addr #4 {
  %11 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  %12 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %13 = and i32 %12, 2225
  %14 = tail call i32 @llvm.cttz.i32(i32 %13, i1 true) #9, !range !258
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [12 x void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*], [12 x void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*]* @_ZN3jxlL40TokenizeCoefficientsHighwayDispatchTableE, i64 0, i64 %15
  %17 = load void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)** %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %11, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %11, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #9
  call void %17(i32* %0, %"class.jxl::Rect"* dereferenceable(32) %1, i32** %2, %"class.jxl::AcStrategyImage"* dereferenceable(48) %3, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %11, %"class.jxl::Image3"* %5, %"class.std::__1::vector"* %6, %"class.jxl::Plane"* dereferenceable(32) %7, %"class.jxl::Plane.1"* dereferenceable(32) %8, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %9) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #4 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPKjRKN3jxl4RectEPrPKiRKNS3_15AcStrategyImageENS3_22YCbCrChromaSubsamplingEPNS3_6Image3IiEEPNSt3__16vectorINS3_5TokenENSI_9allocatorISK_EEEERKNS3_5PlaneIhEERKNSP_IiEERKNS3_11BlockCtxMapEEE13ChooseAndCallIXadL_ZNS3_L40TokenizeCoefficientsHighwayDispatchTableEEEEEvS2_S6_SA_SD_SE_SH_SO_SS_SV_SY_(i32*, %"class.jxl::Rect"* dereferenceable(32), i32**, %"class.jxl::AcStrategyImage"* dereferenceable(48), %"struct.jxl::YCbCrChromaSubsampling"* nocapture readonly, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane.1"* dereferenceable(32), %"struct.jxl::BlockCtxMap"* dereferenceable(136)) #4 align 2 {
  %11 = alloca %"struct.jxl::YCbCrChromaSubsampling", align 8
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #9
  %12 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %13 = and i32 %12, 2225
  %14 = tail call i32 @llvm.cttz.i32(i32 %13, i1 true) #9, !range !258
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [12 x void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*], [12 x void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*]* @_ZN3jxlL40TokenizeCoefficientsHighwayDispatchTableE, i64 0, i64 %15
  %17 = load void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)*, void (i32*, %"class.jxl::Rect"*, i32**, %"class.jxl::AcStrategyImage"*, %"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Image3"*, %"class.std::__1::vector"*, %"class.jxl::Plane"*, %"class.jxl::Plane.1"*, %"struct.jxl::BlockCtxMap"*)** %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %11, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %11, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %4, i64 0, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #9
  call void %17(i32* %0, %"class.jxl::Rect"* dereferenceable(32) %1, i32** %2, %"class.jxl::AcStrategyImage"* dereferenceable(48) %3, %"struct.jxl::YCbCrChromaSubsampling"* nonnull %11, %"class.jxl::Image3"* %5, %"class.std::__1::vector"* %6, %"class.jxl::Plane"* dereferenceable(32) %7, %"class.jxl::Plane.1"* dereferenceable(32) %8, %"struct.jxl::BlockCtxMap"* dereferenceable(136) %9) #9
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #4 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !17, !14}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!20 = distinct !{!20, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!23 = distinct !{!23, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!24 = !{i64 0, i64 65}
!25 = !{!26, !28}
!26 = distinct !{!26, !27, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!27 = distinct !{!27, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!28 = distinct !{!28, !29, !"_ZN3jxl6N_SSE421NumNonZero8x8ExceptDCEPKiPi: argument 0"}
!29 = distinct !{!29, !"_ZN3jxl6N_SSE421NumNonZero8x8ExceptDCEPKiPi"}
!30 = !{!31}
!31 = distinct !{!31, !29, !"_ZN3jxl6N_SSE421NumNonZero8x8ExceptDCEPKiPi: argument 1"}
!32 = !{!33, !28}
!33 = distinct !{!33, !34, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!34 = distinct !{!34, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!35 = !{!28}
!36 = !{!37, !39}
!37 = distinct !{!37, !38, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!38 = distinct !{!38, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!39 = distinct !{!39, !40, !"_ZN3jxl6N_SSE419NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 0"}
!40 = distinct !{!40, !"_ZN3jxl6N_SSE419NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi"}
!41 = !{!42}
!42 = distinct !{!42, !40, !"_ZN3jxl6N_SSE419NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 1"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!45 = distinct !{!45, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!46 = !{!39, !42}
!47 = !{!48, !39}
!48 = distinct !{!48, !49, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!49 = distinct !{!49, !"_ZN3hwy6N_SSE4L4LoadIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!50 = !{!39}
!51 = distinct !{!51, !14}
!52 = distinct !{!52, !12}
!53 = distinct !{!53, !17, !14}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 0"}
!56 = distinct !{!56, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi"}
!57 = !{!58}
!58 = distinct !{!58, !56, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 1"}
!59 = distinct !{!59, !12}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!62 = distinct !{!62, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!63 = !{!64}
!64 = distinct !{!64, !62, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!67 = distinct !{!67, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!68 = !{!69}
!69 = distinct !{!69, !67, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!72 = distinct !{!72, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!73 = !{!74}
!74 = distinct !{!74, !72, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!75 = distinct !{!75, !12}
!76 = distinct !{!76, !14}
!77 = distinct !{!77, !12}
!78 = distinct !{!78, !17, !14}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!81 = distinct !{!81, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!86 = distinct !{!86, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!89 = !{!90, !92}
!90 = distinct !{!90, !91, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!91 = distinct !{!91, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!92 = distinct !{!92, !93, !"_ZN3jxl6N_AVX221NumNonZero8x8ExceptDCEPKiPi: argument 0"}
!93 = distinct !{!93, !"_ZN3jxl6N_AVX221NumNonZero8x8ExceptDCEPKiPi"}
!94 = !{!95, !96}
!95 = distinct !{!95, !91, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!96 = distinct !{!96, !93, !"_ZN3jxl6N_AVX221NumNonZero8x8ExceptDCEPKiPi: argument 1"}
!97 = !{!98, !92}
!98 = distinct !{!98, !99, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!99 = distinct !{!99, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!100 = !{!101, !96}
!101 = distinct !{!101, !99, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!102 = !{!96}
!103 = !{!92}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!106 = distinct !{!106, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!107 = !{!108, !109, !111}
!108 = distinct !{!108, !106, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!109 = distinct !{!109, !110, !"_ZN3jxl6N_AVX219NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 0"}
!110 = distinct !{!110, !"_ZN3jxl6N_AVX219NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi"}
!111 = distinct !{!111, !110, !"_ZN3jxl6N_AVX219NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 1"}
!112 = !{!113, !109}
!113 = distinct !{!113, !114, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!114 = distinct !{!114, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!115 = !{!116, !111}
!116 = distinct !{!116, !114, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!117 = !{!118, !109}
!118 = distinct !{!118, !119, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!119 = distinct !{!119, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!120 = !{!121, !111}
!121 = distinct !{!121, !119, !"_ZN3hwy6N_AVX2L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!122 = !{!111}
!123 = !{!109}
!124 = distinct !{!124, !14}
!125 = distinct !{!125, !12}
!126 = distinct !{!126, !17, !14}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 0"}
!129 = distinct !{!129, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi"}
!130 = !{!131}
!131 = distinct !{!131, !129, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 1"}
!132 = distinct !{!132, !14}
!133 = distinct !{!133, !17, !14}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!136 = distinct !{!136, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!137 = !{!138}
!138 = distinct !{!138, !136, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!141 = distinct !{!141, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!142 = !{!143}
!143 = distinct !{!143, !141, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!144 = !{!145}
!145 = distinct !{!145, !146, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!146 = distinct !{!146, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!147 = !{!148}
!148 = distinct !{!148, !146, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!149 = distinct !{!149, !12}
!150 = distinct !{!150, !14}
!151 = distinct !{!151, !12}
!152 = distinct !{!152, !17, !14}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!155 = distinct !{!155, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!156 = !{!157}
!157 = distinct !{!157, !155, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!160 = distinct !{!160, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!161 = !{!162}
!162 = distinct !{!162, !160, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!163 = !{!164, !166}
!164 = distinct !{!164, !165, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!165 = distinct !{!165, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!166 = distinct !{!166, !167, !"_ZN3jxl6N_AVX321NumNonZero8x8ExceptDCEPKiPi: argument 0"}
!167 = distinct !{!167, !"_ZN3jxl6N_AVX321NumNonZero8x8ExceptDCEPKiPi"}
!168 = !{!169, !170}
!169 = distinct !{!169, !165, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!170 = distinct !{!170, !167, !"_ZN3jxl6N_AVX321NumNonZero8x8ExceptDCEPKiPi: argument 1"}
!171 = !{!172, !166}
!172 = distinct !{!172, !173, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!173 = distinct !{!173, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!174 = !{!175, !170}
!175 = distinct !{!175, !173, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!176 = !{!170}
!177 = !{!166}
!178 = !{!179}
!179 = distinct !{!179, !180, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!180 = distinct !{!180, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!181 = !{!182, !183, !185}
!182 = distinct !{!182, !180, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!183 = distinct !{!183, !184, !"_ZN3jxl6N_AVX319NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 0"}
!184 = distinct !{!184, !"_ZN3jxl6N_AVX319NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi"}
!185 = distinct !{!185, !184, !"_ZN3jxl6N_AVX319NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 1"}
!186 = !{!187, !183}
!187 = distinct !{!187, !188, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!188 = distinct !{!188, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!189 = !{!190, !185}
!190 = distinct !{!190, !188, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!191 = !{!192, !183}
!192 = distinct !{!192, !193, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!193 = distinct !{!193, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!194 = !{!195, !185}
!195 = distinct !{!195, !193, !"_ZN3hwy6N_AVX3L4LoadIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!196 = !{!185}
!197 = !{!183}
!198 = distinct !{!198, !14}
!199 = distinct !{!199, !12}
!200 = distinct !{!200, !17, !14}
!201 = !{!202}
!202 = distinct !{!202, !203, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 0"}
!203 = distinct !{!203, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi"}
!204 = !{!205}
!205 = distinct !{!205, !203, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 1"}
!206 = distinct !{!206, !14}
!207 = distinct !{!207, !17, !14}
!208 = !{!209, !211}
!209 = distinct !{!209, !210, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!210 = distinct !{!210, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!211 = distinct !{!211, !212, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!212 = distinct !{!212, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!213 = !{!214}
!214 = distinct !{!214, !215, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!215 = distinct !{!215, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!216 = distinct !{!216, !14}
!217 = !{!218}
!218 = distinct !{!218, !219, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!219 = distinct !{!219, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!220 = distinct !{!220, !14}
!221 = distinct !{!221, !14}
!222 = distinct !{!222, !12}
!223 = distinct !{!223, !17, !14}
!224 = !{!225}
!225 = distinct !{!225, !226, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!226 = distinct !{!226, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!229 = distinct !{!229, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!230 = !{!231, !233}
!231 = distinct !{!231, !232, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!232 = distinct !{!232, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!233 = distinct !{!233, !234, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!234 = distinct !{!234, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!235 = !{!236, !238}
!236 = distinct !{!236, !237, !"_ZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 0"}
!237 = distinct !{!237, !"_ZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi"}
!238 = distinct !{!238, !237, !"_ZN3jxl8N_SCALAR19NumNonZeroExceptLLFEmmNS_10AcStrategyEmmPKimPi: argument 1"}
!239 = !{!240, !236}
!240 = distinct !{!240, !241, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!241 = distinct !{!241, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!242 = !{!238}
!243 = distinct !{!243, !14}
!244 = !{!245, !236}
!245 = distinct !{!245, !246, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!246 = distinct !{!246, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!247 = distinct !{!247, !14}
!248 = !{!236}
!249 = distinct !{!249, !14}
!250 = distinct !{!250, !12}
!251 = distinct !{!251, !17, !14}
!252 = !{!253}
!253 = distinct !{!253, !254, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 0"}
!254 = distinct !{!254, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi"}
!255 = !{!256}
!256 = distinct !{!256, !254, !"_ZN3jxlL21PredictFromTopAndLeftEPKiS1_mi: argument 1"}
!257 = distinct !{!257, !12}
!258 = !{i32 0, i32 33}
