; ModuleID = '../../third_party/opus/src/silk/float/corrMatrix_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/corrMatrix_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_corrVector_FLP(float*, float*, i32, i32, float* nocapture) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %5
  %8 = add nsw i32 %3, -1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds float, float* %0, i64 %9
  %11 = zext i32 %3 to i64
  br label %12

12:                                               ; preds = %12, %7
  %13 = phi i64 [ 0, %7 ], [ %19, %12 ]
  %14 = phi float* [ %10, %7 ], [ %18, %12 ]
  %15 = tail call double @silk_inner_product_FLP(float* %14, float* %1, i32 %2) #2
  %16 = fptrunc double %15 to float
  %17 = getelementptr inbounds float, float* %4, i64 %13
  store float %16, float* %17, align 4
  %18 = getelementptr inbounds float, float* %14, i64 -1
  %19 = add nuw nsw i64 %13, 1
  %20 = icmp eq i64 %19, %11
  br i1 %20, label %21, label %12

21:                                               ; preds = %12, %5
  ret void
}

declare double @silk_inner_product_FLP(float*, float*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_corrMatrix_FLP(float*, i32, i32, float* nocapture) local_unnamed_addr #0 {
  %5 = add i32 %2, -1
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = tail call double @silk_energy_FLP(float* %7, i32 %1) #2
  %9 = fptrunc double %8 to float
  store float %9, float* %3, align 4
  %10 = icmp sgt i32 %2, 1
  br i1 %10, label %11, label %89

11:                                               ; preds = %4
  %12 = sext i32 %2 to i64
  %13 = sext i32 %1 to i64
  %14 = zext i32 %2 to i64
  br label %15

15:                                               ; preds = %15, %11
  %16 = phi i64 [ 1, %11 ], [ %33, %15 ]
  %17 = phi double [ %8, %11 ], [ %28, %15 ]
  %18 = sub nsw i64 0, %16
  %19 = getelementptr inbounds float, float* %7, i64 %18
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %20
  %22 = sub nsw i64 %13, %16
  %23 = getelementptr inbounds float, float* %7, i64 %22
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %24
  %26 = fsub float %21, %25
  %27 = fpext float %26 to double
  %28 = fadd double %17, %27
  %29 = fptrunc double %28 to float
  %30 = mul nsw i64 %16, %12
  %31 = add nsw i64 %30, %16
  %32 = getelementptr inbounds float, float* %3, i64 %31
  store float %29, float* %32, align 4
  %33 = add nuw nsw i64 %16, 1
  %34 = icmp eq i64 %33, %14
  br i1 %34, label %35, label %15

35:                                               ; preds = %15
  br i1 %10, label %36, label %89

36:                                               ; preds = %35
  %37 = add nsw i32 %2, -2
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = sext i32 %2 to i64
  %41 = sext i32 %1 to i64
  %42 = zext i32 %2 to i64
  br label %43

43:                                               ; preds = %84, %36
  %44 = phi i64 [ 1, %36 ], [ %86, %84 ]
  %45 = phi i32 [ %5, %36 ], [ %87, %84 ]
  %46 = phi float* [ %39, %36 ], [ %85, %84 ]
  %47 = tail call double @silk_inner_product_FLP(float* %7, float* %46, i32 %1) #2
  %48 = fptrunc double %47 to float
  %49 = mul nsw i64 %44, %40
  %50 = getelementptr inbounds float, float* %3, i64 %49
  store float %48, float* %50, align 4
  %51 = getelementptr inbounds float, float* %3, i64 %44
  store float %48, float* %51, align 4
  %52 = sub nsw i64 %40, %44
  %53 = icmp sgt i64 %52, 1
  br i1 %53, label %54, label %84

54:                                               ; preds = %43
  %55 = zext i32 %45 to i64
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi i64 [ 1, %54 ], [ %82, %56 ]
  %58 = phi double [ %47, %54 ], [ %73, %56 ]
  %59 = sub nsw i64 0, %57
  %60 = getelementptr inbounds float, float* %7, i64 %59
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds float, float* %46, i64 %59
  %63 = load float, float* %62, align 4
  %64 = fmul float %61, %63
  %65 = sub nsw i64 %41, %57
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = load float, float* %66, align 4
  %68 = getelementptr inbounds float, float* %46, i64 %65
  %69 = load float, float* %68, align 4
  %70 = fmul float %67, %69
  %71 = fsub float %64, %70
  %72 = fpext float %71 to double
  %73 = fadd double %58, %72
  %74 = fptrunc double %73 to float
  %75 = add nuw nsw i64 %57, %44
  %76 = mul nsw i64 %75, %40
  %77 = add nsw i64 %76, %57
  %78 = getelementptr inbounds float, float* %3, i64 %77
  store float %74, float* %78, align 4
  %79 = mul nsw i64 %57, %40
  %80 = add nsw i64 %79, %75
  %81 = getelementptr inbounds float, float* %3, i64 %80
  store float %74, float* %81, align 4
  %82 = add nuw nsw i64 %57, 1
  %83 = icmp eq i64 %82, %55
  br i1 %83, label %84, label %56

84:                                               ; preds = %56, %43
  %85 = getelementptr inbounds float, float* %46, i64 -1
  %86 = add nuw nsw i64 %44, 1
  %87 = add i32 %45, -1
  %88 = icmp eq i64 %86, %42
  br i1 %88, label %89, label %43

89:                                               ; preds = %84, %4, %35
  ret void
}

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
